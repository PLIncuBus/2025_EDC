/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0023.log
 *  Created     : 15:38:15 (27/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:38:15.506]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:38:15.506]  
[15:38:15.507]  <debugvars>
[15:38:15.507]    // Pre-defined
[15:38:15.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:38:15.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:38:15.507]    __dp=0x00000000
[15:38:15.507]    __ap=0x00000000
[15:38:15.507]    __traceout=0x00000000      (Trace Disabled)
[15:38:15.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:38:15.507]    __FlashAddr=0x00000000
[15:38:15.507]    __FlashLen=0x00000000
[15:38:15.508]    __FlashArg=0x00000000
[15:38:15.508]    __FlashOp=0x00000000
[15:38:15.508]    __Result=0x00000000
[15:38:15.508]  </debugvars>
[15:38:15.508]  
[15:38:15.508]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:38:15.508]    <block atomic="false" info="">
[15:38:15.508]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:38:15.508]        // -> [isSWJ <= 0x00000001]
[15:38:15.508]      __var hasDormant = __protocol & 0x00020000;
[15:38:15.508]        // -> [hasDormant <= 0x00000000]
[15:38:15.509]      __var protType   = __protocol & 0x0000FFFF;
[15:38:15.509]        // -> [protType <= 0x00000002]
[15:38:15.509]    </block>
[15:38:15.509]    <control if="protType == 1" while="" timeout="0" info="">
[15:38:15.509]      // if-block "protType == 1"
[15:38:15.509]        // =>  FALSE
[15:38:15.509]      // skip if-block "protType == 1"
[15:38:15.509]    </control>
[15:38:15.509]    <control if="protType == 2" while="" timeout="0" info="">
[15:38:15.509]      // if-block "protType == 2"
[15:38:15.509]        // =>  TRUE
[15:38:15.509]      <control if="isSWJ" while="" timeout="0" info="">
[15:38:15.511]        // if-block "isSWJ"
[15:38:15.511]          // =>  TRUE
[15:38:15.511]        <control if="hasDormant" while="" timeout="0" info="">
[15:38:15.511]          // if-block "hasDormant"
[15:38:15.511]            // =>  FALSE
[15:38:15.511]          // skip if-block "hasDormant"
[15:38:15.511]        </control>
[15:38:15.511]        <control if="!hasDormant" while="" timeout="0" info="">
[15:38:15.511]          // if-block "!hasDormant"
[15:38:15.511]            // =>  TRUE
[15:38:15.511]          <block atomic="false" info="">
[15:38:15.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:38:15.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:38:15.513]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:38:15.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:38:15.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:38:15.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:38:15.522]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:38:15.523]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:38:15.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:38:15.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:38:15.525]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:38:15.527]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:38:15.528]          </block>
[15:38:15.528]          // end if-block "!hasDormant"
[15:38:15.528]        </control>
[15:38:15.528]        // end if-block "isSWJ"
[15:38:15.528]      </control>
[15:38:15.528]      <control if="!isSWJ" while="" timeout="0" info="">
[15:38:15.528]        // if-block "!isSWJ"
[15:38:15.528]          // =>  FALSE
[15:38:15.528]        // skip if-block "!isSWJ"
[15:38:15.528]      </control>
[15:38:15.528]      <block atomic="false" info="">
[15:38:15.528]        ReadDP(0x0);
[15:38:15.530]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:38:15.530]      </block>
[15:38:15.530]      // end if-block "protType == 2"
[15:38:15.530]    </control>
[15:38:15.530]  </sequence>
[15:38:15.532]  
[15:38:15.535]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:38:15.535]  
[15:38:15.536]  <debugvars>
[15:38:15.536]    // Pre-defined
[15:38:15.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:38:15.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:38:15.536]    __dp=0x00000000
[15:38:15.536]    __ap=0x00000000
[15:38:15.536]    __traceout=0x00000000      (Trace Disabled)
[15:38:15.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:38:15.536]    __FlashAddr=0x00000000
[15:38:15.536]    __FlashLen=0x00000000
[15:38:15.536]    __FlashArg=0x00000000
[15:38:15.536]    __FlashOp=0x00000000
[15:38:15.536]    __Result=0x00000000
[15:38:15.536]  </debugvars>
[15:38:15.536]  
[15:38:15.536]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:38:15.536]    <block atomic="false" info="">
[15:38:15.536]      __var SW_DP_ABORT       = 0x0;
[15:38:15.536]        // -> [SW_DP_ABORT <= 0x00000000]
[15:38:15.536]      __var DP_CTRL_STAT      = 0x4;
[15:38:15.536]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:38:15.538]      __var DP_SELECT         = 0x8;
[15:38:15.538]        // -> [DP_SELECT <= 0x00000008]
[15:38:15.538]      __var powered_down      = 0;
[15:38:15.538]        // -> [powered_down <= 0x00000000]
[15:38:15.538]      WriteDP(DP_SELECT, 0x00000000);
[15:38:15.540]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:38:15.540]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:38:15.543]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:38:15.543]        // -> [powered_down <= 0x00000001]
[15:38:15.543]    </block>
[15:38:15.543]    <control if="powered_down" while="" timeout="0" info="">
[15:38:15.543]      // if-block "powered_down"
[15:38:15.543]        // =>  TRUE
[15:38:15.543]      <block atomic="false" info="">
[15:38:15.543]        Message(0, "Debug/System power-up request sent");
[15:38:15.543]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:38:15.543]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:38:15.543]      </block>
[15:38:15.543]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:38:15.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:38:15.552]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:38:15.552]        // while-condition  =>  FALSE
[15:38:15.552]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:38:15.552]      </control>
[15:38:15.552]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:38:15.552]        // if-block "(__protocol & 0xFFFF) == 1"
[15:38:15.552]          // =>  FALSE
[15:38:15.552]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:38:15.552]      </control>
[15:38:15.552]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:38:15.552]        // if-block "(__protocol & 0xFFFF) == 2"
[15:38:15.552]          // =>  TRUE
[15:38:15.552]        <block atomic="false" info="">
[15:38:15.552]          Message(0, "executing SWD power up");
[15:38:15.555]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:38:15.557]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:38:15.557]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:38:15.560]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:38:15.560]        </block>
[15:38:15.560]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:38:15.562]      </control>
[15:38:15.562]      // end if-block "powered_down"
[15:38:15.562]    </control>
[15:38:15.562]    <block atomic="false" info="">
[15:38:15.562]      __var DEBUG_PORT_VAL    = 0;
[15:38:15.562]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:38:15.562]      __var ACCESS_POINT_VAL  = 0;
[15:38:15.562]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:38:15.562]      __ap = 1; 
[15:38:15.562]        // -> [__ap <= 0x00000001]
[15:38:15.562]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:38:15.564]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:38:15.564]      __ap = 4;
[15:38:15.564]        // -> [__ap <= 0x00000004]
[15:38:15.564]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:38:15.571]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:38:15.571]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:38:15.571]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:38:15.571]    </block>
[15:38:15.571]    <block atomic="false" info="">
[15:38:15.571]      __var nReset = 0x80;
[15:38:15.571]        // -> [nReset <= 0x00000080]
[15:38:15.571]      __var canReadPins = 0;
[15:38:15.571]        // -> [canReadPins <= 0x00000000]
[15:38:15.571]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:38:15.576]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:38:15.576]        // -> [canReadPins <= 0x00000001]
[15:38:15.576]    </block>
[15:38:15.576]    <control if="" while="1" timeout="200" info="">
[15:38:15.576]      // while "1"  (timeout="200")
[15:38:15.576]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.577]      // while "1"  (timeout="200")
[15:38:15.577]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.580]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.580]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.580]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.580]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.580]      // while-condition  =>  TRUE
[15:38:15.580]      // while "1"  (timeout="200")
[15:38:15.581]      // while-condition  =>  TRUE
[15:38:15.581]      // while "1"  (timeout="200")
[15:38:15.581]      // while  =>  TIMEOUT
[15:38:15.582]      // end while "1"
[15:38:15.582]    </control>
[15:38:15.582]    <control if="canReadPins" while="" timeout="0" info="">
[15:38:15.582]      // if-block "canReadPins"
[15:38:15.582]        // =>  TRUE
[15:38:15.582]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:38:15.582]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:38:15.582]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:38:15.582]        // while-condition  =>  FALSE
[15:38:15.582]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:38:15.582]      </control>
[15:38:15.582]      // end if-block "canReadPins"
[15:38:15.582]    </control>
[15:38:15.582]    <control if="!canReadPins" while="" timeout="0" info="">
[15:38:15.582]      // if-block "!canReadPins"
[15:38:15.582]        // =>  FALSE
[15:38:15.582]      // skip if-block "!canReadPins"
[15:38:15.582]    </control>
[15:38:15.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:38:15.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:38:15.582]        // =>  TRUE
[15:38:15.582]      <block atomic="false" info="">
[15:38:15.582]        WriteAP(0x00, 0x190008);
[15:38:15.586]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:38:15.586]        WriteAP(0xF0, 0x01);
[15:38:15.590]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:38:15.590]      </block>
[15:38:15.592]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:38:15.592]    </control>
[15:38:15.592]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:38:15.592]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:38:15.592]        // =>  FALSE
[15:38:15.592]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:38:15.592]    </control>
[15:38:15.592]    <block atomic="false" info="">
[15:38:15.592]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:38:15.595]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:38:15.595]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:38:15.595]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:38:15.601]      __ap = 0; //lets make sure we reset the access point selection
[15:38:15.603]        // -> [__ap <= 0x00000000]
[15:38:15.603]    </block>
[15:38:15.603]  </sequence>
[15:38:15.603]  
[15:38:15.633]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:38:15.633]  
[15:38:15.633]  <debugvars>
[15:38:15.633]    // Pre-defined
[15:38:15.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:38:15.633]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:38:15.633]    __dp=0x00000000
[15:38:15.633]    __ap=0x00000000
[15:38:15.633]    __traceout=0x00000000      (Trace Disabled)
[15:38:15.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:38:15.633]    __FlashAddr=0x00000000
[15:38:15.633]    __FlashLen=0x00000000
[15:38:15.633]    __FlashArg=0x00000000
[15:38:15.633]    __FlashOp=0x00000000
[15:38:15.633]    __Result=0x00000000
[15:38:15.633]  </debugvars>
[15:38:15.633]  
[15:38:15.633]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:38:15.633]    <block atomic="false" info="">
[15:38:15.633]      __var deviceID = 0;
[15:38:15.633]        // -> [deviceID <= 0x00000000]
[15:38:15.633]      __var version = 0;
[15:38:15.633]        // -> [version <= 0x00000000]
[15:38:15.633]      __var partNum = 0;
[15:38:15.633]        // -> [partNum <= 0x00000000]
[15:38:15.633]      __var manuf = 0;
[15:38:15.633]        // -> [manuf <= 0x00000000]
[15:38:15.633]      __var isMSPM0G1X0X_G3X0X = 0;
[15:38:15.633]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:38:15.633]      __var isProduction = 0;
[15:38:15.633]        // -> [isProduction <= 0x00000000]
[15:38:15.633]      __var continueId = 0;
[15:38:15.633]        // -> [continueId <= 0x00000000]
[15:38:15.633]      deviceID =   Read32(0x41C40004);
[15:38:15.633]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:38:15.633]        // -> [deviceID <= 0x2BB8802F]
[15:38:15.633]      version = deviceID >> 28;
[15:38:15.633]        // -> [version <= 0x00000002]
[15:38:15.633]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:38:15.633]        // -> [partNum <= 0x0000BB88]
[15:38:15.633]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:38:15.642]        // -> [manuf <= 0x00000017]
[15:38:15.642]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:38:15.642]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:38:15.642]      isProduction = (version > 0);
[15:38:15.642]        // -> [isProduction <= 0x00000001]
[15:38:15.642]    </block>
[15:38:15.642]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:38:15.642]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:38:15.642]        // =>  FALSE
[15:38:15.642]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:38:15.642]    </control>
[15:38:15.642]    <control if="continueId == 4" while="" timeout="0" info="">
[15:38:15.642]      // if-block "continueId == 4"
[15:38:15.642]        // =>  FALSE
[15:38:15.642]      // skip if-block "continueId == 4"
[15:38:15.642]    </control>
[15:38:15.642]    <control if="!isProduction" while="" timeout="0" info="">
[15:38:15.642]      // if-block "!isProduction"
[15:38:15.642]        // =>  FALSE
[15:38:15.642]      // skip if-block "!isProduction"
[15:38:15.642]    </control>
[15:38:15.642]  </sequence>
[15:38:15.642]  
[15:40:34.464]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:40:34.464]  
[15:40:34.464]  <debugvars>
[15:40:34.464]    // Pre-defined
[15:40:34.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:34.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:34.474]    __dp=0x00000000
[15:40:34.474]    __ap=0x00000000
[15:40:34.474]    __traceout=0x00000000      (Trace Disabled)
[15:40:34.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:34.475]    __FlashAddr=0x00000000
[15:40:34.475]    __FlashLen=0x00000000
[15:40:34.475]    __FlashArg=0x00000000
[15:40:34.475]    __FlashOp=0x00000000
[15:40:34.475]    __Result=0x00000000
[15:40:34.475]  </debugvars>
[15:40:34.475]  
[15:40:34.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:40:34.475]    <block atomic="false" info="">
[15:40:34.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:40:34.475]        // -> [isSWJ <= 0x00000001]
[15:40:34.475]      __var hasDormant = __protocol & 0x00020000;
[15:40:34.475]        // -> [hasDormant <= 0x00000000]
[15:40:34.475]      __var protType   = __protocol & 0x0000FFFF;
[15:40:34.475]        // -> [protType <= 0x00000002]
[15:40:34.475]    </block>
[15:40:34.475]    <control if="protType == 1" while="" timeout="0" info="">
[15:40:34.475]      // if-block "protType == 1"
[15:40:34.475]        // =>  FALSE
[15:40:34.475]      // skip if-block "protType == 1"
[15:40:34.475]    </control>
[15:40:34.475]    <control if="protType == 2" while="" timeout="0" info="">
[15:40:34.475]      // if-block "protType == 2"
[15:40:34.475]        // =>  TRUE
[15:40:34.475]      <control if="isSWJ" while="" timeout="0" info="">
[15:40:34.475]        // if-block "isSWJ"
[15:40:34.475]          // =>  TRUE
[15:40:34.475]        <control if="hasDormant" while="" timeout="0" info="">
[15:40:34.475]          // if-block "hasDormant"
[15:40:34.475]            // =>  FALSE
[15:40:34.475]          // skip if-block "hasDormant"
[15:40:34.475]        </control>
[15:40:34.475]        <control if="!hasDormant" while="" timeout="0" info="">
[15:40:34.475]          // if-block "!hasDormant"
[15:40:34.475]            // =>  TRUE
[15:40:34.475]          <block atomic="false" info="">
[15:40:34.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:40:34.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:34.475]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:40:34.475]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:40:34.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:40:34.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:34.484]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:40:34.484]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:40:34.484]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:40:34.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:40:34.495]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:40:34.495]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:40:34.504]          </block>
[15:40:34.504]          // end if-block "!hasDormant"
[15:40:34.504]        </control>
[15:40:34.504]        // end if-block "isSWJ"
[15:40:34.504]      </control>
[15:40:34.504]      <control if="!isSWJ" while="" timeout="0" info="">
[15:40:34.504]        // if-block "!isSWJ"
[15:40:34.504]          // =>  FALSE
[15:40:34.504]        // skip if-block "!isSWJ"
[15:40:34.504]      </control>
[15:40:34.505]      <block atomic="false" info="">
[15:40:34.505]        ReadDP(0x0);
[15:40:34.505]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:40:34.505]      </block>
[15:40:34.505]      // end if-block "protType == 2"
[15:40:34.505]    </control>
[15:40:34.505]  </sequence>
[15:40:34.505]  
[15:40:34.505]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:40:34.505]  
[15:40:34.505]  <debugvars>
[15:40:34.505]    // Pre-defined
[15:40:34.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:34.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:34.505]    __dp=0x00000000
[15:40:34.505]    __ap=0x00000000
[15:40:34.505]    __traceout=0x00000000      (Trace Disabled)
[15:40:34.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:34.505]    __FlashAddr=0x00000000
[15:40:34.505]    __FlashLen=0x00000000
[15:40:34.505]    __FlashArg=0x00000000
[15:40:34.505]    __FlashOp=0x00000000
[15:40:34.505]    __Result=0x00000000
[15:40:34.505]  </debugvars>
[15:40:34.505]  
[15:40:34.505]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:40:34.514]    <block atomic="false" info="">
[15:40:34.514]      __var SW_DP_ABORT       = 0x0;
[15:40:34.514]        // -> [SW_DP_ABORT <= 0x00000000]
[15:40:34.514]      __var DP_CTRL_STAT      = 0x4;
[15:40:34.514]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:40:34.514]      __var DP_SELECT         = 0x8;
[15:40:34.514]        // -> [DP_SELECT <= 0x00000008]
[15:40:34.514]      __var powered_down      = 0;
[15:40:34.514]        // -> [powered_down <= 0x00000000]
[15:40:34.514]      WriteDP(DP_SELECT, 0x00000000);
[15:40:34.514]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:40:34.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:40:34.514]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:40:34.514]        // -> [powered_down <= 0x00000001]
[15:40:34.514]    </block>
[15:40:34.514]    <control if="powered_down" while="" timeout="0" info="">
[15:40:34.514]      // if-block "powered_down"
[15:40:34.514]        // =>  TRUE
[15:40:34.514]      <block atomic="false" info="">
[15:40:34.514]        Message(0, "Debug/System power-up request sent");
[15:40:34.514]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:40:34.524]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:40:34.525]      </block>
[15:40:34.525]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:40:34.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:40:34.526]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:40:34.526]        // while-condition  =>  FALSE
[15:40:34.526]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:40:34.526]      </control>
[15:40:34.526]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:40:34.526]        // if-block "(__protocol & 0xFFFF) == 1"
[15:40:34.526]          // =>  FALSE
[15:40:34.528]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:40:34.528]      </control>
[15:40:34.528]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:40:34.528]        // if-block "(__protocol & 0xFFFF) == 2"
[15:40:34.528]          // =>  TRUE
[15:40:34.528]        <block atomic="false" info="">
[15:40:34.528]          Message(0, "executing SWD power up");
[15:40:34.528]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:40:34.533]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:40:34.533]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:40:34.533]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:40:34.533]        </block>
[15:40:34.533]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:40:34.533]      </control>
[15:40:34.533]      // end if-block "powered_down"
[15:40:34.533]    </control>
[15:40:34.533]    <block atomic="false" info="">
[15:40:34.533]      __var DEBUG_PORT_VAL    = 0;
[15:40:34.533]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:40:34.533]      __var ACCESS_POINT_VAL  = 0;
[15:40:34.533]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:40:34.533]      __ap = 1; 
[15:40:34.533]        // -> [__ap <= 0x00000001]
[15:40:34.533]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:40:34.544]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:40:34.544]      __ap = 4;
[15:40:34.544]        // -> [__ap <= 0x00000004]
[15:40:34.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:40:34.544]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:40:34.544]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:40:34.544]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:40:34.553]    </block>
[15:40:34.553]    <block atomic="false" info="">
[15:40:34.553]      __var nReset = 0x80;
[15:40:34.553]        // -> [nReset <= 0x00000080]
[15:40:34.553]      __var canReadPins = 0;
[15:40:34.553]        // -> [canReadPins <= 0x00000000]
[15:40:34.553]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:40:34.563]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:40:34.563]        // -> [canReadPins <= 0x00000001]
[15:40:34.563]    </block>
[15:40:34.563]    <control if="" while="1" timeout="200" info="">
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.563]      // while-condition  =>  TRUE
[15:40:34.563]      // while "1"  (timeout="200")
[15:40:34.566]      // while-condition  =>  TRUE
[15:40:34.566]      // while "1"  (timeout="200")
[15:40:34.566]      // while  =>  TIMEOUT
[15:40:34.566]      // end while "1"
[15:40:34.566]    </control>
[15:40:34.566]    <control if="canReadPins" while="" timeout="0" info="">
[15:40:34.566]      // if-block "canReadPins"
[15:40:34.566]        // =>  TRUE
[15:40:34.566]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:40:34.566]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:40:34.566]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:40:34.566]        // while-condition  =>  FALSE
[15:40:34.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:40:34.566]      </control>
[15:40:34.566]      // end if-block "canReadPins"
[15:40:34.566]    </control>
[15:40:34.566]    <control if="!canReadPins" while="" timeout="0" info="">
[15:40:34.566]      // if-block "!canReadPins"
[15:40:34.566]        // =>  FALSE
[15:40:34.566]      // skip if-block "!canReadPins"
[15:40:34.566]    </control>
[15:40:34.566]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:40:34.566]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:40:34.566]        // =>  TRUE
[15:40:34.566]      <block atomic="false" info="">
[15:40:34.566]        WriteAP(0x00, 0x190008);
[15:40:34.574]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:40:34.575]        WriteAP(0xF0, 0x01);
[15:40:34.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:40:34.576]      </block>
[15:40:34.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:40:34.576]    </control>
[15:40:34.576]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:40:34.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:40:34.576]        // =>  FALSE
[15:40:34.576]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:40:34.576]    </control>
[15:40:34.576]    <block atomic="false" info="">
[15:40:34.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:40:34.583]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:40:34.583]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:40:34.583]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:40:34.583]      __ap = 0; //lets make sure we reset the access point selection
[15:40:34.583]        // -> [__ap <= 0x00000000]
[15:40:34.583]    </block>
[15:40:34.583]  </sequence>
[15:40:34.583]  
[15:40:34.615]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:40:34.615]  
[15:40:34.615]  <debugvars>
[15:40:34.615]    // Pre-defined
[15:40:34.624]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:40:34.624]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:40:34.624]    __dp=0x00000000
[15:40:34.624]    __ap=0x00000000
[15:40:34.624]    __traceout=0x00000000      (Trace Disabled)
[15:40:34.624]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:40:34.624]    __FlashAddr=0x00000000
[15:40:34.624]    __FlashLen=0x00000000
[15:40:34.624]    __FlashArg=0x00000000
[15:40:34.624]    __FlashOp=0x00000000
[15:40:34.624]    __Result=0x00000000
[15:40:34.624]  </debugvars>
[15:40:34.624]  
[15:40:34.624]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:40:34.624]    <block atomic="false" info="">
[15:40:34.624]      __var deviceID = 0;
[15:40:34.625]        // -> [deviceID <= 0x00000000]
[15:40:34.625]      __var version = 0;
[15:40:34.625]        // -> [version <= 0x00000000]
[15:40:34.625]      __var partNum = 0;
[15:40:34.626]        // -> [partNum <= 0x00000000]
[15:40:34.626]      __var manuf = 0;
[15:40:34.626]        // -> [manuf <= 0x00000000]
[15:40:34.626]      __var isMSPM0G1X0X_G3X0X = 0;
[15:40:34.626]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:40:34.626]      __var isProduction = 0;
[15:40:34.626]        // -> [isProduction <= 0x00000000]
[15:40:34.626]      __var continueId = 0;
[15:40:34.626]        // -> [continueId <= 0x00000000]
[15:40:34.626]      deviceID =   Read32(0x41C40004);
[15:40:34.634]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:40:34.634]        // -> [deviceID <= 0x2BB8802F]
[15:40:34.634]      version = deviceID >> 28;
[15:40:34.634]        // -> [version <= 0x00000002]
[15:40:34.634]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:40:34.634]        // -> [partNum <= 0x0000BB88]
[15:40:34.634]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:40:34.634]        // -> [manuf <= 0x00000017]
[15:40:34.634]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:40:34.634]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:40:34.634]      isProduction = (version > 0);
[15:40:34.634]        // -> [isProduction <= 0x00000001]
[15:40:34.634]    </block>
[15:40:34.634]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:40:34.634]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:40:34.636]        // =>  FALSE
[15:40:34.636]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:40:34.636]    </control>
[15:40:34.636]    <control if="continueId == 4" while="" timeout="0" info="">
[15:40:34.636]      // if-block "continueId == 4"
[15:40:34.636]        // =>  FALSE
[15:40:34.636]      // skip if-block "continueId == 4"
[15:40:34.636]    </control>
[15:40:34.636]    <control if="!isProduction" while="" timeout="0" info="">
[15:40:34.636]      // if-block "!isProduction"
[15:40:34.636]        // =>  FALSE
[15:40:34.636]      // skip if-block "!isProduction"
[15:40:34.636]    </control>
[15:40:34.636]  </sequence>
[15:40:34.636]  
[15:41:16.829]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:41:16.829]  
[15:41:16.845]  <debugvars>
[15:41:16.845]    // Pre-defined
[15:41:16.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:16.845]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:16.845]    __dp=0x00000000
[15:41:16.845]    __ap=0x00000000
[15:41:16.845]    __traceout=0x00000000      (Trace Disabled)
[15:41:16.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:16.845]    __FlashAddr=0x00000000
[15:41:16.845]    __FlashLen=0x00000000
[15:41:16.845]    __FlashArg=0x00000000
[15:41:16.845]    __FlashOp=0x00000000
[15:41:16.845]    __Result=0x00000000
[15:41:16.845]  </debugvars>
[15:41:16.845]  
[15:41:16.845]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:41:16.845]    <block atomic="false" info="">
[15:41:16.845]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:41:16.845]        // -> [isSWJ <= 0x00000001]
[15:41:16.845]      __var hasDormant = __protocol & 0x00020000;
[15:41:16.845]        // -> [hasDormant <= 0x00000000]
[15:41:16.845]      __var protType   = __protocol & 0x0000FFFF;
[15:41:16.845]        // -> [protType <= 0x00000002]
[15:41:16.845]    </block>
[15:41:16.845]    <control if="protType == 1" while="" timeout="0" info="">
[15:41:16.845]      // if-block "protType == 1"
[15:41:16.845]        // =>  FALSE
[15:41:16.845]      // skip if-block "protType == 1"
[15:41:16.845]    </control>
[15:41:16.845]    <control if="protType == 2" while="" timeout="0" info="">
[15:41:16.845]      // if-block "protType == 2"
[15:41:16.845]        // =>  TRUE
[15:41:16.845]      <control if="isSWJ" while="" timeout="0" info="">
[15:41:16.845]        // if-block "isSWJ"
[15:41:16.845]          // =>  TRUE
[15:41:16.845]        <control if="hasDormant" while="" timeout="0" info="">
[15:41:16.845]          // if-block "hasDormant"
[15:41:16.849]            // =>  FALSE
[15:41:16.849]          // skip if-block "hasDormant"
[15:41:16.849]        </control>
[15:41:16.849]        <control if="!hasDormant" while="" timeout="0" info="">
[15:41:16.849]          // if-block "!hasDormant"
[15:41:16.849]            // =>  TRUE
[15:41:16.849]          <block atomic="false" info="">
[15:41:16.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:41:16.849]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:16.849]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:41:16.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:41:16.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:41:16.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:16.859]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:41:16.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:41:16.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:41:16.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:16.859]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:41:16.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:41:16.869]          </block>
[15:41:16.869]          // end if-block "!hasDormant"
[15:41:16.869]        </control>
[15:41:16.869]        // end if-block "isSWJ"
[15:41:16.869]      </control>
[15:41:16.869]      <control if="!isSWJ" while="" timeout="0" info="">
[15:41:16.869]        // if-block "!isSWJ"
[15:41:16.869]          // =>  FALSE
[15:41:16.869]        // skip if-block "!isSWJ"
[15:41:16.869]      </control>
[15:41:16.869]      <block atomic="false" info="">
[15:41:16.869]        ReadDP(0x0);
[15:41:16.869]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:41:16.869]      </block>
[15:41:16.869]      // end if-block "protType == 2"
[15:41:16.869]    </control>
[15:41:16.869]  </sequence>
[15:41:16.869]  
[15:41:16.879]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:41:16.879]  
[15:41:16.879]  <debugvars>
[15:41:16.879]    // Pre-defined
[15:41:16.879]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:16.879]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:16.879]    __dp=0x00000000
[15:41:16.880]    __ap=0x00000000
[15:41:16.880]    __traceout=0x00000000      (Trace Disabled)
[15:41:16.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:16.880]    __FlashAddr=0x00000000
[15:41:16.880]    __FlashLen=0x00000000
[15:41:16.880]    __FlashArg=0x00000000
[15:41:16.880]    __FlashOp=0x00000000
[15:41:16.880]    __Result=0x00000000
[15:41:16.880]  </debugvars>
[15:41:16.880]  
[15:41:16.880]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:41:16.880]    <block atomic="false" info="">
[15:41:16.880]      __var SW_DP_ABORT       = 0x0;
[15:41:16.880]        // -> [SW_DP_ABORT <= 0x00000000]
[15:41:16.880]      __var DP_CTRL_STAT      = 0x4;
[15:41:16.880]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:41:16.880]      __var DP_SELECT         = 0x8;
[15:41:16.880]        // -> [DP_SELECT <= 0x00000008]
[15:41:16.880]      __var powered_down      = 0;
[15:41:16.880]        // -> [powered_down <= 0x00000000]
[15:41:16.880]      WriteDP(DP_SELECT, 0x00000000);
[15:41:16.880]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:41:16.880]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:41:16.880]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:41:16.880]        // -> [powered_down <= 0x00000001]
[15:41:16.889]    </block>
[15:41:16.889]    <control if="powered_down" while="" timeout="0" info="">
[15:41:16.889]      // if-block "powered_down"
[15:41:16.889]        // =>  TRUE
[15:41:16.889]      <block atomic="false" info="">
[15:41:16.889]        Message(0, "Debug/System power-up request sent");
[15:41:16.891]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:41:16.899]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:41:16.899]      </block>
[15:41:16.899]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:41:16.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:41:16.899]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:41:16.899]        // while-condition  =>  FALSE
[15:41:16.899]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:41:16.899]      </control>
[15:41:16.899]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:41:16.899]        // if-block "(__protocol & 0xFFFF) == 1"
[15:41:16.899]          // =>  FALSE
[15:41:16.899]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:41:16.899]      </control>
[15:41:16.899]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:41:16.899]        // if-block "(__protocol & 0xFFFF) == 2"
[15:41:16.909]          // =>  TRUE
[15:41:16.909]        <block atomic="false" info="">
[15:41:16.909]          Message(0, "executing SWD power up");
[15:41:16.910]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:41:16.913]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:41:16.913]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:41:16.913]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:41:16.913]        </block>
[15:41:16.913]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:41:16.919]      </control>
[15:41:16.919]      // end if-block "powered_down"
[15:41:16.919]    </control>
[15:41:16.919]    <block atomic="false" info="">
[15:41:16.919]      __var DEBUG_PORT_VAL    = 0;
[15:41:16.919]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:41:16.919]      __var ACCESS_POINT_VAL  = 0;
[15:41:16.919]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:41:16.919]      __ap = 1; 
[15:41:16.919]        // -> [__ap <= 0x00000001]
[15:41:16.919]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:41:16.929]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:41:16.929]      __ap = 4;
[15:41:16.929]        // -> [__ap <= 0x00000004]
[15:41:16.929]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:16.939]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:41:16.939]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:41:16.939]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:16.939]    </block>
[15:41:16.939]    <block atomic="false" info="">
[15:41:16.939]      __var nReset = 0x80;
[15:41:16.939]        // -> [nReset <= 0x00000080]
[15:41:16.939]      __var canReadPins = 0;
[15:41:16.939]        // -> [canReadPins <= 0x00000000]
[15:41:16.939]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:41:16.946]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:41:16.946]        // -> [canReadPins <= 0x00000001]
[15:41:16.946]    </block>
[15:41:16.946]    <control if="" while="1" timeout="200" info="">
[15:41:16.949]      // while "1"  (timeout="200")
[15:41:16.949]      // while-condition  =>  TRUE
[15:41:16.949]      // while "1"  (timeout="200")
[15:41:16.949]      // while-condition  =>  TRUE
[15:41:16.949]      // while "1"  (timeout="200")
[15:41:16.949]      // while-condition  =>  TRUE
[15:41:16.949]      // while "1"  (timeout="200")
[15:41:16.949]      // while-condition  =>  TRUE
[15:41:16.949]      // while "1"  (timeout="200")
[15:41:16.949]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.951]      // while "1"  (timeout="200")
[15:41:16.951]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.956]      // while "1"  (timeout="200")
[15:41:16.956]      // while-condition  =>  TRUE
[15:41:16.959]      // while "1"  (timeout="200")
[15:41:16.959]      // while  =>  TIMEOUT
[15:41:16.959]      // end while "1"
[15:41:16.959]    </control>
[15:41:16.959]    <control if="canReadPins" while="" timeout="0" info="">
[15:41:16.959]      // if-block "canReadPins"
[15:41:16.959]        // =>  TRUE
[15:41:16.959]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:41:16.960]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:41:16.961]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:41:16.961]        // while-condition  =>  FALSE
[15:41:16.961]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:41:16.961]      </control>
[15:41:16.961]      // end if-block "canReadPins"
[15:41:16.961]    </control>
[15:41:16.961]    <control if="!canReadPins" while="" timeout="0" info="">
[15:41:16.961]      // if-block "!canReadPins"
[15:41:16.961]        // =>  FALSE
[15:41:16.961]      // skip if-block "!canReadPins"
[15:41:16.961]    </control>
[15:41:16.961]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:41:16.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:16.961]        // =>  TRUE
[15:41:16.961]      <block atomic="false" info="">
[15:41:16.961]        WriteAP(0x00, 0x190008);
[15:41:16.961]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:16.961]        WriteAP(0xF0, 0x01);
[15:41:16.973]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:16.973]      </block>
[15:41:16.973]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:16.973]    </control>
[15:41:16.973]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:41:16.973]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:16.980]        // =>  FALSE
[15:41:16.980]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:16.980]    </control>
[15:41:16.980]    <block atomic="false" info="">
[15:41:16.980]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:16.980]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:41:16.980]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:41:16.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:16.980]      __ap = 0; //lets make sure we reset the access point selection
[15:41:16.980]        // -> [__ap <= 0x00000000]
[15:41:16.980]    </block>
[15:41:16.988]  </sequence>
[15:41:16.988]  
[15:41:17.001]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:41:17.001]  
[15:41:17.001]  <debugvars>
[15:41:17.001]    // Pre-defined
[15:41:17.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:17.011]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:17.011]    __dp=0x00000000
[15:41:17.011]    __ap=0x00000000
[15:41:17.011]    __traceout=0x00000000      (Trace Disabled)
[15:41:17.011]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:17.011]    __FlashAddr=0x00000000
[15:41:17.011]    __FlashLen=0x00000000
[15:41:17.011]    __FlashArg=0x00000000
[15:41:17.011]    __FlashOp=0x00000000
[15:41:17.011]    __Result=0x00000000
[15:41:17.011]  </debugvars>
[15:41:17.011]  
[15:41:17.011]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:41:17.011]    <block atomic="false" info="">
[15:41:17.011]      __var deviceID = 0;
[15:41:17.011]        // -> [deviceID <= 0x00000000]
[15:41:17.011]      __var version = 0;
[15:41:17.011]        // -> [version <= 0x00000000]
[15:41:17.011]      __var partNum = 0;
[15:41:17.011]        // -> [partNum <= 0x00000000]
[15:41:17.011]      __var manuf = 0;
[15:41:17.011]        // -> [manuf <= 0x00000000]
[15:41:17.011]      __var isMSPM0G1X0X_G3X0X = 0;
[15:41:17.011]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:41:17.011]      __var isProduction = 0;
[15:41:17.011]        // -> [isProduction <= 0x00000000]
[15:41:17.011]      __var continueId = 0;
[15:41:17.011]        // -> [continueId <= 0x00000000]
[15:41:17.011]      deviceID =   Read32(0x41C40004);
[15:41:17.011]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:41:17.011]        // -> [deviceID <= 0x2BB8802F]
[15:41:17.011]      version = deviceID >> 28;
[15:41:17.011]        // -> [version <= 0x00000002]
[15:41:17.011]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:41:17.011]        // -> [partNum <= 0x0000BB88]
[15:41:17.011]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:41:17.011]        // -> [manuf <= 0x00000017]
[15:41:17.011]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:41:17.011]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:41:17.011]      isProduction = (version > 0);
[15:41:17.011]        // -> [isProduction <= 0x00000001]
[15:41:17.011]    </block>
[15:41:17.011]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:41:17.011]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:41:17.011]        // =>  FALSE
[15:41:17.011]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:41:17.011]    </control>
[15:41:17.011]    <control if="continueId == 4" while="" timeout="0" info="">
[15:41:17.011]      // if-block "continueId == 4"
[15:41:17.011]        // =>  FALSE
[15:41:17.021]      // skip if-block "continueId == 4"
[15:41:17.021]    </control>
[15:41:17.021]    <control if="!isProduction" while="" timeout="0" info="">
[15:41:17.021]      // if-block "!isProduction"
[15:41:17.021]        // =>  FALSE
[15:41:17.021]      // skip if-block "!isProduction"
[15:41:17.021]    </control>
[15:41:17.021]  </sequence>
[15:41:17.021]  
[15:41:46.392]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:41:46.392]  
[15:41:46.392]  <debugvars>
[15:41:46.392]    // Pre-defined
[15:41:46.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:46.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:46.392]    __dp=0x00000000
[15:41:46.392]    __ap=0x00000000
[15:41:46.392]    __traceout=0x00000000      (Trace Disabled)
[15:41:46.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:46.392]    __FlashAddr=0x00000000
[15:41:46.392]    __FlashLen=0x00000000
[15:41:46.392]    __FlashArg=0x00000000
[15:41:46.392]    __FlashOp=0x00000000
[15:41:46.392]    __Result=0x00000000
[15:41:46.392]  </debugvars>
[15:41:46.392]  
[15:41:46.392]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:41:46.392]    <block atomic="false" info="">
[15:41:46.392]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:41:46.392]        // -> [isSWJ <= 0x00000001]
[15:41:46.392]      __var hasDormant = __protocol & 0x00020000;
[15:41:46.392]        // -> [hasDormant <= 0x00000000]
[15:41:46.392]      __var protType   = __protocol & 0x0000FFFF;
[15:41:46.392]        // -> [protType <= 0x00000002]
[15:41:46.392]    </block>
[15:41:46.399]    <control if="protType == 1" while="" timeout="0" info="">
[15:41:46.399]      // if-block "protType == 1"
[15:41:46.399]        // =>  FALSE
[15:41:46.399]      // skip if-block "protType == 1"
[15:41:46.399]    </control>
[15:41:46.399]    <control if="protType == 2" while="" timeout="0" info="">
[15:41:46.399]      // if-block "protType == 2"
[15:41:46.399]        // =>  TRUE
[15:41:46.399]      <control if="isSWJ" while="" timeout="0" info="">
[15:41:46.399]        // if-block "isSWJ"
[15:41:46.399]          // =>  TRUE
[15:41:46.399]        <control if="hasDormant" while="" timeout="0" info="">
[15:41:46.399]          // if-block "hasDormant"
[15:41:46.399]            // =>  FALSE
[15:41:46.399]          // skip if-block "hasDormant"
[15:41:46.400]        </control>
[15:41:46.400]        <control if="!hasDormant" while="" timeout="0" info="">
[15:41:46.400]          // if-block "!hasDormant"
[15:41:46.400]            // =>  TRUE
[15:41:46.400]          <block atomic="false" info="">
[15:41:46.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:41:46.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:46.401]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:41:46.404]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:41:46.404]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:41:46.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:46.410]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:41:46.417]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:41:46.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:41:46.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:46.419]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:41:46.420]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:41:46.423]          </block>
[15:41:46.424]          // end if-block "!hasDormant"
[15:41:46.424]        </control>
[15:41:46.424]        // end if-block "isSWJ"
[15:41:46.424]      </control>
[15:41:46.424]      <control if="!isSWJ" while="" timeout="0" info="">
[15:41:46.424]        // if-block "!isSWJ"
[15:41:46.424]          // =>  FALSE
[15:41:46.424]        // skip if-block "!isSWJ"
[15:41:46.424]      </control>
[15:41:46.424]      <block atomic="false" info="">
[15:41:46.424]        ReadDP(0x0);
[15:41:46.426]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:41:46.426]      </block>
[15:41:46.426]      // end if-block "protType == 2"
[15:41:46.426]    </control>
[15:41:46.426]  </sequence>
[15:41:46.426]  
[15:41:46.431]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:41:46.431]  
[15:41:46.431]  <debugvars>
[15:41:46.431]    // Pre-defined
[15:41:46.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:46.431]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:46.431]    __dp=0x00000000
[15:41:46.431]    __ap=0x00000000
[15:41:46.431]    __traceout=0x00000000      (Trace Disabled)
[15:41:46.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:46.431]    __FlashAddr=0x00000000
[15:41:46.431]    __FlashLen=0x00000000
[15:41:46.431]    __FlashArg=0x00000000
[15:41:46.431]    __FlashOp=0x00000000
[15:41:46.431]    __Result=0x00000000
[15:41:46.431]  </debugvars>
[15:41:46.431]  
[15:41:46.431]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:41:46.431]    <block atomic="false" info="">
[15:41:46.431]      __var SW_DP_ABORT       = 0x0;
[15:41:46.431]        // -> [SW_DP_ABORT <= 0x00000000]
[15:41:46.431]      __var DP_CTRL_STAT      = 0x4;
[15:41:46.431]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:41:46.431]      __var DP_SELECT         = 0x8;
[15:41:46.431]        // -> [DP_SELECT <= 0x00000008]
[15:41:46.431]      __var powered_down      = 0;
[15:41:46.431]        // -> [powered_down <= 0x00000000]
[15:41:46.431]      WriteDP(DP_SELECT, 0x00000000);
[15:41:46.435]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:41:46.435]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:41:46.436]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:41:46.436]        // -> [powered_down <= 0x00000001]
[15:41:46.436]    </block>
[15:41:46.436]    <control if="powered_down" while="" timeout="0" info="">
[15:41:46.436]      // if-block "powered_down"
[15:41:46.436]        // =>  TRUE
[15:41:46.436]      <block atomic="false" info="">
[15:41:46.438]        Message(0, "Debug/System power-up request sent");
[15:41:46.440]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:41:46.441]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:41:46.441]      </block>
[15:41:46.441]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:41:46.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:41:46.443]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:41:46.443]        // while-condition  =>  FALSE
[15:41:46.443]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:41:46.443]      </control>
[15:41:46.443]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:41:46.443]        // if-block "(__protocol & 0xFFFF) == 1"
[15:41:46.443]          // =>  FALSE
[15:41:46.443]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:41:46.443]      </control>
[15:41:46.443]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:41:46.443]        // if-block "(__protocol & 0xFFFF) == 2"
[15:41:46.443]          // =>  TRUE
[15:41:46.443]        <block atomic="false" info="">
[15:41:46.443]          Message(0, "executing SWD power up");
[15:41:46.443]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:41:46.443]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:41:46.443]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:41:46.451]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:41:46.451]        </block>
[15:41:46.451]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:41:46.451]      </control>
[15:41:46.451]      // end if-block "powered_down"
[15:41:46.451]    </control>
[15:41:46.451]    <block atomic="false" info="">
[15:41:46.451]      __var DEBUG_PORT_VAL    = 0;
[15:41:46.451]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:41:46.451]      __var ACCESS_POINT_VAL  = 0;
[15:41:46.451]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:41:46.451]      __ap = 1; 
[15:41:46.451]        // -> [__ap <= 0x00000001]
[15:41:46.451]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:41:46.451]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:41:46.451]      __ap = 4;
[15:41:46.451]        // -> [__ap <= 0x00000004]
[15:41:46.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:46.461]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:41:46.461]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:41:46.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:46.461]    </block>
[15:41:46.461]    <block atomic="false" info="">
[15:41:46.461]      __var nReset = 0x80;
[15:41:46.461]        // -> [nReset <= 0x00000080]
[15:41:46.461]      __var canReadPins = 0;
[15:41:46.461]        // -> [canReadPins <= 0x00000000]
[15:41:46.461]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:41:46.471]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:41:46.471]        // -> [canReadPins <= 0x00000001]
[15:41:46.471]    </block>
[15:41:46.471]    <control if="" while="1" timeout="200" info="">
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.471]      // while-condition  =>  TRUE
[15:41:46.471]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.481]      // while "1"  (timeout="200")
[15:41:46.481]      // while-condition  =>  TRUE
[15:41:46.491]      // while "1"  (timeout="200")
[15:41:46.491]      // while  =>  TIMEOUT
[15:41:46.491]      // end while "1"
[15:41:46.491]    </control>
[15:41:46.491]    <control if="canReadPins" while="" timeout="0" info="">
[15:41:46.491]      // if-block "canReadPins"
[15:41:46.491]        // =>  TRUE
[15:41:46.491]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:41:46.491]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:41:46.491]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:41:46.491]        // while-condition  =>  FALSE
[15:41:46.491]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:41:46.491]      </control>
[15:41:46.491]      // end if-block "canReadPins"
[15:41:46.491]    </control>
[15:41:46.491]    <control if="!canReadPins" while="" timeout="0" info="">
[15:41:46.491]      // if-block "!canReadPins"
[15:41:46.491]        // =>  FALSE
[15:41:46.491]      // skip if-block "!canReadPins"
[15:41:46.491]    </control>
[15:41:46.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:41:46.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:46.491]        // =>  TRUE
[15:41:46.491]      <block atomic="false" info="">
[15:41:46.491]        WriteAP(0x00, 0x190008);
[15:41:46.491]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:46.491]        WriteAP(0xF0, 0x01);
[15:41:46.501]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:46.501]      </block>
[15:41:46.501]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:46.501]    </control>
[15:41:46.501]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:41:46.501]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:46.501]        // =>  FALSE
[15:41:46.501]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:46.501]    </control>
[15:41:46.501]    <block atomic="false" info="">
[15:41:46.501]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:46.501]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:41:46.501]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:41:46.501]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:46.511]      __ap = 0; //lets make sure we reset the access point selection
[15:41:46.511]        // -> [__ap <= 0x00000000]
[15:41:46.511]    </block>
[15:41:46.511]  </sequence>
[15:41:46.511]  
[15:41:46.531]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:41:46.531]  
[15:41:46.531]  <debugvars>
[15:41:46.531]    // Pre-defined
[15:41:46.531]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:46.531]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:46.531]    __dp=0x00000000
[15:41:46.531]    __ap=0x00000000
[15:41:46.531]    __traceout=0x00000000      (Trace Disabled)
[15:41:46.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:46.531]    __FlashAddr=0x00000000
[15:41:46.531]    __FlashLen=0x00000000
[15:41:46.531]    __FlashArg=0x00000000
[15:41:46.531]    __FlashOp=0x00000000
[15:41:46.531]    __Result=0x00000000
[15:41:46.531]  </debugvars>
[15:41:46.531]  
[15:41:46.531]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:41:46.531]    <block atomic="false" info="">
[15:41:46.531]      __var deviceID = 0;
[15:41:46.531]        // -> [deviceID <= 0x00000000]
[15:41:46.531]      __var version = 0;
[15:41:46.531]        // -> [version <= 0x00000000]
[15:41:46.541]      __var partNum = 0;
[15:41:46.541]        // -> [partNum <= 0x00000000]
[15:41:46.541]      __var manuf = 0;
[15:41:46.541]        // -> [manuf <= 0x00000000]
[15:41:46.541]      __var isMSPM0G1X0X_G3X0X = 0;
[15:41:46.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:41:46.541]      __var isProduction = 0;
[15:41:46.541]        // -> [isProduction <= 0x00000000]
[15:41:46.541]      __var continueId = 0;
[15:41:46.541]        // -> [continueId <= 0x00000000]
[15:41:46.541]      deviceID =   Read32(0x41C40004);
[15:41:46.541]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:41:46.541]        // -> [deviceID <= 0x2BB8802F]
[15:41:46.541]      version = deviceID >> 28;
[15:41:46.541]        // -> [version <= 0x00000002]
[15:41:46.541]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:41:46.541]        // -> [partNum <= 0x0000BB88]
[15:41:46.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:41:46.541]        // -> [manuf <= 0x00000017]
[15:41:46.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:41:46.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:41:46.541]      isProduction = (version > 0);
[15:41:46.541]        // -> [isProduction <= 0x00000001]
[15:41:46.541]    </block>
[15:41:46.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:41:46.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:41:46.541]        // =>  FALSE
[15:41:46.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:41:46.541]    </control>
[15:41:46.541]    <control if="continueId == 4" while="" timeout="0" info="">
[15:41:46.541]      // if-block "continueId == 4"
[15:41:46.541]        // =>  FALSE
[15:41:46.551]      // skip if-block "continueId == 4"
[15:41:46.551]    </control>
[15:41:46.551]    <control if="!isProduction" while="" timeout="0" info="">
[15:41:46.551]      // if-block "!isProduction"
[15:41:46.551]        // =>  FALSE
[15:41:46.551]      // skip if-block "!isProduction"
[15:41:46.551]    </control>
[15:41:46.551]  </sequence>
[15:41:46.551]  
[15:44:01.741]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:44:01.741]  
[15:44:01.741]  <debugvars>
[15:44:01.741]    // Pre-defined
[15:44:01.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:01.741]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:01.741]    __dp=0x00000000
[15:44:01.741]    __ap=0x00000000
[15:44:01.741]    __traceout=0x00000000      (Trace Disabled)
[15:44:01.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:01.741]    __FlashAddr=0x00000000
[15:44:01.741]    __FlashLen=0x00000000
[15:44:01.741]    __FlashArg=0x00000000
[15:44:01.741]    __FlashOp=0x00000000
[15:44:01.741]    __Result=0x00000000
[15:44:01.741]  </debugvars>
[15:44:01.741]  
[15:44:01.741]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:44:01.741]    <block atomic="false" info="">
[15:44:01.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:44:01.741]        // -> [isSWJ <= 0x00000001]
[15:44:01.741]      __var hasDormant = __protocol & 0x00020000;
[15:44:01.741]        // -> [hasDormant <= 0x00000000]
[15:44:01.741]      __var protType   = __protocol & 0x0000FFFF;
[15:44:01.741]        // -> [protType <= 0x00000002]
[15:44:01.741]    </block>
[15:44:01.741]    <control if="protType == 1" while="" timeout="0" info="">
[15:44:01.741]      // if-block "protType == 1"
[15:44:01.741]        // =>  FALSE
[15:44:01.741]      // skip if-block "protType == 1"
[15:44:01.746]    </control>
[15:44:01.746]    <control if="protType == 2" while="" timeout="0" info="">
[15:44:01.746]      // if-block "protType == 2"
[15:44:01.746]        // =>  TRUE
[15:44:01.746]      <control if="isSWJ" while="" timeout="0" info="">
[15:44:01.746]        // if-block "isSWJ"
[15:44:01.746]          // =>  TRUE
[15:44:01.746]        <control if="hasDormant" while="" timeout="0" info="">
[15:44:01.746]          // if-block "hasDormant"
[15:44:01.747]            // =>  FALSE
[15:44:01.747]          // skip if-block "hasDormant"
[15:44:01.747]        </control>
[15:44:01.747]        <control if="!hasDormant" while="" timeout="0" info="">
[15:44:01.747]          // if-block "!hasDormant"
[15:44:01.747]            // =>  TRUE
[15:44:01.748]          <block atomic="false" info="">
[15:44:01.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:44:01.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:01.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:44:01.751]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:44:01.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:44:01.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:01.756]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:44:01.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:44:01.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:44:01.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:01.761]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:44:01.761]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:44:01.761]          </block>
[15:44:01.761]          // end if-block "!hasDormant"
[15:44:01.761]        </control>
[15:44:01.761]        // end if-block "isSWJ"
[15:44:01.761]      </control>
[15:44:01.761]      <control if="!isSWJ" while="" timeout="0" info="">
[15:44:01.761]        // if-block "!isSWJ"
[15:44:01.761]          // =>  FALSE
[15:44:01.761]        // skip if-block "!isSWJ"
[15:44:01.761]      </control>
[15:44:01.761]      <block atomic="false" info="">
[15:44:01.761]        ReadDP(0x0);
[15:44:01.771]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:44:01.771]      </block>
[15:44:01.771]      // end if-block "protType == 2"
[15:44:01.771]    </control>
[15:44:01.771]  </sequence>
[15:44:01.771]  
[15:44:01.771]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:44:01.771]  
[15:44:01.771]  <debugvars>
[15:44:01.771]    // Pre-defined
[15:44:01.771]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:01.771]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:01.771]    __dp=0x00000000
[15:44:01.771]    __ap=0x00000000
[15:44:01.771]    __traceout=0x00000000      (Trace Disabled)
[15:44:01.771]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:01.771]    __FlashAddr=0x00000000
[15:44:01.771]    __FlashLen=0x00000000
[15:44:01.771]    __FlashArg=0x00000000
[15:44:01.771]    __FlashOp=0x00000000
[15:44:01.771]    __Result=0x00000000
[15:44:01.771]  </debugvars>
[15:44:01.771]  
[15:44:01.771]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:44:01.771]    <block atomic="false" info="">
[15:44:01.771]      __var SW_DP_ABORT       = 0x0;
[15:44:01.771]        // -> [SW_DP_ABORT <= 0x00000000]
[15:44:01.771]      __var DP_CTRL_STAT      = 0x4;
[15:44:01.777]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:44:01.777]      __var DP_SELECT         = 0x8;
[15:44:01.777]        // -> [DP_SELECT <= 0x00000008]
[15:44:01.777]      __var powered_down      = 0;
[15:44:01.778]        // -> [powered_down <= 0x00000000]
[15:44:01.778]      WriteDP(DP_SELECT, 0x00000000);
[15:44:01.781]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:44:01.781]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:44:01.781]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:44:01.781]        // -> [powered_down <= 0x00000001]
[15:44:01.781]    </block>
[15:44:01.781]    <control if="powered_down" while="" timeout="0" info="">
[15:44:01.781]      // if-block "powered_down"
[15:44:01.781]        // =>  TRUE
[15:44:01.781]      <block atomic="false" info="">
[15:44:01.781]        Message(0, "Debug/System power-up request sent");
[15:44:01.787]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:44:01.790]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:44:01.790]      </block>
[15:44:01.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:44:01.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:44:01.799]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:44:01.799]        // while-condition  =>  FALSE
[15:44:01.799]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:44:01.800]      </control>
[15:44:01.800]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:44:01.800]        // if-block "(__protocol & 0xFFFF) == 1"
[15:44:01.800]          // =>  FALSE
[15:44:01.800]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:44:01.800]      </control>
[15:44:01.800]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:44:01.800]        // if-block "(__protocol & 0xFFFF) == 2"
[15:44:01.800]          // =>  TRUE
[15:44:01.800]        <block atomic="false" info="">
[15:44:01.800]          Message(0, "executing SWD power up");
[15:44:01.802]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:44:01.804]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:44:01.804]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:44:01.809]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:44:01.809]        </block>
[15:44:01.809]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:44:01.809]      </control>
[15:44:01.809]      // end if-block "powered_down"
[15:44:01.809]    </control>
[15:44:01.809]    <block atomic="false" info="">
[15:44:01.809]      __var DEBUG_PORT_VAL    = 0;
[15:44:01.809]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:44:01.809]      __var ACCESS_POINT_VAL  = 0;
[15:44:01.809]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:44:01.809]      __ap = 1; 
[15:44:01.811]        // -> [__ap <= 0x00000001]
[15:44:01.811]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:44:01.812]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:44:01.812]      __ap = 4;
[15:44:01.812]        // -> [__ap <= 0x00000004]
[15:44:01.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:01.812]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:44:01.818]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:44:01.818]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:01.819]    </block>
[15:44:01.819]    <block atomic="false" info="">
[15:44:01.819]      __var nReset = 0x80;
[15:44:01.819]        // -> [nReset <= 0x00000080]
[15:44:01.819]      __var canReadPins = 0;
[15:44:01.819]        // -> [canReadPins <= 0x00000000]
[15:44:01.821]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:44:01.828]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:44:01.828]        // -> [canReadPins <= 0x00000001]
[15:44:01.828]    </block>
[15:44:01.829]    <control if="" while="1" timeout="200" info="">
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.829]      // while-condition  =>  TRUE
[15:44:01.829]      // while "1"  (timeout="200")
[15:44:01.831]      // while-condition  =>  TRUE
[15:44:01.831]      // while "1"  (timeout="200")
[15:44:01.831]      // while  =>  TIMEOUT
[15:44:01.831]      // end while "1"
[15:44:01.831]    </control>
[15:44:01.831]    <control if="canReadPins" while="" timeout="0" info="">
[15:44:01.831]      // if-block "canReadPins"
[15:44:01.831]        // =>  TRUE
[15:44:01.831]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:44:01.831]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:44:01.831]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:44:01.831]        // while-condition  =>  FALSE
[15:44:01.831]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:44:01.831]      </control>
[15:44:01.831]      // end if-block "canReadPins"
[15:44:01.831]    </control>
[15:44:01.831]    <control if="!canReadPins" while="" timeout="0" info="">
[15:44:01.831]      // if-block "!canReadPins"
[15:44:01.831]        // =>  FALSE
[15:44:01.831]      // skip if-block "!canReadPins"
[15:44:01.831]    </control>
[15:44:01.831]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:44:01.831]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:01.831]        // =>  TRUE
[15:44:01.831]      <block atomic="false" info="">
[15:44:01.831]        WriteAP(0x00, 0x190008);
[15:44:01.842]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:01.842]        WriteAP(0xF0, 0x01);
[15:44:01.842]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:01.842]      </block>
[15:44:01.842]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:01.842]    </control>
[15:44:01.842]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:44:01.842]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:01.842]        // =>  FALSE
[15:44:01.842]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:01.842]    </control>
[15:44:01.842]    <block atomic="false" info="">
[15:44:01.842]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:01.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:44:01.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:44:01.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:01.861]      __ap = 0; //lets make sure we reset the access point selection
[15:44:01.861]        // -> [__ap <= 0x00000000]
[15:44:01.861]    </block>
[15:44:01.861]  </sequence>
[15:44:01.861]  
[15:44:01.894]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:44:01.894]  
[15:44:01.894]  <debugvars>
[15:44:01.894]    // Pre-defined
[15:44:01.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:01.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:01.894]    __dp=0x00000000
[15:44:01.894]    __ap=0x00000000
[15:44:01.894]    __traceout=0x00000000      (Trace Disabled)
[15:44:01.894]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:01.896]    __FlashAddr=0x00000000
[15:44:01.896]    __FlashLen=0x00000000
[15:44:01.896]    __FlashArg=0x00000000
[15:44:01.896]    __FlashOp=0x00000000
[15:44:01.896]    __Result=0x00000000
[15:44:01.896]  </debugvars>
[15:44:01.896]  
[15:44:01.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:44:01.896]    <block atomic="false" info="">
[15:44:01.896]      __var deviceID = 0;
[15:44:01.896]        // -> [deviceID <= 0x00000000]
[15:44:01.896]      __var version = 0;
[15:44:01.896]        // -> [version <= 0x00000000]
[15:44:01.896]      __var partNum = 0;
[15:44:01.896]        // -> [partNum <= 0x00000000]
[15:44:01.896]      __var manuf = 0;
[15:44:01.896]        // -> [manuf <= 0x00000000]
[15:44:01.896]      __var isMSPM0G1X0X_G3X0X = 0;
[15:44:01.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:44:01.896]      __var isProduction = 0;
[15:44:01.896]        // -> [isProduction <= 0x00000000]
[15:44:01.896]      __var continueId = 0;
[15:44:01.896]        // -> [continueId <= 0x00000000]
[15:44:01.896]      deviceID =   Read32(0x41C40004);
[15:44:01.901]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:44:01.901]        // -> [deviceID <= 0x2BB8802F]
[15:44:01.901]      version = deviceID >> 28;
[15:44:01.901]        // -> [version <= 0x00000002]
[15:44:01.901]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:44:01.901]        // -> [partNum <= 0x0000BB88]
[15:44:01.901]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:44:01.901]        // -> [manuf <= 0x00000017]
[15:44:01.901]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:44:01.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:44:01.901]      isProduction = (version > 0);
[15:44:01.901]        // -> [isProduction <= 0x00000001]
[15:44:01.901]    </block>
[15:44:01.901]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:44:01.901]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:44:01.901]        // =>  FALSE
[15:44:01.901]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:44:01.901]    </control>
[15:44:01.901]    <control if="continueId == 4" while="" timeout="0" info="">
[15:44:01.901]      // if-block "continueId == 4"
[15:44:01.901]        // =>  FALSE
[15:44:01.901]      // skip if-block "continueId == 4"
[15:44:01.901]    </control>
[15:44:01.901]    <control if="!isProduction" while="" timeout="0" info="">
[15:44:01.901]      // if-block "!isProduction"
[15:44:01.901]        // =>  FALSE
[15:44:01.901]      // skip if-block "!isProduction"
[15:44:01.908]    </control>
[15:44:01.908]  </sequence>
[15:44:01.908]  
[15:44:29.317]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:44:29.317]  
[15:44:29.317]  <debugvars>
[15:44:29.317]    // Pre-defined
[15:44:29.317]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:29.317]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:29.317]    __dp=0x00000000
[15:44:29.317]    __ap=0x00000000
[15:44:29.317]    __traceout=0x00000000      (Trace Disabled)
[15:44:29.317]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:29.317]    __FlashAddr=0x00000000
[15:44:29.317]    __FlashLen=0x00000000
[15:44:29.317]    __FlashArg=0x00000000
[15:44:29.317]    __FlashOp=0x00000000
[15:44:29.317]    __Result=0x00000000
[15:44:29.317]  </debugvars>
[15:44:29.317]  
[15:44:29.317]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:44:29.317]    <block atomic="false" info="">
[15:44:29.317]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:44:29.317]        // -> [isSWJ <= 0x00000001]
[15:44:29.317]      __var hasDormant = __protocol & 0x00020000;
[15:44:29.317]        // -> [hasDormant <= 0x00000000]
[15:44:29.317]      __var protType   = __protocol & 0x0000FFFF;
[15:44:29.317]        // -> [protType <= 0x00000002]
[15:44:29.317]    </block>
[15:44:29.317]    <control if="protType == 1" while="" timeout="0" info="">
[15:44:29.317]      // if-block "protType == 1"
[15:44:29.317]        // =>  FALSE
[15:44:29.317]      // skip if-block "protType == 1"
[15:44:29.317]    </control>
[15:44:29.317]    <control if="protType == 2" while="" timeout="0" info="">
[15:44:29.317]      // if-block "protType == 2"
[15:44:29.317]        // =>  TRUE
[15:44:29.317]      <control if="isSWJ" while="" timeout="0" info="">
[15:44:29.317]        // if-block "isSWJ"
[15:44:29.317]          // =>  TRUE
[15:44:29.322]        <control if="hasDormant" while="" timeout="0" info="">
[15:44:29.322]          // if-block "hasDormant"
[15:44:29.322]            // =>  FALSE
[15:44:29.322]          // skip if-block "hasDormant"
[15:44:29.322]        </control>
[15:44:29.322]        <control if="!hasDormant" while="" timeout="0" info="">
[15:44:29.322]          // if-block "!hasDormant"
[15:44:29.322]            // =>  TRUE
[15:44:29.322]          <block atomic="false" info="">
[15:44:29.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:44:29.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:29.324]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:44:29.327]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:44:29.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:44:29.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:29.327]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:44:29.337]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:44:29.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:44:29.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:29.337]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:44:29.347]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:44:29.347]          </block>
[15:44:29.347]          // end if-block "!hasDormant"
[15:44:29.347]        </control>
[15:44:29.347]        // end if-block "isSWJ"
[15:44:29.347]      </control>
[15:44:29.347]      <control if="!isSWJ" while="" timeout="0" info="">
[15:44:29.347]        // if-block "!isSWJ"
[15:44:29.347]          // =>  FALSE
[15:44:29.347]        // skip if-block "!isSWJ"
[15:44:29.347]      </control>
[15:44:29.347]      <block atomic="false" info="">
[15:44:29.347]        ReadDP(0x0);
[15:44:29.357]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:44:29.357]      </block>
[15:44:29.357]      // end if-block "protType == 2"
[15:44:29.357]    </control>
[15:44:29.357]  </sequence>
[15:44:29.357]  
[15:44:29.360]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:44:29.360]  
[15:44:29.360]  <debugvars>
[15:44:29.360]    // Pre-defined
[15:44:29.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:29.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:29.360]    __dp=0x00000000
[15:44:29.360]    __ap=0x00000000
[15:44:29.360]    __traceout=0x00000000      (Trace Disabled)
[15:44:29.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:29.360]    __FlashAddr=0x00000000
[15:44:29.360]    __FlashLen=0x00000000
[15:44:29.360]    __FlashArg=0x00000000
[15:44:29.360]    __FlashOp=0x00000000
[15:44:29.360]    __Result=0x00000000
[15:44:29.360]  </debugvars>
[15:44:29.360]  
[15:44:29.360]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:44:29.360]    <block atomic="false" info="">
[15:44:29.360]      __var SW_DP_ABORT       = 0x0;
[15:44:29.360]        // -> [SW_DP_ABORT <= 0x00000000]
[15:44:29.360]      __var DP_CTRL_STAT      = 0x4;
[15:44:29.360]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:44:29.360]      __var DP_SELECT         = 0x8;
[15:44:29.360]        // -> [DP_SELECT <= 0x00000008]
[15:44:29.360]      __var powered_down      = 0;
[15:44:29.360]        // -> [powered_down <= 0x00000000]
[15:44:29.360]      WriteDP(DP_SELECT, 0x00000000);
[15:44:29.369]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:44:29.369]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:44:29.369]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:44:29.369]        // -> [powered_down <= 0x00000001]
[15:44:29.369]    </block>
[15:44:29.369]    <control if="powered_down" while="" timeout="0" info="">
[15:44:29.369]      // if-block "powered_down"
[15:44:29.369]        // =>  TRUE
[15:44:29.369]      <block atomic="false" info="">
[15:44:29.369]        Message(0, "Debug/System power-up request sent");
[15:44:29.378]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:44:29.381]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:44:29.381]      </block>
[15:44:29.381]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:44:29.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:44:29.381]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:44:29.381]        // while-condition  =>  FALSE
[15:44:29.381]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:44:29.381]      </control>
[15:44:29.381]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:44:29.381]        // if-block "(__protocol & 0xFFFF) == 1"
[15:44:29.381]          // =>  FALSE
[15:44:29.381]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:44:29.381]      </control>
[15:44:29.381]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:44:29.381]        // if-block "(__protocol & 0xFFFF) == 2"
[15:44:29.381]          // =>  TRUE
[15:44:29.381]        <block atomic="false" info="">
[15:44:29.381]          Message(0, "executing SWD power up");
[15:44:29.387]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:44:29.396]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:44:29.396]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:44:29.400]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:44:29.400]        </block>
[15:44:29.400]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:44:29.400]      </control>
[15:44:29.400]      // end if-block "powered_down"
[15:44:29.400]    </control>
[15:44:29.400]    <block atomic="false" info="">
[15:44:29.400]      __var DEBUG_PORT_VAL    = 0;
[15:44:29.400]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:44:29.400]      __var ACCESS_POINT_VAL  = 0;
[15:44:29.400]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:44:29.400]      __ap = 1; 
[15:44:29.400]        // -> [__ap <= 0x00000001]
[15:44:29.400]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:44:29.408]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:44:29.408]      __ap = 4;
[15:44:29.408]        // -> [__ap <= 0x00000004]
[15:44:29.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:29.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:44:29.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:44:29.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:29.411]    </block>
[15:44:29.411]    <block atomic="false" info="">
[15:44:29.411]      __var nReset = 0x80;
[15:44:29.411]        // -> [nReset <= 0x00000080]
[15:44:29.411]      __var canReadPins = 0;
[15:44:29.411]        // -> [canReadPins <= 0x00000000]
[15:44:29.411]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:44:29.411]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:44:29.411]        // -> [canReadPins <= 0x00000001]
[15:44:29.411]    </block>
[15:44:29.411]    <control if="" while="1" timeout="200" info="">
[15:44:29.411]      // while "1"  (timeout="200")
[15:44:29.411]      // while-condition  =>  TRUE
[15:44:29.411]      // while "1"  (timeout="200")
[15:44:29.411]      // while-condition  =>  TRUE
[15:44:29.411]      // while "1"  (timeout="200")
[15:44:29.411]      // while-condition  =>  TRUE
[15:44:29.411]      // while "1"  (timeout="200")
[15:44:29.411]      // while-condition  =>  TRUE
[15:44:29.411]      // while "1"  (timeout="200")
[15:44:29.411]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.417]      // while-condition  =>  TRUE
[15:44:29.417]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.419]      // while "1"  (timeout="200")
[15:44:29.419]      // while-condition  =>  TRUE
[15:44:29.427]      // while "1"  (timeout="200")
[15:44:29.427]      // while  =>  TIMEOUT
[15:44:29.427]      // end while "1"
[15:44:29.427]    </control>
[15:44:29.427]    <control if="canReadPins" while="" timeout="0" info="">
[15:44:29.427]      // if-block "canReadPins"
[15:44:29.427]        // =>  TRUE
[15:44:29.427]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:44:29.427]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:44:29.437]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:44:29.437]        // while-condition  =>  FALSE
[15:44:29.437]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:44:29.437]      </control>
[15:44:29.437]      // end if-block "canReadPins"
[15:44:29.437]    </control>
[15:44:29.437]    <control if="!canReadPins" while="" timeout="0" info="">
[15:44:29.437]      // if-block "!canReadPins"
[15:44:29.437]        // =>  FALSE
[15:44:29.437]      // skip if-block "!canReadPins"
[15:44:29.437]    </control>
[15:44:29.437]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:44:29.437]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:29.437]        // =>  TRUE
[15:44:29.437]      <block atomic="false" info="">
[15:44:29.437]        WriteAP(0x00, 0x190008);
[15:44:29.437]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:29.437]        WriteAP(0xF0, 0x01);
[15:44:29.447]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:29.447]      </block>
[15:44:29.447]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:29.447]    </control>
[15:44:29.447]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:44:29.447]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:29.447]        // =>  FALSE
[15:44:29.447]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:29.454]    </control>
[15:44:29.454]    <block atomic="false" info="">
[15:44:29.454]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:29.467]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:44:29.467]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:44:29.467]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:29.467]      __ap = 0; //lets make sure we reset the access point selection
[15:44:29.477]        // -> [__ap <= 0x00000000]
[15:44:29.477]    </block>
[15:44:29.477]  </sequence>
[15:44:29.477]  
[15:44:29.528]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:44:29.528]  
[15:44:29.528]  <debugvars>
[15:44:29.528]    // Pre-defined
[15:44:29.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:29.528]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:29.528]    __dp=0x00000000
[15:44:29.528]    __ap=0x00000000
[15:44:29.528]    __traceout=0x00000000      (Trace Disabled)
[15:44:29.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:29.528]    __FlashAddr=0x00000000
[15:44:29.528]    __FlashLen=0x00000000
[15:44:29.528]    __FlashArg=0x00000000
[15:44:29.528]    __FlashOp=0x00000000
[15:44:29.528]    __Result=0x00000000
[15:44:29.528]  </debugvars>
[15:44:29.528]  
[15:44:29.528]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:44:29.528]    <block atomic="false" info="">
[15:44:29.528]      __var deviceID = 0;
[15:44:29.528]        // -> [deviceID <= 0x00000000]
[15:44:29.537]      __var version = 0;
[15:44:29.537]        // -> [version <= 0x00000000]
[15:44:29.537]      __var partNum = 0;
[15:44:29.537]        // -> [partNum <= 0x00000000]
[15:44:29.537]      __var manuf = 0;
[15:44:29.537]        // -> [manuf <= 0x00000000]
[15:44:29.537]      __var isMSPM0G1X0X_G3X0X = 0;
[15:44:29.537]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:44:29.537]      __var isProduction = 0;
[15:44:29.537]        // -> [isProduction <= 0x00000000]
[15:44:29.537]      __var continueId = 0;
[15:44:29.537]        // -> [continueId <= 0x00000000]
[15:44:29.537]      deviceID =   Read32(0x41C40004);
[15:44:29.547]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:44:29.547]        // -> [deviceID <= 0x2BB8802F]
[15:44:29.547]      version = deviceID >> 28;
[15:44:29.547]        // -> [version <= 0x00000002]
[15:44:29.547]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:44:29.547]        // -> [partNum <= 0x0000BB88]
[15:44:29.547]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:44:29.547]        // -> [manuf <= 0x00000017]
[15:44:29.547]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:44:29.547]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:44:29.547]      isProduction = (version > 0);
[15:44:29.547]        // -> [isProduction <= 0x00000001]
[15:44:29.547]    </block>
[15:44:29.547]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:44:29.547]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:44:29.547]        // =>  FALSE
[15:44:29.547]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:44:29.547]    </control>
[15:44:29.547]    <control if="continueId == 4" while="" timeout="0" info="">
[15:44:29.547]      // if-block "continueId == 4"
[15:44:29.547]        // =>  FALSE
[15:44:29.547]      // skip if-block "continueId == 4"
[15:44:29.547]    </control>
[15:44:29.547]    <control if="!isProduction" while="" timeout="0" info="">
[15:44:29.547]      // if-block "!isProduction"
[15:44:29.547]        // =>  FALSE
[15:44:29.547]      // skip if-block "!isProduction"
[15:44:29.547]    </control>
[15:44:29.547]  </sequence>
[15:44:29.547]  
[15:45:54.885]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:45:54.885]  
[15:45:54.885]  <debugvars>
[15:45:54.885]    // Pre-defined
[15:45:54.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:54.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:54.885]    __dp=0x00000000
[15:45:54.885]    __ap=0x00000000
[15:45:54.892]    __traceout=0x00000000      (Trace Disabled)
[15:45:54.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:54.892]    __FlashAddr=0x00000000
[15:45:54.892]    __FlashLen=0x00000000
[15:45:54.892]    __FlashArg=0x00000000
[15:45:54.892]    __FlashOp=0x00000000
[15:45:54.892]    __Result=0x00000000
[15:45:54.892]  </debugvars>
[15:45:54.892]  
[15:45:54.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:45:54.892]    <block atomic="false" info="">
[15:45:54.892]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:45:54.892]        // -> [isSWJ <= 0x00000001]
[15:45:54.892]      __var hasDormant = __protocol & 0x00020000;
[15:45:54.892]        // -> [hasDormant <= 0x00000000]
[15:45:54.894]      __var protType   = __protocol & 0x0000FFFF;
[15:45:54.894]        // -> [protType <= 0x00000002]
[15:45:54.894]    </block>
[15:45:54.894]    <control if="protType == 1" while="" timeout="0" info="">
[15:45:54.895]      // if-block "protType == 1"
[15:45:54.895]        // =>  FALSE
[15:45:54.895]      // skip if-block "protType == 1"
[15:45:54.895]    </control>
[15:45:54.895]    <control if="protType == 2" while="" timeout="0" info="">
[15:45:54.895]      // if-block "protType == 2"
[15:45:54.895]        // =>  TRUE
[15:45:54.895]      <control if="isSWJ" while="" timeout="0" info="">
[15:45:54.895]        // if-block "isSWJ"
[15:45:54.895]          // =>  TRUE
[15:45:54.895]        <control if="hasDormant" while="" timeout="0" info="">
[15:45:54.895]          // if-block "hasDormant"
[15:45:54.895]            // =>  FALSE
[15:45:54.895]          // skip if-block "hasDormant"
[15:45:54.895]        </control>
[15:45:54.895]        <control if="!hasDormant" while="" timeout="0" info="">
[15:45:54.895]          // if-block "!hasDormant"
[15:45:54.895]            // =>  TRUE
[15:45:54.895]          <block atomic="false" info="">
[15:45:54.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:45:54.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:54.895]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:45:54.895]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:45:54.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:45:54.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:54.904]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:45:54.904]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:45:54.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:45:54.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:54.904]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:45:54.904]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:45:54.904]          </block>
[15:45:54.904]          // end if-block "!hasDormant"
[15:45:54.904]        </control>
[15:45:54.904]        // end if-block "isSWJ"
[15:45:54.914]      </control>
[15:45:54.914]      <control if="!isSWJ" while="" timeout="0" info="">
[15:45:54.914]        // if-block "!isSWJ"
[15:45:54.914]          // =>  FALSE
[15:45:54.914]        // skip if-block "!isSWJ"
[15:45:54.914]      </control>
[15:45:54.914]      <block atomic="false" info="">
[15:45:54.914]        ReadDP(0x0);
[15:45:54.914]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:45:54.914]      </block>
[15:45:54.914]      // end if-block "protType == 2"
[15:45:54.914]    </control>
[15:45:54.914]  </sequence>
[15:45:54.914]  
[15:45:54.924]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:45:54.924]  
[15:45:54.924]  <debugvars>
[15:45:54.924]    // Pre-defined
[15:45:54.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:54.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:54.924]    __dp=0x00000000
[15:45:54.924]    __ap=0x00000000
[15:45:54.924]    __traceout=0x00000000      (Trace Disabled)
[15:45:54.924]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:54.924]    __FlashAddr=0x00000000
[15:45:54.924]    __FlashLen=0x00000000
[15:45:54.924]    __FlashArg=0x00000000
[15:45:54.924]    __FlashOp=0x00000000
[15:45:54.924]    __Result=0x00000000
[15:45:54.924]  </debugvars>
[15:45:54.924]  
[15:45:54.924]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:45:54.924]    <block atomic="false" info="">
[15:45:54.924]      __var SW_DP_ABORT       = 0x0;
[15:45:54.924]        // -> [SW_DP_ABORT <= 0x00000000]
[15:45:54.924]      __var DP_CTRL_STAT      = 0x4;
[15:45:54.924]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:45:54.924]      __var DP_SELECT         = 0x8;
[15:45:54.924]        // -> [DP_SELECT <= 0x00000008]
[15:45:54.924]      __var powered_down      = 0;
[15:45:54.924]        // -> [powered_down <= 0x00000000]
[15:45:54.924]      WriteDP(DP_SELECT, 0x00000000);
[15:45:54.924]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:45:54.924]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:45:54.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:45:54.924]        // -> [powered_down <= 0x00000001]
[15:45:54.924]    </block>
[15:45:54.924]    <control if="powered_down" while="" timeout="0" info="">
[15:45:54.924]      // if-block "powered_down"
[15:45:54.924]        // =>  TRUE
[15:45:54.924]      <block atomic="false" info="">
[15:45:54.924]        Message(0, "Debug/System power-up request sent");
[15:45:54.934]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:45:54.935]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:45:54.935]      </block>
[15:45:54.935]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:45:54.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:45:54.935]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:45:54.935]        // while-condition  =>  FALSE
[15:45:54.935]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:45:54.935]      </control>
[15:45:54.935]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:45:54.935]        // if-block "(__protocol & 0xFFFF) == 1"
[15:45:54.935]          // =>  FALSE
[15:45:54.935]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:45:54.935]      </control>
[15:45:54.935]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:45:54.935]        // if-block "(__protocol & 0xFFFF) == 2"
[15:45:54.935]          // =>  TRUE
[15:45:54.935]        <block atomic="false" info="">
[15:45:54.935]          Message(0, "executing SWD power up");
[15:45:54.935]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:45:54.944]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:45:54.944]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:45:54.945]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:45:54.945]        </block>
[15:45:54.945]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:45:54.945]      </control>
[15:45:54.945]      // end if-block "powered_down"
[15:45:54.945]    </control>
[15:45:54.945]    <block atomic="false" info="">
[15:45:54.945]      __var DEBUG_PORT_VAL    = 0;
[15:45:54.945]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:45:54.945]      __var ACCESS_POINT_VAL  = 0;
[15:45:54.945]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:45:54.945]      __ap = 1; 
[15:45:54.945]        // -> [__ap <= 0x00000001]
[15:45:54.945]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:45:54.945]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:45:54.945]      __ap = 4;
[15:45:54.945]        // -> [__ap <= 0x00000004]
[15:45:54.945]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:54.954]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:45:54.954]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:45:54.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:54.954]    </block>
[15:45:54.954]    <block atomic="false" info="">
[15:45:54.954]      __var nReset = 0x80;
[15:45:54.954]        // -> [nReset <= 0x00000080]
[15:45:54.954]      __var canReadPins = 0;
[15:45:54.954]        // -> [canReadPins <= 0x00000000]
[15:45:54.954]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:45:54.954]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:45:54.954]        // -> [canReadPins <= 0x00000001]
[15:45:54.954]    </block>
[15:45:54.954]    <control if="" while="1" timeout="200" info="">
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.954]      // while-condition  =>  TRUE
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.954]      // while-condition  =>  TRUE
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.954]      // while-condition  =>  TRUE
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.954]      // while-condition  =>  TRUE
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.954]      // while-condition  =>  TRUE
[15:45:54.954]      // while "1"  (timeout="200")
[15:45:54.964]      // while-condition  =>  TRUE
[15:45:54.964]      // while "1"  (timeout="200")
[15:45:54.964]      // while  =>  TIMEOUT
[15:45:54.964]      // end while "1"
[15:45:54.964]    </control>
[15:45:54.964]    <control if="canReadPins" while="" timeout="0" info="">
[15:45:54.964]      // if-block "canReadPins"
[15:45:54.964]        // =>  TRUE
[15:45:54.964]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:45:54.964]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:45:54.964]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:45:54.964]        // while-condition  =>  FALSE
[15:45:54.964]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:45:54.964]      </control>
[15:45:54.964]      // end if-block "canReadPins"
[15:45:54.964]    </control>
[15:45:54.964]    <control if="!canReadPins" while="" timeout="0" info="">
[15:45:54.964]      // if-block "!canReadPins"
[15:45:54.964]        // =>  FALSE
[15:45:54.964]      // skip if-block "!canReadPins"
[15:45:54.964]    </control>
[15:45:54.964]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:45:54.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:54.964]        // =>  TRUE
[15:45:54.964]      <block atomic="false" info="">
[15:45:54.964]        WriteAP(0x00, 0x190008);
[15:45:54.975]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:54.975]        WriteAP(0xF0, 0x01);
[15:45:54.984]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:54.984]      </block>
[15:45:54.984]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:54.984]    </control>
[15:45:54.984]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:45:54.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:54.984]        // =>  FALSE
[15:45:54.984]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:54.984]    </control>
[15:45:54.984]    <block atomic="false" info="">
[15:45:54.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:54.984]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:45:54.984]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:45:54.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:54.994]      __ap = 0; //lets make sure we reset the access point selection
[15:45:54.994]        // -> [__ap <= 0x00000000]
[15:45:54.994]    </block>
[15:45:54.994]  </sequence>
[15:45:54.994]  
[15:45:55.024]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:45:55.024]  
[15:45:55.024]  <debugvars>
[15:45:55.024]    // Pre-defined
[15:45:55.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:55.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:55.024]    __dp=0x00000000
[15:45:55.024]    __ap=0x00000000
[15:45:55.024]    __traceout=0x00000000      (Trace Disabled)
[15:45:55.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:55.024]    __FlashAddr=0x00000000
[15:45:55.024]    __FlashLen=0x00000000
[15:45:55.024]    __FlashArg=0x00000000
[15:45:55.024]    __FlashOp=0x00000000
[15:45:55.024]    __Result=0x00000000
[15:45:55.024]  </debugvars>
[15:45:55.024]  
[15:45:55.024]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:45:55.024]    <block atomic="false" info="">
[15:45:55.024]      __var deviceID = 0;
[15:45:55.024]        // -> [deviceID <= 0x00000000]
[15:45:55.024]      __var version = 0;
[15:45:55.024]        // -> [version <= 0x00000000]
[15:45:55.024]      __var partNum = 0;
[15:45:55.024]        // -> [partNum <= 0x00000000]
[15:45:55.024]      __var manuf = 0;
[15:45:55.024]        // -> [manuf <= 0x00000000]
[15:45:55.024]      __var isMSPM0G1X0X_G3X0X = 0;
[15:45:55.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:45:55.024]      __var isProduction = 0;
[15:45:55.024]        // -> [isProduction <= 0x00000000]
[15:45:55.024]      __var continueId = 0;
[15:45:55.024]        // -> [continueId <= 0x00000000]
[15:45:55.024]      deviceID =   Read32(0x41C40004);
[15:45:55.034]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:45:55.034]        // -> [deviceID <= 0x2BB8802F]
[15:45:55.034]      version = deviceID >> 28;
[15:45:55.034]        // -> [version <= 0x00000002]
[15:45:55.034]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:45:55.034]        // -> [partNum <= 0x0000BB88]
[15:45:55.034]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:45:55.034]        // -> [manuf <= 0x00000017]
[15:45:55.034]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:45:55.034]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:45:55.034]      isProduction = (version > 0);
[15:45:55.034]        // -> [isProduction <= 0x00000001]
[15:45:55.034]    </block>
[15:45:55.034]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:45:55.034]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:45:55.034]        // =>  FALSE
[15:45:55.034]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:45:55.034]    </control>
[15:45:55.034]    <control if="continueId == 4" while="" timeout="0" info="">
[15:45:55.034]      // if-block "continueId == 4"
[15:45:55.034]        // =>  FALSE
[15:45:55.044]      // skip if-block "continueId == 4"
[15:45:55.044]    </control>
[15:45:55.044]    <control if="!isProduction" while="" timeout="0" info="">
[15:45:55.044]      // if-block "!isProduction"
[15:45:55.044]        // =>  FALSE
[15:45:55.044]      // skip if-block "!isProduction"
[15:45:55.044]    </control>
[15:45:55.044]  </sequence>
[15:45:55.044]  
[15:47:33.519]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:47:33.519]  
[15:47:33.528]  <debugvars>
[15:47:33.528]    // Pre-defined
[15:47:33.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:33.528]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:33.528]    __dp=0x00000000
[15:47:33.528]    __ap=0x00000000
[15:47:33.528]    __traceout=0x00000000      (Trace Disabled)
[15:47:33.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:33.528]    __FlashAddr=0x00000000
[15:47:33.529]    __FlashLen=0x00000000
[15:47:33.529]    __FlashArg=0x00000000
[15:47:33.529]    __FlashOp=0x00000000
[15:47:33.529]    __Result=0x00000000
[15:47:33.529]  </debugvars>
[15:47:33.529]  
[15:47:33.529]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:47:33.529]    <block atomic="false" info="">
[15:47:33.529]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:47:33.530]        // -> [isSWJ <= 0x00000001]
[15:47:33.530]      __var hasDormant = __protocol & 0x00020000;
[15:47:33.530]        // -> [hasDormant <= 0x00000000]
[15:47:33.530]      __var protType   = __protocol & 0x0000FFFF;
[15:47:33.530]        // -> [protType <= 0x00000002]
[15:47:33.530]    </block>
[15:47:33.530]    <control if="protType == 1" while="" timeout="0" info="">
[15:47:33.530]      // if-block "protType == 1"
[15:47:33.530]        // =>  FALSE
[15:47:33.530]      // skip if-block "protType == 1"
[15:47:33.530]    </control>
[15:47:33.531]    <control if="protType == 2" while="" timeout="0" info="">
[15:47:33.531]      // if-block "protType == 2"
[15:47:33.531]        // =>  TRUE
[15:47:33.531]      <control if="isSWJ" while="" timeout="0" info="">
[15:47:33.531]        // if-block "isSWJ"
[15:47:33.531]          // =>  TRUE
[15:47:33.531]        <control if="hasDormant" while="" timeout="0" info="">
[15:47:33.531]          // if-block "hasDormant"
[15:47:33.531]            // =>  FALSE
[15:47:33.531]          // skip if-block "hasDormant"
[15:47:33.531]        </control>
[15:47:33.532]        <control if="!hasDormant" while="" timeout="0" info="">
[15:47:33.532]          // if-block "!hasDormant"
[15:47:33.532]            // =>  TRUE
[15:47:33.532]          <block atomic="false" info="">
[15:47:33.532]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:47:33.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:33.532]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:47:33.539]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:47:33.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:47:33.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:33.541]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:47:33.541]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:47:33.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:47:33.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:33.551]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:47:33.551]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:47:33.551]          </block>
[15:47:33.551]          // end if-block "!hasDormant"
[15:47:33.551]        </control>
[15:47:33.551]        // end if-block "isSWJ"
[15:47:33.560]      </control>
[15:47:33.560]      <control if="!isSWJ" while="" timeout="0" info="">
[15:47:33.560]        // if-block "!isSWJ"
[15:47:33.560]          // =>  FALSE
[15:47:33.560]        // skip if-block "!isSWJ"
[15:47:33.560]      </control>
[15:47:33.560]      <block atomic="false" info="">
[15:47:33.560]        ReadDP(0x0);
[15:47:33.562]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:47:33.562]      </block>
[15:47:33.562]      // end if-block "protType == 2"
[15:47:33.562]    </control>
[15:47:33.562]  </sequence>
[15:47:33.562]  
[15:47:33.565]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:47:33.565]  
[15:47:33.565]  <debugvars>
[15:47:33.565]    // Pre-defined
[15:47:33.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:33.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:33.565]    __dp=0x00000000
[15:47:33.565]    __ap=0x00000000
[15:47:33.565]    __traceout=0x00000000      (Trace Disabled)
[15:47:33.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:33.565]    __FlashAddr=0x00000000
[15:47:33.565]    __FlashLen=0x00000000
[15:47:33.565]    __FlashArg=0x00000000
[15:47:33.565]    __FlashOp=0x00000000
[15:47:33.565]    __Result=0x00000000
[15:47:33.565]  </debugvars>
[15:47:33.565]  
[15:47:33.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:47:33.565]    <block atomic="false" info="">
[15:47:33.565]      __var SW_DP_ABORT       = 0x0;
[15:47:33.565]        // -> [SW_DP_ABORT <= 0x00000000]
[15:47:33.565]      __var DP_CTRL_STAT      = 0x4;
[15:47:33.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:47:33.565]      __var DP_SELECT         = 0x8;
[15:47:33.565]        // -> [DP_SELECT <= 0x00000008]
[15:47:33.565]      __var powered_down      = 0;
[15:47:33.565]        // -> [powered_down <= 0x00000000]
[15:47:33.565]      WriteDP(DP_SELECT, 0x00000000);
[15:47:33.569]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:47:33.569]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:47:33.571]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:47:33.571]        // -> [powered_down <= 0x00000001]
[15:47:33.571]    </block>
[15:47:33.571]    <control if="powered_down" while="" timeout="0" info="">
[15:47:33.571]      // if-block "powered_down"
[15:47:33.571]        // =>  TRUE
[15:47:33.571]      <block atomic="false" info="">
[15:47:33.571]        Message(0, "Debug/System power-up request sent");
[15:47:33.573]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:47:33.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:47:33.573]      </block>
[15:47:33.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:47:33.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:47:33.581]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:47:33.582]        // while-condition  =>  FALSE
[15:47:33.582]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:47:33.582]      </control>
[15:47:33.582]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:47:33.582]        // if-block "(__protocol & 0xFFFF) == 1"
[15:47:33.582]          // =>  FALSE
[15:47:33.582]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:47:33.582]      </control>
[15:47:33.582]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:47:33.582]        // if-block "(__protocol & 0xFFFF) == 2"
[15:47:33.582]          // =>  TRUE
[15:47:33.582]        <block atomic="false" info="">
[15:47:33.583]          Message(0, "executing SWD power up");
[15:47:33.585]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:47:33.587]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:47:33.587]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:47:33.588]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:47:33.588]        </block>
[15:47:33.588]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:47:33.588]      </control>
[15:47:33.589]      // end if-block "powered_down"
[15:47:33.589]    </control>
[15:47:33.589]    <block atomic="false" info="">
[15:47:33.589]      __var DEBUG_PORT_VAL    = 0;
[15:47:33.589]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:47:33.589]      __var ACCESS_POINT_VAL  = 0;
[15:47:33.589]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:47:33.589]      __ap = 1; 
[15:47:33.589]        // -> [__ap <= 0x00000001]
[15:47:33.589]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:47:33.599]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:47:33.599]      __ap = 4;
[15:47:33.599]        // -> [__ap <= 0x00000004]
[15:47:33.599]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:33.601]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:47:33.601]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:47:33.601]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:33.605]    </block>
[15:47:33.605]    <block atomic="false" info="">
[15:47:33.605]      __var nReset = 0x80;
[15:47:33.605]        // -> [nReset <= 0x00000080]
[15:47:33.605]      __var canReadPins = 0;
[15:47:33.605]        // -> [canReadPins <= 0x00000000]
[15:47:33.605]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:47:33.612]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:47:33.612]        // -> [canReadPins <= 0x00000001]
[15:47:33.612]    </block>
[15:47:33.612]    <control if="" while="1" timeout="200" info="">
[15:47:33.612]      // while "1"  (timeout="200")
[15:47:33.612]      // while-condition  =>  TRUE
[15:47:33.612]      // while "1"  (timeout="200")
[15:47:33.612]      // while-condition  =>  TRUE
[15:47:33.612]      // while "1"  (timeout="200")
[15:47:33.612]      // while-condition  =>  TRUE
[15:47:33.613]      // while "1"  (timeout="200")
[15:47:33.613]      // while  =>  TIMEOUT
[15:47:33.613]      // end while "1"
[15:47:33.613]    </control>
[15:47:33.613]    <control if="canReadPins" while="" timeout="0" info="">
[15:47:33.613]      // if-block "canReadPins"
[15:47:33.613]        // =>  TRUE
[15:47:33.613]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:47:33.613]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:47:33.615]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:47:33.615]        // while-condition  =>  FALSE
[15:47:33.615]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:47:33.615]      </control>
[15:47:33.615]      // end if-block "canReadPins"
[15:47:33.615]    </control>
[15:47:33.615]    <control if="!canReadPins" while="" timeout="0" info="">
[15:47:33.615]      // if-block "!canReadPins"
[15:47:33.615]        // =>  FALSE
[15:47:33.615]      // skip if-block "!canReadPins"
[15:47:33.615]    </control>
[15:47:33.615]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:47:33.615]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:33.615]        // =>  TRUE
[15:47:33.615]      <block atomic="false" info="">
[15:47:33.615]        WriteAP(0x00, 0x190008);
[15:47:33.618]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:33.618]        WriteAP(0xF0, 0x01);
[15:47:33.621]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:33.621]      </block>
[15:47:33.621]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:33.621]    </control>
[15:47:33.621]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:47:33.621]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:33.621]        // =>  FALSE
[15:47:33.621]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:33.621]    </control>
[15:47:33.621]    <block atomic="false" info="">
[15:47:33.621]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:33.631]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:47:33.631]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:47:33.631]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:33.631]      __ap = 0; //lets make sure we reset the access point selection
[15:47:33.631]        // -> [__ap <= 0x00000000]
[15:47:33.631]    </block>
[15:47:33.631]  </sequence>
[15:47:33.631]  
[15:47:33.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:47:33.661]  
[15:47:33.661]  <debugvars>
[15:47:33.661]    // Pre-defined
[15:47:33.661]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:33.661]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:33.661]    __dp=0x00000000
[15:47:33.661]    __ap=0x00000000
[15:47:33.661]    __traceout=0x00000000      (Trace Disabled)
[15:47:33.661]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:33.661]    __FlashAddr=0x00000000
[15:47:33.661]    __FlashLen=0x00000000
[15:47:33.661]    __FlashArg=0x00000000
[15:47:33.661]    __FlashOp=0x00000000
[15:47:33.661]    __Result=0x00000000
[15:47:33.661]  </debugvars>
[15:47:33.661]  
[15:47:33.661]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:47:33.661]    <block atomic="false" info="">
[15:47:33.661]      __var deviceID = 0;
[15:47:33.661]        // -> [deviceID <= 0x00000000]
[15:47:33.661]      __var version = 0;
[15:47:33.661]        // -> [version <= 0x00000000]
[15:47:33.661]      __var partNum = 0;
[15:47:33.661]        // -> [partNum <= 0x00000000]
[15:47:33.661]      __var manuf = 0;
[15:47:33.661]        // -> [manuf <= 0x00000000]
[15:47:33.661]      __var isMSPM0G1X0X_G3X0X = 0;
[15:47:33.661]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:47:33.661]      __var isProduction = 0;
[15:47:33.661]        // -> [isProduction <= 0x00000000]
[15:47:33.661]      __var continueId = 0;
[15:47:33.661]        // -> [continueId <= 0x00000000]
[15:47:33.661]      deviceID =   Read32(0x41C40004);
[15:47:33.675]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:47:33.675]        // -> [deviceID <= 0x2BB8802F]
[15:47:33.675]      version = deviceID >> 28;
[15:47:33.675]        // -> [version <= 0x00000002]
[15:47:33.675]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:47:33.675]        // -> [partNum <= 0x0000BB88]
[15:47:33.675]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:47:33.675]        // -> [manuf <= 0x00000017]
[15:47:33.675]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:47:33.675]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:47:33.675]      isProduction = (version > 0);
[15:47:33.675]        // -> [isProduction <= 0x00000001]
[15:47:33.675]    </block>
[15:47:33.675]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:47:33.675]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:47:33.675]        // =>  FALSE
[15:47:33.675]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:47:33.675]    </control>
[15:47:33.675]    <control if="continueId == 4" while="" timeout="0" info="">
[15:47:33.675]      // if-block "continueId == 4"
[15:47:33.675]        // =>  FALSE
[15:47:33.675]      // skip if-block "continueId == 4"
[15:47:33.675]    </control>
[15:47:33.675]    <control if="!isProduction" while="" timeout="0" info="">
[15:47:33.675]      // if-block "!isProduction"
[15:47:33.675]        // =>  FALSE
[15:47:33.675]      // skip if-block "!isProduction"
[15:47:33.675]    </control>
[15:47:33.675]  </sequence>
[15:47:33.675]  
[15:48:17.524]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:48:17.524]  
[15:48:17.535]  <debugvars>
[15:48:17.535]    // Pre-defined
[15:48:17.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:17.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:17.535]    __dp=0x00000000
[15:48:17.535]    __ap=0x00000000
[15:48:17.535]    __traceout=0x00000000      (Trace Disabled)
[15:48:17.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:17.535]    __FlashAddr=0x00000000
[15:48:17.535]    __FlashLen=0x00000000
[15:48:17.535]    __FlashArg=0x00000000
[15:48:17.535]    __FlashOp=0x00000000
[15:48:17.535]    __Result=0x00000000
[15:48:17.535]  </debugvars>
[15:48:17.535]  
[15:48:17.535]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:48:17.535]    <block atomic="false" info="">
[15:48:17.535]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:48:17.535]        // -> [isSWJ <= 0x00000001]
[15:48:17.535]      __var hasDormant = __protocol & 0x00020000;
[15:48:17.535]        // -> [hasDormant <= 0x00000000]
[15:48:17.535]      __var protType   = __protocol & 0x0000FFFF;
[15:48:17.535]        // -> [protType <= 0x00000002]
[15:48:17.535]    </block>
[15:48:17.535]    <control if="protType == 1" while="" timeout="0" info="">
[15:48:17.535]      // if-block "protType == 1"
[15:48:17.535]        // =>  FALSE
[15:48:17.535]      // skip if-block "protType == 1"
[15:48:17.535]    </control>
[15:48:17.535]    <control if="protType == 2" while="" timeout="0" info="">
[15:48:17.535]      // if-block "protType == 2"
[15:48:17.535]        // =>  TRUE
[15:48:17.535]      <control if="isSWJ" while="" timeout="0" info="">
[15:48:17.535]        // if-block "isSWJ"
[15:48:17.535]          // =>  TRUE
[15:48:17.535]        <control if="hasDormant" while="" timeout="0" info="">
[15:48:17.535]          // if-block "hasDormant"
[15:48:17.535]            // =>  FALSE
[15:48:17.535]          // skip if-block "hasDormant"
[15:48:17.535]        </control>
[15:48:17.535]        <control if="!hasDormant" while="" timeout="0" info="">
[15:48:17.535]          // if-block "!hasDormant"
[15:48:17.535]            // =>  TRUE
[15:48:17.535]          <block atomic="false" info="">
[15:48:17.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:48:17.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:17.535]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:48:17.535]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:48:17.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:48:17.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:17.544]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:48:17.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:48:17.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:48:17.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:17.544]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:48:17.544]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:48:17.544]          </block>
[15:48:17.544]          // end if-block "!hasDormant"
[15:48:17.544]        </control>
[15:48:17.544]        // end if-block "isSWJ"
[15:48:17.544]      </control>
[15:48:17.544]      <control if="!isSWJ" while="" timeout="0" info="">
[15:48:17.544]        // if-block "!isSWJ"
[15:48:17.544]          // =>  FALSE
[15:48:17.544]        // skip if-block "!isSWJ"
[15:48:17.544]      </control>
[15:48:17.544]      <block atomic="false" info="">
[15:48:17.544]        ReadDP(0x0);
[15:48:17.554]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:48:17.554]      </block>
[15:48:17.554]      // end if-block "protType == 2"
[15:48:17.554]    </control>
[15:48:17.554]  </sequence>
[15:48:17.554]  
[15:48:17.556]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:48:17.556]  
[15:48:17.556]  <debugvars>
[15:48:17.556]    // Pre-defined
[15:48:17.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:17.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:17.556]    __dp=0x00000000
[15:48:17.556]    __ap=0x00000000
[15:48:17.556]    __traceout=0x00000000      (Trace Disabled)
[15:48:17.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:17.556]    __FlashAddr=0x00000000
[15:48:17.556]    __FlashLen=0x00000000
[15:48:17.556]    __FlashArg=0x00000000
[15:48:17.556]    __FlashOp=0x00000000
[15:48:17.556]    __Result=0x00000000
[15:48:17.556]  </debugvars>
[15:48:17.556]  
[15:48:17.556]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:48:17.556]    <block atomic="false" info="">
[15:48:17.556]      __var SW_DP_ABORT       = 0x0;
[15:48:17.556]        // -> [SW_DP_ABORT <= 0x00000000]
[15:48:17.556]      __var DP_CTRL_STAT      = 0x4;
[15:48:17.556]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:48:17.556]      __var DP_SELECT         = 0x8;
[15:48:17.556]        // -> [DP_SELECT <= 0x00000008]
[15:48:17.556]      __var powered_down      = 0;
[15:48:17.556]        // -> [powered_down <= 0x00000000]
[15:48:17.556]      WriteDP(DP_SELECT, 0x00000000);
[15:48:17.556]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:48:17.556]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:48:17.564]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:48:17.564]        // -> [powered_down <= 0x00000001]
[15:48:17.564]    </block>
[15:48:17.564]    <control if="powered_down" while="" timeout="0" info="">
[15:48:17.564]      // if-block "powered_down"
[15:48:17.564]        // =>  TRUE
[15:48:17.564]      <block atomic="false" info="">
[15:48:17.564]        Message(0, "Debug/System power-up request sent");
[15:48:17.566]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:48:17.566]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:48:17.566]      </block>
[15:48:17.566]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:48:17.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:48:17.566]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:48:17.566]        // while-condition  =>  FALSE
[15:48:17.566]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:48:17.566]      </control>
[15:48:17.566]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:48:17.566]        // if-block "(__protocol & 0xFFFF) == 1"
[15:48:17.566]          // =>  FALSE
[15:48:17.566]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:48:17.566]      </control>
[15:48:17.566]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:48:17.566]        // if-block "(__protocol & 0xFFFF) == 2"
[15:48:17.566]          // =>  TRUE
[15:48:17.566]        <block atomic="false" info="">
[15:48:17.566]          Message(0, "executing SWD power up");
[15:48:17.566]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:48:17.574]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:48:17.574]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:48:17.574]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:48:17.574]        </block>
[15:48:17.574]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:48:17.574]      </control>
[15:48:17.574]      // end if-block "powered_down"
[15:48:17.574]    </control>
[15:48:17.574]    <block atomic="false" info="">
[15:48:17.574]      __var DEBUG_PORT_VAL    = 0;
[15:48:17.574]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:48:17.574]      __var ACCESS_POINT_VAL  = 0;
[15:48:17.574]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:48:17.574]      __ap = 1; 
[15:48:17.574]        // -> [__ap <= 0x00000001]
[15:48:17.574]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:48:17.574]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:48:17.581]      __ap = 4;
[15:48:17.581]        // -> [__ap <= 0x00000004]
[15:48:17.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:48:17.585]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:48:17.585]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:48:17.585]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:48:17.585]    </block>
[15:48:17.585]    <block atomic="false" info="">
[15:48:17.585]      __var nReset = 0x80;
[15:48:17.585]        // -> [nReset <= 0x00000080]
[15:48:17.585]      __var canReadPins = 0;
[15:48:17.585]        // -> [canReadPins <= 0x00000000]
[15:48:17.585]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:48:17.585]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:48:17.585]        // -> [canReadPins <= 0x00000001]
[15:48:17.585]    </block>
[15:48:17.585]    <control if="" while="1" timeout="200" info="">
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.585]      // while "1"  (timeout="200")
[15:48:17.585]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.594]      // while "1"  (timeout="200")
[15:48:17.594]      // while-condition  =>  TRUE
[15:48:17.604]      // while "1"  (timeout="200")
[15:48:17.604]      // while  =>  TIMEOUT
[15:48:17.604]      // end while "1"
[15:48:17.604]    </control>
[15:48:17.604]    <control if="canReadPins" while="" timeout="0" info="">
[15:48:17.604]      // if-block "canReadPins"
[15:48:17.604]        // =>  TRUE
[15:48:17.604]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:48:17.604]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:48:17.604]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:48:17.604]        // while-condition  =>  FALSE
[15:48:17.604]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:48:17.604]      </control>
[15:48:17.604]      // end if-block "canReadPins"
[15:48:17.604]    </control>
[15:48:17.604]    <control if="!canReadPins" while="" timeout="0" info="">
[15:48:17.604]      // if-block "!canReadPins"
[15:48:17.604]        // =>  FALSE
[15:48:17.604]      // skip if-block "!canReadPins"
[15:48:17.604]    </control>
[15:48:17.604]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:48:17.604]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:48:17.604]        // =>  TRUE
[15:48:17.604]      <block atomic="false" info="">
[15:48:17.604]        WriteAP(0x00, 0x190008);
[15:48:17.604]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:48:17.604]        WriteAP(0xF0, 0x01);
[15:48:17.614]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:48:17.614]      </block>
[15:48:17.614]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:48:17.614]    </control>
[15:48:17.614]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:48:17.614]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:48:17.614]        // =>  FALSE
[15:48:17.614]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:48:17.614]    </control>
[15:48:17.614]    <block atomic="false" info="">
[15:48:17.614]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:48:17.614]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:48:17.614]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:48:17.614]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:48:17.614]      __ap = 0; //lets make sure we reset the access point selection
[15:48:17.614]        // -> [__ap <= 0x00000000]
[15:48:17.614]    </block>
[15:48:17.614]  </sequence>
[15:48:17.614]  
[15:48:17.639]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:48:17.639]  
[15:48:17.639]  <debugvars>
[15:48:17.643]    // Pre-defined
[15:48:17.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:17.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:17.643]    __dp=0x00000000
[15:48:17.643]    __ap=0x00000000
[15:48:17.643]    __traceout=0x00000000      (Trace Disabled)
[15:48:17.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:17.643]    __FlashAddr=0x00000000
[15:48:17.643]    __FlashLen=0x00000000
[15:48:17.643]    __FlashArg=0x00000000
[15:48:17.643]    __FlashOp=0x00000000
[15:48:17.643]    __Result=0x00000000
[15:48:17.643]  </debugvars>
[15:48:17.643]  
[15:48:17.643]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:48:17.643]    <block atomic="false" info="">
[15:48:17.643]      __var deviceID = 0;
[15:48:17.643]        // -> [deviceID <= 0x00000000]
[15:48:17.643]      __var version = 0;
[15:48:17.643]        // -> [version <= 0x00000000]
[15:48:17.643]      __var partNum = 0;
[15:48:17.643]        // -> [partNum <= 0x00000000]
[15:48:17.643]      __var manuf = 0;
[15:48:17.643]        // -> [manuf <= 0x00000000]
[15:48:17.643]      __var isMSPM0G1X0X_G3X0X = 0;
[15:48:17.643]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:48:17.643]      __var isProduction = 0;
[15:48:17.643]        // -> [isProduction <= 0x00000000]
[15:48:17.643]      __var continueId = 0;
[15:48:17.643]        // -> [continueId <= 0x00000000]
[15:48:17.643]      deviceID =   Read32(0x41C40004);
[15:48:17.649]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:48:17.649]        // -> [deviceID <= 0x2BB8802F]
[15:48:17.649]      version = deviceID >> 28;
[15:48:17.649]        // -> [version <= 0x00000002]
[15:48:17.649]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:48:17.649]        // -> [partNum <= 0x0000BB88]
[15:48:17.649]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:48:17.649]        // -> [manuf <= 0x00000017]
[15:48:17.649]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:48:17.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:48:17.649]      isProduction = (version > 0);
[15:48:17.649]        // -> [isProduction <= 0x00000001]
[15:48:17.649]    </block>
[15:48:17.649]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:48:17.654]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:48:17.654]        // =>  FALSE
[15:48:17.654]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:48:17.654]    </control>
[15:48:17.654]    <control if="continueId == 4" while="" timeout="0" info="">
[15:48:17.654]      // if-block "continueId == 4"
[15:48:17.654]        // =>  FALSE
[15:48:17.654]      // skip if-block "continueId == 4"
[15:48:17.654]    </control>
[15:48:17.654]    <control if="!isProduction" while="" timeout="0" info="">
[15:48:17.654]      // if-block "!isProduction"
[15:48:17.654]        // =>  FALSE
[15:48:17.654]      // skip if-block "!isProduction"
[15:48:17.654]    </control>
[15:48:17.654]  </sequence>
[15:48:17.654]  
[15:50:45.920]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:50:45.920]  
[15:50:45.920]  <debugvars>
[15:50:45.920]    // Pre-defined
[15:50:45.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:45.920]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:45.920]    __dp=0x00000000
[15:50:45.920]    __ap=0x00000000
[15:50:45.920]    __traceout=0x00000000      (Trace Disabled)
[15:50:45.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:45.920]    __FlashAddr=0x00000000
[15:50:45.925]    __FlashLen=0x00000000
[15:50:45.925]    __FlashArg=0x00000000
[15:50:45.925]    __FlashOp=0x00000000
[15:50:45.925]    __Result=0x00000000
[15:50:45.925]  </debugvars>
[15:50:45.925]  
[15:50:45.926]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:50:45.926]    <block atomic="false" info="">
[15:50:45.926]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:50:45.926]        // -> [isSWJ <= 0x00000001]
[15:50:45.926]      __var hasDormant = __protocol & 0x00020000;
[15:50:45.926]        // -> [hasDormant <= 0x00000000]
[15:50:45.926]      __var protType   = __protocol & 0x0000FFFF;
[15:50:45.926]        // -> [protType <= 0x00000002]
[15:50:45.926]    </block>
[15:50:45.926]    <control if="protType == 1" while="" timeout="0" info="">
[15:50:45.926]      // if-block "protType == 1"
[15:50:45.926]        // =>  FALSE
[15:50:45.926]      // skip if-block "protType == 1"
[15:50:45.926]    </control>
[15:50:45.927]    <control if="protType == 2" while="" timeout="0" info="">
[15:50:45.927]      // if-block "protType == 2"
[15:50:45.927]        // =>  TRUE
[15:50:45.927]      <control if="isSWJ" while="" timeout="0" info="">
[15:50:45.927]        // if-block "isSWJ"
[15:50:45.927]          // =>  TRUE
[15:50:45.927]        <control if="hasDormant" while="" timeout="0" info="">
[15:50:45.927]          // if-block "hasDormant"
[15:50:45.929]            // =>  FALSE
[15:50:45.929]          // skip if-block "hasDormant"
[15:50:45.929]        </control>
[15:50:45.929]        <control if="!hasDormant" while="" timeout="0" info="">
[15:50:45.929]          // if-block "!hasDormant"
[15:50:45.929]            // =>  TRUE
[15:50:45.929]          <block atomic="false" info="">
[15:50:45.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:50:45.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:45.930]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:50:45.930]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:50:45.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:50:45.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:45.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:50:45.936]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:50:45.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:50:45.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:45.938]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:50:45.939]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:50:45.939]          </block>
[15:50:45.939]          // end if-block "!hasDormant"
[15:50:45.939]        </control>
[15:50:45.939]        // end if-block "isSWJ"
[15:50:45.939]      </control>
[15:50:45.939]      <control if="!isSWJ" while="" timeout="0" info="">
[15:50:45.940]        // if-block "!isSWJ"
[15:50:45.940]          // =>  FALSE
[15:50:45.940]        // skip if-block "!isSWJ"
[15:50:45.940]      </control>
[15:50:45.940]      <block atomic="false" info="">
[15:50:45.940]        ReadDP(0x0);
[15:50:45.941]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:50:45.941]      </block>
[15:50:45.941]      // end if-block "protType == 2"
[15:50:45.941]    </control>
[15:50:45.941]  </sequence>
[15:50:45.941]  
[15:50:45.945]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:50:45.945]  
[15:50:45.945]  <debugvars>
[15:50:45.945]    // Pre-defined
[15:50:45.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:45.945]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:45.945]    __dp=0x00000000
[15:50:45.945]    __ap=0x00000000
[15:50:45.945]    __traceout=0x00000000      (Trace Disabled)
[15:50:45.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:45.945]    __FlashAddr=0x00000000
[15:50:45.945]    __FlashLen=0x00000000
[15:50:45.945]    __FlashArg=0x00000000
[15:50:45.945]    __FlashOp=0x00000000
[15:50:45.945]    __Result=0x00000000
[15:50:45.945]  </debugvars>
[15:50:45.945]  
[15:50:45.945]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:50:45.945]    <block atomic="false" info="">
[15:50:45.945]      __var SW_DP_ABORT       = 0x0;
[15:50:45.945]        // -> [SW_DP_ABORT <= 0x00000000]
[15:50:45.945]      __var DP_CTRL_STAT      = 0x4;
[15:50:45.945]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:50:45.945]      __var DP_SELECT         = 0x8;
[15:50:45.947]        // -> [DP_SELECT <= 0x00000008]
[15:50:45.947]      __var powered_down      = 0;
[15:50:45.948]        // -> [powered_down <= 0x00000000]
[15:50:45.948]      WriteDP(DP_SELECT, 0x00000000);
[15:50:45.949]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:50:45.949]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:50:45.950]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:50:45.950]        // -> [powered_down <= 0x00000001]
[15:50:45.950]    </block>
[15:50:45.950]    <control if="powered_down" while="" timeout="0" info="">
[15:50:45.950]      // if-block "powered_down"
[15:50:45.950]        // =>  TRUE
[15:50:45.950]      <block atomic="false" info="">
[15:50:45.950]        Message(0, "Debug/System power-up request sent");
[15:50:45.953]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:50:45.955]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:50:45.955]      </block>
[15:50:45.955]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:50:45.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:50:45.957]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:50:45.957]        // while-condition  =>  FALSE
[15:50:45.957]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:50:45.957]      </control>
[15:50:45.957]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:50:45.957]        // if-block "(__protocol & 0xFFFF) == 1"
[15:50:45.957]          // =>  FALSE
[15:50:45.957]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:50:45.957]      </control>
[15:50:45.958]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:50:45.958]        // if-block "(__protocol & 0xFFFF) == 2"
[15:50:45.958]          // =>  TRUE
[15:50:45.958]        <block atomic="false" info="">
[15:50:45.958]          Message(0, "executing SWD power up");
[15:50:45.959]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:50:45.961]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:50:45.961]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:50:45.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:50:45.963]        </block>
[15:50:45.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:50:45.963]      </control>
[15:50:45.963]      // end if-block "powered_down"
[15:50:45.963]    </control>
[15:50:45.963]    <block atomic="false" info="">
[15:50:45.963]      __var DEBUG_PORT_VAL    = 0;
[15:50:45.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:50:45.963]      __var ACCESS_POINT_VAL  = 0;
[15:50:45.963]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:50:45.965]      __ap = 1; 
[15:50:45.965]        // -> [__ap <= 0x00000001]
[15:50:45.965]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:50:45.968]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:50:45.968]      __ap = 4;
[15:50:45.968]        // -> [__ap <= 0x00000004]
[15:50:45.968]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:50:45.972]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:50:45.972]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:50:45.972]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:50:45.973]    </block>
[15:50:45.973]    <block atomic="false" info="">
[15:50:45.973]      __var nReset = 0x80;
[15:50:45.973]        // -> [nReset <= 0x00000080]
[15:50:45.973]      __var canReadPins = 0;
[15:50:45.973]        // -> [canReadPins <= 0x00000000]
[15:50:45.973]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:50:45.975]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:50:45.975]        // -> [canReadPins <= 0x00000001]
[15:50:45.975]    </block>
[15:50:45.975]    <control if="" while="1" timeout="200" info="">
[15:50:45.975]      // while "1"  (timeout="200")
[15:50:45.975]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.977]      // while "1"  (timeout="200")
[15:50:45.977]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.978]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.978]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.978]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.978]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.978]      // while-condition  =>  TRUE
[15:50:45.978]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.979]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.979]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.979]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.979]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.979]      // while "1"  (timeout="200")
[15:50:45.979]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.980]      // while-condition  =>  TRUE
[15:50:45.980]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.981]      // while-condition  =>  TRUE
[15:50:45.981]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.982]      // while-condition  =>  TRUE
[15:50:45.982]      // while "1"  (timeout="200")
[15:50:45.984]      // while-condition  =>  TRUE
[15:50:45.984]      // while "1"  (timeout="200")
[15:50:45.984]      // while-condition  =>  TRUE
[15:50:45.984]      // while "1"  (timeout="200")
[15:50:45.984]      // while-condition  =>  TRUE
[15:50:45.984]      // while "1"  (timeout="200")
[15:50:45.984]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.985]      // while-condition  =>  TRUE
[15:50:45.985]      // while "1"  (timeout="200")
[15:50:45.987]      // while-condition  =>  TRUE
[15:50:45.987]      // while "1"  (timeout="200")
[15:50:45.987]      // while  =>  TIMEOUT
[15:50:45.987]      // end while "1"
[15:50:45.987]    </control>
[15:50:45.987]    <control if="canReadPins" while="" timeout="0" info="">
[15:50:45.987]      // if-block "canReadPins"
[15:50:45.987]        // =>  TRUE
[15:50:45.987]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:50:45.987]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:50:45.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:50:45.990]        // while-condition  =>  FALSE
[15:50:45.990]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:50:45.990]      </control>
[15:50:45.990]      // end if-block "canReadPins"
[15:50:45.990]    </control>
[15:50:45.990]    <control if="!canReadPins" while="" timeout="0" info="">
[15:50:45.990]      // if-block "!canReadPins"
[15:50:45.990]        // =>  FALSE
[15:50:45.990]      // skip if-block "!canReadPins"
[15:50:45.990]    </control>
[15:50:45.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:50:45.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:50:45.990]        // =>  TRUE
[15:50:45.990]      <block atomic="false" info="">
[15:50:45.990]        WriteAP(0x00, 0x190008);
[15:50:45.993]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:50:45.993]        WriteAP(0xF0, 0x01);
[15:50:45.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:50:45.996]      </block>
[15:50:45.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:50:45.996]    </control>
[15:50:45.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:50:45.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:50:45.996]        // =>  FALSE
[15:50:45.999]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:50:45.999]    </control>
[15:50:45.999]    <block atomic="false" info="">
[15:50:45.999]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:50:46.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:50:46.004]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:50:46.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:50:46.005]      __ap = 0; //lets make sure we reset the access point selection
[15:50:46.005]        // -> [__ap <= 0x00000000]
[15:50:46.005]    </block>
[15:50:46.005]  </sequence>
[15:50:46.005]  
[15:50:46.026]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:50:46.026]  
[15:50:46.026]  <debugvars>
[15:50:46.026]    // Pre-defined
[15:50:46.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:46.026]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:46.026]    __dp=0x00000000
[15:50:46.026]    __ap=0x00000000
[15:50:46.026]    __traceout=0x00000000      (Trace Disabled)
[15:50:46.026]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:46.026]    __FlashAddr=0x00000000
[15:50:46.026]    __FlashLen=0x00000000
[15:50:46.026]    __FlashArg=0x00000000
[15:50:46.026]    __FlashOp=0x00000000
[15:50:46.026]    __Result=0x00000000
[15:50:46.026]  </debugvars>
[15:50:46.026]  
[15:50:46.026]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:50:46.026]    <block atomic="false" info="">
[15:50:46.026]      __var deviceID = 0;
[15:50:46.030]        // -> [deviceID <= 0x00000000]
[15:50:46.030]      __var version = 0;
[15:50:46.030]        // -> [version <= 0x00000000]
[15:50:46.030]      __var partNum = 0;
[15:50:46.030]        // -> [partNum <= 0x00000000]
[15:50:46.030]      __var manuf = 0;
[15:50:46.030]        // -> [manuf <= 0x00000000]
[15:50:46.030]      __var isMSPM0G1X0X_G3X0X = 0;
[15:50:46.030]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:50:46.030]      __var isProduction = 0;
[15:50:46.030]        // -> [isProduction <= 0x00000000]
[15:50:46.030]      __var continueId = 0;
[15:50:46.030]        // -> [continueId <= 0x00000000]
[15:50:46.030]      deviceID =   Read32(0x41C40004);
[15:50:46.036]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:50:46.036]        // -> [deviceID <= 0x2BB8802F]
[15:50:46.036]      version = deviceID >> 28;
[15:50:46.036]        // -> [version <= 0x00000002]
[15:50:46.036]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:50:46.036]        // -> [partNum <= 0x0000BB88]
[15:50:46.036]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:50:46.036]        // -> [manuf <= 0x00000017]
[15:50:46.036]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:50:46.036]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:50:46.036]      isProduction = (version > 0);
[15:50:46.036]        // -> [isProduction <= 0x00000001]
[15:50:46.036]    </block>
[15:50:46.040]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:50:46.040]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:50:46.040]        // =>  FALSE
[15:50:46.040]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:50:46.040]    </control>
[15:50:46.040]    <control if="continueId == 4" while="" timeout="0" info="">
[15:50:46.040]      // if-block "continueId == 4"
[15:50:46.040]        // =>  FALSE
[15:50:46.040]      // skip if-block "continueId == 4"
[15:50:46.040]    </control>
[15:50:46.041]    <control if="!isProduction" while="" timeout="0" info="">
[15:50:46.041]      // if-block "!isProduction"
[15:50:46.041]        // =>  FALSE
[15:50:46.041]      // skip if-block "!isProduction"
[15:50:46.041]    </control>
[15:50:46.041]  </sequence>
[15:50:46.041]  
[15:51:29.156]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:51:29.156]  
[15:51:29.173]  <debugvars>
[15:51:29.173]    // Pre-defined
[15:51:29.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:51:29.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:51:29.173]    __dp=0x00000000
[15:51:29.173]    __ap=0x00000000
[15:51:29.173]    __traceout=0x00000000      (Trace Disabled)
[15:51:29.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:51:29.173]    __FlashAddr=0x00000000
[15:51:29.173]    __FlashLen=0x00000000
[15:51:29.173]    __FlashArg=0x00000000
[15:51:29.173]    __FlashOp=0x00000000
[15:51:29.173]    __Result=0x00000000
[15:51:29.173]  </debugvars>
[15:51:29.173]  
[15:51:29.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:51:29.173]    <block atomic="false" info="">
[15:51:29.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:51:29.173]        // -> [isSWJ <= 0x00000001]
[15:51:29.173]      __var hasDormant = __protocol & 0x00020000;
[15:51:29.173]        // -> [hasDormant <= 0x00000000]
[15:51:29.173]      __var protType   = __protocol & 0x0000FFFF;
[15:51:29.173]        // -> [protType <= 0x00000002]
[15:51:29.173]    </block>
[15:51:29.173]    <control if="protType == 1" while="" timeout="0" info="">
[15:51:29.173]      // if-block "protType == 1"
[15:51:29.173]        // =>  FALSE
[15:51:29.173]      // skip if-block "protType == 1"
[15:51:29.173]    </control>
[15:51:29.173]    <control if="protType == 2" while="" timeout="0" info="">
[15:51:29.173]      // if-block "protType == 2"
[15:51:29.173]        // =>  TRUE
[15:51:29.173]      <control if="isSWJ" while="" timeout="0" info="">
[15:51:29.176]        // if-block "isSWJ"
[15:51:29.176]          // =>  TRUE
[15:51:29.176]        <control if="hasDormant" while="" timeout="0" info="">
[15:51:29.176]          // if-block "hasDormant"
[15:51:29.176]            // =>  FALSE
[15:51:29.176]          // skip if-block "hasDormant"
[15:51:29.176]        </control>
[15:51:29.176]        <control if="!hasDormant" while="" timeout="0" info="">
[15:51:29.176]          // if-block "!hasDormant"
[15:51:29.176]            // =>  TRUE
[15:51:29.176]          <block atomic="false" info="">
[15:51:29.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:51:29.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:51:29.176]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:51:29.176]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:51:29.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:51:29.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:51:29.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:51:29.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:51:29.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:51:29.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:51:29.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:51:29.187]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:51:29.187]          </block>
[15:51:29.187]          // end if-block "!hasDormant"
[15:51:29.187]        </control>
[15:51:29.187]        // end if-block "isSWJ"
[15:51:29.187]      </control>
[15:51:29.187]      <control if="!isSWJ" while="" timeout="0" info="">
[15:51:29.187]        // if-block "!isSWJ"
[15:51:29.187]          // =>  FALSE
[15:51:29.187]        // skip if-block "!isSWJ"
[15:51:29.187]      </control>
[15:51:29.187]      <block atomic="false" info="">
[15:51:29.187]        ReadDP(0x0);
[15:51:29.187]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:51:29.187]      </block>
[15:51:29.187]      // end if-block "protType == 2"
[15:51:29.187]    </control>
[15:51:29.187]  </sequence>
[15:51:29.187]  
[15:51:29.196]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:51:29.196]  
[15:51:29.196]  <debugvars>
[15:51:29.196]    // Pre-defined
[15:51:29.196]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:51:29.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:51:29.196]    __dp=0x00000000
[15:51:29.196]    __ap=0x00000000
[15:51:29.196]    __traceout=0x00000000      (Trace Disabled)
[15:51:29.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:51:29.196]    __FlashAddr=0x00000000
[15:51:29.196]    __FlashLen=0x00000000
[15:51:29.196]    __FlashArg=0x00000000
[15:51:29.196]    __FlashOp=0x00000000
[15:51:29.196]    __Result=0x00000000
[15:51:29.196]  </debugvars>
[15:51:29.196]  
[15:51:29.196]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:51:29.196]    <block atomic="false" info="">
[15:51:29.196]      __var SW_DP_ABORT       = 0x0;
[15:51:29.196]        // -> [SW_DP_ABORT <= 0x00000000]
[15:51:29.196]      __var DP_CTRL_STAT      = 0x4;
[15:51:29.196]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:51:29.196]      __var DP_SELECT         = 0x8;
[15:51:29.196]        // -> [DP_SELECT <= 0x00000008]
[15:51:29.196]      __var powered_down      = 0;
[15:51:29.196]        // -> [powered_down <= 0x00000000]
[15:51:29.196]      WriteDP(DP_SELECT, 0x00000000);
[15:51:29.196]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:51:29.196]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:51:29.196]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:51:29.196]        // -> [powered_down <= 0x00000001]
[15:51:29.196]    </block>
[15:51:29.196]    <control if="powered_down" while="" timeout="0" info="">
[15:51:29.196]      // if-block "powered_down"
[15:51:29.196]        // =>  TRUE
[15:51:29.207]      <block atomic="false" info="">
[15:51:29.207]        Message(0, "Debug/System power-up request sent");
[15:51:29.207]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:51:29.207]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:51:29.207]      </block>
[15:51:29.207]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:51:29.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:51:29.207]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:51:29.207]        // while-condition  =>  FALSE
[15:51:29.207]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:51:29.207]      </control>
[15:51:29.207]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:51:29.207]        // if-block "(__protocol & 0xFFFF) == 1"
[15:51:29.207]          // =>  FALSE
[15:51:29.207]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:51:29.207]      </control>
[15:51:29.207]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:51:29.207]        // if-block "(__protocol & 0xFFFF) == 2"
[15:51:29.207]          // =>  TRUE
[15:51:29.207]        <block atomic="false" info="">
[15:51:29.207]          Message(0, "executing SWD power up");
[15:51:29.216]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:51:29.217]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:51:29.217]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:51:29.219]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:51:29.219]        </block>
[15:51:29.219]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:51:29.219]      </control>
[15:51:29.219]      // end if-block "powered_down"
[15:51:29.219]    </control>
[15:51:29.219]    <block atomic="false" info="">
[15:51:29.219]      __var DEBUG_PORT_VAL    = 0;
[15:51:29.219]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:51:29.219]      __var ACCESS_POINT_VAL  = 0;
[15:51:29.219]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:51:29.219]      __ap = 1; 
[15:51:29.219]        // -> [__ap <= 0x00000001]
[15:51:29.219]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:51:29.219]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:51:29.219]      __ap = 4;
[15:51:29.219]        // -> [__ap <= 0x00000004]
[15:51:29.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:51:29.226]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:51:29.226]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:51:29.226]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:51:29.226]    </block>
[15:51:29.226]    <block atomic="false" info="">
[15:51:29.226]      __var nReset = 0x80;
[15:51:29.226]        // -> [nReset <= 0x00000080]
[15:51:29.226]      __var canReadPins = 0;
[15:51:29.226]        // -> [canReadPins <= 0x00000000]
[15:51:29.226]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:51:29.226]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:51:29.226]        // -> [canReadPins <= 0x00000001]
[15:51:29.226]    </block>
[15:51:29.226]    <control if="" while="1" timeout="200" info="">
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.226]      // while "1"  (timeout="200")
[15:51:29.226]      // while-condition  =>  TRUE
[15:51:29.236]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.237]      // while-condition  =>  TRUE
[15:51:29.237]      // while "1"  (timeout="200")
[15:51:29.247]      // while-condition  =>  TRUE
[15:51:29.247]      // while "1"  (timeout="200")
[15:51:29.247]      // while  =>  TIMEOUT
[15:51:29.247]      // end while "1"
[15:51:29.247]    </control>
[15:51:29.247]    <control if="canReadPins" while="" timeout="0" info="">
[15:51:29.247]      // if-block "canReadPins"
[15:51:29.247]        // =>  TRUE
[15:51:29.247]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:51:29.247]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:51:29.247]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:51:29.247]        // while-condition  =>  FALSE
[15:51:29.247]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:51:29.247]      </control>
[15:51:29.247]      // end if-block "canReadPins"
[15:51:29.247]    </control>
[15:51:29.247]    <control if="!canReadPins" while="" timeout="0" info="">
[15:51:29.247]      // if-block "!canReadPins"
[15:51:29.247]        // =>  FALSE
[15:51:29.247]      // skip if-block "!canReadPins"
[15:51:29.247]    </control>
[15:51:29.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:51:29.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:51:29.247]        // =>  TRUE
[15:51:29.247]      <block atomic="false" info="">
[15:51:29.247]        WriteAP(0x00, 0x190008);
[15:51:29.247]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:51:29.247]        WriteAP(0xF0, 0x01);
[15:51:29.257]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:51:29.257]      </block>
[15:51:29.257]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:51:29.257]    </control>
[15:51:29.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:51:29.257]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:51:29.257]        // =>  FALSE
[15:51:29.257]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:51:29.257]    </control>
[15:51:29.257]    <block atomic="false" info="">
[15:51:29.257]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:51:29.257]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:51:29.257]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:51:29.257]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:51:29.257]      __ap = 0; //lets make sure we reset the access point selection
[15:51:29.257]        // -> [__ap <= 0x00000000]
[15:51:29.257]    </block>
[15:51:29.257]  </sequence>
[15:51:29.257]  
[15:51:29.277]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:51:29.277]  
[15:51:29.277]  <debugvars>
[15:51:29.277]    // Pre-defined
[15:51:29.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:51:29.277]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:51:29.277]    __dp=0x00000000
[15:51:29.277]    __ap=0x00000000
[15:51:29.277]    __traceout=0x00000000      (Trace Disabled)
[15:51:29.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:51:29.277]    __FlashAddr=0x00000000
[15:51:29.277]    __FlashLen=0x00000000
[15:51:29.277]    __FlashArg=0x00000000
[15:51:29.277]    __FlashOp=0x00000000
[15:51:29.277]    __Result=0x00000000
[15:51:29.286]  </debugvars>
[15:51:29.287]  
[15:51:29.287]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:51:29.287]    <block atomic="false" info="">
[15:51:29.287]      __var deviceID = 0;
[15:51:29.287]        // -> [deviceID <= 0x00000000]
[15:51:29.287]      __var version = 0;
[15:51:29.287]        // -> [version <= 0x00000000]
[15:51:29.287]      __var partNum = 0;
[15:51:29.287]        // -> [partNum <= 0x00000000]
[15:51:29.287]      __var manuf = 0;
[15:51:29.287]        // -> [manuf <= 0x00000000]
[15:51:29.287]      __var isMSPM0G1X0X_G3X0X = 0;
[15:51:29.287]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:51:29.287]      __var isProduction = 0;
[15:51:29.287]        // -> [isProduction <= 0x00000000]
[15:51:29.287]      __var continueId = 0;
[15:51:29.287]        // -> [continueId <= 0x00000000]
[15:51:29.287]      deviceID =   Read32(0x41C40004);
[15:51:29.287]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:51:29.287]        // -> [deviceID <= 0x2BB8802F]
[15:51:29.287]      version = deviceID >> 28;
[15:51:29.287]        // -> [version <= 0x00000002]
[15:51:29.287]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:51:29.287]        // -> [partNum <= 0x0000BB88]
[15:51:29.287]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:51:29.287]        // -> [manuf <= 0x00000017]
[15:51:29.287]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:51:29.287]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:51:29.287]      isProduction = (version > 0);
[15:51:29.287]        // -> [isProduction <= 0x00000001]
[15:51:29.287]    </block>
[15:51:29.287]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:51:29.287]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:51:29.287]        // =>  FALSE
[15:51:29.287]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:51:29.287]    </control>
[15:51:29.287]    <control if="continueId == 4" while="" timeout="0" info="">
[15:51:29.287]      // if-block "continueId == 4"
[15:51:29.287]        // =>  FALSE
[15:51:29.287]      // skip if-block "continueId == 4"
[15:51:29.287]    </control>
[15:51:29.287]    <control if="!isProduction" while="" timeout="0" info="">
[15:51:29.296]      // if-block "!isProduction"
[15:51:29.297]        // =>  FALSE
[15:51:29.297]      // skip if-block "!isProduction"
[15:51:29.297]    </control>
[15:51:29.297]  </sequence>
[15:51:29.297]  
[16:02:53.062]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:02:53.062]  
[16:02:53.062]  <debugvars>
[16:02:53.062]    // Pre-defined
[16:02:53.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:53.062]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:53.072]    __dp=0x00000000
[16:02:53.072]    __ap=0x00000000
[16:02:53.072]    __traceout=0x00000000      (Trace Disabled)
[16:02:53.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:53.072]    __FlashAddr=0x00000000
[16:02:53.072]    __FlashLen=0x00000000
[16:02:53.072]    __FlashArg=0x00000000
[16:02:53.072]    __FlashOp=0x00000000
[16:02:53.072]    __Result=0x00000000
[16:02:53.072]  </debugvars>
[16:02:53.072]  
[16:02:53.072]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:02:53.072]    <block atomic="false" info="">
[16:02:53.072]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:02:53.072]        // -> [isSWJ <= 0x00000001]
[16:02:53.072]      __var hasDormant = __protocol & 0x00020000;
[16:02:53.072]        // -> [hasDormant <= 0x00000000]
[16:02:53.072]      __var protType   = __protocol & 0x0000FFFF;
[16:02:53.072]        // -> [protType <= 0x00000002]
[16:02:53.072]    </block>
[16:02:53.072]    <control if="protType == 1" while="" timeout="0" info="">
[16:02:53.072]      // if-block "protType == 1"
[16:02:53.072]        // =>  FALSE
[16:02:53.072]      // skip if-block "protType == 1"
[16:02:53.072]    </control>
[16:02:53.072]    <control if="protType == 2" while="" timeout="0" info="">
[16:02:53.072]      // if-block "protType == 2"
[16:02:53.072]        // =>  TRUE
[16:02:53.072]      <control if="isSWJ" while="" timeout="0" info="">
[16:02:53.072]        // if-block "isSWJ"
[16:02:53.072]          // =>  TRUE
[16:02:53.072]        <control if="hasDormant" while="" timeout="0" info="">
[16:02:53.072]          // if-block "hasDormant"
[16:02:53.072]            // =>  FALSE
[16:02:53.072]          // skip if-block "hasDormant"
[16:02:53.072]        </control>
[16:02:53.072]        <control if="!hasDormant" while="" timeout="0" info="">
[16:02:53.072]          // if-block "!hasDormant"
[16:02:53.072]            // =>  TRUE
[16:02:53.072]          <block atomic="false" info="">
[16:02:53.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:02:53.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:53.072]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:02:53.082]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:02:53.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:02:53.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:53.082]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:02:53.082]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:02:53.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:02:53.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:53.082]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:02:53.082]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:02:53.082]          </block>
[16:02:53.082]          // end if-block "!hasDormant"
[16:02:53.082]        </control>
[16:02:53.082]        // end if-block "isSWJ"
[16:02:53.082]      </control>
[16:02:53.082]      <control if="!isSWJ" while="" timeout="0" info="">
[16:02:53.082]        // if-block "!isSWJ"
[16:02:53.082]          // =>  FALSE
[16:02:53.082]        // skip if-block "!isSWJ"
[16:02:53.082]      </control>
[16:02:53.082]      <block atomic="false" info="">
[16:02:53.082]        ReadDP(0x0);
[16:02:53.092]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:02:53.092]      </block>
[16:02:53.092]      // end if-block "protType == 2"
[16:02:53.092]    </control>
[16:02:53.092]  </sequence>
[16:02:53.092]  
[16:02:53.092]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:02:53.092]  
[16:02:53.092]  <debugvars>
[16:02:53.092]    // Pre-defined
[16:02:53.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:53.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:53.092]    __dp=0x00000000
[16:02:53.092]    __ap=0x00000000
[16:02:53.092]    __traceout=0x00000000      (Trace Disabled)
[16:02:53.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:53.092]    __FlashAddr=0x00000000
[16:02:53.092]    __FlashLen=0x00000000
[16:02:53.092]    __FlashArg=0x00000000
[16:02:53.092]    __FlashOp=0x00000000
[16:02:53.092]    __Result=0x00000000
[16:02:53.092]  </debugvars>
[16:02:53.092]  
[16:02:53.092]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:02:53.092]    <block atomic="false" info="">
[16:02:53.092]      __var SW_DP_ABORT       = 0x0;
[16:02:53.092]        // -> [SW_DP_ABORT <= 0x00000000]
[16:02:53.092]      __var DP_CTRL_STAT      = 0x4;
[16:02:53.092]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:02:53.092]      __var DP_SELECT         = 0x8;
[16:02:53.092]        // -> [DP_SELECT <= 0x00000008]
[16:02:53.092]      __var powered_down      = 0;
[16:02:53.092]        // -> [powered_down <= 0x00000000]
[16:02:53.092]      WriteDP(DP_SELECT, 0x00000000);
[16:02:53.092]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:02:53.092]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:02:53.102]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:02:53.102]        // -> [powered_down <= 0x00000001]
[16:02:53.102]    </block>
[16:02:53.102]    <control if="powered_down" while="" timeout="0" info="">
[16:02:53.102]      // if-block "powered_down"
[16:02:53.102]        // =>  TRUE
[16:02:53.102]      <block atomic="false" info="">
[16:02:53.102]        Message(0, "Debug/System power-up request sent");
[16:02:53.102]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:02:53.102]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:02:53.102]      </block>
[16:02:53.102]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:02:53.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:53.102]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:02:53.102]        // while-condition  =>  FALSE
[16:02:53.102]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:02:53.102]      </control>
[16:02:53.102]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:02:53.102]        // if-block "(__protocol & 0xFFFF) == 1"
[16:02:53.102]          // =>  FALSE
[16:02:53.102]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:02:53.102]      </control>
[16:02:53.102]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:02:53.112]        // if-block "(__protocol & 0xFFFF) == 2"
[16:02:53.112]          // =>  TRUE
[16:02:53.112]        <block atomic="false" info="">
[16:02:53.112]          Message(0, "executing SWD power up");
[16:02:53.112]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:02:53.112]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:02:53.112]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:02:53.112]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:02:53.112]        </block>
[16:02:53.112]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:02:53.112]      </control>
[16:02:53.112]      // end if-block "powered_down"
[16:02:53.112]    </control>
[16:02:53.112]    <block atomic="false" info="">
[16:02:53.112]      __var DEBUG_PORT_VAL    = 0;
[16:02:53.112]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:02:53.112]      __var ACCESS_POINT_VAL  = 0;
[16:02:53.112]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:02:53.112]      __ap = 1; 
[16:02:53.112]        // -> [__ap <= 0x00000001]
[16:02:53.112]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:02:53.122]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:02:53.122]      __ap = 4;
[16:02:53.122]        // -> [__ap <= 0x00000004]
[16:02:53.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:02:53.122]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:02:53.122]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:02:53.122]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:02:53.132]    </block>
[16:02:53.132]    <block atomic="false" info="">
[16:02:53.132]      __var nReset = 0x80;
[16:02:53.132]        // -> [nReset <= 0x00000080]
[16:02:53.132]      __var canReadPins = 0;
[16:02:53.132]        // -> [canReadPins <= 0x00000000]
[16:02:53.132]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:02:53.132]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:02:53.132]        // -> [canReadPins <= 0x00000001]
[16:02:53.132]    </block>
[16:02:53.132]    <control if="" while="1" timeout="200" info="">
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.132]      // while "1"  (timeout="200")
[16:02:53.132]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.142]      // while "1"  (timeout="200")
[16:02:53.142]      // while-condition  =>  TRUE
[16:02:53.152]      // while "1"  (timeout="200")
[16:02:53.152]      // while  =>  TIMEOUT
[16:02:53.152]      // end while "1"
[16:02:53.152]    </control>
[16:02:53.152]    <control if="canReadPins" while="" timeout="0" info="">
[16:02:53.152]      // if-block "canReadPins"
[16:02:53.152]        // =>  TRUE
[16:02:53.152]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:02:53.152]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:02:53.152]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:02:53.152]        // while-condition  =>  FALSE
[16:02:53.152]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:02:53.152]      </control>
[16:02:53.152]      // end if-block "canReadPins"
[16:02:53.152]    </control>
[16:02:53.152]    <control if="!canReadPins" while="" timeout="0" info="">
[16:02:53.152]      // if-block "!canReadPins"
[16:02:53.152]        // =>  FALSE
[16:02:53.152]      // skip if-block "!canReadPins"
[16:02:53.152]    </control>
[16:02:53.152]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:02:53.152]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:02:53.152]        // =>  TRUE
[16:02:53.152]      <block atomic="false" info="">
[16:02:53.152]        WriteAP(0x00, 0x190008);
[16:02:53.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:02:53.152]        WriteAP(0xF0, 0x01);
[16:02:53.162]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:02:53.162]      </block>
[16:02:53.162]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:02:53.162]    </control>
[16:02:53.162]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:02:53.162]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:02:53.162]        // =>  FALSE
[16:02:53.162]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:02:53.162]    </control>
[16:02:53.162]    <block atomic="false" info="">
[16:02:53.162]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:02:53.162]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:02:53.162]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:02:53.162]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:02:53.162]      __ap = 0; //lets make sure we reset the access point selection
[16:02:53.162]        // -> [__ap <= 0x00000000]
[16:02:53.162]    </block>
[16:02:53.162]  </sequence>
[16:02:53.162]  
[16:02:53.192]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:02:53.192]  
[16:02:53.192]  <debugvars>
[16:02:53.192]    // Pre-defined
[16:02:53.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:53.192]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:53.192]    __dp=0x00000000
[16:02:53.192]    __ap=0x00000000
[16:02:53.192]    __traceout=0x00000000      (Trace Disabled)
[16:02:53.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:53.192]    __FlashAddr=0x00000000
[16:02:53.192]    __FlashLen=0x00000000
[16:02:53.192]    __FlashArg=0x00000000
[16:02:53.192]    __FlashOp=0x00000000
[16:02:53.192]    __Result=0x00000000
[16:02:53.192]  </debugvars>
[16:02:53.192]  
[16:02:53.192]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:02:53.192]    <block atomic="false" info="">
[16:02:53.192]      __var deviceID = 0;
[16:02:53.192]        // -> [deviceID <= 0x00000000]
[16:02:53.192]      __var version = 0;
[16:02:53.192]        // -> [version <= 0x00000000]
[16:02:53.192]      __var partNum = 0;
[16:02:53.192]        // -> [partNum <= 0x00000000]
[16:02:53.192]      __var manuf = 0;
[16:02:53.192]        // -> [manuf <= 0x00000000]
[16:02:53.192]      __var isMSPM0G1X0X_G3X0X = 0;
[16:02:53.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:02:53.192]      __var isProduction = 0;
[16:02:53.192]        // -> [isProduction <= 0x00000000]
[16:02:53.192]      __var continueId = 0;
[16:02:53.192]        // -> [continueId <= 0x00000000]
[16:02:53.192]      deviceID =   Read32(0x41C40004);
[16:02:53.202]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:02:53.202]        // -> [deviceID <= 0x2BB8802F]
[16:02:53.202]      version = deviceID >> 28;
[16:02:53.202]        // -> [version <= 0x00000002]
[16:02:53.202]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:02:53.202]        // -> [partNum <= 0x0000BB88]
[16:02:53.202]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:02:53.202]        // -> [manuf <= 0x00000017]
[16:02:53.202]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:02:53.202]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:02:53.202]      isProduction = (version > 0);
[16:02:53.202]        // -> [isProduction <= 0x00000001]
[16:02:53.202]    </block>
[16:02:53.202]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:02:53.202]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:02:53.202]        // =>  FALSE
[16:02:53.202]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:02:53.202]    </control>
[16:02:53.202]    <control if="continueId == 4" while="" timeout="0" info="">
[16:02:53.202]      // if-block "continueId == 4"
[16:02:53.202]        // =>  FALSE
[16:02:53.202]      // skip if-block "continueId == 4"
[16:02:53.202]    </control>
[16:02:53.202]    <control if="!isProduction" while="" timeout="0" info="">
[16:02:53.202]      // if-block "!isProduction"
[16:02:53.202]        // =>  FALSE
[16:02:53.202]      // skip if-block "!isProduction"
[16:02:53.202]    </control>
[16:02:53.202]  </sequence>
[16:02:53.202]  
[16:03:48.382]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:03:48.382]  
[16:03:48.382]  <debugvars>
[16:03:48.382]    // Pre-defined
[16:03:48.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:03:48.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:03:48.382]    __dp=0x00000000
[16:03:48.382]    __ap=0x00000000
[16:03:48.382]    __traceout=0x00000000      (Trace Disabled)
[16:03:48.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:03:48.382]    __FlashAddr=0x00000000
[16:03:48.382]    __FlashLen=0x00000000
[16:03:48.382]    __FlashArg=0x00000000
[16:03:48.382]    __FlashOp=0x00000000
[16:03:48.382]    __Result=0x00000000
[16:03:48.382]  </debugvars>
[16:03:48.382]  
[16:03:48.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:03:48.382]    <block atomic="false" info="">
[16:03:48.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:03:48.382]        // -> [isSWJ <= 0x00000001]
[16:03:48.382]      __var hasDormant = __protocol & 0x00020000;
[16:03:48.382]        // -> [hasDormant <= 0x00000000]
[16:03:48.382]      __var protType   = __protocol & 0x0000FFFF;
[16:03:48.382]        // -> [protType <= 0x00000002]
[16:03:48.382]    </block>
[16:03:48.382]    <control if="protType == 1" while="" timeout="0" info="">
[16:03:48.382]      // if-block "protType == 1"
[16:03:48.382]        // =>  FALSE
[16:03:48.382]      // skip if-block "protType == 1"
[16:03:48.382]    </control>
[16:03:48.382]    <control if="protType == 2" while="" timeout="0" info="">
[16:03:48.382]      // if-block "protType == 2"
[16:03:48.382]        // =>  TRUE
[16:03:48.382]      <control if="isSWJ" while="" timeout="0" info="">
[16:03:48.382]        // if-block "isSWJ"
[16:03:48.382]          // =>  TRUE
[16:03:48.382]        <control if="hasDormant" while="" timeout="0" info="">
[16:03:48.382]          // if-block "hasDormant"
[16:03:48.382]            // =>  FALSE
[16:03:48.382]          // skip if-block "hasDormant"
[16:03:48.392]        </control>
[16:03:48.392]        <control if="!hasDormant" while="" timeout="0" info="">
[16:03:48.392]          // if-block "!hasDormant"
[16:03:48.392]            // =>  TRUE
[16:03:48.392]          <block atomic="false" info="">
[16:03:48.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:03:48.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:03:48.392]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:03:48.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:03:48.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:03:48.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:03:48.392]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:03:48.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:03:48.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:03:48.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:03:48.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:03:48.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:03:48.402]          </block>
[16:03:48.402]          // end if-block "!hasDormant"
[16:03:48.402]        </control>
[16:03:48.402]        // end if-block "isSWJ"
[16:03:48.402]      </control>
[16:03:48.402]      <control if="!isSWJ" while="" timeout="0" info="">
[16:03:48.402]        // if-block "!isSWJ"
[16:03:48.402]          // =>  FALSE
[16:03:48.402]        // skip if-block "!isSWJ"
[16:03:48.402]      </control>
[16:03:48.402]      <block atomic="false" info="">
[16:03:48.402]        ReadDP(0x0);
[16:03:48.402]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:03:48.402]      </block>
[16:03:48.402]      // end if-block "protType == 2"
[16:03:48.402]    </control>
[16:03:48.402]  </sequence>
[16:03:48.402]  
[16:03:48.412]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:03:48.412]  
[16:03:48.412]  <debugvars>
[16:03:48.413]    // Pre-defined
[16:03:48.413]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:03:48.413]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:03:48.413]    __dp=0x00000000
[16:03:48.413]    __ap=0x00000000
[16:03:48.413]    __traceout=0x00000000      (Trace Disabled)
[16:03:48.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:03:48.413]    __FlashAddr=0x00000000
[16:03:48.413]    __FlashLen=0x00000000
[16:03:48.413]    __FlashArg=0x00000000
[16:03:48.413]    __FlashOp=0x00000000
[16:03:48.413]    __Result=0x00000000
[16:03:48.413]  </debugvars>
[16:03:48.413]  
[16:03:48.414]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:03:48.414]    <block atomic="false" info="">
[16:03:48.414]      __var SW_DP_ABORT       = 0x0;
[16:03:48.414]        // -> [SW_DP_ABORT <= 0x00000000]
[16:03:48.414]      __var DP_CTRL_STAT      = 0x4;
[16:03:48.414]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:03:48.414]      __var DP_SELECT         = 0x8;
[16:03:48.414]        // -> [DP_SELECT <= 0x00000008]
[16:03:48.414]      __var powered_down      = 0;
[16:03:48.414]        // -> [powered_down <= 0x00000000]
[16:03:48.414]      WriteDP(DP_SELECT, 0x00000000);
[16:03:48.414]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:03:48.414]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:03:48.414]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:03:48.414]        // -> [powered_down <= 0x00000001]
[16:03:48.414]    </block>
[16:03:48.414]    <control if="powered_down" while="" timeout="0" info="">
[16:03:48.414]      // if-block "powered_down"
[16:03:48.414]        // =>  TRUE
[16:03:48.414]      <block atomic="false" info="">
[16:03:48.414]        Message(0, "Debug/System power-up request sent");
[16:03:48.421]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:03:48.422]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:03:48.422]      </block>
[16:03:48.422]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:03:48.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:03:48.423]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:03:48.423]        // while-condition  =>  FALSE
[16:03:48.423]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:03:48.423]      </control>
[16:03:48.423]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:03:48.423]        // if-block "(__protocol & 0xFFFF) == 1"
[16:03:48.423]          // =>  FALSE
[16:03:48.423]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:03:48.423]      </control>
[16:03:48.423]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:03:48.423]        // if-block "(__protocol & 0xFFFF) == 2"
[16:03:48.423]          // =>  TRUE
[16:03:48.423]        <block atomic="false" info="">
[16:03:48.423]          Message(0, "executing SWD power up");
[16:03:48.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:03:48.427]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:03:48.427]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:03:48.427]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:03:48.427]        </block>
[16:03:48.427]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:03:48.427]      </control>
[16:03:48.427]      // end if-block "powered_down"
[16:03:48.431]    </control>
[16:03:48.431]    <block atomic="false" info="">
[16:03:48.431]      __var DEBUG_PORT_VAL    = 0;
[16:03:48.431]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:03:48.431]      __var ACCESS_POINT_VAL  = 0;
[16:03:48.431]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:03:48.431]      __ap = 1; 
[16:03:48.431]        // -> [__ap <= 0x00000001]
[16:03:48.431]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:03:48.433]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:03:48.435]      __ap = 4;
[16:03:48.435]        // -> [__ap <= 0x00000004]
[16:03:48.435]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:03:48.435]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:03:48.435]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:03:48.435]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:03:48.442]    </block>
[16:03:48.442]    <block atomic="false" info="">
[16:03:48.442]      __var nReset = 0x80;
[16:03:48.442]        // -> [nReset <= 0x00000080]
[16:03:48.442]      __var canReadPins = 0;
[16:03:48.442]        // -> [canReadPins <= 0x00000000]
[16:03:48.442]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:03:48.442]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:03:48.442]        // -> [canReadPins <= 0x00000001]
[16:03:48.442]    </block>
[16:03:48.442]    <control if="" while="1" timeout="200" info="">
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.442]      // while "1"  (timeout="200")
[16:03:48.442]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.447]      // while "1"  (timeout="200")
[16:03:48.447]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.452]      // while-condition  =>  TRUE
[16:03:48.452]      // while "1"  (timeout="200")
[16:03:48.456]      // while-condition  =>  TRUE
[16:03:48.456]      // while "1"  (timeout="200")
[16:03:48.456]      // while  =>  TIMEOUT
[16:03:48.456]      // end while "1"
[16:03:48.456]    </control>
[16:03:48.456]    <control if="canReadPins" while="" timeout="0" info="">
[16:03:48.456]      // if-block "canReadPins"
[16:03:48.456]        // =>  TRUE
[16:03:48.456]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:03:48.456]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:03:48.458]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:03:48.458]        // while-condition  =>  FALSE
[16:03:48.458]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:03:48.458]      </control>
[16:03:48.458]      // end if-block "canReadPins"
[16:03:48.458]    </control>
[16:03:48.458]    <control if="!canReadPins" while="" timeout="0" info="">
[16:03:48.458]      // if-block "!canReadPins"
[16:03:48.458]        // =>  FALSE
[16:03:48.458]      // skip if-block "!canReadPins"
[16:03:48.458]    </control>
[16:03:48.458]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:03:48.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:03:48.458]        // =>  TRUE
[16:03:48.458]      <block atomic="false" info="">
[16:03:48.458]        WriteAP(0x00, 0x190008);
[16:03:48.461]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:03:48.461]        WriteAP(0xF0, 0x01);
[16:03:48.464]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:03:48.464]      </block>
[16:03:48.464]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:03:48.464]    </control>
[16:03:48.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:03:48.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:03:48.464]        // =>  FALSE
[16:03:48.464]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:03:48.464]    </control>
[16:03:48.464]    <block atomic="false" info="">
[16:03:48.464]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:03:48.473]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:03:48.473]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:03:48.473]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:03:48.473]      __ap = 0; //lets make sure we reset the access point selection
[16:03:48.473]        // -> [__ap <= 0x00000000]
[16:03:48.473]    </block>
[16:03:48.473]  </sequence>
[16:03:48.473]  
[16:03:48.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:03:48.504]  
[16:03:48.504]  <debugvars>
[16:03:48.504]    // Pre-defined
[16:03:48.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:03:48.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:03:48.504]    __dp=0x00000000
[16:03:48.504]    __ap=0x00000000
[16:03:48.504]    __traceout=0x00000000      (Trace Disabled)
[16:03:48.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:03:48.504]    __FlashAddr=0x00000000
[16:03:48.504]    __FlashLen=0x00000000
[16:03:48.505]    __FlashArg=0x00000000
[16:03:48.505]    __FlashOp=0x00000000
[16:03:48.505]    __Result=0x00000000
[16:03:48.505]  </debugvars>
[16:03:48.505]  
[16:03:48.505]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:03:48.505]    <block atomic="false" info="">
[16:03:48.505]      __var deviceID = 0;
[16:03:48.505]        // -> [deviceID <= 0x00000000]
[16:03:48.505]      __var version = 0;
[16:03:48.505]        // -> [version <= 0x00000000]
[16:03:48.505]      __var partNum = 0;
[16:03:48.505]        // -> [partNum <= 0x00000000]
[16:03:48.505]      __var manuf = 0;
[16:03:48.505]        // -> [manuf <= 0x00000000]
[16:03:48.505]      __var isMSPM0G1X0X_G3X0X = 0;
[16:03:48.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:03:48.507]      __var isProduction = 0;
[16:03:48.507]        // -> [isProduction <= 0x00000000]
[16:03:48.507]      __var continueId = 0;
[16:03:48.507]        // -> [continueId <= 0x00000000]
[16:03:48.507]      deviceID =   Read32(0x41C40004);
[16:03:48.511]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:03:48.511]        // -> [deviceID <= 0x2BB8802F]
[16:03:48.511]      version = deviceID >> 28;
[16:03:48.511]        // -> [version <= 0x00000002]
[16:03:48.511]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:03:48.511]        // -> [partNum <= 0x0000BB88]
[16:03:48.511]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:03:48.511]        // -> [manuf <= 0x00000017]
[16:03:48.511]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:03:48.511]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:03:48.511]      isProduction = (version > 0);
[16:03:48.511]        // -> [isProduction <= 0x00000001]
[16:03:48.511]    </block>
[16:03:48.511]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:03:48.511]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:03:48.511]        // =>  FALSE
[16:03:48.511]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:03:48.511]    </control>
[16:03:48.511]    <control if="continueId == 4" while="" timeout="0" info="">
[16:03:48.514]      // if-block "continueId == 4"
[16:03:48.514]        // =>  FALSE
[16:03:48.514]      // skip if-block "continueId == 4"
[16:03:48.514]    </control>
[16:03:48.514]    <control if="!isProduction" while="" timeout="0" info="">
[16:03:48.514]      // if-block "!isProduction"
[16:03:48.514]        // =>  FALSE
[16:03:48.514]      // skip if-block "!isProduction"
[16:03:48.514]    </control>
[16:03:48.514]  </sequence>
[16:03:48.514]  
[16:16:38.682]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:38.682]  
[16:16:38.691]  <debugvars>
[16:16:38.691]    // Pre-defined
[16:16:38.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:38.691]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:38.691]    __dp=0x00000000
[16:16:38.691]    __ap=0x00000000
[16:16:38.691]    __traceout=0x00000000      (Trace Disabled)
[16:16:38.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:38.691]    __FlashAddr=0x00000000
[16:16:38.691]    __FlashLen=0x00000000
[16:16:38.691]    __FlashArg=0x00000000
[16:16:38.691]    __FlashOp=0x00000000
[16:16:38.691]    __Result=0x00000000
[16:16:38.691]  </debugvars>
[16:16:38.691]  
[16:16:38.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:38.691]    <block atomic="false" info="">
[16:16:38.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:38.691]        // -> [isSWJ <= 0x00000001]
[16:16:38.691]      __var hasDormant = __protocol & 0x00020000;
[16:16:38.691]        // -> [hasDormant <= 0x00000000]
[16:16:38.691]      __var protType   = __protocol & 0x0000FFFF;
[16:16:38.691]        // -> [protType <= 0x00000002]
[16:16:38.691]    </block>
[16:16:38.691]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:38.691]      // if-block "protType == 1"
[16:16:38.691]        // =>  FALSE
[16:16:38.691]      // skip if-block "protType == 1"
[16:16:38.691]    </control>
[16:16:38.691]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:38.691]      // if-block "protType == 2"
[16:16:38.691]        // =>  TRUE
[16:16:38.691]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:38.691]        // if-block "isSWJ"
[16:16:38.691]          // =>  TRUE
[16:16:38.691]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:38.691]          // if-block "hasDormant"
[16:16:38.695]            // =>  FALSE
[16:16:38.695]          // skip if-block "hasDormant"
[16:16:38.695]        </control>
[16:16:38.695]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:38.695]          // if-block "!hasDormant"
[16:16:38.695]            // =>  TRUE
[16:16:38.695]          <block atomic="false" info="">
[16:16:38.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:38.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:38.695]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:38.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:38.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:38.705]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:38.705]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:38.705]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:38.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:38.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:38.710]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:38.711]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:38.711]          </block>
[16:16:38.711]          // end if-block "!hasDormant"
[16:16:38.711]        </control>
[16:16:38.711]        // end if-block "isSWJ"
[16:16:38.711]      </control>
[16:16:38.711]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:38.711]        // if-block "!isSWJ"
[16:16:38.711]          // =>  FALSE
[16:16:38.711]        // skip if-block "!isSWJ"
[16:16:38.711]      </control>
[16:16:38.711]      <block atomic="false" info="">
[16:16:38.711]        ReadDP(0x0);
[16:16:38.711]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:38.711]      </block>
[16:16:38.711]      // end if-block "protType == 2"
[16:16:38.711]    </control>
[16:16:38.711]  </sequence>
[16:16:38.716]  
[16:16:38.719]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:16:38.719]  
[16:16:38.719]  <debugvars>
[16:16:38.719]    // Pre-defined
[16:16:38.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:38.719]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:38.719]    __dp=0x00000000
[16:16:38.719]    __ap=0x00000000
[16:16:38.719]    __traceout=0x00000000      (Trace Disabled)
[16:16:38.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:38.719]    __FlashAddr=0x00000000
[16:16:38.719]    __FlashLen=0x00000000
[16:16:38.719]    __FlashArg=0x00000000
[16:16:38.719]    __FlashOp=0x00000000
[16:16:38.719]    __Result=0x00000000
[16:16:38.719]  </debugvars>
[16:16:38.719]  
[16:16:38.721]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:16:38.721]    <block atomic="false" info="">
[16:16:38.721]      __var SW_DP_ABORT       = 0x0;
[16:16:38.721]        // -> [SW_DP_ABORT <= 0x00000000]
[16:16:38.721]      __var DP_CTRL_STAT      = 0x4;
[16:16:38.721]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:16:38.721]      __var DP_SELECT         = 0x8;
[16:16:38.721]        // -> [DP_SELECT <= 0x00000008]
[16:16:38.721]      __var powered_down      = 0;
[16:16:38.721]        // -> [powered_down <= 0x00000000]
[16:16:38.721]      WriteDP(DP_SELECT, 0x00000000);
[16:16:38.721]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:16:38.721]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:16:38.721]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:16:38.721]        // -> [powered_down <= 0x00000001]
[16:16:38.721]    </block>
[16:16:38.721]    <control if="powered_down" while="" timeout="0" info="">
[16:16:38.721]      // if-block "powered_down"
[16:16:38.721]        // =>  TRUE
[16:16:38.721]      <block atomic="false" info="">
[16:16:38.721]        Message(0, "Debug/System power-up request sent");
[16:16:38.721]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:16:38.721]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:16:38.721]      </block>
[16:16:38.721]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:16:38.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.729]        // while-condition  =>  TRUE
[16:16:38.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.731]        // while-condition  =>  TRUE
[16:16:38.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.731]        // while-condition  =>  TRUE
[16:16:38.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.731]        // while-condition  =>  TRUE
[16:16:38.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.739]        // while-condition  =>  TRUE
[16:16:38.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.742]        // while-condition  =>  TRUE
[16:16:38.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.742]        // while-condition  =>  TRUE
[16:16:38.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.742]        // while-condition  =>  TRUE
[16:16:38.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.749]        // while-condition  =>  TRUE
[16:16:38.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.749]        // while-condition  =>  TRUE
[16:16:38.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.749]        // while-condition  =>  TRUE
[16:16:38.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.749]        // while-condition  =>  TRUE
[16:16:38.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.759]        // while-condition  =>  TRUE
[16:16:38.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.762]        // while-condition  =>  TRUE
[16:16:38.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.762]        // while-condition  =>  TRUE
[16:16:38.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.769]        // while-condition  =>  TRUE
[16:16:38.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.769]        // while-condition  =>  TRUE
[16:16:38.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.769]        // while-condition  =>  TRUE
[16:16:38.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.779]        // while-condition  =>  TRUE
[16:16:38.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.779]        // while-condition  =>  TRUE
[16:16:38.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.779]        // while-condition  =>  TRUE
[16:16:38.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.789]        // while-condition  =>  TRUE
[16:16:38.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.799]        // while-condition  =>  TRUE
[16:16:38.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.799]        // while-condition  =>  TRUE
[16:16:38.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.799]        // while-condition  =>  TRUE
[16:16:38.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.799]        // while-condition  =>  TRUE
[16:16:38.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.809]        // while-condition  =>  TRUE
[16:16:38.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.809]        // while-condition  =>  TRUE
[16:16:38.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.809]        // while-condition  =>  TRUE
[16:16:38.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.809]        // while-condition  =>  TRUE
[16:16:38.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.809]        // while-condition  =>  TRUE
[16:16:38.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.819]        // while-condition  =>  TRUE
[16:16:38.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.819]        // while-condition  =>  TRUE
[16:16:38.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.819]        // while-condition  =>  TRUE
[16:16:38.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.819]        // while-condition  =>  TRUE
[16:16:38.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.829]        // while-condition  =>  TRUE
[16:16:38.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.839]        // while-condition  =>  TRUE
[16:16:38.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.839]        // while-condition  =>  TRUE
[16:16:38.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.849]        // while-condition  =>  TRUE
[16:16:38.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.849]        // while-condition  =>  TRUE
[16:16:38.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.849]        // while-condition  =>  TRUE
[16:16:38.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.849]        // while-condition  =>  TRUE
[16:16:38.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.849]        // while-condition  =>  TRUE
[16:16:38.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.859]        // while-condition  =>  TRUE
[16:16:38.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.859]        // while-condition  =>  TRUE
[16:16:38.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.859]        // while-condition  =>  TRUE
[16:16:38.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.859]        // while-condition  =>  TRUE
[16:16:38.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.859]        // while-condition  =>  TRUE
[16:16:38.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.869]        // while-condition  =>  TRUE
[16:16:38.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.869]        // while-condition  =>  TRUE
[16:16:38.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.869]        // while-condition  =>  TRUE
[16:16:38.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.869]        // while-condition  =>  TRUE
[16:16:38.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.879]        // while-condition  =>  TRUE
[16:16:38.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.881]        // while-condition  =>  TRUE
[16:16:38.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.881]        // while-condition  =>  TRUE
[16:16:38.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.881]        // while-condition  =>  TRUE
[16:16:38.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.881]        // while-condition  =>  TRUE
[16:16:38.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.889]        // while-condition  =>  TRUE
[16:16:38.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.900]        // while-condition  =>  TRUE
[16:16:38.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.900]        // while-condition  =>  TRUE
[16:16:38.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.909]        // while-condition  =>  TRUE
[16:16:38.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.911]        // while-condition  =>  TRUE
[16:16:38.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.911]        // while-condition  =>  TRUE
[16:16:38.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.911]        // while-condition  =>  TRUE
[16:16:38.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.911]        // while-condition  =>  TRUE
[16:16:38.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.920]        // while-condition  =>  TRUE
[16:16:38.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.920]        // while-condition  =>  TRUE
[16:16:38.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.920]        // while-condition  =>  TRUE
[16:16:38.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.920]        // while-condition  =>  TRUE
[16:16:38.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.920]        // while-condition  =>  TRUE
[16:16:38.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.930]        // while-condition  =>  TRUE
[16:16:38.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.930]        // while-condition  =>  TRUE
[16:16:38.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.930]        // while-condition  =>  TRUE
[16:16:38.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.930]        // while-condition  =>  TRUE
[16:16:38.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.940]        // while-condition  =>  TRUE
[16:16:38.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.942]        // while-condition  =>  TRUE
[16:16:38.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.942]        // while-condition  =>  TRUE
[16:16:38.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.951]        // while-condition  =>  TRUE
[16:16:38.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.952]        // while-condition  =>  TRUE
[16:16:38.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.952]        // while-condition  =>  TRUE
[16:16:38.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.952]        // while-condition  =>  TRUE
[16:16:38.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.952]        // while-condition  =>  TRUE
[16:16:38.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.961]        // while-condition  =>  TRUE
[16:16:38.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.964]        // while-condition  =>  TRUE
[16:16:38.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.964]        // while-condition  =>  TRUE
[16:16:38.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.964]        // while-condition  =>  TRUE
[16:16:38.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.964]        // while-condition  =>  TRUE
[16:16:38.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.971]        // while-condition  =>  TRUE
[16:16:38.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.973]        // while-condition  =>  TRUE
[16:16:38.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.973]        // while-condition  =>  TRUE
[16:16:38.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.973]        // while-condition  =>  TRUE
[16:16:38.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.973]        // while-condition  =>  TRUE
[16:16:38.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.973]        // while-condition  =>  TRUE
[16:16:38.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.981]        // while-condition  =>  TRUE
[16:16:38.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.981]        // while-condition  =>  TRUE
[16:16:38.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.981]        // while-condition  =>  TRUE
[16:16:38.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.981]        // while-condition  =>  TRUE
[16:16:38.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.981]        // while-condition  =>  TRUE
[16:16:38.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.991]        // while-condition  =>  TRUE
[16:16:38.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.991]        // while-condition  =>  TRUE
[16:16:38.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.991]        // while-condition  =>  TRUE
[16:16:38.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:38.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:38.991]        // while-condition  =>  TRUE
[16:16:38.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.001]        // while-condition  =>  TRUE
[16:16:39.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.001]        // while-condition  =>  TRUE
[16:16:39.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.001]        // while-condition  =>  TRUE
[16:16:39.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.001]        // while-condition  =>  TRUE
[16:16:39.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.001]        // while-condition  =>  TRUE
[16:16:39.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.011]        // while-condition  =>  TRUE
[16:16:39.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.011]        // while-condition  =>  TRUE
[16:16:39.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.011]        // while-condition  =>  TRUE
[16:16:39.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.011]        // while-condition  =>  TRUE
[16:16:39.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.011]        // while-condition  =>  TRUE
[16:16:39.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.021]        // while-condition  =>  TRUE
[16:16:39.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.021]        // while-condition  =>  TRUE
[16:16:39.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.021]        // while-condition  =>  TRUE
[16:16:39.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.021]        // while-condition  =>  TRUE
[16:16:39.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.021]        // while-condition  =>  TRUE
[16:16:39.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.031]        // while-condition  =>  TRUE
[16:16:39.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.031]        // while-condition  =>  TRUE
[16:16:39.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.031]        // while-condition  =>  TRUE
[16:16:39.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.031]        // while-condition  =>  TRUE
[16:16:39.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.031]        // while-condition  =>  TRUE
[16:16:39.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.041]        // while-condition  =>  TRUE
[16:16:39.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.041]        // while-condition  =>  TRUE
[16:16:39.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.041]        // while-condition  =>  TRUE
[16:16:39.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.041]        // while-condition  =>  TRUE
[16:16:39.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.041]        // while-condition  =>  TRUE
[16:16:39.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.051]        // while-condition  =>  TRUE
[16:16:39.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.051]        // while-condition  =>  TRUE
[16:16:39.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.051]        // while-condition  =>  TRUE
[16:16:39.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.051]        // while-condition  =>  TRUE
[16:16:39.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.061]        // while-condition  =>  TRUE
[16:16:39.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.061]        // while-condition  =>  TRUE
[16:16:39.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.061]        // while-condition  =>  TRUE
[16:16:39.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.071]        // while-condition  =>  TRUE
[16:16:39.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.071]        // while-condition  =>  TRUE
[16:16:39.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.071]        // while-condition  =>  TRUE
[16:16:39.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.071]        // while-condition  =>  TRUE
[16:16:39.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.071]        // while-condition  =>  TRUE
[16:16:39.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.081]        // while-condition  =>  TRUE
[16:16:39.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.091]        // while-condition  =>  TRUE
[16:16:39.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.091]        // while-condition  =>  TRUE
[16:16:39.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.091]        // while-condition  =>  TRUE
[16:16:39.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.101]        // while-condition  =>  TRUE
[16:16:39.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.111]        // while-condition  =>  TRUE
[16:16:39.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.121]        // while-condition  =>  TRUE
[16:16:39.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.121]        // while-condition  =>  TRUE
[16:16:39.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.121]        // while-condition  =>  TRUE
[16:16:39.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.121]        // while-condition  =>  TRUE
[16:16:39.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.121]        // while-condition  =>  TRUE
[16:16:39.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.131]        // while-condition  =>  TRUE
[16:16:39.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.131]        // while-condition  =>  TRUE
[16:16:39.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.131]        // while-condition  =>  TRUE
[16:16:39.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.131]        // while-condition  =>  TRUE
[16:16:39.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.131]        // while-condition  =>  TRUE
[16:16:39.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.141]        // while-condition  =>  TRUE
[16:16:39.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.151]        // while-condition  =>  TRUE
[16:16:39.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.151]        // while-condition  =>  TRUE
[16:16:39.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.151]        // while-condition  =>  TRUE
[16:16:39.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.151]        // while-condition  =>  TRUE
[16:16:39.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.161]        // while-condition  =>  TRUE
[16:16:39.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.161]        // while-condition  =>  TRUE
[16:16:39.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.161]        // while-condition  =>  TRUE
[16:16:39.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.161]        // while-condition  =>  TRUE
[16:16:39.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.171]        // while-condition  =>  TRUE
[16:16:39.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.171]        // while-condition  =>  TRUE
[16:16:39.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.171]        // while-condition  =>  TRUE
[16:16:39.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.171]        // while-condition  =>  TRUE
[16:16:39.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.181]        // while-condition  =>  TRUE
[16:16:39.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.181]        // while-condition  =>  TRUE
[16:16:39.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.181]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.191]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.191]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.191]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.191]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.191]        // while-condition  =>  TRUE
[16:16:39.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.201]        // while-condition  =>  TRUE
[16:16:39.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.201]        // while-condition  =>  TRUE
[16:16:39.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.201]        // while-condition  =>  TRUE
[16:16:39.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.201]        // while-condition  =>  TRUE
[16:16:39.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.211]        // while-condition  =>  TRUE
[16:16:39.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.221]        // while-condition  =>  TRUE
[16:16:39.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.231]        // while-condition  =>  TRUE
[16:16:39.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.231]        // while-condition  =>  TRUE
[16:16:39.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.241]        // while-condition  =>  TRUE
[16:16:39.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.241]        // while-condition  =>  TRUE
[16:16:39.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.241]        // while-condition  =>  TRUE
[16:16:39.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.251]        // while-condition  =>  TRUE
[16:16:39.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.261]        // while-condition  =>  TRUE
[16:16:39.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.261]        // while-condition  =>  TRUE
[16:16:39.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.261]        // while-condition  =>  TRUE
[16:16:39.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.261]        // while-condition  =>  TRUE
[16:16:39.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.261]        // while-condition  =>  TRUE
[16:16:39.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.271]        // while-condition  =>  TRUE
[16:16:39.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.271]        // while-condition  =>  TRUE
[16:16:39.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.281]        // while-condition  =>  TRUE
[16:16:39.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.281]        // while-condition  =>  TRUE
[16:16:39.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.293]        // while-condition  =>  TRUE
[16:16:39.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.293]        // while-condition  =>  TRUE
[16:16:39.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.293]        // while-condition  =>  TRUE
[16:16:39.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.293]        // while-condition  =>  TRUE
[16:16:39.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.301]        // while-condition  =>  TRUE
[16:16:39.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.301]        // while-condition  =>  TRUE
[16:16:39.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.312]        // while-condition  =>  TRUE
[16:16:39.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.313]        // while-condition  =>  TRUE
[16:16:39.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.313]        // while-condition  =>  TRUE
[16:16:39.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.313]        // while-condition  =>  TRUE
[16:16:39.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.322]        // while-condition  =>  TRUE
[16:16:39.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.333]        // while-condition  =>  TRUE
[16:16:39.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.334]        // while-condition  =>  TRUE
[16:16:39.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.334]        // while-condition  =>  TRUE
[16:16:39.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.334]        // while-condition  =>  TRUE
[16:16:39.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.334]        // while-condition  =>  TRUE
[16:16:39.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.342]        // while-condition  =>  TRUE
[16:16:39.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.342]        // while-condition  =>  TRUE
[16:16:39.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.342]        // while-condition  =>  TRUE
[16:16:39.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.342]        // while-condition  =>  TRUE
[16:16:39.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.352]        // while-condition  =>  TRUE
[16:16:39.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.352]        // while-condition  =>  TRUE
[16:16:39.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.352]        // while-condition  =>  TRUE
[16:16:39.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.362]        // while-condition  =>  TRUE
[16:16:39.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.372]        // while-condition  =>  TRUE
[16:16:39.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.382]        // while-condition  =>  TRUE
[16:16:39.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.393]        // while-condition  =>  TRUE
[16:16:39.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.394]        // while-condition  =>  TRUE
[16:16:39.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.394]        // while-condition  =>  TRUE
[16:16:39.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.394]        // while-condition  =>  TRUE
[16:16:39.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.402]        // while-condition  =>  TRUE
[16:16:39.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.404]        // while-condition  =>  TRUE
[16:16:39.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.404]        // while-condition  =>  TRUE
[16:16:39.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.404]        // while-condition  =>  TRUE
[16:16:39.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.404]        // while-condition  =>  TRUE
[16:16:39.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.404]        // while-condition  =>  TRUE
[16:16:39.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.412]        // while-condition  =>  TRUE
[16:16:39.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.412]        // while-condition  =>  TRUE
[16:16:39.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.412]        // while-condition  =>  TRUE
[16:16:39.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.412]        // while-condition  =>  TRUE
[16:16:39.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.422]        // while-condition  =>  TRUE
[16:16:39.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.422]        // while-condition  =>  TRUE
[16:16:39.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.422]        // while-condition  =>  TRUE
[16:16:39.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.422]        // while-condition  =>  TRUE
[16:16:39.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.422]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.432]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.432]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.432]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.432]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.432]        // while-condition  =>  TRUE
[16:16:39.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.442]        // while-condition  =>  TRUE
[16:16:39.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.452]        // while-condition  =>  TRUE
[16:16:39.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.452]        // while-condition  =>  TRUE
[16:16:39.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.462]        // while-condition  =>  TRUE
[16:16:39.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.462]        // while-condition  =>  TRUE
[16:16:39.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.462]        // while-condition  =>  TRUE
[16:16:39.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.472]        // while-condition  =>  TRUE
[16:16:39.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.472]        // while-condition  =>  TRUE
[16:16:39.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.472]        // while-condition  =>  TRUE
[16:16:39.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.472]        // while-condition  =>  TRUE
[16:16:39.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.472]        // while-condition  =>  TRUE
[16:16:39.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.482]        // while-condition  =>  TRUE
[16:16:39.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.483]        // while-condition  =>  TRUE
[16:16:39.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.483]        // while-condition  =>  TRUE
[16:16:39.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.483]        // while-condition  =>  TRUE
[16:16:39.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.489]        // while-condition  =>  TRUE
[16:16:39.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.489]        // while-condition  =>  TRUE
[16:16:39.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.493]        // while-condition  =>  TRUE
[16:16:39.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.493]        // while-condition  =>  TRUE
[16:16:39.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.493]        // while-condition  =>  TRUE
[16:16:39.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.500]        // while-condition  =>  TRUE
[16:16:39.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.503]        // while-condition  =>  TRUE
[16:16:39.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.514]        // while-condition  =>  TRUE
[16:16:39.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.524]        // while-condition  =>  TRUE
[16:16:39.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.529]        // while-condition  =>  TRUE
[16:16:39.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.531]        // while-condition  =>  TRUE
[16:16:39.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.534]        // while-condition  =>  TRUE
[16:16:39.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.534]        // while-condition  =>  TRUE
[16:16:39.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.537]        // while-condition  =>  TRUE
[16:16:39.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.537]        // while-condition  =>  TRUE
[16:16:39.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.537]        // while-condition  =>  TRUE
[16:16:39.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.537]        // while-condition  =>  TRUE
[16:16:39.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.544]        // while-condition  =>  TRUE
[16:16:39.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.547]        // while-condition  =>  TRUE
[16:16:39.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.547]        // while-condition  =>  TRUE
[16:16:39.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.547]        // while-condition  =>  TRUE
[16:16:39.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.554]        // while-condition  =>  TRUE
[16:16:39.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.554]        // while-condition  =>  TRUE
[16:16:39.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.554]        // while-condition  =>  TRUE
[16:16:39.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.564]        // while-condition  =>  TRUE
[16:16:39.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.564]        // while-condition  =>  TRUE
[16:16:39.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.564]        // while-condition  =>  TRUE
[16:16:39.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.578]        // while-condition  =>  TRUE
[16:16:39.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.585]        // while-condition  =>  TRUE
[16:16:39.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.585]        // while-condition  =>  TRUE
[16:16:39.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.589]        // while-condition  =>  TRUE
[16:16:39.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.591]        // while-condition  =>  TRUE
[16:16:39.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.596]        // while-condition  =>  TRUE
[16:16:39.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.606]        // while-condition  =>  TRUE
[16:16:39.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.606]        // while-condition  =>  TRUE
[16:16:39.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.606]        // while-condition  =>  TRUE
[16:16:39.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.606]        // while-condition  =>  TRUE
[16:16:39.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.606]        // while-condition  =>  TRUE
[16:16:39.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.616]        // while-condition  =>  TRUE
[16:16:39.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.621]        // while-condition  =>  TRUE
[16:16:39.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.621]        // while-condition  =>  TRUE
[16:16:39.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.624]        // while-condition  =>  TRUE
[16:16:39.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.626]        // while-condition  =>  TRUE
[16:16:39.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.626]        // while-condition  =>  TRUE
[16:16:39.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.626]        // while-condition  =>  TRUE
[16:16:39.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.630]        // while-condition  =>  TRUE
[16:16:39.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.632]        // while-condition  =>  TRUE
[16:16:39.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.634]        // while-condition  =>  TRUE
[16:16:39.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.636]        // while-condition  =>  TRUE
[16:16:39.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.639]        // while-condition  =>  TRUE
[16:16:39.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.641]        // while-condition  =>  TRUE
[16:16:39.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.642]        // while-condition  =>  TRUE
[16:16:39.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.642]        // while-condition  =>  TRUE
[16:16:39.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.642]        // while-condition  =>  TRUE
[16:16:39.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.646]        // while-condition  =>  TRUE
[16:16:39.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.652]        // while-condition  =>  TRUE
[16:16:39.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.652]        // while-condition  =>  TRUE
[16:16:39.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.656]        // while-condition  =>  TRUE
[16:16:39.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.656]        // while-condition  =>  TRUE
[16:16:39.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.666]        // while-condition  =>  TRUE
[16:16:39.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.669]        // while-condition  =>  TRUE
[16:16:39.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.670]        // while-condition  =>  TRUE
[16:16:39.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.670]        // while-condition  =>  TRUE
[16:16:39.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.670]        // while-condition  =>  TRUE
[16:16:39.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.670]        // while-condition  =>  TRUE
[16:16:39.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.677]        // while-condition  =>  TRUE
[16:16:39.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.677]        // while-condition  =>  TRUE
[16:16:39.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.677]        // while-condition  =>  TRUE
[16:16:39.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.687]        // while-condition  =>  TRUE
[16:16:39.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.689]        // while-condition  =>  TRUE
[16:16:39.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.689]        // while-condition  =>  TRUE
[16:16:39.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.691]        // while-condition  =>  TRUE
[16:16:39.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.691]        // while-condition  =>  TRUE
[16:16:39.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.691]        // while-condition  =>  TRUE
[16:16:39.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.697]        // while-condition  =>  TRUE
[16:16:39.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.697]        // while-condition  =>  TRUE
[16:16:39.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:39.708]        // while-condition  =>  TRUE
[16:16:39.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:39.708]        // while  =>  TIMEOUT
[16:16:39.708]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:16:39.709]      </control>
[16:16:39.709]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:16:39.709]        // if-block "(__protocol & 0xFFFF) == 1"
[16:16:39.709]          // =>  FALSE
[16:16:39.709]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:16:39.709]      </control>
[16:16:39.709]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:16:39.709]        // if-block "(__protocol & 0xFFFF) == 2"
[16:16:39.709]          // =>  TRUE
[16:16:39.709]        <block atomic="false" info="">
[16:16:39.709]          Message(0, "executing SWD power up");
[16:16:39.709]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:16:39.709]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:16:39.709]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:16:39.709]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:16:39.709]        </block>
[16:16:39.709]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:16:39.709]      </control>
[16:16:39.709]      // end if-block "powered_down"
[16:16:39.709]    </control>
[16:16:39.709]    <block atomic="false" info="">
[16:16:39.709]      __var DEBUG_PORT_VAL    = 0;
[16:16:39.709]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:16:39.709]      __var ACCESS_POINT_VAL  = 0;
[16:16:39.709]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:16:39.709]      __ap = 1; 
[16:16:39.709]        // -> [__ap <= 0x00000001]
[16:16:39.709]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:16:39.728]  
[16:16:39.728]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[16:16:39.728]  
[16:16:39.730]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:16:39.730]    </block>
[16:16:39.730]  </sequence>
[16:16:39.730]  
[16:16:49.908]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:49.908]  
[16:16:49.908]  <debugvars>
[16:16:49.908]    // Pre-defined
[16:16:49.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:49.908]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:16:49.908]    __dp=0x00000000
[16:16:49.908]    __ap=0x00000000
[16:16:49.908]    __traceout=0x00000000      (Trace Disabled)
[16:16:49.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:49.908]    __FlashAddr=0x00000000
[16:16:49.908]    __FlashLen=0x00000000
[16:16:49.908]    __FlashArg=0x00000000
[16:16:49.908]    __FlashOp=0x00000000
[16:16:49.908]    __Result=0x00000000
[16:16:49.908]  </debugvars>
[16:16:49.915]  
[16:16:49.915]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:49.915]    <block atomic="false" info="">
[16:16:49.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:49.915]        // -> [isSWJ <= 0x00000001]
[16:16:49.915]      __var hasDormant = __protocol & 0x00020000;
[16:16:49.915]        // -> [hasDormant <= 0x00000000]
[16:16:49.915]      __var protType   = __protocol & 0x0000FFFF;
[16:16:49.915]        // -> [protType <= 0x00000002]
[16:16:49.915]    </block>
[16:16:49.915]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:49.915]      // if-block "protType == 1"
[16:16:49.915]        // =>  FALSE
[16:16:49.915]      // skip if-block "protType == 1"
[16:16:49.915]    </control>
[16:16:49.915]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:49.915]      // if-block "protType == 2"
[16:16:49.915]        // =>  TRUE
[16:16:49.915]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:49.915]        // if-block "isSWJ"
[16:16:49.915]          // =>  TRUE
[16:16:49.915]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:49.915]          // if-block "hasDormant"
[16:16:49.915]            // =>  FALSE
[16:16:49.915]          // skip if-block "hasDormant"
[16:16:49.915]        </control>
[16:16:49.918]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:49.918]          // if-block "!hasDormant"
[16:16:49.918]            // =>  TRUE
[16:16:49.918]          <block atomic="false" info="">
[16:16:49.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:49.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:49.918]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:49.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:49.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:49.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:49.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:49.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:49.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:49.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:49.918]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:49.918]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:49.918]          </block>
[16:16:49.918]          // end if-block "!hasDormant"
[16:16:49.928]        </control>
[16:16:49.928]        // end if-block "isSWJ"
[16:16:49.928]      </control>
[16:16:49.928]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:49.928]        // if-block "!isSWJ"
[16:16:49.928]          // =>  FALSE
[16:16:49.928]        // skip if-block "!isSWJ"
[16:16:49.928]      </control>
[16:16:49.928]      <block atomic="false" info="">
[16:16:49.929]        ReadDP(0x0);
[16:16:49.929]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:49.929]      </block>
[16:16:49.929]      // end if-block "protType == 2"
[16:16:49.929]    </control>
[16:16:49.929]  </sequence>
[16:16:49.929]  
[16:16:52.399]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:52.399]  
[16:16:52.414]  <debugvars>
[16:16:52.414]    // Pre-defined
[16:16:52.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:52.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:52.414]    __dp=0x00000000
[16:16:52.414]    __ap=0x00000000
[16:16:52.414]    __traceout=0x00000000      (Trace Disabled)
[16:16:52.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:52.414]    __FlashAddr=0x00000000
[16:16:52.414]    __FlashLen=0x00000000
[16:16:52.414]    __FlashArg=0x00000000
[16:16:52.414]    __FlashOp=0x00000000
[16:16:52.414]    __Result=0x00000000
[16:16:52.414]  </debugvars>
[16:16:52.414]  
[16:16:52.414]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:52.414]    <block atomic="false" info="">
[16:16:52.414]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:52.414]        // -> [isSWJ <= 0x00000001]
[16:16:52.414]      __var hasDormant = __protocol & 0x00020000;
[16:16:52.414]        // -> [hasDormant <= 0x00000000]
[16:16:52.414]      __var protType   = __protocol & 0x0000FFFF;
[16:16:52.414]        // -> [protType <= 0x00000002]
[16:16:52.414]    </block>
[16:16:52.414]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:52.414]      // if-block "protType == 1"
[16:16:52.414]        // =>  FALSE
[16:16:52.414]      // skip if-block "protType == 1"
[16:16:52.414]    </control>
[16:16:52.414]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:52.414]      // if-block "protType == 2"
[16:16:52.414]        // =>  TRUE
[16:16:52.414]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:52.414]        // if-block "isSWJ"
[16:16:52.414]          // =>  TRUE
[16:16:52.414]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:52.414]          // if-block "hasDormant"
[16:16:52.414]            // =>  FALSE
[16:16:52.414]          // skip if-block "hasDormant"
[16:16:52.414]        </control>
[16:16:52.414]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:52.414]          // if-block "!hasDormant"
[16:16:52.414]            // =>  TRUE
[16:16:52.414]          <block atomic="false" info="">
[16:16:52.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:52.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:52.420]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:52.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:52.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:52.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:52.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:52.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:52.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:52.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:52.420]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:52.420]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:52.420]          </block>
[16:16:52.420]          // end if-block "!hasDormant"
[16:16:52.420]        </control>
[16:16:52.420]        // end if-block "isSWJ"
[16:16:52.420]      </control>
[16:16:52.420]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:52.420]        // if-block "!isSWJ"
[16:16:52.420]          // =>  FALSE
[16:16:52.420]        // skip if-block "!isSWJ"
[16:16:52.420]      </control>
[16:16:52.430]      <block atomic="false" info="">
[16:16:52.430]        ReadDP(0x0);
[16:16:52.430]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:52.430]      </block>
[16:16:52.430]      // end if-block "protType == 2"
[16:16:52.430]    </control>
[16:16:52.430]  </sequence>
[16:16:52.430]  
[16:16:52.430]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:16:52.430]  
[16:16:52.430]  <debugvars>
[16:16:52.430]    // Pre-defined
[16:16:52.430]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:52.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:52.430]    __dp=0x00000000
[16:16:52.430]    __ap=0x00000000
[16:16:52.430]    __traceout=0x00000000      (Trace Disabled)
[16:16:52.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:52.430]    __FlashAddr=0x00000000
[16:16:52.430]    __FlashLen=0x00000000
[16:16:52.430]    __FlashArg=0x00000000
[16:16:52.430]    __FlashOp=0x00000000
[16:16:52.430]    __Result=0x00000000
[16:16:52.430]  </debugvars>
[16:16:52.430]  
[16:16:52.430]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:16:52.430]    <block atomic="false" info="">
[16:16:52.430]      __var SW_DP_ABORT       = 0x0;
[16:16:52.430]        // -> [SW_DP_ABORT <= 0x00000000]
[16:16:52.430]      __var DP_CTRL_STAT      = 0x4;
[16:16:52.430]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:16:52.430]      __var DP_SELECT         = 0x8;
[16:16:52.430]        // -> [DP_SELECT <= 0x00000008]
[16:16:52.430]      __var powered_down      = 0;
[16:16:52.430]        // -> [powered_down <= 0x00000000]
[16:16:52.430]      WriteDP(DP_SELECT, 0x00000000);
[16:16:52.430]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:16:52.430]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:16:52.440]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:16:52.440]        // -> [powered_down <= 0x00000001]
[16:16:52.440]    </block>
[16:16:52.440]    <control if="powered_down" while="" timeout="0" info="">
[16:16:52.440]      // if-block "powered_down"
[16:16:52.440]        // =>  TRUE
[16:16:52.440]      <block atomic="false" info="">
[16:16:52.440]        Message(0, "Debug/System power-up request sent");
[16:16:52.440]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:16:52.440]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:16:52.440]      </block>
[16:16:52.440]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:16:52.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.440]        // while-condition  =>  TRUE
[16:16:52.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.450]        // while-condition  =>  TRUE
[16:16:52.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.450]        // while-condition  =>  TRUE
[16:16:52.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.450]        // while-condition  =>  TRUE
[16:16:52.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.450]        // while-condition  =>  TRUE
[16:16:52.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.460]        // while-condition  =>  TRUE
[16:16:52.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.460]        // while-condition  =>  TRUE
[16:16:52.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.467]        // while-condition  =>  TRUE
[16:16:52.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.471]        // while-condition  =>  TRUE
[16:16:52.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.471]        // while-condition  =>  TRUE
[16:16:52.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.471]        // while-condition  =>  TRUE
[16:16:52.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.471]        // while-condition  =>  TRUE
[16:16:52.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.481]        // while-condition  =>  TRUE
[16:16:52.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.492]        // while-condition  =>  TRUE
[16:16:52.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.492]        // while-condition  =>  TRUE
[16:16:52.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.492]        // while-condition  =>  TRUE
[16:16:52.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.492]        // while-condition  =>  TRUE
[16:16:52.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.501]        // while-condition  =>  TRUE
[16:16:52.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.501]        // while-condition  =>  TRUE
[16:16:52.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.501]        // while-condition  =>  TRUE
[16:16:52.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.501]        // while-condition  =>  TRUE
[16:16:52.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.501]        // while-condition  =>  TRUE
[16:16:52.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.511]        // while-condition  =>  TRUE
[16:16:52.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.511]        // while-condition  =>  TRUE
[16:16:52.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.511]        // while-condition  =>  TRUE
[16:16:52.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.511]        // while-condition  =>  TRUE
[16:16:52.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.511]        // while-condition  =>  TRUE
[16:16:52.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.521]        // while-condition  =>  TRUE
[16:16:52.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.521]        // while-condition  =>  TRUE
[16:16:52.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.521]        // while-condition  =>  TRUE
[16:16:52.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.531]        // while-condition  =>  TRUE
[16:16:52.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.531]        // while-condition  =>  TRUE
[16:16:52.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.531]        // while-condition  =>  TRUE
[16:16:52.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.531]        // while-condition  =>  TRUE
[16:16:52.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.541]        // while-condition  =>  TRUE
[16:16:52.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.541]        // while-condition  =>  TRUE
[16:16:52.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.541]        // while-condition  =>  TRUE
[16:16:52.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.541]        // while-condition  =>  TRUE
[16:16:52.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.551]        // while-condition  =>  TRUE
[16:16:52.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.551]        // while-condition  =>  TRUE
[16:16:52.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.551]        // while-condition  =>  TRUE
[16:16:52.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.551]        // while-condition  =>  TRUE
[16:16:52.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.561]        // while-condition  =>  TRUE
[16:16:52.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.561]        // while-condition  =>  TRUE
[16:16:52.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.561]        // while-condition  =>  TRUE
[16:16:52.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.571]        // while-condition  =>  TRUE
[16:16:52.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.571]        // while-condition  =>  TRUE
[16:16:52.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.571]        // while-condition  =>  TRUE
[16:16:52.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.571]        // while-condition  =>  TRUE
[16:16:52.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.581]        // while-condition  =>  TRUE
[16:16:52.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.591]        // while-condition  =>  TRUE
[16:16:52.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.591]        // while-condition  =>  TRUE
[16:16:52.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.601]        // while-condition  =>  TRUE
[16:16:52.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.602]        // while-condition  =>  TRUE
[16:16:52.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.602]        // while-condition  =>  TRUE
[16:16:52.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.602]        // while-condition  =>  TRUE
[16:16:52.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.611]        // while-condition  =>  TRUE
[16:16:52.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.611]        // while-condition  =>  TRUE
[16:16:52.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.611]        // while-condition  =>  TRUE
[16:16:52.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.611]        // while-condition  =>  TRUE
[16:16:52.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.611]        // while-condition  =>  TRUE
[16:16:52.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.621]        // while-condition  =>  TRUE
[16:16:52.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.622]        // while-condition  =>  TRUE
[16:16:52.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.622]        // while-condition  =>  TRUE
[16:16:52.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.622]        // while-condition  =>  TRUE
[16:16:52.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.631]        // while-condition  =>  TRUE
[16:16:52.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.631]        // while-condition  =>  TRUE
[16:16:52.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.631]        // while-condition  =>  TRUE
[16:16:52.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.631]        // while-condition  =>  TRUE
[16:16:52.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.641]        // while-condition  =>  TRUE
[16:16:52.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.641]        // while-condition  =>  TRUE
[16:16:52.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.641]        // while-condition  =>  TRUE
[16:16:52.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.651]        // while-condition  =>  TRUE
[16:16:52.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.651]        // while-condition  =>  TRUE
[16:16:52.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.651]        // while-condition  =>  TRUE
[16:16:52.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.651]        // while-condition  =>  TRUE
[16:16:52.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.662]        // while-condition  =>  TRUE
[16:16:52.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.662]        // while-condition  =>  TRUE
[16:16:52.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.662]        // while-condition  =>  TRUE
[16:16:52.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.662]        // while-condition  =>  TRUE
[16:16:52.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.672]        // while-condition  =>  TRUE
[16:16:52.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.673]        // while-condition  =>  TRUE
[16:16:52.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.673]        // while-condition  =>  TRUE
[16:16:52.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.673]        // while-condition  =>  TRUE
[16:16:52.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.673]        // while-condition  =>  TRUE
[16:16:52.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.673]        // while-condition  =>  TRUE
[16:16:52.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.682]        // while-condition  =>  TRUE
[16:16:52.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.682]        // while-condition  =>  TRUE
[16:16:52.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.682]        // while-condition  =>  TRUE
[16:16:52.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.682]        // while-condition  =>  TRUE
[16:16:52.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.692]        // while-condition  =>  TRUE
[16:16:52.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.692]        // while-condition  =>  TRUE
[16:16:52.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.702]        // while-condition  =>  TRUE
[16:16:52.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.702]        // while-condition  =>  TRUE
[16:16:52.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.702]        // while-condition  =>  TRUE
[16:16:52.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.702]        // while-condition  =>  TRUE
[16:16:52.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.712]        // while-condition  =>  TRUE
[16:16:52.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.712]        // while-condition  =>  TRUE
[16:16:52.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.712]        // while-condition  =>  TRUE
[16:16:52.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.712]        // while-condition  =>  TRUE
[16:16:52.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.722]        // while-condition  =>  TRUE
[16:16:52.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.722]        // while-condition  =>  TRUE
[16:16:52.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.722]        // while-condition  =>  TRUE
[16:16:52.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.722]        // while-condition  =>  TRUE
[16:16:52.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.732]        // while-condition  =>  TRUE
[16:16:52.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.732]        // while-condition  =>  TRUE
[16:16:52.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.732]        // while-condition  =>  TRUE
[16:16:52.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.732]        // while-condition  =>  TRUE
[16:16:52.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.732]        // while-condition  =>  TRUE
[16:16:52.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.742]        // while-condition  =>  TRUE
[16:16:52.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.742]        // while-condition  =>  TRUE
[16:16:52.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.742]        // while-condition  =>  TRUE
[16:16:52.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.752]        // while-condition  =>  TRUE
[16:16:52.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.752]        // while-condition  =>  TRUE
[16:16:52.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.752]        // while-condition  =>  TRUE
[16:16:52.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.752]        // while-condition  =>  TRUE
[16:16:52.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.762]        // while-condition  =>  TRUE
[16:16:52.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.762]        // while-condition  =>  TRUE
[16:16:52.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.762]        // while-condition  =>  TRUE
[16:16:52.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.762]        // while-condition  =>  TRUE
[16:16:52.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.772]        // while-condition  =>  TRUE
[16:16:52.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.772]        // while-condition  =>  TRUE
[16:16:52.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.772]        // while-condition  =>  TRUE
[16:16:52.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.772]        // while-condition  =>  TRUE
[16:16:52.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.772]        // while-condition  =>  TRUE
[16:16:52.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.782]        // while-condition  =>  TRUE
[16:16:52.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.782]        // while-condition  =>  TRUE
[16:16:52.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.782]        // while-condition  =>  TRUE
[16:16:52.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.782]        // while-condition  =>  TRUE
[16:16:52.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.782]        // while-condition  =>  TRUE
[16:16:52.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.792]        // while-condition  =>  TRUE
[16:16:52.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.792]        // while-condition  =>  TRUE
[16:16:52.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.792]        // while-condition  =>  TRUE
[16:16:52.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.802]        // while-condition  =>  TRUE
[16:16:52.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.802]        // while-condition  =>  TRUE
[16:16:52.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.802]        // while-condition  =>  TRUE
[16:16:52.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.802]        // while-condition  =>  TRUE
[16:16:52.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.802]        // while-condition  =>  TRUE
[16:16:52.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.812]        // while-condition  =>  TRUE
[16:16:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.812]        // while-condition  =>  TRUE
[16:16:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.812]        // while-condition  =>  TRUE
[16:16:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.812]        // while-condition  =>  TRUE
[16:16:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.812]        // while-condition  =>  TRUE
[16:16:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.822]        // while-condition  =>  TRUE
[16:16:52.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.823]        // while-condition  =>  TRUE
[16:16:52.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.825]        // while-condition  =>  TRUE
[16:16:52.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.825]        // while-condition  =>  TRUE
[16:16:52.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.832]        // while-condition  =>  TRUE
[16:16:52.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.833]        // while-condition  =>  TRUE
[16:16:52.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.833]        // while-condition  =>  TRUE
[16:16:52.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.833]        // while-condition  =>  TRUE
[16:16:52.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.842]        // while-condition  =>  TRUE
[16:16:52.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.843]        // while-condition  =>  TRUE
[16:16:52.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.845]        // while-condition  =>  TRUE
[16:16:52.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.847]        // while-condition  =>  TRUE
[16:16:52.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.849]        // while-condition  =>  TRUE
[16:16:52.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.851]        // while-condition  =>  TRUE
[16:16:52.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.852]        // while-condition  =>  TRUE
[16:16:52.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.852]        // while-condition  =>  TRUE
[16:16:52.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.856]        // while-condition  =>  TRUE
[16:16:52.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.858]        // while-condition  =>  TRUE
[16:16:52.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.860]        // while-condition  =>  TRUE
[16:16:52.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.864]        // while-condition  =>  TRUE
[16:16:52.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.867]        // while-condition  =>  TRUE
[16:16:52.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.872]        // while-condition  =>  TRUE
[16:16:52.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.874]        // while-condition  =>  TRUE
[16:16:52.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.875]        // while-condition  =>  TRUE
[16:16:52.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.879]        // while-condition  =>  TRUE
[16:16:52.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.882]        // while-condition  =>  TRUE
[16:16:52.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.884]        // while-condition  =>  TRUE
[16:16:52.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.886]        // while-condition  =>  TRUE
[16:16:52.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.889]        // while-condition  =>  TRUE
[16:16:52.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.891]        // while-condition  =>  TRUE
[16:16:52.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.895]        // while-condition  =>  TRUE
[16:16:52.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.897]        // while-condition  =>  TRUE
[16:16:52.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.899]        // while-condition  =>  TRUE
[16:16:52.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.900]        // while-condition  =>  TRUE
[16:16:52.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.902]        // while-condition  =>  TRUE
[16:16:52.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.904]        // while-condition  =>  TRUE
[16:16:52.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.904]        // while-condition  =>  TRUE
[16:16:52.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.907]        // while-condition  =>  TRUE
[16:16:52.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.909]        // while-condition  =>  TRUE
[16:16:52.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.910]        // while-condition  =>  TRUE
[16:16:52.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.912]        // while-condition  =>  TRUE
[16:16:52.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.914]        // while-condition  =>  TRUE
[16:16:52.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.914]        // while-condition  =>  TRUE
[16:16:52.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.917]        // while-condition  =>  TRUE
[16:16:52.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.919]        // while-condition  =>  TRUE
[16:16:52.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.925]        // while-condition  =>  TRUE
[16:16:52.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.926]        // while-condition  =>  TRUE
[16:16:52.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.928]        // while-condition  =>  TRUE
[16:16:52.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.930]        // while-condition  =>  TRUE
[16:16:52.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.931]        // while-condition  =>  TRUE
[16:16:52.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.934]        // while-condition  =>  TRUE
[16:16:52.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.936]        // while-condition  =>  TRUE
[16:16:52.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.941]        // while-condition  =>  TRUE
[16:16:52.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.942]        // while-condition  =>  TRUE
[16:16:52.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.945]        // while-condition  =>  TRUE
[16:16:52.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.947]        // while-condition  =>  TRUE
[16:16:52.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.950]        // while-condition  =>  TRUE
[16:16:52.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.951]        // while-condition  =>  TRUE
[16:16:52.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.955]        // while-condition  =>  TRUE
[16:16:52.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.955]        // while-condition  =>  TRUE
[16:16:52.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.959]        // while-condition  =>  TRUE
[16:16:52.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.961]        // while-condition  =>  TRUE
[16:16:52.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.962]        // while-condition  =>  TRUE
[16:16:52.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.964]        // while-condition  =>  TRUE
[16:16:52.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.966]        // while-condition  =>  TRUE
[16:16:52.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.966]        // while-condition  =>  TRUE
[16:16:52.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.969]        // while-condition  =>  TRUE
[16:16:52.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.971]        // while-condition  =>  TRUE
[16:16:52.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.973]        // while-condition  =>  TRUE
[16:16:52.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.975]        // while-condition  =>  TRUE
[16:16:52.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.975]        // while-condition  =>  TRUE
[16:16:52.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.981]        // while-condition  =>  TRUE
[16:16:52.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.982]        // while-condition  =>  TRUE
[16:16:52.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.984]        // while-condition  =>  TRUE
[16:16:52.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.992]        // while-condition  =>  TRUE
[16:16:52.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.996]        // while-condition  =>  TRUE
[16:16:52.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:52.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:52.996]        // while-condition  =>  TRUE
[16:16:52.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.002]        // while-condition  =>  TRUE
[16:16:53.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.003]        // while-condition  =>  TRUE
[16:16:53.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.005]        // while-condition  =>  TRUE
[16:16:53.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.006]        // while-condition  =>  TRUE
[16:16:53.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.006]        // while-condition  =>  TRUE
[16:16:53.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.012]        // while-condition  =>  TRUE
[16:16:53.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.014]        // while-condition  =>  TRUE
[16:16:53.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.015]        // while-condition  =>  TRUE
[16:16:53.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.016]        // while-condition  =>  TRUE
[16:16:53.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.019]        // while-condition  =>  TRUE
[16:16:53.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.021]        // while-condition  =>  TRUE
[16:16:53.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.022]        // while-condition  =>  TRUE
[16:16:53.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.024]        // while-condition  =>  TRUE
[16:16:53.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.026]        // while-condition  =>  TRUE
[16:16:53.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.027]        // while-condition  =>  TRUE
[16:16:53.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.027]        // while-condition  =>  TRUE
[16:16:53.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.030]        // while-condition  =>  TRUE
[16:16:53.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.033]        // while-condition  =>  TRUE
[16:16:53.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.034]        // while-condition  =>  TRUE
[16:16:53.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.037]        // while-condition  =>  TRUE
[16:16:53.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.041]        // while-condition  =>  TRUE
[16:16:53.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.043]        // while-condition  =>  TRUE
[16:16:53.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.045]        // while-condition  =>  TRUE
[16:16:53.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.047]        // while-condition  =>  TRUE
[16:16:53.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.050]        // while-condition  =>  TRUE
[16:16:53.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.052]        // while-condition  =>  TRUE
[16:16:53.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.054]        // while-condition  =>  TRUE
[16:16:53.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.056]        // while-condition  =>  TRUE
[16:16:53.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.057]        // while-condition  =>  TRUE
[16:16:53.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.060]        // while-condition  =>  TRUE
[16:16:53.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.063]        // while-condition  =>  TRUE
[16:16:53.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.065]        // while-condition  =>  TRUE
[16:16:53.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.066]        // while-condition  =>  TRUE
[16:16:53.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.067]        // while-condition  =>  TRUE
[16:16:53.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.069]        // while-condition  =>  TRUE
[16:16:53.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.072]        // while-condition  =>  TRUE
[16:16:53.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.074]        // while-condition  =>  TRUE
[16:16:53.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.077]        // while-condition  =>  TRUE
[16:16:53.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.079]        // while-condition  =>  TRUE
[16:16:53.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.081]        // while-condition  =>  TRUE
[16:16:53.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.084]        // while-condition  =>  TRUE
[16:16:53.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.085]        // while-condition  =>  TRUE
[16:16:53.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.087]        // while-condition  =>  TRUE
[16:16:53.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.087]        // while-condition  =>  TRUE
[16:16:53.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.091]        // while-condition  =>  TRUE
[16:16:53.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.094]        // while-condition  =>  TRUE
[16:16:53.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.096]        // while-condition  =>  TRUE
[16:16:53.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.098]        // while-condition  =>  TRUE
[16:16:53.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.098]        // while-condition  =>  TRUE
[16:16:53.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.098]        // while-condition  =>  TRUE
[16:16:53.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.098]        // while-condition  =>  TRUE
[16:16:53.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.098]        // while-condition  =>  TRUE
[16:16:53.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.107]        // while-condition  =>  TRUE
[16:16:53.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.117]        // while-condition  =>  TRUE
[16:16:53.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.117]        // while-condition  =>  TRUE
[16:16:53.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.117]        // while-condition  =>  TRUE
[16:16:53.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.117]        // while-condition  =>  TRUE
[16:16:53.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.117]        // while-condition  =>  TRUE
[16:16:53.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.127]        // while-condition  =>  TRUE
[16:16:53.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.137]        // while-condition  =>  TRUE
[16:16:53.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.137]        // while-condition  =>  TRUE
[16:16:53.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.137]        // while-condition  =>  TRUE
[16:16:53.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.147]        // while-condition  =>  TRUE
[16:16:53.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.147]        // while-condition  =>  TRUE
[16:16:53.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.147]        // while-condition  =>  TRUE
[16:16:53.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.147]        // while-condition  =>  TRUE
[16:16:53.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.147]        // while-condition  =>  TRUE
[16:16:53.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.157]        // while-condition  =>  TRUE
[16:16:53.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.167]        // while-condition  =>  TRUE
[16:16:53.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.167]        // while-condition  =>  TRUE
[16:16:53.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.167]        // while-condition  =>  TRUE
[16:16:53.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.167]        // while-condition  =>  TRUE
[16:16:53.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.167]        // while-condition  =>  TRUE
[16:16:53.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.177]        // while-condition  =>  TRUE
[16:16:53.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.177]        // while-condition  =>  TRUE
[16:16:53.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.177]        // while-condition  =>  TRUE
[16:16:53.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.177]        // while-condition  =>  TRUE
[16:16:53.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.177]        // while-condition  =>  TRUE
[16:16:53.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.187]        // while-condition  =>  TRUE
[16:16:53.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.187]        // while-condition  =>  TRUE
[16:16:53.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.187]        // while-condition  =>  TRUE
[16:16:53.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.187]        // while-condition  =>  TRUE
[16:16:53.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.197]        // while-condition  =>  TRUE
[16:16:53.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.197]        // while-condition  =>  TRUE
[16:16:53.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.208]        // while-condition  =>  TRUE
[16:16:53.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.208]        // while-condition  =>  TRUE
[16:16:53.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.208]        // while-condition  =>  TRUE
[16:16:53.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.208]        // while-condition  =>  TRUE
[16:16:53.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.217]        // while-condition  =>  TRUE
[16:16:53.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.217]        // while-condition  =>  TRUE
[16:16:53.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.217]        // while-condition  =>  TRUE
[16:16:53.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.217]        // while-condition  =>  TRUE
[16:16:53.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.217]        // while-condition  =>  TRUE
[16:16:53.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.227]        // while-condition  =>  TRUE
[16:16:53.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.227]        // while-condition  =>  TRUE
[16:16:53.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.227]        // while-condition  =>  TRUE
[16:16:53.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.227]        // while-condition  =>  TRUE
[16:16:53.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.227]        // while-condition  =>  TRUE
[16:16:53.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.237]        // while-condition  =>  TRUE
[16:16:53.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.247]        // while-condition  =>  TRUE
[16:16:53.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.257]        // while-condition  =>  TRUE
[16:16:53.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.257]        // while-condition  =>  TRUE
[16:16:53.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.257]        // while-condition  =>  TRUE
[16:16:53.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.257]        // while-condition  =>  TRUE
[16:16:53.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.257]        // while-condition  =>  TRUE
[16:16:53.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.267]        // while-condition  =>  TRUE
[16:16:53.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.267]        // while-condition  =>  TRUE
[16:16:53.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.267]        // while-condition  =>  TRUE
[16:16:53.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.267]        // while-condition  =>  TRUE
[16:16:53.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.277]        // while-condition  =>  TRUE
[16:16:53.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.277]        // while-condition  =>  TRUE
[16:16:53.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.277]        // while-condition  =>  TRUE
[16:16:53.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.277]        // while-condition  =>  TRUE
[16:16:53.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.277]        // while-condition  =>  TRUE
[16:16:53.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.287]        // while-condition  =>  TRUE
[16:16:53.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.287]        // while-condition  =>  TRUE
[16:16:53.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.287]        // while-condition  =>  TRUE
[16:16:53.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.297]        // while-condition  =>  TRUE
[16:16:53.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.299]        // while-condition  =>  TRUE
[16:16:53.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.299]        // while-condition  =>  TRUE
[16:16:53.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.299]        // while-condition  =>  TRUE
[16:16:53.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.299]        // while-condition  =>  TRUE
[16:16:53.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.299]        // while-condition  =>  TRUE
[16:16:53.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.307]        // while-condition  =>  TRUE
[16:16:53.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.307]        // while-condition  =>  TRUE
[16:16:53.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.307]        // while-condition  =>  TRUE
[16:16:53.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.307]        // while-condition  =>  TRUE
[16:16:53.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.317]        // while-condition  =>  TRUE
[16:16:53.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.317]        // while-condition  =>  TRUE
[16:16:53.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.317]        // while-condition  =>  TRUE
[16:16:53.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.317]        // while-condition  =>  TRUE
[16:16:53.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.317]        // while-condition  =>  TRUE
[16:16:53.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.327]        // while-condition  =>  TRUE
[16:16:53.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.329]        // while-condition  =>  TRUE
[16:16:53.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.329]        // while-condition  =>  TRUE
[16:16:53.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.329]        // while-condition  =>  TRUE
[16:16:53.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.329]        // while-condition  =>  TRUE
[16:16:53.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.329]        // while-condition  =>  TRUE
[16:16:53.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.338]        // while-condition  =>  TRUE
[16:16:53.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.340]        // while-condition  =>  TRUE
[16:16:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.340]        // while-condition  =>  TRUE
[16:16:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.340]        // while-condition  =>  TRUE
[16:16:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.340]        // while-condition  =>  TRUE
[16:16:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.340]        // while-condition  =>  TRUE
[16:16:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.348]        // while-condition  =>  TRUE
[16:16:53.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.348]        // while-condition  =>  TRUE
[16:16:53.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.348]        // while-condition  =>  TRUE
[16:16:53.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.358]        // while-condition  =>  TRUE
[16:16:53.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.358]        // while-condition  =>  TRUE
[16:16:53.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.358]        // while-condition  =>  TRUE
[16:16:53.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.358]        // while-condition  =>  TRUE
[16:16:53.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.358]        // while-condition  =>  TRUE
[16:16:53.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.368]        // while-condition  =>  TRUE
[16:16:53.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.378]        // while-condition  =>  TRUE
[16:16:53.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.378]        // while-condition  =>  TRUE
[16:16:53.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.378]        // while-condition  =>  TRUE
[16:16:53.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.388]        // while-condition  =>  TRUE
[16:16:53.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.389]        // while-condition  =>  TRUE
[16:16:53.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.398]        // while-condition  =>  TRUE
[16:16:53.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.398]        // while-condition  =>  TRUE
[16:16:53.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.398]        // while-condition  =>  TRUE
[16:16:53.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.398]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.408]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.408]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.408]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.408]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.408]        // while-condition  =>  TRUE
[16:16:53.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.418]        // while-condition  =>  TRUE
[16:16:53.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.418]        // while-condition  =>  TRUE
[16:16:53.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.418]        // while-condition  =>  TRUE
[16:16:53.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.418]        // while-condition  =>  TRUE
[16:16:53.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.428]        // while-condition  =>  TRUE
[16:16:53.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.428]        // while-condition  =>  TRUE
[16:16:53.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.428]        // while-condition  =>  TRUE
[16:16:53.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.428]        // while-condition  =>  TRUE
[16:16:53.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.428]        // while-condition  =>  TRUE
[16:16:53.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.438]        // while-condition  =>  TRUE
[16:16:53.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.438]        // while-condition  =>  TRUE
[16:16:53.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:16:53.448]        // while-condition  =>  TRUE
[16:16:53.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:53.448]        // while  =>  TIMEOUT
[16:16:53.448]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:16:53.448]      </control>
[16:16:53.448]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:16:53.448]        // if-block "(__protocol & 0xFFFF) == 1"
[16:16:53.448]          // =>  FALSE
[16:16:53.448]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:16:53.448]      </control>
[16:16:53.448]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:16:53.448]        // if-block "(__protocol & 0xFFFF) == 2"
[16:16:53.448]          // =>  TRUE
[16:16:53.448]        <block atomic="false" info="">
[16:16:53.448]          Message(0, "executing SWD power up");
[16:16:53.448]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:16:53.454]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:16:53.454]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:16:53.456]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:16:53.456]        </block>
[16:16:53.456]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:16:53.456]      </control>
[16:16:53.456]      // end if-block "powered_down"
[16:16:53.459]    </control>
[16:16:53.459]    <block atomic="false" info="">
[16:16:53.459]      __var DEBUG_PORT_VAL    = 0;
[16:16:53.459]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:16:53.459]      __var ACCESS_POINT_VAL  = 0;
[16:16:53.459]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:16:53.459]      __ap = 1; 
[16:16:53.459]        // -> [__ap <= 0x00000001]
[16:16:53.459]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:16:53.469]  
[16:16:53.469]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[16:16:53.469]  
[16:16:53.469]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:16:53.469]    </block>
[16:16:53.469]  </sequence>
[16:16:53.469]  
[16:17:04.861]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:17:04.861]  
[16:17:04.871]  <debugvars>
[16:17:04.871]    // Pre-defined
[16:17:04.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:17:04.871]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:17:04.871]    __dp=0x00000000
[16:17:04.871]    __ap=0x00000000
[16:17:04.871]    __traceout=0x00000000      (Trace Disabled)
[16:17:04.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:17:04.871]    __FlashAddr=0x00000000
[16:17:04.871]    __FlashLen=0x00000000
[16:17:04.871]    __FlashArg=0x00000000
[16:17:04.871]    __FlashOp=0x00000000
[16:17:04.871]    __Result=0x00000000
[16:17:04.871]  </debugvars>
[16:17:04.871]  
[16:17:04.871]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:17:04.871]    <block atomic="false" info="">
[16:17:04.871]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:17:04.871]        // -> [isSWJ <= 0x00000001]
[16:17:04.871]      __var hasDormant = __protocol & 0x00020000;
[16:17:04.871]        // -> [hasDormant <= 0x00000000]
[16:17:04.871]      __var protType   = __protocol & 0x0000FFFF;
[16:17:04.871]        // -> [protType <= 0x00000002]
[16:17:04.871]    </block>
[16:17:04.871]    <control if="protType == 1" while="" timeout="0" info="">
[16:17:04.871]      // if-block "protType == 1"
[16:17:04.871]        // =>  FALSE
[16:17:04.871]      // skip if-block "protType == 1"
[16:17:04.871]    </control>
[16:17:04.871]    <control if="protType == 2" while="" timeout="0" info="">
[16:17:04.871]      // if-block "protType == 2"
[16:17:04.871]        // =>  TRUE
[16:17:04.871]      <control if="isSWJ" while="" timeout="0" info="">
[16:17:04.871]        // if-block "isSWJ"
[16:17:04.871]          // =>  TRUE
[16:17:04.871]        <control if="hasDormant" while="" timeout="0" info="">
[16:17:04.871]          // if-block "hasDormant"
[16:17:04.871]            // =>  FALSE
[16:17:04.871]          // skip if-block "hasDormant"
[16:17:04.871]        </control>
[16:17:04.871]        <control if="!hasDormant" while="" timeout="0" info="">
[16:17:04.871]          // if-block "!hasDormant"
[16:17:04.871]            // =>  TRUE
[16:17:04.871]          <block atomic="false" info="">
[16:17:04.871]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:17:04.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:17:04.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:17:04.871]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:17:04.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:17:04.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:17:04.880]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:17:04.880]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:17:04.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:17:04.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:17:04.880]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:17:04.880]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:17:04.880]          </block>
[16:17:04.880]          // end if-block "!hasDormant"
[16:17:04.880]        </control>
[16:17:04.880]        // end if-block "isSWJ"
[16:17:04.880]      </control>
[16:17:04.880]      <control if="!isSWJ" while="" timeout="0" info="">
[16:17:04.880]        // if-block "!isSWJ"
[16:17:04.880]          // =>  FALSE
[16:17:04.880]        // skip if-block "!isSWJ"
[16:17:04.880]      </control>
[16:17:04.880]      <block atomic="false" info="">
[16:17:04.880]        ReadDP(0x0);
[16:17:04.890]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:17:04.890]      </block>
[16:17:04.890]      // end if-block "protType == 2"
[16:17:04.890]    </control>
[16:17:04.890]  </sequence>
[16:17:04.890]  
[16:17:04.890]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:17:04.890]  
[16:17:04.890]  <debugvars>
[16:17:04.890]    // Pre-defined
[16:17:04.890]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:17:04.890]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:17:04.890]    __dp=0x00000000
[16:17:04.890]    __ap=0x00000000
[16:17:04.890]    __traceout=0x00000000      (Trace Disabled)
[16:17:04.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:17:04.890]    __FlashAddr=0x00000000
[16:17:04.890]    __FlashLen=0x00000000
[16:17:04.890]    __FlashArg=0x00000000
[16:17:04.890]    __FlashOp=0x00000000
[16:17:04.890]    __Result=0x00000000
[16:17:04.890]  </debugvars>
[16:17:04.890]  
[16:17:04.890]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:17:04.890]    <block atomic="false" info="">
[16:17:04.890]      __var SW_DP_ABORT       = 0x0;
[16:17:04.890]        // -> [SW_DP_ABORT <= 0x00000000]
[16:17:04.890]      __var DP_CTRL_STAT      = 0x4;
[16:17:04.890]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:17:04.890]      __var DP_SELECT         = 0x8;
[16:17:04.890]        // -> [DP_SELECT <= 0x00000008]
[16:17:04.890]      __var powered_down      = 0;
[16:17:04.890]        // -> [powered_down <= 0x00000000]
[16:17:04.900]      WriteDP(DP_SELECT, 0x00000000);
[16:17:04.900]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:17:04.900]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:17:04.900]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:17:04.900]        // -> [powered_down <= 0x00000001]
[16:17:04.900]    </block>
[16:17:04.900]    <control if="powered_down" while="" timeout="0" info="">
[16:17:04.900]      // if-block "powered_down"
[16:17:04.900]        // =>  TRUE
[16:17:04.900]      <block atomic="false" info="">
[16:17:04.900]        Message(0, "Debug/System power-up request sent");
[16:17:04.900]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:17:04.900]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:17:04.900]      </block>
[16:17:04.900]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:17:04.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:17:04.910]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:17:04.910]        // while-condition  =>  FALSE
[16:17:04.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:17:04.910]      </control>
[16:17:04.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:17:04.910]        // if-block "(__protocol & 0xFFFF) == 1"
[16:17:04.910]          // =>  FALSE
[16:17:04.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:17:04.910]      </control>
[16:17:04.912]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:17:04.912]        // if-block "(__protocol & 0xFFFF) == 2"
[16:17:04.912]          // =>  TRUE
[16:17:04.912]        <block atomic="false" info="">
[16:17:04.912]          Message(0, "executing SWD power up");
[16:17:04.912]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:17:04.912]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:17:04.912]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:17:04.912]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:17:04.912]        </block>
[16:17:04.912]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:17:04.912]      </control>
[16:17:04.912]      // end if-block "powered_down"
[16:17:04.912]    </control>
[16:17:04.912]    <block atomic="false" info="">
[16:17:04.912]      __var DEBUG_PORT_VAL    = 0;
[16:17:04.912]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:17:04.912]      __var ACCESS_POINT_VAL  = 0;
[16:17:04.912]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:17:04.912]      __ap = 1; 
[16:17:04.912]        // -> [__ap <= 0x00000001]
[16:17:04.912]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:17:04.921]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:17:04.921]      __ap = 4;
[16:17:04.921]        // -> [__ap <= 0x00000004]
[16:17:04.921]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:17:04.921]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:17:04.921]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:17:04.921]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:17:04.921]    </block>
[16:17:04.921]    <block atomic="false" info="">
[16:17:04.921]      __var nReset = 0x80;
[16:17:04.921]        // -> [nReset <= 0x00000080]
[16:17:04.921]      __var canReadPins = 0;
[16:17:04.921]        // -> [canReadPins <= 0x00000000]
[16:17:04.921]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:17:04.931]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:17:04.931]        // -> [canReadPins <= 0x00000001]
[16:17:04.931]    </block>
[16:17:04.931]    <control if="" while="1" timeout="200" info="">
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.931]      // while "1"  (timeout="200")
[16:17:04.931]      // while-condition  =>  TRUE
[16:17:04.941]      // while "1"  (timeout="200")
[16:17:04.941]      // while  =>  TIMEOUT
[16:17:04.941]      // end while "1"
[16:17:04.941]    </control>
[16:17:04.941]    <control if="canReadPins" while="" timeout="0" info="">
[16:17:04.941]      // if-block "canReadPins"
[16:17:04.941]        // =>  TRUE
[16:17:04.941]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:17:04.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:17:04.941]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:17:04.941]        // while-condition  =>  FALSE
[16:17:04.941]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:17:04.941]      </control>
[16:17:04.941]      // end if-block "canReadPins"
[16:17:04.941]    </control>
[16:17:04.941]    <control if="!canReadPins" while="" timeout="0" info="">
[16:17:04.941]      // if-block "!canReadPins"
[16:17:04.941]        // =>  FALSE
[16:17:04.941]      // skip if-block "!canReadPins"
[16:17:04.941]    </control>
[16:17:04.941]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:17:04.941]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:17:04.941]        // =>  TRUE
[16:17:04.941]      <block atomic="false" info="">
[16:17:04.941]        WriteAP(0x00, 0x190008);
[16:17:04.951]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:17:04.951]        WriteAP(0xF0, 0x01);
[16:17:04.951]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:17:04.951]      </block>
[16:17:04.951]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:17:04.951]    </control>
[16:17:04.951]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:17:04.951]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:17:04.951]        // =>  FALSE
[16:17:04.951]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:17:04.951]    </control>
[16:17:04.951]    <block atomic="false" info="">
[16:17:04.951]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:17:04.961]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:17:04.961]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:17:04.961]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:17:04.961]      __ap = 0; //lets make sure we reset the access point selection
[16:17:04.961]        // -> [__ap <= 0x00000000]
[16:17:04.961]    </block>
[16:17:04.961]  </sequence>
[16:17:04.961]  
[16:17:04.981]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:17:04.981]  
[16:17:04.981]  <debugvars>
[16:17:04.981]    // Pre-defined
[16:17:04.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:17:04.981]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:17:04.981]    __dp=0x00000000
[16:17:04.981]    __ap=0x00000000
[16:17:04.981]    __traceout=0x00000000      (Trace Disabled)
[16:17:04.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:17:04.981]    __FlashAddr=0x00000000
[16:17:04.981]    __FlashLen=0x00000000
[16:17:04.981]    __FlashArg=0x00000000
[16:17:04.981]    __FlashOp=0x00000000
[16:17:04.981]    __Result=0x00000000
[16:17:04.981]  </debugvars>
[16:17:04.981]  
[16:17:04.981]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:17:04.981]    <block atomic="false" info="">
[16:17:04.981]      __var deviceID = 0;
[16:17:04.981]        // -> [deviceID <= 0x00000000]
[16:17:04.981]      __var version = 0;
[16:17:04.981]        // -> [version <= 0x00000000]
[16:17:04.981]      __var partNum = 0;
[16:17:04.981]        // -> [partNum <= 0x00000000]
[16:17:04.981]      __var manuf = 0;
[16:17:04.991]        // -> [manuf <= 0x00000000]
[16:17:04.991]      __var isMSPM0G1X0X_G3X0X = 0;
[16:17:04.991]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:17:04.991]      __var isProduction = 0;
[16:17:04.991]        // -> [isProduction <= 0x00000000]
[16:17:04.991]      __var continueId = 0;
[16:17:04.991]        // -> [continueId <= 0x00000000]
[16:17:04.991]      deviceID =   Read32(0x41C40004);
[16:17:05.001]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:17:05.001]        // -> [deviceID <= 0x2BB8802F]
[16:17:05.001]      version = deviceID >> 28;
[16:17:05.001]        // -> [version <= 0x00000002]
[16:17:05.001]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:17:05.001]        // -> [partNum <= 0x0000BB88]
[16:17:05.001]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:17:05.001]        // -> [manuf <= 0x00000017]
[16:17:05.001]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:17:05.001]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:17:05.001]      isProduction = (version > 0);
[16:17:05.001]        // -> [isProduction <= 0x00000001]
[16:17:05.001]    </block>
[16:17:05.001]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:17:05.001]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:17:05.001]        // =>  FALSE
[16:17:05.001]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:17:05.001]    </control>
[16:17:05.001]    <control if="continueId == 4" while="" timeout="0" info="">
[16:17:05.001]      // if-block "continueId == 4"
[16:17:05.001]        // =>  FALSE
[16:17:05.001]      // skip if-block "continueId == 4"
[16:17:05.001]    </control>
[16:17:05.001]    <control if="!isProduction" while="" timeout="0" info="">
[16:17:05.001]      // if-block "!isProduction"
[16:17:05.001]        // =>  FALSE
[16:17:05.001]      // skip if-block "!isProduction"
[16:17:05.001]    </control>
[16:17:05.001]  </sequence>
[16:17:05.001]  
[16:18:22.632]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:18:22.632]  
[16:18:22.645]  <debugvars>
[16:18:22.645]    // Pre-defined
[16:18:22.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:22.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:22.645]    __dp=0x00000000
[16:18:22.645]    __ap=0x00000000
[16:18:22.645]    __traceout=0x00000000      (Trace Disabled)
[16:18:22.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:22.645]    __FlashAddr=0x00000000
[16:18:22.645]    __FlashLen=0x00000000
[16:18:22.645]    __FlashArg=0x00000000
[16:18:22.645]    __FlashOp=0x00000000
[16:18:22.645]    __Result=0x00000000
[16:18:22.645]  </debugvars>
[16:18:22.645]  
[16:18:22.645]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:18:22.645]    <block atomic="false" info="">
[16:18:22.645]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:18:22.645]        // -> [isSWJ <= 0x00000001]
[16:18:22.645]      __var hasDormant = __protocol & 0x00020000;
[16:18:22.645]        // -> [hasDormant <= 0x00000000]
[16:18:22.645]      __var protType   = __protocol & 0x0000FFFF;
[16:18:22.645]        // -> [protType <= 0x00000002]
[16:18:22.645]    </block>
[16:18:22.645]    <control if="protType == 1" while="" timeout="0" info="">
[16:18:22.645]      // if-block "protType == 1"
[16:18:22.645]        // =>  FALSE
[16:18:22.645]      // skip if-block "protType == 1"
[16:18:22.645]    </control>
[16:18:22.645]    <control if="protType == 2" while="" timeout="0" info="">
[16:18:22.649]      // if-block "protType == 2"
[16:18:22.649]        // =>  TRUE
[16:18:22.649]      <control if="isSWJ" while="" timeout="0" info="">
[16:18:22.649]        // if-block "isSWJ"
[16:18:22.649]          // =>  TRUE
[16:18:22.649]        <control if="hasDormant" while="" timeout="0" info="">
[16:18:22.649]          // if-block "hasDormant"
[16:18:22.649]            // =>  FALSE
[16:18:22.649]          // skip if-block "hasDormant"
[16:18:22.649]        </control>
[16:18:22.649]        <control if="!hasDormant" while="" timeout="0" info="">
[16:18:22.649]          // if-block "!hasDormant"
[16:18:22.649]            // =>  TRUE
[16:18:22.649]          <block atomic="false" info="">
[16:18:22.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:18:22.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:22.649]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:18:22.652]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:18:22.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:18:22.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:22.652]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:18:22.652]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:18:22.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:18:22.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:22.652]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:18:22.659]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:18:22.659]          </block>
[16:18:22.659]          // end if-block "!hasDormant"
[16:18:22.659]        </control>
[16:18:22.659]        // end if-block "isSWJ"
[16:18:22.659]      </control>
[16:18:22.659]      <control if="!isSWJ" while="" timeout="0" info="">
[16:18:22.659]        // if-block "!isSWJ"
[16:18:22.659]          // =>  FALSE
[16:18:22.659]        // skip if-block "!isSWJ"
[16:18:22.659]      </control>
[16:18:22.659]      <block atomic="false" info="">
[16:18:22.659]        ReadDP(0x0);
[16:18:22.659]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:18:22.659]      </block>
[16:18:22.659]      // end if-block "protType == 2"
[16:18:22.659]    </control>
[16:18:22.662]  </sequence>
[16:18:22.662]  
[16:18:22.662]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:18:22.662]  
[16:18:22.662]  <debugvars>
[16:18:22.662]    // Pre-defined
[16:18:22.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:22.662]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:22.662]    __dp=0x00000000
[16:18:22.662]    __ap=0x00000000
[16:18:22.662]    __traceout=0x00000000      (Trace Disabled)
[16:18:22.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:22.662]    __FlashAddr=0x00000000
[16:18:22.662]    __FlashLen=0x00000000
[16:18:22.662]    __FlashArg=0x00000000
[16:18:22.662]    __FlashOp=0x00000000
[16:18:22.662]    __Result=0x00000000
[16:18:22.662]  </debugvars>
[16:18:22.662]  
[16:18:22.662]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:18:22.662]    <block atomic="false" info="">
[16:18:22.662]      __var SW_DP_ABORT       = 0x0;
[16:18:22.662]        // -> [SW_DP_ABORT <= 0x00000000]
[16:18:22.662]      __var DP_CTRL_STAT      = 0x4;
[16:18:22.662]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:18:22.662]      __var DP_SELECT         = 0x8;
[16:18:22.662]        // -> [DP_SELECT <= 0x00000008]
[16:18:22.662]      __var powered_down      = 0;
[16:18:22.662]        // -> [powered_down <= 0x00000000]
[16:18:22.662]      WriteDP(DP_SELECT, 0x00000000);
[16:18:22.669]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:18:22.669]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:18:22.672]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:18:22.672]        // -> [powered_down <= 0x00000001]
[16:18:22.672]    </block>
[16:18:22.672]    <control if="powered_down" while="" timeout="0" info="">
[16:18:22.672]      // if-block "powered_down"
[16:18:22.672]        // =>  TRUE
[16:18:22.672]      <block atomic="false" info="">
[16:18:22.672]        Message(0, "Debug/System power-up request sent");
[16:18:22.672]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:18:22.672]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:18:22.672]      </block>
[16:18:22.672]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:18:22.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:18:22.679]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:18:22.679]        // while-condition  =>  FALSE
[16:18:22.679]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:18:22.679]      </control>
[16:18:22.679]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:18:22.679]        // if-block "(__protocol & 0xFFFF) == 1"
[16:18:22.679]          // =>  FALSE
[16:18:22.679]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:18:22.679]      </control>
[16:18:22.679]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:18:22.679]        // if-block "(__protocol & 0xFFFF) == 2"
[16:18:22.679]          // =>  TRUE
[16:18:22.679]        <block atomic="false" info="">
[16:18:22.679]          Message(0, "executing SWD power up");
[16:18:22.682]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:18:22.682]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:18:22.682]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:18:22.682]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:18:22.682]        </block>
[16:18:22.682]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:18:22.682]      </control>
[16:18:22.682]      // end if-block "powered_down"
[16:18:22.682]    </control>
[16:18:22.682]    <block atomic="false" info="">
[16:18:22.682]      __var DEBUG_PORT_VAL    = 0;
[16:18:22.682]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:18:22.682]      __var ACCESS_POINT_VAL  = 0;
[16:18:22.682]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:18:22.682]      __ap = 1; 
[16:18:22.682]        // -> [__ap <= 0x00000001]
[16:18:22.682]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:18:22.689]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:18:22.689]      __ap = 4;
[16:18:22.689]        // -> [__ap <= 0x00000004]
[16:18:22.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:22.692]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:18:22.692]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:18:22.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:22.692]    </block>
[16:18:22.692]    <block atomic="false" info="">
[16:18:22.692]      __var nReset = 0x80;
[16:18:22.692]        // -> [nReset <= 0x00000080]
[16:18:22.692]      __var canReadPins = 0;
[16:18:22.692]        // -> [canReadPins <= 0x00000000]
[16:18:22.692]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:18:22.692]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:18:22.692]        // -> [canReadPins <= 0x00000001]
[16:18:22.699]    </block>
[16:18:22.699]    <control if="" while="1" timeout="200" info="">
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.699]      // while "1"  (timeout="200")
[16:18:22.699]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.702]      // while-condition  =>  TRUE
[16:18:22.702]      // while "1"  (timeout="200")
[16:18:22.709]      // while-condition  =>  TRUE
[16:18:22.709]      // while "1"  (timeout="200")
[16:18:22.709]      // while  =>  TIMEOUT
[16:18:22.709]      // end while "1"
[16:18:22.709]    </control>
[16:18:22.709]    <control if="canReadPins" while="" timeout="0" info="">
[16:18:22.709]      // if-block "canReadPins"
[16:18:22.709]        // =>  TRUE
[16:18:22.709]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:18:22.710]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:18:22.710]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:18:22.710]        // while-condition  =>  FALSE
[16:18:22.710]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:18:22.710]      </control>
[16:18:22.710]      // end if-block "canReadPins"
[16:18:22.710]    </control>
[16:18:22.710]    <control if="!canReadPins" while="" timeout="0" info="">
[16:18:22.710]      // if-block "!canReadPins"
[16:18:22.710]        // =>  FALSE
[16:18:22.710]      // skip if-block "!canReadPins"
[16:18:22.710]    </control>
[16:18:22.710]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:18:22.712]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:22.712]        // =>  TRUE
[16:18:22.712]      <block atomic="false" info="">
[16:18:22.712]        WriteAP(0x00, 0x190008);
[16:18:22.712]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:22.712]        WriteAP(0xF0, 0x01);
[16:18:22.719]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:22.719]      </block>
[16:18:22.719]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:22.719]    </control>
[16:18:22.719]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:18:22.719]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:22.719]        // =>  FALSE
[16:18:22.719]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:22.719]    </control>
[16:18:22.719]    <block atomic="false" info="">
[16:18:22.719]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:22.722]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:18:22.722]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:18:22.722]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:22.722]      __ap = 0; //lets make sure we reset the access point selection
[16:18:22.722]        // -> [__ap <= 0x00000000]
[16:18:22.722]    </block>
[16:18:22.722]  </sequence>
[16:18:22.722]  
[16:18:22.742]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:18:22.742]  
[16:18:22.742]  <debugvars>
[16:18:22.742]    // Pre-defined
[16:18:22.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:22.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:22.742]    __dp=0x00000000
[16:18:22.742]    __ap=0x00000000
[16:18:22.742]    __traceout=0x00000000      (Trace Disabled)
[16:18:22.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:22.742]    __FlashAddr=0x00000000
[16:18:22.742]    __FlashLen=0x00000000
[16:18:22.742]    __FlashArg=0x00000000
[16:18:22.742]    __FlashOp=0x00000000
[16:18:22.742]    __Result=0x00000000
[16:18:22.742]  </debugvars>
[16:18:22.742]  
[16:18:22.742]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:18:22.742]    <block atomic="false" info="">
[16:18:22.742]      __var deviceID = 0;
[16:18:22.742]        // -> [deviceID <= 0x00000000]
[16:18:22.742]      __var version = 0;
[16:18:22.742]        // -> [version <= 0x00000000]
[16:18:22.742]      __var partNum = 0;
[16:18:22.742]        // -> [partNum <= 0x00000000]
[16:18:22.742]      __var manuf = 0;
[16:18:22.742]        // -> [manuf <= 0x00000000]
[16:18:22.742]      __var isMSPM0G1X0X_G3X0X = 0;
[16:18:22.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:18:22.742]      __var isProduction = 0;
[16:18:22.742]        // -> [isProduction <= 0x00000000]
[16:18:22.748]      __var continueId = 0;
[16:18:22.748]        // -> [continueId <= 0x00000000]
[16:18:22.748]      deviceID =   Read32(0x41C40004);
[16:18:22.752]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:18:22.752]        // -> [deviceID <= 0x2BB8802F]
[16:18:22.752]      version = deviceID >> 28;
[16:18:22.752]        // -> [version <= 0x00000002]
[16:18:22.752]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:18:22.752]        // -> [partNum <= 0x0000BB88]
[16:18:22.752]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:18:22.752]        // -> [manuf <= 0x00000017]
[16:18:22.752]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:18:22.752]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:18:22.752]      isProduction = (version > 0);
[16:18:22.752]        // -> [isProduction <= 0x00000001]
[16:18:22.752]    </block>
[16:18:22.752]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:18:22.752]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:18:22.752]        // =>  FALSE
[16:18:22.752]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:18:22.752]    </control>
[16:18:22.752]    <control if="continueId == 4" while="" timeout="0" info="">
[16:18:22.752]      // if-block "continueId == 4"
[16:18:22.752]        // =>  FALSE
[16:18:22.752]      // skip if-block "continueId == 4"
[16:18:22.752]    </control>
[16:18:22.752]    <control if="!isProduction" while="" timeout="0" info="">
[16:18:22.752]      // if-block "!isProduction"
[16:18:22.752]        // =>  FALSE
[16:18:22.752]      // skip if-block "!isProduction"
[16:18:22.752]    </control>
[16:18:22.752]  </sequence>
[16:18:22.752]  
[16:19:13.164]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:19:13.164]  
[16:19:13.164]  <debugvars>
[16:19:13.164]    // Pre-defined
[16:19:13.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:13.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:13.164]    __dp=0x00000000
[16:19:13.164]    __ap=0x00000000
[16:19:13.164]    __traceout=0x00000000      (Trace Disabled)
[16:19:13.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:13.164]    __FlashAddr=0x00000000
[16:19:13.164]    __FlashLen=0x00000000
[16:19:13.164]    __FlashArg=0x00000000
[16:19:13.164]    __FlashOp=0x00000000
[16:19:13.164]    __Result=0x00000000
[16:19:13.164]  </debugvars>
[16:19:13.164]  
[16:19:13.164]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:19:13.166]    <block atomic="false" info="">
[16:19:13.166]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:19:13.166]        // -> [isSWJ <= 0x00000001]
[16:19:13.166]      __var hasDormant = __protocol & 0x00020000;
[16:19:13.166]        // -> [hasDormant <= 0x00000000]
[16:19:13.166]      __var protType   = __protocol & 0x0000FFFF;
[16:19:13.166]        // -> [protType <= 0x00000002]
[16:19:13.166]    </block>
[16:19:13.166]    <control if="protType == 1" while="" timeout="0" info="">
[16:19:13.166]      // if-block "protType == 1"
[16:19:13.166]        // =>  FALSE
[16:19:13.168]      // skip if-block "protType == 1"
[16:19:13.168]    </control>
[16:19:13.168]    <control if="protType == 2" while="" timeout="0" info="">
[16:19:13.168]      // if-block "protType == 2"
[16:19:13.168]        // =>  TRUE
[16:19:13.168]      <control if="isSWJ" while="" timeout="0" info="">
[16:19:13.168]        // if-block "isSWJ"
[16:19:13.168]          // =>  TRUE
[16:19:13.168]        <control if="hasDormant" while="" timeout="0" info="">
[16:19:13.168]          // if-block "hasDormant"
[16:19:13.168]            // =>  FALSE
[16:19:13.168]          // skip if-block "hasDormant"
[16:19:13.168]        </control>
[16:19:13.168]        <control if="!hasDormant" while="" timeout="0" info="">
[16:19:13.168]          // if-block "!hasDormant"
[16:19:13.169]            // =>  TRUE
[16:19:13.169]          <block atomic="false" info="">
[16:19:13.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:19:13.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:13.171]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:19:13.173]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:19:13.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:19:13.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:13.175]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:19:13.176]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:19:13.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:19:13.178]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:13.178]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:19:13.181]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:19:13.181]          </block>
[16:19:13.181]          // end if-block "!hasDormant"
[16:19:13.181]        </control>
[16:19:13.181]        // end if-block "isSWJ"
[16:19:13.181]      </control>
[16:19:13.181]      <control if="!isSWJ" while="" timeout="0" info="">
[16:19:13.181]        // if-block "!isSWJ"
[16:19:13.181]          // =>  FALSE
[16:19:13.181]        // skip if-block "!isSWJ"
[16:19:13.181]      </control>
[16:19:13.181]      <block atomic="false" info="">
[16:19:13.181]        ReadDP(0x0);
[16:19:13.184]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:19:13.184]      </block>
[16:19:13.184]      // end if-block "protType == 2"
[16:19:13.184]    </control>
[16:19:13.185]  </sequence>
[16:19:13.185]  
[16:19:13.187]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:19:13.187]  
[16:19:13.187]  <debugvars>
[16:19:13.187]    // Pre-defined
[16:19:13.187]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:13.187]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:13.187]    __dp=0x00000000
[16:19:13.187]    __ap=0x00000000
[16:19:13.187]    __traceout=0x00000000      (Trace Disabled)
[16:19:13.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:13.187]    __FlashAddr=0x00000000
[16:19:13.187]    __FlashLen=0x00000000
[16:19:13.188]    __FlashArg=0x00000000
[16:19:13.188]    __FlashOp=0x00000000
[16:19:13.188]    __Result=0x00000000
[16:19:13.188]  </debugvars>
[16:19:13.188]  
[16:19:13.188]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:19:13.188]    <block atomic="false" info="">
[16:19:13.188]      __var SW_DP_ABORT       = 0x0;
[16:19:13.188]        // -> [SW_DP_ABORT <= 0x00000000]
[16:19:13.190]      __var DP_CTRL_STAT      = 0x4;
[16:19:13.190]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:19:13.190]      __var DP_SELECT         = 0x8;
[16:19:13.190]        // -> [DP_SELECT <= 0x00000008]
[16:19:13.190]      __var powered_down      = 0;
[16:19:13.190]        // -> [powered_down <= 0x00000000]
[16:19:13.190]      WriteDP(DP_SELECT, 0x00000000);
[16:19:13.192]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:19:13.192]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:19:13.196]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:19:13.196]        // -> [powered_down <= 0x00000001]
[16:19:13.196]    </block>
[16:19:13.196]    <control if="powered_down" while="" timeout="0" info="">
[16:19:13.196]      // if-block "powered_down"
[16:19:13.196]        // =>  TRUE
[16:19:13.196]      <block atomic="false" info="">
[16:19:13.196]        Message(0, "Debug/System power-up request sent");
[16:19:13.201]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:19:13.202]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:19:13.202]      </block>
[16:19:13.202]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:19:13.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:19:13.205]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:19:13.206]        // while-condition  =>  FALSE
[16:19:13.206]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:19:13.206]      </control>
[16:19:13.206]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:19:13.206]        // if-block "(__protocol & 0xFFFF) == 1"
[16:19:13.206]          // =>  FALSE
[16:19:13.206]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:19:13.206]      </control>
[16:19:13.206]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:19:13.206]        // if-block "(__protocol & 0xFFFF) == 2"
[16:19:13.206]          // =>  TRUE
[16:19:13.206]        <block atomic="false" info="">
[16:19:13.206]          Message(0, "executing SWD power up");
[16:19:13.207]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:19:13.210]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:19:13.210]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:19:13.212]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:19:13.212]        </block>
[16:19:13.212]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:19:13.212]      </control>
[16:19:13.212]      // end if-block "powered_down"
[16:19:13.212]    </control>
[16:19:13.212]    <block atomic="false" info="">
[16:19:13.212]      __var DEBUG_PORT_VAL    = 0;
[16:19:13.212]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:19:13.212]      __var ACCESS_POINT_VAL  = 0;
[16:19:13.214]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:19:13.214]      __ap = 1; 
[16:19:13.214]        // -> [__ap <= 0x00000001]
[16:19:13.214]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:19:13.217]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:19:13.217]      __ap = 4;
[16:19:13.217]        // -> [__ap <= 0x00000004]
[16:19:13.217]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:19:13.219]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:19:13.219]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:19:13.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:19:13.223]    </block>
[16:19:13.223]    <block atomic="false" info="">
[16:19:13.223]      __var nReset = 0x80;
[16:19:13.223]        // -> [nReset <= 0x00000080]
[16:19:13.223]      __var canReadPins = 0;
[16:19:13.223]        // -> [canReadPins <= 0x00000000]
[16:19:13.223]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:19:13.226]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:19:13.226]        // -> [canReadPins <= 0x00000001]
[16:19:13.226]    </block>
[16:19:13.226]    <control if="" while="1" timeout="200" info="">
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.226]      // while-condition  =>  TRUE
[16:19:13.226]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.235]      // while-condition  =>  TRUE
[16:19:13.235]      // while "1"  (timeout="200")
[16:19:13.246]      // while-condition  =>  TRUE
[16:19:13.246]      // while "1"  (timeout="200")
[16:19:13.246]      // while  =>  TIMEOUT
[16:19:13.246]      // end while "1"
[16:19:13.246]    </control>
[16:19:13.246]    <control if="canReadPins" while="" timeout="0" info="">
[16:19:13.246]      // if-block "canReadPins"
[16:19:13.246]        // =>  TRUE
[16:19:13.246]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:19:13.246]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:19:13.246]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:19:13.246]        // while-condition  =>  FALSE
[16:19:13.246]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:19:13.246]      </control>
[16:19:13.246]      // end if-block "canReadPins"
[16:19:13.246]    </control>
[16:19:13.246]    <control if="!canReadPins" while="" timeout="0" info="">
[16:19:13.246]      // if-block "!canReadPins"
[16:19:13.246]        // =>  FALSE
[16:19:13.246]      // skip if-block "!canReadPins"
[16:19:13.246]    </control>
[16:19:13.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:19:13.246]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:19:13.246]        // =>  TRUE
[16:19:13.246]      <block atomic="false" info="">
[16:19:13.246]        WriteAP(0x00, 0x190008);
[16:19:13.246]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:19:13.246]        WriteAP(0xF0, 0x01);
[16:19:13.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:19:13.256]      </block>
[16:19:13.256]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:19:13.256]    </control>
[16:19:13.256]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:19:13.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:19:13.256]        // =>  FALSE
[16:19:13.256]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:19:13.256]    </control>
[16:19:13.256]    <block atomic="false" info="">
[16:19:13.256]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:19:13.256]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:19:13.256]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:19:13.256]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:19:13.256]      __ap = 0; //lets make sure we reset the access point selection
[16:19:13.256]        // -> [__ap <= 0x00000000]
[16:19:13.256]    </block>
[16:19:13.256]  </sequence>
[16:19:13.256]  
[16:19:13.296]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:19:13.296]  
[16:19:13.296]  <debugvars>
[16:19:13.296]    // Pre-defined
[16:19:13.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:13.296]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:13.296]    __dp=0x00000000
[16:19:13.296]    __ap=0x00000000
[16:19:13.296]    __traceout=0x00000000      (Trace Disabled)
[16:19:13.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:13.296]    __FlashAddr=0x00000000
[16:19:13.296]    __FlashLen=0x00000000
[16:19:13.296]    __FlashArg=0x00000000
[16:19:13.296]    __FlashOp=0x00000000
[16:19:13.296]    __Result=0x00000000
[16:19:13.296]  </debugvars>
[16:19:13.296]  
[16:19:13.296]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:19:13.296]    <block atomic="false" info="">
[16:19:13.296]      __var deviceID = 0;
[16:19:13.296]        // -> [deviceID <= 0x00000000]
[16:19:13.296]      __var version = 0;
[16:19:13.296]        // -> [version <= 0x00000000]
[16:19:13.296]      __var partNum = 0;
[16:19:13.296]        // -> [partNum <= 0x00000000]
[16:19:13.296]      __var manuf = 0;
[16:19:13.296]        // -> [manuf <= 0x00000000]
[16:19:13.296]      __var isMSPM0G1X0X_G3X0X = 0;
[16:19:13.296]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:19:13.296]      __var isProduction = 0;
[16:19:13.296]        // -> [isProduction <= 0x00000000]
[16:19:13.296]      __var continueId = 0;
[16:19:13.296]        // -> [continueId <= 0x00000000]
[16:19:13.296]      deviceID =   Read32(0x41C40004);
[16:19:13.306]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:19:13.306]        // -> [deviceID <= 0x2BB8802F]
[16:19:13.306]      version = deviceID >> 28;
[16:19:13.316]        // -> [version <= 0x00000002]
[16:19:13.316]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:19:13.316]        // -> [partNum <= 0x0000BB88]
[16:19:13.316]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:19:13.316]        // -> [manuf <= 0x00000017]
[16:19:13.316]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:19:13.316]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:19:13.316]      isProduction = (version > 0);
[16:19:13.316]        // -> [isProduction <= 0x00000001]
[16:19:13.316]    </block>
[16:19:13.316]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:19:13.316]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:19:13.316]        // =>  FALSE
[16:19:13.316]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:19:13.316]    </control>
[16:19:13.316]    <control if="continueId == 4" while="" timeout="0" info="">
[16:19:13.316]      // if-block "continueId == 4"
[16:19:13.316]        // =>  FALSE
[16:19:13.316]      // skip if-block "continueId == 4"
[16:19:13.316]    </control>
[16:19:13.316]    <control if="!isProduction" while="" timeout="0" info="">
[16:19:13.316]      // if-block "!isProduction"
[16:19:13.316]        // =>  FALSE
[16:19:13.316]      // skip if-block "!isProduction"
[16:19:13.316]    </control>
[16:19:13.316]  </sequence>
[16:19:13.316]  
[16:20:25.497]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:20:25.497]  
[16:20:25.497]  <debugvars>
[16:20:25.497]    // Pre-defined
[16:20:25.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:25.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:20:25.497]    __dp=0x00000000
[16:20:25.497]    __ap=0x00000000
[16:20:25.497]    __traceout=0x00000000      (Trace Disabled)
[16:20:25.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:25.497]    __FlashAddr=0x00000000
[16:20:25.497]    __FlashLen=0x00000000
[16:20:25.497]    __FlashArg=0x00000000
[16:20:25.497]    __FlashOp=0x00000000
[16:20:25.497]    __Result=0x00000000
[16:20:25.497]  </debugvars>
[16:20:25.500]  
[16:20:25.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:20:25.500]    <block atomic="false" info="">
[16:20:25.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:20:25.500]        // -> [isSWJ <= 0x00000001]
[16:20:25.500]      __var hasDormant = __protocol & 0x00020000;
[16:20:25.500]        // -> [hasDormant <= 0x00000000]
[16:20:25.500]      __var protType   = __protocol & 0x0000FFFF;
[16:20:25.500]        // -> [protType <= 0x00000002]
[16:20:25.500]    </block>
[16:20:25.500]    <control if="protType == 1" while="" timeout="0" info="">
[16:20:25.501]      // if-block "protType == 1"
[16:20:25.501]        // =>  FALSE
[16:20:25.501]      // skip if-block "protType == 1"
[16:20:25.501]    </control>
[16:20:25.501]    <control if="protType == 2" while="" timeout="0" info="">
[16:20:25.501]      // if-block "protType == 2"
[16:20:25.501]        // =>  TRUE
[16:20:25.501]      <control if="isSWJ" while="" timeout="0" info="">
[16:20:25.501]        // if-block "isSWJ"
[16:20:25.501]          // =>  TRUE
[16:20:25.501]        <control if="hasDormant" while="" timeout="0" info="">
[16:20:25.501]          // if-block "hasDormant"
[16:20:25.501]            // =>  FALSE
[16:20:25.502]          // skip if-block "hasDormant"
[16:20:25.502]        </control>
[16:20:25.502]        <control if="!hasDormant" while="" timeout="0" info="">
[16:20:25.502]          // if-block "!hasDormant"
[16:20:25.502]            // =>  TRUE
[16:20:25.502]          <block atomic="false" info="">
[16:20:25.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:20:25.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:25.505]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:20:25.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:20:25.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:20:25.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:25.508]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:20:25.516]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:20:25.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:20:25.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:25.518]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:20:25.519]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:20:25.519]          </block>
[16:20:25.519]          // end if-block "!hasDormant"
[16:20:25.519]        </control>
[16:20:25.519]        // end if-block "isSWJ"
[16:20:25.519]      </control>
[16:20:25.519]      <control if="!isSWJ" while="" timeout="0" info="">
[16:20:25.519]        // if-block "!isSWJ"
[16:20:25.519]          // =>  FALSE
[16:20:25.519]        // skip if-block "!isSWJ"
[16:20:25.519]      </control>
[16:20:25.519]      <block atomic="false" info="">
[16:20:25.519]        ReadDP(0x0);
[16:20:25.522]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:20:25.522]      </block>
[16:20:25.522]      // end if-block "protType == 2"
[16:20:25.522]    </control>
[16:20:25.522]  </sequence>
[16:20:25.522]  
[16:20:25.525]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:20:25.525]  
[16:20:25.525]  <debugvars>
[16:20:25.525]    // Pre-defined
[16:20:25.525]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:25.525]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:20:25.525]    __dp=0x00000000
[16:20:25.525]    __ap=0x00000000
[16:20:25.525]    __traceout=0x00000000      (Trace Disabled)
[16:20:25.525]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:25.525]    __FlashAddr=0x00000000
[16:20:25.525]    __FlashLen=0x00000000
[16:20:25.525]    __FlashArg=0x00000000
[16:20:25.525]    __FlashOp=0x00000000
[16:20:25.525]    __Result=0x00000000
[16:20:25.525]  </debugvars>
[16:20:25.525]  
[16:20:25.525]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:20:25.525]    <block atomic="false" info="">
[16:20:25.528]      __var SW_DP_ABORT       = 0x0;
[16:20:25.528]        // -> [SW_DP_ABORT <= 0x00000000]
[16:20:25.528]      __var DP_CTRL_STAT      = 0x4;
[16:20:25.528]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:20:25.528]      __var DP_SELECT         = 0x8;
[16:20:25.528]        // -> [DP_SELECT <= 0x00000008]
[16:20:25.528]      __var powered_down      = 0;
[16:20:25.528]        // -> [powered_down <= 0x00000000]
[16:20:25.528]      WriteDP(DP_SELECT, 0x00000000);
[16:20:25.530]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:20:25.530]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:20:25.532]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:20:25.532]        // -> [powered_down <= 0x00000001]
[16:20:25.532]    </block>
[16:20:25.532]    <control if="powered_down" while="" timeout="0" info="">
[16:20:25.532]      // if-block "powered_down"
[16:20:25.532]        // =>  TRUE
[16:20:25.532]      <block atomic="false" info="">
[16:20:25.532]        Message(0, "Debug/System power-up request sent");
[16:20:25.535]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:20:25.535]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:20:25.535]      </block>
[16:20:25.535]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:20:25.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:20:25.538]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:20:25.538]        // while-condition  =>  FALSE
[16:20:25.538]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:20:25.538]      </control>
[16:20:25.538]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:20:25.538]        // if-block "(__protocol & 0xFFFF) == 1"
[16:20:25.538]          // =>  FALSE
[16:20:25.538]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:20:25.538]      </control>
[16:20:25.538]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:20:25.538]        // if-block "(__protocol & 0xFFFF) == 2"
[16:20:25.540]          // =>  TRUE
[16:20:25.540]        <block atomic="false" info="">
[16:20:25.540]          Message(0, "executing SWD power up");
[16:20:25.542]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:20:25.545]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:20:25.545]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:20:25.545]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:20:25.545]        </block>
[16:20:25.545]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:20:25.545]      </control>
[16:20:25.545]      // end if-block "powered_down"
[16:20:25.545]    </control>
[16:20:25.548]    <block atomic="false" info="">
[16:20:25.548]      __var DEBUG_PORT_VAL    = 0;
[16:20:25.548]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:20:25.548]      __var ACCESS_POINT_VAL  = 0;
[16:20:25.548]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:20:25.548]      __ap = 1; 
[16:20:25.548]        // -> [__ap <= 0x00000001]
[16:20:25.548]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:20:25.551]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:20:25.552]      __ap = 4;
[16:20:25.552]        // -> [__ap <= 0x00000004]
[16:20:25.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:20:25.555]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:20:25.555]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:20:25.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:20:25.556]    </block>
[16:20:25.556]    <block atomic="false" info="">
[16:20:25.556]      __var nReset = 0x80;
[16:20:25.556]        // -> [nReset <= 0x00000080]
[16:20:25.556]      __var canReadPins = 0;
[16:20:25.556]        // -> [canReadPins <= 0x00000000]
[16:20:25.556]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:20:25.558]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:20:25.558]        // -> [canReadPins <= 0x00000001]
[16:20:25.558]    </block>
[16:20:25.558]    <control if="" while="1" timeout="200" info="">
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.558]      // while-condition  =>  TRUE
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.558]      // while-condition  =>  TRUE
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.558]      // while-condition  =>  TRUE
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.558]      // while-condition  =>  TRUE
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.558]      // while-condition  =>  TRUE
[16:20:25.558]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.562]      // while-condition  =>  TRUE
[16:20:25.562]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.563]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.563]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.563]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.563]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.563]      // while "1"  (timeout="200")
[16:20:25.563]      // while-condition  =>  TRUE
[16:20:25.564]      // while "1"  (timeout="200")
[16:20:25.564]      // while-condition  =>  TRUE
[16:20:25.564]      // while "1"  (timeout="200")
[16:20:25.564]      // while-condition  =>  TRUE
[16:20:25.564]      // while "1"  (timeout="200")
[16:20:25.564]      // while-condition  =>  TRUE
[16:20:25.564]      // while "1"  (timeout="200")
[16:20:25.564]      // while-condition  =>  TRUE
[16:20:25.565]      // while "1"  (timeout="200")
[16:20:25.565]      // while  =>  TIMEOUT
[16:20:25.565]      // end while "1"
[16:20:25.565]    </control>
[16:20:25.565]    <control if="canReadPins" while="" timeout="0" info="">
[16:20:25.565]      // if-block "canReadPins"
[16:20:25.565]        // =>  TRUE
[16:20:25.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:20:25.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:20:25.567]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:20:25.567]        // while-condition  =>  FALSE
[16:20:25.567]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:20:25.567]      </control>
[16:20:25.567]      // end if-block "canReadPins"
[16:20:25.567]    </control>
[16:20:25.567]    <control if="!canReadPins" while="" timeout="0" info="">
[16:20:25.567]      // if-block "!canReadPins"
[16:20:25.569]        // =>  FALSE
[16:20:25.569]      // skip if-block "!canReadPins"
[16:20:25.569]    </control>
[16:20:25.569]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:20:25.569]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:20:25.569]        // =>  TRUE
[16:20:25.569]      <block atomic="false" info="">
[16:20:25.569]        WriteAP(0x00, 0x190008);
[16:20:25.570]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:20:25.570]        WriteAP(0xF0, 0x01);
[16:20:25.570]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:20:25.570]      </block>
[16:20:25.570]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:20:25.570]    </control>
[16:20:25.570]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:20:25.570]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:20:25.570]        // =>  FALSE
[16:20:25.570]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:20:25.570]    </control>
[16:20:25.570]    <block atomic="false" info="">
[16:20:25.570]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:20:25.577]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:20:25.577]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:20:25.577]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:20:25.577]      __ap = 0; //lets make sure we reset the access point selection
[16:20:25.577]        // -> [__ap <= 0x00000000]
[16:20:25.577]    </block>
[16:20:25.577]  </sequence>
[16:20:25.577]  
[16:20:25.605]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:20:25.605]  
[16:20:25.606]  <debugvars>
[16:20:25.606]    // Pre-defined
[16:20:25.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:25.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:20:25.606]    __dp=0x00000000
[16:20:25.606]    __ap=0x00000000
[16:20:25.606]    __traceout=0x00000000      (Trace Disabled)
[16:20:25.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:25.606]    __FlashAddr=0x00000000
[16:20:25.606]    __FlashLen=0x00000000
[16:20:25.606]    __FlashArg=0x00000000
[16:20:25.606]    __FlashOp=0x00000000
[16:20:25.606]    __Result=0x00000000
[16:20:25.606]  </debugvars>
[16:20:25.606]  
[16:20:25.606]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:20:25.607]    <block atomic="false" info="">
[16:20:25.607]      __var deviceID = 0;
[16:20:25.607]        // -> [deviceID <= 0x00000000]
[16:20:25.607]      __var version = 0;
[16:20:25.607]        // -> [version <= 0x00000000]
[16:20:25.607]      __var partNum = 0;
[16:20:25.607]        // -> [partNum <= 0x00000000]
[16:20:25.609]      __var manuf = 0;
[16:20:25.609]        // -> [manuf <= 0x00000000]
[16:20:25.609]      __var isMSPM0G1X0X_G3X0X = 0;
[16:20:25.609]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:20:25.609]      __var isProduction = 0;
[16:20:25.609]        // -> [isProduction <= 0x00000000]
[16:20:25.609]      __var continueId = 0;
[16:20:25.609]        // -> [continueId <= 0x00000000]
[16:20:25.609]      deviceID =   Read32(0x41C40004);
[16:20:25.614]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:20:25.614]        // -> [deviceID <= 0x2BB8802F]
[16:20:25.614]      version = deviceID >> 28;
[16:20:25.614]        // -> [version <= 0x00000002]
[16:20:25.614]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:20:25.614]        // -> [partNum <= 0x0000BB88]
[16:20:25.614]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:20:25.614]        // -> [manuf <= 0x00000017]
[16:20:25.614]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:20:25.614]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:20:25.614]      isProduction = (version > 0);
[16:20:25.614]        // -> [isProduction <= 0x00000001]
[16:20:25.614]    </block>
[16:20:25.614]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:20:25.614]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:20:25.614]        // =>  FALSE
[16:20:25.614]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:20:25.616]    </control>
[16:20:25.616]    <control if="continueId == 4" while="" timeout="0" info="">
[16:20:25.616]      // if-block "continueId == 4"
[16:20:25.616]        // =>  FALSE
[16:20:25.616]      // skip if-block "continueId == 4"
[16:20:25.616]    </control>
[16:20:25.616]    <control if="!isProduction" while="" timeout="0" info="">
[16:20:25.616]      // if-block "!isProduction"
[16:20:25.616]        // =>  FALSE
[16:20:25.616]      // skip if-block "!isProduction"
[16:20:25.616]    </control>
[16:20:25.616]  </sequence>
[16:20:25.617]  
[16:22:23.273]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:22:23.273]  
[16:22:23.273]  <debugvars>
[16:22:23.273]    // Pre-defined
[16:22:23.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:23.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:23.273]    __dp=0x00000000
[16:22:23.273]    __ap=0x00000000
[16:22:23.273]    __traceout=0x00000000      (Trace Disabled)
[16:22:23.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:23.273]    __FlashAddr=0x00000000
[16:22:23.273]    __FlashLen=0x00000000
[16:22:23.273]    __FlashArg=0x00000000
[16:22:23.273]    __FlashOp=0x00000000
[16:22:23.273]    __Result=0x00000000
[16:22:23.273]  </debugvars>
[16:22:23.273]  
[16:22:23.273]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:22:23.273]    <block atomic="false" info="">
[16:22:23.273]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:22:23.273]        // -> [isSWJ <= 0x00000001]
[16:22:23.273]      __var hasDormant = __protocol & 0x00020000;
[16:22:23.273]        // -> [hasDormant <= 0x00000000]
[16:22:23.273]      __var protType   = __protocol & 0x0000FFFF;
[16:22:23.273]        // -> [protType <= 0x00000002]
[16:22:23.273]    </block>
[16:22:23.273]    <control if="protType == 1" while="" timeout="0" info="">
[16:22:23.273]      // if-block "protType == 1"
[16:22:23.273]        // =>  FALSE
[16:22:23.273]      // skip if-block "protType == 1"
[16:22:23.273]    </control>
[16:22:23.273]    <control if="protType == 2" while="" timeout="0" info="">
[16:22:23.273]      // if-block "protType == 2"
[16:22:23.273]        // =>  TRUE
[16:22:23.273]      <control if="isSWJ" while="" timeout="0" info="">
[16:22:23.273]        // if-block "isSWJ"
[16:22:23.273]          // =>  TRUE
[16:22:23.273]        <control if="hasDormant" while="" timeout="0" info="">
[16:22:23.273]          // if-block "hasDormant"
[16:22:23.273]            // =>  FALSE
[16:22:23.273]          // skip if-block "hasDormant"
[16:22:23.273]        </control>
[16:22:23.273]        <control if="!hasDormant" while="" timeout="0" info="">
[16:22:23.273]          // if-block "!hasDormant"
[16:22:23.273]            // =>  TRUE
[16:22:23.273]          <block atomic="false" info="">
[16:22:23.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:22:23.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:23.273]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:22:23.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:22:23.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:22:23.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:23.283]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:22:23.293]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:22:23.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:22:23.293]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:23.293]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:22:23.293]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:22:23.293]          </block>
[16:22:23.293]          // end if-block "!hasDormant"
[16:22:23.293]        </control>
[16:22:23.293]        // end if-block "isSWJ"
[16:22:23.293]      </control>
[16:22:23.293]      <control if="!isSWJ" while="" timeout="0" info="">
[16:22:23.293]        // if-block "!isSWJ"
[16:22:23.293]          // =>  FALSE
[16:22:23.293]        // skip if-block "!isSWJ"
[16:22:23.293]      </control>
[16:22:23.293]      <block atomic="false" info="">
[16:22:23.293]        ReadDP(0x0);
[16:22:23.293]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:22:23.293]      </block>
[16:22:23.293]      // end if-block "protType == 2"
[16:22:23.293]    </control>
[16:22:23.293]  </sequence>
[16:22:23.293]  
[16:22:23.304]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:22:23.304]  
[16:22:23.304]  <debugvars>
[16:22:23.304]    // Pre-defined
[16:22:23.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:23.304]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:23.304]    __dp=0x00000000
[16:22:23.304]    __ap=0x00000000
[16:22:23.304]    __traceout=0x00000000      (Trace Disabled)
[16:22:23.304]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:23.304]    __FlashAddr=0x00000000
[16:22:23.304]    __FlashLen=0x00000000
[16:22:23.304]    __FlashArg=0x00000000
[16:22:23.304]    __FlashOp=0x00000000
[16:22:23.304]    __Result=0x00000000
[16:22:23.306]  </debugvars>
[16:22:23.306]  
[16:22:23.306]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:22:23.306]    <block atomic="false" info="">
[16:22:23.306]      __var SW_DP_ABORT       = 0x0;
[16:22:23.306]        // -> [SW_DP_ABORT <= 0x00000000]
[16:22:23.306]      __var DP_CTRL_STAT      = 0x4;
[16:22:23.306]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:22:23.306]      __var DP_SELECT         = 0x8;
[16:22:23.306]        // -> [DP_SELECT <= 0x00000008]
[16:22:23.306]      __var powered_down      = 0;
[16:22:23.306]        // -> [powered_down <= 0x00000000]
[16:22:23.306]      WriteDP(DP_SELECT, 0x00000000);
[16:22:23.306]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:22:23.306]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:22:23.306]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:22:23.306]        // -> [powered_down <= 0x00000001]
[16:22:23.306]    </block>
[16:22:23.306]    <control if="powered_down" while="" timeout="0" info="">
[16:22:23.306]      // if-block "powered_down"
[16:22:23.306]        // =>  TRUE
[16:22:23.306]      <block atomic="false" info="">
[16:22:23.313]        Message(0, "Debug/System power-up request sent");
[16:22:23.315]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:22:23.315]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:22:23.315]      </block>
[16:22:23.315]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:22:23.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:22:23.318]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:22:23.318]        // while-condition  =>  FALSE
[16:22:23.318]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:22:23.318]      </control>
[16:22:23.318]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:22:23.318]        // if-block "(__protocol & 0xFFFF) == 1"
[16:22:23.318]          // =>  FALSE
[16:22:23.318]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:22:23.318]      </control>
[16:22:23.318]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:22:23.318]        // if-block "(__protocol & 0xFFFF) == 2"
[16:22:23.318]          // =>  TRUE
[16:22:23.318]        <block atomic="false" info="">
[16:22:23.318]          Message(0, "executing SWD power up");
[16:22:23.324]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:22:23.324]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:22:23.324]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:22:23.324]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:22:23.324]        </block>
[16:22:23.324]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:22:23.324]      </control>
[16:22:23.324]      // end if-block "powered_down"
[16:22:23.324]    </control>
[16:22:23.324]    <block atomic="false" info="">
[16:22:23.324]      __var DEBUG_PORT_VAL    = 0;
[16:22:23.324]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:22:23.324]      __var ACCESS_POINT_VAL  = 0;
[16:22:23.324]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:22:23.324]      __ap = 1; 
[16:22:23.324]        // -> [__ap <= 0x00000001]
[16:22:23.324]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:22:23.324]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:22:23.324]      __ap = 4;
[16:22:23.324]        // -> [__ap <= 0x00000004]
[16:22:23.324]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:22:23.334]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:22:23.334]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:22:23.334]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:22:23.334]    </block>
[16:22:23.334]    <block atomic="false" info="">
[16:22:23.334]      __var nReset = 0x80;
[16:22:23.334]        // -> [nReset <= 0x00000080]
[16:22:23.334]      __var canReadPins = 0;
[16:22:23.334]        // -> [canReadPins <= 0x00000000]
[16:22:23.334]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:22:23.334]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:22:23.334]        // -> [canReadPins <= 0x00000001]
[16:22:23.334]    </block>
[16:22:23.334]    <control if="" while="1" timeout="200" info="">
[16:22:23.334]      // while "1"  (timeout="200")
[16:22:23.334]      // while-condition  =>  TRUE
[16:22:23.334]      // while "1"  (timeout="200")
[16:22:23.334]      // while-condition  =>  TRUE
[16:22:23.334]      // while "1"  (timeout="200")
[16:22:23.334]      // while-condition  =>  TRUE
[16:22:23.334]      // while "1"  (timeout="200")
[16:22:23.334]      // while-condition  =>  TRUE
[16:22:23.334]      // while "1"  (timeout="200")
[16:22:23.334]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.344]      // while "1"  (timeout="200")
[16:22:23.344]      // while-condition  =>  TRUE
[16:22:23.354]      // while "1"  (timeout="200")
[16:22:23.354]      // while  =>  TIMEOUT
[16:22:23.354]      // end while "1"
[16:22:23.354]    </control>
[16:22:23.354]    <control if="canReadPins" while="" timeout="0" info="">
[16:22:23.354]      // if-block "canReadPins"
[16:22:23.354]        // =>  TRUE
[16:22:23.354]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:22:23.355]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:22:23.355]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:22:23.355]        // while-condition  =>  FALSE
[16:22:23.355]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:22:23.355]      </control>
[16:22:23.355]      // end if-block "canReadPins"
[16:22:23.355]    </control>
[16:22:23.355]    <control if="!canReadPins" while="" timeout="0" info="">
[16:22:23.355]      // if-block "!canReadPins"
[16:22:23.355]        // =>  FALSE
[16:22:23.355]      // skip if-block "!canReadPins"
[16:22:23.355]    </control>
[16:22:23.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:22:23.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:22:23.355]        // =>  TRUE
[16:22:23.355]      <block atomic="false" info="">
[16:22:23.355]        WriteAP(0x00, 0x190008);
[16:22:23.355]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:22:23.355]        WriteAP(0xF0, 0x01);
[16:22:23.364]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:22:23.364]      </block>
[16:22:23.364]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:22:23.364]    </control>
[16:22:23.364]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:22:23.367]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:22:23.367]        // =>  FALSE
[16:22:23.367]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:22:23.367]    </control>
[16:22:23.367]    <block atomic="false" info="">
[16:22:23.367]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:22:23.367]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:22:23.367]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:22:23.367]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:22:23.374]      __ap = 0; //lets make sure we reset the access point selection
[16:22:23.374]        // -> [__ap <= 0x00000000]
[16:22:23.374]    </block>
[16:22:23.374]  </sequence>
[16:22:23.374]  
[16:22:23.394]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:22:23.394]  
[16:22:23.394]  <debugvars>
[16:22:23.394]    // Pre-defined
[16:22:23.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:23.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:23.394]    __dp=0x00000000
[16:22:23.394]    __ap=0x00000000
[16:22:23.394]    __traceout=0x00000000      (Trace Disabled)
[16:22:23.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:23.394]    __FlashAddr=0x00000000
[16:22:23.394]    __FlashLen=0x00000000
[16:22:23.394]    __FlashArg=0x00000000
[16:22:23.394]    __FlashOp=0x00000000
[16:22:23.394]    __Result=0x00000000
[16:22:23.394]  </debugvars>
[16:22:23.394]  
[16:22:23.394]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:22:23.394]    <block atomic="false" info="">
[16:22:23.394]      __var deviceID = 0;
[16:22:23.394]        // -> [deviceID <= 0x00000000]
[16:22:23.394]      __var version = 0;
[16:22:23.394]        // -> [version <= 0x00000000]
[16:22:23.394]      __var partNum = 0;
[16:22:23.394]        // -> [partNum <= 0x00000000]
[16:22:23.394]      __var manuf = 0;
[16:22:23.394]        // -> [manuf <= 0x00000000]
[16:22:23.394]      __var isMSPM0G1X0X_G3X0X = 0;
[16:22:23.394]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:22:23.394]      __var isProduction = 0;
[16:22:23.394]        // -> [isProduction <= 0x00000000]
[16:22:23.394]      __var continueId = 0;
[16:22:23.394]        // -> [continueId <= 0x00000000]
[16:22:23.394]      deviceID =   Read32(0x41C40004);
[16:22:23.404]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:22:23.404]        // -> [deviceID <= 0x2BB8802F]
[16:22:23.404]      version = deviceID >> 28;
[16:22:23.404]        // -> [version <= 0x00000002]
[16:22:23.404]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:22:23.404]        // -> [partNum <= 0x0000BB88]
[16:22:23.404]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:22:23.404]        // -> [manuf <= 0x00000017]
[16:22:23.404]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:22:23.404]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:22:23.404]      isProduction = (version > 0);
[16:22:23.404]        // -> [isProduction <= 0x00000001]
[16:22:23.404]    </block>
[16:22:23.404]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:22:23.404]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:22:23.404]        // =>  FALSE
[16:22:23.404]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:22:23.404]    </control>
[16:22:23.404]    <control if="continueId == 4" while="" timeout="0" info="">
[16:22:23.404]      // if-block "continueId == 4"
[16:22:23.404]        // =>  FALSE
[16:22:23.404]      // skip if-block "continueId == 4"
[16:22:23.404]    </control>
[16:22:23.404]    <control if="!isProduction" while="" timeout="0" info="">
[16:22:23.404]      // if-block "!isProduction"
[16:22:23.414]        // =>  FALSE
[16:22:23.414]      // skip if-block "!isProduction"
[16:22:23.414]    </control>
[16:22:23.414]  </sequence>
[16:22:23.414]  
[16:22:51.866]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:22:51.866]  
[16:22:51.876]  <debugvars>
[16:22:51.876]    // Pre-defined
[16:22:51.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:51.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:51.876]    __dp=0x00000000
[16:22:51.876]    __ap=0x00000000
[16:22:51.876]    __traceout=0x00000000      (Trace Disabled)
[16:22:51.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:51.876]    __FlashAddr=0x00000000
[16:22:51.876]    __FlashLen=0x00000000
[16:22:51.876]    __FlashArg=0x00000000
[16:22:51.876]    __FlashOp=0x00000000
[16:22:51.876]    __Result=0x00000000
[16:22:51.876]  </debugvars>
[16:22:51.876]  
[16:22:51.876]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:22:51.876]    <block atomic="false" info="">
[16:22:51.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:22:51.876]        // -> [isSWJ <= 0x00000001]
[16:22:51.876]      __var hasDormant = __protocol & 0x00020000;
[16:22:51.876]        // -> [hasDormant <= 0x00000000]
[16:22:51.876]      __var protType   = __protocol & 0x0000FFFF;
[16:22:51.876]        // -> [protType <= 0x00000002]
[16:22:51.876]    </block>
[16:22:51.876]    <control if="protType == 1" while="" timeout="0" info="">
[16:22:51.876]      // if-block "protType == 1"
[16:22:51.876]        // =>  FALSE
[16:22:51.876]      // skip if-block "protType == 1"
[16:22:51.876]    </control>
[16:22:51.876]    <control if="protType == 2" while="" timeout="0" info="">
[16:22:51.876]      // if-block "protType == 2"
[16:22:51.876]        // =>  TRUE
[16:22:51.876]      <control if="isSWJ" while="" timeout="0" info="">
[16:22:51.876]        // if-block "isSWJ"
[16:22:51.876]          // =>  TRUE
[16:22:51.876]        <control if="hasDormant" while="" timeout="0" info="">
[16:22:51.876]          // if-block "hasDormant"
[16:22:51.876]            // =>  FALSE
[16:22:51.876]          // skip if-block "hasDormant"
[16:22:51.876]        </control>
[16:22:51.876]        <control if="!hasDormant" while="" timeout="0" info="">
[16:22:51.876]          // if-block "!hasDormant"
[16:22:51.876]            // =>  TRUE
[16:22:51.876]          <block atomic="false" info="">
[16:22:51.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:22:51.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:51.876]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:22:51.876]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:22:51.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:22:51.884]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:51.884]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:22:51.884]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:22:51.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:22:51.884]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:22:51.884]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:22:51.884]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:22:51.884]          </block>
[16:22:51.884]          // end if-block "!hasDormant"
[16:22:51.884]        </control>
[16:22:51.884]        // end if-block "isSWJ"
[16:22:51.884]      </control>
[16:22:51.884]      <control if="!isSWJ" while="" timeout="0" info="">
[16:22:51.884]        // if-block "!isSWJ"
[16:22:51.884]          // =>  FALSE
[16:22:51.884]        // skip if-block "!isSWJ"
[16:22:51.884]      </control>
[16:22:51.884]      <block atomic="false" info="">
[16:22:51.884]        ReadDP(0x0);
[16:22:51.894]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:22:51.894]      </block>
[16:22:51.894]      // end if-block "protType == 2"
[16:22:51.894]    </control>
[16:22:51.894]  </sequence>
[16:22:51.894]  
[16:22:51.894]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:22:51.894]  
[16:22:51.894]  <debugvars>
[16:22:51.894]    // Pre-defined
[16:22:51.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:51.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:51.894]    __dp=0x00000000
[16:22:51.894]    __ap=0x00000000
[16:22:51.894]    __traceout=0x00000000      (Trace Disabled)
[16:22:51.894]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:51.894]    __FlashAddr=0x00000000
[16:22:51.894]    __FlashLen=0x00000000
[16:22:51.894]    __FlashArg=0x00000000
[16:22:51.894]    __FlashOp=0x00000000
[16:22:51.894]    __Result=0x00000000
[16:22:51.894]  </debugvars>
[16:22:51.894]  
[16:22:51.894]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:22:51.894]    <block atomic="false" info="">
[16:22:51.894]      __var SW_DP_ABORT       = 0x0;
[16:22:51.894]        // -> [SW_DP_ABORT <= 0x00000000]
[16:22:51.904]      __var DP_CTRL_STAT      = 0x4;
[16:22:51.904]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:22:51.904]      __var DP_SELECT         = 0x8;
[16:22:51.904]        // -> [DP_SELECT <= 0x00000008]
[16:22:51.904]      __var powered_down      = 0;
[16:22:51.904]        // -> [powered_down <= 0x00000000]
[16:22:51.904]      WriteDP(DP_SELECT, 0x00000000);
[16:22:51.904]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:22:51.904]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:22:51.904]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:22:51.904]        // -> [powered_down <= 0x00000001]
[16:22:51.904]    </block>
[16:22:51.904]    <control if="powered_down" while="" timeout="0" info="">
[16:22:51.904]      // if-block "powered_down"
[16:22:51.904]        // =>  TRUE
[16:22:51.904]      <block atomic="false" info="">
[16:22:51.904]        Message(0, "Debug/System power-up request sent");
[16:22:51.904]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:22:51.914]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:22:51.914]      </block>
[16:22:51.914]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:22:51.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:22:51.914]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:22:51.914]        // while-condition  =>  FALSE
[16:22:51.914]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:22:51.914]      </control>
[16:22:51.914]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:22:51.914]        // if-block "(__protocol & 0xFFFF) == 1"
[16:22:51.914]          // =>  FALSE
[16:22:51.914]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:22:51.914]      </control>
[16:22:51.914]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:22:51.914]        // if-block "(__protocol & 0xFFFF) == 2"
[16:22:51.914]          // =>  TRUE
[16:22:51.914]        <block atomic="false" info="">
[16:22:51.914]          Message(0, "executing SWD power up");
[16:22:51.914]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:22:51.914]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:22:51.914]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:22:51.914]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:22:51.914]        </block>
[16:22:51.914]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:22:51.914]      </control>
[16:22:51.914]      // end if-block "powered_down"
[16:22:51.914]    </control>
[16:22:51.914]    <block atomic="false" info="">
[16:22:51.924]      __var DEBUG_PORT_VAL    = 0;
[16:22:51.924]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:22:51.924]      __var ACCESS_POINT_VAL  = 0;
[16:22:51.924]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:22:51.924]      __ap = 1; 
[16:22:51.924]        // -> [__ap <= 0x00000001]
[16:22:51.924]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:22:51.924]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:22:51.924]      __ap = 4;
[16:22:51.924]        // -> [__ap <= 0x00000004]
[16:22:51.924]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:22:51.924]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:22:51.924]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:22:51.924]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:22:51.924]    </block>
[16:22:51.924]    <block atomic="false" info="">
[16:22:51.924]      __var nReset = 0x80;
[16:22:51.924]        // -> [nReset <= 0x00000080]
[16:22:51.924]      __var canReadPins = 0;
[16:22:51.924]        // -> [canReadPins <= 0x00000000]
[16:22:51.924]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:22:51.934]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:22:51.934]        // -> [canReadPins <= 0x00000001]
[16:22:51.934]    </block>
[16:22:51.934]    <control if="" while="1" timeout="200" info="">
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.934]      // while "1"  (timeout="200")
[16:22:51.934]      // while-condition  =>  TRUE
[16:22:51.944]      // while "1"  (timeout="200")
[16:22:51.944]      // while  =>  TIMEOUT
[16:22:51.944]      // end while "1"
[16:22:51.944]    </control>
[16:22:51.944]    <control if="canReadPins" while="" timeout="0" info="">
[16:22:51.944]      // if-block "canReadPins"
[16:22:51.944]        // =>  TRUE
[16:22:51.944]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:22:51.944]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:22:51.946]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:22:51.946]        // while-condition  =>  FALSE
[16:22:51.946]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:22:51.946]      </control>
[16:22:51.946]      // end if-block "canReadPins"
[16:22:51.946]    </control>
[16:22:51.946]    <control if="!canReadPins" while="" timeout="0" info="">
[16:22:51.946]      // if-block "!canReadPins"
[16:22:51.946]        // =>  FALSE
[16:22:51.946]      // skip if-block "!canReadPins"
[16:22:51.946]    </control>
[16:22:51.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:22:51.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:22:51.946]        // =>  TRUE
[16:22:51.946]      <block atomic="false" info="">
[16:22:51.946]        WriteAP(0x00, 0x190008);
[16:22:51.946]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:22:51.946]        WriteAP(0xF0, 0x01);
[16:22:51.946]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:22:51.946]      </block>
[16:22:51.946]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:22:51.946]    </control>
[16:22:51.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:22:51.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:22:51.955]        // =>  FALSE
[16:22:51.955]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:22:51.955]    </control>
[16:22:51.955]    <block atomic="false" info="">
[16:22:51.955]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:22:51.955]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:22:51.955]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:22:51.955]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:22:51.955]      __ap = 0; //lets make sure we reset the access point selection
[16:22:51.955]        // -> [__ap <= 0x00000000]
[16:22:51.955]    </block>
[16:22:51.955]  </sequence>
[16:22:51.955]  
[16:22:51.975]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:22:51.975]  
[16:22:51.975]  <debugvars>
[16:22:51.975]    // Pre-defined
[16:22:51.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:22:51.975]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:22:51.975]    __dp=0x00000000
[16:22:51.975]    __ap=0x00000000
[16:22:51.975]    __traceout=0x00000000      (Trace Disabled)
[16:22:51.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:22:51.985]    __FlashAddr=0x00000000
[16:22:51.985]    __FlashLen=0x00000000
[16:22:51.985]    __FlashArg=0x00000000
[16:22:51.985]    __FlashOp=0x00000000
[16:22:51.985]    __Result=0x00000000
[16:22:51.985]  </debugvars>
[16:22:51.985]  
[16:22:51.985]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:22:51.985]    <block atomic="false" info="">
[16:22:51.985]      __var deviceID = 0;
[16:22:51.985]        // -> [deviceID <= 0x00000000]
[16:22:51.985]      __var version = 0;
[16:22:51.985]        // -> [version <= 0x00000000]
[16:22:51.985]      __var partNum = 0;
[16:22:51.985]        // -> [partNum <= 0x00000000]
[16:22:51.985]      __var manuf = 0;
[16:22:51.985]        // -> [manuf <= 0x00000000]
[16:22:51.985]      __var isMSPM0G1X0X_G3X0X = 0;
[16:22:51.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:22:51.985]      __var isProduction = 0;
[16:22:51.985]        // -> [isProduction <= 0x00000000]
[16:22:51.985]      __var continueId = 0;
[16:22:51.985]        // -> [continueId <= 0x00000000]
[16:22:51.985]      deviceID =   Read32(0x41C40004);
[16:22:51.985]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:22:51.985]        // -> [deviceID <= 0x2BB8802F]
[16:22:51.985]      version = deviceID >> 28;
[16:22:51.985]        // -> [version <= 0x00000002]
[16:22:51.985]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:22:51.985]        // -> [partNum <= 0x0000BB88]
[16:22:51.985]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:22:51.985]        // -> [manuf <= 0x00000017]
[16:22:51.985]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:22:51.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:22:51.985]      isProduction = (version > 0);
[16:22:51.985]        // -> [isProduction <= 0x00000001]
[16:22:51.985]    </block>
[16:22:51.985]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:22:51.985]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:22:51.985]        // =>  FALSE
[16:22:51.985]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:22:51.985]    </control>
[16:22:51.985]    <control if="continueId == 4" while="" timeout="0" info="">
[16:22:51.985]      // if-block "continueId == 4"
[16:22:51.985]        // =>  FALSE
[16:22:51.985]      // skip if-block "continueId == 4"
[16:22:51.985]    </control>
[16:22:51.985]    <control if="!isProduction" while="" timeout="0" info="">
[16:22:51.985]      // if-block "!isProduction"
[16:22:51.985]        // =>  FALSE
[16:22:51.985]      // skip if-block "!isProduction"
[16:22:51.985]    </control>
[16:22:51.985]  </sequence>
[16:22:51.985]  
[16:25:09.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:25:09.482]  
[16:25:09.492]  <debugvars>
[16:25:09.492]    // Pre-defined
[16:25:09.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.492]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.492]    __dp=0x00000000
[16:25:09.492]    __ap=0x00000000
[16:25:09.492]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.492]    __FlashAddr=0x00000000
[16:25:09.492]    __FlashLen=0x00000000
[16:25:09.492]    __FlashArg=0x00000000
[16:25:09.492]    __FlashOp=0x00000000
[16:25:09.492]    __Result=0x00000000
[16:25:09.494]  </debugvars>
[16:25:09.494]  
[16:25:09.494]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:25:09.495]    <block atomic="false" info="">
[16:25:09.495]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:25:09.495]        // -> [isSWJ <= 0x00000001]
[16:25:09.495]      __var hasDormant = __protocol & 0x00020000;
[16:25:09.495]        // -> [hasDormant <= 0x00000000]
[16:25:09.495]      __var protType   = __protocol & 0x0000FFFF;
[16:25:09.495]        // -> [protType <= 0x00000002]
[16:25:09.495]    </block>
[16:25:09.495]    <control if="protType == 1" while="" timeout="0" info="">
[16:25:09.495]      // if-block "protType == 1"
[16:25:09.495]        // =>  FALSE
[16:25:09.495]      // skip if-block "protType == 1"
[16:25:09.495]    </control>
[16:25:09.495]    <control if="protType == 2" while="" timeout="0" info="">
[16:25:09.495]      // if-block "protType == 2"
[16:25:09.495]        // =>  TRUE
[16:25:09.495]      <control if="isSWJ" while="" timeout="0" info="">
[16:25:09.495]        // if-block "isSWJ"
[16:25:09.495]          // =>  TRUE
[16:25:09.495]        <control if="hasDormant" while="" timeout="0" info="">
[16:25:09.495]          // if-block "hasDormant"
[16:25:09.495]            // =>  FALSE
[16:25:09.495]          // skip if-block "hasDormant"
[16:25:09.495]        </control>
[16:25:09.495]        <control if="!hasDormant" while="" timeout="0" info="">
[16:25:09.495]          // if-block "!hasDormant"
[16:25:09.495]            // =>  TRUE
[16:25:09.495]          <block atomic="false" info="">
[16:25:09.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:25:09.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.495]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:25:09.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:25:09.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:25:09.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.503]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:25:09.504]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:25:09.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:25:09.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.504]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:25:09.504]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:25:09.504]          </block>
[16:25:09.504]          // end if-block "!hasDormant"
[16:25:09.504]        </control>
[16:25:09.504]        // end if-block "isSWJ"
[16:25:09.504]      </control>
[16:25:09.504]      <control if="!isSWJ" while="" timeout="0" info="">
[16:25:09.504]        // if-block "!isSWJ"
[16:25:09.504]          // =>  FALSE
[16:25:09.504]        // skip if-block "!isSWJ"
[16:25:09.504]      </control>
[16:25:09.504]      <block atomic="false" info="">
[16:25:09.504]        ReadDP(0x0);
[16:25:09.512]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:25:09.512]      </block>
[16:25:09.512]      // end if-block "protType == 2"
[16:25:09.512]    </control>
[16:25:09.512]  </sequence>
[16:25:09.512]  
[16:25:09.512]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:25:09.512]  
[16:25:09.512]  <debugvars>
[16:25:09.512]    // Pre-defined
[16:25:09.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.512]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.512]    __dp=0x00000000
[16:25:09.512]    __ap=0x00000000
[16:25:09.512]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.512]    __FlashAddr=0x00000000
[16:25:09.512]    __FlashLen=0x00000000
[16:25:09.512]    __FlashArg=0x00000000
[16:25:09.512]    __FlashOp=0x00000000
[16:25:09.512]    __Result=0x00000000
[16:25:09.512]  </debugvars>
[16:25:09.522]  
[16:25:09.522]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:25:09.522]    <block atomic="false" info="">
[16:25:09.522]      __var SW_DP_ABORT       = 0x0;
[16:25:09.522]        // -> [SW_DP_ABORT <= 0x00000000]
[16:25:09.522]      __var DP_CTRL_STAT      = 0x4;
[16:25:09.522]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:25:09.522]      __var DP_SELECT         = 0x8;
[16:25:09.522]        // -> [DP_SELECT <= 0x00000008]
[16:25:09.522]      __var powered_down      = 0;
[16:25:09.522]        // -> [powered_down <= 0x00000000]
[16:25:09.522]      WriteDP(DP_SELECT, 0x00000000);
[16:25:09.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:25:09.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:25:09.527]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:25:09.527]        // -> [powered_down <= 0x00000001]
[16:25:09.527]    </block>
[16:25:09.527]    <control if="powered_down" while="" timeout="0" info="">
[16:25:09.527]      // if-block "powered_down"
[16:25:09.527]        // =>  TRUE
[16:25:09.527]      <block atomic="false" info="">
[16:25:09.527]        Message(0, "Debug/System power-up request sent");
[16:25:09.527]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:25:09.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:25:09.532]      </block>
[16:25:09.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:25:09.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:25:09.536]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:25:09.536]        // while-condition  =>  FALSE
[16:25:09.536]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:25:09.536]      </control>
[16:25:09.536]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:25:09.536]        // if-block "(__protocol & 0xFFFF) == 1"
[16:25:09.536]          // =>  FALSE
[16:25:09.536]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:25:09.536]      </control>
[16:25:09.536]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:25:09.536]        // if-block "(__protocol & 0xFFFF) == 2"
[16:25:09.536]          // =>  TRUE
[16:25:09.537]        <block atomic="false" info="">
[16:25:09.537]          Message(0, "executing SWD power up");
[16:25:09.537]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:25:09.537]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:25:09.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:25:09.542]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:25:09.542]        </block>
[16:25:09.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:25:09.542]      </control>
[16:25:09.542]      // end if-block "powered_down"
[16:25:09.542]    </control>
[16:25:09.543]    <block atomic="false" info="">
[16:25:09.543]      __var DEBUG_PORT_VAL    = 0;
[16:25:09.543]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:25:09.543]      __var ACCESS_POINT_VAL  = 0;
[16:25:09.543]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:25:09.543]      __ap = 1; 
[16:25:09.543]        // -> [__ap <= 0x00000001]
[16:25:09.543]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:25:09.543]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:25:09.543]      __ap = 4;
[16:25:09.543]        // -> [__ap <= 0x00000004]
[16:25:09.543]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:09.554]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.554]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:25:09.554]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:09.554]    </block>
[16:25:09.554]    <block atomic="false" info="">
[16:25:09.554]      __var nReset = 0x80;
[16:25:09.554]        // -> [nReset <= 0x00000080]
[16:25:09.554]      __var canReadPins = 0;
[16:25:09.554]        // -> [canReadPins <= 0x00000000]
[16:25:09.554]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:25:09.554]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:25:09.554]        // -> [canReadPins <= 0x00000001]
[16:25:09.554]    </block>
[16:25:09.554]    <control if="" while="1" timeout="200" info="">
[16:25:09.554]      // while "1"  (timeout="200")
[16:25:09.554]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.562]      // while "1"  (timeout="200")
[16:25:09.562]      // while-condition  =>  TRUE
[16:25:09.572]      // while "1"  (timeout="200")
[16:25:09.572]      // while  =>  TIMEOUT
[16:25:09.572]      // end while "1"
[16:25:09.572]    </control>
[16:25:09.572]    <control if="canReadPins" while="" timeout="0" info="">
[16:25:09.572]      // if-block "canReadPins"
[16:25:09.572]        // =>  TRUE
[16:25:09.572]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:25:09.572]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:25:09.572]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:25:09.572]        // while-condition  =>  FALSE
[16:25:09.572]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:25:09.572]      </control>
[16:25:09.572]      // end if-block "canReadPins"
[16:25:09.572]    </control>
[16:25:09.572]    <control if="!canReadPins" while="" timeout="0" info="">
[16:25:09.572]      // if-block "!canReadPins"
[16:25:09.572]        // =>  FALSE
[16:25:09.572]      // skip if-block "!canReadPins"
[16:25:09.572]    </control>
[16:25:09.572]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:25:09.572]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:09.572]        // =>  TRUE
[16:25:09.572]      <block atomic="false" info="">
[16:25:09.572]        WriteAP(0x00, 0x190008);
[16:25:09.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.572]        WriteAP(0xF0, 0x01);
[16:25:09.582]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.582]      </block>
[16:25:09.582]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:09.582]    </control>
[16:25:09.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:25:09.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:09.582]        // =>  FALSE
[16:25:09.582]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:09.582]    </control>
[16:25:09.582]    <block atomic="false" info="">
[16:25:09.582]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:09.582]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.582]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:25:09.582]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:09.592]      __ap = 0; //lets make sure we reset the access point selection
[16:25:09.592]        // -> [__ap <= 0x00000000]
[16:25:09.592]    </block>
[16:25:09.592]  </sequence>
[16:25:09.592]  
[16:25:09.622]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:25:09.622]  
[16:25:09.622]  <debugvars>
[16:25:09.622]    // Pre-defined
[16:25:09.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.622]    __dp=0x00000000
[16:25:09.622]    __ap=0x00000000
[16:25:09.622]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.622]    __FlashAddr=0x00000000
[16:25:09.624]    __FlashLen=0x00000000
[16:25:09.624]    __FlashArg=0x00000000
[16:25:09.624]    __FlashOp=0x00000000
[16:25:09.624]    __Result=0x00000000
[16:25:09.624]  </debugvars>
[16:25:09.624]  
[16:25:09.625]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:25:09.625]    <block atomic="false" info="">
[16:25:09.625]      __var deviceID = 0;
[16:25:09.625]        // -> [deviceID <= 0x00000000]
[16:25:09.625]      __var version = 0;
[16:25:09.625]        // -> [version <= 0x00000000]
[16:25:09.625]      __var partNum = 0;
[16:25:09.625]        // -> [partNum <= 0x00000000]
[16:25:09.625]      __var manuf = 0;
[16:25:09.625]        // -> [manuf <= 0x00000000]
[16:25:09.625]      __var isMSPM0G1X0X_G3X0X = 0;
[16:25:09.625]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:25:09.625]      __var isProduction = 0;
[16:25:09.625]        // -> [isProduction <= 0x00000000]
[16:25:09.625]      __var continueId = 0;
[16:25:09.625]        // -> [continueId <= 0x00000000]
[16:25:09.625]      deviceID =   Read32(0x41C40004);
[16:25:09.633]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:25:09.633]        // -> [deviceID <= 0x2BB8802F]
[16:25:09.633]      version = deviceID >> 28;
[16:25:09.633]        // -> [version <= 0x00000002]
[16:25:09.633]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:25:09.633]        // -> [partNum <= 0x0000BB88]
[16:25:09.633]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:25:09.633]        // -> [manuf <= 0x00000017]
[16:25:09.633]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:25:09.633]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:25:09.633]      isProduction = (version > 0);
[16:25:09.633]        // -> [isProduction <= 0x00000001]
[16:25:09.633]    </block>
[16:25:09.633]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:25:09.633]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:25:09.633]        // =>  FALSE
[16:25:09.633]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:25:09.633]    </control>
[16:25:09.633]    <control if="continueId == 4" while="" timeout="0" info="">
[16:25:09.633]      // if-block "continueId == 4"
[16:25:09.633]        // =>  FALSE
[16:25:09.633]      // skip if-block "continueId == 4"
[16:25:09.633]    </control>
[16:25:09.633]    <control if="!isProduction" while="" timeout="0" info="">
[16:25:09.633]      // if-block "!isProduction"
[16:25:09.633]        // =>  FALSE
[16:25:09.633]      // skip if-block "!isProduction"
[16:25:09.633]    </control>
[16:25:09.633]  </sequence>
[16:25:09.633]  
[16:27:12.105]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:27:12.105]  
[16:27:12.114]  <debugvars>
[16:27:12.114]    // Pre-defined
[16:27:12.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:27:12.114]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:27:12.114]    __dp=0x00000000
[16:27:12.114]    __ap=0x00000000
[16:27:12.114]    __traceout=0x00000000      (Trace Disabled)
[16:27:12.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:12.115]    __FlashAddr=0x00000000
[16:27:12.115]    __FlashLen=0x00000000
[16:27:12.115]    __FlashArg=0x00000000
[16:27:12.115]    __FlashOp=0x00000000
[16:27:12.115]    __Result=0x00000000
[16:27:12.115]  </debugvars>
[16:27:12.115]  
[16:27:12.115]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:27:12.115]    <block atomic="false" info="">
[16:27:12.115]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:27:12.116]        // -> [isSWJ <= 0x00000001]
[16:27:12.116]      __var hasDormant = __protocol & 0x00020000;
[16:27:12.116]        // -> [hasDormant <= 0x00000000]
[16:27:12.116]      __var protType   = __protocol & 0x0000FFFF;
[16:27:12.116]        // -> [protType <= 0x00000002]
[16:27:12.116]    </block>
[16:27:12.116]    <control if="protType == 1" while="" timeout="0" info="">
[16:27:12.116]      // if-block "protType == 1"
[16:27:12.116]        // =>  FALSE
[16:27:12.116]      // skip if-block "protType == 1"
[16:27:12.116]    </control>
[16:27:12.116]    <control if="protType == 2" while="" timeout="0" info="">
[16:27:12.116]      // if-block "protType == 2"
[16:27:12.116]        // =>  TRUE
[16:27:12.116]      <control if="isSWJ" while="" timeout="0" info="">
[16:27:12.116]        // if-block "isSWJ"
[16:27:12.118]          // =>  TRUE
[16:27:12.118]        <control if="hasDormant" while="" timeout="0" info="">
[16:27:12.118]          // if-block "hasDormant"
[16:27:12.118]            // =>  FALSE
[16:27:12.118]          // skip if-block "hasDormant"
[16:27:12.118]        </control>
[16:27:12.118]        <control if="!hasDormant" while="" timeout="0" info="">
[16:27:12.118]          // if-block "!hasDormant"
[16:27:12.118]            // =>  TRUE
[16:27:12.118]          <block atomic="false" info="">
[16:27:12.118]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:27:12.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:12.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:27:12.122]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:27:12.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:27:12.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:12.124]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:27:12.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:27:12.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:27:12.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:12.127]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:27:12.128]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:27:12.128]          </block>
[16:27:12.128]          // end if-block "!hasDormant"
[16:27:12.128]        </control>
[16:27:12.128]        // end if-block "isSWJ"
[16:27:12.128]      </control>
[16:27:12.128]      <control if="!isSWJ" while="" timeout="0" info="">
[16:27:12.128]        // if-block "!isSWJ"
[16:27:12.128]          // =>  FALSE
[16:27:12.128]        // skip if-block "!isSWJ"
[16:27:12.128]      </control>
[16:27:12.128]      <block atomic="false" info="">
[16:27:12.128]        ReadDP(0x0);
[16:27:12.132]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:27:12.132]      </block>
[16:27:12.132]      // end if-block "protType == 2"
[16:27:12.132]    </control>
[16:27:12.132]  </sequence>
[16:27:12.132]  
[16:27:12.132]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:27:12.132]  
[16:27:12.132]  <debugvars>
[16:27:12.132]    // Pre-defined
[16:27:12.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:27:12.132]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:27:12.132]    __dp=0x00000000
[16:27:12.132]    __ap=0x00000000
[16:27:12.132]    __traceout=0x00000000      (Trace Disabled)
[16:27:12.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:12.132]    __FlashAddr=0x00000000
[16:27:12.132]    __FlashLen=0x00000000
[16:27:12.132]    __FlashArg=0x00000000
[16:27:12.132]    __FlashOp=0x00000000
[16:27:12.132]    __Result=0x00000000
[16:27:12.132]  </debugvars>
[16:27:12.132]  
[16:27:12.132]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:27:12.132]    <block atomic="false" info="">
[16:27:12.132]      __var SW_DP_ABORT       = 0x0;
[16:27:12.140]        // -> [SW_DP_ABORT <= 0x00000000]
[16:27:12.140]      __var DP_CTRL_STAT      = 0x4;
[16:27:12.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:27:12.140]      __var DP_SELECT         = 0x8;
[16:27:12.140]        // -> [DP_SELECT <= 0x00000008]
[16:27:12.140]      __var powered_down      = 0;
[16:27:12.140]        // -> [powered_down <= 0x00000000]
[16:27:12.140]      WriteDP(DP_SELECT, 0x00000000);
[16:27:12.140]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:12.140]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:27:12.140]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:27:12.140]        // -> [powered_down <= 0x00000001]
[16:27:12.140]    </block>
[16:27:12.140]    <control if="powered_down" while="" timeout="0" info="">
[16:27:12.140]      // if-block "powered_down"
[16:27:12.140]        // =>  TRUE
[16:27:12.140]      <block atomic="false" info="">
[16:27:12.140]        Message(0, "Debug/System power-up request sent");
[16:27:12.140]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:27:12.140]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:27:12.140]      </block>
[16:27:12.140]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:27:12.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:27:12.151]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:27:12.151]        // while-condition  =>  FALSE
[16:27:12.151]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:27:12.151]      </control>
[16:27:12.151]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:27:12.151]        // if-block "(__protocol & 0xFFFF) == 1"
[16:27:12.151]          // =>  FALSE
[16:27:12.151]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:27:12.151]      </control>
[16:27:12.151]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:27:12.151]        // if-block "(__protocol & 0xFFFF) == 2"
[16:27:12.151]          // =>  TRUE
[16:27:12.151]        <block atomic="false" info="">
[16:27:12.151]          Message(0, "executing SWD power up");
[16:27:12.151]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:27:12.151]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:27:12.151]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:27:12.151]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:27:12.151]        </block>
[16:27:12.151]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:27:12.151]      </control>
[16:27:12.151]      // end if-block "powered_down"
[16:27:12.151]    </control>
[16:27:12.151]    <block atomic="false" info="">
[16:27:12.151]      __var DEBUG_PORT_VAL    = 0;
[16:27:12.151]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:27:12.161]      __var ACCESS_POINT_VAL  = 0;
[16:27:12.161]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:27:12.161]      __ap = 1; 
[16:27:12.161]        // -> [__ap <= 0x00000001]
[16:27:12.161]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:27:12.161]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:27:12.161]      __ap = 4;
[16:27:12.161]        // -> [__ap <= 0x00000004]
[16:27:12.161]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:27:12.161]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:27:12.161]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:27:12.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:27:12.171]    </block>
[16:27:12.171]    <block atomic="false" info="">
[16:27:12.171]      __var nReset = 0x80;
[16:27:12.171]        // -> [nReset <= 0x00000080]
[16:27:12.171]      __var canReadPins = 0;
[16:27:12.171]        // -> [canReadPins <= 0x00000000]
[16:27:12.171]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:27:12.171]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:27:12.171]        // -> [canReadPins <= 0x00000001]
[16:27:12.171]    </block>
[16:27:12.171]    <control if="" while="1" timeout="200" info="">
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.171]      // while "1"  (timeout="200")
[16:27:12.171]      // while-condition  =>  TRUE
[16:27:12.181]      // while "1"  (timeout="200")
[16:27:12.181]      // while  =>  TIMEOUT
[16:27:12.181]      // end while "1"
[16:27:12.181]    </control>
[16:27:12.181]    <control if="canReadPins" while="" timeout="0" info="">
[16:27:12.181]      // if-block "canReadPins"
[16:27:12.181]        // =>  TRUE
[16:27:12.181]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:27:12.181]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:27:12.181]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:27:12.181]        // while-condition  =>  FALSE
[16:27:12.181]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:27:12.181]      </control>
[16:27:12.181]      // end if-block "canReadPins"
[16:27:12.181]    </control>
[16:27:12.181]    <control if="!canReadPins" while="" timeout="0" info="">
[16:27:12.181]      // if-block "!canReadPins"
[16:27:12.181]        // =>  FALSE
[16:27:12.181]      // skip if-block "!canReadPins"
[16:27:12.181]    </control>
[16:27:12.181]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:27:12.181]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:27:12.181]        // =>  TRUE
[16:27:12.181]      <block atomic="false" info="">
[16:27:12.181]        WriteAP(0x00, 0x190008);
[16:27:12.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:27:12.181]        WriteAP(0xF0, 0x01);
[16:27:12.181]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:27:12.181]      </block>
[16:27:12.181]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:27:12.181]    </control>
[16:27:12.181]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:27:12.181]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:27:12.191]        // =>  FALSE
[16:27:12.191]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:27:12.191]    </control>
[16:27:12.191]    <block atomic="false" info="">
[16:27:12.191]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:27:12.197]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:27:12.197]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:27:12.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:27:12.197]      __ap = 0; //lets make sure we reset the access point selection
[16:27:12.201]        // -> [__ap <= 0x00000000]
[16:27:12.201]    </block>
[16:27:12.201]  </sequence>
[16:27:12.201]  
[16:27:12.224]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:27:12.224]  
[16:27:12.224]  <debugvars>
[16:27:12.224]    // Pre-defined
[16:27:12.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:27:12.224]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:27:12.224]    __dp=0x00000000
[16:27:12.224]    __ap=0x00000000
[16:27:12.224]    __traceout=0x00000000      (Trace Disabled)
[16:27:12.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:12.224]    __FlashAddr=0x00000000
[16:27:12.224]    __FlashLen=0x00000000
[16:27:12.224]    __FlashArg=0x00000000
[16:27:12.224]    __FlashOp=0x00000000
[16:27:12.224]    __Result=0x00000000
[16:27:12.224]  </debugvars>
[16:27:12.224]  
[16:27:12.232]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:27:12.232]    <block atomic="false" info="">
[16:27:12.232]      __var deviceID = 0;
[16:27:12.232]        // -> [deviceID <= 0x00000000]
[16:27:12.232]      __var version = 0;
[16:27:12.232]        // -> [version <= 0x00000000]
[16:27:12.232]      __var partNum = 0;
[16:27:12.232]        // -> [partNum <= 0x00000000]
[16:27:12.232]      __var manuf = 0;
[16:27:12.232]        // -> [manuf <= 0x00000000]
[16:27:12.232]      __var isMSPM0G1X0X_G3X0X = 0;
[16:27:12.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:27:12.232]      __var isProduction = 0;
[16:27:12.232]        // -> [isProduction <= 0x00000000]
[16:27:12.232]      __var continueId = 0;
[16:27:12.232]        // -> [continueId <= 0x00000000]
[16:27:12.232]      deviceID =   Read32(0x41C40004);
[16:27:12.232]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:27:12.232]        // -> [deviceID <= 0x2BB8802F]
[16:27:12.232]      version = deviceID >> 28;
[16:27:12.232]        // -> [version <= 0x00000002]
[16:27:12.232]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:27:12.232]        // -> [partNum <= 0x0000BB88]
[16:27:12.232]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:27:12.232]        // -> [manuf <= 0x00000017]
[16:27:12.232]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:27:12.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:27:12.232]      isProduction = (version > 0);
[16:27:12.232]        // -> [isProduction <= 0x00000001]
[16:27:12.232]    </block>
[16:27:12.232]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:27:12.232]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:27:12.232]        // =>  FALSE
[16:27:12.232]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:27:12.232]    </control>
[16:27:12.232]    <control if="continueId == 4" while="" timeout="0" info="">
[16:27:12.232]      // if-block "continueId == 4"
[16:27:12.232]        // =>  FALSE
[16:27:12.232]      // skip if-block "continueId == 4"
[16:27:12.232]    </control>
[16:27:12.232]    <control if="!isProduction" while="" timeout="0" info="">
[16:27:12.232]      // if-block "!isProduction"
[16:27:12.232]        // =>  FALSE
[16:27:12.232]      // skip if-block "!isProduction"
[16:27:12.232]    </control>
[16:27:12.232]  </sequence>
[16:27:12.232]  
[16:29:01.025]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:29:01.025]  
[16:29:01.025]  <debugvars>
[16:29:01.025]    // Pre-defined
[16:29:01.025]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:01.025]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:01.025]    __dp=0x00000000
[16:29:01.025]    __ap=0x00000000
[16:29:01.025]    __traceout=0x00000000      (Trace Disabled)
[16:29:01.025]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:01.026]    __FlashAddr=0x00000000
[16:29:01.026]    __FlashLen=0x00000000
[16:29:01.026]    __FlashArg=0x00000000
[16:29:01.026]    __FlashOp=0x00000000
[16:29:01.026]    __Result=0x00000000
[16:29:01.027]  </debugvars>
[16:29:01.027]  
[16:29:01.027]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:29:01.027]    <block atomic="false" info="">
[16:29:01.027]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:29:01.027]        // -> [isSWJ <= 0x00000001]
[16:29:01.027]      __var hasDormant = __protocol & 0x00020000;
[16:29:01.027]        // -> [hasDormant <= 0x00000000]
[16:29:01.027]      __var protType   = __protocol & 0x0000FFFF;
[16:29:01.027]        // -> [protType <= 0x00000002]
[16:29:01.027]    </block>
[16:29:01.028]    <control if="protType == 1" while="" timeout="0" info="">
[16:29:01.028]      // if-block "protType == 1"
[16:29:01.028]        // =>  FALSE
[16:29:01.028]      // skip if-block "protType == 1"
[16:29:01.028]    </control>
[16:29:01.028]    <control if="protType == 2" while="" timeout="0" info="">
[16:29:01.028]      // if-block "protType == 2"
[16:29:01.028]        // =>  TRUE
[16:29:01.028]      <control if="isSWJ" while="" timeout="0" info="">
[16:29:01.028]        // if-block "isSWJ"
[16:29:01.029]          // =>  TRUE
[16:29:01.029]        <control if="hasDormant" while="" timeout="0" info="">
[16:29:01.029]          // if-block "hasDormant"
[16:29:01.029]            // =>  FALSE
[16:29:01.029]          // skip if-block "hasDormant"
[16:29:01.029]        </control>
[16:29:01.029]        <control if="!hasDormant" while="" timeout="0" info="">
[16:29:01.029]          // if-block "!hasDormant"
[16:29:01.029]            // =>  TRUE
[16:29:01.029]          <block atomic="false" info="">
[16:29:01.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:29:01.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:01.032]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:29:01.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:29:01.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:29:01.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:01.034]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:29:01.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:29:01.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:29:01.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:01.044]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:29:01.046]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:29:01.046]          </block>
[16:29:01.046]          // end if-block "!hasDormant"
[16:29:01.046]        </control>
[16:29:01.046]        // end if-block "isSWJ"
[16:29:01.046]      </control>
[16:29:01.046]      <control if="!isSWJ" while="" timeout="0" info="">
[16:29:01.046]        // if-block "!isSWJ"
[16:29:01.046]          // =>  FALSE
[16:29:01.046]        // skip if-block "!isSWJ"
[16:29:01.046]      </control>
[16:29:01.046]      <block atomic="false" info="">
[16:29:01.046]        ReadDP(0x0);
[16:29:01.046]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:29:01.046]      </block>
[16:29:01.046]      // end if-block "protType == 2"
[16:29:01.046]    </control>
[16:29:01.046]  </sequence>
[16:29:01.046]  
[16:29:01.055]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:29:01.055]  
[16:29:01.055]  <debugvars>
[16:29:01.055]    // Pre-defined
[16:29:01.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:01.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:01.055]    __dp=0x00000000
[16:29:01.055]    __ap=0x00000000
[16:29:01.055]    __traceout=0x00000000      (Trace Disabled)
[16:29:01.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:01.055]    __FlashAddr=0x00000000
[16:29:01.055]    __FlashLen=0x00000000
[16:29:01.055]    __FlashArg=0x00000000
[16:29:01.055]    __FlashOp=0x00000000
[16:29:01.055]    __Result=0x00000000
[16:29:01.055]  </debugvars>
[16:29:01.055]  
[16:29:01.055]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:29:01.055]    <block atomic="false" info="">
[16:29:01.055]      __var SW_DP_ABORT       = 0x0;
[16:29:01.055]        // -> [SW_DP_ABORT <= 0x00000000]
[16:29:01.055]      __var DP_CTRL_STAT      = 0x4;
[16:29:01.055]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:29:01.055]      __var DP_SELECT         = 0x8;
[16:29:01.055]        // -> [DP_SELECT <= 0x00000008]
[16:29:01.055]      __var powered_down      = 0;
[16:29:01.055]        // -> [powered_down <= 0x00000000]
[16:29:01.055]      WriteDP(DP_SELECT, 0x00000000);
[16:29:01.065]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:29:01.065]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:29:01.065]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:29:01.065]        // -> [powered_down <= 0x00000001]
[16:29:01.065]    </block>
[16:29:01.065]    <control if="powered_down" while="" timeout="0" info="">
[16:29:01.065]      // if-block "powered_down"
[16:29:01.065]        // =>  TRUE
[16:29:01.065]      <block atomic="false" info="">
[16:29:01.065]        Message(0, "Debug/System power-up request sent");
[16:29:01.075]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:29:01.076]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:29:01.076]      </block>
[16:29:01.076]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:29:01.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:29:01.086]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:29:01.086]        // while-condition  =>  FALSE
[16:29:01.086]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:29:01.086]      </control>
[16:29:01.086]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:29:01.086]        // if-block "(__protocol & 0xFFFF) == 1"
[16:29:01.086]          // =>  FALSE
[16:29:01.086]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:29:01.086]      </control>
[16:29:01.086]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:29:01.086]        // if-block "(__protocol & 0xFFFF) == 2"
[16:29:01.086]          // =>  TRUE
[16:29:01.086]        <block atomic="false" info="">
[16:29:01.086]          Message(0, "executing SWD power up");
[16:29:01.089]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:29:01.090]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:29:01.090]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:29:01.096]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:29:01.096]        </block>
[16:29:01.096]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:29:01.096]      </control>
[16:29:01.096]      // end if-block "powered_down"
[16:29:01.096]    </control>
[16:29:01.096]    <block atomic="false" info="">
[16:29:01.096]      __var DEBUG_PORT_VAL    = 0;
[16:29:01.104]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:29:01.104]      __var ACCESS_POINT_VAL  = 0;
[16:29:01.104]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:29:01.104]      __ap = 1; 
[16:29:01.104]        // -> [__ap <= 0x00000001]
[16:29:01.104]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:29:01.106]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:29:01.106]      __ap = 4;
[16:29:01.106]        // -> [__ap <= 0x00000004]
[16:29:01.106]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:01.112]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:29:01.112]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:29:01.112]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:01.114]    </block>
[16:29:01.114]    <block atomic="false" info="">
[16:29:01.114]      __var nReset = 0x80;
[16:29:01.114]        // -> [nReset <= 0x00000080]
[16:29:01.114]      __var canReadPins = 0;
[16:29:01.114]        // -> [canReadPins <= 0x00000000]
[16:29:01.114]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:29:01.115]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:29:01.115]        // -> [canReadPins <= 0x00000001]
[16:29:01.115]    </block>
[16:29:01.115]    <control if="" while="1" timeout="200" info="">
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.115]      // while "1"  (timeout="200")
[16:29:01.115]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.120]      // while "1"  (timeout="200")
[16:29:01.120]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.124]      // while "1"  (timeout="200")
[16:29:01.124]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.126]      // while "1"  (timeout="200")
[16:29:01.126]      // while-condition  =>  TRUE
[16:29:01.128]      // while "1"  (timeout="200")
[16:29:01.128]      // while  =>  TIMEOUT
[16:29:01.128]      // end while "1"
[16:29:01.128]    </control>
[16:29:01.128]    <control if="canReadPins" while="" timeout="0" info="">
[16:29:01.128]      // if-block "canReadPins"
[16:29:01.128]        // =>  TRUE
[16:29:01.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:29:01.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:29:01.130]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:29:01.130]        // while-condition  =>  FALSE
[16:29:01.130]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:29:01.130]      </control>
[16:29:01.130]      // end if-block "canReadPins"
[16:29:01.130]    </control>
[16:29:01.130]    <control if="!canReadPins" while="" timeout="0" info="">
[16:29:01.131]      // if-block "!canReadPins"
[16:29:01.131]        // =>  FALSE
[16:29:01.131]      // skip if-block "!canReadPins"
[16:29:01.131]    </control>
[16:29:01.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:29:01.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:01.131]        // =>  TRUE
[16:29:01.131]      <block atomic="false" info="">
[16:29:01.131]        WriteAP(0x00, 0x190008);
[16:29:01.136]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:01.136]        WriteAP(0xF0, 0x01);
[16:29:01.146]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:01.146]      </block>
[16:29:01.146]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:01.146]    </control>
[16:29:01.146]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:29:01.146]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:01.147]        // =>  FALSE
[16:29:01.147]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:01.147]    </control>
[16:29:01.147]    <block atomic="false" info="">
[16:29:01.147]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:01.151]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:29:01.151]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:29:01.151]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:01.154]      __ap = 0; //lets make sure we reset the access point selection
[16:29:01.154]        // -> [__ap <= 0x00000000]
[16:29:01.154]    </block>
[16:29:01.154]  </sequence>
[16:29:01.154]  
[16:29:01.192]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:29:01.192]  
[16:29:01.192]  <debugvars>
[16:29:01.192]    // Pre-defined
[16:29:01.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:01.192]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:01.192]    __dp=0x00000000
[16:29:01.192]    __ap=0x00000000
[16:29:01.192]    __traceout=0x00000000      (Trace Disabled)
[16:29:01.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:01.196]    __FlashAddr=0x00000000
[16:29:01.196]    __FlashLen=0x00000000
[16:29:01.196]    __FlashArg=0x00000000
[16:29:01.196]    __FlashOp=0x00000000
[16:29:01.196]    __Result=0x00000000
[16:29:01.196]  </debugvars>
[16:29:01.196]  
[16:29:01.196]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:29:01.196]    <block atomic="false" info="">
[16:29:01.197]      __var deviceID = 0;
[16:29:01.198]        // -> [deviceID <= 0x00000000]
[16:29:01.198]      __var version = 0;
[16:29:01.198]        // -> [version <= 0x00000000]
[16:29:01.198]      __var partNum = 0;
[16:29:01.198]        // -> [partNum <= 0x00000000]
[16:29:01.198]      __var manuf = 0;
[16:29:01.198]        // -> [manuf <= 0x00000000]
[16:29:01.198]      __var isMSPM0G1X0X_G3X0X = 0;
[16:29:01.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:29:01.198]      __var isProduction = 0;
[16:29:01.198]        // -> [isProduction <= 0x00000000]
[16:29:01.198]      __var continueId = 0;
[16:29:01.198]        // -> [continueId <= 0x00000000]
[16:29:01.198]      deviceID =   Read32(0x41C40004);
[16:29:01.205]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:29:01.205]        // -> [deviceID <= 0x2BB8802F]
[16:29:01.205]      version = deviceID >> 28;
[16:29:01.205]        // -> [version <= 0x00000002]
[16:29:01.207]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:29:01.207]        // -> [partNum <= 0x0000BB88]
[16:29:01.207]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:29:01.207]        // -> [manuf <= 0x00000017]
[16:29:01.207]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:29:01.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:29:01.207]      isProduction = (version > 0);
[16:29:01.207]        // -> [isProduction <= 0x00000001]
[16:29:01.207]    </block>
[16:29:01.207]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:29:01.207]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:29:01.209]        // =>  FALSE
[16:29:01.209]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:29:01.209]    </control>
[16:29:01.209]    <control if="continueId == 4" while="" timeout="0" info="">
[16:29:01.209]      // if-block "continueId == 4"
[16:29:01.209]        // =>  FALSE
[16:29:01.209]      // skip if-block "continueId == 4"
[16:29:01.209]    </control>
[16:29:01.209]    <control if="!isProduction" while="" timeout="0" info="">
[16:29:01.209]      // if-block "!isProduction"
[16:29:01.209]        // =>  FALSE
[16:29:01.209]      // skip if-block "!isProduction"
[16:29:01.209]    </control>
[16:29:01.209]  </sequence>
[16:29:01.209]  
[16:29:34.629]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:29:34.629]  
[16:29:34.642]  <debugvars>
[16:29:34.642]    // Pre-defined
[16:29:34.642]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:34.642]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:34.642]    __dp=0x00000000
[16:29:34.642]    __ap=0x00000000
[16:29:34.642]    __traceout=0x00000000      (Trace Disabled)
[16:29:34.642]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:34.642]    __FlashAddr=0x00000000
[16:29:34.642]    __FlashLen=0x00000000
[16:29:34.642]    __FlashArg=0x00000000
[16:29:34.642]    __FlashOp=0x00000000
[16:29:34.642]    __Result=0x00000000
[16:29:34.642]  </debugvars>
[16:29:34.642]  
[16:29:34.642]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:29:34.642]    <block atomic="false" info="">
[16:29:34.642]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:29:34.642]        // -> [isSWJ <= 0x00000001]
[16:29:34.642]      __var hasDormant = __protocol & 0x00020000;
[16:29:34.642]        // -> [hasDormant <= 0x00000000]
[16:29:34.642]      __var protType   = __protocol & 0x0000FFFF;
[16:29:34.642]        // -> [protType <= 0x00000002]
[16:29:34.642]    </block>
[16:29:34.642]    <control if="protType == 1" while="" timeout="0" info="">
[16:29:34.642]      // if-block "protType == 1"
[16:29:34.642]        // =>  FALSE
[16:29:34.642]      // skip if-block "protType == 1"
[16:29:34.642]    </control>
[16:29:34.642]    <control if="protType == 2" while="" timeout="0" info="">
[16:29:34.642]      // if-block "protType == 2"
[16:29:34.642]        // =>  TRUE
[16:29:34.642]      <control if="isSWJ" while="" timeout="0" info="">
[16:29:34.642]        // if-block "isSWJ"
[16:29:34.642]          // =>  TRUE
[16:29:34.642]        <control if="hasDormant" while="" timeout="0" info="">
[16:29:34.642]          // if-block "hasDormant"
[16:29:34.642]            // =>  FALSE
[16:29:34.642]          // skip if-block "hasDormant"
[16:29:34.642]        </control>
[16:29:34.642]        <control if="!hasDormant" while="" timeout="0" info="">
[16:29:34.642]          // if-block "!hasDormant"
[16:29:34.642]            // =>  TRUE
[16:29:34.642]          <block atomic="false" info="">
[16:29:34.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:29:34.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:34.649]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:29:34.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:29:34.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:29:34.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:34.649]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:29:34.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:29:34.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:29:34.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:34.659]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:29:34.659]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:29:34.659]          </block>
[16:29:34.659]          // end if-block "!hasDormant"
[16:29:34.659]        </control>
[16:29:34.659]        // end if-block "isSWJ"
[16:29:34.659]      </control>
[16:29:34.659]      <control if="!isSWJ" while="" timeout="0" info="">
[16:29:34.659]        // if-block "!isSWJ"
[16:29:34.659]          // =>  FALSE
[16:29:34.659]        // skip if-block "!isSWJ"
[16:29:34.659]      </control>
[16:29:34.659]      <block atomic="false" info="">
[16:29:34.659]        ReadDP(0x0);
[16:29:34.669]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:29:34.669]      </block>
[16:29:34.669]      // end if-block "protType == 2"
[16:29:34.669]    </control>
[16:29:34.669]  </sequence>
[16:29:34.669]  
[16:29:34.669]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:29:34.669]  
[16:29:34.669]  <debugvars>
[16:29:34.669]    // Pre-defined
[16:29:34.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:34.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:34.669]    __dp=0x00000000
[16:29:34.669]    __ap=0x00000000
[16:29:34.669]    __traceout=0x00000000      (Trace Disabled)
[16:29:34.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:34.669]    __FlashAddr=0x00000000
[16:29:34.669]    __FlashLen=0x00000000
[16:29:34.669]    __FlashArg=0x00000000
[16:29:34.669]    __FlashOp=0x00000000
[16:29:34.669]    __Result=0x00000000
[16:29:34.669]  </debugvars>
[16:29:34.669]  
[16:29:34.669]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:29:34.669]    <block atomic="false" info="">
[16:29:34.669]      __var SW_DP_ABORT       = 0x0;
[16:29:34.669]        // -> [SW_DP_ABORT <= 0x00000000]
[16:29:34.669]      __var DP_CTRL_STAT      = 0x4;
[16:29:34.669]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:29:34.669]      __var DP_SELECT         = 0x8;
[16:29:34.669]        // -> [DP_SELECT <= 0x00000008]
[16:29:34.669]      __var powered_down      = 0;
[16:29:34.669]        // -> [powered_down <= 0x00000000]
[16:29:34.669]      WriteDP(DP_SELECT, 0x00000000);
[16:29:34.679]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:29:34.679]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:29:34.679]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:29:34.689]        // -> [powered_down <= 0x00000001]
[16:29:34.689]    </block>
[16:29:34.689]    <control if="powered_down" while="" timeout="0" info="">
[16:29:34.689]      // if-block "powered_down"
[16:29:34.689]        // =>  TRUE
[16:29:34.689]      <block atomic="false" info="">
[16:29:34.689]        Message(0, "Debug/System power-up request sent");
[16:29:34.689]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:29:34.689]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:29:34.689]      </block>
[16:29:34.689]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:29:34.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:29:34.689]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:29:34.689]        // while-condition  =>  FALSE
[16:29:34.689]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:29:34.689]      </control>
[16:29:34.689]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:29:34.689]        // if-block "(__protocol & 0xFFFF) == 1"
[16:29:34.689]          // =>  FALSE
[16:29:34.689]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:29:34.689]      </control>
[16:29:34.689]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:29:34.689]        // if-block "(__protocol & 0xFFFF) == 2"
[16:29:34.689]          // =>  TRUE
[16:29:34.689]        <block atomic="false" info="">
[16:29:34.689]          Message(0, "executing SWD power up");
[16:29:34.689]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:29:34.702]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:29:34.702]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:29:34.704]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:29:34.705]        </block>
[16:29:34.705]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:29:34.705]      </control>
[16:29:34.705]      // end if-block "powered_down"
[16:29:34.705]    </control>
[16:29:34.705]    <block atomic="false" info="">
[16:29:34.705]      __var DEBUG_PORT_VAL    = 0;
[16:29:34.705]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:29:34.705]      __var ACCESS_POINT_VAL  = 0;
[16:29:34.705]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:29:34.705]      __ap = 1; 
[16:29:34.705]        // -> [__ap <= 0x00000001]
[16:29:34.705]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:29:34.720]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:29:34.720]      __ap = 4;
[16:29:34.720]        // -> [__ap <= 0x00000004]
[16:29:34.720]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:34.740]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:29:34.740]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:29:34.740]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:34.743]    </block>
[16:29:34.743]    <block atomic="false" info="">
[16:29:34.743]      __var nReset = 0x80;
[16:29:34.743]        // -> [nReset <= 0x00000080]
[16:29:34.743]      __var canReadPins = 0;
[16:29:34.743]        // -> [canReadPins <= 0x00000000]
[16:29:34.743]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:29:34.748]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:29:34.748]        // -> [canReadPins <= 0x00000001]
[16:29:34.748]    </block>
[16:29:34.748]    <control if="" while="1" timeout="200" info="">
[16:29:34.748]      // while "1"  (timeout="200")
[16:29:34.748]      // while-condition  =>  TRUE
[16:29:34.748]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.750]      // while "1"  (timeout="200")
[16:29:34.750]      // while-condition  =>  TRUE
[16:29:34.760]      // while "1"  (timeout="200")
[16:29:34.760]      // while  =>  TIMEOUT
[16:29:34.760]      // end while "1"
[16:29:34.760]    </control>
[16:29:34.760]    <control if="canReadPins" while="" timeout="0" info="">
[16:29:34.760]      // if-block "canReadPins"
[16:29:34.760]        // =>  TRUE
[16:29:34.760]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:29:34.760]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:29:34.760]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:29:34.760]        // while-condition  =>  FALSE
[16:29:34.760]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:29:34.760]      </control>
[16:29:34.760]      // end if-block "canReadPins"
[16:29:34.760]    </control>
[16:29:34.760]    <control if="!canReadPins" while="" timeout="0" info="">
[16:29:34.760]      // if-block "!canReadPins"
[16:29:34.760]        // =>  FALSE
[16:29:34.760]      // skip if-block "!canReadPins"
[16:29:34.760]    </control>
[16:29:34.760]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:29:34.760]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:34.760]        // =>  TRUE
[16:29:34.760]      <block atomic="false" info="">
[16:29:34.760]        WriteAP(0x00, 0x190008);
[16:29:34.760]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:34.760]        WriteAP(0xF0, 0x01);
[16:29:34.770]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:34.770]      </block>
[16:29:34.770]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:34.770]    </control>
[16:29:34.770]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:29:34.770]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:34.770]        // =>  FALSE
[16:29:34.770]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:34.770]    </control>
[16:29:34.770]    <block atomic="false" info="">
[16:29:34.770]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:34.780]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:29:34.780]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:29:34.780]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:34.790]      __ap = 0; //lets make sure we reset the access point selection
[16:29:34.790]        // -> [__ap <= 0x00000000]
[16:29:34.790]    </block>
[16:29:34.790]  </sequence>
[16:29:34.790]  
[16:29:34.821]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:29:34.821]  
[16:29:34.821]  <debugvars>
[16:29:34.821]    // Pre-defined
[16:29:34.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:34.821]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:34.821]    __dp=0x00000000
[16:29:34.821]    __ap=0x00000000
[16:29:34.821]    __traceout=0x00000000      (Trace Disabled)
[16:29:34.821]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:34.821]    __FlashAddr=0x00000000
[16:29:34.821]    __FlashLen=0x00000000
[16:29:34.821]    __FlashArg=0x00000000
[16:29:34.821]    __FlashOp=0x00000000
[16:29:34.821]    __Result=0x00000000
[16:29:34.821]  </debugvars>
[16:29:34.821]  
[16:29:34.821]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:29:34.821]    <block atomic="false" info="">
[16:29:34.821]      __var deviceID = 0;
[16:29:34.821]        // -> [deviceID <= 0x00000000]
[16:29:34.821]      __var version = 0;
[16:29:34.821]        // -> [version <= 0x00000000]
[16:29:34.821]      __var partNum = 0;
[16:29:34.821]        // -> [partNum <= 0x00000000]
[16:29:34.821]      __var manuf = 0;
[16:29:34.821]        // -> [manuf <= 0x00000000]
[16:29:34.821]      __var isMSPM0G1X0X_G3X0X = 0;
[16:29:34.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:29:34.821]      __var isProduction = 0;
[16:29:34.821]        // -> [isProduction <= 0x00000000]
[16:29:34.821]      __var continueId = 0;
[16:29:34.821]        // -> [continueId <= 0x00000000]
[16:29:34.821]      deviceID =   Read32(0x41C40004);
[16:29:34.841]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:29:34.841]        // -> [deviceID <= 0x2BB8802F]
[16:29:34.841]      version = deviceID >> 28;
[16:29:34.851]        // -> [version <= 0x00000002]
[16:29:34.851]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:29:34.851]        // -> [partNum <= 0x0000BB88]
[16:29:34.851]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:29:34.852]        // -> [manuf <= 0x00000017]
[16:29:34.852]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:29:34.852]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:29:34.852]      isProduction = (version > 0);
[16:29:34.852]        // -> [isProduction <= 0x00000001]
[16:29:34.852]    </block>
[16:29:34.852]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:29:34.852]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:29:34.852]        // =>  FALSE
[16:29:34.852]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:29:34.852]    </control>
[16:29:34.852]    <control if="continueId == 4" while="" timeout="0" info="">
[16:29:34.852]      // if-block "continueId == 4"
[16:29:34.852]        // =>  FALSE
[16:29:34.852]      // skip if-block "continueId == 4"
[16:29:34.852]    </control>
[16:29:34.852]    <control if="!isProduction" while="" timeout="0" info="">
[16:29:34.852]      // if-block "!isProduction"
[16:29:34.852]        // =>  FALSE
[16:29:34.852]      // skip if-block "!isProduction"
[16:29:34.852]    </control>
[16:29:34.852]  </sequence>
[16:29:34.852]  
[16:30:24.343]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:30:24.343]  
[16:30:24.354]  <debugvars>
[16:30:24.354]    // Pre-defined
[16:30:24.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:24.354]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:24.354]    __dp=0x00000000
[16:30:24.354]    __ap=0x00000000
[16:30:24.354]    __traceout=0x00000000      (Trace Disabled)
[16:30:24.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:24.354]    __FlashAddr=0x00000000
[16:30:24.354]    __FlashLen=0x00000000
[16:30:24.354]    __FlashArg=0x00000000
[16:30:24.354]    __FlashOp=0x00000000
[16:30:24.354]    __Result=0x00000000
[16:30:24.354]  </debugvars>
[16:30:24.354]  
[16:30:24.354]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:30:24.354]    <block atomic="false" info="">
[16:30:24.354]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:30:24.354]        // -> [isSWJ <= 0x00000001]
[16:30:24.354]      __var hasDormant = __protocol & 0x00020000;
[16:30:24.354]        // -> [hasDormant <= 0x00000000]
[16:30:24.354]      __var protType   = __protocol & 0x0000FFFF;
[16:30:24.354]        // -> [protType <= 0x00000002]
[16:30:24.354]    </block>
[16:30:24.354]    <control if="protType == 1" while="" timeout="0" info="">
[16:30:24.354]      // if-block "protType == 1"
[16:30:24.354]        // =>  FALSE
[16:30:24.354]      // skip if-block "protType == 1"
[16:30:24.354]    </control>
[16:30:24.354]    <control if="protType == 2" while="" timeout="0" info="">
[16:30:24.354]      // if-block "protType == 2"
[16:30:24.354]        // =>  TRUE
[16:30:24.354]      <control if="isSWJ" while="" timeout="0" info="">
[16:30:24.354]        // if-block "isSWJ"
[16:30:24.354]          // =>  TRUE
[16:30:24.354]        <control if="hasDormant" while="" timeout="0" info="">
[16:30:24.354]          // if-block "hasDormant"
[16:30:24.354]            // =>  FALSE
[16:30:24.354]          // skip if-block "hasDormant"
[16:30:24.354]        </control>
[16:30:24.354]        <control if="!hasDormant" while="" timeout="0" info="">
[16:30:24.354]          // if-block "!hasDormant"
[16:30:24.354]            // =>  TRUE
[16:30:24.354]          <block atomic="false" info="">
[16:30:24.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:30:24.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:24.354]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:30:24.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:30:24.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:30:24.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:24.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:30:24.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:30:24.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:30:24.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:24.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:30:24.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:30:24.373]          </block>
[16:30:24.373]          // end if-block "!hasDormant"
[16:30:24.373]        </control>
[16:30:24.373]        // end if-block "isSWJ"
[16:30:24.373]      </control>
[16:30:24.373]      <control if="!isSWJ" while="" timeout="0" info="">
[16:30:24.373]        // if-block "!isSWJ"
[16:30:24.373]          // =>  FALSE
[16:30:24.373]        // skip if-block "!isSWJ"
[16:30:24.373]      </control>
[16:30:24.373]      <block atomic="false" info="">
[16:30:24.373]        ReadDP(0x0);
[16:30:24.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:30:24.373]      </block>
[16:30:24.373]      // end if-block "protType == 2"
[16:30:24.373]    </control>
[16:30:24.373]  </sequence>
[16:30:24.373]  
[16:30:24.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:30:24.383]  
[16:30:24.383]  <debugvars>
[16:30:24.383]    // Pre-defined
[16:30:24.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:24.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:24.383]    __dp=0x00000000
[16:30:24.383]    __ap=0x00000000
[16:30:24.383]    __traceout=0x00000000      (Trace Disabled)
[16:30:24.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:24.383]    __FlashAddr=0x00000000
[16:30:24.383]    __FlashLen=0x00000000
[16:30:24.383]    __FlashArg=0x00000000
[16:30:24.383]    __FlashOp=0x00000000
[16:30:24.383]    __Result=0x00000000
[16:30:24.383]  </debugvars>
[16:30:24.383]  
[16:30:24.383]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:30:24.383]    <block atomic="false" info="">
[16:30:24.383]      __var SW_DP_ABORT       = 0x0;
[16:30:24.383]        // -> [SW_DP_ABORT <= 0x00000000]
[16:30:24.383]      __var DP_CTRL_STAT      = 0x4;
[16:30:24.383]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:30:24.383]      __var DP_SELECT         = 0x8;
[16:30:24.383]        // -> [DP_SELECT <= 0x00000008]
[16:30:24.383]      __var powered_down      = 0;
[16:30:24.383]        // -> [powered_down <= 0x00000000]
[16:30:24.383]      WriteDP(DP_SELECT, 0x00000000);
[16:30:24.383]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:30:24.383]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:30:24.383]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:30:24.383]        // -> [powered_down <= 0x00000001]
[16:30:24.383]    </block>
[16:30:24.383]    <control if="powered_down" while="" timeout="0" info="">
[16:30:24.383]      // if-block "powered_down"
[16:30:24.383]        // =>  TRUE
[16:30:24.383]      <block atomic="false" info="">
[16:30:24.383]        Message(0, "Debug/System power-up request sent");
[16:30:24.393]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:30:24.393]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:30:24.393]      </block>
[16:30:24.393]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:30:24.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:30:24.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:30:24.393]        // while-condition  =>  FALSE
[16:30:24.393]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:30:24.393]      </control>
[16:30:24.393]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:30:24.393]        // if-block "(__protocol & 0xFFFF) == 1"
[16:30:24.393]          // =>  FALSE
[16:30:24.393]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:30:24.393]      </control>
[16:30:24.393]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:30:24.393]        // if-block "(__protocol & 0xFFFF) == 2"
[16:30:24.393]          // =>  TRUE
[16:30:24.393]        <block atomic="false" info="">
[16:30:24.393]          Message(0, "executing SWD power up");
[16:30:24.393]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:30:24.403]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:30:24.403]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:30:24.413]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:30:24.413]        </block>
[16:30:24.413]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:30:24.413]      </control>
[16:30:24.413]      // end if-block "powered_down"
[16:30:24.413]    </control>
[16:30:24.413]    <block atomic="false" info="">
[16:30:24.413]      __var DEBUG_PORT_VAL    = 0;
[16:30:24.413]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:30:24.413]      __var ACCESS_POINT_VAL  = 0;
[16:30:24.413]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:30:24.413]      __ap = 1; 
[16:30:24.413]        // -> [__ap <= 0x00000001]
[16:30:24.413]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:30:24.423]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:30:24.423]      __ap = 4;
[16:30:24.423]        // -> [__ap <= 0x00000004]
[16:30:24.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:30:24.423]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:30:24.423]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:30:24.423]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:30:24.423]    </block>
[16:30:24.423]    <block atomic="false" info="">
[16:30:24.423]      __var nReset = 0x80;
[16:30:24.423]        // -> [nReset <= 0x00000080]
[16:30:24.423]      __var canReadPins = 0;
[16:30:24.423]        // -> [canReadPins <= 0x00000000]
[16:30:24.433]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:30:24.444]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:30:24.444]        // -> [canReadPins <= 0x00000001]
[16:30:24.444]    </block>
[16:30:24.444]    <control if="" while="1" timeout="200" info="">
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.444]      // while-condition  =>  TRUE
[16:30:24.444]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.454]      // while "1"  (timeout="200")
[16:30:24.454]      // while-condition  =>  TRUE
[16:30:24.464]      // while "1"  (timeout="200")
[16:30:24.464]      // while  =>  TIMEOUT
[16:30:24.464]      // end while "1"
[16:30:24.464]    </control>
[16:30:24.464]    <control if="canReadPins" while="" timeout="0" info="">
[16:30:24.464]      // if-block "canReadPins"
[16:30:24.464]        // =>  TRUE
[16:30:24.464]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:30:24.464]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:30:24.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:30:24.474]        // while-condition  =>  FALSE
[16:30:24.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:30:24.474]      </control>
[16:30:24.474]      // end if-block "canReadPins"
[16:30:24.474]    </control>
[16:30:24.474]    <control if="!canReadPins" while="" timeout="0" info="">
[16:30:24.474]      // if-block "!canReadPins"
[16:30:24.474]        // =>  FALSE
[16:30:24.474]      // skip if-block "!canReadPins"
[16:30:24.474]    </control>
[16:30:24.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:30:24.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:30:24.474]        // =>  TRUE
[16:30:24.474]      <block atomic="false" info="">
[16:30:24.474]        WriteAP(0x00, 0x190008);
[16:30:24.474]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:30:24.474]        WriteAP(0xF0, 0x01);
[16:30:24.484]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:30:24.484]      </block>
[16:30:24.484]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:30:24.484]    </control>
[16:30:24.484]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:30:24.484]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:30:24.484]        // =>  FALSE
[16:30:24.484]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:30:24.484]    </control>
[16:30:24.484]    <block atomic="false" info="">
[16:30:24.484]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:30:24.494]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:30:24.494]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:30:24.494]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:30:24.494]      __ap = 0; //lets make sure we reset the access point selection
[16:30:24.494]        // -> [__ap <= 0x00000000]
[16:30:24.494]    </block>
[16:30:24.494]  </sequence>
[16:30:24.494]  
[16:30:24.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:30:24.534]  
[16:30:24.544]  <debugvars>
[16:30:24.544]    // Pre-defined
[16:30:24.544]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:24.544]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:24.544]    __dp=0x00000000
[16:30:24.544]    __ap=0x00000000
[16:30:24.544]    __traceout=0x00000000      (Trace Disabled)
[16:30:24.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:24.544]    __FlashAddr=0x00000000
[16:30:24.544]    __FlashLen=0x00000000
[16:30:24.544]    __FlashArg=0x00000000
[16:30:24.544]    __FlashOp=0x00000000
[16:30:24.544]    __Result=0x00000000
[16:30:24.544]  </debugvars>
[16:30:24.544]  
[16:30:24.544]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:30:24.544]    <block atomic="false" info="">
[16:30:24.544]      __var deviceID = 0;
[16:30:24.544]        // -> [deviceID <= 0x00000000]
[16:30:24.544]      __var version = 0;
[16:30:24.544]        // -> [version <= 0x00000000]
[16:30:24.544]      __var partNum = 0;
[16:30:24.544]        // -> [partNum <= 0x00000000]
[16:30:24.544]      __var manuf = 0;
[16:30:24.544]        // -> [manuf <= 0x00000000]
[16:30:24.544]      __var isMSPM0G1X0X_G3X0X = 0;
[16:30:24.544]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:30:24.544]      __var isProduction = 0;
[16:30:24.544]        // -> [isProduction <= 0x00000000]
[16:30:24.544]      __var continueId = 0;
[16:30:24.544]        // -> [continueId <= 0x00000000]
[16:30:24.544]      deviceID =   Read32(0x41C40004);
[16:30:24.564]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:30:24.564]        // -> [deviceID <= 0x2BB8802F]
[16:30:24.564]      version = deviceID >> 28;
[16:30:24.564]        // -> [version <= 0x00000002]
[16:30:24.564]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:30:24.564]        // -> [partNum <= 0x0000BB88]
[16:30:24.564]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:30:24.564]        // -> [manuf <= 0x00000017]
[16:30:24.564]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:30:24.564]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:30:24.564]      isProduction = (version > 0);
[16:30:24.564]        // -> [isProduction <= 0x00000001]
[16:30:24.564]    </block>
[16:30:24.564]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:30:24.564]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:30:24.564]        // =>  FALSE
[16:30:24.564]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:30:24.564]    </control>
[16:30:24.564]    <control if="continueId == 4" while="" timeout="0" info="">
[16:30:24.564]      // if-block "continueId == 4"
[16:30:24.564]        // =>  FALSE
[16:30:24.564]      // skip if-block "continueId == 4"
[16:30:24.564]    </control>
[16:30:24.564]    <control if="!isProduction" while="" timeout="0" info="">
[16:30:24.564]      // if-block "!isProduction"
[16:30:24.564]        // =>  FALSE
[16:30:24.564]      // skip if-block "!isProduction"
[16:30:24.564]    </control>
[16:30:24.564]  </sequence>
[16:30:24.564]  
[16:31:30.175]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:31:30.175]  
[16:31:30.188]  <debugvars>
[16:31:30.188]    // Pre-defined
[16:31:30.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:30.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:30.188]    __dp=0x00000000
[16:31:30.188]    __ap=0x00000000
[16:31:30.188]    __traceout=0x00000000      (Trace Disabled)
[16:31:30.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:30.188]    __FlashAddr=0x00000000
[16:31:30.188]    __FlashLen=0x00000000
[16:31:30.188]    __FlashArg=0x00000000
[16:31:30.188]    __FlashOp=0x00000000
[16:31:30.188]    __Result=0x00000000
[16:31:30.188]  </debugvars>
[16:31:30.188]  
[16:31:30.188]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:31:30.188]    <block atomic="false" info="">
[16:31:30.189]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:31:30.189]        // -> [isSWJ <= 0x00000001]
[16:31:30.189]      __var hasDormant = __protocol & 0x00020000;
[16:31:30.189]        // -> [hasDormant <= 0x00000000]
[16:31:30.189]      __var protType   = __protocol & 0x0000FFFF;
[16:31:30.190]        // -> [protType <= 0x00000002]
[16:31:30.190]    </block>
[16:31:30.190]    <control if="protType == 1" while="" timeout="0" info="">
[16:31:30.190]      // if-block "protType == 1"
[16:31:30.190]        // =>  FALSE
[16:31:30.190]      // skip if-block "protType == 1"
[16:31:30.190]    </control>
[16:31:30.190]    <control if="protType == 2" while="" timeout="0" info="">
[16:31:30.190]      // if-block "protType == 2"
[16:31:30.190]        // =>  TRUE
[16:31:30.190]      <control if="isSWJ" while="" timeout="0" info="">
[16:31:30.190]        // if-block "isSWJ"
[16:31:30.190]          // =>  TRUE
[16:31:30.190]        <control if="hasDormant" while="" timeout="0" info="">
[16:31:30.190]          // if-block "hasDormant"
[16:31:30.191]            // =>  FALSE
[16:31:30.191]          // skip if-block "hasDormant"
[16:31:30.191]        </control>
[16:31:30.191]        <control if="!hasDormant" while="" timeout="0" info="">
[16:31:30.191]          // if-block "!hasDormant"
[16:31:30.191]            // =>  TRUE
[16:31:30.191]          <block atomic="false" info="">
[16:31:30.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:31:30.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:30.196]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:31:30.202]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:31:30.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:31:30.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:30.202]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:31:30.202]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:31:30.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:31:30.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:30.212]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:31:30.217]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:31:30.217]          </block>
[16:31:30.217]          // end if-block "!hasDormant"
[16:31:30.217]        </control>
[16:31:30.217]        // end if-block "isSWJ"
[16:31:30.217]      </control>
[16:31:30.217]      <control if="!isSWJ" while="" timeout="0" info="">
[16:31:30.217]        // if-block "!isSWJ"
[16:31:30.217]          // =>  FALSE
[16:31:30.217]        // skip if-block "!isSWJ"
[16:31:30.217]      </control>
[16:31:30.217]      <block atomic="false" info="">
[16:31:30.217]        ReadDP(0x0);
[16:31:30.223]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:31:30.223]      </block>
[16:31:30.223]      // end if-block "protType == 2"
[16:31:30.224]    </control>
[16:31:30.224]  </sequence>
[16:31:30.224]  
[16:31:30.232]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:31:30.232]  
[16:31:30.233]  <debugvars>
[16:31:30.233]    // Pre-defined
[16:31:30.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:30.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:30.233]    __dp=0x00000000
[16:31:30.233]    __ap=0x00000000
[16:31:30.233]    __traceout=0x00000000      (Trace Disabled)
[16:31:30.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:30.234]    __FlashAddr=0x00000000
[16:31:30.234]    __FlashLen=0x00000000
[16:31:30.234]    __FlashArg=0x00000000
[16:31:30.234]    __FlashOp=0x00000000
[16:31:30.234]    __Result=0x00000000
[16:31:30.234]  </debugvars>
[16:31:30.234]  
[16:31:30.234]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:31:30.234]    <block atomic="false" info="">
[16:31:30.234]      __var SW_DP_ABORT       = 0x0;
[16:31:30.234]        // -> [SW_DP_ABORT <= 0x00000000]
[16:31:30.235]      __var DP_CTRL_STAT      = 0x4;
[16:31:30.235]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:31:30.235]      __var DP_SELECT         = 0x8;
[16:31:30.235]        // -> [DP_SELECT <= 0x00000008]
[16:31:30.235]      __var powered_down      = 0;
[16:31:30.235]        // -> [powered_down <= 0x00000000]
[16:31:30.235]      WriteDP(DP_SELECT, 0x00000000);
[16:31:30.236]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:31:30.237]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:31:30.237]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:31:30.237]        // -> [powered_down <= 0x00000001]
[16:31:30.237]    </block>
[16:31:30.237]    <control if="powered_down" while="" timeout="0" info="">
[16:31:30.237]      // if-block "powered_down"
[16:31:30.237]        // =>  TRUE
[16:31:30.237]      <block atomic="false" info="">
[16:31:30.237]        Message(0, "Debug/System power-up request sent");
[16:31:30.242]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:31:30.244]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:31:30.244]      </block>
[16:31:30.244]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:31:30.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:31:30.244]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:31:30.244]        // while-condition  =>  FALSE
[16:31:30.244]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:31:30.244]      </control>
[16:31:30.244]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:31:30.244]        // if-block "(__protocol & 0xFFFF) == 1"
[16:31:30.244]          // =>  FALSE
[16:31:30.244]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:31:30.244]      </control>
[16:31:30.244]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:31:30.244]        // if-block "(__protocol & 0xFFFF) == 2"
[16:31:30.244]          // =>  TRUE
[16:31:30.244]        <block atomic="false" info="">
[16:31:30.244]          Message(0, "executing SWD power up");
[16:31:30.244]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:31:30.251]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:31:30.251]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:31:30.253]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:31:30.253]        </block>
[16:31:30.253]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:31:30.253]      </control>
[16:31:30.253]      // end if-block "powered_down"
[16:31:30.253]    </control>
[16:31:30.253]    <block atomic="false" info="">
[16:31:30.253]      __var DEBUG_PORT_VAL    = 0;
[16:31:30.253]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:31:30.253]      __var ACCESS_POINT_VAL  = 0;
[16:31:30.253]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:31:30.253]      __ap = 1; 
[16:31:30.253]        // -> [__ap <= 0x00000001]
[16:31:30.253]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:31:30.263]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:31:30.263]      __ap = 4;
[16:31:30.263]        // -> [__ap <= 0x00000004]
[16:31:30.263]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:30.268]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:31:30.268]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:31:30.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:30.272]    </block>
[16:31:30.272]    <block atomic="false" info="">
[16:31:30.272]      __var nReset = 0x80;
[16:31:30.272]        // -> [nReset <= 0x00000080]
[16:31:30.272]      __var canReadPins = 0;
[16:31:30.272]        // -> [canReadPins <= 0x00000000]
[16:31:30.272]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:31:30.276]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:31:30.276]        // -> [canReadPins <= 0x00000001]
[16:31:30.276]    </block>
[16:31:30.276]    <control if="" while="1" timeout="200" info="">
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.276]      // while "1"  (timeout="200")
[16:31:30.276]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.279]      // while-condition  =>  TRUE
[16:31:30.279]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.282]      // while "1"  (timeout="200")
[16:31:30.282]      // while-condition  =>  TRUE
[16:31:30.283]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.284]      // while-condition  =>  TRUE
[16:31:30.284]      // while "1"  (timeout="200")
[16:31:30.285]      // while-condition  =>  TRUE
[16:31:30.285]      // while "1"  (timeout="200")
[16:31:30.285]      // while  =>  TIMEOUT
[16:31:30.285]      // end while "1"
[16:31:30.285]    </control>
[16:31:30.285]    <control if="canReadPins" while="" timeout="0" info="">
[16:31:30.285]      // if-block "canReadPins"
[16:31:30.285]        // =>  TRUE
[16:31:30.285]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:31:30.285]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:31:30.287]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:31:30.287]        // while-condition  =>  FALSE
[16:31:30.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:31:30.287]      </control>
[16:31:30.287]      // end if-block "canReadPins"
[16:31:30.287]    </control>
[16:31:30.287]    <control if="!canReadPins" while="" timeout="0" info="">
[16:31:30.287]      // if-block "!canReadPins"
[16:31:30.287]        // =>  FALSE
[16:31:30.287]      // skip if-block "!canReadPins"
[16:31:30.289]    </control>
[16:31:30.289]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:31:30.289]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:30.289]        // =>  TRUE
[16:31:30.289]      <block atomic="false" info="">
[16:31:30.289]        WriteAP(0x00, 0x190008);
[16:31:30.293]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:30.293]        WriteAP(0xF0, 0x01);
[16:31:30.294]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:30.294]      </block>
[16:31:30.294]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:30.294]    </control>
[16:31:30.294]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:31:30.294]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:30.294]        // =>  FALSE
[16:31:30.294]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:30.294]    </control>
[16:31:30.294]    <block atomic="false" info="">
[16:31:30.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:30.310]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:31:30.311]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:31:30.311]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:30.311]      __ap = 0; //lets make sure we reset the access point selection
[16:31:30.311]        // -> [__ap <= 0x00000000]
[16:31:30.311]    </block>
[16:31:30.311]  </sequence>
[16:31:30.311]  
[16:31:30.334]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:31:30.334]  
[16:31:30.334]  <debugvars>
[16:31:30.334]    // Pre-defined
[16:31:30.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:30.334]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:30.334]    __dp=0x00000000
[16:31:30.334]    __ap=0x00000000
[16:31:30.334]    __traceout=0x00000000      (Trace Disabled)
[16:31:30.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:30.334]    __FlashAddr=0x00000000
[16:31:30.334]    __FlashLen=0x00000000
[16:31:30.334]    __FlashArg=0x00000000
[16:31:30.337]    __FlashOp=0x00000000
[16:31:30.337]    __Result=0x00000000
[16:31:30.337]  </debugvars>
[16:31:30.337]  
[16:31:30.337]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:31:30.337]    <block atomic="false" info="">
[16:31:30.337]      __var deviceID = 0;
[16:31:30.337]        // -> [deviceID <= 0x00000000]
[16:31:30.337]      __var version = 0;
[16:31:30.337]        // -> [version <= 0x00000000]
[16:31:30.337]      __var partNum = 0;
[16:31:30.338]        // -> [partNum <= 0x00000000]
[16:31:30.338]      __var manuf = 0;
[16:31:30.338]        // -> [manuf <= 0x00000000]
[16:31:30.338]      __var isMSPM0G1X0X_G3X0X = 0;
[16:31:30.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:31:30.338]      __var isProduction = 0;
[16:31:30.338]        // -> [isProduction <= 0x00000000]
[16:31:30.338]      __var continueId = 0;
[16:31:30.338]        // -> [continueId <= 0x00000000]
[16:31:30.338]      deviceID =   Read32(0x41C40004);
[16:31:30.344]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:31:30.344]        // -> [deviceID <= 0x2BB8802F]
[16:31:30.344]      version = deviceID >> 28;
[16:31:30.344]        // -> [version <= 0x00000002]
[16:31:30.344]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:31:30.344]        // -> [partNum <= 0x0000BB88]
[16:31:30.344]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:31:30.354]        // -> [manuf <= 0x00000017]
[16:31:30.354]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:31:30.354]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:31:30.354]      isProduction = (version > 0);
[16:31:30.354]        // -> [isProduction <= 0x00000001]
[16:31:30.354]    </block>
[16:31:30.354]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:31:30.354]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:31:30.354]        // =>  FALSE
[16:31:30.354]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:31:30.354]    </control>
[16:31:30.354]    <control if="continueId == 4" while="" timeout="0" info="">
[16:31:30.354]      // if-block "continueId == 4"
[16:31:30.354]        // =>  FALSE
[16:31:30.354]      // skip if-block "continueId == 4"
[16:31:30.354]    </control>
[16:31:30.354]    <control if="!isProduction" while="" timeout="0" info="">
[16:31:30.354]      // if-block "!isProduction"
[16:31:30.354]        // =>  FALSE
[16:31:30.354]      // skip if-block "!isProduction"
[16:31:30.354]    </control>
[16:31:30.354]  </sequence>
[16:31:30.354]  
[16:38:03.985]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:38:03.985]  
[16:38:03.997]  <debugvars>
[16:38:03.997]    // Pre-defined
[16:38:03.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:03.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:03.997]    __dp=0x00000000
[16:38:03.997]    __ap=0x00000000
[16:38:03.997]    __traceout=0x00000000      (Trace Disabled)
[16:38:03.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:03.997]    __FlashAddr=0x00000000
[16:38:03.997]    __FlashLen=0x00000000
[16:38:03.997]    __FlashArg=0x00000000
[16:38:03.997]    __FlashOp=0x00000000
[16:38:03.997]    __Result=0x00000000
[16:38:03.997]  </debugvars>
[16:38:03.997]  
[16:38:03.997]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:38:03.997]    <block atomic="false" info="">
[16:38:03.997]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:38:03.997]        // -> [isSWJ <= 0x00000001]
[16:38:03.997]      __var hasDormant = __protocol & 0x00020000;
[16:38:03.997]        // -> [hasDormant <= 0x00000000]
[16:38:03.997]      __var protType   = __protocol & 0x0000FFFF;
[16:38:03.997]        // -> [protType <= 0x00000002]
[16:38:03.997]    </block>
[16:38:03.997]    <control if="protType == 1" while="" timeout="0" info="">
[16:38:03.997]      // if-block "protType == 1"
[16:38:03.997]        // =>  FALSE
[16:38:03.997]      // skip if-block "protType == 1"
[16:38:03.997]    </control>
[16:38:03.997]    <control if="protType == 2" while="" timeout="0" info="">
[16:38:03.997]      // if-block "protType == 2"
[16:38:03.997]        // =>  TRUE
[16:38:03.997]      <control if="isSWJ" while="" timeout="0" info="">
[16:38:03.997]        // if-block "isSWJ"
[16:38:03.997]          // =>  TRUE
[16:38:03.997]        <control if="hasDormant" while="" timeout="0" info="">
[16:38:03.997]          // if-block "hasDormant"
[16:38:03.997]            // =>  FALSE
[16:38:03.997]          // skip if-block "hasDormant"
[16:38:03.997]        </control>
[16:38:03.997]        <control if="!hasDormant" while="" timeout="0" info="">
[16:38:03.997]          // if-block "!hasDormant"
[16:38:03.997]            // =>  TRUE
[16:38:03.997]          <block atomic="false" info="">
[16:38:03.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:38:04.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:04.004]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:38:04.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:38:04.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:38:04.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:04.006]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:38:04.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:38:04.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:38:04.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:04.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:38:04.006]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:38:04.006]          </block>
[16:38:04.006]          // end if-block "!hasDormant"
[16:38:04.006]        </control>
[16:38:04.006]        // end if-block "isSWJ"
[16:38:04.006]      </control>
[16:38:04.006]      <control if="!isSWJ" while="" timeout="0" info="">
[16:38:04.006]        // if-block "!isSWJ"
[16:38:04.006]          // =>  FALSE
[16:38:04.006]        // skip if-block "!isSWJ"
[16:38:04.006]      </control>
[16:38:04.006]      <block atomic="false" info="">
[16:38:04.006]        ReadDP(0x0);
[16:38:04.016]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:38:04.016]      </block>
[16:38:04.016]      // end if-block "protType == 2"
[16:38:04.016]    </control>
[16:38:04.016]  </sequence>
[16:38:04.016]  
[16:38:04.016]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:38:04.016]  
[16:38:04.016]  <debugvars>
[16:38:04.016]    // Pre-defined
[16:38:04.016]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:04.016]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:04.016]    __dp=0x00000000
[16:38:04.016]    __ap=0x00000000
[16:38:04.016]    __traceout=0x00000000      (Trace Disabled)
[16:38:04.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:04.016]    __FlashAddr=0x00000000
[16:38:04.016]    __FlashLen=0x00000000
[16:38:04.016]    __FlashArg=0x00000000
[16:38:04.016]    __FlashOp=0x00000000
[16:38:04.016]    __Result=0x00000000
[16:38:04.016]  </debugvars>
[16:38:04.016]  
[16:38:04.016]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:38:04.016]    <block atomic="false" info="">
[16:38:04.016]      __var SW_DP_ABORT       = 0x0;
[16:38:04.016]        // -> [SW_DP_ABORT <= 0x00000000]
[16:38:04.016]      __var DP_CTRL_STAT      = 0x4;
[16:38:04.016]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:38:04.016]      __var DP_SELECT         = 0x8;
[16:38:04.016]        // -> [DP_SELECT <= 0x00000008]
[16:38:04.016]      __var powered_down      = 0;
[16:38:04.016]        // -> [powered_down <= 0x00000000]
[16:38:04.016]      WriteDP(DP_SELECT, 0x00000000);
[16:38:04.024]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:38:04.024]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:38:04.026]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:38:04.026]        // -> [powered_down <= 0x00000001]
[16:38:04.026]    </block>
[16:38:04.026]    <control if="powered_down" while="" timeout="0" info="">
[16:38:04.026]      // if-block "powered_down"
[16:38:04.026]        // =>  TRUE
[16:38:04.026]      <block atomic="false" info="">
[16:38:04.026]        Message(0, "Debug/System power-up request sent");
[16:38:04.026]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:38:04.026]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:38:04.026]      </block>
[16:38:04.026]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:38:04.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:38:04.026]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:38:04.026]        // while-condition  =>  FALSE
[16:38:04.026]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:38:04.026]      </control>
[16:38:04.034]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:38:04.034]        // if-block "(__protocol & 0xFFFF) == 1"
[16:38:04.034]          // =>  FALSE
[16:38:04.034]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:38:04.034]      </control>
[16:38:04.034]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:38:04.034]        // if-block "(__protocol & 0xFFFF) == 2"
[16:38:04.034]          // =>  TRUE
[16:38:04.034]        <block atomic="false" info="">
[16:38:04.034]          Message(0, "executing SWD power up");
[16:38:04.036]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:38:04.036]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:38:04.036]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:38:04.036]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:38:04.036]        </block>
[16:38:04.036]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:38:04.036]      </control>
[16:38:04.036]      // end if-block "powered_down"
[16:38:04.036]    </control>
[16:38:04.036]    <block atomic="false" info="">
[16:38:04.036]      __var DEBUG_PORT_VAL    = 0;
[16:38:04.044]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:38:04.044]      __var ACCESS_POINT_VAL  = 0;
[16:38:04.044]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:38:04.044]      __ap = 1; 
[16:38:04.044]        // -> [__ap <= 0x00000001]
[16:38:04.044]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:38:04.046]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:38:04.046]      __ap = 4;
[16:38:04.046]        // -> [__ap <= 0x00000004]
[16:38:04.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:38:04.046]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:38:04.046]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:38:04.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:38:04.046]    </block>
[16:38:04.046]    <block atomic="false" info="">
[16:38:04.046]      __var nReset = 0x80;
[16:38:04.054]        // -> [nReset <= 0x00000080]
[16:38:04.054]      __var canReadPins = 0;
[16:38:04.054]        // -> [canReadPins <= 0x00000000]
[16:38:04.054]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:38:04.054]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:38:04.054]        // -> [canReadPins <= 0x00000001]
[16:38:04.054]    </block>
[16:38:04.056]    <control if="" while="1" timeout="200" info="">
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.056]      // while "1"  (timeout="200")
[16:38:04.056]      // while-condition  =>  TRUE
[16:38:04.064]      // while "1"  (timeout="200")
[16:38:04.064]      // while-condition  =>  TRUE
[16:38:04.064]      // while "1"  (timeout="200")
[16:38:04.064]      // while-condition  =>  TRUE
[16:38:04.064]      // while "1"  (timeout="200")
[16:38:04.064]      // while-condition  =>  TRUE
[16:38:04.064]      // while "1"  (timeout="200")
[16:38:04.064]      // while-condition  =>  TRUE
[16:38:04.064]      // while "1"  (timeout="200")
[16:38:04.065]      // while-condition  =>  TRUE
[16:38:04.065]      // while "1"  (timeout="200")
[16:38:04.065]      // while  =>  TIMEOUT
[16:38:04.065]      // end while "1"
[16:38:04.065]    </control>
[16:38:04.065]    <control if="canReadPins" while="" timeout="0" info="">
[16:38:04.065]      // if-block "canReadPins"
[16:38:04.065]        // =>  TRUE
[16:38:04.065]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:38:04.065]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:38:04.066]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:38:04.066]        // while-condition  =>  FALSE
[16:38:04.066]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:38:04.066]      </control>
[16:38:04.066]      // end if-block "canReadPins"
[16:38:04.066]    </control>
[16:38:04.066]    <control if="!canReadPins" while="" timeout="0" info="">
[16:38:04.066]      // if-block "!canReadPins"
[16:38:04.066]        // =>  FALSE
[16:38:04.066]      // skip if-block "!canReadPins"
[16:38:04.066]    </control>
[16:38:04.066]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:38:04.066]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:38:04.066]        // =>  TRUE
[16:38:04.066]      <block atomic="false" info="">
[16:38:04.066]        WriteAP(0x00, 0x190008);
[16:38:04.066]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:38:04.066]        WriteAP(0xF0, 0x01);
[16:38:04.074]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:38:04.074]      </block>
[16:38:04.074]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:38:04.074]    </control>
[16:38:04.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:38:04.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:38:04.074]        // =>  FALSE
[16:38:04.074]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:38:04.074]    </control>
[16:38:04.074]    <block atomic="false" info="">
[16:38:04.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:38:04.076]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:38:04.076]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:38:04.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:38:04.076]      __ap = 0; //lets make sure we reset the access point selection
[16:38:04.076]        // -> [__ap <= 0x00000000]
[16:38:04.076]    </block>
[16:38:04.076]  </sequence>
[16:38:04.076]  
[16:38:04.106]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:38:04.106]  
[16:38:04.106]  <debugvars>
[16:38:04.106]    // Pre-defined
[16:38:04.106]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:04.106]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:04.106]    __dp=0x00000000
[16:38:04.106]    __ap=0x00000000
[16:38:04.106]    __traceout=0x00000000      (Trace Disabled)
[16:38:04.106]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:04.106]    __FlashAddr=0x00000000
[16:38:04.106]    __FlashLen=0x00000000
[16:38:04.106]    __FlashArg=0x00000000
[16:38:04.106]    __FlashOp=0x00000000
[16:38:04.106]    __Result=0x00000000
[16:38:04.106]  </debugvars>
[16:38:04.106]  
[16:38:04.106]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:38:04.106]    <block atomic="false" info="">
[16:38:04.106]      __var deviceID = 0;
[16:38:04.106]        // -> [deviceID <= 0x00000000]
[16:38:04.106]      __var version = 0;
[16:38:04.106]        // -> [version <= 0x00000000]
[16:38:04.106]      __var partNum = 0;
[16:38:04.106]        // -> [partNum <= 0x00000000]
[16:38:04.106]      __var manuf = 0;
[16:38:04.106]        // -> [manuf <= 0x00000000]
[16:38:04.106]      __var isMSPM0G1X0X_G3X0X = 0;
[16:38:04.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:38:04.106]      __var isProduction = 0;
[16:38:04.114]        // -> [isProduction <= 0x00000000]
[16:38:04.114]      __var continueId = 0;
[16:38:04.114]        // -> [continueId <= 0x00000000]
[16:38:04.114]      deviceID =   Read32(0x41C40004);
[16:38:04.116]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:38:04.116]        // -> [deviceID <= 0x2BB8802F]
[16:38:04.116]      version = deviceID >> 28;
[16:38:04.116]        // -> [version <= 0x00000002]
[16:38:04.116]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:38:04.116]        // -> [partNum <= 0x0000BB88]
[16:38:04.116]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:38:04.116]        // -> [manuf <= 0x00000017]
[16:38:04.116]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:38:04.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:38:04.116]      isProduction = (version > 0);
[16:38:04.116]        // -> [isProduction <= 0x00000001]
[16:38:04.116]    </block>
[16:38:04.116]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:38:04.116]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:38:04.116]        // =>  FALSE
[16:38:04.116]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:38:04.116]    </control>
[16:38:04.116]    <control if="continueId == 4" while="" timeout="0" info="">
[16:38:04.116]      // if-block "continueId == 4"
[16:38:04.116]        // =>  FALSE
[16:38:04.116]      // skip if-block "continueId == 4"
[16:38:04.116]    </control>
[16:38:04.116]    <control if="!isProduction" while="" timeout="0" info="">
[16:38:04.116]      // if-block "!isProduction"
[16:38:04.116]        // =>  FALSE
[16:38:04.116]      // skip if-block "!isProduction"
[16:38:04.116]    </control>
[16:38:04.116]  </sequence>
[16:38:04.116]  
[16:39:17.738]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:39:17.738]  
[16:39:17.746]  <debugvars>
[16:39:17.746]    // Pre-defined
[16:39:17.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:17.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:17.746]    __dp=0x00000000
[16:39:17.746]    __ap=0x00000000
[16:39:17.746]    __traceout=0x00000000      (Trace Disabled)
[16:39:17.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:17.746]    __FlashAddr=0x00000000
[16:39:17.746]    __FlashLen=0x00000000
[16:39:17.746]    __FlashArg=0x00000000
[16:39:17.746]    __FlashOp=0x00000000
[16:39:17.746]    __Result=0x00000000
[16:39:17.746]  </debugvars>
[16:39:17.748]  
[16:39:17.748]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:39:17.748]    <block atomic="false" info="">
[16:39:17.748]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:39:17.748]        // -> [isSWJ <= 0x00000001]
[16:39:17.748]      __var hasDormant = __protocol & 0x00020000;
[16:39:17.748]        // -> [hasDormant <= 0x00000000]
[16:39:17.748]      __var protType   = __protocol & 0x0000FFFF;
[16:39:17.748]        // -> [protType <= 0x00000002]
[16:39:17.748]    </block>
[16:39:17.748]    <control if="protType == 1" while="" timeout="0" info="">
[16:39:17.748]      // if-block "protType == 1"
[16:39:17.748]        // =>  FALSE
[16:39:17.748]      // skip if-block "protType == 1"
[16:39:17.748]    </control>
[16:39:17.748]    <control if="protType == 2" while="" timeout="0" info="">
[16:39:17.748]      // if-block "protType == 2"
[16:39:17.748]        // =>  TRUE
[16:39:17.748]      <control if="isSWJ" while="" timeout="0" info="">
[16:39:17.748]        // if-block "isSWJ"
[16:39:17.748]          // =>  TRUE
[16:39:17.748]        <control if="hasDormant" while="" timeout="0" info="">
[16:39:17.748]          // if-block "hasDormant"
[16:39:17.748]            // =>  FALSE
[16:39:17.748]          // skip if-block "hasDormant"
[16:39:17.748]        </control>
[16:39:17.748]        <control if="!hasDormant" while="" timeout="0" info="">
[16:39:17.748]          // if-block "!hasDormant"
[16:39:17.748]            // =>  TRUE
[16:39:17.748]          <block atomic="false" info="">
[16:39:17.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:39:17.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:17.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:39:17.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:39:17.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:39:17.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:17.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:39:17.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:39:17.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:39:17.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:17.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:39:17.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:39:17.759]          </block>
[16:39:17.759]          // end if-block "!hasDormant"
[16:39:17.759]        </control>
[16:39:17.759]        // end if-block "isSWJ"
[16:39:17.759]      </control>
[16:39:17.759]      <control if="!isSWJ" while="" timeout="0" info="">
[16:39:17.759]        // if-block "!isSWJ"
[16:39:17.759]          // =>  FALSE
[16:39:17.768]        // skip if-block "!isSWJ"
[16:39:17.768]      </control>
[16:39:17.768]      <block atomic="false" info="">
[16:39:17.768]        ReadDP(0x0);
[16:39:17.768]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:39:17.768]      </block>
[16:39:17.768]      // end if-block "protType == 2"
[16:39:17.768]    </control>
[16:39:17.768]  </sequence>
[16:39:17.768]  
[16:39:17.768]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:39:17.768]  
[16:39:17.768]  <debugvars>
[16:39:17.768]    // Pre-defined
[16:39:17.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:17.768]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:17.768]    __dp=0x00000000
[16:39:17.768]    __ap=0x00000000
[16:39:17.768]    __traceout=0x00000000      (Trace Disabled)
[16:39:17.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:17.768]    __FlashAddr=0x00000000
[16:39:17.768]    __FlashLen=0x00000000
[16:39:17.768]    __FlashArg=0x00000000
[16:39:17.768]    __FlashOp=0x00000000
[16:39:17.768]    __Result=0x00000000
[16:39:17.768]  </debugvars>
[16:39:17.768]  
[16:39:17.768]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:39:17.768]    <block atomic="false" info="">
[16:39:17.768]      __var SW_DP_ABORT       = 0x0;
[16:39:17.768]        // -> [SW_DP_ABORT <= 0x00000000]
[16:39:17.768]      __var DP_CTRL_STAT      = 0x4;
[16:39:17.768]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:39:17.768]      __var DP_SELECT         = 0x8;
[16:39:17.768]        // -> [DP_SELECT <= 0x00000008]
[16:39:17.768]      __var powered_down      = 0;
[16:39:17.768]        // -> [powered_down <= 0x00000000]
[16:39:17.768]      WriteDP(DP_SELECT, 0x00000000);
[16:39:17.778]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:39:17.778]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:39:17.778]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:39:17.778]        // -> [powered_down <= 0x00000001]
[16:39:17.778]    </block>
[16:39:17.778]    <control if="powered_down" while="" timeout="0" info="">
[16:39:17.778]      // if-block "powered_down"
[16:39:17.778]        // =>  TRUE
[16:39:17.778]      <block atomic="false" info="">
[16:39:17.778]        Message(0, "Debug/System power-up request sent");
[16:39:17.778]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:39:17.778]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:39:17.778]      </block>
[16:39:17.778]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:39:17.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:39:17.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:39:17.788]        // while-condition  =>  FALSE
[16:39:17.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:39:17.788]      </control>
[16:39:17.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:39:17.788]        // if-block "(__protocol & 0xFFFF) == 1"
[16:39:17.788]          // =>  FALSE
[16:39:17.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:39:17.788]      </control>
[16:39:17.788]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:39:17.788]        // if-block "(__protocol & 0xFFFF) == 2"
[16:39:17.788]          // =>  TRUE
[16:39:17.788]        <block atomic="false" info="">
[16:39:17.788]          Message(0, "executing SWD power up");
[16:39:17.791]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:39:17.791]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:39:17.791]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:39:17.791]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:39:17.791]        </block>
[16:39:17.791]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:39:17.791]      </control>
[16:39:17.797]      // end if-block "powered_down"
[16:39:17.797]    </control>
[16:39:17.797]    <block atomic="false" info="">
[16:39:17.797]      __var DEBUG_PORT_VAL    = 0;
[16:39:17.797]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:39:17.797]      __var ACCESS_POINT_VAL  = 0;
[16:39:17.797]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:39:17.797]      __ap = 1; 
[16:39:17.797]        // -> [__ap <= 0x00000001]
[16:39:17.797]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:39:17.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:39:17.798]      __ap = 4;
[16:39:17.798]        // -> [__ap <= 0x00000004]
[16:39:17.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:39:17.798]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:39:17.798]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:39:17.798]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:39:17.798]    </block>
[16:39:17.798]    <block atomic="false" info="">
[16:39:17.798]      __var nReset = 0x80;
[16:39:17.798]        // -> [nReset <= 0x00000080]
[16:39:17.798]      __var canReadPins = 0;
[16:39:17.798]        // -> [canReadPins <= 0x00000000]
[16:39:17.798]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:39:17.808]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:39:17.809]        // -> [canReadPins <= 0x00000001]
[16:39:17.809]    </block>
[16:39:17.809]    <control if="" while="1" timeout="200" info="">
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.809]      // while-condition  =>  TRUE
[16:39:17.809]      // while "1"  (timeout="200")
[16:39:17.818]      // while-condition  =>  TRUE
[16:39:17.818]      // while "1"  (timeout="200")
[16:39:17.818]      // while  =>  TIMEOUT
[16:39:17.818]      // end while "1"
[16:39:17.818]    </control>
[16:39:17.818]    <control if="canReadPins" while="" timeout="0" info="">
[16:39:17.818]      // if-block "canReadPins"
[16:39:17.818]        // =>  TRUE
[16:39:17.818]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:39:17.818]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:39:17.823]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:39:17.823]        // while-condition  =>  FALSE
[16:39:17.823]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:39:17.826]      </control>
[16:39:17.826]      // end if-block "canReadPins"
[16:39:17.826]    </control>
[16:39:17.826]    <control if="!canReadPins" while="" timeout="0" info="">
[16:39:17.826]      // if-block "!canReadPins"
[16:39:17.826]        // =>  FALSE
[16:39:17.826]      // skip if-block "!canReadPins"
[16:39:17.826]    </control>
[16:39:17.826]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:39:17.826]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:39:17.826]        // =>  TRUE
[16:39:17.826]      <block atomic="false" info="">
[16:39:17.826]        WriteAP(0x00, 0x190008);
[16:39:17.828]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:39:17.828]        WriteAP(0xF0, 0x01);
[16:39:17.838]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:39:17.838]      </block>
[16:39:17.838]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:39:17.838]    </control>
[16:39:17.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:39:17.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:39:17.838]        // =>  FALSE
[16:39:17.838]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:39:17.838]    </control>
[16:39:17.838]    <block atomic="false" info="">
[16:39:17.838]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:39:17.838]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:39:17.838]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:39:17.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:39:17.838]      __ap = 0; //lets make sure we reset the access point selection
[16:39:17.838]        // -> [__ap <= 0x00000000]
[16:39:17.838]    </block>
[16:39:17.838]  </sequence>
[16:39:17.838]  
[16:39:17.869]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:39:17.869]  
[16:39:17.869]  <debugvars>
[16:39:17.869]    // Pre-defined
[16:39:17.869]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:17.869]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:17.869]    __dp=0x00000000
[16:39:17.869]    __ap=0x00000000
[16:39:17.869]    __traceout=0x00000000      (Trace Disabled)
[16:39:17.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:17.869]    __FlashAddr=0x00000000
[16:39:17.869]    __FlashLen=0x00000000
[16:39:17.869]    __FlashArg=0x00000000
[16:39:17.869]    __FlashOp=0x00000000
[16:39:17.869]    __Result=0x00000000
[16:39:17.869]  </debugvars>
[16:39:17.869]  
[16:39:17.869]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:39:17.869]    <block atomic="false" info="">
[16:39:17.869]      __var deviceID = 0;
[16:39:17.869]        // -> [deviceID <= 0x00000000]
[16:39:17.869]      __var version = 0;
[16:39:17.869]        // -> [version <= 0x00000000]
[16:39:17.869]      __var partNum = 0;
[16:39:17.869]        // -> [partNum <= 0x00000000]
[16:39:17.869]      __var manuf = 0;
[16:39:17.869]        // -> [manuf <= 0x00000000]
[16:39:17.869]      __var isMSPM0G1X0X_G3X0X = 0;
[16:39:17.869]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:39:17.869]      __var isProduction = 0;
[16:39:17.869]        // -> [isProduction <= 0x00000000]
[16:39:17.869]      __var continueId = 0;
[16:39:17.869]        // -> [continueId <= 0x00000000]
[16:39:17.869]      deviceID =   Read32(0x41C40004);
[16:39:17.883]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:39:17.883]        // -> [deviceID <= 0x2BB8802F]
[16:39:17.883]      version = deviceID >> 28;
[16:39:17.883]        // -> [version <= 0x00000002]
[16:39:17.883]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:39:17.883]        // -> [partNum <= 0x0000BB88]
[16:39:17.883]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:39:17.883]        // -> [manuf <= 0x00000017]
[16:39:17.889]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:39:17.889]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:39:17.889]      isProduction = (version > 0);
[16:39:17.889]        // -> [isProduction <= 0x00000001]
[16:39:17.889]    </block>
[16:39:17.889]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:39:17.889]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:39:17.889]        // =>  FALSE
[16:39:17.889]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:39:17.889]    </control>
[16:39:17.889]    <control if="continueId == 4" while="" timeout="0" info="">
[16:39:17.889]      // if-block "continueId == 4"
[16:39:17.889]        // =>  FALSE
[16:39:17.889]      // skip if-block "continueId == 4"
[16:39:17.889]    </control>
[16:39:17.889]    <control if="!isProduction" while="" timeout="0" info="">
[16:39:17.889]      // if-block "!isProduction"
[16:39:17.889]        // =>  FALSE
[16:39:17.889]      // skip if-block "!isProduction"
[16:39:17.889]    </control>
[16:39:17.889]  </sequence>
[16:39:17.889]  
[16:40:20.814]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:40:20.814]  
[16:40:20.814]  <debugvars>
[16:40:20.814]    // Pre-defined
[16:40:20.814]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:20.814]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:20.814]    __dp=0x00000000
[16:40:20.814]    __ap=0x00000000
[16:40:20.814]    __traceout=0x00000000      (Trace Disabled)
[16:40:20.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:20.814]    __FlashAddr=0x00000000
[16:40:20.814]    __FlashLen=0x00000000
[16:40:20.814]    __FlashArg=0x00000000
[16:40:20.814]    __FlashOp=0x00000000
[16:40:20.814]    __Result=0x00000000
[16:40:20.814]  </debugvars>
[16:40:20.814]  
[16:40:20.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:40:20.814]    <block atomic="false" info="">
[16:40:20.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:40:20.814]        // -> [isSWJ <= 0x00000001]
[16:40:20.814]      __var hasDormant = __protocol & 0x00020000;
[16:40:20.814]        // -> [hasDormant <= 0x00000000]
[16:40:20.814]      __var protType   = __protocol & 0x0000FFFF;
[16:40:20.814]        // -> [protType <= 0x00000002]
[16:40:20.814]    </block>
[16:40:20.814]    <control if="protType == 1" while="" timeout="0" info="">
[16:40:20.814]      // if-block "protType == 1"
[16:40:20.824]        // =>  FALSE
[16:40:20.824]      // skip if-block "protType == 1"
[16:40:20.824]    </control>
[16:40:20.824]    <control if="protType == 2" while="" timeout="0" info="">
[16:40:20.824]      // if-block "protType == 2"
[16:40:20.824]        // =>  TRUE
[16:40:20.824]      <control if="isSWJ" while="" timeout="0" info="">
[16:40:20.824]        // if-block "isSWJ"
[16:40:20.825]          // =>  TRUE
[16:40:20.825]        <control if="hasDormant" while="" timeout="0" info="">
[16:40:20.825]          // if-block "hasDormant"
[16:40:20.825]            // =>  FALSE
[16:40:20.825]          // skip if-block "hasDormant"
[16:40:20.825]        </control>
[16:40:20.825]        <control if="!hasDormant" while="" timeout="0" info="">
[16:40:20.825]          // if-block "!hasDormant"
[16:40:20.825]            // =>  TRUE
[16:40:20.825]          <block atomic="false" info="">
[16:40:20.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:40:20.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:20.825]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:40:20.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:40:20.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:40:20.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:20.825]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:40:20.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:40:20.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:40:20.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:20.825]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:40:20.834]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:40:20.834]          </block>
[16:40:20.834]          // end if-block "!hasDormant"
[16:40:20.834]        </control>
[16:40:20.834]        // end if-block "isSWJ"
[16:40:20.834]      </control>
[16:40:20.834]      <control if="!isSWJ" while="" timeout="0" info="">
[16:40:20.834]        // if-block "!isSWJ"
[16:40:20.834]          // =>  FALSE
[16:40:20.834]        // skip if-block "!isSWJ"
[16:40:20.834]      </control>
[16:40:20.834]      <block atomic="false" info="">
[16:40:20.834]        ReadDP(0x0);
[16:40:20.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:40:20.834]      </block>
[16:40:20.834]      // end if-block "protType == 2"
[16:40:20.834]    </control>
[16:40:20.834]  </sequence>
[16:40:20.834]  
[16:40:20.834]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:40:20.834]  
[16:40:20.834]  <debugvars>
[16:40:20.834]    // Pre-defined
[16:40:20.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:20.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:20.834]    __dp=0x00000000
[16:40:20.834]    __ap=0x00000000
[16:40:20.834]    __traceout=0x00000000      (Trace Disabled)
[16:40:20.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:20.834]    __FlashAddr=0x00000000
[16:40:20.834]    __FlashLen=0x00000000
[16:40:20.834]    __FlashArg=0x00000000
[16:40:20.834]    __FlashOp=0x00000000
[16:40:20.834]    __Result=0x00000000
[16:40:20.834]  </debugvars>
[16:40:20.834]  
[16:40:20.834]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:40:20.834]    <block atomic="false" info="">
[16:40:20.834]      __var SW_DP_ABORT       = 0x0;
[16:40:20.834]        // -> [SW_DP_ABORT <= 0x00000000]
[16:40:20.834]      __var DP_CTRL_STAT      = 0x4;
[16:40:20.834]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:40:20.834]      __var DP_SELECT         = 0x8;
[16:40:20.834]        // -> [DP_SELECT <= 0x00000008]
[16:40:20.834]      __var powered_down      = 0;
[16:40:20.834]        // -> [powered_down <= 0x00000000]
[16:40:20.834]      WriteDP(DP_SELECT, 0x00000000);
[16:40:20.844]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:40:20.844]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:40:20.844]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:40:20.844]        // -> [powered_down <= 0x00000001]
[16:40:20.844]    </block>
[16:40:20.844]    <control if="powered_down" while="" timeout="0" info="">
[16:40:20.844]      // if-block "powered_down"
[16:40:20.844]        // =>  TRUE
[16:40:20.844]      <block atomic="false" info="">
[16:40:20.844]        Message(0, "Debug/System power-up request sent");
[16:40:20.851]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:40:20.854]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:40:20.854]      </block>
[16:40:20.854]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:40:20.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:40:20.854]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:40:20.854]        // while-condition  =>  FALSE
[16:40:20.854]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:40:20.854]      </control>
[16:40:20.854]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:40:20.854]        // if-block "(__protocol & 0xFFFF) == 1"
[16:40:20.854]          // =>  FALSE
[16:40:20.854]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:40:20.854]      </control>
[16:40:20.854]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:40:20.854]        // if-block "(__protocol & 0xFFFF) == 2"
[16:40:20.854]          // =>  TRUE
[16:40:20.854]        <block atomic="false" info="">
[16:40:20.854]          Message(0, "executing SWD power up");
[16:40:20.854]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:40:20.854]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:40:20.854]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:40:20.854]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:40:20.854]        </block>
[16:40:20.854]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:40:20.854]      </control>
[16:40:20.854]      // end if-block "powered_down"
[16:40:20.854]    </control>
[16:40:20.854]    <block atomic="false" info="">
[16:40:20.854]      __var DEBUG_PORT_VAL    = 0;
[16:40:20.854]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:40:20.854]      __var ACCESS_POINT_VAL  = 0;
[16:40:20.854]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:40:20.854]      __ap = 1; 
[16:40:20.854]        // -> [__ap <= 0x00000001]
[16:40:20.854]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:40:20.866]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:40:20.866]      __ap = 4;
[16:40:20.866]        // -> [__ap <= 0x00000004]
[16:40:20.866]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:40:20.868]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:40:20.868]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:40:20.868]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:40:20.868]    </block>
[16:40:20.868]    <block atomic="false" info="">
[16:40:20.868]      __var nReset = 0x80;
[16:40:20.868]        // -> [nReset <= 0x00000080]
[16:40:20.868]      __var canReadPins = 0;
[16:40:20.868]        // -> [canReadPins <= 0x00000000]
[16:40:20.868]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:40:20.874]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:40:20.874]        // -> [canReadPins <= 0x00000001]
[16:40:20.874]    </block>
[16:40:20.874]    <control if="" while="1" timeout="200" info="">
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.874]      // while-condition  =>  TRUE
[16:40:20.874]      // while "1"  (timeout="200")
[16:40:20.878]      // while-condition  =>  TRUE
[16:40:20.878]      // while "1"  (timeout="200")
[16:40:20.878]      // while  =>  TIMEOUT
[16:40:20.878]      // end while "1"
[16:40:20.878]    </control>
[16:40:20.878]    <control if="canReadPins" while="" timeout="0" info="">
[16:40:20.878]      // if-block "canReadPins"
[16:40:20.878]        // =>  TRUE
[16:40:20.878]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:40:20.878]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:40:20.878]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:40:20.878]        // while-condition  =>  FALSE
[16:40:20.878]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:40:20.878]      </control>
[16:40:20.878]      // end if-block "canReadPins"
[16:40:20.878]    </control>
[16:40:20.878]    <control if="!canReadPins" while="" timeout="0" info="">
[16:40:20.878]      // if-block "!canReadPins"
[16:40:20.878]        // =>  FALSE
[16:40:20.878]      // skip if-block "!canReadPins"
[16:40:20.882]    </control>
[16:40:20.882]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:40:20.882]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:40:20.882]        // =>  TRUE
[16:40:20.882]      <block atomic="false" info="">
[16:40:20.882]        WriteAP(0x00, 0x190008);
[16:40:20.882]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:40:20.882]        WriteAP(0xF0, 0x01);
[16:40:20.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:40:20.886]      </block>
[16:40:20.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:40:20.886]    </control>
[16:40:20.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:40:20.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:40:20.886]        // =>  FALSE
[16:40:20.886]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:40:20.886]    </control>
[16:40:20.886]    <block atomic="false" info="">
[16:40:20.889]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:40:20.890]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:40:20.890]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:40:20.890]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:40:20.893]      __ap = 0; //lets make sure we reset the access point selection
[16:40:20.893]        // -> [__ap <= 0x00000000]
[16:40:20.893]    </block>
[16:40:20.893]  </sequence>
[16:40:20.893]  
[16:40:20.917]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:40:20.917]  
[16:40:20.919]  <debugvars>
[16:40:20.919]    // Pre-defined
[16:40:20.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:20.919]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:20.919]    __dp=0x00000000
[16:40:20.919]    __ap=0x00000000
[16:40:20.919]    __traceout=0x00000000      (Trace Disabled)
[16:40:20.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:20.919]    __FlashAddr=0x00000000
[16:40:20.920]    __FlashLen=0x00000000
[16:40:20.920]    __FlashArg=0x00000000
[16:40:20.920]    __FlashOp=0x00000000
[16:40:20.920]    __Result=0x00000000
[16:40:20.920]  </debugvars>
[16:40:20.920]  
[16:40:20.920]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:40:20.920]    <block atomic="false" info="">
[16:40:20.920]      __var deviceID = 0;
[16:40:20.921]        // -> [deviceID <= 0x00000000]
[16:40:20.921]      __var version = 0;
[16:40:20.921]        // -> [version <= 0x00000000]
[16:40:20.922]      __var partNum = 0;
[16:40:20.922]        // -> [partNum <= 0x00000000]
[16:40:20.922]      __var manuf = 0;
[16:40:20.922]        // -> [manuf <= 0x00000000]
[16:40:20.922]      __var isMSPM0G1X0X_G3X0X = 0;
[16:40:20.922]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:40:20.922]      __var isProduction = 0;
[16:40:20.922]        // -> [isProduction <= 0x00000000]
[16:40:20.922]      __var continueId = 0;
[16:40:20.922]        // -> [continueId <= 0x00000000]
[16:40:20.922]      deviceID =   Read32(0x41C40004);
[16:40:20.926]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:40:20.926]        // -> [deviceID <= 0x2BB8802F]
[16:40:20.926]      version = deviceID >> 28;
[16:40:20.926]        // -> [version <= 0x00000002]
[16:40:20.926]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:40:20.926]        // -> [partNum <= 0x0000BB88]
[16:40:20.926]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:40:20.926]        // -> [manuf <= 0x00000017]
[16:40:20.926]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:40:20.926]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:40:20.926]      isProduction = (version > 0);
[16:40:20.926]        // -> [isProduction <= 0x00000001]
[16:40:20.926]    </block>
[16:40:20.926]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:40:20.926]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:40:20.926]        // =>  FALSE
[16:40:20.926]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:40:20.926]    </control>
[16:40:20.926]    <control if="continueId == 4" while="" timeout="0" info="">
[16:40:20.926]      // if-block "continueId == 4"
[16:40:20.926]        // =>  FALSE
[16:40:20.926]      // skip if-block "continueId == 4"
[16:40:20.926]    </control>
[16:40:20.926]    <control if="!isProduction" while="" timeout="0" info="">
[16:40:20.926]      // if-block "!isProduction"
[16:40:20.926]        // =>  FALSE
[16:40:20.926]      // skip if-block "!isProduction"
[16:40:20.926]    </control>
[16:40:20.926]  </sequence>
[16:40:20.932]  
[16:41:09.728]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:41:09.728]  
[16:41:09.739]  <debugvars>
[16:41:09.739]    // Pre-defined
[16:41:09.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:09.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:09.739]    __dp=0x00000000
[16:41:09.739]    __ap=0x00000000
[16:41:09.739]    __traceout=0x00000000      (Trace Disabled)
[16:41:09.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:09.739]    __FlashAddr=0x00000000
[16:41:09.739]    __FlashLen=0x00000000
[16:41:09.739]    __FlashArg=0x00000000
[16:41:09.739]    __FlashOp=0x00000000
[16:41:09.739]    __Result=0x00000000
[16:41:09.739]  </debugvars>
[16:41:09.739]  
[16:41:09.739]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:41:09.739]    <block atomic="false" info="">
[16:41:09.739]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:41:09.739]        // -> [isSWJ <= 0x00000001]
[16:41:09.739]      __var hasDormant = __protocol & 0x00020000;
[16:41:09.739]        // -> [hasDormant <= 0x00000000]
[16:41:09.739]      __var protType   = __protocol & 0x0000FFFF;
[16:41:09.739]        // -> [protType <= 0x00000002]
[16:41:09.739]    </block>
[16:41:09.739]    <control if="protType == 1" while="" timeout="0" info="">
[16:41:09.739]      // if-block "protType == 1"
[16:41:09.739]        // =>  FALSE
[16:41:09.739]      // skip if-block "protType == 1"
[16:41:09.739]    </control>
[16:41:09.739]    <control if="protType == 2" while="" timeout="0" info="">
[16:41:09.739]      // if-block "protType == 2"
[16:41:09.739]        // =>  TRUE
[16:41:09.739]      <control if="isSWJ" while="" timeout="0" info="">
[16:41:09.739]        // if-block "isSWJ"
[16:41:09.739]          // =>  TRUE
[16:41:09.739]        <control if="hasDormant" while="" timeout="0" info="">
[16:41:09.739]          // if-block "hasDormant"
[16:41:09.739]            // =>  FALSE
[16:41:09.739]          // skip if-block "hasDormant"
[16:41:09.739]        </control>
[16:41:09.739]        <control if="!hasDormant" while="" timeout="0" info="">
[16:41:09.739]          // if-block "!hasDormant"
[16:41:09.739]            // =>  TRUE
[16:41:09.739]          <block atomic="false" info="">
[16:41:09.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:41:09.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:09.746]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:41:09.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:41:09.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:41:09.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:09.746]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:41:09.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:41:09.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:41:09.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:09.756]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:41:09.756]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:41:09.756]          </block>
[16:41:09.756]          // end if-block "!hasDormant"
[16:41:09.756]        </control>
[16:41:09.756]        // end if-block "isSWJ"
[16:41:09.756]      </control>
[16:41:09.756]      <control if="!isSWJ" while="" timeout="0" info="">
[16:41:09.756]        // if-block "!isSWJ"
[16:41:09.756]          // =>  FALSE
[16:41:09.756]        // skip if-block "!isSWJ"
[16:41:09.756]      </control>
[16:41:09.756]      <block atomic="false" info="">
[16:41:09.756]        ReadDP(0x0);
[16:41:09.756]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:41:09.766]      </block>
[16:41:09.766]      // end if-block "protType == 2"
[16:41:09.766]    </control>
[16:41:09.766]  </sequence>
[16:41:09.766]  
[16:41:09.766]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:41:09.766]  
[16:41:09.766]  <debugvars>
[16:41:09.766]    // Pre-defined
[16:41:09.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:09.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:09.766]    __dp=0x00000000
[16:41:09.766]    __ap=0x00000000
[16:41:09.766]    __traceout=0x00000000      (Trace Disabled)
[16:41:09.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:09.766]    __FlashAddr=0x00000000
[16:41:09.766]    __FlashLen=0x00000000
[16:41:09.766]    __FlashArg=0x00000000
[16:41:09.766]    __FlashOp=0x00000000
[16:41:09.766]    __Result=0x00000000
[16:41:09.766]  </debugvars>
[16:41:09.766]  
[16:41:09.766]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:41:09.766]    <block atomic="false" info="">
[16:41:09.766]      __var SW_DP_ABORT       = 0x0;
[16:41:09.766]        // -> [SW_DP_ABORT <= 0x00000000]
[16:41:09.766]      __var DP_CTRL_STAT      = 0x4;
[16:41:09.766]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:41:09.766]      __var DP_SELECT         = 0x8;
[16:41:09.773]        // -> [DP_SELECT <= 0x00000008]
[16:41:09.773]      __var powered_down      = 0;
[16:41:09.773]        // -> [powered_down <= 0x00000000]
[16:41:09.773]      WriteDP(DP_SELECT, 0x00000000);
[16:41:09.773]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:41:09.776]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:41:09.777]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:41:09.777]        // -> [powered_down <= 0x00000001]
[16:41:09.777]    </block>
[16:41:09.777]    <control if="powered_down" while="" timeout="0" info="">
[16:41:09.777]      // if-block "powered_down"
[16:41:09.777]        // =>  TRUE
[16:41:09.777]      <block atomic="false" info="">
[16:41:09.777]        Message(0, "Debug/System power-up request sent");
[16:41:09.779]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:41:09.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:41:09.783]      </block>
[16:41:09.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:41:09.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:41:09.787]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:41:09.787]        // while-condition  =>  FALSE
[16:41:09.787]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:41:09.787]      </control>
[16:41:09.787]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:41:09.787]        // if-block "(__protocol & 0xFFFF) == 1"
[16:41:09.787]          // =>  FALSE
[16:41:09.787]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:41:09.787]      </control>
[16:41:09.787]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:41:09.787]        // if-block "(__protocol & 0xFFFF) == 2"
[16:41:09.787]          // =>  TRUE
[16:41:09.787]        <block atomic="false" info="">
[16:41:09.787]          Message(0, "executing SWD power up");
[16:41:09.787]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:41:09.787]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:41:09.787]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:41:09.787]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:41:09.787]        </block>
[16:41:09.787]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:41:09.787]      </control>
[16:41:09.787]      // end if-block "powered_down"
[16:41:09.787]    </control>
[16:41:09.787]    <block atomic="false" info="">
[16:41:09.787]      __var DEBUG_PORT_VAL    = 0;
[16:41:09.797]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:41:09.797]      __var ACCESS_POINT_VAL  = 0;
[16:41:09.797]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:41:09.797]      __ap = 1; 
[16:41:09.797]        // -> [__ap <= 0x00000001]
[16:41:09.797]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:41:09.797]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:41:09.797]      __ap = 4;
[16:41:09.797]        // -> [__ap <= 0x00000004]
[16:41:09.797]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:09.807]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:41:09.807]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:41:09.807]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:09.807]    </block>
[16:41:09.807]    <block atomic="false" info="">
[16:41:09.807]      __var nReset = 0x80;
[16:41:09.807]        // -> [nReset <= 0x00000080]
[16:41:09.807]      __var canReadPins = 0;
[16:41:09.807]        // -> [canReadPins <= 0x00000000]
[16:41:09.807]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:41:09.807]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:41:09.807]        // -> [canReadPins <= 0x00000001]
[16:41:09.807]    </block>
[16:41:09.807]    <control if="" while="1" timeout="200" info="">
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.807]      // while "1"  (timeout="200")
[16:41:09.807]      // while-condition  =>  TRUE
[16:41:09.817]      // while "1"  (timeout="200")
[16:41:09.817]      // while  =>  TIMEOUT
[16:41:09.817]      // end while "1"
[16:41:09.817]    </control>
[16:41:09.817]    <control if="canReadPins" while="" timeout="0" info="">
[16:41:09.817]      // if-block "canReadPins"
[16:41:09.817]        // =>  TRUE
[16:41:09.817]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:41:09.817]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:41:09.817]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:41:09.817]        // while-condition  =>  FALSE
[16:41:09.817]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:41:09.817]      </control>
[16:41:09.817]      // end if-block "canReadPins"
[16:41:09.817]    </control>
[16:41:09.817]    <control if="!canReadPins" while="" timeout="0" info="">
[16:41:09.817]      // if-block "!canReadPins"
[16:41:09.817]        // =>  FALSE
[16:41:09.817]      // skip if-block "!canReadPins"
[16:41:09.817]    </control>
[16:41:09.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:41:09.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:09.817]        // =>  TRUE
[16:41:09.817]      <block atomic="false" info="">
[16:41:09.817]        WriteAP(0x00, 0x190008);
[16:41:09.817]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:09.817]        WriteAP(0xF0, 0x01);
[16:41:09.827]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:09.827]      </block>
[16:41:09.827]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:09.827]    </control>
[16:41:09.827]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:41:09.827]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:09.827]        // =>  FALSE
[16:41:09.827]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:09.827]    </control>
[16:41:09.827]    <block atomic="false" info="">
[16:41:09.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:09.837]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:41:09.837]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:41:09.837]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:09.837]      __ap = 0; //lets make sure we reset the access point selection
[16:41:09.837]        // -> [__ap <= 0x00000000]
[16:41:09.837]    </block>
[16:41:09.837]  </sequence>
[16:41:09.837]  
[16:41:09.857]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:41:09.857]  
[16:41:09.857]  <debugvars>
[16:41:09.857]    // Pre-defined
[16:41:09.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:09.857]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:09.857]    __dp=0x00000000
[16:41:09.857]    __ap=0x00000000
[16:41:09.857]    __traceout=0x00000000      (Trace Disabled)
[16:41:09.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:09.857]    __FlashAddr=0x00000000
[16:41:09.857]    __FlashLen=0x00000000
[16:41:09.857]    __FlashArg=0x00000000
[16:41:09.857]    __FlashOp=0x00000000
[16:41:09.857]    __Result=0x00000000
[16:41:09.857]  </debugvars>
[16:41:09.857]  
[16:41:09.857]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:41:09.857]    <block atomic="false" info="">
[16:41:09.857]      __var deviceID = 0;
[16:41:09.857]        // -> [deviceID <= 0x00000000]
[16:41:09.857]      __var version = 0;
[16:41:09.857]        // -> [version <= 0x00000000]
[16:41:09.857]      __var partNum = 0;
[16:41:09.857]        // -> [partNum <= 0x00000000]
[16:41:09.857]      __var manuf = 0;
[16:41:09.857]        // -> [manuf <= 0x00000000]
[16:41:09.857]      __var isMSPM0G1X0X_G3X0X = 0;
[16:41:09.857]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:41:09.857]      __var isProduction = 0;
[16:41:09.857]        // -> [isProduction <= 0x00000000]
[16:41:09.857]      __var continueId = 0;
[16:41:09.857]        // -> [continueId <= 0x00000000]
[16:41:09.857]      deviceID =   Read32(0x41C40004);
[16:41:09.867]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:41:09.867]        // -> [deviceID <= 0x2BB8802F]
[16:41:09.867]      version = deviceID >> 28;
[16:41:09.867]        // -> [version <= 0x00000002]
[16:41:09.867]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:41:09.867]        // -> [partNum <= 0x0000BB88]
[16:41:09.867]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:41:09.867]        // -> [manuf <= 0x00000017]
[16:41:09.867]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:41:09.867]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:41:09.867]      isProduction = (version > 0);
[16:41:09.867]        // -> [isProduction <= 0x00000001]
[16:41:09.867]    </block>
[16:41:09.867]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:41:09.867]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:41:09.867]        // =>  FALSE
[16:41:09.867]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:41:09.867]    </control>
[16:41:09.867]    <control if="continueId == 4" while="" timeout="0" info="">
[16:41:09.867]      // if-block "continueId == 4"
[16:41:09.867]        // =>  FALSE
[16:41:09.867]      // skip if-block "continueId == 4"
[16:41:09.867]    </control>
[16:41:09.867]    <control if="!isProduction" while="" timeout="0" info="">
[16:41:09.867]      // if-block "!isProduction"
[16:41:09.867]        // =>  FALSE
[16:41:09.867]      // skip if-block "!isProduction"
[16:41:09.867]    </control>
[16:41:09.867]  </sequence>
[16:41:09.867]  
[16:41:17.880]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:41:17.880]  
[16:41:17.891]  <debugvars>
[16:41:17.891]    // Pre-defined
[16:41:17.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:17.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:17.891]    __dp=0x00000000
[16:41:17.891]    __ap=0x00000000
[16:41:17.891]    __traceout=0x00000000      (Trace Disabled)
[16:41:17.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:17.891]    __FlashAddr=0x00000000
[16:41:17.891]    __FlashLen=0x00000000
[16:41:17.891]    __FlashArg=0x00000000
[16:41:17.891]    __FlashOp=0x00000000
[16:41:17.892]    __Result=0x00000000
[16:41:17.892]  </debugvars>
[16:41:17.892]  
[16:41:17.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:41:17.892]    <block atomic="false" info="">
[16:41:17.892]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:41:17.892]        // -> [isSWJ <= 0x00000001]
[16:41:17.892]      __var hasDormant = __protocol & 0x00020000;
[16:41:17.892]        // -> [hasDormant <= 0x00000000]
[16:41:17.892]      __var protType   = __protocol & 0x0000FFFF;
[16:41:17.892]        // -> [protType <= 0x00000002]
[16:41:17.892]    </block>
[16:41:17.892]    <control if="protType == 1" while="" timeout="0" info="">
[16:41:17.892]      // if-block "protType == 1"
[16:41:17.892]        // =>  FALSE
[16:41:17.892]      // skip if-block "protType == 1"
[16:41:17.892]    </control>
[16:41:17.892]    <control if="protType == 2" while="" timeout="0" info="">
[16:41:17.892]      // if-block "protType == 2"
[16:41:17.892]        // =>  TRUE
[16:41:17.892]      <control if="isSWJ" while="" timeout="0" info="">
[16:41:17.892]        // if-block "isSWJ"
[16:41:17.892]          // =>  TRUE
[16:41:17.894]        <control if="hasDormant" while="" timeout="0" info="">
[16:41:17.894]          // if-block "hasDormant"
[16:41:17.894]            // =>  FALSE
[16:41:17.894]          // skip if-block "hasDormant"
[16:41:17.894]        </control>
[16:41:17.894]        <control if="!hasDormant" while="" timeout="0" info="">
[16:41:17.894]          // if-block "!hasDormant"
[16:41:17.894]            // =>  TRUE
[16:41:17.894]          <block atomic="false" info="">
[16:41:17.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:41:17.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:17.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:41:17.896]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:41:17.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:41:17.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:17.896]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:41:17.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:41:17.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:41:17.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:17.902]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:41:17.902]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:41:17.902]          </block>
[16:41:17.904]          // end if-block "!hasDormant"
[16:41:17.904]        </control>
[16:41:17.904]        // end if-block "isSWJ"
[16:41:17.904]      </control>
[16:41:17.904]      <control if="!isSWJ" while="" timeout="0" info="">
[16:41:17.904]        // if-block "!isSWJ"
[16:41:17.904]          // =>  FALSE
[16:41:17.904]        // skip if-block "!isSWJ"
[16:41:17.904]      </control>
[16:41:17.904]      <block atomic="false" info="">
[16:41:17.904]        ReadDP(0x0);
[16:41:17.904]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:41:17.904]      </block>
[16:41:17.904]      // end if-block "protType == 2"
[16:41:17.904]    </control>
[16:41:17.904]  </sequence>
[16:41:17.904]  
[16:41:17.904]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:41:17.904]  
[16:41:17.904]  <debugvars>
[16:41:17.904]    // Pre-defined
[16:41:17.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:17.904]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:17.904]    __dp=0x00000000
[16:41:17.911]    __ap=0x00000000
[16:41:17.911]    __traceout=0x00000000      (Trace Disabled)
[16:41:17.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:17.911]    __FlashAddr=0x00000000
[16:41:17.911]    __FlashLen=0x00000000
[16:41:17.911]    __FlashArg=0x00000000
[16:41:17.911]    __FlashOp=0x00000000
[16:41:17.911]    __Result=0x00000000
[16:41:17.911]  </debugvars>
[16:41:17.911]  
[16:41:17.911]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:41:17.911]    <block atomic="false" info="">
[16:41:17.911]      __var SW_DP_ABORT       = 0x0;
[16:41:17.911]        // -> [SW_DP_ABORT <= 0x00000000]
[16:41:17.911]      __var DP_CTRL_STAT      = 0x4;
[16:41:17.911]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:41:17.911]      __var DP_SELECT         = 0x8;
[16:41:17.911]        // -> [DP_SELECT <= 0x00000008]
[16:41:17.911]      __var powered_down      = 0;
[16:41:17.911]        // -> [powered_down <= 0x00000000]
[16:41:17.911]      WriteDP(DP_SELECT, 0x00000000);
[16:41:17.914]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:41:17.914]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:41:17.914]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:41:17.914]        // -> [powered_down <= 0x00000001]
[16:41:17.914]    </block>
[16:41:17.914]    <control if="powered_down" while="" timeout="0" info="">
[16:41:17.914]      // if-block "powered_down"
[16:41:17.914]        // =>  TRUE
[16:41:17.914]      <block atomic="false" info="">
[16:41:17.914]        Message(0, "Debug/System power-up request sent");
[16:41:17.920]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:41:17.921]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:41:17.921]      </block>
[16:41:17.921]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:41:17.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:41:17.924]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:41:17.924]        // while-condition  =>  FALSE
[16:41:17.924]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:41:17.924]      </control>
[16:41:17.924]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:41:17.924]        // if-block "(__protocol & 0xFFFF) == 1"
[16:41:17.924]          // =>  FALSE
[16:41:17.924]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:41:17.924]      </control>
[16:41:17.924]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:41:17.924]        // if-block "(__protocol & 0xFFFF) == 2"
[16:41:17.924]          // =>  TRUE
[16:41:17.924]        <block atomic="false" info="">
[16:41:17.924]          Message(0, "executing SWD power up");
[16:41:17.924]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:41:17.924]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:41:17.924]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:41:17.924]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:41:17.924]        </block>
[16:41:17.924]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:41:17.924]      </control>
[16:41:17.924]      // end if-block "powered_down"
[16:41:17.924]    </control>
[16:41:17.924]    <block atomic="false" info="">
[16:41:17.931]      __var DEBUG_PORT_VAL    = 0;
[16:41:17.931]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:41:17.931]      __var ACCESS_POINT_VAL  = 0;
[16:41:17.931]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:41:17.931]      __ap = 1; 
[16:41:17.931]        // -> [__ap <= 0x00000001]
[16:41:17.931]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:41:17.934]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:41:17.934]      __ap = 4;
[16:41:17.934]        // -> [__ap <= 0x00000004]
[16:41:17.934]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:17.934]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:41:17.934]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:41:17.934]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:17.941]    </block>
[16:41:17.941]    <block atomic="false" info="">
[16:41:17.941]      __var nReset = 0x80;
[16:41:17.941]        // -> [nReset <= 0x00000080]
[16:41:17.941]      __var canReadPins = 0;
[16:41:17.941]        // -> [canReadPins <= 0x00000000]
[16:41:17.941]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:41:17.944]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:41:17.944]        // -> [canReadPins <= 0x00000001]
[16:41:17.944]    </block>
[16:41:17.944]    <control if="" while="1" timeout="200" info="">
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.944]      // while "1"  (timeout="200")
[16:41:17.944]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.951]      // while-condition  =>  TRUE
[16:41:17.951]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.954]      // while "1"  (timeout="200")
[16:41:17.954]      // while-condition  =>  TRUE
[16:41:17.962]      // while "1"  (timeout="200")
[16:41:17.962]      // while  =>  TIMEOUT
[16:41:17.962]      // end while "1"
[16:41:17.962]    </control>
[16:41:17.962]    <control if="canReadPins" while="" timeout="0" info="">
[16:41:17.962]      // if-block "canReadPins"
[16:41:17.962]        // =>  TRUE
[16:41:17.962]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:41:17.962]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:41:17.964]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:41:17.964]        // while-condition  =>  FALSE
[16:41:17.964]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:41:17.964]      </control>
[16:41:17.964]      // end if-block "canReadPins"
[16:41:17.964]    </control>
[16:41:17.964]    <control if="!canReadPins" while="" timeout="0" info="">
[16:41:17.964]      // if-block "!canReadPins"
[16:41:17.964]        // =>  FALSE
[16:41:17.964]      // skip if-block "!canReadPins"
[16:41:17.964]    </control>
[16:41:17.964]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:41:17.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:17.964]        // =>  TRUE
[16:41:17.964]      <block atomic="false" info="">
[16:41:17.964]        WriteAP(0x00, 0x190008);
[16:41:17.964]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:17.964]        WriteAP(0xF0, 0x01);
[16:41:17.964]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:17.964]      </block>
[16:41:17.964]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:17.964]    </control>
[16:41:17.964]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:41:17.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:17.964]        // =>  FALSE
[16:41:17.964]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:17.964]    </control>
[16:41:17.964]    <block atomic="false" info="">
[16:41:17.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:17.974]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:41:17.974]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:41:17.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:17.974]      __ap = 0; //lets make sure we reset the access point selection
[16:41:17.974]        // -> [__ap <= 0x00000000]
[16:41:17.974]    </block>
[16:41:17.974]  </sequence>
[16:41:17.974]  
[16:41:17.996]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:41:17.996]  
[16:41:17.996]  <debugvars>
[16:41:17.996]    // Pre-defined
[16:41:17.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:17.996]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:17.996]    __dp=0x00000000
[16:41:17.996]    __ap=0x00000000
[16:41:17.996]    __traceout=0x00000000      (Trace Disabled)
[16:41:17.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:17.996]    __FlashAddr=0x00000000
[16:41:17.996]    __FlashLen=0x00000000
[16:41:17.996]    __FlashArg=0x00000000
[16:41:17.996]    __FlashOp=0x00000000
[16:41:17.996]    __Result=0x00000000
[16:41:17.996]  </debugvars>
[16:41:17.996]  
[16:41:17.996]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:41:17.996]    <block atomic="false" info="">
[16:41:17.996]      __var deviceID = 0;
[16:41:17.996]        // -> [deviceID <= 0x00000000]
[16:41:17.996]      __var version = 0;
[16:41:17.996]        // -> [version <= 0x00000000]
[16:41:17.996]      __var partNum = 0;
[16:41:17.996]        // -> [partNum <= 0x00000000]
[16:41:17.996]      __var manuf = 0;
[16:41:17.996]        // -> [manuf <= 0x00000000]
[16:41:17.996]      __var isMSPM0G1X0X_G3X0X = 0;
[16:41:17.996]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:41:17.996]      __var isProduction = 0;
[16:41:17.996]        // -> [isProduction <= 0x00000000]
[16:41:17.996]      __var continueId = 0;
[16:41:17.996]        // -> [continueId <= 0x00000000]
[16:41:17.996]      deviceID =   Read32(0x41C40004);
[16:41:18.004]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:41:18.004]        // -> [deviceID <= 0x2BB8802F]
[16:41:18.004]      version = deviceID >> 28;
[16:41:18.004]        // -> [version <= 0x00000002]
[16:41:18.004]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:41:18.004]        // -> [partNum <= 0x0000BB88]
[16:41:18.004]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:41:18.004]        // -> [manuf <= 0x00000017]
[16:41:18.004]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:41:18.004]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:41:18.004]      isProduction = (version > 0);
[16:41:18.004]        // -> [isProduction <= 0x00000001]
[16:41:18.004]    </block>
[16:41:18.004]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:41:18.004]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:41:18.004]        // =>  FALSE
[16:41:18.004]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:41:18.004]    </control>
[16:41:18.004]    <control if="continueId == 4" while="" timeout="0" info="">
[16:41:18.004]      // if-block "continueId == 4"
[16:41:18.004]        // =>  FALSE
[16:41:18.004]      // skip if-block "continueId == 4"
[16:41:18.004]    </control>
[16:41:18.004]    <control if="!isProduction" while="" timeout="0" info="">
[16:41:18.004]      // if-block "!isProduction"
[16:41:18.004]        // =>  FALSE
[16:41:18.004]      // skip if-block "!isProduction"
[16:41:18.004]    </control>
[16:41:18.004]  </sequence>
[16:41:18.004]  
[16:42:01.770]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:42:01.770]  
[16:42:01.770]  <debugvars>
[16:42:01.770]    // Pre-defined
[16:42:01.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:01.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:01.770]    __dp=0x00000000
[16:42:01.770]    __ap=0x00000000
[16:42:01.770]    __traceout=0x00000000      (Trace Disabled)
[16:42:01.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:01.770]    __FlashAddr=0x00000000
[16:42:01.770]    __FlashLen=0x00000000
[16:42:01.770]    __FlashArg=0x00000000
[16:42:01.770]    __FlashOp=0x00000000
[16:42:01.770]    __Result=0x00000000
[16:42:01.770]  </debugvars>
[16:42:01.770]  
[16:42:01.770]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:42:01.770]    <block atomic="false" info="">
[16:42:01.770]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:42:01.770]        // -> [isSWJ <= 0x00000001]
[16:42:01.770]      __var hasDormant = __protocol & 0x00020000;
[16:42:01.770]        // -> [hasDormant <= 0x00000000]
[16:42:01.770]      __var protType   = __protocol & 0x0000FFFF;
[16:42:01.770]        // -> [protType <= 0x00000002]
[16:42:01.770]    </block>
[16:42:01.770]    <control if="protType == 1" while="" timeout="0" info="">
[16:42:01.770]      // if-block "protType == 1"
[16:42:01.770]        // =>  FALSE
[16:42:01.780]      // skip if-block "protType == 1"
[16:42:01.780]    </control>
[16:42:01.780]    <control if="protType == 2" while="" timeout="0" info="">
[16:42:01.780]      // if-block "protType == 2"
[16:42:01.780]        // =>  TRUE
[16:42:01.780]      <control if="isSWJ" while="" timeout="0" info="">
[16:42:01.780]        // if-block "isSWJ"
[16:42:01.780]          // =>  TRUE
[16:42:01.780]        <control if="hasDormant" while="" timeout="0" info="">
[16:42:01.780]          // if-block "hasDormant"
[16:42:01.780]            // =>  FALSE
[16:42:01.780]          // skip if-block "hasDormant"
[16:42:01.780]        </control>
[16:42:01.780]        <control if="!hasDormant" while="" timeout="0" info="">
[16:42:01.780]          // if-block "!hasDormant"
[16:42:01.780]            // =>  TRUE
[16:42:01.780]          <block atomic="false" info="">
[16:42:01.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:42:01.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:01.780]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:42:01.780]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:42:01.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:42:01.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:01.780]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:42:01.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:42:01.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:42:01.790]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:01.790]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:42:01.790]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:42:01.790]          </block>
[16:42:01.790]          // end if-block "!hasDormant"
[16:42:01.790]        </control>
[16:42:01.790]        // end if-block "isSWJ"
[16:42:01.790]      </control>
[16:42:01.790]      <control if="!isSWJ" while="" timeout="0" info="">
[16:42:01.790]        // if-block "!isSWJ"
[16:42:01.790]          // =>  FALSE
[16:42:01.790]        // skip if-block "!isSWJ"
[16:42:01.790]      </control>
[16:42:01.790]      <block atomic="false" info="">
[16:42:01.790]        ReadDP(0x0);
[16:42:01.790]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:42:01.790]      </block>
[16:42:01.790]      // end if-block "protType == 2"
[16:42:01.790]    </control>
[16:42:01.790]  </sequence>
[16:42:01.790]  
[16:42:01.800]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:42:01.800]  
[16:42:01.800]  <debugvars>
[16:42:01.800]    // Pre-defined
[16:42:01.800]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:01.800]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:01.800]    __dp=0x00000000
[16:42:01.800]    __ap=0x00000000
[16:42:01.800]    __traceout=0x00000000      (Trace Disabled)
[16:42:01.800]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:01.800]    __FlashAddr=0x00000000
[16:42:01.800]    __FlashLen=0x00000000
[16:42:01.800]    __FlashArg=0x00000000
[16:42:01.800]    __FlashOp=0x00000000
[16:42:01.800]    __Result=0x00000000
[16:42:01.800]  </debugvars>
[16:42:01.800]  
[16:42:01.800]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:42:01.800]    <block atomic="false" info="">
[16:42:01.800]      __var SW_DP_ABORT       = 0x0;
[16:42:01.800]        // -> [SW_DP_ABORT <= 0x00000000]
[16:42:01.800]      __var DP_CTRL_STAT      = 0x4;
[16:42:01.800]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:42:01.800]      __var DP_SELECT         = 0x8;
[16:42:01.800]        // -> [DP_SELECT <= 0x00000008]
[16:42:01.800]      __var powered_down      = 0;
[16:42:01.800]        // -> [powered_down <= 0x00000000]
[16:42:01.800]      WriteDP(DP_SELECT, 0x00000000);
[16:42:01.800]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:42:01.800]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:42:01.800]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:42:01.800]        // -> [powered_down <= 0x00000001]
[16:42:01.800]    </block>
[16:42:01.800]    <control if="powered_down" while="" timeout="0" info="">
[16:42:01.800]      // if-block "powered_down"
[16:42:01.800]        // =>  TRUE
[16:42:01.800]      <block atomic="false" info="">
[16:42:01.800]        Message(0, "Debug/System power-up request sent");
[16:42:01.810]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:42:01.810]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:42:01.810]      </block>
[16:42:01.810]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:42:01.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:42:01.810]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:42:01.810]        // while-condition  =>  FALSE
[16:42:01.810]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:42:01.810]      </control>
[16:42:01.810]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:42:01.810]        // if-block "(__protocol & 0xFFFF) == 1"
[16:42:01.810]          // =>  FALSE
[16:42:01.810]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:42:01.810]      </control>
[16:42:01.810]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:42:01.810]        // if-block "(__protocol & 0xFFFF) == 2"
[16:42:01.810]          // =>  TRUE
[16:42:01.810]        <block atomic="false" info="">
[16:42:01.810]          Message(0, "executing SWD power up");
[16:42:01.810]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:42:01.810]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:42:01.810]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:42:01.820]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:42:01.820]        </block>
[16:42:01.820]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:42:01.820]      </control>
[16:42:01.820]      // end if-block "powered_down"
[16:42:01.820]    </control>
[16:42:01.820]    <block atomic="false" info="">
[16:42:01.820]      __var DEBUG_PORT_VAL    = 0;
[16:42:01.820]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:42:01.820]      __var ACCESS_POINT_VAL  = 0;
[16:42:01.820]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:42:01.820]      __ap = 1; 
[16:42:01.820]        // -> [__ap <= 0x00000001]
[16:42:01.820]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:42:01.820]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:42:01.820]      __ap = 4;
[16:42:01.820]        // -> [__ap <= 0x00000004]
[16:42:01.820]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:42:01.830]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:42:01.830]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:42:01.830]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:42:01.830]    </block>
[16:42:01.830]    <block atomic="false" info="">
[16:42:01.830]      __var nReset = 0x80;
[16:42:01.830]        // -> [nReset <= 0x00000080]
[16:42:01.830]      __var canReadPins = 0;
[16:42:01.830]        // -> [canReadPins <= 0x00000000]
[16:42:01.830]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:42:01.830]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:42:01.830]        // -> [canReadPins <= 0x00000001]
[16:42:01.830]    </block>
[16:42:01.830]    <control if="" while="1" timeout="200" info="">
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.830]      // while "1"  (timeout="200")
[16:42:01.830]      // while-condition  =>  TRUE
[16:42:01.840]      // while "1"  (timeout="200")
[16:42:01.840]      // while  =>  TIMEOUT
[16:42:01.841]      // end while "1"
[16:42:01.841]    </control>
[16:42:01.841]    <control if="canReadPins" while="" timeout="0" info="">
[16:42:01.841]      // if-block "canReadPins"
[16:42:01.841]        // =>  TRUE
[16:42:01.841]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:42:01.841]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:42:01.844]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:42:01.844]        // while-condition  =>  FALSE
[16:42:01.844]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:42:01.844]      </control>
[16:42:01.844]      // end if-block "canReadPins"
[16:42:01.844]    </control>
[16:42:01.844]    <control if="!canReadPins" while="" timeout="0" info="">
[16:42:01.844]      // if-block "!canReadPins"
[16:42:01.844]        // =>  FALSE
[16:42:01.844]      // skip if-block "!canReadPins"
[16:42:01.844]    </control>
[16:42:01.844]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:42:01.844]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:42:01.844]        // =>  TRUE
[16:42:01.844]      <block atomic="false" info="">
[16:42:01.844]        WriteAP(0x00, 0x190008);
[16:42:01.844]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:42:01.844]        WriteAP(0xF0, 0x01);
[16:42:01.851]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:42:01.851]      </block>
[16:42:01.851]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:42:01.851]    </control>
[16:42:01.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:42:01.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:42:01.851]        // =>  FALSE
[16:42:01.851]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:42:01.851]    </control>
[16:42:01.851]    <block atomic="false" info="">
[16:42:01.851]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:42:01.851]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:42:01.851]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:42:01.851]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:42:01.851]      __ap = 0; //lets make sure we reset the access point selection
[16:42:01.851]        // -> [__ap <= 0x00000000]
[16:42:01.851]    </block>
[16:42:01.851]  </sequence>
[16:42:01.851]  
[16:42:01.881]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:42:01.881]  
[16:42:01.881]  <debugvars>
[16:42:01.881]    // Pre-defined
[16:42:01.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:01.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:01.881]    __dp=0x00000000
[16:42:01.881]    __ap=0x00000000
[16:42:01.881]    __traceout=0x00000000      (Trace Disabled)
[16:42:01.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:01.881]    __FlashAddr=0x00000000
[16:42:01.881]    __FlashLen=0x00000000
[16:42:01.891]    __FlashArg=0x00000000
[16:42:01.891]    __FlashOp=0x00000000
[16:42:01.891]    __Result=0x00000000
[16:42:01.891]  </debugvars>
[16:42:01.891]  
[16:42:01.891]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:42:01.891]    <block atomic="false" info="">
[16:42:01.891]      __var deviceID = 0;
[16:42:01.891]        // -> [deviceID <= 0x00000000]
[16:42:01.891]      __var version = 0;
[16:42:01.891]        // -> [version <= 0x00000000]
[16:42:01.891]      __var partNum = 0;
[16:42:01.891]        // -> [partNum <= 0x00000000]
[16:42:01.891]      __var manuf = 0;
[16:42:01.891]        // -> [manuf <= 0x00000000]
[16:42:01.891]      __var isMSPM0G1X0X_G3X0X = 0;
[16:42:01.891]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:42:01.891]      __var isProduction = 0;
[16:42:01.891]        // -> [isProduction <= 0x00000000]
[16:42:01.891]      __var continueId = 0;
[16:42:01.891]        // -> [continueId <= 0x00000000]
[16:42:01.891]      deviceID =   Read32(0x41C40004);
[16:42:01.891]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:42:01.891]        // -> [deviceID <= 0x2BB8802F]
[16:42:01.891]      version = deviceID >> 28;
[16:42:01.891]        // -> [version <= 0x00000002]
[16:42:01.891]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:42:01.901]        // -> [partNum <= 0x0000BB88]
[16:42:01.901]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:42:01.901]        // -> [manuf <= 0x00000017]
[16:42:01.901]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:42:01.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:42:01.901]      isProduction = (version > 0);
[16:42:01.901]        // -> [isProduction <= 0x00000001]
[16:42:01.901]    </block>
[16:42:01.901]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:42:01.901]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:42:01.901]        // =>  FALSE
[16:42:01.901]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:42:01.901]    </control>
[16:42:01.901]    <control if="continueId == 4" while="" timeout="0" info="">
[16:42:01.901]      // if-block "continueId == 4"
[16:42:01.901]        // =>  FALSE
[16:42:01.901]      // skip if-block "continueId == 4"
[16:42:01.901]    </control>
[16:42:01.901]    <control if="!isProduction" while="" timeout="0" info="">
[16:42:01.901]      // if-block "!isProduction"
[16:42:01.901]        // =>  FALSE
[16:42:01.901]      // skip if-block "!isProduction"
[16:42:01.901]    </control>
[16:42:01.901]  </sequence>
[16:42:01.901]  
[16:43:03.213]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:43:03.213]  
[16:43:03.213]  <debugvars>
[16:43:03.213]    // Pre-defined
[16:43:03.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:03.213]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:03.213]    __dp=0x00000000
[16:43:03.213]    __ap=0x00000000
[16:43:03.213]    __traceout=0x00000000      (Trace Disabled)
[16:43:03.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:03.213]    __FlashAddr=0x00000000
[16:43:03.213]    __FlashLen=0x00000000
[16:43:03.213]    __FlashArg=0x00000000
[16:43:03.213]    __FlashOp=0x00000000
[16:43:03.213]    __Result=0x00000000
[16:43:03.213]  </debugvars>
[16:43:03.213]  
[16:43:03.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:43:03.213]    <block atomic="false" info="">
[16:43:03.213]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:43:03.213]        // -> [isSWJ <= 0x00000001]
[16:43:03.213]      __var hasDormant = __protocol & 0x00020000;
[16:43:03.213]        // -> [hasDormant <= 0x00000000]
[16:43:03.213]      __var protType   = __protocol & 0x0000FFFF;
[16:43:03.213]        // -> [protType <= 0x00000002]
[16:43:03.213]    </block>
[16:43:03.213]    <control if="protType == 1" while="" timeout="0" info="">
[16:43:03.213]      // if-block "protType == 1"
[16:43:03.213]        // =>  FALSE
[16:43:03.213]      // skip if-block "protType == 1"
[16:43:03.213]    </control>
[16:43:03.213]    <control if="protType == 2" while="" timeout="0" info="">
[16:43:03.213]      // if-block "protType == 2"
[16:43:03.213]        // =>  TRUE
[16:43:03.213]      <control if="isSWJ" while="" timeout="0" info="">
[16:43:03.213]        // if-block "isSWJ"
[16:43:03.213]          // =>  TRUE
[16:43:03.213]        <control if="hasDormant" while="" timeout="0" info="">
[16:43:03.213]          // if-block "hasDormant"
[16:43:03.213]            // =>  FALSE
[16:43:03.213]          // skip if-block "hasDormant"
[16:43:03.213]        </control>
[16:43:03.213]        <control if="!hasDormant" while="" timeout="0" info="">
[16:43:03.213]          // if-block "!hasDormant"
[16:43:03.213]            // =>  TRUE
[16:43:03.213]          <block atomic="false" info="">
[16:43:03.213]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:43:03.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:03.223]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:43:03.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:43:03.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:43:03.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:03.223]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:43:03.233]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:43:03.233]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:43:03.233]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:03.233]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:43:03.243]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:43:03.243]          </block>
[16:43:03.243]          // end if-block "!hasDormant"
[16:43:03.243]        </control>
[16:43:03.243]        // end if-block "isSWJ"
[16:43:03.243]      </control>
[16:43:03.243]      <control if="!isSWJ" while="" timeout="0" info="">
[16:43:03.243]        // if-block "!isSWJ"
[16:43:03.243]          // =>  FALSE
[16:43:03.243]        // skip if-block "!isSWJ"
[16:43:03.243]      </control>
[16:43:03.243]      <block atomic="false" info="">
[16:43:03.243]        ReadDP(0x0);
[16:43:03.243]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:43:03.243]      </block>
[16:43:03.243]      // end if-block "protType == 2"
[16:43:03.243]    </control>
[16:43:03.243]  </sequence>
[16:43:03.243]  
[16:43:03.253]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:43:03.253]  
[16:43:03.253]  <debugvars>
[16:43:03.253]    // Pre-defined
[16:43:03.253]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:03.253]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:03.253]    __dp=0x00000000
[16:43:03.253]    __ap=0x00000000
[16:43:03.253]    __traceout=0x00000000      (Trace Disabled)
[16:43:03.253]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:03.253]    __FlashAddr=0x00000000
[16:43:03.253]    __FlashLen=0x00000000
[16:43:03.253]    __FlashArg=0x00000000
[16:43:03.253]    __FlashOp=0x00000000
[16:43:03.253]    __Result=0x00000000
[16:43:03.253]  </debugvars>
[16:43:03.253]  
[16:43:03.253]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:43:03.253]    <block atomic="false" info="">
[16:43:03.253]      __var SW_DP_ABORT       = 0x0;
[16:43:03.253]        // -> [SW_DP_ABORT <= 0x00000000]
[16:43:03.253]      __var DP_CTRL_STAT      = 0x4;
[16:43:03.253]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:43:03.253]      __var DP_SELECT         = 0x8;
[16:43:03.253]        // -> [DP_SELECT <= 0x00000008]
[16:43:03.253]      __var powered_down      = 0;
[16:43:03.253]        // -> [powered_down <= 0x00000000]
[16:43:03.253]      WriteDP(DP_SELECT, 0x00000000);
[16:43:03.253]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:43:03.253]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:43:03.253]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:43:03.253]        // -> [powered_down <= 0x00000001]
[16:43:03.253]    </block>
[16:43:03.253]    <control if="powered_down" while="" timeout="0" info="">
[16:43:03.253]      // if-block "powered_down"
[16:43:03.253]        // =>  TRUE
[16:43:03.253]      <block atomic="false" info="">
[16:43:03.253]        Message(0, "Debug/System power-up request sent");
[16:43:03.263]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:43:03.263]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:43:03.263]      </block>
[16:43:03.263]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:43:03.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:43:03.263]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:43:03.263]        // while-condition  =>  FALSE
[16:43:03.263]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:43:03.263]      </control>
[16:43:03.263]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:43:03.263]        // if-block "(__protocol & 0xFFFF) == 1"
[16:43:03.263]          // =>  FALSE
[16:43:03.263]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:43:03.263]      </control>
[16:43:03.263]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:43:03.263]        // if-block "(__protocol & 0xFFFF) == 2"
[16:43:03.263]          // =>  TRUE
[16:43:03.263]        <block atomic="false" info="">
[16:43:03.263]          Message(0, "executing SWD power up");
[16:43:03.263]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:43:03.273]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:43:03.273]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:43:03.273]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:43:03.273]        </block>
[16:43:03.273]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:43:03.273]      </control>
[16:43:03.273]      // end if-block "powered_down"
[16:43:03.273]    </control>
[16:43:03.273]    <block atomic="false" info="">
[16:43:03.273]      __var DEBUG_PORT_VAL    = 0;
[16:43:03.273]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:43:03.273]      __var ACCESS_POINT_VAL  = 0;
[16:43:03.273]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:43:03.273]      __ap = 1; 
[16:43:03.273]        // -> [__ap <= 0x00000001]
[16:43:03.273]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:43:03.273]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:43:03.273]      __ap = 4;
[16:43:03.273]        // -> [__ap <= 0x00000004]
[16:43:03.273]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:03.283]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:43:03.283]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:43:03.283]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:03.283]    </block>
[16:43:03.283]    <block atomic="false" info="">
[16:43:03.283]      __var nReset = 0x80;
[16:43:03.283]        // -> [nReset <= 0x00000080]
[16:43:03.283]      __var canReadPins = 0;
[16:43:03.283]        // -> [canReadPins <= 0x00000000]
[16:43:03.283]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:43:03.283]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:43:03.283]        // -> [canReadPins <= 0x00000001]
[16:43:03.283]    </block>
[16:43:03.283]    <control if="" while="1" timeout="200" info="">
[16:43:03.292]      // while "1"  (timeout="200")
[16:43:03.292]      // while-condition  =>  TRUE
[16:43:03.292]      // while "1"  (timeout="200")
[16:43:03.292]      // while-condition  =>  TRUE
[16:43:03.292]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.293]      // while "1"  (timeout="200")
[16:43:03.293]      // while-condition  =>  TRUE
[16:43:03.303]      // while "1"  (timeout="200")
[16:43:03.303]      // while  =>  TIMEOUT
[16:43:03.303]      // end while "1"
[16:43:03.303]    </control>
[16:43:03.303]    <control if="canReadPins" while="" timeout="0" info="">
[16:43:03.303]      // if-block "canReadPins"
[16:43:03.303]        // =>  TRUE
[16:43:03.303]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:43:03.303]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:43:03.303]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:43:03.303]        // while-condition  =>  FALSE
[16:43:03.303]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:43:03.303]      </control>
[16:43:03.303]      // end if-block "canReadPins"
[16:43:03.303]    </control>
[16:43:03.303]    <control if="!canReadPins" while="" timeout="0" info="">
[16:43:03.303]      // if-block "!canReadPins"
[16:43:03.303]        // =>  FALSE
[16:43:03.303]      // skip if-block "!canReadPins"
[16:43:03.303]    </control>
[16:43:03.303]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:43:03.303]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:03.303]        // =>  TRUE
[16:43:03.303]      <block atomic="false" info="">
[16:43:03.303]        WriteAP(0x00, 0x190008);
[16:43:03.303]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:03.313]        WriteAP(0xF0, 0x01);
[16:43:03.315]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:03.315]      </block>
[16:43:03.315]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:03.315]    </control>
[16:43:03.315]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:43:03.315]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:03.315]        // =>  FALSE
[16:43:03.315]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:03.315]    </control>
[16:43:03.315]    <block atomic="false" info="">
[16:43:03.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:03.325]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:43:03.325]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:43:03.325]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:03.325]      __ap = 0; //lets make sure we reset the access point selection
[16:43:03.325]        // -> [__ap <= 0x00000000]
[16:43:03.325]    </block>
[16:43:03.325]  </sequence>
[16:43:03.325]  
[16:43:03.353]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:43:03.353]  
[16:43:03.353]  <debugvars>
[16:43:03.353]    // Pre-defined
[16:43:03.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:03.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:03.353]    __dp=0x00000000
[16:43:03.353]    __ap=0x00000000
[16:43:03.353]    __traceout=0x00000000      (Trace Disabled)
[16:43:03.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:03.353]    __FlashAddr=0x00000000
[16:43:03.353]    __FlashLen=0x00000000
[16:43:03.353]    __FlashArg=0x00000000
[16:43:03.353]    __FlashOp=0x00000000
[16:43:03.353]    __Result=0x00000000
[16:43:03.353]  </debugvars>
[16:43:03.353]  
[16:43:03.353]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:43:03.353]    <block atomic="false" info="">
[16:43:03.353]      __var deviceID = 0;
[16:43:03.353]        // -> [deviceID <= 0x00000000]
[16:43:03.353]      __var version = 0;
[16:43:03.353]        // -> [version <= 0x00000000]
[16:43:03.353]      __var partNum = 0;
[16:43:03.353]        // -> [partNum <= 0x00000000]
[16:43:03.353]      __var manuf = 0;
[16:43:03.353]        // -> [manuf <= 0x00000000]
[16:43:03.353]      __var isMSPM0G1X0X_G3X0X = 0;
[16:43:03.353]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:43:03.353]      __var isProduction = 0;
[16:43:03.353]        // -> [isProduction <= 0x00000000]
[16:43:03.353]      __var continueId = 0;
[16:43:03.353]        // -> [continueId <= 0x00000000]
[16:43:03.353]      deviceID =   Read32(0x41C40004);
[16:43:03.363]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:43:03.363]        // -> [deviceID <= 0x2BB8802F]
[16:43:03.363]      version = deviceID >> 28;
[16:43:03.363]        // -> [version <= 0x00000002]
[16:43:03.363]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:43:03.363]        // -> [partNum <= 0x0000BB88]
[16:43:03.363]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:43:03.363]        // -> [manuf <= 0x00000017]
[16:43:03.363]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:43:03.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:43:03.363]      isProduction = (version > 0);
[16:43:03.363]        // -> [isProduction <= 0x00000001]
[16:43:03.363]    </block>
[16:43:03.363]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:43:03.363]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:43:03.363]        // =>  FALSE
[16:43:03.363]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:43:03.363]    </control>
[16:43:03.363]    <control if="continueId == 4" while="" timeout="0" info="">
[16:43:03.363]      // if-block "continueId == 4"
[16:43:03.363]        // =>  FALSE
[16:43:03.363]      // skip if-block "continueId == 4"
[16:43:03.363]    </control>
[16:43:03.363]    <control if="!isProduction" while="" timeout="0" info="">
[16:43:03.363]      // if-block "!isProduction"
[16:43:03.363]        // =>  FALSE
[16:43:03.363]      // skip if-block "!isProduction"
[16:43:03.363]    </control>
[16:43:03.363]  </sequence>
[16:43:03.363]  
[16:43:36.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:43:36.455]  
[16:43:36.455]  <debugvars>
[16:43:36.455]    // Pre-defined
[16:43:36.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:36.455]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:36.455]    __dp=0x00000000
[16:43:36.455]    __ap=0x00000000
[16:43:36.455]    __traceout=0x00000000      (Trace Disabled)
[16:43:36.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:36.455]    __FlashAddr=0x00000000
[16:43:36.455]    __FlashLen=0x00000000
[16:43:36.455]    __FlashArg=0x00000000
[16:43:36.455]    __FlashOp=0x00000000
[16:43:36.455]    __Result=0x00000000
[16:43:36.455]  </debugvars>
[16:43:36.455]  
[16:43:36.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:43:36.455]    <block atomic="false" info="">
[16:43:36.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:43:36.455]        // -> [isSWJ <= 0x00000001]
[16:43:36.455]      __var hasDormant = __protocol & 0x00020000;
[16:43:36.455]        // -> [hasDormant <= 0x00000000]
[16:43:36.459]      __var protType   = __protocol & 0x0000FFFF;
[16:43:36.459]        // -> [protType <= 0x00000002]
[16:43:36.459]    </block>
[16:43:36.459]    <control if="protType == 1" while="" timeout="0" info="">
[16:43:36.459]      // if-block "protType == 1"
[16:43:36.459]        // =>  FALSE
[16:43:36.459]      // skip if-block "protType == 1"
[16:43:36.459]    </control>
[16:43:36.460]    <control if="protType == 2" while="" timeout="0" info="">
[16:43:36.460]      // if-block "protType == 2"
[16:43:36.460]        // =>  TRUE
[16:43:36.460]      <control if="isSWJ" while="" timeout="0" info="">
[16:43:36.460]        // if-block "isSWJ"
[16:43:36.460]          // =>  TRUE
[16:43:36.460]        <control if="hasDormant" while="" timeout="0" info="">
[16:43:36.460]          // if-block "hasDormant"
[16:43:36.460]            // =>  FALSE
[16:43:36.460]          // skip if-block "hasDormant"
[16:43:36.460]        </control>
[16:43:36.460]        <control if="!hasDormant" while="" timeout="0" info="">
[16:43:36.460]          // if-block "!hasDormant"
[16:43:36.460]            // =>  TRUE
[16:43:36.460]          <block atomic="false" info="">
[16:43:36.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:43:36.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:36.465]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:43:36.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:43:36.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:43:36.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:36.470]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:43:36.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:43:36.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:43:36.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:36.470]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:43:36.470]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:43:36.470]          </block>
[16:43:36.470]          // end if-block "!hasDormant"
[16:43:36.470]        </control>
[16:43:36.470]        // end if-block "isSWJ"
[16:43:36.470]      </control>
[16:43:36.470]      <control if="!isSWJ" while="" timeout="0" info="">
[16:43:36.470]        // if-block "!isSWJ"
[16:43:36.475]          // =>  FALSE
[16:43:36.475]        // skip if-block "!isSWJ"
[16:43:36.475]      </control>
[16:43:36.475]      <block atomic="false" info="">
[16:43:36.475]        ReadDP(0x0);
[16:43:36.480]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:43:36.480]      </block>
[16:43:36.480]      // end if-block "protType == 2"
[16:43:36.480]    </control>
[16:43:36.480]  </sequence>
[16:43:36.480]  
[16:43:36.485]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:43:36.485]  
[16:43:36.485]  <debugvars>
[16:43:36.485]    // Pre-defined
[16:43:36.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:36.485]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:36.485]    __dp=0x00000000
[16:43:36.485]    __ap=0x00000000
[16:43:36.485]    __traceout=0x00000000      (Trace Disabled)
[16:43:36.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:36.485]    __FlashAddr=0x00000000
[16:43:36.485]    __FlashLen=0x00000000
[16:43:36.485]    __FlashArg=0x00000000
[16:43:36.485]    __FlashOp=0x00000000
[16:43:36.485]    __Result=0x00000000
[16:43:36.485]  </debugvars>
[16:43:36.485]  
[16:43:36.485]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:43:36.485]    <block atomic="false" info="">
[16:43:36.485]      __var SW_DP_ABORT       = 0x0;
[16:43:36.485]        // -> [SW_DP_ABORT <= 0x00000000]
[16:43:36.485]      __var DP_CTRL_STAT      = 0x4;
[16:43:36.485]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:43:36.485]      __var DP_SELECT         = 0x8;
[16:43:36.485]        // -> [DP_SELECT <= 0x00000008]
[16:43:36.485]      __var powered_down      = 0;
[16:43:36.485]        // -> [powered_down <= 0x00000000]
[16:43:36.485]      WriteDP(DP_SELECT, 0x00000000);
[16:43:36.490]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:43:36.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:43:36.490]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:43:36.490]        // -> [powered_down <= 0x00000001]
[16:43:36.490]    </block>
[16:43:36.490]    <control if="powered_down" while="" timeout="0" info="">
[16:43:36.490]      // if-block "powered_down"
[16:43:36.490]        // =>  TRUE
[16:43:36.490]      <block atomic="false" info="">
[16:43:36.495]        Message(0, "Debug/System power-up request sent");
[16:43:36.495]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:43:36.495]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:43:36.500]      </block>
[16:43:36.500]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:43:36.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:43:36.500]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:43:36.500]        // while-condition  =>  FALSE
[16:43:36.500]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:43:36.500]      </control>
[16:43:36.500]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:43:36.500]        // if-block "(__protocol & 0xFFFF) == 1"
[16:43:36.500]          // =>  FALSE
[16:43:36.500]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:43:36.500]      </control>
[16:43:36.500]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:43:36.500]        // if-block "(__protocol & 0xFFFF) == 2"
[16:43:36.500]          // =>  TRUE
[16:43:36.500]        <block atomic="false" info="">
[16:43:36.500]          Message(0, "executing SWD power up");
[16:43:36.500]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:43:36.510]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:43:36.510]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:43:36.510]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:43:36.510]        </block>
[16:43:36.510]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:43:36.510]      </control>
[16:43:36.510]      // end if-block "powered_down"
[16:43:36.510]    </control>
[16:43:36.510]    <block atomic="false" info="">
[16:43:36.510]      __var DEBUG_PORT_VAL    = 0;
[16:43:36.510]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:43:36.510]      __var ACCESS_POINT_VAL  = 0;
[16:43:36.510]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:43:36.510]      __ap = 1; 
[16:43:36.510]        // -> [__ap <= 0x00000001]
[16:43:36.510]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:43:36.515]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:43:36.515]      __ap = 4;
[16:43:36.515]        // -> [__ap <= 0x00000004]
[16:43:36.515]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:36.520]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:43:36.520]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:43:36.520]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:36.525]    </block>
[16:43:36.525]    <block atomic="false" info="">
[16:43:36.525]      __var nReset = 0x80;
[16:43:36.525]        // -> [nReset <= 0x00000080]
[16:43:36.525]      __var canReadPins = 0;
[16:43:36.525]        // -> [canReadPins <= 0x00000000]
[16:43:36.525]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:43:36.530]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:43:36.530]        // -> [canReadPins <= 0x00000001]
[16:43:36.530]    </block>
[16:43:36.530]    <control if="" while="1" timeout="200" info="">
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.530]      // while-condition  =>  TRUE
[16:43:36.530]      // while "1"  (timeout="200")
[16:43:36.535]      // while-condition  =>  TRUE
[16:43:36.535]      // while "1"  (timeout="200")
[16:43:36.535]      // while  =>  TIMEOUT
[16:43:36.535]      // end while "1"
[16:43:36.535]    </control>
[16:43:36.535]    <control if="canReadPins" while="" timeout="0" info="">
[16:43:36.535]      // if-block "canReadPins"
[16:43:36.535]        // =>  TRUE
[16:43:36.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:43:36.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:43:36.535]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:43:36.535]        // while-condition  =>  FALSE
[16:43:36.535]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:43:36.535]      </control>
[16:43:36.535]      // end if-block "canReadPins"
[16:43:36.535]    </control>
[16:43:36.535]    <control if="!canReadPins" while="" timeout="0" info="">
[16:43:36.535]      // if-block "!canReadPins"
[16:43:36.535]        // =>  FALSE
[16:43:36.535]      // skip if-block "!canReadPins"
[16:43:36.535]    </control>
[16:43:36.535]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:43:36.535]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:36.535]        // =>  TRUE
[16:43:36.535]      <block atomic="false" info="">
[16:43:36.535]        WriteAP(0x00, 0x190008);
[16:43:36.540]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:36.540]        WriteAP(0xF0, 0x01);
[16:43:36.540]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:36.540]      </block>
[16:43:36.540]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:36.545]    </control>
[16:43:36.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:43:36.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:36.545]        // =>  FALSE
[16:43:36.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:36.545]    </control>
[16:43:36.545]    <block atomic="false" info="">
[16:43:36.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:36.550]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:43:36.550]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:43:36.550]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:36.550]      __ap = 0; //lets make sure we reset the access point selection
[16:43:36.555]        // -> [__ap <= 0x00000000]
[16:43:36.555]    </block>
[16:43:36.555]  </sequence>
[16:43:36.555]  
[16:43:36.580]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:43:36.580]  
[16:43:36.580]  <debugvars>
[16:43:36.580]    // Pre-defined
[16:43:36.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:36.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:36.585]    __dp=0x00000000
[16:43:36.585]    __ap=0x00000000
[16:43:36.585]    __traceout=0x00000000      (Trace Disabled)
[16:43:36.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:36.585]    __FlashAddr=0x00000000
[16:43:36.585]    __FlashLen=0x00000000
[16:43:36.585]    __FlashArg=0x00000000
[16:43:36.585]    __FlashOp=0x00000000
[16:43:36.585]    __Result=0x00000000
[16:43:36.585]  </debugvars>
[16:43:36.585]  
[16:43:36.585]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:43:36.585]    <block atomic="false" info="">
[16:43:36.585]      __var deviceID = 0;
[16:43:36.585]        // -> [deviceID <= 0x00000000]
[16:43:36.585]      __var version = 0;
[16:43:36.585]        // -> [version <= 0x00000000]
[16:43:36.585]      __var partNum = 0;
[16:43:36.585]        // -> [partNum <= 0x00000000]
[16:43:36.585]      __var manuf = 0;
[16:43:36.585]        // -> [manuf <= 0x00000000]
[16:43:36.585]      __var isMSPM0G1X0X_G3X0X = 0;
[16:43:36.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:43:36.585]      __var isProduction = 0;
[16:43:36.585]        // -> [isProduction <= 0x00000000]
[16:43:36.585]      __var continueId = 0;
[16:43:36.585]        // -> [continueId <= 0x00000000]
[16:43:36.585]      deviceID =   Read32(0x41C40004);
[16:43:36.594]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:43:36.594]        // -> [deviceID <= 0x2BB8802F]
[16:43:36.594]      version = deviceID >> 28;
[16:43:36.594]        // -> [version <= 0x00000002]
[16:43:36.594]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:43:36.594]        // -> [partNum <= 0x0000BB88]
[16:43:36.594]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:43:36.594]        // -> [manuf <= 0x00000017]
[16:43:36.594]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:43:36.594]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:43:36.594]      isProduction = (version > 0);
[16:43:36.594]        // -> [isProduction <= 0x00000001]
[16:43:36.594]    </block>
[16:43:36.594]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:43:36.594]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:43:36.594]        // =>  FALSE
[16:43:36.594]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:43:36.594]    </control>
[16:43:36.594]    <control if="continueId == 4" while="" timeout="0" info="">
[16:43:36.594]      // if-block "continueId == 4"
[16:43:36.594]        // =>  FALSE
[16:43:36.594]      // skip if-block "continueId == 4"
[16:43:36.594]    </control>
[16:43:36.594]    <control if="!isProduction" while="" timeout="0" info="">
[16:43:36.594]      // if-block "!isProduction"
[16:43:36.600]        // =>  FALSE
[16:43:36.600]      // skip if-block "!isProduction"
[16:43:36.600]    </control>
[16:43:36.600]  </sequence>
[16:43:36.600]  
[16:44:16.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:44:16.218]  
[16:44:16.234]  <debugvars>
[16:44:16.234]    // Pre-defined
[16:44:16.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:16.234]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:16.234]    __dp=0x00000000
[16:44:16.234]    __ap=0x00000000
[16:44:16.234]    __traceout=0x00000000      (Trace Disabled)
[16:44:16.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:16.234]    __FlashAddr=0x00000000
[16:44:16.234]    __FlashLen=0x00000000
[16:44:16.234]    __FlashArg=0x00000000
[16:44:16.234]    __FlashOp=0x00000000
[16:44:16.234]    __Result=0x00000000
[16:44:16.234]  </debugvars>
[16:44:16.234]  
[16:44:16.234]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:44:16.234]    <block atomic="false" info="">
[16:44:16.234]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:44:16.234]        // -> [isSWJ <= 0x00000001]
[16:44:16.234]      __var hasDormant = __protocol & 0x00020000;
[16:44:16.234]        // -> [hasDormant <= 0x00000000]
[16:44:16.234]      __var protType   = __protocol & 0x0000FFFF;
[16:44:16.234]        // -> [protType <= 0x00000002]
[16:44:16.234]    </block>
[16:44:16.234]    <control if="protType == 1" while="" timeout="0" info="">
[16:44:16.234]      // if-block "protType == 1"
[16:44:16.234]        // =>  FALSE
[16:44:16.234]      // skip if-block "protType == 1"
[16:44:16.234]    </control>
[16:44:16.234]    <control if="protType == 2" while="" timeout="0" info="">
[16:44:16.234]      // if-block "protType == 2"
[16:44:16.234]        // =>  TRUE
[16:44:16.234]      <control if="isSWJ" while="" timeout="0" info="">
[16:44:16.234]        // if-block "isSWJ"
[16:44:16.234]          // =>  TRUE
[16:44:16.238]        <control if="hasDormant" while="" timeout="0" info="">
[16:44:16.238]          // if-block "hasDormant"
[16:44:16.238]            // =>  FALSE
[16:44:16.238]          // skip if-block "hasDormant"
[16:44:16.238]        </control>
[16:44:16.238]        <control if="!hasDormant" while="" timeout="0" info="">
[16:44:16.238]          // if-block "!hasDormant"
[16:44:16.238]            // =>  TRUE
[16:44:16.238]          <block atomic="false" info="">
[16:44:16.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:44:16.240]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:16.240]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:44:16.248]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:44:16.248]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:44:16.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:16.248]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:44:16.248]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:44:16.248]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:44:16.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:16.248]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:44:16.248]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:44:16.248]          </block>
[16:44:16.248]          // end if-block "!hasDormant"
[16:44:16.248]        </control>
[16:44:16.248]        // end if-block "isSWJ"
[16:44:16.248]      </control>
[16:44:16.248]      <control if="!isSWJ" while="" timeout="0" info="">
[16:44:16.248]        // if-block "!isSWJ"
[16:44:16.248]          // =>  FALSE
[16:44:16.248]        // skip if-block "!isSWJ"
[16:44:16.248]      </control>
[16:44:16.248]      <block atomic="false" info="">
[16:44:16.248]        ReadDP(0x0);
[16:44:16.258]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:44:16.258]      </block>
[16:44:16.258]      // end if-block "protType == 2"
[16:44:16.258]    </control>
[16:44:16.258]  </sequence>
[16:44:16.258]  
[16:44:16.268]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:44:16.268]  
[16:44:16.269]  <debugvars>
[16:44:16.269]    // Pre-defined
[16:44:16.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:16.269]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:16.269]    __dp=0x00000000
[16:44:16.269]    __ap=0x00000000
[16:44:16.269]    __traceout=0x00000000      (Trace Disabled)
[16:44:16.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:16.269]    __FlashAddr=0x00000000
[16:44:16.269]    __FlashLen=0x00000000
[16:44:16.269]    __FlashArg=0x00000000
[16:44:16.269]    __FlashOp=0x00000000
[16:44:16.269]    __Result=0x00000000
[16:44:16.269]  </debugvars>
[16:44:16.269]  
[16:44:16.269]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:44:16.269]    <block atomic="false" info="">
[16:44:16.269]      __var SW_DP_ABORT       = 0x0;
[16:44:16.269]        // -> [SW_DP_ABORT <= 0x00000000]
[16:44:16.269]      __var DP_CTRL_STAT      = 0x4;
[16:44:16.269]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:44:16.269]      __var DP_SELECT         = 0x8;
[16:44:16.269]        // -> [DP_SELECT <= 0x00000008]
[16:44:16.269]      __var powered_down      = 0;
[16:44:16.269]        // -> [powered_down <= 0x00000000]
[16:44:16.269]      WriteDP(DP_SELECT, 0x00000000);
[16:44:16.269]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:44:16.269]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:44:16.269]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:44:16.269]        // -> [powered_down <= 0x00000001]
[16:44:16.269]    </block>
[16:44:16.269]    <control if="powered_down" while="" timeout="0" info="">
[16:44:16.269]      // if-block "powered_down"
[16:44:16.269]        // =>  TRUE
[16:44:16.269]      <block atomic="false" info="">
[16:44:16.269]        Message(0, "Debug/System power-up request sent");
[16:44:16.279]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:44:16.279]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:44:16.279]      </block>
[16:44:16.279]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:44:16.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:44:16.290]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:44:16.290]        // while-condition  =>  FALSE
[16:44:16.290]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:44:16.290]      </control>
[16:44:16.290]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:44:16.293]        // if-block "(__protocol & 0xFFFF) == 1"
[16:44:16.293]          // =>  FALSE
[16:44:16.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:44:16.293]      </control>
[16:44:16.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:44:16.293]        // if-block "(__protocol & 0xFFFF) == 2"
[16:44:16.293]          // =>  TRUE
[16:44:16.293]        <block atomic="false" info="">
[16:44:16.293]          Message(0, "executing SWD power up");
[16:44:16.294]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:44:16.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:44:16.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:44:16.298]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:44:16.298]        </block>
[16:44:16.298]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:44:16.298]      </control>
[16:44:16.298]      // end if-block "powered_down"
[16:44:16.298]    </control>
[16:44:16.298]    <block atomic="false" info="">
[16:44:16.298]      __var DEBUG_PORT_VAL    = 0;
[16:44:16.298]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:44:16.298]      __var ACCESS_POINT_VAL  = 0;
[16:44:16.298]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:44:16.298]      __ap = 1; 
[16:44:16.298]        // -> [__ap <= 0x00000001]
[16:44:16.298]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:44:16.298]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:44:16.308]      __ap = 4;
[16:44:16.308]        // -> [__ap <= 0x00000004]
[16:44:16.308]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:16.310]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:44:16.310]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:44:16.310]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:16.310]    </block>
[16:44:16.310]    <block atomic="false" info="">
[16:44:16.310]      __var nReset = 0x80;
[16:44:16.310]        // -> [nReset <= 0x00000080]
[16:44:16.310]      __var canReadPins = 0;
[16:44:16.310]        // -> [canReadPins <= 0x00000000]
[16:44:16.310]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:44:16.310]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:44:16.310]        // -> [canReadPins <= 0x00000001]
[16:44:16.318]    </block>
[16:44:16.318]    <control if="" while="1" timeout="200" info="">
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.318]      // while-condition  =>  TRUE
[16:44:16.318]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.328]      // while-condition  =>  TRUE
[16:44:16.328]      // while "1"  (timeout="200")
[16:44:16.338]      // while-condition  =>  TRUE
[16:44:16.338]      // while "1"  (timeout="200")
[16:44:16.338]      // while  =>  TIMEOUT
[16:44:16.338]      // end while "1"
[16:44:16.338]    </control>
[16:44:16.338]    <control if="canReadPins" while="" timeout="0" info="">
[16:44:16.338]      // if-block "canReadPins"
[16:44:16.338]        // =>  TRUE
[16:44:16.339]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:44:16.339]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:44:16.339]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:44:16.339]        // while-condition  =>  FALSE
[16:44:16.339]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:44:16.339]      </control>
[16:44:16.339]      // end if-block "canReadPins"
[16:44:16.339]    </control>
[16:44:16.339]    <control if="!canReadPins" while="" timeout="0" info="">
[16:44:16.339]      // if-block "!canReadPins"
[16:44:16.339]        // =>  FALSE
[16:44:16.339]      // skip if-block "!canReadPins"
[16:44:16.339]    </control>
[16:44:16.339]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:44:16.339]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:16.339]        // =>  TRUE
[16:44:16.339]      <block atomic="false" info="">
[16:44:16.339]        WriteAP(0x00, 0x190008);
[16:44:16.347]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:16.347]        WriteAP(0xF0, 0x01);
[16:44:16.349]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:16.349]      </block>
[16:44:16.349]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:16.349]    </control>
[16:44:16.349]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:44:16.349]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:16.349]        // =>  FALSE
[16:44:16.349]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:16.349]    </control>
[16:44:16.349]    <block atomic="false" info="">
[16:44:16.349]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:16.358]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:44:16.358]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:44:16.358]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:16.358]      __ap = 0; //lets make sure we reset the access point selection
[16:44:16.358]        // -> [__ap <= 0x00000000]
[16:44:16.358]    </block>
[16:44:16.358]  </sequence>
[16:44:16.358]  
[16:44:16.388]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:44:16.388]  
[16:44:16.388]  <debugvars>
[16:44:16.388]    // Pre-defined
[16:44:16.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:16.388]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:16.388]    __dp=0x00000000
[16:44:16.388]    __ap=0x00000000
[16:44:16.388]    __traceout=0x00000000      (Trace Disabled)
[16:44:16.393]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:16.393]    __FlashAddr=0x00000000
[16:44:16.393]    __FlashLen=0x00000000
[16:44:16.393]    __FlashArg=0x00000000
[16:44:16.393]    __FlashOp=0x00000000
[16:44:16.393]    __Result=0x00000000
[16:44:16.393]  </debugvars>
[16:44:16.393]  
[16:44:16.393]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:44:16.393]    <block atomic="false" info="">
[16:44:16.393]      __var deviceID = 0;
[16:44:16.393]        // -> [deviceID <= 0x00000000]
[16:44:16.393]      __var version = 0;
[16:44:16.393]        // -> [version <= 0x00000000]
[16:44:16.393]      __var partNum = 0;
[16:44:16.393]        // -> [partNum <= 0x00000000]
[16:44:16.393]      __var manuf = 0;
[16:44:16.393]        // -> [manuf <= 0x00000000]
[16:44:16.393]      __var isMSPM0G1X0X_G3X0X = 0;
[16:44:16.393]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:44:16.393]      __var isProduction = 0;
[16:44:16.393]        // -> [isProduction <= 0x00000000]
[16:44:16.393]      __var continueId = 0;
[16:44:16.393]        // -> [continueId <= 0x00000000]
[16:44:16.393]      deviceID =   Read32(0x41C40004);
[16:44:16.407]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:44:16.408]        // -> [deviceID <= 0x2BB8802F]
[16:44:16.408]      version = deviceID >> 28;
[16:44:16.408]        // -> [version <= 0x00000002]
[16:44:16.408]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:44:16.408]        // -> [partNum <= 0x0000BB88]
[16:44:16.408]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:44:16.408]        // -> [manuf <= 0x00000017]
[16:44:16.408]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:44:16.408]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:44:16.408]      isProduction = (version > 0);
[16:44:16.408]        // -> [isProduction <= 0x00000001]
[16:44:16.408]    </block>
[16:44:16.408]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:44:16.408]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:44:16.408]        // =>  FALSE
[16:44:16.408]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:44:16.408]    </control>
[16:44:16.408]    <control if="continueId == 4" while="" timeout="0" info="">
[16:44:16.408]      // if-block "continueId == 4"
[16:44:16.408]        // =>  FALSE
[16:44:16.408]      // skip if-block "continueId == 4"
[16:44:16.408]    </control>
[16:44:16.408]    <control if="!isProduction" while="" timeout="0" info="">
[16:44:16.408]      // if-block "!isProduction"
[16:44:16.408]        // =>  FALSE
[16:44:16.408]      // skip if-block "!isProduction"
[16:44:16.408]    </control>
[16:44:16.408]  </sequence>
[16:44:16.408]  
[16:45:04.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:45:04.359]  
[16:45:04.359]  <debugvars>
[16:45:04.359]    // Pre-defined
[16:45:04.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:04.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:04.359]    __dp=0x00000000
[16:45:04.359]    __ap=0x00000000
[16:45:04.359]    __traceout=0x00000000      (Trace Disabled)
[16:45:04.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:04.361]    __FlashAddr=0x00000000
[16:45:04.361]    __FlashLen=0x00000000
[16:45:04.361]    __FlashArg=0x00000000
[16:45:04.361]    __FlashOp=0x00000000
[16:45:04.361]    __Result=0x00000000
[16:45:04.361]  </debugvars>
[16:45:04.361]  
[16:45:04.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:45:04.361]    <block atomic="false" info="">
[16:45:04.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:45:04.361]        // -> [isSWJ <= 0x00000001]
[16:45:04.362]      __var hasDormant = __protocol & 0x00020000;
[16:45:04.362]        // -> [hasDormant <= 0x00000000]
[16:45:04.362]      __var protType   = __protocol & 0x0000FFFF;
[16:45:04.362]        // -> [protType <= 0x00000002]
[16:45:04.362]    </block>
[16:45:04.362]    <control if="protType == 1" while="" timeout="0" info="">
[16:45:04.362]      // if-block "protType == 1"
[16:45:04.362]        // =>  FALSE
[16:45:04.362]      // skip if-block "protType == 1"
[16:45:04.362]    </control>
[16:45:04.362]    <control if="protType == 2" while="" timeout="0" info="">
[16:45:04.362]      // if-block "protType == 2"
[16:45:04.362]        // =>  TRUE
[16:45:04.362]      <control if="isSWJ" while="" timeout="0" info="">
[16:45:04.362]        // if-block "isSWJ"
[16:45:04.362]          // =>  TRUE
[16:45:04.362]        <control if="hasDormant" while="" timeout="0" info="">
[16:45:04.362]          // if-block "hasDormant"
[16:45:04.362]            // =>  FALSE
[16:45:04.362]          // skip if-block "hasDormant"
[16:45:04.362]        </control>
[16:45:04.362]        <control if="!hasDormant" while="" timeout="0" info="">
[16:45:04.362]          // if-block "!hasDormant"
[16:45:04.365]            // =>  TRUE
[16:45:04.365]          <block atomic="false" info="">
[16:45:04.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:45:04.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:04.367]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:45:04.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:45:04.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:45:04.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:04.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:45:04.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:45:04.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:45:04.379]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:04.379]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:45:04.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:45:04.381]          </block>
[16:45:04.381]          // end if-block "!hasDormant"
[16:45:04.381]        </control>
[16:45:04.381]        // end if-block "isSWJ"
[16:45:04.381]      </control>
[16:45:04.381]      <control if="!isSWJ" while="" timeout="0" info="">
[16:45:04.381]        // if-block "!isSWJ"
[16:45:04.381]          // =>  FALSE
[16:45:04.383]        // skip if-block "!isSWJ"
[16:45:04.383]      </control>
[16:45:04.383]      <block atomic="false" info="">
[16:45:04.383]        ReadDP(0x0);
[16:45:04.384]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:45:04.384]      </block>
[16:45:04.384]      // end if-block "protType == 2"
[16:45:04.384]    </control>
[16:45:04.384]  </sequence>
[16:45:04.384]  
[16:45:04.388]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:45:04.388]  
[16:45:04.388]  <debugvars>
[16:45:04.388]    // Pre-defined
[16:45:04.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:04.388]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:04.389]    __dp=0x00000000
[16:45:04.389]    __ap=0x00000000
[16:45:04.389]    __traceout=0x00000000      (Trace Disabled)
[16:45:04.389]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:04.389]    __FlashAddr=0x00000000
[16:45:04.389]    __FlashLen=0x00000000
[16:45:04.389]    __FlashArg=0x00000000
[16:45:04.389]    __FlashOp=0x00000000
[16:45:04.389]    __Result=0x00000000
[16:45:04.389]  </debugvars>
[16:45:04.389]  
[16:45:04.389]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:45:04.389]    <block atomic="false" info="">
[16:45:04.391]      __var SW_DP_ABORT       = 0x0;
[16:45:04.391]        // -> [SW_DP_ABORT <= 0x00000000]
[16:45:04.391]      __var DP_CTRL_STAT      = 0x4;
[16:45:04.391]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:45:04.391]      __var DP_SELECT         = 0x8;
[16:45:04.391]        // -> [DP_SELECT <= 0x00000008]
[16:45:04.391]      __var powered_down      = 0;
[16:45:04.392]        // -> [powered_down <= 0x00000000]
[16:45:04.392]      WriteDP(DP_SELECT, 0x00000000);
[16:45:04.394]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:45:04.394]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:45:04.401]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:45:04.401]        // -> [powered_down <= 0x00000001]
[16:45:04.401]    </block>
[16:45:04.401]    <control if="powered_down" while="" timeout="0" info="">
[16:45:04.401]      // if-block "powered_down"
[16:45:04.401]        // =>  TRUE
[16:45:04.401]      <block atomic="false" info="">
[16:45:04.401]        Message(0, "Debug/System power-up request sent");
[16:45:04.407]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:45:04.407]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:45:04.407]      </block>
[16:45:04.407]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:45:04.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:45:04.411]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:45:04.411]        // while-condition  =>  FALSE
[16:45:04.413]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:45:04.413]      </control>
[16:45:04.413]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:45:04.413]        // if-block "(__protocol & 0xFFFF) == 1"
[16:45:04.413]          // =>  FALSE
[16:45:04.413]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:45:04.413]      </control>
[16:45:04.413]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:45:04.413]        // if-block "(__protocol & 0xFFFF) == 2"
[16:45:04.413]          // =>  TRUE
[16:45:04.413]        <block atomic="false" info="">
[16:45:04.413]          Message(0, "executing SWD power up");
[16:45:04.415]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:45:04.418]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:45:04.418]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:45:04.421]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:45:04.421]        </block>
[16:45:04.421]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:45:04.421]      </control>
[16:45:04.421]      // end if-block "powered_down"
[16:45:04.421]    </control>
[16:45:04.421]    <block atomic="false" info="">
[16:45:04.421]      __var DEBUG_PORT_VAL    = 0;
[16:45:04.421]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:45:04.421]      __var ACCESS_POINT_VAL  = 0;
[16:45:04.421]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:45:04.423]      __ap = 1; 
[16:45:04.423]        // -> [__ap <= 0x00000001]
[16:45:04.423]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:45:04.423]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:45:04.423]      __ap = 4;
[16:45:04.423]        // -> [__ap <= 0x00000004]
[16:45:04.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:45:04.432]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:45:04.432]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:45:04.432]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:45:04.435]    </block>
[16:45:04.435]    <block atomic="false" info="">
[16:45:04.435]      __var nReset = 0x80;
[16:45:04.435]        // -> [nReset <= 0x00000080]
[16:45:04.435]      __var canReadPins = 0;
[16:45:04.435]        // -> [canReadPins <= 0x00000000]
[16:45:04.435]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:45:04.439]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:45:04.439]        // -> [canReadPins <= 0x00000001]
[16:45:04.439]    </block>
[16:45:04.439]    <control if="" while="1" timeout="200" info="">
[16:45:04.439]      // while "1"  (timeout="200")
[16:45:04.439]      // while-condition  =>  TRUE
[16:45:04.439]      // while "1"  (timeout="200")
[16:45:04.439]      // while-condition  =>  TRUE
[16:45:04.439]      // while "1"  (timeout="200")
[16:45:04.440]      // while-condition  =>  TRUE
[16:45:04.440]      // while "1"  (timeout="200")
[16:45:04.440]      // while  =>  TIMEOUT
[16:45:04.440]      // end while "1"
[16:45:04.440]    </control>
[16:45:04.440]    <control if="canReadPins" while="" timeout="0" info="">
[16:45:04.440]      // if-block "canReadPins"
[16:45:04.440]        // =>  TRUE
[16:45:04.440]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:45:04.440]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:45:04.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:45:04.442]        // while-condition  =>  FALSE
[16:45:04.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:45:04.442]      </control>
[16:45:04.443]      // end if-block "canReadPins"
[16:45:04.443]    </control>
[16:45:04.443]    <control if="!canReadPins" while="" timeout="0" info="">
[16:45:04.443]      // if-block "!canReadPins"
[16:45:04.443]        // =>  FALSE
[16:45:04.443]      // skip if-block "!canReadPins"
[16:45:04.443]    </control>
[16:45:04.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:45:04.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:45:04.443]        // =>  TRUE
[16:45:04.443]      <block atomic="false" info="">
[16:45:04.443]        WriteAP(0x00, 0x190008);
[16:45:04.445]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:45:04.445]        WriteAP(0xF0, 0x01);
[16:45:04.451]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:45:04.451]      </block>
[16:45:04.451]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:45:04.451]    </control>
[16:45:04.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:45:04.451]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:45:04.451]        // =>  FALSE
[16:45:04.451]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:45:04.451]    </control>
[16:45:04.451]    <block atomic="false" info="">
[16:45:04.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:45:04.461]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:45:04.461]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:45:04.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:45:04.466]      __ap = 0; //lets make sure we reset the access point selection
[16:45:04.466]        // -> [__ap <= 0x00000000]
[16:45:04.466]    </block>
[16:45:04.466]  </sequence>
[16:45:04.466]  
[16:45:04.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:45:04.490]  
[16:45:04.490]  <debugvars>
[16:45:04.490]    // Pre-defined
[16:45:04.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:04.490]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:04.490]    __dp=0x00000000
[16:45:04.490]    __ap=0x00000000
[16:45:04.490]    __traceout=0x00000000      (Trace Disabled)
[16:45:04.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:04.490]    __FlashAddr=0x00000000
[16:45:04.490]    __FlashLen=0x00000000
[16:45:04.490]    __FlashArg=0x00000000
[16:45:04.490]    __FlashOp=0x00000000
[16:45:04.490]    __Result=0x00000000
[16:45:04.490]  </debugvars>
[16:45:04.490]  
[16:45:04.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:45:04.490]    <block atomic="false" info="">
[16:45:04.490]      __var deviceID = 0;
[16:45:04.490]        // -> [deviceID <= 0x00000000]
[16:45:04.490]      __var version = 0;
[16:45:04.500]        // -> [version <= 0x00000000]
[16:45:04.501]      __var partNum = 0;
[16:45:04.501]        // -> [partNum <= 0x00000000]
[16:45:04.501]      __var manuf = 0;
[16:45:04.501]        // -> [manuf <= 0x00000000]
[16:45:04.501]      __var isMSPM0G1X0X_G3X0X = 0;
[16:45:04.501]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:45:04.501]      __var isProduction = 0;
[16:45:04.501]        // -> [isProduction <= 0x00000000]
[16:45:04.501]      __var continueId = 0;
[16:45:04.501]        // -> [continueId <= 0x00000000]
[16:45:04.501]      deviceID =   Read32(0x41C40004);
[16:45:04.503]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:45:04.503]        // -> [deviceID <= 0x2BB8802F]
[16:45:04.503]      version = deviceID >> 28;
[16:45:04.503]        // -> [version <= 0x00000002]
[16:45:04.503]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:45:04.503]        // -> [partNum <= 0x0000BB88]
[16:45:04.503]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:45:04.503]        // -> [manuf <= 0x00000017]
[16:45:04.503]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:45:04.503]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:45:04.503]      isProduction = (version > 0);
[16:45:04.503]        // -> [isProduction <= 0x00000001]
[16:45:04.503]    </block>
[16:45:04.503]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:45:04.503]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:45:04.503]        // =>  FALSE
[16:45:04.503]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:45:04.503]    </control>
[16:45:04.503]    <control if="continueId == 4" while="" timeout="0" info="">
[16:45:04.503]      // if-block "continueId == 4"
[16:45:04.503]        // =>  FALSE
[16:45:04.503]      // skip if-block "continueId == 4"
[16:45:04.503]    </control>
[16:45:04.503]    <control if="!isProduction" while="" timeout="0" info="">
[16:45:04.503]      // if-block "!isProduction"
[16:45:04.503]        // =>  FALSE
[16:45:04.503]      // skip if-block "!isProduction"
[16:45:04.503]    </control>
[16:45:04.503]  </sequence>
[16:45:04.510]  
[16:46:23.339]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:23.339]  
[16:46:23.349]  <debugvars>
[16:46:23.349]    // Pre-defined
[16:46:23.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:23.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:23.349]    __dp=0x00000000
[16:46:23.349]    __ap=0x00000000
[16:46:23.350]    __traceout=0x00000000      (Trace Disabled)
[16:46:23.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:23.350]    __FlashAddr=0x00000000
[16:46:23.350]    __FlashLen=0x00000000
[16:46:23.350]    __FlashArg=0x00000000
[16:46:23.350]    __FlashOp=0x00000000
[16:46:23.350]    __Result=0x00000000
[16:46:23.350]  </debugvars>
[16:46:23.350]  
[16:46:23.350]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:23.350]    <block atomic="false" info="">
[16:46:23.351]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:23.351]        // -> [isSWJ <= 0x00000001]
[16:46:23.351]      __var hasDormant = __protocol & 0x00020000;
[16:46:23.351]        // -> [hasDormant <= 0x00000000]
[16:46:23.351]      __var protType   = __protocol & 0x0000FFFF;
[16:46:23.351]        // -> [protType <= 0x00000002]
[16:46:23.351]    </block>
[16:46:23.351]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:23.351]      // if-block "protType == 1"
[16:46:23.351]        // =>  FALSE
[16:46:23.351]      // skip if-block "protType == 1"
[16:46:23.351]    </control>
[16:46:23.351]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:23.351]      // if-block "protType == 2"
[16:46:23.351]        // =>  TRUE
[16:46:23.351]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:23.353]        // if-block "isSWJ"
[16:46:23.353]          // =>  TRUE
[16:46:23.353]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:23.353]          // if-block "hasDormant"
[16:46:23.353]            // =>  FALSE
[16:46:23.353]          // skip if-block "hasDormant"
[16:46:23.353]        </control>
[16:46:23.353]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:23.353]          // if-block "!hasDormant"
[16:46:23.353]            // =>  TRUE
[16:46:23.353]          <block atomic="false" info="">
[16:46:23.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:23.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:23.355]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:23.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:23.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:23.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:23.360]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:23.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:23.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:23.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:23.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:23.365]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:23.365]          </block>
[16:46:23.365]          // end if-block "!hasDormant"
[16:46:23.365]        </control>
[16:46:23.365]        // end if-block "isSWJ"
[16:46:23.365]      </control>
[16:46:23.365]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:23.366]        // if-block "!isSWJ"
[16:46:23.366]          // =>  FALSE
[16:46:23.366]        // skip if-block "!isSWJ"
[16:46:23.366]      </control>
[16:46:23.366]      <block atomic="false" info="">
[16:46:23.366]        ReadDP(0x0);
[16:46:23.368]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:23.368]      </block>
[16:46:23.368]      // end if-block "protType == 2"
[16:46:23.368]    </control>
[16:46:23.368]  </sequence>
[16:46:23.368]  
[16:46:23.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:23.381]  
[16:46:23.381]  <debugvars>
[16:46:23.381]    // Pre-defined
[16:46:23.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:23.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:23.381]    __dp=0x00000000
[16:46:23.381]    __ap=0x00000000
[16:46:23.381]    __traceout=0x00000000      (Trace Disabled)
[16:46:23.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:23.381]    __FlashAddr=0x00000000
[16:46:23.381]    __FlashLen=0x00000000
[16:46:23.387]    __FlashArg=0x00000000
[16:46:23.387]    __FlashOp=0x00000000
[16:46:23.387]    __Result=0x00000000
[16:46:23.387]  </debugvars>
[16:46:23.387]  
[16:46:23.387]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:23.387]    <block atomic="false" info="">
[16:46:23.387]      __var SW_DP_ABORT       = 0x0;
[16:46:23.387]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:23.387]      __var DP_CTRL_STAT      = 0x4;
[16:46:23.388]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:23.388]      __var DP_SELECT         = 0x8;
[16:46:23.388]        // -> [DP_SELECT <= 0x00000008]
[16:46:23.388]      __var powered_down      = 0;
[16:46:23.388]        // -> [powered_down <= 0x00000000]
[16:46:23.388]      WriteDP(DP_SELECT, 0x00000000);
[16:46:23.391]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:23.391]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:23.400]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:23.400]        // -> [powered_down <= 0x00000001]
[16:46:23.400]    </block>
[16:46:23.400]    <control if="powered_down" while="" timeout="0" info="">
[16:46:23.400]      // if-block "powered_down"
[16:46:23.400]        // =>  TRUE
[16:46:23.400]      <block atomic="false" info="">
[16:46:23.400]        Message(0, "Debug/System power-up request sent");
[16:46:23.405]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:23.407]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:23.407]      </block>
[16:46:23.407]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:23.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:23.411]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:23.411]        // while-condition  =>  FALSE
[16:46:23.411]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:23.411]      </control>
[16:46:23.411]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:23.411]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:23.411]          // =>  FALSE
[16:46:23.411]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:23.411]      </control>
[16:46:23.411]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:23.411]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:23.411]          // =>  TRUE
[16:46:23.411]        <block atomic="false" info="">
[16:46:23.411]          Message(0, "executing SWD power up");
[16:46:23.411]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:23.420]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:23.420]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:23.420]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:23.420]        </block>
[16:46:23.420]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:23.420]      </control>
[16:46:23.420]      // end if-block "powered_down"
[16:46:23.420]    </control>
[16:46:23.420]    <block atomic="false" info="">
[16:46:23.420]      __var DEBUG_PORT_VAL    = 0;
[16:46:23.420]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:23.420]      __var ACCESS_POINT_VAL  = 0;
[16:46:23.420]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:23.420]      __ap = 1; 
[16:46:23.420]        // -> [__ap <= 0x00000001]
[16:46:23.420]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:23.430]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:23.430]      __ap = 4;
[16:46:23.430]        // -> [__ap <= 0x00000004]
[16:46:23.430]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:23.430]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:23.430]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:23.430]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:23.430]    </block>
[16:46:23.430]    <block atomic="false" info="">
[16:46:23.430]      __var nReset = 0x80;
[16:46:23.430]        // -> [nReset <= 0x00000080]
[16:46:23.430]      __var canReadPins = 0;
[16:46:23.430]        // -> [canReadPins <= 0x00000000]
[16:46:23.430]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:23.440]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:23.440]        // -> [canReadPins <= 0x00000001]
[16:46:23.440]    </block>
[16:46:23.440]    <control if="" while="1" timeout="200" info="">
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.440]      // while "1"  (timeout="200")
[16:46:23.440]      // while-condition  =>  TRUE
[16:46:23.450]      // while "1"  (timeout="200")
[16:46:23.450]      // while  =>  TIMEOUT
[16:46:23.450]      // end while "1"
[16:46:23.450]    </control>
[16:46:23.450]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:23.450]      // if-block "canReadPins"
[16:46:23.450]        // =>  TRUE
[16:46:23.450]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:23.450]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:23.450]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:23.450]        // while-condition  =>  FALSE
[16:46:23.450]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:23.450]      </control>
[16:46:23.450]      // end if-block "canReadPins"
[16:46:23.450]    </control>
[16:46:23.450]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:23.450]      // if-block "!canReadPins"
[16:46:23.450]        // =>  FALSE
[16:46:23.450]      // skip if-block "!canReadPins"
[16:46:23.450]    </control>
[16:46:23.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:23.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:23.450]        // =>  TRUE
[16:46:23.450]      <block atomic="false" info="">
[16:46:23.450]        WriteAP(0x00, 0x190008);
[16:46:23.460]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:23.460]        WriteAP(0xF0, 0x01);
[16:46:23.460]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:23.460]      </block>
[16:46:23.460]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:23.460]    </control>
[16:46:23.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:23.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:23.460]        // =>  FALSE
[16:46:23.460]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:23.460]    </control>
[16:46:23.460]    <block atomic="false" info="">
[16:46:23.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:23.470]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:23.470]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:23.470]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:23.480]      __ap = 0; //lets make sure we reset the access point selection
[16:46:23.480]        // -> [__ap <= 0x00000000]
[16:46:23.480]    </block>
[16:46:23.480]  </sequence>
[16:46:23.480]  
[16:46:23.510]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:23.510]  
[16:46:23.510]  <debugvars>
[16:46:23.510]    // Pre-defined
[16:46:23.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:23.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:23.510]    __dp=0x00000000
[16:46:23.510]    __ap=0x00000000
[16:46:23.510]    __traceout=0x00000000      (Trace Disabled)
[16:46:23.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:23.510]    __FlashAddr=0x00000000
[16:46:23.510]    __FlashLen=0x00000000
[16:46:23.510]    __FlashArg=0x00000000
[16:46:23.510]    __FlashOp=0x00000000
[16:46:23.510]    __Result=0x00000000
[16:46:23.510]  </debugvars>
[16:46:23.510]  
[16:46:23.510]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:23.510]    <block atomic="false" info="">
[16:46:23.510]      __var deviceID = 0;
[16:46:23.510]        // -> [deviceID <= 0x00000000]
[16:46:23.510]      __var version = 0;
[16:46:23.510]        // -> [version <= 0x00000000]
[16:46:23.510]      __var partNum = 0;
[16:46:23.510]        // -> [partNum <= 0x00000000]
[16:46:23.510]      __var manuf = 0;
[16:46:23.510]        // -> [manuf <= 0x00000000]
[16:46:23.510]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:23.510]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:23.510]      __var isProduction = 0;
[16:46:23.510]        // -> [isProduction <= 0x00000000]
[16:46:23.510]      __var continueId = 0;
[16:46:23.510]        // -> [continueId <= 0x00000000]
[16:46:23.510]      deviceID =   Read32(0x41C40004);
[16:46:23.520]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:23.520]        // -> [deviceID <= 0x2BB8802F]
[16:46:23.520]      version = deviceID >> 28;
[16:46:23.520]        // -> [version <= 0x00000002]
[16:46:23.520]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:23.520]        // -> [partNum <= 0x0000BB88]
[16:46:23.520]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:23.520]        // -> [manuf <= 0x00000017]
[16:46:23.520]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:23.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:23.520]      isProduction = (version > 0);
[16:46:23.520]        // -> [isProduction <= 0x00000001]
[16:46:23.520]    </block>
[16:46:23.520]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:23.520]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:23.520]        // =>  FALSE
[16:46:23.520]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:23.520]    </control>
[16:46:23.520]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:23.520]      // if-block "continueId == 4"
[16:46:23.520]        // =>  FALSE
[16:46:23.520]      // skip if-block "continueId == 4"
[16:46:23.520]    </control>
[16:46:23.520]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:23.520]      // if-block "!isProduction"
[16:46:23.520]        // =>  FALSE
[16:46:23.520]      // skip if-block "!isProduction"
[16:46:23.520]    </control>
[16:46:23.520]  </sequence>
[16:46:23.520]  
[16:46:50.878]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:50.878]  
[16:46:50.887]  <debugvars>
[16:46:50.887]    // Pre-defined
[16:46:50.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:50.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:50.887]    __dp=0x00000000
[16:46:50.887]    __ap=0x00000000
[16:46:50.887]    __traceout=0x00000000      (Trace Disabled)
[16:46:50.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:50.888]    __FlashAddr=0x00000000
[16:46:50.888]    __FlashLen=0x00000000
[16:46:50.888]    __FlashArg=0x00000000
[16:46:50.888]    __FlashOp=0x00000000
[16:46:50.888]    __Result=0x00000000
[16:46:50.888]  </debugvars>
[16:46:50.888]  
[16:46:50.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:50.888]    <block atomic="false" info="">
[16:46:50.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:50.888]        // -> [isSWJ <= 0x00000001]
[16:46:50.888]      __var hasDormant = __protocol & 0x00020000;
[16:46:50.888]        // -> [hasDormant <= 0x00000000]
[16:46:50.888]      __var protType   = __protocol & 0x0000FFFF;
[16:46:50.888]        // -> [protType <= 0x00000002]
[16:46:50.888]    </block>
[16:46:50.888]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:50.888]      // if-block "protType == 1"
[16:46:50.888]        // =>  FALSE
[16:46:50.888]      // skip if-block "protType == 1"
[16:46:50.888]    </control>
[16:46:50.888]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:50.888]      // if-block "protType == 2"
[16:46:50.888]        // =>  TRUE
[16:46:50.888]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:50.888]        // if-block "isSWJ"
[16:46:50.888]          // =>  TRUE
[16:46:50.888]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:50.888]          // if-block "hasDormant"
[16:46:50.888]            // =>  FALSE
[16:46:50.888]          // skip if-block "hasDormant"
[16:46:50.888]        </control>
[16:46:50.888]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:50.888]          // if-block "!hasDormant"
[16:46:50.888]            // =>  TRUE
[16:46:50.888]          <block atomic="false" info="">
[16:46:50.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:50.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:50.888]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:50.895]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:50.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:50.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:50.897]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:50.898]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:50.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:50.900]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:50.900]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:50.902]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:50.902]          </block>
[16:46:50.902]          // end if-block "!hasDormant"
[16:46:50.902]        </control>
[16:46:50.902]        // end if-block "isSWJ"
[16:46:50.902]      </control>
[16:46:50.902]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:50.902]        // if-block "!isSWJ"
[16:46:50.902]          // =>  FALSE
[16:46:50.902]        // skip if-block "!isSWJ"
[16:46:50.902]      </control>
[16:46:50.902]      <block atomic="false" info="">
[16:46:50.905]        ReadDP(0x0);
[16:46:50.905]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:50.905]      </block>
[16:46:50.905]      // end if-block "protType == 2"
[16:46:50.905]    </control>
[16:46:50.905]  </sequence>
[16:46:50.909]  
[16:46:50.910]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:50.910]  
[16:46:50.910]  <debugvars>
[16:46:50.910]    // Pre-defined
[16:46:50.910]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:50.910]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:50.910]    __dp=0x00000000
[16:46:50.910]    __ap=0x00000000
[16:46:50.910]    __traceout=0x00000000      (Trace Disabled)
[16:46:50.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:50.910]    __FlashAddr=0x00000000
[16:46:50.910]    __FlashLen=0x00000000
[16:46:50.910]    __FlashArg=0x00000000
[16:46:50.910]    __FlashOp=0x00000000
[16:46:50.910]    __Result=0x00000000
[16:46:50.910]  </debugvars>
[16:46:50.910]  
[16:46:50.910]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:50.910]    <block atomic="false" info="">
[16:46:50.910]      __var SW_DP_ABORT       = 0x0;
[16:46:50.910]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:50.910]      __var DP_CTRL_STAT      = 0x4;
[16:46:50.910]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:50.910]      __var DP_SELECT         = 0x8;
[16:46:50.910]        // -> [DP_SELECT <= 0x00000008]
[16:46:50.910]      __var powered_down      = 0;
[16:46:50.910]        // -> [powered_down <= 0x00000000]
[16:46:50.910]      WriteDP(DP_SELECT, 0x00000000);
[16:46:50.915]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:50.915]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:50.916]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:50.916]        // -> [powered_down <= 0x00000001]
[16:46:50.916]    </block>
[16:46:50.916]    <control if="powered_down" while="" timeout="0" info="">
[16:46:50.916]      // if-block "powered_down"
[16:46:50.916]        // =>  TRUE
[16:46:50.916]      <block atomic="false" info="">
[16:46:50.916]        Message(0, "Debug/System power-up request sent");
[16:46:50.919]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:50.925]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:50.925]      </block>
[16:46:50.925]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:50.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:50.925]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:50.925]        // while-condition  =>  FALSE
[16:46:50.925]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:50.925]      </control>
[16:46:50.925]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:50.925]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:50.925]          // =>  FALSE
[16:46:50.925]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:50.925]      </control>
[16:46:50.925]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:50.925]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:50.929]          // =>  TRUE
[16:46:50.929]        <block atomic="false" info="">
[16:46:50.929]          Message(0, "executing SWD power up");
[16:46:50.929]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:50.929]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:50.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:50.935]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:50.935]        </block>
[16:46:50.935]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:50.935]      </control>
[16:46:50.935]      // end if-block "powered_down"
[16:46:50.935]    </control>
[16:46:50.935]    <block atomic="false" info="">
[16:46:50.935]      __var DEBUG_PORT_VAL    = 0;
[16:46:50.939]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:50.939]      __var ACCESS_POINT_VAL  = 0;
[16:46:50.939]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:50.939]      __ap = 1; 
[16:46:50.939]        // -> [__ap <= 0x00000001]
[16:46:50.939]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:50.945]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:50.945]      __ap = 4;
[16:46:50.945]        // -> [__ap <= 0x00000004]
[16:46:50.945]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:50.949]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:50.949]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:50.949]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:50.949]    </block>
[16:46:50.949]    <block atomic="false" info="">
[16:46:50.949]      __var nReset = 0x80;
[16:46:50.949]        // -> [nReset <= 0x00000080]
[16:46:50.949]      __var canReadPins = 0;
[16:46:50.949]        // -> [canReadPins <= 0x00000000]
[16:46:50.949]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:50.956]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:50.956]        // -> [canReadPins <= 0x00000001]
[16:46:50.956]    </block>
[16:46:50.956]    <control if="" while="1" timeout="200" info="">
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.956]      // while "1"  (timeout="200")
[16:46:50.956]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.959]      // while-condition  =>  TRUE
[16:46:50.959]      // while "1"  (timeout="200")
[16:46:50.965]      // while-condition  =>  TRUE
[16:46:50.965]      // while "1"  (timeout="200")
[16:46:50.965]      // while-condition  =>  TRUE
[16:46:50.965]      // while "1"  (timeout="200")
[16:46:50.965]      // while-condition  =>  TRUE
[16:46:50.965]      // while "1"  (timeout="200")
[16:46:50.965]      // while-condition  =>  TRUE
[16:46:50.965]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.967]      // while-condition  =>  TRUE
[16:46:50.967]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.968]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.968]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.968]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.968]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.968]      // while "1"  (timeout="200")
[16:46:50.968]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.969]      // while-condition  =>  TRUE
[16:46:50.969]      // while "1"  (timeout="200")
[16:46:50.975]      // while-condition  =>  TRUE
[16:46:50.975]      // while "1"  (timeout="200")
[16:46:50.975]      // while  =>  TIMEOUT
[16:46:50.975]      // end while "1"
[16:46:50.975]    </control>
[16:46:50.975]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:50.975]      // if-block "canReadPins"
[16:46:50.975]        // =>  TRUE
[16:46:50.975]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:50.975]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:50.975]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:50.975]        // while-condition  =>  FALSE
[16:46:50.975]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:50.975]      </control>
[16:46:50.975]      // end if-block "canReadPins"
[16:46:50.975]    </control>
[16:46:50.975]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:50.975]      // if-block "!canReadPins"
[16:46:50.975]        // =>  FALSE
[16:46:50.975]      // skip if-block "!canReadPins"
[16:46:50.975]    </control>
[16:46:50.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:50.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:50.979]        // =>  TRUE
[16:46:50.979]      <block atomic="false" info="">
[16:46:50.979]        WriteAP(0x00, 0x190008);
[16:46:50.979]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:50.979]        WriteAP(0xF0, 0x01);
[16:46:50.984]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:50.985]      </block>
[16:46:50.985]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:50.985]    </control>
[16:46:50.985]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:50.985]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:50.985]        // =>  FALSE
[16:46:50.985]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:50.985]    </control>
[16:46:50.985]    <block atomic="false" info="">
[16:46:50.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:51.005]  
[16:46:51.005]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[16:46:51.005]  
[16:46:51.005]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:51.005]    </block>
[16:46:51.010]  </sequence>
[16:46:51.010]  
[16:46:56.546]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:56.546]  
[16:46:56.546]  <debugvars>
[16:46:56.546]    // Pre-defined
[16:46:56.546]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:56.546]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:56.546]    __dp=0x00000000
[16:46:56.546]    __ap=0x00000000
[16:46:56.546]    __traceout=0x00000000      (Trace Disabled)
[16:46:56.546]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:56.546]    __FlashAddr=0x00000000
[16:46:56.548]    __FlashLen=0x00000000
[16:46:56.548]    __FlashArg=0x00000000
[16:46:56.548]    __FlashOp=0x00000000
[16:46:56.548]    __Result=0x00000000
[16:46:56.548]  </debugvars>
[16:46:56.548]  
[16:46:56.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:56.549]    <block atomic="false" info="">
[16:46:56.549]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:56.549]        // -> [isSWJ <= 0x00000001]
[16:46:56.549]      __var hasDormant = __protocol & 0x00020000;
[16:46:56.549]        // -> [hasDormant <= 0x00000000]
[16:46:56.549]      __var protType   = __protocol & 0x0000FFFF;
[16:46:56.549]        // -> [protType <= 0x00000002]
[16:46:56.549]    </block>
[16:46:56.549]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:56.549]      // if-block "protType == 1"
[16:46:56.550]        // =>  FALSE
[16:46:56.550]      // skip if-block "protType == 1"
[16:46:56.550]    </control>
[16:46:56.550]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:56.550]      // if-block "protType == 2"
[16:46:56.550]        // =>  TRUE
[16:46:56.550]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:56.550]        // if-block "isSWJ"
[16:46:56.550]          // =>  TRUE
[16:46:56.550]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:56.550]          // if-block "hasDormant"
[16:46:56.550]            // =>  FALSE
[16:46:56.550]          // skip if-block "hasDormant"
[16:46:56.550]        </control>
[16:46:56.551]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:56.551]          // if-block "!hasDormant"
[16:46:56.551]            // =>  TRUE
[16:46:56.551]          <block atomic="false" info="">
[16:46:56.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:56.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:56.558]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:56.569]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:56.569]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:56.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:56.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:56.573]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:56.573]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:56.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:56.577]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:56.578]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:56.579]          </block>
[16:46:56.579]          // end if-block "!hasDormant"
[16:46:56.579]        </control>
[16:46:56.579]        // end if-block "isSWJ"
[16:46:56.579]      </control>
[16:46:56.579]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:56.579]        // if-block "!isSWJ"
[16:46:56.579]          // =>  FALSE
[16:46:56.579]        // skip if-block "!isSWJ"
[16:46:56.579]      </control>
[16:46:56.579]      <block atomic="false" info="">
[16:46:56.579]        ReadDP(0x0);
[16:46:56.582]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:56.582]      </block>
[16:46:56.582]      // end if-block "protType == 2"
[16:46:56.582]    </control>
[16:46:56.582]  </sequence>
[16:46:56.582]  
[16:46:56.585]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:56.585]  
[16:46:56.585]  <debugvars>
[16:46:56.585]    // Pre-defined
[16:46:56.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:56.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:56.585]    __dp=0x00000000
[16:46:56.585]    __ap=0x00000000
[16:46:56.585]    __traceout=0x00000000      (Trace Disabled)
[16:46:56.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:56.585]    __FlashAddr=0x00000000
[16:46:56.585]    __FlashLen=0x00000000
[16:46:56.586]    __FlashArg=0x00000000
[16:46:56.586]    __FlashOp=0x00000000
[16:46:56.586]    __Result=0x00000000
[16:46:56.586]  </debugvars>
[16:46:56.586]  
[16:46:56.586]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:56.586]    <block atomic="false" info="">
[16:46:56.586]      __var SW_DP_ABORT       = 0x0;
[16:46:56.586]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:56.586]      __var DP_CTRL_STAT      = 0x4;
[16:46:56.586]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:56.586]      __var DP_SELECT         = 0x8;
[16:46:56.586]        // -> [DP_SELECT <= 0x00000008]
[16:46:56.588]      __var powered_down      = 0;
[16:46:56.588]        // -> [powered_down <= 0x00000000]
[16:46:56.588]      WriteDP(DP_SELECT, 0x00000000);
[16:46:56.618]  
[16:46:56.618]  !!! E310 : Debug access failed - cannot write value 0x00000000 to DP register 0x08
[16:46:56.618]  
[16:46:56.622]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:56.622]    </block>
[16:46:56.622]  </sequence>
[16:46:56.622]  
[16:47:40.532]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:47:40.533]  
[16:47:40.534]  <debugvars>
[16:47:40.534]    // Pre-defined
[16:47:40.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:40.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:40.535]    __dp=0x00000000
[16:47:40.535]    __ap=0x00000000
[16:47:40.535]    __traceout=0x00000000      (Trace Disabled)
[16:47:40.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:40.535]    __FlashAddr=0x00000000
[16:47:40.535]    __FlashLen=0x00000000
[16:47:40.535]    __FlashArg=0x00000000
[16:47:40.535]    __FlashOp=0x00000000
[16:47:40.536]    __Result=0x00000000
[16:47:40.536]  </debugvars>
[16:47:40.536]  
[16:47:40.536]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:47:40.536]    <block atomic="false" info="">
[16:47:40.536]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:47:40.536]        // -> [isSWJ <= 0x00000001]
[16:47:40.536]      __var hasDormant = __protocol & 0x00020000;
[16:47:40.537]        // -> [hasDormant <= 0x00000000]
[16:47:40.537]      __var protType   = __protocol & 0x0000FFFF;
[16:47:40.537]        // -> [protType <= 0x00000002]
[16:47:40.537]    </block>
[16:47:40.537]    <control if="protType == 1" while="" timeout="0" info="">
[16:47:40.537]      // if-block "protType == 1"
[16:47:40.537]        // =>  FALSE
[16:47:40.537]      // skip if-block "protType == 1"
[16:47:40.537]    </control>
[16:47:40.537]    <control if="protType == 2" while="" timeout="0" info="">
[16:47:40.537]      // if-block "protType == 2"
[16:47:40.537]        // =>  TRUE
[16:47:40.537]      <control if="isSWJ" while="" timeout="0" info="">
[16:47:40.539]        // if-block "isSWJ"
[16:47:40.539]          // =>  TRUE
[16:47:40.539]        <control if="hasDormant" while="" timeout="0" info="">
[16:47:40.539]          // if-block "hasDormant"
[16:47:40.539]            // =>  FALSE
[16:47:40.539]          // skip if-block "hasDormant"
[16:47:40.539]        </control>
[16:47:40.539]        <control if="!hasDormant" while="" timeout="0" info="">
[16:47:40.539]          // if-block "!hasDormant"
[16:47:40.539]            // =>  TRUE
[16:47:40.539]          <block atomic="false" info="">
[16:47:40.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:47:40.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:40.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:47:40.539]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:47:40.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:47:40.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:40.547]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:47:40.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:47:40.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:47:40.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:47:40.547]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:47:40.547]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:47:40.547]          </block>
[16:47:40.547]          // end if-block "!hasDormant"
[16:47:40.547]        </control>
[16:47:40.547]        // end if-block "isSWJ"
[16:47:40.547]      </control>
[16:47:40.547]      <control if="!isSWJ" while="" timeout="0" info="">
[16:47:40.556]        // if-block "!isSWJ"
[16:47:40.556]          // =>  FALSE
[16:47:40.556]        // skip if-block "!isSWJ"
[16:47:40.556]      </control>
[16:47:40.556]      <block atomic="false" info="">
[16:47:40.556]        ReadDP(0x0);
[16:47:40.559]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:47:40.559]      </block>
[16:47:40.559]      // end if-block "protType == 2"
[16:47:40.559]    </control>
[16:47:40.559]  </sequence>
[16:47:40.559]  
[16:47:40.566]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:47:40.566]  
[16:47:40.566]  <debugvars>
[16:47:40.566]    // Pre-defined
[16:47:40.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:40.566]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:40.566]    __dp=0x00000000
[16:47:40.566]    __ap=0x00000000
[16:47:40.566]    __traceout=0x00000000      (Trace Disabled)
[16:47:40.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:40.566]    __FlashAddr=0x00000000
[16:47:40.566]    __FlashLen=0x00000000
[16:47:40.566]    __FlashArg=0x00000000
[16:47:40.566]    __FlashOp=0x00000000
[16:47:40.566]    __Result=0x00000000
[16:47:40.566]  </debugvars>
[16:47:40.566]  
[16:47:40.566]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:47:40.566]    <block atomic="false" info="">
[16:47:40.566]      __var SW_DP_ABORT       = 0x0;
[16:47:40.566]        // -> [SW_DP_ABORT <= 0x00000000]
[16:47:40.566]      __var DP_CTRL_STAT      = 0x4;
[16:47:40.566]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:47:40.566]      __var DP_SELECT         = 0x8;
[16:47:40.566]        // -> [DP_SELECT <= 0x00000008]
[16:47:40.566]      __var powered_down      = 0;
[16:47:40.566]        // -> [powered_down <= 0x00000000]
[16:47:40.566]      WriteDP(DP_SELECT, 0x00000000);
[16:47:40.577]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:47:40.577]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:47:40.578]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:47:40.578]        // -> [powered_down <= 0x00000001]
[16:47:40.578]    </block>
[16:47:40.578]    <control if="powered_down" while="" timeout="0" info="">
[16:47:40.578]      // if-block "powered_down"
[16:47:40.578]        // =>  TRUE
[16:47:40.578]      <block atomic="false" info="">
[16:47:40.578]        Message(0, "Debug/System power-up request sent");
[16:47:40.581]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:47:40.583]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:47:40.583]      </block>
[16:47:40.583]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:47:40.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:47:40.593]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:47:40.593]        // while-condition  =>  FALSE
[16:47:40.593]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:47:40.593]      </control>
[16:47:40.593]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:47:40.593]        // if-block "(__protocol & 0xFFFF) == 1"
[16:47:40.593]          // =>  FALSE
[16:47:40.596]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:47:40.596]      </control>
[16:47:40.596]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:47:40.596]        // if-block "(__protocol & 0xFFFF) == 2"
[16:47:40.596]          // =>  TRUE
[16:47:40.596]        <block atomic="false" info="">
[16:47:40.597]          Message(0, "executing SWD power up");
[16:47:40.597]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:47:40.600]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:47:40.600]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:47:40.603]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:47:40.603]        </block>
[16:47:40.603]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:47:40.603]      </control>
[16:47:40.603]      // end if-block "powered_down"
[16:47:40.603]    </control>
[16:47:40.603]    <block atomic="false" info="">
[16:47:40.603]      __var DEBUG_PORT_VAL    = 0;
[16:47:40.603]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:47:40.603]      __var ACCESS_POINT_VAL  = 0;
[16:47:40.603]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:47:40.603]      __ap = 1; 
[16:47:40.603]        // -> [__ap <= 0x00000001]
[16:47:40.603]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:47:40.611]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:47:40.611]      __ap = 4;
[16:47:40.611]        // -> [__ap <= 0x00000004]
[16:47:40.611]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:47:40.617]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:47:40.617]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:47:40.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:47:40.617]    </block>
[16:47:40.617]    <block atomic="false" info="">
[16:47:40.617]      __var nReset = 0x80;
[16:47:40.617]        // -> [nReset <= 0x00000080]
[16:47:40.617]      __var canReadPins = 0;
[16:47:40.617]        // -> [canReadPins <= 0x00000000]
[16:47:40.617]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:47:40.617]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:47:40.617]        // -> [canReadPins <= 0x00000001]
[16:47:40.617]    </block>
[16:47:40.617]    <control if="" while="1" timeout="200" info="">
[16:47:40.617]      // while "1"  (timeout="200")
[16:47:40.617]      // while-condition  =>  TRUE
[16:47:40.617]      // while "1"  (timeout="200")
[16:47:40.617]      // while-condition  =>  TRUE
[16:47:40.617]      // while "1"  (timeout="200")
[16:47:40.617]      // while-condition  =>  TRUE
[16:47:40.617]      // while "1"  (timeout="200")
[16:47:40.617]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.626]      // while-condition  =>  TRUE
[16:47:40.626]      // while "1"  (timeout="200")
[16:47:40.636]      // while-condition  =>  TRUE
[16:47:40.636]      // while "1"  (timeout="200")
[16:47:40.636]      // while  =>  TIMEOUT
[16:47:40.636]      // end while "1"
[16:47:40.636]    </control>
[16:47:40.636]    <control if="canReadPins" while="" timeout="0" info="">
[16:47:40.636]      // if-block "canReadPins"
[16:47:40.636]        // =>  TRUE
[16:47:40.636]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:47:40.636]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:47:40.636]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:47:40.636]        // while-condition  =>  FALSE
[16:47:40.636]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:47:40.636]      </control>
[16:47:40.636]      // end if-block "canReadPins"
[16:47:40.636]    </control>
[16:47:40.636]    <control if="!canReadPins" while="" timeout="0" info="">
[16:47:40.636]      // if-block "!canReadPins"
[16:47:40.636]        // =>  FALSE
[16:47:40.636]      // skip if-block "!canReadPins"
[16:47:40.636]    </control>
[16:47:40.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:47:40.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:47:40.636]        // =>  TRUE
[16:47:40.636]      <block atomic="false" info="">
[16:47:40.636]        WriteAP(0x00, 0x190008);
[16:47:40.646]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:47:40.646]        WriteAP(0xF0, 0x01);
[16:47:40.646]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:47:40.646]      </block>
[16:47:40.646]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:47:40.646]    </control>
[16:47:40.646]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:47:40.646]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:47:40.646]        // =>  FALSE
[16:47:40.646]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:47:40.646]    </control>
[16:47:40.646]    <block atomic="false" info="">
[16:47:40.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:47:40.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:47:40.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:47:40.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:47:40.656]      __ap = 0; //lets make sure we reset the access point selection
[16:47:40.656]        // -> [__ap <= 0x00000000]
[16:47:40.656]    </block>
[16:47:40.656]  </sequence>
[16:47:40.656]  
[16:47:40.677]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:47:40.677]  
[16:47:40.677]  <debugvars>
[16:47:40.677]    // Pre-defined
[16:47:40.677]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:47:40.677]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:47:40.677]    __dp=0x00000000
[16:47:40.677]    __ap=0x00000000
[16:47:40.677]    __traceout=0x00000000      (Trace Disabled)
[16:47:40.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:47:40.677]    __FlashAddr=0x00000000
[16:47:40.677]    __FlashLen=0x00000000
[16:47:40.677]    __FlashArg=0x00000000
[16:47:40.677]    __FlashOp=0x00000000
[16:47:40.677]    __Result=0x00000000
[16:47:40.677]  </debugvars>
[16:47:40.677]  
[16:47:40.677]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:47:40.677]    <block atomic="false" info="">
[16:47:40.677]      __var deviceID = 0;
[16:47:40.677]        // -> [deviceID <= 0x00000000]
[16:47:40.677]      __var version = 0;
[16:47:40.677]        // -> [version <= 0x00000000]
[16:47:40.677]      __var partNum = 0;
[16:47:40.677]        // -> [partNum <= 0x00000000]
[16:47:40.677]      __var manuf = 0;
[16:47:40.677]        // -> [manuf <= 0x00000000]
[16:47:40.677]      __var isMSPM0G1X0X_G3X0X = 0;
[16:47:40.677]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:47:40.677]      __var isProduction = 0;
[16:47:40.677]        // -> [isProduction <= 0x00000000]
[16:47:40.677]      __var continueId = 0;
[16:47:40.677]        // -> [continueId <= 0x00000000]
[16:47:40.677]      deviceID =   Read32(0x41C40004);
[16:47:40.686]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:47:40.686]        // -> [deviceID <= 0x2BB8802F]
[16:47:40.686]      version = deviceID >> 28;
[16:47:40.686]        // -> [version <= 0x00000002]
[16:47:40.686]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:47:40.686]        // -> [partNum <= 0x0000BB88]
[16:47:40.686]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:47:40.686]        // -> [manuf <= 0x00000017]
[16:47:40.686]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:47:40.686]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:47:40.686]      isProduction = (version > 0);
[16:47:40.686]        // -> [isProduction <= 0x00000001]
[16:47:40.686]    </block>
[16:47:40.686]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:47:40.686]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:47:40.686]        // =>  FALSE
[16:47:40.686]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:47:40.686]    </control>
[16:47:40.686]    <control if="continueId == 4" while="" timeout="0" info="">
[16:47:40.686]      // if-block "continueId == 4"
[16:47:40.686]        // =>  FALSE
[16:47:40.686]      // skip if-block "continueId == 4"
[16:47:40.686]    </control>
[16:47:40.686]    <control if="!isProduction" while="" timeout="0" info="">
[16:47:40.686]      // if-block "!isProduction"
[16:47:40.686]        // =>  FALSE
[16:47:40.686]      // skip if-block "!isProduction"
[16:47:40.686]    </control>
[16:47:40.686]  </sequence>
[16:47:40.686]  
[16:48:57.403]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:48:57.403]  
[16:48:57.403]  <debugvars>
[16:48:57.403]    // Pre-defined
[16:48:57.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:57.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:57.403]    __dp=0x00000000
[16:48:57.403]    __ap=0x00000000
[16:48:57.403]    __traceout=0x00000000      (Trace Disabled)
[16:48:57.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:57.403]    __FlashAddr=0x00000000
[16:48:57.403]    __FlashLen=0x00000000
[16:48:57.411]    __FlashArg=0x00000000
[16:48:57.411]    __FlashOp=0x00000000
[16:48:57.411]    __Result=0x00000000
[16:48:57.411]  </debugvars>
[16:48:57.411]  
[16:48:57.411]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:48:57.411]    <block atomic="false" info="">
[16:48:57.411]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:48:57.411]        // -> [isSWJ <= 0x00000001]
[16:48:57.411]      __var hasDormant = __protocol & 0x00020000;
[16:48:57.411]        // -> [hasDormant <= 0x00000000]
[16:48:57.411]      __var protType   = __protocol & 0x0000FFFF;
[16:48:57.411]        // -> [protType <= 0x00000002]
[16:48:57.411]    </block>
[16:48:57.411]    <control if="protType == 1" while="" timeout="0" info="">
[16:48:57.411]      // if-block "protType == 1"
[16:48:57.411]        // =>  FALSE
[16:48:57.411]      // skip if-block "protType == 1"
[16:48:57.411]    </control>
[16:48:57.411]    <control if="protType == 2" while="" timeout="0" info="">
[16:48:57.411]      // if-block "protType == 2"
[16:48:57.411]        // =>  TRUE
[16:48:57.411]      <control if="isSWJ" while="" timeout="0" info="">
[16:48:57.411]        // if-block "isSWJ"
[16:48:57.411]          // =>  TRUE
[16:48:57.413]        <control if="hasDormant" while="" timeout="0" info="">
[16:48:57.413]          // if-block "hasDormant"
[16:48:57.413]            // =>  FALSE
[16:48:57.413]          // skip if-block "hasDormant"
[16:48:57.413]        </control>
[16:48:57.413]        <control if="!hasDormant" while="" timeout="0" info="">
[16:48:57.413]          // if-block "!hasDormant"
[16:48:57.413]            // =>  TRUE
[16:48:57.413]          <block atomic="false" info="">
[16:48:57.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:48:57.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:57.413]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:48:57.413]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:48:57.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:48:57.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:57.421]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:48:57.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:48:57.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:48:57.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:57.433]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:48:57.433]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:48:57.433]          </block>
[16:48:57.433]          // end if-block "!hasDormant"
[16:48:57.433]        </control>
[16:48:57.433]        // end if-block "isSWJ"
[16:48:57.433]      </control>
[16:48:57.433]      <control if="!isSWJ" while="" timeout="0" info="">
[16:48:57.433]        // if-block "!isSWJ"
[16:48:57.433]          // =>  FALSE
[16:48:57.433]        // skip if-block "!isSWJ"
[16:48:57.433]      </control>
[16:48:57.433]      <block atomic="false" info="">
[16:48:57.433]        ReadDP(0x0);
[16:48:57.433]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:48:57.433]      </block>
[16:48:57.433]      // end if-block "protType == 2"
[16:48:57.433]    </control>
[16:48:57.433]  </sequence>
[16:48:57.433]  
[16:48:57.441]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:48:57.441]  
[16:48:57.441]  <debugvars>
[16:48:57.441]    // Pre-defined
[16:48:57.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:57.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:57.441]    __dp=0x00000000
[16:48:57.441]    __ap=0x00000000
[16:48:57.441]    __traceout=0x00000000      (Trace Disabled)
[16:48:57.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:57.441]    __FlashAddr=0x00000000
[16:48:57.441]    __FlashLen=0x00000000
[16:48:57.441]    __FlashArg=0x00000000
[16:48:57.441]    __FlashOp=0x00000000
[16:48:57.441]    __Result=0x00000000
[16:48:57.443]  </debugvars>
[16:48:57.443]  
[16:48:57.443]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:48:57.443]    <block atomic="false" info="">
[16:48:57.443]      __var SW_DP_ABORT       = 0x0;
[16:48:57.443]        // -> [SW_DP_ABORT <= 0x00000000]
[16:48:57.443]      __var DP_CTRL_STAT      = 0x4;
[16:48:57.443]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:48:57.443]      __var DP_SELECT         = 0x8;
[16:48:57.443]        // -> [DP_SELECT <= 0x00000008]
[16:48:57.443]      __var powered_down      = 0;
[16:48:57.443]        // -> [powered_down <= 0x00000000]
[16:48:57.443]      WriteDP(DP_SELECT, 0x00000000);
[16:48:57.443]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:48:57.443]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:48:57.443]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:48:57.443]        // -> [powered_down <= 0x00000001]
[16:48:57.443]    </block>
[16:48:57.443]    <control if="powered_down" while="" timeout="0" info="">
[16:48:57.443]      // if-block "powered_down"
[16:48:57.443]        // =>  TRUE
[16:48:57.443]      <block atomic="false" info="">
[16:48:57.443]        Message(0, "Debug/System power-up request sent");
[16:48:57.443]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:48:57.443]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:48:57.443]      </block>
[16:48:57.443]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:48:57.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:48:57.451]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:48:57.451]        // while-condition  =>  FALSE
[16:48:57.451]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:48:57.451]      </control>
[16:48:57.451]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:48:57.451]        // if-block "(__protocol & 0xFFFF) == 1"
[16:48:57.451]          // =>  FALSE
[16:48:57.451]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:48:57.451]      </control>
[16:48:57.451]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:48:57.451]        // if-block "(__protocol & 0xFFFF) == 2"
[16:48:57.451]          // =>  TRUE
[16:48:57.451]        <block atomic="false" info="">
[16:48:57.451]          Message(0, "executing SWD power up");
[16:48:57.451]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:48:57.451]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:48:57.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:48:57.451]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:48:57.451]        </block>
[16:48:57.451]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:48:57.451]      </control>
[16:48:57.451]      // end if-block "powered_down"
[16:48:57.451]    </control>
[16:48:57.451]    <block atomic="false" info="">
[16:48:57.451]      __var DEBUG_PORT_VAL    = 0;
[16:48:57.451]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:48:57.451]      __var ACCESS_POINT_VAL  = 0;
[16:48:57.451]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:48:57.451]      __ap = 1; 
[16:48:57.451]        // -> [__ap <= 0x00000001]
[16:48:57.451]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:48:57.463]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:48:57.463]      __ap = 4;
[16:48:57.463]        // -> [__ap <= 0x00000004]
[16:48:57.463]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:48:57.463]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:48:57.463]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:48:57.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:48:57.463]    </block>
[16:48:57.463]    <block atomic="false" info="">
[16:48:57.463]      __var nReset = 0x80;
[16:48:57.463]        // -> [nReset <= 0x00000080]
[16:48:57.463]      __var canReadPins = 0;
[16:48:57.463]        // -> [canReadPins <= 0x00000000]
[16:48:57.463]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:48:57.471]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:48:57.471]        // -> [canReadPins <= 0x00000001]
[16:48:57.471]    </block>
[16:48:57.471]    <control if="" while="1" timeout="200" info="">
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.471]      // while "1"  (timeout="200")
[16:48:57.471]      // while-condition  =>  TRUE
[16:48:57.481]      // while "1"  (timeout="200")
[16:48:57.481]      // while  =>  TIMEOUT
[16:48:57.481]      // end while "1"
[16:48:57.481]    </control>
[16:48:57.481]    <control if="canReadPins" while="" timeout="0" info="">
[16:48:57.481]      // if-block "canReadPins"
[16:48:57.481]        // =>  TRUE
[16:48:57.481]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:48:57.481]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:48:57.481]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:48:57.481]        // while-condition  =>  FALSE
[16:48:57.481]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:48:57.481]      </control>
[16:48:57.481]      // end if-block "canReadPins"
[16:48:57.481]    </control>
[16:48:57.481]    <control if="!canReadPins" while="" timeout="0" info="">
[16:48:57.481]      // if-block "!canReadPins"
[16:48:57.481]        // =>  FALSE
[16:48:57.481]      // skip if-block "!canReadPins"
[16:48:57.481]    </control>
[16:48:57.481]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:48:57.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:48:57.481]        // =>  TRUE
[16:48:57.481]      <block atomic="false" info="">
[16:48:57.481]        WriteAP(0x00, 0x190008);
[16:48:57.491]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:48:57.492]        WriteAP(0xF0, 0x01);
[16:48:57.493]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:48:57.493]      </block>
[16:48:57.493]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:48:57.493]    </control>
[16:48:57.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:48:57.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:48:57.493]        // =>  FALSE
[16:48:57.493]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:48:57.493]    </control>
[16:48:57.493]    <block atomic="false" info="">
[16:48:57.493]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:48:57.493]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:48:57.493]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:48:57.493]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:48:57.503]      __ap = 0; //lets make sure we reset the access point selection
[16:48:57.503]        // -> [__ap <= 0x00000000]
[16:48:57.503]    </block>
[16:48:57.503]  </sequence>
[16:48:57.503]  
[16:48:57.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:48:57.522]  
[16:48:57.522]  <debugvars>
[16:48:57.522]    // Pre-defined
[16:48:57.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:57.532]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:57.532]    __dp=0x00000000
[16:48:57.532]    __ap=0x00000000
[16:48:57.532]    __traceout=0x00000000      (Trace Disabled)
[16:48:57.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:57.532]    __FlashAddr=0x00000000
[16:48:57.532]    __FlashLen=0x00000000
[16:48:57.532]    __FlashArg=0x00000000
[16:48:57.532]    __FlashOp=0x00000000
[16:48:57.532]    __Result=0x00000000
[16:48:57.532]  </debugvars>
[16:48:57.532]  
[16:48:57.532]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:48:57.532]    <block atomic="false" info="">
[16:48:57.532]      __var deviceID = 0;
[16:48:57.532]        // -> [deviceID <= 0x00000000]
[16:48:57.532]      __var version = 0;
[16:48:57.532]        // -> [version <= 0x00000000]
[16:48:57.532]      __var partNum = 0;
[16:48:57.532]        // -> [partNum <= 0x00000000]
[16:48:57.532]      __var manuf = 0;
[16:48:57.532]        // -> [manuf <= 0x00000000]
[16:48:57.532]      __var isMSPM0G1X0X_G3X0X = 0;
[16:48:57.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:48:57.532]      __var isProduction = 0;
[16:48:57.532]        // -> [isProduction <= 0x00000000]
[16:48:57.532]      __var continueId = 0;
[16:48:57.532]        // -> [continueId <= 0x00000000]
[16:48:57.532]      deviceID =   Read32(0x41C40004);
[16:48:57.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:48:57.532]        // -> [deviceID <= 0x2BB8802F]
[16:48:57.532]      version = deviceID >> 28;
[16:48:57.532]        // -> [version <= 0x00000002]
[16:48:57.532]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:48:57.532]        // -> [partNum <= 0x0000BB88]
[16:48:57.532]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:48:57.532]        // -> [manuf <= 0x00000017]
[16:48:57.532]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:48:57.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:48:57.532]      isProduction = (version > 0);
[16:48:57.532]        // -> [isProduction <= 0x00000001]
[16:48:57.532]    </block>
[16:48:57.532]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:48:57.532]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:48:57.532]        // =>  FALSE
[16:48:57.532]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:48:57.532]    </control>
[16:48:57.542]    <control if="continueId == 4" while="" timeout="0" info="">
[16:48:57.542]      // if-block "continueId == 4"
[16:48:57.542]        // =>  FALSE
[16:48:57.542]      // skip if-block "continueId == 4"
[16:48:57.542]    </control>
[16:48:57.542]    <control if="!isProduction" while="" timeout="0" info="">
[16:48:57.542]      // if-block "!isProduction"
[16:48:57.542]        // =>  FALSE
[16:48:57.542]      // skip if-block "!isProduction"
[16:48:57.542]    </control>
[16:48:57.542]  </sequence>
[16:48:57.542]  
[16:49:43.953]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:49:43.953]  
[16:49:43.953]  <debugvars>
[16:49:43.953]    // Pre-defined
[16:49:43.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:43.958]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:43.958]    __dp=0x00000000
[16:49:43.958]    __ap=0x00000000
[16:49:43.958]    __traceout=0x00000000      (Trace Disabled)
[16:49:43.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:43.958]    __FlashAddr=0x00000000
[16:49:43.958]    __FlashLen=0x00000000
[16:49:43.959]    __FlashArg=0x00000000
[16:49:43.959]    __FlashOp=0x00000000
[16:49:43.959]    __Result=0x00000000
[16:49:43.959]  </debugvars>
[16:49:43.959]  
[16:49:43.960]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:49:43.960]    <block atomic="false" info="">
[16:49:43.960]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:49:43.960]        // -> [isSWJ <= 0x00000001]
[16:49:43.960]      __var hasDormant = __protocol & 0x00020000;
[16:49:43.960]        // -> [hasDormant <= 0x00000000]
[16:49:43.960]      __var protType   = __protocol & 0x0000FFFF;
[16:49:43.960]        // -> [protType <= 0x00000002]
[16:49:43.960]    </block>
[16:49:43.960]    <control if="protType == 1" while="" timeout="0" info="">
[16:49:43.960]      // if-block "protType == 1"
[16:49:43.960]        // =>  FALSE
[16:49:43.960]      // skip if-block "protType == 1"
[16:49:43.960]    </control>
[16:49:43.960]    <control if="protType == 2" while="" timeout="0" info="">
[16:49:43.960]      // if-block "protType == 2"
[16:49:43.960]        // =>  TRUE
[16:49:43.960]      <control if="isSWJ" while="" timeout="0" info="">
[16:49:43.960]        // if-block "isSWJ"
[16:49:43.960]          // =>  TRUE
[16:49:43.960]        <control if="hasDormant" while="" timeout="0" info="">
[16:49:43.960]          // if-block "hasDormant"
[16:49:43.960]            // =>  FALSE
[16:49:43.960]          // skip if-block "hasDormant"
[16:49:43.960]        </control>
[16:49:43.960]        <control if="!hasDormant" while="" timeout="0" info="">
[16:49:43.960]          // if-block "!hasDormant"
[16:49:43.960]            // =>  TRUE
[16:49:43.960]          <block atomic="false" info="">
[16:49:43.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:49:43.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:43.963]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:49:43.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:49:43.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:49:43.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:43.966]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:49:43.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:49:43.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:49:43.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:43.969]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:49:43.969]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:49:43.969]          </block>
[16:49:43.969]          // end if-block "!hasDormant"
[16:49:43.969]        </control>
[16:49:43.969]        // end if-block "isSWJ"
[16:49:43.969]      </control>
[16:49:43.969]      <control if="!isSWJ" while="" timeout="0" info="">
[16:49:43.969]        // if-block "!isSWJ"
[16:49:43.969]          // =>  FALSE
[16:49:43.969]        // skip if-block "!isSWJ"
[16:49:43.969]      </control>
[16:49:43.969]      <block atomic="false" info="">
[16:49:43.969]        ReadDP(0x0);
[16:49:43.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:49:43.973]      </block>
[16:49:43.973]      // end if-block "protType == 2"
[16:49:43.973]    </control>
[16:49:43.973]  </sequence>
[16:49:43.973]  
[16:49:43.973]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:49:43.973]  
[16:49:43.973]  <debugvars>
[16:49:43.973]    // Pre-defined
[16:49:43.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:43.973]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:43.973]    __dp=0x00000000
[16:49:43.973]    __ap=0x00000000
[16:49:43.973]    __traceout=0x00000000      (Trace Disabled)
[16:49:43.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:43.973]    __FlashAddr=0x00000000
[16:49:43.973]    __FlashLen=0x00000000
[16:49:43.973]    __FlashArg=0x00000000
[16:49:43.978]    __FlashOp=0x00000000
[16:49:43.978]    __Result=0x00000000
[16:49:43.978]  </debugvars>
[16:49:43.978]  
[16:49:43.978]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:49:43.978]    <block atomic="false" info="">
[16:49:43.978]      __var SW_DP_ABORT       = 0x0;
[16:49:43.978]        // -> [SW_DP_ABORT <= 0x00000000]
[16:49:43.978]      __var DP_CTRL_STAT      = 0x4;
[16:49:43.978]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:49:43.978]      __var DP_SELECT         = 0x8;
[16:49:43.978]        // -> [DP_SELECT <= 0x00000008]
[16:49:43.980]      __var powered_down      = 0;
[16:49:43.980]        // -> [powered_down <= 0x00000000]
[16:49:43.980]      WriteDP(DP_SELECT, 0x00000000);
[16:49:43.980]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:49:43.980]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:49:43.983]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:49:43.983]        // -> [powered_down <= 0x00000001]
[16:49:43.983]    </block>
[16:49:43.983]    <control if="powered_down" while="" timeout="0" info="">
[16:49:43.983]      // if-block "powered_down"
[16:49:43.983]        // =>  TRUE
[16:49:43.983]      <block atomic="false" info="">
[16:49:43.983]        Message(0, "Debug/System power-up request sent");
[16:49:43.986]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:49:43.991]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:49:43.991]      </block>
[16:49:43.991]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:49:43.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:49:43.993]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:49:43.993]        // while-condition  =>  FALSE
[16:49:43.993]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:49:43.993]      </control>
[16:49:43.993]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:49:43.993]        // if-block "(__protocol & 0xFFFF) == 1"
[16:49:43.993]          // =>  FALSE
[16:49:43.993]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:49:43.993]      </control>
[16:49:43.993]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:49:43.993]        // if-block "(__protocol & 0xFFFF) == 2"
[16:49:43.993]          // =>  TRUE
[16:49:43.993]        <block atomic="false" info="">
[16:49:43.993]          Message(0, "executing SWD power up");
[16:49:43.997]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:49:43.998]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:49:43.998]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:49:44.000]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:49:44.000]        </block>
[16:49:44.000]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:49:44.000]      </control>
[16:49:44.000]      // end if-block "powered_down"
[16:49:44.000]    </control>
[16:49:44.000]    <block atomic="false" info="">
[16:49:44.000]      __var DEBUG_PORT_VAL    = 0;
[16:49:44.000]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:49:44.000]      __var ACCESS_POINT_VAL  = 0;
[16:49:44.000]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:49:44.000]      __ap = 1; 
[16:49:44.000]        // -> [__ap <= 0x00000001]
[16:49:44.000]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:49:44.003]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:49:44.003]      __ap = 4;
[16:49:44.003]        // -> [__ap <= 0x00000004]
[16:49:44.003]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:44.008]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:49:44.008]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:49:44.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:44.009]    </block>
[16:49:44.009]    <block atomic="false" info="">
[16:49:44.009]      __var nReset = 0x80;
[16:49:44.009]        // -> [nReset <= 0x00000080]
[16:49:44.009]      __var canReadPins = 0;
[16:49:44.009]        // -> [canReadPins <= 0x00000000]
[16:49:44.009]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:49:44.014]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:49:44.014]        // -> [canReadPins <= 0x00000001]
[16:49:44.014]    </block>
[16:49:44.014]    <control if="" while="1" timeout="200" info="">
[16:49:44.014]      // while "1"  (timeout="200")
[16:49:44.014]      // while-condition  =>  TRUE
[16:49:44.014]      // while "1"  (timeout="200")
[16:49:44.015]      // while-condition  =>  TRUE
[16:49:44.015]      // while "1"  (timeout="200")
[16:49:44.015]      // while-condition  =>  TRUE
[16:49:44.015]      // while "1"  (timeout="200")
[16:49:44.015]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.016]      // while "1"  (timeout="200")
[16:49:44.016]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.018]      // while "1"  (timeout="200")
[16:49:44.018]      // while-condition  =>  TRUE
[16:49:44.020]      // while "1"  (timeout="200")
[16:49:44.020]      // while  =>  TIMEOUT
[16:49:44.020]      // end while "1"
[16:49:44.020]    </control>
[16:49:44.020]    <control if="canReadPins" while="" timeout="0" info="">
[16:49:44.020]      // if-block "canReadPins"
[16:49:44.020]        // =>  TRUE
[16:49:44.020]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:49:44.020]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:49:44.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:49:44.022]        // while-condition  =>  FALSE
[16:49:44.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:49:44.022]      </control>
[16:49:44.022]      // end if-block "canReadPins"
[16:49:44.022]    </control>
[16:49:44.022]    <control if="!canReadPins" while="" timeout="0" info="">
[16:49:44.022]      // if-block "!canReadPins"
[16:49:44.022]        // =>  FALSE
[16:49:44.022]      // skip if-block "!canReadPins"
[16:49:44.023]    </control>
[16:49:44.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:49:44.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:44.023]        // =>  TRUE
[16:49:44.023]      <block atomic="false" info="">
[16:49:44.023]        WriteAP(0x00, 0x190008);
[16:49:44.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:44.023]        WriteAP(0xF0, 0x01);
[16:49:44.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:44.028]      </block>
[16:49:44.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:44.028]    </control>
[16:49:44.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:49:44.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:44.028]        // =>  FALSE
[16:49:44.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:44.028]    </control>
[16:49:44.028]    <block atomic="false" info="">
[16:49:44.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:44.033]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:49:44.033]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:49:44.035]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:44.037]      __ap = 0; //lets make sure we reset the access point selection
[16:49:44.037]        // -> [__ap <= 0x00000000]
[16:49:44.037]    </block>
[16:49:44.037]  </sequence>
[16:49:44.037]  
[16:49:44.056]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:49:44.056]  
[16:49:44.056]  <debugvars>
[16:49:44.056]    // Pre-defined
[16:49:44.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:44.056]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:44.056]    __dp=0x00000000
[16:49:44.056]    __ap=0x00000000
[16:49:44.056]    __traceout=0x00000000      (Trace Disabled)
[16:49:44.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:44.056]    __FlashAddr=0x00000000
[16:49:44.056]    __FlashLen=0x00000000
[16:49:44.056]    __FlashArg=0x00000000
[16:49:44.056]    __FlashOp=0x00000000
[16:49:44.056]    __Result=0x00000000
[16:49:44.056]  </debugvars>
[16:49:44.056]  
[16:49:44.056]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:49:44.056]    <block atomic="false" info="">
[16:49:44.056]      __var deviceID = 0;
[16:49:44.056]        // -> [deviceID <= 0x00000000]
[16:49:44.059]      __var version = 0;
[16:49:44.060]        // -> [version <= 0x00000000]
[16:49:44.060]      __var partNum = 0;
[16:49:44.060]        // -> [partNum <= 0x00000000]
[16:49:44.060]      __var manuf = 0;
[16:49:44.060]        // -> [manuf <= 0x00000000]
[16:49:44.060]      __var isMSPM0G1X0X_G3X0X = 0;
[16:49:44.060]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:49:44.060]      __var isProduction = 0;
[16:49:44.060]        // -> [isProduction <= 0x00000000]
[16:49:44.060]      __var continueId = 0;
[16:49:44.060]        // -> [continueId <= 0x00000000]
[16:49:44.060]      deviceID =   Read32(0x41C40004);
[16:49:44.063]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:49:44.063]        // -> [deviceID <= 0x2BB8802F]
[16:49:44.063]      version = deviceID >> 28;
[16:49:44.063]        // -> [version <= 0x00000002]
[16:49:44.063]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:49:44.063]        // -> [partNum <= 0x0000BB88]
[16:49:44.063]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:49:44.063]        // -> [manuf <= 0x00000017]
[16:49:44.063]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:49:44.063]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:49:44.063]      isProduction = (version > 0);
[16:49:44.063]        // -> [isProduction <= 0x00000001]
[16:49:44.063]    </block>
[16:49:44.063]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:49:44.063]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:49:44.063]        // =>  FALSE
[16:49:44.063]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:49:44.063]    </control>
[16:49:44.063]    <control if="continueId == 4" while="" timeout="0" info="">
[16:49:44.063]      // if-block "continueId == 4"
[16:49:44.067]        // =>  FALSE
[16:49:44.067]      // skip if-block "continueId == 4"
[16:49:44.067]    </control>
[16:49:44.067]    <control if="!isProduction" while="" timeout="0" info="">
[16:49:44.067]      // if-block "!isProduction"
[16:49:44.067]        // =>  FALSE
[16:49:44.067]      // skip if-block "!isProduction"
[16:49:44.067]    </control>
[16:49:44.067]  </sequence>
[16:49:44.067]  
[16:50:40.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:50:40.968]  
[16:50:40.979]  <debugvars>
[16:50:40.979]    // Pre-defined
[16:50:40.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:40.979]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:40.979]    __dp=0x00000000
[16:50:40.979]    __ap=0x00000000
[16:50:40.979]    __traceout=0x00000000      (Trace Disabled)
[16:50:40.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:40.979]    __FlashAddr=0x00000000
[16:50:40.979]    __FlashLen=0x00000000
[16:50:40.979]    __FlashArg=0x00000000
[16:50:40.979]    __FlashOp=0x00000000
[16:50:40.979]    __Result=0x00000000
[16:50:40.979]  </debugvars>
[16:50:40.979]  
[16:50:40.979]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:50:40.979]    <block atomic="false" info="">
[16:50:40.979]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:50:40.979]        // -> [isSWJ <= 0x00000001]
[16:50:40.979]      __var hasDormant = __protocol & 0x00020000;
[16:50:40.979]        // -> [hasDormant <= 0x00000000]
[16:50:40.979]      __var protType   = __protocol & 0x0000FFFF;
[16:50:40.979]        // -> [protType <= 0x00000002]
[16:50:40.979]    </block>
[16:50:40.979]    <control if="protType == 1" while="" timeout="0" info="">
[16:50:40.979]      // if-block "protType == 1"
[16:50:40.979]        // =>  FALSE
[16:50:40.979]      // skip if-block "protType == 1"
[16:50:40.979]    </control>
[16:50:40.979]    <control if="protType == 2" while="" timeout="0" info="">
[16:50:40.979]      // if-block "protType == 2"
[16:50:40.979]        // =>  TRUE
[16:50:40.979]      <control if="isSWJ" while="" timeout="0" info="">
[16:50:40.979]        // if-block "isSWJ"
[16:50:40.979]          // =>  TRUE
[16:50:40.979]        <control if="hasDormant" while="" timeout="0" info="">
[16:50:40.979]          // if-block "hasDormant"
[16:50:40.979]            // =>  FALSE
[16:50:40.979]          // skip if-block "hasDormant"
[16:50:40.979]        </control>
[16:50:40.979]        <control if="!hasDormant" while="" timeout="0" info="">
[16:50:40.979]          // if-block "!hasDormant"
[16:50:40.979]            // =>  TRUE
[16:50:40.979]          <block atomic="false" info="">
[16:50:40.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:50:40.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:40.984]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:50:40.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:50:40.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:50:40.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:40.989]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:50:40.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:50:40.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:50:40.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:40.994]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:50:40.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:50:40.994]          </block>
[16:50:40.994]          // end if-block "!hasDormant"
[16:50:40.994]        </control>
[16:50:40.994]        // end if-block "isSWJ"
[16:50:40.994]      </control>
[16:50:40.994]      <control if="!isSWJ" while="" timeout="0" info="">
[16:50:40.994]        // if-block "!isSWJ"
[16:50:40.994]          // =>  FALSE
[16:50:40.994]        // skip if-block "!isSWJ"
[16:50:40.994]      </control>
[16:50:40.994]      <block atomic="false" info="">
[16:50:40.994]        ReadDP(0x0);
[16:50:40.998]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:50:40.998]      </block>
[16:50:40.998]      // end if-block "protType == 2"
[16:50:40.998]    </control>
[16:50:40.998]  </sequence>
[16:50:40.998]  
[16:50:41.000]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:50:41.000]  
[16:50:41.000]  <debugvars>
[16:50:41.000]    // Pre-defined
[16:50:41.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:41.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:41.000]    __dp=0x00000000
[16:50:41.000]    __ap=0x00000000
[16:50:41.000]    __traceout=0x00000000      (Trace Disabled)
[16:50:41.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:41.000]    __FlashAddr=0x00000000
[16:50:41.000]    __FlashLen=0x00000000
[16:50:41.000]    __FlashArg=0x00000000
[16:50:41.000]    __FlashOp=0x00000000
[16:50:41.000]    __Result=0x00000000
[16:50:41.000]  </debugvars>
[16:50:41.000]  
[16:50:41.000]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:50:41.000]    <block atomic="false" info="">
[16:50:41.000]      __var SW_DP_ABORT       = 0x0;
[16:50:41.000]        // -> [SW_DP_ABORT <= 0x00000000]
[16:50:41.000]      __var DP_CTRL_STAT      = 0x4;
[16:50:41.000]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:50:41.000]      __var DP_SELECT         = 0x8;
[16:50:41.004]        // -> [DP_SELECT <= 0x00000008]
[16:50:41.004]      __var powered_down      = 0;
[16:50:41.004]        // -> [powered_down <= 0x00000000]
[16:50:41.004]      WriteDP(DP_SELECT, 0x00000000);
[16:50:41.005]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:50:41.005]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:50:41.009]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:50:41.009]        // -> [powered_down <= 0x00000001]
[16:50:41.009]    </block>
[16:50:41.010]    <control if="powered_down" while="" timeout="0" info="">
[16:50:41.010]      // if-block "powered_down"
[16:50:41.010]        // =>  TRUE
[16:50:41.010]      <block atomic="false" info="">
[16:50:41.010]        Message(0, "Debug/System power-up request sent");
[16:50:41.012]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:50:41.014]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:50:41.014]      </block>
[16:50:41.014]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:50:41.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:50:41.014]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:50:41.014]        // while-condition  =>  FALSE
[16:50:41.014]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:50:41.019]      </control>
[16:50:41.019]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:50:41.019]        // if-block "(__protocol & 0xFFFF) == 1"
[16:50:41.019]          // =>  FALSE
[16:50:41.019]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:50:41.019]      </control>
[16:50:41.019]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:50:41.019]        // if-block "(__protocol & 0xFFFF) == 2"
[16:50:41.019]          // =>  TRUE
[16:50:41.019]        <block atomic="false" info="">
[16:50:41.019]          Message(0, "executing SWD power up");
[16:50:41.021]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:50:41.030]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:50:41.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:50:41.030]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:50:41.030]        </block>
[16:50:41.030]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:50:41.030]      </control>
[16:50:41.030]      // end if-block "powered_down"
[16:50:41.030]    </control>
[16:50:41.030]    <block atomic="false" info="">
[16:50:41.030]      __var DEBUG_PORT_VAL    = 0;
[16:50:41.030]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:50:41.030]      __var ACCESS_POINT_VAL  = 0;
[16:50:41.030]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:50:41.030]      __ap = 1; 
[16:50:41.034]        // -> [__ap <= 0x00000001]
[16:50:41.034]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:50:41.039]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:50:41.039]      __ap = 4;
[16:50:41.039]        // -> [__ap <= 0x00000004]
[16:50:41.039]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:41.044]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:50:41.044]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:50:41.044]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:41.044]    </block>
[16:50:41.044]    <block atomic="false" info="">
[16:50:41.044]      __var nReset = 0x80;
[16:50:41.044]        // -> [nReset <= 0x00000080]
[16:50:41.044]      __var canReadPins = 0;
[16:50:41.044]        // -> [canReadPins <= 0x00000000]
[16:50:41.044]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:50:41.049]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:50:41.049]        // -> [canReadPins <= 0x00000001]
[16:50:41.049]    </block>
[16:50:41.049]    <control if="" while="1" timeout="200" info="">
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.049]      // while "1"  (timeout="200")
[16:50:41.049]      // while-condition  =>  TRUE
[16:50:41.052]      // while "1"  (timeout="200")
[16:50:41.052]      // while  =>  TIMEOUT
[16:50:41.052]      // end while "1"
[16:50:41.052]    </control>
[16:50:41.052]    <control if="canReadPins" while="" timeout="0" info="">
[16:50:41.052]      // if-block "canReadPins"
[16:50:41.052]        // =>  TRUE
[16:50:41.052]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:50:41.052]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:50:41.054]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:50:41.054]        // while-condition  =>  FALSE
[16:50:41.054]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:50:41.054]      </control>
[16:50:41.054]      // end if-block "canReadPins"
[16:50:41.054]    </control>
[16:50:41.054]    <control if="!canReadPins" while="" timeout="0" info="">
[16:50:41.054]      // if-block "!canReadPins"
[16:50:41.054]        // =>  FALSE
[16:50:41.054]      // skip if-block "!canReadPins"
[16:50:41.054]    </control>
[16:50:41.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:50:41.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:41.054]        // =>  TRUE
[16:50:41.054]      <block atomic="false" info="">
[16:50:41.054]        WriteAP(0x00, 0x190008);
[16:50:41.059]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:41.059]        WriteAP(0xF0, 0x01);
[16:50:41.064]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:41.064]      </block>
[16:50:41.064]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:41.064]    </control>
[16:50:41.064]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:50:41.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:41.064]        // =>  FALSE
[16:50:41.064]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:41.064]    </control>
[16:50:41.064]    <block atomic="false" info="">
[16:50:41.064]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:41.070]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:50:41.070]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:50:41.070]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:41.070]      __ap = 0; //lets make sure we reset the access point selection
[16:50:41.070]        // -> [__ap <= 0x00000000]
[16:50:41.070]    </block>
[16:50:41.070]  </sequence>
[16:50:41.070]  
[16:50:41.102]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:50:41.102]  
[16:50:41.102]  <debugvars>
[16:50:41.104]    // Pre-defined
[16:50:41.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:41.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:41.104]    __dp=0x00000000
[16:50:41.104]    __ap=0x00000000
[16:50:41.104]    __traceout=0x00000000      (Trace Disabled)
[16:50:41.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:41.104]    __FlashAddr=0x00000000
[16:50:41.104]    __FlashLen=0x00000000
[16:50:41.104]    __FlashArg=0x00000000
[16:50:41.104]    __FlashOp=0x00000000
[16:50:41.104]    __Result=0x00000000
[16:50:41.104]  </debugvars>
[16:50:41.104]  
[16:50:41.104]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:50:41.104]    <block atomic="false" info="">
[16:50:41.104]      __var deviceID = 0;
[16:50:41.104]        // -> [deviceID <= 0x00000000]
[16:50:41.104]      __var version = 0;
[16:50:41.104]        // -> [version <= 0x00000000]
[16:50:41.104]      __var partNum = 0;
[16:50:41.104]        // -> [partNum <= 0x00000000]
[16:50:41.104]      __var manuf = 0;
[16:50:41.104]        // -> [manuf <= 0x00000000]
[16:50:41.104]      __var isMSPM0G1X0X_G3X0X = 0;
[16:50:41.104]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:50:41.104]      __var isProduction = 0;
[16:50:41.104]        // -> [isProduction <= 0x00000000]
[16:50:41.104]      __var continueId = 0;
[16:50:41.104]        // -> [continueId <= 0x00000000]
[16:50:41.104]      deviceID =   Read32(0x41C40004);
[16:50:41.112]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:50:41.112]        // -> [deviceID <= 0x2BB8802F]
[16:50:41.112]      version = deviceID >> 28;
[16:50:41.114]        // -> [version <= 0x00000002]
[16:50:41.114]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:50:41.114]        // -> [partNum <= 0x0000BB88]
[16:50:41.114]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:50:41.114]        // -> [manuf <= 0x00000017]
[16:50:41.114]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:50:41.114]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:50:41.114]      isProduction = (version > 0);
[16:50:41.114]        // -> [isProduction <= 0x00000001]
[16:50:41.114]    </block>
[16:50:41.114]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:50:41.114]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:50:41.114]        // =>  FALSE
[16:50:41.114]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:50:41.114]    </control>
[16:50:41.114]    <control if="continueId == 4" while="" timeout="0" info="">
[16:50:41.114]      // if-block "continueId == 4"
[16:50:41.114]        // =>  FALSE
[16:50:41.114]      // skip if-block "continueId == 4"
[16:50:41.116]    </control>
[16:50:41.116]    <control if="!isProduction" while="" timeout="0" info="">
[16:50:41.116]      // if-block "!isProduction"
[16:50:41.116]        // =>  FALSE
[16:50:41.116]      // skip if-block "!isProduction"
[16:50:41.116]    </control>
[16:50:41.116]  </sequence>
[16:50:41.116]  
[16:50:49.506]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:50:49.506]  
[16:50:49.506]  <debugvars>
[16:50:49.506]    // Pre-defined
[16:50:49.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.506]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.506]    __dp=0x00000000
[16:50:49.516]    __ap=0x00000000
[16:50:49.516]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.516]    __FlashAddr=0x00000000
[16:50:49.516]    __FlashLen=0x00000000
[16:50:49.516]    __FlashArg=0x00000000
[16:50:49.516]    __FlashOp=0x00000000
[16:50:49.516]    __Result=0x00000000
[16:50:49.516]  </debugvars>
[16:50:49.516]  
[16:50:49.516]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:50:49.516]    <block atomic="false" info="">
[16:50:49.516]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:50:49.516]        // -> [isSWJ <= 0x00000001]
[16:50:49.516]      __var hasDormant = __protocol & 0x00020000;
[16:50:49.516]        // -> [hasDormant <= 0x00000000]
[16:50:49.516]      __var protType   = __protocol & 0x0000FFFF;
[16:50:49.516]        // -> [protType <= 0x00000002]
[16:50:49.516]    </block>
[16:50:49.516]    <control if="protType == 1" while="" timeout="0" info="">
[16:50:49.516]      // if-block "protType == 1"
[16:50:49.516]        // =>  FALSE
[16:50:49.516]      // skip if-block "protType == 1"
[16:50:49.516]    </control>
[16:50:49.516]    <control if="protType == 2" while="" timeout="0" info="">
[16:50:49.516]      // if-block "protType == 2"
[16:50:49.516]        // =>  TRUE
[16:50:49.516]      <control if="isSWJ" while="" timeout="0" info="">
[16:50:49.516]        // if-block "isSWJ"
[16:50:49.516]          // =>  TRUE
[16:50:49.516]        <control if="hasDormant" while="" timeout="0" info="">
[16:50:49.516]          // if-block "hasDormant"
[16:50:49.516]            // =>  FALSE
[16:50:49.516]          // skip if-block "hasDormant"
[16:50:49.516]        </control>
[16:50:49.516]        <control if="!hasDormant" while="" timeout="0" info="">
[16:50:49.516]          // if-block "!hasDormant"
[16:50:49.516]            // =>  TRUE
[16:50:49.516]          <block atomic="false" info="">
[16:50:49.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:50:49.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.516]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:50:49.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:50:49.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:50:49.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:50:49.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:50:49.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:50:49.536]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.536]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:50:49.536]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:50:49.536]          </block>
[16:50:49.536]          // end if-block "!hasDormant"
[16:50:49.536]        </control>
[16:50:49.536]        // end if-block "isSWJ"
[16:50:49.536]      </control>
[16:50:49.536]      <control if="!isSWJ" while="" timeout="0" info="">
[16:50:49.536]        // if-block "!isSWJ"
[16:50:49.536]          // =>  FALSE
[16:50:49.536]        // skip if-block "!isSWJ"
[16:50:49.536]      </control>
[16:50:49.536]      <block atomic="false" info="">
[16:50:49.536]        ReadDP(0x0);
[16:50:49.536]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:50:49.536]      </block>
[16:50:49.536]      // end if-block "protType == 2"
[16:50:49.546]    </control>
[16:50:49.546]  </sequence>
[16:50:49.546]  
[16:50:49.546]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:50:49.546]  
[16:50:49.546]  <debugvars>
[16:50:49.546]    // Pre-defined
[16:50:49.546]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.546]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.546]    __dp=0x00000000
[16:50:49.546]    __ap=0x00000000
[16:50:49.546]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.556]    __FlashAddr=0x00000000
[16:50:49.556]    __FlashLen=0x00000000
[16:50:49.556]    __FlashArg=0x00000000
[16:50:49.556]    __FlashOp=0x00000000
[16:50:49.556]    __Result=0x00000000
[16:50:49.556]  </debugvars>
[16:50:49.556]  
[16:50:49.556]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:50:49.556]    <block atomic="false" info="">
[16:50:49.556]      __var SW_DP_ABORT       = 0x0;
[16:50:49.556]        // -> [SW_DP_ABORT <= 0x00000000]
[16:50:49.556]      __var DP_CTRL_STAT      = 0x4;
[16:50:49.556]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:50:49.556]      __var DP_SELECT         = 0x8;
[16:50:49.556]        // -> [DP_SELECT <= 0x00000008]
[16:50:49.556]      __var powered_down      = 0;
[16:50:49.556]        // -> [powered_down <= 0x00000000]
[16:50:49.556]      WriteDP(DP_SELECT, 0x00000000);
[16:50:49.556]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:50:49.556]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:50:49.566]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:50:49.566]        // -> [powered_down <= 0x00000001]
[16:50:49.566]    </block>
[16:50:49.566]    <control if="powered_down" while="" timeout="0" info="">
[16:50:49.566]      // if-block "powered_down"
[16:50:49.566]        // =>  TRUE
[16:50:49.566]      <block atomic="false" info="">
[16:50:49.566]        Message(0, "Debug/System power-up request sent");
[16:50:49.566]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:50:49.566]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:50:49.566]      </block>
[16:50:49.566]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:50:49.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:50:49.566]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:50:49.576]        // while-condition  =>  FALSE
[16:50:49.576]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:50:49.576]      </control>
[16:50:49.576]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:50:49.576]        // if-block "(__protocol & 0xFFFF) == 1"
[16:50:49.576]          // =>  FALSE
[16:50:49.576]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:50:49.576]      </control>
[16:50:49.576]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:50:49.576]        // if-block "(__protocol & 0xFFFF) == 2"
[16:50:49.576]          // =>  TRUE
[16:50:49.576]        <block atomic="false" info="">
[16:50:49.576]          Message(0, "executing SWD power up");
[16:50:49.576]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:50:49.576]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:50:49.576]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:50:49.576]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:50:49.576]        </block>
[16:50:49.586]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:50:49.586]      </control>
[16:50:49.586]      // end if-block "powered_down"
[16:50:49.586]    </control>
[16:50:49.586]    <block atomic="false" info="">
[16:50:49.586]      __var DEBUG_PORT_VAL    = 0;
[16:50:49.586]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:50:49.586]      __var ACCESS_POINT_VAL  = 0;
[16:50:49.586]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:50:49.586]      __ap = 1; 
[16:50:49.586]        // -> [__ap <= 0x00000001]
[16:50:49.586]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:50:49.586]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:50:49.586]      __ap = 4;
[16:50:49.586]        // -> [__ap <= 0x00000004]
[16:50:49.586]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:49.596]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.596]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:50:49.596]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:49.596]    </block>
[16:50:49.596]    <block atomic="false" info="">
[16:50:49.596]      __var nReset = 0x80;
[16:50:49.596]        // -> [nReset <= 0x00000080]
[16:50:49.596]      __var canReadPins = 0;
[16:50:49.596]        // -> [canReadPins <= 0x00000000]
[16:50:49.596]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:50:49.596]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:50:49.596]        // -> [canReadPins <= 0x00000001]
[16:50:49.596]    </block>
[16:50:49.596]    <control if="" while="1" timeout="200" info="">
[16:50:49.596]      // while "1"  (timeout="200")
[16:50:49.596]      // while-condition  =>  TRUE
[16:50:49.596]      // while "1"  (timeout="200")
[16:50:49.596]      // while-condition  =>  TRUE
[16:50:49.596]      // while "1"  (timeout="200")
[16:50:49.596]      // while-condition  =>  TRUE
[16:50:49.606]      // while "1"  (timeout="200")
[16:50:49.606]      // while  =>  TIMEOUT
[16:50:49.606]      // end while "1"
[16:50:49.606]    </control>
[16:50:49.606]    <control if="canReadPins" while="" timeout="0" info="">
[16:50:49.606]      // if-block "canReadPins"
[16:50:49.606]        // =>  TRUE
[16:50:49.606]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:50:49.606]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:50:49.606]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:50:49.606]        // while-condition  =>  FALSE
[16:50:49.606]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:50:49.606]      </control>
[16:50:49.606]      // end if-block "canReadPins"
[16:50:49.606]    </control>
[16:50:49.606]    <control if="!canReadPins" while="" timeout="0" info="">
[16:50:49.606]      // if-block "!canReadPins"
[16:50:49.606]        // =>  FALSE
[16:50:49.606]      // skip if-block "!canReadPins"
[16:50:49.606]    </control>
[16:50:49.606]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:50:49.606]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:49.606]        // =>  TRUE
[16:50:49.606]      <block atomic="false" info="">
[16:50:49.606]        WriteAP(0x00, 0x190008);
[16:50:49.606]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.606]        WriteAP(0xF0, 0x01);
[16:50:49.616]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.616]      </block>
[16:50:49.616]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:49.616]    </control>
[16:50:49.616]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:50:49.616]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:49.616]        // =>  FALSE
[16:50:49.616]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:49.616]    </control>
[16:50:49.616]    <block atomic="false" info="">
[16:50:49.616]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:49.626]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.626]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:50:49.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:49.626]      __ap = 0; //lets make sure we reset the access point selection
[16:50:49.626]        // -> [__ap <= 0x00000000]
[16:50:49.626]    </block>
[16:50:49.626]  </sequence>
[16:50:49.626]  
[16:50:49.666]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:50:49.666]  
[16:50:49.666]  <debugvars>
[16:50:49.666]    // Pre-defined
[16:50:49.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.666]    __dp=0x00000000
[16:50:49.666]    __ap=0x00000000
[16:50:49.666]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.666]    __FlashAddr=0x00000000
[16:50:49.666]    __FlashLen=0x00000000
[16:50:49.666]    __FlashArg=0x00000000
[16:50:49.666]    __FlashOp=0x00000000
[16:50:49.666]    __Result=0x00000000
[16:50:49.666]  </debugvars>
[16:50:49.666]  
[16:50:49.666]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:50:49.666]    <block atomic="false" info="">
[16:50:49.666]      __var deviceID = 0;
[16:50:49.666]        // -> [deviceID <= 0x00000000]
[16:50:49.666]      __var version = 0;
[16:50:49.666]        // -> [version <= 0x00000000]
[16:50:49.666]      __var partNum = 0;
[16:50:49.666]        // -> [partNum <= 0x00000000]
[16:50:49.666]      __var manuf = 0;
[16:50:49.666]        // -> [manuf <= 0x00000000]
[16:50:49.666]      __var isMSPM0G1X0X_G3X0X = 0;
[16:50:49.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:50:49.666]      __var isProduction = 0;
[16:50:49.666]        // -> [isProduction <= 0x00000000]
[16:50:49.666]      __var continueId = 0;
[16:50:49.666]        // -> [continueId <= 0x00000000]
[16:50:49.666]      deviceID =   Read32(0x41C40004);
[16:50:49.676]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:50:49.676]        // -> [deviceID <= 0x2BB8802F]
[16:50:49.676]      version = deviceID >> 28;
[16:50:49.676]        // -> [version <= 0x00000002]
[16:50:49.676]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:50:49.676]        // -> [partNum <= 0x0000BB88]
[16:50:49.676]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:50:49.676]        // -> [manuf <= 0x00000017]
[16:50:49.676]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:50:49.676]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:50:49.676]      isProduction = (version > 0);
[16:50:49.676]        // -> [isProduction <= 0x00000001]
[16:50:49.676]    </block>
[16:50:49.676]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:50:49.676]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:50:49.676]        // =>  FALSE
[16:50:49.676]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:50:49.676]    </control>
[16:50:49.676]    <control if="continueId == 4" while="" timeout="0" info="">
[16:50:49.676]      // if-block "continueId == 4"
[16:50:49.676]        // =>  FALSE
[16:50:49.676]      // skip if-block "continueId == 4"
[16:50:49.676]    </control>
[16:50:49.676]    <control if="!isProduction" while="" timeout="0" info="">
[16:50:49.676]      // if-block "!isProduction"
[16:50:49.676]        // =>  FALSE
[16:50:49.676]      // skip if-block "!isProduction"
[16:50:49.676]    </control>
[16:50:49.676]  </sequence>
[16:50:49.676]  
[16:51:19.330]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:51:19.330]  
[16:51:19.333]  <debugvars>
[16:51:19.333]    // Pre-defined
[16:51:19.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:19.333]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:19.333]    __dp=0x00000000
[16:51:19.333]    __ap=0x00000000
[16:51:19.333]    __traceout=0x00000000      (Trace Disabled)
[16:51:19.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:19.333]    __FlashAddr=0x00000000
[16:51:19.333]    __FlashLen=0x00000000
[16:51:19.333]    __FlashArg=0x00000000
[16:51:19.333]    __FlashOp=0x00000000
[16:51:19.333]    __Result=0x00000000
[16:51:19.333]  </debugvars>
[16:51:19.333]  
[16:51:19.333]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:51:19.333]    <block atomic="false" info="">
[16:51:19.333]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:51:19.333]        // -> [isSWJ <= 0x00000001]
[16:51:19.333]      __var hasDormant = __protocol & 0x00020000;
[16:51:19.333]        // -> [hasDormant <= 0x00000000]
[16:51:19.335]      __var protType   = __protocol & 0x0000FFFF;
[16:51:19.335]        // -> [protType <= 0x00000002]
[16:51:19.335]    </block>
[16:51:19.335]    <control if="protType == 1" while="" timeout="0" info="">
[16:51:19.335]      // if-block "protType == 1"
[16:51:19.335]        // =>  FALSE
[16:51:19.335]      // skip if-block "protType == 1"
[16:51:19.335]    </control>
[16:51:19.335]    <control if="protType == 2" while="" timeout="0" info="">
[16:51:19.335]      // if-block "protType == 2"
[16:51:19.335]        // =>  TRUE
[16:51:19.335]      <control if="isSWJ" while="" timeout="0" info="">
[16:51:19.335]        // if-block "isSWJ"
[16:51:19.335]          // =>  TRUE
[16:51:19.335]        <control if="hasDormant" while="" timeout="0" info="">
[16:51:19.335]          // if-block "hasDormant"
[16:51:19.337]            // =>  FALSE
[16:51:19.337]          // skip if-block "hasDormant"
[16:51:19.337]        </control>
[16:51:19.337]        <control if="!hasDormant" while="" timeout="0" info="">
[16:51:19.337]          // if-block "!hasDormant"
[16:51:19.337]            // =>  TRUE
[16:51:19.337]          <block atomic="false" info="">
[16:51:19.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:51:19.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:19.343]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:51:19.343]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:51:19.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:51:19.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:19.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:51:19.348]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:51:19.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:51:19.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:19.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:51:19.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:51:19.353]          </block>
[16:51:19.354]          // end if-block "!hasDormant"
[16:51:19.354]        </control>
[16:51:19.354]        // end if-block "isSWJ"
[16:51:19.354]      </control>
[16:51:19.354]      <control if="!isSWJ" while="" timeout="0" info="">
[16:51:19.354]        // if-block "!isSWJ"
[16:51:19.354]          // =>  FALSE
[16:51:19.354]        // skip if-block "!isSWJ"
[16:51:19.354]      </control>
[16:51:19.354]      <block atomic="false" info="">
[16:51:19.354]        ReadDP(0x0);
[16:51:19.355]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:51:19.355]      </block>
[16:51:19.355]      // end if-block "protType == 2"
[16:51:19.355]    </control>
[16:51:19.355]  </sequence>
[16:51:19.355]  
[16:51:19.358]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:51:19.358]  
[16:51:19.358]  <debugvars>
[16:51:19.358]    // Pre-defined
[16:51:19.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:19.358]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:19.358]    __dp=0x00000000
[16:51:19.358]    __ap=0x00000000
[16:51:19.358]    __traceout=0x00000000      (Trace Disabled)
[16:51:19.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:19.358]    __FlashAddr=0x00000000
[16:51:19.358]    __FlashLen=0x00000000
[16:51:19.358]    __FlashArg=0x00000000
[16:51:19.358]    __FlashOp=0x00000000
[16:51:19.358]    __Result=0x00000000
[16:51:19.358]  </debugvars>
[16:51:19.358]  
[16:51:19.358]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:51:19.358]    <block atomic="false" info="">
[16:51:19.358]      __var SW_DP_ABORT       = 0x0;
[16:51:19.358]        // -> [SW_DP_ABORT <= 0x00000000]
[16:51:19.358]      __var DP_CTRL_STAT      = 0x4;
[16:51:19.358]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:51:19.358]      __var DP_SELECT         = 0x8;
[16:51:19.358]        // -> [DP_SELECT <= 0x00000008]
[16:51:19.358]      __var powered_down      = 0;
[16:51:19.358]        // -> [powered_down <= 0x00000000]
[16:51:19.358]      WriteDP(DP_SELECT, 0x00000000);
[16:51:19.363]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:51:19.363]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:51:19.363]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:51:19.363]        // -> [powered_down <= 0x00000001]
[16:51:19.363]    </block>
[16:51:19.363]    <control if="powered_down" while="" timeout="0" info="">
[16:51:19.363]      // if-block "powered_down"
[16:51:19.363]        // =>  TRUE
[16:51:19.363]      <block atomic="false" info="">
[16:51:19.363]        Message(0, "Debug/System power-up request sent");
[16:51:19.370]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:51:19.370]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:51:19.370]      </block>
[16:51:19.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:51:19.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:51:19.374]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:51:19.374]        // while-condition  =>  FALSE
[16:51:19.374]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:51:19.374]      </control>
[16:51:19.374]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:51:19.374]        // if-block "(__protocol & 0xFFFF) == 1"
[16:51:19.374]          // =>  FALSE
[16:51:19.374]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:51:19.374]      </control>
[16:51:19.374]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:51:19.374]        // if-block "(__protocol & 0xFFFF) == 2"
[16:51:19.374]          // =>  TRUE
[16:51:19.374]        <block atomic="false" info="">
[16:51:19.374]          Message(0, "executing SWD power up");
[16:51:19.374]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:51:19.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:51:19.379]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:51:19.379]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:51:19.379]        </block>
[16:51:19.379]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:51:19.379]      </control>
[16:51:19.379]      // end if-block "powered_down"
[16:51:19.379]    </control>
[16:51:19.379]    <block atomic="false" info="">
[16:51:19.379]      __var DEBUG_PORT_VAL    = 0;
[16:51:19.379]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:51:19.379]      __var ACCESS_POINT_VAL  = 0;
[16:51:19.379]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:51:19.379]      __ap = 1; 
[16:51:19.379]        // -> [__ap <= 0x00000001]
[16:51:19.379]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:51:19.383]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:51:19.383]      __ap = 4;
[16:51:19.383]        // -> [__ap <= 0x00000004]
[16:51:19.383]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:51:19.388]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:51:19.388]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:51:19.388]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:51:19.388]    </block>
[16:51:19.388]    <block atomic="false" info="">
[16:51:19.388]      __var nReset = 0x80;
[16:51:19.388]        // -> [nReset <= 0x00000080]
[16:51:19.388]      __var canReadPins = 0;
[16:51:19.388]        // -> [canReadPins <= 0x00000000]
[16:51:19.388]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:51:19.393]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:51:19.393]        // -> [canReadPins <= 0x00000001]
[16:51:19.393]    </block>
[16:51:19.393]    <control if="" while="1" timeout="200" info="">
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.393]      // while "1"  (timeout="200")
[16:51:19.393]      // while-condition  =>  TRUE
[16:51:19.398]      // while "1"  (timeout="200")
[16:51:19.398]      // while  =>  TIMEOUT
[16:51:19.398]      // end while "1"
[16:51:19.398]    </control>
[16:51:19.398]    <control if="canReadPins" while="" timeout="0" info="">
[16:51:19.398]      // if-block "canReadPins"
[16:51:19.398]        // =>  TRUE
[16:51:19.398]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:51:19.398]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:51:19.398]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:51:19.398]        // while-condition  =>  FALSE
[16:51:19.398]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:51:19.398]      </control>
[16:51:19.398]      // end if-block "canReadPins"
[16:51:19.398]    </control>
[16:51:19.398]    <control if="!canReadPins" while="" timeout="0" info="">
[16:51:19.398]      // if-block "!canReadPins"
[16:51:19.398]        // =>  FALSE
[16:51:19.398]      // skip if-block "!canReadPins"
[16:51:19.398]    </control>
[16:51:19.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:51:19.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:51:19.398]        // =>  TRUE
[16:51:19.398]      <block atomic="false" info="">
[16:51:19.398]        WriteAP(0x00, 0x190008);
[16:51:19.403]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:51:19.403]        WriteAP(0xF0, 0x01);
[16:51:19.408]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:51:19.408]      </block>
[16:51:19.408]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:51:19.408]    </control>
[16:51:19.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:51:19.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:51:19.408]        // =>  FALSE
[16:51:19.408]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:51:19.408]    </control>
[16:51:19.408]    <block atomic="false" info="">
[16:51:19.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:51:19.415]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:51:19.415]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:51:19.415]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:51:19.419]      __ap = 0; //lets make sure we reset the access point selection
[16:51:19.419]        // -> [__ap <= 0x00000000]
[16:51:19.419]    </block>
[16:51:19.419]  </sequence>
[16:51:19.419]  
[16:51:19.443]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:51:19.443]  
[16:51:19.443]  <debugvars>
[16:51:19.443]    // Pre-defined
[16:51:19.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:19.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:19.443]    __dp=0x00000000
[16:51:19.443]    __ap=0x00000000
[16:51:19.443]    __traceout=0x00000000      (Trace Disabled)
[16:51:19.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:19.443]    __FlashAddr=0x00000000
[16:51:19.443]    __FlashLen=0x00000000
[16:51:19.443]    __FlashArg=0x00000000
[16:51:19.443]    __FlashOp=0x00000000
[16:51:19.443]    __Result=0x00000000
[16:51:19.443]  </debugvars>
[16:51:19.443]  
[16:51:19.443]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:51:19.443]    <block atomic="false" info="">
[16:51:19.443]      __var deviceID = 0;
[16:51:19.443]        // -> [deviceID <= 0x00000000]
[16:51:19.443]      __var version = 0;
[16:51:19.443]        // -> [version <= 0x00000000]
[16:51:19.443]      __var partNum = 0;
[16:51:19.443]        // -> [partNum <= 0x00000000]
[16:51:19.443]      __var manuf = 0;
[16:51:19.443]        // -> [manuf <= 0x00000000]
[16:51:19.443]      __var isMSPM0G1X0X_G3X0X = 0;
[16:51:19.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:51:19.443]      __var isProduction = 0;
[16:51:19.443]        // -> [isProduction <= 0x00000000]
[16:51:19.443]      __var continueId = 0;
[16:51:19.443]        // -> [continueId <= 0x00000000]
[16:51:19.443]      deviceID =   Read32(0x41C40004);
[16:51:19.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:51:19.463]        // -> [deviceID <= 0x2BB8802F]
[16:51:19.463]      version = deviceID >> 28;
[16:51:19.463]        // -> [version <= 0x00000002]
[16:51:19.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:51:19.463]        // -> [partNum <= 0x0000BB88]
[16:51:19.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:51:19.463]        // -> [manuf <= 0x00000017]
[16:51:19.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:51:19.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:51:19.463]      isProduction = (version > 0);
[16:51:19.463]        // -> [isProduction <= 0x00000001]
[16:51:19.463]    </block>
[16:51:19.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:51:19.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:51:19.463]        // =>  FALSE
[16:51:19.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:51:19.463]    </control>
[16:51:19.463]    <control if="continueId == 4" while="" timeout="0" info="">
[16:51:19.463]      // if-block "continueId == 4"
[16:51:19.463]        // =>  FALSE
[16:51:19.463]      // skip if-block "continueId == 4"
[16:51:19.463]    </control>
[16:51:19.463]    <control if="!isProduction" while="" timeout="0" info="">
[16:51:19.463]      // if-block "!isProduction"
[16:51:19.463]        // =>  FALSE
[16:51:19.463]      // skip if-block "!isProduction"
[16:51:19.463]    </control>
[16:51:19.468]  </sequence>
[16:51:19.468]  
[16:52:17.209]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:52:17.209]  
[16:52:17.209]  <debugvars>
[16:52:17.209]    // Pre-defined
[16:52:17.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:52:17.209]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:52:17.209]    __dp=0x00000000
[16:52:17.209]    __ap=0x00000000
[16:52:17.209]    __traceout=0x00000000      (Trace Disabled)
[16:52:17.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:52:17.209]    __FlashAddr=0x00000000
[16:52:17.209]    __FlashLen=0x00000000
[16:52:17.209]    __FlashArg=0x00000000
[16:52:17.209]    __FlashOp=0x00000000
[16:52:17.209]    __Result=0x00000000
[16:52:17.209]  </debugvars>
[16:52:17.209]  
[16:52:17.209]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:52:17.209]    <block atomic="false" info="">
[16:52:17.209]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:52:17.209]        // -> [isSWJ <= 0x00000001]
[16:52:17.209]      __var hasDormant = __protocol & 0x00020000;
[16:52:17.209]        // -> [hasDormant <= 0x00000000]
[16:52:17.209]      __var protType   = __protocol & 0x0000FFFF;
[16:52:17.209]        // -> [protType <= 0x00000002]
[16:52:17.209]    </block>
[16:52:17.209]    <control if="protType == 1" while="" timeout="0" info="">
[16:52:17.209]      // if-block "protType == 1"
[16:52:17.209]        // =>  FALSE
[16:52:17.209]      // skip if-block "protType == 1"
[16:52:17.209]    </control>
[16:52:17.209]    <control if="protType == 2" while="" timeout="0" info="">
[16:52:17.209]      // if-block "protType == 2"
[16:52:17.209]        // =>  TRUE
[16:52:17.209]      <control if="isSWJ" while="" timeout="0" info="">
[16:52:17.209]        // if-block "isSWJ"
[16:52:17.209]          // =>  TRUE
[16:52:17.209]        <control if="hasDormant" while="" timeout="0" info="">
[16:52:17.209]          // if-block "hasDormant"
[16:52:17.209]            // =>  FALSE
[16:52:17.209]          // skip if-block "hasDormant"
[16:52:17.209]        </control>
[16:52:17.209]        <control if="!hasDormant" while="" timeout="0" info="">
[16:52:17.209]          // if-block "!hasDormant"
[16:52:17.209]            // =>  TRUE
[16:52:17.209]          <block atomic="false" info="">
[16:52:17.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:52:17.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:52:17.216]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:52:17.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:52:17.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:52:17.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:52:17.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:52:17.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:52:17.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:52:17.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:52:17.216]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:52:17.226]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:52:17.226]          </block>
[16:52:17.226]          // end if-block "!hasDormant"
[16:52:17.226]        </control>
[16:52:17.226]        // end if-block "isSWJ"
[16:52:17.226]      </control>
[16:52:17.226]      <control if="!isSWJ" while="" timeout="0" info="">
[16:52:17.226]        // if-block "!isSWJ"
[16:52:17.226]          // =>  FALSE
[16:52:17.226]        // skip if-block "!isSWJ"
[16:52:17.226]      </control>
[16:52:17.226]      <block atomic="false" info="">
[16:52:17.226]        ReadDP(0x0);
[16:52:17.226]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:52:17.226]      </block>
[16:52:17.226]      // end if-block "protType == 2"
[16:52:17.226]    </control>
[16:52:17.226]  </sequence>
[16:52:17.226]  
[16:52:17.226]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:52:17.226]  
[16:52:17.226]  <debugvars>
[16:52:17.226]    // Pre-defined
[16:52:17.226]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:52:17.226]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:52:17.226]    __dp=0x00000000
[16:52:17.226]    __ap=0x00000000
[16:52:17.226]    __traceout=0x00000000      (Trace Disabled)
[16:52:17.226]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:52:17.226]    __FlashAddr=0x00000000
[16:52:17.226]    __FlashLen=0x00000000
[16:52:17.226]    __FlashArg=0x00000000
[16:52:17.226]    __FlashOp=0x00000000
[16:52:17.226]    __Result=0x00000000
[16:52:17.226]  </debugvars>
[16:52:17.226]  
[16:52:17.226]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:52:17.226]    <block atomic="false" info="">
[16:52:17.226]      __var SW_DP_ABORT       = 0x0;
[16:52:17.226]        // -> [SW_DP_ABORT <= 0x00000000]
[16:52:17.226]      __var DP_CTRL_STAT      = 0x4;
[16:52:17.226]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:52:17.226]      __var DP_SELECT         = 0x8;
[16:52:17.226]        // -> [DP_SELECT <= 0x00000008]
[16:52:17.226]      __var powered_down      = 0;
[16:52:17.226]        // -> [powered_down <= 0x00000000]
[16:52:17.226]      WriteDP(DP_SELECT, 0x00000000);
[16:52:17.236]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:52:17.236]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:52:17.238]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:52:17.238]        // -> [powered_down <= 0x00000001]
[16:52:17.238]    </block>
[16:52:17.238]    <control if="powered_down" while="" timeout="0" info="">
[16:52:17.238]      // if-block "powered_down"
[16:52:17.238]        // =>  TRUE
[16:52:17.238]      <block atomic="false" info="">
[16:52:17.238]        Message(0, "Debug/System power-up request sent");
[16:52:17.238]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:52:17.247]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:52:17.247]      </block>
[16:52:17.247]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:52:17.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:52:17.247]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:52:17.247]        // while-condition  =>  FALSE
[16:52:17.247]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:52:17.247]      </control>
[16:52:17.247]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:52:17.247]        // if-block "(__protocol & 0xFFFF) == 1"
[16:52:17.247]          // =>  FALSE
[16:52:17.247]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:52:17.247]      </control>
[16:52:17.247]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:52:17.247]        // if-block "(__protocol & 0xFFFF) == 2"
[16:52:17.247]          // =>  TRUE
[16:52:17.247]        <block atomic="false" info="">
[16:52:17.247]          Message(0, "executing SWD power up");
[16:52:17.247]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:52:17.247]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:52:17.247]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:52:17.256]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:52:17.256]        </block>
[16:52:17.256]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:52:17.256]      </control>
[16:52:17.256]      // end if-block "powered_down"
[16:52:17.256]    </control>
[16:52:17.258]    <block atomic="false" info="">
[16:52:17.258]      __var DEBUG_PORT_VAL    = 0;
[16:52:17.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:52:17.258]      __var ACCESS_POINT_VAL  = 0;
[16:52:17.258]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:52:17.258]      __ap = 1; 
[16:52:17.258]        // -> [__ap <= 0x00000001]
[16:52:17.258]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:52:17.258]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:52:17.258]      __ap = 4;
[16:52:17.258]        // -> [__ap <= 0x00000004]
[16:52:17.258]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:52:17.268]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:52:17.268]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:52:17.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:52:17.268]    </block>
[16:52:17.268]    <block atomic="false" info="">
[16:52:17.268]      __var nReset = 0x80;
[16:52:17.268]        // -> [nReset <= 0x00000080]
[16:52:17.268]      __var canReadPins = 0;
[16:52:17.268]        // -> [canReadPins <= 0x00000000]
[16:52:17.268]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:52:17.271]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:52:17.271]        // -> [canReadPins <= 0x00000001]
[16:52:17.271]    </block>
[16:52:17.271]    <control if="" while="1" timeout="200" info="">
[16:52:17.271]      // while "1"  (timeout="200")
[16:52:17.271]      // while-condition  =>  TRUE
[16:52:17.271]      // while "1"  (timeout="200")
[16:52:17.271]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.273]      // while "1"  (timeout="200")
[16:52:17.273]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.276]      // while "1"  (timeout="200")
[16:52:17.276]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.281]      // while-condition  =>  TRUE
[16:52:17.281]      // while "1"  (timeout="200")
[16:52:17.286]      // while-condition  =>  TRUE
[16:52:17.286]      // while "1"  (timeout="200")
[16:52:17.286]      // while  =>  TIMEOUT
[16:52:17.286]      // end while "1"
[16:52:17.286]    </control>
[16:52:17.286]    <control if="canReadPins" while="" timeout="0" info="">
[16:52:17.286]      // if-block "canReadPins"
[16:52:17.286]        // =>  TRUE
[16:52:17.286]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:52:17.286]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:52:17.288]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:52:17.288]        // while-condition  =>  FALSE
[16:52:17.288]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:52:17.288]      </control>
[16:52:17.288]      // end if-block "canReadPins"
[16:52:17.288]    </control>
[16:52:17.288]    <control if="!canReadPins" while="" timeout="0" info="">
[16:52:17.288]      // if-block "!canReadPins"
[16:52:17.288]        // =>  FALSE
[16:52:17.288]      // skip if-block "!canReadPins"
[16:52:17.288]    </control>
[16:52:17.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:52:17.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:52:17.288]        // =>  TRUE
[16:52:17.288]      <block atomic="false" info="">
[16:52:17.288]        WriteAP(0x00, 0x190008);
[16:52:17.288]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:52:17.288]        WriteAP(0xF0, 0x01);
[16:52:17.299]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:52:17.299]      </block>
[16:52:17.299]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:52:17.299]    </control>
[16:52:17.299]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:52:17.299]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:52:17.299]        // =>  FALSE
[16:52:17.300]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:52:17.300]    </control>
[16:52:17.300]    <block atomic="false" info="">
[16:52:17.300]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:52:17.306]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:52:17.306]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:52:17.306]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:52:17.306]      __ap = 0; //lets make sure we reset the access point selection
[16:52:17.306]        // -> [__ap <= 0x00000000]
[16:52:17.306]    </block>
[16:52:17.306]  </sequence>
[16:52:17.306]  
[16:52:17.326]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:52:17.326]  
[16:52:17.326]  <debugvars>
[16:52:17.326]    // Pre-defined
[16:52:17.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:52:17.326]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:52:17.336]    __dp=0x00000000
[16:52:17.336]    __ap=0x00000000
[16:52:17.336]    __traceout=0x00000000      (Trace Disabled)
[16:52:17.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:52:17.337]    __FlashAddr=0x00000000
[16:52:17.337]    __FlashLen=0x00000000
[16:52:17.337]    __FlashArg=0x00000000
[16:52:17.337]    __FlashOp=0x00000000
[16:52:17.337]    __Result=0x00000000
[16:52:17.337]  </debugvars>
[16:52:17.337]  
[16:52:17.338]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:52:17.338]    <block atomic="false" info="">
[16:52:17.338]      __var deviceID = 0;
[16:52:17.338]        // -> [deviceID <= 0x00000000]
[16:52:17.338]      __var version = 0;
[16:52:17.338]        // -> [version <= 0x00000000]
[16:52:17.338]      __var partNum = 0;
[16:52:17.338]        // -> [partNum <= 0x00000000]
[16:52:17.338]      __var manuf = 0;
[16:52:17.338]        // -> [manuf <= 0x00000000]
[16:52:17.338]      __var isMSPM0G1X0X_G3X0X = 0;
[16:52:17.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:52:17.338]      __var isProduction = 0;
[16:52:17.338]        // -> [isProduction <= 0x00000000]
[16:52:17.338]      __var continueId = 0;
[16:52:17.338]        // -> [continueId <= 0x00000000]
[16:52:17.338]      deviceID =   Read32(0x41C40004);
[16:52:17.338]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:52:17.346]        // -> [deviceID <= 0x2BB8802F]
[16:52:17.346]      version = deviceID >> 28;
[16:52:17.346]        // -> [version <= 0x00000002]
[16:52:17.346]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:52:17.346]        // -> [partNum <= 0x0000BB88]
[16:52:17.346]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:52:17.346]        // -> [manuf <= 0x00000017]
[16:52:17.346]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:52:17.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:52:17.346]      isProduction = (version > 0);
[16:52:17.346]        // -> [isProduction <= 0x00000001]
[16:52:17.346]    </block>
[16:52:17.346]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:52:17.346]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:52:17.346]        // =>  FALSE
[16:52:17.346]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:52:17.346]    </control>
[16:52:17.346]    <control if="continueId == 4" while="" timeout="0" info="">
[16:52:17.346]      // if-block "continueId == 4"
[16:52:17.346]        // =>  FALSE
[16:52:17.346]      // skip if-block "continueId == 4"
[16:52:17.346]    </control>
[16:52:17.346]    <control if="!isProduction" while="" timeout="0" info="">
[16:52:17.346]      // if-block "!isProduction"
[16:52:17.346]        // =>  FALSE
[16:52:17.346]      // skip if-block "!isProduction"
[16:52:17.346]    </control>
[16:52:17.346]  </sequence>
[16:52:17.346]  
