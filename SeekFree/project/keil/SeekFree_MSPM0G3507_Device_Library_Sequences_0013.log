/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0013.log
 *  Created     : 20:36:21 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:36:21.317]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:36:21.317]  
[20:36:21.317]  <debugvars>
[20:36:21.317]    // Pre-defined
[20:36:21.317]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:36:21.317]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:36:21.317]    __dp=0x00000000
[20:36:21.317]    __ap=0x00000000
[20:36:21.317]    __traceout=0x00000000      (Trace Disabled)
[20:36:21.317]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:36:21.320]    __FlashAddr=0x00000000
[20:36:21.320]    __FlashLen=0x00000000
[20:36:21.320]    __FlashArg=0x00000000
[20:36:21.320]    __FlashOp=0x00000000
[20:36:21.320]    __Result=0x00000000
[20:36:21.320]  </debugvars>
[20:36:21.320]  
[20:36:21.320]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:36:21.320]    <block atomic="false" info="">
[20:36:21.320]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:36:21.320]        // -> [isSWJ <= 0x00000001]
[20:36:21.320]      __var hasDormant = __protocol & 0x00020000;
[20:36:21.320]        // -> [hasDormant <= 0x00000000]
[20:36:21.320]      __var protType   = __protocol & 0x0000FFFF;
[20:36:21.320]        // -> [protType <= 0x00000002]
[20:36:21.320]    </block>
[20:36:21.320]    <control if="protType == 1" while="" timeout="0" info="">
[20:36:21.320]      // if-block "protType == 1"
[20:36:21.320]        // =>  FALSE
[20:36:21.320]      // skip if-block "protType == 1"
[20:36:21.320]    </control>
[20:36:21.320]    <control if="protType == 2" while="" timeout="0" info="">
[20:36:21.320]      // if-block "protType == 2"
[20:36:21.320]        // =>  TRUE
[20:36:21.320]      <control if="isSWJ" while="" timeout="0" info="">
[20:36:21.320]        // if-block "isSWJ"
[20:36:21.320]          // =>  TRUE
[20:36:21.320]        <control if="hasDormant" while="" timeout="0" info="">
[20:36:21.320]          // if-block "hasDormant"
[20:36:21.320]            // =>  FALSE
[20:36:21.320]          // skip if-block "hasDormant"
[20:36:21.320]        </control>
[20:36:21.320]        <control if="!hasDormant" while="" timeout="0" info="">
[20:36:21.320]          // if-block "!hasDormant"
[20:36:21.320]            // =>  TRUE
[20:36:21.320]          <block atomic="false" info="">
[20:36:21.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:36:21.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:21.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:36:21.330]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:36:21.330]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:36:21.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:21.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:36:21.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:36:21.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:36:21.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:21.341]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:36:21.350]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:36:21.350]          </block>
[20:36:21.350]          // end if-block "!hasDormant"
[20:36:21.350]        </control>
[20:36:21.350]        // end if-block "isSWJ"
[20:36:21.350]      </control>
[20:36:21.350]      <control if="!isSWJ" while="" timeout="0" info="">
[20:36:21.350]        // if-block "!isSWJ"
[20:36:21.350]          // =>  FALSE
[20:36:21.350]        // skip if-block "!isSWJ"
[20:36:21.350]      </control>
[20:36:21.350]      <block atomic="false" info="">
[20:36:21.350]        ReadDP(0x0);
[20:36:21.350]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:36:21.350]      </block>
[20:36:21.350]      // end if-block "protType == 2"
[20:36:21.350]    </control>
[20:36:21.350]  </sequence>
[20:36:21.350]  
[20:36:21.360]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:36:21.360]  
[20:36:21.360]  <debugvars>
[20:36:21.360]    // Pre-defined
[20:36:21.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:36:21.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:36:21.360]    __dp=0x00000000
[20:36:21.360]    __ap=0x00000000
[20:36:21.360]    __traceout=0x00000000      (Trace Disabled)
[20:36:21.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:36:21.360]    __FlashAddr=0x00000000
[20:36:21.360]    __FlashLen=0x00000000
[20:36:21.360]    __FlashArg=0x00000000
[20:36:21.360]    __FlashOp=0x00000000
[20:36:21.360]    __Result=0x00000000
[20:36:21.360]  </debugvars>
[20:36:21.360]  
[20:36:21.360]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:36:21.360]    <block atomic="false" info="">
[20:36:21.360]      __var SW_DP_ABORT       = 0x0;
[20:36:21.360]        // -> [SW_DP_ABORT <= 0x00000000]
[20:36:21.360]      __var DP_CTRL_STAT      = 0x4;
[20:36:21.360]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:36:21.360]      __var DP_SELECT         = 0x8;
[20:36:21.360]        // -> [DP_SELECT <= 0x00000008]
[20:36:21.360]      __var powered_down      = 0;
[20:36:21.360]        // -> [powered_down <= 0x00000000]
[20:36:21.360]      WriteDP(DP_SELECT, 0x00000000);
[20:36:21.370]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:36:21.370]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:36:21.370]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[20:36:21.370]        // -> [powered_down <= 0x00000000]
[20:36:21.370]    </block>
[20:36:21.370]    <control if="powered_down" while="" timeout="0" info="">
[20:36:21.370]      // if-block "powered_down"
[20:36:21.370]        // =>  FALSE
[20:36:21.370]      // skip if-block "powered_down"
[20:36:21.370]    </control>
[20:36:21.370]    <block atomic="false" info="">
[20:36:21.370]      __var DEBUG_PORT_VAL    = 0;
[20:36:21.370]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:36:21.370]      __var ACCESS_POINT_VAL  = 0;
[20:36:21.370]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:36:21.370]      __ap = 1; 
[20:36:21.370]        // -> [__ap <= 0x00000001]
[20:36:21.370]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:36:21.380]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:36:21.380]      __ap = 4;
[20:36:21.380]        // -> [__ap <= 0x00000004]
[20:36:21.380]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:36:21.380]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[20:36:21.380]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[20:36:21.380]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:36:21.380]    </block>
[20:36:21.380]    <block atomic="false" info="">
[20:36:21.380]      __var nReset = 0x80;
[20:36:21.380]        // -> [nReset <= 0x00000080]
[20:36:21.380]      __var canReadPins = 0;
[20:36:21.380]        // -> [canReadPins <= 0x00000000]
[20:36:21.380]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:36:21.390]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:36:21.390]        // -> [canReadPins <= 0x00000001]
[20:36:21.390]    </block>
[20:36:21.390]    <control if="" while="1" timeout="200" info="">
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.390]      // while-condition  =>  TRUE
[20:36:21.390]      // while "1"  (timeout="200")
[20:36:21.400]      // while-condition  =>  TRUE
[20:36:21.400]      // while "1"  (timeout="200")
[20:36:21.400]      // while  =>  TIMEOUT
[20:36:21.400]      // end while "1"
[20:36:21.400]    </control>
[20:36:21.400]    <control if="canReadPins" while="" timeout="0" info="">
[20:36:21.400]      // if-block "canReadPins"
[20:36:21.400]        // =>  TRUE
[20:36:21.400]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:36:21.400]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:36:21.401]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:36:21.401]        // while-condition  =>  FALSE
[20:36:21.401]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:36:21.401]      </control>
[20:36:21.401]      // end if-block "canReadPins"
[20:36:21.401]    </control>
[20:36:21.401]    <control if="!canReadPins" while="" timeout="0" info="">
[20:36:21.401]      // if-block "!canReadPins"
[20:36:21.401]        // =>  FALSE
[20:36:21.401]      // skip if-block "!canReadPins"
[20:36:21.401]    </control>
[20:36:21.401]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:36:21.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:36:21.401]        // =>  FALSE
[20:36:21.401]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:36:21.401]    </control>
[20:36:21.401]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:36:21.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:36:21.401]        // =>  TRUE
[20:36:21.401]      <block atomic="false" info="">
[20:36:21.401]        WriteAP(0xF0, 0x01);
[20:36:21.401]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:36:21.401]        WriteAP(0x00, 0xF90008);
[20:36:21.420]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[20:36:21.420]        WriteAP(0xF0, 0x01);
[20:36:21.433]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:36:21.433]      </block>
[20:36:21.433]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:36:21.433]    </control>
[20:36:21.433]    <block atomic="false" info="">
[20:36:21.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:36:21.433]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[20:36:21.433]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[20:36:21.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:36:21.433]      __ap = 0; //lets make sure we reset the access point selection
[20:36:21.433]        // -> [__ap <= 0x00000000]
[20:36:21.433]    </block>
[20:36:21.433]  </sequence>
[20:36:21.433]  
[20:36:21.483]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:36:21.483]  
[20:36:21.483]  <debugvars>
[20:36:21.483]    // Pre-defined
[20:36:21.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:36:21.483]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:36:21.483]    __dp=0x00000000
[20:36:21.483]    __ap=0x00000000
[20:36:21.483]    __traceout=0x00000000      (Trace Disabled)
[20:36:21.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:36:21.483]    __FlashAddr=0x00000000
[20:36:21.483]    __FlashLen=0x00000000
[20:36:21.483]    __FlashArg=0x00000000
[20:36:21.483]    __FlashOp=0x00000000
[20:36:21.483]    __Result=0x00000000
[20:36:21.483]  </debugvars>
[20:36:21.483]  
[20:36:21.483]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:36:21.483]    <block atomic="false" info="">
[20:36:21.483]      __var deviceID = 0;
[20:36:21.483]        // -> [deviceID <= 0x00000000]
[20:36:21.483]      __var version = 0;
[20:36:21.483]        // -> [version <= 0x00000000]
[20:36:21.483]      __var partNum = 0;
[20:36:21.483]        // -> [partNum <= 0x00000000]
[20:36:21.483]      __var manuf = 0;
[20:36:21.483]        // -> [manuf <= 0x00000000]
[20:36:21.483]      __var isMSPM0G1X0X_G3X0X = 0;
[20:36:21.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:36:21.483]      __var isProduction = 0;
[20:36:21.483]        // -> [isProduction <= 0x00000000]
[20:36:21.483]      __var continueId = 0;
[20:36:21.483]        // -> [continueId <= 0x00000000]
[20:36:21.483]      deviceID =   Read32(0x41C40004);
[20:36:21.492]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:36:21.492]        // -> [deviceID <= 0x2BB8802F]
[20:36:21.492]      version = deviceID >> 28;
[20:36:21.492]        // -> [version <= 0x00000002]
[20:36:21.492]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:36:21.492]        // -> [partNum <= 0x0000BB88]
[20:36:21.492]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:36:21.492]        // -> [manuf <= 0x00000017]
[20:36:21.492]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:36:21.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:36:21.492]      isProduction = (version > 0);
[20:36:21.492]        // -> [isProduction <= 0x00000001]
[20:36:21.492]    </block>
[20:36:21.492]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:36:21.492]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:36:21.492]        // =>  FALSE
[20:36:21.492]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:36:21.492]    </control>
[20:36:21.492]    <control if="continueId == 4" while="" timeout="0" info="">
[20:36:21.492]      // if-block "continueId == 4"
[20:36:21.492]        // =>  FALSE
[20:36:21.492]      // skip if-block "continueId == 4"
[20:36:21.492]    </control>
[20:36:21.492]    <control if="!isProduction" while="" timeout="0" info="">
[20:36:21.492]      // if-block "!isProduction"
[20:36:21.492]        // =>  FALSE
[20:36:21.492]      // skip if-block "!isProduction"
[20:36:21.492]    </control>
[20:36:21.492]  </sequence>
[20:36:21.492]  
[20:36:28.791]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:36:28.791]  
[20:36:28.800]  <debugvars>
[20:36:28.800]    // Pre-defined
[20:36:28.800]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:36:28.800]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:36:28.800]    __dp=0x00000000
[20:36:28.800]    __ap=0x00000000
[20:36:28.800]    __traceout=0x00000000      (Trace Disabled)
[20:36:28.800]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:36:28.800]    __FlashAddr=0x00000000
[20:36:28.800]    __FlashLen=0x00000000
[20:36:28.800]    __FlashArg=0x00000000
[20:36:28.800]    __FlashOp=0x00000000
[20:36:28.800]    __Result=0x00000000
[20:36:28.800]  </debugvars>
[20:36:28.800]  
[20:36:28.800]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:36:28.800]    <block atomic="false" info="">
[20:36:28.800]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:36:28.800]        // -> [isSWJ <= 0x00000001]
[20:36:28.800]      __var hasDormant = __protocol & 0x00020000;
[20:36:28.800]        // -> [hasDormant <= 0x00000000]
[20:36:28.800]      __var protType   = __protocol & 0x0000FFFF;
[20:36:28.802]        // -> [protType <= 0x00000002]
[20:36:28.802]    </block>
[20:36:28.802]    <control if="protType == 1" while="" timeout="0" info="">
[20:36:28.802]      // if-block "protType == 1"
[20:36:28.802]        // =>  FALSE
[20:36:28.802]      // skip if-block "protType == 1"
[20:36:28.802]    </control>
[20:36:28.802]    <control if="protType == 2" while="" timeout="0" info="">
[20:36:28.802]      // if-block "protType == 2"
[20:36:28.802]        // =>  TRUE
[20:36:28.802]      <control if="isSWJ" while="" timeout="0" info="">
[20:36:28.802]        // if-block "isSWJ"
[20:36:28.802]          // =>  TRUE
[20:36:28.802]        <control if="hasDormant" while="" timeout="0" info="">
[20:36:28.802]          // if-block "hasDormant"
[20:36:28.802]            // =>  FALSE
[20:36:28.802]          // skip if-block "hasDormant"
[20:36:28.802]        </control>
[20:36:28.802]        <control if="!hasDormant" while="" timeout="0" info="">
[20:36:28.802]          // if-block "!hasDormant"
[20:36:28.804]            // =>  TRUE
[20:36:28.804]          <block atomic="false" info="">
[20:36:28.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:36:28.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:28.804]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:36:28.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:36:28.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:36:28.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:28.812]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:36:28.812]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:36:28.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:36:28.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:36:28.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:36:28.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:36:28.822]          </block>
[20:36:28.822]          // end if-block "!hasDormant"
[20:36:28.822]        </control>
[20:36:28.822]        // end if-block "isSWJ"
[20:36:28.822]      </control>
[20:36:28.822]      <control if="!isSWJ" while="" timeout="0" info="">
[20:36:28.822]        // if-block "!isSWJ"
[20:36:28.822]          // =>  FALSE
[20:36:28.822]        // skip if-block "!isSWJ"
[20:36:28.822]      </control>
[20:36:28.822]      <block atomic="false" info="">
[20:36:28.822]        ReadDP(0x0);
[20:36:28.832]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:36:28.832]      </block>
[20:36:28.832]      // end if-block "protType == 2"
[20:36:28.832]    </control>
[20:36:28.832]  </sequence>
[20:36:28.832]  
[20:36:28.832]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:36:28.832]  
[20:36:28.832]  <debugvars>
[20:36:28.832]    // Pre-defined
[20:36:28.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:36:28.832]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:36:28.832]    __dp=0x00000000
[20:36:28.832]    __ap=0x00000000
[20:36:28.832]    __traceout=0x00000000      (Trace Disabled)
[20:36:28.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:36:28.832]    __FlashAddr=0x00000000
[20:36:28.832]    __FlashLen=0x00000000
[20:36:28.832]    __FlashArg=0x00000000
[20:36:28.832]    __FlashOp=0x00000000
[20:36:28.832]    __Result=0x00000000
[20:36:28.832]  </debugvars>
[20:36:28.832]  
[20:36:28.832]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:36:28.832]    <block atomic="false" info="">
[20:36:28.832]      __var SW_DP_ABORT       = 0x0;
[20:36:28.832]        // -> [SW_DP_ABORT <= 0x00000000]
[20:36:28.832]      __var DP_CTRL_STAT      = 0x4;
[20:36:28.832]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:36:28.832]      __var DP_SELECT         = 0x8;
[20:36:28.832]        // -> [DP_SELECT <= 0x00000008]
[20:36:28.832]      __var powered_down      = 0;
[20:36:28.832]        // -> [powered_down <= 0x00000000]
[20:36:28.832]      WriteDP(DP_SELECT, 0x00000000);
[20:36:28.862]  
[20:36:28.862]  !!! E310 : Debug access failed - cannot write value 0x00000000 to DP register 0x08
[20:36:28.862]  
[20:36:28.862]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:36:28.862]    </block>
[20:36:28.862]  </sequence>
[20:36:28.862]  
[20:37:44.995]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:37:44.995]  
[20:37:45.004]  <debugvars>
[20:37:45.004]    // Pre-defined
[20:37:45.004]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:45.004]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:37:45.004]    __dp=0x00000000
[20:37:45.004]    __ap=0x00000000
[20:37:45.004]    __traceout=0x00000000      (Trace Disabled)
[20:37:45.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:45.004]    __FlashAddr=0x00000000
[20:37:45.004]    __FlashLen=0x00000000
[20:37:45.004]    __FlashArg=0x00000000
[20:37:45.004]    __FlashOp=0x00000000
[20:37:45.004]    __Result=0x00000000
[20:37:45.004]  </debugvars>
[20:37:45.004]  
[20:37:45.004]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:37:45.004]    <block atomic="false" info="">
[20:37:45.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:37:45.004]        // -> [isSWJ <= 0x00000001]
[20:37:45.004]      __var hasDormant = __protocol & 0x00020000;
[20:37:45.004]        // -> [hasDormant <= 0x00000000]
[20:37:45.004]      __var protType   = __protocol & 0x0000FFFF;
[20:37:45.004]        // -> [protType <= 0x00000002]
[20:37:45.004]    </block>
[20:37:45.007]    <control if="protType == 1" while="" timeout="0" info="">
[20:37:45.007]      // if-block "protType == 1"
[20:37:45.007]        // =>  FALSE
[20:37:45.007]      // skip if-block "protType == 1"
[20:37:45.007]    </control>
[20:37:45.007]    <control if="protType == 2" while="" timeout="0" info="">
[20:37:45.007]      // if-block "protType == 2"
[20:37:45.007]        // =>  TRUE
[20:37:45.007]      <control if="isSWJ" while="" timeout="0" info="">
[20:37:45.007]        // if-block "isSWJ"
[20:37:45.007]          // =>  TRUE
[20:37:45.007]        <control if="hasDormant" while="" timeout="0" info="">
[20:37:45.007]          // if-block "hasDormant"
[20:37:45.007]            // =>  FALSE
[20:37:45.007]          // skip if-block "hasDormant"
[20:37:45.007]        </control>
[20:37:45.007]        <control if="!hasDormant" while="" timeout="0" info="">
[20:37:45.007]          // if-block "!hasDormant"
[20:37:45.007]            // =>  TRUE
[20:37:45.007]          <block atomic="false" info="">
[20:37:45.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:37:45.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:45.011]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:37:45.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:37:45.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:37:45.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:45.011]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:37:45.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:37:45.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:37:45.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:45.019]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:37:45.023]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:37:45.023]          </block>
[20:37:45.023]          // end if-block "!hasDormant"
[20:37:45.023]        </control>
[20:37:45.023]        // end if-block "isSWJ"
[20:37:45.023]      </control>
[20:37:45.023]      <control if="!isSWJ" while="" timeout="0" info="">
[20:37:45.023]        // if-block "!isSWJ"
[20:37:45.023]          // =>  FALSE
[20:37:45.023]        // skip if-block "!isSWJ"
[20:37:45.023]      </control>
[20:37:45.023]      <block atomic="false" info="">
[20:37:45.023]        ReadDP(0x0);
[20:37:45.028]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:37:45.028]      </block>
[20:37:45.028]      // end if-block "protType == 2"
[20:37:45.028]    </control>
[20:37:45.028]  </sequence>
[20:37:45.028]  
[20:37:45.042]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:37:45.042]  
[20:37:45.042]  <debugvars>
[20:37:45.042]    // Pre-defined
[20:37:45.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:45.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:37:45.042]    __dp=0x00000000
[20:37:45.042]    __ap=0x00000000
[20:37:45.042]    __traceout=0x00000000      (Trace Disabled)
[20:37:45.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:45.042]    __FlashAddr=0x00000000
[20:37:45.042]    __FlashLen=0x00000000
[20:37:45.042]    __FlashArg=0x00000000
[20:37:45.042]    __FlashOp=0x00000000
[20:37:45.042]    __Result=0x00000000
[20:37:45.042]  </debugvars>
[20:37:45.042]  
[20:37:45.042]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:37:45.042]    <block atomic="false" info="">
[20:37:45.044]      __var SW_DP_ABORT       = 0x0;
[20:37:45.044]        // -> [SW_DP_ABORT <= 0x00000000]
[20:37:45.044]      __var DP_CTRL_STAT      = 0x4;
[20:37:45.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:37:45.044]      __var DP_SELECT         = 0x8;
[20:37:45.044]        // -> [DP_SELECT <= 0x00000008]
[20:37:45.044]      __var powered_down      = 0;
[20:37:45.044]        // -> [powered_down <= 0x00000000]
[20:37:45.044]      WriteDP(DP_SELECT, 0x00000000);
[20:37:45.052]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:37:45.052]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:37:45.054]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:37:45.054]        // -> [powered_down <= 0x00000001]
[20:37:45.054]    </block>
[20:37:45.054]    <control if="powered_down" while="" timeout="0" info="">
[20:37:45.054]      // if-block "powered_down"
[20:37:45.054]        // =>  TRUE
[20:37:45.054]      <block atomic="false" info="">
[20:37:45.054]        Message(0, "Debug/System power-up request sent");
[20:37:45.056]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:37:45.060]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:37:45.060]      </block>
[20:37:45.060]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:37:45.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:37:45.064]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:37:45.064]        // while-condition  =>  FALSE
[20:37:45.064]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:37:45.064]      </control>
[20:37:45.064]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:37:45.064]        // if-block "(__protocol & 0xFFFF) == 1"
[20:37:45.064]          // =>  FALSE
[20:37:45.064]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:37:45.064]      </control>
[20:37:45.064]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:37:45.064]        // if-block "(__protocol & 0xFFFF) == 2"
[20:37:45.064]          // =>  TRUE
[20:37:45.064]        <block atomic="false" info="">
[20:37:45.067]          Message(0, "executing SWD power up");
[20:37:45.067]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:37:45.069]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:37:45.069]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:37:45.069]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:37:45.069]        </block>
[20:37:45.069]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:37:45.069]      </control>
[20:37:45.069]      // end if-block "powered_down"
[20:37:45.069]    </control>
[20:37:45.073]    <block atomic="false" info="">
[20:37:45.073]      __var DEBUG_PORT_VAL    = 0;
[20:37:45.073]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:37:45.073]      __var ACCESS_POINT_VAL  = 0;
[20:37:45.073]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:37:45.073]      __ap = 1; 
[20:37:45.073]        // -> [__ap <= 0x00000001]
[20:37:45.073]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:37:45.077]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:37:45.077]      __ap = 4;
[20:37:45.077]        // -> [__ap <= 0x00000004]
[20:37:45.077]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:37:45.083]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:37:45.083]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:37:45.083]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:37:45.085]    </block>
[20:37:45.085]    <block atomic="false" info="">
[20:37:45.085]      __var nReset = 0x80;
[20:37:45.085]        // -> [nReset <= 0x00000080]
[20:37:45.085]      __var canReadPins = 0;
[20:37:45.085]        // -> [canReadPins <= 0x00000000]
[20:37:45.085]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:37:45.085]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:37:45.085]        // -> [canReadPins <= 0x00000001]
[20:37:45.085]    </block>
[20:37:45.085]    <control if="" while="1" timeout="200" info="">
[20:37:45.085]      // while "1"  (timeout="200")
[20:37:45.085]      // while-condition  =>  TRUE
[20:37:45.085]      // while "1"  (timeout="200")
[20:37:45.085]      // while-condition  =>  TRUE
[20:37:45.089]      // while "1"  (timeout="200")
[20:37:45.089]      // while-condition  =>  TRUE
[20:37:45.089]      // while "1"  (timeout="200")
[20:37:45.089]      // while-condition  =>  TRUE
[20:37:45.089]      // while "1"  (timeout="200")
[20:37:45.089]      // while-condition  =>  TRUE
[20:37:45.089]      // while "1"  (timeout="200")
[20:37:45.089]      // while-condition  =>  TRUE
[20:37:45.089]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.090]      // while "1"  (timeout="200")
[20:37:45.090]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.093]      // while-condition  =>  TRUE
[20:37:45.093]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.095]      // while "1"  (timeout="200")
[20:37:45.095]      // while-condition  =>  TRUE
[20:37:45.097]      // while "1"  (timeout="200")
[20:37:45.097]      // while  =>  TIMEOUT
[20:37:45.097]      // end while "1"
[20:37:45.097]    </control>
[20:37:45.097]    <control if="canReadPins" while="" timeout="0" info="">
[20:37:45.097]      // if-block "canReadPins"
[20:37:45.097]        // =>  TRUE
[20:37:45.097]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:37:45.097]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:37:45.101]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:37:45.101]        // while-condition  =>  FALSE
[20:37:45.101]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:37:45.101]      </control>
[20:37:45.101]      // end if-block "canReadPins"
[20:37:45.101]    </control>
[20:37:45.101]    <control if="!canReadPins" while="" timeout="0" info="">
[20:37:45.101]      // if-block "!canReadPins"
[20:37:45.101]        // =>  FALSE
[20:37:45.101]      // skip if-block "!canReadPins"
[20:37:45.101]    </control>
[20:37:45.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:37:45.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:37:45.101]        // =>  TRUE
[20:37:45.101]      <block atomic="false" info="">
[20:37:45.101]        WriteAP(0x00, 0x190008);
[20:37:45.110]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:37:45.110]        WriteAP(0xF0, 0x01);
[20:37:45.114]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:37:45.118]      </block>
[20:37:45.118]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:37:45.118]    </control>
[20:37:45.118]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:37:45.118]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:37:45.118]        // =>  FALSE
[20:37:45.118]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:37:45.119]    </control>
[20:37:45.119]    <block atomic="false" info="">
[20:37:45.119]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:37:45.122]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:37:45.122]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:37:45.122]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:37:45.126]      __ap = 0; //lets make sure we reset the access point selection
[20:37:45.126]        // -> [__ap <= 0x00000000]
[20:37:45.126]    </block>
[20:37:45.126]  </sequence>
[20:37:45.126]  
[20:37:45.168]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:37:45.168]  
[20:37:45.168]  <debugvars>
[20:37:45.168]    // Pre-defined
[20:37:45.168]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:45.168]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:37:45.168]    __dp=0x00000000
[20:37:45.168]    __ap=0x00000000
[20:37:45.168]    __traceout=0x00000000      (Trace Disabled)
[20:37:45.168]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:45.168]    __FlashAddr=0x00000000
[20:37:45.168]    __FlashLen=0x00000000
[20:37:45.169]    __FlashArg=0x00000000
[20:37:45.169]    __FlashOp=0x00000000
[20:37:45.169]    __Result=0x00000000
[20:37:45.169]  </debugvars>
[20:37:45.169]  
[20:37:45.169]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:37:45.169]    <block atomic="false" info="">
[20:37:45.169]      __var deviceID = 0;
[20:37:45.169]        // -> [deviceID <= 0x00000000]
[20:37:45.169]      __var version = 0;
[20:37:45.169]        // -> [version <= 0x00000000]
[20:37:45.169]      __var partNum = 0;
[20:37:45.169]        // -> [partNum <= 0x00000000]
[20:37:45.169]      __var manuf = 0;
[20:37:45.171]        // -> [manuf <= 0x00000000]
[20:37:45.171]      __var isMSPM0G1X0X_G3X0X = 0;
[20:37:45.171]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:37:45.171]      __var isProduction = 0;
[20:37:45.171]        // -> [isProduction <= 0x00000000]
[20:37:45.171]      __var continueId = 0;
[20:37:45.171]        // -> [continueId <= 0x00000000]
[20:37:45.171]      deviceID =   Read32(0x41C40004);
[20:37:45.183]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:37:45.183]        // -> [deviceID <= 0x2BB8802F]
[20:37:45.183]      version = deviceID >> 28;
[20:37:45.183]        // -> [version <= 0x00000002]
[20:37:45.183]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:37:45.183]        // -> [partNum <= 0x0000BB88]
[20:37:45.183]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:37:45.185]        // -> [manuf <= 0x00000017]
[20:37:45.185]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:37:45.185]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:37:45.185]      isProduction = (version > 0);
[20:37:45.185]        // -> [isProduction <= 0x00000001]
[20:37:45.185]    </block>
[20:37:45.185]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:37:45.185]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:37:45.185]        // =>  FALSE
[20:37:45.185]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:37:45.185]    </control>
[20:37:45.185]    <control if="continueId == 4" while="" timeout="0" info="">
[20:37:45.185]      // if-block "continueId == 4"
[20:37:45.185]        // =>  FALSE
[20:37:45.186]      // skip if-block "continueId == 4"
[20:37:45.186]    </control>
[20:37:45.186]    <control if="!isProduction" while="" timeout="0" info="">
[20:37:45.186]      // if-block "!isProduction"
[20:37:45.186]        // =>  FALSE
[20:37:45.186]      // skip if-block "!isProduction"
[20:37:45.186]    </control>
[20:37:45.186]  </sequence>
[20:37:45.187]  
[20:40:18.155]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:40:18.155]  
[20:40:18.166]  <debugvars>
[20:40:18.166]    // Pre-defined
[20:40:18.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:18.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:18.166]    __dp=0x00000000
[20:40:18.166]    __ap=0x00000000
[20:40:18.166]    __traceout=0x00000000      (Trace Disabled)
[20:40:18.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:18.166]    __FlashAddr=0x00000000
[20:40:18.166]    __FlashLen=0x00000000
[20:40:18.168]    __FlashArg=0x00000000
[20:40:18.168]    __FlashOp=0x00000000
[20:40:18.168]    __Result=0x00000000
[20:40:18.168]  </debugvars>
[20:40:18.168]  
[20:40:18.168]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:40:18.168]    <block atomic="false" info="">
[20:40:18.168]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:40:18.168]        // -> [isSWJ <= 0x00000001]
[20:40:18.168]      __var hasDormant = __protocol & 0x00020000;
[20:40:18.168]        // -> [hasDormant <= 0x00000000]
[20:40:18.168]      __var protType   = __protocol & 0x0000FFFF;
[20:40:18.168]        // -> [protType <= 0x00000002]
[20:40:18.168]    </block>
[20:40:18.168]    <control if="protType == 1" while="" timeout="0" info="">
[20:40:18.168]      // if-block "protType == 1"
[20:40:18.168]        // =>  FALSE
[20:40:18.170]      // skip if-block "protType == 1"
[20:40:18.170]    </control>
[20:40:18.170]    <control if="protType == 2" while="" timeout="0" info="">
[20:40:18.170]      // if-block "protType == 2"
[20:40:18.170]        // =>  TRUE
[20:40:18.170]      <control if="isSWJ" while="" timeout="0" info="">
[20:40:18.170]        // if-block "isSWJ"
[20:40:18.170]          // =>  TRUE
[20:40:18.170]        <control if="hasDormant" while="" timeout="0" info="">
[20:40:18.170]          // if-block "hasDormant"
[20:40:18.170]            // =>  FALSE
[20:40:18.170]          // skip if-block "hasDormant"
[20:40:18.171]        </control>
[20:40:18.171]        <control if="!hasDormant" while="" timeout="0" info="">
[20:40:18.171]          // if-block "!hasDormant"
[20:40:18.171]            // =>  TRUE
[20:40:18.171]          <block atomic="false" info="">
[20:40:18.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:40:18.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:18.175]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:40:18.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:40:18.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:40:18.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:18.179]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:40:18.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:40:18.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:40:18.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:18.184]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:40:18.184]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:40:18.184]          </block>
[20:40:18.184]          // end if-block "!hasDormant"
[20:40:18.184]        </control>
[20:40:18.184]        // end if-block "isSWJ"
[20:40:18.184]      </control>
[20:40:18.184]      <control if="!isSWJ" while="" timeout="0" info="">
[20:40:18.184]        // if-block "!isSWJ"
[20:40:18.184]          // =>  FALSE
[20:40:18.184]        // skip if-block "!isSWJ"
[20:40:18.184]      </control>
[20:40:18.184]      <block atomic="false" info="">
[20:40:18.184]        ReadDP(0x0);
[20:40:18.194]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:40:18.194]      </block>
[20:40:18.194]      // end if-block "protType == 2"
[20:40:18.194]    </control>
[20:40:18.194]  </sequence>
[20:40:18.194]  
[20:40:18.198]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:40:18.198]  
[20:40:18.198]  <debugvars>
[20:40:18.198]    // Pre-defined
[20:40:18.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:18.198]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:18.198]    __dp=0x00000000
[20:40:18.200]    __ap=0x00000000
[20:40:18.200]    __traceout=0x00000000      (Trace Disabled)
[20:40:18.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:18.200]    __FlashAddr=0x00000000
[20:40:18.200]    __FlashLen=0x00000000
[20:40:18.200]    __FlashArg=0x00000000
[20:40:18.200]    __FlashOp=0x00000000
[20:40:18.200]    __Result=0x00000000
[20:40:18.200]  </debugvars>
[20:40:18.200]  
[20:40:18.200]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:40:18.200]    <block atomic="false" info="">
[20:40:18.200]      __var SW_DP_ABORT       = 0x0;
[20:40:18.201]        // -> [SW_DP_ABORT <= 0x00000000]
[20:40:18.201]      __var DP_CTRL_STAT      = 0x4;
[20:40:18.201]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:40:18.201]      __var DP_SELECT         = 0x8;
[20:40:18.201]        // -> [DP_SELECT <= 0x00000008]
[20:40:18.201]      __var powered_down      = 0;
[20:40:18.201]        // -> [powered_down <= 0x00000000]
[20:40:18.201]      WriteDP(DP_SELECT, 0x00000000);
[20:40:18.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:40:18.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:40:18.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:40:18.204]        // -> [powered_down <= 0x00000001]
[20:40:18.204]    </block>
[20:40:18.204]    <control if="powered_down" while="" timeout="0" info="">
[20:40:18.204]      // if-block "powered_down"
[20:40:18.204]        // =>  TRUE
[20:40:18.204]      <block atomic="false" info="">
[20:40:18.204]        Message(0, "Debug/System power-up request sent");
[20:40:18.208]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:40:18.208]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:40:18.208]      </block>
[20:40:18.208]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:40:18.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:40:18.213]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:40:18.213]        // while-condition  =>  FALSE
[20:40:18.213]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:40:18.213]      </control>
[20:40:18.213]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:40:18.213]        // if-block "(__protocol & 0xFFFF) == 1"
[20:40:18.213]          // =>  FALSE
[20:40:18.213]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:40:18.213]      </control>
[20:40:18.213]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:40:18.213]        // if-block "(__protocol & 0xFFFF) == 2"
[20:40:18.213]          // =>  TRUE
[20:40:18.213]        <block atomic="false" info="">
[20:40:18.213]          Message(0, "executing SWD power up");
[20:40:18.217]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:40:18.223]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:40:18.223]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:40:18.223]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:40:18.223]        </block>
[20:40:18.223]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:40:18.223]      </control>
[20:40:18.223]      // end if-block "powered_down"
[20:40:18.223]    </control>
[20:40:18.223]    <block atomic="false" info="">
[20:40:18.223]      __var DEBUG_PORT_VAL    = 0;
[20:40:18.223]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:40:18.223]      __var ACCESS_POINT_VAL  = 0;
[20:40:18.223]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:40:18.223]      __ap = 1; 
[20:40:18.223]        // -> [__ap <= 0x00000001]
[20:40:18.223]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:40:18.230]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:40:18.230]      __ap = 4;
[20:40:18.230]        // -> [__ap <= 0x00000004]
[20:40:18.230]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:40:18.234]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:40:18.234]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:40:18.234]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:40:18.234]    </block>
[20:40:18.234]    <block atomic="false" info="">
[20:40:18.234]      __var nReset = 0x80;
[20:40:18.234]        // -> [nReset <= 0x00000080]
[20:40:18.234]      __var canReadPins = 0;
[20:40:18.234]        // -> [canReadPins <= 0x00000000]
[20:40:18.234]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:40:18.234]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:40:18.234]        // -> [canReadPins <= 0x00000001]
[20:40:18.234]    </block>
[20:40:18.243]    <control if="" while="1" timeout="200" info="">
[20:40:18.244]      // while "1"  (timeout="200")
[20:40:18.244]      // while-condition  =>  TRUE
[20:40:18.244]      // while "1"  (timeout="200")
[20:40:18.244]      // while-condition  =>  TRUE
[20:40:18.244]      // while "1"  (timeout="200")
[20:40:18.244]      // while-condition  =>  TRUE
[20:40:18.244]      // while "1"  (timeout="200")
[20:40:18.244]      // while-condition  =>  TRUE
[20:40:18.244]      // while "1"  (timeout="200")
[20:40:18.244]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.245]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.245]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.245]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.245]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.245]      // while-condition  =>  TRUE
[20:40:18.245]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.246]      // while-condition  =>  TRUE
[20:40:18.246]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.247]      // while "1"  (timeout="200")
[20:40:18.247]      // while-condition  =>  TRUE
[20:40:18.249]      // while "1"  (timeout="200")
[20:40:18.249]      // while-condition  =>  TRUE
[20:40:18.249]      // while "1"  (timeout="200")
[20:40:18.249]      // while-condition  =>  TRUE
[20:40:18.249]      // while "1"  (timeout="200")
[20:40:18.249]      // while-condition  =>  TRUE
[20:40:18.249]      // while "1"  (timeout="200")
[20:40:18.249]      // while-condition  =>  TRUE
[20:40:18.249]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.250]      // while-condition  =>  TRUE
[20:40:18.250]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.252]      // while-condition  =>  TRUE
[20:40:18.252]      // while "1"  (timeout="200")
[20:40:18.254]      // while-condition  =>  TRUE
[20:40:18.254]      // while "1"  (timeout="200")
[20:40:18.254]      // while  =>  TIMEOUT
[20:40:18.254]      // end while "1"
[20:40:18.254]    </control>
[20:40:18.254]    <control if="canReadPins" while="" timeout="0" info="">
[20:40:18.254]      // if-block "canReadPins"
[20:40:18.254]        // =>  TRUE
[20:40:18.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:40:18.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:40:18.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:40:18.255]        // while-condition  =>  FALSE
[20:40:18.255]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:40:18.255]      </control>
[20:40:18.255]      // end if-block "canReadPins"
[20:40:18.255]    </control>
[20:40:18.255]    <control if="!canReadPins" while="" timeout="0" info="">
[20:40:18.255]      // if-block "!canReadPins"
[20:40:18.255]        // =>  FALSE
[20:40:18.255]      // skip if-block "!canReadPins"
[20:40:18.255]    </control>
[20:40:18.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:40:18.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:40:18.255]        // =>  TRUE
[20:40:18.255]      <block atomic="false" info="">
[20:40:18.255]        WriteAP(0x00, 0x190008);
[20:40:18.255]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:40:18.255]        WriteAP(0xF0, 0x01);
[20:40:18.264]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:40:18.264]      </block>
[20:40:18.264]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:40:18.264]    </control>
[20:40:18.264]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:40:18.264]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:40:18.264]        // =>  FALSE
[20:40:18.265]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:40:18.265]    </control>
[20:40:18.265]    <block atomic="false" info="">
[20:40:18.265]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:40:18.265]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:40:18.265]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:40:18.265]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:40:18.265]      __ap = 0; //lets make sure we reset the access point selection
[20:40:18.265]        // -> [__ap <= 0x00000000]
[20:40:18.265]    </block>
[20:40:18.265]  </sequence>
[20:40:18.265]  
[20:40:18.296]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:40:18.296]  
[20:40:18.296]  <debugvars>
[20:40:18.296]    // Pre-defined
[20:40:18.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:18.296]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:18.296]    __dp=0x00000000
[20:40:18.296]    __ap=0x00000000
[20:40:18.296]    __traceout=0x00000000      (Trace Disabled)
[20:40:18.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:18.296]    __FlashAddr=0x00000000
[20:40:18.296]    __FlashLen=0x00000000
[20:40:18.296]    __FlashArg=0x00000000
[20:40:18.296]    __FlashOp=0x00000000
[20:40:18.296]    __Result=0x00000000
[20:40:18.296]  </debugvars>
[20:40:18.296]  
[20:40:18.296]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:40:18.296]    <block atomic="false" info="">
[20:40:18.296]      __var deviceID = 0;
[20:40:18.296]        // -> [deviceID <= 0x00000000]
[20:40:18.296]      __var version = 0;
[20:40:18.296]        // -> [version <= 0x00000000]
[20:40:18.296]      __var partNum = 0;
[20:40:18.296]        // -> [partNum <= 0x00000000]
[20:40:18.296]      __var manuf = 0;
[20:40:18.296]        // -> [manuf <= 0x00000000]
[20:40:18.296]      __var isMSPM0G1X0X_G3X0X = 0;
[20:40:18.296]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:40:18.303]      __var isProduction = 0;
[20:40:18.303]        // -> [isProduction <= 0x00000000]
[20:40:18.303]      __var continueId = 0;
[20:40:18.303]        // -> [continueId <= 0x00000000]
[20:40:18.303]      deviceID =   Read32(0x41C40004);
[20:40:18.304]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:40:18.304]        // -> [deviceID <= 0x2BB8802F]
[20:40:18.304]      version = deviceID >> 28;
[20:40:18.304]        // -> [version <= 0x00000002]
[20:40:18.304]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:40:18.304]        // -> [partNum <= 0x0000BB88]
[20:40:18.304]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:40:18.304]        // -> [manuf <= 0x00000017]
[20:40:18.304]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:40:18.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:40:18.304]      isProduction = (version > 0);
[20:40:18.304]        // -> [isProduction <= 0x00000001]
[20:40:18.304]    </block>
[20:40:18.304]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:40:18.304]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:40:18.304]        // =>  FALSE
[20:40:18.312]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:40:18.312]    </control>
[20:40:18.312]    <control if="continueId == 4" while="" timeout="0" info="">
[20:40:18.312]      // if-block "continueId == 4"
[20:40:18.312]        // =>  FALSE
[20:40:18.312]      // skip if-block "continueId == 4"
[20:40:18.312]    </control>
[20:40:18.312]    <control if="!isProduction" while="" timeout="0" info="">
[20:40:18.312]      // if-block "!isProduction"
[20:40:18.312]        // =>  FALSE
[20:40:18.312]      // skip if-block "!isProduction"
[20:40:18.312]    </control>
[20:40:18.312]  </sequence>
[20:40:18.312]  
[20:42:24.253]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:42:24.253]  
[20:42:24.262]  <debugvars>
[20:42:24.262]    // Pre-defined
[20:42:24.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:42:24.262]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:42:24.262]    __dp=0x00000000
[20:42:24.262]    __ap=0x00000000
[20:42:24.262]    __traceout=0x00000000      (Trace Disabled)
[20:42:24.262]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:42:24.262]    __FlashAddr=0x00000000
[20:42:24.262]    __FlashLen=0x00000000
[20:42:24.262]    __FlashArg=0x00000000
[20:42:24.262]    __FlashOp=0x00000000
[20:42:24.262]    __Result=0x00000000
[20:42:24.262]  </debugvars>
[20:42:24.262]  
[20:42:24.263]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:42:24.263]    <block atomic="false" info="">
[20:42:24.263]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:42:24.263]        // -> [isSWJ <= 0x00000001]
[20:42:24.263]      __var hasDormant = __protocol & 0x00020000;
[20:42:24.263]        // -> [hasDormant <= 0x00000000]
[20:42:24.263]      __var protType   = __protocol & 0x0000FFFF;
[20:42:24.263]        // -> [protType <= 0x00000002]
[20:42:24.263]    </block>
[20:42:24.263]    <control if="protType == 1" while="" timeout="0" info="">
[20:42:24.263]      // if-block "protType == 1"
[20:42:24.263]        // =>  FALSE
[20:42:24.263]      // skip if-block "protType == 1"
[20:42:24.263]    </control>
[20:42:24.263]    <control if="protType == 2" while="" timeout="0" info="">
[20:42:24.263]      // if-block "protType == 2"
[20:42:24.263]        // =>  TRUE
[20:42:24.265]      <control if="isSWJ" while="" timeout="0" info="">
[20:42:24.265]        // if-block "isSWJ"
[20:42:24.265]          // =>  TRUE
[20:42:24.265]        <control if="hasDormant" while="" timeout="0" info="">
[20:42:24.265]          // if-block "hasDormant"
[20:42:24.265]            // =>  FALSE
[20:42:24.265]          // skip if-block "hasDormant"
[20:42:24.265]        </control>
[20:42:24.265]        <control if="!hasDormant" while="" timeout="0" info="">
[20:42:24.265]          // if-block "!hasDormant"
[20:42:24.265]            // =>  TRUE
[20:42:24.265]          <block atomic="false" info="">
[20:42:24.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:42:24.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:42:24.265]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:42:24.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:42:24.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:42:24.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:42:24.284]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:42:24.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:42:24.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:42:24.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:42:24.286]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:42:24.286]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:42:24.286]          </block>
[20:42:24.286]          // end if-block "!hasDormant"
[20:42:24.286]        </control>
[20:42:24.286]        // end if-block "isSWJ"
[20:42:24.286]      </control>
[20:42:24.286]      <control if="!isSWJ" while="" timeout="0" info="">
[20:42:24.286]        // if-block "!isSWJ"
[20:42:24.286]          // =>  FALSE
[20:42:24.286]        // skip if-block "!isSWJ"
[20:42:24.286]      </control>
[20:42:24.286]      <block atomic="false" info="">
[20:42:24.294]        ReadDP(0x0);
[20:42:24.295]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:42:24.295]      </block>
[20:42:24.295]      // end if-block "protType == 2"
[20:42:24.295]    </control>
[20:42:24.295]  </sequence>
[20:42:24.295]  
[20:42:24.304]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:42:24.304]  
[20:42:24.304]  <debugvars>
[20:42:24.304]    // Pre-defined
[20:42:24.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:42:24.304]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:42:24.304]    __dp=0x00000000
[20:42:24.304]    __ap=0x00000000
[20:42:24.304]    __traceout=0x00000000      (Trace Disabled)
[20:42:24.304]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:42:24.304]    __FlashAddr=0x00000000
[20:42:24.304]    __FlashLen=0x00000000
[20:42:24.304]    __FlashArg=0x00000000
[20:42:24.304]    __FlashOp=0x00000000
[20:42:24.304]    __Result=0x00000000
[20:42:24.304]  </debugvars>
[20:42:24.304]  
[20:42:24.304]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:42:24.304]    <block atomic="false" info="">
[20:42:24.304]      __var SW_DP_ABORT       = 0x0;
[20:42:24.304]        // -> [SW_DP_ABORT <= 0x00000000]
[20:42:24.304]      __var DP_CTRL_STAT      = 0x4;
[20:42:24.304]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:42:24.304]      __var DP_SELECT         = 0x8;
[20:42:24.314]        // -> [DP_SELECT <= 0x00000008]
[20:42:24.314]      __var powered_down      = 0;
[20:42:24.314]        // -> [powered_down <= 0x00000000]
[20:42:24.314]      WriteDP(DP_SELECT, 0x00000000);
[20:42:24.314]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:42:24.314]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:42:24.324]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:42:24.324]        // -> [powered_down <= 0x00000001]
[20:42:24.324]    </block>
[20:42:24.324]    <control if="powered_down" while="" timeout="0" info="">
[20:42:24.324]      // if-block "powered_down"
[20:42:24.324]        // =>  TRUE
[20:42:24.324]      <block atomic="false" info="">
[20:42:24.325]        Message(0, "Debug/System power-up request sent");
[20:42:24.325]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:42:24.325]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:42:24.325]      </block>
[20:42:24.325]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:42:24.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:42:24.335]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:42:24.335]        // while-condition  =>  FALSE
[20:42:24.335]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:42:24.335]      </control>
[20:42:24.335]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:42:24.335]        // if-block "(__protocol & 0xFFFF) == 1"
[20:42:24.335]          // =>  FALSE
[20:42:24.335]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:42:24.335]      </control>
[20:42:24.335]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:42:24.335]        // if-block "(__protocol & 0xFFFF) == 2"
[20:42:24.335]          // =>  TRUE
[20:42:24.335]        <block atomic="false" info="">
[20:42:24.335]          Message(0, "executing SWD power up");
[20:42:24.335]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:42:24.335]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:42:24.335]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:42:24.344]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:42:24.344]        </block>
[20:42:24.344]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:42:24.344]      </control>
[20:42:24.344]      // end if-block "powered_down"
[20:42:24.344]    </control>
[20:42:24.344]    <block atomic="false" info="">
[20:42:24.344]      __var DEBUG_PORT_VAL    = 0;
[20:42:24.344]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:42:24.344]      __var ACCESS_POINT_VAL  = 0;
[20:42:24.344]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:42:24.344]      __ap = 1; 
[20:42:24.344]        // -> [__ap <= 0x00000001]
[20:42:24.344]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:42:24.354]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:42:24.354]      __ap = 4;
[20:42:24.354]        // -> [__ap <= 0x00000004]
[20:42:24.354]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:42:24.364]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:42:24.364]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:42:24.364]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:42:24.364]    </block>
[20:42:24.364]    <block atomic="false" info="">
[20:42:24.364]      __var nReset = 0x80;
[20:42:24.364]        // -> [nReset <= 0x00000080]
[20:42:24.364]      __var canReadPins = 0;
[20:42:24.364]        // -> [canReadPins <= 0x00000000]
[20:42:24.364]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:42:24.372]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:42:24.372]        // -> [canReadPins <= 0x00000001]
[20:42:24.372]    </block>
[20:42:24.372]    <control if="" while="1" timeout="200" info="">
[20:42:24.372]      // while "1"  (timeout="200")
[20:42:24.372]      // while-condition  =>  TRUE
[20:42:24.372]      // while "1"  (timeout="200")
[20:42:24.372]      // while-condition  =>  TRUE
[20:42:24.372]      // while "1"  (timeout="200")
[20:42:24.372]      // while-condition  =>  TRUE
[20:42:24.372]      // while "1"  (timeout="200")
[20:42:24.372]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.374]      // while "1"  (timeout="200")
[20:42:24.374]      // while-condition  =>  TRUE
[20:42:24.384]      // while "1"  (timeout="200")
[20:42:24.384]      // while  =>  TIMEOUT
[20:42:24.384]      // end while "1"
[20:42:24.384]    </control>
[20:42:24.384]    <control if="canReadPins" while="" timeout="0" info="">
[20:42:24.384]      // if-block "canReadPins"
[20:42:24.384]        // =>  TRUE
[20:42:24.384]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:42:24.384]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:42:24.386]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:42:24.386]        // while-condition  =>  FALSE
[20:42:24.386]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:42:24.386]      </control>
[20:42:24.386]      // end if-block "canReadPins"
[20:42:24.386]    </control>
[20:42:24.386]    <control if="!canReadPins" while="" timeout="0" info="">
[20:42:24.386]      // if-block "!canReadPins"
[20:42:24.386]        // =>  FALSE
[20:42:24.386]      // skip if-block "!canReadPins"
[20:42:24.386]    </control>
[20:42:24.386]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:42:24.386]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:42:24.386]        // =>  TRUE
[20:42:24.386]      <block atomic="false" info="">
[20:42:24.386]        WriteAP(0x00, 0x190008);
[20:42:24.394]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:42:24.394]        WriteAP(0xF0, 0x01);
[20:42:24.404]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:42:24.404]      </block>
[20:42:24.404]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:42:24.404]    </control>
[20:42:24.404]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:42:24.404]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:42:24.404]        // =>  FALSE
[20:42:24.404]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:42:24.404]    </control>
[20:42:24.404]    <block atomic="false" info="">
[20:42:24.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:42:24.414]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:42:24.414]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:42:24.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:42:24.414]      __ap = 0; //lets make sure we reset the access point selection
[20:42:24.414]        // -> [__ap <= 0x00000000]
[20:42:24.414]    </block>
[20:42:24.414]  </sequence>
[20:42:24.414]  
[20:42:24.454]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:42:24.454]  
[20:42:24.454]  <debugvars>
[20:42:24.464]    // Pre-defined
[20:42:24.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:42:24.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:42:24.464]    __dp=0x00000000
[20:42:24.464]    __ap=0x00000000
[20:42:24.464]    __traceout=0x00000000      (Trace Disabled)
[20:42:24.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:42:24.464]    __FlashAddr=0x00000000
[20:42:24.464]    __FlashLen=0x00000000
[20:42:24.464]    __FlashArg=0x00000000
[20:42:24.464]    __FlashOp=0x00000000
[20:42:24.464]    __Result=0x00000000
[20:42:24.464]  </debugvars>
[20:42:24.466]  
[20:42:24.466]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:42:24.466]    <block atomic="false" info="">
[20:42:24.466]      __var deviceID = 0;
[20:42:24.466]        // -> [deviceID <= 0x00000000]
[20:42:24.466]      __var version = 0;
[20:42:24.466]        // -> [version <= 0x00000000]
[20:42:24.466]      __var partNum = 0;
[20:42:24.466]        // -> [partNum <= 0x00000000]
[20:42:24.466]      __var manuf = 0;
[20:42:24.466]        // -> [manuf <= 0x00000000]
[20:42:24.466]      __var isMSPM0G1X0X_G3X0X = 0;
[20:42:24.466]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:42:24.466]      __var isProduction = 0;
[20:42:24.466]        // -> [isProduction <= 0x00000000]
[20:42:24.466]      __var continueId = 0;
[20:42:24.466]        // -> [continueId <= 0x00000000]
[20:42:24.466]      deviceID =   Read32(0x41C40004);
[20:42:24.466]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:42:24.466]        // -> [deviceID <= 0x2BB8802F]
[20:42:24.466]      version = deviceID >> 28;
[20:42:24.466]        // -> [version <= 0x00000002]
[20:42:24.466]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:42:24.466]        // -> [partNum <= 0x0000BB88]
[20:42:24.466]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:42:24.466]        // -> [manuf <= 0x00000017]
[20:42:24.466]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:42:24.466]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:42:24.466]      isProduction = (version > 0);
[20:42:24.474]        // -> [isProduction <= 0x00000001]
[20:42:24.474]    </block>
[20:42:24.474]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:42:24.474]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:42:24.474]        // =>  FALSE
[20:42:24.474]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:42:24.474]    </control>
[20:42:24.474]    <control if="continueId == 4" while="" timeout="0" info="">
[20:42:24.474]      // if-block "continueId == 4"
[20:42:24.474]        // =>  FALSE
[20:42:24.474]      // skip if-block "continueId == 4"
[20:42:24.474]    </control>
[20:42:24.474]    <control if="!isProduction" while="" timeout="0" info="">
[20:42:24.474]      // if-block "!isProduction"
[20:42:24.474]        // =>  FALSE
[20:42:24.474]      // skip if-block "!isProduction"
[20:42:24.474]    </control>
[20:42:24.474]  </sequence>
[20:42:24.474]  
[20:43:53.565]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:43:53.565]  
[20:43:53.575]  <debugvars>
[20:43:53.575]    // Pre-defined
[20:43:53.575]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:53.575]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:53.575]    __dp=0x00000000
[20:43:53.575]    __ap=0x00000000
[20:43:53.575]    __traceout=0x00000000      (Trace Disabled)
[20:43:53.575]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:53.575]    __FlashAddr=0x00000000
[20:43:53.575]    __FlashLen=0x00000000
[20:43:53.576]    __FlashArg=0x00000000
[20:43:53.576]    __FlashOp=0x00000000
[20:43:53.576]    __Result=0x00000000
[20:43:53.576]  </debugvars>
[20:43:53.576]  
[20:43:53.576]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:43:53.576]    <block atomic="false" info="">
[20:43:53.576]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:43:53.576]        // -> [isSWJ <= 0x00000001]
[20:43:53.576]      __var hasDormant = __protocol & 0x00020000;
[20:43:53.576]        // -> [hasDormant <= 0x00000000]
[20:43:53.576]      __var protType   = __protocol & 0x0000FFFF;
[20:43:53.576]        // -> [protType <= 0x00000002]
[20:43:53.576]    </block>
[20:43:53.576]    <control if="protType == 1" while="" timeout="0" info="">
[20:43:53.576]      // if-block "protType == 1"
[20:43:53.576]        // =>  FALSE
[20:43:53.576]      // skip if-block "protType == 1"
[20:43:53.576]    </control>
[20:43:53.576]    <control if="protType == 2" while="" timeout="0" info="">
[20:43:53.576]      // if-block "protType == 2"
[20:43:53.576]        // =>  TRUE
[20:43:53.576]      <control if="isSWJ" while="" timeout="0" info="">
[20:43:53.576]        // if-block "isSWJ"
[20:43:53.576]          // =>  TRUE
[20:43:53.576]        <control if="hasDormant" while="" timeout="0" info="">
[20:43:53.576]          // if-block "hasDormant"
[20:43:53.576]            // =>  FALSE
[20:43:53.576]          // skip if-block "hasDormant"
[20:43:53.576]        </control>
[20:43:53.576]        <control if="!hasDormant" while="" timeout="0" info="">
[20:43:53.576]          // if-block "!hasDormant"
[20:43:53.576]            // =>  TRUE
[20:43:53.576]          <block atomic="false" info="">
[20:43:53.576]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:43:53.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:53.586]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:43:53.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:43:53.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:43:53.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:53.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:43:53.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:43:53.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:43:53.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:53.595]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:43:53.595]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:43:53.595]          </block>
[20:43:53.595]          // end if-block "!hasDormant"
[20:43:53.595]        </control>
[20:43:53.595]        // end if-block "isSWJ"
[20:43:53.595]      </control>
[20:43:53.595]      <control if="!isSWJ" while="" timeout="0" info="">
[20:43:53.595]        // if-block "!isSWJ"
[20:43:53.595]          // =>  FALSE
[20:43:53.595]        // skip if-block "!isSWJ"
[20:43:53.595]      </control>
[20:43:53.595]      <block atomic="false" info="">
[20:43:53.605]        ReadDP(0x0);
[20:43:53.605]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:43:53.605]      </block>
[20:43:53.605]      // end if-block "protType == 2"
[20:43:53.605]    </control>
[20:43:53.605]  </sequence>
[20:43:53.605]  
[20:43:53.605]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:43:53.605]  
[20:43:53.605]  <debugvars>
[20:43:53.605]    // Pre-defined
[20:43:53.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:53.605]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:53.605]    __dp=0x00000000
[20:43:53.605]    __ap=0x00000000
[20:43:53.605]    __traceout=0x00000000      (Trace Disabled)
[20:43:53.605]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:53.605]    __FlashAddr=0x00000000
[20:43:53.605]    __FlashLen=0x00000000
[20:43:53.605]    __FlashArg=0x00000000
[20:43:53.605]    __FlashOp=0x00000000
[20:43:53.605]    __Result=0x00000000
[20:43:53.605]  </debugvars>
[20:43:53.605]  
[20:43:53.615]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:43:53.615]    <block atomic="false" info="">
[20:43:53.615]      __var SW_DP_ABORT       = 0x0;
[20:43:53.615]        // -> [SW_DP_ABORT <= 0x00000000]
[20:43:53.615]      __var DP_CTRL_STAT      = 0x4;
[20:43:53.615]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:43:53.615]      __var DP_SELECT         = 0x8;
[20:43:53.615]        // -> [DP_SELECT <= 0x00000008]
[20:43:53.615]      __var powered_down      = 0;
[20:43:53.615]        // -> [powered_down <= 0x00000000]
[20:43:53.615]      WriteDP(DP_SELECT, 0x00000000);
[20:43:53.616]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:43:53.616]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:43:53.616]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:43:53.616]        // -> [powered_down <= 0x00000001]
[20:43:53.616]    </block>
[20:43:53.616]    <control if="powered_down" while="" timeout="0" info="">
[20:43:53.616]      // if-block "powered_down"
[20:43:53.616]        // =>  TRUE
[20:43:53.616]      <block atomic="false" info="">
[20:43:53.616]        Message(0, "Debug/System power-up request sent");
[20:43:53.622]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:43:53.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:43:53.623]      </block>
[20:43:53.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:43:53.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:43:53.626]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:43:53.626]        // while-condition  =>  FALSE
[20:43:53.626]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:43:53.626]      </control>
[20:43:53.626]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:43:53.626]        // if-block "(__protocol & 0xFFFF) == 1"
[20:43:53.626]          // =>  FALSE
[20:43:53.626]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:43:53.626]      </control>
[20:43:53.626]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:43:53.626]        // if-block "(__protocol & 0xFFFF) == 2"
[20:43:53.626]          // =>  TRUE
[20:43:53.626]        <block atomic="false" info="">
[20:43:53.626]          Message(0, "executing SWD power up");
[20:43:53.626]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:43:53.626]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:43:53.626]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:43:53.635]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:43:53.635]        </block>
[20:43:53.635]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:43:53.635]      </control>
[20:43:53.635]      // end if-block "powered_down"
[20:43:53.635]    </control>
[20:43:53.635]    <block atomic="false" info="">
[20:43:53.635]      __var DEBUG_PORT_VAL    = 0;
[20:43:53.635]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:43:53.635]      __var ACCESS_POINT_VAL  = 0;
[20:43:53.635]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:43:53.635]      __ap = 1; 
[20:43:53.635]        // -> [__ap <= 0x00000001]
[20:43:53.635]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:43:53.645]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:43:53.645]      __ap = 4;
[20:43:53.645]        // -> [__ap <= 0x00000004]
[20:43:53.645]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:43:53.645]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:43:53.645]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:43:53.645]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:43:53.645]    </block>
[20:43:53.645]    <block atomic="false" info="">
[20:43:53.645]      __var nReset = 0x80;
[20:43:53.645]        // -> [nReset <= 0x00000080]
[20:43:53.645]      __var canReadPins = 0;
[20:43:53.645]        // -> [canReadPins <= 0x00000000]
[20:43:53.645]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:43:53.645]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:43:53.645]        // -> [canReadPins <= 0x00000001]
[20:43:53.645]    </block>
[20:43:53.645]    <control if="" while="1" timeout="200" info="">
[20:43:53.645]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.655]      // while-condition  =>  TRUE
[20:43:53.655]      // while "1"  (timeout="200")
[20:43:53.665]      // while-condition  =>  TRUE
[20:43:53.665]      // while "1"  (timeout="200")
[20:43:53.665]      // while  =>  TIMEOUT
[20:43:53.665]      // end while "1"
[20:43:53.665]    </control>
[20:43:53.665]    <control if="canReadPins" while="" timeout="0" info="">
[20:43:53.665]      // if-block "canReadPins"
[20:43:53.665]        // =>  TRUE
[20:43:53.665]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:43:53.665]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:43:53.667]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:43:53.667]        // while-condition  =>  FALSE
[20:43:53.667]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:43:53.667]      </control>
[20:43:53.667]      // end if-block "canReadPins"
[20:43:53.667]    </control>
[20:43:53.667]    <control if="!canReadPins" while="" timeout="0" info="">
[20:43:53.667]      // if-block "!canReadPins"
[20:43:53.667]        // =>  FALSE
[20:43:53.667]      // skip if-block "!canReadPins"
[20:43:53.667]    </control>
[20:43:53.667]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:43:53.667]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:43:53.667]        // =>  TRUE
[20:43:53.667]      <block atomic="false" info="">
[20:43:53.667]        WriteAP(0x00, 0x190008);
[20:43:53.667]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:43:53.667]        WriteAP(0xF0, 0x01);
[20:43:53.677]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:43:53.677]      </block>
[20:43:53.677]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:43:53.677]    </control>
[20:43:53.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:43:53.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:43:53.677]        // =>  FALSE
[20:43:53.677]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:43:53.677]    </control>
[20:43:53.677]    <block atomic="false" info="">
[20:43:53.677]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:43:53.677]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:43:53.677]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:43:53.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:43:53.686]      __ap = 0; //lets make sure we reset the access point selection
[20:43:53.686]        // -> [__ap <= 0x00000000]
[20:43:53.686]    </block>
[20:43:53.686]  </sequence>
[20:43:53.686]  
[20:43:53.716]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:43:53.716]  
[20:43:53.716]  <debugvars>
[20:43:53.716]    // Pre-defined
[20:43:53.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:53.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:53.716]    __dp=0x00000000
[20:43:53.716]    __ap=0x00000000
[20:43:53.716]    __traceout=0x00000000      (Trace Disabled)
[20:43:53.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:53.716]    __FlashAddr=0x00000000
[20:43:53.716]    __FlashLen=0x00000000
[20:43:53.716]    __FlashArg=0x00000000
[20:43:53.716]    __FlashOp=0x00000000
[20:43:53.716]    __Result=0x00000000
[20:43:53.716]  </debugvars>
[20:43:53.716]  
[20:43:53.716]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:43:53.716]    <block atomic="false" info="">
[20:43:53.716]      __var deviceID = 0;
[20:43:53.716]        // -> [deviceID <= 0x00000000]
[20:43:53.716]      __var version = 0;
[20:43:53.716]        // -> [version <= 0x00000000]
[20:43:53.716]      __var partNum = 0;
[20:43:53.716]        // -> [partNum <= 0x00000000]
[20:43:53.716]      __var manuf = 0;
[20:43:53.716]        // -> [manuf <= 0x00000000]
[20:43:53.716]      __var isMSPM0G1X0X_G3X0X = 0;
[20:43:53.716]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:43:53.716]      __var isProduction = 0;
[20:43:53.716]        // -> [isProduction <= 0x00000000]
[20:43:53.716]      __var continueId = 0;
[20:43:53.716]        // -> [continueId <= 0x00000000]
[20:43:53.716]      deviceID =   Read32(0x41C40004);
[20:43:53.726]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:43:53.726]        // -> [deviceID <= 0x2BB8802F]
[20:43:53.726]      version = deviceID >> 28;
[20:43:53.726]        // -> [version <= 0x00000002]
[20:43:53.726]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:43:53.726]        // -> [partNum <= 0x0000BB88]
[20:43:53.726]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:43:53.726]        // -> [manuf <= 0x00000017]
[20:43:53.726]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:43:53.726]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:43:53.726]      isProduction = (version > 0);
[20:43:53.726]        // -> [isProduction <= 0x00000001]
[20:43:53.726]    </block>
[20:43:53.726]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:43:53.726]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:43:53.726]        // =>  FALSE
[20:43:53.726]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:43:53.726]    </control>
[20:43:53.726]    <control if="continueId == 4" while="" timeout="0" info="">
[20:43:53.726]      // if-block "continueId == 4"
[20:43:53.726]        // =>  FALSE
[20:43:53.726]      // skip if-block "continueId == 4"
[20:43:53.726]    </control>
[20:43:53.726]    <control if="!isProduction" while="" timeout="0" info="">
[20:43:53.726]      // if-block "!isProduction"
[20:43:53.726]        // =>  FALSE
[20:43:53.726]      // skip if-block "!isProduction"
[20:43:53.726]    </control>
[20:43:53.726]  </sequence>
[20:43:53.726]  
[20:44:43.566]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:44:43.566]  
[20:44:43.581]  <debugvars>
[20:44:43.581]    // Pre-defined
[20:44:43.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:43.581]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:43.581]    __dp=0x00000000
[20:44:43.581]    __ap=0x00000000
[20:44:43.581]    __traceout=0x00000000      (Trace Disabled)
[20:44:43.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:43.581]    __FlashAddr=0x00000000
[20:44:43.581]    __FlashLen=0x00000000
[20:44:43.581]    __FlashArg=0x00000000
[20:44:43.581]    __FlashOp=0x00000000
[20:44:43.581]    __Result=0x00000000
[20:44:43.581]  </debugvars>
[20:44:43.581]  
[20:44:43.581]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:44:43.581]    <block atomic="false" info="">
[20:44:43.581]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:44:43.581]        // -> [isSWJ <= 0x00000001]
[20:44:43.581]      __var hasDormant = __protocol & 0x00020000;
[20:44:43.581]        // -> [hasDormant <= 0x00000000]
[20:44:43.581]      __var protType   = __protocol & 0x0000FFFF;
[20:44:43.581]        // -> [protType <= 0x00000002]
[20:44:43.581]    </block>
[20:44:43.581]    <control if="protType == 1" while="" timeout="0" info="">
[20:44:43.581]      // if-block "protType == 1"
[20:44:43.581]        // =>  FALSE
[20:44:43.581]      // skip if-block "protType == 1"
[20:44:43.581]    </control>
[20:44:43.581]    <control if="protType == 2" while="" timeout="0" info="">
[20:44:43.581]      // if-block "protType == 2"
[20:44:43.581]        // =>  TRUE
[20:44:43.581]      <control if="isSWJ" while="" timeout="0" info="">
[20:44:43.581]        // if-block "isSWJ"
[20:44:43.581]          // =>  TRUE
[20:44:43.581]        <control if="hasDormant" while="" timeout="0" info="">
[20:44:43.581]          // if-block "hasDormant"
[20:44:43.581]            // =>  FALSE
[20:44:43.581]          // skip if-block "hasDormant"
[20:44:43.581]        </control>
[20:44:43.581]        <control if="!hasDormant" while="" timeout="0" info="">
[20:44:43.581]          // if-block "!hasDormant"
[20:44:43.581]            // =>  TRUE
[20:44:43.581]          <block atomic="false" info="">
[20:44:43.581]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:44:43.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:43.586]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:44:43.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:44:43.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:44:43.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:43.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:44:43.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:44:43.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:44:43.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:43.586]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:44:43.586]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:44:43.586]          </block>
[20:44:43.596]          // end if-block "!hasDormant"
[20:44:43.596]        </control>
[20:44:43.596]        // end if-block "isSWJ"
[20:44:43.596]      </control>
[20:44:43.597]      <control if="!isSWJ" while="" timeout="0" info="">
[20:44:43.597]        // if-block "!isSWJ"
[20:44:43.597]          // =>  FALSE
[20:44:43.597]        // skip if-block "!isSWJ"
[20:44:43.597]      </control>
[20:44:43.597]      <block atomic="false" info="">
[20:44:43.597]        ReadDP(0x0);
[20:44:43.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:44:43.598]      </block>
[20:44:43.598]      // end if-block "protType == 2"
[20:44:43.598]    </control>
[20:44:43.598]  </sequence>
[20:44:43.599]  
[20:44:43.599]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:44:43.599]  
[20:44:43.599]  <debugvars>
[20:44:43.599]    // Pre-defined
[20:44:43.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:43.599]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:43.599]    __dp=0x00000000
[20:44:43.599]    __ap=0x00000000
[20:44:43.599]    __traceout=0x00000000      (Trace Disabled)
[20:44:43.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:43.599]    __FlashAddr=0x00000000
[20:44:43.599]    __FlashLen=0x00000000
[20:44:43.599]    __FlashArg=0x00000000
[20:44:43.599]    __FlashOp=0x00000000
[20:44:43.599]    __Result=0x00000000
[20:44:43.599]  </debugvars>
[20:44:43.599]  
[20:44:43.599]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:44:43.599]    <block atomic="false" info="">
[20:44:43.599]      __var SW_DP_ABORT       = 0x0;
[20:44:43.599]        // -> [SW_DP_ABORT <= 0x00000000]
[20:44:43.599]      __var DP_CTRL_STAT      = 0x4;
[20:44:43.599]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:44:43.599]      __var DP_SELECT         = 0x8;
[20:44:43.599]        // -> [DP_SELECT <= 0x00000008]
[20:44:43.599]      __var powered_down      = 0;
[20:44:43.599]        // -> [powered_down <= 0x00000000]
[20:44:43.599]      WriteDP(DP_SELECT, 0x00000000);
[20:44:43.606]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:44:43.606]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:44:43.606]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:44:43.606]        // -> [powered_down <= 0x00000001]
[20:44:43.606]    </block>
[20:44:43.606]    <control if="powered_down" while="" timeout="0" info="">
[20:44:43.606]      // if-block "powered_down"
[20:44:43.606]        // =>  TRUE
[20:44:43.606]      <block atomic="false" info="">
[20:44:43.606]        Message(0, "Debug/System power-up request sent");
[20:44:43.616]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:44:43.616]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:44:43.616]      </block>
[20:44:43.616]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:44:43.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:44:43.616]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:44:43.616]        // while-condition  =>  FALSE
[20:44:43.616]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:44:43.616]      </control>
[20:44:43.616]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:44:43.616]        // if-block "(__protocol & 0xFFFF) == 1"
[20:44:43.616]          // =>  FALSE
[20:44:43.616]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:44:43.616]      </control>
[20:44:43.616]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:44:43.616]        // if-block "(__protocol & 0xFFFF) == 2"
[20:44:43.616]          // =>  TRUE
[20:44:43.616]        <block atomic="false" info="">
[20:44:43.616]          Message(0, "executing SWD power up");
[20:44:43.625]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:44:43.627]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:44:43.627]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:44:43.628]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:44:43.628]        </block>
[20:44:43.628]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:44:43.628]      </control>
[20:44:43.628]      // end if-block "powered_down"
[20:44:43.628]    </control>
[20:44:43.628]    <block atomic="false" info="">
[20:44:43.628]      __var DEBUG_PORT_VAL    = 0;
[20:44:43.628]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:44:43.628]      __var ACCESS_POINT_VAL  = 0;
[20:44:43.628]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:44:43.630]      __ap = 1; 
[20:44:43.630]        // -> [__ap <= 0x00000001]
[20:44:43.630]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:44:43.639]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:44:43.639]      __ap = 4;
[20:44:43.639]        // -> [__ap <= 0x00000004]
[20:44:43.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:43.643]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:44:43.643]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:44:43.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:43.645]    </block>
[20:44:43.645]    <block atomic="false" info="">
[20:44:43.645]      __var nReset = 0x80;
[20:44:43.645]        // -> [nReset <= 0x00000080]
[20:44:43.645]      __var canReadPins = 0;
[20:44:43.645]        // -> [canReadPins <= 0x00000000]
[20:44:43.645]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:44:43.648]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:44:43.648]        // -> [canReadPins <= 0x00000001]
[20:44:43.648]    </block>
[20:44:43.648]    <control if="" while="1" timeout="200" info="">
[20:44:43.648]      // while "1"  (timeout="200")
[20:44:43.648]      // while-condition  =>  TRUE
[20:44:43.648]      // while "1"  (timeout="200")
[20:44:43.648]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.649]      // while-condition  =>  TRUE
[20:44:43.649]      // while "1"  (timeout="200")
[20:44:43.654]      // while-condition  =>  TRUE
[20:44:43.654]      // while "1"  (timeout="200")
[20:44:43.654]      // while-condition  =>  TRUE
[20:44:43.654]      // while "1"  (timeout="200")
[20:44:43.654]      // while-condition  =>  TRUE
[20:44:43.654]      // while "1"  (timeout="200")
[20:44:43.654]      // while-condition  =>  TRUE
[20:44:43.655]      // while "1"  (timeout="200")
[20:44:43.655]      // while-condition  =>  TRUE
[20:44:43.655]      // while "1"  (timeout="200")
[20:44:43.655]      // while-condition  =>  TRUE
[20:44:43.655]      // while "1"  (timeout="200")
[20:44:43.655]      // while-condition  =>  TRUE
[20:44:43.655]      // while "1"  (timeout="200")
[20:44:43.655]      // while-condition  =>  TRUE
[20:44:43.655]      // while "1"  (timeout="200")
[20:44:43.656]      // while-condition  =>  TRUE
[20:44:43.656]      // while "1"  (timeout="200")
[20:44:43.656]      // while-condition  =>  TRUE
[20:44:43.656]      // while "1"  (timeout="200")
[20:44:43.656]      // while-condition  =>  TRUE
[20:44:43.656]      // while "1"  (timeout="200")
[20:44:43.656]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.657]      // while "1"  (timeout="200")
[20:44:43.657]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.659]      // while "1"  (timeout="200")
[20:44:43.659]      // while-condition  =>  TRUE
[20:44:43.660]      // while "1"  (timeout="200")
[20:44:43.660]      // while  =>  TIMEOUT
[20:44:43.660]      // end while "1"
[20:44:43.660]    </control>
[20:44:43.660]    <control if="canReadPins" while="" timeout="0" info="">
[20:44:43.660]      // if-block "canReadPins"
[20:44:43.660]        // =>  TRUE
[20:44:43.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:44:43.660]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:44:43.662]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:44:43.662]        // while-condition  =>  FALSE
[20:44:43.662]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:44:43.662]      </control>
[20:44:43.662]      // end if-block "canReadPins"
[20:44:43.662]    </control>
[20:44:43.662]    <control if="!canReadPins" while="" timeout="0" info="">
[20:44:43.662]      // if-block "!canReadPins"
[20:44:43.662]        // =>  FALSE
[20:44:43.662]      // skip if-block "!canReadPins"
[20:44:43.662]    </control>
[20:44:43.662]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:44:43.662]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:43.662]        // =>  TRUE
[20:44:43.662]      <block atomic="false" info="">
[20:44:43.662]        WriteAP(0x00, 0x190008);
[20:44:43.665]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:43.665]        WriteAP(0xF0, 0x01);
[20:44:43.672]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:43.672]      </block>
[20:44:43.672]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:43.672]    </control>
[20:44:43.672]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:44:43.672]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:43.672]        // =>  FALSE
[20:44:43.672]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:43.672]    </control>
[20:44:43.672]    <block atomic="false" info="">
[20:44:43.672]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:43.679]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:44:43.680]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:44:43.680]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:43.681]      __ap = 0; //lets make sure we reset the access point selection
[20:44:43.681]        // -> [__ap <= 0x00000000]
[20:44:43.681]    </block>
[20:44:43.681]  </sequence>
[20:44:43.681]  
[20:44:43.714]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:44:43.714]  
[20:44:43.714]  <debugvars>
[20:44:43.714]    // Pre-defined
[20:44:43.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:43.714]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:43.714]    __dp=0x00000000
[20:44:43.714]    __ap=0x00000000
[20:44:43.714]    __traceout=0x00000000      (Trace Disabled)
[20:44:43.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:43.714]    __FlashAddr=0x00000000
[20:44:43.714]    __FlashLen=0x00000000
[20:44:43.714]    __FlashArg=0x00000000
[20:44:43.714]    __FlashOp=0x00000000
[20:44:43.714]    __Result=0x00000000
[20:44:43.714]  </debugvars>
[20:44:43.714]  
[20:44:43.714]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:44:43.714]    <block atomic="false" info="">
[20:44:43.714]      __var deviceID = 0;
[20:44:43.714]        // -> [deviceID <= 0x00000000]
[20:44:43.716]      __var version = 0;
[20:44:43.716]        // -> [version <= 0x00000000]
[20:44:43.716]      __var partNum = 0;
[20:44:43.716]        // -> [partNum <= 0x00000000]
[20:44:43.716]      __var manuf = 0;
[20:44:43.716]        // -> [manuf <= 0x00000000]
[20:44:43.716]      __var isMSPM0G1X0X_G3X0X = 0;
[20:44:43.716]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:44:43.716]      __var isProduction = 0;
[20:44:43.716]        // -> [isProduction <= 0x00000000]
[20:44:43.716]      __var continueId = 0;
[20:44:43.716]        // -> [continueId <= 0x00000000]
[20:44:43.716]      deviceID =   Read32(0x41C40004);
[20:44:43.721]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:44:43.721]        // -> [deviceID <= 0x2BB8802F]
[20:44:43.721]      version = deviceID >> 28;
[20:44:43.721]        // -> [version <= 0x00000002]
[20:44:43.721]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:44:43.721]        // -> [partNum <= 0x0000BB88]
[20:44:43.721]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:44:43.721]        // -> [manuf <= 0x00000017]
[20:44:43.721]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:44:43.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:44:43.721]      isProduction = (version > 0);
[20:44:43.721]        // -> [isProduction <= 0x00000001]
[20:44:43.721]    </block>
[20:44:43.721]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:44:43.721]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:44:43.721]        // =>  FALSE
[20:44:43.721]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:44:43.721]    </control>
[20:44:43.721]    <control if="continueId == 4" while="" timeout="0" info="">
[20:44:43.721]      // if-block "continueId == 4"
[20:44:43.728]        // =>  FALSE
[20:44:43.728]      // skip if-block "continueId == 4"
[20:44:43.728]    </control>
[20:44:43.728]    <control if="!isProduction" while="" timeout="0" info="">
[20:44:43.728]      // if-block "!isProduction"
[20:44:43.728]        // =>  FALSE
[20:44:43.728]      // skip if-block "!isProduction"
[20:44:43.728]    </control>
[20:44:43.728]  </sequence>
[20:44:43.728]  
[20:45:31.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:45:31.279]  
[20:45:31.288]  <debugvars>
[20:45:31.288]    // Pre-defined
[20:45:31.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:31.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:31.288]    __dp=0x00000000
[20:45:31.288]    __ap=0x00000000
[20:45:31.288]    __traceout=0x00000000      (Trace Disabled)
[20:45:31.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:31.288]    __FlashAddr=0x00000000
[20:45:31.288]    __FlashLen=0x00000000
[20:45:31.289]    __FlashArg=0x00000000
[20:45:31.289]    __FlashOp=0x00000000
[20:45:31.289]    __Result=0x00000000
[20:45:31.289]  </debugvars>
[20:45:31.289]  
[20:45:31.289]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:45:31.289]    <block atomic="false" info="">
[20:45:31.289]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:45:31.289]        // -> [isSWJ <= 0x00000001]
[20:45:31.289]      __var hasDormant = __protocol & 0x00020000;
[20:45:31.289]        // -> [hasDormant <= 0x00000000]
[20:45:31.291]      __var protType   = __protocol & 0x0000FFFF;
[20:45:31.291]        // -> [protType <= 0x00000002]
[20:45:31.291]    </block>
[20:45:31.291]    <control if="protType == 1" while="" timeout="0" info="">
[20:45:31.291]      // if-block "protType == 1"
[20:45:31.291]        // =>  FALSE
[20:45:31.291]      // skip if-block "protType == 1"
[20:45:31.291]    </control>
[20:45:31.291]    <control if="protType == 2" while="" timeout="0" info="">
[20:45:31.291]      // if-block "protType == 2"
[20:45:31.291]        // =>  TRUE
[20:45:31.291]      <control if="isSWJ" while="" timeout="0" info="">
[20:45:31.291]        // if-block "isSWJ"
[20:45:31.291]          // =>  TRUE
[20:45:31.291]        <control if="hasDormant" while="" timeout="0" info="">
[20:45:31.291]          // if-block "hasDormant"
[20:45:31.291]            // =>  FALSE
[20:45:31.291]          // skip if-block "hasDormant"
[20:45:31.291]        </control>
[20:45:31.291]        <control if="!hasDormant" while="" timeout="0" info="">
[20:45:31.291]          // if-block "!hasDormant"
[20:45:31.291]            // =>  TRUE
[20:45:31.291]          <block atomic="false" info="">
[20:45:31.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:45:31.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:31.291]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:45:31.291]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:45:31.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:45:31.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:31.291]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:45:31.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:45:31.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:45:31.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:31.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:45:31.301]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:45:31.301]          </block>
[20:45:31.301]          // end if-block "!hasDormant"
[20:45:31.310]        </control>
[20:45:31.310]        // end if-block "isSWJ"
[20:45:31.310]      </control>
[20:45:31.310]      <control if="!isSWJ" while="" timeout="0" info="">
[20:45:31.310]        // if-block "!isSWJ"
[20:45:31.310]          // =>  FALSE
[20:45:31.310]        // skip if-block "!isSWJ"
[20:45:31.310]      </control>
[20:45:31.310]      <block atomic="false" info="">
[20:45:31.310]        ReadDP(0x0);
[20:45:31.310]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:45:31.310]      </block>
[20:45:31.310]      // end if-block "protType == 2"
[20:45:31.310]    </control>
[20:45:31.310]  </sequence>
[20:45:31.310]  
[20:45:31.316]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:45:31.316]  
[20:45:31.316]  <debugvars>
[20:45:31.316]    // Pre-defined
[20:45:31.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:31.316]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:31.316]    __dp=0x00000000
[20:45:31.316]    __ap=0x00000000
[20:45:31.321]    __traceout=0x00000000      (Trace Disabled)
[20:45:31.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:31.321]    __FlashAddr=0x00000000
[20:45:31.321]    __FlashLen=0x00000000
[20:45:31.321]    __FlashArg=0x00000000
[20:45:31.321]    __FlashOp=0x00000000
[20:45:31.321]    __Result=0x00000000
[20:45:31.321]  </debugvars>
[20:45:31.321]  
[20:45:31.321]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:45:31.321]    <block atomic="false" info="">
[20:45:31.321]      __var SW_DP_ABORT       = 0x0;
[20:45:31.321]        // -> [SW_DP_ABORT <= 0x00000000]
[20:45:31.321]      __var DP_CTRL_STAT      = 0x4;
[20:45:31.321]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:45:31.321]      __var DP_SELECT         = 0x8;
[20:45:31.321]        // -> [DP_SELECT <= 0x00000008]
[20:45:31.321]      __var powered_down      = 0;
[20:45:31.321]        // -> [powered_down <= 0x00000000]
[20:45:31.321]      WriteDP(DP_SELECT, 0x00000000);
[20:45:31.321]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:45:31.321]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:45:31.321]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:45:31.321]        // -> [powered_down <= 0x00000001]
[20:45:31.321]    </block>
[20:45:31.321]    <control if="powered_down" while="" timeout="0" info="">
[20:45:31.321]      // if-block "powered_down"
[20:45:31.321]        // =>  TRUE
[20:45:31.321]      <block atomic="false" info="">
[20:45:31.321]        Message(0, "Debug/System power-up request sent");
[20:45:31.321]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:45:31.331]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:45:31.331]      </block>
[20:45:31.331]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:45:31.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:45:31.331]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:45:31.331]        // while-condition  =>  FALSE
[20:45:31.331]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:45:31.331]      </control>
[20:45:31.331]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:45:31.331]        // if-block "(__protocol & 0xFFFF) == 1"
[20:45:31.331]          // =>  FALSE
[20:45:31.331]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:45:31.331]      </control>
[20:45:31.331]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:45:31.331]        // if-block "(__protocol & 0xFFFF) == 2"
[20:45:31.331]          // =>  TRUE
[20:45:31.331]        <block atomic="false" info="">
[20:45:31.331]          Message(0, "executing SWD power up");
[20:45:31.331]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:45:31.341]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:45:31.341]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:45:31.341]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:45:31.341]        </block>
[20:45:31.341]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:45:31.341]      </control>
[20:45:31.341]      // end if-block "powered_down"
[20:45:31.341]    </control>
[20:45:31.341]    <block atomic="false" info="">
[20:45:31.341]      __var DEBUG_PORT_VAL    = 0;
[20:45:31.341]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:45:31.341]      __var ACCESS_POINT_VAL  = 0;
[20:45:31.341]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:45:31.341]      __ap = 1; 
[20:45:31.341]        // -> [__ap <= 0x00000001]
[20:45:31.341]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:45:31.341]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:45:31.341]      __ap = 4;
[20:45:31.341]        // -> [__ap <= 0x00000004]
[20:45:31.341]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:31.352]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:45:31.360]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:45:31.360]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:31.360]    </block>
[20:45:31.360]    <block atomic="false" info="">
[20:45:31.360]      __var nReset = 0x80;
[20:45:31.360]        // -> [nReset <= 0x00000080]
[20:45:31.360]      __var canReadPins = 0;
[20:45:31.360]        // -> [canReadPins <= 0x00000000]
[20:45:31.360]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:45:31.360]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:45:31.360]        // -> [canReadPins <= 0x00000001]
[20:45:31.360]    </block>
[20:45:31.360]    <control if="" while="1" timeout="200" info="">
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.360]      // while "1"  (timeout="200")
[20:45:31.360]      // while-condition  =>  TRUE
[20:45:31.371]      // while "1"  (timeout="200")
[20:45:31.371]      // while  =>  TIMEOUT
[20:45:31.371]      // end while "1"
[20:45:31.371]    </control>
[20:45:31.371]    <control if="canReadPins" while="" timeout="0" info="">
[20:45:31.371]      // if-block "canReadPins"
[20:45:31.371]        // =>  TRUE
[20:45:31.371]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:45:31.371]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:45:31.371]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:45:31.371]        // while-condition  =>  FALSE
[20:45:31.371]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:45:31.371]      </control>
[20:45:31.371]      // end if-block "canReadPins"
[20:45:31.371]    </control>
[20:45:31.371]    <control if="!canReadPins" while="" timeout="0" info="">
[20:45:31.371]      // if-block "!canReadPins"
[20:45:31.371]        // =>  FALSE
[20:45:31.371]      // skip if-block "!canReadPins"
[20:45:31.371]    </control>
[20:45:31.371]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:45:31.371]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:31.371]        // =>  TRUE
[20:45:31.371]      <block atomic="false" info="">
[20:45:31.371]        WriteAP(0x00, 0x190008);
[20:45:31.371]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:31.371]        WriteAP(0xF0, 0x01);
[20:45:31.381]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:31.381]      </block>
[20:45:31.381]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:31.381]    </control>
[20:45:31.381]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:45:31.381]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:31.381]        // =>  FALSE
[20:45:31.381]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:31.381]    </control>
[20:45:31.381]    <block atomic="false" info="">
[20:45:31.381]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:31.391]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:45:31.391]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:45:31.391]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:31.391]      __ap = 0; //lets make sure we reset the access point selection
[20:45:31.391]        // -> [__ap <= 0x00000000]
[20:45:31.391]    </block>
[20:45:31.391]  </sequence>
[20:45:31.391]  
[20:45:31.431]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:45:31.431]  
[20:45:31.431]  <debugvars>
[20:45:31.431]    // Pre-defined
[20:45:31.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:31.431]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:31.431]    __dp=0x00000000
[20:45:31.431]    __ap=0x00000000
[20:45:31.431]    __traceout=0x00000000      (Trace Disabled)
[20:45:31.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:31.431]    __FlashAddr=0x00000000
[20:45:31.431]    __FlashLen=0x00000000
[20:45:31.431]    __FlashArg=0x00000000
[20:45:31.431]    __FlashOp=0x00000000
[20:45:31.431]    __Result=0x00000000
[20:45:31.431]  </debugvars>
[20:45:31.431]  
[20:45:31.431]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:45:31.431]    <block atomic="false" info="">
[20:45:31.431]      __var deviceID = 0;
[20:45:31.431]        // -> [deviceID <= 0x00000000]
[20:45:31.431]      __var version = 0;
[20:45:31.431]        // -> [version <= 0x00000000]
[20:45:31.431]      __var partNum = 0;
[20:45:31.431]        // -> [partNum <= 0x00000000]
[20:45:31.431]      __var manuf = 0;
[20:45:31.431]        // -> [manuf <= 0x00000000]
[20:45:31.431]      __var isMSPM0G1X0X_G3X0X = 0;
[20:45:31.431]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:45:31.431]      __var isProduction = 0;
[20:45:31.431]        // -> [isProduction <= 0x00000000]
[20:45:31.431]      __var continueId = 0;
[20:45:31.431]        // -> [continueId <= 0x00000000]
[20:45:31.431]      deviceID =   Read32(0x41C40004);
[20:45:31.441]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:45:31.441]        // -> [deviceID <= 0x2BB8802F]
[20:45:31.441]      version = deviceID >> 28;
[20:45:31.441]        // -> [version <= 0x00000002]
[20:45:31.441]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:45:31.441]        // -> [partNum <= 0x0000BB88]
[20:45:31.441]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:45:31.441]        // -> [manuf <= 0x00000017]
[20:45:31.441]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:45:31.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:45:31.441]      isProduction = (version > 0);
[20:45:31.441]        // -> [isProduction <= 0x00000001]
[20:45:31.441]    </block>
[20:45:31.441]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:45:31.441]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:45:31.441]        // =>  FALSE
[20:45:31.441]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:45:31.441]    </control>
[20:45:31.441]    <control if="continueId == 4" while="" timeout="0" info="">
[20:45:31.441]      // if-block "continueId == 4"
[20:45:31.441]        // =>  FALSE
[20:45:31.441]      // skip if-block "continueId == 4"
[20:45:31.441]    </control>
[20:45:31.441]    <control if="!isProduction" while="" timeout="0" info="">
[20:45:31.441]      // if-block "!isProduction"
[20:45:31.441]        // =>  FALSE
[20:45:31.441]      // skip if-block "!isProduction"
[20:45:31.441]    </control>
[20:45:31.441]  </sequence>
[20:45:31.441]  
[20:46:55.461]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:46:55.461]  
[20:46:55.475]  <debugvars>
[20:46:55.475]    // Pre-defined
[20:46:55.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:55.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:55.475]    __dp=0x00000000
[20:46:55.475]    __ap=0x00000000
[20:46:55.475]    __traceout=0x00000000      (Trace Disabled)
[20:46:55.475]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:55.475]    __FlashAddr=0x00000000
[20:46:55.475]    __FlashLen=0x00000000
[20:46:55.475]    __FlashArg=0x00000000
[20:46:55.475]    __FlashOp=0x00000000
[20:46:55.475]    __Result=0x00000000
[20:46:55.475]  </debugvars>
[20:46:55.475]  
[20:46:55.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:46:55.475]    <block atomic="false" info="">
[20:46:55.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:46:55.475]        // -> [isSWJ <= 0x00000001]
[20:46:55.475]      __var hasDormant = __protocol & 0x00020000;
[20:46:55.475]        // -> [hasDormant <= 0x00000000]
[20:46:55.475]      __var protType   = __protocol & 0x0000FFFF;
[20:46:55.475]        // -> [protType <= 0x00000002]
[20:46:55.475]    </block>
[20:46:55.475]    <control if="protType == 1" while="" timeout="0" info="">
[20:46:55.475]      // if-block "protType == 1"
[20:46:55.475]        // =>  FALSE
[20:46:55.475]      // skip if-block "protType == 1"
[20:46:55.475]    </control>
[20:46:55.475]    <control if="protType == 2" while="" timeout="0" info="">
[20:46:55.475]      // if-block "protType == 2"
[20:46:55.475]        // =>  TRUE
[20:46:55.475]      <control if="isSWJ" while="" timeout="0" info="">
[20:46:55.475]        // if-block "isSWJ"
[20:46:55.475]          // =>  TRUE
[20:46:55.475]        <control if="hasDormant" while="" timeout="0" info="">
[20:46:55.475]          // if-block "hasDormant"
[20:46:55.479]            // =>  FALSE
[20:46:55.479]          // skip if-block "hasDormant"
[20:46:55.479]        </control>
[20:46:55.479]        <control if="!hasDormant" while="" timeout="0" info="">
[20:46:55.479]          // if-block "!hasDormant"
[20:46:55.479]            // =>  TRUE
[20:46:55.479]          <block atomic="false" info="">
[20:46:55.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:46:55.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:55.479]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:46:55.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:46:55.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:46:55.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:55.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:46:55.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:46:55.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:46:55.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:55.491]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:46:55.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:46:55.491]          </block>
[20:46:55.491]          // end if-block "!hasDormant"
[20:46:55.491]        </control>
[20:46:55.491]        // end if-block "isSWJ"
[20:46:55.491]      </control>
[20:46:55.491]      <control if="!isSWJ" while="" timeout="0" info="">
[20:46:55.491]        // if-block "!isSWJ"
[20:46:55.491]          // =>  FALSE
[20:46:55.491]        // skip if-block "!isSWJ"
[20:46:55.491]      </control>
[20:46:55.491]      <block atomic="false" info="">
[20:46:55.491]        ReadDP(0x0);
[20:46:55.491]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:46:55.491]      </block>
[20:46:55.491]      // end if-block "protType == 2"
[20:46:55.491]    </control>
[20:46:55.491]  </sequence>
[20:46:55.491]  
[20:46:55.498]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:46:55.498]  
[20:46:55.498]  <debugvars>
[20:46:55.498]    // Pre-defined
[20:46:55.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:55.498]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:55.498]    __dp=0x00000000
[20:46:55.498]    __ap=0x00000000
[20:46:55.498]    __traceout=0x00000000      (Trace Disabled)
[20:46:55.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:55.498]    __FlashAddr=0x00000000
[20:46:55.498]    __FlashLen=0x00000000
[20:46:55.498]    __FlashArg=0x00000000
[20:46:55.498]    __FlashOp=0x00000000
[20:46:55.498]    __Result=0x00000000
[20:46:55.498]  </debugvars>
[20:46:55.498]  
[20:46:55.498]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:46:55.498]    <block atomic="false" info="">
[20:46:55.498]      __var SW_DP_ABORT       = 0x0;
[20:46:55.498]        // -> [SW_DP_ABORT <= 0x00000000]
[20:46:55.498]      __var DP_CTRL_STAT      = 0x4;
[20:46:55.498]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:46:55.498]      __var DP_SELECT         = 0x8;
[20:46:55.498]        // -> [DP_SELECT <= 0x00000008]
[20:46:55.498]      __var powered_down      = 0;
[20:46:55.498]        // -> [powered_down <= 0x00000000]
[20:46:55.498]      WriteDP(DP_SELECT, 0x00000000);
[20:46:55.498]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:46:55.498]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:46:55.498]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:46:55.498]        // -> [powered_down <= 0x00000001]
[20:46:55.509]    </block>
[20:46:55.509]    <control if="powered_down" while="" timeout="0" info="">
[20:46:55.509]      // if-block "powered_down"
[20:46:55.509]        // =>  TRUE
[20:46:55.509]      <block atomic="false" info="">
[20:46:55.509]        Message(0, "Debug/System power-up request sent");
[20:46:55.510]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:46:55.510]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:46:55.510]      </block>
[20:46:55.510]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:46:55.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:46:55.510]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:46:55.510]        // while-condition  =>  FALSE
[20:46:55.510]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:46:55.510]      </control>
[20:46:55.510]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:46:55.510]        // if-block "(__protocol & 0xFFFF) == 1"
[20:46:55.510]          // =>  FALSE
[20:46:55.510]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:46:55.510]      </control>
[20:46:55.510]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:46:55.510]        // if-block "(__protocol & 0xFFFF) == 2"
[20:46:55.510]          // =>  TRUE
[20:46:55.510]        <block atomic="false" info="">
[20:46:55.510]          Message(0, "executing SWD power up");
[20:46:55.510]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:46:55.518]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:46:55.518]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:46:55.520]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:46:55.520]        </block>
[20:46:55.520]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:46:55.520]      </control>
[20:46:55.520]      // end if-block "powered_down"
[20:46:55.520]    </control>
[20:46:55.520]    <block atomic="false" info="">
[20:46:55.520]      __var DEBUG_PORT_VAL    = 0;
[20:46:55.520]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:46:55.520]      __var ACCESS_POINT_VAL  = 0;
[20:46:55.520]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:46:55.520]      __ap = 1; 
[20:46:55.520]        // -> [__ap <= 0x00000001]
[20:46:55.520]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:46:55.520]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:46:55.520]      __ap = 4;
[20:46:55.520]        // -> [__ap <= 0x00000004]
[20:46:55.520]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:55.529]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:46:55.529]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:46:55.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:55.530]    </block>
[20:46:55.530]    <block atomic="false" info="">
[20:46:55.530]      __var nReset = 0x80;
[20:46:55.530]        // -> [nReset <= 0x00000080]
[20:46:55.530]      __var canReadPins = 0;
[20:46:55.530]        // -> [canReadPins <= 0x00000000]
[20:46:55.530]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:46:55.530]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:46:55.530]        // -> [canReadPins <= 0x00000001]
[20:46:55.530]    </block>
[20:46:55.530]    <control if="" while="1" timeout="200" info="">
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.530]      // while-condition  =>  TRUE
[20:46:55.530]      // while "1"  (timeout="200")
[20:46:55.539]      // while-condition  =>  TRUE
[20:46:55.539]      // while "1"  (timeout="200")
[20:46:55.539]      // while  =>  TIMEOUT
[20:46:55.539]      // end while "1"
[20:46:55.539]    </control>
[20:46:55.539]    <control if="canReadPins" while="" timeout="0" info="">
[20:46:55.539]      // if-block "canReadPins"
[20:46:55.539]        // =>  TRUE
[20:46:55.539]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:46:55.539]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:46:55.539]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:46:55.539]        // while-condition  =>  FALSE
[20:46:55.539]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:46:55.539]      </control>
[20:46:55.539]      // end if-block "canReadPins"
[20:46:55.539]    </control>
[20:46:55.539]    <control if="!canReadPins" while="" timeout="0" info="">
[20:46:55.539]      // if-block "!canReadPins"
[20:46:55.539]        // =>  FALSE
[20:46:55.539]      // skip if-block "!canReadPins"
[20:46:55.539]    </control>
[20:46:55.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:46:55.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:55.539]        // =>  TRUE
[20:46:55.539]      <block atomic="false" info="">
[20:46:55.539]        WriteAP(0x00, 0x190008);
[20:46:55.543]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:55.543]        WriteAP(0xF0, 0x01);
[20:46:55.543]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:55.543]      </block>
[20:46:55.543]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:55.543]    </control>
[20:46:55.543]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:46:55.543]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:55.543]        // =>  FALSE
[20:46:55.548]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:55.548]    </control>
[20:46:55.548]    <block atomic="false" info="">
[20:46:55.548]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:55.548]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:46:55.548]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:46:55.548]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:55.548]      __ap = 0; //lets make sure we reset the access point selection
[20:46:55.548]        // -> [__ap <= 0x00000000]
[20:46:55.548]    </block>
[20:46:55.548]  </sequence>
[20:46:55.548]  
[20:46:55.578]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:46:55.578]  
[20:46:55.578]  <debugvars>
[20:46:55.578]    // Pre-defined
[20:46:55.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:55.578]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:55.578]    __dp=0x00000000
[20:46:55.578]    __ap=0x00000000
[20:46:55.578]    __traceout=0x00000000      (Trace Disabled)
[20:46:55.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:55.578]    __FlashAddr=0x00000000
[20:46:55.578]    __FlashLen=0x00000000
[20:46:55.578]    __FlashArg=0x00000000
[20:46:55.578]    __FlashOp=0x00000000
[20:46:55.578]    __Result=0x00000000
[20:46:55.578]  </debugvars>
[20:46:55.578]  
[20:46:55.578]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:46:55.578]    <block atomic="false" info="">
[20:46:55.578]      __var deviceID = 0;
[20:46:55.578]        // -> [deviceID <= 0x00000000]
[20:46:55.578]      __var version = 0;
[20:46:55.578]        // -> [version <= 0x00000000]
[20:46:55.578]      __var partNum = 0;
[20:46:55.578]        // -> [partNum <= 0x00000000]
[20:46:55.578]      __var manuf = 0;
[20:46:55.578]        // -> [manuf <= 0x00000000]
[20:46:55.578]      __var isMSPM0G1X0X_G3X0X = 0;
[20:46:55.578]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:46:55.578]      __var isProduction = 0;
[20:46:55.578]        // -> [isProduction <= 0x00000000]
[20:46:55.578]      __var continueId = 0;
[20:46:55.578]        // -> [continueId <= 0x00000000]
[20:46:55.578]      deviceID =   Read32(0x41C40004);
[20:46:55.588]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:46:55.588]        // -> [deviceID <= 0x2BB8802F]
[20:46:55.588]      version = deviceID >> 28;
[20:46:55.588]        // -> [version <= 0x00000002]
[20:46:55.588]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:46:55.588]        // -> [partNum <= 0x0000BB88]
[20:46:55.588]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:46:55.588]        // -> [manuf <= 0x00000017]
[20:46:55.588]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:46:55.588]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:46:55.588]      isProduction = (version > 0);
[20:46:55.588]        // -> [isProduction <= 0x00000001]
[20:46:55.588]    </block>
[20:46:55.588]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:46:55.588]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:46:55.588]        // =>  FALSE
[20:46:55.590]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:46:55.590]    </control>
[20:46:55.590]    <control if="continueId == 4" while="" timeout="0" info="">
[20:46:55.590]      // if-block "continueId == 4"
[20:46:55.590]        // =>  FALSE
[20:46:55.590]      // skip if-block "continueId == 4"
[20:46:55.590]    </control>
[20:46:55.590]    <control if="!isProduction" while="" timeout="0" info="">
[20:46:55.590]      // if-block "!isProduction"
[20:46:55.590]        // =>  FALSE
[20:46:55.590]      // skip if-block "!isProduction"
[20:46:55.590]    </control>
[20:46:55.590]  </sequence>
[20:46:55.590]  
[20:47:16.354]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:47:16.354]  
[20:47:16.354]  <debugvars>
[20:47:16.354]    // Pre-defined
[20:47:16.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:16.354]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:16.354]    __dp=0x00000000
[20:47:16.354]    __ap=0x00000000
[20:47:16.354]    __traceout=0x00000000      (Trace Disabled)
[20:47:16.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:16.354]    __FlashAddr=0x00000000
[20:47:16.354]    __FlashLen=0x00000000
[20:47:16.354]    __FlashArg=0x00000000
[20:47:16.354]    __FlashOp=0x00000000
[20:47:16.354]    __Result=0x00000000
[20:47:16.354]  </debugvars>
[20:47:16.354]  
[20:47:16.354]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:47:16.354]    <block atomic="false" info="">
[20:47:16.354]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:47:16.354]        // -> [isSWJ <= 0x00000001]
[20:47:16.354]      __var hasDormant = __protocol & 0x00020000;
[20:47:16.354]        // -> [hasDormant <= 0x00000000]
[20:47:16.354]      __var protType   = __protocol & 0x0000FFFF;
[20:47:16.354]        // -> [protType <= 0x00000002]
[20:47:16.354]    </block>
[20:47:16.354]    <control if="protType == 1" while="" timeout="0" info="">
[20:47:16.354]      // if-block "protType == 1"
[20:47:16.354]        // =>  FALSE
[20:47:16.354]      // skip if-block "protType == 1"
[20:47:16.354]    </control>
[20:47:16.354]    <control if="protType == 2" while="" timeout="0" info="">
[20:47:16.354]      // if-block "protType == 2"
[20:47:16.362]        // =>  TRUE
[20:47:16.362]      <control if="isSWJ" while="" timeout="0" info="">
[20:47:16.362]        // if-block "isSWJ"
[20:47:16.362]          // =>  TRUE
[20:47:16.362]        <control if="hasDormant" while="" timeout="0" info="">
[20:47:16.362]          // if-block "hasDormant"
[20:47:16.362]            // =>  FALSE
[20:47:16.362]          // skip if-block "hasDormant"
[20:47:16.362]        </control>
[20:47:16.362]        <control if="!hasDormant" while="" timeout="0" info="">
[20:47:16.362]          // if-block "!hasDormant"
[20:47:16.362]            // =>  TRUE
[20:47:16.362]          <block atomic="false" info="">
[20:47:16.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:47:16.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:16.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:47:16.364]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:47:16.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:47:16.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:16.372]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:47:16.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:47:16.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:47:16.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:16.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:47:16.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:47:16.373]          </block>
[20:47:16.373]          // end if-block "!hasDormant"
[20:47:16.373]        </control>
[20:47:16.373]        // end if-block "isSWJ"
[20:47:16.373]      </control>
[20:47:16.373]      <control if="!isSWJ" while="" timeout="0" info="">
[20:47:16.373]        // if-block "!isSWJ"
[20:47:16.373]          // =>  FALSE
[20:47:16.373]        // skip if-block "!isSWJ"
[20:47:16.373]      </control>
[20:47:16.373]      <block atomic="false" info="">
[20:47:16.373]        ReadDP(0x0);
[20:47:16.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:47:16.373]      </block>
[20:47:16.373]      // end if-block "protType == 2"
[20:47:16.373]    </control>
[20:47:16.373]  </sequence>
[20:47:16.373]  
[20:47:16.382]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:47:16.382]  
[20:47:16.382]  <debugvars>
[20:47:16.382]    // Pre-defined
[20:47:16.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:16.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:16.382]    __dp=0x00000000
[20:47:16.382]    __ap=0x00000000
[20:47:16.382]    __traceout=0x00000000      (Trace Disabled)
[20:47:16.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:16.382]    __FlashAddr=0x00000000
[20:47:16.382]    __FlashLen=0x00000000
[20:47:16.382]    __FlashArg=0x00000000
[20:47:16.382]    __FlashOp=0x00000000
[20:47:16.382]    __Result=0x00000000
[20:47:16.382]  </debugvars>
[20:47:16.382]  
[20:47:16.382]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:47:16.382]    <block atomic="false" info="">
[20:47:16.382]      __var SW_DP_ABORT       = 0x0;
[20:47:16.382]        // -> [SW_DP_ABORT <= 0x00000000]
[20:47:16.382]      __var DP_CTRL_STAT      = 0x4;
[20:47:16.382]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:47:16.382]      __var DP_SELECT         = 0x8;
[20:47:16.382]        // -> [DP_SELECT <= 0x00000008]
[20:47:16.382]      __var powered_down      = 0;
[20:47:16.382]        // -> [powered_down <= 0x00000000]
[20:47:16.382]      WriteDP(DP_SELECT, 0x00000000);
[20:47:16.382]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:47:16.382]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:47:16.382]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:47:16.382]        // -> [powered_down <= 0x00000001]
[20:47:16.382]    </block>
[20:47:16.382]    <control if="powered_down" while="" timeout="0" info="">
[20:47:16.382]      // if-block "powered_down"
[20:47:16.382]        // =>  TRUE
[20:47:16.382]      <block atomic="false" info="">
[20:47:16.382]        Message(0, "Debug/System power-up request sent");
[20:47:16.382]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:47:16.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:47:16.392]      </block>
[20:47:16.393]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:47:16.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:47:16.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:47:16.393]        // while-condition  =>  FALSE
[20:47:16.393]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:47:16.393]      </control>
[20:47:16.393]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:47:16.393]        // if-block "(__protocol & 0xFFFF) == 1"
[20:47:16.393]          // =>  FALSE
[20:47:16.393]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:47:16.393]      </control>
[20:47:16.393]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:47:16.393]        // if-block "(__protocol & 0xFFFF) == 2"
[20:47:16.393]          // =>  TRUE
[20:47:16.393]        <block atomic="false" info="">
[20:47:16.393]          Message(0, "executing SWD power up");
[20:47:16.393]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:47:16.393]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:47:16.393]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:47:16.402]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:47:16.402]        </block>
[20:47:16.402]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:47:16.402]      </control>
[20:47:16.402]      // end if-block "powered_down"
[20:47:16.402]    </control>
[20:47:16.402]    <block atomic="false" info="">
[20:47:16.402]      __var DEBUG_PORT_VAL    = 0;
[20:47:16.402]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:47:16.402]      __var ACCESS_POINT_VAL  = 0;
[20:47:16.402]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:47:16.402]      __ap = 1; 
[20:47:16.402]        // -> [__ap <= 0x00000001]
[20:47:16.402]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:47:16.402]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:47:16.402]      __ap = 4;
[20:47:16.402]        // -> [__ap <= 0x00000004]
[20:47:16.402]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:47:16.412]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:47:16.412]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:47:16.412]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:47:16.412]    </block>
[20:47:16.412]    <block atomic="false" info="">
[20:47:16.412]      __var nReset = 0x80;
[20:47:16.412]        // -> [nReset <= 0x00000080]
[20:47:16.412]      __var canReadPins = 0;
[20:47:16.412]        // -> [canReadPins <= 0x00000000]
[20:47:16.412]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:47:16.412]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:47:16.412]        // -> [canReadPins <= 0x00000001]
[20:47:16.412]    </block>
[20:47:16.412]    <control if="" while="1" timeout="200" info="">
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.412]      // while "1"  (timeout="200")
[20:47:16.412]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.419]      // while "1"  (timeout="200")
[20:47:16.419]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.422]      // while-condition  =>  TRUE
[20:47:16.422]      // while "1"  (timeout="200")
[20:47:16.432]      // while-condition  =>  TRUE
[20:47:16.432]      // while "1"  (timeout="200")
[20:47:16.432]      // while  =>  TIMEOUT
[20:47:16.432]      // end while "1"
[20:47:16.432]    </control>
[20:47:16.432]    <control if="canReadPins" while="" timeout="0" info="">
[20:47:16.432]      // if-block "canReadPins"
[20:47:16.432]        // =>  TRUE
[20:47:16.432]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:47:16.432]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:47:16.432]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:47:16.432]        // while-condition  =>  FALSE
[20:47:16.432]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:47:16.432]      </control>
[20:47:16.432]      // end if-block "canReadPins"
[20:47:16.432]    </control>
[20:47:16.432]    <control if="!canReadPins" while="" timeout="0" info="">
[20:47:16.432]      // if-block "!canReadPins"
[20:47:16.432]        // =>  FALSE
[20:47:16.432]      // skip if-block "!canReadPins"
[20:47:16.432]    </control>
[20:47:16.432]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:47:16.432]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:47:16.432]        // =>  TRUE
[20:47:16.432]      <block atomic="false" info="">
[20:47:16.432]        WriteAP(0x00, 0x190008);
[20:47:16.442]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:47:16.442]        WriteAP(0xF0, 0x01);
[20:47:16.442]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:47:16.442]      </block>
[20:47:16.442]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:47:16.442]    </control>
[20:47:16.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:47:16.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:47:16.442]        // =>  FALSE
[20:47:16.442]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:47:16.442]    </control>
[20:47:16.442]    <block atomic="false" info="">
[20:47:16.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:47:16.442]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:47:16.442]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:47:16.442]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:47:16.442]      __ap = 0; //lets make sure we reset the access point selection
[20:47:16.442]        // -> [__ap <= 0x00000000]
[20:47:16.452]    </block>
[20:47:16.452]  </sequence>
[20:47:16.452]  
[20:47:16.472]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:47:16.472]  
[20:47:16.472]  <debugvars>
[20:47:16.472]    // Pre-defined
[20:47:16.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:16.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:16.472]    __dp=0x00000000
[20:47:16.472]    __ap=0x00000000
[20:47:16.472]    __traceout=0x00000000      (Trace Disabled)
[20:47:16.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:16.472]    __FlashAddr=0x00000000
[20:47:16.472]    __FlashLen=0x00000000
[20:47:16.472]    __FlashArg=0x00000000
[20:47:16.472]    __FlashOp=0x00000000
[20:47:16.472]    __Result=0x00000000
[20:47:16.472]  </debugvars>
[20:47:16.472]  
[20:47:16.472]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:47:16.472]    <block atomic="false" info="">
[20:47:16.472]      __var deviceID = 0;
[20:47:16.472]        // -> [deviceID <= 0x00000000]
[20:47:16.472]      __var version = 0;
[20:47:16.472]        // -> [version <= 0x00000000]
[20:47:16.472]      __var partNum = 0;
[20:47:16.472]        // -> [partNum <= 0x00000000]
[20:47:16.472]      __var manuf = 0;
[20:47:16.472]        // -> [manuf <= 0x00000000]
[20:47:16.472]      __var isMSPM0G1X0X_G3X0X = 0;
[20:47:16.472]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:47:16.472]      __var isProduction = 0;
[20:47:16.472]        // -> [isProduction <= 0x00000000]
[20:47:16.472]      __var continueId = 0;
[20:47:16.472]        // -> [continueId <= 0x00000000]
[20:47:16.472]      deviceID =   Read32(0x41C40004);
[20:47:16.484]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:47:16.484]        // -> [deviceID <= 0x2BB8802F]
[20:47:16.484]      version = deviceID >> 28;
[20:47:16.484]        // -> [version <= 0x00000002]
[20:47:16.484]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:47:16.484]        // -> [partNum <= 0x0000BB88]
[20:47:16.484]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:47:16.484]        // -> [manuf <= 0x00000017]
[20:47:16.484]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:47:16.484]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:47:16.484]      isProduction = (version > 0);
[20:47:16.484]        // -> [isProduction <= 0x00000001]
[20:47:16.484]    </block>
[20:47:16.484]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:47:16.484]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:47:16.484]        // =>  FALSE
[20:47:16.484]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:47:16.484]    </control>
[20:47:16.484]    <control if="continueId == 4" while="" timeout="0" info="">
[20:47:16.484]      // if-block "continueId == 4"
[20:47:16.484]        // =>  FALSE
[20:47:16.484]      // skip if-block "continueId == 4"
[20:47:16.484]    </control>
[20:47:16.484]    <control if="!isProduction" while="" timeout="0" info="">
[20:47:16.484]      // if-block "!isProduction"
[20:47:16.484]        // =>  FALSE
[20:47:16.484]      // skip if-block "!isProduction"
[20:47:16.484]    </control>
[20:47:16.484]  </sequence>
[20:47:16.484]  
[20:47:34.895]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:47:34.895]  
[20:47:34.903]  <debugvars>
[20:47:34.903]    // Pre-defined
[20:47:34.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:34.903]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:34.903]    __dp=0x00000000
[20:47:34.903]    __ap=0x00000000
[20:47:34.903]    __traceout=0x00000000      (Trace Disabled)
[20:47:34.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:34.903]    __FlashAddr=0x00000000
[20:47:34.903]    __FlashLen=0x00000000
[20:47:34.903]    __FlashArg=0x00000000
[20:47:34.903]    __FlashOp=0x00000000
[20:47:34.903]    __Result=0x00000000
[20:47:34.903]  </debugvars>
[20:47:34.903]  
[20:47:34.903]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:47:34.903]    <block atomic="false" info="">
[20:47:34.903]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:47:34.903]        // -> [isSWJ <= 0x00000001]
[20:47:34.903]      __var hasDormant = __protocol & 0x00020000;
[20:47:34.903]        // -> [hasDormant <= 0x00000000]
[20:47:34.903]      __var protType   = __protocol & 0x0000FFFF;
[20:47:34.903]        // -> [protType <= 0x00000002]
[20:47:34.903]    </block>
[20:47:34.903]    <control if="protType == 1" while="" timeout="0" info="">
[20:47:34.903]      // if-block "protType == 1"
[20:47:34.906]        // =>  FALSE
[20:47:34.906]      // skip if-block "protType == 1"
[20:47:34.906]    </control>
[20:47:34.906]    <control if="protType == 2" while="" timeout="0" info="">
[20:47:34.906]      // if-block "protType == 2"
[20:47:34.906]        // =>  TRUE
[20:47:34.906]      <control if="isSWJ" while="" timeout="0" info="">
[20:47:34.906]        // if-block "isSWJ"
[20:47:34.906]          // =>  TRUE
[20:47:34.906]        <control if="hasDormant" while="" timeout="0" info="">
[20:47:34.906]          // if-block "hasDormant"
[20:47:34.906]            // =>  FALSE
[20:47:34.906]          // skip if-block "hasDormant"
[20:47:34.906]        </control>
[20:47:34.906]        <control if="!hasDormant" while="" timeout="0" info="">
[20:47:34.906]          // if-block "!hasDormant"
[20:47:34.906]            // =>  TRUE
[20:47:34.906]          <block atomic="false" info="">
[20:47:34.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:47:34.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:34.906]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:47:34.906]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:47:34.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:47:34.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:34.906]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:47:34.906]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:47:34.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:47:34.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:47:34.906]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:47:34.917]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:47:34.917]          </block>
[20:47:34.917]          // end if-block "!hasDormant"
[20:47:34.917]        </control>
[20:47:34.917]        // end if-block "isSWJ"
[20:47:34.917]      </control>
[20:47:34.917]      <control if="!isSWJ" while="" timeout="0" info="">
[20:47:34.917]        // if-block "!isSWJ"
[20:47:34.917]          // =>  FALSE
[20:47:34.917]        // skip if-block "!isSWJ"
[20:47:34.917]      </control>
[20:47:34.917]      <block atomic="false" info="">
[20:47:34.917]        ReadDP(0x0);
[20:47:34.917]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:47:34.917]      </block>
[20:47:34.917]      // end if-block "protType == 2"
[20:47:34.917]    </control>
[20:47:34.917]  </sequence>
[20:47:34.917]  
[20:47:34.917]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:47:34.917]  
[20:47:34.917]  <debugvars>
[20:47:34.917]    // Pre-defined
[20:47:34.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:34.917]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:34.917]    __dp=0x00000000
[20:47:34.917]    __ap=0x00000000
[20:47:34.917]    __traceout=0x00000000      (Trace Disabled)
[20:47:34.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:34.917]    __FlashAddr=0x00000000
[20:47:34.917]    __FlashLen=0x00000000
[20:47:34.917]    __FlashArg=0x00000000
[20:47:34.917]    __FlashOp=0x00000000
[20:47:34.917]    __Result=0x00000000
[20:47:34.917]  </debugvars>
[20:47:34.917]  
[20:47:34.917]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:47:34.917]    <block atomic="false" info="">
[20:47:34.917]      __var SW_DP_ABORT       = 0x0;
[20:47:34.917]        // -> [SW_DP_ABORT <= 0x00000000]
[20:47:34.917]      __var DP_CTRL_STAT      = 0x4;
[20:47:34.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:47:34.917]      __var DP_SELECT         = 0x8;
[20:47:34.917]        // -> [DP_SELECT <= 0x00000008]
[20:47:34.917]      __var powered_down      = 0;
[20:47:34.917]        // -> [powered_down <= 0x00000000]
[20:47:34.917]      WriteDP(DP_SELECT, 0x00000000);
[20:47:34.925]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:47:34.925]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:47:34.925]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:47:34.925]        // -> [powered_down <= 0x00000001]
[20:47:34.925]    </block>
[20:47:34.925]    <control if="powered_down" while="" timeout="0" info="">
[20:47:34.925]      // if-block "powered_down"
[20:47:34.925]        // =>  TRUE
[20:47:34.925]      <block atomic="false" info="">
[20:47:34.925]        Message(0, "Debug/System power-up request sent");
[20:47:34.925]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:47:34.925]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:47:34.925]      </block>
[20:47:34.925]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:47:34.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:47:34.925]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:47:34.925]        // while-condition  =>  FALSE
[20:47:34.925]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:47:34.925]      </control>
[20:47:34.925]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:47:34.925]        // if-block "(__protocol & 0xFFFF) == 1"
[20:47:34.925]          // =>  FALSE
[20:47:34.925]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:47:34.925]      </control>
[20:47:34.925]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:47:34.925]        // if-block "(__protocol & 0xFFFF) == 2"
[20:47:34.925]          // =>  TRUE
[20:47:34.936]        <block atomic="false" info="">
[20:47:34.936]          Message(0, "executing SWD power up");
[20:47:34.936]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:47:34.936]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:47:34.936]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:47:34.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:47:34.936]        </block>
[20:47:34.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:47:34.936]      </control>
[20:47:34.936]      // end if-block "powered_down"
[20:47:34.936]    </control>
[20:47:34.936]    <block atomic="false" info="">
[20:47:34.936]      __var DEBUG_PORT_VAL    = 0;
[20:47:34.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:47:34.936]      __var ACCESS_POINT_VAL  = 0;
[20:47:34.936]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:47:34.936]      __ap = 1; 
[20:47:34.936]        // -> [__ap <= 0x00000001]
[20:47:34.936]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:47:34.946]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:47:34.946]      __ap = 4;
[20:47:34.946]        // -> [__ap <= 0x00000004]
[20:47:34.946]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:47:34.946]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:47:34.946]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:47:34.946]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:47:34.946]    </block>
[20:47:34.946]    <block atomic="false" info="">
[20:47:34.946]      __var nReset = 0x80;
[20:47:34.946]        // -> [nReset <= 0x00000080]
[20:47:34.946]      __var canReadPins = 0;
[20:47:34.946]        // -> [canReadPins <= 0x00000000]
[20:47:34.946]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:47:34.946]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:47:34.946]        // -> [canReadPins <= 0x00000001]
[20:47:34.946]    </block>
[20:47:34.946]    <control if="" while="1" timeout="200" info="">
[20:47:34.946]      // while "1"  (timeout="200")
[20:47:34.946]      // while-condition  =>  TRUE
[20:47:34.946]      // while "1"  (timeout="200")
[20:47:34.946]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.955]      // while-condition  =>  TRUE
[20:47:34.955]      // while "1"  (timeout="200")
[20:47:34.957]      // while-condition  =>  TRUE
[20:47:34.957]      // while "1"  (timeout="200")
[20:47:34.957]      // while  =>  TIMEOUT
[20:47:34.957]      // end while "1"
[20:47:34.957]    </control>
[20:47:34.957]    <control if="canReadPins" while="" timeout="0" info="">
[20:47:34.957]      // if-block "canReadPins"
[20:47:34.957]        // =>  TRUE
[20:47:34.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:47:34.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:47:34.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:47:34.958]        // while-condition  =>  FALSE
[20:47:34.958]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:47:34.958]      </control>
[20:47:34.958]      // end if-block "canReadPins"
[20:47:34.958]    </control>
[20:47:34.958]    <control if="!canReadPins" while="" timeout="0" info="">
[20:47:34.958]      // if-block "!canReadPins"
[20:47:34.958]        // =>  FALSE
[20:47:34.958]      // skip if-block "!canReadPins"
[20:47:34.958]    </control>
[20:47:34.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:47:34.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:47:34.958]        // =>  TRUE
[20:47:34.958]      <block atomic="false" info="">
[20:47:34.958]        WriteAP(0x00, 0x190008);
[20:47:34.958]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:47:34.958]        WriteAP(0xF0, 0x01);
[20:47:34.966]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:47:34.966]      </block>
[20:47:34.966]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:47:34.966]    </control>
[20:47:34.966]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:47:34.966]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:47:34.966]        // =>  FALSE
[20:47:34.966]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:47:34.966]    </control>
[20:47:34.966]    <block atomic="false" info="">
[20:47:34.966]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:47:34.966]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:47:34.966]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:47:34.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:47:34.975]      __ap = 0; //lets make sure we reset the access point selection
[20:47:34.975]        // -> [__ap <= 0x00000000]
[20:47:34.975]    </block>
[20:47:34.975]  </sequence>
[20:47:34.975]  
[20:47:34.997]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:47:34.997]  
[20:47:34.997]  <debugvars>
[20:47:34.997]    // Pre-defined
[20:47:34.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:47:34.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:47:34.997]    __dp=0x00000000
[20:47:34.997]    __ap=0x00000000
[20:47:34.997]    __traceout=0x00000000      (Trace Disabled)
[20:47:34.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:47:34.997]    __FlashAddr=0x00000000
[20:47:34.997]    __FlashLen=0x00000000
[20:47:34.997]    __FlashArg=0x00000000
[20:47:34.997]    __FlashOp=0x00000000
[20:47:34.997]    __Result=0x00000000
[20:47:34.997]  </debugvars>
[20:47:34.997]  
[20:47:34.997]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:47:34.997]    <block atomic="false" info="">
[20:47:34.997]      __var deviceID = 0;
[20:47:34.997]        // -> [deviceID <= 0x00000000]
[20:47:34.997]      __var version = 0;
[20:47:34.997]        // -> [version <= 0x00000000]
[20:47:34.997]      __var partNum = 0;
[20:47:34.997]        // -> [partNum <= 0x00000000]
[20:47:34.997]      __var manuf = 0;
[20:47:34.997]        // -> [manuf <= 0x00000000]
[20:47:34.997]      __var isMSPM0G1X0X_G3X0X = 0;
[20:47:34.997]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:47:35.006]      __var isProduction = 0;
[20:47:35.006]        // -> [isProduction <= 0x00000000]
[20:47:35.006]      __var continueId = 0;
[20:47:35.006]        // -> [continueId <= 0x00000000]
[20:47:35.006]      deviceID =   Read32(0x41C40004);
[20:47:35.016]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:47:35.016]        // -> [deviceID <= 0x2BB8802F]
[20:47:35.016]      version = deviceID >> 28;
[20:47:35.016]        // -> [version <= 0x00000002]
[20:47:35.016]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:47:35.016]        // -> [partNum <= 0x0000BB88]
[20:47:35.016]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:47:35.016]        // -> [manuf <= 0x00000017]
[20:47:35.016]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:47:35.016]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:47:35.016]      isProduction = (version > 0);
[20:47:35.016]        // -> [isProduction <= 0x00000001]
[20:47:35.016]    </block>
[20:47:35.016]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:47:35.016]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:47:35.016]        // =>  FALSE
[20:47:35.016]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:47:35.016]    </control>
[20:47:35.016]    <control if="continueId == 4" while="" timeout="0" info="">
[20:47:35.016]      // if-block "continueId == 4"
[20:47:35.016]        // =>  FALSE
[20:47:35.016]      // skip if-block "continueId == 4"
[20:47:35.016]    </control>
[20:47:35.016]    <control if="!isProduction" while="" timeout="0" info="">
[20:47:35.016]      // if-block "!isProduction"
[20:47:35.016]        // =>  FALSE
[20:47:35.016]      // skip if-block "!isProduction"
[20:47:35.016]    </control>
[20:47:35.016]  </sequence>
[20:47:35.016]  
[20:48:05.076]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:48:05.076]  
[20:48:05.086]  <debugvars>
[20:48:05.086]    // Pre-defined
[20:48:05.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:05.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:05.086]    __dp=0x00000000
[20:48:05.086]    __ap=0x00000000
[20:48:05.086]    __traceout=0x00000000      (Trace Disabled)
[20:48:05.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:05.086]    __FlashAddr=0x00000000
[20:48:05.086]    __FlashLen=0x00000000
[20:48:05.086]    __FlashArg=0x00000000
[20:48:05.087]    __FlashOp=0x00000000
[20:48:05.087]    __Result=0x00000000
[20:48:05.087]  </debugvars>
[20:48:05.087]  
[20:48:05.087]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:48:05.087]    <block atomic="false" info="">
[20:48:05.087]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:48:05.087]        // -> [isSWJ <= 0x00000001]
[20:48:05.087]      __var hasDormant = __protocol & 0x00020000;
[20:48:05.087]        // -> [hasDormant <= 0x00000000]
[20:48:05.087]      __var protType   = __protocol & 0x0000FFFF;
[20:48:05.087]        // -> [protType <= 0x00000002]
[20:48:05.087]    </block>
[20:48:05.087]    <control if="protType == 1" while="" timeout="0" info="">
[20:48:05.087]      // if-block "protType == 1"
[20:48:05.087]        // =>  FALSE
[20:48:05.087]      // skip if-block "protType == 1"
[20:48:05.087]    </control>
[20:48:05.087]    <control if="protType == 2" while="" timeout="0" info="">
[20:48:05.087]      // if-block "protType == 2"
[20:48:05.089]        // =>  TRUE
[20:48:05.089]      <control if="isSWJ" while="" timeout="0" info="">
[20:48:05.089]        // if-block "isSWJ"
[20:48:05.089]          // =>  TRUE
[20:48:05.089]        <control if="hasDormant" while="" timeout="0" info="">
[20:48:05.089]          // if-block "hasDormant"
[20:48:05.089]            // =>  FALSE
[20:48:05.089]          // skip if-block "hasDormant"
[20:48:05.089]        </control>
[20:48:05.089]        <control if="!hasDormant" while="" timeout="0" info="">
[20:48:05.090]          // if-block "!hasDormant"
[20:48:05.090]            // =>  TRUE
[20:48:05.090]          <block atomic="false" info="">
[20:48:05.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:48:05.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:05.090]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:48:05.094]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:48:05.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:48:05.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:05.096]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:48:05.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:48:05.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:48:05.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:05.101]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:48:05.101]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:48:05.101]          </block>
[20:48:05.101]          // end if-block "!hasDormant"
[20:48:05.101]        </control>
[20:48:05.101]        // end if-block "isSWJ"
[20:48:05.101]      </control>
[20:48:05.101]      <control if="!isSWJ" while="" timeout="0" info="">
[20:48:05.101]        // if-block "!isSWJ"
[20:48:05.101]          // =>  FALSE
[20:48:05.101]        // skip if-block "!isSWJ"
[20:48:05.105]      </control>
[20:48:05.105]      <block atomic="false" info="">
[20:48:05.105]        ReadDP(0x0);
[20:48:05.105]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:48:05.105]      </block>
[20:48:05.105]      // end if-block "protType == 2"
[20:48:05.105]    </control>
[20:48:05.105]  </sequence>
[20:48:05.105]  
[20:48:05.115]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:48:05.115]  
[20:48:05.115]  <debugvars>
[20:48:05.115]    // Pre-defined
[20:48:05.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:05.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:05.115]    __dp=0x00000000
[20:48:05.115]    __ap=0x00000000
[20:48:05.115]    __traceout=0x00000000      (Trace Disabled)
[20:48:05.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:05.115]    __FlashAddr=0x00000000
[20:48:05.115]    __FlashLen=0x00000000
[20:48:05.115]    __FlashArg=0x00000000
[20:48:05.115]    __FlashOp=0x00000000
[20:48:05.115]    __Result=0x00000000
[20:48:05.115]  </debugvars>
[20:48:05.115]  
[20:48:05.115]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:48:05.121]    <block atomic="false" info="">
[20:48:05.121]      __var SW_DP_ABORT       = 0x0;
[20:48:05.121]        // -> [SW_DP_ABORT <= 0x00000000]
[20:48:05.121]      __var DP_CTRL_STAT      = 0x4;
[20:48:05.121]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:48:05.121]      __var DP_SELECT         = 0x8;
[20:48:05.121]        // -> [DP_SELECT <= 0x00000008]
[20:48:05.121]      __var powered_down      = 0;
[20:48:05.121]        // -> [powered_down <= 0x00000000]
[20:48:05.121]      WriteDP(DP_SELECT, 0x00000000);
[20:48:05.123]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:48:05.123]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:48:05.126]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:48:05.126]        // -> [powered_down <= 0x00000001]
[20:48:05.126]    </block>
[20:48:05.126]    <control if="powered_down" while="" timeout="0" info="">
[20:48:05.126]      // if-block "powered_down"
[20:48:05.126]        // =>  TRUE
[20:48:05.126]      <block atomic="false" info="">
[20:48:05.126]        Message(0, "Debug/System power-up request sent");
[20:48:05.126]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:48:05.131]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:48:05.131]      </block>
[20:48:05.131]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:48:05.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:48:05.136]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:48:05.136]        // while-condition  =>  FALSE
[20:48:05.136]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:48:05.136]      </control>
[20:48:05.136]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:48:05.136]        // if-block "(__protocol & 0xFFFF) == 1"
[20:48:05.136]          // =>  FALSE
[20:48:05.136]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:48:05.136]      </control>
[20:48:05.136]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:48:05.136]        // if-block "(__protocol & 0xFFFF) == 2"
[20:48:05.136]          // =>  TRUE
[20:48:05.138]        <block atomic="false" info="">
[20:48:05.138]          Message(0, "executing SWD power up");
[20:48:05.138]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:48:05.141]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:48:05.141]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:48:05.146]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:48:05.146]        </block>
[20:48:05.146]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:48:05.146]      </control>
[20:48:05.146]      // end if-block "powered_down"
[20:48:05.146]    </control>
[20:48:05.146]    <block atomic="false" info="">
[20:48:05.146]      __var DEBUG_PORT_VAL    = 0;
[20:48:05.146]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:48:05.146]      __var ACCESS_POINT_VAL  = 0;
[20:48:05.146]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:48:05.146]      __ap = 1; 
[20:48:05.146]        // -> [__ap <= 0x00000001]
[20:48:05.148]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:48:05.151]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:48:05.151]      __ap = 4;
[20:48:05.151]        // -> [__ap <= 0x00000004]
[20:48:05.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:05.151]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:48:05.151]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:48:05.151]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:05.156]    </block>
[20:48:05.156]    <block atomic="false" info="">
[20:48:05.156]      __var nReset = 0x80;
[20:48:05.156]        // -> [nReset <= 0x00000080]
[20:48:05.156]      __var canReadPins = 0;
[20:48:05.156]        // -> [canReadPins <= 0x00000000]
[20:48:05.156]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:48:05.159]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:48:05.159]        // -> [canReadPins <= 0x00000001]
[20:48:05.159]    </block>
[20:48:05.159]    <control if="" while="1" timeout="200" info="">
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.161]      // while-condition  =>  TRUE
[20:48:05.161]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.163]      // while-condition  =>  TRUE
[20:48:05.163]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.164]      // while "1"  (timeout="200")
[20:48:05.164]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.166]      // while-condition  =>  TRUE
[20:48:05.166]      // while "1"  (timeout="200")
[20:48:05.168]      // while-condition  =>  TRUE
[20:48:05.168]      // while "1"  (timeout="200")
[20:48:05.168]      // while-condition  =>  TRUE
[20:48:05.168]      // while "1"  (timeout="200")
[20:48:05.168]      // while-condition  =>  TRUE
[20:48:05.168]      // while "1"  (timeout="200")
[20:48:05.168]      // while-condition  =>  TRUE
[20:48:05.168]      // while "1"  (timeout="200")
[20:48:05.168]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.169]      // while-condition  =>  TRUE
[20:48:05.169]      // while "1"  (timeout="200")
[20:48:05.171]      // while-condition  =>  TRUE
[20:48:05.171]      // while "1"  (timeout="200")
[20:48:05.171]      // while-condition  =>  TRUE
[20:48:05.171]      // while "1"  (timeout="200")
[20:48:05.171]      // while-condition  =>  TRUE
[20:48:05.171]      // while "1"  (timeout="200")
[20:48:05.171]      // while-condition  =>  TRUE
[20:48:05.171]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.172]      // while "1"  (timeout="200")
[20:48:05.172]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.174]      // while-condition  =>  TRUE
[20:48:05.174]      // while "1"  (timeout="200")
[20:48:05.176]      // while-condition  =>  TRUE
[20:48:05.176]      // while "1"  (timeout="200")
[20:48:05.176]      // while  =>  TIMEOUT
[20:48:05.176]      // end while "1"
[20:48:05.176]    </control>
[20:48:05.176]    <control if="canReadPins" while="" timeout="0" info="">
[20:48:05.176]      // if-block "canReadPins"
[20:48:05.176]        // =>  TRUE
[20:48:05.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:48:05.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:48:05.176]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:48:05.176]        // while-condition  =>  FALSE
[20:48:05.176]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:48:05.176]      </control>
[20:48:05.176]      // end if-block "canReadPins"
[20:48:05.176]    </control>
[20:48:05.176]    <control if="!canReadPins" while="" timeout="0" info="">
[20:48:05.176]      // if-block "!canReadPins"
[20:48:05.176]        // =>  FALSE
[20:48:05.176]      // skip if-block "!canReadPins"
[20:48:05.176]    </control>
[20:48:05.176]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:48:05.176]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:05.176]        // =>  TRUE
[20:48:05.181]      <block atomic="false" info="">
[20:48:05.181]        WriteAP(0x00, 0x190008);
[20:48:05.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:05.181]        WriteAP(0xF0, 0x01);
[20:48:05.186]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:05.186]      </block>
[20:48:05.186]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:05.186]    </control>
[20:48:05.186]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:48:05.186]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:05.186]        // =>  FALSE
[20:48:05.186]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:05.186]    </control>
[20:48:05.186]    <block atomic="false" info="">
[20:48:05.189]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:05.192]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:48:05.192]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:48:05.192]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:05.193]      __ap = 0; //lets make sure we reset the access point selection
[20:48:05.193]        // -> [__ap <= 0x00000000]
[20:48:05.193]    </block>
[20:48:05.193]  </sequence>
[20:48:05.193]  
[20:48:05.221]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:48:05.221]  
[20:48:05.221]  <debugvars>
[20:48:05.221]    // Pre-defined
[20:48:05.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:05.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:05.221]    __dp=0x00000000
[20:48:05.221]    __ap=0x00000000
[20:48:05.221]    __traceout=0x00000000      (Trace Disabled)
[20:48:05.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:05.221]    __FlashAddr=0x00000000
[20:48:05.221]    __FlashLen=0x00000000
[20:48:05.221]    __FlashArg=0x00000000
[20:48:05.221]    __FlashOp=0x00000000
[20:48:05.221]    __Result=0x00000000
[20:48:05.221]  </debugvars>
[20:48:05.221]  
[20:48:05.221]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:48:05.221]    <block atomic="false" info="">
[20:48:05.221]      __var deviceID = 0;
[20:48:05.221]        // -> [deviceID <= 0x00000000]
[20:48:05.221]      __var version = 0;
[20:48:05.221]        // -> [version <= 0x00000000]
[20:48:05.221]      __var partNum = 0;
[20:48:05.221]        // -> [partNum <= 0x00000000]
[20:48:05.227]      __var manuf = 0;
[20:48:05.227]        // -> [manuf <= 0x00000000]
[20:48:05.227]      __var isMSPM0G1X0X_G3X0X = 0;
[20:48:05.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:48:05.227]      __var isProduction = 0;
[20:48:05.227]        // -> [isProduction <= 0x00000000]
[20:48:05.227]      __var continueId = 0;
[20:48:05.227]        // -> [continueId <= 0x00000000]
[20:48:05.227]      deviceID =   Read32(0x41C40004);
[20:48:05.231]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:48:05.231]        // -> [deviceID <= 0x2BB8802F]
[20:48:05.231]      version = deviceID >> 28;
[20:48:05.231]        // -> [version <= 0x00000002]
[20:48:05.231]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:48:05.231]        // -> [partNum <= 0x0000BB88]
[20:48:05.231]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:48:05.231]        // -> [manuf <= 0x00000017]
[20:48:05.231]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:48:05.231]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:48:05.231]      isProduction = (version > 0);
[20:48:05.231]        // -> [isProduction <= 0x00000001]
[20:48:05.231]    </block>
[20:48:05.231]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:48:05.231]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:48:05.231]        // =>  FALSE
[20:48:05.231]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:48:05.231]    </control>
[20:48:05.231]    <control if="continueId == 4" while="" timeout="0" info="">
[20:48:05.231]      // if-block "continueId == 4"
[20:48:05.231]        // =>  FALSE
[20:48:05.231]      // skip if-block "continueId == 4"
[20:48:05.231]    </control>
[20:48:05.238]    <control if="!isProduction" while="" timeout="0" info="">
[20:48:05.238]      // if-block "!isProduction"
[20:48:05.238]        // =>  FALSE
[20:48:05.238]      // skip if-block "!isProduction"
[20:48:05.238]    </control>
[20:48:05.238]  </sequence>
[20:48:05.238]  
[20:48:24.192]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:48:24.192]  
[20:48:24.201]  <debugvars>
[20:48:24.201]    // Pre-defined
[20:48:24.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:24.201]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:24.201]    __dp=0x00000000
[20:48:24.201]    __ap=0x00000000
[20:48:24.201]    __traceout=0x00000000      (Trace Disabled)
[20:48:24.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:24.201]    __FlashAddr=0x00000000
[20:48:24.201]    __FlashLen=0x00000000
[20:48:24.201]    __FlashArg=0x00000000
[20:48:24.201]    __FlashOp=0x00000000
[20:48:24.201]    __Result=0x00000000
[20:48:24.201]  </debugvars>
[20:48:24.201]  
[20:48:24.201]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:48:24.201]    <block atomic="false" info="">
[20:48:24.201]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:48:24.201]        // -> [isSWJ <= 0x00000001]
[20:48:24.201]      __var hasDormant = __protocol & 0x00020000;
[20:48:24.201]        // -> [hasDormant <= 0x00000000]
[20:48:24.201]      __var protType   = __protocol & 0x0000FFFF;
[20:48:24.201]        // -> [protType <= 0x00000002]
[20:48:24.201]    </block>
[20:48:24.201]    <control if="protType == 1" while="" timeout="0" info="">
[20:48:24.201]      // if-block "protType == 1"
[20:48:24.201]        // =>  FALSE
[20:48:24.201]      // skip if-block "protType == 1"
[20:48:24.201]    </control>
[20:48:24.201]    <control if="protType == 2" while="" timeout="0" info="">
[20:48:24.205]      // if-block "protType == 2"
[20:48:24.205]        // =>  TRUE
[20:48:24.205]      <control if="isSWJ" while="" timeout="0" info="">
[20:48:24.205]        // if-block "isSWJ"
[20:48:24.205]          // =>  TRUE
[20:48:24.205]        <control if="hasDormant" while="" timeout="0" info="">
[20:48:24.205]          // if-block "hasDormant"
[20:48:24.205]            // =>  FALSE
[20:48:24.205]          // skip if-block "hasDormant"
[20:48:24.205]        </control>
[20:48:24.205]        <control if="!hasDormant" while="" timeout="0" info="">
[20:48:24.205]          // if-block "!hasDormant"
[20:48:24.205]            // =>  TRUE
[20:48:24.205]          <block atomic="false" info="">
[20:48:24.205]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:48:24.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:24.210]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:48:24.215]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:48:24.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:48:24.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:24.215]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:48:24.215]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:48:24.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:48:24.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:24.220]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:48:24.220]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:48:24.220]          </block>
[20:48:24.220]          // end if-block "!hasDormant"
[20:48:24.220]        </control>
[20:48:24.220]        // end if-block "isSWJ"
[20:48:24.220]      </control>
[20:48:24.220]      <control if="!isSWJ" while="" timeout="0" info="">
[20:48:24.220]        // if-block "!isSWJ"
[20:48:24.220]          // =>  FALSE
[20:48:24.220]        // skip if-block "!isSWJ"
[20:48:24.220]      </control>
[20:48:24.220]      <block atomic="false" info="">
[20:48:24.220]        ReadDP(0x0);
[20:48:24.230]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:48:24.230]      </block>
[20:48:24.230]      // end if-block "protType == 2"
[20:48:24.230]    </control>
[20:48:24.230]  </sequence>
[20:48:24.230]  
[20:48:24.230]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:48:24.230]  
[20:48:24.230]  <debugvars>
[20:48:24.230]    // Pre-defined
[20:48:24.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:24.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:24.230]    __dp=0x00000000
[20:48:24.230]    __ap=0x00000000
[20:48:24.230]    __traceout=0x00000000      (Trace Disabled)
[20:48:24.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:24.230]    __FlashAddr=0x00000000
[20:48:24.230]    __FlashLen=0x00000000
[20:48:24.230]    __FlashArg=0x00000000
[20:48:24.230]    __FlashOp=0x00000000
[20:48:24.230]    __Result=0x00000000
[20:48:24.230]  </debugvars>
[20:48:24.230]  
[20:48:24.230]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:48:24.230]    <block atomic="false" info="">
[20:48:24.230]      __var SW_DP_ABORT       = 0x0;
[20:48:24.230]        // -> [SW_DP_ABORT <= 0x00000000]
[20:48:24.236]      __var DP_CTRL_STAT      = 0x4;
[20:48:24.236]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:48:24.236]      __var DP_SELECT         = 0x8;
[20:48:24.236]        // -> [DP_SELECT <= 0x00000008]
[20:48:24.236]      __var powered_down      = 0;
[20:48:24.236]        // -> [powered_down <= 0x00000000]
[20:48:24.236]      WriteDP(DP_SELECT, 0x00000000);
[20:48:24.240]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:48:24.240]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:48:24.240]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:48:24.240]        // -> [powered_down <= 0x00000001]
[20:48:24.240]    </block>
[20:48:24.240]    <control if="powered_down" while="" timeout="0" info="">
[20:48:24.240]      // if-block "powered_down"
[20:48:24.240]        // =>  TRUE
[20:48:24.240]      <block atomic="false" info="">
[20:48:24.240]        Message(0, "Debug/System power-up request sent");
[20:48:24.240]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:48:24.246]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:48:24.246]      </block>
[20:48:24.246]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:48:24.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:48:24.250]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:48:24.250]        // while-condition  =>  FALSE
[20:48:24.250]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:48:24.250]      </control>
[20:48:24.250]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:48:24.250]        // if-block "(__protocol & 0xFFFF) == 1"
[20:48:24.250]          // =>  FALSE
[20:48:24.250]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:48:24.250]      </control>
[20:48:24.250]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:48:24.250]        // if-block "(__protocol & 0xFFFF) == 2"
[20:48:24.250]          // =>  TRUE
[20:48:24.250]        <block atomic="false" info="">
[20:48:24.250]          Message(0, "executing SWD power up");
[20:48:24.250]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:48:24.256]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:48:24.256]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:48:24.256]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:48:24.256]        </block>
[20:48:24.256]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:48:24.256]      </control>
[20:48:24.256]      // end if-block "powered_down"
[20:48:24.256]    </control>
[20:48:24.256]    <block atomic="false" info="">
[20:48:24.256]      __var DEBUG_PORT_VAL    = 0;
[20:48:24.256]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:48:24.256]      __var ACCESS_POINT_VAL  = 0;
[20:48:24.256]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:48:24.256]      __ap = 1; 
[20:48:24.256]        // -> [__ap <= 0x00000001]
[20:48:24.256]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:48:24.263]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:48:24.263]      __ap = 4;
[20:48:24.263]        // -> [__ap <= 0x00000004]
[20:48:24.263]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:24.276]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:48:24.276]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:48:24.276]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:24.276]    </block>
[20:48:24.279]    <block atomic="false" info="">
[20:48:24.279]      __var nReset = 0x80;
[20:48:24.279]        // -> [nReset <= 0x00000080]
[20:48:24.279]      __var canReadPins = 0;
[20:48:24.279]        // -> [canReadPins <= 0x00000000]
[20:48:24.279]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:48:24.280]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:48:24.280]        // -> [canReadPins <= 0x00000001]
[20:48:24.281]    </block>
[20:48:24.281]    <control if="" while="1" timeout="200" info="">
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.281]      // while-condition  =>  TRUE
[20:48:24.281]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.284]      // while "1"  (timeout="200")
[20:48:24.284]      // while-condition  =>  TRUE
[20:48:24.286]      // while "1"  (timeout="200")
[20:48:24.286]      // while  =>  TIMEOUT
[20:48:24.286]      // end while "1"
[20:48:24.287]    </control>
[20:48:24.287]    <control if="canReadPins" while="" timeout="0" info="">
[20:48:24.287]      // if-block "canReadPins"
[20:48:24.287]        // =>  TRUE
[20:48:24.287]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:48:24.287]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:48:24.287]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:48:24.287]        // while-condition  =>  FALSE
[20:48:24.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:48:24.287]      </control>
[20:48:24.287]      // end if-block "canReadPins"
[20:48:24.287]    </control>
[20:48:24.287]    <control if="!canReadPins" while="" timeout="0" info="">
[20:48:24.290]      // if-block "!canReadPins"
[20:48:24.290]        // =>  FALSE
[20:48:24.290]      // skip if-block "!canReadPins"
[20:48:24.290]    </control>
[20:48:24.290]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:48:24.290]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:24.290]        // =>  TRUE
[20:48:24.290]      <block atomic="false" info="">
[20:48:24.290]        WriteAP(0x00, 0x190008);
[20:48:24.293]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:24.293]        WriteAP(0xF0, 0x01);
[20:48:24.298]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:24.298]      </block>
[20:48:24.298]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:24.298]    </control>
[20:48:24.298]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:48:24.298]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:24.298]        // =>  FALSE
[20:48:24.298]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:24.300]    </control>
[20:48:24.300]    <block atomic="false" info="">
[20:48:24.300]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:24.303]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:48:24.303]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:48:24.303]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:24.304]      __ap = 0; //lets make sure we reset the access point selection
[20:48:24.304]        // -> [__ap <= 0x00000000]
[20:48:24.304]    </block>
[20:48:24.304]  </sequence>
[20:48:24.304]  
[20:48:24.330]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:48:24.330]  
[20:48:24.330]  <debugvars>
[20:48:24.330]    // Pre-defined
[20:48:24.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:24.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:24.330]    __dp=0x00000000
[20:48:24.330]    __ap=0x00000000
[20:48:24.330]    __traceout=0x00000000      (Trace Disabled)
[20:48:24.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:24.330]    __FlashAddr=0x00000000
[20:48:24.330]    __FlashLen=0x00000000
[20:48:24.330]    __FlashArg=0x00000000
[20:48:24.330]    __FlashOp=0x00000000
[20:48:24.330]    __Result=0x00000000
[20:48:24.330]  </debugvars>
[20:48:24.330]  
[20:48:24.330]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:48:24.330]    <block atomic="false" info="">
[20:48:24.330]      __var deviceID = 0;
[20:48:24.330]        // -> [deviceID <= 0x00000000]
[20:48:24.330]      __var version = 0;
[20:48:24.330]        // -> [version <= 0x00000000]
[20:48:24.330]      __var partNum = 0;
[20:48:24.330]        // -> [partNum <= 0x00000000]
[20:48:24.330]      __var manuf = 0;
[20:48:24.330]        // -> [manuf <= 0x00000000]
[20:48:24.330]      __var isMSPM0G1X0X_G3X0X = 0;
[20:48:24.330]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:48:24.330]      __var isProduction = 0;
[20:48:24.330]        // -> [isProduction <= 0x00000000]
[20:48:24.330]      __var continueId = 0;
[20:48:24.337]        // -> [continueId <= 0x00000000]
[20:48:24.337]      deviceID =   Read32(0x41C40004);
[20:48:24.347]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:48:24.347]        // -> [deviceID <= 0x2BB8802F]
[20:48:24.347]      version = deviceID >> 28;
[20:48:24.347]        // -> [version <= 0x00000002]
[20:48:24.347]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:48:24.347]        // -> [partNum <= 0x0000BB88]
[20:48:24.347]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:48:24.350]        // -> [manuf <= 0x00000017]
[20:48:24.350]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:48:24.350]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:48:24.350]      isProduction = (version > 0);
[20:48:24.350]        // -> [isProduction <= 0x00000001]
[20:48:24.350]    </block>
[20:48:24.350]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:48:24.350]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:48:24.350]        // =>  FALSE
[20:48:24.350]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:48:24.350]    </control>
[20:48:24.350]    <control if="continueId == 4" while="" timeout="0" info="">
[20:48:24.350]      // if-block "continueId == 4"
[20:48:24.350]        // =>  FALSE
[20:48:24.350]      // skip if-block "continueId == 4"
[20:48:24.350]    </control>
[20:48:24.350]    <control if="!isProduction" while="" timeout="0" info="">
[20:48:24.350]      // if-block "!isProduction"
[20:48:24.350]        // =>  FALSE
[20:48:24.350]      // skip if-block "!isProduction"
[20:48:24.350]    </control>
[20:48:24.350]  </sequence>
[20:48:24.350]  
[20:49:14.238]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:14.238]  
[20:49:14.248]  <debugvars>
[20:49:14.248]    // Pre-defined
[20:49:14.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:14.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:14.248]    __dp=0x00000000
[20:49:14.248]    __ap=0x00000000
[20:49:14.248]    __traceout=0x00000000      (Trace Disabled)
[20:49:14.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:14.248]    __FlashAddr=0x00000000
[20:49:14.248]    __FlashLen=0x00000000
[20:49:14.248]    __FlashArg=0x00000000
[20:49:14.248]    __FlashOp=0x00000000
[20:49:14.248]    __Result=0x00000000
[20:49:14.248]  </debugvars>
[20:49:14.248]  
[20:49:14.248]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:14.248]    <block atomic="false" info="">
[20:49:14.248]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:14.248]        // -> [isSWJ <= 0x00000001]
[20:49:14.248]      __var hasDormant = __protocol & 0x00020000;
[20:49:14.248]        // -> [hasDormant <= 0x00000000]
[20:49:14.248]      __var protType   = __protocol & 0x0000FFFF;
[20:49:14.248]        // -> [protType <= 0x00000002]
[20:49:14.248]    </block>
[20:49:14.248]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:14.248]      // if-block "protType == 1"
[20:49:14.248]        // =>  FALSE
[20:49:14.248]      // skip if-block "protType == 1"
[20:49:14.248]    </control>
[20:49:14.248]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:14.248]      // if-block "protType == 2"
[20:49:14.248]        // =>  TRUE
[20:49:14.248]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:14.248]        // if-block "isSWJ"
[20:49:14.248]          // =>  TRUE
[20:49:14.248]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:14.252]          // if-block "hasDormant"
[20:49:14.252]            // =>  FALSE
[20:49:14.252]          // skip if-block "hasDormant"
[20:49:14.252]        </control>
[20:49:14.252]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:14.252]          // if-block "!hasDormant"
[20:49:14.252]            // =>  TRUE
[20:49:14.252]          <block atomic="false" info="">
[20:49:14.252]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:14.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:14.254]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:14.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:14.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:14.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:14.258]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:14.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:14.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:14.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:14.264]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:14.264]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:14.264]          </block>
[20:49:14.264]          // end if-block "!hasDormant"
[20:49:14.268]        </control>
[20:49:14.268]        // end if-block "isSWJ"
[20:49:14.268]      </control>
[20:49:14.268]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:14.268]        // if-block "!isSWJ"
[20:49:14.268]          // =>  FALSE
[20:49:14.268]        // skip if-block "!isSWJ"
[20:49:14.268]      </control>
[20:49:14.268]      <block atomic="false" info="">
[20:49:14.268]        ReadDP(0x0);
[20:49:14.268]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:14.268]      </block>
[20:49:14.268]      // end if-block "protType == 2"
[20:49:14.268]    </control>
[20:49:14.268]  </sequence>
[20:49:14.268]  
[20:49:14.273]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:49:14.273]  
[20:49:14.273]  <debugvars>
[20:49:14.273]    // Pre-defined
[20:49:14.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:14.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:14.273]    __dp=0x00000000
[20:49:14.273]    __ap=0x00000000
[20:49:14.273]    __traceout=0x00000000      (Trace Disabled)
[20:49:14.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:14.273]    __FlashAddr=0x00000000
[20:49:14.273]    __FlashLen=0x00000000
[20:49:14.273]    __FlashArg=0x00000000
[20:49:14.273]    __FlashOp=0x00000000
[20:49:14.273]    __Result=0x00000000
[20:49:14.273]  </debugvars>
[20:49:14.273]  
[20:49:14.273]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:49:14.273]    <block atomic="false" info="">
[20:49:14.273]      __var SW_DP_ABORT       = 0x0;
[20:49:14.273]        // -> [SW_DP_ABORT <= 0x00000000]
[20:49:14.273]      __var DP_CTRL_STAT      = 0x4;
[20:49:14.273]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:49:14.273]      __var DP_SELECT         = 0x8;
[20:49:14.273]        // -> [DP_SELECT <= 0x00000008]
[20:49:14.273]      __var powered_down      = 0;
[20:49:14.273]        // -> [powered_down <= 0x00000000]
[20:49:14.273]      WriteDP(DP_SELECT, 0x00000000);
[20:49:14.278]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:49:14.278]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:49:14.278]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:49:14.278]        // -> [powered_down <= 0x00000001]
[20:49:14.278]    </block>
[20:49:14.278]    <control if="powered_down" while="" timeout="0" info="">
[20:49:14.278]      // if-block "powered_down"
[20:49:14.278]        // =>  TRUE
[20:49:14.278]      <block atomic="false" info="">
[20:49:14.278]        Message(0, "Debug/System power-up request sent");
[20:49:14.283]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:49:14.288]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:49:14.288]      </block>
[20:49:14.288]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:49:14.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:49:14.293]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:49:14.293]        // while-condition  =>  FALSE
[20:49:14.293]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:49:14.293]      </control>
[20:49:14.293]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:49:14.293]        // if-block "(__protocol & 0xFFFF) == 1"
[20:49:14.293]          // =>  FALSE
[20:49:14.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:49:14.293]      </control>
[20:49:14.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:49:14.293]        // if-block "(__protocol & 0xFFFF) == 2"
[20:49:14.293]          // =>  TRUE
[20:49:14.293]        <block atomic="false" info="">
[20:49:14.293]          Message(0, "executing SWD power up");
[20:49:14.295]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:49:14.295]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:49:14.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:49:14.298]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:49:14.298]        </block>
[20:49:14.298]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:49:14.298]      </control>
[20:49:14.298]      // end if-block "powered_down"
[20:49:14.298]    </control>
[20:49:14.298]    <block atomic="false" info="">
[20:49:14.298]      __var DEBUG_PORT_VAL    = 0;
[20:49:14.298]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:49:14.298]      __var ACCESS_POINT_VAL  = 0;
[20:49:14.298]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:49:14.298]      __ap = 1; 
[20:49:14.298]        // -> [__ap <= 0x00000001]
[20:49:14.298]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:49:14.303]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:49:14.303]      __ap = 4;
[20:49:14.303]        // -> [__ap <= 0x00000004]
[20:49:14.303]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:14.308]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:49:14.308]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:49:14.308]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:14.308]    </block>
[20:49:14.308]    <block atomic="false" info="">
[20:49:14.308]      __var nReset = 0x80;
[20:49:14.308]        // -> [nReset <= 0x00000080]
[20:49:14.308]      __var canReadPins = 0;
[20:49:14.308]        // -> [canReadPins <= 0x00000000]
[20:49:14.308]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:49:14.308]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:49:14.308]        // -> [canReadPins <= 0x00000001]
[20:49:14.308]    </block>
[20:49:14.308]    <control if="" while="1" timeout="200" info="">
[20:49:14.308]      // while "1"  (timeout="200")
[20:49:14.308]      // while-condition  =>  TRUE
[20:49:14.308]      // while "1"  (timeout="200")
[20:49:14.308]      // while-condition  =>  TRUE
[20:49:14.308]      // while "1"  (timeout="200")
[20:49:14.308]      // while-condition  =>  TRUE
[20:49:14.308]      // while "1"  (timeout="200")
[20:49:14.308]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.314]      // while-condition  =>  TRUE
[20:49:14.314]      // while "1"  (timeout="200")
[20:49:14.319]      // while-condition  =>  TRUE
[20:49:14.319]      // while "1"  (timeout="200")
[20:49:14.319]      // while  =>  TIMEOUT
[20:49:14.319]      // end while "1"
[20:49:14.319]    </control>
[20:49:14.319]    <control if="canReadPins" while="" timeout="0" info="">
[20:49:14.319]      // if-block "canReadPins"
[20:49:14.319]        // =>  TRUE
[20:49:14.319]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:49:14.319]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:49:14.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:49:14.320]        // while-condition  =>  FALSE
[20:49:14.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:49:14.320]      </control>
[20:49:14.320]      // end if-block "canReadPins"
[20:49:14.324]    </control>
[20:49:14.324]    <control if="!canReadPins" while="" timeout="0" info="">
[20:49:14.324]      // if-block "!canReadPins"
[20:49:14.324]        // =>  FALSE
[20:49:14.324]      // skip if-block "!canReadPins"
[20:49:14.324]    </control>
[20:49:14.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:49:14.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:14.324]        // =>  TRUE
[20:49:14.324]      <block atomic="false" info="">
[20:49:14.324]        WriteAP(0x00, 0x190008);
[20:49:14.326]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:14.326]        WriteAP(0xF0, 0x01);
[20:49:14.328]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:14.328]      </block>
[20:49:14.328]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:14.328]    </control>
[20:49:14.328]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:49:14.328]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:14.328]        // =>  FALSE
[20:49:14.328]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:14.328]    </control>
[20:49:14.328]    <block atomic="false" info="">
[20:49:14.328]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:14.336]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:49:14.336]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:49:14.336]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:14.336]      __ap = 0; //lets make sure we reset the access point selection
[20:49:14.336]        // -> [__ap <= 0x00000000]
[20:49:14.336]    </block>
[20:49:14.338]  </sequence>
[20:49:14.338]  
[20:49:14.358]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:49:14.358]  
[20:49:14.358]  <debugvars>
[20:49:14.358]    // Pre-defined
[20:49:14.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:14.358]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:14.358]    __dp=0x00000000
[20:49:14.358]    __ap=0x00000000
[20:49:14.358]    __traceout=0x00000000      (Trace Disabled)
[20:49:14.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:14.358]    __FlashAddr=0x00000000
[20:49:14.358]    __FlashLen=0x00000000
[20:49:14.358]    __FlashArg=0x00000000
[20:49:14.358]    __FlashOp=0x00000000
[20:49:14.358]    __Result=0x00000000
[20:49:14.358]  </debugvars>
[20:49:14.358]  
[20:49:14.358]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:49:14.358]    <block atomic="false" info="">
[20:49:14.358]      __var deviceID = 0;
[20:49:14.358]        // -> [deviceID <= 0x00000000]
[20:49:14.358]      __var version = 0;
[20:49:14.358]        // -> [version <= 0x00000000]
[20:49:14.358]      __var partNum = 0;
[20:49:14.358]        // -> [partNum <= 0x00000000]
[20:49:14.358]      __var manuf = 0;
[20:49:14.358]        // -> [manuf <= 0x00000000]
[20:49:14.358]      __var isMSPM0G1X0X_G3X0X = 0;
[20:49:14.358]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:49:14.358]      __var isProduction = 0;
[20:49:14.358]        // -> [isProduction <= 0x00000000]
[20:49:14.358]      __var continueId = 0;
[20:49:14.358]        // -> [continueId <= 0x00000000]
[20:49:14.358]      deviceID =   Read32(0x41C40004);
[20:49:14.367]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:49:14.367]        // -> [deviceID <= 0x2BB8802F]
[20:49:14.367]      version = deviceID >> 28;
[20:49:14.367]        // -> [version <= 0x00000002]
[20:49:14.368]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:49:14.368]        // -> [partNum <= 0x0000BB88]
[20:49:14.368]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:49:14.368]        // -> [manuf <= 0x00000017]
[20:49:14.368]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:49:14.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:49:14.368]      isProduction = (version > 0);
[20:49:14.368]        // -> [isProduction <= 0x00000001]
[20:49:14.368]    </block>
[20:49:14.368]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:49:14.368]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:49:14.368]        // =>  FALSE
[20:49:14.368]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:49:14.368]    </control>
[20:49:14.368]    <control if="continueId == 4" while="" timeout="0" info="">
[20:49:14.368]      // if-block "continueId == 4"
[20:49:14.368]        // =>  FALSE
[20:49:14.368]      // skip if-block "continueId == 4"
[20:49:14.368]    </control>
[20:49:14.368]    <control if="!isProduction" while="" timeout="0" info="">
[20:49:14.368]      // if-block "!isProduction"
[20:49:14.368]        // =>  FALSE
[20:49:14.368]      // skip if-block "!isProduction"
[20:49:14.368]    </control>
[20:49:14.368]  </sequence>
[20:49:14.368]  
[20:50:22.580]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:50:22.580]  
[20:50:22.595]  <debugvars>
[20:50:22.595]    // Pre-defined
[20:50:22.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.595]    __dp=0x00000000
[20:50:22.595]    __ap=0x00000000
[20:50:22.595]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.595]    __FlashAddr=0x00000000
[20:50:22.595]    __FlashLen=0x00000000
[20:50:22.595]    __FlashArg=0x00000000
[20:50:22.595]    __FlashOp=0x00000000
[20:50:22.595]    __Result=0x00000000
[20:50:22.595]  </debugvars>
[20:50:22.595]  
[20:50:22.595]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:50:22.595]    <block atomic="false" info="">
[20:50:22.595]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:50:22.595]        // -> [isSWJ <= 0x00000001]
[20:50:22.595]      __var hasDormant = __protocol & 0x00020000;
[20:50:22.595]        // -> [hasDormant <= 0x00000000]
[20:50:22.598]      __var protType   = __protocol & 0x0000FFFF;
[20:50:22.598]        // -> [protType <= 0x00000002]
[20:50:22.598]    </block>
[20:50:22.598]    <control if="protType == 1" while="" timeout="0" info="">
[20:50:22.598]      // if-block "protType == 1"
[20:50:22.598]        // =>  FALSE
[20:50:22.598]      // skip if-block "protType == 1"
[20:50:22.598]    </control>
[20:50:22.598]    <control if="protType == 2" while="" timeout="0" info="">
[20:50:22.598]      // if-block "protType == 2"
[20:50:22.598]        // =>  TRUE
[20:50:22.598]      <control if="isSWJ" while="" timeout="0" info="">
[20:50:22.598]        // if-block "isSWJ"
[20:50:22.598]          // =>  TRUE
[20:50:22.598]        <control if="hasDormant" while="" timeout="0" info="">
[20:50:22.598]          // if-block "hasDormant"
[20:50:22.599]            // =>  FALSE
[20:50:22.599]          // skip if-block "hasDormant"
[20:50:22.599]        </control>
[20:50:22.599]        <control if="!hasDormant" while="" timeout="0" info="">
[20:50:22.599]          // if-block "!hasDormant"
[20:50:22.599]            // =>  TRUE
[20:50:22.599]          <block atomic="false" info="">
[20:50:22.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:50:22.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.602]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:50:22.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:50:22.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:50:22.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.602]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:50:22.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:50:22.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:50:22.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.607]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:50:22.609]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:50:22.609]          </block>
[20:50:22.609]          // end if-block "!hasDormant"
[20:50:22.609]        </control>
[20:50:22.609]        // end if-block "isSWJ"
[20:50:22.609]      </control>
[20:50:22.609]      <control if="!isSWJ" while="" timeout="0" info="">
[20:50:22.609]        // if-block "!isSWJ"
[20:50:22.609]          // =>  FALSE
[20:50:22.609]        // skip if-block "!isSWJ"
[20:50:22.609]      </control>
[20:50:22.609]      <block atomic="false" info="">
[20:50:22.609]        ReadDP(0x0);
[20:50:22.609]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:50:22.609]      </block>
[20:50:22.609]      // end if-block "protType == 2"
[20:50:22.609]    </control>
[20:50:22.609]  </sequence>
[20:50:22.609]  
[20:50:22.620]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:50:22.620]  
[20:50:22.620]  <debugvars>
[20:50:22.620]    // Pre-defined
[20:50:22.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.620]    __dp=0x00000000
[20:50:22.620]    __ap=0x00000000
[20:50:22.620]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.620]    __FlashAddr=0x00000000
[20:50:22.620]    __FlashLen=0x00000000
[20:50:22.620]    __FlashArg=0x00000000
[20:50:22.620]    __FlashOp=0x00000000
[20:50:22.620]    __Result=0x00000000
[20:50:22.620]  </debugvars>
[20:50:22.620]  
[20:50:22.620]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:50:22.620]    <block atomic="false" info="">
[20:50:22.620]      __var SW_DP_ABORT       = 0x0;
[20:50:22.620]        // -> [SW_DP_ABORT <= 0x00000000]
[20:50:22.620]      __var DP_CTRL_STAT      = 0x4;
[20:50:22.620]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:50:22.620]      __var DP_SELECT         = 0x8;
[20:50:22.620]        // -> [DP_SELECT <= 0x00000008]
[20:50:22.620]      __var powered_down      = 0;
[20:50:22.620]        // -> [powered_down <= 0x00000000]
[20:50:22.620]      WriteDP(DP_SELECT, 0x00000000);
[20:50:22.620]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:50:22.620]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:50:22.620]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:50:22.620]        // -> [powered_down <= 0x00000001]
[20:50:22.620]    </block>
[20:50:22.620]    <control if="powered_down" while="" timeout="0" info="">
[20:50:22.620]      // if-block "powered_down"
[20:50:22.620]        // =>  TRUE
[20:50:22.620]      <block atomic="false" info="">
[20:50:22.620]        Message(0, "Debug/System power-up request sent");
[20:50:22.627]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:50:22.627]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:50:22.627]      </block>
[20:50:22.627]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:50:22.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:50:22.637]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:50:22.637]        // while-condition  =>  FALSE
[20:50:22.637]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:50:22.637]      </control>
[20:50:22.637]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:50:22.637]        // if-block "(__protocol & 0xFFFF) == 1"
[20:50:22.637]          // =>  FALSE
[20:50:22.637]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:50:22.637]      </control>
[20:50:22.637]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:50:22.637]        // if-block "(__protocol & 0xFFFF) == 2"
[20:50:22.637]          // =>  TRUE
[20:50:22.637]        <block atomic="false" info="">
[20:50:22.637]          Message(0, "executing SWD power up");
[20:50:22.637]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:50:22.637]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:50:22.637]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:50:22.647]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:50:22.647]        </block>
[20:50:22.647]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:50:22.647]      </control>
[20:50:22.647]      // end if-block "powered_down"
[20:50:22.647]    </control>
[20:50:22.647]    <block atomic="false" info="">
[20:50:22.647]      __var DEBUG_PORT_VAL    = 0;
[20:50:22.647]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:50:22.647]      __var ACCESS_POINT_VAL  = 0;
[20:50:22.647]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:50:22.647]      __ap = 1; 
[20:50:22.647]        // -> [__ap <= 0x00000001]
[20:50:22.647]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:50:22.647]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:50:22.647]      __ap = 4;
[20:50:22.647]        // -> [__ap <= 0x00000004]
[20:50:22.647]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:22.657]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.657]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:50:22.657]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:22.657]    </block>
[20:50:22.657]    <block atomic="false" info="">
[20:50:22.657]      __var nReset = 0x80;
[20:50:22.657]        // -> [nReset <= 0x00000080]
[20:50:22.657]      __var canReadPins = 0;
[20:50:22.657]        // -> [canReadPins <= 0x00000000]
[20:50:22.657]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:50:22.667]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:50:22.667]        // -> [canReadPins <= 0x00000001]
[20:50:22.667]    </block>
[20:50:22.667]    <control if="" while="1" timeout="200" info="">
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.667]      // while-condition  =>  TRUE
[20:50:22.667]      // while "1"  (timeout="200")
[20:50:22.677]      // while-condition  =>  TRUE
[20:50:22.677]      // while "1"  (timeout="200")
[20:50:22.677]      // while  =>  TIMEOUT
[20:50:22.677]      // end while "1"
[20:50:22.677]    </control>
[20:50:22.677]    <control if="canReadPins" while="" timeout="0" info="">
[20:50:22.677]      // if-block "canReadPins"
[20:50:22.677]        // =>  TRUE
[20:50:22.677]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:50:22.677]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:50:22.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:50:22.680]        // while-condition  =>  FALSE
[20:50:22.680]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:50:22.680]      </control>
[20:50:22.680]      // end if-block "canReadPins"
[20:50:22.680]    </control>
[20:50:22.680]    <control if="!canReadPins" while="" timeout="0" info="">
[20:50:22.680]      // if-block "!canReadPins"
[20:50:22.680]        // =>  FALSE
[20:50:22.680]      // skip if-block "!canReadPins"
[20:50:22.680]    </control>
[20:50:22.680]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:50:22.680]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:22.680]        // =>  TRUE
[20:50:22.680]      <block atomic="false" info="">
[20:50:22.680]        WriteAP(0x00, 0x190008);
[20:50:22.687]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.687]        WriteAP(0xF0, 0x01);
[20:50:22.687]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.687]      </block>
[20:50:22.687]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:22.687]    </control>
[20:50:22.687]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:50:22.687]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:22.687]        // =>  FALSE
[20:50:22.687]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:22.687]    </control>
[20:50:22.687]    <block atomic="false" info="">
[20:50:22.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:22.700]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.700]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:50:22.700]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:22.703]      __ap = 0; //lets make sure we reset the access point selection
[20:50:22.703]        // -> [__ap <= 0x00000000]
[20:50:22.703]    </block>
[20:50:22.703]  </sequence>
[20:50:22.703]  
[20:50:22.737]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:50:22.737]  
[20:50:22.737]  <debugvars>
[20:50:22.737]    // Pre-defined
[20:50:22.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.737]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.737]    __dp=0x00000000
[20:50:22.737]    __ap=0x00000000
[20:50:22.737]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.737]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.737]    __FlashAddr=0x00000000
[20:50:22.737]    __FlashLen=0x00000000
[20:50:22.737]    __FlashArg=0x00000000
[20:50:22.737]    __FlashOp=0x00000000
[20:50:22.737]    __Result=0x00000000
[20:50:22.737]  </debugvars>
[20:50:22.737]  
[20:50:22.737]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:50:22.737]    <block atomic="false" info="">
[20:50:22.737]      __var deviceID = 0;
[20:50:22.737]        // -> [deviceID <= 0x00000000]
[20:50:22.737]      __var version = 0;
[20:50:22.737]        // -> [version <= 0x00000000]
[20:50:22.737]      __var partNum = 0;
[20:50:22.737]        // -> [partNum <= 0x00000000]
[20:50:22.737]      __var manuf = 0;
[20:50:22.737]        // -> [manuf <= 0x00000000]
[20:50:22.737]      __var isMSPM0G1X0X_G3X0X = 0;
[20:50:22.737]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:50:22.737]      __var isProduction = 0;
[20:50:22.737]        // -> [isProduction <= 0x00000000]
[20:50:22.737]      __var continueId = 0;
[20:50:22.737]        // -> [continueId <= 0x00000000]
[20:50:22.737]      deviceID =   Read32(0x41C40004);
[20:50:22.749]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:50:22.749]        // -> [deviceID <= 0x2BB8802F]
[20:50:22.749]      version = deviceID >> 28;
[20:50:22.749]        // -> [version <= 0x00000002]
[20:50:22.749]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:50:22.749]        // -> [partNum <= 0x0000BB88]
[20:50:22.749]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:50:22.749]        // -> [manuf <= 0x00000017]
[20:50:22.749]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:50:22.749]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:50:22.749]      isProduction = (version > 0);
[20:50:22.749]        // -> [isProduction <= 0x00000001]
[20:50:22.749]    </block>
[20:50:22.749]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:50:22.749]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:50:22.749]        // =>  FALSE
[20:50:22.749]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:50:22.749]    </control>
[20:50:22.749]    <control if="continueId == 4" while="" timeout="0" info="">
[20:50:22.749]      // if-block "continueId == 4"
[20:50:22.749]        // =>  FALSE
[20:50:22.749]      // skip if-block "continueId == 4"
[20:50:22.749]    </control>
[20:50:22.749]    <control if="!isProduction" while="" timeout="0" info="">
[20:50:22.749]      // if-block "!isProduction"
[20:50:22.749]        // =>  FALSE
[20:50:22.749]      // skip if-block "!isProduction"
[20:50:22.749]    </control>
[20:50:22.749]  </sequence>
[20:50:22.749]  
[20:50:47.605]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:50:47.605]  
[20:50:47.607]  <debugvars>
[20:50:47.607]    // Pre-defined
[20:50:47.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:47.607]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:47.607]    __dp=0x00000000
[20:50:47.607]    __ap=0x00000000
[20:50:47.607]    __traceout=0x00000000      (Trace Disabled)
[20:50:47.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:47.607]    __FlashAddr=0x00000000
[20:50:47.607]    __FlashLen=0x00000000
[20:50:47.607]    __FlashArg=0x00000000
[20:50:47.607]    __FlashOp=0x00000000
[20:50:47.607]    __Result=0x00000000
[20:50:47.608]  </debugvars>
[20:50:47.608]  
[20:50:47.608]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:50:47.608]    <block atomic="false" info="">
[20:50:47.608]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:50:47.609]        // -> [isSWJ <= 0x00000001]
[20:50:47.609]      __var hasDormant = __protocol & 0x00020000;
[20:50:47.609]        // -> [hasDormant <= 0x00000000]
[20:50:47.609]      __var protType   = __protocol & 0x0000FFFF;
[20:50:47.609]        // -> [protType <= 0x00000002]
[20:50:47.609]    </block>
[20:50:47.609]    <control if="protType == 1" while="" timeout="0" info="">
[20:50:47.609]      // if-block "protType == 1"
[20:50:47.609]        // =>  FALSE
[20:50:47.609]      // skip if-block "protType == 1"
[20:50:47.609]    </control>
[20:50:47.609]    <control if="protType == 2" while="" timeout="0" info="">
[20:50:47.610]      // if-block "protType == 2"
[20:50:47.610]        // =>  TRUE
[20:50:47.610]      <control if="isSWJ" while="" timeout="0" info="">
[20:50:47.610]        // if-block "isSWJ"
[20:50:47.610]          // =>  TRUE
[20:50:47.610]        <control if="hasDormant" while="" timeout="0" info="">
[20:50:47.610]          // if-block "hasDormant"
[20:50:47.610]            // =>  FALSE
[20:50:47.610]          // skip if-block "hasDormant"
[20:50:47.610]        </control>
[20:50:47.610]        <control if="!hasDormant" while="" timeout="0" info="">
[20:50:47.610]          // if-block "!hasDormant"
[20:50:47.611]            // =>  TRUE
[20:50:47.611]          <block atomic="false" info="">
[20:50:47.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:50:47.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:47.614]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:50:47.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:50:47.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:50:47.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:47.617]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:50:47.619]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:50:47.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:50:47.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:47.620]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:50:47.624]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:50:47.624]          </block>
[20:50:47.624]          // end if-block "!hasDormant"
[20:50:47.624]        </control>
[20:50:47.624]        // end if-block "isSWJ"
[20:50:47.624]      </control>
[20:50:47.624]      <control if="!isSWJ" while="" timeout="0" info="">
[20:50:47.624]        // if-block "!isSWJ"
[20:50:47.624]          // =>  FALSE
[20:50:47.624]        // skip if-block "!isSWJ"
[20:50:47.624]      </control>
[20:50:47.624]      <block atomic="false" info="">
[20:50:47.624]        ReadDP(0x0);
[20:50:47.628]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:50:47.628]      </block>
[20:50:47.628]      // end if-block "protType == 2"
[20:50:47.629]    </control>
[20:50:47.629]  </sequence>
[20:50:47.629]  
[20:50:47.635]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:50:47.635]  
[20:50:47.635]  <debugvars>
[20:50:47.635]    // Pre-defined
[20:50:47.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:47.635]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:47.635]    __dp=0x00000000
[20:50:47.635]    __ap=0x00000000
[20:50:47.635]    __traceout=0x00000000      (Trace Disabled)
[20:50:47.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:47.635]    __FlashAddr=0x00000000
[20:50:47.635]    __FlashLen=0x00000000
[20:50:47.635]    __FlashArg=0x00000000
[20:50:47.635]    __FlashOp=0x00000000
[20:50:47.635]    __Result=0x00000000
[20:50:47.635]  </debugvars>
[20:50:47.635]  
[20:50:47.635]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:50:47.635]    <block atomic="false" info="">
[20:50:47.635]      __var SW_DP_ABORT       = 0x0;
[20:50:47.635]        // -> [SW_DP_ABORT <= 0x00000000]
[20:50:47.635]      __var DP_CTRL_STAT      = 0x4;
[20:50:47.637]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:50:47.637]      __var DP_SELECT         = 0x8;
[20:50:47.637]        // -> [DP_SELECT <= 0x00000008]
[20:50:47.637]      __var powered_down      = 0;
[20:50:47.637]        // -> [powered_down <= 0x00000000]
[20:50:47.637]      WriteDP(DP_SELECT, 0x00000000);
[20:50:47.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:50:47.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:50:47.640]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:50:47.640]        // -> [powered_down <= 0x00000001]
[20:50:47.640]    </block>
[20:50:47.640]    <control if="powered_down" while="" timeout="0" info="">
[20:50:47.640]      // if-block "powered_down"
[20:50:47.640]        // =>  TRUE
[20:50:47.640]      <block atomic="false" info="">
[20:50:47.640]        Message(0, "Debug/System power-up request sent");
[20:50:47.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:50:47.644]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:50:47.644]      </block>
[20:50:47.644]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:50:47.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:50:47.656]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:50:47.656]        // while-condition  =>  FALSE
[20:50:47.656]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:50:47.656]      </control>
[20:50:47.656]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:50:47.656]        // if-block "(__protocol & 0xFFFF) == 1"
[20:50:47.656]          // =>  FALSE
[20:50:47.656]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:50:47.656]      </control>
[20:50:47.656]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:50:47.656]        // if-block "(__protocol & 0xFFFF) == 2"
[20:50:47.658]          // =>  TRUE
[20:50:47.658]        <block atomic="false" info="">
[20:50:47.658]          Message(0, "executing SWD power up");
[20:50:47.660]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:50:47.665]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:50:47.665]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:50:47.666]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:50:47.666]        </block>
[20:50:47.666]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:50:47.666]      </control>
[20:50:47.666]      // end if-block "powered_down"
[20:50:47.666]    </control>
[20:50:47.666]    <block atomic="false" info="">
[20:50:47.666]      __var DEBUG_PORT_VAL    = 0;
[20:50:47.668]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:50:47.668]      __var ACCESS_POINT_VAL  = 0;
[20:50:47.668]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:50:47.668]      __ap = 1; 
[20:50:47.668]        // -> [__ap <= 0x00000001]
[20:50:47.668]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:50:47.672]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:50:47.672]      __ap = 4;
[20:50:47.672]        // -> [__ap <= 0x00000004]
[20:50:47.672]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:47.678]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:50:47.678]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:50:47.678]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:47.679]    </block>
[20:50:47.679]    <block atomic="false" info="">
[20:50:47.679]      __var nReset = 0x80;
[20:50:47.679]        // -> [nReset <= 0x00000080]
[20:50:47.679]      __var canReadPins = 0;
[20:50:47.679]        // -> [canReadPins <= 0x00000000]
[20:50:47.679]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:50:47.682]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:50:47.682]        // -> [canReadPins <= 0x00000001]
[20:50:47.682]    </block>
[20:50:47.682]    <control if="" while="1" timeout="200" info="">
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.682]      // while-condition  =>  TRUE
[20:50:47.682]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.685]      // while "1"  (timeout="200")
[20:50:47.685]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.687]      // while-condition  =>  TRUE
[20:50:47.687]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.688]      // while-condition  =>  TRUE
[20:50:47.688]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.690]      // while-condition  =>  TRUE
[20:50:47.690]      // while "1"  (timeout="200")
[20:50:47.691]      // while-condition  =>  TRUE
[20:50:47.691]      // while "1"  (timeout="200")
[20:50:47.691]      // while  =>  TIMEOUT
[20:50:47.691]      // end while "1"
[20:50:47.691]    </control>
[20:50:47.691]    <control if="canReadPins" while="" timeout="0" info="">
[20:50:47.691]      // if-block "canReadPins"
[20:50:47.691]        // =>  TRUE
[20:50:47.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:50:47.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:50:47.692]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:50:47.692]        // while-condition  =>  FALSE
[20:50:47.692]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:50:47.692]      </control>
[20:50:47.692]      // end if-block "canReadPins"
[20:50:47.692]    </control>
[20:50:47.692]    <control if="!canReadPins" while="" timeout="0" info="">
[20:50:47.692]      // if-block "!canReadPins"
[20:50:47.692]        // =>  FALSE
[20:50:47.692]      // skip if-block "!canReadPins"
[20:50:47.694]    </control>
[20:50:47.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:50:47.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:47.694]        // =>  TRUE
[20:50:47.694]      <block atomic="false" info="">
[20:50:47.694]        WriteAP(0x00, 0x190008);
[20:50:47.694]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:47.694]        WriteAP(0xF0, 0x01);
[20:50:47.700]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:47.700]      </block>
[20:50:47.700]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:47.700]    </control>
[20:50:47.700]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:50:47.700]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:47.700]        // =>  FALSE
[20:50:47.701]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:47.701]    </control>
[20:50:47.701]    <block atomic="false" info="">
[20:50:47.701]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:47.704]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:50:47.704]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:50:47.704]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:47.707]      __ap = 0; //lets make sure we reset the access point selection
[20:50:47.707]        // -> [__ap <= 0x00000000]
[20:50:47.707]    </block>
[20:50:47.707]  </sequence>
[20:50:47.707]  
[20:50:47.736]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:50:47.736]  
[20:50:47.736]  <debugvars>
[20:50:47.736]    // Pre-defined
[20:50:47.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:47.736]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:47.736]    __dp=0x00000000
[20:50:47.736]    __ap=0x00000000
[20:50:47.736]    __traceout=0x00000000      (Trace Disabled)
[20:50:47.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:47.736]    __FlashAddr=0x00000000
[20:50:47.738]    __FlashLen=0x00000000
[20:50:47.738]    __FlashArg=0x00000000
[20:50:47.738]    __FlashOp=0x00000000
[20:50:47.738]    __Result=0x00000000
[20:50:47.738]  </debugvars>
[20:50:47.738]  
[20:50:47.739]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:50:47.739]    <block atomic="false" info="">
[20:50:47.739]      __var deviceID = 0;
[20:50:47.739]        // -> [deviceID <= 0x00000000]
[20:50:47.739]      __var version = 0;
[20:50:47.739]        // -> [version <= 0x00000000]
[20:50:47.739]      __var partNum = 0;
[20:50:47.739]        // -> [partNum <= 0x00000000]
[20:50:47.739]      __var manuf = 0;
[20:50:47.739]        // -> [manuf <= 0x00000000]
[20:50:47.739]      __var isMSPM0G1X0X_G3X0X = 0;
[20:50:47.739]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:50:47.739]      __var isProduction = 0;
[20:50:47.739]        // -> [isProduction <= 0x00000000]
[20:50:47.741]      __var continueId = 0;
[20:50:47.741]        // -> [continueId <= 0x00000000]
[20:50:47.741]      deviceID =   Read32(0x41C40004);
[20:50:47.747]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:50:47.747]        // -> [deviceID <= 0x2BB8802F]
[20:50:47.747]      version = deviceID >> 28;
[20:50:47.748]        // -> [version <= 0x00000002]
[20:50:47.748]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:50:47.748]        // -> [partNum <= 0x0000BB88]
[20:50:47.748]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:50:47.748]        // -> [manuf <= 0x00000017]
[20:50:47.748]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:50:47.748]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:50:47.748]      isProduction = (version > 0);
[20:50:47.748]        // -> [isProduction <= 0x00000001]
[20:50:47.748]    </block>
[20:50:47.748]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:50:47.748]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:50:47.748]        // =>  FALSE
[20:50:47.748]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:50:47.748]    </control>
[20:50:47.748]    <control if="continueId == 4" while="" timeout="0" info="">
[20:50:47.748]      // if-block "continueId == 4"
[20:50:47.748]        // =>  FALSE
[20:50:47.748]      // skip if-block "continueId == 4"
[20:50:47.748]    </control>
[20:50:47.748]    <control if="!isProduction" while="" timeout="0" info="">
[20:50:47.748]      // if-block "!isProduction"
[20:50:47.748]        // =>  FALSE
[20:50:47.748]      // skip if-block "!isProduction"
[20:50:47.748]    </control>
[20:50:47.748]  </sequence>
[20:50:47.748]  
[20:51:20.398]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:51:20.398]  
[20:51:20.398]  <debugvars>
[20:51:20.398]    // Pre-defined
[20:51:20.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:20.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:20.398]    __dp=0x00000000
[20:51:20.398]    __ap=0x00000000
[20:51:20.398]    __traceout=0x00000000      (Trace Disabled)
[20:51:20.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:20.398]    __FlashAddr=0x00000000
[20:51:20.402]    __FlashLen=0x00000000
[20:51:20.402]    __FlashArg=0x00000000
[20:51:20.402]    __FlashOp=0x00000000
[20:51:20.403]    __Result=0x00000000
[20:51:20.403]  </debugvars>
[20:51:20.403]  
[20:51:20.403]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:51:20.403]    <block atomic="false" info="">
[20:51:20.403]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:51:20.403]        // -> [isSWJ <= 0x00000001]
[20:51:20.403]      __var hasDormant = __protocol & 0x00020000;
[20:51:20.403]        // -> [hasDormant <= 0x00000000]
[20:51:20.403]      __var protType   = __protocol & 0x0000FFFF;
[20:51:20.403]        // -> [protType <= 0x00000002]
[20:51:20.403]    </block>
[20:51:20.403]    <control if="protType == 1" while="" timeout="0" info="">
[20:51:20.403]      // if-block "protType == 1"
[20:51:20.403]        // =>  FALSE
[20:51:20.403]      // skip if-block "protType == 1"
[20:51:20.403]    </control>
[20:51:20.403]    <control if="protType == 2" while="" timeout="0" info="">
[20:51:20.403]      // if-block "protType == 2"
[20:51:20.403]        // =>  TRUE
[20:51:20.403]      <control if="isSWJ" while="" timeout="0" info="">
[20:51:20.403]        // if-block "isSWJ"
[20:51:20.403]          // =>  TRUE
[20:51:20.403]        <control if="hasDormant" while="" timeout="0" info="">
[20:51:20.403]          // if-block "hasDormant"
[20:51:20.403]            // =>  FALSE
[20:51:20.403]          // skip if-block "hasDormant"
[20:51:20.403]        </control>
[20:51:20.403]        <control if="!hasDormant" while="" timeout="0" info="">
[20:51:20.403]          // if-block "!hasDormant"
[20:51:20.403]            // =>  TRUE
[20:51:20.403]          <block atomic="false" info="">
[20:51:20.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:51:20.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:20.403]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:51:20.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:51:20.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:51:20.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:20.413]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:51:20.413]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:51:20.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:51:20.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:20.413]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:51:20.423]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:51:20.423]          </block>
[20:51:20.423]          // end if-block "!hasDormant"
[20:51:20.423]        </control>
[20:51:20.423]        // end if-block "isSWJ"
[20:51:20.423]      </control>
[20:51:20.423]      <control if="!isSWJ" while="" timeout="0" info="">
[20:51:20.423]        // if-block "!isSWJ"
[20:51:20.423]          // =>  FALSE
[20:51:20.423]        // skip if-block "!isSWJ"
[20:51:20.423]      </control>
[20:51:20.423]      <block atomic="false" info="">
[20:51:20.423]        ReadDP(0x0);
[20:51:20.423]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:51:20.423]      </block>
[20:51:20.423]      // end if-block "protType == 2"
[20:51:20.423]    </control>
[20:51:20.423]  </sequence>
[20:51:20.423]  
[20:51:20.435]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:51:20.435]  
[20:51:20.435]  <debugvars>
[20:51:20.435]    // Pre-defined
[20:51:20.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:20.435]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:20.435]    __dp=0x00000000
[20:51:20.435]    __ap=0x00000000
[20:51:20.435]    __traceout=0x00000000      (Trace Disabled)
[20:51:20.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:20.435]    __FlashAddr=0x00000000
[20:51:20.435]    __FlashLen=0x00000000
[20:51:20.435]    __FlashArg=0x00000000
[20:51:20.435]    __FlashOp=0x00000000
[20:51:20.435]    __Result=0x00000000
[20:51:20.435]  </debugvars>
[20:51:20.435]  
[20:51:20.435]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:51:20.435]    <block atomic="false" info="">
[20:51:20.435]      __var SW_DP_ABORT       = 0x0;
[20:51:20.435]        // -> [SW_DP_ABORT <= 0x00000000]
[20:51:20.435]      __var DP_CTRL_STAT      = 0x4;
[20:51:20.435]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:51:20.435]      __var DP_SELECT         = 0x8;
[20:51:20.435]        // -> [DP_SELECT <= 0x00000008]
[20:51:20.435]      __var powered_down      = 0;
[20:51:20.435]        // -> [powered_down <= 0x00000000]
[20:51:20.435]      WriteDP(DP_SELECT, 0x00000000);
[20:51:20.443]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:51:20.443]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:51:20.443]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:51:20.443]        // -> [powered_down <= 0x00000001]
[20:51:20.443]    </block>
[20:51:20.443]    <control if="powered_down" while="" timeout="0" info="">
[20:51:20.443]      // if-block "powered_down"
[20:51:20.443]        // =>  TRUE
[20:51:20.443]      <block atomic="false" info="">
[20:51:20.443]        Message(0, "Debug/System power-up request sent");
[20:51:20.443]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:51:20.453]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:51:20.453]      </block>
[20:51:20.453]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:51:20.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:51:20.453]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:51:20.453]        // while-condition  =>  FALSE
[20:51:20.453]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:51:20.453]      </control>
[20:51:20.453]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:51:20.453]        // if-block "(__protocol & 0xFFFF) == 1"
[20:51:20.453]          // =>  FALSE
[20:51:20.453]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:51:20.453]      </control>
[20:51:20.453]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:51:20.453]        // if-block "(__protocol & 0xFFFF) == 2"
[20:51:20.453]          // =>  TRUE
[20:51:20.453]        <block atomic="false" info="">
[20:51:20.453]          Message(0, "executing SWD power up");
[20:51:20.453]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:51:20.463]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:51:20.463]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:51:20.464]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:51:20.464]        </block>
[20:51:20.464]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:51:20.464]      </control>
[20:51:20.464]      // end if-block "powered_down"
[20:51:20.464]    </control>
[20:51:20.464]    <block atomic="false" info="">
[20:51:20.464]      __var DEBUG_PORT_VAL    = 0;
[20:51:20.464]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:51:20.464]      __var ACCESS_POINT_VAL  = 0;
[20:51:20.464]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:51:20.464]      __ap = 1; 
[20:51:20.464]        // -> [__ap <= 0x00000001]
[20:51:20.464]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:51:20.464]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:51:20.473]      __ap = 4;
[20:51:20.473]        // -> [__ap <= 0x00000004]
[20:51:20.473]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:20.475]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:51:20.475]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:51:20.475]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:20.475]    </block>
[20:51:20.483]    <block atomic="false" info="">
[20:51:20.483]      __var nReset = 0x80;
[20:51:20.483]        // -> [nReset <= 0x00000080]
[20:51:20.483]      __var canReadPins = 0;
[20:51:20.483]        // -> [canReadPins <= 0x00000000]
[20:51:20.483]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:51:20.485]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:51:20.485]        // -> [canReadPins <= 0x00000001]
[20:51:20.485]    </block>
[20:51:20.485]    <control if="" while="1" timeout="200" info="">
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.485]      // while "1"  (timeout="200")
[20:51:20.485]      // while-condition  =>  TRUE
[20:51:20.493]      // while "1"  (timeout="200")
[20:51:20.493]      // while  =>  TIMEOUT
[20:51:20.493]      // end while "1"
[20:51:20.493]    </control>
[20:51:20.493]    <control if="canReadPins" while="" timeout="0" info="">
[20:51:20.493]      // if-block "canReadPins"
[20:51:20.493]        // =>  TRUE
[20:51:20.493]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:51:20.493]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:51:20.495]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:51:20.495]        // while-condition  =>  FALSE
[20:51:20.495]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:51:20.495]      </control>
[20:51:20.495]      // end if-block "canReadPins"
[20:51:20.495]    </control>
[20:51:20.495]    <control if="!canReadPins" while="" timeout="0" info="">
[20:51:20.495]      // if-block "!canReadPins"
[20:51:20.495]        // =>  FALSE
[20:51:20.495]      // skip if-block "!canReadPins"
[20:51:20.495]    </control>
[20:51:20.495]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:51:20.495]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:20.495]        // =>  TRUE
[20:51:20.495]      <block atomic="false" info="">
[20:51:20.495]        WriteAP(0x00, 0x190008);
[20:51:20.495]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:20.495]        WriteAP(0xF0, 0x01);
[20:51:20.503]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:20.503]      </block>
[20:51:20.503]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:20.503]    </control>
[20:51:20.503]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:51:20.503]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:20.503]        // =>  FALSE
[20:51:20.503]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:20.503]    </control>
[20:51:20.503]    <block atomic="false" info="">
[20:51:20.503]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:20.515]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:51:20.515]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:51:20.515]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:20.515]      __ap = 0; //lets make sure we reset the access point selection
[20:51:20.515]        // -> [__ap <= 0x00000000]
[20:51:20.515]    </block>
[20:51:20.515]  </sequence>
[20:51:20.515]  
[20:51:20.533]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:51:20.533]  
[20:51:20.533]  <debugvars>
[20:51:20.533]    // Pre-defined
[20:51:20.533]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:20.533]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:20.533]    __dp=0x00000000
[20:51:20.533]    __ap=0x00000000
[20:51:20.533]    __traceout=0x00000000      (Trace Disabled)
[20:51:20.533]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:20.533]    __FlashAddr=0x00000000
[20:51:20.533]    __FlashLen=0x00000000
[20:51:20.533]    __FlashArg=0x00000000
[20:51:20.533]    __FlashOp=0x00000000
[20:51:20.533]    __Result=0x00000000
[20:51:20.533]  </debugvars>
[20:51:20.533]  
[20:51:20.533]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:51:20.533]    <block atomic="false" info="">
[20:51:20.533]      __var deviceID = 0;
[20:51:20.533]        // -> [deviceID <= 0x00000000]
[20:51:20.533]      __var version = 0;
[20:51:20.533]        // -> [version <= 0x00000000]
[20:51:20.533]      __var partNum = 0;
[20:51:20.533]        // -> [partNum <= 0x00000000]
[20:51:20.533]      __var manuf = 0;
[20:51:20.533]        // -> [manuf <= 0x00000000]
[20:51:20.533]      __var isMSPM0G1X0X_G3X0X = 0;
[20:51:20.533]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:51:20.533]      __var isProduction = 0;
[20:51:20.533]        // -> [isProduction <= 0x00000000]
[20:51:20.533]      __var continueId = 0;
[20:51:20.533]        // -> [continueId <= 0x00000000]
[20:51:20.533]      deviceID =   Read32(0x41C40004);
[20:51:20.543]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:51:20.543]        // -> [deviceID <= 0x2BB8802F]
[20:51:20.543]      version = deviceID >> 28;
[20:51:20.543]        // -> [version <= 0x00000002]
[20:51:20.543]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:51:20.543]        // -> [partNum <= 0x0000BB88]
[20:51:20.543]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:51:20.543]        // -> [manuf <= 0x00000017]
[20:51:20.543]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:51:20.543]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:51:20.543]      isProduction = (version > 0);
[20:51:20.543]        // -> [isProduction <= 0x00000001]
[20:51:20.543]    </block>
[20:51:20.543]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:51:20.543]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:51:20.543]        // =>  FALSE
[20:51:20.543]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:51:20.543]    </control>
[20:51:20.543]    <control if="continueId == 4" while="" timeout="0" info="">
[20:51:20.543]      // if-block "continueId == 4"
[20:51:20.543]        // =>  FALSE
[20:51:20.543]      // skip if-block "continueId == 4"
[20:51:20.543]    </control>
[20:51:20.543]    <control if="!isProduction" while="" timeout="0" info="">
[20:51:20.543]      // if-block "!isProduction"
[20:51:20.543]        // =>  FALSE
[20:51:20.543]      // skip if-block "!isProduction"
[20:51:20.543]    </control>
[20:51:20.543]  </sequence>
[20:51:20.543]  
[20:51:47.963]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:51:47.963]  
[20:51:47.963]  <debugvars>
[20:51:47.963]    // Pre-defined
[20:51:47.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:47.963]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:51:47.963]    __dp=0x00000000
[20:51:47.963]    __ap=0x00000000
[20:51:47.963]    __traceout=0x00000000      (Trace Disabled)
[20:51:47.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:47.963]    __FlashAddr=0x00000000
[20:51:47.963]    __FlashLen=0x00000000
[20:51:47.963]    __FlashArg=0x00000000
[20:51:47.963]    __FlashOp=0x00000000
[20:51:47.963]    __Result=0x00000000
[20:51:47.963]  </debugvars>
[20:51:47.963]  
[20:51:47.963]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:51:47.963]    <block atomic="false" info="">
[20:51:47.963]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:51:47.963]        // -> [isSWJ <= 0x00000001]
[20:51:47.963]      __var hasDormant = __protocol & 0x00020000;
[20:51:47.963]        // -> [hasDormant <= 0x00000000]
[20:51:47.963]      __var protType   = __protocol & 0x0000FFFF;
[20:51:47.963]        // -> [protType <= 0x00000002]
[20:51:47.963]    </block>
[20:51:47.963]    <control if="protType == 1" while="" timeout="0" info="">
[20:51:47.963]      // if-block "protType == 1"
[20:51:47.963]        // =>  FALSE
[20:51:47.963]      // skip if-block "protType == 1"
[20:51:47.963]    </control>
[20:51:47.963]    <control if="protType == 2" while="" timeout="0" info="">
[20:51:47.963]      // if-block "protType == 2"
[20:51:47.963]        // =>  TRUE
[20:51:47.963]      <control if="isSWJ" while="" timeout="0" info="">
[20:51:47.963]        // if-block "isSWJ"
[20:51:47.963]          // =>  TRUE
[20:51:47.963]        <control if="hasDormant" while="" timeout="0" info="">
[20:51:47.963]          // if-block "hasDormant"
[20:51:47.963]            // =>  FALSE
[20:51:47.963]          // skip if-block "hasDormant"
[20:51:47.963]        </control>
[20:51:47.963]        <control if="!hasDormant" while="" timeout="0" info="">
[20:51:47.963]          // if-block "!hasDormant"
[20:51:47.963]            // =>  TRUE
[20:51:47.963]          <block atomic="false" info="">
[20:51:47.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:51:47.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:47.963]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:51:47.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:51:47.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:51:47.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:47.971]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:51:47.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:51:47.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:51:47.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:47.981]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:51:47.983]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:51:47.983]          </block>
[20:51:47.983]          // end if-block "!hasDormant"
[20:51:47.983]        </control>
[20:51:47.983]        // end if-block "isSWJ"
[20:51:47.983]      </control>
[20:51:47.983]      <control if="!isSWJ" while="" timeout="0" info="">
[20:51:47.983]        // if-block "!isSWJ"
[20:51:47.983]          // =>  FALSE
[20:51:47.983]        // skip if-block "!isSWJ"
[20:51:47.983]      </control>
[20:51:47.983]      <block atomic="false" info="">
[20:51:47.983]        ReadDP(0x0);
[20:51:47.983]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:51:47.983]      </block>
[20:51:47.983]      // end if-block "protType == 2"
[20:51:47.983]    </control>
[20:51:47.983]  </sequence>
[20:51:47.983]  
[20:51:47.992]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:51:47.992]  
[20:51:47.992]  <debugvars>
[20:51:47.992]    // Pre-defined
[20:51:47.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:47.992]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:51:47.992]    __dp=0x00000000
[20:51:47.992]    __ap=0x00000000
[20:51:47.992]    __traceout=0x00000000      (Trace Disabled)
[20:51:47.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:47.992]    __FlashAddr=0x00000000
[20:51:47.992]    __FlashLen=0x00000000
[20:51:47.992]    __FlashArg=0x00000000
[20:51:47.992]    __FlashOp=0x00000000
[20:51:47.992]    __Result=0x00000000
[20:51:47.992]  </debugvars>
[20:51:47.992]  
[20:51:47.992]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:51:47.992]    <block atomic="false" info="">
[20:51:47.992]      __var SW_DP_ABORT       = 0x0;
[20:51:47.992]        // -> [SW_DP_ABORT <= 0x00000000]
[20:51:47.992]      __var DP_CTRL_STAT      = 0x4;
[20:51:47.992]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:51:47.992]      __var DP_SELECT         = 0x8;
[20:51:47.992]        // -> [DP_SELECT <= 0x00000008]
[20:51:47.992]      __var powered_down      = 0;
[20:51:47.992]        // -> [powered_down <= 0x00000000]
[20:51:47.992]      WriteDP(DP_SELECT, 0x00000000);
[20:51:47.992]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:51:47.992]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:51:48.009]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:51:48.009]        // -> [powered_down <= 0x00000001]
[20:51:48.009]    </block>
[20:51:48.009]    <control if="powered_down" while="" timeout="0" info="">
[20:51:48.012]      // if-block "powered_down"
[20:51:48.012]        // =>  TRUE
[20:51:48.012]      <block atomic="false" info="">
[20:51:48.012]        Message(0, "Debug/System power-up request sent");
[20:51:48.012]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:51:48.012]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:51:48.012]      </block>
[20:51:48.012]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:51:48.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:51:48.012]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:51:48.012]        // while-condition  =>  FALSE
[20:51:48.012]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:51:48.012]      </control>
[20:51:48.012]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:51:48.012]        // if-block "(__protocol & 0xFFFF) == 1"
[20:51:48.012]          // =>  FALSE
[20:51:48.012]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:51:48.012]      </control>
[20:51:48.012]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:51:48.012]        // if-block "(__protocol & 0xFFFF) == 2"
[20:51:48.012]          // =>  TRUE
[20:51:48.012]        <block atomic="false" info="">
[20:51:48.012]          Message(0, "executing SWD power up");
[20:51:48.012]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:51:48.022]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:51:48.022]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:51:48.022]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:51:48.022]        </block>
[20:51:48.022]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:51:48.022]      </control>
[20:51:48.022]      // end if-block "powered_down"
[20:51:48.022]    </control>
[20:51:48.022]    <block atomic="false" info="">
[20:51:48.022]      __var DEBUG_PORT_VAL    = 0;
[20:51:48.022]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:51:48.022]      __var ACCESS_POINT_VAL  = 0;
[20:51:48.022]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:51:48.022]      __ap = 1; 
[20:51:48.022]        // -> [__ap <= 0x00000001]
[20:51:48.022]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:51:48.022]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:51:48.022]      __ap = 4;
[20:51:48.022]        // -> [__ap <= 0x00000004]
[20:51:48.022]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:48.032]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:51:48.032]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:51:48.032]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:48.032]    </block>
[20:51:48.032]    <block atomic="false" info="">
[20:51:48.042]      __var nReset = 0x80;
[20:51:48.042]        // -> [nReset <= 0x00000080]
[20:51:48.042]      __var canReadPins = 0;
[20:51:48.042]        // -> [canReadPins <= 0x00000000]
[20:51:48.042]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:51:48.043]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:51:48.043]        // -> [canReadPins <= 0x00000001]
[20:51:48.043]    </block>
[20:51:48.043]    <control if="" while="1" timeout="200" info="">
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.043]      // while "1"  (timeout="200")
[20:51:48.043]      // while-condition  =>  TRUE
[20:51:48.052]      // while "1"  (timeout="200")
[20:51:48.052]      // while  =>  TIMEOUT
[20:51:48.052]      // end while "1"
[20:51:48.052]    </control>
[20:51:48.052]    <control if="canReadPins" while="" timeout="0" info="">
[20:51:48.052]      // if-block "canReadPins"
[20:51:48.052]        // =>  TRUE
[20:51:48.052]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:51:48.052]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:51:48.052]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:51:48.052]        // while-condition  =>  FALSE
[20:51:48.052]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:51:48.052]      </control>
[20:51:48.052]      // end if-block "canReadPins"
[20:51:48.052]    </control>
[20:51:48.052]    <control if="!canReadPins" while="" timeout="0" info="">
[20:51:48.052]      // if-block "!canReadPins"
[20:51:48.052]        // =>  FALSE
[20:51:48.052]      // skip if-block "!canReadPins"
[20:51:48.052]    </control>
[20:51:48.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:51:48.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:48.052]        // =>  TRUE
[20:51:48.052]      <block atomic="false" info="">
[20:51:48.052]        WriteAP(0x00, 0x190008);
[20:51:48.062]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:48.062]        WriteAP(0xF0, 0x01);
[20:51:48.062]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:48.062]      </block>
[20:51:48.062]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:48.062]    </control>
[20:51:48.062]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:51:48.062]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:48.062]        // =>  FALSE
[20:51:48.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:48.062]    </control>
[20:51:48.062]    <block atomic="false" info="">
[20:51:48.062]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:48.072]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:51:48.072]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:51:48.072]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:48.072]      __ap = 0; //lets make sure we reset the access point selection
[20:51:48.072]        // -> [__ap <= 0x00000000]
[20:51:48.072]    </block>
[20:51:48.072]  </sequence>
[20:51:48.072]  
[20:51:48.112]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:51:48.112]  
[20:51:48.112]  <debugvars>
[20:51:48.112]    // Pre-defined
[20:51:48.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:48.112]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:51:48.112]    __dp=0x00000000
[20:51:48.112]    __ap=0x00000000
[20:51:48.112]    __traceout=0x00000000      (Trace Disabled)
[20:51:48.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:48.112]    __FlashAddr=0x00000000
[20:51:48.112]    __FlashLen=0x00000000
[20:51:48.112]    __FlashArg=0x00000000
[20:51:48.112]    __FlashOp=0x00000000
[20:51:48.112]    __Result=0x00000000
[20:51:48.112]  </debugvars>
[20:51:48.112]  
[20:51:48.112]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:51:48.112]    <block atomic="false" info="">
[20:51:48.112]      __var deviceID = 0;
[20:51:48.112]        // -> [deviceID <= 0x00000000]
[20:51:48.112]      __var version = 0;
[20:51:48.112]        // -> [version <= 0x00000000]
[20:51:48.112]      __var partNum = 0;
[20:51:48.112]        // -> [partNum <= 0x00000000]
[20:51:48.112]      __var manuf = 0;
[20:51:48.112]        // -> [manuf <= 0x00000000]
[20:51:48.112]      __var isMSPM0G1X0X_G3X0X = 0;
[20:51:48.112]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:51:48.112]      __var isProduction = 0;
[20:51:48.112]        // -> [isProduction <= 0x00000000]
[20:51:48.112]      __var continueId = 0;
[20:51:48.112]        // -> [continueId <= 0x00000000]
[20:51:48.112]      deviceID =   Read32(0x41C40004);
[20:51:48.132]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:51:48.132]        // -> [deviceID <= 0x2BB8802F]
[20:51:48.132]      version = deviceID >> 28;
[20:51:48.132]        // -> [version <= 0x00000002]
[20:51:48.132]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:51:48.132]        // -> [partNum <= 0x0000BB88]
[20:51:48.132]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:51:48.132]        // -> [manuf <= 0x00000017]
[20:51:48.132]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:51:48.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:51:48.132]      isProduction = (version > 0);
[20:51:48.132]        // -> [isProduction <= 0x00000001]
[20:51:48.132]    </block>
[20:51:48.132]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:51:48.132]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:51:48.132]        // =>  FALSE
[20:51:48.132]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:51:48.132]    </control>
[20:51:48.132]    <control if="continueId == 4" while="" timeout="0" info="">
[20:51:48.132]      // if-block "continueId == 4"
[20:51:48.132]        // =>  FALSE
[20:51:48.132]      // skip if-block "continueId == 4"
[20:51:48.132]    </control>
[20:51:48.132]    <control if="!isProduction" while="" timeout="0" info="">
[20:51:48.132]      // if-block "!isProduction"
[20:51:48.132]        // =>  FALSE
[20:51:48.132]      // skip if-block "!isProduction"
[20:51:48.132]    </control>
[20:51:48.132]  </sequence>
[20:51:48.132]  
[20:54:30.439]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:54:30.439]  
[20:54:30.451]  <debugvars>
[20:54:30.451]    // Pre-defined
[20:54:30.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:54:30.451]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:54:30.451]    __dp=0x00000000
[20:54:30.451]    __ap=0x00000000
[20:54:30.451]    __traceout=0x00000000      (Trace Disabled)
[20:54:30.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:54:30.451]    __FlashAddr=0x00000000
[20:54:30.451]    __FlashLen=0x00000000
[20:54:30.451]    __FlashArg=0x00000000
[20:54:30.451]    __FlashOp=0x00000000
[20:54:30.451]    __Result=0x00000000
[20:54:30.451]  </debugvars>
[20:54:30.451]  
[20:54:30.451]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:54:30.451]    <block atomic="false" info="">
[20:54:30.451]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:54:30.451]        // -> [isSWJ <= 0x00000001]
[20:54:30.451]      __var hasDormant = __protocol & 0x00020000;
[20:54:30.451]        // -> [hasDormant <= 0x00000000]
[20:54:30.451]      __var protType   = __protocol & 0x0000FFFF;
[20:54:30.451]        // -> [protType <= 0x00000002]
[20:54:30.451]    </block>
[20:54:30.451]    <control if="protType == 1" while="" timeout="0" info="">
[20:54:30.451]      // if-block "protType == 1"
[20:54:30.451]        // =>  FALSE
[20:54:30.451]      // skip if-block "protType == 1"
[20:54:30.451]    </control>
[20:54:30.451]    <control if="protType == 2" while="" timeout="0" info="">
[20:54:30.451]      // if-block "protType == 2"
[20:54:30.451]        // =>  TRUE
[20:54:30.451]      <control if="isSWJ" while="" timeout="0" info="">
[20:54:30.451]        // if-block "isSWJ"
[20:54:30.451]          // =>  TRUE
[20:54:30.451]        <control if="hasDormant" while="" timeout="0" info="">
[20:54:30.451]          // if-block "hasDormant"
[20:54:30.451]            // =>  FALSE
[20:54:30.451]          // skip if-block "hasDormant"
[20:54:30.451]        </control>
[20:54:30.451]        <control if="!hasDormant" while="" timeout="0" info="">
[20:54:30.451]          // if-block "!hasDormant"
[20:54:30.451]            // =>  TRUE
[20:54:30.451]          <block atomic="false" info="">
[20:54:30.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:54:30.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:54:30.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:54:30.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:54:30.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:54:30.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:54:30.459]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:54:30.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:54:30.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:54:30.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:54:30.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:54:30.466]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:54:30.466]          </block>
[20:54:30.466]          // end if-block "!hasDormant"
[20:54:30.466]        </control>
[20:54:30.466]        // end if-block "isSWJ"
[20:54:30.466]      </control>
[20:54:30.466]      <control if="!isSWJ" while="" timeout="0" info="">
[20:54:30.466]        // if-block "!isSWJ"
[20:54:30.466]          // =>  FALSE
[20:54:30.466]        // skip if-block "!isSWJ"
[20:54:30.466]      </control>
[20:54:30.466]      <block atomic="false" info="">
[20:54:30.466]        ReadDP(0x0);
[20:54:30.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:54:30.469]      </block>
[20:54:30.469]      // end if-block "protType == 2"
[20:54:30.469]    </control>
[20:54:30.469]  </sequence>
[20:54:30.469]  
[20:54:30.476]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:54:30.476]  
[20:54:30.476]  <debugvars>
[20:54:30.476]    // Pre-defined
[20:54:30.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:54:30.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:54:30.476]    __dp=0x00000000
[20:54:30.476]    __ap=0x00000000
[20:54:30.476]    __traceout=0x00000000      (Trace Disabled)
[20:54:30.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:54:30.476]    __FlashAddr=0x00000000
[20:54:30.476]    __FlashLen=0x00000000
[20:54:30.476]    __FlashArg=0x00000000
[20:54:30.476]    __FlashOp=0x00000000
[20:54:30.476]    __Result=0x00000000
[20:54:30.476]  </debugvars>
[20:54:30.476]  
[20:54:30.476]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:54:30.476]    <block atomic="false" info="">
[20:54:30.476]      __var SW_DP_ABORT       = 0x0;
[20:54:30.479]        // -> [SW_DP_ABORT <= 0x00000000]
[20:54:30.479]      __var DP_CTRL_STAT      = 0x4;
[20:54:30.479]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:54:30.479]      __var DP_SELECT         = 0x8;
[20:54:30.479]        // -> [DP_SELECT <= 0x00000008]
[20:54:30.479]      __var powered_down      = 0;
[20:54:30.479]        // -> [powered_down <= 0x00000000]
[20:54:30.479]      WriteDP(DP_SELECT, 0x00000000);
[20:54:30.479]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:54:30.479]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:54:30.479]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:54:30.479]        // -> [powered_down <= 0x00000001]
[20:54:30.479]    </block>
[20:54:30.479]    <control if="powered_down" while="" timeout="0" info="">
[20:54:30.486]      // if-block "powered_down"
[20:54:30.486]        // =>  TRUE
[20:54:30.486]      <block atomic="false" info="">
[20:54:30.486]        Message(0, "Debug/System power-up request sent");
[20:54:30.486]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:54:30.489]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:54:30.489]      </block>
[20:54:30.489]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:54:30.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:54:30.489]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:54:30.489]        // while-condition  =>  FALSE
[20:54:30.489]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:54:30.489]      </control>
[20:54:30.489]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:54:30.489]        // if-block "(__protocol & 0xFFFF) == 1"
[20:54:30.489]          // =>  FALSE
[20:54:30.489]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:54:30.489]      </control>
[20:54:30.489]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:54:30.489]        // if-block "(__protocol & 0xFFFF) == 2"
[20:54:30.489]          // =>  TRUE
[20:54:30.489]        <block atomic="false" info="">
[20:54:30.489]          Message(0, "executing SWD power up");
[20:54:30.489]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:54:30.499]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:54:30.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:54:30.499]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:54:30.501]        </block>
[20:54:30.501]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:54:30.502]      </control>
[20:54:30.502]      // end if-block "powered_down"
[20:54:30.502]    </control>
[20:54:30.502]    <block atomic="false" info="">
[20:54:30.502]      __var DEBUG_PORT_VAL    = 0;
[20:54:30.502]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:54:30.502]      __var ACCESS_POINT_VAL  = 0;
[20:54:30.502]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:54:30.502]      __ap = 1; 
[20:54:30.502]        // -> [__ap <= 0x00000001]
[20:54:30.502]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:54:30.502]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:54:30.506]      __ap = 4;
[20:54:30.506]        // -> [__ap <= 0x00000004]
[20:54:30.506]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:54:30.510]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:54:30.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:54:30.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:54:30.510]    </block>
[20:54:30.510]    <block atomic="false" info="">
[20:54:30.510]      __var nReset = 0x80;
[20:54:30.510]        // -> [nReset <= 0x00000080]
[20:54:30.510]      __var canReadPins = 0;
[20:54:30.510]        // -> [canReadPins <= 0x00000000]
[20:54:30.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:54:30.510]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:54:30.510]        // -> [canReadPins <= 0x00000001]
[20:54:30.510]    </block>
[20:54:30.510]    <control if="" while="1" timeout="200" info="">
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.510]      // while-condition  =>  TRUE
[20:54:30.510]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.516]      // while "1"  (timeout="200")
[20:54:30.516]      // while-condition  =>  TRUE
[20:54:30.520]      // while "1"  (timeout="200")
[20:54:30.520]      // while  =>  TIMEOUT
[20:54:30.520]      // end while "1"
[20:54:30.520]    </control>
[20:54:30.520]    <control if="canReadPins" while="" timeout="0" info="">
[20:54:30.520]      // if-block "canReadPins"
[20:54:30.520]        // =>  TRUE
[20:54:30.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:54:30.520]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:54:30.520]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:54:30.520]        // while-condition  =>  FALSE
[20:54:30.520]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:54:30.520]      </control>
[20:54:30.520]      // end if-block "canReadPins"
[20:54:30.520]    </control>
[20:54:30.520]    <control if="!canReadPins" while="" timeout="0" info="">
[20:54:30.520]      // if-block "!canReadPins"
[20:54:30.520]        // =>  FALSE
[20:54:30.520]      // skip if-block "!canReadPins"
[20:54:30.523]    </control>
[20:54:30.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:54:30.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:54:30.524]        // =>  TRUE
[20:54:30.524]      <block atomic="false" info="">
[20:54:30.524]        WriteAP(0x00, 0x190008);
[20:54:30.530]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:54:30.530]        WriteAP(0xF0, 0x01);
[20:54:30.536]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:54:30.536]      </block>
[20:54:30.536]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:54:30.536]    </control>
[20:54:30.536]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:54:30.536]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:54:30.536]        // =>  FALSE
[20:54:30.536]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:54:30.536]    </control>
[20:54:30.536]    <block atomic="false" info="">
[20:54:30.536]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:54:30.540]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:54:30.540]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:54:30.540]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:54:30.540]      __ap = 0; //lets make sure we reset the access point selection
[20:54:30.540]        // -> [__ap <= 0x00000000]
[20:54:30.540]    </block>
[20:54:30.540]  </sequence>
[20:54:30.540]  
[20:54:30.570]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:54:30.570]  
[20:54:30.570]  <debugvars>
[20:54:30.570]    // Pre-defined
[20:54:30.570]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:54:30.570]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:54:30.570]    __dp=0x00000000
[20:54:30.570]    __ap=0x00000000
[20:54:30.570]    __traceout=0x00000000      (Trace Disabled)
[20:54:30.570]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:54:30.570]    __FlashAddr=0x00000000
[20:54:30.570]    __FlashLen=0x00000000
[20:54:30.570]    __FlashArg=0x00000000
[20:54:30.570]    __FlashOp=0x00000000
[20:54:30.570]    __Result=0x00000000
[20:54:30.570]  </debugvars>
[20:54:30.570]  
[20:54:30.570]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:54:30.570]    <block atomic="false" info="">
[20:54:30.570]      __var deviceID = 0;
[20:54:30.570]        // -> [deviceID <= 0x00000000]
[20:54:30.570]      __var version = 0;
[20:54:30.570]        // -> [version <= 0x00000000]
[20:54:30.570]      __var partNum = 0;
[20:54:30.570]        // -> [partNum <= 0x00000000]
[20:54:30.570]      __var manuf = 0;
[20:54:30.570]        // -> [manuf <= 0x00000000]
[20:54:30.570]      __var isMSPM0G1X0X_G3X0X = 0;
[20:54:30.576]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:54:30.576]      __var isProduction = 0;
[20:54:30.576]        // -> [isProduction <= 0x00000000]
[20:54:30.576]      __var continueId = 0;
[20:54:30.576]        // -> [continueId <= 0x00000000]
[20:54:30.576]      deviceID =   Read32(0x41C40004);
[20:54:30.580]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:54:30.580]        // -> [deviceID <= 0x2BB8802F]
[20:54:30.580]      version = deviceID >> 28;
[20:54:30.580]        // -> [version <= 0x00000002]
[20:54:30.580]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:54:30.580]        // -> [partNum <= 0x0000BB88]
[20:54:30.580]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:54:30.580]        // -> [manuf <= 0x00000017]
[20:54:30.580]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:54:30.580]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:54:30.580]      isProduction = (version > 0);
[20:54:30.580]        // -> [isProduction <= 0x00000001]
[20:54:30.580]    </block>
[20:54:30.580]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:54:30.580]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:54:30.580]        // =>  FALSE
[20:54:30.580]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:54:30.580]    </control>
[20:54:30.580]    <control if="continueId == 4" while="" timeout="0" info="">
[20:54:30.580]      // if-block "continueId == 4"
[20:54:30.580]        // =>  FALSE
[20:54:30.580]      // skip if-block "continueId == 4"
[20:54:30.580]    </control>
[20:54:30.580]    <control if="!isProduction" while="" timeout="0" info="">
[20:54:30.580]      // if-block "!isProduction"
[20:54:30.580]        // =>  FALSE
[20:54:30.580]      // skip if-block "!isProduction"
[20:54:30.580]    </control>
[20:54:30.580]  </sequence>
[20:54:30.580]  
[20:56:34.243]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:56:34.243]  
[20:56:34.243]  <debugvars>
[20:56:34.243]    // Pre-defined
[20:56:34.243]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:34.243]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:34.243]    __dp=0x00000000
[20:56:34.243]    __ap=0x00000000
[20:56:34.243]    __traceout=0x00000000      (Trace Disabled)
[20:56:34.243]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:34.243]    __FlashAddr=0x00000000
[20:56:34.243]    __FlashLen=0x00000000
[20:56:34.243]    __FlashArg=0x00000000
[20:56:34.243]    __FlashOp=0x00000000
[20:56:34.243]    __Result=0x00000000
[20:56:34.243]  </debugvars>
[20:56:34.243]  
[20:56:34.243]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:56:34.243]    <block atomic="false" info="">
[20:56:34.243]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:56:34.243]        // -> [isSWJ <= 0x00000001]
[20:56:34.243]      __var hasDormant = __protocol & 0x00020000;
[20:56:34.243]        // -> [hasDormant <= 0x00000000]
[20:56:34.243]      __var protType   = __protocol & 0x0000FFFF;
[20:56:34.243]        // -> [protType <= 0x00000002]
[20:56:34.243]    </block>
[20:56:34.243]    <control if="protType == 1" while="" timeout="0" info="">
[20:56:34.243]      // if-block "protType == 1"
[20:56:34.243]        // =>  FALSE
[20:56:34.243]      // skip if-block "protType == 1"
[20:56:34.243]    </control>
[20:56:34.243]    <control if="protType == 2" while="" timeout="0" info="">
[20:56:34.243]      // if-block "protType == 2"
[20:56:34.243]        // =>  TRUE
[20:56:34.243]      <control if="isSWJ" while="" timeout="0" info="">
[20:56:34.243]        // if-block "isSWJ"
[20:56:34.243]          // =>  TRUE
[20:56:34.243]        <control if="hasDormant" while="" timeout="0" info="">
[20:56:34.243]          // if-block "hasDormant"
[20:56:34.243]            // =>  FALSE
[20:56:34.243]          // skip if-block "hasDormant"
[20:56:34.243]        </control>
[20:56:34.243]        <control if="!hasDormant" while="" timeout="0" info="">
[20:56:34.243]          // if-block "!hasDormant"
[20:56:34.243]            // =>  TRUE
[20:56:34.243]          <block atomic="false" info="">
[20:56:34.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:56:34.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:34.254]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:56:34.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:56:34.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:56:34.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:34.254]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:56:34.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:56:34.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:56:34.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:34.263]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:56:34.263]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:56:34.265]          </block>
[20:56:34.265]          // end if-block "!hasDormant"
[20:56:34.265]        </control>
[20:56:34.265]        // end if-block "isSWJ"
[20:56:34.265]      </control>
[20:56:34.265]      <control if="!isSWJ" while="" timeout="0" info="">
[20:56:34.265]        // if-block "!isSWJ"
[20:56:34.265]          // =>  FALSE
[20:56:34.265]        // skip if-block "!isSWJ"
[20:56:34.265]      </control>
[20:56:34.265]      <block atomic="false" info="">
[20:56:34.265]        ReadDP(0x0);
[20:56:34.265]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:56:34.265]      </block>
[20:56:34.265]      // end if-block "protType == 2"
[20:56:34.265]    </control>
[20:56:34.265]  </sequence>
[20:56:34.265]  
[20:56:34.265]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:56:34.265]  
[20:56:34.265]  <debugvars>
[20:56:34.265]    // Pre-defined
[20:56:34.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:34.265]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:34.273]    __dp=0x00000000
[20:56:34.273]    __ap=0x00000000
[20:56:34.273]    __traceout=0x00000000      (Trace Disabled)
[20:56:34.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:34.273]    __FlashAddr=0x00000000
[20:56:34.273]    __FlashLen=0x00000000
[20:56:34.273]    __FlashArg=0x00000000
[20:56:34.273]    __FlashOp=0x00000000
[20:56:34.273]    __Result=0x00000000
[20:56:34.273]  </debugvars>
[20:56:34.273]  
[20:56:34.273]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:56:34.273]    <block atomic="false" info="">
[20:56:34.273]      __var SW_DP_ABORT       = 0x0;
[20:56:34.273]        // -> [SW_DP_ABORT <= 0x00000000]
[20:56:34.273]      __var DP_CTRL_STAT      = 0x4;
[20:56:34.273]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:56:34.273]      __var DP_SELECT         = 0x8;
[20:56:34.273]        // -> [DP_SELECT <= 0x00000008]
[20:56:34.273]      __var powered_down      = 0;
[20:56:34.273]        // -> [powered_down <= 0x00000000]
[20:56:34.273]      WriteDP(DP_SELECT, 0x00000000);
[20:56:34.273]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:56:34.273]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:56:34.283]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:56:34.284]        // -> [powered_down <= 0x00000001]
[20:56:34.284]    </block>
[20:56:34.284]    <control if="powered_down" while="" timeout="0" info="">
[20:56:34.284]      // if-block "powered_down"
[20:56:34.285]        // =>  TRUE
[20:56:34.285]      <block atomic="false" info="">
[20:56:34.285]        Message(0, "Debug/System power-up request sent");
[20:56:34.286]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:56:34.287]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:56:34.287]      </block>
[20:56:34.287]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:56:34.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:56:34.287]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:56:34.287]        // while-condition  =>  FALSE
[20:56:34.287]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:56:34.287]      </control>
[20:56:34.287]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:56:34.287]        // if-block "(__protocol & 0xFFFF) == 1"
[20:56:34.287]          // =>  FALSE
[20:56:34.287]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:56:34.287]      </control>
[20:56:34.287]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:56:34.287]        // if-block "(__protocol & 0xFFFF) == 2"
[20:56:34.287]          // =>  TRUE
[20:56:34.287]        <block atomic="false" info="">
[20:56:34.287]          Message(0, "executing SWD power up");
[20:56:34.293]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:56:34.304]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:56:34.304]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:56:34.304]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:56:34.304]        </block>
[20:56:34.304]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:56:34.304]      </control>
[20:56:34.304]      // end if-block "powered_down"
[20:56:34.304]    </control>
[20:56:34.304]    <block atomic="false" info="">
[20:56:34.304]      __var DEBUG_PORT_VAL    = 0;
[20:56:34.304]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:56:34.304]      __var ACCESS_POINT_VAL  = 0;
[20:56:34.304]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:56:34.304]      __ap = 1; 
[20:56:34.304]        // -> [__ap <= 0x00000001]
[20:56:34.304]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:56:34.304]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:56:34.304]      __ap = 4;
[20:56:34.304]        // -> [__ap <= 0x00000004]
[20:56:34.304]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:34.314]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:56:34.314]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:56:34.314]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:34.314]    </block>
[20:56:34.314]    <block atomic="false" info="">
[20:56:34.314]      __var nReset = 0x80;
[20:56:34.314]        // -> [nReset <= 0x00000080]
[20:56:34.314]      __var canReadPins = 0;
[20:56:34.314]        // -> [canReadPins <= 0x00000000]
[20:56:34.314]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:56:34.314]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:56:34.314]        // -> [canReadPins <= 0x00000001]
[20:56:34.314]    </block>
[20:56:34.314]    <control if="" while="1" timeout="200" info="">
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.314]      // while-condition  =>  TRUE
[20:56:34.314]      // while "1"  (timeout="200")
[20:56:34.324]      // while-condition  =>  TRUE
[20:56:34.324]      // while "1"  (timeout="200")
[20:56:34.324]      // while  =>  TIMEOUT
[20:56:34.324]      // end while "1"
[20:56:34.324]    </control>
[20:56:34.324]    <control if="canReadPins" while="" timeout="0" info="">
[20:56:34.324]      // if-block "canReadPins"
[20:56:34.324]        // =>  TRUE
[20:56:34.324]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:56:34.324]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:56:34.324]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:56:34.324]        // while-condition  =>  FALSE
[20:56:34.324]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:56:34.324]      </control>
[20:56:34.324]      // end if-block "canReadPins"
[20:56:34.324]    </control>
[20:56:34.324]    <control if="!canReadPins" while="" timeout="0" info="">
[20:56:34.324]      // if-block "!canReadPins"
[20:56:34.324]        // =>  FALSE
[20:56:34.324]      // skip if-block "!canReadPins"
[20:56:34.324]    </control>
[20:56:34.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:56:34.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:34.324]        // =>  TRUE
[20:56:34.324]      <block atomic="false" info="">
[20:56:34.324]        WriteAP(0x00, 0x190008);
[20:56:34.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:34.334]        WriteAP(0xF0, 0x01);
[20:56:34.334]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:34.334]      </block>
[20:56:34.334]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:34.334]    </control>
[20:56:34.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:56:34.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:34.334]        // =>  FALSE
[20:56:34.344]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:34.344]    </control>
[20:56:34.344]    <block atomic="false" info="">
[20:56:34.344]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:34.344]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:56:34.344]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:56:34.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:34.344]      __ap = 0; //lets make sure we reset the access point selection
[20:56:34.344]        // -> [__ap <= 0x00000000]
[20:56:34.344]    </block>
[20:56:34.344]  </sequence>
[20:56:34.344]  
[20:56:34.364]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:56:34.364]  
[20:56:34.364]  <debugvars>
[20:56:34.364]    // Pre-defined
[20:56:34.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:34.364]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:34.364]    __dp=0x00000000
[20:56:34.364]    __ap=0x00000000
[20:56:34.364]    __traceout=0x00000000      (Trace Disabled)
[20:56:34.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:34.364]    __FlashAddr=0x00000000
[20:56:34.364]    __FlashLen=0x00000000
[20:56:34.364]    __FlashArg=0x00000000
[20:56:34.364]    __FlashOp=0x00000000
[20:56:34.364]    __Result=0x00000000
[20:56:34.364]  </debugvars>
[20:56:34.364]  
[20:56:34.364]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:56:34.364]    <block atomic="false" info="">
[20:56:34.364]      __var deviceID = 0;
[20:56:34.364]        // -> [deviceID <= 0x00000000]
[20:56:34.364]      __var version = 0;
[20:56:34.364]        // -> [version <= 0x00000000]
[20:56:34.364]      __var partNum = 0;
[20:56:34.364]        // -> [partNum <= 0x00000000]
[20:56:34.364]      __var manuf = 0;
[20:56:34.364]        // -> [manuf <= 0x00000000]
[20:56:34.364]      __var isMSPM0G1X0X_G3X0X = 0;
[20:56:34.364]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:56:34.364]      __var isProduction = 0;
[20:56:34.364]        // -> [isProduction <= 0x00000000]
[20:56:34.364]      __var continueId = 0;
[20:56:34.364]        // -> [continueId <= 0x00000000]
[20:56:34.364]      deviceID =   Read32(0x41C40004);
[20:56:34.374]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:56:34.374]        // -> [deviceID <= 0x2BB8802F]
[20:56:34.374]      version = deviceID >> 28;
[20:56:34.374]        // -> [version <= 0x00000002]
[20:56:34.374]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:56:34.374]        // -> [partNum <= 0x0000BB88]
[20:56:34.374]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:56:34.374]        // -> [manuf <= 0x00000017]
[20:56:34.374]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:56:34.374]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:56:34.374]      isProduction = (version > 0);
[20:56:34.374]        // -> [isProduction <= 0x00000001]
[20:56:34.374]    </block>
[20:56:34.374]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:56:34.384]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:56:34.384]        // =>  FALSE
[20:56:34.384]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:56:34.384]    </control>
[20:56:34.384]    <control if="continueId == 4" while="" timeout="0" info="">
[20:56:34.384]      // if-block "continueId == 4"
[20:56:34.384]        // =>  FALSE
[20:56:34.384]      // skip if-block "continueId == 4"
[20:56:34.384]    </control>
[20:56:34.384]    <control if="!isProduction" while="" timeout="0" info="">
[20:56:34.384]      // if-block "!isProduction"
[20:56:34.384]        // =>  FALSE
[20:56:34.384]      // skip if-block "!isProduction"
[20:56:34.384]    </control>
[20:56:34.384]  </sequence>
[20:56:34.384]  
[20:59:07.730]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:59:07.730]  
[20:59:07.738]  <debugvars>
[20:59:07.738]    // Pre-defined
[20:59:07.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:07.738]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:07.738]    __dp=0x00000000
[20:59:07.738]    __ap=0x00000000
[20:59:07.738]    __traceout=0x00000000      (Trace Disabled)
[20:59:07.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:07.738]    __FlashAddr=0x00000000
[20:59:07.738]    __FlashLen=0x00000000
[20:59:07.738]    __FlashArg=0x00000000
[20:59:07.738]    __FlashOp=0x00000000
[20:59:07.738]    __Result=0x00000000
[20:59:07.738]  </debugvars>
[20:59:07.740]  
[20:59:07.740]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:59:07.740]    <block atomic="false" info="">
[20:59:07.740]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:59:07.740]        // -> [isSWJ <= 0x00000001]
[20:59:07.740]      __var hasDormant = __protocol & 0x00020000;
[20:59:07.740]        // -> [hasDormant <= 0x00000000]
[20:59:07.740]      __var protType   = __protocol & 0x0000FFFF;
[20:59:07.740]        // -> [protType <= 0x00000002]
[20:59:07.740]    </block>
[20:59:07.740]    <control if="protType == 1" while="" timeout="0" info="">
[20:59:07.740]      // if-block "protType == 1"
[20:59:07.740]        // =>  FALSE
[20:59:07.740]      // skip if-block "protType == 1"
[20:59:07.740]    </control>
[20:59:07.740]    <control if="protType == 2" while="" timeout="0" info="">
[20:59:07.740]      // if-block "protType == 2"
[20:59:07.740]        // =>  TRUE
[20:59:07.740]      <control if="isSWJ" while="" timeout="0" info="">
[20:59:07.740]        // if-block "isSWJ"
[20:59:07.740]          // =>  TRUE
[20:59:07.740]        <control if="hasDormant" while="" timeout="0" info="">
[20:59:07.740]          // if-block "hasDormant"
[20:59:07.740]            // =>  FALSE
[20:59:07.740]          // skip if-block "hasDormant"
[20:59:07.740]        </control>
[20:59:07.740]        <control if="!hasDormant" while="" timeout="0" info="">
[20:59:07.740]          // if-block "!hasDormant"
[20:59:07.740]            // =>  TRUE
[20:59:07.740]          <block atomic="false" info="">
[20:59:07.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:59:07.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:07.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:59:07.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:59:07.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:59:07.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:07.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:59:07.758]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:59:07.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:59:07.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:07.760]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:59:07.760]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:59:07.760]          </block>
[20:59:07.760]          // end if-block "!hasDormant"
[20:59:07.760]        </control>
[20:59:07.760]        // end if-block "isSWJ"
[20:59:07.760]      </control>
[20:59:07.760]      <control if="!isSWJ" while="" timeout="0" info="">
[20:59:07.768]        // if-block "!isSWJ"
[20:59:07.768]          // =>  FALSE
[20:59:07.768]        // skip if-block "!isSWJ"
[20:59:07.768]      </control>
[20:59:07.768]      <block atomic="false" info="">
[20:59:07.768]        ReadDP(0x0);
[20:59:07.768]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:59:07.768]      </block>
[20:59:07.768]      // end if-block "protType == 2"
[20:59:07.768]    </control>
[20:59:07.768]  </sequence>
[20:59:07.768]  
[20:59:07.768]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:59:07.768]  
[20:59:07.768]  <debugvars>
[20:59:07.768]    // Pre-defined
[20:59:07.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:07.768]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:07.768]    __dp=0x00000000
[20:59:07.768]    __ap=0x00000000
[20:59:07.768]    __traceout=0x00000000      (Trace Disabled)
[20:59:07.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:07.768]    __FlashAddr=0x00000000
[20:59:07.768]    __FlashLen=0x00000000
[20:59:07.768]    __FlashArg=0x00000000
[20:59:07.768]    __FlashOp=0x00000000
[20:59:07.768]    __Result=0x00000000
[20:59:07.768]  </debugvars>
[20:59:07.768]  
[20:59:07.768]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:59:07.768]    <block atomic="false" info="">
[20:59:07.768]      __var SW_DP_ABORT       = 0x0;
[20:59:07.768]        // -> [SW_DP_ABORT <= 0x00000000]
[20:59:07.768]      __var DP_CTRL_STAT      = 0x4;
[20:59:07.768]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:59:07.768]      __var DP_SELECT         = 0x8;
[20:59:07.768]        // -> [DP_SELECT <= 0x00000008]
[20:59:07.768]      __var powered_down      = 0;
[20:59:07.768]        // -> [powered_down <= 0x00000000]
[20:59:07.768]      WriteDP(DP_SELECT, 0x00000000);
[20:59:07.778]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:59:07.780]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:59:07.780]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:59:07.780]        // -> [powered_down <= 0x00000001]
[20:59:07.780]    </block>
[20:59:07.780]    <control if="powered_down" while="" timeout="0" info="">
[20:59:07.780]      // if-block "powered_down"
[20:59:07.780]        // =>  TRUE
[20:59:07.780]      <block atomic="false" info="">
[20:59:07.780]        Message(0, "Debug/System power-up request sent");
[20:59:07.782]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:59:07.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:59:07.783]      </block>
[20:59:07.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:59:07.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:59:07.783]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:59:07.783]        // while-condition  =>  FALSE
[20:59:07.783]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:59:07.783]      </control>
[20:59:07.783]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:59:07.783]        // if-block "(__protocol & 0xFFFF) == 1"
[20:59:07.783]          // =>  FALSE
[20:59:07.783]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:59:07.783]      </control>
[20:59:07.783]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:59:07.783]        // if-block "(__protocol & 0xFFFF) == 2"
[20:59:07.783]          // =>  TRUE
[20:59:07.783]        <block atomic="false" info="">
[20:59:07.783]          Message(0, "executing SWD power up");
[20:59:07.783]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:59:07.789]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:59:07.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:59:07.793]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:59:07.793]        </block>
[20:59:07.793]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:59:07.793]      </control>
[20:59:07.793]      // end if-block "powered_down"
[20:59:07.793]    </control>
[20:59:07.793]    <block atomic="false" info="">
[20:59:07.793]      __var DEBUG_PORT_VAL    = 0;
[20:59:07.793]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:59:07.793]      __var ACCESS_POINT_VAL  = 0;
[20:59:07.793]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:59:07.793]      __ap = 1; 
[20:59:07.793]        // -> [__ap <= 0x00000001]
[20:59:07.793]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:59:07.809]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:59:07.809]      __ap = 4;
[20:59:07.809]        // -> [__ap <= 0x00000004]
[20:59:07.809]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:07.813]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:59:07.813]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:59:07.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:07.813]    </block>
[20:59:07.816]    <block atomic="false" info="">
[20:59:07.816]      __var nReset = 0x80;
[20:59:07.816]        // -> [nReset <= 0x00000080]
[20:59:07.816]      __var canReadPins = 0;
[20:59:07.816]        // -> [canReadPins <= 0x00000000]
[20:59:07.816]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:59:07.822]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:59:07.822]        // -> [canReadPins <= 0x00000001]
[20:59:07.822]    </block>
[20:59:07.822]    <control if="" while="1" timeout="200" info="">
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.822]      // while-condition  =>  TRUE
[20:59:07.822]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.829]      // while "1"  (timeout="200")
[20:59:07.829]      // while-condition  =>  TRUE
[20:59:07.839]      // while "1"  (timeout="200")
[20:59:07.839]      // while  =>  TIMEOUT
[20:59:07.839]      // end while "1"
[20:59:07.839]    </control>
[20:59:07.839]    <control if="canReadPins" while="" timeout="0" info="">
[20:59:07.839]      // if-block "canReadPins"
[20:59:07.839]        // =>  TRUE
[20:59:07.839]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:59:07.840]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:59:07.841]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:59:07.841]        // while-condition  =>  FALSE
[20:59:07.841]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:59:07.841]      </control>
[20:59:07.850]      // end if-block "canReadPins"
[20:59:07.850]    </control>
[20:59:07.850]    <control if="!canReadPins" while="" timeout="0" info="">
[20:59:07.850]      // if-block "!canReadPins"
[20:59:07.850]        // =>  FALSE
[20:59:07.850]      // skip if-block "!canReadPins"
[20:59:07.850]    </control>
[20:59:07.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:59:07.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:07.850]        // =>  TRUE
[20:59:07.850]      <block atomic="false" info="">
[20:59:07.850]        WriteAP(0x00, 0x190008);
[20:59:07.850]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:07.850]        WriteAP(0xF0, 0x01);
[20:59:07.850]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:07.850]      </block>
[20:59:07.850]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:07.850]    </control>
[20:59:07.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:59:07.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:07.850]        // =>  FALSE
[20:59:07.850]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:07.850]    </control>
[20:59:07.850]    <block atomic="false" info="">
[20:59:07.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:07.870]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:59:07.870]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:59:07.870]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:07.870]      __ap = 0; //lets make sure we reset the access point selection
[20:59:07.870]        // -> [__ap <= 0x00000000]
[20:59:07.870]    </block>
[20:59:07.870]  </sequence>
[20:59:07.870]  
[20:59:07.892]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:59:07.892]  
[20:59:07.892]  <debugvars>
[20:59:07.892]    // Pre-defined
[20:59:07.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:07.892]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:07.892]    __dp=0x00000000
[20:59:07.892]    __ap=0x00000000
[20:59:07.892]    __traceout=0x00000000      (Trace Disabled)
[20:59:07.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:07.892]    __FlashAddr=0x00000000
[20:59:07.892]    __FlashLen=0x00000000
[20:59:07.892]    __FlashArg=0x00000000
[20:59:07.892]    __FlashOp=0x00000000
[20:59:07.892]    __Result=0x00000000
[20:59:07.892]  </debugvars>
[20:59:07.892]  
[20:59:07.892]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:59:07.892]    <block atomic="false" info="">
[20:59:07.892]      __var deviceID = 0;
[20:59:07.892]        // -> [deviceID <= 0x00000000]
[20:59:07.892]      __var version = 0;
[20:59:07.892]        // -> [version <= 0x00000000]
[20:59:07.892]      __var partNum = 0;
[20:59:07.892]        // -> [partNum <= 0x00000000]
[20:59:07.892]      __var manuf = 0;
[20:59:07.892]        // -> [manuf <= 0x00000000]
[20:59:07.892]      __var isMSPM0G1X0X_G3X0X = 0;
[20:59:07.892]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:59:07.892]      __var isProduction = 0;
[20:59:07.892]        // -> [isProduction <= 0x00000000]
[20:59:07.892]      __var continueId = 0;
[20:59:07.898]        // -> [continueId <= 0x00000000]
[20:59:07.898]      deviceID =   Read32(0x41C40004);
[20:59:07.903]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:59:07.903]        // -> [deviceID <= 0x2BB8802F]
[20:59:07.903]      version = deviceID >> 28;
[20:59:07.903]        // -> [version <= 0x00000002]
[20:59:07.903]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:59:07.903]        // -> [partNum <= 0x0000BB88]
[20:59:07.903]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:59:07.903]        // -> [manuf <= 0x00000017]
[20:59:07.903]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:59:07.903]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:59:07.903]      isProduction = (version > 0);
[20:59:07.903]        // -> [isProduction <= 0x00000001]
[20:59:07.903]    </block>
[20:59:07.903]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:59:07.903]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:59:07.903]        // =>  FALSE
[20:59:07.903]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:59:07.903]    </control>
[20:59:07.903]    <control if="continueId == 4" while="" timeout="0" info="">
[20:59:07.903]      // if-block "continueId == 4"
[20:59:07.903]        // =>  FALSE
[20:59:07.903]      // skip if-block "continueId == 4"
[20:59:07.903]    </control>
[20:59:07.903]    <control if="!isProduction" while="" timeout="0" info="">
[20:59:07.903]      // if-block "!isProduction"
[20:59:07.903]        // =>  FALSE
[20:59:07.908]      // skip if-block "!isProduction"
[20:59:07.908]    </control>
[20:59:07.908]  </sequence>
[20:59:07.908]  
[20:59:38.536]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:59:38.536]  
[20:59:38.536]  <debugvars>
[20:59:38.536]    // Pre-defined
[20:59:38.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:38.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:38.536]    __dp=0x00000000
[20:59:38.536]    __ap=0x00000000
[20:59:38.536]    __traceout=0x00000000      (Trace Disabled)
[20:59:38.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:38.536]    __FlashAddr=0x00000000
[20:59:38.536]    __FlashLen=0x00000000
[20:59:38.536]    __FlashArg=0x00000000
[20:59:38.536]    __FlashOp=0x00000000
[20:59:38.536]    __Result=0x00000000
[20:59:38.536]  </debugvars>
[20:59:38.536]  
[20:59:38.536]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:59:38.536]    <block atomic="false" info="">
[20:59:38.536]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:59:38.536]        // -> [isSWJ <= 0x00000001]
[20:59:38.541]      __var hasDormant = __protocol & 0x00020000;
[20:59:38.541]        // -> [hasDormant <= 0x00000000]
[20:59:38.541]      __var protType   = __protocol & 0x0000FFFF;
[20:59:38.541]        // -> [protType <= 0x00000002]
[20:59:38.541]    </block>
[20:59:38.541]    <control if="protType == 1" while="" timeout="0" info="">
[20:59:38.541]      // if-block "protType == 1"
[20:59:38.541]        // =>  FALSE
[20:59:38.541]      // skip if-block "protType == 1"
[20:59:38.541]    </control>
[20:59:38.541]    <control if="protType == 2" while="" timeout="0" info="">
[20:59:38.541]      // if-block "protType == 2"
[20:59:38.541]        // =>  TRUE
[20:59:38.541]      <control if="isSWJ" while="" timeout="0" info="">
[20:59:38.542]        // if-block "isSWJ"
[20:59:38.542]          // =>  TRUE
[20:59:38.542]        <control if="hasDormant" while="" timeout="0" info="">
[20:59:38.542]          // if-block "hasDormant"
[20:59:38.542]            // =>  FALSE
[20:59:38.542]          // skip if-block "hasDormant"
[20:59:38.542]        </control>
[20:59:38.542]        <control if="!hasDormant" while="" timeout="0" info="">
[20:59:38.542]          // if-block "!hasDormant"
[20:59:38.542]            // =>  TRUE
[20:59:38.542]          <block atomic="false" info="">
[20:59:38.542]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:59:38.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:38.546]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:59:38.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:59:38.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:59:38.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:38.556]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:59:38.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:59:38.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:59:38.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:38.566]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:59:38.566]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:59:38.566]          </block>
[20:59:38.566]          // end if-block "!hasDormant"
[20:59:38.566]        </control>
[20:59:38.566]        // end if-block "isSWJ"
[20:59:38.566]      </control>
[20:59:38.566]      <control if="!isSWJ" while="" timeout="0" info="">
[20:59:38.566]        // if-block "!isSWJ"
[20:59:38.566]          // =>  FALSE
[20:59:38.566]        // skip if-block "!isSWJ"
[20:59:38.566]      </control>
[20:59:38.566]      <block atomic="false" info="">
[20:59:38.566]        ReadDP(0x0);
[20:59:38.571]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:59:38.571]      </block>
[20:59:38.571]      // end if-block "protType == 2"
[20:59:38.571]    </control>
[20:59:38.571]  </sequence>
[20:59:38.571]  
[20:59:38.576]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:59:38.576]  
[20:59:38.576]  <debugvars>
[20:59:38.576]    // Pre-defined
[20:59:38.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:38.576]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:38.576]    __dp=0x00000000
[20:59:38.576]    __ap=0x00000000
[20:59:38.576]    __traceout=0x00000000      (Trace Disabled)
[20:59:38.576]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:38.576]    __FlashAddr=0x00000000
[20:59:38.576]    __FlashLen=0x00000000
[20:59:38.576]    __FlashArg=0x00000000
[20:59:38.576]    __FlashOp=0x00000000
[20:59:38.576]    __Result=0x00000000
[20:59:38.576]  </debugvars>
[20:59:38.576]  
[20:59:38.576]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:59:38.576]    <block atomic="false" info="">
[20:59:38.576]      __var SW_DP_ABORT       = 0x0;
[20:59:38.576]        // -> [SW_DP_ABORT <= 0x00000000]
[20:59:38.576]      __var DP_CTRL_STAT      = 0x4;
[20:59:38.576]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:59:38.576]      __var DP_SELECT         = 0x8;
[20:59:38.576]        // -> [DP_SELECT <= 0x00000008]
[20:59:38.576]      __var powered_down      = 0;
[20:59:38.576]        // -> [powered_down <= 0x00000000]
[20:59:38.576]      WriteDP(DP_SELECT, 0x00000000);
[20:59:38.586]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:59:38.586]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:59:38.586]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:59:38.586]        // -> [powered_down <= 0x00000001]
[20:59:38.586]    </block>
[20:59:38.586]    <control if="powered_down" while="" timeout="0" info="">
[20:59:38.586]      // if-block "powered_down"
[20:59:38.586]        // =>  TRUE
[20:59:38.586]      <block atomic="false" info="">
[20:59:38.586]        Message(0, "Debug/System power-up request sent");
[20:59:38.586]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:59:38.591]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:59:38.591]      </block>
[20:59:38.591]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:59:38.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:59:38.594]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:59:38.594]        // while-condition  =>  FALSE
[20:59:38.594]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:59:38.594]      </control>
[20:59:38.594]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:59:38.594]        // if-block "(__protocol & 0xFFFF) == 1"
[20:59:38.594]          // =>  FALSE
[20:59:38.594]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:59:38.594]      </control>
[20:59:38.594]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:59:38.594]        // if-block "(__protocol & 0xFFFF) == 2"
[20:59:38.594]          // =>  TRUE
[20:59:38.594]        <block atomic="false" info="">
[20:59:38.594]          Message(0, "executing SWD power up");
[20:59:38.596]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:59:38.596]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:59:38.596]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:59:38.600]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:59:38.602]        </block>
[20:59:38.602]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:59:38.602]      </control>
[20:59:38.602]      // end if-block "powered_down"
[20:59:38.602]    </control>
[20:59:38.602]    <block atomic="false" info="">
[20:59:38.602]      __var DEBUG_PORT_VAL    = 0;
[20:59:38.602]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:59:38.602]      __var ACCESS_POINT_VAL  = 0;
[20:59:38.602]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:59:38.602]      __ap = 1; 
[20:59:38.602]        // -> [__ap <= 0x00000001]
[20:59:38.602]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:59:38.612]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:59:38.612]      __ap = 4;
[20:59:38.612]        // -> [__ap <= 0x00000004]
[20:59:38.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:38.616]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:59:38.616]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:59:38.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:38.620]    </block>
[20:59:38.620]    <block atomic="false" info="">
[20:59:38.620]      __var nReset = 0x80;
[20:59:38.620]        // -> [nReset <= 0x00000080]
[20:59:38.620]      __var canReadPins = 0;
[20:59:38.620]        // -> [canReadPins <= 0x00000000]
[20:59:38.620]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:59:38.621]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:59:38.621]        // -> [canReadPins <= 0x00000001]
[20:59:38.621]    </block>
[20:59:38.621]    <control if="" while="1" timeout="200" info="">
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.621]      // while-condition  =>  TRUE
[20:59:38.621]      // while "1"  (timeout="200")
[20:59:38.632]      // while-condition  =>  TRUE
[20:59:38.632]      // while "1"  (timeout="200")
[20:59:38.632]      // while  =>  TIMEOUT
[20:59:38.632]      // end while "1"
[20:59:38.632]    </control>
[20:59:38.632]    <control if="canReadPins" while="" timeout="0" info="">
[20:59:38.632]      // if-block "canReadPins"
[20:59:38.632]        // =>  TRUE
[20:59:38.632]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:59:38.632]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:59:38.634]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:59:38.634]        // while-condition  =>  FALSE
[20:59:38.634]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:59:38.634]      </control>
[20:59:38.634]      // end if-block "canReadPins"
[20:59:38.634]    </control>
[20:59:38.634]    <control if="!canReadPins" while="" timeout="0" info="">
[20:59:38.634]      // if-block "!canReadPins"
[20:59:38.634]        // =>  FALSE
[20:59:38.634]      // skip if-block "!canReadPins"
[20:59:38.634]    </control>
[20:59:38.634]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:59:38.634]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:38.634]        // =>  TRUE
[20:59:38.634]      <block atomic="false" info="">
[20:59:38.634]        WriteAP(0x00, 0x190008);
[20:59:38.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:38.634]        WriteAP(0xF0, 0x01);
[20:59:38.641]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:38.641]      </block>
[20:59:38.642]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:38.642]    </control>
[20:59:38.642]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:59:38.642]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:38.642]        // =>  FALSE
[20:59:38.642]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:38.642]    </control>
[20:59:38.642]    <block atomic="false" info="">
[20:59:38.642]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:38.642]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:59:38.642]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:59:38.642]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:38.652]      __ap = 0; //lets make sure we reset the access point selection
[20:59:38.652]        // -> [__ap <= 0x00000000]
[20:59:38.652]    </block>
[20:59:38.652]  </sequence>
[20:59:38.652]  
[20:59:38.686]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:59:38.686]  
[20:59:38.686]  <debugvars>
[20:59:38.686]    // Pre-defined
[20:59:38.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:38.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:38.686]    __dp=0x00000000
[20:59:38.686]    __ap=0x00000000
[20:59:38.686]    __traceout=0x00000000      (Trace Disabled)
[20:59:38.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:38.686]    __FlashAddr=0x00000000
[20:59:38.686]    __FlashLen=0x00000000
[20:59:38.686]    __FlashArg=0x00000000
[20:59:38.686]    __FlashOp=0x00000000
[20:59:38.686]    __Result=0x00000000
[20:59:38.686]  </debugvars>
[20:59:38.686]  
[20:59:38.686]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:59:38.686]    <block atomic="false" info="">
[20:59:38.686]      __var deviceID = 0;
[20:59:38.686]        // -> [deviceID <= 0x00000000]
[20:59:38.686]      __var version = 0;
[20:59:38.686]        // -> [version <= 0x00000000]
[20:59:38.686]      __var partNum = 0;
[20:59:38.686]        // -> [partNum <= 0x00000000]
[20:59:38.686]      __var manuf = 0;
[20:59:38.686]        // -> [manuf <= 0x00000000]
[20:59:38.686]      __var isMSPM0G1X0X_G3X0X = 0;
[20:59:38.686]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:59:38.686]      __var isProduction = 0;
[20:59:38.686]        // -> [isProduction <= 0x00000000]
[20:59:38.686]      __var continueId = 0;
[20:59:38.686]        // -> [continueId <= 0x00000000]
[20:59:38.686]      deviceID =   Read32(0x41C40004);
[20:59:38.696]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:59:38.696]        // -> [deviceID <= 0x2BB8802F]
[20:59:38.696]      version = deviceID >> 28;
[20:59:38.696]        // -> [version <= 0x00000002]
[20:59:38.696]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:59:38.696]        // -> [partNum <= 0x0000BB88]
[20:59:38.696]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:59:38.696]        // -> [manuf <= 0x00000017]
[20:59:38.696]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:59:38.696]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:59:38.696]      isProduction = (version > 0);
[20:59:38.696]        // -> [isProduction <= 0x00000001]
[20:59:38.696]    </block>
[20:59:38.696]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:59:38.696]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:59:38.696]        // =>  FALSE
[20:59:38.696]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:59:38.696]    </control>
[20:59:38.696]    <control if="continueId == 4" while="" timeout="0" info="">
[20:59:38.696]      // if-block "continueId == 4"
[20:59:38.696]        // =>  FALSE
[20:59:38.696]      // skip if-block "continueId == 4"
[20:59:38.696]    </control>
[20:59:38.696]    <control if="!isProduction" while="" timeout="0" info="">
[20:59:38.696]      // if-block "!isProduction"
[20:59:38.696]        // =>  FALSE
[20:59:38.696]      // skip if-block "!isProduction"
[20:59:38.696]    </control>
[20:59:38.696]  </sequence>
[20:59:38.696]  
[20:59:54.902]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:59:54.902]  
[20:59:54.915]  <debugvars>
[20:59:54.915]    // Pre-defined
[20:59:54.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:54.915]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:54.915]    __dp=0x00000000
[20:59:54.915]    __ap=0x00000000
[20:59:54.915]    __traceout=0x00000000      (Trace Disabled)
[20:59:54.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:54.915]    __FlashAddr=0x00000000
[20:59:54.915]    __FlashLen=0x00000000
[20:59:54.915]    __FlashArg=0x00000000
[20:59:54.915]    __FlashOp=0x00000000
[20:59:54.915]    __Result=0x00000000
[20:59:54.915]  </debugvars>
[20:59:54.915]  
[20:59:54.915]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:59:54.915]    <block atomic="false" info="">
[20:59:54.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:59:54.915]        // -> [isSWJ <= 0x00000001]
[20:59:54.915]      __var hasDormant = __protocol & 0x00020000;
[20:59:54.915]        // -> [hasDormant <= 0x00000000]
[20:59:54.915]      __var protType   = __protocol & 0x0000FFFF;
[20:59:54.915]        // -> [protType <= 0x00000002]
[20:59:54.915]    </block>
[20:59:54.915]    <control if="protType == 1" while="" timeout="0" info="">
[20:59:54.915]      // if-block "protType == 1"
[20:59:54.915]        // =>  FALSE
[20:59:54.915]      // skip if-block "protType == 1"
[20:59:54.915]    </control>
[20:59:54.915]    <control if="protType == 2" while="" timeout="0" info="">
[20:59:54.915]      // if-block "protType == 2"
[20:59:54.915]        // =>  TRUE
[20:59:54.915]      <control if="isSWJ" while="" timeout="0" info="">
[20:59:54.915]        // if-block "isSWJ"
[20:59:54.915]          // =>  TRUE
[20:59:54.915]        <control if="hasDormant" while="" timeout="0" info="">
[20:59:54.915]          // if-block "hasDormant"
[20:59:54.915]            // =>  FALSE
[20:59:54.915]          // skip if-block "hasDormant"
[20:59:54.915]        </control>
[20:59:54.915]        <control if="!hasDormant" while="" timeout="0" info="">
[20:59:54.915]          // if-block "!hasDormant"
[20:59:54.915]            // =>  TRUE
[20:59:54.920]          <block atomic="false" info="">
[20:59:54.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:59:54.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:54.921]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:59:54.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:59:54.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:59:54.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:54.922]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:59:54.927]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:59:54.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:59:54.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:54.927]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:59:54.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:59:54.930]          </block>
[20:59:54.930]          // end if-block "!hasDormant"
[20:59:54.930]        </control>
[20:59:54.930]        // end if-block "isSWJ"
[20:59:54.930]      </control>
[20:59:54.930]      <control if="!isSWJ" while="" timeout="0" info="">
[20:59:54.930]        // if-block "!isSWJ"
[20:59:54.930]          // =>  FALSE
[20:59:54.930]        // skip if-block "!isSWJ"
[20:59:54.930]      </control>
[20:59:54.930]      <block atomic="false" info="">
[20:59:54.930]        ReadDP(0x0);
[20:59:54.932]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:59:54.932]      </block>
[20:59:54.932]      // end if-block "protType == 2"
[20:59:54.932]    </control>
[20:59:54.932]  </sequence>
[20:59:54.932]  
[20:59:54.932]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:59:54.932]  
[20:59:54.932]  <debugvars>
[20:59:54.932]    // Pre-defined
[20:59:54.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:54.932]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:54.932]    __dp=0x00000000
[20:59:54.932]    __ap=0x00000000
[20:59:54.932]    __traceout=0x00000000      (Trace Disabled)
[20:59:54.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:54.932]    __FlashAddr=0x00000000
[20:59:54.932]    __FlashLen=0x00000000
[20:59:54.932]    __FlashArg=0x00000000
[20:59:54.932]    __FlashOp=0x00000000
[20:59:54.932]    __Result=0x00000000
[20:59:54.932]  </debugvars>
[20:59:54.932]  
[20:59:54.932]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:59:54.932]    <block atomic="false" info="">
[20:59:54.932]      __var SW_DP_ABORT       = 0x0;
[20:59:54.932]        // -> [SW_DP_ABORT <= 0x00000000]
[20:59:54.932]      __var DP_CTRL_STAT      = 0x4;
[20:59:54.932]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:59:54.932]      __var DP_SELECT         = 0x8;
[20:59:54.932]        // -> [DP_SELECT <= 0x00000008]
[20:59:54.932]      __var powered_down      = 0;
[20:59:54.932]        // -> [powered_down <= 0x00000000]
[20:59:54.932]      WriteDP(DP_SELECT, 0x00000000);
[20:59:54.940]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:59:54.940]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:59:54.940]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:59:54.940]        // -> [powered_down <= 0x00000001]
[20:59:54.940]    </block>
[20:59:54.940]    <control if="powered_down" while="" timeout="0" info="">
[20:59:54.940]      // if-block "powered_down"
[20:59:54.940]        // =>  TRUE
[20:59:54.940]      <block atomic="false" info="">
[20:59:54.940]        Message(0, "Debug/System power-up request sent");
[20:59:54.940]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:59:54.951]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:59:54.951]      </block>
[20:59:54.951]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:59:54.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:59:54.953]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:59:54.953]        // while-condition  =>  FALSE
[20:59:54.953]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:59:54.953]      </control>
[20:59:54.953]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:59:54.953]        // if-block "(__protocol & 0xFFFF) == 1"
[20:59:54.953]          // =>  FALSE
[20:59:54.953]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:59:54.953]      </control>
[20:59:54.953]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:59:54.953]        // if-block "(__protocol & 0xFFFF) == 2"
[20:59:54.953]          // =>  TRUE
[20:59:54.953]        <block atomic="false" info="">
[20:59:54.953]          Message(0, "executing SWD power up");
[20:59:54.953]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:59:54.953]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:59:54.953]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:59:54.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:59:54.963]        </block>
[20:59:54.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:59:54.963]      </control>
[20:59:54.963]      // end if-block "powered_down"
[20:59:54.963]    </control>
[20:59:54.963]    <block atomic="false" info="">
[20:59:54.963]      __var DEBUG_PORT_VAL    = 0;
[20:59:54.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:59:54.963]      __var ACCESS_POINT_VAL  = 0;
[20:59:54.963]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:59:54.963]      __ap = 1; 
[20:59:54.963]        // -> [__ap <= 0x00000001]
[20:59:54.963]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:59:54.963]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:59:54.963]      __ap = 4;
[20:59:54.963]        // -> [__ap <= 0x00000004]
[20:59:54.963]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:54.971]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:59:54.971]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:59:54.971]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:54.971]    </block>
[20:59:54.971]    <block atomic="false" info="">
[20:59:54.971]      __var nReset = 0x80;
[20:59:54.971]        // -> [nReset <= 0x00000080]
[20:59:54.971]      __var canReadPins = 0;
[20:59:54.971]        // -> [canReadPins <= 0x00000000]
[20:59:54.971]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:59:54.971]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:59:54.971]        // -> [canReadPins <= 0x00000001]
[20:59:54.971]    </block>
[20:59:54.971]    <control if="" while="1" timeout="200" info="">
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.971]      // while "1"  (timeout="200")
[20:59:54.971]      // while-condition  =>  TRUE
[20:59:54.980]      // while "1"  (timeout="200")
[20:59:54.980]      // while  =>  TIMEOUT
[20:59:54.980]      // end while "1"
[20:59:54.980]    </control>
[20:59:54.980]    <control if="canReadPins" while="" timeout="0" info="">
[20:59:54.980]      // if-block "canReadPins"
[20:59:54.980]        // =>  TRUE
[20:59:54.980]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:59:54.980]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:59:54.983]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:59:54.983]        // while-condition  =>  FALSE
[20:59:54.983]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:59:54.983]      </control>
[20:59:54.983]      // end if-block "canReadPins"
[20:59:54.983]    </control>
[20:59:54.983]    <control if="!canReadPins" while="" timeout="0" info="">
[20:59:54.983]      // if-block "!canReadPins"
[20:59:54.983]        // =>  FALSE
[20:59:54.983]      // skip if-block "!canReadPins"
[20:59:54.983]    </control>
[20:59:54.991]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:59:54.991]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:54.991]        // =>  TRUE
[20:59:54.991]      <block atomic="false" info="">
[20:59:54.991]        WriteAP(0x00, 0x190008);
[20:59:54.991]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:54.991]        WriteAP(0xF0, 0x01);
[20:59:54.991]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:55.001]      </block>
[20:59:55.002]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:55.002]    </control>
[20:59:55.002]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:59:55.002]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:55.002]        // =>  FALSE
[20:59:55.002]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:55.002]    </control>
[20:59:55.002]    <block atomic="false" info="">
[20:59:55.002]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:55.002]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:59:55.002]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:59:55.002]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:55.002]      __ap = 0; //lets make sure we reset the access point selection
[20:59:55.002]        // -> [__ap <= 0x00000000]
[20:59:55.002]    </block>
[20:59:55.002]  </sequence>
[20:59:55.002]  
[20:59:55.042]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:59:55.042]  
[20:59:55.042]  <debugvars>
[20:59:55.042]    // Pre-defined
[20:59:55.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:55.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:59:55.042]    __dp=0x00000000
[20:59:55.042]    __ap=0x00000000
[20:59:55.042]    __traceout=0x00000000      (Trace Disabled)
[20:59:55.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:55.042]    __FlashAddr=0x00000000
[20:59:55.042]    __FlashLen=0x00000000
[20:59:55.042]    __FlashArg=0x00000000
[20:59:55.042]    __FlashOp=0x00000000
[20:59:55.042]    __Result=0x00000000
[20:59:55.042]  </debugvars>
[20:59:55.042]  
[20:59:55.042]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:59:55.042]    <block atomic="false" info="">
[20:59:55.042]      __var deviceID = 0;
[20:59:55.042]        // -> [deviceID <= 0x00000000]
[20:59:55.042]      __var version = 0;
[20:59:55.042]        // -> [version <= 0x00000000]
[20:59:55.042]      __var partNum = 0;
[20:59:55.042]        // -> [partNum <= 0x00000000]
[20:59:55.042]      __var manuf = 0;
[20:59:55.042]        // -> [manuf <= 0x00000000]
[20:59:55.042]      __var isMSPM0G1X0X_G3X0X = 0;
[20:59:55.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:59:55.042]      __var isProduction = 0;
[20:59:55.042]        // -> [isProduction <= 0x00000000]
[20:59:55.042]      __var continueId = 0;
[20:59:55.042]        // -> [continueId <= 0x00000000]
[20:59:55.042]      deviceID =   Read32(0x41C40004);
[20:59:55.042]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:59:55.042]        // -> [deviceID <= 0x2BB8802F]
[20:59:55.042]      version = deviceID >> 28;
[20:59:55.042]        // -> [version <= 0x00000002]
[20:59:55.042]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:59:55.042]        // -> [partNum <= 0x0000BB88]
[20:59:55.042]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:59:55.042]        // -> [manuf <= 0x00000017]
[20:59:55.052]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:59:55.052]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:59:55.052]      isProduction = (version > 0);
[20:59:55.052]        // -> [isProduction <= 0x00000001]
[20:59:55.052]    </block>
[20:59:55.052]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:59:55.052]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:59:55.052]        // =>  FALSE
[20:59:55.052]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:59:55.052]    </control>
[20:59:55.052]    <control if="continueId == 4" while="" timeout="0" info="">
[20:59:55.052]      // if-block "continueId == 4"
[20:59:55.052]        // =>  FALSE
[20:59:55.052]      // skip if-block "continueId == 4"
[20:59:55.052]    </control>
[20:59:55.052]    <control if="!isProduction" while="" timeout="0" info="">
[20:59:55.052]      // if-block "!isProduction"
[20:59:55.052]        // =>  FALSE
[20:59:55.052]      // skip if-block "!isProduction"
[20:59:55.052]    </control>
[20:59:55.052]  </sequence>
[20:59:55.052]  
[21:02:49.094]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:02:49.094]  
[21:02:49.094]  <debugvars>
[21:02:49.094]    // Pre-defined
[21:02:49.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:49.096]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:49.096]    __dp=0x00000000
[21:02:49.096]    __ap=0x00000000
[21:02:49.096]    __traceout=0x00000000      (Trace Disabled)
[21:02:49.096]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:49.096]    __FlashAddr=0x00000000
[21:02:49.096]    __FlashLen=0x00000000
[21:02:49.096]    __FlashArg=0x00000000
[21:02:49.096]    __FlashOp=0x00000000
[21:02:49.096]    __Result=0x00000000
[21:02:49.096]  </debugvars>
[21:02:49.096]  
[21:02:49.096]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:02:49.096]    <block atomic="false" info="">
[21:02:49.098]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:02:49.098]        // -> [isSWJ <= 0x00000001]
[21:02:49.098]      __var hasDormant = __protocol & 0x00020000;
[21:02:49.098]        // -> [hasDormant <= 0x00000000]
[21:02:49.098]      __var protType   = __protocol & 0x0000FFFF;
[21:02:49.098]        // -> [protType <= 0x00000002]
[21:02:49.098]    </block>
[21:02:49.098]    <control if="protType == 1" while="" timeout="0" info="">
[21:02:49.098]      // if-block "protType == 1"
[21:02:49.098]        // =>  FALSE
[21:02:49.098]      // skip if-block "protType == 1"
[21:02:49.098]    </control>
[21:02:49.098]    <control if="protType == 2" while="" timeout="0" info="">
[21:02:49.098]      // if-block "protType == 2"
[21:02:49.098]        // =>  TRUE
[21:02:49.098]      <control if="isSWJ" while="" timeout="0" info="">
[21:02:49.098]        // if-block "isSWJ"
[21:02:49.098]          // =>  TRUE
[21:02:49.098]        <control if="hasDormant" while="" timeout="0" info="">
[21:02:49.098]          // if-block "hasDormant"
[21:02:49.098]            // =>  FALSE
[21:02:49.098]          // skip if-block "hasDormant"
[21:02:49.098]        </control>
[21:02:49.098]        <control if="!hasDormant" while="" timeout="0" info="">
[21:02:49.098]          // if-block "!hasDormant"
[21:02:49.098]            // =>  TRUE
[21:02:49.098]          <block atomic="false" info="">
[21:02:49.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:02:49.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:49.102]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:02:49.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:02:49.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:02:49.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:49.106]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:02:49.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:02:49.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:02:49.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:49.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:02:49.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:02:49.122]          </block>
[21:02:49.122]          // end if-block "!hasDormant"
[21:02:49.122]        </control>
[21:02:49.122]        // end if-block "isSWJ"
[21:02:49.122]      </control>
[21:02:49.122]      <control if="!isSWJ" while="" timeout="0" info="">
[21:02:49.122]        // if-block "!isSWJ"
[21:02:49.122]          // =>  FALSE
[21:02:49.122]        // skip if-block "!isSWJ"
[21:02:49.126]      </control>
[21:02:49.126]      <block atomic="false" info="">
[21:02:49.127]        ReadDP(0x0);
[21:02:49.127]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:02:49.127]      </block>
[21:02:49.130]      // end if-block "protType == 2"
[21:02:49.130]    </control>
[21:02:49.130]  </sequence>
[21:02:49.130]  
[21:02:49.130]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:02:49.130]  
[21:02:49.130]  <debugvars>
[21:02:49.130]    // Pre-defined
[21:02:49.130]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:49.130]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:49.130]    __dp=0x00000000
[21:02:49.130]    __ap=0x00000000
[21:02:49.130]    __traceout=0x00000000      (Trace Disabled)
[21:02:49.130]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:49.130]    __FlashAddr=0x00000000
[21:02:49.134]    __FlashLen=0x00000000
[21:02:49.134]    __FlashArg=0x00000000
[21:02:49.134]    __FlashOp=0x00000000
[21:02:49.134]    __Result=0x00000000
[21:02:49.134]  </debugvars>
[21:02:49.134]  
[21:02:49.134]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:02:49.134]    <block atomic="false" info="">
[21:02:49.134]      __var SW_DP_ABORT       = 0x0;
[21:02:49.134]        // -> [SW_DP_ABORT <= 0x00000000]
[21:02:49.136]      __var DP_CTRL_STAT      = 0x4;
[21:02:49.136]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:02:49.136]      __var DP_SELECT         = 0x8;
[21:02:49.136]        // -> [DP_SELECT <= 0x00000008]
[21:02:49.136]      __var powered_down      = 0;
[21:02:49.136]        // -> [powered_down <= 0x00000000]
[21:02:49.136]      WriteDP(DP_SELECT, 0x00000000);
[21:02:49.139]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:02:49.139]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:02:49.141]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:02:49.141]        // -> [powered_down <= 0x00000001]
[21:02:49.141]    </block>
[21:02:49.141]    <control if="powered_down" while="" timeout="0" info="">
[21:02:49.141]      // if-block "powered_down"
[21:02:49.141]        // =>  TRUE
[21:02:49.141]      <block atomic="false" info="">
[21:02:49.141]        Message(0, "Debug/System power-up request sent");
[21:02:49.143]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:02:49.146]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:02:49.146]      </block>
[21:02:49.146]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:02:49.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:02:49.150]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:02:49.150]        // while-condition  =>  FALSE
[21:02:49.150]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:02:49.150]      </control>
[21:02:49.150]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:02:49.150]        // if-block "(__protocol & 0xFFFF) == 1"
[21:02:49.150]          // =>  FALSE
[21:02:49.150]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:02:49.150]      </control>
[21:02:49.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:02:49.150]        // if-block "(__protocol & 0xFFFF) == 2"
[21:02:49.150]          // =>  TRUE
[21:02:49.150]        <block atomic="false" info="">
[21:02:49.150]          Message(0, "executing SWD power up");
[21:02:49.154]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:02:49.156]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:02:49.156]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:02:49.159]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:02:49.159]        </block>
[21:02:49.159]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:02:49.159]      </control>
[21:02:49.159]      // end if-block "powered_down"
[21:02:49.159]    </control>
[21:02:49.159]    <block atomic="false" info="">
[21:02:49.159]      __var DEBUG_PORT_VAL    = 0;
[21:02:49.159]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:02:49.159]      __var ACCESS_POINT_VAL  = 0;
[21:02:49.159]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:02:49.159]      __ap = 1; 
[21:02:49.159]        // -> [__ap <= 0x00000001]
[21:02:49.159]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:02:49.162]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:02:49.162]      __ap = 4;
[21:02:49.162]        // -> [__ap <= 0x00000004]
[21:02:49.162]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:49.171]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:02:49.171]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:02:49.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:49.175]    </block>
[21:02:49.175]    <block atomic="false" info="">
[21:02:49.175]      __var nReset = 0x80;
[21:02:49.175]        // -> [nReset <= 0x00000080]
[21:02:49.175]      __var canReadPins = 0;
[21:02:49.175]        // -> [canReadPins <= 0x00000000]
[21:02:49.175]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:02:49.179]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:02:49.179]        // -> [canReadPins <= 0x00000001]
[21:02:49.179]    </block>
[21:02:49.179]    <control if="" while="1" timeout="200" info="">
[21:02:49.180]      // while "1"  (timeout="200")
[21:02:49.180]      // while-condition  =>  TRUE
[21:02:49.180]      // while "1"  (timeout="200")
[21:02:49.180]      // while-condition  =>  TRUE
[21:02:49.180]      // while "1"  (timeout="200")
[21:02:49.180]      // while-condition  =>  TRUE
[21:02:49.180]      // while "1"  (timeout="200")
[21:02:49.180]      // while-condition  =>  TRUE
[21:02:49.180]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.181]      // while-condition  =>  TRUE
[21:02:49.181]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.183]      // while "1"  (timeout="200")
[21:02:49.183]      // while-condition  =>  TRUE
[21:02:49.186]      // while "1"  (timeout="200")
[21:02:49.186]      // while-condition  =>  TRUE
[21:02:49.186]      // while "1"  (timeout="200")
[21:02:49.186]      // while-condition  =>  TRUE
[21:02:49.186]      // while "1"  (timeout="200")
[21:02:49.186]      // while-condition  =>  TRUE
[21:02:49.186]      // while "1"  (timeout="200")
[21:02:49.186]      // while-condition  =>  TRUE
[21:02:49.187]      // while "1"  (timeout="200")
[21:02:49.187]      // while-condition  =>  TRUE
[21:02:49.187]      // while "1"  (timeout="200")
[21:02:49.188]      // while-condition  =>  TRUE
[21:02:49.188]      // while "1"  (timeout="200")
[21:02:49.188]      // while-condition  =>  TRUE
[21:02:49.188]      // while "1"  (timeout="200")
[21:02:49.188]      // while-condition  =>  TRUE
[21:02:49.188]      // while "1"  (timeout="200")
[21:02:49.189]      // while-condition  =>  TRUE
[21:02:49.189]      // while "1"  (timeout="200")
[21:02:49.189]      // while-condition  =>  TRUE
[21:02:49.189]      // while "1"  (timeout="200")
[21:02:49.189]      // while-condition  =>  TRUE
[21:02:49.189]      // while "1"  (timeout="200")
[21:02:49.190]      // while-condition  =>  TRUE
[21:02:49.190]      // while "1"  (timeout="200")
[21:02:49.190]      // while-condition  =>  TRUE
[21:02:49.190]      // while "1"  (timeout="200")
[21:02:49.190]      // while-condition  =>  TRUE
[21:02:49.190]      // while "1"  (timeout="200")
[21:02:49.190]      // while-condition  =>  TRUE
[21:02:49.190]      // while "1"  (timeout="200")
[21:02:49.190]      // while-condition  =>  TRUE
[21:02:49.190]      // while "1"  (timeout="200")
[21:02:49.191]      // while-condition  =>  TRUE
[21:02:49.191]      // while "1"  (timeout="200")
[21:02:49.191]      // while  =>  TIMEOUT
[21:02:49.191]      // end while "1"
[21:02:49.191]    </control>
[21:02:49.191]    <control if="canReadPins" while="" timeout="0" info="">
[21:02:49.191]      // if-block "canReadPins"
[21:02:49.191]        // =>  TRUE
[21:02:49.192]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:02:49.192]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:02:49.193]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:02:49.194]        // while-condition  =>  FALSE
[21:02:49.194]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:02:49.194]      </control>
[21:02:49.194]      // end if-block "canReadPins"
[21:02:49.194]    </control>
[21:02:49.194]    <control if="!canReadPins" while="" timeout="0" info="">
[21:02:49.194]      // if-block "!canReadPins"
[21:02:49.194]        // =>  FALSE
[21:02:49.194]      // skip if-block "!canReadPins"
[21:02:49.195]    </control>
[21:02:49.195]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:02:49.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:49.195]        // =>  TRUE
[21:02:49.195]      <block atomic="false" info="">
[21:02:49.195]        WriteAP(0x00, 0x190008);
[21:02:49.196]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:49.196]        WriteAP(0xF0, 0x01);
[21:02:49.200]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:49.200]      </block>
[21:02:49.200]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:49.200]    </control>
[21:02:49.200]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:02:49.200]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:49.200]        // =>  FALSE
[21:02:49.200]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:49.200]    </control>
[21:02:49.200]    <block atomic="false" info="">
[21:02:49.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:49.207]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:02:49.207]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:02:49.207]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:49.210]      __ap = 0; //lets make sure we reset the access point selection
[21:02:49.210]        // -> [__ap <= 0x00000000]
[21:02:49.211]    </block>
[21:02:49.211]  </sequence>
[21:02:49.211]  
[21:02:49.241]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:02:49.241]  
[21:02:49.241]  <debugvars>
[21:02:49.241]    // Pre-defined
[21:02:49.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:49.241]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:49.241]    __dp=0x00000000
[21:02:49.241]    __ap=0x00000000
[21:02:49.241]    __traceout=0x00000000      (Trace Disabled)
[21:02:49.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:49.241]    __FlashAddr=0x00000000
[21:02:49.241]    __FlashLen=0x00000000
[21:02:49.241]    __FlashArg=0x00000000
[21:02:49.241]    __FlashOp=0x00000000
[21:02:49.241]    __Result=0x00000000
[21:02:49.241]  </debugvars>
[21:02:49.241]  
[21:02:49.244]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:02:49.244]    <block atomic="false" info="">
[21:02:49.244]      __var deviceID = 0;
[21:02:49.244]        // -> [deviceID <= 0x00000000]
[21:02:49.244]      __var version = 0;
[21:02:49.244]        // -> [version <= 0x00000000]
[21:02:49.245]      __var partNum = 0;
[21:02:49.245]        // -> [partNum <= 0x00000000]
[21:02:49.245]      __var manuf = 0;
[21:02:49.245]        // -> [manuf <= 0x00000000]
[21:02:49.245]      __var isMSPM0G1X0X_G3X0X = 0;
[21:02:49.245]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:02:49.245]      __var isProduction = 0;
[21:02:49.245]        // -> [isProduction <= 0x00000000]
[21:02:49.245]      __var continueId = 0;
[21:02:49.246]        // -> [continueId <= 0x00000000]
[21:02:49.246]      deviceID =   Read32(0x41C40004);
[21:02:49.255]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:02:49.255]        // -> [deviceID <= 0x2BB8802F]
[21:02:49.256]      version = deviceID >> 28;
[21:02:49.256]        // -> [version <= 0x00000002]
[21:02:49.257]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:02:49.257]        // -> [partNum <= 0x0000BB88]
[21:02:49.257]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:02:49.257]        // -> [manuf <= 0x00000017]
[21:02:49.257]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:02:49.257]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:02:49.257]      isProduction = (version > 0);
[21:02:49.258]        // -> [isProduction <= 0x00000001]
[21:02:49.258]    </block>
[21:02:49.258]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:02:49.258]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:02:49.258]        // =>  FALSE
[21:02:49.258]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:02:49.258]    </control>
[21:02:49.258]    <control if="continueId == 4" while="" timeout="0" info="">
[21:02:49.258]      // if-block "continueId == 4"
[21:02:49.258]        // =>  FALSE
[21:02:49.258]      // skip if-block "continueId == 4"
[21:02:49.258]    </control>
[21:02:49.258]    <control if="!isProduction" while="" timeout="0" info="">
[21:02:49.258]      // if-block "!isProduction"
[21:02:49.258]        // =>  FALSE
[21:02:49.258]      // skip if-block "!isProduction"
[21:02:49.258]    </control>
[21:02:49.258]  </sequence>
[21:02:49.258]  
[21:03:00.875]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:03:00.875]  
[21:03:00.885]  <debugvars>
[21:03:00.885]    // Pre-defined
[21:03:00.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:00.885]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:03:00.885]    __dp=0x00000000
[21:03:00.885]    __ap=0x00000000
[21:03:00.885]    __traceout=0x00000000      (Trace Disabled)
[21:03:00.886]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:00.886]    __FlashAddr=0x00000000
[21:03:00.886]    __FlashLen=0x00000000
[21:03:00.886]    __FlashArg=0x00000000
[21:03:00.886]    __FlashOp=0x00000000
[21:03:00.886]    __Result=0x00000000
[21:03:00.886]  </debugvars>
[21:03:00.886]  
[21:03:00.886]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:03:00.886]    <block atomic="false" info="">
[21:03:00.886]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:03:00.886]        // -> [isSWJ <= 0x00000001]
[21:03:00.886]      __var hasDormant = __protocol & 0x00020000;
[21:03:00.886]        // -> [hasDormant <= 0x00000000]
[21:03:00.886]      __var protType   = __protocol & 0x0000FFFF;
[21:03:00.886]        // -> [protType <= 0x00000002]
[21:03:00.886]    </block>
[21:03:00.886]    <control if="protType == 1" while="" timeout="0" info="">
[21:03:00.886]      // if-block "protType == 1"
[21:03:00.886]        // =>  FALSE
[21:03:00.888]      // skip if-block "protType == 1"
[21:03:00.888]    </control>
[21:03:00.888]    <control if="protType == 2" while="" timeout="0" info="">
[21:03:00.888]      // if-block "protType == 2"
[21:03:00.888]        // =>  TRUE
[21:03:00.888]      <control if="isSWJ" while="" timeout="0" info="">
[21:03:00.888]        // if-block "isSWJ"
[21:03:00.888]          // =>  TRUE
[21:03:00.889]        <control if="hasDormant" while="" timeout="0" info="">
[21:03:00.889]          // if-block "hasDormant"
[21:03:00.889]            // =>  FALSE
[21:03:00.889]          // skip if-block "hasDormant"
[21:03:00.889]        </control>
[21:03:00.889]        <control if="!hasDormant" while="" timeout="0" info="">
[21:03:00.889]          // if-block "!hasDormant"
[21:03:00.889]            // =>  TRUE
[21:03:00.889]          <block atomic="false" info="">
[21:03:00.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:03:00.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:00.897]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:03:00.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:03:00.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:03:00.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:00.903]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:03:00.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:03:00.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:03:00.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:03:00.906]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:03:00.906]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:03:00.906]          </block>
[21:03:00.906]          // end if-block "!hasDormant"
[21:03:00.906]        </control>
[21:03:00.906]        // end if-block "isSWJ"
[21:03:00.906]      </control>
[21:03:00.906]      <control if="!isSWJ" while="" timeout="0" info="">
[21:03:00.906]        // if-block "!isSWJ"
[21:03:00.906]          // =>  FALSE
[21:03:00.906]        // skip if-block "!isSWJ"
[21:03:00.906]      </control>
[21:03:00.906]      <block atomic="false" info="">
[21:03:00.906]        ReadDP(0x0);
[21:03:00.912]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:03:00.912]      </block>
[21:03:00.912]      // end if-block "protType == 2"
[21:03:00.912]    </control>
[21:03:00.912]  </sequence>
[21:03:00.912]  
[21:03:00.915]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:03:00.915]  
[21:03:00.915]  <debugvars>
[21:03:00.915]    // Pre-defined
[21:03:00.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:00.915]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:03:00.915]    __dp=0x00000000
[21:03:00.919]    __ap=0x00000000
[21:03:00.919]    __traceout=0x00000000      (Trace Disabled)
[21:03:00.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:00.919]    __FlashAddr=0x00000000
[21:03:00.919]    __FlashLen=0x00000000
[21:03:00.919]    __FlashArg=0x00000000
[21:03:00.919]    __FlashOp=0x00000000
[21:03:00.919]    __Result=0x00000000
[21:03:00.919]  </debugvars>
[21:03:00.919]  
[21:03:00.919]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:03:00.919]    <block atomic="false" info="">
[21:03:00.919]      __var SW_DP_ABORT       = 0x0;
[21:03:00.919]        // -> [SW_DP_ABORT <= 0x00000000]
[21:03:00.919]      __var DP_CTRL_STAT      = 0x4;
[21:03:00.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:03:00.919]      __var DP_SELECT         = 0x8;
[21:03:00.919]        // -> [DP_SELECT <= 0x00000008]
[21:03:00.919]      __var powered_down      = 0;
[21:03:00.919]        // -> [powered_down <= 0x00000000]
[21:03:00.919]      WriteDP(DP_SELECT, 0x00000000);
[21:03:00.919]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:03:00.919]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:03:00.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:03:00.924]        // -> [powered_down <= 0x00000001]
[21:03:00.924]    </block>
[21:03:00.924]    <control if="powered_down" while="" timeout="0" info="">
[21:03:00.924]      // if-block "powered_down"
[21:03:00.924]        // =>  TRUE
[21:03:00.924]      <block atomic="false" info="">
[21:03:00.924]        Message(0, "Debug/System power-up request sent");
[21:03:00.927]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:03:00.927]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:03:00.927]      </block>
[21:03:00.927]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:03:00.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:03:00.931]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:03:00.931]        // while-condition  =>  FALSE
[21:03:00.931]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:03:00.931]      </control>
[21:03:00.931]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:03:00.931]        // if-block "(__protocol & 0xFFFF) == 1"
[21:03:00.931]          // =>  FALSE
[21:03:00.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:03:00.931]      </control>
[21:03:00.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:03:00.931]        // if-block "(__protocol & 0xFFFF) == 2"
[21:03:00.931]          // =>  TRUE
[21:03:00.931]        <block atomic="false" info="">
[21:03:00.931]          Message(0, "executing SWD power up");
[21:03:00.931]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:03:00.935]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:03:00.935]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:03:00.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:03:00.936]        </block>
[21:03:00.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:03:00.936]      </control>
[21:03:00.936]      // end if-block "powered_down"
[21:03:00.936]    </control>
[21:03:00.936]    <block atomic="false" info="">
[21:03:00.936]      __var DEBUG_PORT_VAL    = 0;
[21:03:00.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:03:00.936]      __var ACCESS_POINT_VAL  = 0;
[21:03:00.936]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:03:00.936]      __ap = 1; 
[21:03:00.936]        // -> [__ap <= 0x00000001]
[21:03:00.936]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:03:00.952]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:03:00.952]      __ap = 4;
[21:03:00.952]        // -> [__ap <= 0x00000004]
[21:03:00.952]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:03:00.956]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:03:00.956]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:03:00.956]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:03:00.956]    </block>
[21:03:00.956]    <block atomic="false" info="">
[21:03:00.956]      __var nReset = 0x80;
[21:03:00.956]        // -> [nReset <= 0x00000080]
[21:03:00.956]      __var canReadPins = 0;
[21:03:00.956]        // -> [canReadPins <= 0x00000000]
[21:03:00.956]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:03:00.960]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:03:00.960]        // -> [canReadPins <= 0x00000001]
[21:03:00.960]    </block>
[21:03:00.960]    <control if="" while="1" timeout="200" info="">
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.960]      // while "1"  (timeout="200")
[21:03:00.960]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.964]      // while-condition  =>  TRUE
[21:03:00.964]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.968]      // while-condition  =>  TRUE
[21:03:00.968]      // while "1"  (timeout="200")
[21:03:00.972]      // while-condition  =>  TRUE
[21:03:00.972]      // while "1"  (timeout="200")
[21:03:00.972]      // while-condition  =>  TRUE
[21:03:00.972]      // while "1"  (timeout="200")
[21:03:00.972]      // while-condition  =>  TRUE
[21:03:00.972]      // while "1"  (timeout="200")
[21:03:00.972]      // while-condition  =>  TRUE
[21:03:00.972]      // while "1"  (timeout="200")
[21:03:00.973]      // while-condition  =>  TRUE
[21:03:00.973]      // while "1"  (timeout="200")
[21:03:00.973]      // while  =>  TIMEOUT
[21:03:00.973]      // end while "1"
[21:03:00.973]    </control>
[21:03:00.973]    <control if="canReadPins" while="" timeout="0" info="">
[21:03:00.973]      // if-block "canReadPins"
[21:03:00.973]        // =>  TRUE
[21:03:00.973]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:03:00.973]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:03:00.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:03:00.973]        // while-condition  =>  FALSE
[21:03:00.976]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:03:00.976]      </control>
[21:03:00.976]      // end if-block "canReadPins"
[21:03:00.976]    </control>
[21:03:00.976]    <control if="!canReadPins" while="" timeout="0" info="">
[21:03:00.976]      // if-block "!canReadPins"
[21:03:00.976]        // =>  FALSE
[21:03:00.976]      // skip if-block "!canReadPins"
[21:03:00.976]    </control>
[21:03:00.976]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:03:00.976]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:03:00.976]        // =>  TRUE
[21:03:00.976]      <block atomic="false" info="">
[21:03:00.976]        WriteAP(0x00, 0x190008);
[21:03:00.976]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:03:00.976]        WriteAP(0xF0, 0x01);
[21:03:00.985]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:03:00.985]      </block>
[21:03:00.985]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:03:00.985]    </control>
[21:03:00.985]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:03:00.985]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:03:00.985]        // =>  FALSE
[21:03:00.985]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:03:00.985]    </control>
[21:03:00.985]    <block atomic="false" info="">
[21:03:00.985]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:03:00.992]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:03:00.992]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:03:00.992]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:03:00.996]      __ap = 0; //lets make sure we reset the access point selection
[21:03:00.996]        // -> [__ap <= 0x00000000]
[21:03:00.996]    </block>
[21:03:00.996]  </sequence>
[21:03:00.996]  
[21:03:01.017]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:03:01.017]  
[21:03:01.017]  <debugvars>
[21:03:01.017]    // Pre-defined
[21:03:01.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:03:01.017]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:03:01.017]    __dp=0x00000000
[21:03:01.021]    __ap=0x00000000
[21:03:01.021]    __traceout=0x00000000      (Trace Disabled)
[21:03:01.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:03:01.021]    __FlashAddr=0x00000000
[21:03:01.021]    __FlashLen=0x00000000
[21:03:01.021]    __FlashArg=0x00000000
[21:03:01.021]    __FlashOp=0x00000000
[21:03:01.021]    __Result=0x00000000
[21:03:01.021]  </debugvars>
[21:03:01.021]  
[21:03:01.021]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:03:01.021]    <block atomic="false" info="">
[21:03:01.021]      __var deviceID = 0;
[21:03:01.021]        // -> [deviceID <= 0x00000000]
[21:03:01.021]      __var version = 0;
[21:03:01.021]        // -> [version <= 0x00000000]
[21:03:01.021]      __var partNum = 0;
[21:03:01.021]        // -> [partNum <= 0x00000000]
[21:03:01.021]      __var manuf = 0;
[21:03:01.021]        // -> [manuf <= 0x00000000]
[21:03:01.021]      __var isMSPM0G1X0X_G3X0X = 0;
[21:03:01.021]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:03:01.021]      __var isProduction = 0;
[21:03:01.021]        // -> [isProduction <= 0x00000000]
[21:03:01.021]      __var continueId = 0;
[21:03:01.021]        // -> [continueId <= 0x00000000]
[21:03:01.021]      deviceID =   Read32(0x41C40004);
[21:03:01.029]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:03:01.029]        // -> [deviceID <= 0x2BB8802F]
[21:03:01.029]      version = deviceID >> 28;
[21:03:01.029]        // -> [version <= 0x00000002]
[21:03:01.029]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:03:01.033]        // -> [partNum <= 0x0000BB88]
[21:03:01.033]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:03:01.033]        // -> [manuf <= 0x00000017]
[21:03:01.033]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:03:01.033]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:03:01.033]      isProduction = (version > 0);
[21:03:01.033]        // -> [isProduction <= 0x00000001]
[21:03:01.033]    </block>
[21:03:01.033]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:03:01.033]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:03:01.033]        // =>  FALSE
[21:03:01.033]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:03:01.033]    </control>
[21:03:01.033]    <control if="continueId == 4" while="" timeout="0" info="">
[21:03:01.033]      // if-block "continueId == 4"
[21:03:01.033]        // =>  FALSE
[21:03:01.033]      // skip if-block "continueId == 4"
[21:03:01.033]    </control>
[21:03:01.033]    <control if="!isProduction" while="" timeout="0" info="">
[21:03:01.033]      // if-block "!isProduction"
[21:03:01.033]        // =>  FALSE
[21:03:01.033]      // skip if-block "!isProduction"
[21:03:01.033]    </control>
[21:03:01.033]  </sequence>
[21:03:01.033]  
[21:08:19.284]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:08:19.284]  
[21:08:19.288]  <debugvars>
[21:08:19.288]    // Pre-defined
[21:08:19.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:19.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:19.288]    __dp=0x00000000
[21:08:19.288]    __ap=0x00000000
[21:08:19.288]    __traceout=0x00000000      (Trace Disabled)
[21:08:19.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:19.288]    __FlashAddr=0x00000000
[21:08:19.288]    __FlashLen=0x00000000
[21:08:19.288]    __FlashArg=0x00000000
[21:08:19.288]    __FlashOp=0x00000000
[21:08:19.288]    __Result=0x00000000
[21:08:19.288]  </debugvars>
[21:08:19.288]  
[21:08:19.288]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:08:19.288]    <block atomic="false" info="">
[21:08:19.288]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:08:19.288]        // -> [isSWJ <= 0x00000001]
[21:08:19.288]      __var hasDormant = __protocol & 0x00020000;
[21:08:19.288]        // -> [hasDormant <= 0x00000000]
[21:08:19.288]      __var protType   = __protocol & 0x0000FFFF;
[21:08:19.288]        // -> [protType <= 0x00000002]
[21:08:19.288]    </block>
[21:08:19.288]    <control if="protType == 1" while="" timeout="0" info="">
[21:08:19.288]      // if-block "protType == 1"
[21:08:19.288]        // =>  FALSE
[21:08:19.288]      // skip if-block "protType == 1"
[21:08:19.288]    </control>
[21:08:19.288]    <control if="protType == 2" while="" timeout="0" info="">
[21:08:19.288]      // if-block "protType == 2"
[21:08:19.288]        // =>  TRUE
[21:08:19.288]      <control if="isSWJ" while="" timeout="0" info="">
[21:08:19.288]        // if-block "isSWJ"
[21:08:19.288]          // =>  TRUE
[21:08:19.288]        <control if="hasDormant" while="" timeout="0" info="">
[21:08:19.288]          // if-block "hasDormant"
[21:08:19.288]            // =>  FALSE
[21:08:19.292]          // skip if-block "hasDormant"
[21:08:19.292]        </control>
[21:08:19.292]        <control if="!hasDormant" while="" timeout="0" info="">
[21:08:19.292]          // if-block "!hasDormant"
[21:08:19.292]            // =>  TRUE
[21:08:19.292]          <block atomic="false" info="">
[21:08:19.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:08:19.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:19.294]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:08:19.296]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:08:19.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:08:19.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:19.306]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:08:19.308]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:08:19.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:08:19.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:19.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:08:19.312]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:08:19.312]          </block>
[21:08:19.312]          // end if-block "!hasDormant"
[21:08:19.312]        </control>
[21:08:19.312]        // end if-block "isSWJ"
[21:08:19.312]      </control>
[21:08:19.312]      <control if="!isSWJ" while="" timeout="0" info="">
[21:08:19.312]        // if-block "!isSWJ"
[21:08:19.312]          // =>  FALSE
[21:08:19.312]        // skip if-block "!isSWJ"
[21:08:19.312]      </control>
[21:08:19.312]      <block atomic="false" info="">
[21:08:19.312]        ReadDP(0x0);
[21:08:19.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:08:19.318]      </block>
[21:08:19.318]      // end if-block "protType == 2"
[21:08:19.318]    </control>
[21:08:19.318]  </sequence>
[21:08:19.318]  
[21:08:19.321]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:08:19.321]  
[21:08:19.321]  <debugvars>
[21:08:19.321]    // Pre-defined
[21:08:19.321]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:19.321]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:19.321]    __dp=0x00000000
[21:08:19.321]    __ap=0x00000000
[21:08:19.321]    __traceout=0x00000000      (Trace Disabled)
[21:08:19.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:19.321]    __FlashAddr=0x00000000
[21:08:19.321]    __FlashLen=0x00000000
[21:08:19.321]    __FlashArg=0x00000000
[21:08:19.321]    __FlashOp=0x00000000
[21:08:19.321]    __Result=0x00000000
[21:08:19.321]  </debugvars>
[21:08:19.321]  
[21:08:19.321]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:08:19.321]    <block atomic="false" info="">
[21:08:19.321]      __var SW_DP_ABORT       = 0x0;
[21:08:19.321]        // -> [SW_DP_ABORT <= 0x00000000]
[21:08:19.321]      __var DP_CTRL_STAT      = 0x4;
[21:08:19.321]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:08:19.321]      __var DP_SELECT         = 0x8;
[21:08:19.321]        // -> [DP_SELECT <= 0x00000008]
[21:08:19.321]      __var powered_down      = 0;
[21:08:19.321]        // -> [powered_down <= 0x00000000]
[21:08:19.321]      WriteDP(DP_SELECT, 0x00000000);
[21:08:19.325]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:08:19.325]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:08:19.329]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:08:19.329]        // -> [powered_down <= 0x00000001]
[21:08:19.329]    </block>
[21:08:19.329]    <control if="powered_down" while="" timeout="0" info="">
[21:08:19.329]      // if-block "powered_down"
[21:08:19.329]        // =>  TRUE
[21:08:19.329]      <block atomic="false" info="">
[21:08:19.329]        Message(0, "Debug/System power-up request sent");
[21:08:19.329]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:08:19.330]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:08:19.330]      </block>
[21:08:19.330]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:08:19.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:08:19.333]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:08:19.333]        // while-condition  =>  FALSE
[21:08:19.333]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:08:19.333]      </control>
[21:08:19.333]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:08:19.333]        // if-block "(__protocol & 0xFFFF) == 1"
[21:08:19.333]          // =>  FALSE
[21:08:19.333]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:08:19.333]      </control>
[21:08:19.333]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:08:19.333]        // if-block "(__protocol & 0xFFFF) == 2"
[21:08:19.335]          // =>  TRUE
[21:08:19.335]        <block atomic="false" info="">
[21:08:19.335]          Message(0, "executing SWD power up");
[21:08:19.337]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:08:19.339]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:08:19.339]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:08:19.341]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:08:19.341]        </block>
[21:08:19.341]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:08:19.341]      </control>
[21:08:19.342]      // end if-block "powered_down"
[21:08:19.342]    </control>
[21:08:19.342]    <block atomic="false" info="">
[21:08:19.342]      __var DEBUG_PORT_VAL    = 0;
[21:08:19.342]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:08:19.342]      __var ACCESS_POINT_VAL  = 0;
[21:08:19.342]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:08:19.342]      __ap = 1; 
[21:08:19.342]        // -> [__ap <= 0x00000001]
[21:08:19.342]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:08:19.345]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:08:19.345]      __ap = 4;
[21:08:19.345]        // -> [__ap <= 0x00000004]
[21:08:19.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:19.350]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:08:19.350]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:08:19.350]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:19.354]    </block>
[21:08:19.354]    <block atomic="false" info="">
[21:08:19.354]      __var nReset = 0x80;
[21:08:19.354]        // -> [nReset <= 0x00000080]
[21:08:19.354]      __var canReadPins = 0;
[21:08:19.354]        // -> [canReadPins <= 0x00000000]
[21:08:19.354]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:08:19.355]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:08:19.355]        // -> [canReadPins <= 0x00000001]
[21:08:19.355]    </block>
[21:08:19.355]    <control if="" while="1" timeout="200" info="">
[21:08:19.355]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.358]      // while-condition  =>  TRUE
[21:08:19.358]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.362]      // while-condition  =>  TRUE
[21:08:19.362]      // while "1"  (timeout="200")
[21:08:19.366]      // while-condition  =>  TRUE
[21:08:19.366]      // while "1"  (timeout="200")
[21:08:19.366]      // while  =>  TIMEOUT
[21:08:19.366]      // end while "1"
[21:08:19.366]    </control>
[21:08:19.366]    <control if="canReadPins" while="" timeout="0" info="">
[21:08:19.366]      // if-block "canReadPins"
[21:08:19.366]        // =>  TRUE
[21:08:19.366]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:08:19.366]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:08:19.370]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:08:19.370]        // while-condition  =>  FALSE
[21:08:19.370]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:08:19.370]      </control>
[21:08:19.370]      // end if-block "canReadPins"
[21:08:19.370]    </control>
[21:08:19.370]    <control if="!canReadPins" while="" timeout="0" info="">
[21:08:19.370]      // if-block "!canReadPins"
[21:08:19.370]        // =>  FALSE
[21:08:19.370]      // skip if-block "!canReadPins"
[21:08:19.370]    </control>
[21:08:19.370]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:08:19.370]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:19.370]        // =>  TRUE
[21:08:19.370]      <block atomic="false" info="">
[21:08:19.370]        WriteAP(0x00, 0x190008);
[21:08:19.374]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:19.374]        WriteAP(0xF0, 0x01);
[21:08:19.374]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:19.378]      </block>
[21:08:19.378]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:19.378]    </control>
[21:08:19.378]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:08:19.378]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:19.378]        // =>  FALSE
[21:08:19.378]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:19.378]    </control>
[21:08:19.378]    <block atomic="false" info="">
[21:08:19.378]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:19.382]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:08:19.382]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:08:19.382]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:19.382]      __ap = 0; //lets make sure we reset the access point selection
[21:08:19.382]        // -> [__ap <= 0x00000000]
[21:08:19.382]    </block>
[21:08:19.382]  </sequence>
[21:08:19.382]  
[21:08:19.416]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:08:19.416]  
[21:08:19.416]  <debugvars>
[21:08:19.416]    // Pre-defined
[21:08:19.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:19.416]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:19.417]    __dp=0x00000000
[21:08:19.417]    __ap=0x00000000
[21:08:19.417]    __traceout=0x00000000      (Trace Disabled)
[21:08:19.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:19.417]    __FlashAddr=0x00000000
[21:08:19.417]    __FlashLen=0x00000000
[21:08:19.417]    __FlashArg=0x00000000
[21:08:19.417]    __FlashOp=0x00000000
[21:08:19.417]    __Result=0x00000000
[21:08:19.417]  </debugvars>
[21:08:19.417]  
[21:08:19.417]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:08:19.417]    <block atomic="false" info="">
[21:08:19.417]      __var deviceID = 0;
[21:08:19.417]        // -> [deviceID <= 0x00000000]
[21:08:19.417]      __var version = 0;
[21:08:19.418]        // -> [version <= 0x00000000]
[21:08:19.418]      __var partNum = 0;
[21:08:19.418]        // -> [partNum <= 0x00000000]
[21:08:19.418]      __var manuf = 0;
[21:08:19.418]        // -> [manuf <= 0x00000000]
[21:08:19.418]      __var isMSPM0G1X0X_G3X0X = 0;
[21:08:19.418]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:08:19.418]      __var isProduction = 0;
[21:08:19.418]        // -> [isProduction <= 0x00000000]
[21:08:19.418]      __var continueId = 0;
[21:08:19.418]        // -> [continueId <= 0x00000000]
[21:08:19.418]      deviceID =   Read32(0x41C40004);
[21:08:19.423]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:08:19.424]        // -> [deviceID <= 0x2BB8802F]
[21:08:19.424]      version = deviceID >> 28;
[21:08:19.424]        // -> [version <= 0x00000002]
[21:08:19.424]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:08:19.424]        // -> [partNum <= 0x0000BB88]
[21:08:19.424]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:08:19.424]        // -> [manuf <= 0x00000017]
[21:08:19.424]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:08:19.424]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:08:19.424]      isProduction = (version > 0);
[21:08:19.424]        // -> [isProduction <= 0x00000001]
[21:08:19.424]    </block>
[21:08:19.424]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:08:19.424]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:08:19.424]        // =>  FALSE
[21:08:19.424]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:08:19.424]    </control>
[21:08:19.424]    <control if="continueId == 4" while="" timeout="0" info="">
[21:08:19.424]      // if-block "continueId == 4"
[21:08:19.424]        // =>  FALSE
[21:08:19.424]      // skip if-block "continueId == 4"
[21:08:19.424]    </control>
[21:08:19.424]    <control if="!isProduction" while="" timeout="0" info="">
[21:08:19.424]      // if-block "!isProduction"
[21:08:19.424]        // =>  FALSE
[21:08:19.424]      // skip if-block "!isProduction"
[21:08:19.424]    </control>
[21:08:19.427]  </sequence>
[21:08:19.427]  
[21:08:25.516]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:08:25.516]  
[21:08:25.527]  <debugvars>
[21:08:25.527]    // Pre-defined
[21:08:25.527]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:25.527]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:08:25.527]    __dp=0x00000000
[21:08:25.527]    __ap=0x00000000
[21:08:25.527]    __traceout=0x00000000      (Trace Disabled)
[21:08:25.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:25.528]    __FlashAddr=0x00000000
[21:08:25.528]    __FlashLen=0x00000000
[21:08:25.528]    __FlashArg=0x00000000
[21:08:25.528]    __FlashOp=0x00000000
[21:08:25.528]    __Result=0x00000000
[21:08:25.528]  </debugvars>
[21:08:25.528]  
[21:08:25.528]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:08:25.529]    <block atomic="false" info="">
[21:08:25.529]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:08:25.529]        // -> [isSWJ <= 0x00000001]
[21:08:25.529]      __var hasDormant = __protocol & 0x00020000;
[21:08:25.529]        // -> [hasDormant <= 0x00000000]
[21:08:25.529]      __var protType   = __protocol & 0x0000FFFF;
[21:08:25.529]        // -> [protType <= 0x00000002]
[21:08:25.529]    </block>
[21:08:25.529]    <control if="protType == 1" while="" timeout="0" info="">
[21:08:25.529]      // if-block "protType == 1"
[21:08:25.529]        // =>  FALSE
[21:08:25.529]      // skip if-block "protType == 1"
[21:08:25.529]    </control>
[21:08:25.529]    <control if="protType == 2" while="" timeout="0" info="">
[21:08:25.529]      // if-block "protType == 2"
[21:08:25.529]        // =>  TRUE
[21:08:25.529]      <control if="isSWJ" while="" timeout="0" info="">
[21:08:25.529]        // if-block "isSWJ"
[21:08:25.529]          // =>  TRUE
[21:08:25.529]        <control if="hasDormant" while="" timeout="0" info="">
[21:08:25.531]          // if-block "hasDormant"
[21:08:25.531]            // =>  FALSE
[21:08:25.531]          // skip if-block "hasDormant"
[21:08:25.531]        </control>
[21:08:25.531]        <control if="!hasDormant" while="" timeout="0" info="">
[21:08:25.531]          // if-block "!hasDormant"
[21:08:25.531]            // =>  TRUE
[21:08:25.531]          <block atomic="false" info="">
[21:08:25.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:08:25.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:25.533]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:08:25.536]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:08:25.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:08:25.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:25.537]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:08:25.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:08:25.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:08:25.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:25.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:08:25.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:08:25.543]          </block>
[21:08:25.543]          // end if-block "!hasDormant"
[21:08:25.543]        </control>
[21:08:25.544]        // end if-block "isSWJ"
[21:08:25.544]      </control>
[21:08:25.544]      <control if="!isSWJ" while="" timeout="0" info="">
[21:08:25.544]        // if-block "!isSWJ"
[21:08:25.544]          // =>  FALSE
[21:08:25.544]        // skip if-block "!isSWJ"
[21:08:25.544]      </control>
[21:08:25.544]      <block atomic="false" info="">
[21:08:25.544]        ReadDP(0x0);
[21:08:25.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:08:25.550]      </block>
[21:08:25.551]      // end if-block "protType == 2"
[21:08:25.551]    </control>
[21:08:25.551]  </sequence>
[21:08:25.551]  
[21:08:25.553]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:08:25.553]  
[21:08:25.553]  <debugvars>
[21:08:25.553]    // Pre-defined
[21:08:25.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:25.553]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:08:25.553]    __dp=0x00000000
[21:08:25.553]    __ap=0x00000000
[21:08:25.553]    __traceout=0x00000000      (Trace Disabled)
[21:08:25.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:25.553]    __FlashAddr=0x00000000
[21:08:25.553]    __FlashLen=0x00000000
[21:08:25.553]    __FlashArg=0x00000000
[21:08:25.554]    __FlashOp=0x00000000
[21:08:25.554]    __Result=0x00000000
[21:08:25.554]  </debugvars>
[21:08:25.554]  
[21:08:25.554]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:08:25.554]    <block atomic="false" info="">
[21:08:25.554]      __var SW_DP_ABORT       = 0x0;
[21:08:25.554]        // -> [SW_DP_ABORT <= 0x00000000]
[21:08:25.554]      __var DP_CTRL_STAT      = 0x4;
[21:08:25.556]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:08:25.556]      __var DP_SELECT         = 0x8;
[21:08:25.556]        // -> [DP_SELECT <= 0x00000008]
[21:08:25.556]      __var powered_down      = 0;
[21:08:25.556]        // -> [powered_down <= 0x00000000]
[21:08:25.556]      WriteDP(DP_SELECT, 0x00000000);
[21:08:25.557]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:08:25.557]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:08:25.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:08:25.559]        // -> [powered_down <= 0x00000001]
[21:08:25.559]    </block>
[21:08:25.559]    <control if="powered_down" while="" timeout="0" info="">
[21:08:25.559]      // if-block "powered_down"
[21:08:25.559]        // =>  TRUE
[21:08:25.559]      <block atomic="false" info="">
[21:08:25.559]        Message(0, "Debug/System power-up request sent");
[21:08:25.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:08:25.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:08:25.563]      </block>
[21:08:25.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:08:25.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:08:25.565]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:08:25.565]        // while-condition  =>  FALSE
[21:08:25.565]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:08:25.565]      </control>
[21:08:25.565]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:08:25.565]        // if-block "(__protocol & 0xFFFF) == 1"
[21:08:25.565]          // =>  FALSE
[21:08:25.565]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:08:25.565]      </control>
[21:08:25.566]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:08:25.566]        // if-block "(__protocol & 0xFFFF) == 2"
[21:08:25.566]          // =>  TRUE
[21:08:25.566]        <block atomic="false" info="">
[21:08:25.566]          Message(0, "executing SWD power up");
[21:08:25.568]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:08:25.570]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:08:25.570]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:08:25.570]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:08:25.570]        </block>
[21:08:25.572]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:08:25.572]      </control>
[21:08:25.572]      // end if-block "powered_down"
[21:08:25.572]    </control>
[21:08:25.572]    <block atomic="false" info="">
[21:08:25.572]      __var DEBUG_PORT_VAL    = 0;
[21:08:25.572]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:08:25.572]      __var ACCESS_POINT_VAL  = 0;
[21:08:25.572]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:08:25.572]      __ap = 1; 
[21:08:25.572]        // -> [__ap <= 0x00000001]
[21:08:25.572]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:08:25.576]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:08:25.576]      __ap = 4;
[21:08:25.576]        // -> [__ap <= 0x00000004]
[21:08:25.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:25.583]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:08:25.583]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:08:25.583]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:25.587]    </block>
[21:08:25.588]    <block atomic="false" info="">
[21:08:25.588]      __var nReset = 0x80;
[21:08:25.588]        // -> [nReset <= 0x00000080]
[21:08:25.588]      __var canReadPins = 0;
[21:08:25.588]        // -> [canReadPins <= 0x00000000]
[21:08:25.588]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:08:25.588]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:08:25.588]        // -> [canReadPins <= 0x00000001]
[21:08:25.588]    </block>
[21:08:25.588]    <control if="" while="1" timeout="200" info="">
[21:08:25.588]      // while "1"  (timeout="200")
[21:08:25.588]      // while-condition  =>  TRUE
[21:08:25.588]      // while "1"  (timeout="200")
[21:08:25.588]      // while-condition  =>  TRUE
[21:08:25.588]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.591]      // while "1"  (timeout="200")
[21:08:25.591]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.595]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.595]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.595]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.595]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.595]      // while-condition  =>  TRUE
[21:08:25.595]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.596]      // while-condition  =>  TRUE
[21:08:25.596]      // while "1"  (timeout="200")
[21:08:25.599]      // while-condition  =>  TRUE
[21:08:25.599]      // while "1"  (timeout="200")
[21:08:25.599]      // while  =>  TIMEOUT
[21:08:25.599]      // end while "1"
[21:08:25.599]    </control>
[21:08:25.599]    <control if="canReadPins" while="" timeout="0" info="">
[21:08:25.599]      // if-block "canReadPins"
[21:08:25.599]        // =>  TRUE
[21:08:25.599]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:08:25.599]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:08:25.600]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:08:25.600]        // while-condition  =>  FALSE
[21:08:25.600]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:08:25.600]      </control>
[21:08:25.600]      // end if-block "canReadPins"
[21:08:25.600]    </control>
[21:08:25.600]    <control if="!canReadPins" while="" timeout="0" info="">
[21:08:25.600]      // if-block "!canReadPins"
[21:08:25.600]        // =>  FALSE
[21:08:25.600]      // skip if-block "!canReadPins"
[21:08:25.600]    </control>
[21:08:25.600]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:08:25.600]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:25.600]        // =>  TRUE
[21:08:25.600]      <block atomic="false" info="">
[21:08:25.600]        WriteAP(0x00, 0x190008);
[21:08:25.603]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:25.603]        WriteAP(0xF0, 0x01);
[21:08:25.610]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:25.610]      </block>
[21:08:25.610]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:25.610]    </control>
[21:08:25.610]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:08:25.610]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:25.610]        // =>  FALSE
[21:08:25.610]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:25.610]    </control>
[21:08:25.610]    <block atomic="false" info="">
[21:08:25.610]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:25.617]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:08:25.617]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:08:25.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:25.617]      __ap = 0; //lets make sure we reset the access point selection
[21:08:25.619]        // -> [__ap <= 0x00000000]
[21:08:25.619]    </block>
[21:08:25.619]  </sequence>
[21:08:25.619]  
[21:08:25.641]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:08:25.641]  
[21:08:25.641]  <debugvars>
[21:08:25.641]    // Pre-defined
[21:08:25.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:25.641]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:08:25.641]    __dp=0x00000000
[21:08:25.641]    __ap=0x00000000
[21:08:25.641]    __traceout=0x00000000      (Trace Disabled)
[21:08:25.641]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:25.641]    __FlashAddr=0x00000000
[21:08:25.641]    __FlashLen=0x00000000
[21:08:25.641]    __FlashArg=0x00000000
[21:08:25.641]    __FlashOp=0x00000000
[21:08:25.641]    __Result=0x00000000
[21:08:25.641]  </debugvars>
[21:08:25.641]  
[21:08:25.641]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:08:25.641]    <block atomic="false" info="">
[21:08:25.641]      __var deviceID = 0;
[21:08:25.641]        // -> [deviceID <= 0x00000000]
[21:08:25.641]      __var version = 0;
[21:08:25.641]        // -> [version <= 0x00000000]
[21:08:25.644]      __var partNum = 0;
[21:08:25.644]        // -> [partNum <= 0x00000000]
[21:08:25.644]      __var manuf = 0;
[21:08:25.644]        // -> [manuf <= 0x00000000]
[21:08:25.644]      __var isMSPM0G1X0X_G3X0X = 0;
[21:08:25.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:08:25.644]      __var isProduction = 0;
[21:08:25.644]        // -> [isProduction <= 0x00000000]
[21:08:25.644]      __var continueId = 0;
[21:08:25.644]        // -> [continueId <= 0x00000000]
[21:08:25.644]      deviceID =   Read32(0x41C40004);
[21:08:25.653]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:08:25.653]        // -> [deviceID <= 0x2BB8802F]
[21:08:25.653]      version = deviceID >> 28;
[21:08:25.653]        // -> [version <= 0x00000002]
[21:08:25.653]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:08:25.653]        // -> [partNum <= 0x0000BB88]
[21:08:25.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:08:25.653]        // -> [manuf <= 0x00000017]
[21:08:25.653]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:08:25.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:08:25.653]      isProduction = (version > 0);
[21:08:25.653]        // -> [isProduction <= 0x00000001]
[21:08:25.653]    </block>
[21:08:25.653]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:08:25.653]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:08:25.653]        // =>  FALSE
[21:08:25.653]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:08:25.653]    </control>
[21:08:25.653]    <control if="continueId == 4" while="" timeout="0" info="">
[21:08:25.653]      // if-block "continueId == 4"
[21:08:25.653]        // =>  FALSE
[21:08:25.653]      // skip if-block "continueId == 4"
[21:08:25.653]    </control>
[21:08:25.653]    <control if="!isProduction" while="" timeout="0" info="">
[21:08:25.653]      // if-block "!isProduction"
[21:08:25.653]        // =>  FALSE
[21:08:25.653]      // skip if-block "!isProduction"
[21:08:25.653]    </control>
[21:08:25.653]  </sequence>
[21:08:25.653]  
[21:14:52.797]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:14:52.797]  
[21:14:52.808]  <debugvars>
[21:14:52.808]    // Pre-defined
[21:14:52.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:52.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:14:52.808]    __dp=0x00000000
[21:14:52.808]    __ap=0x00000000
[21:14:52.808]    __traceout=0x00000000      (Trace Disabled)
[21:14:52.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:52.808]    __FlashAddr=0x00000000
[21:14:52.808]    __FlashLen=0x00000000
[21:14:52.808]    __FlashArg=0x00000000
[21:14:52.808]    __FlashOp=0x00000000
[21:14:52.808]    __Result=0x00000000
[21:14:52.808]  </debugvars>
[21:14:52.808]  
[21:14:52.808]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:14:52.808]    <block atomic="false" info="">
[21:14:52.808]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:14:52.808]        // -> [isSWJ <= 0x00000001]
[21:14:52.808]      __var hasDormant = __protocol & 0x00020000;
[21:14:52.808]        // -> [hasDormant <= 0x00000000]
[21:14:52.808]      __var protType   = __protocol & 0x0000FFFF;
[21:14:52.810]        // -> [protType <= 0x00000002]
[21:14:52.810]    </block>
[21:14:52.810]    <control if="protType == 1" while="" timeout="0" info="">
[21:14:52.810]      // if-block "protType == 1"
[21:14:52.810]        // =>  FALSE
[21:14:52.810]      // skip if-block "protType == 1"
[21:14:52.810]    </control>
[21:14:52.810]    <control if="protType == 2" while="" timeout="0" info="">
[21:14:52.810]      // if-block "protType == 2"
[21:14:52.810]        // =>  TRUE
[21:14:52.810]      <control if="isSWJ" while="" timeout="0" info="">
[21:14:52.810]        // if-block "isSWJ"
[21:14:52.810]          // =>  TRUE
[21:14:52.810]        <control if="hasDormant" while="" timeout="0" info="">
[21:14:52.810]          // if-block "hasDormant"
[21:14:52.810]            // =>  FALSE
[21:14:52.810]          // skip if-block "hasDormant"
[21:14:52.810]        </control>
[21:14:52.810]        <control if="!hasDormant" while="" timeout="0" info="">
[21:14:52.810]          // if-block "!hasDormant"
[21:14:52.810]            // =>  TRUE
[21:14:52.810]          <block atomic="false" info="">
[21:14:52.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:14:52.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:52.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:14:52.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:14:52.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:14:52.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:52.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:14:52.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:14:52.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:14:52.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:52.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:14:52.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:14:52.822]          </block>
[21:14:52.822]          // end if-block "!hasDormant"
[21:14:52.822]        </control>
[21:14:52.822]        // end if-block "isSWJ"
[21:14:52.822]      </control>
[21:14:52.822]      <control if="!isSWJ" while="" timeout="0" info="">
[21:14:52.822]        // if-block "!isSWJ"
[21:14:52.822]          // =>  FALSE
[21:14:52.822]        // skip if-block "!isSWJ"
[21:14:52.822]      </control>
[21:14:52.822]      <block atomic="false" info="">
[21:14:52.822]        ReadDP(0x0);
[21:14:52.826]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:14:52.826]      </block>
[21:14:52.826]      // end if-block "protType == 2"
[21:14:52.826]    </control>
[21:14:52.826]  </sequence>
[21:14:52.828]  
[21:14:52.834]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:14:52.834]  
[21:14:52.834]  <debugvars>
[21:14:52.834]    // Pre-defined
[21:14:52.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:52.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:14:52.834]    __dp=0x00000000
[21:14:52.834]    __ap=0x00000000
[21:14:52.834]    __traceout=0x00000000      (Trace Disabled)
[21:14:52.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:52.834]    __FlashAddr=0x00000000
[21:14:52.834]    __FlashLen=0x00000000
[21:14:52.834]    __FlashArg=0x00000000
[21:14:52.834]    __FlashOp=0x00000000
[21:14:52.834]    __Result=0x00000000
[21:14:52.834]  </debugvars>
[21:14:52.834]  
[21:14:52.834]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:14:52.834]    <block atomic="false" info="">
[21:14:52.834]      __var SW_DP_ABORT       = 0x0;
[21:14:52.834]        // -> [SW_DP_ABORT <= 0x00000000]
[21:14:52.834]      __var DP_CTRL_STAT      = 0x4;
[21:14:52.834]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:14:52.834]      __var DP_SELECT         = 0x8;
[21:14:52.834]        // -> [DP_SELECT <= 0x00000008]
[21:14:52.834]      __var powered_down      = 0;
[21:14:52.834]        // -> [powered_down <= 0x00000000]
[21:14:52.834]      WriteDP(DP_SELECT, 0x00000000);
[21:14:52.842]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:14:52.842]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:14:52.846]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:14:52.846]        // -> [powered_down <= 0x00000001]
[21:14:52.846]    </block>
[21:14:52.846]    <control if="powered_down" while="" timeout="0" info="">
[21:14:52.846]      // if-block "powered_down"
[21:14:52.846]        // =>  TRUE
[21:14:52.846]      <block atomic="false" info="">
[21:14:52.846]        Message(0, "Debug/System power-up request sent");
[21:14:52.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:14:52.856]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:14:52.856]      </block>
[21:14:52.856]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:14:52.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:14:52.858]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:14:52.858]        // while-condition  =>  FALSE
[21:14:52.858]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:14:52.858]      </control>
[21:14:52.858]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:14:52.860]        // if-block "(__protocol & 0xFFFF) == 1"
[21:14:52.860]          // =>  FALSE
[21:14:52.860]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:14:52.860]      </control>
[21:14:52.860]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:14:52.860]        // if-block "(__protocol & 0xFFFF) == 2"
[21:14:52.860]          // =>  TRUE
[21:14:52.860]        <block atomic="false" info="">
[21:14:52.860]          Message(0, "executing SWD power up");
[21:14:52.862]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:14:52.862]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:14:52.862]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:14:52.866]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:14:52.866]        </block>
[21:14:52.866]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:14:52.866]      </control>
[21:14:52.866]      // end if-block "powered_down"
[21:14:52.866]    </control>
[21:14:52.866]    <block atomic="false" info="">
[21:14:52.866]      __var DEBUG_PORT_VAL    = 0;
[21:14:52.866]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:14:52.866]      __var ACCESS_POINT_VAL  = 0;
[21:14:52.866]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:14:52.866]      __ap = 1; 
[21:14:52.866]        // -> [__ap <= 0x00000001]
[21:14:52.866]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:14:52.872]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:14:52.872]      __ap = 4;
[21:14:52.872]        // -> [__ap <= 0x00000004]
[21:14:52.872]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:52.875]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:14:52.875]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:14:52.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:52.878]    </block>
[21:14:52.878]    <block atomic="false" info="">
[21:14:52.878]      __var nReset = 0x80;
[21:14:52.878]        // -> [nReset <= 0x00000080]
[21:14:52.878]      __var canReadPins = 0;
[21:14:52.878]        // -> [canReadPins <= 0x00000000]
[21:14:52.878]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:14:52.878]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:14:52.878]        // -> [canReadPins <= 0x00000001]
[21:14:52.878]    </block>
[21:14:52.878]    <control if="" while="1" timeout="200" info="">
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.878]      // while "1"  (timeout="200")
[21:14:52.878]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.882]      // while-condition  =>  TRUE
[21:14:52.882]      // while "1"  (timeout="200")
[21:14:52.886]      // while-condition  =>  TRUE
[21:14:52.886]      // while "1"  (timeout="200")
[21:14:52.886]      // while-condition  =>  TRUE
[21:14:52.886]      // while "1"  (timeout="200")
[21:14:52.886]      // while-condition  =>  TRUE
[21:14:52.886]      // while "1"  (timeout="200")
[21:14:52.886]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.887]      // while-condition  =>  TRUE
[21:14:52.887]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.889]      // while "1"  (timeout="200")
[21:14:52.889]      // while-condition  =>  TRUE
[21:14:52.891]      // while "1"  (timeout="200")
[21:14:52.891]      // while-condition  =>  TRUE
[21:14:52.891]      // while "1"  (timeout="200")
[21:14:52.891]      // while-condition  =>  TRUE
[21:14:52.891]      // while "1"  (timeout="200")
[21:14:52.891]      // while-condition  =>  TRUE
[21:14:52.891]      // while "1"  (timeout="200")
[21:14:52.891]      // while-condition  =>  TRUE
[21:14:52.891]      // while "1"  (timeout="200")
[21:14:52.891]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.892]      // while "1"  (timeout="200")
[21:14:52.892]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.893]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.893]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.893]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.893]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.893]      // while-condition  =>  TRUE
[21:14:52.893]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.894]      // while-condition  =>  TRUE
[21:14:52.894]      // while "1"  (timeout="200")
[21:14:52.895]      // while-condition  =>  TRUE
[21:14:52.895]      // while "1"  (timeout="200")
[21:14:52.895]      // while  =>  TIMEOUT
[21:14:52.895]      // end while "1"
[21:14:52.895]    </control>
[21:14:52.895]    <control if="canReadPins" while="" timeout="0" info="">
[21:14:52.895]      // if-block "canReadPins"
[21:14:52.895]        // =>  TRUE
[21:14:52.895]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:14:52.895]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:14:52.896]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:14:52.896]        // while-condition  =>  FALSE
[21:14:52.896]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:14:52.896]      </control>
[21:14:52.896]      // end if-block "canReadPins"
[21:14:52.896]    </control>
[21:14:52.896]    <control if="!canReadPins" while="" timeout="0" info="">
[21:14:52.896]      // if-block "!canReadPins"
[21:14:52.896]        // =>  FALSE
[21:14:52.896]      // skip if-block "!canReadPins"
[21:14:52.899]    </control>
[21:14:52.899]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:14:52.899]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:52.899]        // =>  TRUE
[21:14:52.899]      <block atomic="false" info="">
[21:14:52.899]        WriteAP(0x00, 0x190008);
[21:14:52.903]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:52.903]        WriteAP(0xF0, 0x01);
[21:14:52.906]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:52.906]      </block>
[21:14:52.906]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:52.906]    </control>
[21:14:52.906]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:14:52.907]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:52.908]        // =>  FALSE
[21:14:52.908]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:52.908]    </control>
[21:14:52.908]    <block atomic="false" info="">
[21:14:52.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:52.912]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:14:52.912]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:14:52.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:52.914]      __ap = 0; //lets make sure we reset the access point selection
[21:14:52.914]        // -> [__ap <= 0x00000000]
[21:14:52.914]    </block>
[21:14:52.914]  </sequence>
[21:14:52.914]  
[21:14:52.937]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:14:52.937]  
[21:14:52.937]  <debugvars>
[21:14:52.937]    // Pre-defined
[21:14:52.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:52.937]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:14:52.937]    __dp=0x00000000
[21:14:52.937]    __ap=0x00000000
[21:14:52.937]    __traceout=0x00000000      (Trace Disabled)
[21:14:52.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:52.937]    __FlashAddr=0x00000000
[21:14:52.940]    __FlashLen=0x00000000
[21:14:52.940]    __FlashArg=0x00000000
[21:14:52.940]    __FlashOp=0x00000000
[21:14:52.940]    __Result=0x00000000
[21:14:52.940]  </debugvars>
[21:14:52.940]  
[21:14:52.940]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:14:52.940]    <block atomic="false" info="">
[21:14:52.940]      __var deviceID = 0;
[21:14:52.940]        // -> [deviceID <= 0x00000000]
[21:14:52.940]      __var version = 0;
[21:14:52.940]        // -> [version <= 0x00000000]
[21:14:52.940]      __var partNum = 0;
[21:14:52.940]        // -> [partNum <= 0x00000000]
[21:14:52.940]      __var manuf = 0;
[21:14:52.940]        // -> [manuf <= 0x00000000]
[21:14:52.940]      __var isMSPM0G1X0X_G3X0X = 0;
[21:14:52.940]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:14:52.940]      __var isProduction = 0;
[21:14:52.940]        // -> [isProduction <= 0x00000000]
[21:14:52.940]      __var continueId = 0;
[21:14:52.940]        // -> [continueId <= 0x00000000]
[21:14:52.940]      deviceID =   Read32(0x41C40004);
[21:14:52.948]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:14:52.948]        // -> [deviceID <= 0x2BB8802F]
[21:14:52.948]      version = deviceID >> 28;
[21:14:52.948]        // -> [version <= 0x00000002]
[21:14:52.949]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:14:52.949]        // -> [partNum <= 0x0000BB88]
[21:14:52.949]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:14:52.949]        // -> [manuf <= 0x00000017]
[21:14:52.949]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:14:52.949]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:14:52.949]      isProduction = (version > 0);
[21:14:52.949]        // -> [isProduction <= 0x00000001]
[21:14:52.949]    </block>
[21:14:52.949]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:14:52.949]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:14:52.949]        // =>  FALSE
[21:14:52.949]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:14:52.949]    </control>
[21:14:52.949]    <control if="continueId == 4" while="" timeout="0" info="">
[21:14:52.949]      // if-block "continueId == 4"
[21:14:52.949]        // =>  FALSE
[21:14:52.949]      // skip if-block "continueId == 4"
[21:14:52.951]    </control>
[21:14:52.951]    <control if="!isProduction" while="" timeout="0" info="">
[21:14:52.951]      // if-block "!isProduction"
[21:14:52.951]        // =>  FALSE
[21:14:52.951]      // skip if-block "!isProduction"
[21:14:52.951]    </control>
[21:14:52.951]  </sequence>
[21:14:52.951]  
[21:14:59.167]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:14:59.167]  
[21:14:59.178]  <debugvars>
[21:14:59.178]    // Pre-defined
[21:14:59.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:59.178]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:59.178]    __dp=0x00000000
[21:14:59.178]    __ap=0x00000000
[21:14:59.178]    __traceout=0x00000000      (Trace Disabled)
[21:14:59.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:59.178]    __FlashAddr=0x00000000
[21:14:59.179]    __FlashLen=0x00000000
[21:14:59.179]    __FlashArg=0x00000000
[21:14:59.179]    __FlashOp=0x00000000
[21:14:59.179]    __Result=0x00000000
[21:14:59.179]  </debugvars>
[21:14:59.179]  
[21:14:59.179]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:14:59.179]    <block atomic="false" info="">
[21:14:59.179]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:14:59.179]        // -> [isSWJ <= 0x00000001]
[21:14:59.179]      __var hasDormant = __protocol & 0x00020000;
[21:14:59.179]        // -> [hasDormant <= 0x00000000]
[21:14:59.179]      __var protType   = __protocol & 0x0000FFFF;
[21:14:59.179]        // -> [protType <= 0x00000002]
[21:14:59.179]    </block>
[21:14:59.179]    <control if="protType == 1" while="" timeout="0" info="">
[21:14:59.179]      // if-block "protType == 1"
[21:14:59.179]        // =>  FALSE
[21:14:59.179]      // skip if-block "protType == 1"
[21:14:59.179]    </control>
[21:14:59.179]    <control if="protType == 2" while="" timeout="0" info="">
[21:14:59.179]      // if-block "protType == 2"
[21:14:59.179]        // =>  TRUE
[21:14:59.179]      <control if="isSWJ" while="" timeout="0" info="">
[21:14:59.179]        // if-block "isSWJ"
[21:14:59.179]          // =>  TRUE
[21:14:59.179]        <control if="hasDormant" while="" timeout="0" info="">
[21:14:59.179]          // if-block "hasDormant"
[21:14:59.179]            // =>  FALSE
[21:14:59.179]          // skip if-block "hasDormant"
[21:14:59.179]        </control>
[21:14:59.179]        <control if="!hasDormant" while="" timeout="0" info="">
[21:14:59.179]          // if-block "!hasDormant"
[21:14:59.179]            // =>  TRUE
[21:14:59.179]          <block atomic="false" info="">
[21:14:59.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:14:59.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:59.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:14:59.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:14:59.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:14:59.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:59.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:14:59.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:14:59.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:14:59.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:59.191]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:14:59.191]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:14:59.191]          </block>
[21:14:59.191]          // end if-block "!hasDormant"
[21:14:59.191]        </control>
[21:14:59.191]        // end if-block "isSWJ"
[21:14:59.191]      </control>
[21:14:59.191]      <control if="!isSWJ" while="" timeout="0" info="">
[21:14:59.191]        // if-block "!isSWJ"
[21:14:59.191]          // =>  FALSE
[21:14:59.191]        // skip if-block "!isSWJ"
[21:14:59.191]      </control>
[21:14:59.191]      <block atomic="false" info="">
[21:14:59.195]        ReadDP(0x0);
[21:14:59.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:14:59.197]      </block>
[21:14:59.197]      // end if-block "protType == 2"
[21:14:59.197]    </control>
[21:14:59.197]  </sequence>
[21:14:59.197]  
[21:14:59.199]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:14:59.199]  
[21:14:59.199]  <debugvars>
[21:14:59.199]    // Pre-defined
[21:14:59.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:59.199]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:59.199]    __dp=0x00000000
[21:14:59.199]    __ap=0x00000000
[21:14:59.199]    __traceout=0x00000000      (Trace Disabled)
[21:14:59.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:59.199]    __FlashAddr=0x00000000
[21:14:59.199]    __FlashLen=0x00000000
[21:14:59.199]    __FlashArg=0x00000000
[21:14:59.199]    __FlashOp=0x00000000
[21:14:59.199]    __Result=0x00000000
[21:14:59.199]  </debugvars>
[21:14:59.199]  
[21:14:59.199]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:14:59.199]    <block atomic="false" info="">
[21:14:59.199]      __var SW_DP_ABORT       = 0x0;
[21:14:59.199]        // -> [SW_DP_ABORT <= 0x00000000]
[21:14:59.199]      __var DP_CTRL_STAT      = 0x4;
[21:14:59.199]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:14:59.203]      __var DP_SELECT         = 0x8;
[21:14:59.203]        // -> [DP_SELECT <= 0x00000008]
[21:14:59.203]      __var powered_down      = 0;
[21:14:59.203]        // -> [powered_down <= 0x00000000]
[21:14:59.203]      WriteDP(DP_SELECT, 0x00000000);
[21:14:59.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:14:59.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:14:59.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:14:59.207]        // -> [powered_down <= 0x00000001]
[21:14:59.207]    </block>
[21:14:59.207]    <control if="powered_down" while="" timeout="0" info="">
[21:14:59.207]      // if-block "powered_down"
[21:14:59.207]        // =>  TRUE
[21:14:59.207]      <block atomic="false" info="">
[21:14:59.207]        Message(0, "Debug/System power-up request sent");
[21:14:59.207]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:14:59.211]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:14:59.211]      </block>
[21:14:59.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:14:59.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:14:59.214]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:14:59.214]        // while-condition  =>  FALSE
[21:14:59.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:14:59.214]      </control>
[21:14:59.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:14:59.214]        // if-block "(__protocol & 0xFFFF) == 1"
[21:14:59.214]          // =>  FALSE
[21:14:59.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:14:59.214]      </control>
[21:14:59.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:14:59.214]        // if-block "(__protocol & 0xFFFF) == 2"
[21:14:59.214]          // =>  TRUE
[21:14:59.216]        <block atomic="false" info="">
[21:14:59.216]          Message(0, "executing SWD power up");
[21:14:59.216]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:14:59.216]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:14:59.216]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:14:59.220]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:14:59.220]        </block>
[21:14:59.220]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:14:59.220]      </control>
[21:14:59.220]      // end if-block "powered_down"
[21:14:59.220]    </control>
[21:14:59.220]    <block atomic="false" info="">
[21:14:59.220]      __var DEBUG_PORT_VAL    = 0;
[21:14:59.220]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:14:59.220]      __var ACCESS_POINT_VAL  = 0;
[21:14:59.220]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:14:59.220]      __ap = 1; 
[21:14:59.220]        // -> [__ap <= 0x00000001]
[21:14:59.220]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:14:59.228]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:14:59.228]      __ap = 4;
[21:14:59.228]        // -> [__ap <= 0x00000004]
[21:14:59.228]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:59.228]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:14:59.232]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:14:59.232]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:59.232]    </block>
[21:14:59.232]    <block atomic="false" info="">
[21:14:59.232]      __var nReset = 0x80;
[21:14:59.232]        // -> [nReset <= 0x00000080]
[21:14:59.232]      __var canReadPins = 0;
[21:14:59.232]        // -> [canReadPins <= 0x00000000]
[21:14:59.232]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:14:59.232]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:14:59.232]        // -> [canReadPins <= 0x00000001]
[21:14:59.236]    </block>
[21:14:59.236]    <control if="" while="1" timeout="200" info="">
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.236]      // while-condition  =>  TRUE
[21:14:59.236]      // while "1"  (timeout="200")
[21:14:59.240]      // while-condition  =>  TRUE
[21:14:59.240]      // while "1"  (timeout="200")
[21:14:59.240]      // while  =>  TIMEOUT
[21:14:59.240]      // end while "1"
[21:14:59.240]    </control>
[21:14:59.240]    <control if="canReadPins" while="" timeout="0" info="">
[21:14:59.240]      // if-block "canReadPins"
[21:14:59.240]        // =>  TRUE
[21:14:59.240]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:14:59.240]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:14:59.240]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:14:59.240]        // while-condition  =>  FALSE
[21:14:59.240]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:14:59.240]      </control>
[21:14:59.240]      // end if-block "canReadPins"
[21:14:59.240]    </control>
[21:14:59.240]    <control if="!canReadPins" while="" timeout="0" info="">
[21:14:59.244]      // if-block "!canReadPins"
[21:14:59.244]        // =>  FALSE
[21:14:59.244]      // skip if-block "!canReadPins"
[21:14:59.244]    </control>
[21:14:59.244]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:14:59.244]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:59.244]        // =>  TRUE
[21:14:59.244]      <block atomic="false" info="">
[21:14:59.244]        WriteAP(0x00, 0x190008);
[21:14:59.248]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:59.248]        WriteAP(0xF0, 0x01);
[21:14:59.257]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:59.257]      </block>
[21:14:59.257]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:59.257]    </control>
[21:14:59.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:14:59.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:59.260]        // =>  FALSE
[21:14:59.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:59.260]    </control>
[21:14:59.260]    <block atomic="false" info="">
[21:14:59.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:59.264]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:14:59.264]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:14:59.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:59.264]      __ap = 0; //lets make sure we reset the access point selection
[21:14:59.264]        // -> [__ap <= 0x00000000]
[21:14:59.264]    </block>
[21:14:59.264]  </sequence>
[21:14:59.264]  
[21:14:59.297]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:14:59.297]  
[21:14:59.297]  <debugvars>
[21:14:59.297]    // Pre-defined
[21:14:59.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:59.297]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:59.297]    __dp=0x00000000
[21:14:59.297]    __ap=0x00000000
[21:14:59.297]    __traceout=0x00000000      (Trace Disabled)
[21:14:59.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:59.297]    __FlashAddr=0x00000000
[21:14:59.297]    __FlashLen=0x00000000
[21:14:59.297]    __FlashArg=0x00000000
[21:14:59.297]    __FlashOp=0x00000000
[21:14:59.297]    __Result=0x00000000
[21:14:59.297]  </debugvars>
[21:14:59.297]  
[21:14:59.297]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:14:59.297]    <block atomic="false" info="">
[21:14:59.297]      __var deviceID = 0;
[21:14:59.297]        // -> [deviceID <= 0x00000000]
[21:14:59.297]      __var version = 0;
[21:14:59.297]        // -> [version <= 0x00000000]
[21:14:59.297]      __var partNum = 0;
[21:14:59.297]        // -> [partNum <= 0x00000000]
[21:14:59.297]      __var manuf = 0;
[21:14:59.301]        // -> [manuf <= 0x00000000]
[21:14:59.301]      __var isMSPM0G1X0X_G3X0X = 0;
[21:14:59.301]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:14:59.301]      __var isProduction = 0;
[21:14:59.301]        // -> [isProduction <= 0x00000000]
[21:14:59.301]      __var continueId = 0;
[21:14:59.301]        // -> [continueId <= 0x00000000]
[21:14:59.301]      deviceID =   Read32(0x41C40004);
[21:14:59.305]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:14:59.305]        // -> [deviceID <= 0x2BB8802F]
[21:14:59.305]      version = deviceID >> 28;
[21:14:59.307]        // -> [version <= 0x00000002]
[21:14:59.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:14:59.307]        // -> [partNum <= 0x0000BB88]
[21:14:59.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:14:59.307]        // -> [manuf <= 0x00000017]
[21:14:59.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:14:59.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:14:59.307]      isProduction = (version > 0);
[21:14:59.308]        // -> [isProduction <= 0x00000001]
[21:14:59.308]    </block>
[21:14:59.308]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:14:59.308]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:14:59.308]        // =>  FALSE
[21:14:59.308]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:14:59.308]    </control>
[21:14:59.308]    <control if="continueId == 4" while="" timeout="0" info="">
[21:14:59.308]      // if-block "continueId == 4"
[21:14:59.308]        // =>  FALSE
[21:14:59.308]      // skip if-block "continueId == 4"
[21:14:59.308]    </control>
[21:14:59.308]    <control if="!isProduction" while="" timeout="0" info="">
[21:14:59.310]      // if-block "!isProduction"
[21:14:59.310]        // =>  FALSE
[21:14:59.310]      // skip if-block "!isProduction"
[21:14:59.310]    </control>
[21:14:59.310]  </sequence>
[21:14:59.310]  
[21:16:26.598]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:16:26.598]  
[21:16:26.598]  <debugvars>
[21:16:26.598]    // Pre-defined
[21:16:26.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:26.598]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:26.598]    __dp=0x00000000
[21:16:26.599]    __ap=0x00000000
[21:16:26.599]    __traceout=0x00000000      (Trace Disabled)
[21:16:26.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:26.599]    __FlashAddr=0x00000000
[21:16:26.599]    __FlashLen=0x00000000
[21:16:26.599]    __FlashArg=0x00000000
[21:16:26.599]    __FlashOp=0x00000000
[21:16:26.599]    __Result=0x00000000
[21:16:26.599]  </debugvars>
[21:16:26.599]  
[21:16:26.599]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:16:26.599]    <block atomic="false" info="">
[21:16:26.599]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:16:26.599]        // -> [isSWJ <= 0x00000001]
[21:16:26.599]      __var hasDormant = __protocol & 0x00020000;
[21:16:26.599]        // -> [hasDormant <= 0x00000000]
[21:16:26.599]      __var protType   = __protocol & 0x0000FFFF;
[21:16:26.601]        // -> [protType <= 0x00000002]
[21:16:26.601]    </block>
[21:16:26.601]    <control if="protType == 1" while="" timeout="0" info="">
[21:16:26.601]      // if-block "protType == 1"
[21:16:26.601]        // =>  FALSE
[21:16:26.601]      // skip if-block "protType == 1"
[21:16:26.601]    </control>
[21:16:26.601]    <control if="protType == 2" while="" timeout="0" info="">
[21:16:26.601]      // if-block "protType == 2"
[21:16:26.601]        // =>  TRUE
[21:16:26.603]      <control if="isSWJ" while="" timeout="0" info="">
[21:16:26.603]        // if-block "isSWJ"
[21:16:26.603]          // =>  TRUE
[21:16:26.603]        <control if="hasDormant" while="" timeout="0" info="">
[21:16:26.603]          // if-block "hasDormant"
[21:16:26.603]            // =>  FALSE
[21:16:26.603]          // skip if-block "hasDormant"
[21:16:26.603]        </control>
[21:16:26.603]        <control if="!hasDormant" while="" timeout="0" info="">
[21:16:26.603]          // if-block "!hasDormant"
[21:16:26.603]            // =>  TRUE
[21:16:26.603]          <block atomic="false" info="">
[21:16:26.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:16:26.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:26.605]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:16:26.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:16:26.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:16:26.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:26.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:16:26.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:16:26.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:16:26.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:26.617]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:16:26.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:16:26.617]          </block>
[21:16:26.617]          // end if-block "!hasDormant"
[21:16:26.621]        </control>
[21:16:26.621]        // end if-block "isSWJ"
[21:16:26.621]      </control>
[21:16:26.621]      <control if="!isSWJ" while="" timeout="0" info="">
[21:16:26.621]        // if-block "!isSWJ"
[21:16:26.621]          // =>  FALSE
[21:16:26.621]        // skip if-block "!isSWJ"
[21:16:26.621]      </control>
[21:16:26.621]      <block atomic="false" info="">
[21:16:26.621]        ReadDP(0x0);
[21:16:26.623]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:16:26.623]      </block>
[21:16:26.623]      // end if-block "protType == 2"
[21:16:26.623]    </control>
[21:16:26.623]  </sequence>
[21:16:26.623]  
[21:16:26.627]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:16:26.627]  
[21:16:26.627]  <debugvars>
[21:16:26.627]    // Pre-defined
[21:16:26.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:26.627]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:26.627]    __dp=0x00000000
[21:16:26.627]    __ap=0x00000000
[21:16:26.627]    __traceout=0x00000000      (Trace Disabled)
[21:16:26.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:26.627]    __FlashAddr=0x00000000
[21:16:26.627]    __FlashLen=0x00000000
[21:16:26.627]    __FlashArg=0x00000000
[21:16:26.627]    __FlashOp=0x00000000
[21:16:26.627]    __Result=0x00000000
[21:16:26.627]  </debugvars>
[21:16:26.627]  
[21:16:26.629]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:16:26.629]    <block atomic="false" info="">
[21:16:26.629]      __var SW_DP_ABORT       = 0x0;
[21:16:26.629]        // -> [SW_DP_ABORT <= 0x00000000]
[21:16:26.629]      __var DP_CTRL_STAT      = 0x4;
[21:16:26.629]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:16:26.629]      __var DP_SELECT         = 0x8;
[21:16:26.629]        // -> [DP_SELECT <= 0x00000008]
[21:16:26.629]      __var powered_down      = 0;
[21:16:26.629]        // -> [powered_down <= 0x00000000]
[21:16:26.629]      WriteDP(DP_SELECT, 0x00000000);
[21:16:26.629]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:16:26.629]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:16:26.633]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:16:26.633]        // -> [powered_down <= 0x00000001]
[21:16:26.633]    </block>
[21:16:26.633]    <control if="powered_down" while="" timeout="0" info="">
[21:16:26.633]      // if-block "powered_down"
[21:16:26.633]        // =>  TRUE
[21:16:26.633]      <block atomic="false" info="">
[21:16:26.633]        Message(0, "Debug/System power-up request sent");
[21:16:26.633]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:16:26.640]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:16:26.640]      </block>
[21:16:26.640]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:16:26.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:16:26.642]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:16:26.642]        // while-condition  =>  FALSE
[21:16:26.642]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:16:26.642]      </control>
[21:16:26.642]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:16:26.643]        // if-block "(__protocol & 0xFFFF) == 1"
[21:16:26.643]          // =>  FALSE
[21:16:26.643]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:16:26.643]      </control>
[21:16:26.643]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:16:26.643]        // if-block "(__protocol & 0xFFFF) == 2"
[21:16:26.643]          // =>  TRUE
[21:16:26.643]        <block atomic="false" info="">
[21:16:26.643]          Message(0, "executing SWD power up");
[21:16:26.645]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:16:26.646]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:16:26.646]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:16:26.648]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:16:26.648]        </block>
[21:16:26.648]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:16:26.648]      </control>
[21:16:26.648]      // end if-block "powered_down"
[21:16:26.648]    </control>
[21:16:26.648]    <block atomic="false" info="">
[21:16:26.648]      __var DEBUG_PORT_VAL    = 0;
[21:16:26.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:16:26.648]      __var ACCESS_POINT_VAL  = 0;
[21:16:26.648]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:16:26.648]      __ap = 1; 
[21:16:26.648]        // -> [__ap <= 0x00000001]
[21:16:26.650]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:16:26.654]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:16:26.654]      __ap = 4;
[21:16:26.654]        // -> [__ap <= 0x00000004]
[21:16:26.654]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:26.658]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:16:26.658]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:16:26.658]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:26.658]    </block>
[21:16:26.663]    <block atomic="false" info="">
[21:16:26.663]      __var nReset = 0x80;
[21:16:26.663]        // -> [nReset <= 0x00000080]
[21:16:26.663]      __var canReadPins = 0;
[21:16:26.664]        // -> [canReadPins <= 0x00000000]
[21:16:26.664]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:16:26.664]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:16:26.664]        // -> [canReadPins <= 0x00000001]
[21:16:26.664]    </block>
[21:16:26.664]    <control if="" while="1" timeout="200" info="">
[21:16:26.664]      // while "1"  (timeout="200")
[21:16:26.664]      // while-condition  =>  TRUE
[21:16:26.664]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.667]      // while "1"  (timeout="200")
[21:16:26.667]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.671]      // while "1"  (timeout="200")
[21:16:26.671]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.673]      // while-condition  =>  TRUE
[21:16:26.673]      // while "1"  (timeout="200")
[21:16:26.675]      // while-condition  =>  TRUE
[21:16:26.675]      // while "1"  (timeout="200")
[21:16:26.675]      // while-condition  =>  TRUE
[21:16:26.675]      // while "1"  (timeout="200")
[21:16:26.675]      // while-condition  =>  TRUE
[21:16:26.675]      // while "1"  (timeout="200")
[21:16:26.676]      // while-condition  =>  TRUE
[21:16:26.676]      // while "1"  (timeout="200")
[21:16:26.676]      // while  =>  TIMEOUT
[21:16:26.676]      // end while "1"
[21:16:26.676]    </control>
[21:16:26.676]    <control if="canReadPins" while="" timeout="0" info="">
[21:16:26.676]      // if-block "canReadPins"
[21:16:26.676]        // =>  TRUE
[21:16:26.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:16:26.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:16:26.683]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:16:26.684]        // while-condition  =>  FALSE
[21:16:26.684]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:16:26.684]      </control>
[21:16:26.684]      // end if-block "canReadPins"
[21:16:26.684]    </control>
[21:16:26.684]    <control if="!canReadPins" while="" timeout="0" info="">
[21:16:26.684]      // if-block "!canReadPins"
[21:16:26.684]        // =>  FALSE
[21:16:26.684]      // skip if-block "!canReadPins"
[21:16:26.684]    </control>
[21:16:26.684]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:16:26.684]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:26.684]        // =>  TRUE
[21:16:26.684]      <block atomic="false" info="">
[21:16:26.684]        WriteAP(0x00, 0x190008);
[21:16:26.686]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:26.686]        WriteAP(0xF0, 0x01);
[21:16:26.690]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:26.690]      </block>
[21:16:26.690]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:26.690]    </control>
[21:16:26.690]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:16:26.690]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:26.690]        // =>  FALSE
[21:16:26.690]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:26.690]    </control>
[21:16:26.690]    <block atomic="false" info="">
[21:16:26.690]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:26.696]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:16:26.696]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:16:26.699]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:26.700]      __ap = 0; //lets make sure we reset the access point selection
[21:16:26.700]        // -> [__ap <= 0x00000000]
[21:16:26.700]    </block>
[21:16:26.700]  </sequence>
[21:16:26.700]  
[21:16:26.727]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:16:26.727]  
[21:16:26.728]  <debugvars>
[21:16:26.728]    // Pre-defined
[21:16:26.728]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:26.728]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:26.728]    __dp=0x00000000
[21:16:26.728]    __ap=0x00000000
[21:16:26.728]    __traceout=0x00000000      (Trace Disabled)
[21:16:26.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:26.729]    __FlashAddr=0x00000000
[21:16:26.729]    __FlashLen=0x00000000
[21:16:26.729]    __FlashArg=0x00000000
[21:16:26.729]    __FlashOp=0x00000000
[21:16:26.729]    __Result=0x00000000
[21:16:26.729]  </debugvars>
[21:16:26.729]  
[21:16:26.729]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:16:26.729]    <block atomic="false" info="">
[21:16:26.729]      __var deviceID = 0;
[21:16:26.729]        // -> [deviceID <= 0x00000000]
[21:16:26.729]      __var version = 0;
[21:16:26.729]        // -> [version <= 0x00000000]
[21:16:26.730]      __var partNum = 0;
[21:16:26.730]        // -> [partNum <= 0x00000000]
[21:16:26.730]      __var manuf = 0;
[21:16:26.730]        // -> [manuf <= 0x00000000]
[21:16:26.730]      __var isMSPM0G1X0X_G3X0X = 0;
[21:16:26.730]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:16:26.730]      __var isProduction = 0;
[21:16:26.730]        // -> [isProduction <= 0x00000000]
[21:16:26.730]      __var continueId = 0;
[21:16:26.732]        // -> [continueId <= 0x00000000]
[21:16:26.732]      deviceID =   Read32(0x41C40004);
[21:16:26.744]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:16:26.744]        // -> [deviceID <= 0x2BB8802F]
[21:16:26.744]      version = deviceID >> 28;
[21:16:26.744]        // -> [version <= 0x00000002]
[21:16:26.744]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:16:26.744]        // -> [partNum <= 0x0000BB88]
[21:16:26.744]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:16:26.744]        // -> [manuf <= 0x00000017]
[21:16:26.744]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:16:26.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:16:26.744]      isProduction = (version > 0);
[21:16:26.744]        // -> [isProduction <= 0x00000001]
[21:16:26.744]    </block>
[21:16:26.744]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:16:26.744]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:16:26.744]        // =>  FALSE
[21:16:26.744]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:16:26.744]    </control>
[21:16:26.746]    <control if="continueId == 4" while="" timeout="0" info="">
[21:16:26.746]      // if-block "continueId == 4"
[21:16:26.747]        // =>  FALSE
[21:16:26.747]      // skip if-block "continueId == 4"
[21:16:26.747]    </control>
[21:16:26.747]    <control if="!isProduction" while="" timeout="0" info="">
[21:16:26.747]      // if-block "!isProduction"
[21:16:26.747]        // =>  FALSE
[21:16:26.747]      // skip if-block "!isProduction"
[21:16:26.747]    </control>
[21:16:26.747]  </sequence>
[21:16:26.747]  
[21:16:33.654]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:16:33.654]  
[21:16:33.664]  <debugvars>
[21:16:33.664]    // Pre-defined
[21:16:33.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:33.664]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:16:33.665]    __dp=0x00000000
[21:16:33.665]    __ap=0x00000000
[21:16:33.665]    __traceout=0x00000000      (Trace Disabled)
[21:16:33.665]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:33.665]    __FlashAddr=0x00000000
[21:16:33.665]    __FlashLen=0x00000000
[21:16:33.665]    __FlashArg=0x00000000
[21:16:33.665]    __FlashOp=0x00000000
[21:16:33.665]    __Result=0x00000000
[21:16:33.665]  </debugvars>
[21:16:33.665]  
[21:16:33.665]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:16:33.665]    <block atomic="false" info="">
[21:16:33.665]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:16:33.666]        // -> [isSWJ <= 0x00000001]
[21:16:33.666]      __var hasDormant = __protocol & 0x00020000;
[21:16:33.666]        // -> [hasDormant <= 0x00000000]
[21:16:33.666]      __var protType   = __protocol & 0x0000FFFF;
[21:16:33.666]        // -> [protType <= 0x00000002]
[21:16:33.666]    </block>
[21:16:33.666]    <control if="protType == 1" while="" timeout="0" info="">
[21:16:33.666]      // if-block "protType == 1"
[21:16:33.666]        // =>  FALSE
[21:16:33.666]      // skip if-block "protType == 1"
[21:16:33.666]    </control>
[21:16:33.666]    <control if="protType == 2" while="" timeout="0" info="">
[21:16:33.666]      // if-block "protType == 2"
[21:16:33.666]        // =>  TRUE
[21:16:33.666]      <control if="isSWJ" while="" timeout="0" info="">
[21:16:33.666]        // if-block "isSWJ"
[21:16:33.666]          // =>  TRUE
[21:16:33.666]        <control if="hasDormant" while="" timeout="0" info="">
[21:16:33.666]          // if-block "hasDormant"
[21:16:33.666]            // =>  FALSE
[21:16:33.666]          // skip if-block "hasDormant"
[21:16:33.666]        </control>
[21:16:33.666]        <control if="!hasDormant" while="" timeout="0" info="">
[21:16:33.666]          // if-block "!hasDormant"
[21:16:33.666]            // =>  TRUE
[21:16:33.666]          <block atomic="false" info="">
[21:16:33.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:16:33.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:33.674]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:16:33.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:16:33.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:16:33.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:33.682]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:16:33.690]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:16:33.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:16:33.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:33.707]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:16:33.709]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:16:33.709]          </block>
[21:16:33.709]          // end if-block "!hasDormant"
[21:16:33.709]        </control>
[21:16:33.709]        // end if-block "isSWJ"
[21:16:33.709]      </control>
[21:16:33.709]      <control if="!isSWJ" while="" timeout="0" info="">
[21:16:33.709]        // if-block "!isSWJ"
[21:16:33.709]          // =>  FALSE
[21:16:33.709]        // skip if-block "!isSWJ"
[21:16:33.709]      </control>
[21:16:33.709]      <block atomic="false" info="">
[21:16:33.710]        ReadDP(0x0);
[21:16:33.722]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:16:33.722]      </block>
[21:16:33.722]      // end if-block "protType == 2"
[21:16:33.722]    </control>
[21:16:33.722]  </sequence>
[21:16:33.722]  
[21:16:33.730]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:16:33.730]  
[21:16:33.730]  <debugvars>
[21:16:33.730]    // Pre-defined
[21:16:33.730]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:33.730]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:16:33.730]    __dp=0x00000000
[21:16:33.730]    __ap=0x00000000
[21:16:33.730]    __traceout=0x00000000      (Trace Disabled)
[21:16:33.730]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:33.730]    __FlashAddr=0x00000000
[21:16:33.730]    __FlashLen=0x00000000
[21:16:33.730]    __FlashArg=0x00000000
[21:16:33.730]    __FlashOp=0x00000000
[21:16:33.730]    __Result=0x00000000
[21:16:33.730]  </debugvars>
[21:16:33.730]  
[21:16:33.730]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:16:33.730]    <block atomic="false" info="">
[21:16:33.730]      __var SW_DP_ABORT       = 0x0;
[21:16:33.730]        // -> [SW_DP_ABORT <= 0x00000000]
[21:16:33.730]      __var DP_CTRL_STAT      = 0x4;
[21:16:33.730]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:16:33.733]      __var DP_SELECT         = 0x8;
[21:16:33.733]        // -> [DP_SELECT <= 0x00000008]
[21:16:33.733]      __var powered_down      = 0;
[21:16:33.733]        // -> [powered_down <= 0x00000000]
[21:16:33.733]      WriteDP(DP_SELECT, 0x00000000);
[21:16:33.734]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:16:33.734]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:16:33.744]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:16:33.744]        // -> [powered_down <= 0x00000001]
[21:16:33.744]    </block>
[21:16:33.744]    <control if="powered_down" while="" timeout="0" info="">
[21:16:33.744]      // if-block "powered_down"
[21:16:33.744]        // =>  TRUE
[21:16:33.744]      <block atomic="false" info="">
[21:16:33.747]        Message(0, "Debug/System power-up request sent");
[21:16:33.747]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:16:33.747]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:16:33.750]      </block>
[21:16:33.750]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:16:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:16:33.751]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:16:33.751]        // while-condition  =>  FALSE
[21:16:33.754]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:16:33.754]      </control>
[21:16:33.754]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:16:33.754]        // if-block "(__protocol & 0xFFFF) == 1"
[21:16:33.754]          // =>  FALSE
[21:16:33.754]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:16:33.754]      </control>
[21:16:33.754]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:16:33.754]        // if-block "(__protocol & 0xFFFF) == 2"
[21:16:33.754]          // =>  TRUE
[21:16:33.754]        <block atomic="false" info="">
[21:16:33.754]          Message(0, "executing SWD power up");
[21:16:33.754]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:16:33.758]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:16:33.758]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:16:33.762]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:16:33.762]        </block>
[21:16:33.767]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:16:33.767]      </control>
[21:16:33.767]      // end if-block "powered_down"
[21:16:33.767]    </control>
[21:16:33.767]    <block atomic="false" info="">
[21:16:33.767]      __var DEBUG_PORT_VAL    = 0;
[21:16:33.767]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:16:33.767]      __var ACCESS_POINT_VAL  = 0;
[21:16:33.767]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:16:33.767]      __ap = 1; 
[21:16:33.767]        // -> [__ap <= 0x00000001]
[21:16:33.767]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:16:33.771]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:16:33.771]      __ap = 4;
[21:16:33.771]        // -> [__ap <= 0x00000004]
[21:16:33.771]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:33.793]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:16:33.795]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:16:33.795]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:33.795]    </block>
[21:16:33.795]    <block atomic="false" info="">
[21:16:33.795]      __var nReset = 0x80;
[21:16:33.795]        // -> [nReset <= 0x00000080]
[21:16:33.795]      __var canReadPins = 0;
[21:16:33.795]        // -> [canReadPins <= 0x00000000]
[21:16:33.795]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:16:33.803]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:16:33.803]        // -> [canReadPins <= 0x00000001]
[21:16:33.803]    </block>
[21:16:33.803]    <control if="" while="1" timeout="200" info="">
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.803]      // while "1"  (timeout="200")
[21:16:33.803]      // while-condition  =>  TRUE
[21:16:33.807]      // while "1"  (timeout="200")
[21:16:33.808]      // while-condition  =>  TRUE
[21:16:33.808]      // while "1"  (timeout="200")
[21:16:33.808]      // while-condition  =>  TRUE
[21:16:33.808]      // while "1"  (timeout="200")
[21:16:33.808]      // while-condition  =>  TRUE
[21:16:33.808]      // while "1"  (timeout="200")
[21:16:33.808]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.809]      // while-condition  =>  TRUE
[21:16:33.809]      // while "1"  (timeout="200")
[21:16:33.810]      // while-condition  =>  TRUE
[21:16:33.810]      // while "1"  (timeout="200")
[21:16:33.810]      // while-condition  =>  TRUE
[21:16:33.810]      // while "1"  (timeout="200")
[21:16:33.810]      // while-condition  =>  TRUE
[21:16:33.810]      // while "1"  (timeout="200")
[21:16:33.810]      // while-condition  =>  TRUE
[21:16:33.810]      // while "1"  (timeout="200")
[21:16:33.810]      // while-condition  =>  TRUE
[21:16:33.811]      // while "1"  (timeout="200")
[21:16:33.811]      // while-condition  =>  TRUE
[21:16:33.811]      // while "1"  (timeout="200")
[21:16:33.811]      // while-condition  =>  TRUE
[21:16:33.811]      // while "1"  (timeout="200")
[21:16:33.811]      // while-condition  =>  TRUE
[21:16:33.811]      // while "1"  (timeout="200")
[21:16:33.811]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.813]      // while "1"  (timeout="200")
[21:16:33.813]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.814]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.814]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.814]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.814]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.814]      // while-condition  =>  TRUE
[21:16:33.814]      // while "1"  (timeout="200")
[21:16:33.816]      // while-condition  =>  TRUE
[21:16:33.816]      // while "1"  (timeout="200")
[21:16:33.816]      // while-condition  =>  TRUE
[21:16:33.816]      // while "1"  (timeout="200")
[21:16:33.816]      // while-condition  =>  TRUE
[21:16:33.817]      // while "1"  (timeout="200")
[21:16:33.817]      // while  =>  TIMEOUT
[21:16:33.817]      // end while "1"
[21:16:33.817]    </control>
[21:16:33.817]    <control if="canReadPins" while="" timeout="0" info="">
[21:16:33.817]      // if-block "canReadPins"
[21:16:33.817]        // =>  TRUE
[21:16:33.817]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:16:33.817]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:16:33.819]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:16:33.819]        // while-condition  =>  FALSE
[21:16:33.819]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:16:33.820]      </control>
[21:16:33.820]      // end if-block "canReadPins"
[21:16:33.820]    </control>
[21:16:33.820]    <control if="!canReadPins" while="" timeout="0" info="">
[21:16:33.820]      // if-block "!canReadPins"
[21:16:33.820]        // =>  FALSE
[21:16:33.820]      // skip if-block "!canReadPins"
[21:16:33.820]    </control>
[21:16:33.820]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:16:33.820]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:33.820]        // =>  TRUE
[21:16:33.820]      <block atomic="false" info="">
[21:16:33.820]        WriteAP(0x00, 0x190008);
[21:16:33.824]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:33.824]        WriteAP(0xF0, 0x01);
[21:16:33.837]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:33.837]      </block>
[21:16:33.837]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:33.837]    </control>
[21:16:33.837]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:16:33.837]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:33.837]        // =>  FALSE
[21:16:33.837]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:33.837]    </control>
[21:16:33.837]    <block atomic="false" info="">
[21:16:33.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:33.850]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:16:33.850]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:16:33.850]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:33.854]      __ap = 0; //lets make sure we reset the access point selection
[21:16:33.854]        // -> [__ap <= 0x00000000]
[21:16:33.854]    </block>
[21:16:33.854]  </sequence>
[21:16:33.854]  
[21:16:33.886]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:16:33.886]  
[21:16:33.886]  <debugvars>
[21:16:33.886]    // Pre-defined
[21:16:33.886]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:33.886]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:16:33.886]    __dp=0x00000000
[21:16:33.886]    __ap=0x00000000
[21:16:33.886]    __traceout=0x00000000      (Trace Disabled)
[21:16:33.886]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:33.886]    __FlashAddr=0x00000000
[21:16:33.886]    __FlashLen=0x00000000
[21:16:33.886]    __FlashArg=0x00000000
[21:16:33.886]    __FlashOp=0x00000000
[21:16:33.886]    __Result=0x00000000
[21:16:33.886]  </debugvars>
[21:16:33.886]  
[21:16:33.886]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:16:33.886]    <block atomic="false" info="">
[21:16:33.886]      __var deviceID = 0;
[21:16:33.886]        // -> [deviceID <= 0x00000000]
[21:16:33.886]      __var version = 0;
[21:16:33.886]        // -> [version <= 0x00000000]
[21:16:33.886]      __var partNum = 0;
[21:16:33.886]        // -> [partNum <= 0x00000000]
[21:16:33.886]      __var manuf = 0;
[21:16:33.886]        // -> [manuf <= 0x00000000]
[21:16:33.886]      __var isMSPM0G1X0X_G3X0X = 0;
[21:16:33.886]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:16:33.886]      __var isProduction = 0;
[21:16:33.886]        // -> [isProduction <= 0x00000000]
[21:16:33.886]      __var continueId = 0;
[21:16:33.886]        // -> [continueId <= 0x00000000]
[21:16:33.886]      deviceID =   Read32(0x41C40004);
[21:16:33.894]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:16:33.894]        // -> [deviceID <= 0x2BB8802F]
[21:16:33.894]      version = deviceID >> 28;
[21:16:33.894]        // -> [version <= 0x00000002]
[21:16:33.894]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:16:33.894]        // -> [partNum <= 0x0000BB88]
[21:16:33.894]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:16:33.894]        // -> [manuf <= 0x00000017]
[21:16:33.894]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:16:33.894]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:16:33.898]      isProduction = (version > 0);
[21:16:33.898]        // -> [isProduction <= 0x00000001]
[21:16:33.898]    </block>
[21:16:33.898]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:16:33.898]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:16:33.898]        // =>  FALSE
[21:16:33.898]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:16:33.898]    </control>
[21:16:33.898]    <control if="continueId == 4" while="" timeout="0" info="">
[21:16:33.898]      // if-block "continueId == 4"
[21:16:33.898]        // =>  FALSE
[21:16:33.898]      // skip if-block "continueId == 4"
[21:16:33.898]    </control>
[21:16:33.898]    <control if="!isProduction" while="" timeout="0" info="">
[21:16:33.898]      // if-block "!isProduction"
[21:16:33.898]        // =>  FALSE
[21:16:33.898]      // skip if-block "!isProduction"
[21:16:33.898]    </control>
[21:16:33.898]  </sequence>
[21:16:33.898]  
[21:28:29.265]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:28:29.265]  
[21:28:29.276]  <debugvars>
[21:28:29.276]    // Pre-defined
[21:28:29.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:29.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:29.276]    __dp=0x00000000
[21:28:29.276]    __ap=0x00000000
[21:28:29.276]    __traceout=0x00000000      (Trace Disabled)
[21:28:29.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:29.276]    __FlashAddr=0x00000000
[21:28:29.277]    __FlashLen=0x00000000
[21:28:29.277]    __FlashArg=0x00000000
[21:28:29.277]    __FlashOp=0x00000000
[21:28:29.277]    __Result=0x00000000
[21:28:29.277]  </debugvars>
[21:28:29.277]  
[21:28:29.277]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:28:29.277]    <block atomic="false" info="">
[21:28:29.277]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:28:29.277]        // -> [isSWJ <= 0x00000001]
[21:28:29.277]      __var hasDormant = __protocol & 0x00020000;
[21:28:29.277]        // -> [hasDormant <= 0x00000000]
[21:28:29.277]      __var protType   = __protocol & 0x0000FFFF;
[21:28:29.277]        // -> [protType <= 0x00000002]
[21:28:29.277]    </block>
[21:28:29.277]    <control if="protType == 1" while="" timeout="0" info="">
[21:28:29.277]      // if-block "protType == 1"
[21:28:29.279]        // =>  FALSE
[21:28:29.279]      // skip if-block "protType == 1"
[21:28:29.279]    </control>
[21:28:29.279]    <control if="protType == 2" while="" timeout="0" info="">
[21:28:29.279]      // if-block "protType == 2"
[21:28:29.279]        // =>  TRUE
[21:28:29.279]      <control if="isSWJ" while="" timeout="0" info="">
[21:28:29.279]        // if-block "isSWJ"
[21:28:29.280]          // =>  TRUE
[21:28:29.280]        <control if="hasDormant" while="" timeout="0" info="">
[21:28:29.280]          // if-block "hasDormant"
[21:28:29.280]            // =>  FALSE
[21:28:29.280]          // skip if-block "hasDormant"
[21:28:29.280]        </control>
[21:28:29.280]        <control if="!hasDormant" while="" timeout="0" info="">
[21:28:29.281]          // if-block "!hasDormant"
[21:28:29.281]            // =>  TRUE
[21:28:29.281]          <block atomic="false" info="">
[21:28:29.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:28:29.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:29.284]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:28:29.294]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:28:29.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:28:29.298]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:29.298]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:28:29.302]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:28:29.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:28:29.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:29.306]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:28:29.307]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:28:29.307]          </block>
[21:28:29.307]          // end if-block "!hasDormant"
[21:28:29.307]        </control>
[21:28:29.307]        // end if-block "isSWJ"
[21:28:29.307]      </control>
[21:28:29.307]      <control if="!isSWJ" while="" timeout="0" info="">
[21:28:29.307]        // if-block "!isSWJ"
[21:28:29.307]          // =>  FALSE
[21:28:29.307]        // skip if-block "!isSWJ"
[21:28:29.307]      </control>
[21:28:29.307]      <block atomic="false" info="">
[21:28:29.307]        ReadDP(0x0);
[21:28:29.313]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:28:29.313]      </block>
[21:28:29.313]      // end if-block "protType == 2"
[21:28:29.313]    </control>
[21:28:29.313]  </sequence>
[21:28:29.313]  
[21:28:29.324]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:28:29.324]  
[21:28:29.324]  <debugvars>
[21:28:29.324]    // Pre-defined
[21:28:29.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:29.324]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:29.324]    __dp=0x00000000
[21:28:29.324]    __ap=0x00000000
[21:28:29.324]    __traceout=0x00000000      (Trace Disabled)
[21:28:29.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:29.324]    __FlashAddr=0x00000000
[21:28:29.324]    __FlashLen=0x00000000
[21:28:29.326]    __FlashArg=0x00000000
[21:28:29.326]    __FlashOp=0x00000000
[21:28:29.326]    __Result=0x00000000
[21:28:29.327]  </debugvars>
[21:28:29.327]  
[21:28:29.327]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:28:29.327]    <block atomic="false" info="">
[21:28:29.327]      __var SW_DP_ABORT       = 0x0;
[21:28:29.327]        // -> [SW_DP_ABORT <= 0x00000000]
[21:28:29.327]      __var DP_CTRL_STAT      = 0x4;
[21:28:29.327]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:28:29.327]      __var DP_SELECT         = 0x8;
[21:28:29.327]        // -> [DP_SELECT <= 0x00000008]
[21:28:29.327]      __var powered_down      = 0;
[21:28:29.327]        // -> [powered_down <= 0x00000000]
[21:28:29.327]      WriteDP(DP_SELECT, 0x00000000);
[21:28:29.334]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:28:29.334]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:28:29.336]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:28:29.336]        // -> [powered_down <= 0x00000001]
[21:28:29.336]    </block>
[21:28:29.336]    <control if="powered_down" while="" timeout="0" info="">
[21:28:29.336]      // if-block "powered_down"
[21:28:29.336]        // =>  TRUE
[21:28:29.338]      <block atomic="false" info="">
[21:28:29.338]        Message(0, "Debug/System power-up request sent");
[21:28:29.339]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:28:29.341]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:28:29.341]      </block>
[21:28:29.342]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:28:29.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:28:29.345]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:28:29.345]        // while-condition  =>  FALSE
[21:28:29.345]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:28:29.345]      </control>
[21:28:29.345]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:28:29.346]        // if-block "(__protocol & 0xFFFF) == 1"
[21:28:29.346]          // =>  FALSE
[21:28:29.346]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:28:29.346]      </control>
[21:28:29.346]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:28:29.346]        // if-block "(__protocol & 0xFFFF) == 2"
[21:28:29.346]          // =>  TRUE
[21:28:29.346]        <block atomic="false" info="">
[21:28:29.346]          Message(0, "executing SWD power up");
[21:28:29.349]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:28:29.351]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:28:29.351]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:28:29.354]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:28:29.354]        </block>
[21:28:29.354]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:28:29.354]      </control>
[21:28:29.354]      // end if-block "powered_down"
[21:28:29.354]    </control>
[21:28:29.354]    <block atomic="false" info="">
[21:28:29.354]      __var DEBUG_PORT_VAL    = 0;
[21:28:29.354]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:28:29.354]      __var ACCESS_POINT_VAL  = 0;
[21:28:29.355]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:28:29.355]      __ap = 1; 
[21:28:29.355]        // -> [__ap <= 0x00000001]
[21:28:29.355]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:28:29.361]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:28:29.361]      __ap = 4;
[21:28:29.361]        // -> [__ap <= 0x00000004]
[21:28:29.361]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:29.366]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:28:29.366]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:28:29.366]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:29.369]    </block>
[21:28:29.369]    <block atomic="false" info="">
[21:28:29.369]      __var nReset = 0x80;
[21:28:29.369]        // -> [nReset <= 0x00000080]
[21:28:29.369]      __var canReadPins = 0;
[21:28:29.369]        // -> [canReadPins <= 0x00000000]
[21:28:29.369]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:28:29.373]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:28:29.373]        // -> [canReadPins <= 0x00000001]
[21:28:29.374]    </block>
[21:28:29.374]    <control if="" while="1" timeout="200" info="">
[21:28:29.374]      // while "1"  (timeout="200")
[21:28:29.374]      // while-condition  =>  TRUE
[21:28:29.374]      // while "1"  (timeout="200")
[21:28:29.374]      // while-condition  =>  TRUE
[21:28:29.374]      // while "1"  (timeout="200")
[21:28:29.374]      // while-condition  =>  TRUE
[21:28:29.374]      // while "1"  (timeout="200")
[21:28:29.374]      // while-condition  =>  TRUE
[21:28:29.374]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.375]      // while "1"  (timeout="200")
[21:28:29.375]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.377]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.377]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.377]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.377]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.377]      // while-condition  =>  TRUE
[21:28:29.377]      // while "1"  (timeout="200")
[21:28:29.378]      // while-condition  =>  TRUE
[21:28:29.378]      // while "1"  (timeout="200")
[21:28:29.378]      // while-condition  =>  TRUE
[21:28:29.378]      // while "1"  (timeout="200")
[21:28:29.379]      // while-condition  =>  TRUE
[21:28:29.379]      // while "1"  (timeout="200")
[21:28:29.379]      // while  =>  TIMEOUT
[21:28:29.379]      // end while "1"
[21:28:29.379]    </control>
[21:28:29.379]    <control if="canReadPins" while="" timeout="0" info="">
[21:28:29.379]      // if-block "canReadPins"
[21:28:29.379]        // =>  TRUE
[21:28:29.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:28:29.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:28:29.381]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:28:29.381]        // while-condition  =>  FALSE
[21:28:29.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:28:29.381]      </control>
[21:28:29.381]      // end if-block "canReadPins"
[21:28:29.381]    </control>
[21:28:29.381]    <control if="!canReadPins" while="" timeout="0" info="">
[21:28:29.381]      // if-block "!canReadPins"
[21:28:29.381]        // =>  FALSE
[21:28:29.385]      // skip if-block "!canReadPins"
[21:28:29.385]    </control>
[21:28:29.385]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:28:29.385]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:29.385]        // =>  TRUE
[21:28:29.385]      <block atomic="false" info="">
[21:28:29.385]        WriteAP(0x00, 0x190008);
[21:28:29.386]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:29.386]        WriteAP(0xF0, 0x01);
[21:28:29.393]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:29.393]      </block>
[21:28:29.393]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:29.393]    </control>
[21:28:29.393]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:28:29.393]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:29.393]        // =>  FALSE
[21:28:29.393]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:29.393]    </control>
[21:28:29.393]    <block atomic="false" info="">
[21:28:29.393]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:29.401]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:28:29.401]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:28:29.401]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:29.402]      __ap = 0; //lets make sure we reset the access point selection
[21:28:29.402]        // -> [__ap <= 0x00000000]
[21:28:29.402]    </block>
[21:28:29.402]  </sequence>
[21:28:29.402]  
[21:28:29.450]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:28:29.450]  
[21:28:29.451]  <debugvars>
[21:28:29.451]    // Pre-defined
[21:28:29.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:29.451]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:29.451]    __dp=0x00000000
[21:28:29.451]    __ap=0x00000000
[21:28:29.451]    __traceout=0x00000000      (Trace Disabled)
[21:28:29.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:29.451]    __FlashAddr=0x00000000
[21:28:29.451]    __FlashLen=0x00000000
[21:28:29.451]    __FlashArg=0x00000000
[21:28:29.451]    __FlashOp=0x00000000
[21:28:29.451]    __Result=0x00000000
[21:28:29.451]  </debugvars>
[21:28:29.451]  
[21:28:29.451]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:28:29.451]    <block atomic="false" info="">
[21:28:29.453]      __var deviceID = 0;
[21:28:29.453]        // -> [deviceID <= 0x00000000]
[21:28:29.453]      __var version = 0;
[21:28:29.453]        // -> [version <= 0x00000000]
[21:28:29.453]      __var partNum = 0;
[21:28:29.453]        // -> [partNum <= 0x00000000]
[21:28:29.453]      __var manuf = 0;
[21:28:29.453]        // -> [manuf <= 0x00000000]
[21:28:29.453]      __var isMSPM0G1X0X_G3X0X = 0;
[21:28:29.454]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:28:29.454]      __var isProduction = 0;
[21:28:29.454]        // -> [isProduction <= 0x00000000]
[21:28:29.454]      __var continueId = 0;
[21:28:29.454]        // -> [continueId <= 0x00000000]
[21:28:29.454]      deviceID =   Read32(0x41C40004);
[21:28:29.467]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:28:29.467]        // -> [deviceID <= 0x2BB8802F]
[21:28:29.467]      version = deviceID >> 28;
[21:28:29.467]        // -> [version <= 0x00000002]
[21:28:29.467]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:28:29.467]        // -> [partNum <= 0x0000BB88]
[21:28:29.467]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:28:29.467]        // -> [manuf <= 0x00000017]
[21:28:29.467]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:28:29.467]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:28:29.467]      isProduction = (version > 0);
[21:28:29.467]        // -> [isProduction <= 0x00000001]
[21:28:29.467]    </block>
[21:28:29.467]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:28:29.467]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:28:29.467]        // =>  FALSE
[21:28:29.467]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:28:29.467]    </control>
[21:28:29.467]    <control if="continueId == 4" while="" timeout="0" info="">
[21:28:29.467]      // if-block "continueId == 4"
[21:28:29.471]        // =>  FALSE
[21:28:29.471]      // skip if-block "continueId == 4"
[21:28:29.471]    </control>
[21:28:29.471]    <control if="!isProduction" while="" timeout="0" info="">
[21:28:29.471]      // if-block "!isProduction"
[21:28:29.471]        // =>  FALSE
[21:28:29.471]      // skip if-block "!isProduction"
[21:28:29.471]    </control>
[21:28:29.472]  </sequence>
[21:28:29.472]  
[21:30:51.713]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:30:51.713]  
[21:30:51.723]  <debugvars>
[21:30:51.723]    // Pre-defined
[21:30:51.723]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:51.723]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:51.723]    __dp=0x00000000
[21:30:51.723]    __ap=0x00000000
[21:30:51.723]    __traceout=0x00000000      (Trace Disabled)
[21:30:51.723]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:51.723]    __FlashAddr=0x00000000
[21:30:51.723]    __FlashLen=0x00000000
[21:30:51.723]    __FlashArg=0x00000000
[21:30:51.723]    __FlashOp=0x00000000
[21:30:51.723]    __Result=0x00000000
[21:30:51.723]  </debugvars>
[21:30:51.723]  
[21:30:51.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:30:51.723]    <block atomic="false" info="">
[21:30:51.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:30:51.723]        // -> [isSWJ <= 0x00000001]
[21:30:51.725]      __var hasDormant = __protocol & 0x00020000;
[21:30:51.725]        // -> [hasDormant <= 0x00000000]
[21:30:51.725]      __var protType   = __protocol & 0x0000FFFF;
[21:30:51.725]        // -> [protType <= 0x00000002]
[21:30:51.725]    </block>
[21:30:51.725]    <control if="protType == 1" while="" timeout="0" info="">
[21:30:51.725]      // if-block "protType == 1"
[21:30:51.725]        // =>  FALSE
[21:30:51.725]      // skip if-block "protType == 1"
[21:30:51.725]    </control>
[21:30:51.725]    <control if="protType == 2" while="" timeout="0" info="">
[21:30:51.725]      // if-block "protType == 2"
[21:30:51.725]        // =>  TRUE
[21:30:51.725]      <control if="isSWJ" while="" timeout="0" info="">
[21:30:51.725]        // if-block "isSWJ"
[21:30:51.725]          // =>  TRUE
[21:30:51.725]        <control if="hasDormant" while="" timeout="0" info="">
[21:30:51.725]          // if-block "hasDormant"
[21:30:51.725]            // =>  FALSE
[21:30:51.725]          // skip if-block "hasDormant"
[21:30:51.725]        </control>
[21:30:51.725]        <control if="!hasDormant" while="" timeout="0" info="">
[21:30:51.725]          // if-block "!hasDormant"
[21:30:51.725]            // =>  TRUE
[21:30:51.725]          <block atomic="false" info="">
[21:30:51.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:30:51.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:51.733]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:30:51.733]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:30:51.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:30:51.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:51.738]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:30:51.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:30:51.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:30:51.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:30:51.741]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:30:51.742]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:30:51.742]          </block>
[21:30:51.742]          // end if-block "!hasDormant"
[21:30:51.742]        </control>
[21:30:51.742]        // end if-block "isSWJ"
[21:30:51.742]      </control>
[21:30:51.742]      <control if="!isSWJ" while="" timeout="0" info="">
[21:30:51.742]        // if-block "!isSWJ"
[21:30:51.742]          // =>  FALSE
[21:30:51.742]        // skip if-block "!isSWJ"
[21:30:51.742]      </control>
[21:30:51.742]      <block atomic="false" info="">
[21:30:51.745]        ReadDP(0x0);
[21:30:51.745]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:30:51.745]      </block>
[21:30:51.745]      // end if-block "protType == 2"
[21:30:51.745]    </control>
[21:30:51.745]  </sequence>
[21:30:51.745]  
[21:30:51.749]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:30:51.749]  
[21:30:51.749]  <debugvars>
[21:30:51.749]    // Pre-defined
[21:30:51.749]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:51.749]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:51.749]    __dp=0x00000000
[21:30:51.749]    __ap=0x00000000
[21:30:51.749]    __traceout=0x00000000      (Trace Disabled)
[21:30:51.749]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:51.749]    __FlashAddr=0x00000000
[21:30:51.749]    __FlashLen=0x00000000
[21:30:51.749]    __FlashArg=0x00000000
[21:30:51.751]    __FlashOp=0x00000000
[21:30:51.751]    __Result=0x00000000
[21:30:51.751]  </debugvars>
[21:30:51.751]  
[21:30:51.751]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:30:51.751]    <block atomic="false" info="">
[21:30:51.751]      __var SW_DP_ABORT       = 0x0;
[21:30:51.751]        // -> [SW_DP_ABORT <= 0x00000000]
[21:30:51.751]      __var DP_CTRL_STAT      = 0x4;
[21:30:51.751]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:30:51.751]      __var DP_SELECT         = 0x8;
[21:30:51.752]        // -> [DP_SELECT <= 0x00000008]
[21:30:51.752]      __var powered_down      = 0;
[21:30:51.752]        // -> [powered_down <= 0x00000000]
[21:30:51.752]      WriteDP(DP_SELECT, 0x00000000);
[21:30:51.753]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:30:51.753]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:30:51.756]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:30:51.756]        // -> [powered_down <= 0x00000001]
[21:30:51.756]    </block>
[21:30:51.756]    <control if="powered_down" while="" timeout="0" info="">
[21:30:51.756]      // if-block "powered_down"
[21:30:51.756]        // =>  TRUE
[21:30:51.756]      <block atomic="false" info="">
[21:30:51.756]        Message(0, "Debug/System power-up request sent");
[21:30:51.758]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:30:51.760]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:30:51.760]      </block>
[21:30:51.760]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:30:51.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:30:51.762]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:30:51.762]        // while-condition  =>  FALSE
[21:30:51.762]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:30:51.762]      </control>
[21:30:51.762]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:30:51.762]        // if-block "(__protocol & 0xFFFF) == 1"
[21:30:51.762]          // =>  FALSE
[21:30:51.766]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:30:51.766]      </control>
[21:30:51.766]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:30:51.766]        // if-block "(__protocol & 0xFFFF) == 2"
[21:30:51.766]          // =>  TRUE
[21:30:51.766]        <block atomic="false" info="">
[21:30:51.766]          Message(0, "executing SWD power up");
[21:30:51.767]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:30:51.773]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:30:51.773]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:30:51.775]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:30:51.775]        </block>
[21:30:51.778]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:30:51.778]      </control>
[21:30:51.778]      // end if-block "powered_down"
[21:30:51.778]    </control>
[21:30:51.778]    <block atomic="false" info="">
[21:30:51.778]      __var DEBUG_PORT_VAL    = 0;
[21:30:51.778]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:30:51.778]      __var ACCESS_POINT_VAL  = 0;
[21:30:51.778]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:30:51.778]      __ap = 1; 
[21:30:51.778]        // -> [__ap <= 0x00000001]
[21:30:51.778]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:30:51.786]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:30:51.786]      __ap = 4;
[21:30:51.786]        // -> [__ap <= 0x00000004]
[21:30:51.786]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:30:51.793]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:30:51.793]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:30:51.793]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:30:51.794]    </block>
[21:30:51.794]    <block atomic="false" info="">
[21:30:51.794]      __var nReset = 0x80;
[21:30:51.794]        // -> [nReset <= 0x00000080]
[21:30:51.795]      __var canReadPins = 0;
[21:30:51.795]        // -> [canReadPins <= 0x00000000]
[21:30:51.795]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:30:51.797]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:30:51.797]        // -> [canReadPins <= 0x00000001]
[21:30:51.797]    </block>
[21:30:51.797]    <control if="" while="1" timeout="200" info="">
[21:30:51.797]      // while "1"  (timeout="200")
[21:30:51.797]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.799]      // while "1"  (timeout="200")
[21:30:51.799]      // while-condition  =>  TRUE
[21:30:51.803]      // while "1"  (timeout="200")
[21:30:51.803]      // while  =>  TIMEOUT
[21:30:51.803]      // end while "1"
[21:30:51.803]    </control>
[21:30:51.803]    <control if="canReadPins" while="" timeout="0" info="">
[21:30:51.803]      // if-block "canReadPins"
[21:30:51.803]        // =>  TRUE
[21:30:51.803]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:30:51.803]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:30:51.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:30:51.803]        // while-condition  =>  FALSE
[21:30:51.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:30:51.803]      </control>
[21:30:51.803]      // end if-block "canReadPins"
[21:30:51.803]    </control>
[21:30:51.803]    <control if="!canReadPins" while="" timeout="0" info="">
[21:30:51.803]      // if-block "!canReadPins"
[21:30:51.803]        // =>  FALSE
[21:30:51.803]      // skip if-block "!canReadPins"
[21:30:51.803]    </control>
[21:30:51.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:30:51.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:30:51.803]        // =>  TRUE
[21:30:51.807]      <block atomic="false" info="">
[21:30:51.807]        WriteAP(0x00, 0x190008);
[21:30:51.809]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:30:51.809]        WriteAP(0xF0, 0x01);
[21:30:51.811]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:30:51.811]      </block>
[21:30:51.811]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:30:51.811]    </control>
[21:30:51.811]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:30:51.811]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:30:51.811]        // =>  FALSE
[21:30:51.811]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:30:51.811]    </control>
[21:30:51.811]    <block atomic="false" info="">
[21:30:51.811]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:30:51.819]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:30:51.819]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:30:51.819]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:30:51.819]      __ap = 0; //lets make sure we reset the access point selection
[21:30:51.823]        // -> [__ap <= 0x00000000]
[21:30:51.823]    </block>
[21:30:51.823]  </sequence>
[21:30:51.823]  
[21:30:51.852]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:30:51.852]  
[21:30:51.852]  <debugvars>
[21:30:51.852]    // Pre-defined
[21:30:51.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:30:51.852]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:30:51.852]    __dp=0x00000000
[21:30:51.852]    __ap=0x00000000
[21:30:51.852]    __traceout=0x00000000      (Trace Disabled)
[21:30:51.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:30:51.856]    __FlashAddr=0x00000000
[21:30:51.856]    __FlashLen=0x00000000
[21:30:51.856]    __FlashArg=0x00000000
[21:30:51.856]    __FlashOp=0x00000000
[21:30:51.856]    __Result=0x00000000
[21:30:51.856]  </debugvars>
[21:30:51.856]  
[21:30:51.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:30:51.856]    <block atomic="false" info="">
[21:30:51.856]      __var deviceID = 0;
[21:30:51.856]        // -> [deviceID <= 0x00000000]
[21:30:51.856]      __var version = 0;
[21:30:51.856]        // -> [version <= 0x00000000]
[21:30:51.856]      __var partNum = 0;
[21:30:51.856]        // -> [partNum <= 0x00000000]
[21:30:51.856]      __var manuf = 0;
[21:30:51.856]        // -> [manuf <= 0x00000000]
[21:30:51.856]      __var isMSPM0G1X0X_G3X0X = 0;
[21:30:51.856]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:30:51.856]      __var isProduction = 0;
[21:30:51.856]        // -> [isProduction <= 0x00000000]
[21:30:51.856]      __var continueId = 0;
[21:30:51.856]        // -> [continueId <= 0x00000000]
[21:30:51.856]      deviceID =   Read32(0x41C40004);
[21:30:51.867]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:30:51.867]        // -> [deviceID <= 0x2BB8802F]
[21:30:51.867]      version = deviceID >> 28;
[21:30:51.867]        // -> [version <= 0x00000002]
[21:30:51.867]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:30:51.867]        // -> [partNum <= 0x0000BB88]
[21:30:51.867]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:30:51.867]        // -> [manuf <= 0x00000017]
[21:30:51.867]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:30:51.867]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:30:51.867]      isProduction = (version > 0);
[21:30:51.867]        // -> [isProduction <= 0x00000001]
[21:30:51.867]    </block>
[21:30:51.867]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:30:51.867]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:30:51.867]        // =>  FALSE
[21:30:51.867]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:30:51.867]    </control>
[21:30:51.871]    <control if="continueId == 4" while="" timeout="0" info="">
[21:30:51.871]      // if-block "continueId == 4"
[21:30:51.872]        // =>  FALSE
[21:30:51.872]      // skip if-block "continueId == 4"
[21:30:51.872]    </control>
[21:30:51.872]    <control if="!isProduction" while="" timeout="0" info="">
[21:30:51.872]      // if-block "!isProduction"
[21:30:51.872]        // =>  FALSE
[21:30:51.872]      // skip if-block "!isProduction"
[21:30:51.872]    </control>
[21:30:51.872]  </sequence>
[21:30:51.872]  
[21:50:11.529]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:50:11.529]  
[21:50:11.529]  <debugvars>
[21:50:11.529]    // Pre-defined
[21:50:11.529]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:11.529]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:11.529]    __dp=0x00000000
[21:50:11.529]    __ap=0x00000000
[21:50:11.529]    __traceout=0x00000000      (Trace Disabled)
[21:50:11.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:11.529]    __FlashAddr=0x00000000
[21:50:11.529]    __FlashLen=0x00000000
[21:50:11.529]    __FlashArg=0x00000000
[21:50:11.529]    __FlashOp=0x00000000
[21:50:11.529]    __Result=0x00000000
[21:50:11.529]  </debugvars>
[21:50:11.529]  
[21:50:11.529]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:50:11.529]    <block atomic="false" info="">
[21:50:11.529]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:50:11.529]        // -> [isSWJ <= 0x00000001]
[21:50:11.529]      __var hasDormant = __protocol & 0x00020000;
[21:50:11.529]        // -> [hasDormant <= 0x00000000]
[21:50:11.529]      __var protType   = __protocol & 0x0000FFFF;
[21:50:11.529]        // -> [protType <= 0x00000002]
[21:50:11.529]    </block>
[21:50:11.529]    <control if="protType == 1" while="" timeout="0" info="">
[21:50:11.529]      // if-block "protType == 1"
[21:50:11.529]        // =>  FALSE
[21:50:11.534]      // skip if-block "protType == 1"
[21:50:11.534]    </control>
[21:50:11.534]    <control if="protType == 2" while="" timeout="0" info="">
[21:50:11.534]      // if-block "protType == 2"
[21:50:11.534]        // =>  TRUE
[21:50:11.534]      <control if="isSWJ" while="" timeout="0" info="">
[21:50:11.534]        // if-block "isSWJ"
[21:50:11.534]          // =>  TRUE
[21:50:11.534]        <control if="hasDormant" while="" timeout="0" info="">
[21:50:11.534]          // if-block "hasDormant"
[21:50:11.534]            // =>  FALSE
[21:50:11.534]          // skip if-block "hasDormant"
[21:50:11.534]        </control>
[21:50:11.535]        <control if="!hasDormant" while="" timeout="0" info="">
[21:50:11.535]          // if-block "!hasDormant"
[21:50:11.535]            // =>  TRUE
[21:50:11.535]          <block atomic="false" info="">
[21:50:11.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:50:11.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:11.535]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:50:11.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:50:11.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:50:11.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:11.542]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:50:11.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:50:11.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:50:11.550]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:11.550]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:50:11.551]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:50:11.551]          </block>
[21:50:11.551]          // end if-block "!hasDormant"
[21:50:11.551]        </control>
[21:50:11.551]        // end if-block "isSWJ"
[21:50:11.551]      </control>
[21:50:11.551]      <control if="!isSWJ" while="" timeout="0" info="">
[21:50:11.551]        // if-block "!isSWJ"
[21:50:11.551]          // =>  FALSE
[21:50:11.551]        // skip if-block "!isSWJ"
[21:50:11.551]      </control>
[21:50:11.551]      <block atomic="false" info="">
[21:50:11.551]        ReadDP(0x0);
[21:50:11.555]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:50:11.555]      </block>
[21:50:11.555]      // end if-block "protType == 2"
[21:50:11.555]    </control>
[21:50:11.555]  </sequence>
[21:50:11.555]  
[21:50:11.560]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:50:11.560]  
[21:50:11.560]  <debugvars>
[21:50:11.560]    // Pre-defined
[21:50:11.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:11.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:11.560]    __dp=0x00000000
[21:50:11.560]    __ap=0x00000000
[21:50:11.560]    __traceout=0x00000000      (Trace Disabled)
[21:50:11.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:11.560]    __FlashAddr=0x00000000
[21:50:11.560]    __FlashLen=0x00000000
[21:50:11.560]    __FlashArg=0x00000000
[21:50:11.560]    __FlashOp=0x00000000
[21:50:11.560]    __Result=0x00000000
[21:50:11.560]  </debugvars>
[21:50:11.560]  
[21:50:11.563]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:50:11.563]    <block atomic="false" info="">
[21:50:11.563]      __var SW_DP_ABORT       = 0x0;
[21:50:11.563]        // -> [SW_DP_ABORT <= 0x00000000]
[21:50:11.563]      __var DP_CTRL_STAT      = 0x4;
[21:50:11.563]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:50:11.563]      __var DP_SELECT         = 0x8;
[21:50:11.563]        // -> [DP_SELECT <= 0x00000008]
[21:50:11.563]      __var powered_down      = 0;
[21:50:11.563]        // -> [powered_down <= 0x00000000]
[21:50:11.563]      WriteDP(DP_SELECT, 0x00000000);
[21:50:11.563]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:50:11.563]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:50:11.567]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:50:11.567]        // -> [powered_down <= 0x00000001]
[21:50:11.567]    </block>
[21:50:11.567]    <control if="powered_down" while="" timeout="0" info="">
[21:50:11.567]      // if-block "powered_down"
[21:50:11.567]        // =>  TRUE
[21:50:11.567]      <block atomic="false" info="">
[21:50:11.567]        Message(0, "Debug/System power-up request sent");
[21:50:11.569]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:50:11.571]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:50:11.571]      </block>
[21:50:11.571]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:50:11.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:50:11.573]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:50:11.573]        // while-condition  =>  FALSE
[21:50:11.573]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:50:11.573]      </control>
[21:50:11.573]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:50:11.573]        // if-block "(__protocol & 0xFFFF) == 1"
[21:50:11.573]          // =>  FALSE
[21:50:11.573]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:50:11.576]      </control>
[21:50:11.576]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:50:11.576]        // if-block "(__protocol & 0xFFFF) == 2"
[21:50:11.576]          // =>  TRUE
[21:50:11.576]        <block atomic="false" info="">
[21:50:11.576]          Message(0, "executing SWD power up");
[21:50:11.576]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:50:11.579]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:50:11.579]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:50:11.579]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:50:11.579]        </block>
[21:50:11.579]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:50:11.579]      </control>
[21:50:11.579]      // end if-block "powered_down"
[21:50:11.579]    </control>
[21:50:11.579]    <block atomic="false" info="">
[21:50:11.579]      __var DEBUG_PORT_VAL    = 0;
[21:50:11.579]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:50:11.579]      __var ACCESS_POINT_VAL  = 0;
[21:50:11.579]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:50:11.583]      __ap = 1; 
[21:50:11.583]        // -> [__ap <= 0x00000001]
[21:50:11.583]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:50:11.585]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:50:11.585]      __ap = 4;
[21:50:11.585]        // -> [__ap <= 0x00000004]
[21:50:11.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:11.589]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:50:11.589]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:50:11.592]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:11.592]    </block>
[21:50:11.592]    <block atomic="false" info="">
[21:50:11.592]      __var nReset = 0x80;
[21:50:11.592]        // -> [nReset <= 0x00000080]
[21:50:11.592]      __var canReadPins = 0;
[21:50:11.592]        // -> [canReadPins <= 0x00000000]
[21:50:11.592]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:50:11.596]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:50:11.596]        // -> [canReadPins <= 0x00000001]
[21:50:11.596]    </block>
[21:50:11.597]    <control if="" while="1" timeout="200" info="">
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.597]      // while-condition  =>  TRUE
[21:50:11.597]      // while "1"  (timeout="200")
[21:50:11.599]      // while-condition  =>  TRUE
[21:50:11.599]      // while "1"  (timeout="200")
[21:50:11.599]      // while  =>  TIMEOUT
[21:50:11.599]      // end while "1"
[21:50:11.599]    </control>
[21:50:11.599]    <control if="canReadPins" while="" timeout="0" info="">
[21:50:11.599]      // if-block "canReadPins"
[21:50:11.599]        // =>  TRUE
[21:50:11.599]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:50:11.599]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:50:11.599]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:50:11.599]        // while-condition  =>  FALSE
[21:50:11.599]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:50:11.599]      </control>
[21:50:11.599]      // end if-block "canReadPins"
[21:50:11.603]    </control>
[21:50:11.603]    <control if="!canReadPins" while="" timeout="0" info="">
[21:50:11.603]      // if-block "!canReadPins"
[21:50:11.603]        // =>  FALSE
[21:50:11.603]      // skip if-block "!canReadPins"
[21:50:11.603]    </control>
[21:50:11.603]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:50:11.603]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:11.603]        // =>  TRUE
[21:50:11.603]      <block atomic="false" info="">
[21:50:11.603]        WriteAP(0x00, 0x190008);
[21:50:11.606]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:11.606]        WriteAP(0xF0, 0x01);
[21:50:11.609]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:11.609]      </block>
[21:50:11.609]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:11.609]    </control>
[21:50:11.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:50:11.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:11.609]        // =>  FALSE
[21:50:11.609]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:11.611]    </control>
[21:50:11.611]    <block atomic="false" info="">
[21:50:11.611]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:11.615]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:50:11.615]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:50:11.615]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:11.617]      __ap = 0; //lets make sure we reset the access point selection
[21:50:11.617]        // -> [__ap <= 0x00000000]
[21:50:11.617]    </block>
[21:50:11.618]  </sequence>
[21:50:11.618]  
[21:50:11.643]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:50:11.643]  
[21:50:11.643]  <debugvars>
[21:50:11.643]    // Pre-defined
[21:50:11.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:11.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:11.643]    __dp=0x00000000
[21:50:11.643]    __ap=0x00000000
[21:50:11.643]    __traceout=0x00000000      (Trace Disabled)
[21:50:11.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:11.643]    __FlashAddr=0x00000000
[21:50:11.643]    __FlashLen=0x00000000
[21:50:11.643]    __FlashArg=0x00000000
[21:50:11.643]    __FlashOp=0x00000000
[21:50:11.643]    __Result=0x00000000
[21:50:11.643]  </debugvars>
[21:50:11.643]  
[21:50:11.643]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:50:11.643]    <block atomic="false" info="">
[21:50:11.643]      __var deviceID = 0;
[21:50:11.643]        // -> [deviceID <= 0x00000000]
[21:50:11.643]      __var version = 0;
[21:50:11.643]        // -> [version <= 0x00000000]
[21:50:11.647]      __var partNum = 0;
[21:50:11.647]        // -> [partNum <= 0x00000000]
[21:50:11.647]      __var manuf = 0;
[21:50:11.647]        // -> [manuf <= 0x00000000]
[21:50:11.647]      __var isMSPM0G1X0X_G3X0X = 0;
[21:50:11.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:50:11.647]      __var isProduction = 0;
[21:50:11.647]        // -> [isProduction <= 0x00000000]
[21:50:11.647]      __var continueId = 0;
[21:50:11.647]        // -> [continueId <= 0x00000000]
[21:50:11.647]      deviceID =   Read32(0x41C40004);
[21:50:11.653]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:50:11.653]        // -> [deviceID <= 0x2BB8802F]
[21:50:11.653]      version = deviceID >> 28;
[21:50:11.653]        // -> [version <= 0x00000002]
[21:50:11.653]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:50:11.653]        // -> [partNum <= 0x0000BB88]
[21:50:11.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:50:11.653]        // -> [manuf <= 0x00000017]
[21:50:11.653]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:50:11.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:50:11.653]      isProduction = (version > 0);
[21:50:11.653]        // -> [isProduction <= 0x00000001]
[21:50:11.653]    </block>
[21:50:11.653]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:50:11.653]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:50:11.653]        // =>  FALSE
[21:50:11.653]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:50:11.653]    </control>
[21:50:11.653]    <control if="continueId == 4" while="" timeout="0" info="">
[21:50:11.653]      // if-block "continueId == 4"
[21:50:11.653]        // =>  FALSE
[21:50:11.653]      // skip if-block "continueId == 4"
[21:50:11.653]    </control>
[21:50:11.653]    <control if="!isProduction" while="" timeout="0" info="">
[21:50:11.656]      // if-block "!isProduction"
[21:50:11.656]        // =>  FALSE
[21:50:11.656]      // skip if-block "!isProduction"
[21:50:11.656]    </control>
[21:50:11.656]  </sequence>
[21:50:11.656]  
[21:51:22.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:51:22.971]  
[21:51:22.985]  <debugvars>
[21:51:22.985]    // Pre-defined
[21:51:22.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:22.985]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:22.985]    __dp=0x00000000
[21:51:22.985]    __ap=0x00000000
[21:51:22.985]    __traceout=0x00000000      (Trace Disabled)
[21:51:22.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:22.985]    __FlashAddr=0x00000000
[21:51:22.986]    __FlashLen=0x00000000
[21:51:22.986]    __FlashArg=0x00000000
[21:51:22.986]    __FlashOp=0x00000000
[21:51:22.986]    __Result=0x00000000
[21:51:22.986]  </debugvars>
[21:51:22.986]  
[21:51:22.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:51:22.986]    <block atomic="false" info="">
[21:51:22.986]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:51:22.986]        // -> [isSWJ <= 0x00000001]
[21:51:22.986]      __var hasDormant = __protocol & 0x00020000;
[21:51:22.986]        // -> [hasDormant <= 0x00000000]
[21:51:22.986]      __var protType   = __protocol & 0x0000FFFF;
[21:51:22.986]        // -> [protType <= 0x00000002]
[21:51:22.986]    </block>
[21:51:22.986]    <control if="protType == 1" while="" timeout="0" info="">
[21:51:22.986]      // if-block "protType == 1"
[21:51:22.986]        // =>  FALSE
[21:51:22.986]      // skip if-block "protType == 1"
[21:51:22.986]    </control>
[21:51:22.988]    <control if="protType == 2" while="" timeout="0" info="">
[21:51:22.988]      // if-block "protType == 2"
[21:51:22.988]        // =>  TRUE
[21:51:22.988]      <control if="isSWJ" while="" timeout="0" info="">
[21:51:22.989]        // if-block "isSWJ"
[21:51:22.989]          // =>  TRUE
[21:51:22.989]        <control if="hasDormant" while="" timeout="0" info="">
[21:51:22.989]          // if-block "hasDormant"
[21:51:22.989]            // =>  FALSE
[21:51:22.989]          // skip if-block "hasDormant"
[21:51:22.989]        </control>
[21:51:22.989]        <control if="!hasDormant" while="" timeout="0" info="">
[21:51:22.989]          // if-block "!hasDormant"
[21:51:22.989]            // =>  TRUE
[21:51:22.989]          <block atomic="false" info="">
[21:51:22.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:51:22.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:22.991]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:51:22.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:51:22.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:51:22.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:22.996]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:51:22.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:51:23.000]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:51:23.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:23.002]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:51:23.004]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:51:23.004]          </block>
[21:51:23.004]          // end if-block "!hasDormant"
[21:51:23.004]        </control>
[21:51:23.004]        // end if-block "isSWJ"
[21:51:23.004]      </control>
[21:51:23.005]      <control if="!isSWJ" while="" timeout="0" info="">
[21:51:23.005]        // if-block "!isSWJ"
[21:51:23.005]          // =>  FALSE
[21:51:23.005]        // skip if-block "!isSWJ"
[21:51:23.005]      </control>
[21:51:23.005]      <block atomic="false" info="">
[21:51:23.005]        ReadDP(0x0);
[21:51:23.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:51:23.006]      </block>
[21:51:23.006]      // end if-block "protType == 2"
[21:51:23.006]    </control>
[21:51:23.006]  </sequence>
[21:51:23.006]  
[21:51:23.014]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:51:23.014]  
[21:51:23.014]  <debugvars>
[21:51:23.014]    // Pre-defined
[21:51:23.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:23.014]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:23.014]    __dp=0x00000000
[21:51:23.014]    __ap=0x00000000
[21:51:23.014]    __traceout=0x00000000      (Trace Disabled)
[21:51:23.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:23.016]    __FlashAddr=0x00000000
[21:51:23.016]    __FlashLen=0x00000000
[21:51:23.016]    __FlashArg=0x00000000
[21:51:23.016]    __FlashOp=0x00000000
[21:51:23.016]    __Result=0x00000000
[21:51:23.016]  </debugvars>
[21:51:23.016]  
[21:51:23.016]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:51:23.016]    <block atomic="false" info="">
[21:51:23.016]      __var SW_DP_ABORT       = 0x0;
[21:51:23.016]        // -> [SW_DP_ABORT <= 0x00000000]
[21:51:23.016]      __var DP_CTRL_STAT      = 0x4;
[21:51:23.016]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:51:23.017]      __var DP_SELECT         = 0x8;
[21:51:23.017]        // -> [DP_SELECT <= 0x00000008]
[21:51:23.017]      __var powered_down      = 0;
[21:51:23.017]        // -> [powered_down <= 0x00000000]
[21:51:23.017]      WriteDP(DP_SELECT, 0x00000000);
[21:51:23.017]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:51:23.017]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:51:23.021]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:51:23.021]        // -> [powered_down <= 0x00000001]
[21:51:23.021]    </block>
[21:51:23.021]    <control if="powered_down" while="" timeout="0" info="">
[21:51:23.021]      // if-block "powered_down"
[21:51:23.021]        // =>  TRUE
[21:51:23.021]      <block atomic="false" info="">
[21:51:23.021]        Message(0, "Debug/System power-up request sent");
[21:51:23.021]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:51:23.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:51:23.027]      </block>
[21:51:23.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:51:23.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:51:23.029]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:51:23.029]        // while-condition  =>  FALSE
[21:51:23.029]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:51:23.029]      </control>
[21:51:23.029]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:51:23.029]        // if-block "(__protocol & 0xFFFF) == 1"
[21:51:23.029]          // =>  FALSE
[21:51:23.029]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:51:23.030]      </control>
[21:51:23.030]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:51:23.030]        // if-block "(__protocol & 0xFFFF) == 2"
[21:51:23.030]          // =>  TRUE
[21:51:23.030]        <block atomic="false" info="">
[21:51:23.030]          Message(0, "executing SWD power up");
[21:51:23.030]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:51:23.030]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:51:23.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:51:23.039]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:51:23.039]        </block>
[21:51:23.039]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:51:23.039]      </control>
[21:51:23.039]      // end if-block "powered_down"
[21:51:23.039]    </control>
[21:51:23.039]    <block atomic="false" info="">
[21:51:23.039]      __var DEBUG_PORT_VAL    = 0;
[21:51:23.039]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:51:23.039]      __var ACCESS_POINT_VAL  = 0;
[21:51:23.039]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:51:23.039]      __ap = 1; 
[21:51:23.039]        // -> [__ap <= 0x00000001]
[21:51:23.039]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:51:23.046]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:51:23.046]      __ap = 4;
[21:51:23.046]        // -> [__ap <= 0x00000004]
[21:51:23.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:23.052]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:51:23.052]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:51:23.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:23.052]    </block>
[21:51:23.054]    <block atomic="false" info="">
[21:51:23.054]      __var nReset = 0x80;
[21:51:23.054]        // -> [nReset <= 0x00000080]
[21:51:23.054]      __var canReadPins = 0;
[21:51:23.054]        // -> [canReadPins <= 0x00000000]
[21:51:23.054]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:51:23.056]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:51:23.057]        // -> [canReadPins <= 0x00000001]
[21:51:23.057]    </block>
[21:51:23.057]    <control if="" while="1" timeout="200" info="">
[21:51:23.057]      // while "1"  (timeout="200")
[21:51:23.057]      // while-condition  =>  TRUE
[21:51:23.057]      // while "1"  (timeout="200")
[21:51:23.057]      // while-condition  =>  TRUE
[21:51:23.057]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.058]      // while "1"  (timeout="200")
[21:51:23.058]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.062]      // while-condition  =>  TRUE
[21:51:23.062]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.066]      // while-condition  =>  TRUE
[21:51:23.066]      // while "1"  (timeout="200")
[21:51:23.070]      // while-condition  =>  TRUE
[21:51:23.070]      // while "1"  (timeout="200")
[21:51:23.070]      // while  =>  TIMEOUT
[21:51:23.070]      // end while "1"
[21:51:23.070]    </control>
[21:51:23.070]    <control if="canReadPins" while="" timeout="0" info="">
[21:51:23.070]      // if-block "canReadPins"
[21:51:23.070]        // =>  TRUE
[21:51:23.070]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:51:23.070]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:51:23.071]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:51:23.071]        // while-condition  =>  FALSE
[21:51:23.071]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:51:23.071]      </control>
[21:51:23.071]      // end if-block "canReadPins"
[21:51:23.071]    </control>
[21:51:23.074]    <control if="!canReadPins" while="" timeout="0" info="">
[21:51:23.074]      // if-block "!canReadPins"
[21:51:23.074]        // =>  FALSE
[21:51:23.074]      // skip if-block "!canReadPins"
[21:51:23.074]    </control>
[21:51:23.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:51:23.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:23.074]        // =>  TRUE
[21:51:23.074]      <block atomic="false" info="">
[21:51:23.074]        WriteAP(0x00, 0x190008);
[21:51:23.076]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:23.076]        WriteAP(0xF0, 0x01);
[21:51:23.082]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:23.082]      </block>
[21:51:23.082]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:23.082]    </control>
[21:51:23.082]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:51:23.082]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:23.082]        // =>  FALSE
[21:51:23.082]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:23.082]    </control>
[21:51:23.082]    <block atomic="false" info="">
[21:51:23.082]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:23.086]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:51:23.086]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:51:23.086]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:23.091]      __ap = 0; //lets make sure we reset the access point selection
[21:51:23.091]        // -> [__ap <= 0x00000000]
[21:51:23.091]    </block>
[21:51:23.091]  </sequence>
[21:51:23.091]  
[21:51:23.120]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:51:23.120]  
[21:51:23.120]  <debugvars>
[21:51:23.122]    // Pre-defined
[21:51:23.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:23.122]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:23.122]    __dp=0x00000000
[21:51:23.122]    __ap=0x00000000
[21:51:23.122]    __traceout=0x00000000      (Trace Disabled)
[21:51:23.122]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:23.122]    __FlashAddr=0x00000000
[21:51:23.122]    __FlashLen=0x00000000
[21:51:23.122]    __FlashArg=0x00000000
[21:51:23.122]    __FlashOp=0x00000000
[21:51:23.122]    __Result=0x00000000
[21:51:23.122]  </debugvars>
[21:51:23.122]  
[21:51:23.122]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:51:23.122]    <block atomic="false" info="">
[21:51:23.122]      __var deviceID = 0;
[21:51:23.122]        // -> [deviceID <= 0x00000000]
[21:51:23.122]      __var version = 0;
[21:51:23.122]        // -> [version <= 0x00000000]
[21:51:23.122]      __var partNum = 0;
[21:51:23.122]        // -> [partNum <= 0x00000000]
[21:51:23.122]      __var manuf = 0;
[21:51:23.122]        // -> [manuf <= 0x00000000]
[21:51:23.122]      __var isMSPM0G1X0X_G3X0X = 0;
[21:51:23.122]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:51:23.122]      __var isProduction = 0;
[21:51:23.122]        // -> [isProduction <= 0x00000000]
[21:51:23.122]      __var continueId = 0;
[21:51:23.122]        // -> [continueId <= 0x00000000]
[21:51:23.122]      deviceID =   Read32(0x41C40004);
[21:51:23.130]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:51:23.130]        // -> [deviceID <= 0x2BB8802F]
[21:51:23.130]      version = deviceID >> 28;
[21:51:23.130]        // -> [version <= 0x00000002]
[21:51:23.134]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:51:23.134]        // -> [partNum <= 0x0000BB88]
[21:51:23.134]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:51:23.134]        // -> [manuf <= 0x00000017]
[21:51:23.134]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:51:23.134]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:51:23.134]      isProduction = (version > 0);
[21:51:23.134]        // -> [isProduction <= 0x00000001]
[21:51:23.134]    </block>
[21:51:23.134]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:51:23.134]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:51:23.134]        // =>  FALSE
[21:51:23.134]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:51:23.134]    </control>
[21:51:23.134]    <control if="continueId == 4" while="" timeout="0" info="">
[21:51:23.136]      // if-block "continueId == 4"
[21:51:23.136]        // =>  FALSE
[21:51:23.136]      // skip if-block "continueId == 4"
[21:51:23.136]    </control>
[21:51:23.136]    <control if="!isProduction" while="" timeout="0" info="">
[21:51:23.136]      // if-block "!isProduction"
[21:51:23.136]        // =>  FALSE
[21:51:23.136]      // skip if-block "!isProduction"
[21:51:23.136]    </control>
[21:51:23.136]  </sequence>
[21:51:23.136]  
[21:51:29.150]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:51:29.150]  
[21:51:29.150]  <debugvars>
[21:51:29.150]    // Pre-defined
[21:51:29.150]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:29.150]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:51:29.150]    __dp=0x00000000
[21:51:29.150]    __ap=0x00000000
[21:51:29.150]    __traceout=0x00000000      (Trace Disabled)
[21:51:29.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:29.154]    __FlashAddr=0x00000000
[21:51:29.154]    __FlashLen=0x00000000
[21:51:29.154]    __FlashArg=0x00000000
[21:51:29.154]    __FlashOp=0x00000000
[21:51:29.154]    __Result=0x00000000
[21:51:29.154]  </debugvars>
[21:51:29.154]  
[21:51:29.154]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:51:29.154]    <block atomic="false" info="">
[21:51:29.154]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:51:29.154]        // -> [isSWJ <= 0x00000001]
[21:51:29.154]      __var hasDormant = __protocol & 0x00020000;
[21:51:29.154]        // -> [hasDormant <= 0x00000000]
[21:51:29.154]      __var protType   = __protocol & 0x0000FFFF;
[21:51:29.154]        // -> [protType <= 0x00000002]
[21:51:29.154]    </block>
[21:51:29.154]    <control if="protType == 1" while="" timeout="0" info="">
[21:51:29.154]      // if-block "protType == 1"
[21:51:29.154]        // =>  FALSE
[21:51:29.156]      // skip if-block "protType == 1"
[21:51:29.156]    </control>
[21:51:29.156]    <control if="protType == 2" while="" timeout="0" info="">
[21:51:29.156]      // if-block "protType == 2"
[21:51:29.156]        // =>  TRUE
[21:51:29.156]      <control if="isSWJ" while="" timeout="0" info="">
[21:51:29.156]        // if-block "isSWJ"
[21:51:29.156]          // =>  TRUE
[21:51:29.156]        <control if="hasDormant" while="" timeout="0" info="">
[21:51:29.156]          // if-block "hasDormant"
[21:51:29.156]            // =>  FALSE
[21:51:29.156]          // skip if-block "hasDormant"
[21:51:29.156]        </control>
[21:51:29.158]        <control if="!hasDormant" while="" timeout="0" info="">
[21:51:29.158]          // if-block "!hasDormant"
[21:51:29.158]            // =>  TRUE
[21:51:29.158]          <block atomic="false" info="">
[21:51:29.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:51:29.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:29.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:51:29.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:51:29.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:51:29.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:29.162]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:51:29.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:51:29.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:51:29.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:29.167]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:51:29.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:51:29.167]          </block>
[21:51:29.167]          // end if-block "!hasDormant"
[21:51:29.167]        </control>
[21:51:29.170]        // end if-block "isSWJ"
[21:51:29.170]      </control>
[21:51:29.170]      <control if="!isSWJ" while="" timeout="0" info="">
[21:51:29.170]        // if-block "!isSWJ"
[21:51:29.170]          // =>  FALSE
[21:51:29.170]        // skip if-block "!isSWJ"
[21:51:29.170]      </control>
[21:51:29.170]      <block atomic="false" info="">
[21:51:29.170]        ReadDP(0x0);
[21:51:29.170]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:51:29.170]      </block>
[21:51:29.170]      // end if-block "protType == 2"
[21:51:29.170]    </control>
[21:51:29.170]  </sequence>
[21:51:29.170]  
[21:51:29.175]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:51:29.175]  
[21:51:29.176]  <debugvars>
[21:51:29.176]    // Pre-defined
[21:51:29.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:29.176]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:51:29.176]    __dp=0x00000000
[21:51:29.176]    __ap=0x00000000
[21:51:29.177]    __traceout=0x00000000      (Trace Disabled)
[21:51:29.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:29.177]    __FlashAddr=0x00000000
[21:51:29.177]    __FlashLen=0x00000000
[21:51:29.177]    __FlashArg=0x00000000
[21:51:29.177]    __FlashOp=0x00000000
[21:51:29.177]    __Result=0x00000000
[21:51:29.177]  </debugvars>
[21:51:29.177]  
[21:51:29.177]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:51:29.178]    <block atomic="false" info="">
[21:51:29.178]      __var SW_DP_ABORT       = 0x0;
[21:51:29.178]        // -> [SW_DP_ABORT <= 0x00000000]
[21:51:29.178]      __var DP_CTRL_STAT      = 0x4;
[21:51:29.178]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:51:29.178]      __var DP_SELECT         = 0x8;
[21:51:29.178]        // -> [DP_SELECT <= 0x00000008]
[21:51:29.178]      __var powered_down      = 0;
[21:51:29.178]        // -> [powered_down <= 0x00000000]
[21:51:29.178]      WriteDP(DP_SELECT, 0x00000000);
[21:51:29.180]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:51:29.180]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:51:29.180]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:51:29.183]        // -> [powered_down <= 0x00000001]
[21:51:29.183]    </block>
[21:51:29.183]    <control if="powered_down" while="" timeout="0" info="">
[21:51:29.183]      // if-block "powered_down"
[21:51:29.183]        // =>  TRUE
[21:51:29.183]      <block atomic="false" info="">
[21:51:29.183]        Message(0, "Debug/System power-up request sent");
[21:51:29.185]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:51:29.186]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:51:29.187]      </block>
[21:51:29.187]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:51:29.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:51:29.187]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:51:29.187]        // while-condition  =>  FALSE
[21:51:29.187]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:51:29.187]      </control>
[21:51:29.187]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:51:29.187]        // if-block "(__protocol & 0xFFFF) == 1"
[21:51:29.187]          // =>  FALSE
[21:51:29.187]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:51:29.187]      </control>
[21:51:29.187]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:51:29.187]        // if-block "(__protocol & 0xFFFF) == 2"
[21:51:29.187]          // =>  TRUE
[21:51:29.187]        <block atomic="false" info="">
[21:51:29.187]          Message(0, "executing SWD power up");
[21:51:29.191]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:51:29.191]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:51:29.191]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:51:29.195]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:51:29.195]        </block>
[21:51:29.195]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:51:29.195]      </control>
[21:51:29.196]      // end if-block "powered_down"
[21:51:29.196]    </control>
[21:51:29.196]    <block atomic="false" info="">
[21:51:29.196]      __var DEBUG_PORT_VAL    = 0;
[21:51:29.196]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:51:29.196]      __var ACCESS_POINT_VAL  = 0;
[21:51:29.196]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:51:29.196]      __ap = 1; 
[21:51:29.197]        // -> [__ap <= 0x00000001]
[21:51:29.197]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:51:29.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:51:29.200]      __ap = 4;
[21:51:29.200]        // -> [__ap <= 0x00000004]
[21:51:29.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:29.204]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:51:29.204]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:51:29.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:29.206]    </block>
[21:51:29.206]    <block atomic="false" info="">
[21:51:29.206]      __var nReset = 0x80;
[21:51:29.206]        // -> [nReset <= 0x00000080]
[21:51:29.206]      __var canReadPins = 0;
[21:51:29.206]        // -> [canReadPins <= 0x00000000]
[21:51:29.206]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:51:29.208]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:51:29.208]        // -> [canReadPins <= 0x00000001]
[21:51:29.208]    </block>
[21:51:29.208]    <control if="" while="1" timeout="200" info="">
[21:51:29.208]      // while "1"  (timeout="200")
[21:51:29.208]      // while-condition  =>  TRUE
[21:51:29.208]      // while "1"  (timeout="200")
[21:51:29.208]      // while-condition  =>  TRUE
[21:51:29.208]      // while "1"  (timeout="200")
[21:51:29.208]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.212]      // while-condition  =>  TRUE
[21:51:29.212]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.216]      // while-condition  =>  TRUE
[21:51:29.216]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.220]      // while-condition  =>  TRUE
[21:51:29.220]      // while "1"  (timeout="200")
[21:51:29.224]      // while-condition  =>  TRUE
[21:51:29.224]      // while "1"  (timeout="200")
[21:51:29.224]      // while  =>  TIMEOUT
[21:51:29.224]      // end while "1"
[21:51:29.224]    </control>
[21:51:29.224]    <control if="canReadPins" while="" timeout="0" info="">
[21:51:29.224]      // if-block "canReadPins"
[21:51:29.224]        // =>  TRUE
[21:51:29.224]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:51:29.224]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:51:29.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:51:29.226]        // while-condition  =>  FALSE
[21:51:29.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:51:29.226]      </control>
[21:51:29.226]      // end if-block "canReadPins"
[21:51:29.226]    </control>
[21:51:29.226]    <control if="!canReadPins" while="" timeout="0" info="">
[21:51:29.226]      // if-block "!canReadPins"
[21:51:29.226]        // =>  FALSE
[21:51:29.226]      // skip if-block "!canReadPins"
[21:51:29.226]    </control>
[21:51:29.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:51:29.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:29.228]        // =>  TRUE
[21:51:29.228]      <block atomic="false" info="">
[21:51:29.228]        WriteAP(0x00, 0x190008);
[21:51:29.232]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:29.232]        WriteAP(0xF0, 0x01);
[21:51:29.236]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:29.236]      </block>
[21:51:29.236]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:29.236]    </control>
[21:51:29.236]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:51:29.236]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:29.236]        // =>  FALSE
[21:51:29.236]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:29.236]    </control>
[21:51:29.236]    <block atomic="false" info="">
[21:51:29.236]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:29.240]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:51:29.240]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:51:29.240]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:29.240]      __ap = 0; //lets make sure we reset the access point selection
[21:51:29.240]        // -> [__ap <= 0x00000000]
[21:51:29.244]    </block>
[21:51:29.244]  </sequence>
[21:51:29.244]  
[21:51:29.274]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:51:29.274]  
[21:51:29.274]  <debugvars>
[21:51:29.274]    // Pre-defined
[21:51:29.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:29.276]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:51:29.276]    __dp=0x00000000
[21:51:29.277]    __ap=0x00000000
[21:51:29.277]    __traceout=0x00000000      (Trace Disabled)
[21:51:29.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:29.277]    __FlashAddr=0x00000000
[21:51:29.277]    __FlashLen=0x00000000
[21:51:29.277]    __FlashArg=0x00000000
[21:51:29.277]    __FlashOp=0x00000000
[21:51:29.277]    __Result=0x00000000
[21:51:29.277]  </debugvars>
[21:51:29.278]  
[21:51:29.278]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:51:29.278]    <block atomic="false" info="">
[21:51:29.278]      __var deviceID = 0;
[21:51:29.278]        // -> [deviceID <= 0x00000000]
[21:51:29.278]      __var version = 0;
[21:51:29.278]        // -> [version <= 0x00000000]
[21:51:29.278]      __var partNum = 0;
[21:51:29.278]        // -> [partNum <= 0x00000000]
[21:51:29.278]      __var manuf = 0;
[21:51:29.278]        // -> [manuf <= 0x00000000]
[21:51:29.278]      __var isMSPM0G1X0X_G3X0X = 0;
[21:51:29.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:51:29.278]      __var isProduction = 0;
[21:51:29.278]        // -> [isProduction <= 0x00000000]
[21:51:29.278]      __var continueId = 0;
[21:51:29.278]        // -> [continueId <= 0x00000000]
[21:51:29.278]      deviceID =   Read32(0x41C40004);
[21:51:29.284]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:51:29.284]        // -> [deviceID <= 0x2BB8802F]
[21:51:29.284]      version = deviceID >> 28;
[21:51:29.284]        // -> [version <= 0x00000002]
[21:51:29.284]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:51:29.284]        // -> [partNum <= 0x0000BB88]
[21:51:29.284]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:51:29.284]        // -> [manuf <= 0x00000017]
[21:51:29.284]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:51:29.284]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:51:29.284]      isProduction = (version > 0);
[21:51:29.284]        // -> [isProduction <= 0x00000001]
[21:51:29.284]    </block>
[21:51:29.284]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:51:29.284]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:51:29.284]        // =>  FALSE
[21:51:29.286]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:51:29.286]    </control>
[21:51:29.286]    <control if="continueId == 4" while="" timeout="0" info="">
[21:51:29.286]      // if-block "continueId == 4"
[21:51:29.286]        // =>  FALSE
[21:51:29.286]      // skip if-block "continueId == 4"
[21:51:29.286]    </control>
[21:51:29.286]    <control if="!isProduction" while="" timeout="0" info="">
[21:51:29.286]      // if-block "!isProduction"
[21:51:29.286]        // =>  FALSE
[21:51:29.286]      // skip if-block "!isProduction"
[21:51:29.286]    </control>
[21:51:29.286]  </sequence>
[21:51:29.286]  
[21:54:43.074]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:54:43.074]  
[21:54:43.085]  <debugvars>
[21:54:43.085]    // Pre-defined
[21:54:43.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:54:43.085]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:54:43.085]    __dp=0x00000000
[21:54:43.085]    __ap=0x00000000
[21:54:43.085]    __traceout=0x00000000      (Trace Disabled)
[21:54:43.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:54:43.085]    __FlashAddr=0x00000000
[21:54:43.085]    __FlashLen=0x00000000
[21:54:43.085]    __FlashArg=0x00000000
[21:54:43.085]    __FlashOp=0x00000000
[21:54:43.085]    __Result=0x00000000
[21:54:43.085]  </debugvars>
[21:54:43.085]  
[21:54:43.087]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:54:43.087]    <block atomic="false" info="">
[21:54:43.087]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:54:43.087]        // -> [isSWJ <= 0x00000001]
[21:54:43.087]      __var hasDormant = __protocol & 0x00020000;
[21:54:43.087]        // -> [hasDormant <= 0x00000000]
[21:54:43.087]      __var protType   = __protocol & 0x0000FFFF;
[21:54:43.087]        // -> [protType <= 0x00000002]
[21:54:43.087]    </block>
[21:54:43.087]    <control if="protType == 1" while="" timeout="0" info="">
[21:54:43.087]      // if-block "protType == 1"
[21:54:43.087]        // =>  FALSE
[21:54:43.087]      // skip if-block "protType == 1"
[21:54:43.087]    </control>
[21:54:43.087]    <control if="protType == 2" while="" timeout="0" info="">
[21:54:43.087]      // if-block "protType == 2"
[21:54:43.087]        // =>  TRUE
[21:54:43.087]      <control if="isSWJ" while="" timeout="0" info="">
[21:54:43.087]        // if-block "isSWJ"
[21:54:43.087]          // =>  TRUE
[21:54:43.087]        <control if="hasDormant" while="" timeout="0" info="">
[21:54:43.087]          // if-block "hasDormant"
[21:54:43.087]            // =>  FALSE
[21:54:43.087]          // skip if-block "hasDormant"
[21:54:43.087]        </control>
[21:54:43.087]        <control if="!hasDormant" while="" timeout="0" info="">
[21:54:43.087]          // if-block "!hasDormant"
[21:54:43.087]            // =>  TRUE
[21:54:43.090]          <block atomic="false" info="">
[21:54:43.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:54:43.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:54:43.093]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:54:43.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:54:43.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:54:43.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:54:43.101]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:54:43.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:54:43.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:54:43.113]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:54:43.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:54:43.116]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:54:43.116]          </block>
[21:54:43.116]          // end if-block "!hasDormant"
[21:54:43.116]        </control>
[21:54:43.116]        // end if-block "isSWJ"
[21:54:43.116]      </control>
[21:54:43.116]      <control if="!isSWJ" while="" timeout="0" info="">
[21:54:43.116]        // if-block "!isSWJ"
[21:54:43.116]          // =>  FALSE
[21:54:43.116]        // skip if-block "!isSWJ"
[21:54:43.116]      </control>
[21:54:43.116]      <block atomic="false" info="">
[21:54:43.116]        ReadDP(0x0);
[21:54:43.120]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:54:43.121]      </block>
[21:54:43.121]      // end if-block "protType == 2"
[21:54:43.121]    </control>
[21:54:43.121]  </sequence>
[21:54:43.121]  
[21:54:43.125]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:54:43.125]  
[21:54:43.125]  <debugvars>
[21:54:43.125]    // Pre-defined
[21:54:43.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:54:43.125]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:54:43.125]    __dp=0x00000000
[21:54:43.125]    __ap=0x00000000
[21:54:43.125]    __traceout=0x00000000      (Trace Disabled)
[21:54:43.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:54:43.125]    __FlashAddr=0x00000000
[21:54:43.125]    __FlashLen=0x00000000
[21:54:43.125]    __FlashArg=0x00000000
[21:54:43.125]    __FlashOp=0x00000000
[21:54:43.125]    __Result=0x00000000
[21:54:43.125]  </debugvars>
[21:54:43.125]  
[21:54:43.125]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:54:43.125]    <block atomic="false" info="">
[21:54:43.125]      __var SW_DP_ABORT       = 0x0;
[21:54:43.125]        // -> [SW_DP_ABORT <= 0x00000000]
[21:54:43.125]      __var DP_CTRL_STAT      = 0x4;
[21:54:43.125]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:54:43.128]      __var DP_SELECT         = 0x8;
[21:54:43.128]        // -> [DP_SELECT <= 0x00000008]
[21:54:43.128]      __var powered_down      = 0;
[21:54:43.128]        // -> [powered_down <= 0x00000000]
[21:54:43.128]      WriteDP(DP_SELECT, 0x00000000);
[21:54:43.128]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:54:43.128]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:54:43.134]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:54:43.134]        // -> [powered_down <= 0x00000001]
[21:54:43.134]    </block>
[21:54:43.134]    <control if="powered_down" while="" timeout="0" info="">
[21:54:43.134]      // if-block "powered_down"
[21:54:43.134]        // =>  TRUE
[21:54:43.134]      <block atomic="false" info="">
[21:54:43.136]        Message(0, "Debug/System power-up request sent");
[21:54:43.136]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:54:43.144]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:54:43.144]      </block>
[21:54:43.144]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:54:43.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:54:43.144]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:54:43.144]        // while-condition  =>  FALSE
[21:54:43.144]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:54:43.144]      </control>
[21:54:43.144]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:54:43.148]        // if-block "(__protocol & 0xFFFF) == 1"
[21:54:43.148]          // =>  FALSE
[21:54:43.148]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:54:43.148]      </control>
[21:54:43.148]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:54:43.148]        // if-block "(__protocol & 0xFFFF) == 2"
[21:54:43.148]          // =>  TRUE
[21:54:43.149]        <block atomic="false" info="">
[21:54:43.149]          Message(0, "executing SWD power up");
[21:54:43.150]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:54:43.152]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:54:43.152]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:54:43.156]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:54:43.156]        </block>
[21:54:43.156]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:54:43.156]      </control>
[21:54:43.156]      // end if-block "powered_down"
[21:54:43.156]    </control>
[21:54:43.156]    <block atomic="false" info="">
[21:54:43.156]      __var DEBUG_PORT_VAL    = 0;
[21:54:43.156]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:54:43.156]      __var ACCESS_POINT_VAL  = 0;
[21:54:43.156]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:54:43.156]      __ap = 1; 
[21:54:43.156]        // -> [__ap <= 0x00000001]
[21:54:43.156]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:54:43.161]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:54:43.161]      __ap = 4;
[21:54:43.161]        // -> [__ap <= 0x00000004]
[21:54:43.161]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:54:43.166]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:54:43.166]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:54:43.166]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:54:43.169]    </block>
[21:54:43.169]    <block atomic="false" info="">
[21:54:43.169]      __var nReset = 0x80;
[21:54:43.169]        // -> [nReset <= 0x00000080]
[21:54:43.169]      __var canReadPins = 0;
[21:54:43.169]        // -> [canReadPins <= 0x00000000]
[21:54:43.169]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:54:43.172]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:54:43.173]        // -> [canReadPins <= 0x00000001]
[21:54:43.173]    </block>
[21:54:43.173]    <control if="" while="1" timeout="200" info="">
[21:54:43.173]      // while "1"  (timeout="200")
[21:54:43.173]      // while-condition  =>  TRUE
[21:54:43.173]      // while "1"  (timeout="200")
[21:54:43.173]      // while-condition  =>  TRUE
[21:54:43.173]      // while "1"  (timeout="200")
[21:54:43.173]      // while-condition  =>  TRUE
[21:54:43.173]      // while "1"  (timeout="200")
[21:54:43.173]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.174]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.174]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.174]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.174]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.174]      // while-condition  =>  TRUE
[21:54:43.174]      // while "1"  (timeout="200")
[21:54:43.175]      // while-condition  =>  TRUE
[21:54:43.175]      // while "1"  (timeout="200")
[21:54:43.175]      // while  =>  TIMEOUT
[21:54:43.175]      // end while "1"
[21:54:43.175]    </control>
[21:54:43.175]    <control if="canReadPins" while="" timeout="0" info="">
[21:54:43.175]      // if-block "canReadPins"
[21:54:43.175]        // =>  TRUE
[21:54:43.175]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:54:43.175]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:54:43.178]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:54:43.178]        // while-condition  =>  FALSE
[21:54:43.178]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:54:43.178]      </control>
[21:54:43.178]      // end if-block "canReadPins"
[21:54:43.178]    </control>
[21:54:43.178]    <control if="!canReadPins" while="" timeout="0" info="">
[21:54:43.178]      // if-block "!canReadPins"
[21:54:43.178]        // =>  FALSE
[21:54:43.178]      // skip if-block "!canReadPins"
[21:54:43.178]    </control>
[21:54:43.178]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:54:43.178]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:54:43.178]        // =>  TRUE
[21:54:43.178]      <block atomic="false" info="">
[21:54:43.178]        WriteAP(0x00, 0x190008);
[21:54:43.183]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:54:43.183]        WriteAP(0xF0, 0x01);
[21:54:43.189]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:54:43.189]      </block>
[21:54:43.189]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:54:43.189]    </control>
[21:54:43.189]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:54:43.189]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:54:43.189]        // =>  FALSE
[21:54:43.190]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:54:43.190]    </control>
[21:54:43.190]    <block atomic="false" info="">
[21:54:43.190]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:54:43.197]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:54:43.197]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:54:43.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:54:43.199]      __ap = 0; //lets make sure we reset the access point selection
[21:54:43.199]        // -> [__ap <= 0x00000000]
[21:54:43.199]    </block>
[21:54:43.199]  </sequence>
[21:54:43.199]  
[21:54:43.235]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:54:43.235]  
[21:54:43.235]  <debugvars>
[21:54:43.235]    // Pre-defined
[21:54:43.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:54:43.235]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:54:43.235]    __dp=0x00000000
[21:54:43.235]    __ap=0x00000000
[21:54:43.235]    __traceout=0x00000000      (Trace Disabled)
[21:54:43.236]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:54:43.236]    __FlashAddr=0x00000000
[21:54:43.236]    __FlashLen=0x00000000
[21:54:43.236]    __FlashArg=0x00000000
[21:54:43.236]    __FlashOp=0x00000000
[21:54:43.236]    __Result=0x00000000
[21:54:43.236]  </debugvars>
[21:54:43.236]  
[21:54:43.236]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:54:43.236]    <block atomic="false" info="">
[21:54:43.236]      __var deviceID = 0;
[21:54:43.236]        // -> [deviceID <= 0x00000000]
[21:54:43.236]      __var version = 0;
[21:54:43.236]        // -> [version <= 0x00000000]
[21:54:43.238]      __var partNum = 0;
[21:54:43.238]        // -> [partNum <= 0x00000000]
[21:54:43.238]      __var manuf = 0;
[21:54:43.238]        // -> [manuf <= 0x00000000]
[21:54:43.238]      __var isMSPM0G1X0X_G3X0X = 0;
[21:54:43.238]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:54:43.239]      __var isProduction = 0;
[21:54:43.239]        // -> [isProduction <= 0x00000000]
[21:54:43.239]      __var continueId = 0;
[21:54:43.239]        // -> [continueId <= 0x00000000]
[21:54:43.239]      deviceID =   Read32(0x41C40004);
[21:54:43.242]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:54:43.242]        // -> [deviceID <= 0x2BB8802F]
[21:54:43.242]      version = deviceID >> 28;
[21:54:43.242]        // -> [version <= 0x00000002]
[21:54:43.242]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:54:43.242]        // -> [partNum <= 0x0000BB88]
[21:54:43.242]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:54:43.242]        // -> [manuf <= 0x00000017]
[21:54:43.242]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:54:43.242]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:54:43.242]      isProduction = (version > 0);
[21:54:43.246]        // -> [isProduction <= 0x00000001]
[21:54:43.246]    </block>
[21:54:43.246]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:54:43.246]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:54:43.246]        // =>  FALSE
[21:54:43.246]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:54:43.246]    </control>
[21:54:43.246]    <control if="continueId == 4" while="" timeout="0" info="">
[21:54:43.246]      // if-block "continueId == 4"
[21:54:43.247]        // =>  FALSE
[21:54:43.247]      // skip if-block "continueId == 4"
[21:54:43.247]    </control>
[21:54:43.247]    <control if="!isProduction" while="" timeout="0" info="">
[21:54:43.247]      // if-block "!isProduction"
[21:54:43.247]        // =>  FALSE
[21:54:43.247]      // skip if-block "!isProduction"
[21:54:43.247]    </control>
[21:54:43.247]  </sequence>
[21:54:43.247]  
[21:56:50.733]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:56:50.733]  
[21:56:50.733]  <debugvars>
[21:56:50.733]    // Pre-defined
[21:56:50.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:50.733]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:50.733]    __dp=0x00000000
[21:56:50.733]    __ap=0x00000000
[21:56:50.733]    __traceout=0x00000000      (Trace Disabled)
[21:56:50.733]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:50.733]    __FlashAddr=0x00000000
[21:56:50.733]    __FlashLen=0x00000000
[21:56:50.733]    __FlashArg=0x00000000
[21:56:50.733]    __FlashOp=0x00000000
[21:56:50.733]    __Result=0x00000000
[21:56:50.733]  </debugvars>
[21:56:50.735]  
[21:56:50.735]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:56:50.735]    <block atomic="false" info="">
[21:56:50.735]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:56:50.735]        // -> [isSWJ <= 0x00000001]
[21:56:50.735]      __var hasDormant = __protocol & 0x00020000;
[21:56:50.735]        // -> [hasDormant <= 0x00000000]
[21:56:50.735]      __var protType   = __protocol & 0x0000FFFF;
[21:56:50.735]        // -> [protType <= 0x00000002]
[21:56:50.735]    </block>
[21:56:50.735]    <control if="protType == 1" while="" timeout="0" info="">
[21:56:50.735]      // if-block "protType == 1"
[21:56:50.735]        // =>  FALSE
[21:56:50.735]      // skip if-block "protType == 1"
[21:56:50.735]    </control>
[21:56:50.735]    <control if="protType == 2" while="" timeout="0" info="">
[21:56:50.735]      // if-block "protType == 2"
[21:56:50.735]        // =>  TRUE
[21:56:50.735]      <control if="isSWJ" while="" timeout="0" info="">
[21:56:50.735]        // if-block "isSWJ"
[21:56:50.735]          // =>  TRUE
[21:56:50.735]        <control if="hasDormant" while="" timeout="0" info="">
[21:56:50.735]          // if-block "hasDormant"
[21:56:50.735]            // =>  FALSE
[21:56:50.735]          // skip if-block "hasDormant"
[21:56:50.735]        </control>
[21:56:50.735]        <control if="!hasDormant" while="" timeout="0" info="">
[21:56:50.735]          // if-block "!hasDormant"
[21:56:50.735]            // =>  TRUE
[21:56:50.735]          <block atomic="false" info="">
[21:56:50.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:56:50.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:50.743]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:56:50.743]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:56:50.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:56:50.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:50.752]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:56:50.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:56:50.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:56:50.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:50.755]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:56:50.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:56:50.759]          </block>
[21:56:50.759]          // end if-block "!hasDormant"
[21:56:50.759]        </control>
[21:56:50.759]        // end if-block "isSWJ"
[21:56:50.759]      </control>
[21:56:50.759]      <control if="!isSWJ" while="" timeout="0" info="">
[21:56:50.759]        // if-block "!isSWJ"
[21:56:50.759]          // =>  FALSE
[21:56:50.759]        // skip if-block "!isSWJ"
[21:56:50.759]      </control>
[21:56:50.759]      <block atomic="false" info="">
[21:56:50.759]        ReadDP(0x0);
[21:56:50.759]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:56:50.763]      </block>
[21:56:50.763]      // end if-block "protType == 2"
[21:56:50.763]    </control>
[21:56:50.763]  </sequence>
[21:56:50.763]  
[21:56:50.767]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:56:50.767]  
[21:56:50.767]  <debugvars>
[21:56:50.767]    // Pre-defined
[21:56:50.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:50.767]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:50.767]    __dp=0x00000000
[21:56:50.767]    __ap=0x00000000
[21:56:50.767]    __traceout=0x00000000      (Trace Disabled)
[21:56:50.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:50.767]    __FlashAddr=0x00000000
[21:56:50.767]    __FlashLen=0x00000000
[21:56:50.767]    __FlashArg=0x00000000
[21:56:50.767]    __FlashOp=0x00000000
[21:56:50.767]    __Result=0x00000000
[21:56:50.767]  </debugvars>
[21:56:50.767]  
[21:56:50.767]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:56:50.767]    <block atomic="false" info="">
[21:56:50.767]      __var SW_DP_ABORT       = 0x0;
[21:56:50.767]        // -> [SW_DP_ABORT <= 0x00000000]
[21:56:50.767]      __var DP_CTRL_STAT      = 0x4;
[21:56:50.767]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:56:50.767]      __var DP_SELECT         = 0x8;
[21:56:50.767]        // -> [DP_SELECT <= 0x00000008]
[21:56:50.767]      __var powered_down      = 0;
[21:56:50.771]        // -> [powered_down <= 0x00000000]
[21:56:50.771]      WriteDP(DP_SELECT, 0x00000000);
[21:56:50.773]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:56:50.773]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:56:50.776]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:56:50.777]        // -> [powered_down <= 0x00000001]
[21:56:50.777]    </block>
[21:56:50.777]    <control if="powered_down" while="" timeout="0" info="">
[21:56:50.777]      // if-block "powered_down"
[21:56:50.777]        // =>  TRUE
[21:56:50.777]      <block atomic="false" info="">
[21:56:50.777]        Message(0, "Debug/System power-up request sent");
[21:56:50.779]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:56:50.780]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:56:50.780]      </block>
[21:56:50.780]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:56:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:56:50.782]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:56:50.784]        // while-condition  =>  FALSE
[21:56:50.784]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:56:50.784]      </control>
[21:56:50.784]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:56:50.784]        // if-block "(__protocol & 0xFFFF) == 1"
[21:56:50.784]          // =>  FALSE
[21:56:50.784]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:56:50.784]      </control>
[21:56:50.784]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:56:50.784]        // if-block "(__protocol & 0xFFFF) == 2"
[21:56:50.784]          // =>  TRUE
[21:56:50.784]        <block atomic="false" info="">
[21:56:50.784]          Message(0, "executing SWD power up");
[21:56:50.784]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:56:50.788]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:56:50.788]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:56:50.788]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:56:50.788]        </block>
[21:56:50.788]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:56:50.788]      </control>
[21:56:50.788]      // end if-block "powered_down"
[21:56:50.788]    </control>
[21:56:50.788]    <block atomic="false" info="">
[21:56:50.788]      __var DEBUG_PORT_VAL    = 0;
[21:56:50.788]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:56:50.788]      __var ACCESS_POINT_VAL  = 0;
[21:56:50.788]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:56:50.788]      __ap = 1; 
[21:56:50.788]        // -> [__ap <= 0x00000001]
[21:56:50.792]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:56:50.796]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:56:50.796]      __ap = 4;
[21:56:50.796]        // -> [__ap <= 0x00000004]
[21:56:50.796]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:56:50.800]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:56:50.800]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:56:50.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:56:50.800]    </block>
[21:56:50.800]    <block atomic="false" info="">
[21:56:50.800]      __var nReset = 0x80;
[21:56:50.800]        // -> [nReset <= 0x00000080]
[21:56:50.800]      __var canReadPins = 0;
[21:56:50.800]        // -> [canReadPins <= 0x00000000]
[21:56:50.800]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:56:50.804]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:56:50.804]        // -> [canReadPins <= 0x00000001]
[21:56:50.804]    </block>
[21:56:50.804]    <control if="" while="1" timeout="200" info="">
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.804]      // while-condition  =>  TRUE
[21:56:50.804]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.808]      // while "1"  (timeout="200")
[21:56:50.808]      // while-condition  =>  TRUE
[21:56:50.812]      // while "1"  (timeout="200")
[21:56:50.812]      // while-condition  =>  TRUE
[21:56:50.812]      // while "1"  (timeout="200")
[21:56:50.812]      // while-condition  =>  TRUE
[21:56:50.812]      // while "1"  (timeout="200")
[21:56:50.812]      // while-condition  =>  TRUE
[21:56:50.812]      // while "1"  (timeout="200")
[21:56:50.812]      // while-condition  =>  TRUE
[21:56:50.812]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.813]      // while-condition  =>  TRUE
[21:56:50.813]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.816]      // while-condition  =>  TRUE
[21:56:50.816]      // while "1"  (timeout="200")
[21:56:50.820]      // while-condition  =>  TRUE
[21:56:50.820]      // while "1"  (timeout="200")
[21:56:50.820]      // while  =>  TIMEOUT
[21:56:50.820]      // end while "1"
[21:56:50.820]    </control>
[21:56:50.820]    <control if="canReadPins" while="" timeout="0" info="">
[21:56:50.820]      // if-block "canReadPins"
[21:56:50.820]        // =>  TRUE
[21:56:50.820]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:56:50.820]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:56:50.828]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:56:50.828]        // while-condition  =>  FALSE
[21:56:50.828]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:56:50.828]      </control>
[21:56:50.828]      // end if-block "canReadPins"
[21:56:50.828]    </control>
[21:56:50.828]    <control if="!canReadPins" while="" timeout="0" info="">
[21:56:50.828]      // if-block "!canReadPins"
[21:56:50.828]        // =>  FALSE
[21:56:50.828]      // skip if-block "!canReadPins"
[21:56:50.828]    </control>
[21:56:50.828]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:56:50.828]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:56:50.828]        // =>  TRUE
[21:56:50.828]      <block atomic="false" info="">
[21:56:50.828]        WriteAP(0x00, 0x190008);
[21:56:50.833]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:56:50.833]        WriteAP(0xF0, 0x01);
[21:56:50.837]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:56:50.837]      </block>
[21:56:50.837]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:56:50.837]    </control>
[21:56:50.837]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:56:50.837]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:56:50.837]        // =>  FALSE
[21:56:50.837]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:56:50.837]    </control>
[21:56:50.837]    <block atomic="false" info="">
[21:56:50.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:56:50.840]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:56:50.840]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:56:50.840]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:56:50.840]      __ap = 0; //lets make sure we reset the access point selection
[21:56:50.842]        // -> [__ap <= 0x00000000]
[21:56:50.842]    </block>
[21:56:50.842]  </sequence>
[21:56:50.842]  
[21:56:50.870]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:56:50.870]  
[21:56:50.870]  <debugvars>
[21:56:50.870]    // Pre-defined
[21:56:50.870]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:50.870]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:50.870]    __dp=0x00000000
[21:56:50.870]    __ap=0x00000000
[21:56:50.870]    __traceout=0x00000000      (Trace Disabled)
[21:56:50.870]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:50.870]    __FlashAddr=0x00000000
[21:56:50.873]    __FlashLen=0x00000000
[21:56:50.873]    __FlashArg=0x00000000
[21:56:50.873]    __FlashOp=0x00000000
[21:56:50.873]    __Result=0x00000000
[21:56:50.873]  </debugvars>
[21:56:50.873]  
[21:56:50.873]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:56:50.873]    <block atomic="false" info="">
[21:56:50.873]      __var deviceID = 0;
[21:56:50.873]        // -> [deviceID <= 0x00000000]
[21:56:50.873]      __var version = 0;
[21:56:50.873]        // -> [version <= 0x00000000]
[21:56:50.873]      __var partNum = 0;
[21:56:50.874]        // -> [partNum <= 0x00000000]
[21:56:50.874]      __var manuf = 0;
[21:56:50.874]        // -> [manuf <= 0x00000000]
[21:56:50.875]      __var isMSPM0G1X0X_G3X0X = 0;
[21:56:50.875]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:56:50.875]      __var isProduction = 0;
[21:56:50.875]        // -> [isProduction <= 0x00000000]
[21:56:50.875]      __var continueId = 0;
[21:56:50.875]        // -> [continueId <= 0x00000000]
[21:56:50.875]      deviceID =   Read32(0x41C40004);
[21:56:50.882]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:56:50.882]        // -> [deviceID <= 0x2BB8802F]
[21:56:50.882]      version = deviceID >> 28;
[21:56:50.882]        // -> [version <= 0x00000002]
[21:56:50.882]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:56:50.882]        // -> [partNum <= 0x0000BB88]
[21:56:50.882]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:56:50.882]        // -> [manuf <= 0x00000017]
[21:56:50.882]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:56:50.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:56:50.882]      isProduction = (version > 0);
[21:56:50.882]        // -> [isProduction <= 0x00000001]
[21:56:50.882]    </block>
[21:56:50.882]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:56:50.882]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:56:50.882]        // =>  FALSE
[21:56:50.882]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:56:50.885]    </control>
[21:56:50.885]    <control if="continueId == 4" while="" timeout="0" info="">
[21:56:50.885]      // if-block "continueId == 4"
[21:56:50.885]        // =>  FALSE
[21:56:50.885]      // skip if-block "continueId == 4"
[21:56:50.885]    </control>
[21:56:50.885]    <control if="!isProduction" while="" timeout="0" info="">
[21:56:50.885]      // if-block "!isProduction"
[21:56:50.885]        // =>  FALSE
[21:56:50.885]      // skip if-block "!isProduction"
[21:56:50.885]    </control>
[21:56:50.885]  </sequence>
[21:56:50.885]  
[22:07:46.358]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:46.358]  
[22:07:46.358]  <debugvars>
[22:07:46.358]    // Pre-defined
[22:07:46.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:46.358]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:46.358]    __dp=0x00000000
[22:07:46.358]    __ap=0x00000000
[22:07:46.358]    __traceout=0x00000000      (Trace Disabled)
[22:07:46.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:46.358]    __FlashAddr=0x00000000
[22:07:46.358]    __FlashLen=0x00000000
[22:07:46.358]    __FlashArg=0x00000000
[22:07:46.358]    __FlashOp=0x00000000
[22:07:46.358]    __Result=0x00000000
[22:07:46.358]  </debugvars>
[22:07:46.358]  
[22:07:46.358]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:46.362]    <block atomic="false" info="">
[22:07:46.362]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:46.362]        // -> [isSWJ <= 0x00000001]
[22:07:46.362]      __var hasDormant = __protocol & 0x00020000;
[22:07:46.362]        // -> [hasDormant <= 0x00000000]
[22:07:46.362]      __var protType   = __protocol & 0x0000FFFF;
[22:07:46.362]        // -> [protType <= 0x00000002]
[22:07:46.362]    </block>
[22:07:46.362]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:46.362]      // if-block "protType == 1"
[22:07:46.362]        // =>  FALSE
[22:07:46.362]      // skip if-block "protType == 1"
[22:07:46.362]    </control>
[22:07:46.362]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:46.362]      // if-block "protType == 2"
[22:07:46.362]        // =>  TRUE
[22:07:46.362]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:46.362]        // if-block "isSWJ"
[22:07:46.362]          // =>  TRUE
[22:07:46.362]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:46.362]          // if-block "hasDormant"
[22:07:46.362]            // =>  FALSE
[22:07:46.362]          // skip if-block "hasDormant"
[22:07:46.362]        </control>
[22:07:46.362]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:46.362]          // if-block "!hasDormant"
[22:07:46.362]            // =>  TRUE
[22:07:46.362]          <block atomic="false" info="">
[22:07:46.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:46.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:46.366]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:46.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:46.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:46.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:46.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:46.374]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:46.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:46.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:46.376]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:46.378]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:46.378]          </block>
[22:07:46.378]          // end if-block "!hasDormant"
[22:07:46.378]        </control>
[22:07:46.378]        // end if-block "isSWJ"
[22:07:46.378]      </control>
[22:07:46.378]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:46.378]        // if-block "!isSWJ"
[22:07:46.378]          // =>  FALSE
[22:07:46.378]        // skip if-block "!isSWJ"
[22:07:46.378]      </control>
[22:07:46.380]      <block atomic="false" info="">
[22:07:46.380]        ReadDP(0x0);
[22:07:46.380]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:46.380]      </block>
[22:07:46.380]      // end if-block "protType == 2"
[22:07:46.380]    </control>
[22:07:46.380]  </sequence>
[22:07:46.383]  
[22:07:46.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:46.383]  
[22:07:46.383]  <debugvars>
[22:07:46.383]    // Pre-defined
[22:07:46.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:46.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:46.383]    __dp=0x00000000
[22:07:46.383]    __ap=0x00000000
[22:07:46.383]    __traceout=0x00000000      (Trace Disabled)
[22:07:46.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:46.383]    __FlashAddr=0x00000000
[22:07:46.383]    __FlashLen=0x00000000
[22:07:46.386]    __FlashArg=0x00000000
[22:07:46.386]    __FlashOp=0x00000000
[22:07:46.386]    __Result=0x00000000
[22:07:46.386]  </debugvars>
[22:07:46.386]  
[22:07:46.386]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:46.386]    <block atomic="false" info="">
[22:07:46.386]      __var SW_DP_ABORT       = 0x0;
[22:07:46.387]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:46.387]      __var DP_CTRL_STAT      = 0x4;
[22:07:46.387]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:46.387]      __var DP_SELECT         = 0x8;
[22:07:46.387]        // -> [DP_SELECT <= 0x00000008]
[22:07:46.387]      __var powered_down      = 0;
[22:07:46.387]        // -> [powered_down <= 0x00000000]
[22:07:46.387]      WriteDP(DP_SELECT, 0x00000000);
[22:07:46.390]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:46.390]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:07:46.390]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:07:46.390]        // -> [powered_down <= 0x00000001]
[22:07:46.394]    </block>
[22:07:46.394]    <control if="powered_down" while="" timeout="0" info="">
[22:07:46.394]      // if-block "powered_down"
[22:07:46.394]        // =>  TRUE
[22:07:46.394]      <block atomic="false" info="">
[22:07:46.394]        Message(0, "Debug/System power-up request sent");
[22:07:46.396]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:07:46.396]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:07:46.398]      </block>
[22:07:46.398]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:07:46.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:07:46.402]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:07:46.402]        // while-condition  =>  FALSE
[22:07:46.402]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:07:46.402]      </control>
[22:07:46.402]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:07:46.402]        // if-block "(__protocol & 0xFFFF) == 1"
[22:07:46.402]          // =>  FALSE
[22:07:46.402]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:07:46.402]      </control>
[22:07:46.402]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:07:46.402]        // if-block "(__protocol & 0xFFFF) == 2"
[22:07:46.403]          // =>  TRUE
[22:07:46.403]        <block atomic="false" info="">
[22:07:46.403]          Message(0, "executing SWD power up");
[22:07:46.404]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:07:46.406]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:07:46.407]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:07:46.413]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:07:46.413]        </block>
[22:07:46.413]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:07:46.413]      </control>
[22:07:46.413]      // end if-block "powered_down"
[22:07:46.414]    </control>
[22:07:46.414]    <block atomic="false" info="">
[22:07:46.414]      __var DEBUG_PORT_VAL    = 0;
[22:07:46.414]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:07:46.414]      __var ACCESS_POINT_VAL  = 0;
[22:07:46.414]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:07:46.414]      __ap = 1; 
[22:07:46.416]        // -> [__ap <= 0x00000001]
[22:07:46.416]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:07:46.425]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:07:46.425]      __ap = 4;
[22:07:46.425]        // -> [__ap <= 0x00000004]
[22:07:46.425]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:46.429]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:07:46.429]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:07:46.429]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:46.429]    </block>
[22:07:46.429]    <block atomic="false" info="">
[22:07:46.429]      __var nReset = 0x80;
[22:07:46.429]        // -> [nReset <= 0x00000080]
[22:07:46.429]      __var canReadPins = 0;
[22:07:46.429]        // -> [canReadPins <= 0x00000000]
[22:07:46.429]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:07:46.434]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:07:46.434]        // -> [canReadPins <= 0x00000001]
[22:07:46.434]    </block>
[22:07:46.434]    <control if="" while="1" timeout="200" info="">
[22:07:46.434]      // while "1"  (timeout="200")
[22:07:46.434]      // while-condition  =>  TRUE
[22:07:46.434]      // while "1"  (timeout="200")
[22:07:46.434]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.436]      // while-condition  =>  TRUE
[22:07:46.436]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.438]      // while "1"  (timeout="200")
[22:07:46.438]      // while-condition  =>  TRUE
[22:07:46.442]      // while "1"  (timeout="200")
[22:07:46.442]      // while  =>  TIMEOUT
[22:07:46.442]      // end while "1"
[22:07:46.442]    </control>
[22:07:46.442]    <control if="canReadPins" while="" timeout="0" info="">
[22:07:46.442]      // if-block "canReadPins"
[22:07:46.442]        // =>  TRUE
[22:07:46.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:07:46.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:07:46.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:07:46.442]        // while-condition  =>  FALSE
[22:07:46.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:07:46.442]      </control>
[22:07:46.442]      // end if-block "canReadPins"
[22:07:46.442]    </control>
[22:07:46.446]    <control if="!canReadPins" while="" timeout="0" info="">
[22:07:46.446]      // if-block "!canReadPins"
[22:07:46.446]        // =>  FALSE
[22:07:46.446]      // skip if-block "!canReadPins"
[22:07:46.446]    </control>
[22:07:46.447]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:07:46.447]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:46.447]        // =>  TRUE
[22:07:46.447]      <block atomic="false" info="">
[22:07:46.447]        WriteAP(0x00, 0x190008);
[22:07:46.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:46.448]        WriteAP(0xF0, 0x01);
[22:07:46.454]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:46.454]      </block>
[22:07:46.456]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:46.456]    </control>
[22:07:46.456]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:07:46.456]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:46.456]        // =>  FALSE
[22:07:46.456]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:46.456]    </control>
[22:07:46.456]    <block atomic="false" info="">
[22:07:46.456]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:46.458]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:07:46.458]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:07:46.458]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:46.458]      __ap = 0; //lets make sure we reset the access point selection
[22:07:46.458]        // -> [__ap <= 0x00000000]
[22:07:46.458]    </block>
[22:07:46.458]  </sequence>
[22:07:46.458]  
[22:07:46.488]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:07:46.488]  
[22:07:46.488]  <debugvars>
[22:07:46.488]    // Pre-defined
[22:07:46.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:46.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:46.488]    __dp=0x00000000
[22:07:46.488]    __ap=0x00000000
[22:07:46.488]    __traceout=0x00000000      (Trace Disabled)
[22:07:46.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:46.488]    __FlashAddr=0x00000000
[22:07:46.488]    __FlashLen=0x00000000
[22:07:46.489]    __FlashArg=0x00000000
[22:07:46.489]    __FlashOp=0x00000000
[22:07:46.489]    __Result=0x00000000
[22:07:46.489]  </debugvars>
[22:07:46.489]  
[22:07:46.489]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:07:46.489]    <block atomic="false" info="">
[22:07:46.489]      __var deviceID = 0;
[22:07:46.489]        // -> [deviceID <= 0x00000000]
[22:07:46.489]      __var version = 0;
[22:07:46.489]        // -> [version <= 0x00000000]
[22:07:46.490]      __var partNum = 0;
[22:07:46.490]        // -> [partNum <= 0x00000000]
[22:07:46.490]      __var manuf = 0;
[22:07:46.490]        // -> [manuf <= 0x00000000]
[22:07:46.490]      __var isMSPM0G1X0X_G3X0X = 0;
[22:07:46.490]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:07:46.490]      __var isProduction = 0;
[22:07:46.491]        // -> [isProduction <= 0x00000000]
[22:07:46.491]      __var continueId = 0;
[22:07:46.491]        // -> [continueId <= 0x00000000]
[22:07:46.491]      deviceID =   Read32(0x41C40004);
[22:07:46.496]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:07:46.496]        // -> [deviceID <= 0x2BB8802F]
[22:07:46.496]      version = deviceID >> 28;
[22:07:46.496]        // -> [version <= 0x00000002]
[22:07:46.496]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:07:46.496]        // -> [partNum <= 0x0000BB88]
[22:07:46.496]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:07:46.496]        // -> [manuf <= 0x00000017]
[22:07:46.496]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:07:46.496]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:07:46.497]      isProduction = (version > 0);
[22:07:46.497]        // -> [isProduction <= 0x00000001]
[22:07:46.497]    </block>
[22:07:46.497]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:07:46.497]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:07:46.497]        // =>  FALSE
[22:07:46.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:07:46.497]    </control>
[22:07:46.497]    <control if="continueId == 4" while="" timeout="0" info="">
[22:07:46.497]      // if-block "continueId == 4"
[22:07:46.497]        // =>  FALSE
[22:07:46.498]      // skip if-block "continueId == 4"
[22:07:46.498]    </control>
[22:07:46.498]    <control if="!isProduction" while="" timeout="0" info="">
[22:07:46.498]      // if-block "!isProduction"
[22:07:46.498]        // =>  FALSE
[22:07:46.498]      // skip if-block "!isProduction"
[22:07:46.498]    </control>
[22:07:46.498]  </sequence>
[22:07:46.498]  
[22:08:31.772]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:08:31.772]  
[22:08:31.781]  <debugvars>
[22:08:31.781]    // Pre-defined
[22:08:31.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:31.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:31.781]    __dp=0x00000000
[22:08:31.781]    __ap=0x00000000
[22:08:31.781]    __traceout=0x00000000      (Trace Disabled)
[22:08:31.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:31.781]    __FlashAddr=0x00000000
[22:08:31.781]    __FlashLen=0x00000000
[22:08:31.782]    __FlashArg=0x00000000
[22:08:31.782]    __FlashOp=0x00000000
[22:08:31.782]    __Result=0x00000000
[22:08:31.782]  </debugvars>
[22:08:31.782]  
[22:08:31.782]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:08:31.782]    <block atomic="false" info="">
[22:08:31.782]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:08:31.782]        // -> [isSWJ <= 0x00000001]
[22:08:31.782]      __var hasDormant = __protocol & 0x00020000;
[22:08:31.782]        // -> [hasDormant <= 0x00000000]
[22:08:31.782]      __var protType   = __protocol & 0x0000FFFF;
[22:08:31.782]        // -> [protType <= 0x00000002]
[22:08:31.782]    </block>
[22:08:31.782]    <control if="protType == 1" while="" timeout="0" info="">
[22:08:31.782]      // if-block "protType == 1"
[22:08:31.782]        // =>  FALSE
[22:08:31.782]      // skip if-block "protType == 1"
[22:08:31.782]    </control>
[22:08:31.782]    <control if="protType == 2" while="" timeout="0" info="">
[22:08:31.782]      // if-block "protType == 2"
[22:08:31.782]        // =>  TRUE
[22:08:31.782]      <control if="isSWJ" while="" timeout="0" info="">
[22:08:31.782]        // if-block "isSWJ"
[22:08:31.782]          // =>  TRUE
[22:08:31.782]        <control if="hasDormant" while="" timeout="0" info="">
[22:08:31.782]          // if-block "hasDormant"
[22:08:31.782]            // =>  FALSE
[22:08:31.782]          // skip if-block "hasDormant"
[22:08:31.782]        </control>
[22:08:31.782]        <control if="!hasDormant" while="" timeout="0" info="">
[22:08:31.782]          // if-block "!hasDormant"
[22:08:31.782]            // =>  TRUE
[22:08:31.782]          <block atomic="false" info="">
[22:08:31.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:08:31.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:31.787]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:08:31.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:08:31.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:08:31.798]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:31.798]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:08:31.802]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:08:31.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:08:31.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:31.802]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:08:31.808]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:08:31.808]          </block>
[22:08:31.808]          // end if-block "!hasDormant"
[22:08:31.808]        </control>
[22:08:31.808]        // end if-block "isSWJ"
[22:08:31.808]      </control>
[22:08:31.808]      <control if="!isSWJ" while="" timeout="0" info="">
[22:08:31.808]        // if-block "!isSWJ"
[22:08:31.808]          // =>  FALSE
[22:08:31.808]        // skip if-block "!isSWJ"
[22:08:31.808]      </control>
[22:08:31.808]      <block atomic="false" info="">
[22:08:31.808]        ReadDP(0x0);
[22:08:31.811]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:08:31.811]      </block>
[22:08:31.811]      // end if-block "protType == 2"
[22:08:31.811]    </control>
[22:08:31.811]  </sequence>
[22:08:31.811]  
[22:08:31.821]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:08:31.821]  
[22:08:31.821]  <debugvars>
[22:08:31.821]    // Pre-defined
[22:08:31.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:31.821]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:31.821]    __dp=0x00000000
[22:08:31.821]    __ap=0x00000000
[22:08:31.821]    __traceout=0x00000000      (Trace Disabled)
[22:08:31.821]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:31.821]    __FlashAddr=0x00000000
[22:08:31.821]    __FlashLen=0x00000000
[22:08:31.821]    __FlashArg=0x00000000
[22:08:31.821]    __FlashOp=0x00000000
[22:08:31.821]    __Result=0x00000000
[22:08:31.821]  </debugvars>
[22:08:31.821]  
[22:08:31.821]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:08:31.823]    <block atomic="false" info="">
[22:08:31.823]      __var SW_DP_ABORT       = 0x0;
[22:08:31.823]        // -> [SW_DP_ABORT <= 0x00000000]
[22:08:31.823]      __var DP_CTRL_STAT      = 0x4;
[22:08:31.823]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:08:31.823]      __var DP_SELECT         = 0x8;
[22:08:31.823]        // -> [DP_SELECT <= 0x00000008]
[22:08:31.823]      __var powered_down      = 0;
[22:08:31.823]        // -> [powered_down <= 0x00000000]
[22:08:31.823]      WriteDP(DP_SELECT, 0x00000000);
[22:08:31.826]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:08:31.826]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:08:31.827]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:08:31.827]        // -> [powered_down <= 0x00000001]
[22:08:31.827]    </block>
[22:08:31.827]    <control if="powered_down" while="" timeout="0" info="">
[22:08:31.827]      // if-block "powered_down"
[22:08:31.827]        // =>  TRUE
[22:08:31.827]      <block atomic="false" info="">
[22:08:31.827]        Message(0, "Debug/System power-up request sent");
[22:08:31.829]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:08:31.837]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:08:31.837]      </block>
[22:08:31.837]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:08:31.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:08:31.838]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:08:31.838]        // while-condition  =>  FALSE
[22:08:31.839]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:08:31.839]      </control>
[22:08:31.839]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:08:31.839]        // if-block "(__protocol & 0xFFFF) == 1"
[22:08:31.839]          // =>  FALSE
[22:08:31.839]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:08:31.839]      </control>
[22:08:31.839]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:08:31.839]        // if-block "(__protocol & 0xFFFF) == 2"
[22:08:31.839]          // =>  TRUE
[22:08:31.839]        <block atomic="false" info="">
[22:08:31.839]          Message(0, "executing SWD power up");
[22:08:31.839]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:08:31.845]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:08:31.845]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:08:31.847]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:08:31.848]        </block>
[22:08:31.848]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:08:31.848]      </control>
[22:08:31.848]      // end if-block "powered_down"
[22:08:31.848]    </control>
[22:08:31.848]    <block atomic="false" info="">
[22:08:31.848]      __var DEBUG_PORT_VAL    = 0;
[22:08:31.848]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:08:31.848]      __var ACCESS_POINT_VAL  = 0;
[22:08:31.848]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:08:31.848]      __ap = 1; 
[22:08:31.848]        // -> [__ap <= 0x00000001]
[22:08:31.848]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:08:31.860]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:08:31.860]      __ap = 4;
[22:08:31.860]        // -> [__ap <= 0x00000004]
[22:08:31.860]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:31.868]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:08:31.868]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:08:31.868]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:31.872]    </block>
[22:08:31.872]    <block atomic="false" info="">
[22:08:31.872]      __var nReset = 0x80;
[22:08:31.872]        // -> [nReset <= 0x00000080]
[22:08:31.872]      __var canReadPins = 0;
[22:08:31.872]        // -> [canReadPins <= 0x00000000]
[22:08:31.872]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:08:31.877]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:08:31.877]        // -> [canReadPins <= 0x00000001]
[22:08:31.877]    </block>
[22:08:31.877]    <control if="" while="1" timeout="200" info="">
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.877]      // while-condition  =>  TRUE
[22:08:31.877]      // while "1"  (timeout="200")
[22:08:31.880]      // while-condition  =>  TRUE
[22:08:31.880]      // while "1"  (timeout="200")
[22:08:31.880]      // while  =>  TIMEOUT
[22:08:31.880]      // end while "1"
[22:08:31.881]    </control>
[22:08:31.881]    <control if="canReadPins" while="" timeout="0" info="">
[22:08:31.881]      // if-block "canReadPins"
[22:08:31.881]        // =>  TRUE
[22:08:31.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:08:31.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:08:31.884]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:08:31.884]        // while-condition  =>  FALSE
[22:08:31.884]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:08:31.884]      </control>
[22:08:31.884]      // end if-block "canReadPins"
[22:08:31.884]    </control>
[22:08:31.884]    <control if="!canReadPins" while="" timeout="0" info="">
[22:08:31.884]      // if-block "!canReadPins"
[22:08:31.884]        // =>  FALSE
[22:08:31.884]      // skip if-block "!canReadPins"
[22:08:31.884]    </control>
[22:08:31.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:08:31.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:31.884]        // =>  TRUE
[22:08:31.884]      <block atomic="false" info="">
[22:08:31.884]        WriteAP(0x00, 0x190008);
[22:08:31.887]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:31.887]        WriteAP(0xF0, 0x01);
[22:08:31.897]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:31.897]      </block>
[22:08:31.897]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:31.899]    </control>
[22:08:31.899]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:08:31.899]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:31.899]        // =>  FALSE
[22:08:31.899]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:31.899]    </control>
[22:08:31.899]    <block atomic="false" info="">
[22:08:31.899]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:31.905]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:08:31.905]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:08:31.905]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:31.907]      __ap = 0; //lets make sure we reset the access point selection
[22:08:31.907]        // -> [__ap <= 0x00000000]
[22:08:31.907]    </block>
[22:08:31.907]  </sequence>
[22:08:31.907]  
[22:08:31.949]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:08:31.949]  
[22:08:31.949]  <debugvars>
[22:08:31.949]    // Pre-defined
[22:08:31.949]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:31.949]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:31.949]    __dp=0x00000000
[22:08:31.949]    __ap=0x00000000
[22:08:31.949]    __traceout=0x00000000      (Trace Disabled)
[22:08:31.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:31.949]    __FlashAddr=0x00000000
[22:08:31.949]    __FlashLen=0x00000000
[22:08:31.949]    __FlashArg=0x00000000
[22:08:31.949]    __FlashOp=0x00000000
[22:08:31.949]    __Result=0x00000000
[22:08:31.953]  </debugvars>
[22:08:31.953]  
[22:08:31.953]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:08:31.953]    <block atomic="false" info="">
[22:08:31.953]      __var deviceID = 0;
[22:08:31.953]        // -> [deviceID <= 0x00000000]
[22:08:31.953]      __var version = 0;
[22:08:31.953]        // -> [version <= 0x00000000]
[22:08:31.953]      __var partNum = 0;
[22:08:31.954]        // -> [partNum <= 0x00000000]
[22:08:31.954]      __var manuf = 0;
[22:08:31.954]        // -> [manuf <= 0x00000000]
[22:08:31.954]      __var isMSPM0G1X0X_G3X0X = 0;
[22:08:31.954]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:08:31.954]      __var isProduction = 0;
[22:08:31.954]        // -> [isProduction <= 0x00000000]
[22:08:31.954]      __var continueId = 0;
[22:08:31.954]        // -> [continueId <= 0x00000000]
[22:08:31.954]      deviceID =   Read32(0x41C40004);
[22:08:31.961]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:08:31.961]        // -> [deviceID <= 0x2BB8802F]
[22:08:31.961]      version = deviceID >> 28;
[22:08:31.961]        // -> [version <= 0x00000002]
[22:08:31.961]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:08:31.961]        // -> [partNum <= 0x0000BB88]
[22:08:31.961]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:08:31.961]        // -> [manuf <= 0x00000017]
[22:08:31.961]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:08:31.961]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:08:31.965]      isProduction = (version > 0);
[22:08:31.965]        // -> [isProduction <= 0x00000001]
[22:08:31.965]    </block>
[22:08:31.965]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:08:31.965]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:08:31.965]        // =>  FALSE
[22:08:31.965]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:08:31.965]    </control>
[22:08:31.965]    <control if="continueId == 4" while="" timeout="0" info="">
[22:08:31.965]      // if-block "continueId == 4"
[22:08:31.965]        // =>  FALSE
[22:08:31.965]      // skip if-block "continueId == 4"
[22:08:31.965]    </control>
[22:08:31.965]    <control if="!isProduction" while="" timeout="0" info="">
[22:08:31.967]      // if-block "!isProduction"
[22:08:31.967]        // =>  FALSE
[22:08:31.967]      // skip if-block "!isProduction"
[22:08:31.967]    </control>
[22:08:31.967]  </sequence>
[22:08:31.967]  
[22:09:36.908]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:09:36.908]  
[22:09:36.909]  <debugvars>
[22:09:36.909]    // Pre-defined
[22:09:36.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:36.909]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:36.909]    __dp=0x00000000
[22:09:36.909]    __ap=0x00000000
[22:09:36.909]    __traceout=0x00000000      (Trace Disabled)
[22:09:36.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:36.909]    __FlashAddr=0x00000000
[22:09:36.909]    __FlashLen=0x00000000
[22:09:36.910]    __FlashArg=0x00000000
[22:09:36.910]    __FlashOp=0x00000000
[22:09:36.910]    __Result=0x00000000
[22:09:36.910]  </debugvars>
[22:09:36.910]  
[22:09:36.910]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:09:36.910]    <block atomic="false" info="">
[22:09:36.910]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:09:36.910]        // -> [isSWJ <= 0x00000001]
[22:09:36.910]      __var hasDormant = __protocol & 0x00020000;
[22:09:36.910]        // -> [hasDormant <= 0x00000000]
[22:09:36.910]      __var protType   = __protocol & 0x0000FFFF;
[22:09:36.910]        // -> [protType <= 0x00000002]
[22:09:36.910]    </block>
[22:09:36.910]    <control if="protType == 1" while="" timeout="0" info="">
[22:09:36.910]      // if-block "protType == 1"
[22:09:36.910]        // =>  FALSE
[22:09:36.910]      // skip if-block "protType == 1"
[22:09:36.910]    </control>
[22:09:36.910]    <control if="protType == 2" while="" timeout="0" info="">
[22:09:36.910]      // if-block "protType == 2"
[22:09:36.910]        // =>  TRUE
[22:09:36.910]      <control if="isSWJ" while="" timeout="0" info="">
[22:09:36.910]        // if-block "isSWJ"
[22:09:36.910]          // =>  TRUE
[22:09:36.910]        <control if="hasDormant" while="" timeout="0" info="">
[22:09:36.910]          // if-block "hasDormant"
[22:09:36.910]            // =>  FALSE
[22:09:36.910]          // skip if-block "hasDormant"
[22:09:36.910]        </control>
[22:09:36.913]        <control if="!hasDormant" while="" timeout="0" info="">
[22:09:36.913]          // if-block "!hasDormant"
[22:09:36.913]            // =>  TRUE
[22:09:36.913]          <block atomic="false" info="">
[22:09:36.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:09:36.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:36.913]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:09:36.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:09:36.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:09:36.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:36.919]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:09:36.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:09:36.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:09:36.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:36.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:09:36.928]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:09:36.928]          </block>
[22:09:36.928]          // end if-block "!hasDormant"
[22:09:36.928]        </control>
[22:09:36.928]        // end if-block "isSWJ"
[22:09:36.928]      </control>
[22:09:36.928]      <control if="!isSWJ" while="" timeout="0" info="">
[22:09:36.928]        // if-block "!isSWJ"
[22:09:36.928]          // =>  FALSE
[22:09:36.928]        // skip if-block "!isSWJ"
[22:09:36.928]      </control>
[22:09:36.928]      <block atomic="false" info="">
[22:09:36.928]        ReadDP(0x0);
[22:09:36.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:09:36.934]      </block>
[22:09:36.934]      // end if-block "protType == 2"
[22:09:36.934]    </control>
[22:09:36.934]  </sequence>
[22:09:36.934]  
[22:09:36.940]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:09:36.940]  
[22:09:36.940]  <debugvars>
[22:09:36.940]    // Pre-defined
[22:09:36.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:36.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:36.940]    __dp=0x00000000
[22:09:36.940]    __ap=0x00000000
[22:09:36.940]    __traceout=0x00000000      (Trace Disabled)
[22:09:36.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:36.940]    __FlashAddr=0x00000000
[22:09:36.940]    __FlashLen=0x00000000
[22:09:36.940]    __FlashArg=0x00000000
[22:09:36.940]    __FlashOp=0x00000000
[22:09:36.940]    __Result=0x00000000
[22:09:36.940]  </debugvars>
[22:09:36.940]  
[22:09:36.940]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:09:36.940]    <block atomic="false" info="">
[22:09:36.940]      __var SW_DP_ABORT       = 0x0;
[22:09:36.940]        // -> [SW_DP_ABORT <= 0x00000000]
[22:09:36.940]      __var DP_CTRL_STAT      = 0x4;
[22:09:36.942]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:09:36.942]      __var DP_SELECT         = 0x8;
[22:09:36.942]        // -> [DP_SELECT <= 0x00000008]
[22:09:36.942]      __var powered_down      = 0;
[22:09:36.942]        // -> [powered_down <= 0x00000000]
[22:09:36.942]      WriteDP(DP_SELECT, 0x00000000);
[22:09:36.942]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:09:36.942]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:09:36.948]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:09:36.948]        // -> [powered_down <= 0x00000001]
[22:09:36.948]    </block>
[22:09:36.948]    <control if="powered_down" while="" timeout="0" info="">
[22:09:36.948]      // if-block "powered_down"
[22:09:36.948]        // =>  TRUE
[22:09:36.948]      <block atomic="false" info="">
[22:09:36.948]        Message(0, "Debug/System power-up request sent");
[22:09:36.950]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:09:36.950]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:09:36.950]      </block>
[22:09:36.950]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:09:36.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:09:36.960]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:09:36.960]        // while-condition  =>  FALSE
[22:09:36.960]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:09:36.960]      </control>
[22:09:36.960]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:09:36.960]        // if-block "(__protocol & 0xFFFF) == 1"
[22:09:36.960]          // =>  FALSE
[22:09:36.960]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:09:36.960]      </control>
[22:09:36.960]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:09:36.960]        // if-block "(__protocol & 0xFFFF) == 2"
[22:09:36.960]          // =>  TRUE
[22:09:36.960]        <block atomic="false" info="">
[22:09:36.960]          Message(0, "executing SWD power up");
[22:09:36.962]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:09:36.962]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:09:36.962]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:09:36.962]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:09:36.966]        </block>
[22:09:36.966]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:09:36.966]      </control>
[22:09:36.966]      // end if-block "powered_down"
[22:09:36.966]    </control>
[22:09:36.966]    <block atomic="false" info="">
[22:09:36.966]      __var DEBUG_PORT_VAL    = 0;
[22:09:36.966]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:09:36.966]      __var ACCESS_POINT_VAL  = 0;
[22:09:36.966]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:09:36.966]      __ap = 1; 
[22:09:36.966]        // -> [__ap <= 0x00000001]
[22:09:36.966]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:09:36.971]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:09:36.971]      __ap = 4;
[22:09:36.971]        // -> [__ap <= 0x00000004]
[22:09:36.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:36.978]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:09:36.979]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:09:36.979]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:36.979]    </block>
[22:09:36.979]    <block atomic="false" info="">
[22:09:36.979]      __var nReset = 0x80;
[22:09:36.979]        // -> [nReset <= 0x00000080]
[22:09:36.979]      __var canReadPins = 0;
[22:09:36.979]        // -> [canReadPins <= 0x00000000]
[22:09:36.979]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:09:36.983]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:09:36.983]        // -> [canReadPins <= 0x00000001]
[22:09:36.983]    </block>
[22:09:36.983]    <control if="" while="1" timeout="200" info="">
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.983]      // while "1"  (timeout="200")
[22:09:36.983]      // while-condition  =>  TRUE
[22:09:36.987]      // while "1"  (timeout="200")
[22:09:36.987]      // while-condition  =>  TRUE
[22:09:36.987]      // while "1"  (timeout="200")
[22:09:36.987]      // while-condition  =>  TRUE
[22:09:36.988]      // while "1"  (timeout="200")
[22:09:36.988]      // while  =>  TIMEOUT
[22:09:36.988]      // end while "1"
[22:09:36.988]    </control>
[22:09:36.988]    <control if="canReadPins" while="" timeout="0" info="">
[22:09:36.988]      // if-block "canReadPins"
[22:09:36.988]        // =>  TRUE
[22:09:36.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:09:36.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:09:36.991]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:09:36.991]        // while-condition  =>  FALSE
[22:09:36.991]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:09:36.992]      </control>
[22:09:36.992]      // end if-block "canReadPins"
[22:09:36.992]    </control>
[22:09:36.992]    <control if="!canReadPins" while="" timeout="0" info="">
[22:09:36.992]      // if-block "!canReadPins"
[22:09:36.992]        // =>  FALSE
[22:09:36.992]      // skip if-block "!canReadPins"
[22:09:36.992]    </control>
[22:09:36.992]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:09:36.992]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:36.992]        // =>  TRUE
[22:09:36.992]      <block atomic="false" info="">
[22:09:36.992]        WriteAP(0x00, 0x190008);
[22:09:36.994]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:36.994]        WriteAP(0xF0, 0x01);
[22:09:36.998]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:36.998]      </block>
[22:09:36.998]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:37.000]    </control>
[22:09:37.000]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:09:37.000]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:37.000]        // =>  FALSE
[22:09:37.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:37.000]    </control>
[22:09:37.000]    <block atomic="false" info="">
[22:09:37.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:37.000]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:09:37.000]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:09:37.000]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:37.005]      __ap = 0; //lets make sure we reset the access point selection
[22:09:37.005]        // -> [__ap <= 0x00000000]
[22:09:37.005]    </block>
[22:09:37.005]  </sequence>
[22:09:37.005]  
[22:09:37.036]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:09:37.036]  
[22:09:37.038]  <debugvars>
[22:09:37.038]    // Pre-defined
[22:09:37.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:37.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:37.038]    __dp=0x00000000
[22:09:37.038]    __ap=0x00000000
[22:09:37.038]    __traceout=0x00000000      (Trace Disabled)
[22:09:37.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:37.038]    __FlashAddr=0x00000000
[22:09:37.038]    __FlashLen=0x00000000
[22:09:37.038]    __FlashArg=0x00000000
[22:09:37.038]    __FlashOp=0x00000000
[22:09:37.038]    __Result=0x00000000
[22:09:37.038]  </debugvars>
[22:09:37.038]  
[22:09:37.038]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:09:37.038]    <block atomic="false" info="">
[22:09:37.038]      __var deviceID = 0;
[22:09:37.038]        // -> [deviceID <= 0x00000000]
[22:09:37.038]      __var version = 0;
[22:09:37.038]        // -> [version <= 0x00000000]
[22:09:37.038]      __var partNum = 0;
[22:09:37.038]        // -> [partNum <= 0x00000000]
[22:09:37.038]      __var manuf = 0;
[22:09:37.038]        // -> [manuf <= 0x00000000]
[22:09:37.040]      __var isMSPM0G1X0X_G3X0X = 0;
[22:09:37.040]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:09:37.040]      __var isProduction = 0;
[22:09:37.040]        // -> [isProduction <= 0x00000000]
[22:09:37.040]      __var continueId = 0;
[22:09:37.040]        // -> [continueId <= 0x00000000]
[22:09:37.040]      deviceID =   Read32(0x41C40004);
[22:09:37.057]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:09:37.057]        // -> [deviceID <= 0x2BB8802F]
[22:09:37.057]      version = deviceID >> 28;
[22:09:37.057]        // -> [version <= 0x00000002]
[22:09:37.057]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:09:37.057]        // -> [partNum <= 0x0000BB88]
[22:09:37.057]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:09:37.057]        // -> [manuf <= 0x00000017]
[22:09:37.057]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:09:37.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:09:37.058]      isProduction = (version > 0);
[22:09:37.058]        // -> [isProduction <= 0x00000001]
[22:09:37.058]    </block>
[22:09:37.058]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:09:37.058]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:09:37.058]        // =>  FALSE
[22:09:37.058]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:09:37.058]    </control>
[22:09:37.058]    <control if="continueId == 4" while="" timeout="0" info="">
[22:09:37.058]      // if-block "continueId == 4"
[22:09:37.058]        // =>  FALSE
[22:09:37.058]      // skip if-block "continueId == 4"
[22:09:37.058]    </control>
[22:09:37.058]    <control if="!isProduction" while="" timeout="0" info="">
[22:09:37.058]      // if-block "!isProduction"
[22:09:37.058]        // =>  FALSE
[22:09:37.058]      // skip if-block "!isProduction"
[22:09:37.058]    </control>
[22:09:37.058]  </sequence>
[22:09:37.058]  
[22:11:48.592]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:11:48.592]  
[22:11:48.602]  <debugvars>
[22:11:48.602]    // Pre-defined
[22:11:48.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:48.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:48.602]    __dp=0x00000000
[22:11:48.602]    __ap=0x00000000
[22:11:48.602]    __traceout=0x00000000      (Trace Disabled)
[22:11:48.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:48.602]    __FlashAddr=0x00000000
[22:11:48.602]    __FlashLen=0x00000000
[22:11:48.602]    __FlashArg=0x00000000
[22:11:48.602]    __FlashOp=0x00000000
[22:11:48.602]    __Result=0x00000000
[22:11:48.602]  </debugvars>
[22:11:48.602]  
[22:11:48.602]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:11:48.602]    <block atomic="false" info="">
[22:11:48.602]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:11:48.602]        // -> [isSWJ <= 0x00000001]
[22:11:48.602]      __var hasDormant = __protocol & 0x00020000;
[22:11:48.602]        // -> [hasDormant <= 0x00000000]
[22:11:48.605]      __var protType   = __protocol & 0x0000FFFF;
[22:11:48.605]        // -> [protType <= 0x00000002]
[22:11:48.605]    </block>
[22:11:48.605]    <control if="protType == 1" while="" timeout="0" info="">
[22:11:48.605]      // if-block "protType == 1"
[22:11:48.605]        // =>  FALSE
[22:11:48.605]      // skip if-block "protType == 1"
[22:11:48.605]    </control>
[22:11:48.605]    <control if="protType == 2" while="" timeout="0" info="">
[22:11:48.605]      // if-block "protType == 2"
[22:11:48.605]        // =>  TRUE
[22:11:48.605]      <control if="isSWJ" while="" timeout="0" info="">
[22:11:48.605]        // if-block "isSWJ"
[22:11:48.605]          // =>  TRUE
[22:11:48.605]        <control if="hasDormant" while="" timeout="0" info="">
[22:11:48.605]          // if-block "hasDormant"
[22:11:48.605]            // =>  FALSE
[22:11:48.605]          // skip if-block "hasDormant"
[22:11:48.605]        </control>
[22:11:48.605]        <control if="!hasDormant" while="" timeout="0" info="">
[22:11:48.605]          // if-block "!hasDormant"
[22:11:48.605]            // =>  TRUE
[22:11:48.605]          <block atomic="false" info="">
[22:11:48.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:11:48.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:48.609]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:11:48.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:11:48.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:11:48.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:48.617]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:11:48.622]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:11:48.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:11:48.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:48.622]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:11:48.625]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:11:48.625]          </block>
[22:11:48.625]          // end if-block "!hasDormant"
[22:11:48.626]        </control>
[22:11:48.626]        // end if-block "isSWJ"
[22:11:48.626]      </control>
[22:11:48.626]      <control if="!isSWJ" while="" timeout="0" info="">
[22:11:48.626]        // if-block "!isSWJ"
[22:11:48.626]          // =>  FALSE
[22:11:48.626]        // skip if-block "!isSWJ"
[22:11:48.626]      </control>
[22:11:48.626]      <block atomic="false" info="">
[22:11:48.626]        ReadDP(0x0);
[22:11:48.631]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:11:48.631]      </block>
[22:11:48.631]      // end if-block "protType == 2"
[22:11:48.631]    </control>
[22:11:48.631]  </sequence>
[22:11:48.631]  
[22:11:48.635]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:11:48.635]  
[22:11:48.635]  <debugvars>
[22:11:48.635]    // Pre-defined
[22:11:48.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:48.635]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:48.635]    __dp=0x00000000
[22:11:48.635]    __ap=0x00000000
[22:11:48.635]    __traceout=0x00000000      (Trace Disabled)
[22:11:48.637]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:48.637]    __FlashAddr=0x00000000
[22:11:48.637]    __FlashLen=0x00000000
[22:11:48.637]    __FlashArg=0x00000000
[22:11:48.637]    __FlashOp=0x00000000
[22:11:48.637]    __Result=0x00000000
[22:11:48.637]  </debugvars>
[22:11:48.637]  
[22:11:48.637]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:11:48.637]    <block atomic="false" info="">
[22:11:48.637]      __var SW_DP_ABORT       = 0x0;
[22:11:48.637]        // -> [SW_DP_ABORT <= 0x00000000]
[22:11:48.637]      __var DP_CTRL_STAT      = 0x4;
[22:11:48.637]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:11:48.637]      __var DP_SELECT         = 0x8;
[22:11:48.637]        // -> [DP_SELECT <= 0x00000008]
[22:11:48.637]      __var powered_down      = 0;
[22:11:48.637]        // -> [powered_down <= 0x00000000]
[22:11:48.637]      WriteDP(DP_SELECT, 0x00000000);
[22:11:48.637]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:11:48.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:11:48.649]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:11:48.649]        // -> [powered_down <= 0x00000001]
[22:11:48.649]    </block>
[22:11:48.649]    <control if="powered_down" while="" timeout="0" info="">
[22:11:48.649]      // if-block "powered_down"
[22:11:48.649]        // =>  TRUE
[22:11:48.649]      <block atomic="false" info="">
[22:11:48.649]        Message(0, "Debug/System power-up request sent");
[22:11:48.651]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:11:48.653]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:11:48.653]      </block>
[22:11:48.653]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:11:48.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:11:48.657]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:11:48.657]        // while-condition  =>  FALSE
[22:11:48.657]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:11:48.657]      </control>
[22:11:48.657]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:11:48.657]        // if-block "(__protocol & 0xFFFF) == 1"
[22:11:48.657]          // =>  FALSE
[22:11:48.657]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:11:48.657]      </control>
[22:11:48.657]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:11:48.657]        // if-block "(__protocol & 0xFFFF) == 2"
[22:11:48.657]          // =>  TRUE
[22:11:48.657]        <block atomic="false" info="">
[22:11:48.657]          Message(0, "executing SWD power up");
[22:11:48.657]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:11:48.665]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:11:48.665]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:11:48.665]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:11:48.665]        </block>
[22:11:48.665]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:11:48.669]      </control>
[22:11:48.669]      // end if-block "powered_down"
[22:11:48.669]    </control>
[22:11:48.669]    <block atomic="false" info="">
[22:11:48.669]      __var DEBUG_PORT_VAL    = 0;
[22:11:48.669]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:11:48.669]      __var ACCESS_POINT_VAL  = 0;
[22:11:48.669]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:11:48.669]      __ap = 1; 
[22:11:48.669]        // -> [__ap <= 0x00000001]
[22:11:48.669]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:11:48.673]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:11:48.673]      __ap = 4;
[22:11:48.673]        // -> [__ap <= 0x00000004]
[22:11:48.673]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:11:48.677]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:11:48.677]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:11:48.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:11:48.679]    </block>
[22:11:48.679]    <block atomic="false" info="">
[22:11:48.679]      __var nReset = 0x80;
[22:11:48.679]        // -> [nReset <= 0x00000080]
[22:11:48.679]      __var canReadPins = 0;
[22:11:48.679]        // -> [canReadPins <= 0x00000000]
[22:11:48.679]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:11:48.681]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:11:48.681]        // -> [canReadPins <= 0x00000001]
[22:11:48.681]    </block>
[22:11:48.681]    <control if="" while="1" timeout="200" info="">
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.681]      // while "1"  (timeout="200")
[22:11:48.681]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.685]      // while-condition  =>  TRUE
[22:11:48.685]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.689]      // while-condition  =>  TRUE
[22:11:48.689]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.691]      // while-condition  =>  TRUE
[22:11:48.691]      // while "1"  (timeout="200")
[22:11:48.693]      // while-condition  =>  TRUE
[22:11:48.693]      // while "1"  (timeout="200")
[22:11:48.693]      // while  =>  TIMEOUT
[22:11:48.693]      // end while "1"
[22:11:48.693]    </control>
[22:11:48.693]    <control if="canReadPins" while="" timeout="0" info="">
[22:11:48.693]      // if-block "canReadPins"
[22:11:48.693]        // =>  TRUE
[22:11:48.693]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:11:48.693]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:11:48.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:11:48.693]        // while-condition  =>  FALSE
[22:11:48.693]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:11:48.693]      </control>
[22:11:48.693]      // end if-block "canReadPins"
[22:11:48.693]    </control>
[22:11:48.693]    <control if="!canReadPins" while="" timeout="0" info="">
[22:11:48.697]      // if-block "!canReadPins"
[22:11:48.697]        // =>  FALSE
[22:11:48.697]      // skip if-block "!canReadPins"
[22:11:48.697]    </control>
[22:11:48.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:11:48.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:11:48.697]        // =>  TRUE
[22:11:48.697]      <block atomic="false" info="">
[22:11:48.697]        WriteAP(0x00, 0x190008);
[22:11:48.697]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:11:48.697]        WriteAP(0xF0, 0x01);
[22:11:48.705]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:11:48.705]      </block>
[22:11:48.705]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:11:48.705]    </control>
[22:11:48.705]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:11:48.705]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:11:48.705]        // =>  FALSE
[22:11:48.705]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:11:48.705]    </control>
[22:11:48.705]    <block atomic="false" info="">
[22:11:48.705]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:11:48.711]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:11:48.711]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:11:48.713]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:11:48.715]      __ap = 0; //lets make sure we reset the access point selection
[22:11:48.715]        // -> [__ap <= 0x00000000]
[22:11:48.715]    </block>
[22:11:48.715]  </sequence>
[22:11:48.715]  
[22:11:48.746]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:11:48.746]  
[22:11:48.746]  <debugvars>
[22:11:48.746]    // Pre-defined
[22:11:48.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:48.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:48.746]    __dp=0x00000000
[22:11:48.746]    __ap=0x00000000
[22:11:48.746]    __traceout=0x00000000      (Trace Disabled)
[22:11:48.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:48.746]    __FlashAddr=0x00000000
[22:11:48.746]    __FlashLen=0x00000000
[22:11:48.746]    __FlashArg=0x00000000
[22:11:48.746]    __FlashOp=0x00000000
[22:11:48.746]    __Result=0x00000000
[22:11:48.746]  </debugvars>
[22:11:48.746]  
[22:11:48.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:11:48.746]    <block atomic="false" info="">
[22:11:48.746]      __var deviceID = 0;
[22:11:48.746]        // -> [deviceID <= 0x00000000]
[22:11:48.746]      __var version = 0;
[22:11:48.746]        // -> [version <= 0x00000000]
[22:11:48.746]      __var partNum = 0;
[22:11:48.746]        // -> [partNum <= 0x00000000]
[22:11:48.750]      __var manuf = 0;
[22:11:48.750]        // -> [manuf <= 0x00000000]
[22:11:48.750]      __var isMSPM0G1X0X_G3X0X = 0;
[22:11:48.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:11:48.750]      __var isProduction = 0;
[22:11:48.750]        // -> [isProduction <= 0x00000000]
[22:11:48.750]      __var continueId = 0;
[22:11:48.750]        // -> [continueId <= 0x00000000]
[22:11:48.750]      deviceID =   Read32(0x41C40004);
[22:11:48.754]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:11:48.754]        // -> [deviceID <= 0x2BB8802F]
[22:11:48.754]      version = deviceID >> 28;
[22:11:48.754]        // -> [version <= 0x00000002]
[22:11:48.754]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:11:48.754]        // -> [partNum <= 0x0000BB88]
[22:11:48.754]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:11:48.754]        // -> [manuf <= 0x00000017]
[22:11:48.754]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:11:48.754]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:11:48.754]      isProduction = (version > 0);
[22:11:48.754]        // -> [isProduction <= 0x00000001]
[22:11:48.754]    </block>
[22:11:48.754]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:11:48.754]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:11:48.754]        // =>  FALSE
[22:11:48.758]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:11:48.758]    </control>
[22:11:48.758]    <control if="continueId == 4" while="" timeout="0" info="">
[22:11:48.758]      // if-block "continueId == 4"
[22:11:48.758]        // =>  FALSE
[22:11:48.758]      // skip if-block "continueId == 4"
[22:11:48.758]    </control>
[22:11:48.758]    <control if="!isProduction" while="" timeout="0" info="">
[22:11:48.758]      // if-block "!isProduction"
[22:11:48.758]        // =>  FALSE
[22:11:48.758]      // skip if-block "!isProduction"
[22:11:48.758]    </control>
[22:11:48.758]  </sequence>
[22:11:48.758]  
[22:15:07.297]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:15:07.297]  
[22:15:07.305]  <debugvars>
[22:15:07.305]    // Pre-defined
[22:15:07.305]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:15:07.305]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:15:07.305]    __dp=0x00000000
[22:15:07.305]    __ap=0x00000000
[22:15:07.305]    __traceout=0x00000000      (Trace Disabled)
[22:15:07.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:15:07.305]    __FlashAddr=0x00000000
[22:15:07.305]    __FlashLen=0x00000000
[22:15:07.305]    __FlashArg=0x00000000
[22:15:07.306]    __FlashOp=0x00000000
[22:15:07.306]    __Result=0x00000000
[22:15:07.306]  </debugvars>
[22:15:07.306]  
[22:15:07.306]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:15:07.306]    <block atomic="false" info="">
[22:15:07.306]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:15:07.306]        // -> [isSWJ <= 0x00000001]
[22:15:07.306]      __var hasDormant = __protocol & 0x00020000;
[22:15:07.306]        // -> [hasDormant <= 0x00000000]
[22:15:07.307]      __var protType   = __protocol & 0x0000FFFF;
[22:15:07.307]        // -> [protType <= 0x00000002]
[22:15:07.307]    </block>
[22:15:07.307]    <control if="protType == 1" while="" timeout="0" info="">
[22:15:07.307]      // if-block "protType == 1"
[22:15:07.307]        // =>  FALSE
[22:15:07.307]      // skip if-block "protType == 1"
[22:15:07.307]    </control>
[22:15:07.307]    <control if="protType == 2" while="" timeout="0" info="">
[22:15:07.307]      // if-block "protType == 2"
[22:15:07.307]        // =>  TRUE
[22:15:07.308]      <control if="isSWJ" while="" timeout="0" info="">
[22:15:07.308]        // if-block "isSWJ"
[22:15:07.308]          // =>  TRUE
[22:15:07.308]        <control if="hasDormant" while="" timeout="0" info="">
[22:15:07.308]          // if-block "hasDormant"
[22:15:07.308]            // =>  FALSE
[22:15:07.308]          // skip if-block "hasDormant"
[22:15:07.308]        </control>
[22:15:07.308]        <control if="!hasDormant" while="" timeout="0" info="">
[22:15:07.308]          // if-block "!hasDormant"
[22:15:07.309]            // =>  TRUE
[22:15:07.309]          <block atomic="false" info="">
[22:15:07.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:15:07.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:15:07.310]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:15:07.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:15:07.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:15:07.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:15:07.313]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:15:07.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:15:07.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:15:07.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:15:07.320]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:15:07.320]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:15:07.320]          </block>
[22:15:07.320]          // end if-block "!hasDormant"
[22:15:07.320]        </control>
[22:15:07.320]        // end if-block "isSWJ"
[22:15:07.320]      </control>
[22:15:07.320]      <control if="!isSWJ" while="" timeout="0" info="">
[22:15:07.320]        // if-block "!isSWJ"
[22:15:07.320]          // =>  FALSE
[22:15:07.320]        // skip if-block "!isSWJ"
[22:15:07.320]      </control>
[22:15:07.320]      <block atomic="false" info="">
[22:15:07.320]        ReadDP(0x0);
[22:15:07.324]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:15:07.324]      </block>
[22:15:07.324]      // end if-block "protType == 2"
[22:15:07.325]    </control>
[22:15:07.325]  </sequence>
[22:15:07.325]  
[22:15:07.328]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:15:07.328]  
[22:15:07.328]  <debugvars>
[22:15:07.328]    // Pre-defined
[22:15:07.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:15:07.328]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:15:07.328]    __dp=0x00000000
[22:15:07.328]    __ap=0x00000000
[22:15:07.328]    __traceout=0x00000000      (Trace Disabled)
[22:15:07.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:15:07.328]    __FlashAddr=0x00000000
[22:15:07.328]    __FlashLen=0x00000000
[22:15:07.328]    __FlashArg=0x00000000
[22:15:07.328]    __FlashOp=0x00000000
[22:15:07.328]    __Result=0x00000000
[22:15:07.328]  </debugvars>
[22:15:07.328]  
[22:15:07.328]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:15:07.330]    <block atomic="false" info="">
[22:15:07.330]      __var SW_DP_ABORT       = 0x0;
[22:15:07.330]        // -> [SW_DP_ABORT <= 0x00000000]
[22:15:07.330]      __var DP_CTRL_STAT      = 0x4;
[22:15:07.330]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:15:07.330]      __var DP_SELECT         = 0x8;
[22:15:07.330]        // -> [DP_SELECT <= 0x00000008]
[22:15:07.330]      __var powered_down      = 0;
[22:15:07.330]        // -> [powered_down <= 0x00000000]
[22:15:07.330]      WriteDP(DP_SELECT, 0x00000000);
[22:15:07.332]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:15:07.332]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:15:07.336]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:15:07.336]        // -> [powered_down <= 0x00000001]
[22:15:07.336]    </block>
[22:15:07.336]    <control if="powered_down" while="" timeout="0" info="">
[22:15:07.336]      // if-block "powered_down"
[22:15:07.336]        // =>  TRUE
[22:15:07.336]      <block atomic="false" info="">
[22:15:07.336]        Message(0, "Debug/System power-up request sent");
[22:15:07.338]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:15:07.340]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:15:07.340]      </block>
[22:15:07.340]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:15:07.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:15:07.345]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:15:07.345]        // while-condition  =>  FALSE
[22:15:07.345]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:15:07.345]      </control>
[22:15:07.346]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:15:07.346]        // if-block "(__protocol & 0xFFFF) == 1"
[22:15:07.346]          // =>  FALSE
[22:15:07.346]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:15:07.346]      </control>
[22:15:07.346]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:15:07.346]        // if-block "(__protocol & 0xFFFF) == 2"
[22:15:07.346]          // =>  TRUE
[22:15:07.346]        <block atomic="false" info="">
[22:15:07.346]          Message(0, "executing SWD power up");
[22:15:07.348]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:15:07.350]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:15:07.350]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:15:07.350]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:15:07.350]        </block>
[22:15:07.350]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:15:07.350]      </control>
[22:15:07.350]      // end if-block "powered_down"
[22:15:07.350]    </control>
[22:15:07.350]    <block atomic="false" info="">
[22:15:07.354]      __var DEBUG_PORT_VAL    = 0;
[22:15:07.354]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:15:07.354]      __var ACCESS_POINT_VAL  = 0;
[22:15:07.354]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:15:07.354]      __ap = 1; 
[22:15:07.354]        // -> [__ap <= 0x00000001]
[22:15:07.354]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:15:07.362]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:15:07.362]      __ap = 4;
[22:15:07.362]        // -> [__ap <= 0x00000004]
[22:15:07.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:15:07.366]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:15:07.366]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:15:07.366]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:15:07.370]    </block>
[22:15:07.370]    <block atomic="false" info="">
[22:15:07.370]      __var nReset = 0x80;
[22:15:07.370]        // -> [nReset <= 0x00000080]
[22:15:07.371]      __var canReadPins = 0;
[22:15:07.371]        // -> [canReadPins <= 0x00000000]
[22:15:07.371]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:15:07.371]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:15:07.371]        // -> [canReadPins <= 0x00000001]
[22:15:07.371]    </block>
[22:15:07.371]    <control if="" while="1" timeout="200" info="">
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.371]      // while-condition  =>  TRUE
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.371]      // while-condition  =>  TRUE
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.371]      // while-condition  =>  TRUE
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.371]      // while-condition  =>  TRUE
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.371]      // while-condition  =>  TRUE
[22:15:07.371]      // while "1"  (timeout="200")
[22:15:07.374]      // while-condition  =>  TRUE
[22:15:07.374]      // while "1"  (timeout="200")
[22:15:07.374]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.375]      // while "1"  (timeout="200")
[22:15:07.375]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.377]      // while "1"  (timeout="200")
[22:15:07.377]      // while-condition  =>  TRUE
[22:15:07.378]      // while "1"  (timeout="200")
[22:15:07.378]      // while-condition  =>  TRUE
[22:15:07.378]      // while "1"  (timeout="200")
[22:15:07.378]      // while-condition  =>  TRUE
[22:15:07.379]      // while "1"  (timeout="200")
[22:15:07.379]      // while  =>  TIMEOUT
[22:15:07.379]      // end while "1"
[22:15:07.379]    </control>
[22:15:07.379]    <control if="canReadPins" while="" timeout="0" info="">
[22:15:07.379]      // if-block "canReadPins"
[22:15:07.379]        // =>  TRUE
[22:15:07.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:15:07.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:15:07.386]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:15:07.386]        // while-condition  =>  FALSE
[22:15:07.386]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:15:07.386]      </control>
[22:15:07.386]      // end if-block "canReadPins"
[22:15:07.386]    </control>
[22:15:07.388]    <control if="!canReadPins" while="" timeout="0" info="">
[22:15:07.388]      // if-block "!canReadPins"
[22:15:07.388]        // =>  FALSE
[22:15:07.388]      // skip if-block "!canReadPins"
[22:15:07.388]    </control>
[22:15:07.388]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:15:07.388]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:15:07.388]        // =>  TRUE
[22:15:07.388]      <block atomic="false" info="">
[22:15:07.388]        WriteAP(0x00, 0x190008);
[22:15:07.392]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:15:07.392]        WriteAP(0xF0, 0x01);
[22:15:07.398]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:15:07.398]      </block>
[22:15:07.398]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:15:07.398]    </control>
[22:15:07.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:15:07.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:15:07.398]        // =>  FALSE
[22:15:07.399]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:15:07.399]    </control>
[22:15:07.399]    <block atomic="false" info="">
[22:15:07.399]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:15:07.402]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:15:07.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:15:07.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:15:07.404]      __ap = 0; //lets make sure we reset the access point selection
[22:15:07.404]        // -> [__ap <= 0x00000000]
[22:15:07.404]    </block>
[22:15:07.404]  </sequence>
[22:15:07.404]  
[22:15:07.440]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:15:07.440]  
[22:15:07.440]  <debugvars>
[22:15:07.440]    // Pre-defined
[22:15:07.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:15:07.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:15:07.444]    __dp=0x00000000
[22:15:07.444]    __ap=0x00000000
[22:15:07.444]    __traceout=0x00000000      (Trace Disabled)
[22:15:07.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:15:07.444]    __FlashAddr=0x00000000
[22:15:07.445]    __FlashLen=0x00000000
[22:15:07.445]    __FlashArg=0x00000000
[22:15:07.445]    __FlashOp=0x00000000
[22:15:07.445]    __Result=0x00000000
[22:15:07.445]  </debugvars>
[22:15:07.445]  
[22:15:07.445]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:15:07.445]    <block atomic="false" info="">
[22:15:07.445]      __var deviceID = 0;
[22:15:07.445]        // -> [deviceID <= 0x00000000]
[22:15:07.445]      __var version = 0;
[22:15:07.445]        // -> [version <= 0x00000000]
[22:15:07.445]      __var partNum = 0;
[22:15:07.445]        // -> [partNum <= 0x00000000]
[22:15:07.445]      __var manuf = 0;
[22:15:07.445]        // -> [manuf <= 0x00000000]
[22:15:07.445]      __var isMSPM0G1X0X_G3X0X = 0;
[22:15:07.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:15:07.445]      __var isProduction = 0;
[22:15:07.445]        // -> [isProduction <= 0x00000000]
[22:15:07.445]      __var continueId = 0;
[22:15:07.445]        // -> [continueId <= 0x00000000]
[22:15:07.445]      deviceID =   Read32(0x41C40004);
[22:15:07.452]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:15:07.452]        // -> [deviceID <= 0x2BB8802F]
[22:15:07.452]      version = deviceID >> 28;
[22:15:07.452]        // -> [version <= 0x00000002]
[22:15:07.452]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:15:07.452]        // -> [partNum <= 0x0000BB88]
[22:15:07.452]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:15:07.452]        // -> [manuf <= 0x00000017]
[22:15:07.452]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:15:07.452]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:15:07.452]      isProduction = (version > 0);
[22:15:07.452]        // -> [isProduction <= 0x00000001]
[22:15:07.452]    </block>
[22:15:07.452]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:15:07.452]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:15:07.455]        // =>  FALSE
[22:15:07.455]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:15:07.455]    </control>
[22:15:07.455]    <control if="continueId == 4" while="" timeout="0" info="">
[22:15:07.455]      // if-block "continueId == 4"
[22:15:07.455]        // =>  FALSE
[22:15:07.455]      // skip if-block "continueId == 4"
[22:15:07.455]    </control>
[22:15:07.455]    <control if="!isProduction" while="" timeout="0" info="">
[22:15:07.455]      // if-block "!isProduction"
[22:15:07.455]        // =>  FALSE
[22:15:07.455]      // skip if-block "!isProduction"
[22:15:07.455]    </control>
[22:15:07.455]  </sequence>
[22:15:07.455]  
[22:22:49.018]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:22:49.018]  
[22:22:49.018]  <debugvars>
[22:22:49.018]    // Pre-defined
[22:22:49.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:49.018]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:22:49.018]    __dp=0x00000000
[22:22:49.018]    __ap=0x00000000
[22:22:49.018]    __traceout=0x00000000      (Trace Disabled)
[22:22:49.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:49.018]    __FlashAddr=0x00000000
[22:22:49.018]    __FlashLen=0x00000000
[22:22:49.018]    __FlashArg=0x00000000
[22:22:49.018]    __FlashOp=0x00000000
[22:22:49.022]    __Result=0x00000000
[22:22:49.022]  </debugvars>
[22:22:49.022]  
[22:22:49.022]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:22:49.022]    <block atomic="false" info="">
[22:22:49.022]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:22:49.022]        // -> [isSWJ <= 0x00000001]
[22:22:49.022]      __var hasDormant = __protocol & 0x00020000;
[22:22:49.022]        // -> [hasDormant <= 0x00000000]
[22:22:49.022]      __var protType   = __protocol & 0x0000FFFF;
[22:22:49.022]        // -> [protType <= 0x00000002]
[22:22:49.022]    </block>
[22:22:49.024]    <control if="protType == 1" while="" timeout="0" info="">
[22:22:49.024]      // if-block "protType == 1"
[22:22:49.024]        // =>  FALSE
[22:22:49.024]      // skip if-block "protType == 1"
[22:22:49.024]    </control>
[22:22:49.024]    <control if="protType == 2" while="" timeout="0" info="">
[22:22:49.024]      // if-block "protType == 2"
[22:22:49.024]        // =>  TRUE
[22:22:49.024]      <control if="isSWJ" while="" timeout="0" info="">
[22:22:49.024]        // if-block "isSWJ"
[22:22:49.024]          // =>  TRUE
[22:22:49.025]        <control if="hasDormant" while="" timeout="0" info="">
[22:22:49.025]          // if-block "hasDormant"
[22:22:49.025]            // =>  FALSE
[22:22:49.025]          // skip if-block "hasDormant"
[22:22:49.025]        </control>
[22:22:49.025]        <control if="!hasDormant" while="" timeout="0" info="">
[22:22:49.025]          // if-block "!hasDormant"
[22:22:49.025]            // =>  TRUE
[22:22:49.025]          <block atomic="false" info="">
[22:22:49.025]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:22:49.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:49.027]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:22:49.029]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:22:49.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:22:49.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:49.035]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:22:49.036]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:22:49.036]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:22:49.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:49.044]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:22:49.048]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:22:49.048]          </block>
[22:22:49.048]          // end if-block "!hasDormant"
[22:22:49.048]        </control>
[22:22:49.048]        // end if-block "isSWJ"
[22:22:49.048]      </control>
[22:22:49.048]      <control if="!isSWJ" while="" timeout="0" info="">
[22:22:49.048]        // if-block "!isSWJ"
[22:22:49.048]          // =>  FALSE
[22:22:49.048]        // skip if-block "!isSWJ"
[22:22:49.049]      </control>
[22:22:49.049]      <block atomic="false" info="">
[22:22:49.049]        ReadDP(0x0);
[22:22:49.050]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:22:49.050]      </block>
[22:22:49.050]      // end if-block "protType == 2"
[22:22:49.050]    </control>
[22:22:49.050]  </sequence>
[22:22:49.050]  
[22:22:49.054]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:22:49.054]  
[22:22:49.054]  <debugvars>
[22:22:49.054]    // Pre-defined
[22:22:49.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:49.054]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:22:49.054]    __dp=0x00000000
[22:22:49.054]    __ap=0x00000000
[22:22:49.054]    __traceout=0x00000000      (Trace Disabled)
[22:22:49.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:49.054]    __FlashAddr=0x00000000
[22:22:49.054]    __FlashLen=0x00000000
[22:22:49.054]    __FlashArg=0x00000000
[22:22:49.054]    __FlashOp=0x00000000
[22:22:49.054]    __Result=0x00000000
[22:22:49.056]  </debugvars>
[22:22:49.056]  
[22:22:49.056]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:22:49.056]    <block atomic="false" info="">
[22:22:49.056]      __var SW_DP_ABORT       = 0x0;
[22:22:49.056]        // -> [SW_DP_ABORT <= 0x00000000]
[22:22:49.056]      __var DP_CTRL_STAT      = 0x4;
[22:22:49.056]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:22:49.056]      __var DP_SELECT         = 0x8;
[22:22:49.056]        // -> [DP_SELECT <= 0x00000008]
[22:22:49.056]      __var powered_down      = 0;
[22:22:49.056]        // -> [powered_down <= 0x00000000]
[22:22:49.056]      WriteDP(DP_SELECT, 0x00000000);
[22:22:49.057]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:22:49.057]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:22:49.062]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:22:49.062]        // -> [powered_down <= 0x00000001]
[22:22:49.062]    </block>
[22:22:49.062]    <control if="powered_down" while="" timeout="0" info="">
[22:22:49.062]      // if-block "powered_down"
[22:22:49.062]        // =>  TRUE
[22:22:49.062]      <block atomic="false" info="">
[22:22:49.062]        Message(0, "Debug/System power-up request sent");
[22:22:49.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:22:49.066]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:22:49.066]      </block>
[22:22:49.066]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:22:49.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:22:49.069]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:22:49.069]        // while-condition  =>  FALSE
[22:22:49.069]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:22:49.069]      </control>
[22:22:49.069]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:22:49.069]        // if-block "(__protocol & 0xFFFF) == 1"
[22:22:49.069]          // =>  FALSE
[22:22:49.069]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:22:49.069]      </control>
[22:22:49.069]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:22:49.069]        // if-block "(__protocol & 0xFFFF) == 2"
[22:22:49.069]          // =>  TRUE
[22:22:49.069]        <block atomic="false" info="">
[22:22:49.069]          Message(0, "executing SWD power up");
[22:22:49.072]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:22:49.074]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:22:49.074]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:22:49.076]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:22:49.076]        </block>
[22:22:49.076]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:22:49.076]      </control>
[22:22:49.076]      // end if-block "powered_down"
[22:22:49.076]    </control>
[22:22:49.076]    <block atomic="false" info="">
[22:22:49.077]      __var DEBUG_PORT_VAL    = 0;
[22:22:49.077]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:22:49.077]      __var ACCESS_POINT_VAL  = 0;
[22:22:49.077]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:22:49.077]      __ap = 1; 
[22:22:49.077]        // -> [__ap <= 0x00000001]
[22:22:49.077]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:22:49.081]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:22:49.081]      __ap = 4;
[22:22:49.081]        // -> [__ap <= 0x00000004]
[22:22:49.081]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:49.085]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:22:49.085]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:22:49.085]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:49.086]    </block>
[22:22:49.086]    <block atomic="false" info="">
[22:22:49.086]      __var nReset = 0x80;
[22:22:49.086]        // -> [nReset <= 0x00000080]
[22:22:49.086]      __var canReadPins = 0;
[22:22:49.086]        // -> [canReadPins <= 0x00000000]
[22:22:49.086]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:22:49.090]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:22:49.090]        // -> [canReadPins <= 0x00000001]
[22:22:49.090]    </block>
[22:22:49.090]    <control if="" while="1" timeout="200" info="">
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.091]      // while-condition  =>  TRUE
[22:22:49.091]      // while "1"  (timeout="200")
[22:22:49.092]      // while-condition  =>  TRUE
[22:22:49.092]      // while "1"  (timeout="200")
[22:22:49.092]      // while-condition  =>  TRUE
[22:22:49.092]      // while "1"  (timeout="200")
[22:22:49.092]      // while-condition  =>  TRUE
[22:22:49.092]      // while "1"  (timeout="200")
[22:22:49.093]      // while-condition  =>  TRUE
[22:22:49.093]      // while "1"  (timeout="200")
[22:22:49.093]      // while-condition  =>  TRUE
[22:22:49.093]      // while "1"  (timeout="200")
[22:22:49.093]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.094]      // while-condition  =>  TRUE
[22:22:49.094]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.096]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.096]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.096]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.096]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.096]      // while "1"  (timeout="200")
[22:22:49.096]      // while-condition  =>  TRUE
[22:22:49.097]      // while "1"  (timeout="200")
[22:22:49.097]      // while-condition  =>  TRUE
[22:22:49.097]      // while "1"  (timeout="200")
[22:22:49.097]      // while-condition  =>  TRUE
[22:22:49.097]      // while "1"  (timeout="200")
[22:22:49.097]      // while-condition  =>  TRUE
[22:22:49.097]      // while "1"  (timeout="200")
[22:22:49.097]      // while-condition  =>  TRUE
[22:22:49.097]      // while "1"  (timeout="200")
[22:22:49.098]      // while-condition  =>  TRUE
[22:22:49.098]      // while "1"  (timeout="200")
[22:22:49.098]      // while  =>  TIMEOUT
[22:22:49.098]      // end while "1"
[22:22:49.098]    </control>
[22:22:49.098]    <control if="canReadPins" while="" timeout="0" info="">
[22:22:49.098]      // if-block "canReadPins"
[22:22:49.098]        // =>  TRUE
[22:22:49.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:22:49.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:22:49.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:22:49.099]        // while-condition  =>  FALSE
[22:22:49.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:22:49.100]      </control>
[22:22:49.100]      // end if-block "canReadPins"
[22:22:49.100]    </control>
[22:22:49.100]    <control if="!canReadPins" while="" timeout="0" info="">
[22:22:49.100]      // if-block "!canReadPins"
[22:22:49.100]        // =>  FALSE
[22:22:49.101]      // skip if-block "!canReadPins"
[22:22:49.101]    </control>
[22:22:49.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:22:49.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:49.101]        // =>  TRUE
[22:22:49.101]      <block atomic="false" info="">
[22:22:49.101]        WriteAP(0x00, 0x190008);
[22:22:49.106]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:49.106]        WriteAP(0xF0, 0x01);
[22:22:49.110]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:49.110]      </block>
[22:22:49.110]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:49.110]    </control>
[22:22:49.110]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:22:49.110]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:49.110]        // =>  FALSE
[22:22:49.110]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:49.110]    </control>
[22:22:49.110]    <block atomic="false" info="">
[22:22:49.110]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:49.116]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:22:49.116]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:22:49.116]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:49.119]      __ap = 0; //lets make sure we reset the access point selection
[22:22:49.119]        // -> [__ap <= 0x00000000]
[22:22:49.119]    </block>
[22:22:49.119]  </sequence>
[22:22:49.119]  
[22:22:49.156]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:22:49.158]  
[22:22:49.158]  <debugvars>
[22:22:49.158]    // Pre-defined
[22:22:49.158]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:49.158]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:22:49.158]    __dp=0x00000000
[22:22:49.158]    __ap=0x00000000
[22:22:49.158]    __traceout=0x00000000      (Trace Disabled)
[22:22:49.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:49.158]    __FlashAddr=0x00000000
[22:22:49.158]    __FlashLen=0x00000000
[22:22:49.160]    __FlashArg=0x00000000
[22:22:49.160]    __FlashOp=0x00000000
[22:22:49.160]    __Result=0x00000000
[22:22:49.160]  </debugvars>
[22:22:49.160]  
[22:22:49.160]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:22:49.160]    <block atomic="false" info="">
[22:22:49.160]      __var deviceID = 0;
[22:22:49.160]        // -> [deviceID <= 0x00000000]
[22:22:49.160]      __var version = 0;
[22:22:49.160]        // -> [version <= 0x00000000]
[22:22:49.160]      __var partNum = 0;
[22:22:49.160]        // -> [partNum <= 0x00000000]
[22:22:49.161]      __var manuf = 0;
[22:22:49.161]        // -> [manuf <= 0x00000000]
[22:22:49.161]      __var isMSPM0G1X0X_G3X0X = 0;
[22:22:49.161]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:22:49.161]      __var isProduction = 0;
[22:22:49.161]        // -> [isProduction <= 0x00000000]
[22:22:49.161]      __var continueId = 0;
[22:22:49.161]        // -> [continueId <= 0x00000000]
[22:22:49.162]      deviceID =   Read32(0x41C40004);
[22:22:49.167]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:22:49.167]        // -> [deviceID <= 0x2BB8802F]
[22:22:49.167]      version = deviceID >> 28;
[22:22:49.167]        // -> [version <= 0x00000002]
[22:22:49.167]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:22:49.167]        // -> [partNum <= 0x0000BB88]
[22:22:49.167]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:22:49.167]        // -> [manuf <= 0x00000017]
[22:22:49.167]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:22:49.167]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:22:49.167]      isProduction = (version > 0);
[22:22:49.167]        // -> [isProduction <= 0x00000001]
[22:22:49.167]    </block>
[22:22:49.168]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:22:49.168]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:22:49.168]        // =>  FALSE
[22:22:49.168]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:22:49.168]    </control>
[22:22:49.168]    <control if="continueId == 4" while="" timeout="0" info="">
[22:22:49.168]      // if-block "continueId == 4"
[22:22:49.168]        // =>  FALSE
[22:22:49.170]      // skip if-block "continueId == 4"
[22:22:49.170]    </control>
[22:22:49.170]    <control if="!isProduction" while="" timeout="0" info="">
[22:22:49.170]      // if-block "!isProduction"
[22:22:49.170]        // =>  FALSE
[22:22:49.170]      // skip if-block "!isProduction"
[22:22:49.170]    </control>
[22:22:49.170]  </sequence>
[22:22:49.170]  
[22:27:10.867]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:27:10.867]  
[22:27:10.876]  <debugvars>
[22:27:10.876]    // Pre-defined
[22:27:10.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:10.876]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:27:10.876]    __dp=0x00000000
[22:27:10.876]    __ap=0x00000000
[22:27:10.876]    __traceout=0x00000000      (Trace Disabled)
[22:27:10.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:10.876]    __FlashAddr=0x00000000
[22:27:10.876]    __FlashLen=0x00000000
[22:27:10.876]    __FlashArg=0x00000000
[22:27:10.876]    __FlashOp=0x00000000
[22:27:10.876]    __Result=0x00000000
[22:27:10.876]  </debugvars>
[22:27:10.876]  
[22:27:10.876]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:27:10.876]    <block atomic="false" info="">
[22:27:10.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:27:10.879]        // -> [isSWJ <= 0x00000001]
[22:27:10.879]      __var hasDormant = __protocol & 0x00020000;
[22:27:10.879]        // -> [hasDormant <= 0x00000000]
[22:27:10.879]      __var protType   = __protocol & 0x0000FFFF;
[22:27:10.879]        // -> [protType <= 0x00000002]
[22:27:10.879]    </block>
[22:27:10.880]    <control if="protType == 1" while="" timeout="0" info="">
[22:27:10.880]      // if-block "protType == 1"
[22:27:10.880]        // =>  FALSE
[22:27:10.880]      // skip if-block "protType == 1"
[22:27:10.880]    </control>
[22:27:10.880]    <control if="protType == 2" while="" timeout="0" info="">
[22:27:10.880]      // if-block "protType == 2"
[22:27:10.880]        // =>  TRUE
[22:27:10.880]      <control if="isSWJ" while="" timeout="0" info="">
[22:27:10.880]        // if-block "isSWJ"
[22:27:10.880]          // =>  TRUE
[22:27:10.880]        <control if="hasDormant" while="" timeout="0" info="">
[22:27:10.880]          // if-block "hasDormant"
[22:27:10.880]            // =>  FALSE
[22:27:10.880]          // skip if-block "hasDormant"
[22:27:10.880]        </control>
[22:27:10.880]        <control if="!hasDormant" while="" timeout="0" info="">
[22:27:10.880]          // if-block "!hasDormant"
[22:27:10.880]            // =>  TRUE
[22:27:10.880]          <block atomic="false" info="">
[22:27:10.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:27:10.884]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:10.884]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:27:10.884]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:27:10.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:27:10.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:10.887]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:27:10.891]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:27:10.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:27:10.891]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:10.891]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:27:10.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:27:10.896]          </block>
[22:27:10.896]          // end if-block "!hasDormant"
[22:27:10.896]        </control>
[22:27:10.896]        // end if-block "isSWJ"
[22:27:10.896]      </control>
[22:27:10.896]      <control if="!isSWJ" while="" timeout="0" info="">
[22:27:10.896]        // if-block "!isSWJ"
[22:27:10.896]          // =>  FALSE
[22:27:10.898]        // skip if-block "!isSWJ"
[22:27:10.898]      </control>
[22:27:10.898]      <block atomic="false" info="">
[22:27:10.898]        ReadDP(0x0);
[22:27:10.899]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:27:10.899]      </block>
[22:27:10.899]      // end if-block "protType == 2"
[22:27:10.899]    </control>
[22:27:10.899]  </sequence>
[22:27:10.899]  
[22:27:10.903]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:27:10.903]  
[22:27:10.903]  <debugvars>
[22:27:10.903]    // Pre-defined
[22:27:10.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:10.903]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:27:10.903]    __dp=0x00000000
[22:27:10.903]    __ap=0x00000000
[22:27:10.903]    __traceout=0x00000000      (Trace Disabled)
[22:27:10.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:10.903]    __FlashAddr=0x00000000
[22:27:10.905]    __FlashLen=0x00000000
[22:27:10.905]    __FlashArg=0x00000000
[22:27:10.905]    __FlashOp=0x00000000
[22:27:10.905]    __Result=0x00000000
[22:27:10.905]  </debugvars>
[22:27:10.905]  
[22:27:10.905]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:27:10.905]    <block atomic="false" info="">
[22:27:10.905]      __var SW_DP_ABORT       = 0x0;
[22:27:10.905]        // -> [SW_DP_ABORT <= 0x00000000]
[22:27:10.906]      __var DP_CTRL_STAT      = 0x4;
[22:27:10.906]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:27:10.906]      __var DP_SELECT         = 0x8;
[22:27:10.906]        // -> [DP_SELECT <= 0x00000008]
[22:27:10.906]      __var powered_down      = 0;
[22:27:10.906]        // -> [powered_down <= 0x00000000]
[22:27:10.906]      WriteDP(DP_SELECT, 0x00000000);
[22:27:10.908]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:27:10.908]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:27:10.909]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:27:10.910]        // -> [powered_down <= 0x00000001]
[22:27:10.910]    </block>
[22:27:10.910]    <control if="powered_down" while="" timeout="0" info="">
[22:27:10.910]      // if-block "powered_down"
[22:27:10.910]        // =>  TRUE
[22:27:10.910]      <block atomic="false" info="">
[22:27:10.910]        Message(0, "Debug/System power-up request sent");
[22:27:10.911]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:27:10.911]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:27:10.911]      </block>
[22:27:10.911]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:27:10.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:27:10.917]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:27:10.917]        // while-condition  =>  FALSE
[22:27:10.917]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:27:10.917]      </control>
[22:27:10.917]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:27:10.917]        // if-block "(__protocol & 0xFFFF) == 1"
[22:27:10.918]          // =>  FALSE
[22:27:10.918]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:27:10.918]      </control>
[22:27:10.918]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:27:10.918]        // if-block "(__protocol & 0xFFFF) == 2"
[22:27:10.918]          // =>  TRUE
[22:27:10.918]        <block atomic="false" info="">
[22:27:10.918]          Message(0, "executing SWD power up");
[22:27:10.920]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:27:10.936]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:27:10.936]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:27:10.937]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:27:10.937]        </block>
[22:27:10.937]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:27:10.937]      </control>
[22:27:10.937]      // end if-block "powered_down"
[22:27:10.937]    </control>
[22:27:10.937]    <block atomic="false" info="">
[22:27:10.937]      __var DEBUG_PORT_VAL    = 0;
[22:27:10.937]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:27:10.937]      __var ACCESS_POINT_VAL  = 0;
[22:27:10.939]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:27:10.939]      __ap = 1; 
[22:27:10.939]        // -> [__ap <= 0x00000001]
[22:27:10.939]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:27:10.943]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:27:10.943]      __ap = 4;
[22:27:10.943]        // -> [__ap <= 0x00000004]
[22:27:10.943]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:27:10.947]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:27:10.947]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:27:10.947]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:27:10.947]    </block>
[22:27:10.947]    <block atomic="false" info="">
[22:27:10.947]      __var nReset = 0x80;
[22:27:10.947]        // -> [nReset <= 0x00000080]
[22:27:10.947]      __var canReadPins = 0;
[22:27:10.947]        // -> [canReadPins <= 0x00000000]
[22:27:10.947]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:27:10.951]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:27:10.951]        // -> [canReadPins <= 0x00000001]
[22:27:10.951]    </block>
[22:27:10.951]    <control if="" while="1" timeout="200" info="">
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.951]      // while-condition  =>  TRUE
[22:27:10.951]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.956]      // while-condition  =>  TRUE
[22:27:10.956]      // while "1"  (timeout="200")
[22:27:10.957]      // while-condition  =>  TRUE
[22:27:10.957]      // while "1"  (timeout="200")
[22:27:10.957]      // while  =>  TIMEOUT
[22:27:10.957]      // end while "1"
[22:27:10.957]    </control>
[22:27:10.957]    <control if="canReadPins" while="" timeout="0" info="">
[22:27:10.957]      // if-block "canReadPins"
[22:27:10.957]        // =>  TRUE
[22:27:10.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:27:10.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:27:10.960]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:27:10.960]        // while-condition  =>  FALSE
[22:27:10.960]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:27:10.960]      </control>
[22:27:10.960]      // end if-block "canReadPins"
[22:27:10.960]    </control>
[22:27:10.960]    <control if="!canReadPins" while="" timeout="0" info="">
[22:27:10.960]      // if-block "!canReadPins"
[22:27:10.960]        // =>  FALSE
[22:27:10.960]      // skip if-block "!canReadPins"
[22:27:10.960]    </control>
[22:27:10.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:27:10.960]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:27:10.960]        // =>  TRUE
[22:27:10.960]      <block atomic="false" info="">
[22:27:10.960]        WriteAP(0x00, 0x190008);
[22:27:10.962]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:27:10.962]        WriteAP(0xF0, 0x01);
[22:27:10.964]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:27:10.964]      </block>
[22:27:10.964]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:27:10.964]    </control>
[22:27:10.964]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:27:10.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:27:10.964]        // =>  FALSE
[22:27:10.964]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:27:10.964]    </control>
[22:27:10.968]    <block atomic="false" info="">
[22:27:10.968]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:27:10.969]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:27:10.969]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:27:10.969]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:27:10.972]      __ap = 0; //lets make sure we reset the access point selection
[22:27:10.973]        // -> [__ap <= 0x00000000]
[22:27:10.973]    </block>
[22:27:10.973]  </sequence>
[22:27:10.973]  
[22:27:10.990]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:27:10.990]  
[22:27:10.992]  <debugvars>
[22:27:10.992]    // Pre-defined
[22:27:10.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:10.992]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:27:10.992]    __dp=0x00000000
[22:27:10.992]    __ap=0x00000000
[22:27:10.992]    __traceout=0x00000000      (Trace Disabled)
[22:27:10.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:10.992]    __FlashAddr=0x00000000
[22:27:10.992]    __FlashLen=0x00000000
[22:27:10.992]    __FlashArg=0x00000000
[22:27:10.992]    __FlashOp=0x00000000
[22:27:10.992]    __Result=0x00000000
[22:27:10.992]  </debugvars>
[22:27:10.992]  
[22:27:10.992]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:27:10.992]    <block atomic="false" info="">
[22:27:10.992]      __var deviceID = 0;
[22:27:10.992]        // -> [deviceID <= 0x00000000]
[22:27:10.992]      __var version = 0;
[22:27:10.992]        // -> [version <= 0x00000000]
[22:27:10.992]      __var partNum = 0;
[22:27:10.992]        // -> [partNum <= 0x00000000]
[22:27:10.992]      __var manuf = 0;
[22:27:10.992]        // -> [manuf <= 0x00000000]
[22:27:10.992]      __var isMSPM0G1X0X_G3X0X = 0;
[22:27:10.992]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:27:10.992]      __var isProduction = 0;
[22:27:10.992]        // -> [isProduction <= 0x00000000]
[22:27:10.992]      __var continueId = 0;
[22:27:10.992]        // -> [continueId <= 0x00000000]
[22:27:10.992]      deviceID =   Read32(0x41C40004);
[22:27:11.000]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:27:11.000]        // -> [deviceID <= 0x2BB8802F]
[22:27:11.000]      version = deviceID >> 28;
[22:27:11.000]        // -> [version <= 0x00000002]
[22:27:11.000]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:27:11.000]        // -> [partNum <= 0x0000BB88]
[22:27:11.000]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:27:11.000]        // -> [manuf <= 0x00000017]
[22:27:11.000]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:27:11.004]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:27:11.004]      isProduction = (version > 0);
[22:27:11.004]        // -> [isProduction <= 0x00000001]
[22:27:11.004]    </block>
[22:27:11.004]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:27:11.004]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:27:11.004]        // =>  FALSE
[22:27:11.005]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:27:11.005]    </control>
[22:27:11.005]    <control if="continueId == 4" while="" timeout="0" info="">
[22:27:11.005]      // if-block "continueId == 4"
[22:27:11.005]        // =>  FALSE
[22:27:11.005]      // skip if-block "continueId == 4"
[22:27:11.005]    </control>
[22:27:11.005]    <control if="!isProduction" while="" timeout="0" info="">
[22:27:11.005]      // if-block "!isProduction"
[22:27:11.005]        // =>  FALSE
[22:27:11.005]      // skip if-block "!isProduction"
[22:27:11.005]    </control>
[22:27:11.005]  </sequence>
[22:27:11.005]  
[22:30:05.899]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:30:05.899]  
[22:30:05.899]  <debugvars>
[22:30:05.899]    // Pre-defined
[22:30:05.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:05.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:05.899]    __dp=0x00000000
[22:30:05.899]    __ap=0x00000000
[22:30:05.899]    __traceout=0x00000000      (Trace Disabled)
[22:30:05.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:05.899]    __FlashAddr=0x00000000
[22:30:05.899]    __FlashLen=0x00000000
[22:30:05.899]    __FlashArg=0x00000000
[22:30:05.899]    __FlashOp=0x00000000
[22:30:05.899]    __Result=0x00000000
[22:30:05.899]  </debugvars>
[22:30:05.899]  
[22:30:05.899]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:30:05.899]    <block atomic="false" info="">
[22:30:05.899]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:30:05.899]        // -> [isSWJ <= 0x00000001]
[22:30:05.899]      __var hasDormant = __protocol & 0x00020000;
[22:30:05.899]        // -> [hasDormant <= 0x00000000]
[22:30:05.899]      __var protType   = __protocol & 0x0000FFFF;
[22:30:05.899]        // -> [protType <= 0x00000002]
[22:30:05.903]    </block>
[22:30:05.903]    <control if="protType == 1" while="" timeout="0" info="">
[22:30:05.903]      // if-block "protType == 1"
[22:30:05.904]        // =>  FALSE
[22:30:05.904]      // skip if-block "protType == 1"
[22:30:05.904]    </control>
[22:30:05.904]    <control if="protType == 2" while="" timeout="0" info="">
[22:30:05.904]      // if-block "protType == 2"
[22:30:05.904]        // =>  TRUE
[22:30:05.904]      <control if="isSWJ" while="" timeout="0" info="">
[22:30:05.904]        // if-block "isSWJ"
[22:30:05.904]          // =>  TRUE
[22:30:05.905]        <control if="hasDormant" while="" timeout="0" info="">
[22:30:05.905]          // if-block "hasDormant"
[22:30:05.905]            // =>  FALSE
[22:30:05.905]          // skip if-block "hasDormant"
[22:30:05.905]        </control>
[22:30:05.905]        <control if="!hasDormant" while="" timeout="0" info="">
[22:30:05.905]          // if-block "!hasDormant"
[22:30:05.905]            // =>  TRUE
[22:30:05.905]          <block atomic="false" info="">
[22:30:05.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:30:05.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:05.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:30:05.908]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:30:05.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:30:05.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:05.908]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:30:05.912]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:30:05.912]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:30:05.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:05.913]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:30:05.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:30:05.916]          </block>
[22:30:05.916]          // end if-block "!hasDormant"
[22:30:05.916]        </control>
[22:30:05.916]        // end if-block "isSWJ"
[22:30:05.916]      </control>
[22:30:05.916]      <control if="!isSWJ" while="" timeout="0" info="">
[22:30:05.916]        // if-block "!isSWJ"
[22:30:05.916]          // =>  FALSE
[22:30:05.916]        // skip if-block "!isSWJ"
[22:30:05.916]      </control>
[22:30:05.916]      <block atomic="false" info="">
[22:30:05.916]        ReadDP(0x0);
[22:30:05.916]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:30:05.916]      </block>
[22:30:05.916]      // end if-block "protType == 2"
[22:30:05.916]    </control>
[22:30:05.916]  </sequence>
[22:30:05.916]  
[22:30:05.923]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:30:05.923]  
[22:30:05.924]  <debugvars>
[22:30:05.924]    // Pre-defined
[22:30:05.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:05.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:05.924]    __dp=0x00000000
[22:30:05.924]    __ap=0x00000000
[22:30:05.924]    __traceout=0x00000000      (Trace Disabled)
[22:30:05.924]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:05.924]    __FlashAddr=0x00000000
[22:30:05.924]    __FlashLen=0x00000000
[22:30:05.924]    __FlashArg=0x00000000
[22:30:05.924]    __FlashOp=0x00000000
[22:30:05.924]    __Result=0x00000000
[22:30:05.924]  </debugvars>
[22:30:05.924]  
[22:30:05.924]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:30:05.924]    <block atomic="false" info="">
[22:30:05.924]      __var SW_DP_ABORT       = 0x0;
[22:30:05.924]        // -> [SW_DP_ABORT <= 0x00000000]
[22:30:05.924]      __var DP_CTRL_STAT      = 0x4;
[22:30:05.924]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:30:05.924]      __var DP_SELECT         = 0x8;
[22:30:05.924]        // -> [DP_SELECT <= 0x00000008]
[22:30:05.924]      __var powered_down      = 0;
[22:30:05.924]        // -> [powered_down <= 0x00000000]
[22:30:05.924]      WriteDP(DP_SELECT, 0x00000000);
[22:30:05.929]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:30:05.929]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:30:05.933]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:30:05.933]        // -> [powered_down <= 0x00000001]
[22:30:05.933]    </block>
[22:30:05.933]    <control if="powered_down" while="" timeout="0" info="">
[22:30:05.933]      // if-block "powered_down"
[22:30:05.933]        // =>  TRUE
[22:30:05.935]      <block atomic="false" info="">
[22:30:05.935]        Message(0, "Debug/System power-up request sent");
[22:30:05.937]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:30:05.940]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:30:05.940]      </block>
[22:30:05.940]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:30:05.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:30:05.941]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:30:05.941]        // while-condition  =>  FALSE
[22:30:05.941]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:30:05.941]      </control>
[22:30:05.941]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:30:05.941]        // if-block "(__protocol & 0xFFFF) == 1"
[22:30:05.943]          // =>  FALSE
[22:30:05.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:30:05.943]      </control>
[22:30:05.943]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:30:05.943]        // if-block "(__protocol & 0xFFFF) == 2"
[22:30:05.943]          // =>  TRUE
[22:30:05.943]        <block atomic="false" info="">
[22:30:05.943]          Message(0, "executing SWD power up");
[22:30:05.943]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:30:05.949]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:30:05.949]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:30:05.949]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:30:05.949]        </block>
[22:30:05.949]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:30:05.949]      </control>
[22:30:05.949]      // end if-block "powered_down"
[22:30:05.949]    </control>
[22:30:05.949]    <block atomic="false" info="">
[22:30:05.949]      __var DEBUG_PORT_VAL    = 0;
[22:30:05.949]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:30:05.949]      __var ACCESS_POINT_VAL  = 0;
[22:30:05.949]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:30:05.949]      __ap = 1; 
[22:30:05.949]        // -> [__ap <= 0x00000001]
[22:30:05.949]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:30:05.957]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:30:05.957]      __ap = 4;
[22:30:05.957]        // -> [__ap <= 0x00000004]
[22:30:05.958]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:05.965]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:30:05.965]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:30:05.965]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:05.965]    </block>
[22:30:05.965]    <block atomic="false" info="">
[22:30:05.965]      __var nReset = 0x80;
[22:30:05.965]        // -> [nReset <= 0x00000080]
[22:30:05.965]      __var canReadPins = 0;
[22:30:05.965]        // -> [canReadPins <= 0x00000000]
[22:30:05.965]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:30:05.969]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:30:05.969]        // -> [canReadPins <= 0x00000001]
[22:30:05.969]    </block>
[22:30:05.969]    <control if="" while="1" timeout="200" info="">
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.969]      // while-condition  =>  TRUE
[22:30:05.969]      // while "1"  (timeout="200")
[22:30:05.973]      // while-condition  =>  TRUE
[22:30:05.973]      // while "1"  (timeout="200")
[22:30:05.973]      // while  =>  TIMEOUT
[22:30:05.973]      // end while "1"
[22:30:05.973]    </control>
[22:30:05.973]    <control if="canReadPins" while="" timeout="0" info="">
[22:30:05.973]      // if-block "canReadPins"
[22:30:05.973]        // =>  TRUE
[22:30:05.973]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:30:05.973]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:30:05.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:30:05.978]        // while-condition  =>  FALSE
[22:30:05.978]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:30:05.978]      </control>
[22:30:05.978]      // end if-block "canReadPins"
[22:30:05.978]    </control>
[22:30:05.978]    <control if="!canReadPins" while="" timeout="0" info="">
[22:30:05.978]      // if-block "!canReadPins"
[22:30:05.979]        // =>  FALSE
[22:30:05.979]      // skip if-block "!canReadPins"
[22:30:05.979]    </control>
[22:30:05.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:30:05.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:05.979]        // =>  TRUE
[22:30:05.979]      <block atomic="false" info="">
[22:30:05.979]        WriteAP(0x00, 0x190008);
[22:30:05.979]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:05.979]        WriteAP(0xF0, 0x01);
[22:30:05.983]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:05.983]      </block>
[22:30:05.983]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:05.983]    </control>
[22:30:05.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:30:05.983]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:05.985]        // =>  FALSE
[22:30:05.985]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:05.985]    </control>
[22:30:05.985]    <block atomic="false" info="">
[22:30:05.985]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:05.990]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:30:05.990]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:30:05.990]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:05.990]      __ap = 0; //lets make sure we reset the access point selection
[22:30:05.990]        // -> [__ap <= 0x00000000]
[22:30:05.990]    </block>
[22:30:05.990]  </sequence>
[22:30:05.990]  
[22:30:06.020]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:30:06.020]  
[22:30:06.023]  <debugvars>
[22:30:06.023]    // Pre-defined
[22:30:06.023]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:06.023]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:06.023]    __dp=0x00000000
[22:30:06.023]    __ap=0x00000000
[22:30:06.023]    __traceout=0x00000000      (Trace Disabled)
[22:30:06.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:06.023]    __FlashAddr=0x00000000
[22:30:06.023]    __FlashLen=0x00000000
[22:30:06.023]    __FlashArg=0x00000000
[22:30:06.024]    __FlashOp=0x00000000
[22:30:06.024]    __Result=0x00000000
[22:30:06.024]  </debugvars>
[22:30:06.024]  
[22:30:06.024]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:30:06.024]    <block atomic="false" info="">
[22:30:06.024]      __var deviceID = 0;
[22:30:06.024]        // -> [deviceID <= 0x00000000]
[22:30:06.024]      __var version = 0;
[22:30:06.024]        // -> [version <= 0x00000000]
[22:30:06.024]      __var partNum = 0;
[22:30:06.024]        // -> [partNum <= 0x00000000]
[22:30:06.024]      __var manuf = 0;
[22:30:06.024]        // -> [manuf <= 0x00000000]
[22:30:06.024]      __var isMSPM0G1X0X_G3X0X = 0;
[22:30:06.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:30:06.024]      __var isProduction = 0;
[22:30:06.024]        // -> [isProduction <= 0x00000000]
[22:30:06.024]      __var continueId = 0;
[22:30:06.024]        // -> [continueId <= 0x00000000]
[22:30:06.024]      deviceID =   Read32(0x41C40004);
[22:30:06.028]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:30:06.028]        // -> [deviceID <= 0x2BB8802F]
[22:30:06.028]      version = deviceID >> 28;
[22:30:06.031]        // -> [version <= 0x00000002]
[22:30:06.031]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:30:06.031]        // -> [partNum <= 0x0000BB88]
[22:30:06.031]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:30:06.031]        // -> [manuf <= 0x00000017]
[22:30:06.031]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:30:06.031]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:30:06.031]      isProduction = (version > 0);
[22:30:06.031]        // -> [isProduction <= 0x00000001]
[22:30:06.031]    </block>
[22:30:06.031]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:30:06.031]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:30:06.031]        // =>  FALSE
[22:30:06.031]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:30:06.031]    </control>
[22:30:06.031]    <control if="continueId == 4" while="" timeout="0" info="">
[22:30:06.031]      // if-block "continueId == 4"
[22:30:06.031]        // =>  FALSE
[22:30:06.031]      // skip if-block "continueId == 4"
[22:30:06.031]    </control>
[22:30:06.033]    <control if="!isProduction" while="" timeout="0" info="">
[22:30:06.033]      // if-block "!isProduction"
[22:30:06.033]        // =>  FALSE
[22:30:06.033]      // skip if-block "!isProduction"
[22:30:06.033]    </control>
[22:30:06.033]  </sequence>
[22:30:06.033]  
[22:31:58.108]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:31:58.108]  
[22:31:58.108]  <debugvars>
[22:31:58.108]    // Pre-defined
[22:31:58.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:58.108]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:58.108]    __dp=0x00000000
[22:31:58.108]    __ap=0x00000000
[22:31:58.108]    __traceout=0x00000000      (Trace Disabled)
[22:31:58.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:58.108]    __FlashAddr=0x00000000
[22:31:58.108]    __FlashLen=0x00000000
[22:31:58.108]    __FlashArg=0x00000000
[22:31:58.108]    __FlashOp=0x00000000
[22:31:58.108]    __Result=0x00000000
[22:31:58.108]  </debugvars>
[22:31:58.108]  
[22:31:58.108]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:31:58.108]    <block atomic="false" info="">
[22:31:58.108]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:31:58.108]        // -> [isSWJ <= 0x00000001]
[22:31:58.108]      __var hasDormant = __protocol & 0x00020000;
[22:31:58.112]        // -> [hasDormant <= 0x00000000]
[22:31:58.112]      __var protType   = __protocol & 0x0000FFFF;
[22:31:58.112]        // -> [protType <= 0x00000002]
[22:31:58.112]    </block>
[22:31:58.112]    <control if="protType == 1" while="" timeout="0" info="">
[22:31:58.112]      // if-block "protType == 1"
[22:31:58.112]        // =>  FALSE
[22:31:58.112]      // skip if-block "protType == 1"
[22:31:58.112]    </control>
[22:31:58.112]    <control if="protType == 2" while="" timeout="0" info="">
[22:31:58.112]      // if-block "protType == 2"
[22:31:58.112]        // =>  TRUE
[22:31:58.112]      <control if="isSWJ" while="" timeout="0" info="">
[22:31:58.112]        // if-block "isSWJ"
[22:31:58.112]          // =>  TRUE
[22:31:58.112]        <control if="hasDormant" while="" timeout="0" info="">
[22:31:58.112]          // if-block "hasDormant"
[22:31:58.112]            // =>  FALSE
[22:31:58.112]          // skip if-block "hasDormant"
[22:31:58.112]        </control>
[22:31:58.112]        <control if="!hasDormant" while="" timeout="0" info="">
[22:31:58.115]          // if-block "!hasDormant"
[22:31:58.115]            // =>  TRUE
[22:31:58.115]          <block atomic="false" info="">
[22:31:58.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:31:58.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:58.116]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:31:58.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:31:58.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:31:58.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:58.120]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:31:58.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:31:58.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:31:58.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:58.125]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:31:58.128]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:31:58.128]          </block>
[22:31:58.128]          // end if-block "!hasDormant"
[22:31:58.128]        </control>
[22:31:58.128]        // end if-block "isSWJ"
[22:31:58.128]      </control>
[22:31:58.128]      <control if="!isSWJ" while="" timeout="0" info="">
[22:31:58.128]        // if-block "!isSWJ"
[22:31:58.128]          // =>  FALSE
[22:31:58.128]        // skip if-block "!isSWJ"
[22:31:58.128]      </control>
[22:31:58.128]      <block atomic="false" info="">
[22:31:58.128]        ReadDP(0x0);
[22:31:58.128]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:31:58.128]      </block>
[22:31:58.132]      // end if-block "protType == 2"
[22:31:58.132]    </control>
[22:31:58.132]  </sequence>
[22:31:58.132]  
[22:31:58.132]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:31:58.132]  
[22:31:58.132]  <debugvars>
[22:31:58.135]    // Pre-defined
[22:31:58.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:58.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:58.135]    __dp=0x00000000
[22:31:58.135]    __ap=0x00000000
[22:31:58.135]    __traceout=0x00000000      (Trace Disabled)
[22:31:58.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:58.135]    __FlashAddr=0x00000000
[22:31:58.135]    __FlashLen=0x00000000
[22:31:58.135]    __FlashArg=0x00000000
[22:31:58.135]    __FlashOp=0x00000000
[22:31:58.136]    __Result=0x00000000
[22:31:58.136]  </debugvars>
[22:31:58.136]  
[22:31:58.136]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:31:58.136]    <block atomic="false" info="">
[22:31:58.136]      __var SW_DP_ABORT       = 0x0;
[22:31:58.136]        // -> [SW_DP_ABORT <= 0x00000000]
[22:31:58.136]      __var DP_CTRL_STAT      = 0x4;
[22:31:58.136]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:31:58.136]      __var DP_SELECT         = 0x8;
[22:31:58.136]        // -> [DP_SELECT <= 0x00000008]
[22:31:58.136]      __var powered_down      = 0;
[22:31:58.136]        // -> [powered_down <= 0x00000000]
[22:31:58.136]      WriteDP(DP_SELECT, 0x00000000);
[22:31:58.136]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:31:58.136]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:31:58.140]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:31:58.140]        // -> [powered_down <= 0x00000001]
[22:31:58.140]    </block>
[22:31:58.140]    <control if="powered_down" while="" timeout="0" info="">
[22:31:58.140]      // if-block "powered_down"
[22:31:58.140]        // =>  TRUE
[22:31:58.140]      <block atomic="false" info="">
[22:31:58.140]        Message(0, "Debug/System power-up request sent");
[22:31:58.144]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:31:58.145]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:31:58.145]      </block>
[22:31:58.145]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:31:58.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:31:58.148]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:31:58.148]        // while-condition  =>  FALSE
[22:31:58.148]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:31:58.148]      </control>
[22:31:58.148]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:31:58.148]        // if-block "(__protocol & 0xFFFF) == 1"
[22:31:58.148]          // =>  FALSE
[22:31:58.148]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:31:58.148]      </control>
[22:31:58.148]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:31:58.148]        // if-block "(__protocol & 0xFFFF) == 2"
[22:31:58.148]          // =>  TRUE
[22:31:58.148]        <block atomic="false" info="">
[22:31:58.148]          Message(0, "executing SWD power up");
[22:31:58.152]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:31:58.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:31:58.155]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:31:58.157]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:31:58.157]        </block>
[22:31:58.157]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:31:58.157]      </control>
[22:31:58.157]      // end if-block "powered_down"
[22:31:58.158]    </control>
[22:31:58.158]    <block atomic="false" info="">
[22:31:58.158]      __var DEBUG_PORT_VAL    = 0;
[22:31:58.158]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:31:58.158]      __var ACCESS_POINT_VAL  = 0;
[22:31:58.158]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:31:58.158]      __ap = 1; 
[22:31:58.158]        // -> [__ap <= 0x00000001]
[22:31:58.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:31:58.165]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:31:58.165]      __ap = 4;
[22:31:58.165]        // -> [__ap <= 0x00000004]
[22:31:58.165]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:58.168]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:31:58.168]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:31:58.168]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:58.171]    </block>
[22:31:58.171]    <block atomic="false" info="">
[22:31:58.171]      __var nReset = 0x80;
[22:31:58.171]        // -> [nReset <= 0x00000080]
[22:31:58.171]      __var canReadPins = 0;
[22:31:58.171]        // -> [canReadPins <= 0x00000000]
[22:31:58.171]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:31:58.172]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:31:58.172]        // -> [canReadPins <= 0x00000001]
[22:31:58.172]    </block>
[22:31:58.172]    <control if="" while="1" timeout="200" info="">
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.172]      // while "1"  (timeout="200")
[22:31:58.172]      // while-condition  =>  TRUE
[22:31:58.176]      // while "1"  (timeout="200")
[22:31:58.176]      // while  =>  TIMEOUT
[22:31:58.176]      // end while "1"
[22:31:58.176]    </control>
[22:31:58.176]    <control if="canReadPins" while="" timeout="0" info="">
[22:31:58.176]      // if-block "canReadPins"
[22:31:58.176]        // =>  TRUE
[22:31:58.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:31:58.177]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:31:58.178]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:31:58.178]        // while-condition  =>  FALSE
[22:31:58.178]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:31:58.178]      </control>
[22:31:58.178]      // end if-block "canReadPins"
[22:31:58.178]    </control>
[22:31:58.178]    <control if="!canReadPins" while="" timeout="0" info="">
[22:31:58.178]      // if-block "!canReadPins"
[22:31:58.178]        // =>  FALSE
[22:31:58.178]      // skip if-block "!canReadPins"
[22:31:58.180]    </control>
[22:31:58.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:31:58.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:58.180]        // =>  TRUE
[22:31:58.180]      <block atomic="false" info="">
[22:31:58.180]        WriteAP(0x00, 0x190008);
[22:31:58.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:58.181]        WriteAP(0xF0, 0x01);
[22:31:58.184]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:58.185]      </block>
[22:31:58.185]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:58.185]    </control>
[22:31:58.185]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:31:58.185]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:58.185]        // =>  FALSE
[22:31:58.185]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:58.185]    </control>
[22:31:58.185]    <block atomic="false" info="">
[22:31:58.185]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:58.189]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:31:58.189]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:31:58.189]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:58.191]      __ap = 0; //lets make sure we reset the access point selection
[22:31:58.191]        // -> [__ap <= 0x00000000]
[22:31:58.191]    </block>
[22:31:58.191]  </sequence>
[22:31:58.191]  
[22:31:58.213]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:31:58.213]  
[22:31:58.213]  <debugvars>
[22:31:58.213]    // Pre-defined
[22:31:58.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:58.213]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:58.213]    __dp=0x00000000
[22:31:58.213]    __ap=0x00000000
[22:31:58.213]    __traceout=0x00000000      (Trace Disabled)
[22:31:58.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:58.213]    __FlashAddr=0x00000000
[22:31:58.213]    __FlashLen=0x00000000
[22:31:58.216]    __FlashArg=0x00000000
[22:31:58.216]    __FlashOp=0x00000000
[22:31:58.216]    __Result=0x00000000
[22:31:58.216]  </debugvars>
[22:31:58.216]  
[22:31:58.216]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:31:58.216]    <block atomic="false" info="">
[22:31:58.216]      __var deviceID = 0;
[22:31:58.216]        // -> [deviceID <= 0x00000000]
[22:31:58.216]      __var version = 0;
[22:31:58.216]        // -> [version <= 0x00000000]
[22:31:58.216]      __var partNum = 0;
[22:31:58.217]        // -> [partNum <= 0x00000000]
[22:31:58.217]      __var manuf = 0;
[22:31:58.217]        // -> [manuf <= 0x00000000]
[22:31:58.217]      __var isMSPM0G1X0X_G3X0X = 0;
[22:31:58.217]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:31:58.217]      __var isProduction = 0;
[22:31:58.217]        // -> [isProduction <= 0x00000000]
[22:31:58.217]      __var continueId = 0;
[22:31:58.217]        // -> [continueId <= 0x00000000]
[22:31:58.217]      deviceID =   Read32(0x41C40004);
[22:31:58.221]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:31:58.221]        // -> [deviceID <= 0x2BB8802F]
[22:31:58.221]      version = deviceID >> 28;
[22:31:58.221]        // -> [version <= 0x00000002]
[22:31:58.221]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:31:58.221]        // -> [partNum <= 0x0000BB88]
[22:31:58.221]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:31:58.221]        // -> [manuf <= 0x00000017]
[22:31:58.221]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:31:58.221]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:31:58.221]      isProduction = (version > 0);
[22:31:58.221]        // -> [isProduction <= 0x00000001]
[22:31:58.221]    </block>
[22:31:58.221]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:31:58.221]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:31:58.221]        // =>  FALSE
[22:31:58.221]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:31:58.225]    </control>
[22:31:58.225]    <control if="continueId == 4" while="" timeout="0" info="">
[22:31:58.225]      // if-block "continueId == 4"
[22:31:58.225]        // =>  FALSE
[22:31:58.225]      // skip if-block "continueId == 4"
[22:31:58.225]    </control>
[22:31:58.225]    <control if="!isProduction" while="" timeout="0" info="">
[22:31:58.225]      // if-block "!isProduction"
[22:31:58.225]        // =>  FALSE
[22:31:58.225]      // skip if-block "!isProduction"
[22:31:58.225]    </control>
[22:31:58.225]  </sequence>
[22:31:58.225]  
[22:33:06.085]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:33:06.085]  
[22:33:06.087]  <debugvars>
[22:33:06.087]    // Pre-defined
[22:33:06.087]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:06.087]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:06.087]    __dp=0x00000000
[22:33:06.087]    __ap=0x00000000
[22:33:06.087]    __traceout=0x00000000      (Trace Disabled)
[22:33:06.087]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:06.087]    __FlashAddr=0x00000000
[22:33:06.087]    __FlashLen=0x00000000
[22:33:06.087]    __FlashArg=0x00000000
[22:33:06.087]    __FlashOp=0x00000000
[22:33:06.087]    __Result=0x00000000
[22:33:06.087]  </debugvars>
[22:33:06.087]  
[22:33:06.087]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:33:06.087]    <block atomic="false" info="">
[22:33:06.087]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:33:06.089]        // -> [isSWJ <= 0x00000001]
[22:33:06.089]      __var hasDormant = __protocol & 0x00020000;
[22:33:06.089]        // -> [hasDormant <= 0x00000000]
[22:33:06.089]      __var protType   = __protocol & 0x0000FFFF;
[22:33:06.089]        // -> [protType <= 0x00000002]
[22:33:06.089]    </block>
[22:33:06.089]    <control if="protType == 1" while="" timeout="0" info="">
[22:33:06.089]      // if-block "protType == 1"
[22:33:06.089]        // =>  FALSE
[22:33:06.089]      // skip if-block "protType == 1"
[22:33:06.089]    </control>
[22:33:06.089]    <control if="protType == 2" while="" timeout="0" info="">
[22:33:06.089]      // if-block "protType == 2"
[22:33:06.089]        // =>  TRUE
[22:33:06.089]      <control if="isSWJ" while="" timeout="0" info="">
[22:33:06.089]        // if-block "isSWJ"
[22:33:06.089]          // =>  TRUE
[22:33:06.089]        <control if="hasDormant" while="" timeout="0" info="">
[22:33:06.089]          // if-block "hasDormant"
[22:33:06.089]            // =>  FALSE
[22:33:06.089]          // skip if-block "hasDormant"
[22:33:06.089]        </control>
[22:33:06.089]        <control if="!hasDormant" while="" timeout="0" info="">
[22:33:06.089]          // if-block "!hasDormant"
[22:33:06.089]            // =>  TRUE
[22:33:06.089]          <block atomic="false" info="">
[22:33:06.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:33:06.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:06.093]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:33:06.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:33:06.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:33:06.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:06.097]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:33:06.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:33:06.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:33:06.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:06.099]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:33:06.101]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:33:06.101]          </block>
[22:33:06.101]          // end if-block "!hasDormant"
[22:33:06.101]        </control>
[22:33:06.101]        // end if-block "isSWJ"
[22:33:06.101]      </control>
[22:33:06.101]      <control if="!isSWJ" while="" timeout="0" info="">
[22:33:06.101]        // if-block "!isSWJ"
[22:33:06.101]          // =>  FALSE
[22:33:06.101]        // skip if-block "!isSWJ"
[22:33:06.101]      </control>
[22:33:06.101]      <block atomic="false" info="">
[22:33:06.101]        ReadDP(0x0);
[22:33:06.101]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:33:06.101]      </block>
[22:33:06.101]      // end if-block "protType == 2"
[22:33:06.101]    </control>
[22:33:06.101]  </sequence>
[22:33:06.101]  
[22:33:06.107]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:33:06.107]  
[22:33:06.107]  <debugvars>
[22:33:06.107]    // Pre-defined
[22:33:06.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:06.109]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:06.109]    __dp=0x00000000
[22:33:06.109]    __ap=0x00000000
[22:33:06.109]    __traceout=0x00000000      (Trace Disabled)
[22:33:06.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:06.109]    __FlashAddr=0x00000000
[22:33:06.109]    __FlashLen=0x00000000
[22:33:06.109]    __FlashArg=0x00000000
[22:33:06.109]    __FlashOp=0x00000000
[22:33:06.109]    __Result=0x00000000
[22:33:06.109]  </debugvars>
[22:33:06.109]  
[22:33:06.109]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:33:06.109]    <block atomic="false" info="">
[22:33:06.109]      __var SW_DP_ABORT       = 0x0;
[22:33:06.109]        // -> [SW_DP_ABORT <= 0x00000000]
[22:33:06.109]      __var DP_CTRL_STAT      = 0x4;
[22:33:06.109]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:33:06.109]      __var DP_SELECT         = 0x8;
[22:33:06.109]        // -> [DP_SELECT <= 0x00000008]
[22:33:06.109]      __var powered_down      = 0;
[22:33:06.109]        // -> [powered_down <= 0x00000000]
[22:33:06.109]      WriteDP(DP_SELECT, 0x00000000);
[22:33:06.109]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:33:06.109]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:33:06.113]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:33:06.113]        // -> [powered_down <= 0x00000001]
[22:33:06.113]    </block>
[22:33:06.113]    <control if="powered_down" while="" timeout="0" info="">
[22:33:06.113]      // if-block "powered_down"
[22:33:06.113]        // =>  TRUE
[22:33:06.113]      <block atomic="false" info="">
[22:33:06.113]        Message(0, "Debug/System power-up request sent");
[22:33:06.116]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:33:06.116]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:33:06.116]      </block>
[22:33:06.116]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:33:06.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:33:06.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:33:06.120]        // while-condition  =>  FALSE
[22:33:06.120]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:33:06.120]      </control>
[22:33:06.120]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:33:06.120]        // if-block "(__protocol & 0xFFFF) == 1"
[22:33:06.120]          // =>  FALSE
[22:33:06.120]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:33:06.120]      </control>
[22:33:06.120]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:33:06.122]        // if-block "(__protocol & 0xFFFF) == 2"
[22:33:06.122]          // =>  TRUE
[22:33:06.122]        <block atomic="false" info="">
[22:33:06.122]          Message(0, "executing SWD power up");
[22:33:06.123]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:33:06.125]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:33:06.125]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:33:06.127]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:33:06.127]        </block>
[22:33:06.127]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:33:06.127]      </control>
[22:33:06.127]      // end if-block "powered_down"
[22:33:06.127]    </control>
[22:33:06.129]    <block atomic="false" info="">
[22:33:06.129]      __var DEBUG_PORT_VAL    = 0;
[22:33:06.129]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:33:06.129]      __var ACCESS_POINT_VAL  = 0;
[22:33:06.129]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:33:06.129]      __ap = 1; 
[22:33:06.129]        // -> [__ap <= 0x00000001]
[22:33:06.129]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:33:06.133]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:33:06.133]      __ap = 4;
[22:33:06.133]        // -> [__ap <= 0x00000004]
[22:33:06.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:06.137]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:33:06.137]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:33:06.137]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:06.141]    </block>
[22:33:06.141]    <block atomic="false" info="">
[22:33:06.141]      __var nReset = 0x80;
[22:33:06.141]        // -> [nReset <= 0x00000080]
[22:33:06.141]      __var canReadPins = 0;
[22:33:06.141]        // -> [canReadPins <= 0x00000000]
[22:33:06.141]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:33:06.147]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:33:06.147]        // -> [canReadPins <= 0x00000001]
[22:33:06.147]    </block>
[22:33:06.147]    <control if="" while="1" timeout="200" info="">
[22:33:06.147]      // while "1"  (timeout="200")
[22:33:06.147]      // while-condition  =>  TRUE
[22:33:06.147]      // while "1"  (timeout="200")
[22:33:06.147]      // while-condition  =>  TRUE
[22:33:06.147]      // while "1"  (timeout="200")
[22:33:06.147]      // while-condition  =>  TRUE
[22:33:06.147]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.149]      // while-condition  =>  TRUE
[22:33:06.149]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.153]      // while "1"  (timeout="200")
[22:33:06.153]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.157]      // while "1"  (timeout="200")
[22:33:06.157]      // while-condition  =>  TRUE
[22:33:06.161]      // while "1"  (timeout="200")
[22:33:06.161]      // while  =>  TIMEOUT
[22:33:06.161]      // end while "1"
[22:33:06.161]    </control>
[22:33:06.161]    <control if="canReadPins" while="" timeout="0" info="">
[22:33:06.161]      // if-block "canReadPins"
[22:33:06.161]        // =>  TRUE
[22:33:06.161]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:33:06.161]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:33:06.163]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:33:06.163]        // while-condition  =>  FALSE
[22:33:06.163]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:33:06.163]      </control>
[22:33:06.163]      // end if-block "canReadPins"
[22:33:06.163]    </control>
[22:33:06.163]    <control if="!canReadPins" while="" timeout="0" info="">
[22:33:06.163]      // if-block "!canReadPins"
[22:33:06.163]        // =>  FALSE
[22:33:06.163]      // skip if-block "!canReadPins"
[22:33:06.163]    </control>
[22:33:06.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:33:06.163]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:06.163]        // =>  TRUE
[22:33:06.163]      <block atomic="false" info="">
[22:33:06.165]        WriteAP(0x00, 0x190008);
[22:33:06.167]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:06.167]        WriteAP(0xF0, 0x01);
[22:33:06.171]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:06.171]      </block>
[22:33:06.171]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:06.171]    </control>
[22:33:06.171]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:33:06.171]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:06.171]        // =>  FALSE
[22:33:06.171]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:06.171]    </control>
[22:33:06.171]    <block atomic="false" info="">
[22:33:06.171]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:06.173]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:33:06.173]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:33:06.173]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:06.177]      __ap = 0; //lets make sure we reset the access point selection
[22:33:06.177]        // -> [__ap <= 0x00000000]
[22:33:06.177]    </block>
[22:33:06.177]  </sequence>
[22:33:06.177]  
[22:33:06.221]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:33:06.221]  
[22:33:06.221]  <debugvars>
[22:33:06.221]    // Pre-defined
[22:33:06.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:06.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:06.221]    __dp=0x00000000
[22:33:06.221]    __ap=0x00000000
[22:33:06.221]    __traceout=0x00000000      (Trace Disabled)
[22:33:06.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:06.221]    __FlashAddr=0x00000000
[22:33:06.221]    __FlashLen=0x00000000
[22:33:06.221]    __FlashArg=0x00000000
[22:33:06.221]    __FlashOp=0x00000000
[22:33:06.221]    __Result=0x00000000
[22:33:06.221]  </debugvars>
[22:33:06.221]  
[22:33:06.221]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:33:06.221]    <block atomic="false" info="">
[22:33:06.221]      __var deviceID = 0;
[22:33:06.221]        // -> [deviceID <= 0x00000000]
[22:33:06.225]      __var version = 0;
[22:33:06.225]        // -> [version <= 0x00000000]
[22:33:06.225]      __var partNum = 0;
[22:33:06.225]        // -> [partNum <= 0x00000000]
[22:33:06.225]      __var manuf = 0;
[22:33:06.225]        // -> [manuf <= 0x00000000]
[22:33:06.225]      __var isMSPM0G1X0X_G3X0X = 0;
[22:33:06.225]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:33:06.225]      __var isProduction = 0;
[22:33:06.225]        // -> [isProduction <= 0x00000000]
[22:33:06.225]      __var continueId = 0;
[22:33:06.225]        // -> [continueId <= 0x00000000]
[22:33:06.225]      deviceID =   Read32(0x41C40004);
[22:33:06.233]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:33:06.233]        // -> [deviceID <= 0x2BB8802F]
[22:33:06.233]      version = deviceID >> 28;
[22:33:06.233]        // -> [version <= 0x00000002]
[22:33:06.233]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:33:06.233]        // -> [partNum <= 0x0000BB88]
[22:33:06.233]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:33:06.233]        // -> [manuf <= 0x00000017]
[22:33:06.233]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:33:06.233]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:33:06.233]      isProduction = (version > 0);
[22:33:06.237]        // -> [isProduction <= 0x00000001]
[22:33:06.237]    </block>
[22:33:06.237]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:33:06.237]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:33:06.237]        // =>  FALSE
[22:33:06.237]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:33:06.237]    </control>
[22:33:06.237]    <control if="continueId == 4" while="" timeout="0" info="">
[22:33:06.237]      // if-block "continueId == 4"
[22:33:06.237]        // =>  FALSE
[22:33:06.237]      // skip if-block "continueId == 4"
[22:33:06.237]    </control>
[22:33:06.237]    <control if="!isProduction" while="" timeout="0" info="">
[22:33:06.237]      // if-block "!isProduction"
[22:33:06.237]        // =>  FALSE
[22:33:06.237]      // skip if-block "!isProduction"
[22:33:06.237]    </control>
[22:33:06.237]  </sequence>
[22:33:06.237]  
[22:33:54.706]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:33:54.706]  
[22:33:54.714]  <debugvars>
[22:33:54.714]    // Pre-defined
[22:33:54.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:54.714]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:33:54.714]    __dp=0x00000000
[22:33:54.714]    __ap=0x00000000
[22:33:54.714]    __traceout=0x00000000      (Trace Disabled)
[22:33:54.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:54.714]    __FlashAddr=0x00000000
[22:33:54.715]    __FlashLen=0x00000000
[22:33:54.716]    __FlashArg=0x00000000
[22:33:54.716]    __FlashOp=0x00000000
[22:33:54.716]    __Result=0x00000000
[22:33:54.716]  </debugvars>
[22:33:54.716]  
[22:33:54.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:33:54.716]    <block atomic="false" info="">
[22:33:54.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:33:54.716]        // -> [isSWJ <= 0x00000001]
[22:33:54.716]      __var hasDormant = __protocol & 0x00020000;
[22:33:54.716]        // -> [hasDormant <= 0x00000000]
[22:33:54.716]      __var protType   = __protocol & 0x0000FFFF;
[22:33:54.717]        // -> [protType <= 0x00000002]
[22:33:54.717]    </block>
[22:33:54.717]    <control if="protType == 1" while="" timeout="0" info="">
[22:33:54.717]      // if-block "protType == 1"
[22:33:54.717]        // =>  FALSE
[22:33:54.717]      // skip if-block "protType == 1"
[22:33:54.717]    </control>
[22:33:54.718]    <control if="protType == 2" while="" timeout="0" info="">
[22:33:54.718]      // if-block "protType == 2"
[22:33:54.718]        // =>  TRUE
[22:33:54.718]      <control if="isSWJ" while="" timeout="0" info="">
[22:33:54.718]        // if-block "isSWJ"
[22:33:54.718]          // =>  TRUE
[22:33:54.718]        <control if="hasDormant" while="" timeout="0" info="">
[22:33:54.718]          // if-block "hasDormant"
[22:33:54.718]            // =>  FALSE
[22:33:54.718]          // skip if-block "hasDormant"
[22:33:54.718]        </control>
[22:33:54.718]        <control if="!hasDormant" while="" timeout="0" info="">
[22:33:54.718]          // if-block "!hasDormant"
[22:33:54.718]            // =>  TRUE
[22:33:54.718]          <block atomic="false" info="">
[22:33:54.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:33:54.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:54.722]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:33:54.724]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:33:54.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:33:54.724]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:54.724]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:33:54.728]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:33:54.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:33:54.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:54.728]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:33:54.732]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:33:54.732]          </block>
[22:33:54.732]          // end if-block "!hasDormant"
[22:33:54.732]        </control>
[22:33:54.732]        // end if-block "isSWJ"
[22:33:54.732]      </control>
[22:33:54.732]      <control if="!isSWJ" while="" timeout="0" info="">
[22:33:54.732]        // if-block "!isSWJ"
[22:33:54.732]          // =>  FALSE
[22:33:54.732]        // skip if-block "!isSWJ"
[22:33:54.732]      </control>
[22:33:54.732]      <block atomic="false" info="">
[22:33:54.732]        ReadDP(0x0);
[22:33:54.732]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:33:54.732]      </block>
[22:33:54.732]      // end if-block "protType == 2"
[22:33:54.732]    </control>
[22:33:54.732]  </sequence>
[22:33:54.736]  
[22:33:54.740]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:33:54.740]  
[22:33:54.740]  <debugvars>
[22:33:54.740]    // Pre-defined
[22:33:54.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:54.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:33:54.740]    __dp=0x00000000
[22:33:54.740]    __ap=0x00000000
[22:33:54.740]    __traceout=0x00000000      (Trace Disabled)
[22:33:54.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:54.740]    __FlashAddr=0x00000000
[22:33:54.740]    __FlashLen=0x00000000
[22:33:54.740]    __FlashArg=0x00000000
[22:33:54.740]    __FlashOp=0x00000000
[22:33:54.740]    __Result=0x00000000
[22:33:54.740]  </debugvars>
[22:33:54.740]  
[22:33:54.740]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:33:54.740]    <block atomic="false" info="">
[22:33:54.740]      __var SW_DP_ABORT       = 0x0;
[22:33:54.740]        // -> [SW_DP_ABORT <= 0x00000000]
[22:33:54.740]      __var DP_CTRL_STAT      = 0x4;
[22:33:54.740]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:33:54.740]      __var DP_SELECT         = 0x8;
[22:33:54.740]        // -> [DP_SELECT <= 0x00000008]
[22:33:54.740]      __var powered_down      = 0;
[22:33:54.740]        // -> [powered_down <= 0x00000000]
[22:33:54.740]      WriteDP(DP_SELECT, 0x00000000);
[22:33:54.745]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:33:54.745]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:33:54.745]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:33:54.745]        // -> [powered_down <= 0x00000001]
[22:33:54.745]    </block>
[22:33:54.748]    <control if="powered_down" while="" timeout="0" info="">
[22:33:54.748]      // if-block "powered_down"
[22:33:54.748]        // =>  TRUE
[22:33:54.748]      <block atomic="false" info="">
[22:33:54.748]        Message(0, "Debug/System power-up request sent");
[22:33:54.748]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:33:54.748]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:33:54.748]      </block>
[22:33:54.748]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:33:54.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:33:54.752]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:33:54.752]        // while-condition  =>  FALSE
[22:33:54.752]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:33:54.752]      </control>
[22:33:54.752]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:33:54.752]        // if-block "(__protocol & 0xFFFF) == 1"
[22:33:54.752]          // =>  FALSE
[22:33:54.752]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:33:54.752]      </control>
[22:33:54.752]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:33:54.752]        // if-block "(__protocol & 0xFFFF) == 2"
[22:33:54.752]          // =>  TRUE
[22:33:54.752]        <block atomic="false" info="">
[22:33:54.752]          Message(0, "executing SWD power up");
[22:33:54.752]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:33:54.756]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:33:54.756]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:33:54.758]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:33:54.759]        </block>
[22:33:54.759]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:33:54.759]      </control>
[22:33:54.759]      // end if-block "powered_down"
[22:33:54.759]    </control>
[22:33:54.759]    <block atomic="false" info="">
[22:33:54.759]      __var DEBUG_PORT_VAL    = 0;
[22:33:54.759]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:33:54.759]      __var ACCESS_POINT_VAL  = 0;
[22:33:54.759]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:33:54.759]      __ap = 1; 
[22:33:54.759]        // -> [__ap <= 0x00000001]
[22:33:54.759]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:33:54.765]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:33:54.765]      __ap = 4;
[22:33:54.765]        // -> [__ap <= 0x00000004]
[22:33:54.765]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:54.769]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:33:54.770]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:33:54.770]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:54.770]    </block>
[22:33:54.770]    <block atomic="false" info="">
[22:33:54.770]      __var nReset = 0x80;
[22:33:54.770]        // -> [nReset <= 0x00000080]
[22:33:54.770]      __var canReadPins = 0;
[22:33:54.770]        // -> [canReadPins <= 0x00000000]
[22:33:54.770]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:33:54.773]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:33:54.773]        // -> [canReadPins <= 0x00000001]
[22:33:54.773]    </block>
[22:33:54.773]    <control if="" while="1" timeout="200" info="">
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.773]      // while "1"  (timeout="200")
[22:33:54.773]      // while-condition  =>  TRUE
[22:33:54.778]      // while "1"  (timeout="200")
[22:33:54.778]      // while-condition  =>  TRUE
[22:33:54.778]      // while "1"  (timeout="200")
[22:33:54.778]      // while-condition  =>  TRUE
[22:33:54.778]      // while "1"  (timeout="200")
[22:33:54.778]      // while-condition  =>  TRUE
[22:33:54.778]      // while "1"  (timeout="200")
[22:33:54.778]      // while-condition  =>  TRUE
[22:33:54.778]      // while "1"  (timeout="200")
[22:33:54.778]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.779]      // while-condition  =>  TRUE
[22:33:54.779]      // while "1"  (timeout="200")
[22:33:54.782]      // while-condition  =>  TRUE
[22:33:54.782]      // while "1"  (timeout="200")
[22:33:54.782]      // while-condition  =>  TRUE
[22:33:54.782]      // while "1"  (timeout="200")
[22:33:54.782]      // while-condition  =>  TRUE
[22:33:54.782]      // while "1"  (timeout="200")
[22:33:54.782]      // while-condition  =>  TRUE
[22:33:54.782]      // while "1"  (timeout="200")
[22:33:54.782]      // while-condition  =>  TRUE
[22:33:54.782]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.783]      // while "1"  (timeout="200")
[22:33:54.783]      // while-condition  =>  TRUE
[22:33:54.786]      // while "1"  (timeout="200")
[22:33:54.786]      // while  =>  TIMEOUT
[22:33:54.786]      // end while "1"
[22:33:54.786]    </control>
[22:33:54.786]    <control if="canReadPins" while="" timeout="0" info="">
[22:33:54.786]      // if-block "canReadPins"
[22:33:54.786]        // =>  TRUE
[22:33:54.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:33:54.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:33:54.788]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:33:54.788]        // while-condition  =>  FALSE
[22:33:54.788]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:33:54.788]      </control>
[22:33:54.788]      // end if-block "canReadPins"
[22:33:54.788]    </control>
[22:33:54.788]    <control if="!canReadPins" while="" timeout="0" info="">
[22:33:54.788]      // if-block "!canReadPins"
[22:33:54.788]        // =>  FALSE
[22:33:54.788]      // skip if-block "!canReadPins"
[22:33:54.788]    </control>
[22:33:54.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:33:54.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:54.788]        // =>  TRUE
[22:33:54.788]      <block atomic="false" info="">
[22:33:54.788]        WriteAP(0x00, 0x190008);
[22:33:54.791]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:54.791]        WriteAP(0xF0, 0x01);
[22:33:54.794]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:54.794]      </block>
[22:33:54.794]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:54.794]    </control>
[22:33:54.794]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:33:54.794]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:54.794]        // =>  FALSE
[22:33:54.794]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:54.794]    </control>
[22:33:54.794]    <block atomic="false" info="">
[22:33:54.794]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:54.799]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:33:54.799]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:33:54.799]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:54.799]      __ap = 0; //lets make sure we reset the access point selection
[22:33:54.799]        // -> [__ap <= 0x00000000]
[22:33:54.799]    </block>
[22:33:54.799]  </sequence>
[22:33:54.799]  
[22:33:54.821]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:33:54.821]  
[22:33:54.821]  <debugvars>
[22:33:54.821]    // Pre-defined
[22:33:54.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:54.822]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:33:54.822]    __dp=0x00000000
[22:33:54.822]    __ap=0x00000000
[22:33:54.822]    __traceout=0x00000000      (Trace Disabled)
[22:33:54.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:54.822]    __FlashAddr=0x00000000
[22:33:54.822]    __FlashLen=0x00000000
[22:33:54.822]    __FlashArg=0x00000000
[22:33:54.822]    __FlashOp=0x00000000
[22:33:54.822]    __Result=0x00000000
[22:33:54.822]  </debugvars>
[22:33:54.822]  
[22:33:54.822]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:33:54.822]    <block atomic="false" info="">
[22:33:54.822]      __var deviceID = 0;
[22:33:54.822]        // -> [deviceID <= 0x00000000]
[22:33:54.822]      __var version = 0;
[22:33:54.822]        // -> [version <= 0x00000000]
[22:33:54.822]      __var partNum = 0;
[22:33:54.822]        // -> [partNum <= 0x00000000]
[22:33:54.822]      __var manuf = 0;
[22:33:54.822]        // -> [manuf <= 0x00000000]
[22:33:54.822]      __var isMSPM0G1X0X_G3X0X = 0;
[22:33:54.822]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:33:54.822]      __var isProduction = 0;
[22:33:54.822]        // -> [isProduction <= 0x00000000]
[22:33:54.822]      __var continueId = 0;
[22:33:54.822]        // -> [continueId <= 0x00000000]
[22:33:54.822]      deviceID =   Read32(0x41C40004);
[22:33:54.828]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:33:54.828]        // -> [deviceID <= 0x2BB8802F]
[22:33:54.828]      version = deviceID >> 28;
[22:33:54.830]        // -> [version <= 0x00000002]
[22:33:54.831]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:33:54.831]        // -> [partNum <= 0x0000BB88]
[22:33:54.831]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:33:54.831]        // -> [manuf <= 0x00000017]
[22:33:54.831]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:33:54.831]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:33:54.831]      isProduction = (version > 0);
[22:33:54.831]        // -> [isProduction <= 0x00000001]
[22:33:54.831]    </block>
[22:33:54.831]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:33:54.831]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:33:54.831]        // =>  FALSE
[22:33:54.831]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:33:54.831]    </control>
[22:33:54.831]    <control if="continueId == 4" while="" timeout="0" info="">
[22:33:54.831]      // if-block "continueId == 4"
[22:33:54.831]        // =>  FALSE
[22:33:54.831]      // skip if-block "continueId == 4"
[22:33:54.831]    </control>
[22:33:54.831]    <control if="!isProduction" while="" timeout="0" info="">
[22:33:54.831]      // if-block "!isProduction"
[22:33:54.831]        // =>  FALSE
[22:33:54.831]      // skip if-block "!isProduction"
[22:33:54.831]    </control>
[22:33:54.831]  </sequence>
[22:33:54.831]  
[22:36:18.703]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:36:18.703]  
[22:36:18.713]  <debugvars>
[22:36:18.713]    // Pre-defined
[22:36:18.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:18.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:18.713]    __dp=0x00000000
[22:36:18.713]    __ap=0x00000000
[22:36:18.713]    __traceout=0x00000000      (Trace Disabled)
[22:36:18.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:18.713]    __FlashAddr=0x00000000
[22:36:18.713]    __FlashLen=0x00000000
[22:36:18.713]    __FlashArg=0x00000000
[22:36:18.713]    __FlashOp=0x00000000
[22:36:18.713]    __Result=0x00000000
[22:36:18.713]  </debugvars>
[22:36:18.713]  
[22:36:18.713]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:36:18.713]    <block atomic="false" info="">
[22:36:18.713]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:36:18.713]        // -> [isSWJ <= 0x00000001]
[22:36:18.713]      __var hasDormant = __protocol & 0x00020000;
[22:36:18.716]        // -> [hasDormant <= 0x00000000]
[22:36:18.716]      __var protType   = __protocol & 0x0000FFFF;
[22:36:18.716]        // -> [protType <= 0x00000002]
[22:36:18.716]    </block>
[22:36:18.716]    <control if="protType == 1" while="" timeout="0" info="">
[22:36:18.716]      // if-block "protType == 1"
[22:36:18.716]        // =>  FALSE
[22:36:18.716]      // skip if-block "protType == 1"
[22:36:18.716]    </control>
[22:36:18.716]    <control if="protType == 2" while="" timeout="0" info="">
[22:36:18.716]      // if-block "protType == 2"
[22:36:18.716]        // =>  TRUE
[22:36:18.716]      <control if="isSWJ" while="" timeout="0" info="">
[22:36:18.716]        // if-block "isSWJ"
[22:36:18.716]          // =>  TRUE
[22:36:18.716]        <control if="hasDormant" while="" timeout="0" info="">
[22:36:18.716]          // if-block "hasDormant"
[22:36:18.716]            // =>  FALSE
[22:36:18.716]          // skip if-block "hasDormant"
[22:36:18.716]        </control>
[22:36:18.716]        <control if="!hasDormant" while="" timeout="0" info="">
[22:36:18.716]          // if-block "!hasDormant"
[22:36:18.716]            // =>  TRUE
[22:36:18.716]          <block atomic="false" info="">
[22:36:18.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:36:18.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:18.721]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:36:18.721]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:36:18.721]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:36:18.724]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:18.724]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:36:18.724]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:36:18.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:36:18.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:18.728]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:36:18.728]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:36:18.728]          </block>
[22:36:18.728]          // end if-block "!hasDormant"
[22:36:18.728]        </control>
[22:36:18.728]        // end if-block "isSWJ"
[22:36:18.728]      </control>
[22:36:18.731]      <control if="!isSWJ" while="" timeout="0" info="">
[22:36:18.731]        // if-block "!isSWJ"
[22:36:18.731]          // =>  FALSE
[22:36:18.731]        // skip if-block "!isSWJ"
[22:36:18.731]      </control>
[22:36:18.731]      <block atomic="false" info="">
[22:36:18.731]        ReadDP(0x0);
[22:36:18.732]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:36:18.732]      </block>
[22:36:18.732]      // end if-block "protType == 2"
[22:36:18.732]    </control>
[22:36:18.732]  </sequence>
[22:36:18.732]  
[22:36:18.736]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:36:18.736]  
[22:36:18.740]  <debugvars>
[22:36:18.740]    // Pre-defined
[22:36:18.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:18.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:18.740]    __dp=0x00000000
[22:36:18.740]    __ap=0x00000000
[22:36:18.740]    __traceout=0x00000000      (Trace Disabled)
[22:36:18.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:18.741]    __FlashAddr=0x00000000
[22:36:18.741]    __FlashLen=0x00000000
[22:36:18.741]    __FlashArg=0x00000000
[22:36:18.741]    __FlashOp=0x00000000
[22:36:18.741]    __Result=0x00000000
[22:36:18.741]  </debugvars>
[22:36:18.741]  
[22:36:18.741]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:36:18.741]    <block atomic="false" info="">
[22:36:18.741]      __var SW_DP_ABORT       = 0x0;
[22:36:18.741]        // -> [SW_DP_ABORT <= 0x00000000]
[22:36:18.741]      __var DP_CTRL_STAT      = 0x4;
[22:36:18.741]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:36:18.741]      __var DP_SELECT         = 0x8;
[22:36:18.741]        // -> [DP_SELECT <= 0x00000008]
[22:36:18.741]      __var powered_down      = 0;
[22:36:18.741]        // -> [powered_down <= 0x00000000]
[22:36:18.741]      WriteDP(DP_SELECT, 0x00000000);
[22:36:18.744]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:36:18.744]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:36:18.744]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:36:18.748]        // -> [powered_down <= 0x00000001]
[22:36:18.748]    </block>
[22:36:18.748]    <control if="powered_down" while="" timeout="0" info="">
[22:36:18.748]      // if-block "powered_down"
[22:36:18.748]        // =>  TRUE
[22:36:18.748]      <block atomic="false" info="">
[22:36:18.748]        Message(0, "Debug/System power-up request sent");
[22:36:18.750]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:36:18.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:36:18.752]      </block>
[22:36:18.752]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:36:18.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:36:18.753]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:36:18.753]        // while-condition  =>  FALSE
[22:36:18.753]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:36:18.753]      </control>
[22:36:18.753]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:36:18.753]        // if-block "(__protocol & 0xFFFF) == 1"
[22:36:18.753]          // =>  FALSE
[22:36:18.753]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:36:18.756]      </control>
[22:36:18.756]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:36:18.756]        // if-block "(__protocol & 0xFFFF) == 2"
[22:36:18.756]          // =>  TRUE
[22:36:18.757]        <block atomic="false" info="">
[22:36:18.757]          Message(0, "executing SWD power up");
[22:36:18.757]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:36:18.759]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:36:18.760]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:36:18.761]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:36:18.761]        </block>
[22:36:18.761]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:36:18.761]      </control>
[22:36:18.761]      // end if-block "powered_down"
[22:36:18.761]    </control>
[22:36:18.761]    <block atomic="false" info="">
[22:36:18.761]      __var DEBUG_PORT_VAL    = 0;
[22:36:18.761]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:36:18.761]      __var ACCESS_POINT_VAL  = 0;
[22:36:18.761]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:36:18.761]      __ap = 1; 
[22:36:18.761]        // -> [__ap <= 0x00000001]
[22:36:18.764]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:36:18.764]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:36:18.764]      __ap = 4;
[22:36:18.764]        // -> [__ap <= 0x00000004]
[22:36:18.764]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:18.771]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:36:18.771]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:36:18.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:18.772]    </block>
[22:36:18.772]    <block atomic="false" info="">
[22:36:18.772]      __var nReset = 0x80;
[22:36:18.772]        // -> [nReset <= 0x00000080]
[22:36:18.772]      __var canReadPins = 0;
[22:36:18.772]        // -> [canReadPins <= 0x00000000]
[22:36:18.772]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:36:18.775]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:36:18.775]        // -> [canReadPins <= 0x00000001]
[22:36:18.775]    </block>
[22:36:18.775]    <control if="" while="1" timeout="200" info="">
[22:36:18.776]      // while "1"  (timeout="200")
[22:36:18.776]      // while-condition  =>  TRUE
[22:36:18.776]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.777]      // while "1"  (timeout="200")
[22:36:18.777]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.779]      // while "1"  (timeout="200")
[22:36:18.779]      // while-condition  =>  TRUE
[22:36:18.781]      // while "1"  (timeout="200")
[22:36:18.781]      // while-condition  =>  TRUE
[22:36:18.781]      // while "1"  (timeout="200")
[22:36:18.781]      // while-condition  =>  TRUE
[22:36:18.781]      // while "1"  (timeout="200")
[22:36:18.781]      // while-condition  =>  TRUE
[22:36:18.781]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.782]      // while-condition  =>  TRUE
[22:36:18.782]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.783]      // while "1"  (timeout="200")
[22:36:18.783]      // while-condition  =>  TRUE
[22:36:18.785]      // while "1"  (timeout="200")
[22:36:18.785]      // while  =>  TIMEOUT
[22:36:18.785]      // end while "1"
[22:36:18.785]    </control>
[22:36:18.785]    <control if="canReadPins" while="" timeout="0" info="">
[22:36:18.785]      // if-block "canReadPins"
[22:36:18.785]        // =>  TRUE
[22:36:18.785]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:36:18.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:36:18.785]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:36:18.789]        // while-condition  =>  FALSE
[22:36:18.789]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:36:18.789]      </control>
[22:36:18.789]      // end if-block "canReadPins"
[22:36:18.789]    </control>
[22:36:18.789]    <control if="!canReadPins" while="" timeout="0" info="">
[22:36:18.789]      // if-block "!canReadPins"
[22:36:18.789]        // =>  FALSE
[22:36:18.789]      // skip if-block "!canReadPins"
[22:36:18.789]    </control>
[22:36:18.790]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:36:18.790]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:18.790]        // =>  TRUE
[22:36:18.790]      <block atomic="false" info="">
[22:36:18.790]        WriteAP(0x00, 0x190008);
[22:36:18.791]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:18.791]        WriteAP(0xF0, 0x01);
[22:36:18.796]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:18.796]      </block>
[22:36:18.796]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:18.796]    </control>
[22:36:18.796]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:36:18.796]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:18.796]        // =>  FALSE
[22:36:18.796]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:18.796]    </control>
[22:36:18.796]    <block atomic="false" info="">
[22:36:18.797]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:18.801]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:36:18.801]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:36:18.801]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:18.803]      __ap = 0; //lets make sure we reset the access point selection
[22:36:18.803]        // -> [__ap <= 0x00000000]
[22:36:18.803]    </block>
[22:36:18.803]  </sequence>
[22:36:18.803]  
[22:36:18.823]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:36:18.823]  
[22:36:18.823]  <debugvars>
[22:36:18.823]    // Pre-defined
[22:36:18.823]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:18.823]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:18.823]    __dp=0x00000000
[22:36:18.823]    __ap=0x00000000
[22:36:18.823]    __traceout=0x00000000      (Trace Disabled)
[22:36:18.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:18.823]    __FlashAddr=0x00000000
[22:36:18.823]    __FlashLen=0x00000000
[22:36:18.823]    __FlashArg=0x00000000
[22:36:18.823]    __FlashOp=0x00000000
[22:36:18.825]    __Result=0x00000000
[22:36:18.825]  </debugvars>
[22:36:18.825]  
[22:36:18.825]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:36:18.825]    <block atomic="false" info="">
[22:36:18.825]      __var deviceID = 0;
[22:36:18.825]        // -> [deviceID <= 0x00000000]
[22:36:18.825]      __var version = 0;
[22:36:18.825]        // -> [version <= 0x00000000]
[22:36:18.825]      __var partNum = 0;
[22:36:18.825]        // -> [partNum <= 0x00000000]
[22:36:18.827]      __var manuf = 0;
[22:36:18.827]        // -> [manuf <= 0x00000000]
[22:36:18.827]      __var isMSPM0G1X0X_G3X0X = 0;
[22:36:18.827]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:36:18.827]      __var isProduction = 0;
[22:36:18.827]        // -> [isProduction <= 0x00000000]
[22:36:18.827]      __var continueId = 0;
[22:36:18.827]        // -> [continueId <= 0x00000000]
[22:36:18.827]      deviceID =   Read32(0x41C40004);
[22:36:18.833]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:36:18.833]        // -> [deviceID <= 0x2BB8802F]
[22:36:18.833]      version = deviceID >> 28;
[22:36:18.833]        // -> [version <= 0x00000002]
[22:36:18.833]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:36:18.833]        // -> [partNum <= 0x0000BB88]
[22:36:18.833]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:36:18.833]        // -> [manuf <= 0x00000017]
[22:36:18.833]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:36:18.833]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:36:18.833]      isProduction = (version > 0);
[22:36:18.833]        // -> [isProduction <= 0x00000001]
[22:36:18.834]    </block>
[22:36:18.834]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:36:18.834]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:36:18.834]        // =>  FALSE
[22:36:18.834]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:36:18.834]    </control>
[22:36:18.834]    <control if="continueId == 4" while="" timeout="0" info="">
[22:36:18.834]      // if-block "continueId == 4"
[22:36:18.834]        // =>  FALSE
[22:36:18.834]      // skip if-block "continueId == 4"
[22:36:18.834]    </control>
[22:36:18.834]    <control if="!isProduction" while="" timeout="0" info="">
[22:36:18.834]      // if-block "!isProduction"
[22:36:18.835]        // =>  FALSE
[22:36:18.835]      // skip if-block "!isProduction"
[22:36:18.835]    </control>
[22:36:18.835]  </sequence>
[22:36:18.835]  
[22:36:23.941]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:36:23.941]  
[22:36:23.941]  <debugvars>
[22:36:23.941]    // Pre-defined
[22:36:23.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:23.941]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:36:23.941]    __dp=0x00000000
[22:36:23.941]    __ap=0x00000000
[22:36:23.941]    __traceout=0x00000000      (Trace Disabled)
[22:36:23.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:23.943]    __FlashAddr=0x00000000
[22:36:23.943]    __FlashLen=0x00000000
[22:36:23.943]    __FlashArg=0x00000000
[22:36:23.943]    __FlashOp=0x00000000
[22:36:23.943]    __Result=0x00000000
[22:36:23.943]  </debugvars>
[22:36:23.943]  
[22:36:23.943]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:36:23.943]    <block atomic="false" info="">
[22:36:23.944]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:36:23.944]        // -> [isSWJ <= 0x00000001]
[22:36:23.944]      __var hasDormant = __protocol & 0x00020000;
[22:36:23.944]        // -> [hasDormant <= 0x00000000]
[22:36:23.944]      __var protType   = __protocol & 0x0000FFFF;
[22:36:23.944]        // -> [protType <= 0x00000002]
[22:36:23.944]    </block>
[22:36:23.944]    <control if="protType == 1" while="" timeout="0" info="">
[22:36:23.944]      // if-block "protType == 1"
[22:36:23.944]        // =>  FALSE
[22:36:23.944]      // skip if-block "protType == 1"
[22:36:23.944]    </control>
[22:36:23.944]    <control if="protType == 2" while="" timeout="0" info="">
[22:36:23.944]      // if-block "protType == 2"
[22:36:23.944]        // =>  TRUE
[22:36:23.946]      <control if="isSWJ" while="" timeout="0" info="">
[22:36:23.946]        // if-block "isSWJ"
[22:36:23.946]          // =>  TRUE
[22:36:23.946]        <control if="hasDormant" while="" timeout="0" info="">
[22:36:23.946]          // if-block "hasDormant"
[22:36:23.946]            // =>  FALSE
[22:36:23.946]          // skip if-block "hasDormant"
[22:36:23.946]        </control>
[22:36:23.946]        <control if="!hasDormant" while="" timeout="0" info="">
[22:36:23.946]          // if-block "!hasDormant"
[22:36:23.946]            // =>  TRUE
[22:36:23.946]          <block atomic="false" info="">
[22:36:23.948]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:36:23.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:23.949]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:36:23.951]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:36:23.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:36:23.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:23.955]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:36:23.957]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:36:23.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:36:23.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:23.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:36:23.957]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:36:23.961]          </block>
[22:36:23.961]          // end if-block "!hasDormant"
[22:36:23.961]        </control>
[22:36:23.961]        // end if-block "isSWJ"
[22:36:23.961]      </control>
[22:36:23.961]      <control if="!isSWJ" while="" timeout="0" info="">
[22:36:23.961]        // if-block "!isSWJ"
[22:36:23.961]          // =>  FALSE
[22:36:23.961]        // skip if-block "!isSWJ"
[22:36:23.961]      </control>
[22:36:23.961]      <block atomic="false" info="">
[22:36:23.961]        ReadDP(0x0);
[22:36:23.965]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:36:23.965]      </block>
[22:36:23.965]      // end if-block "protType == 2"
[22:36:23.965]    </control>
[22:36:23.965]  </sequence>
[22:36:23.965]  
[22:36:23.968]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:36:23.968]  
[22:36:23.968]  <debugvars>
[22:36:23.968]    // Pre-defined
[22:36:23.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:23.971]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:36:23.971]    __dp=0x00000000
[22:36:23.971]    __ap=0x00000000
[22:36:23.971]    __traceout=0x00000000      (Trace Disabled)
[22:36:23.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:23.971]    __FlashAddr=0x00000000
[22:36:23.971]    __FlashLen=0x00000000
[22:36:23.971]    __FlashArg=0x00000000
[22:36:23.971]    __FlashOp=0x00000000
[22:36:23.971]    __Result=0x00000000
[22:36:23.972]  </debugvars>
[22:36:23.972]  
[22:36:23.972]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:36:23.972]    <block atomic="false" info="">
[22:36:23.972]      __var SW_DP_ABORT       = 0x0;
[22:36:23.972]        // -> [SW_DP_ABORT <= 0x00000000]
[22:36:23.972]      __var DP_CTRL_STAT      = 0x4;
[22:36:23.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:36:23.972]      __var DP_SELECT         = 0x8;
[22:36:23.972]        // -> [DP_SELECT <= 0x00000008]
[22:36:23.972]      __var powered_down      = 0;
[22:36:23.972]        // -> [powered_down <= 0x00000000]
[22:36:23.972]      WriteDP(DP_SELECT, 0x00000000);
[22:36:23.976]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:36:23.976]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:36:23.976]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:36:23.976]        // -> [powered_down <= 0x00000001]
[22:36:23.976]    </block>
[22:36:23.976]    <control if="powered_down" while="" timeout="0" info="">
[22:36:23.976]      // if-block "powered_down"
[22:36:23.976]        // =>  TRUE
[22:36:23.976]      <block atomic="false" info="">
[22:36:23.976]        Message(0, "Debug/System power-up request sent");
[22:36:23.981]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:36:23.982]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:36:23.982]      </block>
[22:36:23.982]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:36:23.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:36:23.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:36:23.985]        // while-condition  =>  FALSE
[22:36:23.985]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:36:23.985]      </control>
[22:36:23.985]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:36:23.985]        // if-block "(__protocol & 0xFFFF) == 1"
[22:36:23.985]          // =>  FALSE
[22:36:23.985]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:36:23.985]      </control>
[22:36:23.985]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:36:23.985]        // if-block "(__protocol & 0xFFFF) == 2"
[22:36:23.985]          // =>  TRUE
[22:36:23.985]        <block atomic="false" info="">
[22:36:23.985]          Message(0, "executing SWD power up");
[22:36:23.989]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:36:23.991]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:36:23.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:36:23.991]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:36:23.993]        </block>
[22:36:23.993]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:36:23.993]      </control>
[22:36:23.993]      // end if-block "powered_down"
[22:36:23.993]    </control>
[22:36:23.993]    <block atomic="false" info="">
[22:36:23.993]      __var DEBUG_PORT_VAL    = 0;
[22:36:23.993]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:36:23.993]      __var ACCESS_POINT_VAL  = 0;
[22:36:23.993]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:36:23.993]      __ap = 1; 
[22:36:23.993]        // -> [__ap <= 0x00000001]
[22:36:23.993]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:36:23.997]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:36:23.997]      __ap = 4;
[22:36:23.997]        // -> [__ap <= 0x00000004]
[22:36:23.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:24.001]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:36:24.005]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:36:24.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:24.007]    </block>
[22:36:24.007]    <block atomic="false" info="">
[22:36:24.007]      __var nReset = 0x80;
[22:36:24.007]        // -> [nReset <= 0x00000080]
[22:36:24.007]      __var canReadPins = 0;
[22:36:24.007]        // -> [canReadPins <= 0x00000000]
[22:36:24.007]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:36:24.011]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:36:24.011]        // -> [canReadPins <= 0x00000001]
[22:36:24.011]    </block>
[22:36:24.011]    <control if="" while="1" timeout="200" info="">
[22:36:24.011]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.012]      // while-condition  =>  TRUE
[22:36:24.012]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.013]      // while "1"  (timeout="200")
[22:36:24.013]      // while-condition  =>  TRUE
[22:36:24.017]      // while "1"  (timeout="200")
[22:36:24.017]      // while-condition  =>  TRUE
[22:36:24.017]      // while "1"  (timeout="200")
[22:36:24.017]      // while-condition  =>  TRUE
[22:36:24.017]      // while "1"  (timeout="200")
[22:36:24.017]      // while-condition  =>  TRUE
[22:36:24.017]      // while "1"  (timeout="200")
[22:36:24.017]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.018]      // while-condition  =>  TRUE
[22:36:24.018]      // while "1"  (timeout="200")
[22:36:24.021]      // while-condition  =>  TRUE
[22:36:24.021]      // while "1"  (timeout="200")
[22:36:24.021]      // while  =>  TIMEOUT
[22:36:24.021]      // end while "1"
[22:36:24.021]    </control>
[22:36:24.021]    <control if="canReadPins" while="" timeout="0" info="">
[22:36:24.021]      // if-block "canReadPins"
[22:36:24.021]        // =>  TRUE
[22:36:24.021]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:36:24.022]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:36:24.029]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:36:24.029]        // while-condition  =>  FALSE
[22:36:24.029]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:36:24.029]      </control>
[22:36:24.029]      // end if-block "canReadPins"
[22:36:24.029]    </control>
[22:36:24.029]    <control if="!canReadPins" while="" timeout="0" info="">
[22:36:24.031]      // if-block "!canReadPins"
[22:36:24.031]        // =>  FALSE
[22:36:24.031]      // skip if-block "!canReadPins"
[22:36:24.031]    </control>
[22:36:24.031]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:36:24.031]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:24.031]        // =>  TRUE
[22:36:24.031]      <block atomic="false" info="">
[22:36:24.031]        WriteAP(0x00, 0x190008);
[22:36:24.037]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:24.037]        WriteAP(0xF0, 0x01);
[22:36:24.041]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:24.041]      </block>
[22:36:24.041]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:24.041]    </control>
[22:36:24.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:36:24.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:24.041]        // =>  FALSE
[22:36:24.041]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:24.041]    </control>
[22:36:24.041]    <block atomic="false" info="">
[22:36:24.041]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:24.045]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:36:24.045]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:36:24.045]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:24.045]      __ap = 0; //lets make sure we reset the access point selection
[22:36:24.045]        // -> [__ap <= 0x00000000]
[22:36:24.045]    </block>
[22:36:24.045]  </sequence>
[22:36:24.045]  
[22:36:24.072]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:36:24.072]  
[22:36:24.072]  <debugvars>
[22:36:24.072]    // Pre-defined
[22:36:24.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:24.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:36:24.072]    __dp=0x00000000
[22:36:24.072]    __ap=0x00000000
[22:36:24.072]    __traceout=0x00000000      (Trace Disabled)
[22:36:24.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:24.072]    __FlashAddr=0x00000000
[22:36:24.072]    __FlashLen=0x00000000
[22:36:24.072]    __FlashArg=0x00000000
[22:36:24.072]    __FlashOp=0x00000000
[22:36:24.072]    __Result=0x00000000
[22:36:24.073]  </debugvars>
[22:36:24.073]  
[22:36:24.073]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:36:24.073]    <block atomic="false" info="">
[22:36:24.073]      __var deviceID = 0;
[22:36:24.073]        // -> [deviceID <= 0x00000000]
[22:36:24.073]      __var version = 0;
[22:36:24.073]        // -> [version <= 0x00000000]
[22:36:24.073]      __var partNum = 0;
[22:36:24.073]        // -> [partNum <= 0x00000000]
[22:36:24.073]      __var manuf = 0;
[22:36:24.073]        // -> [manuf <= 0x00000000]
[22:36:24.073]      __var isMSPM0G1X0X_G3X0X = 0;
[22:36:24.073]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:36:24.073]      __var isProduction = 0;
[22:36:24.073]        // -> [isProduction <= 0x00000000]
[22:36:24.073]      __var continueId = 0;
[22:36:24.075]        // -> [continueId <= 0x00000000]
[22:36:24.075]      deviceID =   Read32(0x41C40004);
[22:36:24.083]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:36:24.083]        // -> [deviceID <= 0x2BB8802F]
[22:36:24.083]      version = deviceID >> 28;
[22:36:24.083]        // -> [version <= 0x00000002]
[22:36:24.083]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:36:24.084]        // -> [partNum <= 0x0000BB88]
[22:36:24.084]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:36:24.084]        // -> [manuf <= 0x00000017]
[22:36:24.084]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:36:24.084]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:36:24.084]      isProduction = (version > 0);
[22:36:24.084]        // -> [isProduction <= 0x00000001]
[22:36:24.084]    </block>
[22:36:24.084]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:36:24.084]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:36:24.084]        // =>  FALSE
[22:36:24.084]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:36:24.086]    </control>
[22:36:24.086]    <control if="continueId == 4" while="" timeout="0" info="">
[22:36:24.086]      // if-block "continueId == 4"
[22:36:24.086]        // =>  FALSE
[22:36:24.086]      // skip if-block "continueId == 4"
[22:36:24.086]    </control>
[22:36:24.086]    <control if="!isProduction" while="" timeout="0" info="">
[22:36:24.086]      // if-block "!isProduction"
[22:36:24.086]        // =>  FALSE
[22:36:24.086]      // skip if-block "!isProduction"
[22:36:24.086]    </control>
[22:36:24.086]  </sequence>
[22:36:24.086]  
[22:37:04.468]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:37:04.468]  
[22:37:04.477]  <debugvars>
[22:37:04.477]    // Pre-defined
[22:37:04.477]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:04.477]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:04.477]    __dp=0x00000000
[22:37:04.477]    __ap=0x00000000
[22:37:04.477]    __traceout=0x00000000      (Trace Disabled)
[22:37:04.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:04.477]    __FlashAddr=0x00000000
[22:37:04.477]    __FlashLen=0x00000000
[22:37:04.477]    __FlashArg=0x00000000
[22:37:04.477]    __FlashOp=0x00000000
[22:37:04.477]    __Result=0x00000000
[22:37:04.477]  </debugvars>
[22:37:04.477]  
[22:37:04.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:37:04.477]    <block atomic="false" info="">
[22:37:04.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:37:04.477]        // -> [isSWJ <= 0x00000001]
[22:37:04.477]      __var hasDormant = __protocol & 0x00020000;
[22:37:04.477]        // -> [hasDormant <= 0x00000000]
[22:37:04.477]      __var protType   = __protocol & 0x0000FFFF;
[22:37:04.477]        // -> [protType <= 0x00000002]
[22:37:04.477]    </block>
[22:37:04.477]    <control if="protType == 1" while="" timeout="0" info="">
[22:37:04.477]      // if-block "protType == 1"
[22:37:04.477]        // =>  FALSE
[22:37:04.477]      // skip if-block "protType == 1"
[22:37:04.477]    </control>
[22:37:04.477]    <control if="protType == 2" while="" timeout="0" info="">
[22:37:04.477]      // if-block "protType == 2"
[22:37:04.477]        // =>  TRUE
[22:37:04.477]      <control if="isSWJ" while="" timeout="0" info="">
[22:37:04.477]        // if-block "isSWJ"
[22:37:04.477]          // =>  TRUE
[22:37:04.477]        <control if="hasDormant" while="" timeout="0" info="">
[22:37:04.477]          // if-block "hasDormant"
[22:37:04.477]            // =>  FALSE
[22:37:04.477]          // skip if-block "hasDormant"
[22:37:04.481]        </control>
[22:37:04.481]        <control if="!hasDormant" while="" timeout="0" info="">
[22:37:04.481]          // if-block "!hasDormant"
[22:37:04.481]            // =>  TRUE
[22:37:04.481]          <block atomic="false" info="">
[22:37:04.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:37:04.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:04.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:37:04.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:37:04.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:37:04.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:04.485]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:37:04.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:37:04.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:37:04.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:04.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:37:04.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:37:04.489]          </block>
[22:37:04.489]          // end if-block "!hasDormant"
[22:37:04.489]        </control>
[22:37:04.489]        // end if-block "isSWJ"
[22:37:04.489]      </control>
[22:37:04.489]      <control if="!isSWJ" while="" timeout="0" info="">
[22:37:04.489]        // if-block "!isSWJ"
[22:37:04.489]          // =>  FALSE
[22:37:04.489]        // skip if-block "!isSWJ"
[22:37:04.489]      </control>
[22:37:04.489]      <block atomic="false" info="">
[22:37:04.489]        ReadDP(0x0);
[22:37:04.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:37:04.493]      </block>
[22:37:04.493]      // end if-block "protType == 2"
[22:37:04.493]    </control>
[22:37:04.493]  </sequence>
[22:37:04.493]  
[22:37:04.493]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:37:04.493]  
[22:37:04.493]  <debugvars>
[22:37:04.493]    // Pre-defined
[22:37:04.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:04.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:04.493]    __dp=0x00000000
[22:37:04.493]    __ap=0x00000000
[22:37:04.493]    __traceout=0x00000000      (Trace Disabled)
[22:37:04.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:04.493]    __FlashAddr=0x00000000
[22:37:04.493]    __FlashLen=0x00000000
[22:37:04.493]    __FlashArg=0x00000000
[22:37:04.493]    __FlashOp=0x00000000
[22:37:04.497]    __Result=0x00000000
[22:37:04.497]  </debugvars>
[22:37:04.497]  
[22:37:04.497]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:37:04.497]    <block atomic="false" info="">
[22:37:04.497]      __var SW_DP_ABORT       = 0x0;
[22:37:04.497]        // -> [SW_DP_ABORT <= 0x00000000]
[22:37:04.497]      __var DP_CTRL_STAT      = 0x4;
[22:37:04.497]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:37:04.497]      __var DP_SELECT         = 0x8;
[22:37:04.497]        // -> [DP_SELECT <= 0x00000008]
[22:37:04.497]      __var powered_down      = 0;
[22:37:04.497]        // -> [powered_down <= 0x00000000]
[22:37:04.497]      WriteDP(DP_SELECT, 0x00000000);
[22:37:04.497]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:37:04.497]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:37:04.505]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:37:04.505]        // -> [powered_down <= 0x00000001]
[22:37:04.505]    </block>
[22:37:04.505]    <control if="powered_down" while="" timeout="0" info="">
[22:37:04.505]      // if-block "powered_down"
[22:37:04.505]        // =>  TRUE
[22:37:04.505]      <block atomic="false" info="">
[22:37:04.505]        Message(0, "Debug/System power-up request sent");
[22:37:04.508]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:37:04.510]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:37:04.510]      </block>
[22:37:04.510]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:37:04.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:37:04.510]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:37:04.512]        // while-condition  =>  FALSE
[22:37:04.512]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:37:04.512]      </control>
[22:37:04.512]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:37:04.512]        // if-block "(__protocol & 0xFFFF) == 1"
[22:37:04.512]          // =>  FALSE
[22:37:04.512]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:37:04.512]      </control>
[22:37:04.512]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:37:04.512]        // if-block "(__protocol & 0xFFFF) == 2"
[22:37:04.513]          // =>  TRUE
[22:37:04.513]        <block atomic="false" info="">
[22:37:04.513]          Message(0, "executing SWD power up");
[22:37:04.513]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:37:04.513]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:37:04.513]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:37:04.517]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:37:04.517]        </block>
[22:37:04.517]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:37:04.517]      </control>
[22:37:04.517]      // end if-block "powered_down"
[22:37:04.517]    </control>
[22:37:04.517]    <block atomic="false" info="">
[22:37:04.517]      __var DEBUG_PORT_VAL    = 0;
[22:37:04.517]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:37:04.517]      __var ACCESS_POINT_VAL  = 0;
[22:37:04.517]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:37:04.517]      __ap = 1; 
[22:37:04.517]        // -> [__ap <= 0x00000001]
[22:37:04.517]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:37:04.522]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:37:04.522]      __ap = 4;
[22:37:04.522]        // -> [__ap <= 0x00000004]
[22:37:04.522]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:04.527]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:37:04.527]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:37:04.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:04.527]    </block>
[22:37:04.527]    <block atomic="false" info="">
[22:37:04.527]      __var nReset = 0x80;
[22:37:04.529]        // -> [nReset <= 0x00000080]
[22:37:04.529]      __var canReadPins = 0;
[22:37:04.529]        // -> [canReadPins <= 0x00000000]
[22:37:04.529]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:37:04.529]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:37:04.529]        // -> [canReadPins <= 0x00000001]
[22:37:04.529]    </block>
[22:37:04.529]    <control if="" while="1" timeout="200" info="">
[22:37:04.529]      // while "1"  (timeout="200")
[22:37:04.529]      // while-condition  =>  TRUE
[22:37:04.529]      // while "1"  (timeout="200")
[22:37:04.529]      // while-condition  =>  TRUE
[22:37:04.529]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.532]      // while-condition  =>  TRUE
[22:37:04.532]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.533]      // while "1"  (timeout="200")
[22:37:04.533]      // while-condition  =>  TRUE
[22:37:04.537]      // while "1"  (timeout="200")
[22:37:04.537]      // while  =>  TIMEOUT
[22:37:04.537]      // end while "1"
[22:37:04.537]    </control>
[22:37:04.537]    <control if="canReadPins" while="" timeout="0" info="">
[22:37:04.537]      // if-block "canReadPins"
[22:37:04.537]        // =>  TRUE
[22:37:04.537]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:37:04.537]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:37:04.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:37:04.540]        // while-condition  =>  FALSE
[22:37:04.540]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:37:04.540]      </control>
[22:37:04.540]      // end if-block "canReadPins"
[22:37:04.540]    </control>
[22:37:04.540]    <control if="!canReadPins" while="" timeout="0" info="">
[22:37:04.540]      // if-block "!canReadPins"
[22:37:04.540]        // =>  FALSE
[22:37:04.540]      // skip if-block "!canReadPins"
[22:37:04.540]    </control>
[22:37:04.540]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:37:04.542]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:04.542]        // =>  TRUE
[22:37:04.542]      <block atomic="false" info="">
[22:37:04.542]        WriteAP(0x00, 0x190008);
[22:37:04.542]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:04.542]        WriteAP(0xF0, 0x01);
[22:37:04.546]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:04.546]      </block>
[22:37:04.546]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:04.546]    </control>
[22:37:04.546]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:37:04.546]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:04.546]        // =>  FALSE
[22:37:04.546]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:04.546]    </control>
[22:37:04.546]    <block atomic="false" info="">
[22:37:04.546]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:04.550]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:37:04.550]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:37:04.550]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:04.552]      __ap = 0; //lets make sure we reset the access point selection
[22:37:04.552]        // -> [__ap <= 0x00000000]
[22:37:04.552]    </block>
[22:37:04.552]  </sequence>
[22:37:04.552]  
[22:37:04.581]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:37:04.581]  
[22:37:04.581]  <debugvars>
[22:37:04.581]    // Pre-defined
[22:37:04.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:04.581]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:04.581]    __dp=0x00000000
[22:37:04.581]    __ap=0x00000000
[22:37:04.581]    __traceout=0x00000000      (Trace Disabled)
[22:37:04.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:04.581]    __FlashAddr=0x00000000
[22:37:04.581]    __FlashLen=0x00000000
[22:37:04.581]    __FlashArg=0x00000000
[22:37:04.581]    __FlashOp=0x00000000
[22:37:04.581]    __Result=0x00000000
[22:37:04.581]  </debugvars>
[22:37:04.581]  
[22:37:04.581]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:37:04.581]    <block atomic="false" info="">
[22:37:04.581]      __var deviceID = 0;
[22:37:04.581]        // -> [deviceID <= 0x00000000]
[22:37:04.581]      __var version = 0;
[22:37:04.581]        // -> [version <= 0x00000000]
[22:37:04.581]      __var partNum = 0;
[22:37:04.581]        // -> [partNum <= 0x00000000]
[22:37:04.581]      __var manuf = 0;
[22:37:04.581]        // -> [manuf <= 0x00000000]
[22:37:04.585]      __var isMSPM0G1X0X_G3X0X = 0;
[22:37:04.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:37:04.585]      __var isProduction = 0;
[22:37:04.585]        // -> [isProduction <= 0x00000000]
[22:37:04.585]      __var continueId = 0;
[22:37:04.585]        // -> [continueId <= 0x00000000]
[22:37:04.585]      deviceID =   Read32(0x41C40004);
[22:37:04.591]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:37:04.591]        // -> [deviceID <= 0x2BB8802F]
[22:37:04.591]      version = deviceID >> 28;
[22:37:04.591]        // -> [version <= 0x00000002]
[22:37:04.591]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:37:04.591]        // -> [partNum <= 0x0000BB88]
[22:37:04.591]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:37:04.591]        // -> [manuf <= 0x00000017]
[22:37:04.591]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:37:04.591]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:37:04.591]      isProduction = (version > 0);
[22:37:04.591]        // -> [isProduction <= 0x00000001]
[22:37:04.591]    </block>
[22:37:04.591]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:37:04.591]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:37:04.593]        // =>  FALSE
[22:37:04.593]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:37:04.593]    </control>
[22:37:04.593]    <control if="continueId == 4" while="" timeout="0" info="">
[22:37:04.593]      // if-block "continueId == 4"
[22:37:04.593]        // =>  FALSE
[22:37:04.593]      // skip if-block "continueId == 4"
[22:37:04.593]    </control>
[22:37:04.593]    <control if="!isProduction" while="" timeout="0" info="">
[22:37:04.593]      // if-block "!isProduction"
[22:37:04.593]        // =>  FALSE
[22:37:04.593]      // skip if-block "!isProduction"
[22:37:04.593]    </control>
[22:37:04.593]  </sequence>
[22:37:04.593]  
[22:37:09.712]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:37:09.712]  
[22:37:09.719]  <debugvars>
[22:37:09.719]    // Pre-defined
[22:37:09.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:09.719]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:09.719]    __dp=0x00000000
[22:37:09.719]    __ap=0x00000000
[22:37:09.719]    __traceout=0x00000000      (Trace Disabled)
[22:37:09.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:09.719]    __FlashAddr=0x00000000
[22:37:09.719]    __FlashLen=0x00000000
[22:37:09.719]    __FlashArg=0x00000000
[22:37:09.719]    __FlashOp=0x00000000
[22:37:09.719]    __Result=0x00000000
[22:37:09.719]  </debugvars>
[22:37:09.719]  
[22:37:09.719]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:37:09.719]    <block atomic="false" info="">
[22:37:09.719]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:37:09.719]        // -> [isSWJ <= 0x00000001]
[22:37:09.719]      __var hasDormant = __protocol & 0x00020000;
[22:37:09.719]        // -> [hasDormant <= 0x00000000]
[22:37:09.722]      __var protType   = __protocol & 0x0000FFFF;
[22:37:09.722]        // -> [protType <= 0x00000002]
[22:37:09.722]    </block>
[22:37:09.722]    <control if="protType == 1" while="" timeout="0" info="">
[22:37:09.722]      // if-block "protType == 1"
[22:37:09.722]        // =>  FALSE
[22:37:09.722]      // skip if-block "protType == 1"
[22:37:09.722]    </control>
[22:37:09.722]    <control if="protType == 2" while="" timeout="0" info="">
[22:37:09.722]      // if-block "protType == 2"
[22:37:09.722]        // =>  TRUE
[22:37:09.722]      <control if="isSWJ" while="" timeout="0" info="">
[22:37:09.722]        // if-block "isSWJ"
[22:37:09.723]          // =>  TRUE
[22:37:09.723]        <control if="hasDormant" while="" timeout="0" info="">
[22:37:09.723]          // if-block "hasDormant"
[22:37:09.723]            // =>  FALSE
[22:37:09.723]          // skip if-block "hasDormant"
[22:37:09.723]        </control>
[22:37:09.723]        <control if="!hasDormant" while="" timeout="0" info="">
[22:37:09.723]          // if-block "!hasDormant"
[22:37:09.723]            // =>  TRUE
[22:37:09.723]          <block atomic="false" info="">
[22:37:09.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:37:09.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:09.725]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:37:09.725]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:37:09.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:37:09.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:09.727]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:37:09.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:37:09.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:37:09.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:09.732]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:37:09.733]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:37:09.733]          </block>
[22:37:09.733]          // end if-block "!hasDormant"
[22:37:09.733]        </control>
[22:37:09.733]        // end if-block "isSWJ"
[22:37:09.733]      </control>
[22:37:09.733]      <control if="!isSWJ" while="" timeout="0" info="">
[22:37:09.733]        // if-block "!isSWJ"
[22:37:09.733]          // =>  FALSE
[22:37:09.733]        // skip if-block "!isSWJ"
[22:37:09.733]      </control>
[22:37:09.733]      <block atomic="false" info="">
[22:37:09.733]        ReadDP(0x0);
[22:37:09.736]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:37:09.736]      </block>
[22:37:09.736]      // end if-block "protType == 2"
[22:37:09.736]    </control>
[22:37:09.736]  </sequence>
[22:37:09.737]  
[22:37:09.742]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:37:09.742]  
[22:37:09.742]  <debugvars>
[22:37:09.742]    // Pre-defined
[22:37:09.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:09.742]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:09.742]    __dp=0x00000000
[22:37:09.742]    __ap=0x00000000
[22:37:09.742]    __traceout=0x00000000      (Trace Disabled)
[22:37:09.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:09.742]    __FlashAddr=0x00000000
[22:37:09.742]    __FlashLen=0x00000000
[22:37:09.742]    __FlashArg=0x00000000
[22:37:09.742]    __FlashOp=0x00000000
[22:37:09.742]    __Result=0x00000000
[22:37:09.742]  </debugvars>
[22:37:09.742]  
[22:37:09.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:37:09.744]    <block atomic="false" info="">
[22:37:09.744]      __var SW_DP_ABORT       = 0x0;
[22:37:09.744]        // -> [SW_DP_ABORT <= 0x00000000]
[22:37:09.744]      __var DP_CTRL_STAT      = 0x4;
[22:37:09.744]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:37:09.744]      __var DP_SELECT         = 0x8;
[22:37:09.744]        // -> [DP_SELECT <= 0x00000008]
[22:37:09.744]      __var powered_down      = 0;
[22:37:09.744]        // -> [powered_down <= 0x00000000]
[22:37:09.744]      WriteDP(DP_SELECT, 0x00000000);
[22:37:09.749]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:37:09.749]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:37:09.752]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:37:09.752]        // -> [powered_down <= 0x00000001]
[22:37:09.752]    </block>
[22:37:09.752]    <control if="powered_down" while="" timeout="0" info="">
[22:37:09.752]      // if-block "powered_down"
[22:37:09.752]        // =>  TRUE
[22:37:09.752]      <block atomic="false" info="">
[22:37:09.752]        Message(0, "Debug/System power-up request sent");
[22:37:09.753]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:37:09.756]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:37:09.756]      </block>
[22:37:09.756]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:37:09.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:37:09.757]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:37:09.757]        // while-condition  =>  FALSE
[22:37:09.757]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:37:09.758]      </control>
[22:37:09.758]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:37:09.758]        // if-block "(__protocol & 0xFFFF) == 1"
[22:37:09.758]          // =>  FALSE
[22:37:09.758]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:37:09.758]      </control>
[22:37:09.758]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:37:09.758]        // if-block "(__protocol & 0xFFFF) == 2"
[22:37:09.758]          // =>  TRUE
[22:37:09.760]        <block atomic="false" info="">
[22:37:09.760]          Message(0, "executing SWD power up");
[22:37:09.760]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:37:09.762]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:37:09.762]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:37:09.764]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:37:09.764]        </block>
[22:37:09.764]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:37:09.766]      </control>
[22:37:09.766]      // end if-block "powered_down"
[22:37:09.766]    </control>
[22:37:09.766]    <block atomic="false" info="">
[22:37:09.766]      __var DEBUG_PORT_VAL    = 0;
[22:37:09.766]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:37:09.766]      __var ACCESS_POINT_VAL  = 0;
[22:37:09.766]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:37:09.766]      __ap = 1; 
[22:37:09.766]        // -> [__ap <= 0x00000001]
[22:37:09.766]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:37:09.769]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:37:09.771]      __ap = 4;
[22:37:09.771]        // -> [__ap <= 0x00000004]
[22:37:09.771]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:09.774]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:37:09.774]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:37:09.774]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:09.774]    </block>
[22:37:09.777]    <block atomic="false" info="">
[22:37:09.777]      __var nReset = 0x80;
[22:37:09.777]        // -> [nReset <= 0x00000080]
[22:37:09.777]      __var canReadPins = 0;
[22:37:09.777]        // -> [canReadPins <= 0x00000000]
[22:37:09.777]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:37:09.777]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:37:09.777]        // -> [canReadPins <= 0x00000001]
[22:37:09.777]    </block>
[22:37:09.777]    <control if="" while="1" timeout="200" info="">
[22:37:09.779]      // while "1"  (timeout="200")
[22:37:09.779]      // while-condition  =>  TRUE
[22:37:09.779]      // while "1"  (timeout="200")
[22:37:09.779]      // while-condition  =>  TRUE
[22:37:09.779]      // while "1"  (timeout="200")
[22:37:09.779]      // while-condition  =>  TRUE
[22:37:09.779]      // while "1"  (timeout="200")
[22:37:09.779]      // while-condition  =>  TRUE
[22:37:09.779]      // while "1"  (timeout="200")
[22:37:09.781]      // while-condition  =>  TRUE
[22:37:09.781]      // while "1"  (timeout="200")
[22:37:09.781]      // while-condition  =>  TRUE
[22:37:09.781]      // while "1"  (timeout="200")
[22:37:09.781]      // while-condition  =>  TRUE
[22:37:09.781]      // while "1"  (timeout="200")
[22:37:09.781]      // while-condition  =>  TRUE
[22:37:09.782]      // while "1"  (timeout="200")
[22:37:09.782]      // while-condition  =>  TRUE
[22:37:09.782]      // while "1"  (timeout="200")
[22:37:09.782]      // while-condition  =>  TRUE
[22:37:09.782]      // while "1"  (timeout="200")
[22:37:09.782]      // while-condition  =>  TRUE
[22:37:09.782]      // while "1"  (timeout="200")
[22:37:09.782]      // while-condition  =>  TRUE
[22:37:09.782]      // while "1"  (timeout="200")
[22:37:09.782]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.783]      // while "1"  (timeout="200")
[22:37:09.783]      // while-condition  =>  TRUE
[22:37:09.785]      // while "1"  (timeout="200")
[22:37:09.785]      // while  =>  TIMEOUT
[22:37:09.785]      // end while "1"
[22:37:09.785]    </control>
[22:37:09.785]    <control if="canReadPins" while="" timeout="0" info="">
[22:37:09.785]      // if-block "canReadPins"
[22:37:09.785]        // =>  TRUE
[22:37:09.785]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:37:09.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:37:09.785]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:37:09.785]        // while-condition  =>  FALSE
[22:37:09.785]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:37:09.785]      </control>
[22:37:09.785]      // end if-block "canReadPins"
[22:37:09.785]    </control>
[22:37:09.785]    <control if="!canReadPins" while="" timeout="0" info="">
[22:37:09.785]      // if-block "!canReadPins"
[22:37:09.785]        // =>  FALSE
[22:37:09.785]      // skip if-block "!canReadPins"
[22:37:09.785]    </control>
[22:37:09.789]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:37:09.789]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:09.789]        // =>  TRUE
[22:37:09.789]      <block atomic="false" info="">
[22:37:09.789]        WriteAP(0x00, 0x190008);
[22:37:09.791]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:09.791]        WriteAP(0xF0, 0x01);
[22:37:09.794]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:09.794]      </block>
[22:37:09.794]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:09.794]    </control>
[22:37:09.794]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:37:09.794]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:09.794]        // =>  FALSE
[22:37:09.794]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:09.794]    </control>
[22:37:09.794]    <block atomic="false" info="">
[22:37:09.796]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:09.800]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:37:09.800]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:37:09.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:09.803]      __ap = 0; //lets make sure we reset the access point selection
[22:37:09.803]        // -> [__ap <= 0x00000000]
[22:37:09.803]    </block>
[22:37:09.803]  </sequence>
[22:37:09.803]  
[22:37:09.829]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:37:09.829]  
[22:37:09.831]  <debugvars>
[22:37:09.831]    // Pre-defined
[22:37:09.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:09.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:09.831]    __dp=0x00000000
[22:37:09.831]    __ap=0x00000000
[22:37:09.832]    __traceout=0x00000000      (Trace Disabled)
[22:37:09.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:09.832]    __FlashAddr=0x00000000
[22:37:09.832]    __FlashLen=0x00000000
[22:37:09.832]    __FlashArg=0x00000000
[22:37:09.832]    __FlashOp=0x00000000
[22:37:09.832]    __Result=0x00000000
[22:37:09.832]  </debugvars>
[22:37:09.832]  
[22:37:09.832]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:37:09.832]    <block atomic="false" info="">
[22:37:09.832]      __var deviceID = 0;
[22:37:09.832]        // -> [deviceID <= 0x00000000]
[22:37:09.832]      __var version = 0;
[22:37:09.832]        // -> [version <= 0x00000000]
[22:37:09.832]      __var partNum = 0;
[22:37:09.832]        // -> [partNum <= 0x00000000]
[22:37:09.832]      __var manuf = 0;
[22:37:09.832]        // -> [manuf <= 0x00000000]
[22:37:09.832]      __var isMSPM0G1X0X_G3X0X = 0;
[22:37:09.832]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:37:09.835]      __var isProduction = 0;
[22:37:09.835]        // -> [isProduction <= 0x00000000]
[22:37:09.835]      __var continueId = 0;
[22:37:09.835]        // -> [continueId <= 0x00000000]
[22:37:09.835]      deviceID =   Read32(0x41C40004);
[22:37:09.839]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:37:09.839]        // -> [deviceID <= 0x2BB8802F]
[22:37:09.839]      version = deviceID >> 28;
[22:37:09.839]        // -> [version <= 0x00000002]
[22:37:09.839]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:37:09.839]        // -> [partNum <= 0x0000BB88]
[22:37:09.839]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:37:09.839]        // -> [manuf <= 0x00000017]
[22:37:09.839]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:37:09.839]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:37:09.839]      isProduction = (version > 0);
[22:37:09.839]        // -> [isProduction <= 0x00000001]
[22:37:09.839]    </block>
[22:37:09.842]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:37:09.842]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:37:09.842]        // =>  FALSE
[22:37:09.842]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:37:09.842]    </control>
[22:37:09.842]    <control if="continueId == 4" while="" timeout="0" info="">
[22:37:09.843]      // if-block "continueId == 4"
[22:37:09.843]        // =>  FALSE
[22:37:09.843]      // skip if-block "continueId == 4"
[22:37:09.843]    </control>
[22:37:09.843]    <control if="!isProduction" while="" timeout="0" info="">
[22:37:09.843]      // if-block "!isProduction"
[22:37:09.843]        // =>  FALSE
[22:37:09.843]      // skip if-block "!isProduction"
[22:37:09.843]    </control>
[22:37:09.843]  </sequence>
[22:37:09.843]  
[22:39:29.515]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:39:29.515]  
[22:39:29.524]  <debugvars>
[22:39:29.524]    // Pre-defined
[22:39:29.524]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:29.525]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:29.525]    __dp=0x00000000
[22:39:29.525]    __ap=0x00000000
[22:39:29.525]    __traceout=0x00000000      (Trace Disabled)
[22:39:29.525]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:29.525]    __FlashAddr=0x00000000
[22:39:29.525]    __FlashLen=0x00000000
[22:39:29.525]    __FlashArg=0x00000000
[22:39:29.525]    __FlashOp=0x00000000
[22:39:29.525]    __Result=0x00000000
[22:39:29.525]  </debugvars>
[22:39:29.525]  
[22:39:29.525]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:39:29.525]    <block atomic="false" info="">
[22:39:29.525]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:39:29.525]        // -> [isSWJ <= 0x00000001]
[22:39:29.525]      __var hasDormant = __protocol & 0x00020000;
[22:39:29.525]        // -> [hasDormant <= 0x00000000]
[22:39:29.525]      __var protType   = __protocol & 0x0000FFFF;
[22:39:29.525]        // -> [protType <= 0x00000002]
[22:39:29.527]    </block>
[22:39:29.527]    <control if="protType == 1" while="" timeout="0" info="">
[22:39:29.527]      // if-block "protType == 1"
[22:39:29.527]        // =>  FALSE
[22:39:29.527]      // skip if-block "protType == 1"
[22:39:29.527]    </control>
[22:39:29.527]    <control if="protType == 2" while="" timeout="0" info="">
[22:39:29.527]      // if-block "protType == 2"
[22:39:29.527]        // =>  TRUE
[22:39:29.527]      <control if="isSWJ" while="" timeout="0" info="">
[22:39:29.527]        // if-block "isSWJ"
[22:39:29.527]          // =>  TRUE
[22:39:29.527]        <control if="hasDormant" while="" timeout="0" info="">
[22:39:29.527]          // if-block "hasDormant"
[22:39:29.527]            // =>  FALSE
[22:39:29.527]          // skip if-block "hasDormant"
[22:39:29.527]        </control>
[22:39:29.527]        <control if="!hasDormant" while="" timeout="0" info="">
[22:39:29.527]          // if-block "!hasDormant"
[22:39:29.527]            // =>  TRUE
[22:39:29.527]          <block atomic="false" info="">
[22:39:29.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:39:29.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:29.531]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:39:29.531]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:39:29.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:39:29.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:29.534]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:39:29.536]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:39:29.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:39:29.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:29.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:39:29.544]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:39:29.545]          </block>
[22:39:29.545]          // end if-block "!hasDormant"
[22:39:29.545]        </control>
[22:39:29.545]        // end if-block "isSWJ"
[22:39:29.545]      </control>
[22:39:29.545]      <control if="!isSWJ" while="" timeout="0" info="">
[22:39:29.545]        // if-block "!isSWJ"
[22:39:29.545]          // =>  FALSE
[22:39:29.545]        // skip if-block "!isSWJ"
[22:39:29.545]      </control>
[22:39:29.545]      <block atomic="false" info="">
[22:39:29.545]        ReadDP(0x0);
[22:39:29.545]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:39:29.548]      </block>
[22:39:29.548]      // end if-block "protType == 2"
[22:39:29.548]    </control>
[22:39:29.548]  </sequence>
[22:39:29.548]  
[22:39:29.548]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:39:29.548]  
[22:39:29.548]  <debugvars>
[22:39:29.548]    // Pre-defined
[22:39:29.548]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:29.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:29.552]    __dp=0x00000000
[22:39:29.552]    __ap=0x00000000
[22:39:29.552]    __traceout=0x00000000      (Trace Disabled)
[22:39:29.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:29.552]    __FlashAddr=0x00000000
[22:39:29.552]    __FlashLen=0x00000000
[22:39:29.552]    __FlashArg=0x00000000
[22:39:29.552]    __FlashOp=0x00000000
[22:39:29.552]    __Result=0x00000000
[22:39:29.552]  </debugvars>
[22:39:29.552]  
[22:39:29.552]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:39:29.552]    <block atomic="false" info="">
[22:39:29.552]      __var SW_DP_ABORT       = 0x0;
[22:39:29.552]        // -> [SW_DP_ABORT <= 0x00000000]
[22:39:29.552]      __var DP_CTRL_STAT      = 0x4;
[22:39:29.552]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:39:29.552]      __var DP_SELECT         = 0x8;
[22:39:29.552]        // -> [DP_SELECT <= 0x00000008]
[22:39:29.552]      __var powered_down      = 0;
[22:39:29.552]        // -> [powered_down <= 0x00000000]
[22:39:29.555]      WriteDP(DP_SELECT, 0x00000000);
[22:39:29.557]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:39:29.557]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:39:29.558]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:39:29.558]        // -> [powered_down <= 0x00000001]
[22:39:29.558]    </block>
[22:39:29.558]    <control if="powered_down" while="" timeout="0" info="">
[22:39:29.558]      // if-block "powered_down"
[22:39:29.558]        // =>  TRUE
[22:39:29.558]      <block atomic="false" info="">
[22:39:29.558]        Message(0, "Debug/System power-up request sent");
[22:39:29.560]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:39:29.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:39:29.564]      </block>
[22:39:29.564]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:39:29.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:39:29.564]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:39:29.564]        // while-condition  =>  FALSE
[22:39:29.564]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:39:29.564]      </control>
[22:39:29.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:39:29.564]        // if-block "(__protocol & 0xFFFF) == 1"
[22:39:29.564]          // =>  FALSE
[22:39:29.564]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:39:29.564]      </control>
[22:39:29.564]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:39:29.567]        // if-block "(__protocol & 0xFFFF) == 2"
[22:39:29.567]          // =>  TRUE
[22:39:29.567]        <block atomic="false" info="">
[22:39:29.567]          Message(0, "executing SWD power up");
[22:39:29.569]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:39:29.571]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:39:29.571]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:39:29.573]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:39:29.573]        </block>
[22:39:29.573]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:39:29.573]      </control>
[22:39:29.573]      // end if-block "powered_down"
[22:39:29.573]    </control>
[22:39:29.573]    <block atomic="false" info="">
[22:39:29.574]      __var DEBUG_PORT_VAL    = 0;
[22:39:29.574]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:39:29.574]      __var ACCESS_POINT_VAL  = 0;
[22:39:29.574]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:39:29.574]      __ap = 1; 
[22:39:29.574]        // -> [__ap <= 0x00000001]
[22:39:29.574]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:39:29.577]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:39:29.577]      __ap = 4;
[22:39:29.577]        // -> [__ap <= 0x00000004]
[22:39:29.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:39:29.580]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:39:29.580]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:39:29.580]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:39:29.584]    </block>
[22:39:29.584]    <block atomic="false" info="">
[22:39:29.584]      __var nReset = 0x80;
[22:39:29.584]        // -> [nReset <= 0x00000080]
[22:39:29.584]      __var canReadPins = 0;
[22:39:29.584]        // -> [canReadPins <= 0x00000000]
[22:39:29.584]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:39:29.584]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:39:29.584]        // -> [canReadPins <= 0x00000001]
[22:39:29.584]    </block>
[22:39:29.584]    <control if="" while="1" timeout="200" info="">
[22:39:29.584]      // while "1"  (timeout="200")
[22:39:29.584]      // while-condition  =>  TRUE
[22:39:29.584]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.588]      // while "1"  (timeout="200")
[22:39:29.588]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.592]      // while "1"  (timeout="200")
[22:39:29.592]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.594]      // while-condition  =>  TRUE
[22:39:29.594]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.596]      // while-condition  =>  TRUE
[22:39:29.596]      // while "1"  (timeout="200")
[22:39:29.600]      // while-condition  =>  TRUE
[22:39:29.600]      // while "1"  (timeout="200")
[22:39:29.600]      // while  =>  TIMEOUT
[22:39:29.600]      // end while "1"
[22:39:29.600]    </control>
[22:39:29.600]    <control if="canReadPins" while="" timeout="0" info="">
[22:39:29.600]      // if-block "canReadPins"
[22:39:29.600]        // =>  TRUE
[22:39:29.600]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:39:29.600]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:39:29.604]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:39:29.604]        // while-condition  =>  FALSE
[22:39:29.604]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:39:29.604]      </control>
[22:39:29.604]      // end if-block "canReadPins"
[22:39:29.604]    </control>
[22:39:29.604]    <control if="!canReadPins" while="" timeout="0" info="">
[22:39:29.604]      // if-block "!canReadPins"
[22:39:29.604]        // =>  FALSE
[22:39:29.604]      // skip if-block "!canReadPins"
[22:39:29.609]    </control>
[22:39:29.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:39:29.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:39:29.609]        // =>  TRUE
[22:39:29.609]      <block atomic="false" info="">
[22:39:29.609]        WriteAP(0x00, 0x190008);
[22:39:29.609]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:39:29.609]        WriteAP(0xF0, 0x01);
[22:39:29.613]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:39:29.615]      </block>
[22:39:29.615]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:39:29.615]    </control>
[22:39:29.615]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:39:29.615]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:39:29.615]        // =>  FALSE
[22:39:29.615]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:39:29.615]    </control>
[22:39:29.615]    <block atomic="false" info="">
[22:39:29.615]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:39:29.618]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:39:29.618]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:39:29.618]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:39:29.621]      __ap = 0; //lets make sure we reset the access point selection
[22:39:29.621]        // -> [__ap <= 0x00000000]
[22:39:29.621]    </block>
[22:39:29.621]  </sequence>
[22:39:29.621]  
[22:39:29.652]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:39:29.652]  
[22:39:29.652]  <debugvars>
[22:39:29.652]    // Pre-defined
[22:39:29.652]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:29.652]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:29.655]    __dp=0x00000000
[22:39:29.655]    __ap=0x00000000
[22:39:29.655]    __traceout=0x00000000      (Trace Disabled)
[22:39:29.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:29.655]    __FlashAddr=0x00000000
[22:39:29.655]    __FlashLen=0x00000000
[22:39:29.655]    __FlashArg=0x00000000
[22:39:29.655]    __FlashOp=0x00000000
[22:39:29.655]    __Result=0x00000000
[22:39:29.655]  </debugvars>
[22:39:29.656]  
[22:39:29.656]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:39:29.656]    <block atomic="false" info="">
[22:39:29.656]      __var deviceID = 0;
[22:39:29.656]        // -> [deviceID <= 0x00000000]
[22:39:29.656]      __var version = 0;
[22:39:29.656]        // -> [version <= 0x00000000]
[22:39:29.656]      __var partNum = 0;
[22:39:29.656]        // -> [partNum <= 0x00000000]
[22:39:29.656]      __var manuf = 0;
[22:39:29.656]        // -> [manuf <= 0x00000000]
[22:39:29.656]      __var isMSPM0G1X0X_G3X0X = 0;
[22:39:29.656]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:39:29.656]      __var isProduction = 0;
[22:39:29.656]        // -> [isProduction <= 0x00000000]
[22:39:29.656]      __var continueId = 0;
[22:39:29.656]        // -> [continueId <= 0x00000000]
[22:39:29.656]      deviceID =   Read32(0x41C40004);
[22:39:29.666]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:39:29.666]        // -> [deviceID <= 0x2BB8802F]
[22:39:29.666]      version = deviceID >> 28;
[22:39:29.669]        // -> [version <= 0x00000002]
[22:39:29.669]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:39:29.669]        // -> [partNum <= 0x0000BB88]
[22:39:29.669]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:39:29.669]        // -> [manuf <= 0x00000017]
[22:39:29.669]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:39:29.669]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:39:29.669]      isProduction = (version > 0);
[22:39:29.669]        // -> [isProduction <= 0x00000001]
[22:39:29.670]    </block>
[22:39:29.670]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:39:29.670]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:39:29.670]        // =>  FALSE
[22:39:29.670]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:39:29.670]    </control>
[22:39:29.670]    <control if="continueId == 4" while="" timeout="0" info="">
[22:39:29.670]      // if-block "continueId == 4"
[22:39:29.670]        // =>  FALSE
[22:39:29.671]      // skip if-block "continueId == 4"
[22:39:29.671]    </control>
[22:39:29.671]    <control if="!isProduction" while="" timeout="0" info="">
[22:39:29.671]      // if-block "!isProduction"
[22:39:29.671]        // =>  FALSE
[22:39:29.671]      // skip if-block "!isProduction"
[22:39:29.671]    </control>
[22:39:29.671]  </sequence>
[22:39:29.671]  
[22:40:24.958]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:40:24.958]  
[22:40:24.966]  <debugvars>
[22:40:24.966]    // Pre-defined
[22:40:24.966]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:24.966]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:24.966]    __dp=0x00000000
[22:40:24.966]    __ap=0x00000000
[22:40:24.966]    __traceout=0x00000000      (Trace Disabled)
[22:40:24.966]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:24.966]    __FlashAddr=0x00000000
[22:40:24.966]    __FlashLen=0x00000000
[22:40:24.966]    __FlashArg=0x00000000
[22:40:24.966]    __FlashOp=0x00000000
[22:40:24.967]    __Result=0x00000000
[22:40:24.967]  </debugvars>
[22:40:24.967]  
[22:40:24.967]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:40:24.967]    <block atomic="false" info="">
[22:40:24.967]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:40:24.967]        // -> [isSWJ <= 0x00000001]
[22:40:24.967]      __var hasDormant = __protocol & 0x00020000;
[22:40:24.967]        // -> [hasDormant <= 0x00000000]
[22:40:24.967]      __var protType   = __protocol & 0x0000FFFF;
[22:40:24.967]        // -> [protType <= 0x00000002]
[22:40:24.967]    </block>
[22:40:24.967]    <control if="protType == 1" while="" timeout="0" info="">
[22:40:24.967]      // if-block "protType == 1"
[22:40:24.967]        // =>  FALSE
[22:40:24.967]      // skip if-block "protType == 1"
[22:40:24.967]    </control>
[22:40:24.967]    <control if="protType == 2" while="" timeout="0" info="">
[22:40:24.967]      // if-block "protType == 2"
[22:40:24.967]        // =>  TRUE
[22:40:24.967]      <control if="isSWJ" while="" timeout="0" info="">
[22:40:24.967]        // if-block "isSWJ"
[22:40:24.967]          // =>  TRUE
[22:40:24.967]        <control if="hasDormant" while="" timeout="0" info="">
[22:40:24.970]          // if-block "hasDormant"
[22:40:24.970]            // =>  FALSE
[22:40:24.970]          // skip if-block "hasDormant"
[22:40:24.970]        </control>
[22:40:24.970]        <control if="!hasDormant" while="" timeout="0" info="">
[22:40:24.970]          // if-block "!hasDormant"
[22:40:24.970]            // =>  TRUE
[22:40:24.970]          <block atomic="false" info="">
[22:40:24.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:40:24.970]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:24.970]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:40:24.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:40:24.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:40:24.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:24.978]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:40:24.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:40:24.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:40:24.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:24.982]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:40:24.985]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:40:24.985]          </block>
[22:40:24.985]          // end if-block "!hasDormant"
[22:40:24.985]        </control>
[22:40:24.985]        // end if-block "isSWJ"
[22:40:24.985]      </control>
[22:40:24.985]      <control if="!isSWJ" while="" timeout="0" info="">
[22:40:24.985]        // if-block "!isSWJ"
[22:40:24.985]          // =>  FALSE
[22:40:24.985]        // skip if-block "!isSWJ"
[22:40:24.985]      </control>
[22:40:24.985]      <block atomic="false" info="">
[22:40:24.986]        ReadDP(0x0);
[22:40:24.987]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:40:24.987]      </block>
[22:40:24.987]      // end if-block "protType == 2"
[22:40:24.987]    </control>
[22:40:24.987]  </sequence>
[22:40:24.987]  
[22:40:24.989]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:40:24.989]  
[22:40:24.989]  <debugvars>
[22:40:24.989]    // Pre-defined
[22:40:24.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:24.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:24.989]    __dp=0x00000000
[22:40:24.989]    __ap=0x00000000
[22:40:24.989]    __traceout=0x00000000      (Trace Disabled)
[22:40:24.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:24.989]    __FlashAddr=0x00000000
[22:40:24.989]    __FlashLen=0x00000000
[22:40:24.989]    __FlashArg=0x00000000
[22:40:24.989]    __FlashOp=0x00000000
[22:40:24.989]    __Result=0x00000000
[22:40:24.989]  </debugvars>
[22:40:24.989]  
[22:40:24.989]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:40:24.989]    <block atomic="false" info="">
[22:40:24.989]      __var SW_DP_ABORT       = 0x0;
[22:40:24.989]        // -> [SW_DP_ABORT <= 0x00000000]
[22:40:24.989]      __var DP_CTRL_STAT      = 0x4;
[22:40:24.989]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:40:24.989]      __var DP_SELECT         = 0x8;
[22:40:24.989]        // -> [DP_SELECT <= 0x00000008]
[22:40:24.989]      __var powered_down      = 0;
[22:40:24.989]        // -> [powered_down <= 0x00000000]
[22:40:24.989]      WriteDP(DP_SELECT, 0x00000000);
[22:40:24.996]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:40:24.996]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:40:24.997]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:40:24.997]        // -> [powered_down <= 0x00000001]
[22:40:24.997]    </block>
[22:40:24.997]    <control if="powered_down" while="" timeout="0" info="">
[22:40:24.997]      // if-block "powered_down"
[22:40:24.997]        // =>  TRUE
[22:40:24.997]      <block atomic="false" info="">
[22:40:24.997]        Message(0, "Debug/System power-up request sent");
[22:40:25.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:40:25.003]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:40:25.003]      </block>
[22:40:25.003]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:40:25.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:25.005]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:40:25.005]        // while-condition  =>  FALSE
[22:40:25.005]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:40:25.005]      </control>
[22:40:25.005]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:40:25.005]        // if-block "(__protocol & 0xFFFF) == 1"
[22:40:25.005]          // =>  FALSE
[22:40:25.005]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:40:25.005]      </control>
[22:40:25.006]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:40:25.006]        // if-block "(__protocol & 0xFFFF) == 2"
[22:40:25.006]          // =>  TRUE
[22:40:25.006]        <block atomic="false" info="">
[22:40:25.006]          Message(0, "executing SWD power up");
[22:40:25.008]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:40:25.008]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:40:25.008]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:40:25.010]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:40:25.010]        </block>
[22:40:25.010]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:40:25.010]      </control>
[22:40:25.012]      // end if-block "powered_down"
[22:40:25.012]    </control>
[22:40:25.012]    <block atomic="false" info="">
[22:40:25.012]      __var DEBUG_PORT_VAL    = 0;
[22:40:25.012]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:40:25.012]      __var ACCESS_POINT_VAL  = 0;
[22:40:25.012]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:40:25.012]      __ap = 1; 
[22:40:25.012]        // -> [__ap <= 0x00000001]
[22:40:25.012]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:40:25.018]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:40:25.018]      __ap = 4;
[22:40:25.018]        // -> [__ap <= 0x00000004]
[22:40:25.018]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:25.022]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:40:25.026]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:40:25.026]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:25.027]    </block>
[22:40:25.027]    <block atomic="false" info="">
[22:40:25.027]      __var nReset = 0x80;
[22:40:25.027]        // -> [nReset <= 0x00000080]
[22:40:25.027]      __var canReadPins = 0;
[22:40:25.027]        // -> [canReadPins <= 0x00000000]
[22:40:25.027]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:40:25.027]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:40:25.027]        // -> [canReadPins <= 0x00000001]
[22:40:25.027]    </block>
[22:40:25.027]    <control if="" while="1" timeout="200" info="">
[22:40:25.027]      // while "1"  (timeout="200")
[22:40:25.027]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.030]      // while-condition  =>  TRUE
[22:40:25.030]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.034]      // while "1"  (timeout="200")
[22:40:25.034]      // while-condition  =>  TRUE
[22:40:25.036]      // while "1"  (timeout="200")
[22:40:25.036]      // while  =>  TIMEOUT
[22:40:25.036]      // end while "1"
[22:40:25.036]    </control>
[22:40:25.036]    <control if="canReadPins" while="" timeout="0" info="">
[22:40:25.036]      // if-block "canReadPins"
[22:40:25.036]        // =>  TRUE
[22:40:25.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:40:25.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:40:25.038]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:40:25.038]        // while-condition  =>  FALSE
[22:40:25.038]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:40:25.039]      </control>
[22:40:25.039]      // end if-block "canReadPins"
[22:40:25.039]    </control>
[22:40:25.039]    <control if="!canReadPins" while="" timeout="0" info="">
[22:40:25.039]      // if-block "!canReadPins"
[22:40:25.039]        // =>  FALSE
[22:40:25.039]      // skip if-block "!canReadPins"
[22:40:25.039]    </control>
[22:40:25.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:40:25.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:25.039]        // =>  TRUE
[22:40:25.039]      <block atomic="false" info="">
[22:40:25.039]        WriteAP(0x00, 0x190008);
[22:40:25.042]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:25.042]        WriteAP(0xF0, 0x01);
[22:40:25.050]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:25.050]      </block>
[22:40:25.050]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:25.050]    </control>
[22:40:25.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:40:25.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:25.050]        // =>  FALSE
[22:40:25.050]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:25.050]    </control>
[22:40:25.050]    <block atomic="false" info="">
[22:40:25.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:25.056]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:40:25.056]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:40:25.056]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:25.058]      __ap = 0; //lets make sure we reset the access point selection
[22:40:25.058]        // -> [__ap <= 0x00000000]
[22:40:25.058]    </block>
[22:40:25.058]  </sequence>
[22:40:25.058]  
[22:40:25.082]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:40:25.082]  
[22:40:25.082]  <debugvars>
[22:40:25.082]    // Pre-defined
[22:40:25.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:25.082]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:25.082]    __dp=0x00000000
[22:40:25.082]    __ap=0x00000000
[22:40:25.082]    __traceout=0x00000000      (Trace Disabled)
[22:40:25.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:25.082]    __FlashAddr=0x00000000
[22:40:25.082]    __FlashLen=0x00000000
[22:40:25.082]    __FlashArg=0x00000000
[22:40:25.082]    __FlashOp=0x00000000
[22:40:25.082]    __Result=0x00000000
[22:40:25.082]  </debugvars>
[22:40:25.082]  
[22:40:25.082]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:40:25.086]    <block atomic="false" info="">
[22:40:25.086]      __var deviceID = 0;
[22:40:25.086]        // -> [deviceID <= 0x00000000]
[22:40:25.086]      __var version = 0;
[22:40:25.086]        // -> [version <= 0x00000000]
[22:40:25.086]      __var partNum = 0;
[22:40:25.086]        // -> [partNum <= 0x00000000]
[22:40:25.086]      __var manuf = 0;
[22:40:25.086]        // -> [manuf <= 0x00000000]
[22:40:25.086]      __var isMSPM0G1X0X_G3X0X = 0;
[22:40:25.086]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:40:25.086]      __var isProduction = 0;
[22:40:25.086]        // -> [isProduction <= 0x00000000]
[22:40:25.086]      __var continueId = 0;
[22:40:25.086]        // -> [continueId <= 0x00000000]
[22:40:25.086]      deviceID =   Read32(0x41C40004);
[22:40:25.090]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:40:25.090]        // -> [deviceID <= 0x2BB8802F]
[22:40:25.090]      version = deviceID >> 28;
[22:40:25.090]        // -> [version <= 0x00000002]
[22:40:25.090]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:40:25.090]        // -> [partNum <= 0x0000BB88]
[22:40:25.090]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:40:25.090]        // -> [manuf <= 0x00000017]
[22:40:25.090]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:40:25.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:40:25.090]      isProduction = (version > 0);
[22:40:25.094]        // -> [isProduction <= 0x00000001]
[22:40:25.094]    </block>
[22:40:25.094]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:40:25.094]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:40:25.094]        // =>  FALSE
[22:40:25.094]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:40:25.094]    </control>
[22:40:25.094]    <control if="continueId == 4" while="" timeout="0" info="">
[22:40:25.094]      // if-block "continueId == 4"
[22:40:25.094]        // =>  FALSE
[22:40:25.094]      // skip if-block "continueId == 4"
[22:40:25.094]    </control>
[22:40:25.094]    <control if="!isProduction" while="" timeout="0" info="">
[22:40:25.095]      // if-block "!isProduction"
[22:40:25.095]        // =>  FALSE
[22:40:25.095]      // skip if-block "!isProduction"
[22:40:25.095]    </control>
[22:40:25.095]  </sequence>
[22:40:25.096]  
[22:40:43.502]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:40:43.502]  
[22:40:43.512]  <debugvars>
[22:40:43.512]    // Pre-defined
[22:40:43.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:43.512]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:43.512]    __dp=0x00000000
[22:40:43.512]    __ap=0x00000000
[22:40:43.512]    __traceout=0x00000000      (Trace Disabled)
[22:40:43.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:43.512]    __FlashAddr=0x00000000
[22:40:43.512]    __FlashLen=0x00000000
[22:40:43.512]    __FlashArg=0x00000000
[22:40:43.512]    __FlashOp=0x00000000
[22:40:43.512]    __Result=0x00000000
[22:40:43.512]  </debugvars>
[22:40:43.514]  
[22:40:43.514]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:40:43.514]    <block atomic="false" info="">
[22:40:43.514]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:40:43.514]        // -> [isSWJ <= 0x00000001]
[22:40:43.514]      __var hasDormant = __protocol & 0x00020000;
[22:40:43.514]        // -> [hasDormant <= 0x00000000]
[22:40:43.514]      __var protType   = __protocol & 0x0000FFFF;
[22:40:43.514]        // -> [protType <= 0x00000002]
[22:40:43.514]    </block>
[22:40:43.514]    <control if="protType == 1" while="" timeout="0" info="">
[22:40:43.514]      // if-block "protType == 1"
[22:40:43.514]        // =>  FALSE
[22:40:43.514]      // skip if-block "protType == 1"
[22:40:43.514]    </control>
[22:40:43.514]    <control if="protType == 2" while="" timeout="0" info="">
[22:40:43.514]      // if-block "protType == 2"
[22:40:43.514]        // =>  TRUE
[22:40:43.514]      <control if="isSWJ" while="" timeout="0" info="">
[22:40:43.516]        // if-block "isSWJ"
[22:40:43.516]          // =>  TRUE
[22:40:43.516]        <control if="hasDormant" while="" timeout="0" info="">
[22:40:43.516]          // if-block "hasDormant"
[22:40:43.516]            // =>  FALSE
[22:40:43.516]          // skip if-block "hasDormant"
[22:40:43.516]        </control>
[22:40:43.516]        <control if="!hasDormant" while="" timeout="0" info="">
[22:40:43.516]          // if-block "!hasDormant"
[22:40:43.516]            // =>  TRUE
[22:40:43.516]          <block atomic="false" info="">
[22:40:43.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:40:43.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:43.518]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:40:43.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:40:43.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:40:43.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:43.527]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:40:43.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:40:43.529]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:40:43.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:43.529]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:40:43.531]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:40:43.531]          </block>
[22:40:43.531]          // end if-block "!hasDormant"
[22:40:43.531]        </control>
[22:40:43.531]        // end if-block "isSWJ"
[22:40:43.531]      </control>
[22:40:43.531]      <control if="!isSWJ" while="" timeout="0" info="">
[22:40:43.531]        // if-block "!isSWJ"
[22:40:43.531]          // =>  FALSE
[22:40:43.531]        // skip if-block "!isSWJ"
[22:40:43.531]      </control>
[22:40:43.531]      <block atomic="false" info="">
[22:40:43.531]        ReadDP(0x0);
[22:40:43.535]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:40:43.535]      </block>
[22:40:43.535]      // end if-block "protType == 2"
[22:40:43.535]    </control>
[22:40:43.535]  </sequence>
[22:40:43.535]  
[22:40:43.538]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:40:43.538]  
[22:40:43.538]  <debugvars>
[22:40:43.538]    // Pre-defined
[22:40:43.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:43.539]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:43.539]    __dp=0x00000000
[22:40:43.539]    __ap=0x00000000
[22:40:43.539]    __traceout=0x00000000      (Trace Disabled)
[22:40:43.539]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:43.539]    __FlashAddr=0x00000000
[22:40:43.539]    __FlashLen=0x00000000
[22:40:43.539]    __FlashArg=0x00000000
[22:40:43.539]    __FlashOp=0x00000000
[22:40:43.539]    __Result=0x00000000
[22:40:43.539]  </debugvars>
[22:40:43.539]  
[22:40:43.539]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:40:43.539]    <block atomic="false" info="">
[22:40:43.539]      __var SW_DP_ABORT       = 0x0;
[22:40:43.539]        // -> [SW_DP_ABORT <= 0x00000000]
[22:40:43.539]      __var DP_CTRL_STAT      = 0x4;
[22:40:43.539]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:40:43.539]      __var DP_SELECT         = 0x8;
[22:40:43.539]        // -> [DP_SELECT <= 0x00000008]
[22:40:43.539]      __var powered_down      = 0;
[22:40:43.539]        // -> [powered_down <= 0x00000000]
[22:40:43.539]      WriteDP(DP_SELECT, 0x00000000);
[22:40:43.543]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:40:43.543]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:40:43.543]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:40:43.543]        // -> [powered_down <= 0x00000001]
[22:40:43.543]    </block>
[22:40:43.543]    <control if="powered_down" while="" timeout="0" info="">
[22:40:43.543]      // if-block "powered_down"
[22:40:43.546]        // =>  TRUE
[22:40:43.546]      <block atomic="false" info="">
[22:40:43.546]        Message(0, "Debug/System power-up request sent");
[22:40:43.546]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:40:43.546]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:40:43.546]      </block>
[22:40:43.546]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:40:43.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:43.554]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:40:43.554]        // while-condition  =>  FALSE
[22:40:43.554]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:40:43.554]      </control>
[22:40:43.555]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:40:43.555]        // if-block "(__protocol & 0xFFFF) == 1"
[22:40:43.555]          // =>  FALSE
[22:40:43.555]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:40:43.555]      </control>
[22:40:43.555]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:40:43.555]        // if-block "(__protocol & 0xFFFF) == 2"
[22:40:43.555]          // =>  TRUE
[22:40:43.556]        <block atomic="false" info="">
[22:40:43.556]          Message(0, "executing SWD power up");
[22:40:43.556]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:40:43.558]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:40:43.558]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:40:43.558]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:40:43.558]        </block>
[22:40:43.558]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:40:43.558]      </control>
[22:40:43.558]      // end if-block "powered_down"
[22:40:43.558]    </control>
[22:40:43.558]    <block atomic="false" info="">
[22:40:43.558]      __var DEBUG_PORT_VAL    = 0;
[22:40:43.558]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:40:43.562]      __var ACCESS_POINT_VAL  = 0;
[22:40:43.562]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:40:43.562]      __ap = 1; 
[22:40:43.562]        // -> [__ap <= 0x00000001]
[22:40:43.562]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:40:43.566]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:40:43.566]      __ap = 4;
[22:40:43.566]        // -> [__ap <= 0x00000004]
[22:40:43.566]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:43.567]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:40:43.570]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:40:43.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:43.572]    </block>
[22:40:43.572]    <block atomic="false" info="">
[22:40:43.572]      __var nReset = 0x80;
[22:40:43.572]        // -> [nReset <= 0x00000080]
[22:40:43.572]      __var canReadPins = 0;
[22:40:43.572]        // -> [canReadPins <= 0x00000000]
[22:40:43.572]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:40:43.573]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:40:43.574]        // -> [canReadPins <= 0x00000001]
[22:40:43.574]    </block>
[22:40:43.574]    <control if="" while="1" timeout="200" info="">
[22:40:43.574]      // while "1"  (timeout="200")
[22:40:43.574]      // while-condition  =>  TRUE
[22:40:43.574]      // while "1"  (timeout="200")
[22:40:43.574]      // while-condition  =>  TRUE
[22:40:43.574]      // while "1"  (timeout="200")
[22:40:43.574]      // while-condition  =>  TRUE
[22:40:43.574]      // while "1"  (timeout="200")
[22:40:43.574]      // while-condition  =>  TRUE
[22:40:43.576]      // while "1"  (timeout="200")
[22:40:43.576]      // while-condition  =>  TRUE
[22:40:43.576]      // while "1"  (timeout="200")
[22:40:43.576]      // while-condition  =>  TRUE
[22:40:43.576]      // while "1"  (timeout="200")
[22:40:43.576]      // while-condition  =>  TRUE
[22:40:43.576]      // while "1"  (timeout="200")
[22:40:43.576]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.577]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.577]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.577]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.577]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.577]      // while-condition  =>  TRUE
[22:40:43.577]      // while "1"  (timeout="200")
[22:40:43.579]      // while-condition  =>  TRUE
[22:40:43.579]      // while "1"  (timeout="200")
[22:40:43.579]      // while-condition  =>  TRUE
[22:40:43.579]      // while "1"  (timeout="200")
[22:40:43.579]      // while-condition  =>  TRUE
[22:40:43.579]      // while "1"  (timeout="200")
[22:40:43.579]      // while-condition  =>  TRUE
[22:40:43.579]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.580]      // while-condition  =>  TRUE
[22:40:43.580]      // while "1"  (timeout="200")
[22:40:43.583]      // while-condition  =>  TRUE
[22:40:43.583]      // while "1"  (timeout="200")
[22:40:43.583]      // while  =>  TIMEOUT
[22:40:43.583]      // end while "1"
[22:40:43.583]    </control>
[22:40:43.583]    <control if="canReadPins" while="" timeout="0" info="">
[22:40:43.583]      // if-block "canReadPins"
[22:40:43.583]        // =>  TRUE
[22:40:43.583]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:40:43.583]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:40:43.586]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:40:43.586]        // while-condition  =>  FALSE
[22:40:43.586]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:40:43.586]      </control>
[22:40:43.586]      // end if-block "canReadPins"
[22:40:43.586]    </control>
[22:40:43.586]    <control if="!canReadPins" while="" timeout="0" info="">
[22:40:43.586]      // if-block "!canReadPins"
[22:40:43.586]        // =>  FALSE
[22:40:43.586]      // skip if-block "!canReadPins"
[22:40:43.587]    </control>
[22:40:43.587]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:40:43.587]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:43.587]        // =>  TRUE
[22:40:43.588]      <block atomic="false" info="">
[22:40:43.588]        WriteAP(0x00, 0x190008);
[22:40:43.589]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:43.589]        WriteAP(0xF0, 0x01);
[22:40:43.592]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:43.592]      </block>
[22:40:43.592]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:43.592]    </control>
[22:40:43.592]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:40:43.592]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:43.592]        // =>  FALSE
[22:40:43.592]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:43.592]    </control>
[22:40:43.592]    <block atomic="false" info="">
[22:40:43.592]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:43.596]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:40:43.596]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:40:43.596]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:43.596]      __ap = 0; //lets make sure we reset the access point selection
[22:40:43.596]        // -> [__ap <= 0x00000000]
[22:40:43.596]    </block>
[22:40:43.596]  </sequence>
[22:40:43.596]  
[22:40:43.616]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:40:43.616]  
[22:40:43.616]  <debugvars>
[22:40:43.616]    // Pre-defined
[22:40:43.616]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:43.616]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:43.620]    __dp=0x00000000
[22:40:43.620]    __ap=0x00000000
[22:40:43.620]    __traceout=0x00000000      (Trace Disabled)
[22:40:43.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:43.620]    __FlashAddr=0x00000000
[22:40:43.620]    __FlashLen=0x00000000
[22:40:43.620]    __FlashArg=0x00000000
[22:40:43.620]    __FlashOp=0x00000000
[22:40:43.620]    __Result=0x00000000
[22:40:43.620]  </debugvars>
[22:40:43.620]  
[22:40:43.620]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:40:43.620]    <block atomic="false" info="">
[22:40:43.620]      __var deviceID = 0;
[22:40:43.620]        // -> [deviceID <= 0x00000000]
[22:40:43.620]      __var version = 0;
[22:40:43.620]        // -> [version <= 0x00000000]
[22:40:43.620]      __var partNum = 0;
[22:40:43.620]        // -> [partNum <= 0x00000000]
[22:40:43.620]      __var manuf = 0;
[22:40:43.620]        // -> [manuf <= 0x00000000]
[22:40:43.620]      __var isMSPM0G1X0X_G3X0X = 0;
[22:40:43.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:40:43.620]      __var isProduction = 0;
[22:40:43.620]        // -> [isProduction <= 0x00000000]
[22:40:43.620]      __var continueId = 0;
[22:40:43.620]        // -> [continueId <= 0x00000000]
[22:40:43.620]      deviceID =   Read32(0x41C40004);
[22:40:43.629]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:40:43.629]        // -> [deviceID <= 0x2BB8802F]
[22:40:43.629]      version = deviceID >> 28;
[22:40:43.629]        // -> [version <= 0x00000002]
[22:40:43.629]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:40:43.629]        // -> [partNum <= 0x0000BB88]
[22:40:43.629]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:40:43.629]        // -> [manuf <= 0x00000017]
[22:40:43.629]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:40:43.629]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:40:43.629]      isProduction = (version > 0);
[22:40:43.629]        // -> [isProduction <= 0x00000001]
[22:40:43.629]    </block>
[22:40:43.629]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:40:43.629]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:40:43.629]        // =>  FALSE
[22:40:43.629]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:40:43.629]    </control>
[22:40:43.629]    <control if="continueId == 4" while="" timeout="0" info="">
[22:40:43.629]      // if-block "continueId == 4"
[22:40:43.629]        // =>  FALSE
[22:40:43.629]      // skip if-block "continueId == 4"
[22:40:43.629]    </control>
[22:40:43.629]    <control if="!isProduction" while="" timeout="0" info="">
[22:40:43.629]      // if-block "!isProduction"
[22:40:43.629]        // =>  FALSE
[22:40:43.629]      // skip if-block "!isProduction"
[22:40:43.629]    </control>
[22:40:43.629]  </sequence>
[22:40:43.629]  
[22:41:50.773]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:41:50.773]  
[22:41:50.773]  <debugvars>
[22:41:50.773]    // Pre-defined
[22:41:50.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:50.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:50.773]    __dp=0x00000000
[22:41:50.773]    __ap=0x00000000
[22:41:50.773]    __traceout=0x00000000      (Trace Disabled)
[22:41:50.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:50.777]    __FlashAddr=0x00000000
[22:41:50.777]    __FlashLen=0x00000000
[22:41:50.777]    __FlashArg=0x00000000
[22:41:50.777]    __FlashOp=0x00000000
[22:41:50.777]    __Result=0x00000000
[22:41:50.777]  </debugvars>
[22:41:50.777]  
[22:41:50.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:41:50.777]    <block atomic="false" info="">
[22:41:50.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:41:50.778]        // -> [isSWJ <= 0x00000001]
[22:41:50.778]      __var hasDormant = __protocol & 0x00020000;
[22:41:50.778]        // -> [hasDormant <= 0x00000000]
[22:41:50.778]      __var protType   = __protocol & 0x0000FFFF;
[22:41:50.778]        // -> [protType <= 0x00000002]
[22:41:50.778]    </block>
[22:41:50.778]    <control if="protType == 1" while="" timeout="0" info="">
[22:41:50.778]      // if-block "protType == 1"
[22:41:50.778]        // =>  FALSE
[22:41:50.778]      // skip if-block "protType == 1"
[22:41:50.779]    </control>
[22:41:50.779]    <control if="protType == 2" while="" timeout="0" info="">
[22:41:50.779]      // if-block "protType == 2"
[22:41:50.779]        // =>  TRUE
[22:41:50.779]      <control if="isSWJ" while="" timeout="0" info="">
[22:41:50.779]        // if-block "isSWJ"
[22:41:50.779]          // =>  TRUE
[22:41:50.779]        <control if="hasDormant" while="" timeout="0" info="">
[22:41:50.779]          // if-block "hasDormant"
[22:41:50.779]            // =>  FALSE
[22:41:50.779]          // skip if-block "hasDormant"
[22:41:50.779]        </control>
[22:41:50.779]        <control if="!hasDormant" while="" timeout="0" info="">
[22:41:50.779]          // if-block "!hasDormant"
[22:41:50.779]            // =>  TRUE
[22:41:50.779]          <block atomic="false" info="">
[22:41:50.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:41:50.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:50.782]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:41:50.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:41:50.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:41:50.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:50.785]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:41:50.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:41:50.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:41:50.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:50.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:41:50.793]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:41:50.793]          </block>
[22:41:50.793]          // end if-block "!hasDormant"
[22:41:50.793]        </control>
[22:41:50.793]        // end if-block "isSWJ"
[22:41:50.793]      </control>
[22:41:50.793]      <control if="!isSWJ" while="" timeout="0" info="">
[22:41:50.793]        // if-block "!isSWJ"
[22:41:50.797]          // =>  FALSE
[22:41:50.798]        // skip if-block "!isSWJ"
[22:41:50.798]      </control>
[22:41:50.798]      <block atomic="false" info="">
[22:41:50.798]        ReadDP(0x0);
[22:41:50.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:41:50.798]      </block>
[22:41:50.798]      // end if-block "protType == 2"
[22:41:50.798]    </control>
[22:41:50.798]  </sequence>
[22:41:50.798]  
[22:41:50.805]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:41:50.805]  
[22:41:50.805]  <debugvars>
[22:41:50.805]    // Pre-defined
[22:41:50.805]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:50.805]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:50.805]    __dp=0x00000000
[22:41:50.805]    __ap=0x00000000
[22:41:50.805]    __traceout=0x00000000      (Trace Disabled)
[22:41:50.805]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:50.805]    __FlashAddr=0x00000000
[22:41:50.805]    __FlashLen=0x00000000
[22:41:50.805]    __FlashArg=0x00000000
[22:41:50.805]    __FlashOp=0x00000000
[22:41:50.805]    __Result=0x00000000
[22:41:50.805]  </debugvars>
[22:41:50.805]  
[22:41:50.805]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:41:50.805]    <block atomic="false" info="">
[22:41:50.805]      __var SW_DP_ABORT       = 0x0;
[22:41:50.805]        // -> [SW_DP_ABORT <= 0x00000000]
[22:41:50.805]      __var DP_CTRL_STAT      = 0x4;
[22:41:50.807]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:41:50.807]      __var DP_SELECT         = 0x8;
[22:41:50.807]        // -> [DP_SELECT <= 0x00000008]
[22:41:50.807]      __var powered_down      = 0;
[22:41:50.807]        // -> [powered_down <= 0x00000000]
[22:41:50.807]      WriteDP(DP_SELECT, 0x00000000);
[22:41:50.809]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:41:50.809]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:41:50.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:41:50.809]        // -> [powered_down <= 0x00000001]
[22:41:50.809]    </block>
[22:41:50.809]    <control if="powered_down" while="" timeout="0" info="">
[22:41:50.809]      // if-block "powered_down"
[22:41:50.809]        // =>  TRUE
[22:41:50.809]      <block atomic="false" info="">
[22:41:50.809]        Message(0, "Debug/System power-up request sent");
[22:41:50.813]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:41:50.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:41:50.813]      </block>
[22:41:50.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:41:50.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:41:50.813]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:41:50.817]        // while-condition  =>  FALSE
[22:41:50.817]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:41:50.817]      </control>
[22:41:50.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:41:50.817]        // if-block "(__protocol & 0xFFFF) == 1"
[22:41:50.817]          // =>  FALSE
[22:41:50.817]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:41:50.817]      </control>
[22:41:50.817]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:41:50.817]        // if-block "(__protocol & 0xFFFF) == 2"
[22:41:50.817]          // =>  TRUE
[22:41:50.817]        <block atomic="false" info="">
[22:41:50.817]          Message(0, "executing SWD power up");
[22:41:50.817]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:41:50.825]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:41:50.825]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:41:50.828]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:41:50.828]        </block>
[22:41:50.828]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:41:50.828]      </control>
[22:41:50.828]      // end if-block "powered_down"
[22:41:50.828]    </control>
[22:41:50.828]    <block atomic="false" info="">
[22:41:50.828]      __var DEBUG_PORT_VAL    = 0;
[22:41:50.828]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:41:50.830]      __var ACCESS_POINT_VAL  = 0;
[22:41:50.830]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:41:50.830]      __ap = 1; 
[22:41:50.830]        // -> [__ap <= 0x00000001]
[22:41:50.830]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:41:50.830]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:41:50.830]      __ap = 4;
[22:41:50.830]        // -> [__ap <= 0x00000004]
[22:41:50.834]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:41:50.834]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:41:50.834]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:41:50.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:41:50.838]    </block>
[22:41:50.838]    <block atomic="false" info="">
[22:41:50.838]      __var nReset = 0x80;
[22:41:50.838]        // -> [nReset <= 0x00000080]
[22:41:50.838]      __var canReadPins = 0;
[22:41:50.838]        // -> [canReadPins <= 0x00000000]
[22:41:50.838]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:41:50.838]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:41:50.838]        // -> [canReadPins <= 0x00000001]
[22:41:50.838]    </block>
[22:41:50.838]    <control if="" while="1" timeout="200" info="">
[22:41:50.838]      // while "1"  (timeout="200")
[22:41:50.838]      // while-condition  =>  TRUE
[22:41:50.838]      // while "1"  (timeout="200")
[22:41:50.838]      // while-condition  =>  TRUE
[22:41:50.838]      // while "1"  (timeout="200")
[22:41:50.838]      // while-condition  =>  TRUE
[22:41:50.838]      // while "1"  (timeout="200")
[22:41:50.838]      // while-condition  =>  TRUE
[22:41:50.838]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.842]      // while "1"  (timeout="200")
[22:41:50.842]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.846]      // while-condition  =>  TRUE
[22:41:50.846]      // while "1"  (timeout="200")
[22:41:50.848]      // while-condition  =>  TRUE
[22:41:50.848]      // while "1"  (timeout="200")
[22:41:50.848]      // while  =>  TIMEOUT
[22:41:50.848]      // end while "1"
[22:41:50.848]    </control>
[22:41:50.848]    <control if="canReadPins" while="" timeout="0" info="">
[22:41:50.848]      // if-block "canReadPins"
[22:41:50.849]        // =>  TRUE
[22:41:50.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:41:50.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:41:50.850]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:41:50.850]        // while-condition  =>  FALSE
[22:41:50.850]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:41:50.850]      </control>
[22:41:50.850]      // end if-block "canReadPins"
[22:41:50.850]    </control>
[22:41:50.850]    <control if="!canReadPins" while="" timeout="0" info="">
[22:41:50.850]      // if-block "!canReadPins"
[22:41:50.850]        // =>  FALSE
[22:41:50.850]      // skip if-block "!canReadPins"
[22:41:50.850]    </control>
[22:41:50.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:41:50.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:41:50.850]        // =>  TRUE
[22:41:50.850]      <block atomic="false" info="">
[22:41:50.850]        WriteAP(0x00, 0x190008);
[22:41:50.854]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:41:50.854]        WriteAP(0xF0, 0x01);
[22:41:50.858]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:41:50.858]      </block>
[22:41:50.858]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:41:50.858]    </control>
[22:41:50.862]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:41:50.862]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:41:50.862]        // =>  FALSE
[22:41:50.862]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:41:50.862]    </control>
[22:41:50.862]    <block atomic="false" info="">
[22:41:50.862]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:41:50.867]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:41:50.867]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:41:50.867]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:41:50.870]      __ap = 0; //lets make sure we reset the access point selection
[22:41:50.870]        // -> [__ap <= 0x00000000]
[22:41:50.870]    </block>
[22:41:50.870]  </sequence>
[22:41:50.870]  
[22:41:50.889]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:41:50.889]  
[22:41:50.889]  <debugvars>
[22:41:50.889]    // Pre-defined
[22:41:50.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:50.889]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:50.889]    __dp=0x00000000
[22:41:50.889]    __ap=0x00000000
[22:41:50.893]    __traceout=0x00000000      (Trace Disabled)
[22:41:50.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:50.893]    __FlashAddr=0x00000000
[22:41:50.893]    __FlashLen=0x00000000
[22:41:50.893]    __FlashArg=0x00000000
[22:41:50.893]    __FlashOp=0x00000000
[22:41:50.893]    __Result=0x00000000
[22:41:50.893]  </debugvars>
[22:41:50.893]  
[22:41:50.893]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:41:50.893]    <block atomic="false" info="">
[22:41:50.893]      __var deviceID = 0;
[22:41:50.893]        // -> [deviceID <= 0x00000000]
[22:41:50.893]      __var version = 0;
[22:41:50.893]        // -> [version <= 0x00000000]
[22:41:50.893]      __var partNum = 0;
[22:41:50.893]        // -> [partNum <= 0x00000000]
[22:41:50.893]      __var manuf = 0;
[22:41:50.893]        // -> [manuf <= 0x00000000]
[22:41:50.896]      __var isMSPM0G1X0X_G3X0X = 0;
[22:41:50.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:41:50.896]      __var isProduction = 0;
[22:41:50.896]        // -> [isProduction <= 0x00000000]
[22:41:50.896]      __var continueId = 0;
[22:41:50.896]        // -> [continueId <= 0x00000000]
[22:41:50.896]      deviceID =   Read32(0x41C40004);
[22:41:50.902]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:41:50.902]        // -> [deviceID <= 0x2BB8802F]
[22:41:50.902]      version = deviceID >> 28;
[22:41:50.902]        // -> [version <= 0x00000002]
[22:41:50.902]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:41:50.902]        // -> [partNum <= 0x0000BB88]
[22:41:50.902]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:41:50.902]        // -> [manuf <= 0x00000017]
[22:41:50.902]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:41:50.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:41:50.902]      isProduction = (version > 0);
[22:41:50.902]        // -> [isProduction <= 0x00000001]
[22:41:50.902]    </block>
[22:41:50.902]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:41:50.902]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:41:50.902]        // =>  FALSE
[22:41:50.902]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:41:50.902]    </control>
[22:41:50.902]    <control if="continueId == 4" while="" timeout="0" info="">
[22:41:50.902]      // if-block "continueId == 4"
[22:41:50.902]        // =>  FALSE
[22:41:50.902]      // skip if-block "continueId == 4"
[22:41:50.902]    </control>
[22:41:50.902]    <control if="!isProduction" while="" timeout="0" info="">
[22:41:50.902]      // if-block "!isProduction"
[22:41:50.902]        // =>  FALSE
[22:41:50.902]      // skip if-block "!isProduction"
[22:41:50.902]    </control>
[22:41:50.902]  </sequence>
[22:41:50.906]  
[22:43:15.075]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:43:15.075]  
[22:43:15.084]  <debugvars>
[22:43:15.084]    // Pre-defined
[22:43:15.084]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:15.084]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:15.085]    __dp=0x00000000
[22:43:15.085]    __ap=0x00000000
[22:43:15.085]    __traceout=0x00000000      (Trace Disabled)
[22:43:15.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:15.085]    __FlashAddr=0x00000000
[22:43:15.085]    __FlashLen=0x00000000
[22:43:15.085]    __FlashArg=0x00000000
[22:43:15.085]    __FlashOp=0x00000000
[22:43:15.085]    __Result=0x00000000
[22:43:15.085]  </debugvars>
[22:43:15.085]  
[22:43:15.085]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:43:15.085]    <block atomic="false" info="">
[22:43:15.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:43:15.086]        // -> [isSWJ <= 0x00000001]
[22:43:15.086]      __var hasDormant = __protocol & 0x00020000;
[22:43:15.086]        // -> [hasDormant <= 0x00000000]
[22:43:15.086]      __var protType   = __protocol & 0x0000FFFF;
[22:43:15.086]        // -> [protType <= 0x00000002]
[22:43:15.087]    </block>
[22:43:15.087]    <control if="protType == 1" while="" timeout="0" info="">
[22:43:15.087]      // if-block "protType == 1"
[22:43:15.087]        // =>  FALSE
[22:43:15.087]      // skip if-block "protType == 1"
[22:43:15.087]    </control>
[22:43:15.087]    <control if="protType == 2" while="" timeout="0" info="">
[22:43:15.087]      // if-block "protType == 2"
[22:43:15.087]        // =>  TRUE
[22:43:15.087]      <control if="isSWJ" while="" timeout="0" info="">
[22:43:15.087]        // if-block "isSWJ"
[22:43:15.087]          // =>  TRUE
[22:43:15.087]        <control if="hasDormant" while="" timeout="0" info="">
[22:43:15.087]          // if-block "hasDormant"
[22:43:15.087]            // =>  FALSE
[22:43:15.089]          // skip if-block "hasDormant"
[22:43:15.089]        </control>
[22:43:15.089]        <control if="!hasDormant" while="" timeout="0" info="">
[22:43:15.089]          // if-block "!hasDormant"
[22:43:15.089]            // =>  TRUE
[22:43:15.089]          <block atomic="false" info="">
[22:43:15.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:43:15.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:15.091]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:43:15.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:43:15.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:43:15.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:15.093]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:43:15.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:43:15.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:43:15.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:15.096]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:43:15.096]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:43:15.096]          </block>
[22:43:15.099]          // end if-block "!hasDormant"
[22:43:15.099]        </control>
[22:43:15.099]        // end if-block "isSWJ"
[22:43:15.099]      </control>
[22:43:15.099]      <control if="!isSWJ" while="" timeout="0" info="">
[22:43:15.099]        // if-block "!isSWJ"
[22:43:15.099]          // =>  FALSE
[22:43:15.099]        // skip if-block "!isSWJ"
[22:43:15.099]      </control>
[22:43:15.100]      <block atomic="false" info="">
[22:43:15.100]        ReadDP(0x0);
[22:43:15.100]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:43:15.100]      </block>
[22:43:15.100]      // end if-block "protType == 2"
[22:43:15.100]    </control>
[22:43:15.100]  </sequence>
[22:43:15.100]  
[22:43:15.103]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:43:15.103]  
[22:43:15.103]  <debugvars>
[22:43:15.103]    // Pre-defined
[22:43:15.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:15.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:15.103]    __dp=0x00000000
[22:43:15.103]    __ap=0x00000000
[22:43:15.103]    __traceout=0x00000000      (Trace Disabled)
[22:43:15.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:15.103]    __FlashAddr=0x00000000
[22:43:15.103]    __FlashLen=0x00000000
[22:43:15.103]    __FlashArg=0x00000000
[22:43:15.103]    __FlashOp=0x00000000
[22:43:15.103]    __Result=0x00000000
[22:43:15.103]  </debugvars>
[22:43:15.103]  
[22:43:15.103]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:43:15.103]    <block atomic="false" info="">
[22:43:15.103]      __var SW_DP_ABORT       = 0x0;
[22:43:15.103]        // -> [SW_DP_ABORT <= 0x00000000]
[22:43:15.103]      __var DP_CTRL_STAT      = 0x4;
[22:43:15.103]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:43:15.108]      __var DP_SELECT         = 0x8;
[22:43:15.108]        // -> [DP_SELECT <= 0x00000008]
[22:43:15.108]      __var powered_down      = 0;
[22:43:15.108]        // -> [powered_down <= 0x00000000]
[22:43:15.108]      WriteDP(DP_SELECT, 0x00000000);
[22:43:15.109]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:43:15.109]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:43:15.111]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:43:15.111]        // -> [powered_down <= 0x00000001]
[22:43:15.111]    </block>
[22:43:15.111]    <control if="powered_down" while="" timeout="0" info="">
[22:43:15.111]      // if-block "powered_down"
[22:43:15.111]        // =>  TRUE
[22:43:15.111]      <block atomic="false" info="">
[22:43:15.111]        Message(0, "Debug/System power-up request sent");
[22:43:15.112]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:43:15.115]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:43:15.115]      </block>
[22:43:15.116]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:43:15.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:43:15.117]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:43:15.117]        // while-condition  =>  FALSE
[22:43:15.117]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:43:15.117]      </control>
[22:43:15.117]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:43:15.117]        // if-block "(__protocol & 0xFFFF) == 1"
[22:43:15.117]          // =>  FALSE
[22:43:15.117]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:43:15.117]      </control>
[22:43:15.117]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:43:15.117]        // if-block "(__protocol & 0xFFFF) == 2"
[22:43:15.117]          // =>  TRUE
[22:43:15.117]        <block atomic="false" info="">
[22:43:15.117]          Message(0, "executing SWD power up");
[22:43:15.120]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:43:15.120]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:43:15.120]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:43:15.125]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:43:15.125]        </block>
[22:43:15.125]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:43:15.125]      </control>
[22:43:15.125]      // end if-block "powered_down"
[22:43:15.125]    </control>
[22:43:15.125]    <block atomic="false" info="">
[22:43:15.125]      __var DEBUG_PORT_VAL    = 0;
[22:43:15.125]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:43:15.125]      __var ACCESS_POINT_VAL  = 0;
[22:43:15.125]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:43:15.125]      __ap = 1; 
[22:43:15.125]        // -> [__ap <= 0x00000001]
[22:43:15.125]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:43:15.129]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:43:15.129]      __ap = 4;
[22:43:15.129]        // -> [__ap <= 0x00000004]
[22:43:15.129]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:15.131]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:43:15.131]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:43:15.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:15.131]    </block>
[22:43:15.131]    <block atomic="false" info="">
[22:43:15.131]      __var nReset = 0x80;
[22:43:15.131]        // -> [nReset <= 0x00000080]
[22:43:15.131]      __var canReadPins = 0;
[22:43:15.131]        // -> [canReadPins <= 0x00000000]
[22:43:15.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:43:15.135]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:43:15.135]        // -> [canReadPins <= 0x00000001]
[22:43:15.135]    </block>
[22:43:15.135]    <control if="" while="1" timeout="200" info="">
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.135]      // while-condition  =>  TRUE
[22:43:15.135]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.139]      // while-condition  =>  TRUE
[22:43:15.139]      // while "1"  (timeout="200")
[22:43:15.142]      // while-condition  =>  TRUE
[22:43:15.142]      // while "1"  (timeout="200")
[22:43:15.142]      // while-condition  =>  TRUE
[22:43:15.142]      // while "1"  (timeout="200")
[22:43:15.142]      // while-condition  =>  TRUE
[22:43:15.142]      // while "1"  (timeout="200")
[22:43:15.142]      // while-condition  =>  TRUE
[22:43:15.142]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.143]      // while-condition  =>  TRUE
[22:43:15.143]      // while "1"  (timeout="200")
[22:43:15.147]      // while-condition  =>  TRUE
[22:43:15.147]      // while "1"  (timeout="200")
[22:43:15.147]      // while  =>  TIMEOUT
[22:43:15.147]      // end while "1"
[22:43:15.147]    </control>
[22:43:15.147]    <control if="canReadPins" while="" timeout="0" info="">
[22:43:15.147]      // if-block "canReadPins"
[22:43:15.147]        // =>  TRUE
[22:43:15.147]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:43:15.147]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:43:15.150]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:43:15.150]        // while-condition  =>  FALSE
[22:43:15.150]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:43:15.150]      </control>
[22:43:15.150]      // end if-block "canReadPins"
[22:43:15.150]    </control>
[22:43:15.150]    <control if="!canReadPins" while="" timeout="0" info="">
[22:43:15.150]      // if-block "!canReadPins"
[22:43:15.150]        // =>  FALSE
[22:43:15.150]      // skip if-block "!canReadPins"
[22:43:15.150]    </control>
[22:43:15.150]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:43:15.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:15.150]        // =>  TRUE
[22:43:15.150]      <block atomic="false" info="">
[22:43:15.152]        WriteAP(0x00, 0x190008);
[22:43:15.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:15.152]        WriteAP(0xF0, 0x01);
[22:43:15.160]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:15.160]      </block>
[22:43:15.160]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:15.160]    </control>
[22:43:15.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:43:15.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:15.160]        // =>  FALSE
[22:43:15.160]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:15.160]    </control>
[22:43:15.160]    <block atomic="false" info="">
[22:43:15.160]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:15.163]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:43:15.163]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:43:15.163]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:15.163]      __ap = 0; //lets make sure we reset the access point selection
[22:43:15.167]        // -> [__ap <= 0x00000000]
[22:43:15.167]    </block>
[22:43:15.167]  </sequence>
[22:43:15.167]  
[22:43:15.193]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:43:15.193]  
[22:43:15.195]  <debugvars>
[22:43:15.195]    // Pre-defined
[22:43:15.195]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:15.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:15.196]    __dp=0x00000000
[22:43:15.196]    __ap=0x00000000
[22:43:15.196]    __traceout=0x00000000      (Trace Disabled)
[22:43:15.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:15.196]    __FlashAddr=0x00000000
[22:43:15.196]    __FlashLen=0x00000000
[22:43:15.196]    __FlashArg=0x00000000
[22:43:15.196]    __FlashOp=0x00000000
[22:43:15.196]    __Result=0x00000000
[22:43:15.196]  </debugvars>
[22:43:15.196]  
[22:43:15.196]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:43:15.196]    <block atomic="false" info="">
[22:43:15.196]      __var deviceID = 0;
[22:43:15.196]        // -> [deviceID <= 0x00000000]
[22:43:15.196]      __var version = 0;
[22:43:15.196]        // -> [version <= 0x00000000]
[22:43:15.196]      __var partNum = 0;
[22:43:15.196]        // -> [partNum <= 0x00000000]
[22:43:15.196]      __var manuf = 0;
[22:43:15.198]        // -> [manuf <= 0x00000000]
[22:43:15.198]      __var isMSPM0G1X0X_G3X0X = 0;
[22:43:15.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:43:15.198]      __var isProduction = 0;
[22:43:15.198]        // -> [isProduction <= 0x00000000]
[22:43:15.198]      __var continueId = 0;
[22:43:15.198]        // -> [continueId <= 0x00000000]
[22:43:15.198]      deviceID =   Read32(0x41C40004);
[22:43:15.203]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:43:15.203]        // -> [deviceID <= 0x2BB8802F]
[22:43:15.203]      version = deviceID >> 28;
[22:43:15.203]        // -> [version <= 0x00000002]
[22:43:15.203]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:43:15.203]        // -> [partNum <= 0x0000BB88]
[22:43:15.203]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:43:15.203]        // -> [manuf <= 0x00000017]
[22:43:15.203]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:43:15.203]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:43:15.203]      isProduction = (version > 0);
[22:43:15.203]        // -> [isProduction <= 0x00000001]
[22:43:15.203]    </block>
[22:43:15.203]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:43:15.203]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:43:15.203]        // =>  FALSE
[22:43:15.203]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:43:15.203]    </control>
[22:43:15.203]    <control if="continueId == 4" while="" timeout="0" info="">
[22:43:15.203]      // if-block "continueId == 4"
[22:43:15.203]        // =>  FALSE
[22:43:15.203]      // skip if-block "continueId == 4"
[22:43:15.203]    </control>
[22:43:15.203]    <control if="!isProduction" while="" timeout="0" info="">
[22:43:15.203]      // if-block "!isProduction"
[22:43:15.203]        // =>  FALSE
[22:43:15.203]      // skip if-block "!isProduction"
[22:43:15.203]    </control>
[22:43:15.203]  </sequence>
[22:43:15.203]  
[22:43:47.982]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:43:47.982]  
[22:43:47.993]  <debugvars>
[22:43:47.993]    // Pre-defined
[22:43:47.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:47.993]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:43:47.993]    __dp=0x00000000
[22:43:47.993]    __ap=0x00000000
[22:43:47.993]    __traceout=0x00000000      (Trace Disabled)
[22:43:47.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:47.993]    __FlashAddr=0x00000000
[22:43:47.993]    __FlashLen=0x00000000
[22:43:47.993]    __FlashArg=0x00000000
[22:43:47.994]    __FlashOp=0x00000000
[22:43:47.994]    __Result=0x00000000
[22:43:47.994]  </debugvars>
[22:43:47.994]  
[22:43:47.994]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:43:47.994]    <block atomic="false" info="">
[22:43:47.994]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:43:47.994]        // -> [isSWJ <= 0x00000001]
[22:43:47.994]      __var hasDormant = __protocol & 0x00020000;
[22:43:47.994]        // -> [hasDormant <= 0x00000000]
[22:43:47.994]      __var protType   = __protocol & 0x0000FFFF;
[22:43:47.994]        // -> [protType <= 0x00000002]
[22:43:47.994]    </block>
[22:43:47.994]    <control if="protType == 1" while="" timeout="0" info="">
[22:43:47.994]      // if-block "protType == 1"
[22:43:47.994]        // =>  FALSE
[22:43:47.994]      // skip if-block "protType == 1"
[22:43:47.994]    </control>
[22:43:47.996]    <control if="protType == 2" while="" timeout="0" info="">
[22:43:47.996]      // if-block "protType == 2"
[22:43:47.996]        // =>  TRUE
[22:43:47.996]      <control if="isSWJ" while="" timeout="0" info="">
[22:43:47.996]        // if-block "isSWJ"
[22:43:47.996]          // =>  TRUE
[22:43:47.996]        <control if="hasDormant" while="" timeout="0" info="">
[22:43:47.996]          // if-block "hasDormant"
[22:43:47.996]            // =>  FALSE
[22:43:47.996]          // skip if-block "hasDormant"
[22:43:47.996]        </control>
[22:43:47.996]        <control if="!hasDormant" while="" timeout="0" info="">
[22:43:47.996]          // if-block "!hasDormant"
[22:43:47.996]            // =>  TRUE
[22:43:47.996]          <block atomic="false" info="">
[22:43:47.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:43:47.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:47.998]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:43:48.000]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:43:48.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:43:48.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:48.002]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:43:48.003]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:43:48.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:43:48.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:48.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:43:48.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:43:48.005]          </block>
[22:43:48.007]          // end if-block "!hasDormant"
[22:43:48.007]        </control>
[22:43:48.007]        // end if-block "isSWJ"
[22:43:48.007]      </control>
[22:43:48.007]      <control if="!isSWJ" while="" timeout="0" info="">
[22:43:48.007]        // if-block "!isSWJ"
[22:43:48.007]          // =>  FALSE
[22:43:48.007]        // skip if-block "!isSWJ"
[22:43:48.007]      </control>
[22:43:48.007]      <block atomic="false" info="">
[22:43:48.007]        ReadDP(0x0);
[22:43:48.010]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:43:48.010]      </block>
[22:43:48.010]      // end if-block "protType == 2"
[22:43:48.010]    </control>
[22:43:48.010]  </sequence>
[22:43:48.010]  
[22:43:48.012]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:43:48.012]  
[22:43:48.012]  <debugvars>
[22:43:48.012]    // Pre-defined
[22:43:48.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:48.012]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:43:48.012]    __dp=0x00000000
[22:43:48.012]    __ap=0x00000000
[22:43:48.012]    __traceout=0x00000000      (Trace Disabled)
[22:43:48.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:48.012]    __FlashAddr=0x00000000
[22:43:48.012]    __FlashLen=0x00000000
[22:43:48.012]    __FlashArg=0x00000000
[22:43:48.014]    __FlashOp=0x00000000
[22:43:48.014]    __Result=0x00000000
[22:43:48.014]  </debugvars>
[22:43:48.014]  
[22:43:48.014]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:43:48.014]    <block atomic="false" info="">
[22:43:48.014]      __var SW_DP_ABORT       = 0x0;
[22:43:48.014]        // -> [SW_DP_ABORT <= 0x00000000]
[22:43:48.014]      __var DP_CTRL_STAT      = 0x4;
[22:43:48.014]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:43:48.014]      __var DP_SELECT         = 0x8;
[22:43:48.014]        // -> [DP_SELECT <= 0x00000008]
[22:43:48.014]      __var powered_down      = 0;
[22:43:48.014]        // -> [powered_down <= 0x00000000]
[22:43:48.014]      WriteDP(DP_SELECT, 0x00000000);
[22:43:48.015]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:43:48.015]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:43:48.020]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:43:48.020]        // -> [powered_down <= 0x00000001]
[22:43:48.020]    </block>
[22:43:48.020]    <control if="powered_down" while="" timeout="0" info="">
[22:43:48.020]      // if-block "powered_down"
[22:43:48.020]        // =>  TRUE
[22:43:48.020]      <block atomic="false" info="">
[22:43:48.020]        Message(0, "Debug/System power-up request sent");
[22:43:48.024]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:43:48.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:43:48.027]      </block>
[22:43:48.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:43:48.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:43:48.030]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:43:48.030]        // while-condition  =>  FALSE
[22:43:48.030]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:43:48.030]      </control>
[22:43:48.030]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:43:48.030]        // if-block "(__protocol & 0xFFFF) == 1"
[22:43:48.030]          // =>  FALSE
[22:43:48.030]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:43:48.030]      </control>
[22:43:48.030]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:43:48.030]        // if-block "(__protocol & 0xFFFF) == 2"
[22:43:48.030]          // =>  TRUE
[22:43:48.030]        <block atomic="false" info="">
[22:43:48.030]          Message(0, "executing SWD power up");
[22:43:48.033]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:43:48.033]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:43:48.033]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:43:48.033]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:43:48.033]        </block>
[22:43:48.037]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:43:48.037]      </control>
[22:43:48.037]      // end if-block "powered_down"
[22:43:48.037]    </control>
[22:43:48.037]    <block atomic="false" info="">
[22:43:48.037]      __var DEBUG_PORT_VAL    = 0;
[22:43:48.037]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:43:48.038]      __var ACCESS_POINT_VAL  = 0;
[22:43:48.038]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:43:48.038]      __ap = 1; 
[22:43:48.038]        // -> [__ap <= 0x00000001]
[22:43:48.038]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:43:48.041]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:43:48.041]      __ap = 4;
[22:43:48.043]        // -> [__ap <= 0x00000004]
[22:43:48.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:48.045]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:43:48.045]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:43:48.045]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:48.045]    </block>
[22:43:48.045]    <block atomic="false" info="">
[22:43:48.045]      __var nReset = 0x80;
[22:43:48.045]        // -> [nReset <= 0x00000080]
[22:43:48.045]      __var canReadPins = 0;
[22:43:48.048]        // -> [canReadPins <= 0x00000000]
[22:43:48.048]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:43:48.050]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:43:48.050]        // -> [canReadPins <= 0x00000001]
[22:43:48.050]    </block>
[22:43:48.050]    <control if="" while="1" timeout="200" info="">
[22:43:48.050]      // while "1"  (timeout="200")
[22:43:48.050]      // while-condition  =>  TRUE
[22:43:48.050]      // while "1"  (timeout="200")
[22:43:48.050]      // while-condition  =>  TRUE
[22:43:48.050]      // while "1"  (timeout="200")
[22:43:48.050]      // while-condition  =>  TRUE
[22:43:48.050]      // while "1"  (timeout="200")
[22:43:48.050]      // while-condition  =>  TRUE
[22:43:48.050]      // while "1"  (timeout="200")
[22:43:48.052]      // while-condition  =>  TRUE
[22:43:48.052]      // while "1"  (timeout="200")
[22:43:48.052]      // while  =>  TIMEOUT
[22:43:48.052]      // end while "1"
[22:43:48.052]    </control>
[22:43:48.052]    <control if="canReadPins" while="" timeout="0" info="">
[22:43:48.052]      // if-block "canReadPins"
[22:43:48.053]        // =>  TRUE
[22:43:48.053]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:43:48.053]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:43:48.053]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:43:48.053]        // while-condition  =>  FALSE
[22:43:48.053]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:43:48.053]      </control>
[22:43:48.053]      // end if-block "canReadPins"
[22:43:48.053]    </control>
[22:43:48.053]    <control if="!canReadPins" while="" timeout="0" info="">
[22:43:48.053]      // if-block "!canReadPins"
[22:43:48.053]        // =>  FALSE
[22:43:48.055]      // skip if-block "!canReadPins"
[22:43:48.055]    </control>
[22:43:48.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:43:48.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:48.055]        // =>  TRUE
[22:43:48.055]      <block atomic="false" info="">
[22:43:48.055]        WriteAP(0x00, 0x190008);
[22:43:48.057]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:48.057]        WriteAP(0xF0, 0x01);
[22:43:48.060]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:48.060]      </block>
[22:43:48.060]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:48.060]    </control>
[22:43:48.060]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:43:48.061]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:48.061]        // =>  FALSE
[22:43:48.061]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:48.061]    </control>
[22:43:48.061]    <block atomic="false" info="">
[22:43:48.061]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:48.070]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:43:48.070]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:43:48.070]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:48.072]      __ap = 0; //lets make sure we reset the access point selection
[22:43:48.072]        // -> [__ap <= 0x00000000]
[22:43:48.072]    </block>
[22:43:48.072]  </sequence>
[22:43:48.072]  
[22:43:48.094]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:43:48.094]  
[22:43:48.094]  <debugvars>
[22:43:48.094]    // Pre-defined
[22:43:48.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:48.095]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:43:48.095]    __dp=0x00000000
[22:43:48.095]    __ap=0x00000000
[22:43:48.095]    __traceout=0x00000000      (Trace Disabled)
[22:43:48.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:48.095]    __FlashAddr=0x00000000
[22:43:48.095]    __FlashLen=0x00000000
[22:43:48.095]    __FlashArg=0x00000000
[22:43:48.095]    __FlashOp=0x00000000
[22:43:48.095]    __Result=0x00000000
[22:43:48.095]  </debugvars>
[22:43:48.095]  
[22:43:48.096]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:43:48.096]    <block atomic="false" info="">
[22:43:48.096]      __var deviceID = 0;
[22:43:48.096]        // -> [deviceID <= 0x00000000]
[22:43:48.096]      __var version = 0;
[22:43:48.096]        // -> [version <= 0x00000000]
[22:43:48.096]      __var partNum = 0;
[22:43:48.096]        // -> [partNum <= 0x00000000]
[22:43:48.096]      __var manuf = 0;
[22:43:48.096]        // -> [manuf <= 0x00000000]
[22:43:48.096]      __var isMSPM0G1X0X_G3X0X = 0;
[22:43:48.096]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:43:48.096]      __var isProduction = 0;
[22:43:48.096]        // -> [isProduction <= 0x00000000]
[22:43:48.096]      __var continueId = 0;
[22:43:48.096]        // -> [continueId <= 0x00000000]
[22:43:48.098]      deviceID =   Read32(0x41C40004);
[22:43:48.103]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:43:48.103]        // -> [deviceID <= 0x2BB8802F]
[22:43:48.103]      version = deviceID >> 28;
[22:43:48.103]        // -> [version <= 0x00000002]
[22:43:48.103]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:43:48.103]        // -> [partNum <= 0x0000BB88]
[22:43:48.103]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:43:48.103]        // -> [manuf <= 0x00000017]
[22:43:48.103]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:43:48.103]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:43:48.103]      isProduction = (version > 0);
[22:43:48.103]        // -> [isProduction <= 0x00000001]
[22:43:48.103]    </block>
[22:43:48.103]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:43:48.103]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:43:48.103]        // =>  FALSE
[22:43:48.103]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:43:48.103]    </control>
[22:43:48.103]    <control if="continueId == 4" while="" timeout="0" info="">
[22:43:48.106]      // if-block "continueId == 4"
[22:43:48.106]        // =>  FALSE
[22:43:48.106]      // skip if-block "continueId == 4"
[22:43:48.106]    </control>
[22:43:48.107]    <control if="!isProduction" while="" timeout="0" info="">
[22:43:48.107]      // if-block "!isProduction"
[22:43:48.107]        // =>  FALSE
[22:43:48.107]      // skip if-block "!isProduction"
[22:43:48.107]    </control>
[22:43:48.107]  </sequence>
[22:43:48.107]  
[22:44:35.265]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:44:35.265]  
[22:44:35.274]  <debugvars>
[22:44:35.274]    // Pre-defined
[22:44:35.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:35.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:35.274]    __dp=0x00000000
[22:44:35.274]    __ap=0x00000000
[22:44:35.274]    __traceout=0x00000000      (Trace Disabled)
[22:44:35.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:35.275]    __FlashAddr=0x00000000
[22:44:35.275]    __FlashLen=0x00000000
[22:44:35.275]    __FlashArg=0x00000000
[22:44:35.275]    __FlashOp=0x00000000
[22:44:35.275]    __Result=0x00000000
[22:44:35.275]  </debugvars>
[22:44:35.275]  
[22:44:35.275]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:44:35.276]    <block atomic="false" info="">
[22:44:35.276]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:44:35.276]        // -> [isSWJ <= 0x00000001]
[22:44:35.276]      __var hasDormant = __protocol & 0x00020000;
[22:44:35.276]        // -> [hasDormant <= 0x00000000]
[22:44:35.276]      __var protType   = __protocol & 0x0000FFFF;
[22:44:35.276]        // -> [protType <= 0x00000002]
[22:44:35.276]    </block>
[22:44:35.276]    <control if="protType == 1" while="" timeout="0" info="">
[22:44:35.276]      // if-block "protType == 1"
[22:44:35.276]        // =>  FALSE
[22:44:35.276]      // skip if-block "protType == 1"
[22:44:35.276]    </control>
[22:44:35.278]    <control if="protType == 2" while="" timeout="0" info="">
[22:44:35.278]      // if-block "protType == 2"
[22:44:35.278]        // =>  TRUE
[22:44:35.278]      <control if="isSWJ" while="" timeout="0" info="">
[22:44:35.278]        // if-block "isSWJ"
[22:44:35.278]          // =>  TRUE
[22:44:35.278]        <control if="hasDormant" while="" timeout="0" info="">
[22:44:35.278]          // if-block "hasDormant"
[22:44:35.278]            // =>  FALSE
[22:44:35.278]          // skip if-block "hasDormant"
[22:44:35.279]        </control>
[22:44:35.279]        <control if="!hasDormant" while="" timeout="0" info="">
[22:44:35.279]          // if-block "!hasDormant"
[22:44:35.279]            // =>  TRUE
[22:44:35.279]          <block atomic="false" info="">
[22:44:35.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:44:35.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:35.281]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:44:35.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:44:35.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:44:35.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:35.284]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:44:35.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:44:35.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:44:35.287]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:35.288]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:44:35.289]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:44:35.289]          </block>
[22:44:35.289]          // end if-block "!hasDormant"
[22:44:35.289]        </control>
[22:44:35.289]        // end if-block "isSWJ"
[22:44:35.289]      </control>
[22:44:35.289]      <control if="!isSWJ" while="" timeout="0" info="">
[22:44:35.289]        // if-block "!isSWJ"
[22:44:35.290]          // =>  FALSE
[22:44:35.290]        // skip if-block "!isSWJ"
[22:44:35.291]      </control>
[22:44:35.291]      <block atomic="false" info="">
[22:44:35.291]        ReadDP(0x0);
[22:44:35.291]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:44:35.293]      </block>
[22:44:35.293]      // end if-block "protType == 2"
[22:44:35.293]    </control>
[22:44:35.293]  </sequence>
[22:44:35.293]  
[22:44:35.294]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:44:35.294]  
[22:44:35.294]  <debugvars>
[22:44:35.294]    // Pre-defined
[22:44:35.294]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:35.294]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:35.294]    __dp=0x00000000
[22:44:35.294]    __ap=0x00000000
[22:44:35.294]    __traceout=0x00000000      (Trace Disabled)
[22:44:35.294]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:35.297]    __FlashAddr=0x00000000
[22:44:35.297]    __FlashLen=0x00000000
[22:44:35.297]    __FlashArg=0x00000000
[22:44:35.297]    __FlashOp=0x00000000
[22:44:35.297]    __Result=0x00000000
[22:44:35.297]  </debugvars>
[22:44:35.297]  
[22:44:35.297]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:44:35.297]    <block atomic="false" info="">
[22:44:35.297]      __var SW_DP_ABORT       = 0x0;
[22:44:35.297]        // -> [SW_DP_ABORT <= 0x00000000]
[22:44:35.297]      __var DP_CTRL_STAT      = 0x4;
[22:44:35.297]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:44:35.299]      __var DP_SELECT         = 0x8;
[22:44:35.299]        // -> [DP_SELECT <= 0x00000008]
[22:44:35.299]      __var powered_down      = 0;
[22:44:35.299]        // -> [powered_down <= 0x00000000]
[22:44:35.299]      WriteDP(DP_SELECT, 0x00000000);
[22:44:35.301]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:44:35.301]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:44:35.302]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:44:35.302]        // -> [powered_down <= 0x00000001]
[22:44:35.302]    </block>
[22:44:35.302]    <control if="powered_down" while="" timeout="0" info="">
[22:44:35.302]      // if-block "powered_down"
[22:44:35.302]        // =>  TRUE
[22:44:35.302]      <block atomic="false" info="">
[22:44:35.302]        Message(0, "Debug/System power-up request sent");
[22:44:35.302]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:44:35.308]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:44:35.308]      </block>
[22:44:35.308]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:44:35.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:44:35.308]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:44:35.308]        // while-condition  =>  FALSE
[22:44:35.308]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:44:35.308]      </control>
[22:44:35.308]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:44:35.310]        // if-block "(__protocol & 0xFFFF) == 1"
[22:44:35.310]          // =>  FALSE
[22:44:35.310]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:44:35.310]      </control>
[22:44:35.310]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:44:35.310]        // if-block "(__protocol & 0xFFFF) == 2"
[22:44:35.310]          // =>  TRUE
[22:44:35.310]        <block atomic="false" info="">
[22:44:35.310]          Message(0, "executing SWD power up");
[22:44:35.312]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:44:35.315]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:44:35.315]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:44:35.316]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:44:35.316]        </block>
[22:44:35.316]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:44:35.317]      </control>
[22:44:35.317]      // end if-block "powered_down"
[22:44:35.317]    </control>
[22:44:35.317]    <block atomic="false" info="">
[22:44:35.317]      __var DEBUG_PORT_VAL    = 0;
[22:44:35.317]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:44:35.317]      __var ACCESS_POINT_VAL  = 0;
[22:44:35.317]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:44:35.317]      __ap = 1; 
[22:44:35.317]        // -> [__ap <= 0x00000001]
[22:44:35.317]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:44:35.321]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:44:35.321]      __ap = 4;
[22:44:35.321]        // -> [__ap <= 0x00000004]
[22:44:35.321]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:35.323]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:44:35.323]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:44:35.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:44:35.326]    </block>
[22:44:35.326]    <block atomic="false" info="">
[22:44:35.326]      __var nReset = 0x80;
[22:44:35.326]        // -> [nReset <= 0x00000080]
[22:44:35.326]      __var canReadPins = 0;
[22:44:35.328]        // -> [canReadPins <= 0x00000000]
[22:44:35.328]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:44:35.329]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:44:35.329]        // -> [canReadPins <= 0x00000001]
[22:44:35.329]    </block>
[22:44:35.331]    <control if="" while="1" timeout="200" info="">
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.331]      // while "1"  (timeout="200")
[22:44:35.331]      // while-condition  =>  TRUE
[22:44:35.332]      // while "1"  (timeout="200")
[22:44:35.332]      // while  =>  TIMEOUT
[22:44:35.332]      // end while "1"
[22:44:35.332]    </control>
[22:44:35.332]    <control if="canReadPins" while="" timeout="0" info="">
[22:44:35.332]      // if-block "canReadPins"
[22:44:35.332]        // =>  TRUE
[22:44:35.333]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:44:35.333]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:44:35.335]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:44:35.335]        // while-condition  =>  FALSE
[22:44:35.335]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:44:35.335]      </control>
[22:44:35.335]      // end if-block "canReadPins"
[22:44:35.335]    </control>
[22:44:35.335]    <control if="!canReadPins" while="" timeout="0" info="">
[22:44:35.335]      // if-block "!canReadPins"
[22:44:35.335]        // =>  FALSE
[22:44:35.335]      // skip if-block "!canReadPins"
[22:44:35.335]    </control>
[22:44:35.335]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:44:35.335]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:35.335]        // =>  TRUE
[22:44:35.335]      <block atomic="false" info="">
[22:44:35.335]        WriteAP(0x00, 0x190008);
[22:44:35.337]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:35.341]        WriteAP(0xF0, 0x01);
[22:44:35.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:35.341]      </block>
[22:44:35.341]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:35.341]    </control>
[22:44:35.341]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:44:35.341]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:35.341]        // =>  FALSE
[22:44:35.341]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:35.341]    </control>
[22:44:35.345]    <block atomic="false" info="">
[22:44:35.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:35.348]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:44:35.351]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:44:35.351]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:44:35.352]      __ap = 0; //lets make sure we reset the access point selection
[22:44:35.352]        // -> [__ap <= 0x00000000]
[22:44:35.352]    </block>
[22:44:35.352]  </sequence>
[22:44:35.352]  
[22:44:35.374]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:44:35.374]  
[22:44:35.374]  <debugvars>
[22:44:35.374]    // Pre-defined
[22:44:35.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:35.374]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:35.374]    __dp=0x00000000
[22:44:35.374]    __ap=0x00000000
[22:44:35.374]    __traceout=0x00000000      (Trace Disabled)
[22:44:35.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:35.374]    __FlashAddr=0x00000000
[22:44:35.374]    __FlashLen=0x00000000
[22:44:35.374]    __FlashArg=0x00000000
[22:44:35.374]    __FlashOp=0x00000000
[22:44:35.374]    __Result=0x00000000
[22:44:35.374]  </debugvars>
[22:44:35.377]  
[22:44:35.377]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:44:35.377]    <block atomic="false" info="">
[22:44:35.377]      __var deviceID = 0;
[22:44:35.377]        // -> [deviceID <= 0x00000000]
[22:44:35.377]      __var version = 0;
[22:44:35.377]        // -> [version <= 0x00000000]
[22:44:35.377]      __var partNum = 0;
[22:44:35.377]        // -> [partNum <= 0x00000000]
[22:44:35.377]      __var manuf = 0;
[22:44:35.378]        // -> [manuf <= 0x00000000]
[22:44:35.378]      __var isMSPM0G1X0X_G3X0X = 0;
[22:44:35.378]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:44:35.378]      __var isProduction = 0;
[22:44:35.378]        // -> [isProduction <= 0x00000000]
[22:44:35.378]      __var continueId = 0;
[22:44:35.378]        // -> [continueId <= 0x00000000]
[22:44:35.378]      deviceID =   Read32(0x41C40004);
[22:44:35.383]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:44:35.383]        // -> [deviceID <= 0x2BB8802F]
[22:44:35.383]      version = deviceID >> 28;
[22:44:35.383]        // -> [version <= 0x00000002]
[22:44:35.383]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:44:35.383]        // -> [partNum <= 0x0000BB88]
[22:44:35.383]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:44:35.383]        // -> [manuf <= 0x00000017]
[22:44:35.383]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:44:35.383]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:44:35.383]      isProduction = (version > 0);
[22:44:35.383]        // -> [isProduction <= 0x00000001]
[22:44:35.383]    </block>
[22:44:35.383]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:44:35.383]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:44:35.383]        // =>  FALSE
[22:44:35.385]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:44:35.386]    </control>
[22:44:35.386]    <control if="continueId == 4" while="" timeout="0" info="">
[22:44:35.386]      // if-block "continueId == 4"
[22:44:35.386]        // =>  FALSE
[22:44:35.386]      // skip if-block "continueId == 4"
[22:44:35.386]    </control>
[22:44:35.386]    <control if="!isProduction" while="" timeout="0" info="">
[22:44:35.386]      // if-block "!isProduction"
[22:44:35.386]        // =>  FALSE
[22:44:35.386]      // skip if-block "!isProduction"
[22:44:35.386]    </control>
[22:44:35.386]  </sequence>
[22:44:35.387]  
[22:45:39.625]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:39.625]  
[22:45:39.634]  <debugvars>
[22:45:39.634]    // Pre-defined
[22:45:39.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:39.634]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:39.634]    __dp=0x00000000
[22:45:39.634]    __ap=0x00000000
[22:45:39.634]    __traceout=0x00000000      (Trace Disabled)
[22:45:39.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:39.634]    __FlashAddr=0x00000000
[22:45:39.635]    __FlashLen=0x00000000
[22:45:39.635]    __FlashArg=0x00000000
[22:45:39.635]    __FlashOp=0x00000000
[22:45:39.635]    __Result=0x00000000
[22:45:39.635]  </debugvars>
[22:45:39.635]  
[22:45:39.635]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:39.635]    <block atomic="false" info="">
[22:45:39.635]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:39.635]        // -> [isSWJ <= 0x00000001]
[22:45:39.635]      __var hasDormant = __protocol & 0x00020000;
[22:45:39.635]        // -> [hasDormant <= 0x00000000]
[22:45:39.635]      __var protType   = __protocol & 0x0000FFFF;
[22:45:39.635]        // -> [protType <= 0x00000002]
[22:45:39.635]    </block>
[22:45:39.635]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:39.635]      // if-block "protType == 1"
[22:45:39.635]        // =>  FALSE
[22:45:39.635]      // skip if-block "protType == 1"
[22:45:39.635]    </control>
[22:45:39.635]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:39.635]      // if-block "protType == 2"
[22:45:39.635]        // =>  TRUE
[22:45:39.635]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:39.635]        // if-block "isSWJ"
[22:45:39.635]          // =>  TRUE
[22:45:39.635]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:39.635]          // if-block "hasDormant"
[22:45:39.635]            // =>  FALSE
[22:45:39.635]          // skip if-block "hasDormant"
[22:45:39.635]        </control>
[22:45:39.635]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:39.640]          // if-block "!hasDormant"
[22:45:39.640]            // =>  TRUE
[22:45:39.640]          <block atomic="false" info="">
[22:45:39.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:39.640]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:39.640]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:39.642]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:39.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:39.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:39.644]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:39.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:39.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:39.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:39.648]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:39.648]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:39.648]          </block>
[22:45:39.648]          // end if-block "!hasDormant"
[22:45:39.648]        </control>
[22:45:39.648]        // end if-block "isSWJ"
[22:45:39.648]      </control>
[22:45:39.648]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:39.648]        // if-block "!isSWJ"
[22:45:39.652]          // =>  FALSE
[22:45:39.652]        // skip if-block "!isSWJ"
[22:45:39.652]      </control>
[22:45:39.652]      <block atomic="false" info="">
[22:45:39.652]        ReadDP(0x0);
[22:45:39.653]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:39.653]      </block>
[22:45:39.653]      // end if-block "protType == 2"
[22:45:39.653]    </control>
[22:45:39.653]  </sequence>
[22:45:39.653]  
[22:45:39.656]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:45:39.656]  
[22:45:39.656]  <debugvars>
[22:45:39.656]    // Pre-defined
[22:45:39.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:39.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:39.656]    __dp=0x00000000
[22:45:39.656]    __ap=0x00000000
[22:45:39.656]    __traceout=0x00000000      (Trace Disabled)
[22:45:39.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:39.656]    __FlashAddr=0x00000000
[22:45:39.656]    __FlashLen=0x00000000
[22:45:39.656]    __FlashArg=0x00000000
[22:45:39.656]    __FlashOp=0x00000000
[22:45:39.656]    __Result=0x00000000
[22:45:39.656]  </debugvars>
[22:45:39.656]  
[22:45:39.656]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:45:39.656]    <block atomic="false" info="">
[22:45:39.656]      __var SW_DP_ABORT       = 0x0;
[22:45:39.656]        // -> [SW_DP_ABORT <= 0x00000000]
[22:45:39.656]      __var DP_CTRL_STAT      = 0x4;
[22:45:39.656]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:45:39.656]      __var DP_SELECT         = 0x8;
[22:45:39.656]        // -> [DP_SELECT <= 0x00000008]
[22:45:39.656]      __var powered_down      = 0;
[22:45:39.656]        // -> [powered_down <= 0x00000000]
[22:45:39.656]      WriteDP(DP_SELECT, 0x00000000);
[22:45:39.662]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:45:39.662]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:45:39.664]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:45:39.664]        // -> [powered_down <= 0x00000001]
[22:45:39.664]    </block>
[22:45:39.664]    <control if="powered_down" while="" timeout="0" info="">
[22:45:39.664]      // if-block "powered_down"
[22:45:39.664]        // =>  TRUE
[22:45:39.664]      <block atomic="false" info="">
[22:45:39.664]        Message(0, "Debug/System power-up request sent");
[22:45:39.664]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:45:39.669]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:45:39.669]      </block>
[22:45:39.669]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:45:39.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:39.669]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:45:39.669]        // while-condition  =>  FALSE
[22:45:39.669]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:45:39.669]      </control>
[22:45:39.669]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:45:39.672]        // if-block "(__protocol & 0xFFFF) == 1"
[22:45:39.672]          // =>  FALSE
[22:45:39.672]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:45:39.672]      </control>
[22:45:39.672]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:45:39.672]        // if-block "(__protocol & 0xFFFF) == 2"
[22:45:39.672]          // =>  TRUE
[22:45:39.672]        <block atomic="false" info="">
[22:45:39.672]          Message(0, "executing SWD power up");
[22:45:39.675]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:45:39.676]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:45:39.676]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:45:39.678]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:45:39.678]        </block>
[22:45:39.678]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:45:39.678]      </control>
[22:45:39.678]      // end if-block "powered_down"
[22:45:39.680]    </control>
[22:45:39.680]    <block atomic="false" info="">
[22:45:39.680]      __var DEBUG_PORT_VAL    = 0;
[22:45:39.680]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:45:39.680]      __var ACCESS_POINT_VAL  = 0;
[22:45:39.680]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:45:39.680]      __ap = 1; 
[22:45:39.680]        // -> [__ap <= 0x00000001]
[22:45:39.680]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:45:39.684]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:45:39.684]      __ap = 4;
[22:45:39.684]        // -> [__ap <= 0x00000004]
[22:45:39.684]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:39.688]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:45:39.692]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:45:39.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:39.694]    </block>
[22:45:39.694]    <block atomic="false" info="">
[22:45:39.694]      __var nReset = 0x80;
[22:45:39.694]        // -> [nReset <= 0x00000080]
[22:45:39.695]      __var canReadPins = 0;
[22:45:39.695]        // -> [canReadPins <= 0x00000000]
[22:45:39.695]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:45:39.696]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:45:39.696]        // -> [canReadPins <= 0x00000001]
[22:45:39.696]    </block>
[22:45:39.696]    <control if="" while="1" timeout="200" info="">
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.696]      // while-condition  =>  TRUE
[22:45:39.696]      // while "1"  (timeout="200")
[22:45:39.700]      // while-condition  =>  TRUE
[22:45:39.700]      // while "1"  (timeout="200")
[22:45:39.700]      // while-condition  =>  TRUE
[22:45:39.700]      // while "1"  (timeout="200")
[22:45:39.700]      // while-condition  =>  TRUE
[22:45:39.700]      // while "1"  (timeout="200")
[22:45:39.700]      // while-condition  =>  TRUE
[22:45:39.700]      // while "1"  (timeout="200")
[22:45:39.700]      // while-condition  =>  TRUE
[22:45:39.700]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.702]      // while-condition  =>  TRUE
[22:45:39.702]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.704]      // while "1"  (timeout="200")
[22:45:39.704]      // while-condition  =>  TRUE
[22:45:39.708]      // while "1"  (timeout="200")
[22:45:39.708]      // while  =>  TIMEOUT
[22:45:39.708]      // end while "1"
[22:45:39.708]    </control>
[22:45:39.708]    <control if="canReadPins" while="" timeout="0" info="">
[22:45:39.708]      // if-block "canReadPins"
[22:45:39.708]        // =>  TRUE
[22:45:39.708]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:45:39.708]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:45:39.708]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:45:39.708]        // while-condition  =>  FALSE
[22:45:39.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:45:39.708]      </control>
[22:45:39.708]      // end if-block "canReadPins"
[22:45:39.708]    </control>
[22:45:39.708]    <control if="!canReadPins" while="" timeout="0" info="">
[22:45:39.708]      // if-block "!canReadPins"
[22:45:39.708]        // =>  FALSE
[22:45:39.712]      // skip if-block "!canReadPins"
[22:45:39.712]    </control>
[22:45:39.712]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:45:39.712]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:39.712]        // =>  TRUE
[22:45:39.712]      <block atomic="false" info="">
[22:45:39.712]        WriteAP(0x00, 0x190008);
[22:45:39.712]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:39.712]        WriteAP(0xF0, 0x01);
[22:45:39.720]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:39.720]      </block>
[22:45:39.721]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:39.721]    </control>
[22:45:39.721]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:45:39.721]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:39.721]        // =>  FALSE
[22:45:39.721]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:39.721]    </control>
[22:45:39.721]    <block atomic="false" info="">
[22:45:39.722]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:39.728]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:45:39.728]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:45:39.728]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:39.728]      __ap = 0; //lets make sure we reset the access point selection
[22:45:39.728]        // -> [__ap <= 0x00000000]
[22:45:39.728]    </block>
[22:45:39.728]  </sequence>
[22:45:39.728]  
[22:45:39.752]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:45:39.752]  
[22:45:39.752]  <debugvars>
[22:45:39.752]    // Pre-defined
[22:45:39.752]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:39.752]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:45:39.752]    __dp=0x00000000
[22:45:39.752]    __ap=0x00000000
[22:45:39.752]    __traceout=0x00000000      (Trace Disabled)
[22:45:39.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:39.752]    __FlashAddr=0x00000000
[22:45:39.752]    __FlashLen=0x00000000
[22:45:39.752]    __FlashArg=0x00000000
[22:45:39.752]    __FlashOp=0x00000000
[22:45:39.756]    __Result=0x00000000
[22:45:39.756]  </debugvars>
[22:45:39.756]  
[22:45:39.757]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:45:39.757]    <block atomic="false" info="">
[22:45:39.757]      __var deviceID = 0;
[22:45:39.757]        // -> [deviceID <= 0x00000000]
[22:45:39.757]      __var version = 0;
[22:45:39.757]        // -> [version <= 0x00000000]
[22:45:39.757]      __var partNum = 0;
[22:45:39.757]        // -> [partNum <= 0x00000000]
[22:45:39.757]      __var manuf = 0;
[22:45:39.757]        // -> [manuf <= 0x00000000]
[22:45:39.757]      __var isMSPM0G1X0X_G3X0X = 0;
[22:45:39.757]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:45:39.757]      __var isProduction = 0;
[22:45:39.757]        // -> [isProduction <= 0x00000000]
[22:45:39.757]      __var continueId = 0;
[22:45:39.757]        // -> [continueId <= 0x00000000]
[22:45:39.757]      deviceID =   Read32(0x41C40004);
[22:45:39.764]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:45:39.764]        // -> [deviceID <= 0x2BB8802F]
[22:45:39.764]      version = deviceID >> 28;
[22:45:39.768]        // -> [version <= 0x00000002]
[22:45:39.768]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:45:39.768]        // -> [partNum <= 0x0000BB88]
[22:45:39.768]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:45:39.768]        // -> [manuf <= 0x00000017]
[22:45:39.768]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:45:39.768]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:45:39.769]      isProduction = (version > 0);
[22:45:39.769]        // -> [isProduction <= 0x00000001]
[22:45:39.769]    </block>
[22:45:39.769]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:45:39.769]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:45:39.769]        // =>  FALSE
[22:45:39.769]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:45:39.769]    </control>
[22:45:39.769]    <control if="continueId == 4" while="" timeout="0" info="">
[22:45:39.769]      // if-block "continueId == 4"
[22:45:39.769]        // =>  FALSE
[22:45:39.769]      // skip if-block "continueId == 4"
[22:45:39.769]    </control>
[22:45:39.769]    <control if="!isProduction" while="" timeout="0" info="">
[22:45:39.769]      // if-block "!isProduction"
[22:45:39.769]        // =>  FALSE
[22:45:39.769]      // skip if-block "!isProduction"
[22:45:39.769]    </control>
[22:45:39.769]  </sequence>
[22:45:39.769]  
[22:45:45.348]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:45:45.348]  
[22:45:45.357]  <debugvars>
[22:45:45.357]    // Pre-defined
[22:45:45.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:45.357]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:45:45.357]    __dp=0x00000000
[22:45:45.357]    __ap=0x00000000
[22:45:45.357]    __traceout=0x00000000      (Trace Disabled)
[22:45:45.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:45.357]    __FlashAddr=0x00000000
[22:45:45.357]    __FlashLen=0x00000000
[22:45:45.357]    __FlashArg=0x00000000
[22:45:45.357]    __FlashOp=0x00000000
[22:45:45.357]    __Result=0x00000000
[22:45:45.357]  </debugvars>
[22:45:45.357]  
[22:45:45.357]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:45:45.357]    <block atomic="false" info="">
[22:45:45.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:45:45.359]        // -> [isSWJ <= 0x00000001]
[22:45:45.359]      __var hasDormant = __protocol & 0x00020000;
[22:45:45.359]        // -> [hasDormant <= 0x00000000]
[22:45:45.359]      __var protType   = __protocol & 0x0000FFFF;
[22:45:45.359]        // -> [protType <= 0x00000002]
[22:45:45.359]    </block>
[22:45:45.359]    <control if="protType == 1" while="" timeout="0" info="">
[22:45:45.359]      // if-block "protType == 1"
[22:45:45.359]        // =>  FALSE
[22:45:45.359]      // skip if-block "protType == 1"
[22:45:45.359]    </control>
[22:45:45.359]    <control if="protType == 2" while="" timeout="0" info="">
[22:45:45.361]      // if-block "protType == 2"
[22:45:45.361]        // =>  TRUE
[22:45:45.361]      <control if="isSWJ" while="" timeout="0" info="">
[22:45:45.361]        // if-block "isSWJ"
[22:45:45.361]          // =>  TRUE
[22:45:45.361]        <control if="hasDormant" while="" timeout="0" info="">
[22:45:45.361]          // if-block "hasDormant"
[22:45:45.361]            // =>  FALSE
[22:45:45.361]          // skip if-block "hasDormant"
[22:45:45.361]        </control>
[22:45:45.361]        <control if="!hasDormant" while="" timeout="0" info="">
[22:45:45.361]          // if-block "!hasDormant"
[22:45:45.361]            // =>  TRUE
[22:45:45.362]          <block atomic="false" info="">
[22:45:45.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:45:45.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:45.362]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:45:45.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:45:45.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:45:45.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:45.366]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:45:45.366]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:45:45.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:45:45.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:45:45.370]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:45:45.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:45:45.372]          </block>
[22:45:45.374]          // end if-block "!hasDormant"
[22:45:45.374]        </control>
[22:45:45.374]        // end if-block "isSWJ"
[22:45:45.374]      </control>
[22:45:45.374]      <control if="!isSWJ" while="" timeout="0" info="">
[22:45:45.374]        // if-block "!isSWJ"
[22:45:45.374]          // =>  FALSE
[22:45:45.374]        // skip if-block "!isSWJ"
[22:45:45.374]      </control>
[22:45:45.374]      <block atomic="false" info="">
[22:45:45.374]        ReadDP(0x0);
[22:45:45.374]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:45:45.378]      </block>
[22:45:45.378]      // end if-block "protType == 2"
[22:45:45.378]    </control>
[22:45:45.378]  </sequence>
[22:45:45.378]  
[22:45:45.378]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:45:45.378]  
[22:45:45.378]  <debugvars>
[22:45:45.378]    // Pre-defined
[22:45:45.378]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:45.378]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:45:45.378]    __dp=0x00000000
[22:45:45.378]    __ap=0x00000000
[22:45:45.378]    __traceout=0x00000000      (Trace Disabled)
[22:45:45.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:45.382]    __FlashAddr=0x00000000
[22:45:45.382]    __FlashLen=0x00000000
[22:45:45.382]    __FlashArg=0x00000000
[22:45:45.382]    __FlashOp=0x00000000
[22:45:45.382]    __Result=0x00000000
[22:45:45.382]  </debugvars>
[22:45:45.382]  
[22:45:45.382]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:45:45.382]    <block atomic="false" info="">
[22:45:45.382]      __var SW_DP_ABORT       = 0x0;
[22:45:45.382]        // -> [SW_DP_ABORT <= 0x00000000]
[22:45:45.382]      __var DP_CTRL_STAT      = 0x4;
[22:45:45.382]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:45:45.382]      __var DP_SELECT         = 0x8;
[22:45:45.382]        // -> [DP_SELECT <= 0x00000008]
[22:45:45.382]      __var powered_down      = 0;
[22:45:45.382]        // -> [powered_down <= 0x00000000]
[22:45:45.382]      WriteDP(DP_SELECT, 0x00000000);
[22:45:45.382]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:45:45.387]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:45:45.388]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:45:45.388]        // -> [powered_down <= 0x00000001]
[22:45:45.388]    </block>
[22:45:45.389]    <control if="powered_down" while="" timeout="0" info="">
[22:45:45.389]      // if-block "powered_down"
[22:45:45.389]        // =>  TRUE
[22:45:45.389]      <block atomic="false" info="">
[22:45:45.389]        Message(0, "Debug/System power-up request sent");
[22:45:45.389]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:45:45.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:45:45.392]      </block>
[22:45:45.392]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:45:45.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:45:45.396]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:45:45.396]        // while-condition  =>  FALSE
[22:45:45.396]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:45:45.396]      </control>
[22:45:45.396]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:45:45.396]        // if-block "(__protocol & 0xFFFF) == 1"
[22:45:45.398]          // =>  FALSE
[22:45:45.398]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:45:45.398]      </control>
[22:45:45.398]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:45:45.398]        // if-block "(__protocol & 0xFFFF) == 2"
[22:45:45.398]          // =>  TRUE
[22:45:45.398]        <block atomic="false" info="">
[22:45:45.398]          Message(0, "executing SWD power up");
[22:45:45.399]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:45:45.401]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:45:45.401]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:45:45.403]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:45:45.403]        </block>
[22:45:45.403]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:45:45.403]      </control>
[22:45:45.404]      // end if-block "powered_down"
[22:45:45.404]    </control>
[22:45:45.404]    <block atomic="false" info="">
[22:45:45.404]      __var DEBUG_PORT_VAL    = 0;
[22:45:45.404]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:45:45.404]      __var ACCESS_POINT_VAL  = 0;
[22:45:45.404]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:45:45.405]      __ap = 1; 
[22:45:45.405]        // -> [__ap <= 0x00000001]
[22:45:45.405]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:45:45.409]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:45:45.409]      __ap = 4;
[22:45:45.409]        // -> [__ap <= 0x00000004]
[22:45:45.409]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:45.412]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:45:45.412]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:45:45.413]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:45.413]    </block>
[22:45:45.413]    <block atomic="false" info="">
[22:45:45.413]      __var nReset = 0x80;
[22:45:45.413]        // -> [nReset <= 0x00000080]
[22:45:45.413]      __var canReadPins = 0;
[22:45:45.413]        // -> [canReadPins <= 0x00000000]
[22:45:45.413]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:45:45.416]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:45:45.416]        // -> [canReadPins <= 0x00000001]
[22:45:45.416]    </block>
[22:45:45.416]    <control if="" while="1" timeout="200" info="">
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.416]      // while "1"  (timeout="200")
[22:45:45.416]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.420]      // while "1"  (timeout="200")
[22:45:45.420]      // while-condition  =>  TRUE
[22:45:45.422]      // while "1"  (timeout="200")
[22:45:45.422]      // while-condition  =>  TRUE
[22:45:45.422]      // while "1"  (timeout="200")
[22:45:45.422]      // while-condition  =>  TRUE
[22:45:45.422]      // while "1"  (timeout="200")
[22:45:45.422]      // while-condition  =>  TRUE
[22:45:45.422]      // while "1"  (timeout="200")
[22:45:45.422]      // while-condition  =>  TRUE
[22:45:45.422]      // while "1"  (timeout="200")
[22:45:45.422]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.424]      // while-condition  =>  TRUE
[22:45:45.424]      // while "1"  (timeout="200")
[22:45:45.428]      // while-condition  =>  TRUE
[22:45:45.428]      // while "1"  (timeout="200")
[22:45:45.428]      // while  =>  TIMEOUT
[22:45:45.428]      // end while "1"
[22:45:45.428]    </control>
[22:45:45.428]    <control if="canReadPins" while="" timeout="0" info="">
[22:45:45.428]      // if-block "canReadPins"
[22:45:45.428]        // =>  TRUE
[22:45:45.428]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:45:45.428]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:45:45.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:45:45.428]        // while-condition  =>  FALSE
[22:45:45.431]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:45:45.431]      </control>
[22:45:45.431]      // end if-block "canReadPins"
[22:45:45.431]    </control>
[22:45:45.431]    <control if="!canReadPins" while="" timeout="0" info="">
[22:45:45.431]      // if-block "!canReadPins"
[22:45:45.431]        // =>  FALSE
[22:45:45.431]      // skip if-block "!canReadPins"
[22:45:45.431]    </control>
[22:45:45.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:45:45.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:45.431]        // =>  TRUE
[22:45:45.431]      <block atomic="false" info="">
[22:45:45.432]        WriteAP(0x00, 0x190008);
[22:45:45.432]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:45.432]        WriteAP(0xF0, 0x01);
[22:45:45.438]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:45:45.441]      </block>
[22:45:45.441]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:45:45.441]    </control>
[22:45:45.441]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:45:45.441]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:45.441]        // =>  FALSE
[22:45:45.441]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:45:45.441]    </control>
[22:45:45.441]    <block atomic="false" info="">
[22:45:45.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:45:45.445]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:45:45.445]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:45:45.445]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:45:45.445]      __ap = 0; //lets make sure we reset the access point selection
[22:45:45.445]        // -> [__ap <= 0x00000000]
[22:45:45.445]    </block>
[22:45:45.445]  </sequence>
[22:45:45.445]  
[22:45:45.478]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:45:45.478]  
[22:45:45.478]  <debugvars>
[22:45:45.478]    // Pre-defined
[22:45:45.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:45:45.478]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:45:45.478]    __dp=0x00000000
[22:45:45.478]    __ap=0x00000000
[22:45:45.478]    __traceout=0x00000000      (Trace Disabled)
[22:45:45.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:45:45.478]    __FlashAddr=0x00000000
[22:45:45.478]    __FlashLen=0x00000000
[22:45:45.478]    __FlashArg=0x00000000
[22:45:45.478]    __FlashOp=0x00000000
[22:45:45.478]    __Result=0x00000000
[22:45:45.478]  </debugvars>
[22:45:45.478]  
[22:45:45.478]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:45:45.478]    <block atomic="false" info="">
[22:45:45.478]      __var deviceID = 0;
[22:45:45.478]        // -> [deviceID <= 0x00000000]
[22:45:45.478]      __var version = 0;
[22:45:45.478]        // -> [version <= 0x00000000]
[22:45:45.482]      __var partNum = 0;
[22:45:45.482]        // -> [partNum <= 0x00000000]
[22:45:45.482]      __var manuf = 0;
[22:45:45.482]        // -> [manuf <= 0x00000000]
[22:45:45.482]      __var isMSPM0G1X0X_G3X0X = 0;
[22:45:45.482]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:45:45.482]      __var isProduction = 0;
[22:45:45.482]        // -> [isProduction <= 0x00000000]
[22:45:45.482]      __var continueId = 0;
[22:45:45.482]        // -> [continueId <= 0x00000000]
[22:45:45.482]      deviceID =   Read32(0x41C40004);
[22:45:45.491]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:45:45.491]        // -> [deviceID <= 0x2BB8802F]
[22:45:45.491]      version = deviceID >> 28;
[22:45:45.491]        // -> [version <= 0x00000002]
[22:45:45.492]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:45:45.492]        // -> [partNum <= 0x0000BB88]
[22:45:45.492]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:45:45.492]        // -> [manuf <= 0x00000017]
[22:45:45.492]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:45:45.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:45:45.492]      isProduction = (version > 0);
[22:45:45.492]        // -> [isProduction <= 0x00000001]
[22:45:45.492]    </block>
[22:45:45.492]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:45:45.492]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:45:45.492]        // =>  FALSE
[22:45:45.492]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:45:45.492]    </control>
[22:45:45.492]    <control if="continueId == 4" while="" timeout="0" info="">
[22:45:45.492]      // if-block "continueId == 4"
[22:45:45.492]        // =>  FALSE
[22:45:45.495]      // skip if-block "continueId == 4"
[22:45:45.495]    </control>
[22:45:45.495]    <control if="!isProduction" while="" timeout="0" info="">
[22:45:45.495]      // if-block "!isProduction"
[22:45:45.495]        // =>  FALSE
[22:45:45.495]      // skip if-block "!isProduction"
[22:45:45.495]    </control>
[22:45:45.495]  </sequence>
[22:45:45.495]  
[22:52:36.370]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:36.370]  
[22:52:36.380]  <debugvars>
[22:52:36.380]    // Pre-defined
[22:52:36.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:36.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:36.380]    __dp=0x00000000
[22:52:36.380]    __ap=0x00000000
[22:52:36.380]    __traceout=0x00000000      (Trace Disabled)
[22:52:36.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:36.380]    __FlashAddr=0x00000000
[22:52:36.381]    __FlashLen=0x00000000
[22:52:36.381]    __FlashArg=0x00000000
[22:52:36.381]    __FlashOp=0x00000000
[22:52:36.381]    __Result=0x00000000
[22:52:36.381]  </debugvars>
[22:52:36.381]  
[22:52:36.381]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:36.381]    <block atomic="false" info="">
[22:52:36.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:36.381]        // -> [isSWJ <= 0x00000001]
[22:52:36.381]      __var hasDormant = __protocol & 0x00020000;
[22:52:36.381]        // -> [hasDormant <= 0x00000000]
[22:52:36.381]      __var protType   = __protocol & 0x0000FFFF;
[22:52:36.381]        // -> [protType <= 0x00000002]
[22:52:36.381]    </block>
[22:52:36.381]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:36.381]      // if-block "protType == 1"
[22:52:36.381]        // =>  FALSE
[22:52:36.381]      // skip if-block "protType == 1"
[22:52:36.381]    </control>
[22:52:36.381]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:36.381]      // if-block "protType == 2"
[22:52:36.381]        // =>  TRUE
[22:52:36.381]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:36.381]        // if-block "isSWJ"
[22:52:36.381]          // =>  TRUE
[22:52:36.381]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:36.381]          // if-block "hasDormant"
[22:52:36.381]            // =>  FALSE
[22:52:36.381]          // skip if-block "hasDormant"
[22:52:36.381]        </control>
[22:52:36.381]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:36.381]          // if-block "!hasDormant"
[22:52:36.381]            // =>  TRUE
[22:52:36.385]          <block atomic="false" info="">
[22:52:36.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:36.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:36.385]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:36.385]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:36.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:36.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:36.389]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:36.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:36.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:36.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:36.393]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:36.397]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:36.397]          </block>
[22:52:36.397]          // end if-block "!hasDormant"
[22:52:36.397]        </control>
[22:52:36.397]        // end if-block "isSWJ"
[22:52:36.397]      </control>
[22:52:36.397]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:36.397]        // if-block "!isSWJ"
[22:52:36.397]          // =>  FALSE
[22:52:36.397]        // skip if-block "!isSWJ"
[22:52:36.397]      </control>
[22:52:36.397]      <block atomic="false" info="">
[22:52:36.397]        ReadDP(0x0);
[22:52:36.400]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:36.400]      </block>
[22:52:36.400]      // end if-block "protType == 2"
[22:52:36.400]    </control>
[22:52:36.400]  </sequence>
[22:52:36.400]  
[22:52:36.400]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:52:36.400]  
[22:52:36.400]  <debugvars>
[22:52:36.400]    // Pre-defined
[22:52:36.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:36.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:36.400]    __dp=0x00000000
[22:52:36.400]    __ap=0x00000000
[22:52:36.400]    __traceout=0x00000000      (Trace Disabled)
[22:52:36.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:36.404]    __FlashAddr=0x00000000
[22:52:36.404]    __FlashLen=0x00000000
[22:52:36.404]    __FlashArg=0x00000000
[22:52:36.404]    __FlashOp=0x00000000
[22:52:36.404]    __Result=0x00000000
[22:52:36.404]  </debugvars>
[22:52:36.404]  
[22:52:36.404]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:52:36.404]    <block atomic="false" info="">
[22:52:36.404]      __var SW_DP_ABORT       = 0x0;
[22:52:36.404]        // -> [SW_DP_ABORT <= 0x00000000]
[22:52:36.404]      __var DP_CTRL_STAT      = 0x4;
[22:52:36.404]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:52:36.404]      __var DP_SELECT         = 0x8;
[22:52:36.404]        // -> [DP_SELECT <= 0x00000008]
[22:52:36.404]      __var powered_down      = 0;
[22:52:36.404]        // -> [powered_down <= 0x00000000]
[22:52:36.404]      WriteDP(DP_SELECT, 0x00000000);
[22:52:36.404]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:52:36.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:52:36.408]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:52:36.408]        // -> [powered_down <= 0x00000001]
[22:52:36.408]    </block>
[22:52:36.408]    <control if="powered_down" while="" timeout="0" info="">
[22:52:36.408]      // if-block "powered_down"
[22:52:36.408]        // =>  TRUE
[22:52:36.408]      <block atomic="false" info="">
[22:52:36.408]        Message(0, "Debug/System power-up request sent");
[22:52:36.410]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:52:36.412]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:52:36.412]      </block>
[22:52:36.412]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:52:36.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:36.416]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:52:36.416]        // while-condition  =>  FALSE
[22:52:36.416]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:52:36.416]      </control>
[22:52:36.416]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:52:36.416]        // if-block "(__protocol & 0xFFFF) == 1"
[22:52:36.416]          // =>  FALSE
[22:52:36.416]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:52:36.416]      </control>
[22:52:36.416]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:52:36.416]        // if-block "(__protocol & 0xFFFF) == 2"
[22:52:36.416]          // =>  TRUE
[22:52:36.416]        <block atomic="false" info="">
[22:52:36.416]          Message(0, "executing SWD power up");
[22:52:36.420]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:52:36.432]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:52:36.432]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:52:36.434]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:52:36.434]        </block>
[22:52:36.434]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:52:36.434]      </control>
[22:52:36.434]      // end if-block "powered_down"
[22:52:36.434]    </control>
[22:52:36.434]    <block atomic="false" info="">
[22:52:36.434]      __var DEBUG_PORT_VAL    = 0;
[22:52:36.434]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:52:36.434]      __var ACCESS_POINT_VAL  = 0;
[22:52:36.437]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:52:36.437]      __ap = 1; 
[22:52:36.437]        // -> [__ap <= 0x00000001]
[22:52:36.437]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:52:36.442]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:52:36.442]      __ap = 4;
[22:52:36.442]        // -> [__ap <= 0x00000004]
[22:52:36.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:36.450]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:52:36.450]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:52:36.450]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:36.450]    </block>
[22:52:36.450]    <block atomic="false" info="">
[22:52:36.453]      __var nReset = 0x80;
[22:52:36.453]        // -> [nReset <= 0x00000080]
[22:52:36.453]      __var canReadPins = 0;
[22:52:36.453]        // -> [canReadPins <= 0x00000000]
[22:52:36.453]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:52:36.457]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:52:36.457]        // -> [canReadPins <= 0x00000001]
[22:52:36.457]    </block>
[22:52:36.457]    <control if="" while="1" timeout="200" info="">
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.457]      // while "1"  (timeout="200")
[22:52:36.457]      // while-condition  =>  TRUE
[22:52:36.459]      // while "1"  (timeout="200")
[22:52:36.459]      // while-condition  =>  TRUE
[22:52:36.459]      // while "1"  (timeout="200")
[22:52:36.459]      // while-condition  =>  TRUE
[22:52:36.459]      // while "1"  (timeout="200")
[22:52:36.459]      // while-condition  =>  TRUE
[22:52:36.459]      // while "1"  (timeout="200")
[22:52:36.459]      // while-condition  =>  TRUE
[22:52:36.460]      // while "1"  (timeout="200")
[22:52:36.460]      // while-condition  =>  TRUE
[22:52:36.460]      // while "1"  (timeout="200")
[22:52:36.460]      // while-condition  =>  TRUE
[22:52:36.461]      // while "1"  (timeout="200")
[22:52:36.461]      // while-condition  =>  TRUE
[22:52:36.461]      // while "1"  (timeout="200")
[22:52:36.461]      // while-condition  =>  TRUE
[22:52:36.461]      // while "1"  (timeout="200")
[22:52:36.461]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.462]      // while "1"  (timeout="200")
[22:52:36.462]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.464]      // while "1"  (timeout="200")
[22:52:36.464]      // while-condition  =>  TRUE
[22:52:36.465]      // while "1"  (timeout="200")
[22:52:36.465]      // while-condition  =>  TRUE
[22:52:36.465]      // while "1"  (timeout="200")
[22:52:36.465]      // while-condition  =>  TRUE
[22:52:36.465]      // while "1"  (timeout="200")
[22:52:36.465]      // while-condition  =>  TRUE
[22:52:36.465]      // while "1"  (timeout="200")
[22:52:36.465]      // while-condition  =>  TRUE
[22:52:36.465]      // while "1"  (timeout="200")
[22:52:36.465]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.466]      // while "1"  (timeout="200")
[22:52:36.466]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.467]      // while-condition  =>  TRUE
[22:52:36.467]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.469]      // while "1"  (timeout="200")
[22:52:36.469]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.471]      // while "1"  (timeout="200")
[22:52:36.471]      // while-condition  =>  TRUE
[22:52:36.473]      // while "1"  (timeout="200")
[22:52:36.473]      // while  =>  TIMEOUT
[22:52:36.473]      // end while "1"
[22:52:36.473]    </control>
[22:52:36.473]    <control if="canReadPins" while="" timeout="0" info="">
[22:52:36.473]      // if-block "canReadPins"
[22:52:36.473]        // =>  TRUE
[22:52:36.474]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:52:36.474]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:52:36.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:52:36.474]        // while-condition  =>  FALSE
[22:52:36.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:52:36.474]      </control>
[22:52:36.474]      // end if-block "canReadPins"
[22:52:36.474]    </control>
[22:52:36.474]    <control if="!canReadPins" while="" timeout="0" info="">
[22:52:36.474]      // if-block "!canReadPins"
[22:52:36.474]        // =>  FALSE
[22:52:36.474]      // skip if-block "!canReadPins"
[22:52:36.474]    </control>
[22:52:36.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:52:36.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:36.474]        // =>  TRUE
[22:52:36.474]      <block atomic="false" info="">
[22:52:36.474]        WriteAP(0x00, 0x190008);
[22:52:36.482]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:36.482]        WriteAP(0xF0, 0x01);
[22:52:36.486]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:36.486]      </block>
[22:52:36.486]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:36.486]    </control>
[22:52:36.486]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:52:36.486]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:36.486]        // =>  FALSE
[22:52:36.486]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:36.486]    </control>
[22:52:36.486]    <block atomic="false" info="">
[22:52:36.486]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:36.490]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:52:36.490]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:52:36.490]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:36.490]      __ap = 0; //lets make sure we reset the access point selection
[22:52:36.490]        // -> [__ap <= 0x00000000]
[22:52:36.490]    </block>
[22:52:36.490]  </sequence>
[22:52:36.490]  
[22:52:36.519]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:52:36.519]  
[22:52:36.519]  <debugvars>
[22:52:36.519]    // Pre-defined
[22:52:36.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:36.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:36.519]    __dp=0x00000000
[22:52:36.519]    __ap=0x00000000
[22:52:36.520]    __traceout=0x00000000      (Trace Disabled)
[22:52:36.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:36.520]    __FlashAddr=0x00000000
[22:52:36.520]    __FlashLen=0x00000000
[22:52:36.520]    __FlashArg=0x00000000
[22:52:36.520]    __FlashOp=0x00000000
[22:52:36.520]    __Result=0x00000000
[22:52:36.520]  </debugvars>
[22:52:36.520]  
[22:52:36.520]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:52:36.520]    <block atomic="false" info="">
[22:52:36.520]      __var deviceID = 0;
[22:52:36.520]        // -> [deviceID <= 0x00000000]
[22:52:36.520]      __var version = 0;
[22:52:36.520]        // -> [version <= 0x00000000]
[22:52:36.520]      __var partNum = 0;
[22:52:36.520]        // -> [partNum <= 0x00000000]
[22:52:36.520]      __var manuf = 0;
[22:52:36.520]        // -> [manuf <= 0x00000000]
[22:52:36.520]      __var isMSPM0G1X0X_G3X0X = 0;
[22:52:36.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:52:36.520]      __var isProduction = 0;
[22:52:36.520]        // -> [isProduction <= 0x00000000]
[22:52:36.520]      __var continueId = 0;
[22:52:36.520]        // -> [continueId <= 0x00000000]
[22:52:36.523]      deviceID =   Read32(0x41C40004);
[22:52:36.530]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:52:36.530]        // -> [deviceID <= 0x2BB8802F]
[22:52:36.530]      version = deviceID >> 28;
[22:52:36.530]        // -> [version <= 0x00000002]
[22:52:36.530]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:52:36.530]        // -> [partNum <= 0x0000BB88]
[22:52:36.530]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:52:36.530]        // -> [manuf <= 0x00000017]
[22:52:36.530]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:52:36.530]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:52:36.530]      isProduction = (version > 0);
[22:52:36.530]        // -> [isProduction <= 0x00000001]
[22:52:36.530]    </block>
[22:52:36.530]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:52:36.530]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:52:36.530]        // =>  FALSE
[22:52:36.530]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:52:36.530]    </control>
[22:52:36.530]    <control if="continueId == 4" while="" timeout="0" info="">
[22:52:36.530]      // if-block "continueId == 4"
[22:52:36.530]        // =>  FALSE
[22:52:36.530]      // skip if-block "continueId == 4"
[22:52:36.530]    </control>
[22:52:36.530]    <control if="!isProduction" while="" timeout="0" info="">
[22:52:36.530]      // if-block "!isProduction"
[22:52:36.530]        // =>  FALSE
[22:52:36.530]      // skip if-block "!isProduction"
[22:52:36.530]    </control>
[22:52:36.530]  </sequence>
[22:52:36.530]  
[22:53:31.167]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:53:31.167]  
[22:53:31.175]  <debugvars>
[22:53:31.175]    // Pre-defined
[22:53:31.175]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:31.175]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:31.175]    __dp=0x00000000
[22:53:31.176]    __ap=0x00000000
[22:53:31.176]    __traceout=0x00000000      (Trace Disabled)
[22:53:31.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:31.176]    __FlashAddr=0x00000000
[22:53:31.176]    __FlashLen=0x00000000
[22:53:31.176]    __FlashArg=0x00000000
[22:53:31.176]    __FlashOp=0x00000000
[22:53:31.176]    __Result=0x00000000
[22:53:31.176]  </debugvars>
[22:53:31.176]  
[22:53:31.176]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:53:31.176]    <block atomic="false" info="">
[22:53:31.176]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:53:31.176]        // -> [isSWJ <= 0x00000001]
[22:53:31.176]      __var hasDormant = __protocol & 0x00020000;
[22:53:31.176]        // -> [hasDormant <= 0x00000000]
[22:53:31.176]      __var protType   = __protocol & 0x0000FFFF;
[22:53:31.176]        // -> [protType <= 0x00000002]
[22:53:31.179]    </block>
[22:53:31.179]    <control if="protType == 1" while="" timeout="0" info="">
[22:53:31.179]      // if-block "protType == 1"
[22:53:31.179]        // =>  FALSE
[22:53:31.179]      // skip if-block "protType == 1"
[22:53:31.179]    </control>
[22:53:31.179]    <control if="protType == 2" while="" timeout="0" info="">
[22:53:31.179]      // if-block "protType == 2"
[22:53:31.179]        // =>  TRUE
[22:53:31.179]      <control if="isSWJ" while="" timeout="0" info="">
[22:53:31.179]        // if-block "isSWJ"
[22:53:31.179]          // =>  TRUE
[22:53:31.179]        <control if="hasDormant" while="" timeout="0" info="">
[22:53:31.179]          // if-block "hasDormant"
[22:53:31.179]            // =>  FALSE
[22:53:31.179]          // skip if-block "hasDormant"
[22:53:31.179]        </control>
[22:53:31.179]        <control if="!hasDormant" while="" timeout="0" info="">
[22:53:31.179]          // if-block "!hasDormant"
[22:53:31.179]            // =>  TRUE
[22:53:31.179]          <block atomic="false" info="">
[22:53:31.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:53:31.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:31.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:53:31.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:53:31.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:53:31.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:31.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:53:31.203]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:53:31.203]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:53:31.205]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:31.205]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:53:31.207]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:53:31.207]          </block>
[22:53:31.207]          // end if-block "!hasDormant"
[22:53:31.207]        </control>
[22:53:31.207]        // end if-block "isSWJ"
[22:53:31.207]      </control>
[22:53:31.207]      <control if="!isSWJ" while="" timeout="0" info="">
[22:53:31.207]        // if-block "!isSWJ"
[22:53:31.207]          // =>  FALSE
[22:53:31.207]        // skip if-block "!isSWJ"
[22:53:31.207]      </control>
[22:53:31.207]      <block atomic="false" info="">
[22:53:31.207]        ReadDP(0x0);
[22:53:31.216]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:53:31.217]      </block>
[22:53:31.217]      // end if-block "protType == 2"
[22:53:31.217]    </control>
[22:53:31.217]  </sequence>
[22:53:31.217]  
[22:53:31.224]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:53:31.224]  
[22:53:31.224]  <debugvars>
[22:53:31.224]    // Pre-defined
[22:53:31.225]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:31.225]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:31.225]    __dp=0x00000000
[22:53:31.225]    __ap=0x00000000
[22:53:31.225]    __traceout=0x00000000      (Trace Disabled)
[22:53:31.225]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:31.225]    __FlashAddr=0x00000000
[22:53:31.225]    __FlashLen=0x00000000
[22:53:31.226]    __FlashArg=0x00000000
[22:53:31.226]    __FlashOp=0x00000000
[22:53:31.226]    __Result=0x00000000
[22:53:31.226]  </debugvars>
[22:53:31.226]  
[22:53:31.226]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:53:31.226]    <block atomic="false" info="">
[22:53:31.226]      __var SW_DP_ABORT       = 0x0;
[22:53:31.226]        // -> [SW_DP_ABORT <= 0x00000000]
[22:53:31.226]      __var DP_CTRL_STAT      = 0x4;
[22:53:31.226]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:53:31.226]      __var DP_SELECT         = 0x8;
[22:53:31.228]        // -> [DP_SELECT <= 0x00000008]
[22:53:31.228]      __var powered_down      = 0;
[22:53:31.228]        // -> [powered_down <= 0x00000000]
[22:53:31.228]      WriteDP(DP_SELECT, 0x00000000);
[22:53:31.238]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:53:31.238]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:53:31.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:53:31.243]        // -> [powered_down <= 0x00000001]
[22:53:31.243]    </block>
[22:53:31.243]    <control if="powered_down" while="" timeout="0" info="">
[22:53:31.243]      // if-block "powered_down"
[22:53:31.243]        // =>  TRUE
[22:53:31.243]      <block atomic="false" info="">
[22:53:31.243]        Message(0, "Debug/System power-up request sent");
[22:53:31.244]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:53:31.250]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:53:31.252]      </block>
[22:53:31.252]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:53:31.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:53:31.253]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:53:31.253]        // while-condition  =>  FALSE
[22:53:31.253]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:53:31.253]      </control>
[22:53:31.253]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:53:31.253]        // if-block "(__protocol & 0xFFFF) == 1"
[22:53:31.253]          // =>  FALSE
[22:53:31.255]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:53:31.255]      </control>
[22:53:31.255]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:53:31.255]        // if-block "(__protocol & 0xFFFF) == 2"
[22:53:31.255]          // =>  TRUE
[22:53:31.255]        <block atomic="false" info="">
[22:53:31.255]          Message(0, "executing SWD power up");
[22:53:31.257]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:53:31.259]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:53:31.259]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:53:31.266]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:53:31.266]        </block>
[22:53:31.266]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:53:31.266]      </control>
[22:53:31.266]      // end if-block "powered_down"
[22:53:31.266]    </control>
[22:53:31.266]    <block atomic="false" info="">
[22:53:31.266]      __var DEBUG_PORT_VAL    = 0;
[22:53:31.266]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:53:31.266]      __var ACCESS_POINT_VAL  = 0;
[22:53:31.266]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:53:31.266]      __ap = 1; 
[22:53:31.266]        // -> [__ap <= 0x00000001]
[22:53:31.266]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:53:31.271]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:53:31.271]      __ap = 4;
[22:53:31.271]        // -> [__ap <= 0x00000004]
[22:53:31.271]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:53:31.279]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:53:31.279]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:53:31.282]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:53:31.283]    </block>
[22:53:31.283]    <block atomic="false" info="">
[22:53:31.283]      __var nReset = 0x80;
[22:53:31.283]        // -> [nReset <= 0x00000080]
[22:53:31.284]      __var canReadPins = 0;
[22:53:31.284]        // -> [canReadPins <= 0x00000000]
[22:53:31.284]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:53:31.284]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:53:31.284]        // -> [canReadPins <= 0x00000001]
[22:53:31.284]    </block>
[22:53:31.284]    <control if="" while="1" timeout="200" info="">
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.287]      // while-condition  =>  TRUE
[22:53:31.287]      // while "1"  (timeout="200")
[22:53:31.291]      // while-condition  =>  TRUE
[22:53:31.291]      // while "1"  (timeout="200")
[22:53:31.291]      // while-condition  =>  TRUE
[22:53:31.291]      // while "1"  (timeout="200")
[22:53:31.291]      // while-condition  =>  TRUE
[22:53:31.291]      // while "1"  (timeout="200")
[22:53:31.292]      // while-condition  =>  TRUE
[22:53:31.292]      // while "1"  (timeout="200")
[22:53:31.292]      // while-condition  =>  TRUE
[22:53:31.292]      // while "1"  (timeout="200")
[22:53:31.292]      // while-condition  =>  TRUE
[22:53:31.292]      // while "1"  (timeout="200")
[22:53:31.292]      // while-condition  =>  TRUE
[22:53:31.292]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.293]      // while "1"  (timeout="200")
[22:53:31.293]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.294]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.294]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.294]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.294]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.294]      // while-condition  =>  TRUE
[22:53:31.294]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.295]      // while-condition  =>  TRUE
[22:53:31.295]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.298]      // while-condition  =>  TRUE
[22:53:31.298]      // while "1"  (timeout="200")
[22:53:31.302]      // while-condition  =>  TRUE
[22:53:31.302]      // while "1"  (timeout="200")
[22:53:31.302]      // while  =>  TIMEOUT
[22:53:31.302]      // end while "1"
[22:53:31.302]    </control>
[22:53:31.302]    <control if="canReadPins" while="" timeout="0" info="">
[22:53:31.302]      // if-block "canReadPins"
[22:53:31.302]        // =>  TRUE
[22:53:31.302]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:53:31.302]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:53:31.304]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:53:31.304]        // while-condition  =>  FALSE
[22:53:31.304]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:53:31.304]      </control>
[22:53:31.304]      // end if-block "canReadPins"
[22:53:31.304]    </control>
[22:53:31.304]    <control if="!canReadPins" while="" timeout="0" info="">
[22:53:31.304]      // if-block "!canReadPins"
[22:53:31.304]        // =>  FALSE
[22:53:31.304]      // skip if-block "!canReadPins"
[22:53:31.304]    </control>
[22:53:31.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:53:31.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:53:31.304]        // =>  TRUE
[22:53:31.306]      <block atomic="false" info="">
[22:53:31.306]        WriteAP(0x00, 0x190008);
[22:53:31.307]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:53:31.307]        WriteAP(0xF0, 0x01);
[22:53:31.312]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:53:31.312]      </block>
[22:53:31.312]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:53:31.312]    </control>
[22:53:31.312]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:53:31.312]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:53:31.312]        // =>  FALSE
[22:53:31.312]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:53:31.312]    </control>
[22:53:31.312]    <block atomic="false" info="">
[22:53:31.312]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:53:31.328]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:53:31.328]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:53:31.328]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:53:31.332]      __ap = 0; //lets make sure we reset the access point selection
[22:53:31.332]        // -> [__ap <= 0x00000000]
[22:53:31.332]    </block>
[22:53:31.332]  </sequence>
[22:53:31.332]  
[22:53:31.377]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:53:31.377]  
[22:53:31.377]  <debugvars>
[22:53:31.377]    // Pre-defined
[22:53:31.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:31.377]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:31.377]    __dp=0x00000000
[22:53:31.377]    __ap=0x00000000
[22:53:31.377]    __traceout=0x00000000      (Trace Disabled)
[22:53:31.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:31.377]    __FlashAddr=0x00000000
[22:53:31.377]    __FlashLen=0x00000000
[22:53:31.377]    __FlashArg=0x00000000
[22:53:31.377]    __FlashOp=0x00000000
[22:53:31.377]    __Result=0x00000000
[22:53:31.377]  </debugvars>
[22:53:31.379]  
[22:53:31.379]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:53:31.379]    <block atomic="false" info="">
[22:53:31.379]      __var deviceID = 0;
[22:53:31.379]        // -> [deviceID <= 0x00000000]
[22:53:31.379]      __var version = 0;
[22:53:31.379]        // -> [version <= 0x00000000]
[22:53:31.379]      __var partNum = 0;
[22:53:31.379]        // -> [partNum <= 0x00000000]
[22:53:31.379]      __var manuf = 0;
[22:53:31.379]        // -> [manuf <= 0x00000000]
[22:53:31.379]      __var isMSPM0G1X0X_G3X0X = 0;
[22:53:31.379]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:53:31.381]      __var isProduction = 0;
[22:53:31.381]        // -> [isProduction <= 0x00000000]
[22:53:31.381]      __var continueId = 0;
[22:53:31.381]        // -> [continueId <= 0x00000000]
[22:53:31.381]      deviceID =   Read32(0x41C40004);
[22:53:31.389]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:53:31.389]        // -> [deviceID <= 0x2BB8802F]
[22:53:31.389]      version = deviceID >> 28;
[22:53:31.389]        // -> [version <= 0x00000002]
[22:53:31.389]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:53:31.389]        // -> [partNum <= 0x0000BB88]
[22:53:31.389]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:53:31.392]        // -> [manuf <= 0x00000017]
[22:53:31.392]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:53:31.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:53:31.392]      isProduction = (version > 0);
[22:53:31.392]        // -> [isProduction <= 0x00000001]
[22:53:31.392]    </block>
[22:53:31.392]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:53:31.392]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:53:31.392]        // =>  FALSE
[22:53:31.393]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:53:31.393]    </control>
[22:53:31.393]    <control if="continueId == 4" while="" timeout="0" info="">
[22:53:31.393]      // if-block "continueId == 4"
[22:53:31.393]        // =>  FALSE
[22:53:31.393]      // skip if-block "continueId == 4"
[22:53:31.393]    </control>
[22:53:31.393]    <control if="!isProduction" while="" timeout="0" info="">
[22:53:31.393]      // if-block "!isProduction"
[22:53:31.393]        // =>  FALSE
[22:53:31.393]      // skip if-block "!isProduction"
[22:53:31.393]    </control>
[22:53:31.393]  </sequence>
[22:53:31.393]  
[22:54:55.460]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:54:55.460]  
[22:54:55.460]  <debugvars>
[22:54:55.460]    // Pre-defined
[22:54:55.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:54:55.460]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:54:55.460]    __dp=0x00000000
[22:54:55.460]    __ap=0x00000000
[22:54:55.460]    __traceout=0x00000000      (Trace Disabled)
[22:54:55.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:54:55.460]    __FlashAddr=0x00000000
[22:54:55.460]    __FlashLen=0x00000000
[22:54:55.460]    __FlashArg=0x00000000
[22:54:55.460]    __FlashOp=0x00000000
[22:54:55.460]    __Result=0x00000000
[22:54:55.460]  </debugvars>
[22:54:55.460]  
[22:54:55.460]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:54:55.460]    <block atomic="false" info="">
[22:54:55.460]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:54:55.463]        // -> [isSWJ <= 0x00000001]
[22:54:55.463]      __var hasDormant = __protocol & 0x00020000;
[22:54:55.463]        // -> [hasDormant <= 0x00000000]
[22:54:55.463]      __var protType   = __protocol & 0x0000FFFF;
[22:54:55.463]        // -> [protType <= 0x00000002]
[22:54:55.463]    </block>
[22:54:55.463]    <control if="protType == 1" while="" timeout="0" info="">
[22:54:55.463]      // if-block "protType == 1"
[22:54:55.463]        // =>  FALSE
[22:54:55.465]      // skip if-block "protType == 1"
[22:54:55.465]    </control>
[22:54:55.465]    <control if="protType == 2" while="" timeout="0" info="">
[22:54:55.465]      // if-block "protType == 2"
[22:54:55.465]        // =>  TRUE
[22:54:55.465]      <control if="isSWJ" while="" timeout="0" info="">
[22:54:55.465]        // if-block "isSWJ"
[22:54:55.465]          // =>  TRUE
[22:54:55.465]        <control if="hasDormant" while="" timeout="0" info="">
[22:54:55.465]          // if-block "hasDormant"
[22:54:55.465]            // =>  FALSE
[22:54:55.465]          // skip if-block "hasDormant"
[22:54:55.465]        </control>
[22:54:55.465]        <control if="!hasDormant" while="" timeout="0" info="">
[22:54:55.465]          // if-block "!hasDormant"
[22:54:55.465]            // =>  TRUE
[22:54:55.465]          <block atomic="false" info="">
[22:54:55.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:54:55.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:54:55.469]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:54:55.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:54:55.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:54:55.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:54:55.472]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:54:55.473]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:54:55.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:54:55.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:54:55.475]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:54:55.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:54:55.478]          </block>
[22:54:55.478]          // end if-block "!hasDormant"
[22:54:55.478]        </control>
[22:54:55.478]        // end if-block "isSWJ"
[22:54:55.478]      </control>
[22:54:55.478]      <control if="!isSWJ" while="" timeout="0" info="">
[22:54:55.478]        // if-block "!isSWJ"
[22:54:55.478]          // =>  FALSE
[22:54:55.479]        // skip if-block "!isSWJ"
[22:54:55.479]      </control>
[22:54:55.479]      <block atomic="false" info="">
[22:54:55.479]        ReadDP(0x0);
[22:54:55.481]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:54:55.481]      </block>
[22:54:55.481]      // end if-block "protType == 2"
[22:54:55.481]    </control>
[22:54:55.481]  </sequence>
[22:54:55.481]  
[22:54:55.485]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:54:55.485]  
[22:54:55.485]  <debugvars>
[22:54:55.485]    // Pre-defined
[22:54:55.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:54:55.485]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:54:55.485]    __dp=0x00000000
[22:54:55.485]    __ap=0x00000000
[22:54:55.485]    __traceout=0x00000000      (Trace Disabled)
[22:54:55.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:54:55.485]    __FlashAddr=0x00000000
[22:54:55.485]    __FlashLen=0x00000000
[22:54:55.485]    __FlashArg=0x00000000
[22:54:55.485]    __FlashOp=0x00000000
[22:54:55.485]    __Result=0x00000000
[22:54:55.485]  </debugvars>
[22:54:55.485]  
[22:54:55.485]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:54:55.485]    <block atomic="false" info="">
[22:54:55.485]      __var SW_DP_ABORT       = 0x0;
[22:54:55.485]        // -> [SW_DP_ABORT <= 0x00000000]
[22:54:55.485]      __var DP_CTRL_STAT      = 0x4;
[22:54:55.485]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:54:55.485]      __var DP_SELECT         = 0x8;
[22:54:55.488]        // -> [DP_SELECT <= 0x00000008]
[22:54:55.488]      __var powered_down      = 0;
[22:54:55.488]        // -> [powered_down <= 0x00000000]
[22:54:55.488]      WriteDP(DP_SELECT, 0x00000000);
[22:54:55.488]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:54:55.488]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:54:55.488]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:54:55.488]        // -> [powered_down <= 0x00000001]
[22:54:55.488]    </block>
[22:54:55.488]    <control if="powered_down" while="" timeout="0" info="">
[22:54:55.488]      // if-block "powered_down"
[22:54:55.488]        // =>  TRUE
[22:54:55.492]      <block atomic="false" info="">
[22:54:55.492]        Message(0, "Debug/System power-up request sent");
[22:54:55.493]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:54:55.493]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:54:55.493]      </block>
[22:54:55.493]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:54:55.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:54:55.496]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:54:55.496]        // while-condition  =>  FALSE
[22:54:55.496]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:54:55.496]      </control>
[22:54:55.496]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:54:55.496]        // if-block "(__protocol & 0xFFFF) == 1"
[22:54:55.496]          // =>  FALSE
[22:54:55.496]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:54:55.496]      </control>
[22:54:55.496]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:54:55.496]        // if-block "(__protocol & 0xFFFF) == 2"
[22:54:55.496]          // =>  TRUE
[22:54:55.496]        <block atomic="false" info="">
[22:54:55.496]          Message(0, "executing SWD power up");
[22:54:55.501]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:54:55.503]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:54:55.503]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:54:55.504]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:54:55.504]        </block>
[22:54:55.504]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:54:55.504]      </control>
[22:54:55.504]      // end if-block "powered_down"
[22:54:55.504]    </control>
[22:54:55.504]    <block atomic="false" info="">
[22:54:55.504]      __var DEBUG_PORT_VAL    = 0;
[22:54:55.504]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:54:55.504]      __var ACCESS_POINT_VAL  = 0;
[22:54:55.504]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:54:55.504]      __ap = 1; 
[22:54:55.504]        // -> [__ap <= 0x00000001]
[22:54:55.504]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:54:55.510]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:54:55.510]      __ap = 4;
[22:54:55.510]        // -> [__ap <= 0x00000004]
[22:54:55.510]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:54:55.513]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:54:55.513]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:54:55.513]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:54:55.513]    </block>
[22:54:55.517]    <block atomic="false" info="">
[22:54:55.517]      __var nReset = 0x80;
[22:54:55.518]        // -> [nReset <= 0x00000080]
[22:54:55.518]      __var canReadPins = 0;
[22:54:55.518]        // -> [canReadPins <= 0x00000000]
[22:54:55.518]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:54:55.518]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:54:55.520]        // -> [canReadPins <= 0x00000001]
[22:54:55.520]    </block>
[22:54:55.520]    <control if="" while="1" timeout="200" info="">
[22:54:55.520]      // while "1"  (timeout="200")
[22:54:55.520]      // while-condition  =>  TRUE
[22:54:55.520]      // while "1"  (timeout="200")
[22:54:55.520]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.521]      // while "1"  (timeout="200")
[22:54:55.521]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.523]      // while "1"  (timeout="200")
[22:54:55.523]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.525]      // while "1"  (timeout="200")
[22:54:55.525]      // while-condition  =>  TRUE
[22:54:55.528]      // while "1"  (timeout="200")
[22:54:55.528]      // while-condition  =>  TRUE
[22:54:55.528]      // while "1"  (timeout="200")
[22:54:55.528]      // while-condition  =>  TRUE
[22:54:55.528]      // while "1"  (timeout="200")
[22:54:55.528]      // while-condition  =>  TRUE
[22:54:55.528]      // while "1"  (timeout="200")
[22:54:55.528]      // while-condition  =>  TRUE
[22:54:55.528]      // while "1"  (timeout="200")
[22:54:55.528]      // while-condition  =>  TRUE
[22:54:55.530]      // while "1"  (timeout="200")
[22:54:55.530]      // while-condition  =>  TRUE
[22:54:55.530]      // while "1"  (timeout="200")
[22:54:55.530]      // while-condition  =>  TRUE
[22:54:55.530]      // while "1"  (timeout="200")
[22:54:55.530]      // while-condition  =>  TRUE
[22:54:55.530]      // while "1"  (timeout="200")
[22:54:55.530]      // while-condition  =>  TRUE
[22:54:55.530]      // while "1"  (timeout="200")
[22:54:55.530]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.531]      // while "1"  (timeout="200")
[22:54:55.531]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.533]      // while-condition  =>  TRUE
[22:54:55.533]      // while "1"  (timeout="200")
[22:54:55.535]      // while-condition  =>  TRUE
[22:54:55.535]      // while "1"  (timeout="200")
[22:54:55.535]      // while  =>  TIMEOUT
[22:54:55.535]      // end while "1"
[22:54:55.536]    </control>
[22:54:55.536]    <control if="canReadPins" while="" timeout="0" info="">
[22:54:55.536]      // if-block "canReadPins"
[22:54:55.536]        // =>  TRUE
[22:54:55.536]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:54:55.536]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:54:55.538]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:54:55.538]        // while-condition  =>  FALSE
[22:54:55.538]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:54:55.538]      </control>
[22:54:55.538]      // end if-block "canReadPins"
[22:54:55.538]    </control>
[22:54:55.538]    <control if="!canReadPins" while="" timeout="0" info="">
[22:54:55.538]      // if-block "!canReadPins"
[22:54:55.538]        // =>  FALSE
[22:54:55.538]      // skip if-block "!canReadPins"
[22:54:55.538]    </control>
[22:54:55.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:54:55.538]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:54:55.538]        // =>  TRUE
[22:54:55.538]      <block atomic="false" info="">
[22:54:55.538]        WriteAP(0x00, 0x190008);
[22:54:55.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:54:55.541]        WriteAP(0xF0, 0x01);
[22:54:55.545]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:54:55.545]      </block>
[22:54:55.545]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:54:55.545]    </control>
[22:54:55.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:54:55.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:54:55.545]        // =>  FALSE
[22:54:55.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:54:55.545]    </control>
[22:54:55.545]    <block atomic="false" info="">
[22:54:55.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:54:55.550]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:54:55.550]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:54:55.550]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:54:55.552]      __ap = 0; //lets make sure we reset the access point selection
[22:54:55.552]        // -> [__ap <= 0x00000000]
[22:54:55.552]    </block>
[22:54:55.552]  </sequence>
[22:54:55.552]  
[22:54:55.573]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:54:55.573]  
[22:54:55.573]  <debugvars>
[22:54:55.573]    // Pre-defined
[22:54:55.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:54:55.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:54:55.573]    __dp=0x00000000
[22:54:55.573]    __ap=0x00000000
[22:54:55.573]    __traceout=0x00000000      (Trace Disabled)
[22:54:55.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:54:55.573]    __FlashAddr=0x00000000
[22:54:55.575]    __FlashLen=0x00000000
[22:54:55.575]    __FlashArg=0x00000000
[22:54:55.575]    __FlashOp=0x00000000
[22:54:55.575]    __Result=0x00000000
[22:54:55.575]  </debugvars>
[22:54:55.575]  
[22:54:55.575]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:54:55.575]    <block atomic="false" info="">
[22:54:55.575]      __var deviceID = 0;
[22:54:55.575]        // -> [deviceID <= 0x00000000]
[22:54:55.575]      __var version = 0;
[22:54:55.575]        // -> [version <= 0x00000000]
[22:54:55.575]      __var partNum = 0;
[22:54:55.575]        // -> [partNum <= 0x00000000]
[22:54:55.575]      __var manuf = 0;
[22:54:55.577]        // -> [manuf <= 0x00000000]
[22:54:55.577]      __var isMSPM0G1X0X_G3X0X = 0;
[22:54:55.577]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:54:55.577]      __var isProduction = 0;
[22:54:55.577]        // -> [isProduction <= 0x00000000]
[22:54:55.578]      __var continueId = 0;
[22:54:55.578]        // -> [continueId <= 0x00000000]
[22:54:55.578]      deviceID =   Read32(0x41C40004);
[22:54:55.583]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:54:55.583]        // -> [deviceID <= 0x2BB8802F]
[22:54:55.583]      version = deviceID >> 28;
[22:54:55.583]        // -> [version <= 0x00000002]
[22:54:55.583]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:54:55.583]        // -> [partNum <= 0x0000BB88]
[22:54:55.583]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:54:55.585]        // -> [manuf <= 0x00000017]
[22:54:55.585]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:54:55.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:54:55.585]      isProduction = (version > 0);
[22:54:55.585]        // -> [isProduction <= 0x00000001]
[22:54:55.585]    </block>
[22:54:55.585]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:54:55.585]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:54:55.585]        // =>  FALSE
[22:54:55.585]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:54:55.585]    </control>
[22:54:55.585]    <control if="continueId == 4" while="" timeout="0" info="">
[22:54:55.585]      // if-block "continueId == 4"
[22:54:55.585]        // =>  FALSE
[22:54:55.585]      // skip if-block "continueId == 4"
[22:54:55.585]    </control>
[22:54:55.585]    <control if="!isProduction" while="" timeout="0" info="">
[22:54:55.585]      // if-block "!isProduction"
[22:54:55.585]        // =>  FALSE
[22:54:55.585]      // skip if-block "!isProduction"
[22:54:55.585]    </control>
[22:54:55.585]  </sequence>
[22:54:55.585]  
[22:55:01.215]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:55:01.215]  
[22:55:01.224]  <debugvars>
[22:55:01.224]    // Pre-defined
[22:55:01.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:55:01.224]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:55:01.224]    __dp=0x00000000
[22:55:01.224]    __ap=0x00000000
[22:55:01.224]    __traceout=0x00000000      (Trace Disabled)
[22:55:01.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:55:01.224]    __FlashAddr=0x00000000
[22:55:01.224]    __FlashLen=0x00000000
[22:55:01.224]    __FlashArg=0x00000000
[22:55:01.224]    __FlashOp=0x00000000
[22:55:01.224]    __Result=0x00000000
[22:55:01.224]  </debugvars>
[22:55:01.224]  
[22:55:01.224]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:55:01.224]    <block atomic="false" info="">
[22:55:01.224]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:55:01.224]        // -> [isSWJ <= 0x00000001]
[22:55:01.224]      __var hasDormant = __protocol & 0x00020000;
[22:55:01.224]        // -> [hasDormant <= 0x00000000]
[22:55:01.224]      __var protType   = __protocol & 0x0000FFFF;
[22:55:01.224]        // -> [protType <= 0x00000002]
[22:55:01.224]    </block>
[22:55:01.224]    <control if="protType == 1" while="" timeout="0" info="">
[22:55:01.224]      // if-block "protType == 1"
[22:55:01.224]        // =>  FALSE
[22:55:01.228]      // skip if-block "protType == 1"
[22:55:01.228]    </control>
[22:55:01.228]    <control if="protType == 2" while="" timeout="0" info="">
[22:55:01.228]      // if-block "protType == 2"
[22:55:01.228]        // =>  TRUE
[22:55:01.228]      <control if="isSWJ" while="" timeout="0" info="">
[22:55:01.228]        // if-block "isSWJ"
[22:55:01.228]          // =>  TRUE
[22:55:01.228]        <control if="hasDormant" while="" timeout="0" info="">
[22:55:01.228]          // if-block "hasDormant"
[22:55:01.228]            // =>  FALSE
[22:55:01.228]          // skip if-block "hasDormant"
[22:55:01.228]        </control>
[22:55:01.228]        <control if="!hasDormant" while="" timeout="0" info="">
[22:55:01.228]          // if-block "!hasDormant"
[22:55:01.228]            // =>  TRUE
[22:55:01.228]          <block atomic="false" info="">
[22:55:01.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:55:01.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:55:01.232]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:55:01.239]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:55:01.239]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:55:01.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:55:01.244]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:55:01.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:55:01.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:55:01.247]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:55:01.247]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:55:01.249]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:55:01.249]          </block>
[22:55:01.249]          // end if-block "!hasDormant"
[22:55:01.249]        </control>
[22:55:01.249]        // end if-block "isSWJ"
[22:55:01.249]      </control>
[22:55:01.249]      <control if="!isSWJ" while="" timeout="0" info="">
[22:55:01.249]        // if-block "!isSWJ"
[22:55:01.249]          // =>  FALSE
[22:55:01.249]        // skip if-block "!isSWJ"
[22:55:01.249]      </control>
[22:55:01.249]      <block atomic="false" info="">
[22:55:01.249]        ReadDP(0x0);
[22:55:01.252]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:55:01.252]      </block>
[22:55:01.252]      // end if-block "protType == 2"
[22:55:01.252]    </control>
[22:55:01.252]  </sequence>
[22:55:01.252]  
[22:55:01.253]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:55:01.253]  
[22:55:01.253]  <debugvars>
[22:55:01.253]    // Pre-defined
[22:55:01.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:55:01.256]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:55:01.256]    __dp=0x00000000
[22:55:01.256]    __ap=0x00000000
[22:55:01.256]    __traceout=0x00000000      (Trace Disabled)
[22:55:01.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:55:01.256]    __FlashAddr=0x00000000
[22:55:01.256]    __FlashLen=0x00000000
[22:55:01.256]    __FlashArg=0x00000000
[22:55:01.256]    __FlashOp=0x00000000
[22:55:01.256]    __Result=0x00000000
[22:55:01.256]  </debugvars>
[22:55:01.256]  
[22:55:01.256]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:55:01.256]    <block atomic="false" info="">
[22:55:01.256]      __var SW_DP_ABORT       = 0x0;
[22:55:01.256]        // -> [SW_DP_ABORT <= 0x00000000]
[22:55:01.256]      __var DP_CTRL_STAT      = 0x4;
[22:55:01.256]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:55:01.256]      __var DP_SELECT         = 0x8;
[22:55:01.256]        // -> [DP_SELECT <= 0x00000008]
[22:55:01.256]      __var powered_down      = 0;
[22:55:01.256]        // -> [powered_down <= 0x00000000]
[22:55:01.256]      WriteDP(DP_SELECT, 0x00000000);
[22:55:01.262]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:55:01.262]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:55:01.264]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:55:01.264]        // -> [powered_down <= 0x00000001]
[22:55:01.264]    </block>
[22:55:01.264]    <control if="powered_down" while="" timeout="0" info="">
[22:55:01.264]      // if-block "powered_down"
[22:55:01.264]        // =>  TRUE
[22:55:01.264]      <block atomic="false" info="">
[22:55:01.264]        Message(0, "Debug/System power-up request sent");
[22:55:01.265]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:55:01.268]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:55:01.268]      </block>
[22:55:01.268]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:55:01.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:55:01.270]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:55:01.270]        // while-condition  =>  FALSE
[22:55:01.270]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:55:01.271]      </control>
[22:55:01.271]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:55:01.271]        // if-block "(__protocol & 0xFFFF) == 1"
[22:55:01.271]          // =>  FALSE
[22:55:01.271]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:55:01.271]      </control>
[22:55:01.271]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:55:01.271]        // if-block "(__protocol & 0xFFFF) == 2"
[22:55:01.271]          // =>  TRUE
[22:55:01.271]        <block atomic="false" info="">
[22:55:01.271]          Message(0, "executing SWD power up");
[22:55:01.273]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:55:01.276]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:55:01.276]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:55:01.280]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:55:01.280]        </block>
[22:55:01.280]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:55:01.280]      </control>
[22:55:01.280]      // end if-block "powered_down"
[22:55:01.280]    </control>
[22:55:01.280]    <block atomic="false" info="">
[22:55:01.280]      __var DEBUG_PORT_VAL    = 0;
[22:55:01.280]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:55:01.280]      __var ACCESS_POINT_VAL  = 0;
[22:55:01.280]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:55:01.280]      __ap = 1; 
[22:55:01.280]        // -> [__ap <= 0x00000001]
[22:55:01.280]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:55:01.284]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:55:01.284]      __ap = 4;
[22:55:01.284]        // -> [__ap <= 0x00000004]
[22:55:01.284]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:55:01.288]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:55:01.288]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:55:01.288]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:55:01.288]    </block>
[22:55:01.292]    <block atomic="false" info="">
[22:55:01.292]      __var nReset = 0x80;
[22:55:01.292]        // -> [nReset <= 0x00000080]
[22:55:01.292]      __var canReadPins = 0;
[22:55:01.292]        // -> [canReadPins <= 0x00000000]
[22:55:01.292]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:55:01.295]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:55:01.295]        // -> [canReadPins <= 0x00000001]
[22:55:01.295]    </block>
[22:55:01.295]    <control if="" while="1" timeout="200" info="">
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.297]      // while "1"  (timeout="200")
[22:55:01.297]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.299]      // while-condition  =>  TRUE
[22:55:01.299]      // while "1"  (timeout="200")
[22:55:01.301]      // while-condition  =>  TRUE
[22:55:01.301]      // while "1"  (timeout="200")
[22:55:01.301]      // while  =>  TIMEOUT
[22:55:01.301]      // end while "1"
[22:55:01.301]    </control>
[22:55:01.301]    <control if="canReadPins" while="" timeout="0" info="">
[22:55:01.301]      // if-block "canReadPins"
[22:55:01.301]        // =>  TRUE
[22:55:01.301]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:55:01.301]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:55:01.304]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:55:01.304]        // while-condition  =>  FALSE
[22:55:01.304]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:55:01.304]      </control>
[22:55:01.304]      // end if-block "canReadPins"
[22:55:01.304]    </control>
[22:55:01.305]    <control if="!canReadPins" while="" timeout="0" info="">
[22:55:01.305]      // if-block "!canReadPins"
[22:55:01.305]        // =>  FALSE
[22:55:01.305]      // skip if-block "!canReadPins"
[22:55:01.305]    </control>
[22:55:01.305]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:55:01.306]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:55:01.306]        // =>  TRUE
[22:55:01.306]      <block atomic="false" info="">
[22:55:01.306]        WriteAP(0x00, 0x190008);
[22:55:01.308]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:55:01.308]        WriteAP(0xF0, 0x01);
[22:55:01.313]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:55:01.313]      </block>
[22:55:01.313]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:55:01.313]    </control>
[22:55:01.313]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:55:01.313]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:55:01.313]        // =>  FALSE
[22:55:01.313]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:55:01.313]    </control>
[22:55:01.313]    <block atomic="false" info="">
[22:55:01.313]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:55:01.320]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:55:01.320]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:55:01.320]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:55:01.320]      __ap = 0; //lets make sure we reset the access point selection
[22:55:01.322]        // -> [__ap <= 0x00000000]
[22:55:01.322]    </block>
[22:55:01.322]  </sequence>
[22:55:01.322]  
[22:55:01.343]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:55:01.343]  
[22:55:01.346]  <debugvars>
[22:55:01.346]    // Pre-defined
[22:55:01.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:55:01.346]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:55:01.346]    __dp=0x00000000
[22:55:01.346]    __ap=0x00000000
[22:55:01.347]    __traceout=0x00000000      (Trace Disabled)
[22:55:01.347]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:55:01.347]    __FlashAddr=0x00000000
[22:55:01.347]    __FlashLen=0x00000000
[22:55:01.347]    __FlashArg=0x00000000
[22:55:01.347]    __FlashOp=0x00000000
[22:55:01.347]    __Result=0x00000000
[22:55:01.347]  </debugvars>
[22:55:01.347]  
[22:55:01.347]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:55:01.347]    <block atomic="false" info="">
[22:55:01.347]      __var deviceID = 0;
[22:55:01.347]        // -> [deviceID <= 0x00000000]
[22:55:01.347]      __var version = 0;
[22:55:01.347]        // -> [version <= 0x00000000]
[22:55:01.347]      __var partNum = 0;
[22:55:01.347]        // -> [partNum <= 0x00000000]
[22:55:01.347]      __var manuf = 0;
[22:55:01.347]        // -> [manuf <= 0x00000000]
[22:55:01.347]      __var isMSPM0G1X0X_G3X0X = 0;
[22:55:01.347]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:55:01.347]      __var isProduction = 0;
[22:55:01.347]        // -> [isProduction <= 0x00000000]
[22:55:01.347]      __var continueId = 0;
[22:55:01.347]        // -> [continueId <= 0x00000000]
[22:55:01.347]      deviceID =   Read32(0x41C40004);
[22:55:01.354]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:55:01.354]        // -> [deviceID <= 0x2BB8802F]
[22:55:01.358]      version = deviceID >> 28;
[22:55:01.358]        // -> [version <= 0x00000002]
[22:55:01.358]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:55:01.358]        // -> [partNum <= 0x0000BB88]
[22:55:01.358]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:55:01.358]        // -> [manuf <= 0x00000017]
[22:55:01.358]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:55:01.358]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:55:01.358]      isProduction = (version > 0);
[22:55:01.358]        // -> [isProduction <= 0x00000001]
[22:55:01.358]    </block>
[22:55:01.358]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:55:01.358]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:55:01.358]        // =>  FALSE
[22:55:01.358]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:55:01.358]    </control>
[22:55:01.358]    <control if="continueId == 4" while="" timeout="0" info="">
[22:55:01.358]      // if-block "continueId == 4"
[22:55:01.358]        // =>  FALSE
[22:55:01.358]      // skip if-block "continueId == 4"
[22:55:01.358]    </control>
[22:55:01.358]    <control if="!isProduction" while="" timeout="0" info="">
[22:55:01.358]      // if-block "!isProduction"
[22:55:01.358]        // =>  FALSE
[22:55:01.358]      // skip if-block "!isProduction"
[22:55:01.358]    </control>
[22:55:01.358]  </sequence>
[22:55:01.358]  
[22:56:19.536]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:56:19.536]  
[22:56:19.547]  <debugvars>
[22:56:19.547]    // Pre-defined
[22:56:19.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:19.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:19.547]    __dp=0x00000000
[22:56:19.548]    __ap=0x00000000
[22:56:19.548]    __traceout=0x00000000      (Trace Disabled)
[22:56:19.548]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:19.548]    __FlashAddr=0x00000000
[22:56:19.548]    __FlashLen=0x00000000
[22:56:19.548]    __FlashArg=0x00000000
[22:56:19.548]    __FlashOp=0x00000000
[22:56:19.548]    __Result=0x00000000
[22:56:19.548]  </debugvars>
[22:56:19.548]  
[22:56:19.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:56:19.548]    <block atomic="false" info="">
[22:56:19.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:56:19.548]        // -> [isSWJ <= 0x00000001]
[22:56:19.548]      __var hasDormant = __protocol & 0x00020000;
[22:56:19.548]        // -> [hasDormant <= 0x00000000]
[22:56:19.548]      __var protType   = __protocol & 0x0000FFFF;
[22:56:19.548]        // -> [protType <= 0x00000002]
[22:56:19.548]    </block>
[22:56:19.548]    <control if="protType == 1" while="" timeout="0" info="">
[22:56:19.548]      // if-block "protType == 1"
[22:56:19.548]        // =>  FALSE
[22:56:19.548]      // skip if-block "protType == 1"
[22:56:19.548]    </control>
[22:56:19.548]    <control if="protType == 2" while="" timeout="0" info="">
[22:56:19.548]      // if-block "protType == 2"
[22:56:19.548]        // =>  TRUE
[22:56:19.548]      <control if="isSWJ" while="" timeout="0" info="">
[22:56:19.548]        // if-block "isSWJ"
[22:56:19.548]          // =>  TRUE
[22:56:19.548]        <control if="hasDormant" while="" timeout="0" info="">
[22:56:19.552]          // if-block "hasDormant"
[22:56:19.552]            // =>  FALSE
[22:56:19.552]          // skip if-block "hasDormant"
[22:56:19.552]        </control>
[22:56:19.552]        <control if="!hasDormant" while="" timeout="0" info="">
[22:56:19.552]          // if-block "!hasDormant"
[22:56:19.552]            // =>  TRUE
[22:56:19.552]          <block atomic="false" info="">
[22:56:19.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:56:19.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:19.552]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:56:19.555]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:56:19.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:56:19.555]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:19.555]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:56:19.555]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:56:19.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:56:19.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:19.559]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:56:19.560]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:56:19.560]          </block>
[22:56:19.560]          // end if-block "!hasDormant"
[22:56:19.560]        </control>
[22:56:19.560]        // end if-block "isSWJ"
[22:56:19.560]      </control>
[22:56:19.560]      <control if="!isSWJ" while="" timeout="0" info="">
[22:56:19.560]        // if-block "!isSWJ"
[22:56:19.560]          // =>  FALSE
[22:56:19.560]        // skip if-block "!isSWJ"
[22:56:19.560]      </control>
[22:56:19.560]      <block atomic="false" info="">
[22:56:19.560]        ReadDP(0x0);
[22:56:19.567]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:56:19.567]      </block>
[22:56:19.567]      // end if-block "protType == 2"
[22:56:19.567]    </control>
[22:56:19.567]  </sequence>
[22:56:19.567]  
[22:56:19.567]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:56:19.567]  
[22:56:19.567]  <debugvars>
[22:56:19.567]    // Pre-defined
[22:56:19.567]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:19.567]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:19.567]    __dp=0x00000000
[22:56:19.571]    __ap=0x00000000
[22:56:19.571]    __traceout=0x00000000      (Trace Disabled)
[22:56:19.571]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:19.571]    __FlashAddr=0x00000000
[22:56:19.571]    __FlashLen=0x00000000
[22:56:19.571]    __FlashArg=0x00000000
[22:56:19.571]    __FlashOp=0x00000000
[22:56:19.571]    __Result=0x00000000
[22:56:19.571]  </debugvars>
[22:56:19.571]  
[22:56:19.571]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:56:19.571]    <block atomic="false" info="">
[22:56:19.571]      __var SW_DP_ABORT       = 0x0;
[22:56:19.571]        // -> [SW_DP_ABORT <= 0x00000000]
[22:56:19.571]      __var DP_CTRL_STAT      = 0x4;
[22:56:19.571]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:56:19.571]      __var DP_SELECT         = 0x8;
[22:56:19.571]        // -> [DP_SELECT <= 0x00000008]
[22:56:19.571]      __var powered_down      = 0;
[22:56:19.571]        // -> [powered_down <= 0x00000000]
[22:56:19.571]      WriteDP(DP_SELECT, 0x00000000);
[22:56:19.575]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:56:19.575]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:56:19.575]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:56:19.575]        // -> [powered_down <= 0x00000001]
[22:56:19.575]    </block>
[22:56:19.575]    <control if="powered_down" while="" timeout="0" info="">
[22:56:19.575]      // if-block "powered_down"
[22:56:19.575]        // =>  TRUE
[22:56:19.575]      <block atomic="false" info="">
[22:56:19.575]        Message(0, "Debug/System power-up request sent");
[22:56:19.579]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:56:19.585]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:56:19.585]      </block>
[22:56:19.585]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:56:19.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:56:19.585]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:56:19.585]        // while-condition  =>  FALSE
[22:56:19.585]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:56:19.587]      </control>
[22:56:19.587]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:56:19.587]        // if-block "(__protocol & 0xFFFF) == 1"
[22:56:19.587]          // =>  FALSE
[22:56:19.587]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:56:19.587]      </control>
[22:56:19.587]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:56:19.587]        // if-block "(__protocol & 0xFFFF) == 2"
[22:56:19.587]          // =>  TRUE
[22:56:19.587]        <block atomic="false" info="">
[22:56:19.587]          Message(0, "executing SWD power up");
[22:56:19.587]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:56:19.591]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:56:19.591]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:56:19.594]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:56:19.594]        </block>
[22:56:19.594]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:56:19.594]      </control>
[22:56:19.594]      // end if-block "powered_down"
[22:56:19.594]    </control>
[22:56:19.595]    <block atomic="false" info="">
[22:56:19.595]      __var DEBUG_PORT_VAL    = 0;
[22:56:19.595]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:56:19.595]      __var ACCESS_POINT_VAL  = 0;
[22:56:19.595]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:56:19.595]      __ap = 1; 
[22:56:19.595]        // -> [__ap <= 0x00000001]
[22:56:19.595]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:56:19.599]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:56:19.599]      __ap = 4;
[22:56:19.599]        // -> [__ap <= 0x00000004]
[22:56:19.599]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:56:19.608]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:56:19.610]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:56:19.610]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:56:19.611]    </block>
[22:56:19.611]    <block atomic="false" info="">
[22:56:19.611]      __var nReset = 0x80;
[22:56:19.611]        // -> [nReset <= 0x00000080]
[22:56:19.611]      __var canReadPins = 0;
[22:56:19.611]        // -> [canReadPins <= 0x00000000]
[22:56:19.611]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:56:19.611]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:56:19.611]        // -> [canReadPins <= 0x00000001]
[22:56:19.611]    </block>
[22:56:19.611]    <control if="" while="1" timeout="200" info="">
[22:56:19.611]      // while "1"  (timeout="200")
[22:56:19.611]      // while-condition  =>  TRUE
[22:56:19.611]      // while "1"  (timeout="200")
[22:56:19.611]      // while-condition  =>  TRUE
[22:56:19.611]      // while "1"  (timeout="200")
[22:56:19.611]      // while-condition  =>  TRUE
[22:56:19.611]      // while "1"  (timeout="200")
[22:56:19.611]      // while-condition  =>  TRUE
[22:56:19.615]      // while "1"  (timeout="200")
[22:56:19.615]      // while  =>  TIMEOUT
[22:56:19.615]      // end while "1"
[22:56:19.615]    </control>
[22:56:19.615]    <control if="canReadPins" while="" timeout="0" info="">
[22:56:19.615]      // if-block "canReadPins"
[22:56:19.615]        // =>  TRUE
[22:56:19.615]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:56:19.615]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:56:19.617]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:56:19.617]        // while-condition  =>  FALSE
[22:56:19.617]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:56:19.617]      </control>
[22:56:19.617]      // end if-block "canReadPins"
[22:56:19.617]    </control>
[22:56:19.617]    <control if="!canReadPins" while="" timeout="0" info="">
[22:56:19.617]      // if-block "!canReadPins"
[22:56:19.617]        // =>  FALSE
[22:56:19.617]      // skip if-block "!canReadPins"
[22:56:19.617]    </control>
[22:56:19.617]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:56:19.617]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:56:19.620]        // =>  TRUE
[22:56:19.620]      <block atomic="false" info="">
[22:56:19.620]        WriteAP(0x00, 0x190008);
[22:56:19.620]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:56:19.620]        WriteAP(0xF0, 0x01);
[22:56:19.625]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:56:19.625]      </block>
[22:56:19.628]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:56:19.628]    </control>
[22:56:19.628]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:56:19.628]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:56:19.628]        // =>  FALSE
[22:56:19.628]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:56:19.628]    </control>
[22:56:19.628]    <block atomic="false" info="">
[22:56:19.629]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:56:19.632]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:56:19.632]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:56:19.632]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:56:19.635]      __ap = 0; //lets make sure we reset the access point selection
[22:56:19.635]        // -> [__ap <= 0x00000000]
[22:56:19.635]    </block>
[22:56:19.635]  </sequence>
[22:56:19.635]  
[22:56:19.654]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:56:19.654]  
[22:56:19.654]  <debugvars>
[22:56:19.655]    // Pre-defined
[22:56:19.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:19.655]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:19.655]    __dp=0x00000000
[22:56:19.655]    __ap=0x00000000
[22:56:19.655]    __traceout=0x00000000      (Trace Disabled)
[22:56:19.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:19.655]    __FlashAddr=0x00000000
[22:56:19.655]    __FlashLen=0x00000000
[22:56:19.655]    __FlashArg=0x00000000
[22:56:19.655]    __FlashOp=0x00000000
[22:56:19.655]    __Result=0x00000000
[22:56:19.655]  </debugvars>
[22:56:19.655]  
[22:56:19.655]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:56:19.655]    <block atomic="false" info="">
[22:56:19.657]      __var deviceID = 0;
[22:56:19.657]        // -> [deviceID <= 0x00000000]
[22:56:19.657]      __var version = 0;
[22:56:19.657]        // -> [version <= 0x00000000]
[22:56:19.657]      __var partNum = 0;
[22:56:19.657]        // -> [partNum <= 0x00000000]
[22:56:19.657]      __var manuf = 0;
[22:56:19.657]        // -> [manuf <= 0x00000000]
[22:56:19.657]      __var isMSPM0G1X0X_G3X0X = 0;
[22:56:19.657]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:56:19.657]      __var isProduction = 0;
[22:56:19.658]        // -> [isProduction <= 0x00000000]
[22:56:19.658]      __var continueId = 0;
[22:56:19.658]        // -> [continueId <= 0x00000000]
[22:56:19.658]      deviceID =   Read32(0x41C40004);
[22:56:19.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:56:19.665]        // -> [deviceID <= 0x2BB8802F]
[22:56:19.665]      version = deviceID >> 28;
[22:56:19.665]        // -> [version <= 0x00000002]
[22:56:19.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:56:19.666]        // -> [partNum <= 0x0000BB88]
[22:56:19.666]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:56:19.666]        // -> [manuf <= 0x00000017]
[22:56:19.666]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:56:19.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:56:19.666]      isProduction = (version > 0);
[22:56:19.666]        // -> [isProduction <= 0x00000001]
[22:56:19.666]    </block>
[22:56:19.666]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:56:19.666]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:56:19.667]        // =>  FALSE
[22:56:19.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:56:19.667]    </control>
[22:56:19.667]    <control if="continueId == 4" while="" timeout="0" info="">
[22:56:19.667]      // if-block "continueId == 4"
[22:56:19.667]        // =>  FALSE
[22:56:19.667]      // skip if-block "continueId == 4"
[22:56:19.667]    </control>
[22:56:19.667]    <control if="!isProduction" while="" timeout="0" info="">
[22:56:19.667]      // if-block "!isProduction"
[22:56:19.667]        // =>  FALSE
[22:56:19.667]      // skip if-block "!isProduction"
[22:56:19.667]    </control>
[22:56:19.667]  </sequence>
[22:56:19.667]  
[22:56:55.969]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:56:55.969]  
[22:56:55.978]  <debugvars>
[22:56:55.978]    // Pre-defined
[22:56:55.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:55.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:55.978]    __dp=0x00000000
[22:56:55.978]    __ap=0x00000000
[22:56:55.978]    __traceout=0x00000000      (Trace Disabled)
[22:56:55.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:55.978]    __FlashAddr=0x00000000
[22:56:55.978]    __FlashLen=0x00000000
[22:56:55.978]    __FlashArg=0x00000000
[22:56:55.978]    __FlashOp=0x00000000
[22:56:55.978]    __Result=0x00000000
[22:56:55.978]  </debugvars>
[22:56:55.978]  
[22:56:55.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:56:55.978]    <block atomic="false" info="">
[22:56:55.978]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:56:55.978]        // -> [isSWJ <= 0x00000001]
[22:56:55.978]      __var hasDormant = __protocol & 0x00020000;
[22:56:55.978]        // -> [hasDormant <= 0x00000000]
[22:56:55.978]      __var protType   = __protocol & 0x0000FFFF;
[22:56:55.978]        // -> [protType <= 0x00000002]
[22:56:55.978]    </block>
[22:56:55.978]    <control if="protType == 1" while="" timeout="0" info="">
[22:56:55.978]      // if-block "protType == 1"
[22:56:55.978]        // =>  FALSE
[22:56:55.978]      // skip if-block "protType == 1"
[22:56:55.981]    </control>
[22:56:55.981]    <control if="protType == 2" while="" timeout="0" info="">
[22:56:55.981]      // if-block "protType == 2"
[22:56:55.981]        // =>  TRUE
[22:56:55.981]      <control if="isSWJ" while="" timeout="0" info="">
[22:56:55.981]        // if-block "isSWJ"
[22:56:55.981]          // =>  TRUE
[22:56:55.981]        <control if="hasDormant" while="" timeout="0" info="">
[22:56:55.981]          // if-block "hasDormant"
[22:56:55.981]            // =>  FALSE
[22:56:55.981]          // skip if-block "hasDormant"
[22:56:55.981]        </control>
[22:56:55.981]        <control if="!hasDormant" while="" timeout="0" info="">
[22:56:55.981]          // if-block "!hasDormant"
[22:56:55.981]            // =>  TRUE
[22:56:55.981]          <block atomic="false" info="">
[22:56:55.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:56:55.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:55.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:56:55.986]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:56:55.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:56:55.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:55.989]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:56:55.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:56:55.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:56:55.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:56:55.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:56:55.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:56:55.993]          </block>
[22:56:55.993]          // end if-block "!hasDormant"
[22:56:55.993]        </control>
[22:56:55.993]        // end if-block "isSWJ"
[22:56:55.993]      </control>
[22:56:55.993]      <control if="!isSWJ" while="" timeout="0" info="">
[22:56:55.993]        // if-block "!isSWJ"
[22:56:55.993]          // =>  FALSE
[22:56:55.993]        // skip if-block "!isSWJ"
[22:56:55.993]      </control>
[22:56:55.993]      <block atomic="false" info="">
[22:56:55.993]        ReadDP(0x0);
[22:56:55.996]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:56:55.996]      </block>
[22:56:55.996]      // end if-block "protType == 2"
[22:56:55.996]    </control>
[22:56:55.996]  </sequence>
[22:56:55.996]  
[22:56:56.000]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:56:56.000]  
[22:56:56.000]  <debugvars>
[22:56:56.000]    // Pre-defined
[22:56:56.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:56.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:56.000]    __dp=0x00000000
[22:56:56.000]    __ap=0x00000000
[22:56:56.000]    __traceout=0x00000000      (Trace Disabled)
[22:56:56.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:56.000]    __FlashAddr=0x00000000
[22:56:56.000]    __FlashLen=0x00000000
[22:56:56.000]    __FlashArg=0x00000000
[22:56:56.000]    __FlashOp=0x00000000
[22:56:56.000]    __Result=0x00000000
[22:56:56.000]  </debugvars>
[22:56:56.000]  
[22:56:56.000]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:56:56.000]    <block atomic="false" info="">
[22:56:56.000]      __var SW_DP_ABORT       = 0x0;
[22:56:56.000]        // -> [SW_DP_ABORT <= 0x00000000]
[22:56:56.000]      __var DP_CTRL_STAT      = 0x4;
[22:56:56.000]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:56:56.000]      __var DP_SELECT         = 0x8;
[22:56:56.000]        // -> [DP_SELECT <= 0x00000008]
[22:56:56.002]      __var powered_down      = 0;
[22:56:56.002]        // -> [powered_down <= 0x00000000]
[22:56:56.002]      WriteDP(DP_SELECT, 0x00000000);
[22:56:56.003]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:56:56.003]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:56:56.005]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:56:56.005]        // -> [powered_down <= 0x00000001]
[22:56:56.005]    </block>
[22:56:56.006]    <control if="powered_down" while="" timeout="0" info="">
[22:56:56.006]      // if-block "powered_down"
[22:56:56.006]        // =>  TRUE
[22:56:56.006]      <block atomic="false" info="">
[22:56:56.006]        Message(0, "Debug/System power-up request sent");
[22:56:56.006]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:56:56.009]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:56:56.009]      </block>
[22:56:56.009]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:56:56.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:56:56.011]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:56:56.011]        // while-condition  =>  FALSE
[22:56:56.011]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:56:56.011]      </control>
[22:56:56.011]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:56:56.011]        // if-block "(__protocol & 0xFFFF) == 1"
[22:56:56.011]          // =>  FALSE
[22:56:56.011]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:56:56.011]      </control>
[22:56:56.011]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:56:56.011]        // if-block "(__protocol & 0xFFFF) == 2"
[22:56:56.011]          // =>  TRUE
[22:56:56.013]        <block atomic="false" info="">
[22:56:56.013]          Message(0, "executing SWD power up");
[22:56:56.014]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:56:56.016]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:56:56.016]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:56:56.017]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:56:56.017]        </block>
[22:56:56.018]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:56:56.019]      </control>
[22:56:56.019]      // end if-block "powered_down"
[22:56:56.019]    </control>
[22:56:56.019]    <block atomic="false" info="">
[22:56:56.019]      __var DEBUG_PORT_VAL    = 0;
[22:56:56.019]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:56:56.019]      __var ACCESS_POINT_VAL  = 0;
[22:56:56.019]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:56:56.019]      __ap = 1; 
[22:56:56.020]        // -> [__ap <= 0x00000001]
[22:56:56.020]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:56:56.021]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:56:56.021]      __ap = 4;
[22:56:56.025]        // -> [__ap <= 0x00000004]
[22:56:56.025]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:56:56.028]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:56:56.028]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:56:56.028]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:56:56.030]    </block>
[22:56:56.030]    <block atomic="false" info="">
[22:56:56.030]      __var nReset = 0x80;
[22:56:56.030]        // -> [nReset <= 0x00000080]
[22:56:56.030]      __var canReadPins = 0;
[22:56:56.030]        // -> [canReadPins <= 0x00000000]
[22:56:56.030]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:56:56.033]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:56:56.033]        // -> [canReadPins <= 0x00000001]
[22:56:56.033]    </block>
[22:56:56.033]    <control if="" while="1" timeout="200" info="">
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.033]      // while "1"  (timeout="200")
[22:56:56.033]      // while-condition  =>  TRUE
[22:56:56.036]      // while "1"  (timeout="200")
[22:56:56.036]      // while  =>  TIMEOUT
[22:56:56.036]      // end while "1"
[22:56:56.036]    </control>
[22:56:56.036]    <control if="canReadPins" while="" timeout="0" info="">
[22:56:56.036]      // if-block "canReadPins"
[22:56:56.036]        // =>  TRUE
[22:56:56.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:56:56.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:56:56.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:56:56.037]        // while-condition  =>  FALSE
[22:56:56.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:56:56.037]      </control>
[22:56:56.037]      // end if-block "canReadPins"
[22:56:56.037]    </control>
[22:56:56.037]    <control if="!canReadPins" while="" timeout="0" info="">
[22:56:56.037]      // if-block "!canReadPins"
[22:56:56.037]        // =>  FALSE
[22:56:56.037]      // skip if-block "!canReadPins"
[22:56:56.037]    </control>
[22:56:56.037]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:56:56.037]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:56:56.037]        // =>  TRUE
[22:56:56.037]      <block atomic="false" info="">
[22:56:56.037]        WriteAP(0x00, 0x190008);
[22:56:56.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:56:56.041]        WriteAP(0xF0, 0x01);
[22:56:56.046]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:56:56.048]      </block>
[22:56:56.048]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:56:56.048]    </control>
[22:56:56.048]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:56:56.048]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:56:56.048]        // =>  FALSE
[22:56:56.048]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:56:56.048]    </control>
[22:56:56.048]    <block atomic="false" info="">
[22:56:56.048]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:56:56.056]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:56:56.056]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:56:56.056]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:56:56.059]      __ap = 0; //lets make sure we reset the access point selection
[22:56:56.059]        // -> [__ap <= 0x00000000]
[22:56:56.059]    </block>
[22:56:56.059]  </sequence>
[22:56:56.059]  
[22:56:56.078]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:56:56.078]  
[22:56:56.078]  <debugvars>
[22:56:56.078]    // Pre-defined
[22:56:56.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:56:56.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:56:56.078]    __dp=0x00000000
[22:56:56.078]    __ap=0x00000000
[22:56:56.078]    __traceout=0x00000000      (Trace Disabled)
[22:56:56.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:56:56.078]    __FlashAddr=0x00000000
[22:56:56.078]    __FlashLen=0x00000000
[22:56:56.078]    __FlashArg=0x00000000
[22:56:56.078]    __FlashOp=0x00000000
[22:56:56.078]    __Result=0x00000000
[22:56:56.078]  </debugvars>
[22:56:56.078]  
[22:56:56.082]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:56:56.082]    <block atomic="false" info="">
[22:56:56.082]      __var deviceID = 0;
[22:56:56.082]        // -> [deviceID <= 0x00000000]
[22:56:56.082]      __var version = 0;
[22:56:56.082]        // -> [version <= 0x00000000]
[22:56:56.082]      __var partNum = 0;
[22:56:56.082]        // -> [partNum <= 0x00000000]
[22:56:56.082]      __var manuf = 0;
[22:56:56.082]        // -> [manuf <= 0x00000000]
[22:56:56.082]      __var isMSPM0G1X0X_G3X0X = 0;
[22:56:56.082]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:56:56.082]      __var isProduction = 0;
[22:56:56.082]        // -> [isProduction <= 0x00000000]
[22:56:56.082]      __var continueId = 0;
[22:56:56.082]        // -> [continueId <= 0x00000000]
[22:56:56.082]      deviceID =   Read32(0x41C40004);
[22:56:56.086]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:56:56.090]        // -> [deviceID <= 0x2BB8802F]
[22:56:56.090]      version = deviceID >> 28;
[22:56:56.090]        // -> [version <= 0x00000002]
[22:56:56.090]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:56:56.090]        // -> [partNum <= 0x0000BB88]
[22:56:56.090]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:56:56.090]        // -> [manuf <= 0x00000017]
[22:56:56.090]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:56:56.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:56:56.090]      isProduction = (version > 0);
[22:56:56.090]        // -> [isProduction <= 0x00000001]
[22:56:56.091]    </block>
[22:56:56.091]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:56:56.091]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:56:56.091]        // =>  FALSE
[22:56:56.091]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:56:56.091]    </control>
[22:56:56.091]    <control if="continueId == 4" while="" timeout="0" info="">
[22:56:56.091]      // if-block "continueId == 4"
[22:56:56.091]        // =>  FALSE
[22:56:56.091]      // skip if-block "continueId == 4"
[22:56:56.091]    </control>
[22:56:56.091]    <control if="!isProduction" while="" timeout="0" info="">
[22:56:56.091]      // if-block "!isProduction"
[22:56:56.091]        // =>  FALSE
[22:56:56.091]      // skip if-block "!isProduction"
[22:56:56.091]    </control>
[22:56:56.091]  </sequence>
[22:56:56.091]  
[22:57:16.214]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:57:16.214]  
[22:57:16.215]  <debugvars>
[22:57:16.215]    // Pre-defined
[22:57:16.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:57:16.215]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:57:16.215]    __dp=0x00000000
[22:57:16.215]    __ap=0x00000000
[22:57:16.215]    __traceout=0x00000000      (Trace Disabled)
[22:57:16.215]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:57:16.215]    __FlashAddr=0x00000000
[22:57:16.215]    __FlashLen=0x00000000
[22:57:16.215]    __FlashArg=0x00000000
[22:57:16.216]    __FlashOp=0x00000000
[22:57:16.216]    __Result=0x00000000
[22:57:16.216]  </debugvars>
[22:57:16.216]  
[22:57:16.216]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:57:16.217]    <block atomic="false" info="">
[22:57:16.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:57:16.217]        // -> [isSWJ <= 0x00000001]
[22:57:16.217]      __var hasDormant = __protocol & 0x00020000;
[22:57:16.217]        // -> [hasDormant <= 0x00000000]
[22:57:16.217]      __var protType   = __protocol & 0x0000FFFF;
[22:57:16.217]        // -> [protType <= 0x00000002]
[22:57:16.217]    </block>
[22:57:16.217]    <control if="protType == 1" while="" timeout="0" info="">
[22:57:16.217]      // if-block "protType == 1"
[22:57:16.217]        // =>  FALSE
[22:57:16.217]      // skip if-block "protType == 1"
[22:57:16.217]    </control>
[22:57:16.217]    <control if="protType == 2" while="" timeout="0" info="">
[22:57:16.218]      // if-block "protType == 2"
[22:57:16.218]        // =>  TRUE
[22:57:16.219]      <control if="isSWJ" while="" timeout="0" info="">
[22:57:16.219]        // if-block "isSWJ"
[22:57:16.219]          // =>  TRUE
[22:57:16.219]        <control if="hasDormant" while="" timeout="0" info="">
[22:57:16.219]          // if-block "hasDormant"
[22:57:16.219]            // =>  FALSE
[22:57:16.219]          // skip if-block "hasDormant"
[22:57:16.219]        </control>
[22:57:16.220]        <control if="!hasDormant" while="" timeout="0" info="">
[22:57:16.220]          // if-block "!hasDormant"
[22:57:16.220]            // =>  TRUE
[22:57:16.220]          <block atomic="false" info="">
[22:57:16.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:57:16.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:57:16.220]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:57:16.226]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:57:16.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:57:16.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:57:16.226]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:57:16.226]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:57:16.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:57:16.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:57:16.236]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:57:16.242]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:57:16.242]          </block>
[22:57:16.242]          // end if-block "!hasDormant"
[22:57:16.242]        </control>
[22:57:16.242]        // end if-block "isSWJ"
[22:57:16.242]      </control>
[22:57:16.242]      <control if="!isSWJ" while="" timeout="0" info="">
[22:57:16.242]        // if-block "!isSWJ"
[22:57:16.242]          // =>  FALSE
[22:57:16.242]        // skip if-block "!isSWJ"
[22:57:16.242]      </control>
[22:57:16.242]      <block atomic="false" info="">
[22:57:16.246]        ReadDP(0x0);
[22:57:16.248]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:57:16.248]      </block>
[22:57:16.248]      // end if-block "protType == 2"
[22:57:16.248]    </control>
[22:57:16.249]  </sequence>
[22:57:16.249]  
[22:57:16.251]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:57:16.251]  
[22:57:16.251]  <debugvars>
[22:57:16.251]    // Pre-defined
[22:57:16.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:57:16.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:57:16.251]    __dp=0x00000000
[22:57:16.251]    __ap=0x00000000
[22:57:16.251]    __traceout=0x00000000      (Trace Disabled)
[22:57:16.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:57:16.251]    __FlashAddr=0x00000000
[22:57:16.251]    __FlashLen=0x00000000
[22:57:16.251]    __FlashArg=0x00000000
[22:57:16.251]    __FlashOp=0x00000000
[22:57:16.251]    __Result=0x00000000
[22:57:16.251]  </debugvars>
[22:57:16.251]  
[22:57:16.251]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:57:16.251]    <block atomic="false" info="">
[22:57:16.251]      __var SW_DP_ABORT       = 0x0;
[22:57:16.251]        // -> [SW_DP_ABORT <= 0x00000000]
[22:57:16.251]      __var DP_CTRL_STAT      = 0x4;
[22:57:16.251]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:57:16.251]      __var DP_SELECT         = 0x8;
[22:57:16.251]        // -> [DP_SELECT <= 0x00000008]
[22:57:16.251]      __var powered_down      = 0;
[22:57:16.251]        // -> [powered_down <= 0x00000000]
[22:57:16.254]      WriteDP(DP_SELECT, 0x00000000);
[22:57:16.256]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:57:16.256]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:57:16.257]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:57:16.257]        // -> [powered_down <= 0x00000001]
[22:57:16.257]    </block>
[22:57:16.257]    <control if="powered_down" while="" timeout="0" info="">
[22:57:16.257]      // if-block "powered_down"
[22:57:16.257]        // =>  TRUE
[22:57:16.257]      <block atomic="false" info="">
[22:57:16.258]        Message(0, "Debug/System power-up request sent");
[22:57:16.260]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:57:16.260]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:57:16.260]      </block>
[22:57:16.260]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:57:16.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:57:16.264]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:57:16.264]        // while-condition  =>  FALSE
[22:57:16.266]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:57:16.266]      </control>
[22:57:16.266]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:57:16.266]        // if-block "(__protocol & 0xFFFF) == 1"
[22:57:16.266]          // =>  FALSE
[22:57:16.266]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:57:16.266]      </control>
[22:57:16.266]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:57:16.266]        // if-block "(__protocol & 0xFFFF) == 2"
[22:57:16.266]          // =>  TRUE
[22:57:16.266]        <block atomic="false" info="">
[22:57:16.266]          Message(0, "executing SWD power up");
[22:57:16.267]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:57:16.270]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:57:16.270]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:57:16.273]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:57:16.273]        </block>
[22:57:16.273]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:57:16.273]      </control>
[22:57:16.273]      // end if-block "powered_down"
[22:57:16.275]    </control>
[22:57:16.275]    <block atomic="false" info="">
[22:57:16.275]      __var DEBUG_PORT_VAL    = 0;
[22:57:16.275]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:57:16.275]      __var ACCESS_POINT_VAL  = 0;
[22:57:16.275]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:57:16.275]      __ap = 1; 
[22:57:16.275]        // -> [__ap <= 0x00000001]
[22:57:16.275]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:57:16.279]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:57:16.279]      __ap = 4;
[22:57:16.279]        // -> [__ap <= 0x00000004]
[22:57:16.279]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:57:16.296]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:57:16.296]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:57:16.296]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:57:16.296]    </block>
[22:57:16.296]    <block atomic="false" info="">
[22:57:16.298]      __var nReset = 0x80;
[22:57:16.298]        // -> [nReset <= 0x00000080]
[22:57:16.298]      __var canReadPins = 0;
[22:57:16.298]        // -> [canReadPins <= 0x00000000]
[22:57:16.298]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:57:16.300]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:57:16.300]        // -> [canReadPins <= 0x00000001]
[22:57:16.301]    </block>
[22:57:16.301]    <control if="" while="1" timeout="200" info="">
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.301]      // while "1"  (timeout="200")
[22:57:16.301]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.304]      // while-condition  =>  TRUE
[22:57:16.304]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.306]      // while "1"  (timeout="200")
[22:57:16.306]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.309]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.309]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.309]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.309]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.309]      // while-condition  =>  TRUE
[22:57:16.309]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.310]      // while-condition  =>  TRUE
[22:57:16.310]      // while "1"  (timeout="200")
[22:57:16.312]      // while-condition  =>  TRUE
[22:57:16.312]      // while "1"  (timeout="200")
[22:57:16.312]      // while-condition  =>  TRUE
[22:57:16.312]      // while "1"  (timeout="200")
[22:57:16.312]      // while-condition  =>  TRUE
[22:57:16.312]      // while "1"  (timeout="200")
[22:57:16.312]      // while-condition  =>  TRUE
[22:57:16.312]      // while "1"  (timeout="200")
[22:57:16.312]      // while-condition  =>  TRUE
[22:57:16.312]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.313]      // while "1"  (timeout="200")
[22:57:16.313]      // while-condition  =>  TRUE
[22:57:16.316]      // while "1"  (timeout="200")
[22:57:16.316]      // while  =>  TIMEOUT
[22:57:16.316]      // end while "1"
[22:57:16.316]    </control>
[22:57:16.316]    <control if="canReadPins" while="" timeout="0" info="">
[22:57:16.316]      // if-block "canReadPins"
[22:57:16.317]        // =>  TRUE
[22:57:16.318]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:57:16.318]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:57:16.319]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:57:16.319]        // while-condition  =>  FALSE
[22:57:16.319]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:57:16.319]      </control>
[22:57:16.319]      // end if-block "canReadPins"
[22:57:16.319]    </control>
[22:57:16.319]    <control if="!canReadPins" while="" timeout="0" info="">
[22:57:16.319]      // if-block "!canReadPins"
[22:57:16.319]        // =>  FALSE
[22:57:16.319]      // skip if-block "!canReadPins"
[22:57:16.319]    </control>
[22:57:16.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:57:16.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:57:16.321]        // =>  TRUE
[22:57:16.321]      <block atomic="false" info="">
[22:57:16.321]        WriteAP(0x00, 0x190008);
[22:57:16.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:57:16.321]        WriteAP(0xF0, 0x01);
[22:57:16.327]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:57:16.327]      </block>
[22:57:16.327]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:57:16.327]    </control>
[22:57:16.327]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:57:16.327]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:57:16.327]        // =>  FALSE
[22:57:16.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:57:16.327]    </control>
[22:57:16.327]    <block atomic="false" info="">
[22:57:16.328]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:57:16.332]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:57:16.332]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:57:16.332]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:57:16.332]      __ap = 0; //lets make sure we reset the access point selection
[22:57:16.332]        // -> [__ap <= 0x00000000]
[22:57:16.332]    </block>
[22:57:16.332]  </sequence>
[22:57:16.332]  
[22:57:16.354]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:57:16.354]  
[22:57:16.354]  <debugvars>
[22:57:16.354]    // Pre-defined
[22:57:16.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:57:16.356]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:57:16.356]    __dp=0x00000000
[22:57:16.356]    __ap=0x00000000
[22:57:16.356]    __traceout=0x00000000      (Trace Disabled)
[22:57:16.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:57:16.356]    __FlashAddr=0x00000000
[22:57:16.357]    __FlashLen=0x00000000
[22:57:16.357]    __FlashArg=0x00000000
[22:57:16.357]    __FlashOp=0x00000000
[22:57:16.357]    __Result=0x00000000
[22:57:16.357]  </debugvars>
[22:57:16.357]  
[22:57:16.357]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:57:16.357]    <block atomic="false" info="">
[22:57:16.357]      __var deviceID = 0;
[22:57:16.357]        // -> [deviceID <= 0x00000000]
[22:57:16.357]      __var version = 0;
[22:57:16.357]        // -> [version <= 0x00000000]
[22:57:16.357]      __var partNum = 0;
[22:57:16.357]        // -> [partNum <= 0x00000000]
[22:57:16.357]      __var manuf = 0;
[22:57:16.357]        // -> [manuf <= 0x00000000]
[22:57:16.357]      __var isMSPM0G1X0X_G3X0X = 0;
[22:57:16.357]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:57:16.357]      __var isProduction = 0;
[22:57:16.357]        // -> [isProduction <= 0x00000000]
[22:57:16.357]      __var continueId = 0;
[22:57:16.357]        // -> [continueId <= 0x00000000]
[22:57:16.357]      deviceID =   Read32(0x41C40004);
[22:57:16.365]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:57:16.365]        // -> [deviceID <= 0x2BB8802F]
[22:57:16.365]      version = deviceID >> 28;
[22:57:16.365]        // -> [version <= 0x00000002]
[22:57:16.366]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:57:16.366]        // -> [partNum <= 0x0000BB88]
[22:57:16.366]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:57:16.366]        // -> [manuf <= 0x00000017]
[22:57:16.366]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:57:16.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:57:16.366]      isProduction = (version > 0);
[22:57:16.366]        // -> [isProduction <= 0x00000001]
[22:57:16.366]    </block>
[22:57:16.366]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:57:16.366]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:57:16.366]        // =>  FALSE
[22:57:16.366]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:57:16.366]    </control>
[22:57:16.366]    <control if="continueId == 4" while="" timeout="0" info="">
[22:57:16.366]      // if-block "continueId == 4"
[22:57:16.366]        // =>  FALSE
[22:57:16.366]      // skip if-block "continueId == 4"
[22:57:16.366]    </control>
[22:57:16.366]    <control if="!isProduction" while="" timeout="0" info="">
[22:57:16.366]      // if-block "!isProduction"
[22:57:16.368]        // =>  FALSE
[22:57:16.368]      // skip if-block "!isProduction"
[22:57:16.368]    </control>
[22:57:16.368]  </sequence>
[22:57:16.368]  
[22:58:17.633]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:58:17.633]  
[22:58:17.643]  <debugvars>
[22:58:17.643]    // Pre-defined
[22:58:17.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:17.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:17.643]    __dp=0x00000000
[22:58:17.643]    __ap=0x00000000
[22:58:17.643]    __traceout=0x00000000      (Trace Disabled)
[22:58:17.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:17.643]    __FlashAddr=0x00000000
[22:58:17.643]    __FlashLen=0x00000000
[22:58:17.643]    __FlashArg=0x00000000
[22:58:17.643]    __FlashOp=0x00000000
[22:58:17.643]    __Result=0x00000000
[22:58:17.643]  </debugvars>
[22:58:17.643]  
[22:58:17.643]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:58:17.643]    <block atomic="false" info="">
[22:58:17.643]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:58:17.643]        // -> [isSWJ <= 0x00000001]
[22:58:17.643]      __var hasDormant = __protocol & 0x00020000;
[22:58:17.643]        // -> [hasDormant <= 0x00000000]
[22:58:17.643]      __var protType   = __protocol & 0x0000FFFF;
[22:58:17.643]        // -> [protType <= 0x00000002]
[22:58:17.643]    </block>
[22:58:17.643]    <control if="protType == 1" while="" timeout="0" info="">
[22:58:17.643]      // if-block "protType == 1"
[22:58:17.646]        // =>  FALSE
[22:58:17.646]      // skip if-block "protType == 1"
[22:58:17.646]    </control>
[22:58:17.646]    <control if="protType == 2" while="" timeout="0" info="">
[22:58:17.646]      // if-block "protType == 2"
[22:58:17.646]        // =>  TRUE
[22:58:17.646]      <control if="isSWJ" while="" timeout="0" info="">
[22:58:17.646]        // if-block "isSWJ"
[22:58:17.646]          // =>  TRUE
[22:58:17.646]        <control if="hasDormant" while="" timeout="0" info="">
[22:58:17.646]          // if-block "hasDormant"
[22:58:17.646]            // =>  FALSE
[22:58:17.646]          // skip if-block "hasDormant"
[22:58:17.646]        </control>
[22:58:17.646]        <control if="!hasDormant" while="" timeout="0" info="">
[22:58:17.648]          // if-block "!hasDormant"
[22:58:17.648]            // =>  TRUE
[22:58:17.648]          <block atomic="false" info="">
[22:58:17.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:58:17.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:17.659]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:58:17.659]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:58:17.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:58:17.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:17.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:58:17.666]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:58:17.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:58:17.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:17.670]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:58:17.674]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:58:17.674]          </block>
[22:58:17.674]          // end if-block "!hasDormant"
[22:58:17.674]        </control>
[22:58:17.674]        // end if-block "isSWJ"
[22:58:17.674]      </control>
[22:58:17.674]      <control if="!isSWJ" while="" timeout="0" info="">
[22:58:17.674]        // if-block "!isSWJ"
[22:58:17.674]          // =>  FALSE
[22:58:17.674]        // skip if-block "!isSWJ"
[22:58:17.674]      </control>
[22:58:17.676]      <block atomic="false" info="">
[22:58:17.676]        ReadDP(0x0);
[22:58:17.677]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:58:17.677]      </block>
[22:58:17.678]      // end if-block "protType == 2"
[22:58:17.678]    </control>
[22:58:17.678]  </sequence>
[22:58:17.678]  
[22:58:17.682]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:58:17.682]  
[22:58:17.682]  <debugvars>
[22:58:17.682]    // Pre-defined
[22:58:17.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:17.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:17.682]    __dp=0x00000000
[22:58:17.682]    __ap=0x00000000
[22:58:17.682]    __traceout=0x00000000      (Trace Disabled)
[22:58:17.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:17.682]    __FlashAddr=0x00000000
[22:58:17.682]    __FlashLen=0x00000000
[22:58:17.682]    __FlashArg=0x00000000
[22:58:17.682]    __FlashOp=0x00000000
[22:58:17.682]    __Result=0x00000000
[22:58:17.682]  </debugvars>
[22:58:17.682]  
[22:58:17.686]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:58:17.686]    <block atomic="false" info="">
[22:58:17.686]      __var SW_DP_ABORT       = 0x0;
[22:58:17.686]        // -> [SW_DP_ABORT <= 0x00000000]
[22:58:17.686]      __var DP_CTRL_STAT      = 0x4;
[22:58:17.686]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:58:17.686]      __var DP_SELECT         = 0x8;
[22:58:17.686]        // -> [DP_SELECT <= 0x00000008]
[22:58:17.686]      __var powered_down      = 0;
[22:58:17.686]        // -> [powered_down <= 0x00000000]
[22:58:17.686]      WriteDP(DP_SELECT, 0x00000000);
[22:58:17.687]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:58:17.687]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:58:17.687]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:58:17.690]        // -> [powered_down <= 0x00000001]
[22:58:17.690]    </block>
[22:58:17.690]    <control if="powered_down" while="" timeout="0" info="">
[22:58:17.690]      // if-block "powered_down"
[22:58:17.690]        // =>  TRUE
[22:58:17.690]      <block atomic="false" info="">
[22:58:17.690]        Message(0, "Debug/System power-up request sent");
[22:58:17.694]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:58:17.697]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:58:17.698]      </block>
[22:58:17.698]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:58:17.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:58:17.700]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:58:17.700]        // while-condition  =>  FALSE
[22:58:17.700]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:58:17.700]      </control>
[22:58:17.700]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:58:17.700]        // if-block "(__protocol & 0xFFFF) == 1"
[22:58:17.700]          // =>  FALSE
[22:58:17.703]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:58:17.703]      </control>
[22:58:17.703]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:58:17.703]        // if-block "(__protocol & 0xFFFF) == 2"
[22:58:17.703]          // =>  TRUE
[22:58:17.703]        <block atomic="false" info="">
[22:58:17.703]          Message(0, "executing SWD power up");
[22:58:17.704]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:58:17.708]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:58:17.708]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:58:17.711]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:58:17.711]        </block>
[22:58:17.711]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:58:17.711]      </control>
[22:58:17.711]      // end if-block "powered_down"
[22:58:17.711]    </control>
[22:58:17.711]    <block atomic="false" info="">
[22:58:17.711]      __var DEBUG_PORT_VAL    = 0;
[22:58:17.711]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:58:17.711]      __var ACCESS_POINT_VAL  = 0;
[22:58:17.711]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:58:17.715]      __ap = 1; 
[22:58:17.715]        // -> [__ap <= 0x00000001]
[22:58:17.715]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:58:17.718]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:58:17.718]      __ap = 4;
[22:58:17.718]        // -> [__ap <= 0x00000004]
[22:58:17.718]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:58:17.719]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:58:17.719]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:58:17.719]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:58:17.723]    </block>
[22:58:17.723]    <block atomic="false" info="">
[22:58:17.723]      __var nReset = 0x80;
[22:58:17.723]        // -> [nReset <= 0x00000080]
[22:58:17.723]      __var canReadPins = 0;
[22:58:17.723]        // -> [canReadPins <= 0x00000000]
[22:58:17.723]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:58:17.723]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:58:17.723]        // -> [canReadPins <= 0x00000001]
[22:58:17.723]    </block>
[22:58:17.728]    <control if="" while="1" timeout="200" info="">
[22:58:17.728]      // while "1"  (timeout="200")
[22:58:17.728]      // while-condition  =>  TRUE
[22:58:17.728]      // while "1"  (timeout="200")
[22:58:17.729]      // while-condition  =>  TRUE
[22:58:17.729]      // while "1"  (timeout="200")
[22:58:17.729]      // while-condition  =>  TRUE
[22:58:17.729]      // while "1"  (timeout="200")
[22:58:17.729]      // while-condition  =>  TRUE
[22:58:17.729]      // while "1"  (timeout="200")
[22:58:17.729]      // while-condition  =>  TRUE
[22:58:17.729]      // while "1"  (timeout="200")
[22:58:17.729]      // while-condition  =>  TRUE
[22:58:17.730]      // while "1"  (timeout="200")
[22:58:17.730]      // while-condition  =>  TRUE
[22:58:17.730]      // while "1"  (timeout="200")
[22:58:17.730]      // while-condition  =>  TRUE
[22:58:17.730]      // while "1"  (timeout="200")
[22:58:17.730]      // while-condition  =>  TRUE
[22:58:17.730]      // while "1"  (timeout="200")
[22:58:17.730]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.731]      // while "1"  (timeout="200")
[22:58:17.731]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.732]      // while "1"  (timeout="200")
[22:58:17.732]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.733]      // while "1"  (timeout="200")
[22:58:17.733]      // while-condition  =>  TRUE
[22:58:17.735]      // while "1"  (timeout="200")
[22:58:17.735]      // while-condition  =>  TRUE
[22:58:17.735]      // while "1"  (timeout="200")
[22:58:17.735]      // while-condition  =>  TRUE
[22:58:17.735]      // while "1"  (timeout="200")
[22:58:17.735]      // while-condition  =>  TRUE
[22:58:17.735]      // while "1"  (timeout="200")
[22:58:17.735]      // while-condition  =>  TRUE
[22:58:17.735]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.736]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.736]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.736]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.736]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.736]      // while "1"  (timeout="200")
[22:58:17.736]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.737]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.737]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.737]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.737]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.737]      // while-condition  =>  TRUE
[22:58:17.737]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.738]      // while "1"  (timeout="200")
[22:58:17.738]      // while-condition  =>  TRUE
[22:58:17.739]      // while "1"  (timeout="200")
[22:58:17.739]      // while  =>  TIMEOUT
[22:58:17.739]      // end while "1"
[22:58:17.739]    </control>
[22:58:17.739]    <control if="canReadPins" while="" timeout="0" info="">
[22:58:17.739]      // if-block "canReadPins"
[22:58:17.739]        // =>  TRUE
[22:58:17.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:58:17.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:58:17.739]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:58:17.739]        // while-condition  =>  FALSE
[22:58:17.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:58:17.739]      </control>
[22:58:17.739]      // end if-block "canReadPins"
[22:58:17.739]    </control>
[22:58:17.739]    <control if="!canReadPins" while="" timeout="0" info="">
[22:58:17.739]      // if-block "!canReadPins"
[22:58:17.739]        // =>  FALSE
[22:58:17.739]      // skip if-block "!canReadPins"
[22:58:17.739]    </control>
[22:58:17.739]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:58:17.739]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:58:17.743]        // =>  TRUE
[22:58:17.743]      <block atomic="false" info="">
[22:58:17.743]        WriteAP(0x00, 0x190008);
[22:58:17.745]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:58:17.745]        WriteAP(0xF0, 0x01);
[22:58:17.752]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:58:17.752]      </block>
[22:58:17.752]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:58:17.752]    </control>
[22:58:17.752]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:58:17.752]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:58:17.752]        // =>  FALSE
[22:58:17.752]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:58:17.752]    </control>
[22:58:17.752]    <block atomic="false" info="">
[22:58:17.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:58:17.757]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:58:17.757]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:58:17.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:58:17.759]      __ap = 0; //lets make sure we reset the access point selection
[22:58:17.759]        // -> [__ap <= 0x00000000]
[22:58:17.759]    </block>
[22:58:17.760]  </sequence>
[22:58:17.760]  
[22:58:17.783]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:58:17.783]  
[22:58:17.783]  <debugvars>
[22:58:17.783]    // Pre-defined
[22:58:17.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:17.783]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:17.783]    __dp=0x00000000
[22:58:17.783]    __ap=0x00000000
[22:58:17.783]    __traceout=0x00000000      (Trace Disabled)
[22:58:17.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:17.785]    __FlashAddr=0x00000000
[22:58:17.785]    __FlashLen=0x00000000
[22:58:17.785]    __FlashArg=0x00000000
[22:58:17.785]    __FlashOp=0x00000000
[22:58:17.785]    __Result=0x00000000
[22:58:17.785]  </debugvars>
[22:58:17.785]  
[22:58:17.785]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:58:17.785]    <block atomic="false" info="">
[22:58:17.785]      __var deviceID = 0;
[22:58:17.785]        // -> [deviceID <= 0x00000000]
[22:58:17.785]      __var version = 0;
[22:58:17.785]        // -> [version <= 0x00000000]
[22:58:17.785]      __var partNum = 0;
[22:58:17.787]        // -> [partNum <= 0x00000000]
[22:58:17.787]      __var manuf = 0;
[22:58:17.787]        // -> [manuf <= 0x00000000]
[22:58:17.787]      __var isMSPM0G1X0X_G3X0X = 0;
[22:58:17.787]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:58:17.787]      __var isProduction = 0;
[22:58:17.787]        // -> [isProduction <= 0x00000000]
[22:58:17.787]      __var continueId = 0;
[22:58:17.787]        // -> [continueId <= 0x00000000]
[22:58:17.787]      deviceID =   Read32(0x41C40004);
[22:58:17.792]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:58:17.792]        // -> [deviceID <= 0x2BB8802F]
[22:58:17.792]      version = deviceID >> 28;
[22:58:17.792]        // -> [version <= 0x00000002]
[22:58:17.793]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:58:17.793]        // -> [partNum <= 0x0000BB88]
[22:58:17.793]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:58:17.793]        // -> [manuf <= 0x00000017]
[22:58:17.793]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:58:17.793]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:58:17.793]      isProduction = (version > 0);
[22:58:17.793]        // -> [isProduction <= 0x00000001]
[22:58:17.793]    </block>
[22:58:17.793]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:58:17.793]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:58:17.793]        // =>  FALSE
[22:58:17.793]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:58:17.793]    </control>
[22:58:17.793]    <control if="continueId == 4" while="" timeout="0" info="">
[22:58:17.793]      // if-block "continueId == 4"
[22:58:17.793]        // =>  FALSE
[22:58:17.793]      // skip if-block "continueId == 4"
[22:58:17.793]    </control>
[22:58:17.795]    <control if="!isProduction" while="" timeout="0" info="">
[22:58:17.795]      // if-block "!isProduction"
[22:58:17.795]        // =>  FALSE
[22:58:17.795]      // skip if-block "!isProduction"
[22:58:17.795]    </control>
[22:58:17.795]  </sequence>
[22:58:17.795]  
[22:58:46.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:58:46.218]  
[22:58:46.218]  <debugvars>
[22:58:46.218]    // Pre-defined
[22:58:46.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:46.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:46.218]    __dp=0x00000000
[22:58:46.218]    __ap=0x00000000
[22:58:46.218]    __traceout=0x00000000      (Trace Disabled)
[22:58:46.218]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:46.218]    __FlashAddr=0x00000000
[22:58:46.218]    __FlashLen=0x00000000
[22:58:46.218]    __FlashArg=0x00000000
[22:58:46.218]    __FlashOp=0x00000000
[22:58:46.218]    __Result=0x00000000
[22:58:46.218]  </debugvars>
[22:58:46.218]  
[22:58:46.218]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:58:46.218]    <block atomic="false" info="">
[22:58:46.218]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:58:46.218]        // -> [isSWJ <= 0x00000001]
[22:58:46.222]      __var hasDormant = __protocol & 0x00020000;
[22:58:46.222]        // -> [hasDormant <= 0x00000000]
[22:58:46.222]      __var protType   = __protocol & 0x0000FFFF;
[22:58:46.222]        // -> [protType <= 0x00000002]
[22:58:46.222]    </block>
[22:58:46.222]    <control if="protType == 1" while="" timeout="0" info="">
[22:58:46.222]      // if-block "protType == 1"
[22:58:46.222]        // =>  FALSE
[22:58:46.222]      // skip if-block "protType == 1"
[22:58:46.222]    </control>
[22:58:46.222]    <control if="protType == 2" while="" timeout="0" info="">
[22:58:46.222]      // if-block "protType == 2"
[22:58:46.222]        // =>  TRUE
[22:58:46.222]      <control if="isSWJ" while="" timeout="0" info="">
[22:58:46.222]        // if-block "isSWJ"
[22:58:46.222]          // =>  TRUE
[22:58:46.222]        <control if="hasDormant" while="" timeout="0" info="">
[22:58:46.222]          // if-block "hasDormant"
[22:58:46.222]            // =>  FALSE
[22:58:46.222]          // skip if-block "hasDormant"
[22:58:46.222]        </control>
[22:58:46.222]        <control if="!hasDormant" while="" timeout="0" info="">
[22:58:46.222]          // if-block "!hasDormant"
[22:58:46.222]            // =>  TRUE
[22:58:46.222]          <block atomic="false" info="">
[22:58:46.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:58:46.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:46.228]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:58:46.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:58:46.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:58:46.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:46.231]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:58:46.231]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:58:46.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:58:46.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:58:46.234]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:58:46.238]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:58:46.238]          </block>
[22:58:46.238]          // end if-block "!hasDormant"
[22:58:46.238]        </control>
[22:58:46.238]        // end if-block "isSWJ"
[22:58:46.238]      </control>
[22:58:46.238]      <control if="!isSWJ" while="" timeout="0" info="">
[22:58:46.238]        // if-block "!isSWJ"
[22:58:46.238]          // =>  FALSE
[22:58:46.238]        // skip if-block "!isSWJ"
[22:58:46.238]      </control>
[22:58:46.238]      <block atomic="false" info="">
[22:58:46.238]        ReadDP(0x0);
[22:58:46.242]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:58:46.242]      </block>
[22:58:46.242]      // end if-block "protType == 2"
[22:58:46.242]    </control>
[22:58:46.242]  </sequence>
[22:58:46.242]  
[22:58:46.248]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:58:46.248]  
[22:58:46.251]  <debugvars>
[22:58:46.251]    // Pre-defined
[22:58:46.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:46.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:46.251]    __dp=0x00000000
[22:58:46.251]    __ap=0x00000000
[22:58:46.251]    __traceout=0x00000000      (Trace Disabled)
[22:58:46.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:46.251]    __FlashAddr=0x00000000
[22:58:46.251]    __FlashLen=0x00000000
[22:58:46.251]    __FlashArg=0x00000000
[22:58:46.251]    __FlashOp=0x00000000
[22:58:46.251]    __Result=0x00000000
[22:58:46.251]  </debugvars>
[22:58:46.251]  
[22:58:46.251]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:58:46.251]    <block atomic="false" info="">
[22:58:46.251]      __var SW_DP_ABORT       = 0x0;
[22:58:46.251]        // -> [SW_DP_ABORT <= 0x00000000]
[22:58:46.251]      __var DP_CTRL_STAT      = 0x4;
[22:58:46.251]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:58:46.251]      __var DP_SELECT         = 0x8;
[22:58:46.251]        // -> [DP_SELECT <= 0x00000008]
[22:58:46.251]      __var powered_down      = 0;
[22:58:46.251]        // -> [powered_down <= 0x00000000]
[22:58:46.251]      WriteDP(DP_SELECT, 0x00000000);
[22:58:46.255]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:58:46.255]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:58:46.256]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:58:46.256]        // -> [powered_down <= 0x00000001]
[22:58:46.256]    </block>
[22:58:46.256]    <control if="powered_down" while="" timeout="0" info="">
[22:58:46.256]      // if-block "powered_down"
[22:58:46.256]        // =>  TRUE
[22:58:46.256]      <block atomic="false" info="">
[22:58:46.256]        Message(0, "Debug/System power-up request sent");
[22:58:46.258]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:58:46.258]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:58:46.258]      </block>
[22:58:46.258]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:58:46.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:58:46.262]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:58:46.262]        // while-condition  =>  FALSE
[22:58:46.262]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:58:46.262]      </control>
[22:58:46.262]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:58:46.262]        // if-block "(__protocol & 0xFFFF) == 1"
[22:58:46.262]          // =>  FALSE
[22:58:46.262]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:58:46.262]      </control>
[22:58:46.262]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:58:46.262]        // if-block "(__protocol & 0xFFFF) == 2"
[22:58:46.264]          // =>  TRUE
[22:58:46.264]        <block atomic="false" info="">
[22:58:46.264]          Message(0, "executing SWD power up");
[22:58:46.265]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:58:46.266]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:58:46.266]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:58:46.268]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:58:46.268]        </block>
[22:58:46.268]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:58:46.268]      </control>
[22:58:46.268]      // end if-block "powered_down"
[22:58:46.268]    </control>
[22:58:46.268]    <block atomic="false" info="">
[22:58:46.268]      __var DEBUG_PORT_VAL    = 0;
[22:58:46.268]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:58:46.268]      __var ACCESS_POINT_VAL  = 0;
[22:58:46.268]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:58:46.270]      __ap = 1; 
[22:58:46.270]        // -> [__ap <= 0x00000001]
[22:58:46.270]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:58:46.274]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:58:46.274]      __ap = 4;
[22:58:46.274]        // -> [__ap <= 0x00000004]
[22:58:46.274]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:58:46.278]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:58:46.278]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:58:46.278]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:58:46.280]    </block>
[22:58:46.280]    <block atomic="false" info="">
[22:58:46.280]      __var nReset = 0x80;
[22:58:46.280]        // -> [nReset <= 0x00000080]
[22:58:46.280]      __var canReadPins = 0;
[22:58:46.280]        // -> [canReadPins <= 0x00000000]
[22:58:46.280]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:58:46.283]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:58:46.283]        // -> [canReadPins <= 0x00000001]
[22:58:46.284]    </block>
[22:58:46.284]    <control if="" while="1" timeout="200" info="">
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.284]      // while-condition  =>  TRUE
[22:58:46.284]      // while "1"  (timeout="200")
[22:58:46.287]      // while-condition  =>  TRUE
[22:58:46.287]      // while "1"  (timeout="200")
[22:58:46.287]      // while  =>  TIMEOUT
[22:58:46.287]      // end while "1"
[22:58:46.287]    </control>
[22:58:46.287]    <control if="canReadPins" while="" timeout="0" info="">
[22:58:46.287]      // if-block "canReadPins"
[22:58:46.287]        // =>  TRUE
[22:58:46.287]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:58:46.287]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:58:46.288]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:58:46.288]        // while-condition  =>  FALSE
[22:58:46.288]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:58:46.288]      </control>
[22:58:46.288]      // end if-block "canReadPins"
[22:58:46.288]    </control>
[22:58:46.288]    <control if="!canReadPins" while="" timeout="0" info="">
[22:58:46.290]      // if-block "!canReadPins"
[22:58:46.290]        // =>  FALSE
[22:58:46.290]      // skip if-block "!canReadPins"
[22:58:46.290]    </control>
[22:58:46.290]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:58:46.290]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:58:46.290]        // =>  TRUE
[22:58:46.290]      <block atomic="false" info="">
[22:58:46.290]        WriteAP(0x00, 0x190008);
[22:58:46.292]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:58:46.292]        WriteAP(0xF0, 0x01);
[22:58:46.297]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:58:46.297]      </block>
[22:58:46.297]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:58:46.298]    </control>
[22:58:46.298]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:58:46.298]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:58:46.298]        // =>  FALSE
[22:58:46.298]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:58:46.298]    </control>
[22:58:46.298]    <block atomic="false" info="">
[22:58:46.298]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:58:46.302]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:58:46.302]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:58:46.302]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:58:46.303]      __ap = 0; //lets make sure we reset the access point selection
[22:58:46.303]        // -> [__ap <= 0x00000000]
[22:58:46.303]    </block>
[22:58:46.303]  </sequence>
[22:58:46.303]  
[22:58:46.327]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:58:46.327]  
[22:58:46.327]  <debugvars>
[22:58:46.327]    // Pre-defined
[22:58:46.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:58:46.327]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:58:46.327]    __dp=0x00000000
[22:58:46.328]    __ap=0x00000000
[22:58:46.328]    __traceout=0x00000000      (Trace Disabled)
[22:58:46.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:58:46.328]    __FlashAddr=0x00000000
[22:58:46.328]    __FlashLen=0x00000000
[22:58:46.328]    __FlashArg=0x00000000
[22:58:46.328]    __FlashOp=0x00000000
[22:58:46.328]    __Result=0x00000000
[22:58:46.328]  </debugvars>
[22:58:46.328]  
[22:58:46.328]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:58:46.329]    <block atomic="false" info="">
[22:58:46.329]      __var deviceID = 0;
[22:58:46.329]        // -> [deviceID <= 0x00000000]
[22:58:46.329]      __var version = 0;
[22:58:46.329]        // -> [version <= 0x00000000]
[22:58:46.329]      __var partNum = 0;
[22:58:46.329]        // -> [partNum <= 0x00000000]
[22:58:46.329]      __var manuf = 0;
[22:58:46.329]        // -> [manuf <= 0x00000000]
[22:58:46.329]      __var isMSPM0G1X0X_G3X0X = 0;
[22:58:46.329]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:58:46.329]      __var isProduction = 0;
[22:58:46.329]        // -> [isProduction <= 0x00000000]
[22:58:46.329]      __var continueId = 0;
[22:58:46.329]        // -> [continueId <= 0x00000000]
[22:58:46.329]      deviceID =   Read32(0x41C40004);
[22:58:46.336]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:58:46.336]        // -> [deviceID <= 0x2BB8802F]
[22:58:46.336]      version = deviceID >> 28;
[22:58:46.336]        // -> [version <= 0x00000002]
[22:58:46.336]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:58:46.336]        // -> [partNum <= 0x0000BB88]
[22:58:46.336]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:58:46.336]        // -> [manuf <= 0x00000017]
[22:58:46.336]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:58:46.336]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:58:46.336]      isProduction = (version > 0);
[22:58:46.337]        // -> [isProduction <= 0x00000001]
[22:58:46.337]    </block>
[22:58:46.337]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:58:46.337]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:58:46.337]        // =>  FALSE
[22:58:46.338]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:58:46.338]    </control>
[22:58:46.338]    <control if="continueId == 4" while="" timeout="0" info="">
[22:58:46.338]      // if-block "continueId == 4"
[22:58:46.338]        // =>  FALSE
[22:58:46.338]      // skip if-block "continueId == 4"
[22:58:46.338]    </control>
[22:58:46.338]    <control if="!isProduction" while="" timeout="0" info="">
[22:58:46.338]      // if-block "!isProduction"
[22:58:46.338]        // =>  FALSE
[22:58:46.338]      // skip if-block "!isProduction"
[22:58:46.338]    </control>
[22:58:46.338]  </sequence>
[22:58:46.338]  
[22:59:49.640]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:59:49.640]  
[22:59:49.650]  <debugvars>
[22:59:49.650]    // Pre-defined
[22:59:49.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:59:49.650]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:59:49.650]    __dp=0x00000000
[22:59:49.650]    __ap=0x00000000
[22:59:49.650]    __traceout=0x00000000      (Trace Disabled)
[22:59:49.650]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:59:49.651]    __FlashAddr=0x00000000
[22:59:49.651]    __FlashLen=0x00000000
[22:59:49.651]    __FlashArg=0x00000000
[22:59:49.651]    __FlashOp=0x00000000
[22:59:49.651]    __Result=0x00000000
[22:59:49.651]  </debugvars>
[22:59:49.651]  
[22:59:49.651]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:59:49.651]    <block atomic="false" info="">
[22:59:49.651]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:59:49.651]        // -> [isSWJ <= 0x00000001]
[22:59:49.651]      __var hasDormant = __protocol & 0x00020000;
[22:59:49.651]        // -> [hasDormant <= 0x00000000]
[22:59:49.651]      __var protType   = __protocol & 0x0000FFFF;
[22:59:49.651]        // -> [protType <= 0x00000002]
[22:59:49.651]    </block>
[22:59:49.651]    <control if="protType == 1" while="" timeout="0" info="">
[22:59:49.651]      // if-block "protType == 1"
[22:59:49.651]        // =>  FALSE
[22:59:49.651]      // skip if-block "protType == 1"
[22:59:49.651]    </control>
[22:59:49.651]    <control if="protType == 2" while="" timeout="0" info="">
[22:59:49.651]      // if-block "protType == 2"
[22:59:49.651]        // =>  TRUE
[22:59:49.651]      <control if="isSWJ" while="" timeout="0" info="">
[22:59:49.651]        // if-block "isSWJ"
[22:59:49.651]          // =>  TRUE
[22:59:49.651]        <control if="hasDormant" while="" timeout="0" info="">
[22:59:49.651]          // if-block "hasDormant"
[22:59:49.651]            // =>  FALSE
[22:59:49.651]          // skip if-block "hasDormant"
[22:59:49.651]        </control>
[22:59:49.651]        <control if="!hasDormant" while="" timeout="0" info="">
[22:59:49.651]          // if-block "!hasDormant"
[22:59:49.651]            // =>  TRUE
[22:59:49.651]          <block atomic="false" info="">
[22:59:49.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:59:49.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:59:49.655]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:59:49.659]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:59:49.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:59:49.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:59:49.659]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:59:49.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:59:49.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:59:49.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:59:49.663]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:59:49.663]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:59:49.663]          </block>
[22:59:49.663]          // end if-block "!hasDormant"
[22:59:49.663]        </control>
[22:59:49.663]        // end if-block "isSWJ"
[22:59:49.663]      </control>
[22:59:49.663]      <control if="!isSWJ" while="" timeout="0" info="">
[22:59:49.663]        // if-block "!isSWJ"
[22:59:49.663]          // =>  FALSE
[22:59:49.663]        // skip if-block "!isSWJ"
[22:59:49.663]      </control>
[22:59:49.663]      <block atomic="false" info="">
[22:59:49.667]        ReadDP(0x0);
[22:59:49.667]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:59:49.667]      </block>
[22:59:49.667]      // end if-block "protType == 2"
[22:59:49.670]    </control>
[22:59:49.670]  </sequence>
[22:59:49.670]  
[22:59:49.672]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:59:49.672]  
[22:59:49.672]  <debugvars>
[22:59:49.672]    // Pre-defined
[22:59:49.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:59:49.672]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:59:49.672]    __dp=0x00000000
[22:59:49.672]    __ap=0x00000000
[22:59:49.672]    __traceout=0x00000000      (Trace Disabled)
[22:59:49.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:59:49.672]    __FlashAddr=0x00000000
[22:59:49.672]    __FlashLen=0x00000000
[22:59:49.672]    __FlashArg=0x00000000
[22:59:49.672]    __FlashOp=0x00000000
[22:59:49.672]    __Result=0x00000000
[22:59:49.672]  </debugvars>
[22:59:49.672]  
[22:59:49.672]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:59:49.672]    <block atomic="false" info="">
[22:59:49.672]      __var SW_DP_ABORT       = 0x0;
[22:59:49.672]        // -> [SW_DP_ABORT <= 0x00000000]
[22:59:49.672]      __var DP_CTRL_STAT      = 0x4;
[22:59:49.672]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:59:49.672]      __var DP_SELECT         = 0x8;
[22:59:49.672]        // -> [DP_SELECT <= 0x00000008]
[22:59:49.672]      __var powered_down      = 0;
[22:59:49.672]        // -> [powered_down <= 0x00000000]
[22:59:49.672]      WriteDP(DP_SELECT, 0x00000000);
[22:59:49.676]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:59:49.676]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:59:49.679]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:59:49.679]        // -> [powered_down <= 0x00000001]
[22:59:49.679]    </block>
[22:59:49.679]    <control if="powered_down" while="" timeout="0" info="">
[22:59:49.679]      // if-block "powered_down"
[22:59:49.679]        // =>  TRUE
[22:59:49.679]      <block atomic="false" info="">
[22:59:49.679]        Message(0, "Debug/System power-up request sent");
[22:59:49.679]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:59:49.683]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:59:49.683]      </block>
[22:59:49.683]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:59:49.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:59:49.686]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:59:49.686]        // while-condition  =>  FALSE
[22:59:49.686]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:59:49.686]      </control>
[22:59:49.688]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:59:49.688]        // if-block "(__protocol & 0xFFFF) == 1"
[22:59:49.688]          // =>  FALSE
[22:59:49.688]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:59:49.688]      </control>
[22:59:49.688]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:59:49.688]        // if-block "(__protocol & 0xFFFF) == 2"
[22:59:49.688]          // =>  TRUE
[22:59:49.688]        <block atomic="false" info="">
[22:59:49.688]          Message(0, "executing SWD power up");
[22:59:49.690]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:59:49.697]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:59:49.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:59:49.701]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:59:49.701]        </block>
[22:59:49.701]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:59:49.701]      </control>
[22:59:49.701]      // end if-block "powered_down"
[22:59:49.701]    </control>
[22:59:49.701]    <block atomic="false" info="">
[22:59:49.701]      __var DEBUG_PORT_VAL    = 0;
[22:59:49.701]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:59:49.701]      __var ACCESS_POINT_VAL  = 0;
[22:59:49.701]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:59:49.701]      __ap = 1; 
[22:59:49.701]        // -> [__ap <= 0x00000001]
[22:59:49.701]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:59:49.707]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:59:49.707]      __ap = 4;
[22:59:49.707]        // -> [__ap <= 0x00000004]
[22:59:49.707]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:59:49.710]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:59:49.710]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:59:49.710]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:59:49.713]    </block>
[22:59:49.713]    <block atomic="false" info="">
[22:59:49.713]      __var nReset = 0x80;
[22:59:49.713]        // -> [nReset <= 0x00000080]
[22:59:49.713]      __var canReadPins = 0;
[22:59:49.713]        // -> [canReadPins <= 0x00000000]
[22:59:49.713]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:59:49.714]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:59:49.714]        // -> [canReadPins <= 0x00000001]
[22:59:49.714]    </block>
[22:59:49.714]    <control if="" while="1" timeout="200" info="">
[22:59:49.714]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.716]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.716]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.716]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.716]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.716]      // while "1"  (timeout="200")
[22:59:49.716]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.717]      // while-condition  =>  TRUE
[22:59:49.717]      // while "1"  (timeout="200")
[22:59:49.719]      // while-condition  =>  TRUE
[22:59:49.719]      // while "1"  (timeout="200")
[22:59:49.719]      // while-condition  =>  TRUE
[22:59:49.719]      // while "1"  (timeout="200")
[22:59:49.719]      // while-condition  =>  TRUE
[22:59:49.719]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.720]      // while-condition  =>  TRUE
[22:59:49.720]      // while "1"  (timeout="200")
[22:59:49.723]      // while-condition  =>  TRUE
[22:59:49.723]      // while "1"  (timeout="200")
[22:59:49.723]      // while  =>  TIMEOUT
[22:59:49.723]      // end while "1"
[22:59:49.723]    </control>
[22:59:49.723]    <control if="canReadPins" while="" timeout="0" info="">
[22:59:49.723]      // if-block "canReadPins"
[22:59:49.723]        // =>  TRUE
[22:59:49.724]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:59:49.724]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:59:49.724]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:59:49.724]        // while-condition  =>  FALSE
[22:59:49.724]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:59:49.724]      </control>
[22:59:49.724]      // end if-block "canReadPins"
[22:59:49.724]    </control>
[22:59:49.724]    <control if="!canReadPins" while="" timeout="0" info="">
[22:59:49.724]      // if-block "!canReadPins"
[22:59:49.724]        // =>  FALSE
[22:59:49.724]      // skip if-block "!canReadPins"
[22:59:49.728]    </control>
[22:59:49.728]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:59:49.728]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:59:49.728]        // =>  TRUE
[22:59:49.728]      <block atomic="false" info="">
[22:59:49.728]        WriteAP(0x00, 0x190008);
[22:59:49.729]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:59:49.729]        WriteAP(0xF0, 0x01);
[22:59:49.733]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:59:49.733]      </block>
[22:59:49.733]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:59:49.733]    </control>
[22:59:49.733]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:59:49.733]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:59:49.733]        // =>  FALSE
[22:59:49.733]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:59:49.733]    </control>
[22:59:49.733]    <block atomic="false" info="">
[22:59:49.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:59:49.738]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:59:49.738]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:59:49.738]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:59:49.740]      __ap = 0; //lets make sure we reset the access point selection
[22:59:49.740]        // -> [__ap <= 0x00000000]
[22:59:49.740]    </block>
[22:59:49.740]  </sequence>
[22:59:49.740]  
[22:59:49.762]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:59:49.762]  
[22:59:49.762]  <debugvars>
[22:59:49.762]    // Pre-defined
[22:59:49.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:59:49.762]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:59:49.762]    __dp=0x00000000
[22:59:49.762]    __ap=0x00000000
[22:59:49.762]    __traceout=0x00000000      (Trace Disabled)
[22:59:49.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:59:49.762]    __FlashAddr=0x00000000
[22:59:49.762]    __FlashLen=0x00000000
[22:59:49.762]    __FlashArg=0x00000000
[22:59:49.765]    __FlashOp=0x00000000
[22:59:49.765]    __Result=0x00000000
[22:59:49.765]  </debugvars>
[22:59:49.765]  
[22:59:49.765]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:59:49.765]    <block atomic="false" info="">
[22:59:49.765]      __var deviceID = 0;
[22:59:49.765]        // -> [deviceID <= 0x00000000]
[22:59:49.765]      __var version = 0;
[22:59:49.765]        // -> [version <= 0x00000000]
[22:59:49.765]      __var partNum = 0;
[22:59:49.765]        // -> [partNum <= 0x00000000]
[22:59:49.765]      __var manuf = 0;
[22:59:49.765]        // -> [manuf <= 0x00000000]
[22:59:49.765]      __var isMSPM0G1X0X_G3X0X = 0;
[22:59:49.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:59:49.765]      __var isProduction = 0;
[22:59:49.765]        // -> [isProduction <= 0x00000000]
[22:59:49.765]      __var continueId = 0;
[22:59:49.765]        // -> [continueId <= 0x00000000]
[22:59:49.765]      deviceID =   Read32(0x41C40004);
[22:59:49.769]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:59:49.769]        // -> [deviceID <= 0x2BB8802F]
[22:59:49.769]      version = deviceID >> 28;
[22:59:49.769]        // -> [version <= 0x00000002]
[22:59:49.769]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:59:49.773]        // -> [partNum <= 0x0000BB88]
[22:59:49.773]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:59:49.773]        // -> [manuf <= 0x00000017]
[22:59:49.773]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:59:49.773]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:59:49.773]      isProduction = (version > 0);
[22:59:49.773]        // -> [isProduction <= 0x00000001]
[22:59:49.773]    </block>
[22:59:49.773]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:59:49.773]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:59:49.774]        // =>  FALSE
[22:59:49.774]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:59:49.774]    </control>
[22:59:49.774]    <control if="continueId == 4" while="" timeout="0" info="">
[22:59:49.774]      // if-block "continueId == 4"
[22:59:49.775]        // =>  FALSE
[22:59:49.775]      // skip if-block "continueId == 4"
[22:59:49.775]    </control>
[22:59:49.775]    <control if="!isProduction" while="" timeout="0" info="">
[22:59:49.775]      // if-block "!isProduction"
[22:59:49.775]        // =>  FALSE
[22:59:49.775]      // skip if-block "!isProduction"
[22:59:49.775]    </control>
[22:59:49.775]  </sequence>
[22:59:49.775]  
[23:00:19.075]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:00:19.075]  
[23:00:19.084]  <debugvars>
[23:00:19.084]    // Pre-defined
[23:00:19.084]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:19.084]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:19.084]    __dp=0x00000000
[23:00:19.084]    __ap=0x00000000
[23:00:19.085]    __traceout=0x00000000      (Trace Disabled)
[23:00:19.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:19.085]    __FlashAddr=0x00000000
[23:00:19.085]    __FlashLen=0x00000000
[23:00:19.085]    __FlashArg=0x00000000
[23:00:19.085]    __FlashOp=0x00000000
[23:00:19.085]    __Result=0x00000000
[23:00:19.085]  </debugvars>
[23:00:19.085]  
[23:00:19.085]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:00:19.086]    <block atomic="false" info="">
[23:00:19.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:00:19.086]        // -> [isSWJ <= 0x00000001]
[23:00:19.087]      __var hasDormant = __protocol & 0x00020000;
[23:00:19.087]        // -> [hasDormant <= 0x00000000]
[23:00:19.087]      __var protType   = __protocol & 0x0000FFFF;
[23:00:19.087]        // -> [protType <= 0x00000002]
[23:00:19.087]    </block>
[23:00:19.087]    <control if="protType == 1" while="" timeout="0" info="">
[23:00:19.087]      // if-block "protType == 1"
[23:00:19.087]        // =>  FALSE
[23:00:19.087]      // skip if-block "protType == 1"
[23:00:19.087]    </control>
[23:00:19.087]    <control if="protType == 2" while="" timeout="0" info="">
[23:00:19.087]      // if-block "protType == 2"
[23:00:19.087]        // =>  TRUE
[23:00:19.087]      <control if="isSWJ" while="" timeout="0" info="">
[23:00:19.087]        // if-block "isSWJ"
[23:00:19.089]          // =>  TRUE
[23:00:19.089]        <control if="hasDormant" while="" timeout="0" info="">
[23:00:19.089]          // if-block "hasDormant"
[23:00:19.089]            // =>  FALSE
[23:00:19.089]          // skip if-block "hasDormant"
[23:00:19.089]        </control>
[23:00:19.089]        <control if="!hasDormant" while="" timeout="0" info="">
[23:00:19.089]          // if-block "!hasDormant"
[23:00:19.089]            // =>  TRUE
[23:00:19.090]          <block atomic="false" info="">
[23:00:19.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:00:19.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:19.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:00:19.100]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:00:19.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:00:19.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:19.102]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:00:19.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:00:19.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:00:19.114]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:19.114]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:00:19.114]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:00:19.114]          </block>
[23:00:19.114]          // end if-block "!hasDormant"
[23:00:19.114]        </control>
[23:00:19.114]        // end if-block "isSWJ"
[23:00:19.114]      </control>
[23:00:19.114]      <control if="!isSWJ" while="" timeout="0" info="">
[23:00:19.114]        // if-block "!isSWJ"
[23:00:19.118]          // =>  FALSE
[23:00:19.118]        // skip if-block "!isSWJ"
[23:00:19.118]      </control>
[23:00:19.118]      <block atomic="false" info="">
[23:00:19.118]        ReadDP(0x0);
[23:00:19.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:00:19.123]      </block>
[23:00:19.123]      // end if-block "protType == 2"
[23:00:19.123]    </control>
[23:00:19.123]  </sequence>
[23:00:19.123]  
[23:00:19.127]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:00:19.127]  
[23:00:19.127]  <debugvars>
[23:00:19.127]    // Pre-defined
[23:00:19.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:19.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:19.127]    __dp=0x00000000
[23:00:19.127]    __ap=0x00000000
[23:00:19.127]    __traceout=0x00000000      (Trace Disabled)
[23:00:19.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:19.127]    __FlashAddr=0x00000000
[23:00:19.127]    __FlashLen=0x00000000
[23:00:19.127]    __FlashArg=0x00000000
[23:00:19.127]    __FlashOp=0x00000000
[23:00:19.127]    __Result=0x00000000
[23:00:19.127]  </debugvars>
[23:00:19.127]  
[23:00:19.127]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:00:19.130]    <block atomic="false" info="">
[23:00:19.130]      __var SW_DP_ABORT       = 0x0;
[23:00:19.130]        // -> [SW_DP_ABORT <= 0x00000000]
[23:00:19.130]      __var DP_CTRL_STAT      = 0x4;
[23:00:19.130]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:00:19.130]      __var DP_SELECT         = 0x8;
[23:00:19.131]        // -> [DP_SELECT <= 0x00000008]
[23:00:19.131]      __var powered_down      = 0;
[23:00:19.131]        // -> [powered_down <= 0x00000000]
[23:00:19.131]      WriteDP(DP_SELECT, 0x00000000);
[23:00:19.140]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:00:19.140]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:00:19.146]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:00:19.146]        // -> [powered_down <= 0x00000001]
[23:00:19.146]    </block>
[23:00:19.146]    <control if="powered_down" while="" timeout="0" info="">
[23:00:19.146]      // if-block "powered_down"
[23:00:19.146]        // =>  TRUE
[23:00:19.146]      <block atomic="false" info="">
[23:00:19.146]        Message(0, "Debug/System power-up request sent");
[23:00:19.150]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:00:19.152]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:00:19.152]      </block>
[23:00:19.152]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:00:19.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:00:19.158]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:00:19.158]        // while-condition  =>  FALSE
[23:00:19.159]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:00:19.159]      </control>
[23:00:19.159]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:00:19.159]        // if-block "(__protocol & 0xFFFF) == 1"
[23:00:19.159]          // =>  FALSE
[23:00:19.159]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:00:19.159]      </control>
[23:00:19.159]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:00:19.159]        // if-block "(__protocol & 0xFFFF) == 2"
[23:00:19.160]          // =>  TRUE
[23:00:19.160]        <block atomic="false" info="">
[23:00:19.160]          Message(0, "executing SWD power up");
[23:00:19.162]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:00:19.178]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:00:19.178]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:00:19.186]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:00:19.186]        </block>
[23:00:19.188]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:00:19.188]      </control>
[23:00:19.188]      // end if-block "powered_down"
[23:00:19.188]    </control>
[23:00:19.188]    <block atomic="false" info="">
[23:00:19.188]      __var DEBUG_PORT_VAL    = 0;
[23:00:19.188]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:00:19.188]      __var ACCESS_POINT_VAL  = 0;
[23:00:19.188]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:00:19.188]      __ap = 1; 
[23:00:19.188]        // -> [__ap <= 0x00000001]
[23:00:19.188]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:00:19.196]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:00:19.196]      __ap = 4;
[23:00:19.196]        // -> [__ap <= 0x00000004]
[23:00:19.196]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:19.202]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:00:19.202]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:00:19.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:19.204]    </block>
[23:00:19.204]    <block atomic="false" info="">
[23:00:19.204]      __var nReset = 0x80;
[23:00:19.204]        // -> [nReset <= 0x00000080]
[23:00:19.204]      __var canReadPins = 0;
[23:00:19.204]        // -> [canReadPins <= 0x00000000]
[23:00:19.204]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:00:19.211]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:00:19.211]        // -> [canReadPins <= 0x00000001]
[23:00:19.211]    </block>
[23:00:19.211]    <control if="" while="1" timeout="200" info="">
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.211]      // while-condition  =>  TRUE
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.211]      // while-condition  =>  TRUE
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.211]      // while-condition  =>  TRUE
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.211]      // while-condition  =>  TRUE
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.211]      // while-condition  =>  TRUE
[23:00:19.211]      // while "1"  (timeout="200")
[23:00:19.214]      // while-condition  =>  TRUE
[23:00:19.214]      // while "1"  (timeout="200")
[23:00:19.214]      // while-condition  =>  TRUE
[23:00:19.214]      // while "1"  (timeout="200")
[23:00:19.214]      // while-condition  =>  TRUE
[23:00:19.214]      // while "1"  (timeout="200")
[23:00:19.214]      // while-condition  =>  TRUE
[23:00:19.214]      // while "1"  (timeout="200")
[23:00:19.215]      // while-condition  =>  TRUE
[23:00:19.215]      // while "1"  (timeout="200")
[23:00:19.215]      // while-condition  =>  TRUE
[23:00:19.215]      // while "1"  (timeout="200")
[23:00:19.215]      // while-condition  =>  TRUE
[23:00:19.215]      // while "1"  (timeout="200")
[23:00:19.215]      // while-condition  =>  TRUE
[23:00:19.215]      // while "1"  (timeout="200")
[23:00:19.215]      // while-condition  =>  TRUE
[23:00:19.216]      // while "1"  (timeout="200")
[23:00:19.216]      // while-condition  =>  TRUE
[23:00:19.216]      // while "1"  (timeout="200")
[23:00:19.216]      // while-condition  =>  TRUE
[23:00:19.216]      // while "1"  (timeout="200")
[23:00:19.216]      // while-condition  =>  TRUE
[23:00:19.216]      // while "1"  (timeout="200")
[23:00:19.217]      // while-condition  =>  TRUE
[23:00:19.217]      // while "1"  (timeout="200")
[23:00:19.217]      // while-condition  =>  TRUE
[23:00:19.217]      // while "1"  (timeout="200")
[23:00:19.217]      // while-condition  =>  TRUE
[23:00:19.217]      // while "1"  (timeout="200")
[23:00:19.217]      // while-condition  =>  TRUE
[23:00:19.217]      // while "1"  (timeout="200")
[23:00:19.217]      // while-condition  =>  TRUE
[23:00:19.217]      // while "1"  (timeout="200")
[23:00:19.218]      // while-condition  =>  TRUE
[23:00:19.218]      // while "1"  (timeout="200")
[23:00:19.218]      // while-condition  =>  TRUE
[23:00:19.218]      // while "1"  (timeout="200")
[23:00:19.218]      // while-condition  =>  TRUE
[23:00:19.218]      // while "1"  (timeout="200")
[23:00:19.218]      // while-condition  =>  TRUE
[23:00:19.218]      // while "1"  (timeout="200")
[23:00:19.218]      // while-condition  =>  TRUE
[23:00:19.218]      // while "1"  (timeout="200")
[23:00:19.219]      // while-condition  =>  TRUE
[23:00:19.219]      // while "1"  (timeout="200")
[23:00:19.219]      // while-condition  =>  TRUE
[23:00:19.219]      // while "1"  (timeout="200")
[23:00:19.219]      // while-condition  =>  TRUE
[23:00:19.219]      // while "1"  (timeout="200")
[23:00:19.219]      // while-condition  =>  TRUE
[23:00:19.219]      // while "1"  (timeout="200")
[23:00:19.220]      // while-condition  =>  TRUE
[23:00:19.220]      // while "1"  (timeout="200")
[23:00:19.220]      // while-condition  =>  TRUE
[23:00:19.220]      // while "1"  (timeout="200")
[23:00:19.220]      // while-condition  =>  TRUE
[23:00:19.220]      // while "1"  (timeout="200")
[23:00:19.220]      // while-condition  =>  TRUE
[23:00:19.220]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.221]      // while "1"  (timeout="200")
[23:00:19.221]      // while-condition  =>  TRUE
[23:00:19.223]      // while "1"  (timeout="200")
[23:00:19.223]      // while  =>  TIMEOUT
[23:00:19.223]      // end while "1"
[23:00:19.223]    </control>
[23:00:19.223]    <control if="canReadPins" while="" timeout="0" info="">
[23:00:19.223]      // if-block "canReadPins"
[23:00:19.223]        // =>  TRUE
[23:00:19.223]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:00:19.223]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:00:19.228]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:00:19.228]        // while-condition  =>  FALSE
[23:00:19.228]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:00:19.228]      </control>
[23:00:19.228]      // end if-block "canReadPins"
[23:00:19.230]    </control>
[23:00:19.230]    <control if="!canReadPins" while="" timeout="0" info="">
[23:00:19.230]      // if-block "!canReadPins"
[23:00:19.230]        // =>  FALSE
[23:00:19.230]      // skip if-block "!canReadPins"
[23:00:19.230]    </control>
[23:00:19.230]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:00:19.230]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:19.230]        // =>  TRUE
[23:00:19.230]      <block atomic="false" info="">
[23:00:19.230]        WriteAP(0x00, 0x190008);
[23:00:19.232]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:19.232]        WriteAP(0xF0, 0x01);
[23:00:19.236]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:19.236]      </block>
[23:00:19.236]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:19.236]    </control>
[23:00:19.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:00:19.239]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:19.239]        // =>  FALSE
[23:00:19.239]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:19.239]    </control>
[23:00:19.239]    <block atomic="false" info="">
[23:00:19.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:19.246]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:00:19.246]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:00:19.246]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:19.247]      __ap = 0; //lets make sure we reset the access point selection
[23:00:19.247]        // -> [__ap <= 0x00000000]
[23:00:19.247]    </block>
[23:00:19.247]  </sequence>
[23:00:19.247]  
[23:00:19.320]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:00:19.320]  
[23:00:19.320]  <debugvars>
[23:00:19.320]    // Pre-defined
[23:00:19.320]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:19.320]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:19.320]    __dp=0x00000000
[23:00:19.320]    __ap=0x00000000
[23:00:19.320]    __traceout=0x00000000      (Trace Disabled)
[23:00:19.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:19.320]    __FlashAddr=0x00000000
[23:00:19.320]    __FlashLen=0x00000000
[23:00:19.320]    __FlashArg=0x00000000
[23:00:19.320]    __FlashOp=0x00000000
[23:00:19.320]    __Result=0x00000000
[23:00:19.320]  </debugvars>
[23:00:19.320]  
[23:00:19.320]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:00:19.320]    <block atomic="false" info="">
[23:00:19.320]      __var deviceID = 0;
[23:00:19.324]        // -> [deviceID <= 0x00000000]
[23:00:19.324]      __var version = 0;
[23:00:19.324]        // -> [version <= 0x00000000]
[23:00:19.324]      __var partNum = 0;
[23:00:19.324]        // -> [partNum <= 0x00000000]
[23:00:19.324]      __var manuf = 0;
[23:00:19.324]        // -> [manuf <= 0x00000000]
[23:00:19.324]      __var isMSPM0G1X0X_G3X0X = 0;
[23:00:19.324]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:00:19.324]      __var isProduction = 0;
[23:00:19.325]        // -> [isProduction <= 0x00000000]
[23:00:19.325]      __var continueId = 0;
[23:00:19.325]        // -> [continueId <= 0x00000000]
[23:00:19.325]      deviceID =   Read32(0x41C40004);
[23:00:19.350]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:00:19.350]        // -> [deviceID <= 0x2BB8802F]
[23:00:19.350]      version = deviceID >> 28;
[23:00:19.350]        // -> [version <= 0x00000002]
[23:00:19.350]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:00:19.350]        // -> [partNum <= 0x0000BB88]
[23:00:19.350]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:00:19.350]        // -> [manuf <= 0x00000017]
[23:00:19.350]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:00:19.350]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:00:19.350]      isProduction = (version > 0);
[23:00:19.350]        // -> [isProduction <= 0x00000001]
[23:00:19.353]    </block>
[23:00:19.353]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:00:19.353]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:00:19.353]        // =>  FALSE
[23:00:19.353]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:00:19.353]    </control>
[23:00:19.353]    <control if="continueId == 4" while="" timeout="0" info="">
[23:00:19.353]      // if-block "continueId == 4"
[23:00:19.353]        // =>  FALSE
[23:00:19.353]      // skip if-block "continueId == 4"
[23:00:19.354]    </control>
[23:00:19.354]    <control if="!isProduction" while="" timeout="0" info="">
[23:00:19.354]      // if-block "!isProduction"
[23:00:19.354]        // =>  FALSE
[23:00:19.354]      // skip if-block "!isProduction"
[23:00:19.354]    </control>
[23:00:19.354]  </sequence>
[23:00:19.354]  
[23:00:27.648]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:00:27.648]  
[23:00:27.657]  <debugvars>
[23:00:27.657]    // Pre-defined
[23:00:27.657]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:27.657]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:27.657]    __dp=0x00000000
[23:00:27.657]    __ap=0x00000000
[23:00:27.657]    __traceout=0x00000000      (Trace Disabled)
[23:00:27.657]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:27.657]    __FlashAddr=0x00000000
[23:00:27.657]    __FlashLen=0x00000000
[23:00:27.657]    __FlashArg=0x00000000
[23:00:27.657]    __FlashOp=0x00000000
[23:00:27.657]    __Result=0x00000000
[23:00:27.657]  </debugvars>
[23:00:27.657]  
[23:00:27.657]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:00:27.657]    <block atomic="false" info="">
[23:00:27.657]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:00:27.657]        // -> [isSWJ <= 0x00000001]
[23:00:27.657]      __var hasDormant = __protocol & 0x00020000;
[23:00:27.657]        // -> [hasDormant <= 0x00000000]
[23:00:27.657]      __var protType   = __protocol & 0x0000FFFF;
[23:00:27.657]        // -> [protType <= 0x00000002]
[23:00:27.657]    </block>
[23:00:27.657]    <control if="protType == 1" while="" timeout="0" info="">
[23:00:27.657]      // if-block "protType == 1"
[23:00:27.660]        // =>  FALSE
[23:00:27.660]      // skip if-block "protType == 1"
[23:00:27.660]    </control>
[23:00:27.660]    <control if="protType == 2" while="" timeout="0" info="">
[23:00:27.660]      // if-block "protType == 2"
[23:00:27.660]        // =>  TRUE
[23:00:27.660]      <control if="isSWJ" while="" timeout="0" info="">
[23:00:27.660]        // if-block "isSWJ"
[23:00:27.660]          // =>  TRUE
[23:00:27.660]        <control if="hasDormant" while="" timeout="0" info="">
[23:00:27.660]          // if-block "hasDormant"
[23:00:27.660]            // =>  FALSE
[23:00:27.660]          // skip if-block "hasDormant"
[23:00:27.660]        </control>
[23:00:27.660]        <control if="!hasDormant" while="" timeout="0" info="">
[23:00:27.660]          // if-block "!hasDormant"
[23:00:27.662]            // =>  TRUE
[23:00:27.662]          <block atomic="false" info="">
[23:00:27.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:00:27.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:27.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:00:27.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:00:27.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:00:27.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:27.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:00:27.685]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:00:27.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:00:27.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:27.695]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:00:27.695]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:00:27.695]          </block>
[23:00:27.695]          // end if-block "!hasDormant"
[23:00:27.697]        </control>
[23:00:27.697]        // end if-block "isSWJ"
[23:00:27.697]      </control>
[23:00:27.697]      <control if="!isSWJ" while="" timeout="0" info="">
[23:00:27.697]        // if-block "!isSWJ"
[23:00:27.697]          // =>  FALSE
[23:00:27.697]        // skip if-block "!isSWJ"
[23:00:27.697]      </control>
[23:00:27.697]      <block atomic="false" info="">
[23:00:27.697]        ReadDP(0x0);
[23:00:27.700]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:00:27.700]      </block>
[23:00:27.700]      // end if-block "protType == 2"
[23:00:27.700]    </control>
[23:00:27.702]  </sequence>
[23:00:27.702]  
[23:00:27.706]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:00:27.706]  
[23:00:27.706]  <debugvars>
[23:00:27.706]    // Pre-defined
[23:00:27.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:27.706]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:27.706]    __dp=0x00000000
[23:00:27.706]    __ap=0x00000000
[23:00:27.706]    __traceout=0x00000000      (Trace Disabled)
[23:00:27.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:27.706]    __FlashAddr=0x00000000
[23:00:27.706]    __FlashLen=0x00000000
[23:00:27.706]    __FlashArg=0x00000000
[23:00:27.706]    __FlashOp=0x00000000
[23:00:27.706]    __Result=0x00000000
[23:00:27.706]  </debugvars>
[23:00:27.706]  
[23:00:27.706]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:00:27.706]    <block atomic="false" info="">
[23:00:27.706]      __var SW_DP_ABORT       = 0x0;
[23:00:27.706]        // -> [SW_DP_ABORT <= 0x00000000]
[23:00:27.706]      __var DP_CTRL_STAT      = 0x4;
[23:00:27.706]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:00:27.706]      __var DP_SELECT         = 0x8;
[23:00:27.706]        // -> [DP_SELECT <= 0x00000008]
[23:00:27.706]      __var powered_down      = 0;
[23:00:27.706]        // -> [powered_down <= 0x00000000]
[23:00:27.706]      WriteDP(DP_SELECT, 0x00000000);
[23:00:27.715]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:00:27.715]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:00:27.720]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:00:27.720]        // -> [powered_down <= 0x00000001]
[23:00:27.720]    </block>
[23:00:27.720]    <control if="powered_down" while="" timeout="0" info="">
[23:00:27.720]      // if-block "powered_down"
[23:00:27.720]        // =>  TRUE
[23:00:27.720]      <block atomic="false" info="">
[23:00:27.720]        Message(0, "Debug/System power-up request sent");
[23:00:27.723]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:00:27.729]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:00:27.729]      </block>
[23:00:27.729]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:00:27.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:00:27.731]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:00:27.731]        // while-condition  =>  FALSE
[23:00:27.731]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:00:27.732]      </control>
[23:00:27.732]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:00:27.732]        // if-block "(__protocol & 0xFFFF) == 1"
[23:00:27.732]          // =>  FALSE
[23:00:27.732]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:00:27.732]      </control>
[23:00:27.732]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:00:27.732]        // if-block "(__protocol & 0xFFFF) == 2"
[23:00:27.732]          // =>  TRUE
[23:00:27.732]        <block atomic="false" info="">
[23:00:27.732]          Message(0, "executing SWD power up");
[23:00:27.734]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:00:27.744]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:00:27.744]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:00:27.750]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:00:27.750]        </block>
[23:00:27.750]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:00:27.750]      </control>
[23:00:27.750]      // end if-block "powered_down"
[23:00:27.750]    </control>
[23:00:27.750]    <block atomic="false" info="">
[23:00:27.750]      __var DEBUG_PORT_VAL    = 0;
[23:00:27.750]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:00:27.750]      __var ACCESS_POINT_VAL  = 0;
[23:00:27.750]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:00:27.750]      __ap = 1; 
[23:00:27.752]        // -> [__ap <= 0x00000001]
[23:00:27.752]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:00:27.760]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:00:27.760]      __ap = 4;
[23:00:27.760]        // -> [__ap <= 0x00000004]
[23:00:27.760]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:27.770]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:00:27.770]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:00:27.772]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:27.772]    </block>
[23:00:27.772]    <block atomic="false" info="">
[23:00:27.772]      __var nReset = 0x80;
[23:00:27.772]        // -> [nReset <= 0x00000080]
[23:00:27.772]      __var canReadPins = 0;
[23:00:27.772]        // -> [canReadPins <= 0x00000000]
[23:00:27.772]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:00:27.788]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:00:27.788]        // -> [canReadPins <= 0x00000001]
[23:00:27.788]    </block>
[23:00:27.788]    <control if="" while="1" timeout="200" info="">
[23:00:27.788]      // while "1"  (timeout="200")
[23:00:27.788]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.790]      // while-condition  =>  TRUE
[23:00:27.790]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.792]      // while "1"  (timeout="200")
[23:00:27.792]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.794]      // while "1"  (timeout="200")
[23:00:27.794]      // while-condition  =>  TRUE
[23:00:27.796]      // while "1"  (timeout="200")
[23:00:27.796]      // while-condition  =>  TRUE
[23:00:27.796]      // while "1"  (timeout="200")
[23:00:27.796]      // while-condition  =>  TRUE
[23:00:27.796]      // while "1"  (timeout="200")
[23:00:27.796]      // while-condition  =>  TRUE
[23:00:27.796]      // while "1"  (timeout="200")
[23:00:27.796]      // while-condition  =>  TRUE
[23:00:27.797]      // while "1"  (timeout="200")
[23:00:27.797]      // while-condition  =>  TRUE
[23:00:27.797]      // while "1"  (timeout="200")
[23:00:27.797]      // while-condition  =>  TRUE
[23:00:27.797]      // while "1"  (timeout="200")
[23:00:27.797]      // while-condition  =>  TRUE
[23:00:27.797]      // while "1"  (timeout="200")
[23:00:27.797]      // while-condition  =>  TRUE
[23:00:27.797]      // while "1"  (timeout="200")
[23:00:27.797]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.798]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.798]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.798]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.798]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.798]      // while-condition  =>  TRUE
[23:00:27.798]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.800]      // while-condition  =>  TRUE
[23:00:27.800]      // while "1"  (timeout="200")
[23:00:27.802]      // while-condition  =>  TRUE
[23:00:27.802]      // while "1"  (timeout="200")
[23:00:27.802]      // while  =>  TIMEOUT
[23:00:27.802]      // end while "1"
[23:00:27.802]    </control>
[23:00:27.802]    <control if="canReadPins" while="" timeout="0" info="">
[23:00:27.802]      // if-block "canReadPins"
[23:00:27.802]        // =>  TRUE
[23:00:27.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:00:27.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:00:27.804]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:00:27.804]        // while-condition  =>  FALSE
[23:00:27.805]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:00:27.805]      </control>
[23:00:27.805]      // end if-block "canReadPins"
[23:00:27.805]    </control>
[23:00:27.805]    <control if="!canReadPins" while="" timeout="0" info="">
[23:00:27.805]      // if-block "!canReadPins"
[23:00:27.805]        // =>  FALSE
[23:00:27.805]      // skip if-block "!canReadPins"
[23:00:27.807]    </control>
[23:00:27.807]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:00:27.807]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:27.807]        // =>  TRUE
[23:00:27.807]      <block atomic="false" info="">
[23:00:27.807]        WriteAP(0x00, 0x190008);
[23:00:27.812]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:27.812]        WriteAP(0xF0, 0x01);
[23:00:27.825]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:27.825]      </block>
[23:00:27.825]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:27.825]    </control>
[23:00:27.825]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:00:27.825]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:27.825]        // =>  FALSE
[23:00:27.825]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:27.825]    </control>
[23:00:27.825]    <block atomic="false" info="">
[23:00:27.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:27.831]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:00:27.831]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:00:27.833]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:27.834]      __ap = 0; //lets make sure we reset the access point selection
[23:00:27.834]        // -> [__ap <= 0x00000000]
[23:00:27.834]    </block>
[23:00:27.834]  </sequence>
[23:00:27.834]  
[23:00:27.918]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:00:27.918]  
[23:00:27.919]  <debugvars>
[23:00:27.919]    // Pre-defined
[23:00:27.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:27.919]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:27.919]    __dp=0x00000000
[23:00:27.919]    __ap=0x00000000
[23:00:27.920]    __traceout=0x00000000      (Trace Disabled)
[23:00:27.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:27.920]    __FlashAddr=0x00000000
[23:00:27.920]    __FlashLen=0x00000000
[23:00:27.920]    __FlashArg=0x00000000
[23:00:27.920]    __FlashOp=0x00000000
[23:00:27.920]    __Result=0x00000000
[23:00:27.920]  </debugvars>
[23:00:27.920]  
[23:00:27.920]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:00:27.920]    <block atomic="false" info="">
[23:00:27.920]      __var deviceID = 0;
[23:00:27.920]        // -> [deviceID <= 0x00000000]
[23:00:27.922]      __var version = 0;
[23:00:27.922]        // -> [version <= 0x00000000]
[23:00:27.922]      __var partNum = 0;
[23:00:27.922]        // -> [partNum <= 0x00000000]
[23:00:27.922]      __var manuf = 0;
[23:00:27.922]        // -> [manuf <= 0x00000000]
[23:00:27.922]      __var isMSPM0G1X0X_G3X0X = 0;
[23:00:27.922]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:00:27.922]      __var isProduction = 0;
[23:00:27.923]        // -> [isProduction <= 0x00000000]
[23:00:27.923]      __var continueId = 0;
[23:00:27.923]        // -> [continueId <= 0x00000000]
[23:00:27.923]      deviceID =   Read32(0x41C40004);
[23:00:27.954]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:00:27.954]        // -> [deviceID <= 0x2BB8802F]
[23:00:27.954]      version = deviceID >> 28;
[23:00:27.954]        // -> [version <= 0x00000002]
[23:00:27.954]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:00:27.954]        // -> [partNum <= 0x0000BB88]
[23:00:27.954]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:00:27.954]        // -> [manuf <= 0x00000017]
[23:00:27.954]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:00:27.954]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:00:27.954]      isProduction = (version > 0);
[23:00:27.954]        // -> [isProduction <= 0x00000001]
[23:00:27.954]    </block>
[23:00:27.954]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:00:27.954]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:00:27.954]        // =>  FALSE
[23:00:27.954]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:00:27.954]    </control>
[23:00:27.954]    <control if="continueId == 4" while="" timeout="0" info="">
[23:00:27.954]      // if-block "continueId == 4"
[23:00:27.954]        // =>  FALSE
[23:00:27.954]      // skip if-block "continueId == 4"
[23:00:27.954]    </control>
[23:00:27.958]    <control if="!isProduction" while="" timeout="0" info="">
[23:00:27.958]      // if-block "!isProduction"
[23:00:27.958]        // =>  FALSE
[23:00:27.958]      // skip if-block "!isProduction"
[23:00:27.958]    </control>
[23:00:27.958]  </sequence>
[23:00:27.958]  
[23:00:44.397]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:00:44.397]  
[23:00:44.406]  <debugvars>
[23:00:44.406]    // Pre-defined
[23:00:44.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:44.406]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:44.406]    __dp=0x00000000
[23:00:44.406]    __ap=0x00000000
[23:00:44.406]    __traceout=0x00000000      (Trace Disabled)
[23:00:44.406]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:44.406]    __FlashAddr=0x00000000
[23:00:44.406]    __FlashLen=0x00000000
[23:00:44.406]    __FlashArg=0x00000000
[23:00:44.406]    __FlashOp=0x00000000
[23:00:44.406]    __Result=0x00000000
[23:00:44.406]  </debugvars>
[23:00:44.406]  
[23:00:44.408]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:00:44.408]    <block atomic="false" info="">
[23:00:44.408]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:00:44.408]        // -> [isSWJ <= 0x00000001]
[23:00:44.408]      __var hasDormant = __protocol & 0x00020000;
[23:00:44.408]        // -> [hasDormant <= 0x00000000]
[23:00:44.408]      __var protType   = __protocol & 0x0000FFFF;
[23:00:44.408]        // -> [protType <= 0x00000002]
[23:00:44.408]    </block>
[23:00:44.408]    <control if="protType == 1" while="" timeout="0" info="">
[23:00:44.408]      // if-block "protType == 1"
[23:00:44.408]        // =>  FALSE
[23:00:44.408]      // skip if-block "protType == 1"
[23:00:44.408]    </control>
[23:00:44.408]    <control if="protType == 2" while="" timeout="0" info="">
[23:00:44.408]      // if-block "protType == 2"
[23:00:44.408]        // =>  TRUE
[23:00:44.408]      <control if="isSWJ" while="" timeout="0" info="">
[23:00:44.410]        // if-block "isSWJ"
[23:00:44.410]          // =>  TRUE
[23:00:44.410]        <control if="hasDormant" while="" timeout="0" info="">
[23:00:44.410]          // if-block "hasDormant"
[23:00:44.410]            // =>  FALSE
[23:00:44.410]          // skip if-block "hasDormant"
[23:00:44.410]        </control>
[23:00:44.410]        <control if="!hasDormant" while="" timeout="0" info="">
[23:00:44.410]          // if-block "!hasDormant"
[23:00:44.410]            // =>  TRUE
[23:00:44.410]          <block atomic="false" info="">
[23:00:44.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:00:44.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:44.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:00:44.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:00:44.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:00:44.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:44.422]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:00:44.425]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:00:44.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:00:44.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:44.429]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:00:44.431]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:00:44.431]          </block>
[23:00:44.431]          // end if-block "!hasDormant"
[23:00:44.431]        </control>
[23:00:44.431]        // end if-block "isSWJ"
[23:00:44.431]      </control>
[23:00:44.431]      <control if="!isSWJ" while="" timeout="0" info="">
[23:00:44.431]        // if-block "!isSWJ"
[23:00:44.431]          // =>  FALSE
[23:00:44.431]        // skip if-block "!isSWJ"
[23:00:44.431]      </control>
[23:00:44.431]      <block atomic="false" info="">
[23:00:44.431]        ReadDP(0x0);
[23:00:44.435]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:00:44.435]      </block>
[23:00:44.435]      // end if-block "protType == 2"
[23:00:44.435]    </control>
[23:00:44.435]  </sequence>
[23:00:44.435]  
[23:00:44.441]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:00:44.441]  
[23:00:44.441]  <debugvars>
[23:00:44.441]    // Pre-defined
[23:00:44.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:44.441]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:44.441]    __dp=0x00000000
[23:00:44.441]    __ap=0x00000000
[23:00:44.441]    __traceout=0x00000000      (Trace Disabled)
[23:00:44.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:44.441]    __FlashAddr=0x00000000
[23:00:44.441]    __FlashLen=0x00000000
[23:00:44.441]    __FlashArg=0x00000000
[23:00:44.441]    __FlashOp=0x00000000
[23:00:44.441]    __Result=0x00000000
[23:00:44.441]  </debugvars>
[23:00:44.441]  
[23:00:44.441]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:00:44.445]    <block atomic="false" info="">
[23:00:44.445]      __var SW_DP_ABORT       = 0x0;
[23:00:44.445]        // -> [SW_DP_ABORT <= 0x00000000]
[23:00:44.445]      __var DP_CTRL_STAT      = 0x4;
[23:00:44.445]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:00:44.445]      __var DP_SELECT         = 0x8;
[23:00:44.445]        // -> [DP_SELECT <= 0x00000008]
[23:00:44.445]      __var powered_down      = 0;
[23:00:44.445]        // -> [powered_down <= 0x00000000]
[23:00:44.445]      WriteDP(DP_SELECT, 0x00000000);
[23:00:44.448]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:00:44.448]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:00:44.449]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:00:44.449]        // -> [powered_down <= 0x00000001]
[23:00:44.449]    </block>
[23:00:44.449]    <control if="powered_down" while="" timeout="0" info="">
[23:00:44.449]      // if-block "powered_down"
[23:00:44.451]        // =>  TRUE
[23:00:44.451]      <block atomic="false" info="">
[23:00:44.451]        Message(0, "Debug/System power-up request sent");
[23:00:44.452]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:00:44.453]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:00:44.453]      </block>
[23:00:44.453]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:00:44.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:00:44.459]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:00:44.459]        // while-condition  =>  FALSE
[23:00:44.459]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:00:44.459]      </control>
[23:00:44.459]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:00:44.459]        // if-block "(__protocol & 0xFFFF) == 1"
[23:00:44.459]          // =>  FALSE
[23:00:44.459]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:00:44.459]      </control>
[23:00:44.461]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:00:44.461]        // if-block "(__protocol & 0xFFFF) == 2"
[23:00:44.461]          // =>  TRUE
[23:00:44.461]        <block atomic="false" info="">
[23:00:44.461]          Message(0, "executing SWD power up");
[23:00:44.464]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:00:44.471]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:00:44.471]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:00:44.474]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:00:44.474]        </block>
[23:00:44.474]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:00:44.474]      </control>
[23:00:44.474]      // end if-block "powered_down"
[23:00:44.474]    </control>
[23:00:44.474]    <block atomic="false" info="">
[23:00:44.474]      __var DEBUG_PORT_VAL    = 0;
[23:00:44.474]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:00:44.474]      __var ACCESS_POINT_VAL  = 0;
[23:00:44.474]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:00:44.474]      __ap = 1; 
[23:00:44.474]        // -> [__ap <= 0x00000001]
[23:00:44.474]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:00:44.482]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:00:44.482]      __ap = 4;
[23:00:44.482]        // -> [__ap <= 0x00000004]
[23:00:44.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:44.486]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:00:44.486]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:00:44.486]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:44.486]    </block>
[23:00:44.486]    <block atomic="false" info="">
[23:00:44.486]      __var nReset = 0x80;
[23:00:44.486]        // -> [nReset <= 0x00000080]
[23:00:44.486]      __var canReadPins = 0;
[23:00:44.486]        // -> [canReadPins <= 0x00000000]
[23:00:44.490]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:00:44.490]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:00:44.490]        // -> [canReadPins <= 0x00000001]
[23:00:44.490]    </block>
[23:00:44.490]    <control if="" while="1" timeout="200" info="">
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.490]      // while "1"  (timeout="200")
[23:00:44.490]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.494]      // while-condition  =>  TRUE
[23:00:44.494]      // while "1"  (timeout="200")
[23:00:44.498]      // while-condition  =>  TRUE
[23:00:44.498]      // while "1"  (timeout="200")
[23:00:44.498]      // while-condition  =>  TRUE
[23:00:44.498]      // while "1"  (timeout="200")
[23:00:44.499]      // while-condition  =>  TRUE
[23:00:44.499]      // while "1"  (timeout="200")
[23:00:44.499]      // while-condition  =>  TRUE
[23:00:44.499]      // while "1"  (timeout="200")
[23:00:44.499]      // while-condition  =>  TRUE
[23:00:44.499]      // while "1"  (timeout="200")
[23:00:44.499]      // while-condition  =>  TRUE
[23:00:44.499]      // while "1"  (timeout="200")
[23:00:44.500]      // while-condition  =>  TRUE
[23:00:44.500]      // while "1"  (timeout="200")
[23:00:44.500]      // while-condition  =>  TRUE
[23:00:44.500]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.501]      // while-condition  =>  TRUE
[23:00:44.501]      // while "1"  (timeout="200")
[23:00:44.503]      // while-condition  =>  TRUE
[23:00:44.503]      // while "1"  (timeout="200")
[23:00:44.503]      // while-condition  =>  TRUE
[23:00:44.503]      // while "1"  (timeout="200")
[23:00:44.503]      // while-condition  =>  TRUE
[23:00:44.503]      // while "1"  (timeout="200")
[23:00:44.503]      // while-condition  =>  TRUE
[23:00:44.503]      // while "1"  (timeout="200")
[23:00:44.504]      // while-condition  =>  TRUE
[23:00:44.504]      // while "1"  (timeout="200")
[23:00:44.504]      // while  =>  TIMEOUT
[23:00:44.504]      // end while "1"
[23:00:44.504]    </control>
[23:00:44.504]    <control if="canReadPins" while="" timeout="0" info="">
[23:00:44.504]      // if-block "canReadPins"
[23:00:44.504]        // =>  TRUE
[23:00:44.504]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:00:44.504]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:00:44.512]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:00:44.512]        // while-condition  =>  FALSE
[23:00:44.512]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:00:44.512]      </control>
[23:00:44.512]      // end if-block "canReadPins"
[23:00:44.512]    </control>
[23:00:44.512]    <control if="!canReadPins" while="" timeout="0" info="">
[23:00:44.512]      // if-block "!canReadPins"
[23:00:44.512]        // =>  FALSE
[23:00:44.512]      // skip if-block "!canReadPins"
[23:00:44.512]    </control>
[23:00:44.512]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:00:44.512]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:44.512]        // =>  TRUE
[23:00:44.512]      <block atomic="false" info="">
[23:00:44.512]        WriteAP(0x00, 0x190008);
[23:00:44.515]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:44.515]        WriteAP(0xF0, 0x01);
[23:00:44.521]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:44.521]      </block>
[23:00:44.521]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:44.521]    </control>
[23:00:44.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:00:44.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:44.523]        // =>  FALSE
[23:00:44.523]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:44.523]    </control>
[23:00:44.523]    <block atomic="false" info="">
[23:00:44.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:44.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:00:44.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:00:44.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:44.530]      __ap = 0; //lets make sure we reset the access point selection
[23:00:44.530]        // -> [__ap <= 0x00000000]
[23:00:44.530]    </block>
[23:00:44.531]  </sequence>
[23:00:44.531]  
[23:00:44.564]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:00:44.564]  
[23:00:44.564]  <debugvars>
[23:00:44.564]    // Pre-defined
[23:00:44.564]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:44.564]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:00:44.564]    __dp=0x00000000
[23:00:44.564]    __ap=0x00000000
[23:00:44.564]    __traceout=0x00000000      (Trace Disabled)
[23:00:44.564]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:44.566]    __FlashAddr=0x00000000
[23:00:44.566]    __FlashLen=0x00000000
[23:00:44.566]    __FlashArg=0x00000000
[23:00:44.566]    __FlashOp=0x00000000
[23:00:44.566]    __Result=0x00000000
[23:00:44.566]  </debugvars>
[23:00:44.566]  
[23:00:44.566]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:00:44.566]    <block atomic="false" info="">
[23:00:44.566]      __var deviceID = 0;
[23:00:44.566]        // -> [deviceID <= 0x00000000]
[23:00:44.566]      __var version = 0;
[23:00:44.566]        // -> [version <= 0x00000000]
[23:00:44.566]      __var partNum = 0;
[23:00:44.567]        // -> [partNum <= 0x00000000]
[23:00:44.567]      __var manuf = 0;
[23:00:44.567]        // -> [manuf <= 0x00000000]
[23:00:44.567]      __var isMSPM0G1X0X_G3X0X = 0;
[23:00:44.567]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:00:44.567]      __var isProduction = 0;
[23:00:44.568]        // -> [isProduction <= 0x00000000]
[23:00:44.568]      __var continueId = 0;
[23:00:44.568]        // -> [continueId <= 0x00000000]
[23:00:44.568]      deviceID =   Read32(0x41C40004);
[23:00:44.574]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:00:44.574]        // -> [deviceID <= 0x2BB8802F]
[23:00:44.574]      version = deviceID >> 28;
[23:00:44.574]        // -> [version <= 0x00000002]
[23:00:44.574]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:00:44.574]        // -> [partNum <= 0x0000BB88]
[23:00:44.574]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:00:44.574]        // -> [manuf <= 0x00000017]
[23:00:44.574]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:00:44.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:00:44.574]      isProduction = (version > 0);
[23:00:44.574]        // -> [isProduction <= 0x00000001]
[23:00:44.574]    </block>
[23:00:44.574]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:00:44.574]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:00:44.574]        // =>  FALSE
[23:00:44.574]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:00:44.576]    </control>
[23:00:44.576]    <control if="continueId == 4" while="" timeout="0" info="">
[23:00:44.576]      // if-block "continueId == 4"
[23:00:44.576]        // =>  FALSE
[23:00:44.576]      // skip if-block "continueId == 4"
[23:00:44.576]    </control>
[23:00:44.576]    <control if="!isProduction" while="" timeout="0" info="">
[23:00:44.576]      // if-block "!isProduction"
[23:00:44.576]        // =>  FALSE
[23:00:44.576]      // skip if-block "!isProduction"
[23:00:44.577]    </control>
[23:00:44.577]  </sequence>
[23:00:44.577]  
[23:07:04.795]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:07:04.795]  
[23:07:04.795]  <debugvars>
[23:07:04.795]    // Pre-defined
[23:07:04.795]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:07:04.795]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:07:04.798]    __dp=0x00000000
[23:07:04.798]    __ap=0x00000000
[23:07:04.798]    __traceout=0x00000000      (Trace Disabled)
[23:07:04.798]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:07:04.798]    __FlashAddr=0x00000000
[23:07:04.798]    __FlashLen=0x00000000
[23:07:04.798]    __FlashArg=0x00000000
[23:07:04.798]    __FlashOp=0x00000000
[23:07:04.798]    __Result=0x00000000
[23:07:04.798]  </debugvars>
[23:07:04.798]  
[23:07:04.798]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:07:04.799]    <block atomic="false" info="">
[23:07:04.799]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:07:04.799]        // -> [isSWJ <= 0x00000001]
[23:07:04.799]      __var hasDormant = __protocol & 0x00020000;
[23:07:04.799]        // -> [hasDormant <= 0x00000000]
[23:07:04.799]      __var protType   = __protocol & 0x0000FFFF;
[23:07:04.799]        // -> [protType <= 0x00000002]
[23:07:04.799]    </block>
[23:07:04.799]    <control if="protType == 1" while="" timeout="0" info="">
[23:07:04.799]      // if-block "protType == 1"
[23:07:04.799]        // =>  FALSE
[23:07:04.799]      // skip if-block "protType == 1"
[23:07:04.799]    </control>
[23:07:04.799]    <control if="protType == 2" while="" timeout="0" info="">
[23:07:04.799]      // if-block "protType == 2"
[23:07:04.799]        // =>  TRUE
[23:07:04.799]      <control if="isSWJ" while="" timeout="0" info="">
[23:07:04.799]        // if-block "isSWJ"
[23:07:04.799]          // =>  TRUE
[23:07:04.799]        <control if="hasDormant" while="" timeout="0" info="">
[23:07:04.799]          // if-block "hasDormant"
[23:07:04.799]            // =>  FALSE
[23:07:04.802]          // skip if-block "hasDormant"
[23:07:04.802]        </control>
[23:07:04.802]        <control if="!hasDormant" while="" timeout="0" info="">
[23:07:04.802]          // if-block "!hasDormant"
[23:07:04.802]            // =>  TRUE
[23:07:04.802]          <block atomic="false" info="">
[23:07:04.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:07:04.806]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:07:04.807]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:07:04.808]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:07:04.808]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:07:04.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:07:04.810]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:07:04.810]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:07:04.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:07:04.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:07:04.814]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:07:04.814]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:07:04.814]          </block>
[23:07:04.814]          // end if-block "!hasDormant"
[23:07:04.814]        </control>
[23:07:04.818]        // end if-block "isSWJ"
[23:07:04.818]      </control>
[23:07:04.818]      <control if="!isSWJ" while="" timeout="0" info="">
[23:07:04.818]        // if-block "!isSWJ"
[23:07:04.818]          // =>  FALSE
[23:07:04.818]        // skip if-block "!isSWJ"
[23:07:04.818]      </control>
[23:07:04.818]      <block atomic="false" info="">
[23:07:04.818]        ReadDP(0x0);
[23:07:04.818]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:07:04.822]      </block>
[23:07:04.822]      // end if-block "protType == 2"
[23:07:04.822]    </control>
[23:07:04.822]  </sequence>
[23:07:04.822]  
[23:07:04.822]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:07:04.822]  
[23:07:04.822]  <debugvars>
[23:07:04.822]    // Pre-defined
[23:07:04.822]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:07:04.822]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:07:04.822]    __dp=0x00000000
[23:07:04.822]    __ap=0x00000000
[23:07:04.822]    __traceout=0x00000000      (Trace Disabled)
[23:07:04.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:07:04.826]    __FlashAddr=0x00000000
[23:07:04.826]    __FlashLen=0x00000000
[23:07:04.826]    __FlashArg=0x00000000
[23:07:04.826]    __FlashOp=0x00000000
[23:07:04.826]    __Result=0x00000000
[23:07:04.826]  </debugvars>
[23:07:04.826]  
[23:07:04.826]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:07:04.826]    <block atomic="false" info="">
[23:07:04.826]      __var SW_DP_ABORT       = 0x0;
[23:07:04.826]        // -> [SW_DP_ABORT <= 0x00000000]
[23:07:04.826]      __var DP_CTRL_STAT      = 0x4;
[23:07:04.826]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:07:04.826]      __var DP_SELECT         = 0x8;
[23:07:04.828]        // -> [DP_SELECT <= 0x00000008]
[23:07:04.828]      __var powered_down      = 0;
[23:07:04.828]        // -> [powered_down <= 0x00000000]
[23:07:04.828]      WriteDP(DP_SELECT, 0x00000000);
[23:07:04.828]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:07:04.828]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:07:04.830]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:07:04.830]        // -> [powered_down <= 0x00000001]
[23:07:04.830]    </block>
[23:07:04.830]    <control if="powered_down" while="" timeout="0" info="">
[23:07:04.830]      // if-block "powered_down"
[23:07:04.830]        // =>  TRUE
[23:07:04.830]      <block atomic="false" info="">
[23:07:04.830]        Message(0, "Debug/System power-up request sent");
[23:07:04.833]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:07:04.838]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:07:04.838]      </block>
[23:07:04.838]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:07:04.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:07:04.838]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:07:04.838]        // while-condition  =>  FALSE
[23:07:04.838]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:07:04.838]      </control>
[23:07:04.838]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:07:04.838]        // if-block "(__protocol & 0xFFFF) == 1"
[23:07:04.838]          // =>  FALSE
[23:07:04.838]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:07:04.838]      </control>
[23:07:04.838]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:07:04.838]        // if-block "(__protocol & 0xFFFF) == 2"
[23:07:04.838]          // =>  TRUE
[23:07:04.838]        <block atomic="false" info="">
[23:07:04.842]          Message(0, "executing SWD power up");
[23:07:04.842]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:07:04.842]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:07:04.842]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:07:04.846]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:07:04.846]        </block>
[23:07:04.846]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:07:04.848]      </control>
[23:07:04.848]      // end if-block "powered_down"
[23:07:04.848]    </control>
[23:07:04.848]    <block atomic="false" info="">
[23:07:04.848]      __var DEBUG_PORT_VAL    = 0;
[23:07:04.848]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:07:04.848]      __var ACCESS_POINT_VAL  = 0;
[23:07:04.848]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:07:04.848]      __ap = 1; 
[23:07:04.848]        // -> [__ap <= 0x00000001]
[23:07:04.848]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:07:04.851]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:07:04.851]      __ap = 4;
[23:07:04.851]        // -> [__ap <= 0x00000004]
[23:07:04.851]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:07:04.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:07:04.854]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:07:04.854]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:07:04.858]    </block>
[23:07:04.858]    <block atomic="false" info="">
[23:07:04.858]      __var nReset = 0x80;
[23:07:04.858]        // -> [nReset <= 0x00000080]
[23:07:04.858]      __var canReadPins = 0;
[23:07:04.858]        // -> [canReadPins <= 0x00000000]
[23:07:04.858]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:07:04.862]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:07:04.862]        // -> [canReadPins <= 0x00000001]
[23:07:04.866]    </block>
[23:07:04.866]    <control if="" while="1" timeout="200" info="">
[23:07:04.866]      // while "1"  (timeout="200")
[23:07:04.866]      // while-condition  =>  TRUE
[23:07:04.866]      // while "1"  (timeout="200")
[23:07:04.866]      // while-condition  =>  TRUE
[23:07:04.866]      // while "1"  (timeout="200")
[23:07:04.866]      // while-condition  =>  TRUE
[23:07:04.866]      // while "1"  (timeout="200")
[23:07:04.868]      // while-condition  =>  TRUE
[23:07:04.868]      // while "1"  (timeout="200")
[23:07:04.868]      // while-condition  =>  TRUE
[23:07:04.868]      // while "1"  (timeout="200")
[23:07:04.868]      // while-condition  =>  TRUE
[23:07:04.868]      // while "1"  (timeout="200")
[23:07:04.868]      // while-condition  =>  TRUE
[23:07:04.868]      // while "1"  (timeout="200")
[23:07:04.868]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.869]      // while-condition  =>  TRUE
[23:07:04.869]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.871]      // while-condition  =>  TRUE
[23:07:04.871]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.875]      // while-condition  =>  TRUE
[23:07:04.875]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.878]      // while-condition  =>  TRUE
[23:07:04.878]      // while "1"  (timeout="200")
[23:07:04.883]      // while-condition  =>  TRUE
[23:07:04.883]      // while "1"  (timeout="200")
[23:07:04.883]      // while  =>  TIMEOUT
[23:07:04.883]      // end while "1"
[23:07:04.883]    </control>
[23:07:04.883]    <control if="canReadPins" while="" timeout="0" info="">
[23:07:04.883]      // if-block "canReadPins"
[23:07:04.883]        // =>  TRUE
[23:07:04.883]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:07:04.883]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:07:04.883]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:07:04.883]        // while-condition  =>  FALSE
[23:07:04.883]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:07:04.883]      </control>
[23:07:04.883]      // end if-block "canReadPins"
[23:07:04.883]    </control>
[23:07:04.883]    <control if="!canReadPins" while="" timeout="0" info="">
[23:07:04.883]      // if-block "!canReadPins"
[23:07:04.883]        // =>  FALSE
[23:07:04.883]      // skip if-block "!canReadPins"
[23:07:04.883]    </control>
[23:07:04.883]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:07:04.883]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:07:04.883]        // =>  TRUE
[23:07:04.883]      <block atomic="false" info="">
[23:07:04.887]        WriteAP(0x00, 0x190008);
[23:07:04.889]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:07:04.889]        WriteAP(0xF0, 0x01);
[23:07:04.890]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:07:04.890]      </block>
[23:07:04.890]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:07:04.890]    </control>
[23:07:04.890]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:07:04.890]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:07:04.890]        // =>  FALSE
[23:07:04.890]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:07:04.890]    </control>
[23:07:04.890]    <block atomic="false" info="">
[23:07:04.890]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:07:04.898]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:07:04.898]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:07:04.899]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:07:04.899]      __ap = 0; //lets make sure we reset the access point selection
[23:07:04.899]        // -> [__ap <= 0x00000000]
[23:07:04.899]    </block>
[23:07:04.899]  </sequence>
[23:07:04.899]  
[23:07:04.922]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:07:04.922]  
[23:07:04.922]  <debugvars>
[23:07:04.922]    // Pre-defined
[23:07:04.922]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:07:04.922]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:07:04.922]    __dp=0x00000000
[23:07:04.922]    __ap=0x00000000
[23:07:04.922]    __traceout=0x00000000      (Trace Disabled)
[23:07:04.922]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:07:04.922]    __FlashAddr=0x00000000
[23:07:04.922]    __FlashLen=0x00000000
[23:07:04.922]    __FlashArg=0x00000000
[23:07:04.922]    __FlashOp=0x00000000
[23:07:04.922]    __Result=0x00000000
[23:07:04.922]  </debugvars>
[23:07:04.922]  
[23:07:04.922]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:07:04.922]    <block atomic="false" info="">
[23:07:04.922]      __var deviceID = 0;
[23:07:04.922]        // -> [deviceID <= 0x00000000]
[23:07:04.922]      __var version = 0;
[23:07:04.926]        // -> [version <= 0x00000000]
[23:07:04.926]      __var partNum = 0;
[23:07:04.926]        // -> [partNum <= 0x00000000]
[23:07:04.926]      __var manuf = 0;
[23:07:04.926]        // -> [manuf <= 0x00000000]
[23:07:04.926]      __var isMSPM0G1X0X_G3X0X = 0;
[23:07:04.926]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:07:04.926]      __var isProduction = 0;
[23:07:04.927]        // -> [isProduction <= 0x00000000]
[23:07:04.927]      __var continueId = 0;
[23:07:04.927]        // -> [continueId <= 0x00000000]
[23:07:04.927]      deviceID =   Read32(0x41C40004);
[23:07:04.934]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:07:04.934]        // -> [deviceID <= 0x2BB8802F]
[23:07:04.934]      version = deviceID >> 28;
[23:07:04.934]        // -> [version <= 0x00000002]
[23:07:04.934]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:07:04.934]        // -> [partNum <= 0x0000BB88]
[23:07:04.934]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:07:04.934]        // -> [manuf <= 0x00000017]
[23:07:04.934]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:07:04.934]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:07:04.934]      isProduction = (version > 0);
[23:07:04.934]        // -> [isProduction <= 0x00000001]
[23:07:04.934]    </block>
[23:07:04.934]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:07:04.934]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:07:04.934]        // =>  FALSE
[23:07:04.934]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:07:04.934]    </control>
[23:07:04.934]    <control if="continueId == 4" while="" timeout="0" info="">
[23:07:04.934]      // if-block "continueId == 4"
[23:07:04.934]        // =>  FALSE
[23:07:04.938]      // skip if-block "continueId == 4"
[23:07:04.938]    </control>
[23:07:04.938]    <control if="!isProduction" while="" timeout="0" info="">
[23:07:04.938]      // if-block "!isProduction"
[23:07:04.938]        // =>  FALSE
[23:07:04.938]      // skip if-block "!isProduction"
[23:07:04.938]    </control>
[23:07:04.938]  </sequence>
[23:07:04.938]  
[23:09:19.011]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:09:19.011]  
[23:09:19.024]  <debugvars>
[23:09:19.024]    // Pre-defined
[23:09:19.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:19.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:19.024]    __dp=0x00000000
[23:09:19.024]    __ap=0x00000000
[23:09:19.024]    __traceout=0x00000000      (Trace Disabled)
[23:09:19.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:19.024]    __FlashAddr=0x00000000
[23:09:19.024]    __FlashLen=0x00000000
[23:09:19.024]    __FlashArg=0x00000000
[23:09:19.024]    __FlashOp=0x00000000
[23:09:19.024]    __Result=0x00000000
[23:09:19.024]  </debugvars>
[23:09:19.024]  
[23:09:19.024]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:09:19.024]    <block atomic="false" info="">
[23:09:19.024]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:09:19.024]        // -> [isSWJ <= 0x00000001]
[23:09:19.024]      __var hasDormant = __protocol & 0x00020000;
[23:09:19.024]        // -> [hasDormant <= 0x00000000]
[23:09:19.024]      __var protType   = __protocol & 0x0000FFFF;
[23:09:19.024]        // -> [protType <= 0x00000002]
[23:09:19.024]    </block>
[23:09:19.024]    <control if="protType == 1" while="" timeout="0" info="">
[23:09:19.024]      // if-block "protType == 1"
[23:09:19.024]        // =>  FALSE
[23:09:19.024]      // skip if-block "protType == 1"
[23:09:19.027]    </control>
[23:09:19.027]    <control if="protType == 2" while="" timeout="0" info="">
[23:09:19.027]      // if-block "protType == 2"
[23:09:19.027]        // =>  TRUE
[23:09:19.027]      <control if="isSWJ" while="" timeout="0" info="">
[23:09:19.027]        // if-block "isSWJ"
[23:09:19.027]          // =>  TRUE
[23:09:19.027]        <control if="hasDormant" while="" timeout="0" info="">
[23:09:19.027]          // if-block "hasDormant"
[23:09:19.027]            // =>  FALSE
[23:09:19.027]          // skip if-block "hasDormant"
[23:09:19.027]        </control>
[23:09:19.027]        <control if="!hasDormant" while="" timeout="0" info="">
[23:09:19.027]          // if-block "!hasDormant"
[23:09:19.027]            // =>  TRUE
[23:09:19.027]          <block atomic="false" info="">
[23:09:19.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:09:19.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:19.032]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:09:19.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:09:19.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:09:19.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:19.035]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:09:19.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:09:19.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:09:19.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:09:19.041]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:09:19.043]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:09:19.043]          </block>
[23:09:19.043]          // end if-block "!hasDormant"
[23:09:19.043]        </control>
[23:09:19.043]        // end if-block "isSWJ"
[23:09:19.043]      </control>
[23:09:19.043]      <control if="!isSWJ" while="" timeout="0" info="">
[23:09:19.043]        // if-block "!isSWJ"
[23:09:19.043]          // =>  FALSE
[23:09:19.043]        // skip if-block "!isSWJ"
[23:09:19.043]      </control>
[23:09:19.043]      <block atomic="false" info="">
[23:09:19.043]        ReadDP(0x0);
[23:09:19.047]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:09:19.047]      </block>
[23:09:19.047]      // end if-block "protType == 2"
[23:09:19.047]    </control>
[23:09:19.047]  </sequence>
[23:09:19.047]  
[23:09:19.051]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:09:19.051]  
[23:09:19.051]  <debugvars>
[23:09:19.051]    // Pre-defined
[23:09:19.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:19.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:19.051]    __dp=0x00000000
[23:09:19.055]    __ap=0x00000000
[23:09:19.055]    __traceout=0x00000000      (Trace Disabled)
[23:09:19.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:19.055]    __FlashAddr=0x00000000
[23:09:19.055]    __FlashLen=0x00000000
[23:09:19.055]    __FlashArg=0x00000000
[23:09:19.055]    __FlashOp=0x00000000
[23:09:19.055]    __Result=0x00000000
[23:09:19.055]  </debugvars>
[23:09:19.056]  
[23:09:19.056]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:09:19.056]    <block atomic="false" info="">
[23:09:19.056]      __var SW_DP_ABORT       = 0x0;
[23:09:19.056]        // -> [SW_DP_ABORT <= 0x00000000]
[23:09:19.056]      __var DP_CTRL_STAT      = 0x4;
[23:09:19.056]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:09:19.056]      __var DP_SELECT         = 0x8;
[23:09:19.056]        // -> [DP_SELECT <= 0x00000008]
[23:09:19.056]      __var powered_down      = 0;
[23:09:19.056]        // -> [powered_down <= 0x00000000]
[23:09:19.056]      WriteDP(DP_SELECT, 0x00000000);
[23:09:19.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:09:19.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:09:19.064]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:09:19.064]        // -> [powered_down <= 0x00000001]
[23:09:19.064]    </block>
[23:09:19.064]    <control if="powered_down" while="" timeout="0" info="">
[23:09:19.064]      // if-block "powered_down"
[23:09:19.064]        // =>  TRUE
[23:09:19.064]      <block atomic="false" info="">
[23:09:19.064]        Message(0, "Debug/System power-up request sent");
[23:09:19.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:09:19.068]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:09:19.068]      </block>
[23:09:19.068]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:09:19.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:09:19.069]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:09:19.069]        // while-condition  =>  FALSE
[23:09:19.069]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:09:19.069]      </control>
[23:09:19.069]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:09:19.069]        // if-block "(__protocol & 0xFFFF) == 1"
[23:09:19.069]          // =>  FALSE
[23:09:19.071]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:09:19.071]      </control>
[23:09:19.071]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:09:19.071]        // if-block "(__protocol & 0xFFFF) == 2"
[23:09:19.071]          // =>  TRUE
[23:09:19.071]        <block atomic="false" info="">
[23:09:19.071]          Message(0, "executing SWD power up");
[23:09:19.072]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:09:19.074]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:09:19.074]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:09:19.076]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:09:19.076]        </block>
[23:09:19.076]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:09:19.076]      </control>
[23:09:19.076]      // end if-block "powered_down"
[23:09:19.076]    </control>
[23:09:19.076]    <block atomic="false" info="">
[23:09:19.076]      __var DEBUG_PORT_VAL    = 0;
[23:09:19.076]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:09:19.076]      __var ACCESS_POINT_VAL  = 0;
[23:09:19.076]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:09:19.076]      __ap = 1; 
[23:09:19.076]        // -> [__ap <= 0x00000001]
[23:09:19.076]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:09:19.084]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:09:19.084]      __ap = 4;
[23:09:19.084]        // -> [__ap <= 0x00000004]
[23:09:19.084]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:19.093]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:09:19.093]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:09:19.093]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:19.094]    </block>
[23:09:19.094]    <block atomic="false" info="">
[23:09:19.094]      __var nReset = 0x80;
[23:09:19.094]        // -> [nReset <= 0x00000080]
[23:09:19.094]      __var canReadPins = 0;
[23:09:19.094]        // -> [canReadPins <= 0x00000000]
[23:09:19.094]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:09:19.098]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:09:19.098]        // -> [canReadPins <= 0x00000001]
[23:09:19.098]    </block>
[23:09:19.098]    <control if="" while="1" timeout="200" info="">
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.098]      // while "1"  (timeout="200")
[23:09:19.098]      // while-condition  =>  TRUE
[23:09:19.100]      // while "1"  (timeout="200")
[23:09:19.100]      // while-condition  =>  TRUE
[23:09:19.100]      // while "1"  (timeout="200")
[23:09:19.100]      // while-condition  =>  TRUE
[23:09:19.100]      // while "1"  (timeout="200")
[23:09:19.100]      // while-condition  =>  TRUE
[23:09:19.100]      // while "1"  (timeout="200")
[23:09:19.100]      // while-condition  =>  TRUE
[23:09:19.100]      // while "1"  (timeout="200")
[23:09:19.100]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.101]      // while "1"  (timeout="200")
[23:09:19.101]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.103]      // while-condition  =>  TRUE
[23:09:19.103]      // while "1"  (timeout="200")
[23:09:19.104]      // while-condition  =>  TRUE
[23:09:19.104]      // while "1"  (timeout="200")
[23:09:19.104]      // while-condition  =>  TRUE
[23:09:19.104]      // while "1"  (timeout="200")
[23:09:19.104]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.105]      // while "1"  (timeout="200")
[23:09:19.105]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.107]      // while "1"  (timeout="200")
[23:09:19.107]      // while-condition  =>  TRUE
[23:09:19.108]      // while "1"  (timeout="200")
[23:09:19.108]      // while-condition  =>  TRUE
[23:09:19.108]      // while "1"  (timeout="200")
[23:09:19.108]      // while-condition  =>  TRUE
[23:09:19.108]      // while "1"  (timeout="200")
[23:09:19.108]      // while-condition  =>  TRUE
[23:09:19.108]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.109]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.109]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.109]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.109]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.109]      // while "1"  (timeout="200")
[23:09:19.109]      // while-condition  =>  TRUE
[23:09:19.110]      // while "1"  (timeout="200")
[23:09:19.110]      // while-condition  =>  TRUE
[23:09:19.110]      // while "1"  (timeout="200")
[23:09:19.110]      // while-condition  =>  TRUE
[23:09:19.110]      // while "1"  (timeout="200")
[23:09:19.110]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.111]      // while-condition  =>  TRUE
[23:09:19.111]      // while "1"  (timeout="200")
[23:09:19.113]      // while-condition  =>  TRUE
[23:09:19.113]      // while "1"  (timeout="200")
[23:09:19.113]      // while  =>  TIMEOUT
[23:09:19.113]      // end while "1"
[23:09:19.113]    </control>
[23:09:19.113]    <control if="canReadPins" while="" timeout="0" info="">
[23:09:19.113]      // if-block "canReadPins"
[23:09:19.113]        // =>  TRUE
[23:09:19.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:09:19.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:09:19.113]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:09:19.113]        // while-condition  =>  FALSE
[23:09:19.117]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:09:19.117]      </control>
[23:09:19.117]      // end if-block "canReadPins"
[23:09:19.117]    </control>
[23:09:19.117]    <control if="!canReadPins" while="" timeout="0" info="">
[23:09:19.117]      // if-block "!canReadPins"
[23:09:19.117]        // =>  FALSE
[23:09:19.117]      // skip if-block "!canReadPins"
[23:09:19.117]    </control>
[23:09:19.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:09:19.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:19.117]        // =>  TRUE
[23:09:19.117]      <block atomic="false" info="">
[23:09:19.117]        WriteAP(0x00, 0x190008);
[23:09:19.121]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:19.121]        WriteAP(0xF0, 0x01);
[23:09:19.138]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:09:19.138]      </block>
[23:09:19.138]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:09:19.138]    </control>
[23:09:19.138]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:09:19.138]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:19.139]        // =>  FALSE
[23:09:19.139]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:09:19.139]    </control>
[23:09:19.139]    <block atomic="false" info="">
[23:09:19.139]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:09:19.148]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:09:19.148]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:09:19.148]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:09:19.148]      __ap = 0; //lets make sure we reset the access point selection
[23:09:19.148]        // -> [__ap <= 0x00000000]
[23:09:19.150]    </block>
[23:09:19.150]  </sequence>
[23:09:19.150]  
[23:09:19.188]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:09:19.188]  
[23:09:19.188]  <debugvars>
[23:09:19.188]    // Pre-defined
[23:09:19.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:09:19.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:09:19.188]    __dp=0x00000000
[23:09:19.188]    __ap=0x00000000
[23:09:19.188]    __traceout=0x00000000      (Trace Disabled)
[23:09:19.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:09:19.188]    __FlashAddr=0x00000000
[23:09:19.188]    __FlashLen=0x00000000
[23:09:19.188]    __FlashArg=0x00000000
[23:09:19.188]    __FlashOp=0x00000000
[23:09:19.188]    __Result=0x00000000
[23:09:19.188]  </debugvars>
[23:09:19.188]  
[23:09:19.188]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:09:19.188]    <block atomic="false" info="">
[23:09:19.188]      __var deviceID = 0;
[23:09:19.191]        // -> [deviceID <= 0x00000000]
[23:09:19.191]      __var version = 0;
[23:09:19.191]        // -> [version <= 0x00000000]
[23:09:19.191]      __var partNum = 0;
[23:09:19.191]        // -> [partNum <= 0x00000000]
[23:09:19.192]      __var manuf = 0;
[23:09:19.192]        // -> [manuf <= 0x00000000]
[23:09:19.192]      __var isMSPM0G1X0X_G3X0X = 0;
[23:09:19.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:09:19.192]      __var isProduction = 0;
[23:09:19.192]        // -> [isProduction <= 0x00000000]
[23:09:19.192]      __var continueId = 0;
[23:09:19.192]        // -> [continueId <= 0x00000000]
[23:09:19.192]      deviceID =   Read32(0x41C40004);
[23:09:19.210]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:09:19.210]        // -> [deviceID <= 0x2BB8802F]
[23:09:19.210]      version = deviceID >> 28;
[23:09:19.210]        // -> [version <= 0x00000002]
[23:09:19.210]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:09:19.210]        // -> [partNum <= 0x0000BB88]
[23:09:19.210]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:09:19.211]        // -> [manuf <= 0x00000017]
[23:09:19.211]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:09:19.211]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:09:19.211]      isProduction = (version > 0);
[23:09:19.211]        // -> [isProduction <= 0x00000001]
[23:09:19.211]    </block>
[23:09:19.211]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:09:19.211]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:09:19.212]        // =>  FALSE
[23:09:19.212]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:09:19.212]    </control>
[23:09:19.212]    <control if="continueId == 4" while="" timeout="0" info="">
[23:09:19.212]      // if-block "continueId == 4"
[23:09:19.212]        // =>  FALSE
[23:09:19.212]      // skip if-block "continueId == 4"
[23:09:19.212]    </control>
[23:09:19.212]    <control if="!isProduction" while="" timeout="0" info="">
[23:09:19.212]      // if-block "!isProduction"
[23:09:19.212]        // =>  FALSE
[23:09:19.213]      // skip if-block "!isProduction"
[23:09:19.213]    </control>
[23:09:19.213]  </sequence>
[23:09:19.213]  
[23:12:52.689]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:12:52.689]  
[23:12:52.700]  <debugvars>
[23:12:52.700]    // Pre-defined
[23:12:52.700]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:52.700]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:52.700]    __dp=0x00000000
[23:12:52.700]    __ap=0x00000000
[23:12:52.700]    __traceout=0x00000000      (Trace Disabled)
[23:12:52.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:52.700]    __FlashAddr=0x00000000
[23:12:52.700]    __FlashLen=0x00000000
[23:12:52.700]    __FlashArg=0x00000000
[23:12:52.701]    __FlashOp=0x00000000
[23:12:52.701]    __Result=0x00000000
[23:12:52.701]  </debugvars>
[23:12:52.701]  
[23:12:52.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:12:52.701]    <block atomic="false" info="">
[23:12:52.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:12:52.701]        // -> [isSWJ <= 0x00000001]
[23:12:52.701]      __var hasDormant = __protocol & 0x00020000;
[23:12:52.701]        // -> [hasDormant <= 0x00000000]
[23:12:52.701]      __var protType   = __protocol & 0x0000FFFF;
[23:12:52.701]        // -> [protType <= 0x00000002]
[23:12:52.701]    </block>
[23:12:52.701]    <control if="protType == 1" while="" timeout="0" info="">
[23:12:52.701]      // if-block "protType == 1"
[23:12:52.701]        // =>  FALSE
[23:12:52.701]      // skip if-block "protType == 1"
[23:12:52.701]    </control>
[23:12:52.701]    <control if="protType == 2" while="" timeout="0" info="">
[23:12:52.701]      // if-block "protType == 2"
[23:12:52.701]        // =>  TRUE
[23:12:52.701]      <control if="isSWJ" while="" timeout="0" info="">
[23:12:52.701]        // if-block "isSWJ"
[23:12:52.701]          // =>  TRUE
[23:12:52.701]        <control if="hasDormant" while="" timeout="0" info="">
[23:12:52.701]          // if-block "hasDormant"
[23:12:52.701]            // =>  FALSE
[23:12:52.701]          // skip if-block "hasDormant"
[23:12:52.701]        </control>
[23:12:52.701]        <control if="!hasDormant" while="" timeout="0" info="">
[23:12:52.701]          // if-block "!hasDormant"
[23:12:52.701]            // =>  TRUE
[23:12:52.701]          <block atomic="false" info="">
[23:12:52.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:12:52.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:52.706]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:12:52.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:12:52.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:12:52.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:52.718]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:12:52.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:12:52.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:12:52.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:52.722]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:12:52.726]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:12:52.726]          </block>
[23:12:52.726]          // end if-block "!hasDormant"
[23:12:52.726]        </control>
[23:12:52.726]        // end if-block "isSWJ"
[23:12:52.726]      </control>
[23:12:52.726]      <control if="!isSWJ" while="" timeout="0" info="">
[23:12:52.726]        // if-block "!isSWJ"
[23:12:52.726]          // =>  FALSE
[23:12:52.726]        // skip if-block "!isSWJ"
[23:12:52.726]      </control>
[23:12:52.726]      <block atomic="false" info="">
[23:12:52.726]        ReadDP(0x0);
[23:12:52.730]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:12:52.730]      </block>
[23:12:52.730]      // end if-block "protType == 2"
[23:12:52.730]    </control>
[23:12:52.730]  </sequence>
[23:12:52.730]  
[23:12:52.735]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:12:52.735]  
[23:12:52.735]  <debugvars>
[23:12:52.735]    // Pre-defined
[23:12:52.735]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:52.735]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:52.735]    __dp=0x00000000
[23:12:52.735]    __ap=0x00000000
[23:12:52.735]    __traceout=0x00000000      (Trace Disabled)
[23:12:52.735]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:52.738]    __FlashAddr=0x00000000
[23:12:52.738]    __FlashLen=0x00000000
[23:12:52.738]    __FlashArg=0x00000000
[23:12:52.738]    __FlashOp=0x00000000
[23:12:52.738]    __Result=0x00000000
[23:12:52.738]  </debugvars>
[23:12:52.738]  
[23:12:52.738]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:12:52.738]    <block atomic="false" info="">
[23:12:52.738]      __var SW_DP_ABORT       = 0x0;
[23:12:52.738]        // -> [SW_DP_ABORT <= 0x00000000]
[23:12:52.738]      __var DP_CTRL_STAT      = 0x4;
[23:12:52.738]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:12:52.738]      __var DP_SELECT         = 0x8;
[23:12:52.738]        // -> [DP_SELECT <= 0x00000008]
[23:12:52.738]      __var powered_down      = 0;
[23:12:52.738]        // -> [powered_down <= 0x00000000]
[23:12:52.738]      WriteDP(DP_SELECT, 0x00000000);
[23:12:52.738]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:12:52.738]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:12:52.742]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:12:52.742]        // -> [powered_down <= 0x00000001]
[23:12:52.742]    </block>
[23:12:52.742]    <control if="powered_down" while="" timeout="0" info="">
[23:12:52.742]      // if-block "powered_down"
[23:12:52.742]        // =>  TRUE
[23:12:52.742]      <block atomic="false" info="">
[23:12:52.742]        Message(0, "Debug/System power-up request sent");
[23:12:52.745]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:12:52.746]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:12:52.746]      </block>
[23:12:52.746]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:12:52.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:12:52.750]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:12:52.750]        // while-condition  =>  FALSE
[23:12:52.750]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:12:52.750]      </control>
[23:12:52.750]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:12:52.750]        // if-block "(__protocol & 0xFFFF) == 1"
[23:12:52.750]          // =>  FALSE
[23:12:52.750]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:12:52.750]      </control>
[23:12:52.750]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:12:52.750]        // if-block "(__protocol & 0xFFFF) == 2"
[23:12:52.750]          // =>  TRUE
[23:12:52.750]        <block atomic="false" info="">
[23:12:52.750]          Message(0, "executing SWD power up");
[23:12:52.754]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:12:52.756]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:12:52.758]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:12:52.758]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:12:52.758]        </block>
[23:12:52.758]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:12:52.758]      </control>
[23:12:52.758]      // end if-block "powered_down"
[23:12:52.758]    </control>
[23:12:52.758]    <block atomic="false" info="">
[23:12:52.758]      __var DEBUG_PORT_VAL    = 0;
[23:12:52.758]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:12:52.758]      __var ACCESS_POINT_VAL  = 0;
[23:12:52.758]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:12:52.763]      __ap = 1; 
[23:12:52.763]        // -> [__ap <= 0x00000001]
[23:12:52.763]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:12:52.765]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:12:52.767]      __ap = 4;
[23:12:52.767]        // -> [__ap <= 0x00000004]
[23:12:52.767]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:12:52.771]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:12:52.771]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:12:52.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:12:52.771]    </block>
[23:12:52.771]    <block atomic="false" info="">
[23:12:52.771]      __var nReset = 0x80;
[23:12:52.771]        // -> [nReset <= 0x00000080]
[23:12:52.771]      __var canReadPins = 0;
[23:12:52.771]        // -> [canReadPins <= 0x00000000]
[23:12:52.771]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:12:52.775]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:12:52.775]        // -> [canReadPins <= 0x00000001]
[23:12:52.775]    </block>
[23:12:52.775]    <control if="" while="1" timeout="200" info="">
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.775]      // while "1"  (timeout="200")
[23:12:52.775]      // while-condition  =>  TRUE
[23:12:52.779]      // while "1"  (timeout="200")
[23:12:52.779]      // while-condition  =>  TRUE
[23:12:52.779]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.780]      // while-condition  =>  TRUE
[23:12:52.780]      // while "1"  (timeout="200")
[23:12:52.782]      // while-condition  =>  TRUE
[23:12:52.782]      // while "1"  (timeout="200")
[23:12:52.782]      // while-condition  =>  TRUE
[23:12:52.782]      // while "1"  (timeout="200")
[23:12:52.782]      // while-condition  =>  TRUE
[23:12:52.782]      // while "1"  (timeout="200")
[23:12:52.782]      // while-condition  =>  TRUE
[23:12:52.783]      // while "1"  (timeout="200")
[23:12:52.783]      // while-condition  =>  TRUE
[23:12:52.783]      // while "1"  (timeout="200")
[23:12:52.783]      // while-condition  =>  TRUE
[23:12:52.783]      // while "1"  (timeout="200")
[23:12:52.783]      // while-condition  =>  TRUE
[23:12:52.783]      // while "1"  (timeout="200")
[23:12:52.783]      // while-condition  =>  TRUE
[23:12:52.783]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.784]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.784]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.784]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.784]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.784]      // while "1"  (timeout="200")
[23:12:52.784]      // while-condition  =>  TRUE
[23:12:52.785]      // while "1"  (timeout="200")
[23:12:52.785]      // while  =>  TIMEOUT
[23:12:52.785]      // end while "1"
[23:12:52.785]    </control>
[23:12:52.785]    <control if="canReadPins" while="" timeout="0" info="">
[23:12:52.785]      // if-block "canReadPins"
[23:12:52.785]        // =>  TRUE
[23:12:52.785]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:12:52.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:12:52.795]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:12:52.795]        // while-condition  =>  FALSE
[23:12:52.795]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:12:52.795]      </control>
[23:12:52.795]      // end if-block "canReadPins"
[23:12:52.795]    </control>
[23:12:52.795]    <control if="!canReadPins" while="" timeout="0" info="">
[23:12:52.795]      // if-block "!canReadPins"
[23:12:52.795]        // =>  FALSE
[23:12:52.795]      // skip if-block "!canReadPins"
[23:12:52.795]    </control>
[23:12:52.795]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:12:52.795]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:12:52.795]        // =>  TRUE
[23:12:52.795]      <block atomic="false" info="">
[23:12:52.795]        WriteAP(0x00, 0x190008);
[23:12:52.799]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:12:52.799]        WriteAP(0xF0, 0x01);
[23:12:52.811]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:12:52.811]      </block>
[23:12:52.811]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:12:52.811]    </control>
[23:12:52.811]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:12:52.811]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:12:52.811]        // =>  FALSE
[23:12:52.811]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:12:52.811]    </control>
[23:12:52.811]    <block atomic="false" info="">
[23:12:52.815]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:12:52.819]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:12:52.819]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:12:52.819]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:12:52.822]      __ap = 0; //lets make sure we reset the access point selection
[23:12:52.822]        // -> [__ap <= 0x00000000]
[23:12:52.822]    </block>
[23:12:52.822]  </sequence>
[23:12:52.822]  
[23:12:52.866]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:12:52.866]  
[23:12:52.866]  <debugvars>
[23:12:52.866]    // Pre-defined
[23:12:52.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:52.866]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:52.866]    __dp=0x00000000
[23:12:52.866]    __ap=0x00000000
[23:12:52.867]    __traceout=0x00000000      (Trace Disabled)
[23:12:52.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:52.867]    __FlashAddr=0x00000000
[23:12:52.867]    __FlashLen=0x00000000
[23:12:52.867]    __FlashArg=0x00000000
[23:12:52.867]    __FlashOp=0x00000000
[23:12:52.867]    __Result=0x00000000
[23:12:52.867]  </debugvars>
[23:12:52.867]  
[23:12:52.867]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:12:52.867]    <block atomic="false" info="">
[23:12:52.867]      __var deviceID = 0;
[23:12:52.867]        // -> [deviceID <= 0x00000000]
[23:12:52.867]      __var version = 0;
[23:12:52.867]        // -> [version <= 0x00000000]
[23:12:52.867]      __var partNum = 0;
[23:12:52.867]        // -> [partNum <= 0x00000000]
[23:12:52.867]      __var manuf = 0;
[23:12:52.869]        // -> [manuf <= 0x00000000]
[23:12:52.869]      __var isMSPM0G1X0X_G3X0X = 0;
[23:12:52.869]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:12:52.869]      __var isProduction = 0;
[23:12:52.869]        // -> [isProduction <= 0x00000000]
[23:12:52.870]      __var continueId = 0;
[23:12:52.870]        // -> [continueId <= 0x00000000]
[23:12:52.870]      deviceID =   Read32(0x41C40004);
[23:12:52.877]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:12:52.877]        // -> [deviceID <= 0x2BB8802F]
[23:12:52.877]      version = deviceID >> 28;
[23:12:52.877]        // -> [version <= 0x00000002]
[23:12:52.877]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:12:52.877]        // -> [partNum <= 0x0000BB88]
[23:12:52.877]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:12:52.877]        // -> [manuf <= 0x00000017]
[23:12:52.882]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:12:52.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:12:52.882]      isProduction = (version > 0);
[23:12:52.882]        // -> [isProduction <= 0x00000001]
[23:12:52.882]    </block>
[23:12:52.882]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:12:52.882]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:12:52.882]        // =>  FALSE
[23:12:52.882]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:12:52.882]    </control>
[23:12:52.882]    <control if="continueId == 4" while="" timeout="0" info="">
[23:12:52.882]      // if-block "continueId == 4"
[23:12:52.882]        // =>  FALSE
[23:12:52.882]      // skip if-block "continueId == 4"
[23:12:52.882]    </control>
[23:12:52.882]    <control if="!isProduction" while="" timeout="0" info="">
[23:12:52.882]      // if-block "!isProduction"
[23:12:52.882]        // =>  FALSE
[23:12:52.882]      // skip if-block "!isProduction"
[23:12:52.882]    </control>
[23:12:52.882]  </sequence>
[23:12:52.882]  
[23:14:44.890]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:14:44.890]  
[23:14:44.898]  <debugvars>
[23:14:44.899]    // Pre-defined
[23:14:44.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:44.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:44.899]    __dp=0x00000000
[23:14:44.899]    __ap=0x00000000
[23:14:44.899]    __traceout=0x00000000      (Trace Disabled)
[23:14:44.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:44.899]    __FlashAddr=0x00000000
[23:14:44.900]    __FlashLen=0x00000000
[23:14:44.900]    __FlashArg=0x00000000
[23:14:44.900]    __FlashOp=0x00000000
[23:14:44.900]    __Result=0x00000000
[23:14:44.900]  </debugvars>
[23:14:44.900]  
[23:14:44.900]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:14:44.900]    <block atomic="false" info="">
[23:14:44.900]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:14:44.900]        // -> [isSWJ <= 0x00000001]
[23:14:44.900]      __var hasDormant = __protocol & 0x00020000;
[23:14:44.900]        // -> [hasDormant <= 0x00000000]
[23:14:44.900]      __var protType   = __protocol & 0x0000FFFF;
[23:14:44.900]        // -> [protType <= 0x00000002]
[23:14:44.900]    </block>
[23:14:44.900]    <control if="protType == 1" while="" timeout="0" info="">
[23:14:44.902]      // if-block "protType == 1"
[23:14:44.902]        // =>  FALSE
[23:14:44.902]      // skip if-block "protType == 1"
[23:14:44.902]    </control>
[23:14:44.902]    <control if="protType == 2" while="" timeout="0" info="">
[23:14:44.902]      // if-block "protType == 2"
[23:14:44.903]        // =>  TRUE
[23:14:44.903]      <control if="isSWJ" while="" timeout="0" info="">
[23:14:44.903]        // if-block "isSWJ"
[23:14:44.903]          // =>  TRUE
[23:14:44.903]        <control if="hasDormant" while="" timeout="0" info="">
[23:14:44.903]          // if-block "hasDormant"
[23:14:44.903]            // =>  FALSE
[23:14:44.903]          // skip if-block "hasDormant"
[23:14:44.903]        </control>
[23:14:44.903]        <control if="!hasDormant" while="" timeout="0" info="">
[23:14:44.903]          // if-block "!hasDormant"
[23:14:44.903]            // =>  TRUE
[23:14:44.903]          <block atomic="false" info="">
[23:14:44.903]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:14:44.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:44.906]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:14:44.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:14:44.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:14:44.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:44.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:14:44.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:14:44.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:14:44.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:44.922]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:14:44.922]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:14:44.922]          </block>
[23:14:44.922]          // end if-block "!hasDormant"
[23:14:44.922]        </control>
[23:14:44.922]        // end if-block "isSWJ"
[23:14:44.922]      </control>
[23:14:44.922]      <control if="!isSWJ" while="" timeout="0" info="">
[23:14:44.922]        // if-block "!isSWJ"
[23:14:44.922]          // =>  FALSE
[23:14:44.922]        // skip if-block "!isSWJ"
[23:14:44.922]      </control>
[23:14:44.926]      <block atomic="false" info="">
[23:14:44.926]        ReadDP(0x0);
[23:14:44.927]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:14:44.927]      </block>
[23:14:44.927]      // end if-block "protType == 2"
[23:14:44.927]    </control>
[23:14:44.927]  </sequence>
[23:14:44.927]  
[23:14:44.930]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:14:44.930]  
[23:14:44.930]  <debugvars>
[23:14:44.930]    // Pre-defined
[23:14:44.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:44.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:44.930]    __dp=0x00000000
[23:14:44.930]    __ap=0x00000000
[23:14:44.930]    __traceout=0x00000000      (Trace Disabled)
[23:14:44.930]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:44.930]    __FlashAddr=0x00000000
[23:14:44.930]    __FlashLen=0x00000000
[23:14:44.930]    __FlashArg=0x00000000
[23:14:44.930]    __FlashOp=0x00000000
[23:14:44.930]    __Result=0x00000000
[23:14:44.930]  </debugvars>
[23:14:44.930]  
[23:14:44.930]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:14:44.930]    <block atomic="false" info="">
[23:14:44.930]      __var SW_DP_ABORT       = 0x0;
[23:14:44.930]        // -> [SW_DP_ABORT <= 0x00000000]
[23:14:44.930]      __var DP_CTRL_STAT      = 0x4;
[23:14:44.930]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:14:44.930]      __var DP_SELECT         = 0x8;
[23:14:44.930]        // -> [DP_SELECT <= 0x00000008]
[23:14:44.934]      __var powered_down      = 0;
[23:14:44.934]        // -> [powered_down <= 0x00000000]
[23:14:44.934]      WriteDP(DP_SELECT, 0x00000000);
[23:14:44.940]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:14:44.941]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:14:44.950]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:14:44.950]        // -> [powered_down <= 0x00000001]
[23:14:44.950]    </block>
[23:14:44.950]    <control if="powered_down" while="" timeout="0" info="">
[23:14:44.950]      // if-block "powered_down"
[23:14:44.950]        // =>  TRUE
[23:14:44.950]      <block atomic="false" info="">
[23:14:44.950]        Message(0, "Debug/System power-up request sent");
[23:14:44.954]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:14:44.954]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:14:44.954]      </block>
[23:14:44.954]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:14:44.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:14:44.958]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:14:44.958]        // while-condition  =>  FALSE
[23:14:44.958]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:14:44.958]      </control>
[23:14:44.958]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:14:44.958]        // if-block "(__protocol & 0xFFFF) == 1"
[23:14:44.958]          // =>  FALSE
[23:14:44.958]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:14:44.958]      </control>
[23:14:44.958]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:14:44.958]        // if-block "(__protocol & 0xFFFF) == 2"
[23:14:44.958]          // =>  TRUE
[23:14:44.958]        <block atomic="false" info="">
[23:14:44.958]          Message(0, "executing SWD power up");
[23:14:44.958]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:14:44.962]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:14:44.962]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:14:44.962]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:14:44.962]        </block>
[23:14:44.962]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:14:44.962]      </control>
[23:14:44.962]      // end if-block "powered_down"
[23:14:44.962]    </control>
[23:14:44.962]    <block atomic="false" info="">
[23:14:44.966]      __var DEBUG_PORT_VAL    = 0;
[23:14:44.966]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:14:44.966]      __var ACCESS_POINT_VAL  = 0;
[23:14:44.966]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:14:44.966]      __ap = 1; 
[23:14:44.966]        // -> [__ap <= 0x00000001]
[23:14:44.966]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:14:44.970]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:14:44.970]      __ap = 4;
[23:14:44.970]        // -> [__ap <= 0x00000004]
[23:14:44.970]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:44.970]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:14:44.974]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:14:44.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:44.974]    </block>
[23:14:44.974]    <block atomic="false" info="">
[23:14:44.974]      __var nReset = 0x80;
[23:14:44.974]        // -> [nReset <= 0x00000080]
[23:14:44.974]      __var canReadPins = 0;
[23:14:44.974]        // -> [canReadPins <= 0x00000000]
[23:14:44.974]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:14:44.977]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:14:44.977]        // -> [canReadPins <= 0x00000001]
[23:14:44.977]    </block>
[23:14:44.977]    <control if="" while="1" timeout="200" info="">
[23:14:44.977]      // while "1"  (timeout="200")
[23:14:44.977]      // while-condition  =>  TRUE
[23:14:44.977]      // while "1"  (timeout="200")
[23:14:44.977]      // while-condition  =>  TRUE
[23:14:44.977]      // while "1"  (timeout="200")
[23:14:44.977]      // while-condition  =>  TRUE
[23:14:44.977]      // while "1"  (timeout="200")
[23:14:44.977]      // while-condition  =>  TRUE
[23:14:44.977]      // while "1"  (timeout="200")
[23:14:44.977]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.981]      // while-condition  =>  TRUE
[23:14:44.981]      // while "1"  (timeout="200")
[23:14:44.985]      // while-condition  =>  TRUE
[23:14:44.985]      // while "1"  (timeout="200")
[23:14:44.985]      // while-condition  =>  TRUE
[23:14:44.985]      // while "1"  (timeout="200")
[23:14:44.985]      // while-condition  =>  TRUE
[23:14:44.985]      // while "1"  (timeout="200")
[23:14:44.985]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.986]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.986]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.986]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.986]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.986]      // while-condition  =>  TRUE
[23:14:44.986]      // while "1"  (timeout="200")
[23:14:44.988]      // while-condition  =>  TRUE
[23:14:44.988]      // while "1"  (timeout="200")
[23:14:44.988]      // while-condition  =>  TRUE
[23:14:44.988]      // while "1"  (timeout="200")
[23:14:44.988]      // while-condition  =>  TRUE
[23:14:44.988]      // while "1"  (timeout="200")
[23:14:44.988]      // while-condition  =>  TRUE
[23:14:44.988]      // while "1"  (timeout="200")
[23:14:44.988]      // while-condition  =>  TRUE
[23:14:44.988]      // while "1"  (timeout="200")
[23:14:44.989]      // while-condition  =>  TRUE
[23:14:44.989]      // while "1"  (timeout="200")
[23:14:44.989]      // while  =>  TIMEOUT
[23:14:44.989]      // end while "1"
[23:14:44.990]    </control>
[23:14:44.990]    <control if="canReadPins" while="" timeout="0" info="">
[23:14:44.990]      // if-block "canReadPins"
[23:14:44.990]        // =>  TRUE
[23:14:44.990]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:14:44.990]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:14:44.991]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:14:44.991]        // while-condition  =>  FALSE
[23:14:44.991]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:14:44.991]      </control>
[23:14:44.991]      // end if-block "canReadPins"
[23:14:44.991]    </control>
[23:14:44.993]    <control if="!canReadPins" while="" timeout="0" info="">
[23:14:44.993]      // if-block "!canReadPins"
[23:14:44.993]        // =>  FALSE
[23:14:44.993]      // skip if-block "!canReadPins"
[23:14:44.993]    </control>
[23:14:44.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:14:44.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:44.993]        // =>  TRUE
[23:14:44.993]      <block atomic="false" info="">
[23:14:44.995]        WriteAP(0x00, 0x190008);
[23:14:44.995]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:44.995]        WriteAP(0xF0, 0x01);
[23:14:44.998]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:44.998]      </block>
[23:14:44.998]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:44.998]    </control>
[23:14:44.998]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:14:44.998]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:44.998]        // =>  FALSE
[23:14:44.998]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:44.998]    </control>
[23:14:45.001]    <block atomic="false" info="">
[23:14:45.001]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:45.008]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:14:45.008]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:14:45.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:45.010]      __ap = 0; //lets make sure we reset the access point selection
[23:14:45.010]        // -> [__ap <= 0x00000000]
[23:14:45.010]    </block>
[23:14:45.010]  </sequence>
[23:14:45.010]  
[23:14:45.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:14:45.035]  
[23:14:45.035]  <debugvars>
[23:14:45.035]    // Pre-defined
[23:14:45.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:45.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:45.035]    __dp=0x00000000
[23:14:45.035]    __ap=0x00000000
[23:14:45.035]    __traceout=0x00000000      (Trace Disabled)
[23:14:45.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:45.037]    __FlashAddr=0x00000000
[23:14:45.037]    __FlashLen=0x00000000
[23:14:45.037]    __FlashArg=0x00000000
[23:14:45.037]    __FlashOp=0x00000000
[23:14:45.037]    __Result=0x00000000
[23:14:45.037]  </debugvars>
[23:14:45.037]  
[23:14:45.037]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:14:45.038]    <block atomic="false" info="">
[23:14:45.038]      __var deviceID = 0;
[23:14:45.038]        // -> [deviceID <= 0x00000000]
[23:14:45.039]      __var version = 0;
[23:14:45.039]        // -> [version <= 0x00000000]
[23:14:45.039]      __var partNum = 0;
[23:14:45.039]        // -> [partNum <= 0x00000000]
[23:14:45.039]      __var manuf = 0;
[23:14:45.039]        // -> [manuf <= 0x00000000]
[23:14:45.039]      __var isMSPM0G1X0X_G3X0X = 0;
[23:14:45.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:14:45.039]      __var isProduction = 0;
[23:14:45.040]        // -> [isProduction <= 0x00000000]
[23:14:45.040]      __var continueId = 0;
[23:14:45.040]        // -> [continueId <= 0x00000000]
[23:14:45.040]      deviceID =   Read32(0x41C40004);
[23:14:45.046]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:14:45.046]        // -> [deviceID <= 0x2BB8802F]
[23:14:45.046]      version = deviceID >> 28;
[23:14:45.046]        // -> [version <= 0x00000002]
[23:14:45.046]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:14:45.046]        // -> [partNum <= 0x0000BB88]
[23:14:45.046]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:14:45.046]        // -> [manuf <= 0x00000017]
[23:14:45.046]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:14:45.046]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:14:45.047]      isProduction = (version > 0);
[23:14:45.047]        // -> [isProduction <= 0x00000001]
[23:14:45.047]    </block>
[23:14:45.047]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:14:45.047]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:14:45.047]        // =>  FALSE
[23:14:45.047]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:14:45.047]    </control>
[23:14:45.047]    <control if="continueId == 4" while="" timeout="0" info="">
[23:14:45.047]      // if-block "continueId == 4"
[23:14:45.047]        // =>  FALSE
[23:14:45.047]      // skip if-block "continueId == 4"
[23:14:45.047]    </control>
[23:14:45.047]    <control if="!isProduction" while="" timeout="0" info="">
[23:14:45.047]      // if-block "!isProduction"
[23:14:45.047]        // =>  FALSE
[23:14:45.049]      // skip if-block "!isProduction"
[23:14:45.049]    </control>
[23:14:45.049]  </sequence>
[23:14:45.049]  
[23:14:50.984]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:14:50.984]  
[23:14:50.992]  <debugvars>
[23:14:50.992]    // Pre-defined
[23:14:50.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:50.993]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:14:50.993]    __dp=0x00000000
[23:14:50.993]    __ap=0x00000000
[23:14:50.993]    __traceout=0x00000000      (Trace Disabled)
[23:14:50.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:50.993]    __FlashAddr=0x00000000
[23:14:50.993]    __FlashLen=0x00000000
[23:14:50.993]    __FlashArg=0x00000000
[23:14:50.993]    __FlashOp=0x00000000
[23:14:50.993]    __Result=0x00000000
[23:14:50.993]  </debugvars>
[23:14:50.994]  
[23:14:50.994]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:14:50.994]    <block atomic="false" info="">
[23:14:50.994]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:14:50.994]        // -> [isSWJ <= 0x00000001]
[23:14:50.994]      __var hasDormant = __protocol & 0x00020000;
[23:14:50.994]        // -> [hasDormant <= 0x00000000]
[23:14:50.994]      __var protType   = __protocol & 0x0000FFFF;
[23:14:50.994]        // -> [protType <= 0x00000002]
[23:14:50.994]    </block>
[23:14:50.994]    <control if="protType == 1" while="" timeout="0" info="">
[23:14:50.994]      // if-block "protType == 1"
[23:14:50.994]        // =>  FALSE
[23:14:50.994]      // skip if-block "protType == 1"
[23:14:50.994]    </control>
[23:14:50.996]    <control if="protType == 2" while="" timeout="0" info="">
[23:14:50.996]      // if-block "protType == 2"
[23:14:50.996]        // =>  TRUE
[23:14:50.996]      <control if="isSWJ" while="" timeout="0" info="">
[23:14:50.996]        // if-block "isSWJ"
[23:14:50.996]          // =>  TRUE
[23:14:50.996]        <control if="hasDormant" while="" timeout="0" info="">
[23:14:50.996]          // if-block "hasDormant"
[23:14:50.997]            // =>  FALSE
[23:14:50.997]          // skip if-block "hasDormant"
[23:14:50.997]        </control>
[23:14:50.998]        <control if="!hasDormant" while="" timeout="0" info="">
[23:14:50.998]          // if-block "!hasDormant"
[23:14:50.998]            // =>  TRUE
[23:14:50.998]          <block atomic="false" info="">
[23:14:50.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:14:51.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:51.000]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:14:51.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:14:51.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:14:51.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:51.002]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:14:51.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:14:51.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:14:51.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:51.008]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:14:51.010]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:14:51.010]          </block>
[23:14:51.011]          // end if-block "!hasDormant"
[23:14:51.011]        </control>
[23:14:51.012]        // end if-block "isSWJ"
[23:14:51.012]      </control>
[23:14:51.012]      <control if="!isSWJ" while="" timeout="0" info="">
[23:14:51.012]        // if-block "!isSWJ"
[23:14:51.012]          // =>  FALSE
[23:14:51.012]        // skip if-block "!isSWJ"
[23:14:51.012]      </control>
[23:14:51.012]      <block atomic="false" info="">
[23:14:51.012]        ReadDP(0x0);
[23:14:51.014]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:14:51.014]      </block>
[23:14:51.014]      // end if-block "protType == 2"
[23:14:51.014]    </control>
[23:14:51.014]  </sequence>
[23:14:51.014]  
[23:14:51.014]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:14:51.014]  
[23:14:51.014]  <debugvars>
[23:14:51.014]    // Pre-defined
[23:14:51.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:51.018]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:14:51.018]    __dp=0x00000000
[23:14:51.018]    __ap=0x00000000
[23:14:51.018]    __traceout=0x00000000      (Trace Disabled)
[23:14:51.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:51.018]    __FlashAddr=0x00000000
[23:14:51.018]    __FlashLen=0x00000000
[23:14:51.018]    __FlashArg=0x00000000
[23:14:51.018]    __FlashOp=0x00000000
[23:14:51.018]    __Result=0x00000000
[23:14:51.018]  </debugvars>
[23:14:51.018]  
[23:14:51.018]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:14:51.018]    <block atomic="false" info="">
[23:14:51.018]      __var SW_DP_ABORT       = 0x0;
[23:14:51.018]        // -> [SW_DP_ABORT <= 0x00000000]
[23:14:51.018]      __var DP_CTRL_STAT      = 0x4;
[23:14:51.018]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:14:51.018]      __var DP_SELECT         = 0x8;
[23:14:51.018]        // -> [DP_SELECT <= 0x00000008]
[23:14:51.018]      __var powered_down      = 0;
[23:14:51.018]        // -> [powered_down <= 0x00000000]
[23:14:51.018]      WriteDP(DP_SELECT, 0x00000000);
[23:14:51.022]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:14:51.022]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:14:51.023]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:14:51.023]        // -> [powered_down <= 0x00000001]
[23:14:51.023]    </block>
[23:14:51.023]    <control if="powered_down" while="" timeout="0" info="">
[23:14:51.023]      // if-block "powered_down"
[23:14:51.023]        // =>  TRUE
[23:14:51.023]      <block atomic="false" info="">
[23:14:51.023]        Message(0, "Debug/System power-up request sent");
[23:14:51.026]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:14:51.028]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:14:51.028]      </block>
[23:14:51.028]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:14:51.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:14:51.030]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:14:51.030]        // while-condition  =>  FALSE
[23:14:51.030]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:14:51.030]      </control>
[23:14:51.030]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:14:51.030]        // if-block "(__protocol & 0xFFFF) == 1"
[23:14:51.030]          // =>  FALSE
[23:14:51.030]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:14:51.030]      </control>
[23:14:51.030]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:14:51.030]        // if-block "(__protocol & 0xFFFF) == 2"
[23:14:51.030]          // =>  TRUE
[23:14:51.030]        <block atomic="false" info="">
[23:14:51.030]          Message(0, "executing SWD power up");
[23:14:51.034]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:14:51.034]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:14:51.034]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:14:51.037]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:14:51.037]        </block>
[23:14:51.037]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:14:51.037]      </control>
[23:14:51.037]      // end if-block "powered_down"
[23:14:51.037]    </control>
[23:14:51.037]    <block atomic="false" info="">
[23:14:51.037]      __var DEBUG_PORT_VAL    = 0;
[23:14:51.037]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:14:51.037]      __var ACCESS_POINT_VAL  = 0;
[23:14:51.037]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:14:51.037]      __ap = 1; 
[23:14:51.037]        // -> [__ap <= 0x00000001]
[23:14:51.037]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:14:51.042]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:14:51.042]      __ap = 4;
[23:14:51.043]        // -> [__ap <= 0x00000004]
[23:14:51.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:51.046]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:14:51.046]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:14:51.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:51.048]    </block>
[23:14:51.048]    <block atomic="false" info="">
[23:14:51.048]      __var nReset = 0x80;
[23:14:51.049]        // -> [nReset <= 0x00000080]
[23:14:51.049]      __var canReadPins = 0;
[23:14:51.049]        // -> [canReadPins <= 0x00000000]
[23:14:51.049]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:14:51.050]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:14:51.050]        // -> [canReadPins <= 0x00000001]
[23:14:51.050]    </block>
[23:14:51.050]    <control if="" while="1" timeout="200" info="">
[23:14:51.050]      // while "1"  (timeout="200")
[23:14:51.050]      // while-condition  =>  TRUE
[23:14:51.050]      // while "1"  (timeout="200")
[23:14:51.050]      // while-condition  =>  TRUE
[23:14:51.050]      // while "1"  (timeout="200")
[23:14:51.050]      // while-condition  =>  TRUE
[23:14:51.050]      // while "1"  (timeout="200")
[23:14:51.050]      // while-condition  =>  TRUE
[23:14:51.050]      // while "1"  (timeout="200")
[23:14:51.050]      // while-condition  =>  TRUE
[23:14:51.054]      // while "1"  (timeout="200")
[23:14:51.054]      // while-condition  =>  TRUE
[23:14:51.054]      // while "1"  (timeout="200")
[23:14:51.054]      // while-condition  =>  TRUE
[23:14:51.054]      // while "1"  (timeout="200")
[23:14:51.054]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.055]      // while "1"  (timeout="200")
[23:14:51.055]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.058]      // while "1"  (timeout="200")
[23:14:51.058]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.062]      // while-condition  =>  TRUE
[23:14:51.062]      // while "1"  (timeout="200")
[23:14:51.066]      // while-condition  =>  TRUE
[23:14:51.066]      // while "1"  (timeout="200")
[23:14:51.066]      // while  =>  TIMEOUT
[23:14:51.066]      // end while "1"
[23:14:51.066]    </control>
[23:14:51.066]    <control if="canReadPins" while="" timeout="0" info="">
[23:14:51.066]      // if-block "canReadPins"
[23:14:51.066]        // =>  TRUE
[23:14:51.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:14:51.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:14:51.067]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:14:51.067]        // while-condition  =>  FALSE
[23:14:51.067]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:14:51.067]      </control>
[23:14:51.067]      // end if-block "canReadPins"
[23:14:51.067]    </control>
[23:14:51.067]    <control if="!canReadPins" while="" timeout="0" info="">
[23:14:51.067]      // if-block "!canReadPins"
[23:14:51.067]        // =>  FALSE
[23:14:51.067]      // skip if-block "!canReadPins"
[23:14:51.070]    </control>
[23:14:51.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:14:51.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:51.070]        // =>  TRUE
[23:14:51.070]      <block atomic="false" info="">
[23:14:51.070]        WriteAP(0x00, 0x190008);
[23:14:51.070]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:51.070]        WriteAP(0xF0, 0x01);
[23:14:51.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:51.076]      </block>
[23:14:51.076]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:51.076]    </control>
[23:14:51.076]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:14:51.076]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:51.076]        // =>  FALSE
[23:14:51.076]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:51.076]    </control>
[23:14:51.076]    <block atomic="false" info="">
[23:14:51.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:51.083]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:14:51.083]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:14:51.083]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:51.086]      __ap = 0; //lets make sure we reset the access point selection
[23:14:51.086]        // -> [__ap <= 0x00000000]
[23:14:51.086]    </block>
[23:14:51.086]  </sequence>
[23:14:51.086]  
[23:14:51.107]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:14:51.107]  
[23:14:51.107]  <debugvars>
[23:14:51.107]    // Pre-defined
[23:14:51.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:51.107]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:14:51.107]    __dp=0x00000000
[23:14:51.107]    __ap=0x00000000
[23:14:51.107]    __traceout=0x00000000      (Trace Disabled)
[23:14:51.107]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:51.107]    __FlashAddr=0x00000000
[23:14:51.107]    __FlashLen=0x00000000
[23:14:51.107]    __FlashArg=0x00000000
[23:14:51.107]    __FlashOp=0x00000000
[23:14:51.107]    __Result=0x00000000
[23:14:51.107]  </debugvars>
[23:14:51.107]  
[23:14:51.110]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:14:51.110]    <block atomic="false" info="">
[23:14:51.110]      __var deviceID = 0;
[23:14:51.110]        // -> [deviceID <= 0x00000000]
[23:14:51.110]      __var version = 0;
[23:14:51.110]        // -> [version <= 0x00000000]
[23:14:51.110]      __var partNum = 0;
[23:14:51.111]        // -> [partNum <= 0x00000000]
[23:14:51.111]      __var manuf = 0;
[23:14:51.111]        // -> [manuf <= 0x00000000]
[23:14:51.111]      __var isMSPM0G1X0X_G3X0X = 0;
[23:14:51.111]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:14:51.111]      __var isProduction = 0;
[23:14:51.111]        // -> [isProduction <= 0x00000000]
[23:14:51.111]      __var continueId = 0;
[23:14:51.111]        // -> [continueId <= 0x00000000]
[23:14:51.111]      deviceID =   Read32(0x41C40004);
[23:14:51.119]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:14:51.119]        // -> [deviceID <= 0x2BB8802F]
[23:14:51.119]      version = deviceID >> 28;
[23:14:51.119]        // -> [version <= 0x00000002]
[23:14:51.119]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:14:51.119]        // -> [partNum <= 0x0000BB88]
[23:14:51.119]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:14:51.119]        // -> [manuf <= 0x00000017]
[23:14:51.119]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:14:51.119]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:14:51.121]      isProduction = (version > 0);
[23:14:51.121]        // -> [isProduction <= 0x00000001]
[23:14:51.121]    </block>
[23:14:51.121]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:14:51.121]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:14:51.121]        // =>  FALSE
[23:14:51.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:14:51.121]    </control>
[23:14:51.122]    <control if="continueId == 4" while="" timeout="0" info="">
[23:14:51.122]      // if-block "continueId == 4"
[23:14:51.122]        // =>  FALSE
[23:14:51.122]      // skip if-block "continueId == 4"
[23:14:51.122]    </control>
[23:14:51.122]    <control if="!isProduction" while="" timeout="0" info="">
[23:14:51.122]      // if-block "!isProduction"
[23:14:51.122]        // =>  FALSE
[23:14:51.122]      // skip if-block "!isProduction"
[23:14:51.122]    </control>
[23:14:51.124]  </sequence>
[23:14:51.124]  
[23:16:30.728]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:16:30.728]  
[23:16:30.737]  <debugvars>
[23:16:30.737]    // Pre-defined
[23:16:30.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:30.737]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:30.737]    __dp=0x00000000
[23:16:30.737]    __ap=0x00000000
[23:16:30.737]    __traceout=0x00000000      (Trace Disabled)
[23:16:30.737]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:30.737]    __FlashAddr=0x00000000
[23:16:30.737]    __FlashLen=0x00000000
[23:16:30.737]    __FlashArg=0x00000000
[23:16:30.737]    __FlashOp=0x00000000
[23:16:30.737]    __Result=0x00000000
[23:16:30.737]  </debugvars>
[23:16:30.737]  
[23:16:30.737]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:16:30.737]    <block atomic="false" info="">
[23:16:30.739]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:16:30.740]        // -> [isSWJ <= 0x00000001]
[23:16:30.740]      __var hasDormant = __protocol & 0x00020000;
[23:16:30.740]        // -> [hasDormant <= 0x00000000]
[23:16:30.740]      __var protType   = __protocol & 0x0000FFFF;
[23:16:30.740]        // -> [protType <= 0x00000002]
[23:16:30.740]    </block>
[23:16:30.740]    <control if="protType == 1" while="" timeout="0" info="">
[23:16:30.740]      // if-block "protType == 1"
[23:16:30.740]        // =>  FALSE
[23:16:30.740]      // skip if-block "protType == 1"
[23:16:30.741]    </control>
[23:16:30.741]    <control if="protType == 2" while="" timeout="0" info="">
[23:16:30.741]      // if-block "protType == 2"
[23:16:30.741]        // =>  TRUE
[23:16:30.741]      <control if="isSWJ" while="" timeout="0" info="">
[23:16:30.741]        // if-block "isSWJ"
[23:16:30.741]          // =>  TRUE
[23:16:30.741]        <control if="hasDormant" while="" timeout="0" info="">
[23:16:30.741]          // if-block "hasDormant"
[23:16:30.741]            // =>  FALSE
[23:16:30.742]          // skip if-block "hasDormant"
[23:16:30.742]        </control>
[23:16:30.742]        <control if="!hasDormant" while="" timeout="0" info="">
[23:16:30.742]          // if-block "!hasDormant"
[23:16:30.742]            // =>  TRUE
[23:16:30.742]          <block atomic="false" info="">
[23:16:30.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:16:30.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:30.746]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:16:30.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:16:30.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:16:30.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:30.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:16:30.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:16:30.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:16:30.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:30.757]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:16:30.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:16:30.763]          </block>
[23:16:30.763]          // end if-block "!hasDormant"
[23:16:30.763]        </control>
[23:16:30.763]        // end if-block "isSWJ"
[23:16:30.763]      </control>
[23:16:30.763]      <control if="!isSWJ" while="" timeout="0" info="">
[23:16:30.763]        // if-block "!isSWJ"
[23:16:30.763]          // =>  FALSE
[23:16:30.763]        // skip if-block "!isSWJ"
[23:16:30.763]      </control>
[23:16:30.763]      <block atomic="false" info="">
[23:16:30.763]        ReadDP(0x0);
[23:16:30.766]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:16:30.766]      </block>
[23:16:30.766]      // end if-block "protType == 2"
[23:16:30.766]    </control>
[23:16:30.766]  </sequence>
[23:16:30.766]  
[23:16:30.766]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:16:30.766]  
[23:16:30.770]  <debugvars>
[23:16:30.770]    // Pre-defined
[23:16:30.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:30.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:30.770]    __dp=0x00000000
[23:16:30.770]    __ap=0x00000000
[23:16:30.770]    __traceout=0x00000000      (Trace Disabled)
[23:16:30.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:30.770]    __FlashAddr=0x00000000
[23:16:30.770]    __FlashLen=0x00000000
[23:16:30.770]    __FlashArg=0x00000000
[23:16:30.770]    __FlashOp=0x00000000
[23:16:30.770]    __Result=0x00000000
[23:16:30.770]  </debugvars>
[23:16:30.770]  
[23:16:30.770]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:16:30.770]    <block atomic="false" info="">
[23:16:30.770]      __var SW_DP_ABORT       = 0x0;
[23:16:30.770]        // -> [SW_DP_ABORT <= 0x00000000]
[23:16:30.770]      __var DP_CTRL_STAT      = 0x4;
[23:16:30.770]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:16:30.770]      __var DP_SELECT         = 0x8;
[23:16:30.770]        // -> [DP_SELECT <= 0x00000008]
[23:16:30.770]      __var powered_down      = 0;
[23:16:30.770]        // -> [powered_down <= 0x00000000]
[23:16:30.770]      WriteDP(DP_SELECT, 0x00000000);
[23:16:30.774]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:16:30.774]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:16:30.778]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:16:30.780]        // -> [powered_down <= 0x00000001]
[23:16:30.780]    </block>
[23:16:30.780]    <control if="powered_down" while="" timeout="0" info="">
[23:16:30.780]      // if-block "powered_down"
[23:16:30.780]        // =>  TRUE
[23:16:30.780]      <block atomic="false" info="">
[23:16:30.780]        Message(0, "Debug/System power-up request sent");
[23:16:30.782]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:16:30.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:16:30.783]      </block>
[23:16:30.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:16:30.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:16:30.786]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:16:30.786]        // while-condition  =>  FALSE
[23:16:30.786]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:16:30.786]      </control>
[23:16:30.786]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:16:30.786]        // if-block "(__protocol & 0xFFFF) == 1"
[23:16:30.786]          // =>  FALSE
[23:16:30.786]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:16:30.786]      </control>
[23:16:30.786]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:16:30.786]        // if-block "(__protocol & 0xFFFF) == 2"
[23:16:30.786]          // =>  TRUE
[23:16:30.786]        <block atomic="false" info="">
[23:16:30.786]          Message(0, "executing SWD power up");
[23:16:30.786]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:16:30.792]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:16:30.794]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:16:30.800]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:16:30.800]        </block>
[23:16:30.800]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:16:30.800]      </control>
[23:16:30.800]      // end if-block "powered_down"
[23:16:30.800]    </control>
[23:16:30.800]    <block atomic="false" info="">
[23:16:30.800]      __var DEBUG_PORT_VAL    = 0;
[23:16:30.800]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:16:30.800]      __var ACCESS_POINT_VAL  = 0;
[23:16:30.800]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:16:30.800]      __ap = 1; 
[23:16:30.800]        // -> [__ap <= 0x00000001]
[23:16:30.800]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:16:30.802]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:16:30.802]      __ap = 4;
[23:16:30.802]        // -> [__ap <= 0x00000004]
[23:16:30.802]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:16:30.806]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:16:30.806]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:16:30.806]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:16:30.810]    </block>
[23:16:30.810]    <block atomic="false" info="">
[23:16:30.811]      __var nReset = 0x80;
[23:16:30.811]        // -> [nReset <= 0x00000080]
[23:16:30.811]      __var canReadPins = 0;
[23:16:30.811]        // -> [canReadPins <= 0x00000000]
[23:16:30.811]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:16:30.812]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:16:30.812]        // -> [canReadPins <= 0x00000001]
[23:16:30.812]    </block>
[23:16:30.812]    <control if="" while="1" timeout="200" info="">
[23:16:30.812]      // while "1"  (timeout="200")
[23:16:30.812]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.814]      // while "1"  (timeout="200")
[23:16:30.814]      // while-condition  =>  TRUE
[23:16:30.818]      // while "1"  (timeout="200")
[23:16:30.818]      // while  =>  TIMEOUT
[23:16:30.818]      // end while "1"
[23:16:30.818]    </control>
[23:16:30.818]    <control if="canReadPins" while="" timeout="0" info="">
[23:16:30.818]      // if-block "canReadPins"
[23:16:30.818]        // =>  TRUE
[23:16:30.818]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:16:30.818]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:16:30.820]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:16:30.820]        // while-condition  =>  FALSE
[23:16:30.820]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:16:30.820]      </control>
[23:16:30.820]      // end if-block "canReadPins"
[23:16:30.820]    </control>
[23:16:30.820]    <control if="!canReadPins" while="" timeout="0" info="">
[23:16:30.820]      // if-block "!canReadPins"
[23:16:30.820]        // =>  FALSE
[23:16:30.822]      // skip if-block "!canReadPins"
[23:16:30.822]    </control>
[23:16:30.822]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:16:30.822]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:16:30.822]        // =>  TRUE
[23:16:30.822]      <block atomic="false" info="">
[23:16:30.822]        WriteAP(0x00, 0x190008);
[23:16:30.822]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:16:30.822]        WriteAP(0xF0, 0x01);
[23:16:30.834]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:16:30.834]      </block>
[23:16:30.834]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:16:30.838]    </control>
[23:16:30.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:16:30.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:16:30.838]        // =>  FALSE
[23:16:30.838]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:16:30.838]    </control>
[23:16:30.838]    <block atomic="false" info="">
[23:16:30.838]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:16:30.842]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:16:30.842]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:16:30.842]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:16:30.842]      __ap = 0; //lets make sure we reset the access point selection
[23:16:30.842]        // -> [__ap <= 0x00000000]
[23:16:30.842]    </block>
[23:16:30.842]  </sequence>
[23:16:30.842]  
[23:16:30.880]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:16:30.880]  
[23:16:30.881]  <debugvars>
[23:16:30.881]    // Pre-defined
[23:16:30.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:30.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:30.881]    __dp=0x00000000
[23:16:30.881]    __ap=0x00000000
[23:16:30.881]    __traceout=0x00000000      (Trace Disabled)
[23:16:30.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:30.881]    __FlashAddr=0x00000000
[23:16:30.881]    __FlashLen=0x00000000
[23:16:30.881]    __FlashArg=0x00000000
[23:16:30.881]    __FlashOp=0x00000000
[23:16:30.881]    __Result=0x00000000
[23:16:30.881]  </debugvars>
[23:16:30.881]  
[23:16:30.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:16:30.881]    <block atomic="false" info="">
[23:16:30.881]      __var deviceID = 0;
[23:16:30.881]        // -> [deviceID <= 0x00000000]
[23:16:30.881]      __var version = 0;
[23:16:30.881]        // -> [version <= 0x00000000]
[23:16:30.881]      __var partNum = 0;
[23:16:30.881]        // -> [partNum <= 0x00000000]
[23:16:30.884]      __var manuf = 0;
[23:16:30.884]        // -> [manuf <= 0x00000000]
[23:16:30.884]      __var isMSPM0G1X0X_G3X0X = 0;
[23:16:30.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:16:30.884]      __var isProduction = 0;
[23:16:30.884]        // -> [isProduction <= 0x00000000]
[23:16:30.884]      __var continueId = 0;
[23:16:30.884]        // -> [continueId <= 0x00000000]
[23:16:30.884]      deviceID =   Read32(0x41C40004);
[23:16:30.887]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:16:30.890]        // -> [deviceID <= 0x2BB8802F]
[23:16:30.890]      version = deviceID >> 28;
[23:16:30.890]        // -> [version <= 0x00000002]
[23:16:30.890]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:16:30.890]        // -> [partNum <= 0x0000BB88]
[23:16:30.890]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:16:30.891]        // -> [manuf <= 0x00000017]
[23:16:30.891]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:16:30.891]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:16:30.891]      isProduction = (version > 0);
[23:16:30.891]        // -> [isProduction <= 0x00000001]
[23:16:30.891]    </block>
[23:16:30.891]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:16:30.892]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:16:30.892]        // =>  FALSE
[23:16:30.892]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:16:30.892]    </control>
[23:16:30.892]    <control if="continueId == 4" while="" timeout="0" info="">
[23:16:30.892]      // if-block "continueId == 4"
[23:16:30.892]        // =>  FALSE
[23:16:30.892]      // skip if-block "continueId == 4"
[23:16:30.892]    </control>
[23:16:30.892]    <control if="!isProduction" while="" timeout="0" info="">
[23:16:30.892]      // if-block "!isProduction"
[23:16:30.892]        // =>  FALSE
[23:16:30.892]      // skip if-block "!isProduction"
[23:16:30.892]    </control>
[23:16:30.892]  </sequence>
[23:16:30.892]  
[23:23:14.759]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:23:14.759]  
[23:23:14.759]  <debugvars>
[23:23:14.759]    // Pre-defined
[23:23:14.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:14.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:14.759]    __dp=0x00000000
[23:23:14.759]    __ap=0x00000000
[23:23:14.759]    __traceout=0x00000000      (Trace Disabled)
[23:23:14.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:14.759]    __FlashAddr=0x00000000
[23:23:14.759]    __FlashLen=0x00000000
[23:23:14.759]    __FlashArg=0x00000000
[23:23:14.759]    __FlashOp=0x00000000
[23:23:14.761]    __Result=0x00000000
[23:23:14.761]  </debugvars>
[23:23:14.761]  
[23:23:14.761]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:23:14.761]    <block atomic="false" info="">
[23:23:14.761]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:23:14.762]        // -> [isSWJ <= 0x00000001]
[23:23:14.762]      __var hasDormant = __protocol & 0x00020000;
[23:23:14.762]        // -> [hasDormant <= 0x00000000]
[23:23:14.762]      __var protType   = __protocol & 0x0000FFFF;
[23:23:14.763]        // -> [protType <= 0x00000002]
[23:23:14.763]    </block>
[23:23:14.763]    <control if="protType == 1" while="" timeout="0" info="">
[23:23:14.763]      // if-block "protType == 1"
[23:23:14.763]        // =>  FALSE
[23:23:14.763]      // skip if-block "protType == 1"
[23:23:14.763]    </control>
[23:23:14.763]    <control if="protType == 2" while="" timeout="0" info="">
[23:23:14.763]      // if-block "protType == 2"
[23:23:14.763]        // =>  TRUE
[23:23:14.763]      <control if="isSWJ" while="" timeout="0" info="">
[23:23:14.763]        // if-block "isSWJ"
[23:23:14.763]          // =>  TRUE
[23:23:14.763]        <control if="hasDormant" while="" timeout="0" info="">
[23:23:14.763]          // if-block "hasDormant"
[23:23:14.763]            // =>  FALSE
[23:23:14.763]          // skip if-block "hasDormant"
[23:23:14.763]        </control>
[23:23:14.763]        <control if="!hasDormant" while="" timeout="0" info="">
[23:23:14.763]          // if-block "!hasDormant"
[23:23:14.763]            // =>  TRUE
[23:23:14.763]          <block atomic="false" info="">
[23:23:14.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:23:14.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:14.765]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:23:14.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:23:14.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:23:14.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:14.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:23:14.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:23:14.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:23:14.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:14.778]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:23:14.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:23:14.778]          </block>
[23:23:14.778]          // end if-block "!hasDormant"
[23:23:14.778]        </control>
[23:23:14.778]        // end if-block "isSWJ"
[23:23:14.778]      </control>
[23:23:14.778]      <control if="!isSWJ" while="" timeout="0" info="">
[23:23:14.778]        // if-block "!isSWJ"
[23:23:14.778]          // =>  FALSE
[23:23:14.781]        // skip if-block "!isSWJ"
[23:23:14.781]      </control>
[23:23:14.781]      <block atomic="false" info="">
[23:23:14.781]        ReadDP(0x0);
[23:23:14.781]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:23:14.781]      </block>
[23:23:14.781]      // end if-block "protType == 2"
[23:23:14.781]    </control>
[23:23:14.781]  </sequence>
[23:23:14.781]  
[23:23:14.786]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:23:14.786]  
[23:23:14.786]  <debugvars>
[23:23:14.786]    // Pre-defined
[23:23:14.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:14.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:14.786]    __dp=0x00000000
[23:23:14.786]    __ap=0x00000000
[23:23:14.786]    __traceout=0x00000000      (Trace Disabled)
[23:23:14.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:14.788]    __FlashAddr=0x00000000
[23:23:14.788]    __FlashLen=0x00000000
[23:23:14.788]    __FlashArg=0x00000000
[23:23:14.788]    __FlashOp=0x00000000
[23:23:14.788]    __Result=0x00000000
[23:23:14.788]  </debugvars>
[23:23:14.788]  
[23:23:14.788]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:23:14.788]    <block atomic="false" info="">
[23:23:14.789]      __var SW_DP_ABORT       = 0x0;
[23:23:14.790]        // -> [SW_DP_ABORT <= 0x00000000]
[23:23:14.790]      __var DP_CTRL_STAT      = 0x4;
[23:23:14.790]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:23:14.790]      __var DP_SELECT         = 0x8;
[23:23:14.790]        // -> [DP_SELECT <= 0x00000008]
[23:23:14.790]      __var powered_down      = 0;
[23:23:14.790]        // -> [powered_down <= 0x00000000]
[23:23:14.790]      WriteDP(DP_SELECT, 0x00000000);
[23:23:14.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:23:14.791]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:23:14.793]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:23:14.793]        // -> [powered_down <= 0x00000001]
[23:23:14.793]    </block>
[23:23:14.793]    <control if="powered_down" while="" timeout="0" info="">
[23:23:14.793]      // if-block "powered_down"
[23:23:14.793]        // =>  TRUE
[23:23:14.793]      <block atomic="false" info="">
[23:23:14.793]        Message(0, "Debug/System power-up request sent");
[23:23:14.795]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:23:14.797]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:23:14.798]      </block>
[23:23:14.798]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:23:14.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:23:14.802]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:23:14.805]        // while-condition  =>  FALSE
[23:23:14.805]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:23:14.805]      </control>
[23:23:14.805]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:23:14.805]        // if-block "(__protocol & 0xFFFF) == 1"
[23:23:14.805]          // =>  FALSE
[23:23:14.805]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:23:14.805]      </control>
[23:23:14.806]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:23:14.806]        // if-block "(__protocol & 0xFFFF) == 2"
[23:23:14.806]          // =>  TRUE
[23:23:14.806]        <block atomic="false" info="">
[23:23:14.806]          Message(0, "executing SWD power up");
[23:23:14.808]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:23:14.809]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:23:14.809]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:23:14.811]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:23:14.811]        </block>
[23:23:14.811]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:23:14.811]      </control>
[23:23:14.811]      // end if-block "powered_down"
[23:23:14.811]    </control>
[23:23:14.811]    <block atomic="false" info="">
[23:23:14.811]      __var DEBUG_PORT_VAL    = 0;
[23:23:14.811]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:23:14.811]      __var ACCESS_POINT_VAL  = 0;
[23:23:14.811]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:23:14.811]      __ap = 1; 
[23:23:14.813]        // -> [__ap <= 0x00000001]
[23:23:14.813]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:23:14.816]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:23:14.816]      __ap = 4;
[23:23:14.816]        // -> [__ap <= 0x00000004]
[23:23:14.816]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:14.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:23:14.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:23:14.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:14.823]    </block>
[23:23:14.826]    <block atomic="false" info="">
[23:23:14.826]      __var nReset = 0x80;
[23:23:14.826]        // -> [nReset <= 0x00000080]
[23:23:14.826]      __var canReadPins = 0;
[23:23:14.826]        // -> [canReadPins <= 0x00000000]
[23:23:14.826]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:23:14.828]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:23:14.828]        // -> [canReadPins <= 0x00000001]
[23:23:14.828]    </block>
[23:23:14.828]    <control if="" while="1" timeout="200" info="">
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.828]      // while-condition  =>  TRUE
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.828]      // while-condition  =>  TRUE
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.828]      // while-condition  =>  TRUE
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.828]      // while-condition  =>  TRUE
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.828]      // while-condition  =>  TRUE
[23:23:14.828]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.830]      // while-condition  =>  TRUE
[23:23:14.830]      // while "1"  (timeout="200")
[23:23:14.834]      // while-condition  =>  TRUE
[23:23:14.834]      // while "1"  (timeout="200")
[23:23:14.834]      // while  =>  TIMEOUT
[23:23:14.834]      // end while "1"
[23:23:14.834]    </control>
[23:23:14.834]    <control if="canReadPins" while="" timeout="0" info="">
[23:23:14.834]      // if-block "canReadPins"
[23:23:14.834]        // =>  TRUE
[23:23:14.834]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:23:14.834]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:23:14.834]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:23:14.834]        // while-condition  =>  FALSE
[23:23:14.834]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:23:14.834]      </control>
[23:23:14.834]      // end if-block "canReadPins"
[23:23:14.834]    </control>
[23:23:14.834]    <control if="!canReadPins" while="" timeout="0" info="">
[23:23:14.834]      // if-block "!canReadPins"
[23:23:14.834]        // =>  FALSE
[23:23:14.834]      // skip if-block "!canReadPins"
[23:23:14.834]    </control>
[23:23:14.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:23:14.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:14.838]        // =>  TRUE
[23:23:14.838]      <block atomic="false" info="">
[23:23:14.838]        WriteAP(0x00, 0x190008);
[23:23:14.842]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:14.842]        WriteAP(0xF0, 0x01);
[23:23:14.848]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:14.848]      </block>
[23:23:14.848]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:14.848]    </control>
[23:23:14.848]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:23:14.848]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:14.848]        // =>  FALSE
[23:23:14.848]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:14.848]    </control>
[23:23:14.848]    <block atomic="false" info="">
[23:23:14.848]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:14.852]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:23:14.852]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:23:14.852]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:14.855]      __ap = 0; //lets make sure we reset the access point selection
[23:23:14.855]        // -> [__ap <= 0x00000000]
[23:23:14.855]    </block>
[23:23:14.855]  </sequence>
[23:23:14.855]  
[23:23:14.880]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:23:14.880]  
[23:23:14.880]  <debugvars>
[23:23:14.880]    // Pre-defined
[23:23:14.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:14.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:14.880]    __dp=0x00000000
[23:23:14.880]    __ap=0x00000000
[23:23:14.880]    __traceout=0x00000000      (Trace Disabled)
[23:23:14.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:14.880]    __FlashAddr=0x00000000
[23:23:14.880]    __FlashLen=0x00000000
[23:23:14.880]    __FlashArg=0x00000000
[23:23:14.880]    __FlashOp=0x00000000
[23:23:14.880]    __Result=0x00000000
[23:23:14.880]  </debugvars>
[23:23:14.880]  
[23:23:14.880]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:23:14.880]    <block atomic="false" info="">
[23:23:14.880]      __var deviceID = 0;
[23:23:14.880]        // -> [deviceID <= 0x00000000]
[23:23:14.880]      __var version = 0;
[23:23:14.880]        // -> [version <= 0x00000000]
[23:23:14.880]      __var partNum = 0;
[23:23:14.880]        // -> [partNum <= 0x00000000]
[23:23:14.880]      __var manuf = 0;
[23:23:14.880]        // -> [manuf <= 0x00000000]
[23:23:14.880]      __var isMSPM0G1X0X_G3X0X = 0;
[23:23:14.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:23:14.883]      __var isProduction = 0;
[23:23:14.883]        // -> [isProduction <= 0x00000000]
[23:23:14.883]      __var continueId = 0;
[23:23:14.883]        // -> [continueId <= 0x00000000]
[23:23:14.883]      deviceID =   Read32(0x41C40004);
[23:23:14.887]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:23:14.887]        // -> [deviceID <= 0x2BB8802F]
[23:23:14.888]      version = deviceID >> 28;
[23:23:14.888]        // -> [version <= 0x00000002]
[23:23:14.888]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:23:14.888]        // -> [partNum <= 0x0000BB88]
[23:23:14.888]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:23:14.889]        // -> [manuf <= 0x00000017]
[23:23:14.889]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:23:14.889]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:23:14.889]      isProduction = (version > 0);
[23:23:14.889]        // -> [isProduction <= 0x00000001]
[23:23:14.889]    </block>
[23:23:14.889]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:23:14.889]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:23:14.889]        // =>  FALSE
[23:23:14.889]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:23:14.889]    </control>
[23:23:14.889]    <control if="continueId == 4" while="" timeout="0" info="">
[23:23:14.889]      // if-block "continueId == 4"
[23:23:14.891]        // =>  FALSE
[23:23:14.891]      // skip if-block "continueId == 4"
[23:23:14.891]    </control>
[23:23:14.891]    <control if="!isProduction" while="" timeout="0" info="">
[23:23:14.891]      // if-block "!isProduction"
[23:23:14.891]        // =>  FALSE
[23:23:14.891]      // skip if-block "!isProduction"
[23:23:14.891]    </control>
[23:23:14.891]  </sequence>
[23:23:14.891]  
[23:25:43.321]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:25:43.321]  
[23:25:43.321]  <debugvars>
[23:25:43.322]    // Pre-defined
[23:25:43.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:43.322]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:43.322]    __dp=0x00000000
[23:25:43.322]    __ap=0x00000000
[23:25:43.322]    __traceout=0x00000000      (Trace Disabled)
[23:25:43.322]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:43.322]    __FlashAddr=0x00000000
[23:25:43.322]    __FlashLen=0x00000000
[23:25:43.322]    __FlashArg=0x00000000
[23:25:43.322]    __FlashOp=0x00000000
[23:25:43.322]    __Result=0x00000000
[23:25:43.323]  </debugvars>
[23:25:43.323]  
[23:25:43.323]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:25:43.323]    <block atomic="false" info="">
[23:25:43.323]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:25:43.323]        // -> [isSWJ <= 0x00000001]
[23:25:43.323]      __var hasDormant = __protocol & 0x00020000;
[23:25:43.323]        // -> [hasDormant <= 0x00000000]
[23:25:43.323]      __var protType   = __protocol & 0x0000FFFF;
[23:25:43.323]        // -> [protType <= 0x00000002]
[23:25:43.323]    </block>
[23:25:43.323]    <control if="protType == 1" while="" timeout="0" info="">
[23:25:43.323]      // if-block "protType == 1"
[23:25:43.325]        // =>  FALSE
[23:25:43.325]      // skip if-block "protType == 1"
[23:25:43.325]    </control>
[23:25:43.325]    <control if="protType == 2" while="" timeout="0" info="">
[23:25:43.325]      // if-block "protType == 2"
[23:25:43.325]        // =>  TRUE
[23:25:43.325]      <control if="isSWJ" while="" timeout="0" info="">
[23:25:43.325]        // if-block "isSWJ"
[23:25:43.325]          // =>  TRUE
[23:25:43.325]        <control if="hasDormant" while="" timeout="0" info="">
[23:25:43.325]          // if-block "hasDormant"
[23:25:43.325]            // =>  FALSE
[23:25:43.325]          // skip if-block "hasDormant"
[23:25:43.325]        </control>
[23:25:43.325]        <control if="!hasDormant" while="" timeout="0" info="">
[23:25:43.325]          // if-block "!hasDormant"
[23:25:43.325]            // =>  TRUE
[23:25:43.325]          <block atomic="false" info="">
[23:25:43.325]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:25:43.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:43.325]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:25:43.329]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:25:43.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:25:43.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:43.331]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:25:43.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:25:43.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:25:43.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:43.334]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:25:43.334]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:25:43.334]          </block>
[23:25:43.334]          // end if-block "!hasDormant"
[23:25:43.334]        </control>
[23:25:43.334]        // end if-block "isSWJ"
[23:25:43.334]      </control>
[23:25:43.334]      <control if="!isSWJ" while="" timeout="0" info="">
[23:25:43.334]        // if-block "!isSWJ"
[23:25:43.334]          // =>  FALSE
[23:25:43.334]        // skip if-block "!isSWJ"
[23:25:43.334]      </control>
[23:25:43.334]      <block atomic="false" info="">
[23:25:43.337]        ReadDP(0x0);
[23:25:43.338]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:25:43.338]      </block>
[23:25:43.338]      // end if-block "protType == 2"
[23:25:43.338]    </control>
[23:25:43.338]  </sequence>
[23:25:43.338]  
[23:25:43.341]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:25:43.341]  
[23:25:43.341]  <debugvars>
[23:25:43.341]    // Pre-defined
[23:25:43.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:43.341]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:43.341]    __dp=0x00000000
[23:25:43.341]    __ap=0x00000000
[23:25:43.341]    __traceout=0x00000000      (Trace Disabled)
[23:25:43.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:43.341]    __FlashAddr=0x00000000
[23:25:43.345]    __FlashLen=0x00000000
[23:25:43.345]    __FlashArg=0x00000000
[23:25:43.345]    __FlashOp=0x00000000
[23:25:43.345]    __Result=0x00000000
[23:25:43.345]  </debugvars>
[23:25:43.345]  
[23:25:43.345]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:25:43.346]    <block atomic="false" info="">
[23:25:43.346]      __var SW_DP_ABORT       = 0x0;
[23:25:43.346]        // -> [SW_DP_ABORT <= 0x00000000]
[23:25:43.346]      __var DP_CTRL_STAT      = 0x4;
[23:25:43.346]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:25:43.346]      __var DP_SELECT         = 0x8;
[23:25:43.346]        // -> [DP_SELECT <= 0x00000008]
[23:25:43.346]      __var powered_down      = 0;
[23:25:43.346]        // -> [powered_down <= 0x00000000]
[23:25:43.346]      WriteDP(DP_SELECT, 0x00000000);
[23:25:43.348]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:25:43.348]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:25:43.350]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:25:43.350]        // -> [powered_down <= 0x00000001]
[23:25:43.350]    </block>
[23:25:43.351]    <control if="powered_down" while="" timeout="0" info="">
[23:25:43.351]      // if-block "powered_down"
[23:25:43.351]        // =>  TRUE
[23:25:43.351]      <block atomic="false" info="">
[23:25:43.351]        Message(0, "Debug/System power-up request sent");
[23:25:43.352]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:25:43.354]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:25:43.354]      </block>
[23:25:43.354]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:25:43.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:25:43.354]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:25:43.354]        // while-condition  =>  FALSE
[23:25:43.354]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:25:43.354]      </control>
[23:25:43.354]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:25:43.354]        // if-block "(__protocol & 0xFFFF) == 1"
[23:25:43.358]          // =>  FALSE
[23:25:43.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:25:43.358]      </control>
[23:25:43.358]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:25:43.358]        // if-block "(__protocol & 0xFFFF) == 2"
[23:25:43.358]          // =>  TRUE
[23:25:43.358]        <block atomic="false" info="">
[23:25:43.358]          Message(0, "executing SWD power up");
[23:25:43.360]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:25:43.363]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:25:43.363]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:25:43.363]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:25:43.366]        </block>
[23:25:43.366]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:25:43.366]      </control>
[23:25:43.366]      // end if-block "powered_down"
[23:25:43.366]    </control>
[23:25:43.366]    <block atomic="false" info="">
[23:25:43.367]      __var DEBUG_PORT_VAL    = 0;
[23:25:43.367]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:25:43.367]      __var ACCESS_POINT_VAL  = 0;
[23:25:43.367]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:25:43.367]      __ap = 1; 
[23:25:43.367]        // -> [__ap <= 0x00000001]
[23:25:43.367]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:25:43.371]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:25:43.371]      __ap = 4;
[23:25:43.372]        // -> [__ap <= 0x00000004]
[23:25:43.372]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:25:43.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:25:43.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:25:43.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:25:43.374]    </block>
[23:25:43.374]    <block atomic="false" info="">
[23:25:43.374]      __var nReset = 0x80;
[23:25:43.374]        // -> [nReset <= 0x00000080]
[23:25:43.374]      __var canReadPins = 0;
[23:25:43.374]        // -> [canReadPins <= 0x00000000]
[23:25:43.374]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:25:43.378]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:25:43.378]        // -> [canReadPins <= 0x00000001]
[23:25:43.378]    </block>
[23:25:43.378]    <control if="" while="1" timeout="200" info="">
[23:25:43.378]      // while "1"  (timeout="200")
[23:25:43.378]      // while-condition  =>  TRUE
[23:25:43.378]      // while "1"  (timeout="200")
[23:25:43.378]      // while-condition  =>  TRUE
[23:25:43.381]      // while "1"  (timeout="200")
[23:25:43.381]      // while  =>  TIMEOUT
[23:25:43.381]      // end while "1"
[23:25:43.381]    </control>
[23:25:43.381]    <control if="canReadPins" while="" timeout="0" info="">
[23:25:43.381]      // if-block "canReadPins"
[23:25:43.381]        // =>  TRUE
[23:25:43.381]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:25:43.381]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:25:43.382]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:25:43.382]        // while-condition  =>  FALSE
[23:25:43.382]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:25:43.383]      </control>
[23:25:43.383]      // end if-block "canReadPins"
[23:25:43.383]    </control>
[23:25:43.383]    <control if="!canReadPins" while="" timeout="0" info="">
[23:25:43.383]      // if-block "!canReadPins"
[23:25:43.383]        // =>  FALSE
[23:25:43.383]      // skip if-block "!canReadPins"
[23:25:43.383]    </control>
[23:25:43.383]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:25:43.383]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:25:43.383]        // =>  TRUE
[23:25:43.383]      <block atomic="false" info="">
[23:25:43.383]        WriteAP(0x00, 0x190008);
[23:25:43.386]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:25:43.386]        WriteAP(0xF0, 0x01);
[23:25:43.391]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:25:43.391]      </block>
[23:25:43.391]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:25:43.391]    </control>
[23:25:43.391]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:25:43.391]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:25:43.391]        // =>  FALSE
[23:25:43.395]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:25:43.395]    </control>
[23:25:43.395]    <block atomic="false" info="">
[23:25:43.395]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:25:43.401]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:25:43.401]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:25:43.401]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:25:43.403]      __ap = 0; //lets make sure we reset the access point selection
[23:25:43.403]        // -> [__ap <= 0x00000000]
[23:25:43.403]    </block>
[23:25:43.403]  </sequence>
[23:25:43.403]  
[23:25:43.425]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:25:43.425]  
[23:25:43.425]  <debugvars>
[23:25:43.425]    // Pre-defined
[23:25:43.425]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:43.425]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:43.425]    __dp=0x00000000
[23:25:43.425]    __ap=0x00000000
[23:25:43.425]    __traceout=0x00000000      (Trace Disabled)
[23:25:43.425]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:43.425]    __FlashAddr=0x00000000
[23:25:43.425]    __FlashLen=0x00000000
[23:25:43.427]    __FlashArg=0x00000000
[23:25:43.427]    __FlashOp=0x00000000
[23:25:43.427]    __Result=0x00000000
[23:25:43.427]  </debugvars>
[23:25:43.427]  
[23:25:43.427]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:25:43.427]    <block atomic="false" info="">
[23:25:43.427]      __var deviceID = 0;
[23:25:43.427]        // -> [deviceID <= 0x00000000]
[23:25:43.427]      __var version = 0;
[23:25:43.427]        // -> [version <= 0x00000000]
[23:25:43.427]      __var partNum = 0;
[23:25:43.427]        // -> [partNum <= 0x00000000]
[23:25:43.427]      __var manuf = 0;
[23:25:43.427]        // -> [manuf <= 0x00000000]
[23:25:43.427]      __var isMSPM0G1X0X_G3X0X = 0;
[23:25:43.427]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:25:43.427]      __var isProduction = 0;
[23:25:43.427]        // -> [isProduction <= 0x00000000]
[23:25:43.427]      __var continueId = 0;
[23:25:43.427]        // -> [continueId <= 0x00000000]
[23:25:43.427]      deviceID =   Read32(0x41C40004);
[23:25:43.431]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:25:43.431]        // -> [deviceID <= 0x2BB8802F]
[23:25:43.431]      version = deviceID >> 28;
[23:25:43.435]        // -> [version <= 0x00000002]
[23:25:43.435]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:25:43.435]        // -> [partNum <= 0x0000BB88]
[23:25:43.435]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:25:43.435]        // -> [manuf <= 0x00000017]
[23:25:43.435]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:25:43.435]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:25:43.435]      isProduction = (version > 0);
[23:25:43.435]        // -> [isProduction <= 0x00000001]
[23:25:43.435]    </block>
[23:25:43.435]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:25:43.435]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:25:43.435]        // =>  FALSE
[23:25:43.435]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:25:43.437]    </control>
[23:25:43.437]    <control if="continueId == 4" while="" timeout="0" info="">
[23:25:43.437]      // if-block "continueId == 4"
[23:25:43.437]        // =>  FALSE
[23:25:43.437]      // skip if-block "continueId == 4"
[23:25:43.437]    </control>
[23:25:43.437]    <control if="!isProduction" while="" timeout="0" info="">
[23:25:43.437]      // if-block "!isProduction"
[23:25:43.437]        // =>  FALSE
[23:25:43.437]      // skip if-block "!isProduction"
[23:25:43.437]    </control>
[23:25:43.437]  </sequence>
[23:25:43.437]  
[23:28:21.844]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:28:21.844]  
[23:28:21.854]  <debugvars>
[23:28:21.854]    // Pre-defined
[23:28:21.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:21.854]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:21.854]    __dp=0x00000000
[23:28:21.854]    __ap=0x00000000
[23:28:21.854]    __traceout=0x00000000      (Trace Disabled)
[23:28:21.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:21.854]    __FlashAddr=0x00000000
[23:28:21.854]    __FlashLen=0x00000000
[23:28:21.854]    __FlashArg=0x00000000
[23:28:21.854]    __FlashOp=0x00000000
[23:28:21.854]    __Result=0x00000000
[23:28:21.854]  </debugvars>
[23:28:21.856]  
[23:28:21.856]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:28:21.856]    <block atomic="false" info="">
[23:28:21.856]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:28:21.856]        // -> [isSWJ <= 0x00000001]
[23:28:21.856]      __var hasDormant = __protocol & 0x00020000;
[23:28:21.856]        // -> [hasDormant <= 0x00000000]
[23:28:21.856]      __var protType   = __protocol & 0x0000FFFF;
[23:28:21.856]        // -> [protType <= 0x00000002]
[23:28:21.856]    </block>
[23:28:21.856]    <control if="protType == 1" while="" timeout="0" info="">
[23:28:21.856]      // if-block "protType == 1"
[23:28:21.856]        // =>  FALSE
[23:28:21.856]      // skip if-block "protType == 1"
[23:28:21.856]    </control>
[23:28:21.856]    <control if="protType == 2" while="" timeout="0" info="">
[23:28:21.856]      // if-block "protType == 2"
[23:28:21.856]        // =>  TRUE
[23:28:21.856]      <control if="isSWJ" while="" timeout="0" info="">
[23:28:21.856]        // if-block "isSWJ"
[23:28:21.856]          // =>  TRUE
[23:28:21.856]        <control if="hasDormant" while="" timeout="0" info="">
[23:28:21.856]          // if-block "hasDormant"
[23:28:21.856]            // =>  FALSE
[23:28:21.856]          // skip if-block "hasDormant"
[23:28:21.856]        </control>
[23:28:21.856]        <control if="!hasDormant" while="" timeout="0" info="">
[23:28:21.856]          // if-block "!hasDormant"
[23:28:21.856]            // =>  TRUE
[23:28:21.856]          <block atomic="false" info="">
[23:28:21.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:28:21.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:21.860]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:28:21.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:28:21.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:28:21.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:21.864]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:28:21.864]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:28:21.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:28:21.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:21.868]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:28:21.868]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:28:21.868]          </block>
[23:28:21.868]          // end if-block "!hasDormant"
[23:28:21.868]        </control>
[23:28:21.868]        // end if-block "isSWJ"
[23:28:21.868]      </control>
[23:28:21.868]      <control if="!isSWJ" while="" timeout="0" info="">
[23:28:21.868]        // if-block "!isSWJ"
[23:28:21.868]          // =>  FALSE
[23:28:21.868]        // skip if-block "!isSWJ"
[23:28:21.868]      </control>
[23:28:21.868]      <block atomic="false" info="">
[23:28:21.868]        ReadDP(0x0);
[23:28:21.873]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:28:21.874]      </block>
[23:28:21.874]      // end if-block "protType == 2"
[23:28:21.874]    </control>
[23:28:21.874]  </sequence>
[23:28:21.874]  
[23:28:21.877]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:28:21.877]  
[23:28:21.877]  <debugvars>
[23:28:21.877]    // Pre-defined
[23:28:21.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:21.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:21.877]    __dp=0x00000000
[23:28:21.877]    __ap=0x00000000
[23:28:21.877]    __traceout=0x00000000      (Trace Disabled)
[23:28:21.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:21.877]    __FlashAddr=0x00000000
[23:28:21.877]    __FlashLen=0x00000000
[23:28:21.877]    __FlashArg=0x00000000
[23:28:21.877]    __FlashOp=0x00000000
[23:28:21.877]    __Result=0x00000000
[23:28:21.877]  </debugvars>
[23:28:21.877]  
[23:28:21.877]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:28:21.877]    <block atomic="false" info="">
[23:28:21.877]      __var SW_DP_ABORT       = 0x0;
[23:28:21.877]        // -> [SW_DP_ABORT <= 0x00000000]
[23:28:21.877]      __var DP_CTRL_STAT      = 0x4;
[23:28:21.877]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:28:21.877]      __var DP_SELECT         = 0x8;
[23:28:21.877]        // -> [DP_SELECT <= 0x00000008]
[23:28:21.877]      __var powered_down      = 0;
[23:28:21.877]        // -> [powered_down <= 0x00000000]
[23:28:21.877]      WriteDP(DP_SELECT, 0x00000000);
[23:28:21.881]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:28:21.881]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:28:21.884]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:28:21.884]        // -> [powered_down <= 0x00000001]
[23:28:21.884]    </block>
[23:28:21.885]    <control if="powered_down" while="" timeout="0" info="">
[23:28:21.886]      // if-block "powered_down"
[23:28:21.886]        // =>  TRUE
[23:28:21.886]      <block atomic="false" info="">
[23:28:21.886]        Message(0, "Debug/System power-up request sent");
[23:28:21.887]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:28:21.890]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:28:21.890]      </block>
[23:28:21.890]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:28:21.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:28:21.895]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:28:21.895]        // while-condition  =>  FALSE
[23:28:21.895]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:28:21.895]      </control>
[23:28:21.895]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:28:21.895]        // if-block "(__protocol & 0xFFFF) == 1"
[23:28:21.895]          // =>  FALSE
[23:28:21.895]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:28:21.895]      </control>
[23:28:21.895]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:28:21.895]        // if-block "(__protocol & 0xFFFF) == 2"
[23:28:21.895]          // =>  TRUE
[23:28:21.898]        <block atomic="false" info="">
[23:28:21.898]          Message(0, "executing SWD power up");
[23:28:21.900]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:28:21.900]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:28:21.900]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:28:21.903]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:28:21.903]        </block>
[23:28:21.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:28:21.903]      </control>
[23:28:21.903]      // end if-block "powered_down"
[23:28:21.903]    </control>
[23:28:21.904]    <block atomic="false" info="">
[23:28:21.904]      __var DEBUG_PORT_VAL    = 0;
[23:28:21.904]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:28:21.904]      __var ACCESS_POINT_VAL  = 0;
[23:28:21.904]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:28:21.904]      __ap = 1; 
[23:28:21.904]        // -> [__ap <= 0x00000001]
[23:28:21.904]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:28:21.907]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:28:21.907]      __ap = 4;
[23:28:21.907]        // -> [__ap <= 0x00000004]
[23:28:21.907]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:28:21.911]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:28:21.911]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:28:21.911]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:28:21.915]    </block>
[23:28:21.915]    <block atomic="false" info="">
[23:28:21.915]      __var nReset = 0x80;
[23:28:21.915]        // -> [nReset <= 0x00000080]
[23:28:21.915]      __var canReadPins = 0;
[23:28:21.915]        // -> [canReadPins <= 0x00000000]
[23:28:21.915]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:28:21.915]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:28:21.915]        // -> [canReadPins <= 0x00000001]
[23:28:21.915]    </block>
[23:28:21.915]    <control if="" while="1" timeout="200" info="">
[23:28:21.915]      // while "1"  (timeout="200")
[23:28:21.915]      // while-condition  =>  TRUE
[23:28:21.915]      // while "1"  (timeout="200")
[23:28:21.915]      // while-condition  =>  TRUE
[23:28:21.915]      // while "1"  (timeout="200")
[23:28:21.915]      // while-condition  =>  TRUE
[23:28:21.915]      // while "1"  (timeout="200")
[23:28:21.915]      // while-condition  =>  TRUE
[23:28:21.915]      // while "1"  (timeout="200")
[23:28:21.915]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.919]      // while-condition  =>  TRUE
[23:28:21.919]      // while "1"  (timeout="200")
[23:28:21.924]      // while-condition  =>  TRUE
[23:28:21.924]      // while "1"  (timeout="200")
[23:28:21.924]      // while-condition  =>  TRUE
[23:28:21.924]      // while "1"  (timeout="200")
[23:28:21.924]      // while-condition  =>  TRUE
[23:28:21.924]      // while "1"  (timeout="200")
[23:28:21.924]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.925]      // while "1"  (timeout="200")
[23:28:21.925]      // while-condition  =>  TRUE
[23:28:21.927]      // while "1"  (timeout="200")
[23:28:21.927]      // while  =>  TIMEOUT
[23:28:21.927]      // end while "1"
[23:28:21.927]    </control>
[23:28:21.927]    <control if="canReadPins" while="" timeout="0" info="">
[23:28:21.927]      // if-block "canReadPins"
[23:28:21.927]        // =>  TRUE
[23:28:21.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:28:21.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:28:21.928]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:28:21.928]        // while-condition  =>  FALSE
[23:28:21.928]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:28:21.928]      </control>
[23:28:21.928]      // end if-block "canReadPins"
[23:28:21.928]    </control>
[23:28:21.928]    <control if="!canReadPins" while="" timeout="0" info="">
[23:28:21.928]      // if-block "!canReadPins"
[23:28:21.928]        // =>  FALSE
[23:28:21.928]      // skip if-block "!canReadPins"
[23:28:21.928]    </control>
[23:28:21.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:28:21.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:28:21.928]        // =>  TRUE
[23:28:21.928]      <block atomic="false" info="">
[23:28:21.928]        WriteAP(0x00, 0x190008);
[23:28:21.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:28:21.932]        WriteAP(0xF0, 0x01);
[23:28:21.938]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:28:21.938]      </block>
[23:28:21.938]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:28:21.938]    </control>
[23:28:21.938]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:28:21.938]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:28:21.938]        // =>  FALSE
[23:28:21.938]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:28:21.938]    </control>
[23:28:21.938]    <block atomic="false" info="">
[23:28:21.938]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:28:21.943]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:28:21.943]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:28:21.943]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:28:21.944]      __ap = 0; //lets make sure we reset the access point selection
[23:28:21.944]        // -> [__ap <= 0x00000000]
[23:28:21.944]    </block>
[23:28:21.944]  </sequence>
[23:28:21.944]  
[23:28:21.968]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:28:21.968]  
[23:28:21.972]  <debugvars>
[23:28:21.972]    // Pre-defined
[23:28:21.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:21.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:21.972]    __dp=0x00000000
[23:28:21.972]    __ap=0x00000000
[23:28:21.972]    __traceout=0x00000000      (Trace Disabled)
[23:28:21.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:21.972]    __FlashAddr=0x00000000
[23:28:21.972]    __FlashLen=0x00000000
[23:28:21.972]    __FlashArg=0x00000000
[23:28:21.974]    __FlashOp=0x00000000
[23:28:21.974]    __Result=0x00000000
[23:28:21.974]  </debugvars>
[23:28:21.974]  
[23:28:21.974]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:28:21.974]    <block atomic="false" info="">
[23:28:21.974]      __var deviceID = 0;
[23:28:21.974]        // -> [deviceID <= 0x00000000]
[23:28:21.974]      __var version = 0;
[23:28:21.974]        // -> [version <= 0x00000000]
[23:28:21.974]      __var partNum = 0;
[23:28:21.974]        // -> [partNum <= 0x00000000]
[23:28:21.974]      __var manuf = 0;
[23:28:21.974]        // -> [manuf <= 0x00000000]
[23:28:21.974]      __var isMSPM0G1X0X_G3X0X = 0;
[23:28:21.974]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:28:21.976]      __var isProduction = 0;
[23:28:21.976]        // -> [isProduction <= 0x00000000]
[23:28:21.976]      __var continueId = 0;
[23:28:21.976]        // -> [continueId <= 0x00000000]
[23:28:21.976]      deviceID =   Read32(0x41C40004);
[23:28:21.984]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:28:21.984]        // -> [deviceID <= 0x2BB8802F]
[23:28:21.984]      version = deviceID >> 28;
[23:28:21.984]        // -> [version <= 0x00000002]
[23:28:21.984]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:28:21.984]        // -> [partNum <= 0x0000BB88]
[23:28:21.984]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:28:21.984]        // -> [manuf <= 0x00000017]
[23:28:21.984]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:28:21.984]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:28:21.984]      isProduction = (version > 0);
[23:28:21.984]        // -> [isProduction <= 0x00000001]
[23:28:21.984]    </block>
[23:28:21.984]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:28:21.984]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:28:21.984]        // =>  FALSE
[23:28:21.984]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:28:21.984]    </control>
[23:28:21.984]    <control if="continueId == 4" while="" timeout="0" info="">
[23:28:21.984]      // if-block "continueId == 4"
[23:28:21.984]        // =>  FALSE
[23:28:21.984]      // skip if-block "continueId == 4"
[23:28:21.988]    </control>
[23:28:21.988]    <control if="!isProduction" while="" timeout="0" info="">
[23:28:21.988]      // if-block "!isProduction"
[23:28:21.988]        // =>  FALSE
[23:28:21.988]      // skip if-block "!isProduction"
[23:28:21.988]    </control>
[23:28:21.988]  </sequence>
[23:28:21.988]  
[23:30:17.430]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:30:17.430]  
[23:30:17.439]  <debugvars>
[23:30:17.439]    // Pre-defined
[23:30:17.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:17.439]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:17.439]    __dp=0x00000000
[23:30:17.439]    __ap=0x00000000
[23:30:17.440]    __traceout=0x00000000      (Trace Disabled)
[23:30:17.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:17.440]    __FlashAddr=0x00000000
[23:30:17.440]    __FlashLen=0x00000000
[23:30:17.440]    __FlashArg=0x00000000
[23:30:17.440]    __FlashOp=0x00000000
[23:30:17.441]    __Result=0x00000000
[23:30:17.441]  </debugvars>
[23:30:17.441]  
[23:30:17.441]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:30:17.441]    <block atomic="false" info="">
[23:30:17.441]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:30:17.441]        // -> [isSWJ <= 0x00000001]
[23:30:17.441]      __var hasDormant = __protocol & 0x00020000;
[23:30:17.441]        // -> [hasDormant <= 0x00000000]
[23:30:17.441]      __var protType   = __protocol & 0x0000FFFF;
[23:30:17.441]        // -> [protType <= 0x00000002]
[23:30:17.441]    </block>
[23:30:17.441]    <control if="protType == 1" while="" timeout="0" info="">
[23:30:17.441]      // if-block "protType == 1"
[23:30:17.441]        // =>  FALSE
[23:30:17.441]      // skip if-block "protType == 1"
[23:30:17.441]    </control>
[23:30:17.441]    <control if="protType == 2" while="" timeout="0" info="">
[23:30:17.441]      // if-block "protType == 2"
[23:30:17.441]        // =>  TRUE
[23:30:17.441]      <control if="isSWJ" while="" timeout="0" info="">
[23:30:17.441]        // if-block "isSWJ"
[23:30:17.441]          // =>  TRUE
[23:30:17.441]        <control if="hasDormant" while="" timeout="0" info="">
[23:30:17.441]          // if-block "hasDormant"
[23:30:17.441]            // =>  FALSE
[23:30:17.441]          // skip if-block "hasDormant"
[23:30:17.441]        </control>
[23:30:17.441]        <control if="!hasDormant" while="" timeout="0" info="">
[23:30:17.441]          // if-block "!hasDormant"
[23:30:17.441]            // =>  TRUE
[23:30:17.441]          <block atomic="false" info="">
[23:30:17.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:30:17.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:17.449]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:30:17.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:30:17.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:30:17.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:17.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:30:17.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:30:17.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:30:17.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:17.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:30:17.465]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:30:17.465]          </block>
[23:30:17.465]          // end if-block "!hasDormant"
[23:30:17.465]        </control>
[23:30:17.465]        // end if-block "isSWJ"
[23:30:17.465]      </control>
[23:30:17.465]      <control if="!isSWJ" while="" timeout="0" info="">
[23:30:17.465]        // if-block "!isSWJ"
[23:30:17.465]          // =>  FALSE
[23:30:17.465]        // skip if-block "!isSWJ"
[23:30:17.465]      </control>
[23:30:17.465]      <block atomic="false" info="">
[23:30:17.465]        ReadDP(0x0);
[23:30:17.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:30:17.471]      </block>
[23:30:17.471]      // end if-block "protType == 2"
[23:30:17.471]    </control>
[23:30:17.471]  </sequence>
[23:30:17.471]  
[23:30:17.478]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:30:17.478]  
[23:30:17.478]  <debugvars>
[23:30:17.478]    // Pre-defined
[23:30:17.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:17.478]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:17.478]    __dp=0x00000000
[23:30:17.481]    __ap=0x00000000
[23:30:17.481]    __traceout=0x00000000      (Trace Disabled)
[23:30:17.481]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:17.481]    __FlashAddr=0x00000000
[23:30:17.481]    __FlashLen=0x00000000
[23:30:17.481]    __FlashArg=0x00000000
[23:30:17.481]    __FlashOp=0x00000000
[23:30:17.481]    __Result=0x00000000
[23:30:17.481]  </debugvars>
[23:30:17.481]  
[23:30:17.481]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:30:17.481]    <block atomic="false" info="">
[23:30:17.481]      __var SW_DP_ABORT       = 0x0;
[23:30:17.481]        // -> [SW_DP_ABORT <= 0x00000000]
[23:30:17.481]      __var DP_CTRL_STAT      = 0x4;
[23:30:17.481]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:30:17.481]      __var DP_SELECT         = 0x8;
[23:30:17.481]        // -> [DP_SELECT <= 0x00000008]
[23:30:17.481]      __var powered_down      = 0;
[23:30:17.481]        // -> [powered_down <= 0x00000000]
[23:30:17.481]      WriteDP(DP_SELECT, 0x00000000);
[23:30:17.485]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:30:17.485]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:30:17.491]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:30:17.491]        // -> [powered_down <= 0x00000001]
[23:30:17.491]    </block>
[23:30:17.491]    <control if="powered_down" while="" timeout="0" info="">
[23:30:17.491]      // if-block "powered_down"
[23:30:17.491]        // =>  TRUE
[23:30:17.491]      <block atomic="false" info="">
[23:30:17.491]        Message(0, "Debug/System power-up request sent");
[23:30:17.491]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:30:17.495]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:30:17.495]      </block>
[23:30:17.495]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:30:17.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:30:17.499]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:30:17.499]        // while-condition  =>  FALSE
[23:30:17.502]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:30:17.502]      </control>
[23:30:17.502]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:30:17.502]        // if-block "(__protocol & 0xFFFF) == 1"
[23:30:17.502]          // =>  FALSE
[23:30:17.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:30:17.502]      </control>
[23:30:17.502]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:30:17.502]        // if-block "(__protocol & 0xFFFF) == 2"
[23:30:17.503]          // =>  TRUE
[23:30:17.503]        <block atomic="false" info="">
[23:30:17.503]          Message(0, "executing SWD power up");
[23:30:17.504]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:30:17.507]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:30:17.507]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:30:17.507]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:30:17.507]        </block>
[23:30:17.507]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:30:17.507]      </control>
[23:30:17.507]      // end if-block "powered_down"
[23:30:17.507]    </control>
[23:30:17.507]    <block atomic="false" info="">
[23:30:17.507]      __var DEBUG_PORT_VAL    = 0;
[23:30:17.507]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:30:17.507]      __var ACCESS_POINT_VAL  = 0;
[23:30:17.507]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:30:17.507]      __ap = 1; 
[23:30:17.507]        // -> [__ap <= 0x00000001]
[23:30:17.507]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:30:17.517]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:30:17.517]      __ap = 4;
[23:30:17.517]        // -> [__ap <= 0x00000004]
[23:30:17.517]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:17.521]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:30:17.521]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:30:17.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:17.522]    </block>
[23:30:17.522]    <block atomic="false" info="">
[23:30:17.522]      __var nReset = 0x80;
[23:30:17.522]        // -> [nReset <= 0x00000080]
[23:30:17.522]      __var canReadPins = 0;
[23:30:17.522]        // -> [canReadPins <= 0x00000000]
[23:30:17.522]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:30:17.528]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:30:17.528]        // -> [canReadPins <= 0x00000001]
[23:30:17.528]    </block>
[23:30:17.528]    <control if="" while="1" timeout="200" info="">
[23:30:17.528]      // while "1"  (timeout="200")
[23:30:17.528]      // while-condition  =>  TRUE
[23:30:17.529]      // while "1"  (timeout="200")
[23:30:17.529]      // while-condition  =>  TRUE
[23:30:17.529]      // while "1"  (timeout="200")
[23:30:17.529]      // while-condition  =>  TRUE
[23:30:17.529]      // while "1"  (timeout="200")
[23:30:17.529]      // while-condition  =>  TRUE
[23:30:17.530]      // while "1"  (timeout="200")
[23:30:17.530]      // while-condition  =>  TRUE
[23:30:17.530]      // while "1"  (timeout="200")
[23:30:17.530]      // while-condition  =>  TRUE
[23:30:17.530]      // while "1"  (timeout="200")
[23:30:17.530]      // while-condition  =>  TRUE
[23:30:17.530]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.531]      // while-condition  =>  TRUE
[23:30:17.531]      // while "1"  (timeout="200")
[23:30:17.533]      // while-condition  =>  TRUE
[23:30:17.533]      // while "1"  (timeout="200")
[23:30:17.533]      // while-condition  =>  TRUE
[23:30:17.533]      // while "1"  (timeout="200")
[23:30:17.533]      // while-condition  =>  TRUE
[23:30:17.533]      // while "1"  (timeout="200")
[23:30:17.533]      // while-condition  =>  TRUE
[23:30:17.533]      // while "1"  (timeout="200")
[23:30:17.533]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.534]      // while-condition  =>  TRUE
[23:30:17.534]      // while "1"  (timeout="200")
[23:30:17.535]      // while-condition  =>  TRUE
[23:30:17.535]      // while "1"  (timeout="200")
[23:30:17.535]      // while  =>  TIMEOUT
[23:30:17.535]      // end while "1"
[23:30:17.535]    </control>
[23:30:17.535]    <control if="canReadPins" while="" timeout="0" info="">
[23:30:17.535]      // if-block "canReadPins"
[23:30:17.536]        // =>  TRUE
[23:30:17.536]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:30:17.536]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:30:17.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:30:17.537]        // while-condition  =>  FALSE
[23:30:17.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:30:17.537]      </control>
[23:30:17.537]      // end if-block "canReadPins"
[23:30:17.537]    </control>
[23:30:17.537]    <control if="!canReadPins" while="" timeout="0" info="">
[23:30:17.537]      // if-block "!canReadPins"
[23:30:17.537]        // =>  FALSE
[23:30:17.537]      // skip if-block "!canReadPins"
[23:30:17.537]    </control>
[23:30:17.537]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:30:17.537]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:17.537]        // =>  TRUE
[23:30:17.537]      <block atomic="false" info="">
[23:30:17.540]        WriteAP(0x00, 0x190008);
[23:30:17.544]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:17.544]        WriteAP(0xF0, 0x01);
[23:30:17.548]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:17.548]      </block>
[23:30:17.548]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:17.552]    </control>
[23:30:17.552]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:30:17.552]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:17.552]        // =>  FALSE
[23:30:17.552]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:17.552]    </control>
[23:30:17.552]    <block atomic="false" info="">
[23:30:17.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:17.552]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:30:17.552]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:30:17.552]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:17.558]      __ap = 0; //lets make sure we reset the access point selection
[23:30:17.558]        // -> [__ap <= 0x00000000]
[23:30:17.558]    </block>
[23:30:17.559]  </sequence>
[23:30:17.559]  
[23:30:17.592]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:30:17.592]  
[23:30:17.592]  <debugvars>
[23:30:17.592]    // Pre-defined
[23:30:17.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:17.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:17.592]    __dp=0x00000000
[23:30:17.595]    __ap=0x00000000
[23:30:17.595]    __traceout=0x00000000      (Trace Disabled)
[23:30:17.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:17.595]    __FlashAddr=0x00000000
[23:30:17.595]    __FlashLen=0x00000000
[23:30:17.595]    __FlashArg=0x00000000
[23:30:17.595]    __FlashOp=0x00000000
[23:30:17.595]    __Result=0x00000000
[23:30:17.595]  </debugvars>
[23:30:17.595]  
[23:30:17.595]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:30:17.595]    <block atomic="false" info="">
[23:30:17.595]      __var deviceID = 0;
[23:30:17.595]        // -> [deviceID <= 0x00000000]
[23:30:17.595]      __var version = 0;
[23:30:17.595]        // -> [version <= 0x00000000]
[23:30:17.597]      __var partNum = 0;
[23:30:17.597]        // -> [partNum <= 0x00000000]
[23:30:17.597]      __var manuf = 0;
[23:30:17.597]        // -> [manuf <= 0x00000000]
[23:30:17.597]      __var isMSPM0G1X0X_G3X0X = 0;
[23:30:17.597]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:30:17.597]      __var isProduction = 0;
[23:30:17.597]        // -> [isProduction <= 0x00000000]
[23:30:17.597]      __var continueId = 0;
[23:30:17.597]        // -> [continueId <= 0x00000000]
[23:30:17.597]      deviceID =   Read32(0x41C40004);
[23:30:17.610]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:30:17.610]        // -> [deviceID <= 0x2BB8802F]
[23:30:17.610]      version = deviceID >> 28;
[23:30:17.610]        // -> [version <= 0x00000002]
[23:30:17.610]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:30:17.610]        // -> [partNum <= 0x0000BB88]
[23:30:17.610]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:30:17.610]        // -> [manuf <= 0x00000017]
[23:30:17.611]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:30:17.611]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:30:17.611]      isProduction = (version > 0);
[23:30:17.611]        // -> [isProduction <= 0x00000001]
[23:30:17.611]    </block>
[23:30:17.611]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:30:17.611]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:30:17.611]        // =>  FALSE
[23:30:17.611]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:30:17.611]    </control>
[23:30:17.611]    <control if="continueId == 4" while="" timeout="0" info="">
[23:30:17.611]      // if-block "continueId == 4"
[23:30:17.611]        // =>  FALSE
[23:30:17.611]      // skip if-block "continueId == 4"
[23:30:17.611]    </control>
[23:30:17.611]    <control if="!isProduction" while="" timeout="0" info="">
[23:30:17.611]      // if-block "!isProduction"
[23:30:17.611]        // =>  FALSE
[23:30:17.611]      // skip if-block "!isProduction"
[23:30:17.611]    </control>
[23:30:17.611]  </sequence>
[23:30:17.611]  
[23:34:56.722]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:34:56.722]  
[23:34:56.732]  <debugvars>
[23:34:56.732]    // Pre-defined
[23:34:56.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:34:56.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:34:56.732]    __dp=0x00000000
[23:34:56.732]    __ap=0x00000000
[23:34:56.732]    __traceout=0x00000000      (Trace Disabled)
[23:34:56.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:34:56.732]    __FlashAddr=0x00000000
[23:34:56.732]    __FlashLen=0x00000000
[23:34:56.732]    __FlashArg=0x00000000
[23:34:56.732]    __FlashOp=0x00000000
[23:34:56.732]    __Result=0x00000000
[23:34:56.732]  </debugvars>
[23:34:56.732]  
[23:34:56.732]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:34:56.732]    <block atomic="false" info="">
[23:34:56.732]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:34:56.732]        // -> [isSWJ <= 0x00000001]
[23:34:56.732]      __var hasDormant = __protocol & 0x00020000;
[23:34:56.732]        // -> [hasDormant <= 0x00000000]
[23:34:56.732]      __var protType   = __protocol & 0x0000FFFF;
[23:34:56.732]        // -> [protType <= 0x00000002]
[23:34:56.732]    </block>
[23:34:56.732]    <control if="protType == 1" while="" timeout="0" info="">
[23:34:56.732]      // if-block "protType == 1"
[23:34:56.732]        // =>  FALSE
[23:34:56.735]      // skip if-block "protType == 1"
[23:34:56.735]    </control>
[23:34:56.735]    <control if="protType == 2" while="" timeout="0" info="">
[23:34:56.735]      // if-block "protType == 2"
[23:34:56.735]        // =>  TRUE
[23:34:56.735]      <control if="isSWJ" while="" timeout="0" info="">
[23:34:56.735]        // if-block "isSWJ"
[23:34:56.735]          // =>  TRUE
[23:34:56.736]        <control if="hasDormant" while="" timeout="0" info="">
[23:34:56.736]          // if-block "hasDormant"
[23:34:56.736]            // =>  FALSE
[23:34:56.736]          // skip if-block "hasDormant"
[23:34:56.736]        </control>
[23:34:56.736]        <control if="!hasDormant" while="" timeout="0" info="">
[23:34:56.736]          // if-block "!hasDormant"
[23:34:56.736]            // =>  TRUE
[23:34:56.736]          <block atomic="false" info="">
[23:34:56.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:34:56.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:34:56.742]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:34:56.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:34:56.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:34:56.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:34:56.751]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:34:56.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:34:56.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:34:56.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:34:56.756]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:34:56.757]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:34:56.757]          </block>
[23:34:56.757]          // end if-block "!hasDormant"
[23:34:56.757]        </control>
[23:34:56.760]        // end if-block "isSWJ"
[23:34:56.760]      </control>
[23:34:56.760]      <control if="!isSWJ" while="" timeout="0" info="">
[23:34:56.760]        // if-block "!isSWJ"
[23:34:56.760]          // =>  FALSE
[23:34:56.760]        // skip if-block "!isSWJ"
[23:34:56.760]      </control>
[23:34:56.760]      <block atomic="false" info="">
[23:34:56.760]        ReadDP(0x0);
[23:34:56.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:34:56.762]      </block>
[23:34:56.762]      // end if-block "protType == 2"
[23:34:56.762]    </control>
[23:34:56.762]  </sequence>
[23:34:56.762]  
[23:34:56.768]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:34:56.768]  
[23:34:56.768]  <debugvars>
[23:34:56.768]    // Pre-defined
[23:34:56.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:34:56.768]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:34:56.768]    __dp=0x00000000
[23:34:56.768]    __ap=0x00000000
[23:34:56.768]    __traceout=0x00000000      (Trace Disabled)
[23:34:56.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:34:56.768]    __FlashAddr=0x00000000
[23:34:56.768]    __FlashLen=0x00000000
[23:34:56.768]    __FlashArg=0x00000000
[23:34:56.768]    __FlashOp=0x00000000
[23:34:56.768]    __Result=0x00000000
[23:34:56.768]  </debugvars>
[23:34:56.768]  
[23:34:56.768]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:34:56.768]    <block atomic="false" info="">
[23:34:56.768]      __var SW_DP_ABORT       = 0x0;
[23:34:56.768]        // -> [SW_DP_ABORT <= 0x00000000]
[23:34:56.768]      __var DP_CTRL_STAT      = 0x4;
[23:34:56.772]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:34:56.772]      __var DP_SELECT         = 0x8;
[23:34:56.772]        // -> [DP_SELECT <= 0x00000008]
[23:34:56.772]      __var powered_down      = 0;
[23:34:56.772]        // -> [powered_down <= 0x00000000]
[23:34:56.772]      WriteDP(DP_SELECT, 0x00000000);
[23:34:56.776]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:34:56.778]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:34:56.782]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:34:56.782]        // -> [powered_down <= 0x00000001]
[23:34:56.782]    </block>
[23:34:56.782]    <control if="powered_down" while="" timeout="0" info="">
[23:34:56.782]      // if-block "powered_down"
[23:34:56.782]        // =>  TRUE
[23:34:56.782]      <block atomic="false" info="">
[23:34:56.782]        Message(0, "Debug/System power-up request sent");
[23:34:56.786]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:34:56.789]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:34:56.789]      </block>
[23:34:56.789]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:34:56.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:34:56.789]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:34:56.789]        // while-condition  =>  FALSE
[23:34:56.789]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:34:56.789]      </control>
[23:34:56.789]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:34:56.789]        // if-block "(__protocol & 0xFFFF) == 1"
[23:34:56.789]          // =>  FALSE
[23:34:56.792]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:34:56.792]      </control>
[23:34:56.792]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:34:56.792]        // if-block "(__protocol & 0xFFFF) == 2"
[23:34:56.792]          // =>  TRUE
[23:34:56.792]        <block atomic="false" info="">
[23:34:56.792]          Message(0, "executing SWD power up");
[23:34:56.794]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:34:56.797]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:34:56.797]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:34:56.801]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:34:56.801]        </block>
[23:34:56.801]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:34:56.801]      </control>
[23:34:56.802]      // end if-block "powered_down"
[23:34:56.802]    </control>
[23:34:56.802]    <block atomic="false" info="">
[23:34:56.802]      __var DEBUG_PORT_VAL    = 0;
[23:34:56.802]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:34:56.802]      __var ACCESS_POINT_VAL  = 0;
[23:34:56.802]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:34:56.802]      __ap = 1; 
[23:34:56.802]        // -> [__ap <= 0x00000001]
[23:34:56.802]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:34:56.812]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:34:56.812]      __ap = 4;
[23:34:56.812]        // -> [__ap <= 0x00000004]
[23:34:56.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:34:56.816]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:34:56.816]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:34:56.816]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:34:56.818]    </block>
[23:34:56.818]    <block atomic="false" info="">
[23:34:56.818]      __var nReset = 0x80;
[23:34:56.818]        // -> [nReset <= 0x00000080]
[23:34:56.818]      __var canReadPins = 0;
[23:34:56.818]        // -> [canReadPins <= 0x00000000]
[23:34:56.818]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:34:56.825]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:34:56.825]        // -> [canReadPins <= 0x00000001]
[23:34:56.825]    </block>
[23:34:56.825]    <control if="" while="1" timeout="200" info="">
[23:34:56.825]      // while "1"  (timeout="200")
[23:34:56.825]      // while-condition  =>  TRUE
[23:34:56.825]      // while "1"  (timeout="200")
[23:34:56.825]      // while-condition  =>  TRUE
[23:34:56.825]      // while "1"  (timeout="200")
[23:34:56.825]      // while-condition  =>  TRUE
[23:34:56.825]      // while "1"  (timeout="200")
[23:34:56.825]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.827]      // while-condition  =>  TRUE
[23:34:56.827]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.829]      // while-condition  =>  TRUE
[23:34:56.829]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.830]      // while-condition  =>  TRUE
[23:34:56.830]      // while "1"  (timeout="200")
[23:34:56.831]      // while-condition  =>  TRUE
[23:34:56.831]      // while "1"  (timeout="200")
[23:34:56.831]      // while-condition  =>  TRUE
[23:34:56.831]      // while "1"  (timeout="200")
[23:34:56.831]      // while-condition  =>  TRUE
[23:34:56.831]      // while "1"  (timeout="200")
[23:34:56.831]      // while-condition  =>  TRUE
[23:34:56.831]      // while "1"  (timeout="200")
[23:34:56.831]      // while-condition  =>  TRUE
[23:34:56.831]      // while "1"  (timeout="200")
[23:34:56.832]      // while-condition  =>  TRUE
[23:34:56.832]      // while "1"  (timeout="200")
[23:34:56.832]      // while  =>  TIMEOUT
[23:34:56.832]      // end while "1"
[23:34:56.832]    </control>
[23:34:56.832]    <control if="canReadPins" while="" timeout="0" info="">
[23:34:56.832]      // if-block "canReadPins"
[23:34:56.832]        // =>  TRUE
[23:34:56.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:34:56.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:34:56.835]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:34:56.835]        // while-condition  =>  FALSE
[23:34:56.835]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:34:56.835]      </control>
[23:34:56.835]      // end if-block "canReadPins"
[23:34:56.835]    </control>
[23:34:56.835]    <control if="!canReadPins" while="" timeout="0" info="">
[23:34:56.836]      // if-block "!canReadPins"
[23:34:56.836]        // =>  FALSE
[23:34:56.836]      // skip if-block "!canReadPins"
[23:34:56.836]    </control>
[23:34:56.836]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:34:56.836]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:34:56.836]        // =>  TRUE
[23:34:56.836]      <block atomic="false" info="">
[23:34:56.836]        WriteAP(0x00, 0x190008);
[23:34:56.842]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:34:56.842]        WriteAP(0xF0, 0x01);
[23:34:56.849]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:34:56.849]      </block>
[23:34:56.849]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:34:56.852]    </control>
[23:34:56.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:34:56.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:34:56.852]        // =>  FALSE
[23:34:56.852]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:34:56.852]    </control>
[23:34:56.852]    <block atomic="false" info="">
[23:34:56.852]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:34:56.865]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:34:56.865]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:34:56.865]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:34:56.869]      __ap = 0; //lets make sure we reset the access point selection
[23:34:56.869]        // -> [__ap <= 0x00000000]
[23:34:56.869]    </block>
[23:34:56.869]  </sequence>
[23:34:56.869]  
[23:34:56.936]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:34:56.936]  
[23:34:56.936]  <debugvars>
[23:34:56.936]    // Pre-defined
[23:34:56.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:34:56.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:34:56.940]    __dp=0x00000000
[23:34:56.940]    __ap=0x00000000
[23:34:56.940]    __traceout=0x00000000      (Trace Disabled)
[23:34:56.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:34:56.940]    __FlashAddr=0x00000000
[23:34:56.941]    __FlashLen=0x00000000
[23:34:56.941]    __FlashArg=0x00000000
[23:34:56.941]    __FlashOp=0x00000000
[23:34:56.941]    __Result=0x00000000
[23:34:56.941]  </debugvars>
[23:34:56.941]  
[23:34:56.941]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:34:56.941]    <block atomic="false" info="">
[23:34:56.941]      __var deviceID = 0;
[23:34:56.941]        // -> [deviceID <= 0x00000000]
[23:34:56.941]      __var version = 0;
[23:34:56.941]        // -> [version <= 0x00000000]
[23:34:56.942]      __var partNum = 0;
[23:34:56.942]        // -> [partNum <= 0x00000000]
[23:34:56.942]      __var manuf = 0;
[23:34:56.942]        // -> [manuf <= 0x00000000]
[23:34:56.942]      __var isMSPM0G1X0X_G3X0X = 0;
[23:34:56.942]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:34:56.942]      __var isProduction = 0;
[23:34:56.942]        // -> [isProduction <= 0x00000000]
[23:34:56.942]      __var continueId = 0;
[23:34:56.943]        // -> [continueId <= 0x00000000]
[23:34:56.943]      deviceID =   Read32(0x41C40004);
[23:34:56.968]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:34:56.968]        // -> [deviceID <= 0x2BB8802F]
[23:34:56.968]      version = deviceID >> 28;
[23:34:56.968]        // -> [version <= 0x00000002]
[23:34:56.968]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:34:56.968]        // -> [partNum <= 0x0000BB88]
[23:34:56.968]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:34:56.968]        // -> [manuf <= 0x00000017]
[23:34:56.968]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:34:56.968]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:34:56.968]      isProduction = (version > 0);
[23:34:56.968]        // -> [isProduction <= 0x00000001]
[23:34:56.968]    </block>
[23:34:56.968]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:34:56.972]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:34:56.972]        // =>  FALSE
[23:34:56.972]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:34:56.972]    </control>
[23:34:56.972]    <control if="continueId == 4" while="" timeout="0" info="">
[23:34:56.972]      // if-block "continueId == 4"
[23:34:56.972]        // =>  FALSE
[23:34:56.972]      // skip if-block "continueId == 4"
[23:34:56.972]    </control>
[23:34:56.972]    <control if="!isProduction" while="" timeout="0" info="">
[23:34:56.972]      // if-block "!isProduction"
[23:34:56.972]        // =>  FALSE
[23:34:56.972]      // skip if-block "!isProduction"
[23:34:56.972]    </control>
[23:34:56.972]  </sequence>
[23:34:56.972]  
[23:37:22.392]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:37:22.392]  
[23:37:22.395]  <debugvars>
[23:37:22.395]    // Pre-defined
[23:37:22.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:22.395]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:37:22.395]    __dp=0x00000000
[23:37:22.395]    __ap=0x00000000
[23:37:22.395]    __traceout=0x00000000      (Trace Disabled)
[23:37:22.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:22.395]    __FlashAddr=0x00000000
[23:37:22.396]    __FlashLen=0x00000000
[23:37:22.396]    __FlashArg=0x00000000
[23:37:22.396]    __FlashOp=0x00000000
[23:37:22.396]    __Result=0x00000000
[23:37:22.396]  </debugvars>
[23:37:22.396]  
[23:37:22.396]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:37:22.396]    <block atomic="false" info="">
[23:37:22.396]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:37:22.396]        // -> [isSWJ <= 0x00000001]
[23:37:22.396]      __var hasDormant = __protocol & 0x00020000;
[23:37:22.396]        // -> [hasDormant <= 0x00000000]
[23:37:22.396]      __var protType   = __protocol & 0x0000FFFF;
[23:37:22.396]        // -> [protType <= 0x00000002]
[23:37:22.396]    </block>
[23:37:22.396]    <control if="protType == 1" while="" timeout="0" info="">
[23:37:22.396]      // if-block "protType == 1"
[23:37:22.396]        // =>  FALSE
[23:37:22.396]      // skip if-block "protType == 1"
[23:37:22.396]    </control>
[23:37:22.396]    <control if="protType == 2" while="" timeout="0" info="">
[23:37:22.396]      // if-block "protType == 2"
[23:37:22.396]        // =>  TRUE
[23:37:22.396]      <control if="isSWJ" while="" timeout="0" info="">
[23:37:22.396]        // if-block "isSWJ"
[23:37:22.396]          // =>  TRUE
[23:37:22.400]        <control if="hasDormant" while="" timeout="0" info="">
[23:37:22.400]          // if-block "hasDormant"
[23:37:22.400]            // =>  FALSE
[23:37:22.400]          // skip if-block "hasDormant"
[23:37:22.400]        </control>
[23:37:22.400]        <control if="!hasDormant" while="" timeout="0" info="">
[23:37:22.400]          // if-block "!hasDormant"
[23:37:22.400]            // =>  TRUE
[23:37:22.400]          <block atomic="false" info="">
[23:37:22.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:37:22.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:22.400]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:37:22.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:37:22.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:37:22.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:22.413]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:37:22.418]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:37:22.418]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:37:22.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:22.418]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:37:22.421]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:37:22.425]          </block>
[23:37:22.425]          // end if-block "!hasDormant"
[23:37:22.425]        </control>
[23:37:22.425]        // end if-block "isSWJ"
[23:37:22.425]      </control>
[23:37:22.425]      <control if="!isSWJ" while="" timeout="0" info="">
[23:37:22.425]        // if-block "!isSWJ"
[23:37:22.425]          // =>  FALSE
[23:37:22.425]        // skip if-block "!isSWJ"
[23:37:22.425]      </control>
[23:37:22.425]      <block atomic="false" info="">
[23:37:22.425]        ReadDP(0x0);
[23:37:22.429]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:37:22.429]      </block>
[23:37:22.429]      // end if-block "protType == 2"
[23:37:22.429]    </control>
[23:37:22.429]  </sequence>
[23:37:22.429]  
[23:37:22.433]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:37:22.433]  
[23:37:22.433]  <debugvars>
[23:37:22.433]    // Pre-defined
[23:37:22.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:22.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:37:22.433]    __dp=0x00000000
[23:37:22.433]    __ap=0x00000000
[23:37:22.433]    __traceout=0x00000000      (Trace Disabled)
[23:37:22.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:22.435]    __FlashAddr=0x00000000
[23:37:22.435]    __FlashLen=0x00000000
[23:37:22.435]    __FlashArg=0x00000000
[23:37:22.435]    __FlashOp=0x00000000
[23:37:22.435]    __Result=0x00000000
[23:37:22.435]  </debugvars>
[23:37:22.435]  
[23:37:22.435]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:37:22.435]    <block atomic="false" info="">
[23:37:22.435]      __var SW_DP_ABORT       = 0x0;
[23:37:22.435]        // -> [SW_DP_ABORT <= 0x00000000]
[23:37:22.435]      __var DP_CTRL_STAT      = 0x4;
[23:37:22.437]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:37:22.437]      __var DP_SELECT         = 0x8;
[23:37:22.437]        // -> [DP_SELECT <= 0x00000008]
[23:37:22.437]      __var powered_down      = 0;
[23:37:22.437]        // -> [powered_down <= 0x00000000]
[23:37:22.437]      WriteDP(DP_SELECT, 0x00000000);
[23:37:22.437]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:37:22.437]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:37:22.437]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:37:22.441]        // -> [powered_down <= 0x00000001]
[23:37:22.441]    </block>
[23:37:22.441]    <control if="powered_down" while="" timeout="0" info="">
[23:37:22.441]      // if-block "powered_down"
[23:37:22.441]        // =>  TRUE
[23:37:22.441]      <block atomic="false" info="">
[23:37:22.441]        Message(0, "Debug/System power-up request sent");
[23:37:22.445]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:37:22.445]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:37:22.445]      </block>
[23:37:22.445]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:37:22.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:37:22.449]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:37:22.449]        // while-condition  =>  FALSE
[23:37:22.449]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:37:22.449]      </control>
[23:37:22.449]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:37:22.449]        // if-block "(__protocol & 0xFFFF) == 1"
[23:37:22.449]          // =>  FALSE
[23:37:22.449]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:37:22.449]      </control>
[23:37:22.449]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:37:22.449]        // if-block "(__protocol & 0xFFFF) == 2"
[23:37:22.449]          // =>  TRUE
[23:37:22.449]        <block atomic="false" info="">
[23:37:22.449]          Message(0, "executing SWD power up");
[23:37:22.453]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:37:22.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:37:22.457]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:37:22.466]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:37:22.466]        </block>
[23:37:22.466]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:37:22.466]      </control>
[23:37:22.466]      // end if-block "powered_down"
[23:37:22.466]    </control>
[23:37:22.469]    <block atomic="false" info="">
[23:37:22.469]      __var DEBUG_PORT_VAL    = 0;
[23:37:22.469]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:37:22.469]      __var ACCESS_POINT_VAL  = 0;
[23:37:22.469]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:37:22.469]      __ap = 1; 
[23:37:22.469]        // -> [__ap <= 0x00000001]
[23:37:22.469]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:37:22.477]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:37:22.481]      __ap = 4;
[23:37:22.481]        // -> [__ap <= 0x00000004]
[23:37:22.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:37:22.481]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:37:22.485]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:37:22.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:37:22.485]    </block>
[23:37:22.485]    <block atomic="false" info="">
[23:37:22.485]      __var nReset = 0x80;
[23:37:22.485]        // -> [nReset <= 0x00000080]
[23:37:22.485]      __var canReadPins = 0;
[23:37:22.485]        // -> [canReadPins <= 0x00000000]
[23:37:22.485]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:37:22.489]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:37:22.489]        // -> [canReadPins <= 0x00000001]
[23:37:22.489]    </block>
[23:37:22.489]    <control if="" while="1" timeout="200" info="">
[23:37:22.489]      // while "1"  (timeout="200")
[23:37:22.489]      // while-condition  =>  TRUE
[23:37:22.489]      // while "1"  (timeout="200")
[23:37:22.489]      // while-condition  =>  TRUE
[23:37:22.489]      // while "1"  (timeout="200")
[23:37:22.489]      // while-condition  =>  TRUE
[23:37:22.489]      // while "1"  (timeout="200")
[23:37:22.489]      // while-condition  =>  TRUE
[23:37:22.489]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.493]      // while "1"  (timeout="200")
[23:37:22.493]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.495]      // while-condition  =>  TRUE
[23:37:22.495]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.497]      // while "1"  (timeout="200")
[23:37:22.497]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.501]      // while "1"  (timeout="200")
[23:37:22.501]      // while-condition  =>  TRUE
[23:37:22.505]      // while "1"  (timeout="200")
[23:37:22.505]      // while  =>  TIMEOUT
[23:37:22.505]      // end while "1"
[23:37:22.506]    </control>
[23:37:22.506]    <control if="canReadPins" while="" timeout="0" info="">
[23:37:22.506]      // if-block "canReadPins"
[23:37:22.506]        // =>  TRUE
[23:37:22.506]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:37:22.506]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:37:22.506]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:37:22.506]        // while-condition  =>  FALSE
[23:37:22.506]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:37:22.506]      </control>
[23:37:22.506]      // end if-block "canReadPins"
[23:37:22.506]    </control>
[23:37:22.506]    <control if="!canReadPins" while="" timeout="0" info="">
[23:37:22.506]      // if-block "!canReadPins"
[23:37:22.506]        // =>  FALSE
[23:37:22.509]      // skip if-block "!canReadPins"
[23:37:22.509]    </control>
[23:37:22.509]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:37:22.509]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:37:22.509]        // =>  TRUE
[23:37:22.509]      <block atomic="false" info="">
[23:37:22.509]        WriteAP(0x00, 0x190008);
[23:37:22.515]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:37:22.517]        WriteAP(0xF0, 0x01);
[23:37:22.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:37:22.525]      </block>
[23:37:22.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:37:22.525]    </control>
[23:37:22.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:37:22.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:37:22.525]        // =>  FALSE
[23:37:22.525]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:37:22.525]    </control>
[23:37:22.525]    <block atomic="false" info="">
[23:37:22.525]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:37:22.529]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:37:22.529]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:37:22.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:37:22.529]      __ap = 0; //lets make sure we reset the access point selection
[23:37:22.533]        // -> [__ap <= 0x00000000]
[23:37:22.533]    </block>
[23:37:22.533]  </sequence>
[23:37:22.533]  
[23:37:22.561]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:37:22.561]  
[23:37:22.561]  <debugvars>
[23:37:22.561]    // Pre-defined
[23:37:22.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:22.561]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:37:22.561]    __dp=0x00000000
[23:37:22.561]    __ap=0x00000000
[23:37:22.561]    __traceout=0x00000000      (Trace Disabled)
[23:37:22.561]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:22.561]    __FlashAddr=0x00000000
[23:37:22.561]    __FlashLen=0x00000000
[23:37:22.561]    __FlashArg=0x00000000
[23:37:22.561]    __FlashOp=0x00000000
[23:37:22.561]    __Result=0x00000000
[23:37:22.561]  </debugvars>
[23:37:22.561]  
[23:37:22.561]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:37:22.561]    <block atomic="false" info="">
[23:37:22.561]      __var deviceID = 0;
[23:37:22.561]        // -> [deviceID <= 0x00000000]
[23:37:22.561]      __var version = 0;
[23:37:22.561]        // -> [version <= 0x00000000]
[23:37:22.561]      __var partNum = 0;
[23:37:22.565]        // -> [partNum <= 0x00000000]
[23:37:22.565]      __var manuf = 0;
[23:37:22.565]        // -> [manuf <= 0x00000000]
[23:37:22.565]      __var isMSPM0G1X0X_G3X0X = 0;
[23:37:22.565]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:37:22.565]      __var isProduction = 0;
[23:37:22.565]        // -> [isProduction <= 0x00000000]
[23:37:22.565]      __var continueId = 0;
[23:37:22.565]        // -> [continueId <= 0x00000000]
[23:37:22.565]      deviceID =   Read32(0x41C40004);
[23:37:22.578]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:37:22.579]        // -> [deviceID <= 0x2BB8802F]
[23:37:22.579]      version = deviceID >> 28;
[23:37:22.579]        // -> [version <= 0x00000002]
[23:37:22.579]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:37:22.579]        // -> [partNum <= 0x0000BB88]
[23:37:22.579]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:37:22.579]        // -> [manuf <= 0x00000017]
[23:37:22.579]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:37:22.579]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:37:22.579]      isProduction = (version > 0);
[23:37:22.579]        // -> [isProduction <= 0x00000001]
[23:37:22.579]    </block>
[23:37:22.579]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:37:22.579]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:37:22.579]        // =>  FALSE
[23:37:22.579]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:37:22.579]    </control>
[23:37:22.579]    <control if="continueId == 4" while="" timeout="0" info="">
[23:37:22.581]      // if-block "continueId == 4"
[23:37:22.581]        // =>  FALSE
[23:37:22.581]      // skip if-block "continueId == 4"
[23:37:22.581]    </control>
[23:37:22.581]    <control if="!isProduction" while="" timeout="0" info="">
[23:37:22.581]      // if-block "!isProduction"
[23:37:22.581]        // =>  FALSE
[23:37:22.581]      // skip if-block "!isProduction"
[23:37:22.581]    </control>
[23:37:22.581]  </sequence>
[23:37:22.581]  
[23:38:08.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:38:08.346]  
[23:38:08.354]  <debugvars>
[23:38:08.354]    // Pre-defined
[23:38:08.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:38:08.354]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:38:08.354]    __dp=0x00000000
[23:38:08.354]    __ap=0x00000000
[23:38:08.354]    __traceout=0x00000000      (Trace Disabled)
[23:38:08.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:38:08.354]    __FlashAddr=0x00000000
[23:38:08.354]    __FlashLen=0x00000000
[23:38:08.354]    __FlashArg=0x00000000
[23:38:08.354]    __FlashOp=0x00000000
[23:38:08.356]    __Result=0x00000000
[23:38:08.356]  </debugvars>
[23:38:08.356]  
[23:38:08.356]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:38:08.356]    <block atomic="false" info="">
[23:38:08.356]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:38:08.356]        // -> [isSWJ <= 0x00000001]
[23:38:08.356]      __var hasDormant = __protocol & 0x00020000;
[23:38:08.356]        // -> [hasDormant <= 0x00000000]
[23:38:08.356]      __var protType   = __protocol & 0x0000FFFF;
[23:38:08.356]        // -> [protType <= 0x00000002]
[23:38:08.356]    </block>
[23:38:08.356]    <control if="protType == 1" while="" timeout="0" info="">
[23:38:08.356]      // if-block "protType == 1"
[23:38:08.356]        // =>  FALSE
[23:38:08.356]      // skip if-block "protType == 1"
[23:38:08.356]    </control>
[23:38:08.356]    <control if="protType == 2" while="" timeout="0" info="">
[23:38:08.356]      // if-block "protType == 2"
[23:38:08.356]        // =>  TRUE
[23:38:08.356]      <control if="isSWJ" while="" timeout="0" info="">
[23:38:08.360]        // if-block "isSWJ"
[23:38:08.360]          // =>  TRUE
[23:38:08.360]        <control if="hasDormant" while="" timeout="0" info="">
[23:38:08.360]          // if-block "hasDormant"
[23:38:08.360]            // =>  FALSE
[23:38:08.360]          // skip if-block "hasDormant"
[23:38:08.360]        </control>
[23:38:08.360]        <control if="!hasDormant" while="" timeout="0" info="">
[23:38:08.360]          // if-block "!hasDormant"
[23:38:08.360]            // =>  TRUE
[23:38:08.360]          <block atomic="false" info="">
[23:38:08.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:38:08.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:38:08.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:38:08.364]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:38:08.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:38:08.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:38:08.366]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:38:08.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:38:08.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:38:08.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:38:08.368]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:38:08.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:38:08.372]          </block>
[23:38:08.372]          // end if-block "!hasDormant"
[23:38:08.372]        </control>
[23:38:08.372]        // end if-block "isSWJ"
[23:38:08.372]      </control>
[23:38:08.372]      <control if="!isSWJ" while="" timeout="0" info="">
[23:38:08.372]        // if-block "!isSWJ"
[23:38:08.372]          // =>  FALSE
[23:38:08.372]        // skip if-block "!isSWJ"
[23:38:08.372]      </control>
[23:38:08.372]      <block atomic="false" info="">
[23:38:08.372]        ReadDP(0x0);
[23:38:08.376]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:38:08.376]      </block>
[23:38:08.376]      // end if-block "protType == 2"
[23:38:08.376]    </control>
[23:38:08.376]  </sequence>
[23:38:08.376]  
[23:38:08.380]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:38:08.380]  
[23:38:08.380]  <debugvars>
[23:38:08.380]    // Pre-defined
[23:38:08.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:38:08.380]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:38:08.380]    __dp=0x00000000
[23:38:08.380]    __ap=0x00000000
[23:38:08.380]    __traceout=0x00000000      (Trace Disabled)
[23:38:08.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:38:08.380]    __FlashAddr=0x00000000
[23:38:08.380]    __FlashLen=0x00000000
[23:38:08.380]    __FlashArg=0x00000000
[23:38:08.380]    __FlashOp=0x00000000
[23:38:08.380]    __Result=0x00000000
[23:38:08.380]  </debugvars>
[23:38:08.380]  
[23:38:08.380]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:38:08.380]    <block atomic="false" info="">
[23:38:08.380]      __var SW_DP_ABORT       = 0x0;
[23:38:08.380]        // -> [SW_DP_ABORT <= 0x00000000]
[23:38:08.380]      __var DP_CTRL_STAT      = 0x4;
[23:38:08.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:38:08.384]      __var DP_SELECT         = 0x8;
[23:38:08.384]        // -> [DP_SELECT <= 0x00000008]
[23:38:08.384]      __var powered_down      = 0;
[23:38:08.384]        // -> [powered_down <= 0x00000000]
[23:38:08.384]      WriteDP(DP_SELECT, 0x00000000);
[23:38:08.388]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:38:08.388]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:38:08.392]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:38:08.392]        // -> [powered_down <= 0x00000001]
[23:38:08.392]    </block>
[23:38:08.392]    <control if="powered_down" while="" timeout="0" info="">
[23:38:08.392]      // if-block "powered_down"
[23:38:08.392]        // =>  TRUE
[23:38:08.392]      <block atomic="false" info="">
[23:38:08.392]        Message(0, "Debug/System power-up request sent");
[23:38:08.396]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:38:08.396]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:38:08.396]      </block>
[23:38:08.396]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:38:08.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:38:08.404]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:38:08.404]        // while-condition  =>  FALSE
[23:38:08.404]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:38:08.404]      </control>
[23:38:08.404]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:38:08.404]        // if-block "(__protocol & 0xFFFF) == 1"
[23:38:08.406]          // =>  FALSE
[23:38:08.406]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:38:08.406]      </control>
[23:38:08.406]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:38:08.406]        // if-block "(__protocol & 0xFFFF) == 2"
[23:38:08.406]          // =>  TRUE
[23:38:08.406]        <block atomic="false" info="">
[23:38:08.406]          Message(0, "executing SWD power up");
[23:38:08.408]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:38:08.412]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:38:08.412]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:38:08.412]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:38:08.412]        </block>
[23:38:08.412]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:38:08.412]      </control>
[23:38:08.412]      // end if-block "powered_down"
[23:38:08.412]    </control>
[23:38:08.412]    <block atomic="false" info="">
[23:38:08.412]      __var DEBUG_PORT_VAL    = 0;
[23:38:08.412]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:38:08.416]      __var ACCESS_POINT_VAL  = 0;
[23:38:08.416]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:38:08.416]      __ap = 1; 
[23:38:08.416]        // -> [__ap <= 0x00000001]
[23:38:08.416]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:38:08.420]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:38:08.420]      __ap = 4;
[23:38:08.420]        // -> [__ap <= 0x00000004]
[23:38:08.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:38:08.429]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:38:08.429]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:38:08.429]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:38:08.429]    </block>
[23:38:08.429]    <block atomic="false" info="">
[23:38:08.429]      __var nReset = 0x80;
[23:38:08.429]        // -> [nReset <= 0x00000080]
[23:38:08.429]      __var canReadPins = 0;
[23:38:08.429]        // -> [canReadPins <= 0x00000000]
[23:38:08.429]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:38:08.436]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:38:08.436]        // -> [canReadPins <= 0x00000001]
[23:38:08.436]    </block>
[23:38:08.436]    <control if="" while="1" timeout="200" info="">
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.436]      // while "1"  (timeout="200")
[23:38:08.436]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.440]      // while-condition  =>  TRUE
[23:38:08.440]      // while "1"  (timeout="200")
[23:38:08.444]      // while-condition  =>  TRUE
[23:38:08.444]      // while "1"  (timeout="200")
[23:38:08.444]      // while  =>  TIMEOUT
[23:38:08.444]      // end while "1"
[23:38:08.444]    </control>
[23:38:08.444]    <control if="canReadPins" while="" timeout="0" info="">
[23:38:08.444]      // if-block "canReadPins"
[23:38:08.444]        // =>  TRUE
[23:38:08.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:38:08.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:38:08.446]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:38:08.446]        // while-condition  =>  FALSE
[23:38:08.446]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:38:08.446]      </control>
[23:38:08.446]      // end if-block "canReadPins"
[23:38:08.446]    </control>
[23:38:08.446]    <control if="!canReadPins" while="" timeout="0" info="">
[23:38:08.448]      // if-block "!canReadPins"
[23:38:08.448]        // =>  FALSE
[23:38:08.448]      // skip if-block "!canReadPins"
[23:38:08.448]    </control>
[23:38:08.448]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:38:08.448]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:38:08.448]        // =>  TRUE
[23:38:08.448]      <block atomic="false" info="">
[23:38:08.448]        WriteAP(0x00, 0x190008);
[23:38:08.456]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:38:08.456]        WriteAP(0xF0, 0x01);
[23:38:08.456]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:38:08.460]      </block>
[23:38:08.460]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:38:08.460]    </control>
[23:38:08.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:38:08.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:38:08.460]        // =>  FALSE
[23:38:08.460]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:38:08.460]    </control>
[23:38:08.460]    <block atomic="false" info="">
[23:38:08.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:38:08.464]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:38:08.464]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:38:08.464]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:38:08.466]      __ap = 0; //lets make sure we reset the access point selection
[23:38:08.466]        // -> [__ap <= 0x00000000]
[23:38:08.468]    </block>
[23:38:08.468]  </sequence>
[23:38:08.468]  
[23:38:08.500]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:38:08.500]  
[23:38:08.500]  <debugvars>
[23:38:08.500]    // Pre-defined
[23:38:08.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:38:08.500]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:38:08.500]    __dp=0x00000000
[23:38:08.500]    __ap=0x00000000
[23:38:08.500]    __traceout=0x00000000      (Trace Disabled)
[23:38:08.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:38:08.500]    __FlashAddr=0x00000000
[23:38:08.504]    __FlashLen=0x00000000
[23:38:08.504]    __FlashArg=0x00000000
[23:38:08.504]    __FlashOp=0x00000000
[23:38:08.504]    __Result=0x00000000
[23:38:08.504]  </debugvars>
[23:38:08.504]  
[23:38:08.504]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:38:08.504]    <block atomic="false" info="">
[23:38:08.504]      __var deviceID = 0;
[23:38:08.506]        // -> [deviceID <= 0x00000000]
[23:38:08.506]      __var version = 0;
[23:38:08.506]        // -> [version <= 0x00000000]
[23:38:08.506]      __var partNum = 0;
[23:38:08.506]        // -> [partNum <= 0x00000000]
[23:38:08.506]      __var manuf = 0;
[23:38:08.506]        // -> [manuf <= 0x00000000]
[23:38:08.506]      __var isMSPM0G1X0X_G3X0X = 0;
[23:38:08.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:38:08.506]      __var isProduction = 0;
[23:38:08.506]        // -> [isProduction <= 0x00000000]
[23:38:08.506]      __var continueId = 0;
[23:38:08.506]        // -> [continueId <= 0x00000000]
[23:38:08.506]      deviceID =   Read32(0x41C40004);
[23:38:08.517]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:38:08.517]        // -> [deviceID <= 0x2BB8802F]
[23:38:08.517]      version = deviceID >> 28;
[23:38:08.517]        // -> [version <= 0x00000002]
[23:38:08.517]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:38:08.517]        // -> [partNum <= 0x0000BB88]
[23:38:08.517]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:38:08.517]        // -> [manuf <= 0x00000017]
[23:38:08.517]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:38:08.517]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:38:08.517]      isProduction = (version > 0);
[23:38:08.517]        // -> [isProduction <= 0x00000001]
[23:38:08.517]    </block>
[23:38:08.517]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:38:08.517]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:38:08.517]        // =>  FALSE
[23:38:08.517]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:38:08.520]    </control>
[23:38:08.520]    <control if="continueId == 4" while="" timeout="0" info="">
[23:38:08.520]      // if-block "continueId == 4"
[23:38:08.520]        // =>  FALSE
[23:38:08.520]      // skip if-block "continueId == 4"
[23:38:08.520]    </control>
[23:38:08.520]    <control if="!isProduction" while="" timeout="0" info="">
[23:38:08.520]      // if-block "!isProduction"
[23:38:08.520]        // =>  FALSE
[23:38:08.520]      // skip if-block "!isProduction"
[23:38:08.520]    </control>
[23:38:08.520]  </sequence>
[23:38:08.520]  
[23:50:39.832]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:50:39.832]  
[23:50:39.834]  <debugvars>
[23:50:39.834]    // Pre-defined
[23:50:39.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:39.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:39.834]    __dp=0x00000000
[23:50:39.834]    __ap=0x00000000
[23:50:39.834]    __traceout=0x00000000      (Trace Disabled)
[23:50:39.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:39.834]    __FlashAddr=0x00000000
[23:50:39.834]    __FlashLen=0x00000000
[23:50:39.834]    __FlashArg=0x00000000
[23:50:39.834]    __FlashOp=0x00000000
[23:50:39.834]    __Result=0x00000000
[23:50:39.834]  </debugvars>
[23:50:39.834]  
[23:50:39.834]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:50:39.834]    <block atomic="false" info="">
[23:50:39.834]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:50:39.834]        // -> [isSWJ <= 0x00000001]
[23:50:39.834]      __var hasDormant = __protocol & 0x00020000;
[23:50:39.834]        // -> [hasDormant <= 0x00000000]
[23:50:39.834]      __var protType   = __protocol & 0x0000FFFF;
[23:50:39.834]        // -> [protType <= 0x00000002]
[23:50:39.834]    </block>
[23:50:39.837]    <control if="protType == 1" while="" timeout="0" info="">
[23:50:39.837]      // if-block "protType == 1"
[23:50:39.837]        // =>  FALSE
[23:50:39.837]      // skip if-block "protType == 1"
[23:50:39.837]    </control>
[23:50:39.837]    <control if="protType == 2" while="" timeout="0" info="">
[23:50:39.837]      // if-block "protType == 2"
[23:50:39.837]        // =>  TRUE
[23:50:39.837]      <control if="isSWJ" while="" timeout="0" info="">
[23:50:39.837]        // if-block "isSWJ"
[23:50:39.838]          // =>  TRUE
[23:50:39.838]        <control if="hasDormant" while="" timeout="0" info="">
[23:50:39.838]          // if-block "hasDormant"
[23:50:39.838]            // =>  FALSE
[23:50:39.838]          // skip if-block "hasDormant"
[23:50:39.838]        </control>
[23:50:39.839]        <control if="!hasDormant" while="" timeout="0" info="">
[23:50:39.839]          // if-block "!hasDormant"
[23:50:39.839]            // =>  TRUE
[23:50:39.839]          <block atomic="false" info="">
[23:50:39.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:50:39.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:39.842]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:50:39.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:50:39.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:50:39.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:39.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:50:39.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:50:39.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:50:39.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:39.851]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:50:39.858]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:50:39.858]          </block>
[23:50:39.858]          // end if-block "!hasDormant"
[23:50:39.858]        </control>
[23:50:39.858]        // end if-block "isSWJ"
[23:50:39.858]      </control>
[23:50:39.858]      <control if="!isSWJ" while="" timeout="0" info="">
[23:50:39.858]        // if-block "!isSWJ"
[23:50:39.858]          // =>  FALSE
[23:50:39.858]        // skip if-block "!isSWJ"
[23:50:39.858]      </control>
[23:50:39.858]      <block atomic="false" info="">
[23:50:39.858]        ReadDP(0x0);
[23:50:39.861]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:50:39.861]      </block>
[23:50:39.861]      // end if-block "protType == 2"
[23:50:39.861]    </control>
[23:50:39.861]  </sequence>
[23:50:39.861]  
[23:50:39.865]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:50:39.865]  
[23:50:39.865]  <debugvars>
[23:50:39.865]    // Pre-defined
[23:50:39.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:39.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:39.865]    __dp=0x00000000
[23:50:39.865]    __ap=0x00000000
[23:50:39.865]    __traceout=0x00000000      (Trace Disabled)
[23:50:39.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:39.869]    __FlashAddr=0x00000000
[23:50:39.869]    __FlashLen=0x00000000
[23:50:39.869]    __FlashArg=0x00000000
[23:50:39.869]    __FlashOp=0x00000000
[23:50:39.870]    __Result=0x00000000
[23:50:39.870]  </debugvars>
[23:50:39.870]  
[23:50:39.870]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:50:39.870]    <block atomic="false" info="">
[23:50:39.870]      __var SW_DP_ABORT       = 0x0;
[23:50:39.870]        // -> [SW_DP_ABORT <= 0x00000000]
[23:50:39.870]      __var DP_CTRL_STAT      = 0x4;
[23:50:39.870]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:50:39.870]      __var DP_SELECT         = 0x8;
[23:50:39.870]        // -> [DP_SELECT <= 0x00000008]
[23:50:39.871]      __var powered_down      = 0;
[23:50:39.871]        // -> [powered_down <= 0x00000000]
[23:50:39.871]      WriteDP(DP_SELECT, 0x00000000);
[23:50:39.874]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:50:39.874]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:50:39.892]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:50:39.892]        // -> [powered_down <= 0x00000001]
[23:50:39.894]    </block>
[23:50:39.894]    <control if="powered_down" while="" timeout="0" info="">
[23:50:39.894]      // if-block "powered_down"
[23:50:39.894]        // =>  TRUE
[23:50:39.894]      <block atomic="false" info="">
[23:50:39.894]        Message(0, "Debug/System power-up request sent");
[23:50:39.894]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:50:39.898]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:50:39.898]      </block>
[23:50:39.898]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:50:39.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:50:39.898]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:50:39.898]        // while-condition  =>  FALSE
[23:50:39.898]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:50:39.898]      </control>
[23:50:39.898]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:50:39.898]        // if-block "(__protocol & 0xFFFF) == 1"
[23:50:39.898]          // =>  FALSE
[23:50:39.898]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:50:39.898]      </control>
[23:50:39.898]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:50:39.901]        // if-block "(__protocol & 0xFFFF) == 2"
[23:50:39.901]          // =>  TRUE
[23:50:39.901]        <block atomic="false" info="">
[23:50:39.901]          Message(0, "executing SWD power up");
[23:50:39.901]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:50:39.905]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:50:39.905]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:50:39.905]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:50:39.909]        </block>
[23:50:39.909]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:50:39.909]      </control>
[23:50:39.909]      // end if-block "powered_down"
[23:50:39.909]    </control>
[23:50:39.909]    <block atomic="false" info="">
[23:50:39.909]      __var DEBUG_PORT_VAL    = 0;
[23:50:39.909]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:50:39.909]      __var ACCESS_POINT_VAL  = 0;
[23:50:39.909]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:50:39.909]      __ap = 1; 
[23:50:39.909]        // -> [__ap <= 0x00000001]
[23:50:39.909]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:50:39.913]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:50:39.913]      __ap = 4;
[23:50:39.913]        // -> [__ap <= 0x00000004]
[23:50:39.913]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:50:39.917]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:50:39.917]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:50:39.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:50:39.920]    </block>
[23:50:39.920]    <block atomic="false" info="">
[23:50:39.920]      __var nReset = 0x80;
[23:50:39.920]        // -> [nReset <= 0x00000080]
[23:50:39.920]      __var canReadPins = 0;
[23:50:39.920]        // -> [canReadPins <= 0x00000000]
[23:50:39.920]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:50:39.921]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:50:39.921]        // -> [canReadPins <= 0x00000001]
[23:50:39.921]    </block>
[23:50:39.921]    <control if="" while="1" timeout="200" info="">
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.921]      // while-condition  =>  TRUE
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.921]      // while-condition  =>  TRUE
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.921]      // while-condition  =>  TRUE
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.921]      // while-condition  =>  TRUE
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.921]      // while-condition  =>  TRUE
[23:50:39.921]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.924]      // while "1"  (timeout="200")
[23:50:39.924]      // while-condition  =>  TRUE
[23:50:39.925]      // while "1"  (timeout="200")
[23:50:39.925]      // while  =>  TIMEOUT
[23:50:39.925]      // end while "1"
[23:50:39.925]    </control>
[23:50:39.925]    <control if="canReadPins" while="" timeout="0" info="">
[23:50:39.925]      // if-block "canReadPins"
[23:50:39.925]        // =>  TRUE
[23:50:39.925]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:50:39.925]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:50:39.927]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:50:39.927]        // while-condition  =>  FALSE
[23:50:39.927]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:50:39.927]      </control>
[23:50:39.927]      // end if-block "canReadPins"
[23:50:39.927]    </control>
[23:50:39.927]    <control if="!canReadPins" while="" timeout="0" info="">
[23:50:39.927]      // if-block "!canReadPins"
[23:50:39.927]        // =>  FALSE
[23:50:39.927]      // skip if-block "!canReadPins"
[23:50:39.927]    </control>
[23:50:39.927]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:50:39.927]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:50:39.930]        // =>  TRUE
[23:50:39.930]      <block atomic="false" info="">
[23:50:39.930]        WriteAP(0x00, 0x190008);
[23:50:39.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:50:39.932]        WriteAP(0xF0, 0x01);
[23:50:39.941]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:50:39.941]      </block>
[23:50:39.941]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:50:39.941]    </control>
[23:50:39.941]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:50:39.941]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:50:39.941]        // =>  FALSE
[23:50:39.941]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:50:39.941]    </control>
[23:50:39.941]    <block atomic="false" info="">
[23:50:39.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:50:39.953]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:50:39.953]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:50:39.953]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:50:39.953]      __ap = 0; //lets make sure we reset the access point selection
[23:50:39.953]        // -> [__ap <= 0x00000000]
[23:50:39.953]    </block>
[23:50:39.953]  </sequence>
[23:50:39.953]  
[23:50:39.982]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:50:39.982]  
[23:50:39.982]  <debugvars>
[23:50:39.982]    // Pre-defined
[23:50:39.982]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:39.982]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:39.982]    __dp=0x00000000
[23:50:39.982]    __ap=0x00000000
[23:50:39.982]    __traceout=0x00000000      (Trace Disabled)
[23:50:39.986]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:39.986]    __FlashAddr=0x00000000
[23:50:39.986]    __FlashLen=0x00000000
[23:50:39.986]    __FlashArg=0x00000000
[23:50:39.986]    __FlashOp=0x00000000
[23:50:39.986]    __Result=0x00000000
[23:50:39.986]  </debugvars>
[23:50:39.986]  
[23:50:39.986]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:50:39.986]    <block atomic="false" info="">
[23:50:39.986]      __var deviceID = 0;
[23:50:39.986]        // -> [deviceID <= 0x00000000]
[23:50:39.986]      __var version = 0;
[23:50:39.986]        // -> [version <= 0x00000000]
[23:50:39.986]      __var partNum = 0;
[23:50:39.986]        // -> [partNum <= 0x00000000]
[23:50:39.986]      __var manuf = 0;
[23:50:39.986]        // -> [manuf <= 0x00000000]
[23:50:39.986]      __var isMSPM0G1X0X_G3X0X = 0;
[23:50:39.986]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:50:39.986]      __var isProduction = 0;
[23:50:39.986]        // -> [isProduction <= 0x00000000]
[23:50:39.986]      __var continueId = 0;
[23:50:39.986]        // -> [continueId <= 0x00000000]
[23:50:39.986]      deviceID =   Read32(0x41C40004);
[23:50:40.001]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:50:40.001]        // -> [deviceID <= 0x2BB8802F]
[23:50:40.001]      version = deviceID >> 28;
[23:50:40.001]        // -> [version <= 0x00000002]
[23:50:40.001]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:50:40.001]        // -> [partNum <= 0x0000BB88]
[23:50:40.001]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:50:40.001]        // -> [manuf <= 0x00000017]
[23:50:40.001]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:50:40.001]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:50:40.001]      isProduction = (version > 0);
[23:50:40.001]        // -> [isProduction <= 0x00000001]
[23:50:40.001]    </block>
[23:50:40.001]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:50:40.001]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:50:40.001]        // =>  FALSE
[23:50:40.001]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:50:40.001]    </control>
[23:50:40.001]    <control if="continueId == 4" while="" timeout="0" info="">
[23:50:40.001]      // if-block "continueId == 4"
[23:50:40.001]        // =>  FALSE
[23:50:40.005]      // skip if-block "continueId == 4"
[23:50:40.005]    </control>
[23:50:40.005]    <control if="!isProduction" while="" timeout="0" info="">
[23:50:40.005]      // if-block "!isProduction"
[23:50:40.005]        // =>  FALSE
[23:50:40.005]      // skip if-block "!isProduction"
[23:50:40.005]    </control>
[23:50:40.005]  </sequence>
[23:50:40.005]  
[23:53:56.975]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:53:56.975]  
[23:53:56.984]  <debugvars>
[23:53:56.984]    // Pre-defined
[23:53:56.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:53:56.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:53:56.984]    __dp=0x00000000
[23:53:56.985]    __ap=0x00000000
[23:53:56.985]    __traceout=0x00000000      (Trace Disabled)
[23:53:56.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:53:56.985]    __FlashAddr=0x00000000
[23:53:56.985]    __FlashLen=0x00000000
[23:53:56.985]    __FlashArg=0x00000000
[23:53:56.986]    __FlashOp=0x00000000
[23:53:56.986]    __Result=0x00000000
[23:53:56.986]  </debugvars>
[23:53:56.986]  
[23:53:56.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:53:56.986]    <block atomic="false" info="">
[23:53:56.986]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:53:56.986]        // -> [isSWJ <= 0x00000001]
[23:53:56.986]      __var hasDormant = __protocol & 0x00020000;
[23:53:56.986]        // -> [hasDormant <= 0x00000000]
[23:53:56.986]      __var protType   = __protocol & 0x0000FFFF;
[23:53:56.986]        // -> [protType <= 0x00000002]
[23:53:56.986]    </block>
[23:53:56.986]    <control if="protType == 1" while="" timeout="0" info="">
[23:53:56.986]      // if-block "protType == 1"
[23:53:56.986]        // =>  FALSE
[23:53:56.986]      // skip if-block "protType == 1"
[23:53:56.988]    </control>
[23:53:56.988]    <control if="protType == 2" while="" timeout="0" info="">
[23:53:56.988]      // if-block "protType == 2"
[23:53:56.988]        // =>  TRUE
[23:53:56.988]      <control if="isSWJ" while="" timeout="0" info="">
[23:53:56.988]        // if-block "isSWJ"
[23:53:56.988]          // =>  TRUE
[23:53:56.988]        <control if="hasDormant" while="" timeout="0" info="">
[23:53:56.988]          // if-block "hasDormant"
[23:53:56.988]            // =>  FALSE
[23:53:56.988]          // skip if-block "hasDormant"
[23:53:56.988]        </control>
[23:53:56.988]        <control if="!hasDormant" while="" timeout="0" info="">
[23:53:56.988]          // if-block "!hasDormant"
[23:53:56.990]            // =>  TRUE
[23:53:56.990]          <block atomic="false" info="">
[23:53:56.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:53:56.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:53:56.991]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:53:56.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:53:56.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:53:56.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:53:56.998]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:53:57.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:53:57.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:53:57.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:53:57.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:53:57.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:53:57.009]          </block>
[23:53:57.009]          // end if-block "!hasDormant"
[23:53:57.009]        </control>
[23:53:57.009]        // end if-block "isSWJ"
[23:53:57.009]      </control>
[23:53:57.009]      <control if="!isSWJ" while="" timeout="0" info="">
[23:53:57.009]        // if-block "!isSWJ"
[23:53:57.009]          // =>  FALSE
[23:53:57.009]        // skip if-block "!isSWJ"
[23:53:57.009]      </control>
[23:53:57.009]      <block atomic="false" info="">
[23:53:57.009]        ReadDP(0x0);
[23:53:57.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:53:57.015]      </block>
[23:53:57.015]      // end if-block "protType == 2"
[23:53:57.015]    </control>
[23:53:57.015]  </sequence>
[23:53:57.016]  
[23:53:57.020]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:53:57.020]  
[23:53:57.020]  <debugvars>
[23:53:57.020]    // Pre-defined
[23:53:57.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:53:57.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:53:57.020]    __dp=0x00000000
[23:53:57.020]    __ap=0x00000000
[23:53:57.020]    __traceout=0x00000000      (Trace Disabled)
[23:53:57.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:53:57.020]    __FlashAddr=0x00000000
[23:53:57.020]    __FlashLen=0x00000000
[23:53:57.020]    __FlashArg=0x00000000
[23:53:57.020]    __FlashOp=0x00000000
[23:53:57.020]    __Result=0x00000000
[23:53:57.020]  </debugvars>
[23:53:57.020]  
[23:53:57.022]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:53:57.022]    <block atomic="false" info="">
[23:53:57.022]      __var SW_DP_ABORT       = 0x0;
[23:53:57.022]        // -> [SW_DP_ABORT <= 0x00000000]
[23:53:57.022]      __var DP_CTRL_STAT      = 0x4;
[23:53:57.022]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:53:57.022]      __var DP_SELECT         = 0x8;
[23:53:57.022]        // -> [DP_SELECT <= 0x00000008]
[23:53:57.022]      __var powered_down      = 0;
[23:53:57.022]        // -> [powered_down <= 0x00000000]
[23:53:57.023]      WriteDP(DP_SELECT, 0x00000000);
[23:53:57.024]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:53:57.024]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:53:57.025]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:53:57.025]        // -> [powered_down <= 0x00000001]
[23:53:57.025]    </block>
[23:53:57.025]    <control if="powered_down" while="" timeout="0" info="">
[23:53:57.025]      // if-block "powered_down"
[23:53:57.025]        // =>  TRUE
[23:53:57.025]      <block atomic="false" info="">
[23:53:57.025]        Message(0, "Debug/System power-up request sent");
[23:53:57.029]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:53:57.031]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:53:57.031]      </block>
[23:53:57.031]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:53:57.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:53:57.036]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:53:57.036]        // while-condition  =>  FALSE
[23:53:57.036]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:53:57.036]      </control>
[23:53:57.038]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:53:57.038]        // if-block "(__protocol & 0xFFFF) == 1"
[23:53:57.038]          // =>  FALSE
[23:53:57.038]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:53:57.038]      </control>
[23:53:57.038]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:53:57.038]        // if-block "(__protocol & 0xFFFF) == 2"
[23:53:57.039]          // =>  TRUE
[23:53:57.039]        <block atomic="false" info="">
[23:53:57.039]          Message(0, "executing SWD power up");
[23:53:57.041]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:53:57.048]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:53:57.048]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:53:57.051]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:53:57.051]        </block>
[23:53:57.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:53:57.051]      </control>
[23:53:57.051]      // end if-block "powered_down"
[23:53:57.051]    </control>
[23:53:57.051]    <block atomic="false" info="">
[23:53:57.051]      __var DEBUG_PORT_VAL    = 0;
[23:53:57.051]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:53:57.051]      __var ACCESS_POINT_VAL  = 0;
[23:53:57.051]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:53:57.051]      __ap = 1; 
[23:53:57.051]        // -> [__ap <= 0x00000001]
[23:53:57.051]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:53:57.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:53:57.055]      __ap = 4;
[23:53:57.055]        // -> [__ap <= 0x00000004]
[23:53:57.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:53:57.065]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:53:57.065]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:53:57.065]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:53:57.069]    </block>
[23:53:57.069]    <block atomic="false" info="">
[23:53:57.069]      __var nReset = 0x80;
[23:53:57.069]        // -> [nReset <= 0x00000080]
[23:53:57.069]      __var canReadPins = 0;
[23:53:57.069]        // -> [canReadPins <= 0x00000000]
[23:53:57.069]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:53:57.076]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:53:57.076]        // -> [canReadPins <= 0x00000001]
[23:53:57.076]    </block>
[23:53:57.080]    <control if="" while="1" timeout="200" info="">
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.080]      // while "1"  (timeout="200")
[23:53:57.080]      // while-condition  =>  TRUE
[23:53:57.084]      // while "1"  (timeout="200")
[23:53:57.084]      // while  =>  TIMEOUT
[23:53:57.084]      // end while "1"
[23:53:57.084]    </control>
[23:53:57.084]    <control if="canReadPins" while="" timeout="0" info="">
[23:53:57.084]      // if-block "canReadPins"
[23:53:57.084]        // =>  TRUE
[23:53:57.084]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:53:57.084]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:53:57.089]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:53:57.089]        // while-condition  =>  FALSE
[23:53:57.089]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:53:57.089]      </control>
[23:53:57.089]      // end if-block "canReadPins"
[23:53:57.090]    </control>
[23:53:57.090]    <control if="!canReadPins" while="" timeout="0" info="">
[23:53:57.090]      // if-block "!canReadPins"
[23:53:57.090]        // =>  FALSE
[23:53:57.090]      // skip if-block "!canReadPins"
[23:53:57.090]    </control>
[23:53:57.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:53:57.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:53:57.090]        // =>  TRUE
[23:53:57.090]      <block atomic="false" info="">
[23:53:57.090]        WriteAP(0x00, 0x190008);
[23:53:57.092]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:53:57.092]        WriteAP(0xF0, 0x01);
[23:53:57.095]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:53:57.095]      </block>
[23:53:57.095]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:53:57.095]    </control>
[23:53:57.095]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:53:57.095]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:53:57.095]        // =>  FALSE
[23:53:57.095]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:53:57.095]    </control>
[23:53:57.095]    <block atomic="false" info="">
[23:53:57.095]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:53:57.106]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:53:57.106]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:53:57.106]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:53:57.108]      __ap = 0; //lets make sure we reset the access point selection
[23:53:57.109]        // -> [__ap <= 0x00000000]
[23:53:57.109]    </block>
[23:53:57.109]  </sequence>
[23:53:57.109]  
[23:53:57.148]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:53:57.148]  
[23:53:57.148]  <debugvars>
[23:53:57.148]    // Pre-defined
[23:53:57.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:53:57.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:53:57.148]    __dp=0x00000000
[23:53:57.148]    __ap=0x00000000
[23:53:57.148]    __traceout=0x00000000      (Trace Disabled)
[23:53:57.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:53:57.148]    __FlashAddr=0x00000000
[23:53:57.149]    __FlashLen=0x00000000
[23:53:57.149]    __FlashArg=0x00000000
[23:53:57.149]    __FlashOp=0x00000000
[23:53:57.149]    __Result=0x00000000
[23:53:57.149]  </debugvars>
[23:53:57.149]  
[23:53:57.149]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:53:57.149]    <block atomic="false" info="">
[23:53:57.149]      __var deviceID = 0;
[23:53:57.149]        // -> [deviceID <= 0x00000000]
[23:53:57.149]      __var version = 0;
[23:53:57.150]        // -> [version <= 0x00000000]
[23:53:57.150]      __var partNum = 0;
[23:53:57.150]        // -> [partNum <= 0x00000000]
[23:53:57.150]      __var manuf = 0;
[23:53:57.150]        // -> [manuf <= 0x00000000]
[23:53:57.150]      __var isMSPM0G1X0X_G3X0X = 0;
[23:53:57.150]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:53:57.150]      __var isProduction = 0;
[23:53:57.150]        // -> [isProduction <= 0x00000000]
[23:53:57.150]      __var continueId = 0;
[23:53:57.150]        // -> [continueId <= 0x00000000]
[23:53:57.150]      deviceID =   Read32(0x41C40004);
[23:53:57.156]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:53:57.156]        // -> [deviceID <= 0x2BB8802F]
[23:53:57.156]      version = deviceID >> 28;
[23:53:57.156]        // -> [version <= 0x00000002]
[23:53:57.156]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:53:57.156]        // -> [partNum <= 0x0000BB88]
[23:53:57.156]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:53:57.156]        // -> [manuf <= 0x00000017]
[23:53:57.156]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:53:57.156]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:53:57.156]      isProduction = (version > 0);
[23:53:57.157]        // -> [isProduction <= 0x00000001]
[23:53:57.157]    </block>
[23:53:57.157]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:53:57.157]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:53:57.157]        // =>  FALSE
[23:53:57.157]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:53:57.157]    </control>
[23:53:57.157]    <control if="continueId == 4" while="" timeout="0" info="">
[23:53:57.157]      // if-block "continueId == 4"
[23:53:57.157]        // =>  FALSE
[23:53:57.157]      // skip if-block "continueId == 4"
[23:53:57.159]    </control>
[23:53:57.159]    <control if="!isProduction" while="" timeout="0" info="">
[23:53:57.159]      // if-block "!isProduction"
[23:53:57.159]        // =>  FALSE
[23:53:57.159]      // skip if-block "!isProduction"
[23:53:57.159]    </control>
[23:53:57.159]  </sequence>
[23:53:57.159]  
[23:54:12.594]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:54:12.594]  
[23:54:12.603]  <debugvars>
[23:54:12.603]    // Pre-defined
[23:54:12.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:12.603]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:54:12.603]    __dp=0x00000000
[23:54:12.603]    __ap=0x00000000
[23:54:12.603]    __traceout=0x00000000      (Trace Disabled)
[23:54:12.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:12.603]    __FlashAddr=0x00000000
[23:54:12.603]    __FlashLen=0x00000000
[23:54:12.603]    __FlashArg=0x00000000
[23:54:12.603]    __FlashOp=0x00000000
[23:54:12.603]    __Result=0x00000000
[23:54:12.603]  </debugvars>
[23:54:12.603]  
[23:54:12.603]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:54:12.603]    <block atomic="false" info="">
[23:54:12.603]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:54:12.603]        // -> [isSWJ <= 0x00000001]
[23:54:12.603]      __var hasDormant = __protocol & 0x00020000;
[23:54:12.603]        // -> [hasDormant <= 0x00000000]
[23:54:12.603]      __var protType   = __protocol & 0x0000FFFF;
[23:54:12.603]        // -> [protType <= 0x00000002]
[23:54:12.603]    </block>
[23:54:12.603]    <control if="protType == 1" while="" timeout="0" info="">
[23:54:12.606]      // if-block "protType == 1"
[23:54:12.606]        // =>  FALSE
[23:54:12.606]      // skip if-block "protType == 1"
[23:54:12.606]    </control>
[23:54:12.606]    <control if="protType == 2" while="" timeout="0" info="">
[23:54:12.606]      // if-block "protType == 2"
[23:54:12.606]        // =>  TRUE
[23:54:12.606]      <control if="isSWJ" while="" timeout="0" info="">
[23:54:12.607]        // if-block "isSWJ"
[23:54:12.607]          // =>  TRUE
[23:54:12.607]        <control if="hasDormant" while="" timeout="0" info="">
[23:54:12.607]          // if-block "hasDormant"
[23:54:12.607]            // =>  FALSE
[23:54:12.607]          // skip if-block "hasDormant"
[23:54:12.607]        </control>
[23:54:12.607]        <control if="!hasDormant" while="" timeout="0" info="">
[23:54:12.607]          // if-block "!hasDormant"
[23:54:12.607]            // =>  TRUE
[23:54:12.607]          <block atomic="false" info="">
[23:54:12.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:54:12.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:12.611]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:54:12.619]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:54:12.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:54:12.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:12.619]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:54:12.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:54:12.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:54:12.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:12.626]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:54:12.628]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:54:12.628]          </block>
[23:54:12.628]          // end if-block "!hasDormant"
[23:54:12.628]        </control>
[23:54:12.628]        // end if-block "isSWJ"
[23:54:12.628]      </control>
[23:54:12.628]      <control if="!isSWJ" while="" timeout="0" info="">
[23:54:12.628]        // if-block "!isSWJ"
[23:54:12.628]          // =>  FALSE
[23:54:12.629]        // skip if-block "!isSWJ"
[23:54:12.629]      </control>
[23:54:12.629]      <block atomic="false" info="">
[23:54:12.629]        ReadDP(0x0);
[23:54:12.631]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:54:12.631]      </block>
[23:54:12.631]      // end if-block "protType == 2"
[23:54:12.631]    </control>
[23:54:12.631]  </sequence>
[23:54:12.632]  
[23:54:12.634]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:54:12.634]  
[23:54:12.634]  <debugvars>
[23:54:12.634]    // Pre-defined
[23:54:12.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:12.634]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:54:12.636]    __dp=0x00000000
[23:54:12.636]    __ap=0x00000000
[23:54:12.636]    __traceout=0x00000000      (Trace Disabled)
[23:54:12.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:12.636]    __FlashAddr=0x00000000
[23:54:12.636]    __FlashLen=0x00000000
[23:54:12.636]    __FlashArg=0x00000000
[23:54:12.636]    __FlashOp=0x00000000
[23:54:12.636]    __Result=0x00000000
[23:54:12.636]  </debugvars>
[23:54:12.636]  
[23:54:12.636]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:54:12.636]    <block atomic="false" info="">
[23:54:12.636]      __var SW_DP_ABORT       = 0x0;
[23:54:12.636]        // -> [SW_DP_ABORT <= 0x00000000]
[23:54:12.636]      __var DP_CTRL_STAT      = 0x4;
[23:54:12.636]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:54:12.636]      __var DP_SELECT         = 0x8;
[23:54:12.636]        // -> [DP_SELECT <= 0x00000008]
[23:54:12.636]      __var powered_down      = 0;
[23:54:12.636]        // -> [powered_down <= 0x00000000]
[23:54:12.636]      WriteDP(DP_SELECT, 0x00000000);
[23:54:12.647]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:54:12.647]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:54:12.649]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:54:12.649]        // -> [powered_down <= 0x00000001]
[23:54:12.649]    </block>
[23:54:12.649]    <control if="powered_down" while="" timeout="0" info="">
[23:54:12.649]      // if-block "powered_down"
[23:54:12.649]        // =>  TRUE
[23:54:12.649]      <block atomic="false" info="">
[23:54:12.649]        Message(0, "Debug/System power-up request sent");
[23:54:12.653]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:54:12.658]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:54:12.658]      </block>
[23:54:12.658]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:54:12.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:54:12.661]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:54:12.661]        // while-condition  =>  FALSE
[23:54:12.661]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:54:12.661]      </control>
[23:54:12.661]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:54:12.661]        // if-block "(__protocol & 0xFFFF) == 1"
[23:54:12.661]          // =>  FALSE
[23:54:12.661]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:54:12.661]      </control>
[23:54:12.661]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:54:12.661]        // if-block "(__protocol & 0xFFFF) == 2"
[23:54:12.661]          // =>  TRUE
[23:54:12.661]        <block atomic="false" info="">
[23:54:12.661]          Message(0, "executing SWD power up");
[23:54:12.664]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:54:12.666]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:54:12.666]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:54:12.669]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:54:12.669]        </block>
[23:54:12.670]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:54:12.670]      </control>
[23:54:12.670]      // end if-block "powered_down"
[23:54:12.670]    </control>
[23:54:12.670]    <block atomic="false" info="">
[23:54:12.670]      __var DEBUG_PORT_VAL    = 0;
[23:54:12.670]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:54:12.670]      __var ACCESS_POINT_VAL  = 0;
[23:54:12.670]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:54:12.671]      __ap = 1; 
[23:54:12.671]        // -> [__ap <= 0x00000001]
[23:54:12.671]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:54:12.687]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:54:12.687]      __ap = 4;
[23:54:12.687]        // -> [__ap <= 0x00000004]
[23:54:12.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:12.696]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:54:12.696]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:54:12.696]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:12.700]    </block>
[23:54:12.700]    <block atomic="false" info="">
[23:54:12.700]      __var nReset = 0x80;
[23:54:12.700]        // -> [nReset <= 0x00000080]
[23:54:12.700]      __var canReadPins = 0;
[23:54:12.700]        // -> [canReadPins <= 0x00000000]
[23:54:12.700]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:54:12.704]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:54:12.704]        // -> [canReadPins <= 0x00000001]
[23:54:12.704]    </block>
[23:54:12.704]    <control if="" while="1" timeout="200" info="">
[23:54:12.704]      // while "1"  (timeout="200")
[23:54:12.704]      // while-condition  =>  TRUE
[23:54:12.704]      // while "1"  (timeout="200")
[23:54:12.704]      // while-condition  =>  TRUE
[23:54:12.704]      // while "1"  (timeout="200")
[23:54:12.704]      // while-condition  =>  TRUE
[23:54:12.704]      // while "1"  (timeout="200")
[23:54:12.704]      // while-condition  =>  TRUE
[23:54:12.704]      // while "1"  (timeout="200")
[23:54:12.706]      // while-condition  =>  TRUE
[23:54:12.706]      // while "1"  (timeout="200")
[23:54:12.706]      // while-condition  =>  TRUE
[23:54:12.706]      // while "1"  (timeout="200")
[23:54:12.706]      // while-condition  =>  TRUE
[23:54:12.706]      // while "1"  (timeout="200")
[23:54:12.706]      // while-condition  =>  TRUE
[23:54:12.706]      // while "1"  (timeout="200")
[23:54:12.706]      // while-condition  =>  TRUE
[23:54:12.707]      // while "1"  (timeout="200")
[23:54:12.707]      // while  =>  TIMEOUT
[23:54:12.707]      // end while "1"
[23:54:12.707]    </control>
[23:54:12.707]    <control if="canReadPins" while="" timeout="0" info="">
[23:54:12.707]      // if-block "canReadPins"
[23:54:12.707]        // =>  TRUE
[23:54:12.707]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:54:12.707]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:54:12.708]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:54:12.708]        // while-condition  =>  FALSE
[23:54:12.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:54:12.708]      </control>
[23:54:12.708]      // end if-block "canReadPins"
[23:54:12.708]    </control>
[23:54:12.708]    <control if="!canReadPins" while="" timeout="0" info="">
[23:54:12.708]      // if-block "!canReadPins"
[23:54:12.708]        // =>  FALSE
[23:54:12.708]      // skip if-block "!canReadPins"
[23:54:12.708]    </control>
[23:54:12.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:54:12.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:12.708]        // =>  TRUE
[23:54:12.708]      <block atomic="false" info="">
[23:54:12.712]        WriteAP(0x00, 0x190008);
[23:54:12.716]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:12.716]        WriteAP(0xF0, 0x01);
[23:54:12.720]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:12.720]      </block>
[23:54:12.720]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:12.720]    </control>
[23:54:12.720]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:54:12.720]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:12.720]        // =>  FALSE
[23:54:12.720]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:12.720]    </control>
[23:54:12.720]    <block atomic="false" info="">
[23:54:12.720]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:12.729]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:54:12.729]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:54:12.729]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:12.729]      __ap = 0; //lets make sure we reset the access point selection
[23:54:12.729]        // -> [__ap <= 0x00000000]
[23:54:12.729]    </block>
[23:54:12.729]  </sequence>
[23:54:12.729]  
[23:54:12.784]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:54:12.784]  
[23:54:12.784]  <debugvars>
[23:54:12.786]    // Pre-defined
[23:54:12.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:12.786]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:54:12.786]    __dp=0x00000000
[23:54:12.786]    __ap=0x00000000
[23:54:12.786]    __traceout=0x00000000      (Trace Disabled)
[23:54:12.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:12.786]    __FlashAddr=0x00000000
[23:54:12.786]    __FlashLen=0x00000000
[23:54:12.786]    __FlashArg=0x00000000
[23:54:12.786]    __FlashOp=0x00000000
[23:54:12.786]    __Result=0x00000000
[23:54:12.786]  </debugvars>
[23:54:12.786]  
[23:54:12.788]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:54:12.788]    <block atomic="false" info="">
[23:54:12.788]      __var deviceID = 0;
[23:54:12.788]        // -> [deviceID <= 0x00000000]
[23:54:12.788]      __var version = 0;
[23:54:12.788]        // -> [version <= 0x00000000]
[23:54:12.788]      __var partNum = 0;
[23:54:12.788]        // -> [partNum <= 0x00000000]
[23:54:12.788]      __var manuf = 0;
[23:54:12.788]        // -> [manuf <= 0x00000000]
[23:54:12.788]      __var isMSPM0G1X0X_G3X0X = 0;
[23:54:12.789]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:54:12.789]      __var isProduction = 0;
[23:54:12.789]        // -> [isProduction <= 0x00000000]
[23:54:12.789]      __var continueId = 0;
[23:54:12.789]        // -> [continueId <= 0x00000000]
[23:54:12.789]      deviceID =   Read32(0x41C40004);
[23:54:12.800]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:54:12.800]        // -> [deviceID <= 0x2BB8802F]
[23:54:12.802]      version = deviceID >> 28;
[23:54:12.802]        // -> [version <= 0x00000002]
[23:54:12.802]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:54:12.802]        // -> [partNum <= 0x0000BB88]
[23:54:12.802]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:54:12.802]        // -> [manuf <= 0x00000017]
[23:54:12.802]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:54:12.802]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:54:12.802]      isProduction = (version > 0);
[23:54:12.802]        // -> [isProduction <= 0x00000001]
[23:54:12.802]    </block>
[23:54:12.802]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:54:12.803]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:54:12.803]        // =>  FALSE
[23:54:12.803]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:54:12.803]    </control>
[23:54:12.803]    <control if="continueId == 4" while="" timeout="0" info="">
[23:54:12.803]      // if-block "continueId == 4"
[23:54:12.803]        // =>  FALSE
[23:54:12.803]      // skip if-block "continueId == 4"
[23:54:12.803]    </control>
[23:54:12.803]    <control if="!isProduction" while="" timeout="0" info="">
[23:54:12.803]      // if-block "!isProduction"
[23:54:12.803]        // =>  FALSE
[23:54:12.803]      // skip if-block "!isProduction"
[23:54:12.805]    </control>
[23:54:12.805]  </sequence>
[23:54:12.805]  
[23:58:25.622]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:58:25.622]  
[23:58:25.622]  <debugvars>
[23:58:25.622]    // Pre-defined
[23:58:25.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:25.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:25.622]    __dp=0x00000000
[23:58:25.622]    __ap=0x00000000
[23:58:25.622]    __traceout=0x00000000      (Trace Disabled)
[23:58:25.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:25.622]    __FlashAddr=0x00000000
[23:58:25.622]    __FlashLen=0x00000000
[23:58:25.622]    __FlashArg=0x00000000
[23:58:25.622]    __FlashOp=0x00000000
[23:58:25.622]    __Result=0x00000000
[23:58:25.622]  </debugvars>
[23:58:25.625]  
[23:58:25.625]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:58:25.625]    <block atomic="false" info="">
[23:58:25.625]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:58:25.625]        // -> [isSWJ <= 0x00000001]
[23:58:25.625]      __var hasDormant = __protocol & 0x00020000;
[23:58:25.625]        // -> [hasDormant <= 0x00000000]
[23:58:25.625]      __var protType   = __protocol & 0x0000FFFF;
[23:58:25.625]        // -> [protType <= 0x00000002]
[23:58:25.625]    </block>
[23:58:25.625]    <control if="protType == 1" while="" timeout="0" info="">
[23:58:25.625]      // if-block "protType == 1"
[23:58:25.625]        // =>  FALSE
[23:58:25.625]      // skip if-block "protType == 1"
[23:58:25.625]    </control>
[23:58:25.625]    <control if="protType == 2" while="" timeout="0" info="">
[23:58:25.625]      // if-block "protType == 2"
[23:58:25.625]        // =>  TRUE
[23:58:25.625]      <control if="isSWJ" while="" timeout="0" info="">
[23:58:25.625]        // if-block "isSWJ"
[23:58:25.625]          // =>  TRUE
[23:58:25.625]        <control if="hasDormant" while="" timeout="0" info="">
[23:58:25.625]          // if-block "hasDormant"
[23:58:25.625]            // =>  FALSE
[23:58:25.625]          // skip if-block "hasDormant"
[23:58:25.625]        </control>
[23:58:25.625]        <control if="!hasDormant" while="" timeout="0" info="">
[23:58:25.625]          // if-block "!hasDormant"
[23:58:25.625]            // =>  TRUE
[23:58:25.625]          <block atomic="false" info="">
[23:58:25.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:58:25.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:25.629]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:58:25.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:58:25.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:58:25.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:25.637]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:58:25.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:58:25.637]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:58:25.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:25.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:58:25.641]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:58:25.641]          </block>
[23:58:25.641]          // end if-block "!hasDormant"
[23:58:25.641]        </control>
[23:58:25.641]        // end if-block "isSWJ"
[23:58:25.641]      </control>
[23:58:25.641]      <control if="!isSWJ" while="" timeout="0" info="">
[23:58:25.641]        // if-block "!isSWJ"
[23:58:25.641]          // =>  FALSE
[23:58:25.641]        // skip if-block "!isSWJ"
[23:58:25.641]      </control>
[23:58:25.641]      <block atomic="false" info="">
[23:58:25.641]        ReadDP(0x0);
[23:58:25.641]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:58:25.641]      </block>
[23:58:25.645]      // end if-block "protType == 2"
[23:58:25.645]    </control>
[23:58:25.645]  </sequence>
[23:58:25.645]  
[23:58:25.645]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:58:25.645]  
[23:58:25.649]  <debugvars>
[23:58:25.649]    // Pre-defined
[23:58:25.649]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:25.649]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:25.649]    __dp=0x00000000
[23:58:25.649]    __ap=0x00000000
[23:58:25.649]    __traceout=0x00000000      (Trace Disabled)
[23:58:25.649]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:25.649]    __FlashAddr=0x00000000
[23:58:25.649]    __FlashLen=0x00000000
[23:58:25.649]    __FlashArg=0x00000000
[23:58:25.649]    __FlashOp=0x00000000
[23:58:25.649]    __Result=0x00000000
[23:58:25.649]  </debugvars>
[23:58:25.649]  
[23:58:25.649]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:58:25.649]    <block atomic="false" info="">
[23:58:25.649]      __var SW_DP_ABORT       = 0x0;
[23:58:25.649]        // -> [SW_DP_ABORT <= 0x00000000]
[23:58:25.651]      __var DP_CTRL_STAT      = 0x4;
[23:58:25.651]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:58:25.651]      __var DP_SELECT         = 0x8;
[23:58:25.651]        // -> [DP_SELECT <= 0x00000008]
[23:58:25.651]      __var powered_down      = 0;
[23:58:25.651]        // -> [powered_down <= 0x00000000]
[23:58:25.651]      WriteDP(DP_SELECT, 0x00000000);
[23:58:25.653]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:58:25.653]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:58:25.653]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:58:25.653]        // -> [powered_down <= 0x00000001]
[23:58:25.657]    </block>
[23:58:25.657]    <control if="powered_down" while="" timeout="0" info="">
[23:58:25.657]      // if-block "powered_down"
[23:58:25.657]        // =>  TRUE
[23:58:25.657]      <block atomic="false" info="">
[23:58:25.657]        Message(0, "Debug/System power-up request sent");
[23:58:25.657]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:58:25.665]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:58:25.665]      </block>
[23:58:25.665]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:58:25.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:58:25.669]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:58:25.669]        // while-condition  =>  FALSE
[23:58:25.669]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:58:25.669]      </control>
[23:58:25.669]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:58:25.669]        // if-block "(__protocol & 0xFFFF) == 1"
[23:58:25.669]          // =>  FALSE
[23:58:25.669]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:58:25.669]      </control>
[23:58:25.669]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:58:25.671]        // if-block "(__protocol & 0xFFFF) == 2"
[23:58:25.671]          // =>  TRUE
[23:58:25.671]        <block atomic="false" info="">
[23:58:25.671]          Message(0, "executing SWD power up");
[23:58:25.673]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:58:25.677]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:58:25.677]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:58:25.681]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:58:25.681]        </block>
[23:58:25.681]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:58:25.681]      </control>
[23:58:25.681]      // end if-block "powered_down"
[23:58:25.681]    </control>
[23:58:25.681]    <block atomic="false" info="">
[23:58:25.681]      __var DEBUG_PORT_VAL    = 0;
[23:58:25.681]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:58:25.681]      __var ACCESS_POINT_VAL  = 0;
[23:58:25.681]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:58:25.681]      __ap = 1; 
[23:58:25.681]        // -> [__ap <= 0x00000001]
[23:58:25.681]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:58:25.689]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:58:25.689]      __ap = 4;
[23:58:25.689]        // -> [__ap <= 0x00000004]
[23:58:25.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:58:25.693]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:58:25.693]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:58:25.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:58:25.697]    </block>
[23:58:25.697]    <block atomic="false" info="">
[23:58:25.697]      __var nReset = 0x80;
[23:58:25.697]        // -> [nReset <= 0x00000080]
[23:58:25.697]      __var canReadPins = 0;
[23:58:25.697]        // -> [canReadPins <= 0x00000000]
[23:58:25.697]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:58:25.697]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:58:25.701]        // -> [canReadPins <= 0x00000001]
[23:58:25.701]    </block>
[23:58:25.701]    <control if="" while="1" timeout="200" info="">
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.701]      // while "1"  (timeout="200")
[23:58:25.701]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.705]      // while "1"  (timeout="200")
[23:58:25.705]      // while-condition  =>  TRUE
[23:58:25.709]      // while "1"  (timeout="200")
[23:58:25.709]      // while  =>  TIMEOUT
[23:58:25.709]      // end while "1"
[23:58:25.709]    </control>
[23:58:25.709]    <control if="canReadPins" while="" timeout="0" info="">
[23:58:25.709]      // if-block "canReadPins"
[23:58:25.709]        // =>  TRUE
[23:58:25.709]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:58:25.709]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:58:25.711]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:58:25.711]        // while-condition  =>  FALSE
[23:58:25.711]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:58:25.713]      </control>
[23:58:25.713]      // end if-block "canReadPins"
[23:58:25.713]    </control>
[23:58:25.713]    <control if="!canReadPins" while="" timeout="0" info="">
[23:58:25.713]      // if-block "!canReadPins"
[23:58:25.713]        // =>  FALSE
[23:58:25.713]      // skip if-block "!canReadPins"
[23:58:25.713]    </control>
[23:58:25.713]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:58:25.713]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:58:25.713]        // =>  TRUE
[23:58:25.713]      <block atomic="false" info="">
[23:58:25.713]        WriteAP(0x00, 0x190008);
[23:58:25.717]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:58:25.717]        WriteAP(0xF0, 0x01);
[23:58:25.722]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:58:25.722]      </block>
[23:58:25.722]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:58:25.722]    </control>
[23:58:25.722]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:58:25.722]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:58:25.722]        // =>  FALSE
[23:58:25.722]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:58:25.722]    </control>
[23:58:25.722]    <block atomic="false" info="">
[23:58:25.722]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:58:25.733]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:58:25.733]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:58:25.733]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:58:25.733]      __ap = 0; //lets make sure we reset the access point selection
[23:58:25.733]        // -> [__ap <= 0x00000000]
[23:58:25.733]    </block>
[23:58:25.733]  </sequence>
[23:58:25.733]  
[23:58:25.769]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:58:25.769]  
[23:58:25.769]  <debugvars>
[23:58:25.769]    // Pre-defined
[23:58:25.769]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:25.769]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:25.769]    __dp=0x00000000
[23:58:25.771]    __ap=0x00000000
[23:58:25.771]    __traceout=0x00000000      (Trace Disabled)
[23:58:25.771]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:25.771]    __FlashAddr=0x00000000
[23:58:25.771]    __FlashLen=0x00000000
[23:58:25.771]    __FlashArg=0x00000000
[23:58:25.771]    __FlashOp=0x00000000
[23:58:25.771]    __Result=0x00000000
[23:58:25.771]  </debugvars>
[23:58:25.771]  
[23:58:25.771]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:58:25.771]    <block atomic="false" info="">
[23:58:25.771]      __var deviceID = 0;
[23:58:25.771]        // -> [deviceID <= 0x00000000]
[23:58:25.771]      __var version = 0;
[23:58:25.771]        // -> [version <= 0x00000000]
[23:58:25.771]      __var partNum = 0;
[23:58:25.771]        // -> [partNum <= 0x00000000]
[23:58:25.771]      __var manuf = 0;
[23:58:25.771]        // -> [manuf <= 0x00000000]
[23:58:25.771]      __var isMSPM0G1X0X_G3X0X = 0;
[23:58:25.771]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:58:25.771]      __var isProduction = 0;
[23:58:25.771]        // -> [isProduction <= 0x00000000]
[23:58:25.771]      __var continueId = 0;
[23:58:25.771]        // -> [continueId <= 0x00000000]
[23:58:25.771]      deviceID =   Read32(0x41C40004);
[23:58:25.777]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:58:25.777]        // -> [deviceID <= 0x2BB8802F]
[23:58:25.777]      version = deviceID >> 28;
[23:58:25.777]        // -> [version <= 0x00000002]
[23:58:25.777]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:58:25.777]        // -> [partNum <= 0x0000BB88]
[23:58:25.777]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:58:25.777]        // -> [manuf <= 0x00000017]
[23:58:25.777]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:58:25.777]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:58:25.777]      isProduction = (version > 0);
[23:58:25.777]        // -> [isProduction <= 0x00000001]
[23:58:25.777]    </block>
[23:58:25.777]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:58:25.777]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:58:25.777]        // =>  FALSE
[23:58:25.777]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:58:25.777]    </control>
[23:58:25.777]    <control if="continueId == 4" while="" timeout="0" info="">
[23:58:25.777]      // if-block "continueId == 4"
[23:58:25.777]        // =>  FALSE
[23:58:25.777]      // skip if-block "continueId == 4"
[23:58:25.777]    </control>
[23:58:25.777]    <control if="!isProduction" while="" timeout="0" info="">
[23:58:25.781]      // if-block "!isProduction"
[23:58:25.781]        // =>  FALSE
[23:58:25.781]      // skip if-block "!isProduction"
[23:58:25.781]    </control>
[23:58:25.781]  </sequence>
[23:58:25.781]  
[00:01:21.040]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:01:21.040]  
[00:01:21.049]  <debugvars>
[00:01:21.049]    // Pre-defined
[00:01:21.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:01:21.049]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:01:21.049]    __dp=0x00000000
[00:01:21.049]    __ap=0x00000000
[00:01:21.049]    __traceout=0x00000000      (Trace Disabled)
[00:01:21.049]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:01:21.051]    __FlashAddr=0x00000000
[00:01:21.051]    __FlashLen=0x00000000
[00:01:21.051]    __FlashArg=0x00000000
[00:01:21.051]    __FlashOp=0x00000000
[00:01:21.051]    __Result=0x00000000
[00:01:21.051]  </debugvars>
[00:01:21.051]  
[00:01:21.051]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:01:21.051]    <block atomic="false" info="">
[00:01:21.051]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:01:21.051]        // -> [isSWJ <= 0x00000001]
[00:01:21.052]      __var hasDormant = __protocol & 0x00020000;
[00:01:21.052]        // -> [hasDormant <= 0x00000000]
[00:01:21.052]      __var protType   = __protocol & 0x0000FFFF;
[00:01:21.052]        // -> [protType <= 0x00000002]
[00:01:21.052]    </block>
[00:01:21.052]    <control if="protType == 1" while="" timeout="0" info="">
[00:01:21.052]      // if-block "protType == 1"
[00:01:21.052]        // =>  FALSE
[00:01:21.052]      // skip if-block "protType == 1"
[00:01:21.052]    </control>
[00:01:21.052]    <control if="protType == 2" while="" timeout="0" info="">
[00:01:21.052]      // if-block "protType == 2"
[00:01:21.052]        // =>  TRUE
[00:01:21.052]      <control if="isSWJ" while="" timeout="0" info="">
[00:01:21.052]        // if-block "isSWJ"
[00:01:21.054]          // =>  TRUE
[00:01:21.054]        <control if="hasDormant" while="" timeout="0" info="">
[00:01:21.054]          // if-block "hasDormant"
[00:01:21.054]            // =>  FALSE
[00:01:21.054]          // skip if-block "hasDormant"
[00:01:21.054]        </control>
[00:01:21.054]        <control if="!hasDormant" while="" timeout="0" info="">
[00:01:21.054]          // if-block "!hasDormant"
[00:01:21.054]            // =>  TRUE
[00:01:21.054]          <block atomic="false" info="">
[00:01:21.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:01:21.054]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:01:21.054]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:01:21.058]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:01:21.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:01:21.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:01:21.062]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:01:21.065]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:01:21.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:01:21.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:01:21.066]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:01:21.068]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:01:21.068]          </block>
[00:01:21.068]          // end if-block "!hasDormant"
[00:01:21.068]        </control>
[00:01:21.068]        // end if-block "isSWJ"
[00:01:21.068]      </control>
[00:01:21.068]      <control if="!isSWJ" while="" timeout="0" info="">
[00:01:21.068]        // if-block "!isSWJ"
[00:01:21.068]          // =>  FALSE
[00:01:21.068]        // skip if-block "!isSWJ"
[00:01:21.068]      </control>
[00:01:21.070]      <block atomic="false" info="">
[00:01:21.070]        ReadDP(0x0);
[00:01:21.071]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:01:21.071]      </block>
[00:01:21.071]      // end if-block "protType == 2"
[00:01:21.071]    </control>
[00:01:21.071]  </sequence>
[00:01:21.072]  
[00:01:21.079]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:01:21.079]  
[00:01:21.079]  <debugvars>
[00:01:21.079]    // Pre-defined
[00:01:21.079]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:01:21.079]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:01:21.079]    __dp=0x00000000
[00:01:21.079]    __ap=0x00000000
[00:01:21.079]    __traceout=0x00000000      (Trace Disabled)
[00:01:21.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:01:21.079]    __FlashAddr=0x00000000
[00:01:21.079]    __FlashLen=0x00000000
[00:01:21.079]    __FlashArg=0x00000000
[00:01:21.079]    __FlashOp=0x00000000
[00:01:21.079]    __Result=0x00000000
[00:01:21.079]  </debugvars>
[00:01:21.079]  
[00:01:21.079]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:01:21.079]    <block atomic="false" info="">
[00:01:21.079]      __var SW_DP_ABORT       = 0x0;
[00:01:21.079]        // -> [SW_DP_ABORT <= 0x00000000]
[00:01:21.079]      __var DP_CTRL_STAT      = 0x4;
[00:01:21.079]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:01:21.079]      __var DP_SELECT         = 0x8;
[00:01:21.079]        // -> [DP_SELECT <= 0x00000008]
[00:01:21.079]      __var powered_down      = 0;
[00:01:21.079]        // -> [powered_down <= 0x00000000]
[00:01:21.079]      WriteDP(DP_SELECT, 0x00000000);
[00:01:21.085]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:01:21.085]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:01:21.085]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:01:21.087]        // -> [powered_down <= 0x00000001]
[00:01:21.087]    </block>
[00:01:21.087]    <control if="powered_down" while="" timeout="0" info="">
[00:01:21.087]      // if-block "powered_down"
[00:01:21.087]        // =>  TRUE
[00:01:21.087]      <block atomic="false" info="">
[00:01:21.087]        Message(0, "Debug/System power-up request sent");
[00:01:21.088]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:01:21.092]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:01:21.092]      </block>
[00:01:21.092]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:01:21.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:01:21.095]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:01:21.095]        // while-condition  =>  FALSE
[00:01:21.095]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:01:21.095]      </control>
[00:01:21.095]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:01:21.095]        // if-block "(__protocol & 0xFFFF) == 1"
[00:01:21.095]          // =>  FALSE
[00:01:21.095]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:01:21.095]      </control>
[00:01:21.095]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:01:21.095]        // if-block "(__protocol & 0xFFFF) == 2"
[00:01:21.095]          // =>  TRUE
[00:01:21.095]        <block atomic="false" info="">
[00:01:21.095]          Message(0, "executing SWD power up");
[00:01:21.099]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:01:21.099]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:01:21.099]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:01:21.102]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:01:21.104]        </block>
[00:01:21.104]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:01:21.104]      </control>
[00:01:21.104]      // end if-block "powered_down"
[00:01:21.104]    </control>
[00:01:21.104]    <block atomic="false" info="">
[00:01:21.104]      __var DEBUG_PORT_VAL    = 0;
[00:01:21.104]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:01:21.104]      __var ACCESS_POINT_VAL  = 0;
[00:01:21.104]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:01:21.104]      __ap = 1; 
[00:01:21.104]        // -> [__ap <= 0x00000001]
[00:01:21.104]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:01:21.111]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:01:21.111]      __ap = 4;
[00:01:21.111]        // -> [__ap <= 0x00000004]
[00:01:21.111]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:01:21.117]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:01:21.117]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:01:21.117]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:01:21.120]    </block>
[00:01:21.120]    <block atomic="false" info="">
[00:01:21.120]      __var nReset = 0x80;
[00:01:21.120]        // -> [nReset <= 0x00000080]
[00:01:21.120]      __var canReadPins = 0;
[00:01:21.120]        // -> [canReadPins <= 0x00000000]
[00:01:21.120]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:01:21.125]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:01:21.125]        // -> [canReadPins <= 0x00000001]
[00:01:21.125]    </block>
[00:01:21.125]    <control if="" while="1" timeout="200" info="">
[00:01:21.125]      // while "1"  (timeout="200")
[00:01:21.125]      // while-condition  =>  TRUE
[00:01:21.125]      // while "1"  (timeout="200")
[00:01:21.125]      // while-condition  =>  TRUE
[00:01:21.125]      // while "1"  (timeout="200")
[00:01:21.125]      // while-condition  =>  TRUE
[00:01:21.125]      // while "1"  (timeout="200")
[00:01:21.125]      // while-condition  =>  TRUE
[00:01:21.125]      // while "1"  (timeout="200")
[00:01:21.129]      // while-condition  =>  TRUE
[00:01:21.129]      // while "1"  (timeout="200")
[00:01:21.129]      // while  =>  TIMEOUT
[00:01:21.129]      // end while "1"
[00:01:21.129]    </control>
[00:01:21.129]    <control if="canReadPins" while="" timeout="0" info="">
[00:01:21.130]      // if-block "canReadPins"
[00:01:21.130]        // =>  TRUE
[00:01:21.130]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:01:21.130]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:01:21.135]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:01:21.135]        // while-condition  =>  FALSE
[00:01:21.135]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:01:21.135]      </control>
[00:01:21.135]      // end if-block "canReadPins"
[00:01:21.135]    </control>
[00:01:21.135]    <control if="!canReadPins" while="" timeout="0" info="">
[00:01:21.135]      // if-block "!canReadPins"
[00:01:21.135]        // =>  FALSE
[00:01:21.137]      // skip if-block "!canReadPins"
[00:01:21.137]    </control>
[00:01:21.137]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:01:21.137]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:01:21.137]        // =>  TRUE
[00:01:21.137]      <block atomic="false" info="">
[00:01:21.137]        WriteAP(0x00, 0x190008);
[00:01:21.137]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:01:21.137]        WriteAP(0xF0, 0x01);
[00:01:21.144]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:01:21.144]      </block>
[00:01:21.144]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:01:21.144]    </control>
[00:01:21.144]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:01:21.144]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:01:21.144]        // =>  FALSE
[00:01:21.144]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:01:21.144]    </control>
[00:01:21.144]    <block atomic="false" info="">
[00:01:21.144]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:01:21.155]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:01:21.155]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:01:21.155]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:01:21.157]      __ap = 0; //lets make sure we reset the access point selection
[00:01:21.157]        // -> [__ap <= 0x00000000]
[00:01:21.157]    </block>
[00:01:21.157]  </sequence>
[00:01:21.157]  
[00:01:21.195]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:01:21.195]  
[00:01:21.195]  <debugvars>
[00:01:21.195]    // Pre-defined
[00:01:21.195]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:01:21.195]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:01:21.195]    __dp=0x00000000
[00:01:21.195]    __ap=0x00000000
[00:01:21.195]    __traceout=0x00000000      (Trace Disabled)
[00:01:21.195]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:01:21.195]    __FlashAddr=0x00000000
[00:01:21.195]    __FlashLen=0x00000000
[00:01:21.195]    __FlashArg=0x00000000
[00:01:21.195]    __FlashOp=0x00000000
[00:01:21.197]    __Result=0x00000000
[00:01:21.197]  </debugvars>
[00:01:21.197]  
[00:01:21.197]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:01:21.197]    <block atomic="false" info="">
[00:01:21.197]      __var deviceID = 0;
[00:01:21.197]        // -> [deviceID <= 0x00000000]
[00:01:21.197]      __var version = 0;
[00:01:21.197]        // -> [version <= 0x00000000]
[00:01:21.197]      __var partNum = 0;
[00:01:21.197]        // -> [partNum <= 0x00000000]
[00:01:21.197]      __var manuf = 0;
[00:01:21.197]        // -> [manuf <= 0x00000000]
[00:01:21.197]      __var isMSPM0G1X0X_G3X0X = 0;
[00:01:21.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:01:21.197]      __var isProduction = 0;
[00:01:21.197]        // -> [isProduction <= 0x00000000]
[00:01:21.197]      __var continueId = 0;
[00:01:21.197]        // -> [continueId <= 0x00000000]
[00:01:21.199]      deviceID =   Read32(0x41C40004);
[00:01:21.202]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:01:21.202]        // -> [deviceID <= 0x2BB8802F]
[00:01:21.202]      version = deviceID >> 28;
[00:01:21.205]        // -> [version <= 0x00000002]
[00:01:21.205]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:01:21.205]        // -> [partNum <= 0x0000BB88]
[00:01:21.205]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:01:21.205]        // -> [manuf <= 0x00000017]
[00:01:21.205]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:01:21.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:01:21.205]      isProduction = (version > 0);
[00:01:21.205]        // -> [isProduction <= 0x00000001]
[00:01:21.205]    </block>
[00:01:21.205]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:01:21.205]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:01:21.205]        // =>  FALSE
[00:01:21.205]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:01:21.205]    </control>
[00:01:21.205]    <control if="continueId == 4" while="" timeout="0" info="">
[00:01:21.205]      // if-block "continueId == 4"
[00:01:21.205]        // =>  FALSE
[00:01:21.205]      // skip if-block "continueId == 4"
[00:01:21.205]    </control>
[00:01:21.205]    <control if="!isProduction" while="" timeout="0" info="">
[00:01:21.205]      // if-block "!isProduction"
[00:01:21.205]        // =>  FALSE
[00:01:21.205]      // skip if-block "!isProduction"
[00:01:21.205]    </control>
[00:01:21.205]  </sequence>
[00:01:21.205]  
[00:03:12.841]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:03:12.841]  
[00:03:12.841]  <debugvars>
[00:03:12.841]    // Pre-defined
[00:03:12.841]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:12.841]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:12.841]    __dp=0x00000000
[00:03:12.841]    __ap=0x00000000
[00:03:12.841]    __traceout=0x00000000      (Trace Disabled)
[00:03:12.841]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:12.841]    __FlashAddr=0x00000000
[00:03:12.841]    __FlashLen=0x00000000
[00:03:12.841]    __FlashArg=0x00000000
[00:03:12.841]    __FlashOp=0x00000000
[00:03:12.841]    __Result=0x00000000
[00:03:12.841]  </debugvars>
[00:03:12.841]  
[00:03:12.843]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:03:12.843]    <block atomic="false" info="">
[00:03:12.843]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:03:12.843]        // -> [isSWJ <= 0x00000001]
[00:03:12.843]      __var hasDormant = __protocol & 0x00020000;
[00:03:12.843]        // -> [hasDormant <= 0x00000000]
[00:03:12.843]      __var protType   = __protocol & 0x0000FFFF;
[00:03:12.843]        // -> [protType <= 0x00000002]
[00:03:12.843]    </block>
[00:03:12.843]    <control if="protType == 1" while="" timeout="0" info="">
[00:03:12.843]      // if-block "protType == 1"
[00:03:12.843]        // =>  FALSE
[00:03:12.843]      // skip if-block "protType == 1"
[00:03:12.843]    </control>
[00:03:12.843]    <control if="protType == 2" while="" timeout="0" info="">
[00:03:12.843]      // if-block "protType == 2"
[00:03:12.843]        // =>  TRUE
[00:03:12.843]      <control if="isSWJ" while="" timeout="0" info="">
[00:03:12.843]        // if-block "isSWJ"
[00:03:12.843]          // =>  TRUE
[00:03:12.843]        <control if="hasDormant" while="" timeout="0" info="">
[00:03:12.843]          // if-block "hasDormant"
[00:03:12.843]            // =>  FALSE
[00:03:12.843]          // skip if-block "hasDormant"
[00:03:12.843]        </control>
[00:03:12.843]        <control if="!hasDormant" while="" timeout="0" info="">
[00:03:12.843]          // if-block "!hasDormant"
[00:03:12.847]            // =>  TRUE
[00:03:12.847]          <block atomic="false" info="">
[00:03:12.847]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:03:12.847]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:12.847]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:03:12.851]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:03:12.851]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:03:12.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:12.851]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:03:12.855]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:03:12.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:03:12.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:12.856]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:03:12.859]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:03:12.859]          </block>
[00:03:12.859]          // end if-block "!hasDormant"
[00:03:12.859]        </control>
[00:03:12.859]        // end if-block "isSWJ"
[00:03:12.859]      </control>
[00:03:12.859]      <control if="!isSWJ" while="" timeout="0" info="">
[00:03:12.859]        // if-block "!isSWJ"
[00:03:12.859]          // =>  FALSE
[00:03:12.859]        // skip if-block "!isSWJ"
[00:03:12.859]      </control>
[00:03:12.863]      <block atomic="false" info="">
[00:03:12.863]        ReadDP(0x0);
[00:03:12.864]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:03:12.865]      </block>
[00:03:12.865]      // end if-block "protType == 2"
[00:03:12.865]    </control>
[00:03:12.865]  </sequence>
[00:03:12.865]  
[00:03:12.868]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:03:12.868]  
[00:03:12.868]  <debugvars>
[00:03:12.868]    // Pre-defined
[00:03:12.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:12.868]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:12.868]    __dp=0x00000000
[00:03:12.868]    __ap=0x00000000
[00:03:12.868]    __traceout=0x00000000      (Trace Disabled)
[00:03:12.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:12.868]    __FlashAddr=0x00000000
[00:03:12.868]    __FlashLen=0x00000000
[00:03:12.868]    __FlashArg=0x00000000
[00:03:12.868]    __FlashOp=0x00000000
[00:03:12.868]    __Result=0x00000000
[00:03:12.868]  </debugvars>
[00:03:12.868]  
[00:03:12.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:03:12.868]    <block atomic="false" info="">
[00:03:12.868]      __var SW_DP_ABORT       = 0x0;
[00:03:12.871]        // -> [SW_DP_ABORT <= 0x00000000]
[00:03:12.871]      __var DP_CTRL_STAT      = 0x4;
[00:03:12.871]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:03:12.871]      __var DP_SELECT         = 0x8;
[00:03:12.871]        // -> [DP_SELECT <= 0x00000008]
[00:03:12.871]      __var powered_down      = 0;
[00:03:12.871]        // -> [powered_down <= 0x00000000]
[00:03:12.871]      WriteDP(DP_SELECT, 0x00000000);
[00:03:12.873]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:03:12.873]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:03:12.875]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:03:12.875]        // -> [powered_down <= 0x00000001]
[00:03:12.875]    </block>
[00:03:12.875]    <control if="powered_down" while="" timeout="0" info="">
[00:03:12.875]      // if-block "powered_down"
[00:03:12.875]        // =>  TRUE
[00:03:12.875]      <block atomic="false" info="">
[00:03:12.875]        Message(0, "Debug/System power-up request sent");
[00:03:12.877]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:03:12.879]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:03:12.879]      </block>
[00:03:12.879]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:03:12.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:03:12.881]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:03:12.881]        // while-condition  =>  FALSE
[00:03:12.881]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:03:12.881]      </control>
[00:03:12.881]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:03:12.881]        // if-block "(__protocol & 0xFFFF) == 1"
[00:03:12.881]          // =>  FALSE
[00:03:12.881]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:03:12.881]      </control>
[00:03:12.881]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:03:12.881]        // if-block "(__protocol & 0xFFFF) == 2"
[00:03:12.881]          // =>  TRUE
[00:03:12.881]        <block atomic="false" info="">
[00:03:12.881]          Message(0, "executing SWD power up");
[00:03:12.883]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:03:12.886]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:03:12.886]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:03:12.891]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:03:12.891]        </block>
[00:03:12.891]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:03:12.891]      </control>
[00:03:12.891]      // end if-block "powered_down"
[00:03:12.891]    </control>
[00:03:12.891]    <block atomic="false" info="">
[00:03:12.891]      __var DEBUG_PORT_VAL    = 0;
[00:03:12.891]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:03:12.891]      __var ACCESS_POINT_VAL  = 0;
[00:03:12.891]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:03:12.891]      __ap = 1; 
[00:03:12.891]        // -> [__ap <= 0x00000001]
[00:03:12.891]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:03:12.904]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:03:12.904]      __ap = 4;
[00:03:12.904]        // -> [__ap <= 0x00000004]
[00:03:12.904]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:12.912]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:03:12.912]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:03:12.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:12.913]    </block>
[00:03:12.913]    <block atomic="false" info="">
[00:03:12.913]      __var nReset = 0x80;
[00:03:12.913]        // -> [nReset <= 0x00000080]
[00:03:12.913]      __var canReadPins = 0;
[00:03:12.913]        // -> [canReadPins <= 0x00000000]
[00:03:12.915]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:03:12.917]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:03:12.917]        // -> [canReadPins <= 0x00000001]
[00:03:12.917]    </block>
[00:03:12.917]    <control if="" while="1" timeout="200" info="">
[00:03:12.917]      // while "1"  (timeout="200")
[00:03:12.917]      // while-condition  =>  TRUE
[00:03:12.917]      // while "1"  (timeout="200")
[00:03:12.917]      // while-condition  =>  TRUE
[00:03:12.917]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.919]      // while-condition  =>  TRUE
[00:03:12.919]      // while "1"  (timeout="200")
[00:03:12.920]      // while-condition  =>  TRUE
[00:03:12.920]      // while "1"  (timeout="200")
[00:03:12.920]      // while-condition  =>  TRUE
[00:03:12.920]      // while "1"  (timeout="200")
[00:03:12.920]      // while-condition  =>  TRUE
[00:03:12.920]      // while "1"  (timeout="200")
[00:03:12.920]      // while-condition  =>  TRUE
[00:03:12.920]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.921]      // while "1"  (timeout="200")
[00:03:12.921]      // while-condition  =>  TRUE
[00:03:12.923]      // while "1"  (timeout="200")
[00:03:12.923]      // while-condition  =>  TRUE
[00:03:12.923]      // while "1"  (timeout="200")
[00:03:12.923]      // while-condition  =>  TRUE
[00:03:12.923]      // while "1"  (timeout="200")
[00:03:12.923]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.924]      // while "1"  (timeout="200")
[00:03:12.924]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.925]      // while "1"  (timeout="200")
[00:03:12.925]      // while-condition  =>  TRUE
[00:03:12.927]      // while "1"  (timeout="200")
[00:03:12.927]      // while  =>  TIMEOUT
[00:03:12.927]      // end while "1"
[00:03:12.927]    </control>
[00:03:12.927]    <control if="canReadPins" while="" timeout="0" info="">
[00:03:12.927]      // if-block "canReadPins"
[00:03:12.927]        // =>  TRUE
[00:03:12.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:03:12.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:03:12.929]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:03:12.929]        // while-condition  =>  FALSE
[00:03:12.929]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:03:12.929]      </control>
[00:03:12.930]      // end if-block "canReadPins"
[00:03:12.930]    </control>
[00:03:12.930]    <control if="!canReadPins" while="" timeout="0" info="">
[00:03:12.930]      // if-block "!canReadPins"
[00:03:12.930]        // =>  FALSE
[00:03:12.930]      // skip if-block "!canReadPins"
[00:03:12.930]    </control>
[00:03:12.930]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:03:12.930]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:12.930]        // =>  TRUE
[00:03:12.930]      <block atomic="false" info="">
[00:03:12.930]        WriteAP(0x00, 0x190008);
[00:03:12.930]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:12.930]        WriteAP(0xF0, 0x01);
[00:03:12.933]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:12.933]      </block>
[00:03:12.937]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:12.937]    </control>
[00:03:12.937]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:03:12.937]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:12.937]        // =>  FALSE
[00:03:12.937]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:12.937]    </control>
[00:03:12.937]    <block atomic="false" info="">
[00:03:12.938]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:12.945]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:03:12.945]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:03:12.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:12.948]      __ap = 0; //lets make sure we reset the access point selection
[00:03:12.948]        // -> [__ap <= 0x00000000]
[00:03:12.948]    </block>
[00:03:12.949]  </sequence>
[00:03:12.949]  
[00:03:12.987]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:03:12.987]  
[00:03:12.987]  <debugvars>
[00:03:12.987]    // Pre-defined
[00:03:12.987]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:12.987]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:12.987]    __dp=0x00000000
[00:03:12.987]    __ap=0x00000000
[00:03:12.987]    __traceout=0x00000000      (Trace Disabled)
[00:03:12.987]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:12.987]    __FlashAddr=0x00000000
[00:03:12.987]    __FlashLen=0x00000000
[00:03:12.989]    __FlashArg=0x00000000
[00:03:12.989]    __FlashOp=0x00000000
[00:03:12.989]    __Result=0x00000000
[00:03:12.989]  </debugvars>
[00:03:12.989]  
[00:03:12.989]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:03:12.989]    <block atomic="false" info="">
[00:03:12.989]      __var deviceID = 0;
[00:03:12.989]        // -> [deviceID <= 0x00000000]
[00:03:12.990]      __var version = 0;
[00:03:12.990]        // -> [version <= 0x00000000]
[00:03:12.990]      __var partNum = 0;
[00:03:12.990]        // -> [partNum <= 0x00000000]
[00:03:12.990]      __var manuf = 0;
[00:03:12.990]        // -> [manuf <= 0x00000000]
[00:03:12.990]      __var isMSPM0G1X0X_G3X0X = 0;
[00:03:12.990]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:03:12.990]      __var isProduction = 0;
[00:03:12.990]        // -> [isProduction <= 0x00000000]
[00:03:12.990]      __var continueId = 0;
[00:03:12.990]        // -> [continueId <= 0x00000000]
[00:03:12.991]      deviceID =   Read32(0x41C40004);
[00:03:12.999]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:03:12.999]        // -> [deviceID <= 0x2BB8802F]
[00:03:12.999]      version = deviceID >> 28;
[00:03:12.999]        // -> [version <= 0x00000002]
[00:03:12.999]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:03:12.999]        // -> [partNum <= 0x0000BB88]
[00:03:12.999]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:03:12.999]        // -> [manuf <= 0x00000017]
[00:03:12.999]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:03:12.999]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:03:13.001]      isProduction = (version > 0);
[00:03:13.001]        // -> [isProduction <= 0x00000001]
[00:03:13.001]    </block>
[00:03:13.001]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:03:13.001]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:03:13.001]        // =>  FALSE
[00:03:13.001]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:03:13.001]    </control>
[00:03:13.001]    <control if="continueId == 4" while="" timeout="0" info="">
[00:03:13.001]      // if-block "continueId == 4"
[00:03:13.001]        // =>  FALSE
[00:03:13.002]      // skip if-block "continueId == 4"
[00:03:13.002]    </control>
[00:03:13.002]    <control if="!isProduction" while="" timeout="0" info="">
[00:03:13.002]      // if-block "!isProduction"
[00:03:13.002]        // =>  FALSE
[00:03:13.002]      // skip if-block "!isProduction"
[00:03:13.002]    </control>
[00:03:13.002]  </sequence>
[00:03:13.002]  
[00:03:48.345]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:03:48.345]  
[00:03:48.345]  <debugvars>
[00:03:48.345]    // Pre-defined
[00:03:48.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:48.345]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:03:48.345]    __dp=0x00000000
[00:03:48.345]    __ap=0x00000000
[00:03:48.346]    __traceout=0x00000000      (Trace Disabled)
[00:03:48.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:48.346]    __FlashAddr=0x00000000
[00:03:48.346]    __FlashLen=0x00000000
[00:03:48.346]    __FlashArg=0x00000000
[00:03:48.346]    __FlashOp=0x00000000
[00:03:48.346]    __Result=0x00000000
[00:03:48.346]  </debugvars>
[00:03:48.346]  
[00:03:48.346]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:03:48.348]    <block atomic="false" info="">
[00:03:48.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:03:48.348]        // -> [isSWJ <= 0x00000001]
[00:03:48.348]      __var hasDormant = __protocol & 0x00020000;
[00:03:48.348]        // -> [hasDormant <= 0x00000000]
[00:03:48.348]      __var protType   = __protocol & 0x0000FFFF;
[00:03:48.348]        // -> [protType <= 0x00000002]
[00:03:48.348]    </block>
[00:03:48.348]    <control if="protType == 1" while="" timeout="0" info="">
[00:03:48.348]      // if-block "protType == 1"
[00:03:48.348]        // =>  FALSE
[00:03:48.348]      // skip if-block "protType == 1"
[00:03:48.349]    </control>
[00:03:48.349]    <control if="protType == 2" while="" timeout="0" info="">
[00:03:48.349]      // if-block "protType == 2"
[00:03:48.349]        // =>  TRUE
[00:03:48.349]      <control if="isSWJ" while="" timeout="0" info="">
[00:03:48.349]        // if-block "isSWJ"
[00:03:48.349]          // =>  TRUE
[00:03:48.349]        <control if="hasDormant" while="" timeout="0" info="">
[00:03:48.349]          // if-block "hasDormant"
[00:03:48.350]            // =>  FALSE
[00:03:48.350]          // skip if-block "hasDormant"
[00:03:48.350]        </control>
[00:03:48.350]        <control if="!hasDormant" while="" timeout="0" info="">
[00:03:48.350]          // if-block "!hasDormant"
[00:03:48.350]            // =>  TRUE
[00:03:48.350]          <block atomic="false" info="">
[00:03:48.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:03:48.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:48.354]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:03:48.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:03:48.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:03:48.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:48.358]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:03:48.360]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:03:48.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:03:48.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:48.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:03:48.363]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:03:48.363]          </block>
[00:03:48.365]          // end if-block "!hasDormant"
[00:03:48.365]        </control>
[00:03:48.365]        // end if-block "isSWJ"
[00:03:48.365]      </control>
[00:03:48.365]      <control if="!isSWJ" while="" timeout="0" info="">
[00:03:48.365]        // if-block "!isSWJ"
[00:03:48.365]          // =>  FALSE
[00:03:48.365]        // skip if-block "!isSWJ"
[00:03:48.365]      </control>
[00:03:48.365]      <block atomic="false" info="">
[00:03:48.366]        ReadDP(0x0);
[00:03:48.368]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:03:48.368]      </block>
[00:03:48.368]      // end if-block "protType == 2"
[00:03:48.368]    </control>
[00:03:48.368]  </sequence>
[00:03:48.368]  
[00:03:48.373]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:03:48.373]  
[00:03:48.373]  <debugvars>
[00:03:48.373]    // Pre-defined
[00:03:48.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:48.373]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:03:48.373]    __dp=0x00000000
[00:03:48.373]    __ap=0x00000000
[00:03:48.373]    __traceout=0x00000000      (Trace Disabled)
[00:03:48.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:48.373]    __FlashAddr=0x00000000
[00:03:48.375]    __FlashLen=0x00000000
[00:03:48.376]    __FlashArg=0x00000000
[00:03:48.376]    __FlashOp=0x00000000
[00:03:48.376]    __Result=0x00000000
[00:03:48.376]  </debugvars>
[00:03:48.376]  
[00:03:48.376]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:03:48.376]    <block atomic="false" info="">
[00:03:48.376]      __var SW_DP_ABORT       = 0x0;
[00:03:48.376]        // -> [SW_DP_ABORT <= 0x00000000]
[00:03:48.376]      __var DP_CTRL_STAT      = 0x4;
[00:03:48.376]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:03:48.376]      __var DP_SELECT         = 0x8;
[00:03:48.376]        // -> [DP_SELECT <= 0x00000008]
[00:03:48.376]      __var powered_down      = 0;
[00:03:48.376]        // -> [powered_down <= 0x00000000]
[00:03:48.377]      WriteDP(DP_SELECT, 0x00000000);
[00:03:48.380]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:03:48.380]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:03:48.383]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:03:48.383]        // -> [powered_down <= 0x00000001]
[00:03:48.383]    </block>
[00:03:48.383]    <control if="powered_down" while="" timeout="0" info="">
[00:03:48.383]      // if-block "powered_down"
[00:03:48.383]        // =>  TRUE
[00:03:48.383]      <block atomic="false" info="">
[00:03:48.383]        Message(0, "Debug/System power-up request sent");
[00:03:48.387]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:03:48.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:03:48.392]      </block>
[00:03:48.392]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:03:48.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:03:48.397]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:03:48.397]        // while-condition  =>  FALSE
[00:03:48.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:03:48.397]      </control>
[00:03:48.397]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:03:48.397]        // if-block "(__protocol & 0xFFFF) == 1"
[00:03:48.397]          // =>  FALSE
[00:03:48.397]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:03:48.397]      </control>
[00:03:48.397]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:03:48.397]        // if-block "(__protocol & 0xFFFF) == 2"
[00:03:48.397]          // =>  TRUE
[00:03:48.401]        <block atomic="false" info="">
[00:03:48.401]          Message(0, "executing SWD power up");
[00:03:48.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:03:48.402]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:03:48.402]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:03:48.407]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:03:48.407]        </block>
[00:03:48.407]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:03:48.407]      </control>
[00:03:48.408]      // end if-block "powered_down"
[00:03:48.408]    </control>
[00:03:48.408]    <block atomic="false" info="">
[00:03:48.408]      __var DEBUG_PORT_VAL    = 0;
[00:03:48.408]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:03:48.408]      __var ACCESS_POINT_VAL  = 0;
[00:03:48.408]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:03:48.408]      __ap = 1; 
[00:03:48.408]        // -> [__ap <= 0x00000001]
[00:03:48.408]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:03:48.414]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:03:48.414]      __ap = 4;
[00:03:48.414]        // -> [__ap <= 0x00000004]
[00:03:48.414]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:48.418]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:03:48.418]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:03:48.418]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:48.421]    </block>
[00:03:48.421]    <block atomic="false" info="">
[00:03:48.421]      __var nReset = 0x80;
[00:03:48.421]        // -> [nReset <= 0x00000080]
[00:03:48.421]      __var canReadPins = 0;
[00:03:48.421]        // -> [canReadPins <= 0x00000000]
[00:03:48.423]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:03:48.425]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:03:48.425]        // -> [canReadPins <= 0x00000001]
[00:03:48.425]    </block>
[00:03:48.425]    <control if="" while="1" timeout="200" info="">
[00:03:48.425]      // while "1"  (timeout="200")
[00:03:48.425]      // while-condition  =>  TRUE
[00:03:48.425]      // while "1"  (timeout="200")
[00:03:48.425]      // while-condition  =>  TRUE
[00:03:48.425]      // while "1"  (timeout="200")
[00:03:48.425]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.427]      // while "1"  (timeout="200")
[00:03:48.427]      // while-condition  =>  TRUE
[00:03:48.429]      // while "1"  (timeout="200")
[00:03:48.429]      // while-condition  =>  TRUE
[00:03:48.429]      // while "1"  (timeout="200")
[00:03:48.429]      // while-condition  =>  TRUE
[00:03:48.429]      // while "1"  (timeout="200")
[00:03:48.429]      // while-condition  =>  TRUE
[00:03:48.429]      // while "1"  (timeout="200")
[00:03:48.429]      // while-condition  =>  TRUE
[00:03:48.430]      // while "1"  (timeout="200")
[00:03:48.430]      // while-condition  =>  TRUE
[00:03:48.430]      // while "1"  (timeout="200")
[00:03:48.430]      // while-condition  =>  TRUE
[00:03:48.430]      // while "1"  (timeout="200")
[00:03:48.430]      // while-condition  =>  TRUE
[00:03:48.430]      // while "1"  (timeout="200")
[00:03:48.430]      // while-condition  =>  TRUE
[00:03:48.430]      // while "1"  (timeout="200")
[00:03:48.430]      // while-condition  =>  TRUE
[00:03:48.432]      // while "1"  (timeout="200")
[00:03:48.432]      // while-condition  =>  TRUE
[00:03:48.432]      // while "1"  (timeout="200")
[00:03:48.432]      // while-condition  =>  TRUE
[00:03:48.432]      // while "1"  (timeout="200")
[00:03:48.432]      // while-condition  =>  TRUE
[00:03:48.432]      // while "1"  (timeout="200")
[00:03:48.432]      // while-condition  =>  TRUE
[00:03:48.432]      // while "1"  (timeout="200")
[00:03:48.432]      // while-condition  =>  TRUE
[00:03:48.433]      // while "1"  (timeout="200")
[00:03:48.433]      // while-condition  =>  TRUE
[00:03:48.433]      // while "1"  (timeout="200")
[00:03:48.433]      // while-condition  =>  TRUE
[00:03:48.433]      // while "1"  (timeout="200")
[00:03:48.433]      // while-condition  =>  TRUE
[00:03:48.433]      // while "1"  (timeout="200")
[00:03:48.433]      // while-condition  =>  TRUE
[00:03:48.434]      // while "1"  (timeout="200")
[00:03:48.434]      // while-condition  =>  TRUE
[00:03:48.434]      // while "1"  (timeout="200")
[00:03:48.434]      // while-condition  =>  TRUE
[00:03:48.434]      // while "1"  (timeout="200")
[00:03:48.434]      // while-condition  =>  TRUE
[00:03:48.434]      // while "1"  (timeout="200")
[00:03:48.434]      // while-condition  =>  TRUE
[00:03:48.435]      // while "1"  (timeout="200")
[00:03:48.435]      // while-condition  =>  TRUE
[00:03:48.435]      // while "1"  (timeout="200")
[00:03:48.435]      // while-condition  =>  TRUE
[00:03:48.435]      // while "1"  (timeout="200")
[00:03:48.435]      // while-condition  =>  TRUE
[00:03:48.435]      // while "1"  (timeout="200")
[00:03:48.435]      // while-condition  =>  TRUE
[00:03:48.435]      // while "1"  (timeout="200")
[00:03:48.435]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.436]      // while-condition  =>  TRUE
[00:03:48.436]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.437]      // while "1"  (timeout="200")
[00:03:48.437]      // while-condition  =>  TRUE
[00:03:48.439]      // while "1"  (timeout="200")
[00:03:48.439]      // while-condition  =>  TRUE
[00:03:48.439]      // while "1"  (timeout="200")
[00:03:48.439]      // while-condition  =>  TRUE
[00:03:48.439]      // while "1"  (timeout="200")
[00:03:48.439]      // while-condition  =>  TRUE
[00:03:48.439]      // while "1"  (timeout="200")
[00:03:48.439]      // while-condition  =>  TRUE
[00:03:48.439]      // while "1"  (timeout="200")
[00:03:48.439]      // while-condition  =>  TRUE
[00:03:48.440]      // while "1"  (timeout="200")
[00:03:48.440]      // while-condition  =>  TRUE
[00:03:48.440]      // while "1"  (timeout="200")
[00:03:48.440]      // while-condition  =>  TRUE
[00:03:48.440]      // while "1"  (timeout="200")
[00:03:48.440]      // while-condition  =>  TRUE
[00:03:48.440]      // while "1"  (timeout="200")
[00:03:48.440]      // while-condition  =>  TRUE
[00:03:48.442]      // while "1"  (timeout="200")
[00:03:48.442]      // while  =>  TIMEOUT
[00:03:48.442]      // end while "1"
[00:03:48.442]    </control>
[00:03:48.442]    <control if="canReadPins" while="" timeout="0" info="">
[00:03:48.442]      // if-block "canReadPins"
[00:03:48.442]        // =>  TRUE
[00:03:48.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:03:48.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:03:48.443]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:03:48.443]        // while-condition  =>  FALSE
[00:03:48.443]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:03:48.443]      </control>
[00:03:48.443]      // end if-block "canReadPins"
[00:03:48.443]    </control>
[00:03:48.443]    <control if="!canReadPins" while="" timeout="0" info="">
[00:03:48.443]      // if-block "!canReadPins"
[00:03:48.445]        // =>  FALSE
[00:03:48.445]      // skip if-block "!canReadPins"
[00:03:48.445]    </control>
[00:03:48.445]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:03:48.445]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:48.445]        // =>  TRUE
[00:03:48.445]      <block atomic="false" info="">
[00:03:48.445]        WriteAP(0x00, 0x190008);
[00:03:48.447]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:48.447]        WriteAP(0xF0, 0x01);
[00:03:48.453]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:48.453]      </block>
[00:03:48.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:48.453]    </control>
[00:03:48.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:03:48.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:48.453]        // =>  FALSE
[00:03:48.454]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:48.454]    </control>
[00:03:48.454]    <block atomic="false" info="">
[00:03:48.454]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:48.463]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:03:48.463]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:03:48.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:48.463]      __ap = 0; //lets make sure we reset the access point selection
[00:03:48.463]        // -> [__ap <= 0x00000000]
[00:03:48.463]    </block>
[00:03:48.463]  </sequence>
[00:03:48.463]  
[00:03:48.499]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:03:48.499]  
[00:03:48.499]  <debugvars>
[00:03:48.499]    // Pre-defined
[00:03:48.499]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:48.499]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:03:48.499]    __dp=0x00000000
[00:03:48.499]    __ap=0x00000000
[00:03:48.499]    __traceout=0x00000000      (Trace Disabled)
[00:03:48.499]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:48.499]    __FlashAddr=0x00000000
[00:03:48.499]    __FlashLen=0x00000000
[00:03:48.499]    __FlashArg=0x00000000
[00:03:48.499]    __FlashOp=0x00000000
[00:03:48.499]    __Result=0x00000000
[00:03:48.499]  </debugvars>
[00:03:48.499]  
[00:03:48.502]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:03:48.502]    <block atomic="false" info="">
[00:03:48.502]      __var deviceID = 0;
[00:03:48.502]        // -> [deviceID <= 0x00000000]
[00:03:48.502]      __var version = 0;
[00:03:48.502]        // -> [version <= 0x00000000]
[00:03:48.502]      __var partNum = 0;
[00:03:48.502]        // -> [partNum <= 0x00000000]
[00:03:48.503]      __var manuf = 0;
[00:03:48.503]        // -> [manuf <= 0x00000000]
[00:03:48.503]      __var isMSPM0G1X0X_G3X0X = 0;
[00:03:48.503]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:03:48.503]      __var isProduction = 0;
[00:03:48.503]        // -> [isProduction <= 0x00000000]
[00:03:48.503]      __var continueId = 0;
[00:03:48.503]        // -> [continueId <= 0x00000000]
[00:03:48.503]      deviceID =   Read32(0x41C40004);
[00:03:48.507]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:03:48.507]        // -> [deviceID <= 0x2BB8802F]
[00:03:48.507]      version = deviceID >> 28;
[00:03:48.507]        // -> [version <= 0x00000002]
[00:03:48.507]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:03:48.507]        // -> [partNum <= 0x0000BB88]
[00:03:48.507]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:03:48.507]        // -> [manuf <= 0x00000017]
[00:03:48.507]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:03:48.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:03:48.509]      isProduction = (version > 0);
[00:03:48.509]        // -> [isProduction <= 0x00000001]
[00:03:48.509]    </block>
[00:03:48.509]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:03:48.509]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:03:48.509]        // =>  FALSE
[00:03:48.509]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:03:48.509]    </control>
[00:03:48.509]    <control if="continueId == 4" while="" timeout="0" info="">
[00:03:48.509]      // if-block "continueId == 4"
[00:03:48.509]        // =>  FALSE
[00:03:48.510]      // skip if-block "continueId == 4"
[00:03:48.510]    </control>
[00:03:48.510]    <control if="!isProduction" while="" timeout="0" info="">
[00:03:48.510]      // if-block "!isProduction"
[00:03:48.510]        // =>  FALSE
[00:03:48.510]      // skip if-block "!isProduction"
[00:03:48.510]    </control>
[00:03:48.510]  </sequence>
[00:03:48.510]  
[00:04:20.006]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.006]  
[00:04:20.015]  <debugvars>
[00:04:20.015]    // Pre-defined
[00:04:20.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.015]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.015]    __dp=0x00000000
[00:04:20.015]    __ap=0x00000000
[00:04:20.015]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.015]    __FlashAddr=0x00000000
[00:04:20.015]    __FlashLen=0x00000000
[00:04:20.015]    __FlashArg=0x00000000
[00:04:20.015]    __FlashOp=0x00000000
[00:04:20.015]    __Result=0x00000000
[00:04:20.015]  </debugvars>
[00:04:20.015]  
[00:04:20.015]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.015]    <block atomic="false" info="">
[00:04:20.015]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.015]        // -> [isSWJ <= 0x00000001]
[00:04:20.015]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.015]        // -> [hasDormant <= 0x00000000]
[00:04:20.015]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.015]        // -> [protType <= 0x00000002]
[00:04:20.015]    </block>
[00:04:20.015]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.015]      // if-block "protType == 1"
[00:04:20.015]        // =>  FALSE
[00:04:20.018]      // skip if-block "protType == 1"
[00:04:20.018]    </control>
[00:04:20.018]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.018]      // if-block "protType == 2"
[00:04:20.018]        // =>  TRUE
[00:04:20.018]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.018]        // if-block "isSWJ"
[00:04:20.018]          // =>  TRUE
[00:04:20.018]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.018]          // if-block "hasDormant"
[00:04:20.018]            // =>  FALSE
[00:04:20.018]          // skip if-block "hasDormant"
[00:04:20.018]        </control>
[00:04:20.018]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.018]          // if-block "!hasDormant"
[00:04:20.018]            // =>  TRUE
[00:04:20.018]          <block atomic="false" info="">
[00:04:20.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.022]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.022]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.026]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.032]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.035]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.035]          </block>
[00:04:20.035]          // end if-block "!hasDormant"
[00:04:20.035]        </control>
[00:04:20.035]        // end if-block "isSWJ"
[00:04:20.035]      </control>
[00:04:20.035]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.035]        // if-block "!isSWJ"
[00:04:20.035]          // =>  FALSE
[00:04:20.035]        // skip if-block "!isSWJ"
[00:04:20.035]      </control>
[00:04:20.035]      <block atomic="false" info="">
[00:04:20.035]        ReadDP(0x0);
[00:04:20.035]  
[00:04:20.035]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.035]  
[00:04:20.035]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.035]      </block>
[00:04:20.035]      // end if-block "protType == 2"
[00:04:20.038]    </control>
[00:04:20.038]  </sequence>
[00:04:20.038]  
[00:04:20.091]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.091]  
[00:04:20.091]  <debugvars>
[00:04:20.092]    // Pre-defined
[00:04:20.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.092]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.092]    __dp=0x00000000
[00:04:20.092]    __ap=0x00000000
[00:04:20.092]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.092]    __FlashAddr=0x00000000
[00:04:20.092]    __FlashLen=0x00000000
[00:04:20.092]    __FlashArg=0x00000000
[00:04:20.092]    __FlashOp=0x00000000
[00:04:20.092]    __Result=0x00000000
[00:04:20.092]  </debugvars>
[00:04:20.092]  
[00:04:20.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.092]    <block atomic="false" info="">
[00:04:20.092]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.092]        // -> [isSWJ <= 0x00000001]
[00:04:20.092]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.092]        // -> [hasDormant <= 0x00000000]
[00:04:20.092]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.092]        // -> [protType <= 0x00000002]
[00:04:20.092]    </block>
[00:04:20.092]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.092]      // if-block "protType == 1"
[00:04:20.092]        // =>  FALSE
[00:04:20.092]      // skip if-block "protType == 1"
[00:04:20.092]    </control>
[00:04:20.092]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.092]      // if-block "protType == 2"
[00:04:20.095]        // =>  TRUE
[00:04:20.095]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.095]        // if-block "isSWJ"
[00:04:20.095]          // =>  TRUE
[00:04:20.095]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.095]          // if-block "hasDormant"
[00:04:20.095]            // =>  FALSE
[00:04:20.095]          // skip if-block "hasDormant"
[00:04:20.095]        </control>
[00:04:20.095]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.095]          // if-block "!hasDormant"
[00:04:20.095]            // =>  TRUE
[00:04:20.095]          <block atomic="false" info="">
[00:04:20.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.098]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.100]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.100]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.108]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.108]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.108]          </block>
[00:04:20.111]          // end if-block "!hasDormant"
[00:04:20.111]        </control>
[00:04:20.111]        // end if-block "isSWJ"
[00:04:20.111]      </control>
[00:04:20.111]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.111]        // if-block "!isSWJ"
[00:04:20.112]          // =>  FALSE
[00:04:20.112]        // skip if-block "!isSWJ"
[00:04:20.112]      </control>
[00:04:20.112]      <block atomic="false" info="">
[00:04:20.112]        ReadDP(0x0);
[00:04:20.114]  
[00:04:20.114]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.114]  
[00:04:20.114]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.114]      </block>
[00:04:20.114]      // end if-block "protType == 2"
[00:04:20.114]    </control>
[00:04:20.114]  </sequence>
[00:04:20.114]  
[00:04:20.168]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.168]  
[00:04:20.168]  <debugvars>
[00:04:20.168]    // Pre-defined
[00:04:20.168]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.168]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.169]    __dp=0x00000000
[00:04:20.169]    __ap=0x00000000
[00:04:20.169]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.169]    __FlashAddr=0x00000000
[00:04:20.169]    __FlashLen=0x00000000
[00:04:20.169]    __FlashArg=0x00000000
[00:04:20.169]    __FlashOp=0x00000000
[00:04:20.169]    __Result=0x00000000
[00:04:20.169]  </debugvars>
[00:04:20.169]  
[00:04:20.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.169]    <block atomic="false" info="">
[00:04:20.169]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.169]        // -> [isSWJ <= 0x00000001]
[00:04:20.169]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.169]        // -> [hasDormant <= 0x00000000]
[00:04:20.169]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.169]        // -> [protType <= 0x00000002]
[00:04:20.169]    </block>
[00:04:20.172]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.172]      // if-block "protType == 1"
[00:04:20.172]        // =>  FALSE
[00:04:20.172]      // skip if-block "protType == 1"
[00:04:20.172]    </control>
[00:04:20.172]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.172]      // if-block "protType == 2"
[00:04:20.173]        // =>  TRUE
[00:04:20.173]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.173]        // if-block "isSWJ"
[00:04:20.173]          // =>  TRUE
[00:04:20.173]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.173]          // if-block "hasDormant"
[00:04:20.174]            // =>  FALSE
[00:04:20.174]          // skip if-block "hasDormant"
[00:04:20.174]        </control>
[00:04:20.174]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.174]          // if-block "!hasDormant"
[00:04:20.174]            // =>  TRUE
[00:04:20.174]          <block atomic="false" info="">
[00:04:20.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.176]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.177]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.178]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.179]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.188]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.188]          </block>
[00:04:20.188]          // end if-block "!hasDormant"
[00:04:20.188]        </control>
[00:04:20.188]        // end if-block "isSWJ"
[00:04:20.188]      </control>
[00:04:20.188]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.188]        // if-block "!isSWJ"
[00:04:20.188]          // =>  FALSE
[00:04:20.188]        // skip if-block "!isSWJ"
[00:04:20.188]      </control>
[00:04:20.188]      <block atomic="false" info="">
[00:04:20.188]        ReadDP(0x0);
[00:04:20.192]  
[00:04:20.192]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.192]  
[00:04:20.192]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.192]      </block>
[00:04:20.192]      // end if-block "protType == 2"
[00:04:20.192]    </control>
[00:04:20.192]  </sequence>
[00:04:20.192]  
[00:04:20.245]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.245]  
[00:04:20.245]  <debugvars>
[00:04:20.245]    // Pre-defined
[00:04:20.245]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.245]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.245]    __dp=0x00000000
[00:04:20.245]    __ap=0x00000000
[00:04:20.245]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.245]    __FlashAddr=0x00000000
[00:04:20.245]    __FlashLen=0x00000000
[00:04:20.245]    __FlashArg=0x00000000
[00:04:20.245]    __FlashOp=0x00000000
[00:04:20.245]    __Result=0x00000000
[00:04:20.245]  </debugvars>
[00:04:20.245]  
[00:04:20.247]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.247]    <block atomic="false" info="">
[00:04:20.247]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.247]        // -> [isSWJ <= 0x00000001]
[00:04:20.247]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.248]        // -> [hasDormant <= 0x00000000]
[00:04:20.248]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.248]        // -> [protType <= 0x00000002]
[00:04:20.248]    </block>
[00:04:20.248]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.248]      // if-block "protType == 1"
[00:04:20.248]        // =>  FALSE
[00:04:20.248]      // skip if-block "protType == 1"
[00:04:20.248]    </control>
[00:04:20.249]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.249]      // if-block "protType == 2"
[00:04:20.249]        // =>  TRUE
[00:04:20.249]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.249]        // if-block "isSWJ"
[00:04:20.249]          // =>  TRUE
[00:04:20.249]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.249]          // if-block "hasDormant"
[00:04:20.249]            // =>  FALSE
[00:04:20.249]          // skip if-block "hasDormant"
[00:04:20.249]        </control>
[00:04:20.249]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.249]          // if-block "!hasDormant"
[00:04:20.249]            // =>  TRUE
[00:04:20.249]          <block atomic="false" info="">
[00:04:20.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.257]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.262]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.264]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.264]          </block>
[00:04:20.264]          // end if-block "!hasDormant"
[00:04:20.264]        </control>
[00:04:20.264]        // end if-block "isSWJ"
[00:04:20.264]      </control>
[00:04:20.264]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.264]        // if-block "!isSWJ"
[00:04:20.264]          // =>  FALSE
[00:04:20.264]        // skip if-block "!isSWJ"
[00:04:20.264]      </control>
[00:04:20.264]      <block atomic="false" info="">
[00:04:20.264]        ReadDP(0x0);
[00:04:20.268]  
[00:04:20.268]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.268]  
[00:04:20.269]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.269]      </block>
[00:04:20.269]      // end if-block "protType == 2"
[00:04:20.269]    </control>
[00:04:20.269]  </sequence>
[00:04:20.269]  
[00:04:20.324]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.324]  
[00:04:20.324]  <debugvars>
[00:04:20.324]    // Pre-defined
[00:04:20.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.324]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.324]    __dp=0x00000000
[00:04:20.324]    __ap=0x00000000
[00:04:20.324]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.324]    __FlashAddr=0x00000000
[00:04:20.324]    __FlashLen=0x00000000
[00:04:20.324]    __FlashArg=0x00000000
[00:04:20.324]    __FlashOp=0x00000000
[00:04:20.324]    __Result=0x00000000
[00:04:20.324]  </debugvars>
[00:04:20.324]  
[00:04:20.324]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.324]    <block atomic="false" info="">
[00:04:20.324]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.324]        // -> [isSWJ <= 0x00000001]
[00:04:20.324]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.324]        // -> [hasDormant <= 0x00000000]
[00:04:20.324]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.324]        // -> [protType <= 0x00000002]
[00:04:20.328]    </block>
[00:04:20.328]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.328]      // if-block "protType == 1"
[00:04:20.328]        // =>  FALSE
[00:04:20.328]      // skip if-block "protType == 1"
[00:04:20.328]    </control>
[00:04:20.328]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.328]      // if-block "protType == 2"
[00:04:20.328]        // =>  TRUE
[00:04:20.328]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.328]        // if-block "isSWJ"
[00:04:20.328]          // =>  TRUE
[00:04:20.328]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.328]          // if-block "hasDormant"
[00:04:20.328]            // =>  FALSE
[00:04:20.328]          // skip if-block "hasDormant"
[00:04:20.328]        </control>
[00:04:20.328]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.328]          // if-block "!hasDormant"
[00:04:20.328]            // =>  TRUE
[00:04:20.328]          <block atomic="false" info="">
[00:04:20.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.340]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.341]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.344]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.344]          </block>
[00:04:20.344]          // end if-block "!hasDormant"
[00:04:20.344]        </control>
[00:04:20.344]        // end if-block "isSWJ"
[00:04:20.344]      </control>
[00:04:20.344]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.344]        // if-block "!isSWJ"
[00:04:20.344]          // =>  FALSE
[00:04:20.344]        // skip if-block "!isSWJ"
[00:04:20.344]      </control>
[00:04:20.344]      <block atomic="false" info="">
[00:04:20.344]        ReadDP(0x0);
[00:04:20.344]  
[00:04:20.344]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.344]  
[00:04:20.344]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.344]      </block>
[00:04:20.344]      // end if-block "protType == 2"
[00:04:20.344]    </control>
[00:04:20.344]  </sequence>
[00:04:20.344]  
[00:04:20.402]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.402]  
[00:04:20.402]  <debugvars>
[00:04:20.402]    // Pre-defined
[00:04:20.402]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.404]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.404]    __dp=0x00000000
[00:04:20.404]    __ap=0x00000000
[00:04:20.404]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.404]    __FlashAddr=0x00000000
[00:04:20.404]    __FlashLen=0x00000000
[00:04:20.404]    __FlashArg=0x00000000
[00:04:20.404]    __FlashOp=0x00000000
[00:04:20.404]    __Result=0x00000000
[00:04:20.404]  </debugvars>
[00:04:20.404]  
[00:04:20.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.404]    <block atomic="false" info="">
[00:04:20.406]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.406]        // -> [isSWJ <= 0x00000001]
[00:04:20.407]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.407]        // -> [hasDormant <= 0x00000000]
[00:04:20.407]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.407]        // -> [protType <= 0x00000002]
[00:04:20.407]    </block>
[00:04:20.407]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.407]      // if-block "protType == 1"
[00:04:20.407]        // =>  FALSE
[00:04:20.407]      // skip if-block "protType == 1"
[00:04:20.407]    </control>
[00:04:20.407]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.407]      // if-block "protType == 2"
[00:04:20.407]        // =>  TRUE
[00:04:20.407]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.408]        // if-block "isSWJ"
[00:04:20.408]          // =>  TRUE
[00:04:20.408]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.408]          // if-block "hasDormant"
[00:04:20.408]            // =>  FALSE
[00:04:20.408]          // skip if-block "hasDormant"
[00:04:20.408]        </control>
[00:04:20.408]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.408]          // if-block "!hasDormant"
[00:04:20.408]            // =>  TRUE
[00:04:20.408]          <block atomic="false" info="">
[00:04:20.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.410]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.411]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.411]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.414]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.417]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.419]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.419]          </block>
[00:04:20.419]          // end if-block "!hasDormant"
[00:04:20.419]        </control>
[00:04:20.419]        // end if-block "isSWJ"
[00:04:20.419]      </control>
[00:04:20.419]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.419]        // if-block "!isSWJ"
[00:04:20.419]          // =>  FALSE
[00:04:20.419]        // skip if-block "!isSWJ"
[00:04:20.419]      </control>
[00:04:20.419]      <block atomic="false" info="">
[00:04:20.419]        ReadDP(0x0);
[00:04:20.419]  
[00:04:20.419]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.419]  
[00:04:20.422]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.422]      </block>
[00:04:20.422]      // end if-block "protType == 2"
[00:04:20.422]    </control>
[00:04:20.422]  </sequence>
[00:04:20.422]  
[00:04:20.479]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.479]  
[00:04:20.479]  <debugvars>
[00:04:20.479]    // Pre-defined
[00:04:20.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.479]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.479]    __dp=0x00000000
[00:04:20.479]    __ap=0x00000000
[00:04:20.479]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.479]    __FlashAddr=0x00000000
[00:04:20.479]    __FlashLen=0x00000000
[00:04:20.479]    __FlashArg=0x00000000
[00:04:20.479]    __FlashOp=0x00000000
[00:04:20.479]    __Result=0x00000000
[00:04:20.479]  </debugvars>
[00:04:20.479]  
[00:04:20.483]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.483]    <block atomic="false" info="">
[00:04:20.483]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.483]        // -> [isSWJ <= 0x00000001]
[00:04:20.483]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.483]        // -> [hasDormant <= 0x00000000]
[00:04:20.483]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.483]        // -> [protType <= 0x00000002]
[00:04:20.483]    </block>
[00:04:20.483]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.483]      // if-block "protType == 1"
[00:04:20.483]        // =>  FALSE
[00:04:20.483]      // skip if-block "protType == 1"
[00:04:20.483]    </control>
[00:04:20.483]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.483]      // if-block "protType == 2"
[00:04:20.483]        // =>  TRUE
[00:04:20.483]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.483]        // if-block "isSWJ"
[00:04:20.483]          // =>  TRUE
[00:04:20.483]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.483]          // if-block "hasDormant"
[00:04:20.483]            // =>  FALSE
[00:04:20.483]          // skip if-block "hasDormant"
[00:04:20.483]        </control>
[00:04:20.483]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.483]          // if-block "!hasDormant"
[00:04:20.483]            // =>  TRUE
[00:04:20.483]          <block atomic="false" info="">
[00:04:20.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.488]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.494]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.499]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.499]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.499]          </block>
[00:04:20.499]          // end if-block "!hasDormant"
[00:04:20.499]        </control>
[00:04:20.499]        // end if-block "isSWJ"
[00:04:20.499]      </control>
[00:04:20.499]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.499]        // if-block "!isSWJ"
[00:04:20.499]          // =>  FALSE
[00:04:20.499]        // skip if-block "!isSWJ"
[00:04:20.499]      </control>
[00:04:20.499]      <block atomic="false" info="">
[00:04:20.503]        ReadDP(0x0);
[00:04:20.505]  
[00:04:20.505]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.505]  
[00:04:20.505]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.505]      </block>
[00:04:20.505]      // end if-block "protType == 2"
[00:04:20.505]    </control>
[00:04:20.505]  </sequence>
[00:04:20.505]  
[00:04:20.560]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.560]  
[00:04:20.560]  <debugvars>
[00:04:20.560]    // Pre-defined
[00:04:20.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.560]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.560]    __dp=0x00000000
[00:04:20.560]    __ap=0x00000000
[00:04:20.560]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.560]    __FlashAddr=0x00000000
[00:04:20.560]    __FlashLen=0x00000000
[00:04:20.560]    __FlashArg=0x00000000
[00:04:20.560]    __FlashOp=0x00000000
[00:04:20.560]    __Result=0x00000000
[00:04:20.560]  </debugvars>
[00:04:20.560]  
[00:04:20.560]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.560]    <block atomic="false" info="">
[00:04:20.560]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.560]        // -> [isSWJ <= 0x00000001]
[00:04:20.560]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.560]        // -> [hasDormant <= 0x00000000]
[00:04:20.560]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.564]        // -> [protType <= 0x00000002]
[00:04:20.564]    </block>
[00:04:20.564]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.564]      // if-block "protType == 1"
[00:04:20.564]        // =>  FALSE
[00:04:20.564]      // skip if-block "protType == 1"
[00:04:20.564]    </control>
[00:04:20.564]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.564]      // if-block "protType == 2"
[00:04:20.564]        // =>  TRUE
[00:04:20.564]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.564]        // if-block "isSWJ"
[00:04:20.564]          // =>  TRUE
[00:04:20.564]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.564]          // if-block "hasDormant"
[00:04:20.564]            // =>  FALSE
[00:04:20.564]          // skip if-block "hasDormant"
[00:04:20.564]        </control>
[00:04:20.564]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.564]          // if-block "!hasDormant"
[00:04:20.564]            // =>  TRUE
[00:04:20.564]          <block atomic="false" info="">
[00:04:20.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.568]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.568]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.574]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.574]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.574]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.576]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.576]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.578]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.580]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.580]          </block>
[00:04:20.580]          // end if-block "!hasDormant"
[00:04:20.582]        </control>
[00:04:20.582]        // end if-block "isSWJ"
[00:04:20.582]      </control>
[00:04:20.582]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.582]        // if-block "!isSWJ"
[00:04:20.582]          // =>  FALSE
[00:04:20.582]        // skip if-block "!isSWJ"
[00:04:20.582]      </control>
[00:04:20.582]      <block atomic="false" info="">
[00:04:20.582]        ReadDP(0x0);
[00:04:20.582]  
[00:04:20.582]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.582]  
[00:04:20.582]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.582]      </block>
[00:04:20.582]      // end if-block "protType == 2"
[00:04:20.585]    </control>
[00:04:20.585]  </sequence>
[00:04:20.585]  
[00:04:20.635]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.635]  
[00:04:20.635]  <debugvars>
[00:04:20.635]    // Pre-defined
[00:04:20.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.635]    __dp=0x00000000
[00:04:20.635]    __ap=0x00000000
[00:04:20.635]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.635]    __FlashAddr=0x00000000
[00:04:20.635]    __FlashLen=0x00000000
[00:04:20.635]    __FlashArg=0x00000000
[00:04:20.635]    __FlashOp=0x00000000
[00:04:20.638]    __Result=0x00000000
[00:04:20.638]  </debugvars>
[00:04:20.638]  
[00:04:20.638]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.638]    <block atomic="false" info="">
[00:04:20.638]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.638]        // -> [isSWJ <= 0x00000001]
[00:04:20.638]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.638]        // -> [hasDormant <= 0x00000000]
[00:04:20.638]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.639]        // -> [protType <= 0x00000002]
[00:04:20.639]    </block>
[00:04:20.639]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.639]      // if-block "protType == 1"
[00:04:20.639]        // =>  FALSE
[00:04:20.639]      // skip if-block "protType == 1"
[00:04:20.639]    </control>
[00:04:20.639]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.640]      // if-block "protType == 2"
[00:04:20.640]        // =>  TRUE
[00:04:20.640]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.640]        // if-block "isSWJ"
[00:04:20.640]          // =>  TRUE
[00:04:20.640]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.640]          // if-block "hasDormant"
[00:04:20.640]            // =>  FALSE
[00:04:20.640]          // skip if-block "hasDormant"
[00:04:20.640]        </control>
[00:04:20.640]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.640]          // if-block "!hasDormant"
[00:04:20.640]            // =>  TRUE
[00:04:20.640]          <block atomic="false" info="">
[00:04:20.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.647]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.648]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.648]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.651]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.651]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.651]          </block>
[00:04:20.651]          // end if-block "!hasDormant"
[00:04:20.651]        </control>
[00:04:20.651]        // end if-block "isSWJ"
[00:04:20.651]      </control>
[00:04:20.651]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.651]        // if-block "!isSWJ"
[00:04:20.651]          // =>  FALSE
[00:04:20.651]        // skip if-block "!isSWJ"
[00:04:20.655]      </control>
[00:04:20.655]      <block atomic="false" info="">
[00:04:20.656]        ReadDP(0x0);
[00:04:20.657]  
[00:04:20.657]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.657]  
[00:04:20.657]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.657]      </block>
[00:04:20.657]      // end if-block "protType == 2"
[00:04:20.657]    </control>
[00:04:20.657]  </sequence>
[00:04:20.657]  
[00:04:20.712]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.712]  
[00:04:20.712]  <debugvars>
[00:04:20.712]    // Pre-defined
[00:04:20.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.712]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.712]    __dp=0x00000000
[00:04:20.712]    __ap=0x00000000
[00:04:20.712]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.712]    __FlashAddr=0x00000000
[00:04:20.712]    __FlashLen=0x00000000
[00:04:20.712]    __FlashArg=0x00000000
[00:04:20.712]    __FlashOp=0x00000000
[00:04:20.714]    __Result=0x00000000
[00:04:20.714]  </debugvars>
[00:04:20.714]  
[00:04:20.714]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.714]    <block atomic="false" info="">
[00:04:20.714]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.714]        // -> [isSWJ <= 0x00000001]
[00:04:20.714]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.714]        // -> [hasDormant <= 0x00000000]
[00:04:20.714]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.714]        // -> [protType <= 0x00000002]
[00:04:20.714]    </block>
[00:04:20.716]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.716]      // if-block "protType == 1"
[00:04:20.716]        // =>  FALSE
[00:04:20.716]      // skip if-block "protType == 1"
[00:04:20.716]    </control>
[00:04:20.716]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.716]      // if-block "protType == 2"
[00:04:20.716]        // =>  TRUE
[00:04:20.716]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.716]        // if-block "isSWJ"
[00:04:20.717]          // =>  TRUE
[00:04:20.717]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.717]          // if-block "hasDormant"
[00:04:20.717]            // =>  FALSE
[00:04:20.717]          // skip if-block "hasDormant"
[00:04:20.717]        </control>
[00:04:20.717]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.717]          // if-block "!hasDormant"
[00:04:20.717]            // =>  TRUE
[00:04:20.717]          <block atomic="false" info="">
[00:04:20.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.721]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.724]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.726]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.728]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.729]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.729]          </block>
[00:04:20.729]          // end if-block "!hasDormant"
[00:04:20.729]        </control>
[00:04:20.729]        // end if-block "isSWJ"
[00:04:20.729]      </control>
[00:04:20.729]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.729]        // if-block "!isSWJ"
[00:04:20.729]          // =>  FALSE
[00:04:20.729]        // skip if-block "!isSWJ"
[00:04:20.729]      </control>
[00:04:20.729]      <block atomic="false" info="">
[00:04:20.729]        ReadDP(0x0);
[00:04:20.733]  
[00:04:20.733]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.733]  
[00:04:20.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.733]      </block>
[00:04:20.733]      // end if-block "protType == 2"
[00:04:20.733]    </control>
[00:04:20.733]  </sequence>
[00:04:20.733]  
[00:04:20.786]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.786]  
[00:04:20.786]  <debugvars>
[00:04:20.786]    // Pre-defined
[00:04:20.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.787]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.787]    __dp=0x00000000
[00:04:20.787]    __ap=0x00000000
[00:04:20.787]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.787]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.788]    __FlashAddr=0x00000000
[00:04:20.788]    __FlashLen=0x00000000
[00:04:20.788]    __FlashArg=0x00000000
[00:04:20.788]    __FlashOp=0x00000000
[00:04:20.788]    __Result=0x00000000
[00:04:20.788]  </debugvars>
[00:04:20.788]  
[00:04:20.788]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.789]    <block atomic="false" info="">
[00:04:20.789]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.789]        // -> [isSWJ <= 0x00000001]
[00:04:20.789]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.789]        // -> [hasDormant <= 0x00000000]
[00:04:20.789]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.789]        // -> [protType <= 0x00000002]
[00:04:20.789]    </block>
[00:04:20.789]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.789]      // if-block "protType == 1"
[00:04:20.790]        // =>  FALSE
[00:04:20.790]      // skip if-block "protType == 1"
[00:04:20.790]    </control>
[00:04:20.791]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.791]      // if-block "protType == 2"
[00:04:20.791]        // =>  TRUE
[00:04:20.791]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.791]        // if-block "isSWJ"
[00:04:20.791]          // =>  TRUE
[00:04:20.791]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.791]          // if-block "hasDormant"
[00:04:20.791]            // =>  FALSE
[00:04:20.791]          // skip if-block "hasDormant"
[00:04:20.791]        </control>
[00:04:20.791]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.791]          // if-block "!hasDormant"
[00:04:20.791]            // =>  TRUE
[00:04:20.791]          <block atomic="false" info="">
[00:04:20.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.791]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.794]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.798]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.802]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.802]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.802]          </block>
[00:04:20.802]          // end if-block "!hasDormant"
[00:04:20.802]        </control>
[00:04:20.802]        // end if-block "isSWJ"
[00:04:20.806]      </control>
[00:04:20.806]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.806]        // if-block "!isSWJ"
[00:04:20.806]          // =>  FALSE
[00:04:20.806]        // skip if-block "!isSWJ"
[00:04:20.806]      </control>
[00:04:20.806]      <block atomic="false" info="">
[00:04:20.806]        ReadDP(0x0);
[00:04:20.808]  
[00:04:20.808]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.808]  
[00:04:20.808]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.808]      </block>
[00:04:20.808]      // end if-block "protType == 2"
[00:04:20.808]    </control>
[00:04:20.808]  </sequence>
[00:04:20.808]  
[00:04:20.871]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.871]  
[00:04:20.872]  <debugvars>
[00:04:20.872]    // Pre-defined
[00:04:20.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.872]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.872]    __dp=0x00000000
[00:04:20.872]    __ap=0x00000000
[00:04:20.872]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.872]    __FlashAddr=0x00000000
[00:04:20.872]    __FlashLen=0x00000000
[00:04:20.873]    __FlashArg=0x00000000
[00:04:20.873]    __FlashOp=0x00000000
[00:04:20.873]    __Result=0x00000000
[00:04:20.873]  </debugvars>
[00:04:20.874]  
[00:04:20.874]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.874]    <block atomic="false" info="">
[00:04:20.874]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.874]        // -> [isSWJ <= 0x00000001]
[00:04:20.874]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.874]        // -> [hasDormant <= 0x00000000]
[00:04:20.874]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.875]        // -> [protType <= 0x00000002]
[00:04:20.875]    </block>
[00:04:20.875]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.875]      // if-block "protType == 1"
[00:04:20.875]        // =>  FALSE
[00:04:20.875]      // skip if-block "protType == 1"
[00:04:20.875]    </control>
[00:04:20.875]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.875]      // if-block "protType == 2"
[00:04:20.875]        // =>  TRUE
[00:04:20.875]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.875]        // if-block "isSWJ"
[00:04:20.875]          // =>  TRUE
[00:04:20.875]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.875]          // if-block "hasDormant"
[00:04:20.875]            // =>  FALSE
[00:04:20.875]          // skip if-block "hasDormant"
[00:04:20.875]        </control>
[00:04:20.875]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.875]          // if-block "!hasDormant"
[00:04:20.875]            // =>  TRUE
[00:04:20.875]          <block atomic="false" info="">
[00:04:20.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.879]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.885]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.891]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.891]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.891]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.891]          </block>
[00:04:20.891]          // end if-block "!hasDormant"
[00:04:20.891]        </control>
[00:04:20.891]        // end if-block "isSWJ"
[00:04:20.891]      </control>
[00:04:20.891]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.891]        // if-block "!isSWJ"
[00:04:20.891]          // =>  FALSE
[00:04:20.891]        // skip if-block "!isSWJ"
[00:04:20.891]      </control>
[00:04:20.891]      <block atomic="false" info="">
[00:04:20.891]        ReadDP(0x0);
[00:04:20.896]  
[00:04:20.896]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.896]  
[00:04:20.897]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.897]      </block>
[00:04:20.897]      // end if-block "protType == 2"
[00:04:20.897]    </control>
[00:04:20.897]  </sequence>
[00:04:20.897]  
[00:04:20.960]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:20.960]  
[00:04:20.960]  <debugvars>
[00:04:20.960]    // Pre-defined
[00:04:20.960]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:20.960]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:20.960]    __dp=0x00000000
[00:04:20.960]    __ap=0x00000000
[00:04:20.960]    __traceout=0x00000000      (Trace Disabled)
[00:04:20.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:20.960]    __FlashAddr=0x00000000
[00:04:20.960]    __FlashLen=0x00000000
[00:04:20.960]    __FlashArg=0x00000000
[00:04:20.960]    __FlashOp=0x00000000
[00:04:20.960]    __Result=0x00000000
[00:04:20.960]  </debugvars>
[00:04:20.960]  
[00:04:20.960]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:20.960]    <block atomic="false" info="">
[00:04:20.960]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:20.960]        // -> [isSWJ <= 0x00000001]
[00:04:20.960]      __var hasDormant = __protocol & 0x00020000;
[00:04:20.960]        // -> [hasDormant <= 0x00000000]
[00:04:20.960]      __var protType   = __protocol & 0x0000FFFF;
[00:04:20.960]        // -> [protType <= 0x00000002]
[00:04:20.960]    </block>
[00:04:20.960]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:20.960]      // if-block "protType == 1"
[00:04:20.960]        // =>  FALSE
[00:04:20.960]      // skip if-block "protType == 1"
[00:04:20.960]    </control>
[00:04:20.964]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:20.964]      // if-block "protType == 2"
[00:04:20.964]        // =>  TRUE
[00:04:20.964]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:20.964]        // if-block "isSWJ"
[00:04:20.964]          // =>  TRUE
[00:04:20.964]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:20.964]          // if-block "hasDormant"
[00:04:20.964]            // =>  FALSE
[00:04:20.964]          // skip if-block "hasDormant"
[00:04:20.964]        </control>
[00:04:20.964]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:20.964]          // if-block "!hasDormant"
[00:04:20.964]            // =>  TRUE
[00:04:20.964]          <block atomic="false" info="">
[00:04:20.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:20.970]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.970]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:20.972]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:20.972]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:20.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.976]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:20.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:20.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:20.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:20.980]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:20.981]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:20.981]          </block>
[00:04:20.981]          // end if-block "!hasDormant"
[00:04:20.981]        </control>
[00:04:20.981]        // end if-block "isSWJ"
[00:04:20.981]      </control>
[00:04:20.981]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:20.981]        // if-block "!isSWJ"
[00:04:20.981]          // =>  FALSE
[00:04:20.983]        // skip if-block "!isSWJ"
[00:04:20.983]      </control>
[00:04:20.983]      <block atomic="false" info="">
[00:04:20.983]        ReadDP(0x0);
[00:04:20.986]  
[00:04:20.986]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:20.986]  
[00:04:20.986]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:20.986]      </block>
[00:04:20.986]      // end if-block "protType == 2"
[00:04:20.986]    </control>
[00:04:20.986]  </sequence>
[00:04:20.986]  
[00:04:21.040]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.040]  
[00:04:21.040]  <debugvars>
[00:04:21.040]    // Pre-defined
[00:04:21.040]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.040]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.040]    __dp=0x00000000
[00:04:21.040]    __ap=0x00000000
[00:04:21.040]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.040]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.040]    __FlashAddr=0x00000000
[00:04:21.040]    __FlashLen=0x00000000
[00:04:21.040]    __FlashArg=0x00000000
[00:04:21.040]    __FlashOp=0x00000000
[00:04:21.040]    __Result=0x00000000
[00:04:21.040]  </debugvars>
[00:04:21.040]  
[00:04:21.040]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.040]    <block atomic="false" info="">
[00:04:21.040]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.040]        // -> [isSWJ <= 0x00000001]
[00:04:21.040]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.040]        // -> [hasDormant <= 0x00000000]
[00:04:21.040]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.040]        // -> [protType <= 0x00000002]
[00:04:21.044]    </block>
[00:04:21.044]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.044]      // if-block "protType == 1"
[00:04:21.044]        // =>  FALSE
[00:04:21.044]      // skip if-block "protType == 1"
[00:04:21.044]    </control>
[00:04:21.044]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.044]      // if-block "protType == 2"
[00:04:21.044]        // =>  TRUE
[00:04:21.044]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.044]        // if-block "isSWJ"
[00:04:21.044]          // =>  TRUE
[00:04:21.044]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.044]          // if-block "hasDormant"
[00:04:21.044]            // =>  FALSE
[00:04:21.044]          // skip if-block "hasDormant"
[00:04:21.044]        </control>
[00:04:21.044]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.044]          // if-block "!hasDormant"
[00:04:21.044]            // =>  TRUE
[00:04:21.044]          <block atomic="false" info="">
[00:04:21.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.044]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.051]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.052]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.061]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.062]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.062]          </block>
[00:04:21.062]          // end if-block "!hasDormant"
[00:04:21.062]        </control>
[00:04:21.062]        // end if-block "isSWJ"
[00:04:21.062]      </control>
[00:04:21.062]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.062]        // if-block "!isSWJ"
[00:04:21.063]          // =>  FALSE
[00:04:21.063]        // skip if-block "!isSWJ"
[00:04:21.063]      </control>
[00:04:21.063]      <block atomic="false" info="">
[00:04:21.063]        ReadDP(0x0);
[00:04:21.064]  
[00:04:21.064]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.064]  
[00:04:21.066]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.066]      </block>
[00:04:21.066]      // end if-block "protType == 2"
[00:04:21.066]    </control>
[00:04:21.066]  </sequence>
[00:04:21.066]  
[00:04:21.124]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.124]  
[00:04:21.124]  <debugvars>
[00:04:21.125]    // Pre-defined
[00:04:21.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.125]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.125]    __dp=0x00000000
[00:04:21.125]    __ap=0x00000000
[00:04:21.125]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.125]    __FlashAddr=0x00000000
[00:04:21.125]    __FlashLen=0x00000000
[00:04:21.126]    __FlashArg=0x00000000
[00:04:21.126]    __FlashOp=0x00000000
[00:04:21.126]    __Result=0x00000000
[00:04:21.126]  </debugvars>
[00:04:21.126]  
[00:04:21.126]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.126]    <block atomic="false" info="">
[00:04:21.126]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.126]        // -> [isSWJ <= 0x00000001]
[00:04:21.126]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.126]        // -> [hasDormant <= 0x00000000]
[00:04:21.126]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.126]        // -> [protType <= 0x00000002]
[00:04:21.126]    </block>
[00:04:21.126]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.126]      // if-block "protType == 1"
[00:04:21.126]        // =>  FALSE
[00:04:21.128]      // skip if-block "protType == 1"
[00:04:21.128]    </control>
[00:04:21.128]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.128]      // if-block "protType == 2"
[00:04:21.128]        // =>  TRUE
[00:04:21.128]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.128]        // if-block "isSWJ"
[00:04:21.128]          // =>  TRUE
[00:04:21.128]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.128]          // if-block "hasDormant"
[00:04:21.130]            // =>  FALSE
[00:04:21.130]          // skip if-block "hasDormant"
[00:04:21.130]        </control>
[00:04:21.130]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.130]          // if-block "!hasDormant"
[00:04:21.130]            // =>  TRUE
[00:04:21.130]          <block atomic="false" info="">
[00:04:21.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.132]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.138]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.144]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.144]          </block>
[00:04:21.144]          // end if-block "!hasDormant"
[00:04:21.144]        </control>
[00:04:21.144]        // end if-block "isSWJ"
[00:04:21.144]      </control>
[00:04:21.144]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.144]        // if-block "!isSWJ"
[00:04:21.144]          // =>  FALSE
[00:04:21.144]        // skip if-block "!isSWJ"
[00:04:21.145]      </control>
[00:04:21.145]      <block atomic="false" info="">
[00:04:21.145]        ReadDP(0x0);
[00:04:21.147]  
[00:04:21.147]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.147]  
[00:04:21.147]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.147]      </block>
[00:04:21.147]      // end if-block "protType == 2"
[00:04:21.147]    </control>
[00:04:21.148]  </sequence>
[00:04:21.148]  
[00:04:21.201]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.201]  
[00:04:21.201]  <debugvars>
[00:04:21.201]    // Pre-defined
[00:04:21.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.201]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.201]    __dp=0x00000000
[00:04:21.201]    __ap=0x00000000
[00:04:21.201]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.203]    __FlashAddr=0x00000000
[00:04:21.203]    __FlashLen=0x00000000
[00:04:21.203]    __FlashArg=0x00000000
[00:04:21.203]    __FlashOp=0x00000000
[00:04:21.203]    __Result=0x00000000
[00:04:21.203]  </debugvars>
[00:04:21.203]  
[00:04:21.203]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.203]    <block atomic="false" info="">
[00:04:21.203]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.203]        // -> [isSWJ <= 0x00000001]
[00:04:21.203]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.203]        // -> [hasDormant <= 0x00000000]
[00:04:21.203]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.203]        // -> [protType <= 0x00000002]
[00:04:21.203]    </block>
[00:04:21.203]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.203]      // if-block "protType == 1"
[00:04:21.203]        // =>  FALSE
[00:04:21.203]      // skip if-block "protType == 1"
[00:04:21.203]    </control>
[00:04:21.205]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.205]      // if-block "protType == 2"
[00:04:21.205]        // =>  TRUE
[00:04:21.205]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.205]        // if-block "isSWJ"
[00:04:21.205]          // =>  TRUE
[00:04:21.205]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.205]          // if-block "hasDormant"
[00:04:21.205]            // =>  FALSE
[00:04:21.206]          // skip if-block "hasDormant"
[00:04:21.206]        </control>
[00:04:21.206]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.206]          // if-block "!hasDormant"
[00:04:21.206]            // =>  TRUE
[00:04:21.206]          <block atomic="false" info="">
[00:04:21.206]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.208]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.209]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.213]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.217]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.218]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.218]          </block>
[00:04:21.218]          // end if-block "!hasDormant"
[00:04:21.218]        </control>
[00:04:21.219]        // end if-block "isSWJ"
[00:04:21.219]      </control>
[00:04:21.219]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.219]        // if-block "!isSWJ"
[00:04:21.219]          // =>  FALSE
[00:04:21.219]        // skip if-block "!isSWJ"
[00:04:21.219]      </control>
[00:04:21.219]      <block atomic="false" info="">
[00:04:21.219]        ReadDP(0x0);
[00:04:21.220]  
[00:04:21.220]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.220]  
[00:04:21.220]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.222]      </block>
[00:04:21.222]      // end if-block "protType == 2"
[00:04:21.222]    </control>
[00:04:21.222]  </sequence>
[00:04:21.222]  
[00:04:21.278]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.278]  
[00:04:21.278]  <debugvars>
[00:04:21.278]    // Pre-defined
[00:04:21.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.278]    __dp=0x00000000
[00:04:21.278]    __ap=0x00000000
[00:04:21.278]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.278]    __FlashAddr=0x00000000
[00:04:21.278]    __FlashLen=0x00000000
[00:04:21.278]    __FlashArg=0x00000000
[00:04:21.278]    __FlashOp=0x00000000
[00:04:21.280]    __Result=0x00000000
[00:04:21.280]  </debugvars>
[00:04:21.280]  
[00:04:21.280]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.280]    <block atomic="false" info="">
[00:04:21.280]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.280]        // -> [isSWJ <= 0x00000001]
[00:04:21.280]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.280]        // -> [hasDormant <= 0x00000000]
[00:04:21.280]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.280]        // -> [protType <= 0x00000002]
[00:04:21.280]    </block>
[00:04:21.280]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.280]      // if-block "protType == 1"
[00:04:21.280]        // =>  FALSE
[00:04:21.280]      // skip if-block "protType == 1"
[00:04:21.280]    </control>
[00:04:21.280]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.280]      // if-block "protType == 2"
[00:04:21.280]        // =>  TRUE
[00:04:21.282]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.282]        // if-block "isSWJ"
[00:04:21.282]          // =>  TRUE
[00:04:21.282]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.282]          // if-block "hasDormant"
[00:04:21.282]            // =>  FALSE
[00:04:21.282]          // skip if-block "hasDormant"
[00:04:21.282]        </control>
[00:04:21.282]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.282]          // if-block "!hasDormant"
[00:04:21.282]            // =>  TRUE
[00:04:21.282]          <block atomic="false" info="">
[00:04:21.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.282]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.290]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.294]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.298]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.302]          </block>
[00:04:21.302]          // end if-block "!hasDormant"
[00:04:21.302]        </control>
[00:04:21.302]        // end if-block "isSWJ"
[00:04:21.302]      </control>
[00:04:21.302]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.302]        // if-block "!isSWJ"
[00:04:21.302]          // =>  FALSE
[00:04:21.302]        // skip if-block "!isSWJ"
[00:04:21.302]      </control>
[00:04:21.302]      <block atomic="false" info="">
[00:04:21.302]        ReadDP(0x0);
[00:04:21.302]  
[00:04:21.302]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.302]  
[00:04:21.302]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.302]      </block>
[00:04:21.302]      // end if-block "protType == 2"
[00:04:21.302]    </control>
[00:04:21.302]  </sequence>
[00:04:21.302]  
[00:04:21.356]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.356]  
[00:04:21.356]  <debugvars>
[00:04:21.356]    // Pre-defined
[00:04:21.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.358]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.358]    __dp=0x00000000
[00:04:21.358]    __ap=0x00000000
[00:04:21.358]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.358]    __FlashAddr=0x00000000
[00:04:21.358]    __FlashLen=0x00000000
[00:04:21.358]    __FlashArg=0x00000000
[00:04:21.358]    __FlashOp=0x00000000
[00:04:21.358]    __Result=0x00000000
[00:04:21.358]  </debugvars>
[00:04:21.358]  
[00:04:21.358]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.358]    <block atomic="false" info="">
[00:04:21.358]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.360]        // -> [isSWJ <= 0x00000001]
[00:04:21.360]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.361]        // -> [hasDormant <= 0x00000000]
[00:04:21.361]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.361]        // -> [protType <= 0x00000002]
[00:04:21.361]    </block>
[00:04:21.361]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.361]      // if-block "protType == 1"
[00:04:21.361]        // =>  FALSE
[00:04:21.361]      // skip if-block "protType == 1"
[00:04:21.362]    </control>
[00:04:21.362]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.362]      // if-block "protType == 2"
[00:04:21.362]        // =>  TRUE
[00:04:21.362]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.362]        // if-block "isSWJ"
[00:04:21.362]          // =>  TRUE
[00:04:21.362]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.362]          // if-block "hasDormant"
[00:04:21.362]            // =>  FALSE
[00:04:21.362]          // skip if-block "hasDormant"
[00:04:21.362]        </control>
[00:04:21.362]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.362]          // if-block "!hasDormant"
[00:04:21.362]            // =>  TRUE
[00:04:21.362]          <block atomic="false" info="">
[00:04:21.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.368]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.374]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.376]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.376]          </block>
[00:04:21.376]          // end if-block "!hasDormant"
[00:04:21.376]        </control>
[00:04:21.376]        // end if-block "isSWJ"
[00:04:21.376]      </control>
[00:04:21.376]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.376]        // if-block "!isSWJ"
[00:04:21.376]          // =>  FALSE
[00:04:21.376]        // skip if-block "!isSWJ"
[00:04:21.378]      </control>
[00:04:21.378]      <block atomic="false" info="">
[00:04:21.378]        ReadDP(0x0);
[00:04:21.378]  
[00:04:21.378]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.378]  
[00:04:21.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.380]      </block>
[00:04:21.380]      // end if-block "protType == 2"
[00:04:21.380]    </control>
[00:04:21.380]  </sequence>
[00:04:21.380]  
[00:04:21.433]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.433]  
[00:04:21.433]  <debugvars>
[00:04:21.433]    // Pre-defined
[00:04:21.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.433]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.433]    __dp=0x00000000
[00:04:21.433]    __ap=0x00000000
[00:04:21.433]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.433]    __FlashAddr=0x00000000
[00:04:21.433]    __FlashLen=0x00000000
[00:04:21.435]    __FlashArg=0x00000000
[00:04:21.435]    __FlashOp=0x00000000
[00:04:21.435]    __Result=0x00000000
[00:04:21.435]  </debugvars>
[00:04:21.435]  
[00:04:21.435]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.435]    <block atomic="false" info="">
[00:04:21.435]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.435]        // -> [isSWJ <= 0x00000001]
[00:04:21.435]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.435]        // -> [hasDormant <= 0x00000000]
[00:04:21.435]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.435]        // -> [protType <= 0x00000002]
[00:04:21.436]    </block>
[00:04:21.436]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.436]      // if-block "protType == 1"
[00:04:21.436]        // =>  FALSE
[00:04:21.436]      // skip if-block "protType == 1"
[00:04:21.436]    </control>
[00:04:21.436]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.436]      // if-block "protType == 2"
[00:04:21.436]        // =>  TRUE
[00:04:21.436]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.436]        // if-block "isSWJ"
[00:04:21.436]          // =>  TRUE
[00:04:21.436]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.436]          // if-block "hasDormant"
[00:04:21.436]            // =>  FALSE
[00:04:21.438]          // skip if-block "hasDormant"
[00:04:21.438]        </control>
[00:04:21.438]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.438]          // if-block "!hasDormant"
[00:04:21.438]            // =>  TRUE
[00:04:21.438]          <block atomic="false" info="">
[00:04:21.438]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.439]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.442]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.448]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.448]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.450]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.450]          </block>
[00:04:21.450]          // end if-block "!hasDormant"
[00:04:21.450]        </control>
[00:04:21.450]        // end if-block "isSWJ"
[00:04:21.450]      </control>
[00:04:21.450]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.450]        // if-block "!isSWJ"
[00:04:21.450]          // =>  FALSE
[00:04:21.450]        // skip if-block "!isSWJ"
[00:04:21.450]      </control>
[00:04:21.450]      <block atomic="false" info="">
[00:04:21.450]        ReadDP(0x0);
[00:04:21.450]  
[00:04:21.450]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.450]  
[00:04:21.450]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.454]      </block>
[00:04:21.454]      // end if-block "protType == 2"
[00:04:21.454]    </control>
[00:04:21.454]  </sequence>
[00:04:21.454]  
[00:04:21.510]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.510]  
[00:04:21.510]  <debugvars>
[00:04:21.510]    // Pre-defined
[00:04:21.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.510]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.510]    __dp=0x00000000
[00:04:21.510]    __ap=0x00000000
[00:04:21.510]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.510]    __FlashAddr=0x00000000
[00:04:21.510]    __FlashLen=0x00000000
[00:04:21.510]    __FlashArg=0x00000000
[00:04:21.510]    __FlashOp=0x00000000
[00:04:21.510]    __Result=0x00000000
[00:04:21.510]  </debugvars>
[00:04:21.510]  
[00:04:21.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.510]    <block atomic="false" info="">
[00:04:21.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.510]        // -> [isSWJ <= 0x00000001]
[00:04:21.510]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.510]        // -> [hasDormant <= 0x00000000]
[00:04:21.510]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.510]        // -> [protType <= 0x00000002]
[00:04:21.510]    </block>
[00:04:21.510]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.510]      // if-block "protType == 1"
[00:04:21.510]        // =>  FALSE
[00:04:21.510]      // skip if-block "protType == 1"
[00:04:21.510]    </control>
[00:04:21.510]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.514]      // if-block "protType == 2"
[00:04:21.514]        // =>  TRUE
[00:04:21.514]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.514]        // if-block "isSWJ"
[00:04:21.514]          // =>  TRUE
[00:04:21.514]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.514]          // if-block "hasDormant"
[00:04:21.514]            // =>  FALSE
[00:04:21.514]          // skip if-block "hasDormant"
[00:04:21.514]        </control>
[00:04:21.514]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.514]          // if-block "!hasDormant"
[00:04:21.514]            // =>  TRUE
[00:04:21.514]          <block atomic="false" info="">
[00:04:21.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.518]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.524]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.524]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.524]          </block>
[00:04:21.524]          // end if-block "!hasDormant"
[00:04:21.524]        </control>
[00:04:21.524]        // end if-block "isSWJ"
[00:04:21.524]      </control>
[00:04:21.524]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.524]        // if-block "!isSWJ"
[00:04:21.524]          // =>  FALSE
[00:04:21.526]        // skip if-block "!isSWJ"
[00:04:21.526]      </control>
[00:04:21.526]      <block atomic="false" info="">
[00:04:21.526]        ReadDP(0x0);
[00:04:21.526]  
[00:04:21.526]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.526]  
[00:04:21.528]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.528]      </block>
[00:04:21.528]      // end if-block "protType == 2"
[00:04:21.528]    </control>
[00:04:21.528]  </sequence>
[00:04:21.528]  
[00:04:21.586]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.586]  
[00:04:21.586]  <debugvars>
[00:04:21.586]    // Pre-defined
[00:04:21.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.586]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.586]    __dp=0x00000000
[00:04:21.588]    __ap=0x00000000
[00:04:21.588]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.588]    __FlashAddr=0x00000000
[00:04:21.588]    __FlashLen=0x00000000
[00:04:21.588]    __FlashArg=0x00000000
[00:04:21.588]    __FlashOp=0x00000000
[00:04:21.588]    __Result=0x00000000
[00:04:21.588]  </debugvars>
[00:04:21.588]  
[00:04:21.588]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.588]    <block atomic="false" info="">
[00:04:21.588]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.588]        // -> [isSWJ <= 0x00000001]
[00:04:21.588]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.588]        // -> [hasDormant <= 0x00000000]
[00:04:21.588]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.590]        // -> [protType <= 0x00000002]
[00:04:21.590]    </block>
[00:04:21.590]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.590]      // if-block "protType == 1"
[00:04:21.590]        // =>  FALSE
[00:04:21.590]      // skip if-block "protType == 1"
[00:04:21.590]    </control>
[00:04:21.590]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.590]      // if-block "protType == 2"
[00:04:21.590]        // =>  TRUE
[00:04:21.590]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.590]        // if-block "isSWJ"
[00:04:21.590]          // =>  TRUE
[00:04:21.590]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.590]          // if-block "hasDormant"
[00:04:21.590]            // =>  FALSE
[00:04:21.590]          // skip if-block "hasDormant"
[00:04:21.590]        </control>
[00:04:21.590]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.590]          // if-block "!hasDormant"
[00:04:21.590]            // =>  TRUE
[00:04:21.590]          <block atomic="false" info="">
[00:04:21.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.594]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.598]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.598]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.602]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.602]          </block>
[00:04:21.602]          // end if-block "!hasDormant"
[00:04:21.602]        </control>
[00:04:21.602]        // end if-block "isSWJ"
[00:04:21.602]      </control>
[00:04:21.602]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.602]        // if-block "!isSWJ"
[00:04:21.602]          // =>  FALSE
[00:04:21.602]        // skip if-block "!isSWJ"
[00:04:21.602]      </control>
[00:04:21.602]      <block atomic="false" info="">
[00:04:21.602]        ReadDP(0x0);
[00:04:21.606]  
[00:04:21.606]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.606]  
[00:04:21.606]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.606]      </block>
[00:04:21.606]      // end if-block "protType == 2"
[00:04:21.606]    </control>
[00:04:21.606]  </sequence>
[00:04:21.606]  
[00:04:21.659]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.659]  
[00:04:21.659]  <debugvars>
[00:04:21.659]    // Pre-defined
[00:04:21.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.659]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.659]    __dp=0x00000000
[00:04:21.659]    __ap=0x00000000
[00:04:21.659]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.661]    __FlashAddr=0x00000000
[00:04:21.661]    __FlashLen=0x00000000
[00:04:21.661]    __FlashArg=0x00000000
[00:04:21.661]    __FlashOp=0x00000000
[00:04:21.661]    __Result=0x00000000
[00:04:21.661]  </debugvars>
[00:04:21.661]  
[00:04:21.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.662]    <block atomic="false" info="">
[00:04:21.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.662]        // -> [isSWJ <= 0x00000001]
[00:04:21.662]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.662]        // -> [hasDormant <= 0x00000000]
[00:04:21.662]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.662]        // -> [protType <= 0x00000002]
[00:04:21.662]    </block>
[00:04:21.662]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.662]      // if-block "protType == 1"
[00:04:21.663]        // =>  FALSE
[00:04:21.663]      // skip if-block "protType == 1"
[00:04:21.663]    </control>
[00:04:21.663]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.663]      // if-block "protType == 2"
[00:04:21.663]        // =>  TRUE
[00:04:21.663]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.663]        // if-block "isSWJ"
[00:04:21.663]          // =>  TRUE
[00:04:21.663]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.664]          // if-block "hasDormant"
[00:04:21.664]            // =>  FALSE
[00:04:21.664]          // skip if-block "hasDormant"
[00:04:21.664]        </control>
[00:04:21.664]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.664]          // if-block "!hasDormant"
[00:04:21.664]            // =>  TRUE
[00:04:21.664]          <block atomic="false" info="">
[00:04:21.665]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.668]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.671]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.671]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.677]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.677]          </block>
[00:04:21.677]          // end if-block "!hasDormant"
[00:04:21.677]        </control>
[00:04:21.677]        // end if-block "isSWJ"
[00:04:21.677]      </control>
[00:04:21.677]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.677]        // if-block "!isSWJ"
[00:04:21.677]          // =>  FALSE
[00:04:21.677]        // skip if-block "!isSWJ"
[00:04:21.678]      </control>
[00:04:21.678]      <block atomic="false" info="">
[00:04:21.678]        ReadDP(0x0);
[00:04:21.680]  
[00:04:21.680]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.680]  
[00:04:21.680]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.680]      </block>
[00:04:21.680]      // end if-block "protType == 2"
[00:04:21.680]    </control>
[00:04:21.680]  </sequence>
[00:04:21.680]  
[00:04:21.736]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.736]  
[00:04:21.736]  <debugvars>
[00:04:21.736]    // Pre-defined
[00:04:21.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.736]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.736]    __dp=0x00000000
[00:04:21.736]    __ap=0x00000000
[00:04:21.736]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.736]    __FlashAddr=0x00000000
[00:04:21.736]    __FlashLen=0x00000000
[00:04:21.736]    __FlashArg=0x00000000
[00:04:21.736]    __FlashOp=0x00000000
[00:04:21.738]    __Result=0x00000000
[00:04:21.738]  </debugvars>
[00:04:21.738]  
[00:04:21.738]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.738]    <block atomic="false" info="">
[00:04:21.738]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.738]        // -> [isSWJ <= 0x00000001]
[00:04:21.738]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.738]        // -> [hasDormant <= 0x00000000]
[00:04:21.738]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.738]        // -> [protType <= 0x00000002]
[00:04:21.738]    </block>
[00:04:21.738]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.738]      // if-block "protType == 1"
[00:04:21.738]        // =>  FALSE
[00:04:21.738]      // skip if-block "protType == 1"
[00:04:21.738]    </control>
[00:04:21.738]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.740]      // if-block "protType == 2"
[00:04:21.740]        // =>  TRUE
[00:04:21.740]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.740]        // if-block "isSWJ"
[00:04:21.740]          // =>  TRUE
[00:04:21.740]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.740]          // if-block "hasDormant"
[00:04:21.740]            // =>  FALSE
[00:04:21.740]          // skip if-block "hasDormant"
[00:04:21.740]        </control>
[00:04:21.740]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.740]          // if-block "!hasDormant"
[00:04:21.740]            // =>  TRUE
[00:04:21.740]          <block atomic="false" info="">
[00:04:21.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.744]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.744]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.752]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.752]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.752]          </block>
[00:04:21.752]          // end if-block "!hasDormant"
[00:04:21.752]        </control>
[00:04:21.752]        // end if-block "isSWJ"
[00:04:21.752]      </control>
[00:04:21.752]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.756]        // if-block "!isSWJ"
[00:04:21.756]          // =>  FALSE
[00:04:21.756]        // skip if-block "!isSWJ"
[00:04:21.756]      </control>
[00:04:21.756]      <block atomic="false" info="">
[00:04:21.756]        ReadDP(0x0);
[00:04:21.758]  
[00:04:21.758]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.758]  
[00:04:21.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.758]      </block>
[00:04:21.758]      // end if-block "protType == 2"
[00:04:21.758]    </control>
[00:04:21.758]  </sequence>
[00:04:21.758]  
[00:04:21.812]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.812]  
[00:04:21.812]  <debugvars>
[00:04:21.812]    // Pre-defined
[00:04:21.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.812]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.814]    __dp=0x00000000
[00:04:21.814]    __ap=0x00000000
[00:04:21.814]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.814]    __FlashAddr=0x00000000
[00:04:21.814]    __FlashLen=0x00000000
[00:04:21.814]    __FlashArg=0x00000000
[00:04:21.814]    __FlashOp=0x00000000
[00:04:21.814]    __Result=0x00000000
[00:04:21.815]  </debugvars>
[00:04:21.815]  
[00:04:21.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.815]    <block atomic="false" info="">
[00:04:21.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.815]        // -> [isSWJ <= 0x00000001]
[00:04:21.815]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.815]        // -> [hasDormant <= 0x00000000]
[00:04:21.816]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.816]        // -> [protType <= 0x00000002]
[00:04:21.816]    </block>
[00:04:21.816]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.816]      // if-block "protType == 1"
[00:04:21.816]        // =>  FALSE
[00:04:21.816]      // skip if-block "protType == 1"
[00:04:21.816]    </control>
[00:04:21.816]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.816]      // if-block "protType == 2"
[00:04:21.816]        // =>  TRUE
[00:04:21.817]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.817]        // if-block "isSWJ"
[00:04:21.817]          // =>  TRUE
[00:04:21.817]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.817]          // if-block "hasDormant"
[00:04:21.817]            // =>  FALSE
[00:04:21.817]          // skip if-block "hasDormant"
[00:04:21.817]        </control>
[00:04:21.818]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.818]          // if-block "!hasDormant"
[00:04:21.818]            // =>  TRUE
[00:04:21.818]          <block atomic="false" info="">
[00:04:21.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.823]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.825]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.828]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.829]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.831]          </block>
[00:04:21.831]          // end if-block "!hasDormant"
[00:04:21.831]        </control>
[00:04:21.835]        // end if-block "isSWJ"
[00:04:21.835]      </control>
[00:04:21.835]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.835]        // if-block "!isSWJ"
[00:04:21.835]          // =>  FALSE
[00:04:21.835]        // skip if-block "!isSWJ"
[00:04:21.835]      </control>
[00:04:21.835]      <block atomic="false" info="">
[00:04:21.835]        ReadDP(0x0);
[00:04:21.839]  
[00:04:21.839]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.839]  
[00:04:21.839]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.840]      </block>
[00:04:21.840]      // end if-block "protType == 2"
[00:04:21.840]    </control>
[00:04:21.840]  </sequence>
[00:04:21.840]  
[00:04:21.900]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.900]  
[00:04:21.900]  <debugvars>
[00:04:21.900]    // Pre-defined
[00:04:21.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.900]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.900]    __dp=0x00000000
[00:04:21.900]    __ap=0x00000000
[00:04:21.901]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.901]    __FlashAddr=0x00000000
[00:04:21.901]    __FlashLen=0x00000000
[00:04:21.901]    __FlashArg=0x00000000
[00:04:21.901]    __FlashOp=0x00000000
[00:04:21.901]    __Result=0x00000000
[00:04:21.901]  </debugvars>
[00:04:21.901]  
[00:04:21.901]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.901]    <block atomic="false" info="">
[00:04:21.901]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.901]        // -> [isSWJ <= 0x00000001]
[00:04:21.901]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.901]        // -> [hasDormant <= 0x00000000]
[00:04:21.901]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.901]        // -> [protType <= 0x00000002]
[00:04:21.901]    </block>
[00:04:21.901]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.903]      // if-block "protType == 1"
[00:04:21.903]        // =>  FALSE
[00:04:21.903]      // skip if-block "protType == 1"
[00:04:21.903]    </control>
[00:04:21.903]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.903]      // if-block "protType == 2"
[00:04:21.903]        // =>  TRUE
[00:04:21.903]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.903]        // if-block "isSWJ"
[00:04:21.904]          // =>  TRUE
[00:04:21.904]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.904]          // if-block "hasDormant"
[00:04:21.904]            // =>  FALSE
[00:04:21.904]          // skip if-block "hasDormant"
[00:04:21.904]        </control>
[00:04:21.904]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.904]          // if-block "!hasDormant"
[00:04:21.904]            // =>  TRUE
[00:04:21.906]          <block atomic="false" info="">
[00:04:21.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.912]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:21.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.921]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:21.921]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:21.924]          </block>
[00:04:21.924]          // end if-block "!hasDormant"
[00:04:21.924]        </control>
[00:04:21.924]        // end if-block "isSWJ"
[00:04:21.924]      </control>
[00:04:21.924]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:21.924]        // if-block "!isSWJ"
[00:04:21.924]          // =>  FALSE
[00:04:21.924]        // skip if-block "!isSWJ"
[00:04:21.924]      </control>
[00:04:21.924]      <block atomic="false" info="">
[00:04:21.924]        ReadDP(0x0);
[00:04:21.927]  
[00:04:21.927]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:21.927]  
[00:04:21.927]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:21.927]      </block>
[00:04:21.927]      // end if-block "protType == 2"
[00:04:21.927]    </control>
[00:04:21.927]  </sequence>
[00:04:21.928]  
[00:04:21.987]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:21.987]  
[00:04:21.987]  <debugvars>
[00:04:21.987]    // Pre-defined
[00:04:21.987]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:21.987]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:21.987]    __dp=0x00000000
[00:04:21.987]    __ap=0x00000000
[00:04:21.987]    __traceout=0x00000000      (Trace Disabled)
[00:04:21.988]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:21.988]    __FlashAddr=0x00000000
[00:04:21.988]    __FlashLen=0x00000000
[00:04:21.988]    __FlashArg=0x00000000
[00:04:21.988]    __FlashOp=0x00000000
[00:04:21.988]    __Result=0x00000000
[00:04:21.988]  </debugvars>
[00:04:21.988]  
[00:04:21.988]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:21.988]    <block atomic="false" info="">
[00:04:21.988]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:21.988]        // -> [isSWJ <= 0x00000001]
[00:04:21.988]      __var hasDormant = __protocol & 0x00020000;
[00:04:21.988]        // -> [hasDormant <= 0x00000000]
[00:04:21.988]      __var protType   = __protocol & 0x0000FFFF;
[00:04:21.988]        // -> [protType <= 0x00000002]
[00:04:21.988]    </block>
[00:04:21.988]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:21.988]      // if-block "protType == 1"
[00:04:21.988]        // =>  FALSE
[00:04:21.988]      // skip if-block "protType == 1"
[00:04:21.988]    </control>
[00:04:21.988]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:21.988]      // if-block "protType == 2"
[00:04:21.988]        // =>  TRUE
[00:04:21.988]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:21.991]        // if-block "isSWJ"
[00:04:21.991]          // =>  TRUE
[00:04:21.991]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:21.991]          // if-block "hasDormant"
[00:04:21.991]            // =>  FALSE
[00:04:21.991]          // skip if-block "hasDormant"
[00:04:21.992]        </control>
[00:04:21.992]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:21.992]          // if-block "!hasDormant"
[00:04:21.992]            // =>  TRUE
[00:04:21.992]          <block atomic="false" info="">
[00:04:21.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:21.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.992]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:21.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:21.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:21.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:21.995]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:21.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:21.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.003]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.003]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.003]          </block>
[00:04:22.003]          // end if-block "!hasDormant"
[00:04:22.003]        </control>
[00:04:22.006]        // end if-block "isSWJ"
[00:04:22.006]      </control>
[00:04:22.006]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.006]        // if-block "!isSWJ"
[00:04:22.006]          // =>  FALSE
[00:04:22.006]        // skip if-block "!isSWJ"
[00:04:22.006]      </control>
[00:04:22.006]      <block atomic="false" info="">
[00:04:22.006]        ReadDP(0x0);
[00:04:22.008]  
[00:04:22.008]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.008]  
[00:04:22.008]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.008]      </block>
[00:04:22.008]      // end if-block "protType == 2"
[00:04:22.008]    </control>
[00:04:22.008]  </sequence>
[00:04:22.008]  
[00:04:22.064]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.064]  
[00:04:22.064]  <debugvars>
[00:04:22.064]    // Pre-defined
[00:04:22.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.064]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.064]    __dp=0x00000000
[00:04:22.064]    __ap=0x00000000
[00:04:22.064]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.064]    __FlashAddr=0x00000000
[00:04:22.064]    __FlashLen=0x00000000
[00:04:22.064]    __FlashArg=0x00000000
[00:04:22.064]    __FlashOp=0x00000000
[00:04:22.064]    __Result=0x00000000
[00:04:22.064]  </debugvars>
[00:04:22.064]  
[00:04:22.064]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.064]    <block atomic="false" info="">
[00:04:22.064]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.064]        // -> [isSWJ <= 0x00000001]
[00:04:22.064]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.064]        // -> [hasDormant <= 0x00000000]
[00:04:22.064]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.064]        // -> [protType <= 0x00000002]
[00:04:22.064]    </block>
[00:04:22.064]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.064]      // if-block "protType == 1"
[00:04:22.064]        // =>  FALSE
[00:04:22.064]      // skip if-block "protType == 1"
[00:04:22.064]    </control>
[00:04:22.064]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.064]      // if-block "protType == 2"
[00:04:22.064]        // =>  TRUE
[00:04:22.064]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.064]        // if-block "isSWJ"
[00:04:22.064]          // =>  TRUE
[00:04:22.068]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.068]          // if-block "hasDormant"
[00:04:22.068]            // =>  FALSE
[00:04:22.068]          // skip if-block "hasDormant"
[00:04:22.068]        </control>
[00:04:22.068]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.068]          // if-block "!hasDormant"
[00:04:22.068]            // =>  TRUE
[00:04:22.068]          <block atomic="false" info="">
[00:04:22.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:22.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.070]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:22.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:22.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:22.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:22.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:22.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.079]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.082]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.082]          </block>
[00:04:22.082]          // end if-block "!hasDormant"
[00:04:22.082]        </control>
[00:04:22.082]        // end if-block "isSWJ"
[00:04:22.082]      </control>
[00:04:22.082]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.082]        // if-block "!isSWJ"
[00:04:22.082]          // =>  FALSE
[00:04:22.082]        // skip if-block "!isSWJ"
[00:04:22.082]      </control>
[00:04:22.082]      <block atomic="false" info="">
[00:04:22.082]        ReadDP(0x0);
[00:04:22.085]  
[00:04:22.085]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.085]  
[00:04:22.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.085]      </block>
[00:04:22.085]      // end if-block "protType == 2"
[00:04:22.085]    </control>
[00:04:22.085]  </sequence>
[00:04:22.085]  
[00:04:22.142]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.142]  
[00:04:22.142]  <debugvars>
[00:04:22.142]    // Pre-defined
[00:04:22.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.142]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.142]    __dp=0x00000000
[00:04:22.142]    __ap=0x00000000
[00:04:22.142]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.142]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.142]    __FlashAddr=0x00000000
[00:04:22.142]    __FlashLen=0x00000000
[00:04:22.142]    __FlashArg=0x00000000
[00:04:22.142]    __FlashOp=0x00000000
[00:04:22.142]    __Result=0x00000000
[00:04:22.142]  </debugvars>
[00:04:22.142]  
[00:04:22.142]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.145]    <block atomic="false" info="">
[00:04:22.145]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.145]        // -> [isSWJ <= 0x00000001]
[00:04:22.145]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.145]        // -> [hasDormant <= 0x00000000]
[00:04:22.145]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.145]        // -> [protType <= 0x00000002]
[00:04:22.145]    </block>
[00:04:22.145]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.145]      // if-block "protType == 1"
[00:04:22.146]        // =>  FALSE
[00:04:22.146]      // skip if-block "protType == 1"
[00:04:22.146]    </control>
[00:04:22.146]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.146]      // if-block "protType == 2"
[00:04:22.146]        // =>  TRUE
[00:04:22.146]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.146]        // if-block "isSWJ"
[00:04:22.146]          // =>  TRUE
[00:04:22.146]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.146]          // if-block "hasDormant"
[00:04:22.146]            // =>  FALSE
[00:04:22.146]          // skip if-block "hasDormant"
[00:04:22.147]        </control>
[00:04:22.147]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.147]          // if-block "!hasDormant"
[00:04:22.147]            // =>  TRUE
[00:04:22.147]          <block atomic="false" info="">
[00:04:22.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:22.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.148]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:22.154]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:22.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:22.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.155]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:22.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:22.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.158]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.158]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.160]          </block>
[00:04:22.160]          // end if-block "!hasDormant"
[00:04:22.160]        </control>
[00:04:22.160]        // end if-block "isSWJ"
[00:04:22.160]      </control>
[00:04:22.160]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.160]        // if-block "!isSWJ"
[00:04:22.160]          // =>  FALSE
[00:04:22.160]        // skip if-block "!isSWJ"
[00:04:22.160]      </control>
[00:04:22.160]      <block atomic="false" info="">
[00:04:22.160]        ReadDP(0x0);
[00:04:22.162]  
[00:04:22.162]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.162]  
[00:04:22.163]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.163]      </block>
[00:04:22.163]      // end if-block "protType == 2"
[00:04:22.163]    </control>
[00:04:22.163]  </sequence>
[00:04:22.163]  
[00:04:22.216]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.216]  
[00:04:22.216]  <debugvars>
[00:04:22.216]    // Pre-defined
[00:04:22.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.216]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.216]    __dp=0x00000000
[00:04:22.216]    __ap=0x00000000
[00:04:22.216]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.216]    __FlashAddr=0x00000000
[00:04:22.216]    __FlashLen=0x00000000
[00:04:22.218]    __FlashArg=0x00000000
[00:04:22.218]    __FlashOp=0x00000000
[00:04:22.218]    __Result=0x00000000
[00:04:22.218]  </debugvars>
[00:04:22.218]  
[00:04:22.218]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.218]    <block atomic="false" info="">
[00:04:22.218]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.219]        // -> [isSWJ <= 0x00000001]
[00:04:22.219]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.219]        // -> [hasDormant <= 0x00000000]
[00:04:22.219]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.219]        // -> [protType <= 0x00000002]
[00:04:22.219]    </block>
[00:04:22.219]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.220]      // if-block "protType == 1"
[00:04:22.220]        // =>  FALSE
[00:04:22.220]      // skip if-block "protType == 1"
[00:04:22.220]    </control>
[00:04:22.220]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.220]      // if-block "protType == 2"
[00:04:22.220]        // =>  TRUE
[00:04:22.220]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.220]        // if-block "isSWJ"
[00:04:22.220]          // =>  TRUE
[00:04:22.220]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.220]          // if-block "hasDormant"
[00:04:22.222]            // =>  FALSE
[00:04:22.222]          // skip if-block "hasDormant"
[00:04:22.222]        </control>
[00:04:22.222]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.222]          // if-block "!hasDormant"
[00:04:22.222]            // =>  TRUE
[00:04:22.222]          <block atomic="false" info="">
[00:04:22.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:22.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.223]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:22.224]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:22.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:22.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:22.233]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:22.233]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.239]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.240]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.240]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.240]          </block>
[00:04:22.240]          // end if-block "!hasDormant"
[00:04:22.240]        </control>
[00:04:22.240]        // end if-block "isSWJ"
[00:04:22.240]      </control>
[00:04:22.240]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.240]        // if-block "!isSWJ"
[00:04:22.240]          // =>  FALSE
[00:04:22.243]        // skip if-block "!isSWJ"
[00:04:22.243]      </control>
[00:04:22.243]      <block atomic="false" info="">
[00:04:22.243]        ReadDP(0x0);
[00:04:22.246]  
[00:04:22.246]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.246]  
[00:04:22.246]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.246]      </block>
[00:04:22.246]      // end if-block "protType == 2"
[00:04:22.246]    </control>
[00:04:22.246]  </sequence>
[00:04:22.246]  
[00:04:22.310]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.310]  
[00:04:22.310]  <debugvars>
[00:04:22.310]    // Pre-defined
[00:04:22.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.310]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.310]    __dp=0x00000000
[00:04:22.310]    __ap=0x00000000
[00:04:22.312]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.312]    __FlashAddr=0x00000000
[00:04:22.312]    __FlashLen=0x00000000
[00:04:22.312]    __FlashArg=0x00000000
[00:04:22.312]    __FlashOp=0x00000000
[00:04:22.312]    __Result=0x00000000
[00:04:22.312]  </debugvars>
[00:04:22.312]  
[00:04:22.312]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.312]    <block atomic="false" info="">
[00:04:22.312]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.312]        // -> [isSWJ <= 0x00000001]
[00:04:22.313]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.313]        // -> [hasDormant <= 0x00000000]
[00:04:22.313]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.313]        // -> [protType <= 0x00000002]
[00:04:22.313]    </block>
[00:04:22.313]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.313]      // if-block "protType == 1"
[00:04:22.313]        // =>  FALSE
[00:04:22.314]      // skip if-block "protType == 1"
[00:04:22.314]    </control>
[00:04:22.314]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.314]      // if-block "protType == 2"
[00:04:22.315]        // =>  TRUE
[00:04:22.315]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.315]        // if-block "isSWJ"
[00:04:22.315]          // =>  TRUE
[00:04:22.315]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.315]          // if-block "hasDormant"
[00:04:22.315]            // =>  FALSE
[00:04:22.315]          // skip if-block "hasDormant"
[00:04:22.315]        </control>
[00:04:22.315]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.315]          // if-block "!hasDormant"
[00:04:22.315]            // =>  TRUE
[00:04:22.315]          <block atomic="false" info="">
[00:04:22.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:22.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.318]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:22.326]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:22.326]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:22.328]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.328]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:22.330]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:22.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.332]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.332]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.332]          </block>
[00:04:22.332]          // end if-block "!hasDormant"
[00:04:22.332]        </control>
[00:04:22.332]        // end if-block "isSWJ"
[00:04:22.332]      </control>
[00:04:22.332]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.332]        // if-block "!isSWJ"
[00:04:22.335]          // =>  FALSE
[00:04:22.335]        // skip if-block "!isSWJ"
[00:04:22.335]      </control>
[00:04:22.335]      <block atomic="false" info="">
[00:04:22.335]        ReadDP(0x0);
[00:04:22.335]  
[00:04:22.335]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.335]  
[00:04:22.335]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.335]      </block>
[00:04:22.335]      // end if-block "protType == 2"
[00:04:22.335]    </control>
[00:04:22.335]  </sequence>
[00:04:22.335]  
[00:04:22.387]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.387]  
[00:04:22.387]  <debugvars>
[00:04:22.387]    // Pre-defined
[00:04:22.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.387]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.388]    __dp=0x00000000
[00:04:22.388]    __ap=0x00000000
[00:04:22.388]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.388]    __FlashAddr=0x00000000
[00:04:22.388]    __FlashLen=0x00000000
[00:04:22.388]    __FlashArg=0x00000000
[00:04:22.388]    __FlashOp=0x00000000
[00:04:22.389]    __Result=0x00000000
[00:04:22.389]  </debugvars>
[00:04:22.389]  
[00:04:22.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.389]    <block atomic="false" info="">
[00:04:22.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.389]        // -> [isSWJ <= 0x00000001]
[00:04:22.389]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.389]        // -> [hasDormant <= 0x00000000]
[00:04:22.389]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.389]        // -> [protType <= 0x00000002]
[00:04:22.389]    </block>
[00:04:22.391]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.391]      // if-block "protType == 1"
[00:04:22.391]        // =>  FALSE
[00:04:22.391]      // skip if-block "protType == 1"
[00:04:22.391]    </control>
[00:04:22.391]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.392]      // if-block "protType == 2"
[00:04:22.392]        // =>  TRUE
[00:04:22.392]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.392]        // if-block "isSWJ"
[00:04:22.392]          // =>  TRUE
[00:04:22.392]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.392]          // if-block "hasDormant"
[00:04:22.392]            // =>  FALSE
[00:04:22.392]          // skip if-block "hasDormant"
[00:04:22.393]        </control>
[00:04:22.393]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.393]          // if-block "!hasDormant"
[00:04:22.393]            // =>  TRUE
[00:04:22.393]          <block atomic="false" info="">
[00:04:22.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:22.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.396]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:22.396]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:22.396]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:22.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.401]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:22.401]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:22.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:22.404]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:22.404]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:22.404]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:22.404]          </block>
[00:04:22.404]          // end if-block "!hasDormant"
[00:04:22.404]        </control>
[00:04:22.407]        // end if-block "isSWJ"
[00:04:22.407]      </control>
[00:04:22.407]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:22.407]        // if-block "!isSWJ"
[00:04:22.407]          // =>  FALSE
[00:04:22.407]        // skip if-block "!isSWJ"
[00:04:22.407]      </control>
[00:04:22.407]      <block atomic="false" info="">
[00:04:22.407]        ReadDP(0x0);
[00:04:22.408]  
[00:04:22.408]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:04:22.408]  
[00:04:22.408]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:22.408]      </block>
[00:04:22.408]      // end if-block "protType == 2"
[00:04:22.408]    </control>
[00:04:22.408]  </sequence>
[00:04:22.408]  
[00:04:22.468]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:04:22.468]  
[00:04:22.468]  <debugvars>
[00:04:22.468]    // Pre-defined
[00:04:22.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:22.468]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:04:22.469]    __dp=0x00000000
[00:04:22.469]    __ap=0x00000000
[00:04:22.469]    __traceout=0x00000000      (Trace Disabled)
[00:04:22.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:22.470]    __FlashAddr=0x00000000
[00:04:22.470]    __FlashLen=0x00000000
[00:04:22.470]    __FlashArg=0x00000000
[00:04:22.470]    __FlashOp=0x00000000
[00:04:22.470]    __Result=0x00000000
[00:04:22.470]  </debugvars>
[00:04:22.470]  
[00:04:22.470]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:22.470]    <block atomic="false" info="">
[00:04:22.470]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:22.471]        // -> [isSWJ <= 0x00000001]
[00:04:22.471]      __var hasDormant = __protocol & 0x00020000;
[00:04:22.471]        // -> [hasDormant <= 0x00000000]
[00:04:22.471]      __var protType   = __protocol & 0x0000FFFF;
[00:04:22.471]        // -> [protType <= 0x00000002]
[00:04:22.471]    </block>
[00:04:22.471]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:22.471]      // if-block "protType == 1"
[00:04:22.471]        // =>  FALSE
[00:04:22.472]      // skip if-block "protType == 1"
[00:04:22.472]    </control>
[00:04:22.472]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:22.472]      // if-block "protType == 2"
[00:04:22.472]        // =>  TRUE
[00:04:22.472]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:22.472]        // if-block "isSWJ"
[00:04:22.472]          // =>  TRUE
[00:04:22.472]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:22.472]          // if-block "hasDormant"
[00:04:22.473]            // =>  FALSE
[00:04:22.473]          // skip if-block "hasDormant"
[00:04:22.473]        </control>
[00:04:22.473]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:22.473]          // if-block "!hasDormant"
[00:04:22.473]            // =>  TRUE
[00:04:22.474]          <block atomic="false" info="">
[00:04:22.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
