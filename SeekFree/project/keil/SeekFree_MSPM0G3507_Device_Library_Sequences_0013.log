/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0013.log
 *  Created     : 14:26:49 (24/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[14:26:49.098]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:26:49.098]  
[14:26:49.100]  <debugvars>
[14:26:49.100]    // Pre-defined
[14:26:49.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:26:49.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:26:49.100]    __dp=0x00000000
[14:26:49.100]    __ap=0x00000000
[14:26:49.100]    __traceout=0x00000000      (Trace Disabled)
[14:26:49.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:26:49.100]    __FlashAddr=0x00000000
[14:26:49.100]    __FlashLen=0x00000000
[14:26:49.100]    __FlashArg=0x00000000
[14:26:49.100]    __FlashOp=0x00000000
[14:26:49.100]    __Result=0x00000000
[14:26:49.100]  </debugvars>
[14:26:49.103]  
[14:26:49.103]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:26:49.103]    <block atomic="false" info="">
[14:26:49.103]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:26:49.103]        // -> [isSWJ <= 0x00000001]
[14:26:49.103]      __var hasDormant = __protocol & 0x00020000;
[14:26:49.103]        // -> [hasDormant <= 0x00000000]
[14:26:49.103]      __var protType   = __protocol & 0x0000FFFF;
[14:26:49.103]        // -> [protType <= 0x00000002]
[14:26:49.104]    </block>
[14:26:49.104]    <control if="protType == 1" while="" timeout="0" info="">
[14:26:49.104]      // if-block "protType == 1"
[14:26:49.104]        // =>  FALSE
[14:26:49.104]      // skip if-block "protType == 1"
[14:26:49.104]    </control>
[14:26:49.104]    <control if="protType == 2" while="" timeout="0" info="">
[14:26:49.104]      // if-block "protType == 2"
[14:26:49.104]        // =>  TRUE
[14:26:49.105]      <control if="isSWJ" while="" timeout="0" info="">
[14:26:49.105]        // if-block "isSWJ"
[14:26:49.105]          // =>  TRUE
[14:26:49.105]        <control if="hasDormant" while="" timeout="0" info="">
[14:26:49.105]          // if-block "hasDormant"
[14:26:49.105]            // =>  FALSE
[14:26:49.105]          // skip if-block "hasDormant"
[14:26:49.105]        </control>
[14:26:49.105]        <control if="!hasDormant" while="" timeout="0" info="">
[14:26:49.105]          // if-block "!hasDormant"
[14:26:49.105]            // =>  TRUE
[14:26:49.105]          <block atomic="false" info="">
[14:26:49.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:26:49.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:26:49.105]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:26:49.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:26:49.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:26:49.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:26:49.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:26:49.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:26:49.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:26:49.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:26:49.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:26:49.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:26:49.105]          </block>
[14:26:49.105]          // end if-block "!hasDormant"
[14:26:49.105]        </control>
[14:26:49.105]        // end if-block "isSWJ"
[14:26:49.105]      </control>
[14:26:49.105]      <control if="!isSWJ" while="" timeout="0" info="">
[14:26:49.105]        // if-block "!isSWJ"
[14:26:49.105]          // =>  FALSE
[14:26:49.105]        // skip if-block "!isSWJ"
[14:26:49.111]      </control>
[14:26:49.111]      <block atomic="false" info="">
[14:26:49.111]        ReadDP(0x0);
[14:26:49.111]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:26:49.111]      </block>
[14:26:49.111]      // end if-block "protType == 2"
[14:26:49.111]    </control>
[14:26:49.113]  </sequence>
[14:26:49.113]  
[14:26:49.113]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:26:49.113]  
[14:26:49.113]  <debugvars>
[14:26:49.113]    // Pre-defined
[14:26:49.113]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:26:49.113]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:26:49.113]    __dp=0x00000000
[14:26:49.113]    __ap=0x00000000
[14:26:49.114]    __traceout=0x00000000      (Trace Disabled)
[14:26:49.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:26:49.114]    __FlashAddr=0x00000000
[14:26:49.114]    __FlashLen=0x00000000
[14:26:49.114]    __FlashArg=0x00000000
[14:26:49.114]    __FlashOp=0x00000000
[14:26:49.114]    __Result=0x00000000
[14:26:49.114]  </debugvars>
[14:26:49.114]  
[14:26:49.114]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:26:49.114]    <block atomic="false" info="">
[14:26:49.115]      __var SW_DP_ABORT       = 0x0;
[14:26:49.115]        // -> [SW_DP_ABORT <= 0x00000000]
[14:26:49.115]      __var DP_CTRL_STAT      = 0x4;
[14:26:49.115]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:26:49.115]      __var DP_SELECT         = 0x8;
[14:26:49.115]        // -> [DP_SELECT <= 0x00000008]
[14:26:49.115]      __var powered_down      = 0;
[14:26:49.115]        // -> [powered_down <= 0x00000000]
[14:26:49.115]      WriteDP(DP_SELECT, 0x00000000);
[14:26:49.117]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:26:49.117]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:26:49.118]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:26:49.118]        // -> [powered_down <= 0x00000001]
[14:26:49.118]    </block>
[14:26:49.118]    <control if="powered_down" while="" timeout="0" info="">
[14:26:49.118]      // if-block "powered_down"
[14:26:49.118]        // =>  TRUE
[14:26:49.118]      <block atomic="false" info="">
[14:26:49.118]        Message(0, "Debug/System power-up request sent");
[14:26:49.123]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:26:49.123]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:26:49.124]      </block>
[14:26:49.124]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:26:49.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:26:49.124]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:26:49.124]        // while-condition  =>  FALSE
[14:26:49.125]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:26:49.125]      </control>
[14:26:49.125]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:26:49.125]        // if-block "(__protocol & 0xFFFF) == 1"
[14:26:49.125]          // =>  FALSE
[14:26:49.125]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:26:49.125]      </control>
[14:26:49.125]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:26:49.125]        // if-block "(__protocol & 0xFFFF) == 2"
[14:26:49.125]          // =>  TRUE
[14:26:49.125]        <block atomic="false" info="">
[14:26:49.125]          Message(0, "executing SWD power up");
[14:26:49.127]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:26:49.130]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:26:49.130]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:26:49.130]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:26:49.130]        </block>
[14:26:49.130]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:26:49.130]      </control>
[14:26:49.130]      // end if-block "powered_down"
[14:26:49.130]    </control>
[14:26:49.130]    <block atomic="false" info="">
[14:26:49.130]      __var DEBUG_PORT_VAL    = 0;
[14:26:49.130]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:26:49.130]      __var ACCESS_POINT_VAL  = 0;
[14:26:49.130]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:26:49.130]      __ap = 1; 
[14:26:49.130]        // -> [__ap <= 0x00000001]
[14:26:49.130]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:26:49.133]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:26:49.133]      __ap = 4;
[14:26:49.133]        // -> [__ap <= 0x00000004]
[14:26:49.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:26:49.134]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:26:49.134]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:26:49.134]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:26:49.136]    </block>
[14:26:49.136]    <block atomic="false" info="">
[14:26:49.136]      __var nReset = 0x80;
[14:26:49.136]        // -> [nReset <= 0x00000080]
[14:26:49.136]      __var canReadPins = 0;
[14:26:49.136]        // -> [canReadPins <= 0x00000000]
[14:26:49.136]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:26:49.136]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:26:49.136]        // -> [canReadPins <= 0x00000001]
[14:26:49.136]    </block>
[14:26:49.136]    <control if="" while="1" timeout="200" info="">
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.136]      // while-condition  =>  TRUE
[14:26:49.136]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.143]      // while-condition  =>  TRUE
[14:26:49.143]      // while "1"  (timeout="200")
[14:26:49.144]      // while-condition  =>  TRUE
[14:26:49.144]      // while "1"  (timeout="200")
[14:26:49.144]      // while  =>  TIMEOUT
[14:26:49.144]      // end while "1"
[14:26:49.144]    </control>
[14:26:49.144]    <control if="canReadPins" while="" timeout="0" info="">
[14:26:49.144]      // if-block "canReadPins"
[14:26:49.144]        // =>  TRUE
[14:26:49.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:26:49.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:26:49.145]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:26:49.145]        // while-condition  =>  FALSE
[14:26:49.145]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:26:49.145]      </control>
[14:26:49.145]      // end if-block "canReadPins"
[14:26:49.145]    </control>
[14:26:49.145]    <control if="!canReadPins" while="" timeout="0" info="">
[14:26:49.145]      // if-block "!canReadPins"
[14:26:49.145]        // =>  FALSE
[14:26:49.145]      // skip if-block "!canReadPins"
[14:26:49.145]    </control>
[14:26:49.145]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:26:49.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:26:49.145]        // =>  TRUE
[14:26:49.145]      <block atomic="false" info="">
[14:26:49.145]        WriteAP(0x00, 0x190008);
[14:26:49.145]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:26:49.145]        WriteAP(0xF0, 0x01);
[14:26:49.145]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:26:49.145]      </block>
[14:26:49.145]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:26:49.145]    </control>
[14:26:49.145]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:26:49.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:26:49.145]        // =>  FALSE
[14:26:49.145]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:26:49.145]    </control>
[14:26:49.145]    <block atomic="false" info="">
[14:26:49.145]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:26:49.145]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:26:49.145]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:26:49.145]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:26:49.154]      __ap = 0; //lets make sure we reset the access point selection
[14:26:49.154]        // -> [__ap <= 0x00000000]
[14:26:49.154]    </block>
[14:26:49.154]  </sequence>
[14:26:49.154]  
[14:26:49.156]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:26:49.156]  
[14:26:49.156]  <debugvars>
[14:26:49.156]    // Pre-defined
[14:26:49.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:26:49.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:26:49.156]    __dp=0x00000000
[14:26:49.156]    __ap=0x00000000
[14:26:49.156]    __traceout=0x00000000      (Trace Disabled)
[14:26:49.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:26:49.156]    __FlashAddr=0x00000000
[14:26:49.156]    __FlashLen=0x00000000
[14:26:49.156]    __FlashArg=0x00000000
[14:26:49.156]    __FlashOp=0x00000000
[14:26:49.156]    __Result=0x00000000
[14:26:49.156]  </debugvars>
[14:26:49.156]  
[14:26:49.156]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:26:49.156]    <block atomic="false" info="">
[14:26:49.156]      __var deviceID = 0;
[14:26:49.156]        // -> [deviceID <= 0x00000000]
[14:26:49.156]      __var version = 0;
[14:26:49.156]        // -> [version <= 0x00000000]
[14:26:49.163]      __var partNum = 0;
[14:26:49.163]        // -> [partNum <= 0x00000000]
[14:26:49.163]      __var manuf = 0;
[14:26:49.163]        // -> [manuf <= 0x00000000]
[14:26:49.163]      __var isMSPM0G1X0X_G3X0X = 0;
[14:26:49.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:26:49.163]      __var isProduction = 0;
[14:26:49.164]        // -> [isProduction <= 0x00000000]
[14:26:49.164]      __var continueId = 0;
[14:26:49.164]        // -> [continueId <= 0x00000000]
[14:26:49.164]      deviceID =   Read32(0x41C40004);
[14:26:49.165]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:26:49.165]        // -> [deviceID <= 0x2BB8802F]
[14:26:49.165]      version = deviceID >> 28;
[14:26:49.165]        // -> [version <= 0x00000002]
[14:26:49.165]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:26:49.165]        // -> [partNum <= 0x0000BB88]
[14:26:49.165]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:26:49.165]        // -> [manuf <= 0x00000017]
[14:26:49.165]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:26:49.165]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:26:49.165]      isProduction = (version > 0);
[14:26:49.165]        // -> [isProduction <= 0x00000001]
[14:26:49.165]    </block>
[14:26:49.165]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:26:49.165]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:26:49.165]        // =>  FALSE
[14:26:49.165]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:26:49.165]    </control>
[14:26:49.165]    <control if="continueId == 4" while="" timeout="0" info="">
[14:26:49.165]      // if-block "continueId == 4"
[14:26:49.165]        // =>  FALSE
[14:26:49.165]      // skip if-block "continueId == 4"
[14:26:49.165]    </control>
[14:26:49.165]    <control if="!isProduction" while="" timeout="0" info="">
[14:26:49.165]      // if-block "!isProduction"
[14:26:49.165]        // =>  FALSE
[14:26:49.165]      // skip if-block "!isProduction"
[14:26:49.165]    </control>
[14:26:49.165]  </sequence>
[14:26:49.165]  
[17:21:15.310]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:21:15.310]  
[17:21:15.310]  <debugvars>
[17:21:15.310]    // Pre-defined
[17:21:15.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:21:15.310]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:21:15.310]    __dp=0x00000000
[17:21:15.310]    __ap=0x00000000
[17:21:15.310]    __traceout=0x00000000      (Trace Disabled)
[17:21:15.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:21:15.310]    __FlashAddr=0x00000000
[17:21:15.310]    __FlashLen=0x00000000
[17:21:15.310]    __FlashArg=0x00000000
[17:21:15.310]    __FlashOp=0x00000000
[17:21:15.310]    __Result=0x00000000
[17:21:15.310]  </debugvars>
[17:21:15.310]  
[17:21:15.310]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:21:15.310]    <block atomic="false" info="">
[17:21:15.310]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:21:15.310]        // -> [isSWJ <= 0x00000001]
[17:21:15.310]      __var hasDormant = __protocol & 0x00020000;
[17:21:15.310]        // -> [hasDormant <= 0x00000000]
[17:21:15.310]      __var protType   = __protocol & 0x0000FFFF;
[17:21:15.310]        // -> [protType <= 0x00000002]
[17:21:15.310]    </block>
[17:21:15.310]    <control if="protType == 1" while="" timeout="0" info="">
[17:21:15.310]      // if-block "protType == 1"
[17:21:15.310]        // =>  FALSE
[17:21:15.310]      // skip if-block "protType == 1"
[17:21:15.310]    </control>
[17:21:15.310]    <control if="protType == 2" while="" timeout="0" info="">
[17:21:15.310]      // if-block "protType == 2"
[17:21:15.310]        // =>  TRUE
[17:21:15.310]      <control if="isSWJ" while="" timeout="0" info="">
[17:21:15.310]        // if-block "isSWJ"
[17:21:15.310]          // =>  TRUE
[17:21:15.310]        <control if="hasDormant" while="" timeout="0" info="">
[17:21:15.318]          // if-block "hasDormant"
[17:21:15.318]            // =>  FALSE
[17:21:15.318]          // skip if-block "hasDormant"
[17:21:15.318]        </control>
[17:21:15.318]        <control if="!hasDormant" while="" timeout="0" info="">
[17:21:15.318]          // if-block "!hasDormant"
[17:21:15.318]            // =>  TRUE
[17:21:15.318]          <block atomic="false" info="">
[17:21:15.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:21:15.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:15.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:21:15.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:21:15.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:21:15.328]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:15.328]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:21:15.328]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:21:15.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:21:15.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:15.335]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:21:15.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:21:15.340]          </block>
[17:21:15.340]          // end if-block "!hasDormant"
[17:21:15.340]        </control>
[17:21:15.340]        // end if-block "isSWJ"
[17:21:15.340]      </control>
[17:21:15.340]      <control if="!isSWJ" while="" timeout="0" info="">
[17:21:15.340]        // if-block "!isSWJ"
[17:21:15.340]          // =>  FALSE
[17:21:15.340]        // skip if-block "!isSWJ"
[17:21:15.340]      </control>
[17:21:15.340]      <block atomic="false" info="">
[17:21:15.340]        ReadDP(0x0);
[17:21:15.340]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:21:15.340]      </block>
[17:21:15.340]      // end if-block "protType == 2"
[17:21:15.340]    </control>
[17:21:15.340]  </sequence>
[17:21:15.340]  
[17:21:17.934]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:21:17.934]  
[17:21:17.934]  <debugvars>
[17:21:17.934]    // Pre-defined
[17:21:17.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:21:17.934]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:21:17.934]    __dp=0x00000000
[17:21:17.934]    __ap=0x00000000
[17:21:17.934]    __traceout=0x00000000      (Trace Disabled)
[17:21:17.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:21:17.934]    __FlashAddr=0x00000000
[17:21:17.934]    __FlashLen=0x00000000
[17:21:17.934]    __FlashArg=0x00000000
[17:21:17.934]    __FlashOp=0x00000000
[17:21:17.934]    __Result=0x00000000
[17:21:17.934]  </debugvars>
[17:21:17.934]  
[17:21:17.934]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:21:17.934]    <block atomic="false" info="">
[17:21:17.934]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:21:17.934]        // -> [isSWJ <= 0x00000001]
[17:21:17.934]      __var hasDormant = __protocol & 0x00020000;
[17:21:17.934]        // -> [hasDormant <= 0x00000000]
[17:21:17.934]      __var protType   = __protocol & 0x0000FFFF;
[17:21:17.934]        // -> [protType <= 0x00000002]
[17:21:17.934]    </block>
[17:21:17.934]    <control if="protType == 1" while="" timeout="0" info="">
[17:21:17.934]      // if-block "protType == 1"
[17:21:17.934]        // =>  FALSE
[17:21:17.934]      // skip if-block "protType == 1"
[17:21:17.934]    </control>
[17:21:17.934]    <control if="protType == 2" while="" timeout="0" info="">
[17:21:17.934]      // if-block "protType == 2"
[17:21:17.934]        // =>  TRUE
[17:21:17.934]      <control if="isSWJ" while="" timeout="0" info="">
[17:21:17.934]        // if-block "isSWJ"
[17:21:17.934]          // =>  TRUE
[17:21:17.934]        <control if="hasDormant" while="" timeout="0" info="">
[17:21:17.934]          // if-block "hasDormant"
[17:21:17.940]            // =>  FALSE
[17:21:17.940]          // skip if-block "hasDormant"
[17:21:17.940]        </control>
[17:21:17.940]        <control if="!hasDormant" while="" timeout="0" info="">
[17:21:17.940]          // if-block "!hasDormant"
[17:21:17.940]            // =>  TRUE
[17:21:17.940]          <block atomic="false" info="">
[17:21:17.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:21:17.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:17.942]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:21:17.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:21:17.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:21:17.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:17.946]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:21:17.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:21:17.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:21:17.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:17.946]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:21:17.955]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:21:17.955]          </block>
[17:21:17.955]          // end if-block "!hasDormant"
[17:21:17.955]        </control>
[17:21:17.955]        // end if-block "isSWJ"
[17:21:17.955]      </control>
[17:21:17.955]      <control if="!isSWJ" while="" timeout="0" info="">
[17:21:17.955]        // if-block "!isSWJ"
[17:21:17.955]          // =>  FALSE
[17:21:17.955]        // skip if-block "!isSWJ"
[17:21:17.955]      </control>
[17:21:17.955]      <block atomic="false" info="">
[17:21:17.955]        ReadDP(0x0);
[17:21:17.975]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:21:17.975]      </block>
[17:21:17.975]      // end if-block "protType == 2"
[17:21:17.975]    </control>
[17:21:17.975]  </sequence>
[17:21:17.975]  
[17:21:21.458]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:21:21.458]  
[17:21:21.458]  <debugvars>
[17:21:21.458]    // Pre-defined
[17:21:21.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:21:21.458]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:21:21.458]    __dp=0x00000000
[17:21:21.458]    __ap=0x00000000
[17:21:21.458]    __traceout=0x00000000      (Trace Disabled)
[17:21:21.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:21:21.458]    __FlashAddr=0x00000000
[17:21:21.458]    __FlashLen=0x00000000
[17:21:21.458]    __FlashArg=0x00000000
[17:21:21.458]    __FlashOp=0x00000000
[17:21:21.458]    __Result=0x00000000
[17:21:21.458]  </debugvars>
[17:21:21.458]  
[17:21:21.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:21:21.458]    <block atomic="false" info="">
[17:21:21.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:21:21.458]        // -> [isSWJ <= 0x00000001]
[17:21:21.458]      __var hasDormant = __protocol & 0x00020000;
[17:21:21.458]        // -> [hasDormant <= 0x00000000]
[17:21:21.458]      __var protType   = __protocol & 0x0000FFFF;
[17:21:21.458]        // -> [protType <= 0x00000002]
[17:21:21.458]    </block>
[17:21:21.458]    <control if="protType == 1" while="" timeout="0" info="">
[17:21:21.458]      // if-block "protType == 1"
[17:21:21.458]        // =>  FALSE
[17:21:21.458]      // skip if-block "protType == 1"
[17:21:21.468]    </control>
[17:21:21.468]    <control if="protType == 2" while="" timeout="0" info="">
[17:21:21.468]      // if-block "protType == 2"
[17:21:21.468]        // =>  TRUE
[17:21:21.468]      <control if="isSWJ" while="" timeout="0" info="">
[17:21:21.468]        // if-block "isSWJ"
[17:21:21.468]          // =>  TRUE
[17:21:21.468]        <control if="hasDormant" while="" timeout="0" info="">
[17:21:21.468]          // if-block "hasDormant"
[17:21:21.468]            // =>  FALSE
[17:21:21.468]          // skip if-block "hasDormant"
[17:21:21.468]        </control>
[17:21:21.468]        <control if="!hasDormant" while="" timeout="0" info="">
[17:21:21.468]          // if-block "!hasDormant"
[17:21:21.468]            // =>  TRUE
[17:21:21.468]          <block atomic="false" info="">
[17:21:21.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:21:21.468]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:21.468]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:21:21.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:21:21.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:21:21.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:21.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:21:21.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:21:21.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:21:21.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:21:21.488]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:21:21.488]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:21:21.488]          </block>
[17:21:21.488]          // end if-block "!hasDormant"
[17:21:21.488]        </control>
[17:21:21.488]        // end if-block "isSWJ"
[17:21:21.488]      </control>
[17:21:21.488]      <control if="!isSWJ" while="" timeout="0" info="">
[17:21:21.488]        // if-block "!isSWJ"
[17:21:21.488]          // =>  FALSE
[17:21:21.488]        // skip if-block "!isSWJ"
[17:21:21.488]      </control>
[17:21:21.488]      <block atomic="false" info="">
[17:21:21.488]        ReadDP(0x0);
[17:21:21.488]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:21:21.488]      </block>
[17:21:21.488]      // end if-block "protType == 2"
[17:21:21.488]    </control>
[17:21:21.488]  </sequence>
[17:21:21.488]  
[17:21:21.498]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:21:21.498]  
[17:21:21.498]  <debugvars>
[17:21:21.498]    // Pre-defined
[17:21:21.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:21:21.498]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:21:21.498]    __dp=0x00000000
[17:21:21.498]    __ap=0x00000000
[17:21:21.498]    __traceout=0x00000000      (Trace Disabled)
[17:21:21.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:21:21.498]    __FlashAddr=0x00000000
[17:21:21.498]    __FlashLen=0x00000000
[17:21:21.498]    __FlashArg=0x00000000
[17:21:21.498]    __FlashOp=0x00000000
[17:21:21.498]    __Result=0x00000000
[17:21:21.498]  </debugvars>
[17:21:21.498]  
[17:21:21.498]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:21:21.498]    <block atomic="false" info="">
[17:21:21.498]      __var SW_DP_ABORT       = 0x0;
[17:21:21.498]        // -> [SW_DP_ABORT <= 0x00000000]
[17:21:21.498]      __var DP_CTRL_STAT      = 0x4;
[17:21:21.498]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:21:21.498]      __var DP_SELECT         = 0x8;
[17:21:21.498]        // -> [DP_SELECT <= 0x00000008]
[17:21:21.498]      __var powered_down      = 0;
[17:21:21.498]        // -> [powered_down <= 0x00000000]
[17:21:21.498]      WriteDP(DP_SELECT, 0x00000000);
[17:21:21.498]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:21:21.498]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:21:21.508]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:21:21.508]        // -> [powered_down <= 0x00000001]
[17:21:21.508]    </block>
[17:21:21.508]    <control if="powered_down" while="" timeout="0" info="">
[17:21:21.508]      // if-block "powered_down"
[17:21:21.508]        // =>  TRUE
[17:21:21.508]      <block atomic="false" info="">
[17:21:21.508]        Message(0, "Debug/System power-up request sent");
[17:21:21.508]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:21:21.528]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:21:21.528]      </block>
[17:21:21.528]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:21:21.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:21:21.538]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:21:21.538]        // while-condition  =>  FALSE
[17:21:21.538]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:21:21.538]      </control>
[17:21:21.538]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:21:21.538]        // if-block "(__protocol & 0xFFFF) == 1"
[17:21:21.538]          // =>  FALSE
[17:21:21.538]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:21:21.538]      </control>
[17:21:21.538]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:21:21.538]        // if-block "(__protocol & 0xFFFF) == 2"
[17:21:21.538]          // =>  TRUE
[17:21:21.538]        <block atomic="false" info="">
[17:21:21.538]          Message(0, "executing SWD power up");
[17:21:21.538]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:21:21.548]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:21:21.548]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:21:21.548]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:21:21.548]        </block>
[17:21:21.548]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:21:21.548]      </control>
[17:21:21.548]      // end if-block "powered_down"
[17:21:21.548]    </control>
[17:21:21.548]    <block atomic="false" info="">
[17:21:21.548]      __var DEBUG_PORT_VAL    = 0;
[17:21:21.548]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:21:21.548]      __var ACCESS_POINT_VAL  = 0;
[17:21:21.548]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:21:21.548]      __ap = 1; 
[17:21:21.548]        // -> [__ap <= 0x00000001]
[17:21:21.548]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:21:21.558]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:21:21.558]      __ap = 4;
[17:21:21.558]        // -> [__ap <= 0x00000004]
[17:21:21.558]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:21:21.568]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:21:21.568]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:21:21.568]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:21:21.579]    </block>
[17:21:21.579]    <block atomic="false" info="">
[17:21:21.579]      __var nReset = 0x80;
[17:21:21.579]        // -> [nReset <= 0x00000080]
[17:21:21.579]      __var canReadPins = 0;
[17:21:21.579]        // -> [canReadPins <= 0x00000000]
[17:21:21.579]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:21:21.585]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:21:21.585]        // -> [canReadPins <= 0x00000001]
[17:21:21.585]    </block>
[17:21:21.585]    <control if="" while="1" timeout="200" info="">
[17:21:21.585]      // while "1"  (timeout="200")
[17:21:21.585]      // while-condition  =>  TRUE
[17:21:21.585]      // while "1"  (timeout="200")
[17:21:21.585]      // while-condition  =>  TRUE
[17:21:21.585]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.589]      // while "1"  (timeout="200")
[17:21:21.589]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.591]      // while "1"  (timeout="200")
[17:21:21.591]      // while-condition  =>  TRUE
[17:21:21.592]      // while "1"  (timeout="200")
[17:21:21.592]      // while-condition  =>  TRUE
[17:21:21.592]      // while "1"  (timeout="200")
[17:21:21.592]      // while-condition  =>  TRUE
[17:21:21.592]      // while "1"  (timeout="200")
[17:21:21.592]      // while-condition  =>  TRUE
[17:21:21.592]      // while "1"  (timeout="200")
[17:21:21.592]      // while-condition  =>  TRUE
[17:21:21.593]      // while "1"  (timeout="200")
[17:21:21.593]      // while-condition  =>  TRUE
[17:21:21.593]      // while "1"  (timeout="200")
[17:21:21.593]      // while-condition  =>  TRUE
[17:21:21.593]      // while "1"  (timeout="200")
[17:21:21.593]      // while-condition  =>  TRUE
[17:21:21.593]      // while "1"  (timeout="200")
[17:21:21.593]      // while-condition  =>  TRUE
[17:21:21.593]      // while "1"  (timeout="200")
[17:21:21.593]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.594]      // while-condition  =>  TRUE
[17:21:21.594]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.596]      // while-condition  =>  TRUE
[17:21:21.596]      // while "1"  (timeout="200")
[17:21:21.597]      // while-condition  =>  TRUE
[17:21:21.597]      // while "1"  (timeout="200")
[17:21:21.597]      // while  =>  TIMEOUT
[17:21:21.597]      // end while "1"
[17:21:21.597]    </control>
[17:21:21.597]    <control if="canReadPins" while="" timeout="0" info="">
[17:21:21.597]      // if-block "canReadPins"
[17:21:21.597]        // =>  TRUE
[17:21:21.597]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:21:21.597]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:21:21.598]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:21:21.598]        // while-condition  =>  FALSE
[17:21:21.598]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:21:21.598]      </control>
[17:21:21.598]      // end if-block "canReadPins"
[17:21:21.598]    </control>
[17:21:21.598]    <control if="!canReadPins" while="" timeout="0" info="">
[17:21:21.598]      // if-block "!canReadPins"
[17:21:21.598]        // =>  FALSE
[17:21:21.598]      // skip if-block "!canReadPins"
[17:21:21.598]    </control>
[17:21:21.601]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:21:21.601]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:21:21.601]        // =>  TRUE
[17:21:21.601]      <block atomic="false" info="">
[17:21:21.601]        WriteAP(0x00, 0x190008);
[17:21:21.603]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:21:21.603]        WriteAP(0xF0, 0x01);
[17:21:21.609]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:21:21.609]      </block>
[17:21:21.609]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:21:21.609]    </control>
[17:21:21.613]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:21:21.613]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:21:21.613]        // =>  FALSE
[17:21:21.613]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:21:21.613]    </control>
[17:21:21.613]    <block atomic="false" info="">
[17:21:21.613]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:21:21.617]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:21:21.617]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:21:21.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:21:21.618]      __ap = 0; //lets make sure we reset the access point selection
[17:21:21.619]        // -> [__ap <= 0x00000000]
[17:21:21.619]    </block>
[17:21:21.619]  </sequence>
[17:21:21.619]  
[17:21:21.681]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:21:21.681]  
[17:21:21.681]  <debugvars>
[17:21:21.681]    // Pre-defined
[17:21:21.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:21:21.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:21:21.682]    __dp=0x00000000
[17:21:21.682]    __ap=0x00000000
[17:21:21.682]    __traceout=0x00000000      (Trace Disabled)
[17:21:21.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:21:21.682]    __FlashAddr=0x00000000
[17:21:21.682]    __FlashLen=0x00000000
[17:21:21.682]    __FlashArg=0x00000000
[17:21:21.682]    __FlashOp=0x00000000
[17:21:21.682]    __Result=0x00000000
[17:21:21.682]  </debugvars>
[17:21:21.682]  
[17:21:21.682]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:21:21.682]    <block atomic="false" info="">
[17:21:21.682]      __var deviceID = 0;
[17:21:21.682]        // -> [deviceID <= 0x00000000]
[17:21:21.682]      __var version = 0;
[17:21:21.682]        // -> [version <= 0x00000000]
[17:21:21.682]      __var partNum = 0;
[17:21:21.682]        // -> [partNum <= 0x00000000]
[17:21:21.682]      __var manuf = 0;
[17:21:21.684]        // -> [manuf <= 0x00000000]
[17:21:21.684]      __var isMSPM0G1X0X_G3X0X = 0;
[17:21:21.684]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:21:21.684]      __var isProduction = 0;
[17:21:21.684]        // -> [isProduction <= 0x00000000]
[17:21:21.684]      __var continueId = 0;
[17:21:21.684]        // -> [continueId <= 0x00000000]
[17:21:21.684]      deviceID =   Read32(0x41C40004);
[17:21:21.691]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:21:21.691]        // -> [deviceID <= 0x2BB8802F]
[17:21:21.691]      version = deviceID >> 28;
[17:21:21.691]        // -> [version <= 0x00000002]
[17:21:21.691]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:21:21.691]        // -> [partNum <= 0x0000BB88]
[17:21:21.691]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:21:21.691]        // -> [manuf <= 0x00000017]
[17:21:21.691]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:21:21.691]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:21:21.691]      isProduction = (version > 0);
[17:21:21.691]        // -> [isProduction <= 0x00000001]
[17:21:21.691]    </block>
[17:21:21.691]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:21:21.691]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:21:21.691]        // =>  FALSE
[17:21:21.691]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:21:21.691]    </control>
[17:21:21.691]    <control if="continueId == 4" while="" timeout="0" info="">
[17:21:21.691]      // if-block "continueId == 4"
[17:21:21.694]        // =>  FALSE
[17:21:21.694]      // skip if-block "continueId == 4"
[17:21:21.694]    </control>
[17:21:21.694]    <control if="!isProduction" while="" timeout="0" info="">
[17:21:21.694]      // if-block "!isProduction"
[17:21:21.694]        // =>  FALSE
[17:21:21.694]      // skip if-block "!isProduction"
[17:21:21.694]    </control>
[17:21:21.694]  </sequence>
[17:21:21.694]  
[17:31:16.882]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:31:16.882]  
[17:31:16.897]  <debugvars>
[17:31:16.897]    // Pre-defined
[17:31:16.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:16.897]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:31:16.897]    __dp=0x00000000
[17:31:16.897]    __ap=0x00000000
[17:31:16.897]    __traceout=0x00000000      (Trace Disabled)
[17:31:16.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:16.897]    __FlashAddr=0x00000000
[17:31:16.897]    __FlashLen=0x00000000
[17:31:16.897]    __FlashArg=0x00000000
[17:31:16.897]    __FlashOp=0x00000000
[17:31:16.897]    __Result=0x00000000
[17:31:16.897]  </debugvars>
[17:31:16.897]  
[17:31:16.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:31:16.897]    <block atomic="false" info="">
[17:31:16.897]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:31:16.897]        // -> [isSWJ <= 0x00000001]
[17:31:16.897]      __var hasDormant = __protocol & 0x00020000;
[17:31:16.897]        // -> [hasDormant <= 0x00000000]
[17:31:16.897]      __var protType   = __protocol & 0x0000FFFF;
[17:31:16.897]        // -> [protType <= 0x00000002]
[17:31:16.897]    </block>
[17:31:16.897]    <control if="protType == 1" while="" timeout="0" info="">
[17:31:16.897]      // if-block "protType == 1"
[17:31:16.897]        // =>  FALSE
[17:31:16.897]      // skip if-block "protType == 1"
[17:31:16.897]    </control>
[17:31:16.897]    <control if="protType == 2" while="" timeout="0" info="">
[17:31:16.897]      // if-block "protType == 2"
[17:31:16.897]        // =>  TRUE
[17:31:16.901]      <control if="isSWJ" while="" timeout="0" info="">
[17:31:16.901]        // if-block "isSWJ"
[17:31:16.901]          // =>  TRUE
[17:31:16.901]        <control if="hasDormant" while="" timeout="0" info="">
[17:31:16.901]          // if-block "hasDormant"
[17:31:16.901]            // =>  FALSE
[17:31:16.901]          // skip if-block "hasDormant"
[17:31:16.901]        </control>
[17:31:16.902]        <control if="!hasDormant" while="" timeout="0" info="">
[17:31:16.902]          // if-block "!hasDormant"
[17:31:16.902]            // =>  TRUE
[17:31:16.902]          <block atomic="false" info="">
[17:31:16.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:31:16.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:16.904]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:31:16.906]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:31:16.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:31:16.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:16.907]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:31:16.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:31:16.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:31:16.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:16.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:31:16.919]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:31:16.919]          </block>
[17:31:16.919]          // end if-block "!hasDormant"
[17:31:16.919]        </control>
[17:31:16.919]        // end if-block "isSWJ"
[17:31:16.919]      </control>
[17:31:16.919]      <control if="!isSWJ" while="" timeout="0" info="">
[17:31:16.919]        // if-block "!isSWJ"
[17:31:16.919]          // =>  FALSE
[17:31:16.919]        // skip if-block "!isSWJ"
[17:31:16.919]      </control>
[17:31:16.920]      <block atomic="false" info="">
[17:31:16.920]        ReadDP(0x0);
[17:31:16.921]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:31:16.921]      </block>
[17:31:16.921]      // end if-block "protType == 2"
[17:31:16.921]    </control>
[17:31:16.921]  </sequence>
[17:31:16.921]  
[17:31:19.719]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:31:19.719]  
[17:31:19.732]  <debugvars>
[17:31:19.732]    // Pre-defined
[17:31:19.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:19.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:19.732]    __dp=0x00000000
[17:31:19.732]    __ap=0x00000000
[17:31:19.732]    __traceout=0x00000000      (Trace Disabled)
[17:31:19.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:19.732]    __FlashAddr=0x00000000
[17:31:19.732]    __FlashLen=0x00000000
[17:31:19.732]    __FlashArg=0x00000000
[17:31:19.732]    __FlashOp=0x00000000
[17:31:19.732]    __Result=0x00000000
[17:31:19.732]  </debugvars>
[17:31:19.732]  
[17:31:19.732]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:31:19.732]    <block atomic="false" info="">
[17:31:19.732]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:31:19.732]        // -> [isSWJ <= 0x00000001]
[17:31:19.732]      __var hasDormant = __protocol & 0x00020000;
[17:31:19.732]        // -> [hasDormant <= 0x00000000]
[17:31:19.732]      __var protType   = __protocol & 0x0000FFFF;
[17:31:19.732]        // -> [protType <= 0x00000002]
[17:31:19.732]    </block>
[17:31:19.732]    <control if="protType == 1" while="" timeout="0" info="">
[17:31:19.732]      // if-block "protType == 1"
[17:31:19.732]        // =>  FALSE
[17:31:19.732]      // skip if-block "protType == 1"
[17:31:19.732]    </control>
[17:31:19.732]    <control if="protType == 2" while="" timeout="0" info="">
[17:31:19.732]      // if-block "protType == 2"
[17:31:19.732]        // =>  TRUE
[17:31:19.732]      <control if="isSWJ" while="" timeout="0" info="">
[17:31:19.732]        // if-block "isSWJ"
[17:31:19.732]          // =>  TRUE
[17:31:19.732]        <control if="hasDormant" while="" timeout="0" info="">
[17:31:19.732]          // if-block "hasDormant"
[17:31:19.732]            // =>  FALSE
[17:31:19.732]          // skip if-block "hasDormant"
[17:31:19.732]        </control>
[17:31:19.732]        <control if="!hasDormant" while="" timeout="0" info="">
[17:31:19.732]          // if-block "!hasDormant"
[17:31:19.732]            // =>  TRUE
[17:31:19.732]          <block atomic="false" info="">
[17:31:19.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:31:19.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:19.732]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:31:19.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:31:19.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:31:19.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:19.742]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:31:19.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:31:19.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:31:19.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:19.750]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:31:19.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:31:19.750]          </block>
[17:31:19.750]          // end if-block "!hasDormant"
[17:31:19.750]        </control>
[17:31:19.750]        // end if-block "isSWJ"
[17:31:19.750]      </control>
[17:31:19.750]      <control if="!isSWJ" while="" timeout="0" info="">
[17:31:19.750]        // if-block "!isSWJ"
[17:31:19.750]          // =>  FALSE
[17:31:19.750]        // skip if-block "!isSWJ"
[17:31:19.750]      </control>
[17:31:19.750]      <block atomic="false" info="">
[17:31:19.750]        ReadDP(0x0);
[17:31:19.750]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:31:19.750]      </block>
[17:31:19.750]      // end if-block "protType == 2"
[17:31:19.750]    </control>
[17:31:19.750]  </sequence>
[17:31:19.750]  
[17:31:19.760]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:31:19.760]  
[17:31:19.760]  <debugvars>
[17:31:19.760]    // Pre-defined
[17:31:19.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:19.760]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:19.760]    __dp=0x00000000
[17:31:19.760]    __ap=0x00000000
[17:31:19.760]    __traceout=0x00000000      (Trace Disabled)
[17:31:19.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:19.760]    __FlashAddr=0x00000000
[17:31:19.760]    __FlashLen=0x00000000
[17:31:19.760]    __FlashArg=0x00000000
[17:31:19.760]    __FlashOp=0x00000000
[17:31:19.760]    __Result=0x00000000
[17:31:19.760]  </debugvars>
[17:31:19.760]  
[17:31:19.760]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:31:19.760]    <block atomic="false" info="">
[17:31:19.760]      __var SW_DP_ABORT       = 0x0;
[17:31:19.760]        // -> [SW_DP_ABORT <= 0x00000000]
[17:31:19.760]      __var DP_CTRL_STAT      = 0x4;
[17:31:19.760]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:31:19.760]      __var DP_SELECT         = 0x8;
[17:31:19.760]        // -> [DP_SELECT <= 0x00000008]
[17:31:19.760]      __var powered_down      = 0;
[17:31:19.760]        // -> [powered_down <= 0x00000000]
[17:31:19.760]      WriteDP(DP_SELECT, 0x00000000);
[17:31:19.770]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:31:19.770]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:31:19.780]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:31:19.780]        // -> [powered_down <= 0x00000001]
[17:31:19.780]    </block>
[17:31:19.780]    <control if="powered_down" while="" timeout="0" info="">
[17:31:19.780]      // if-block "powered_down"
[17:31:19.780]        // =>  TRUE
[17:31:19.780]      <block atomic="false" info="">
[17:31:19.780]        Message(0, "Debug/System power-up request sent");
[17:31:19.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:31:19.790]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:31:19.790]      </block>
[17:31:19.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:31:19.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:31:19.790]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:31:19.790]        // while-condition  =>  FALSE
[17:31:19.790]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:31:19.790]      </control>
[17:31:19.790]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:31:19.790]        // if-block "(__protocol & 0xFFFF) == 1"
[17:31:19.790]          // =>  FALSE
[17:31:19.790]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:31:19.790]      </control>
[17:31:19.790]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:31:19.790]        // if-block "(__protocol & 0xFFFF) == 2"
[17:31:19.790]          // =>  TRUE
[17:31:19.790]        <block atomic="false" info="">
[17:31:19.790]          Message(0, "executing SWD power up");
[17:31:19.798]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:31:19.802]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:31:19.802]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:31:19.805]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:31:19.805]        </block>
[17:31:19.805]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:31:19.805]      </control>
[17:31:19.805]      // end if-block "powered_down"
[17:31:19.805]    </control>
[17:31:19.805]    <block atomic="false" info="">
[17:31:19.805]      __var DEBUG_PORT_VAL    = 0;
[17:31:19.805]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:31:19.805]      __var ACCESS_POINT_VAL  = 0;
[17:31:19.805]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:31:19.805]      __ap = 1; 
[17:31:19.805]        // -> [__ap <= 0x00000001]
[17:31:19.805]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:31:19.810]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:31:19.810]      __ap = 4;
[17:31:19.810]        // -> [__ap <= 0x00000004]
[17:31:19.810]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:31:19.811]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:31:19.811]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:31:19.811]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:31:19.811]    </block>
[17:31:19.811]    <block atomic="false" info="">
[17:31:19.811]      __var nReset = 0x80;
[17:31:19.811]        // -> [nReset <= 0x00000080]
[17:31:19.811]      __var canReadPins = 0;
[17:31:19.811]        // -> [canReadPins <= 0x00000000]
[17:31:19.811]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:31:19.822]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:31:19.822]        // -> [canReadPins <= 0x00000001]
[17:31:19.822]    </block>
[17:31:19.822]    <control if="" while="1" timeout="200" info="">
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.822]      // while-condition  =>  TRUE
[17:31:19.822]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.826]      // while-condition  =>  TRUE
[17:31:19.826]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.830]      // while "1"  (timeout="200")
[17:31:19.830]      // while-condition  =>  TRUE
[17:31:19.840]      // while "1"  (timeout="200")
[17:31:19.840]      // while  =>  TIMEOUT
[17:31:19.840]      // end while "1"
[17:31:19.840]    </control>
[17:31:19.840]    <control if="canReadPins" while="" timeout="0" info="">
[17:31:19.840]      // if-block "canReadPins"
[17:31:19.840]        // =>  TRUE
[17:31:19.840]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:31:19.840]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:31:19.840]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:31:19.840]        // while-condition  =>  FALSE
[17:31:19.840]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:31:19.840]      </control>
[17:31:19.840]      // end if-block "canReadPins"
[17:31:19.840]    </control>
[17:31:19.840]    <control if="!canReadPins" while="" timeout="0" info="">
[17:31:19.840]      // if-block "!canReadPins"
[17:31:19.840]        // =>  FALSE
[17:31:19.840]      // skip if-block "!canReadPins"
[17:31:19.840]    </control>
[17:31:19.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:31:19.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:31:19.850]        // =>  TRUE
[17:31:19.850]      <block atomic="false" info="">
[17:31:19.850]        WriteAP(0x00, 0x190008);
[17:31:19.850]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:31:19.850]        WriteAP(0xF0, 0x01);
[17:31:19.850]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:31:19.850]      </block>
[17:31:19.850]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:31:19.850]    </control>
[17:31:19.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:31:19.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:31:19.850]        // =>  FALSE
[17:31:19.850]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:31:19.850]    </control>
[17:31:19.850]    <block atomic="false" info="">
[17:31:19.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:31:19.850]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:31:19.850]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:31:19.860]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:31:19.860]      __ap = 0; //lets make sure we reset the access point selection
[17:31:19.860]        // -> [__ap <= 0x00000000]
[17:31:19.860]    </block>
[17:31:19.860]  </sequence>
[17:31:19.860]  
[17:31:19.902]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:31:19.902]  
[17:31:19.902]  <debugvars>
[17:31:19.902]    // Pre-defined
[17:31:19.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:19.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:19.902]    __dp=0x00000000
[17:31:19.902]    __ap=0x00000000
[17:31:19.902]    __traceout=0x00000000      (Trace Disabled)
[17:31:19.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:19.902]    __FlashAddr=0x00000000
[17:31:19.902]    __FlashLen=0x00000000
[17:31:19.902]    __FlashArg=0x00000000
[17:31:19.902]    __FlashOp=0x00000000
[17:31:19.902]    __Result=0x00000000
[17:31:19.902]  </debugvars>
[17:31:19.902]  
[17:31:19.902]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:31:19.902]    <block atomic="false" info="">
[17:31:19.902]      __var deviceID = 0;
[17:31:19.902]        // -> [deviceID <= 0x00000000]
[17:31:19.902]      __var version = 0;
[17:31:19.902]        // -> [version <= 0x00000000]
[17:31:19.902]      __var partNum = 0;
[17:31:19.902]        // -> [partNum <= 0x00000000]
[17:31:19.902]      __var manuf = 0;
[17:31:19.902]        // -> [manuf <= 0x00000000]
[17:31:19.902]      __var isMSPM0G1X0X_G3X0X = 0;
[17:31:19.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:31:19.902]      __var isProduction = 0;
[17:31:19.902]        // -> [isProduction <= 0x00000000]
[17:31:19.902]      __var continueId = 0;
[17:31:19.902]        // -> [continueId <= 0x00000000]
[17:31:19.902]      deviceID =   Read32(0x41C40004);
[17:31:19.912]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:31:19.912]        // -> [deviceID <= 0x2BB8802F]
[17:31:19.912]      version = deviceID >> 28;
[17:31:19.912]        // -> [version <= 0x00000002]
[17:31:19.912]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:31:19.912]        // -> [partNum <= 0x0000BB88]
[17:31:19.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:31:19.912]        // -> [manuf <= 0x00000017]
[17:31:19.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:31:19.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:31:19.912]      isProduction = (version > 0);
[17:31:19.912]        // -> [isProduction <= 0x00000001]
[17:31:19.912]    </block>
[17:31:19.912]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:31:19.912]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:31:19.912]        // =>  FALSE
[17:31:19.912]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:31:19.912]    </control>
[17:31:19.912]    <control if="continueId == 4" while="" timeout="0" info="">
[17:31:19.912]      // if-block "continueId == 4"
[17:31:19.912]        // =>  FALSE
[17:31:19.912]      // skip if-block "continueId == 4"
[17:31:19.912]    </control>
[17:31:19.912]    <control if="!isProduction" while="" timeout="0" info="">
[17:31:19.912]      // if-block "!isProduction"
[17:31:19.912]        // =>  FALSE
[17:31:19.912]      // skip if-block "!isProduction"
[17:31:19.912]    </control>
[17:31:19.912]  </sequence>
[17:31:19.912]  
