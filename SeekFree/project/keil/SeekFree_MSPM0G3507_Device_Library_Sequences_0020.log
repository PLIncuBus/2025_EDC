/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0020.log
 *  Created     : 17:41:28 (26/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[17:41:28.776]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:41:28.776]  
[17:41:28.776]  <debugvars>
[17:41:28.776]    // Pre-defined
[17:41:28.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:28.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:28.776]    __dp=0x00000000
[17:41:28.779]    __ap=0x00000000
[17:41:28.779]    __traceout=0x00000000      (Trace Disabled)
[17:41:28.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:28.779]    __FlashAddr=0x00000000
[17:41:28.779]    __FlashLen=0x00000000
[17:41:28.779]    __FlashArg=0x00000000
[17:41:28.779]    __FlashOp=0x00000000
[17:41:28.779]    __Result=0x00000000
[17:41:28.779]  </debugvars>
[17:41:28.779]  
[17:41:28.779]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:41:28.779]    <block atomic="false" info="">
[17:41:28.779]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:41:28.779]        // -> [isSWJ <= 0x00000001]
[17:41:28.779]      __var hasDormant = __protocol & 0x00020000;
[17:41:28.779]        // -> [hasDormant <= 0x00000000]
[17:41:28.779]      __var protType   = __protocol & 0x0000FFFF;
[17:41:28.779]        // -> [protType <= 0x00000002]
[17:41:28.779]    </block>
[17:41:28.779]    <control if="protType == 1" while="" timeout="0" info="">
[17:41:28.779]      // if-block "protType == 1"
[17:41:28.779]        // =>  FALSE
[17:41:28.779]      // skip if-block "protType == 1"
[17:41:28.779]    </control>
[17:41:28.779]    <control if="protType == 2" while="" timeout="0" info="">
[17:41:28.779]      // if-block "protType == 2"
[17:41:28.779]        // =>  TRUE
[17:41:28.779]      <control if="isSWJ" while="" timeout="0" info="">
[17:41:28.779]        // if-block "isSWJ"
[17:41:28.779]          // =>  TRUE
[17:41:28.782]        <control if="hasDormant" while="" timeout="0" info="">
[17:41:28.782]          // if-block "hasDormant"
[17:41:28.782]            // =>  FALSE
[17:41:28.782]          // skip if-block "hasDormant"
[17:41:28.782]        </control>
[17:41:28.782]        <control if="!hasDormant" while="" timeout="0" info="">
[17:41:28.782]          // if-block "!hasDormant"
[17:41:28.782]            // =>  TRUE
[17:41:28.782]          <block atomic="false" info="">
[17:41:28.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:41:28.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:28.788]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:41:28.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:41:28.788]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:41:28.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:28.788]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:41:28.792]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:41:28.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:41:28.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:28.792]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:41:28.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:41:28.796]          </block>
[17:41:28.796]          // end if-block "!hasDormant"
[17:41:28.796]        </control>
[17:41:28.796]        // end if-block "isSWJ"
[17:41:28.796]      </control>
[17:41:28.796]      <control if="!isSWJ" while="" timeout="0" info="">
[17:41:28.796]        // if-block "!isSWJ"
[17:41:28.796]          // =>  FALSE
[17:41:28.796]        // skip if-block "!isSWJ"
[17:41:28.797]      </control>
[17:41:28.797]      <block atomic="false" info="">
[17:41:28.797]        ReadDP(0x0);
[17:41:28.797]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:41:28.797]      </block>
[17:41:28.800]      // end if-block "protType == 2"
[17:41:28.800]    </control>
[17:41:28.800]  </sequence>
[17:41:28.800]  
[17:41:28.802]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:41:28.802]  
[17:41:28.802]  <debugvars>
[17:41:28.802]    // Pre-defined
[17:41:28.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:28.802]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:28.802]    __dp=0x00000000
[17:41:28.802]    __ap=0x00000000
[17:41:28.802]    __traceout=0x00000000      (Trace Disabled)
[17:41:28.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:28.802]    __FlashAddr=0x00000000
[17:41:28.802]    __FlashLen=0x00000000
[17:41:28.802]    __FlashArg=0x00000000
[17:41:28.802]    __FlashOp=0x00000000
[17:41:28.802]    __Result=0x00000000
[17:41:28.802]  </debugvars>
[17:41:28.802]  
[17:41:28.802]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:41:28.802]    <block atomic="false" info="">
[17:41:28.802]      __var SW_DP_ABORT       = 0x0;
[17:41:28.802]        // -> [SW_DP_ABORT <= 0x00000000]
[17:41:28.802]      __var DP_CTRL_STAT      = 0x4;
[17:41:28.802]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:41:28.802]      __var DP_SELECT         = 0x8;
[17:41:28.802]        // -> [DP_SELECT <= 0x00000008]
[17:41:28.802]      __var powered_down      = 0;
[17:41:28.805]        // -> [powered_down <= 0x00000000]
[17:41:28.805]      WriteDP(DP_SELECT, 0x00000000);
[17:41:28.805]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:41:28.805]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:41:28.805]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:41:28.805]        // -> [powered_down <= 0x00000001]
[17:41:28.805]    </block>
[17:41:28.805]    <control if="powered_down" while="" timeout="0" info="">
[17:41:28.805]      // if-block "powered_down"
[17:41:28.805]        // =>  TRUE
[17:41:28.805]      <block atomic="false" info="">
[17:41:28.805]        Message(0, "Debug/System power-up request sent");
[17:41:28.811]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:41:28.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:41:28.813]      </block>
[17:41:28.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:41:28.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:41:28.816]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:41:28.816]        // while-condition  =>  FALSE
[17:41:28.816]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:41:28.816]      </control>
[17:41:28.816]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:41:28.816]        // if-block "(__protocol & 0xFFFF) == 1"
[17:41:28.816]          // =>  FALSE
[17:41:28.816]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:41:28.816]      </control>
[17:41:28.816]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:41:28.816]        // if-block "(__protocol & 0xFFFF) == 2"
[17:41:28.816]          // =>  TRUE
[17:41:28.816]        <block atomic="false" info="">
[17:41:28.816]          Message(0, "executing SWD power up");
[17:41:28.818]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:41:28.818]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:41:28.818]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:41:28.822]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:41:28.822]        </block>
[17:41:28.822]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:41:28.822]      </control>
[17:41:28.822]      // end if-block "powered_down"
[17:41:28.822]    </control>
[17:41:28.822]    <block atomic="false" info="">
[17:41:28.822]      __var DEBUG_PORT_VAL    = 0;
[17:41:28.822]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:41:28.822]      __var ACCESS_POINT_VAL  = 0;
[17:41:28.822]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:41:28.822]      __ap = 1; 
[17:41:28.822]        // -> [__ap <= 0x00000001]
[17:41:28.822]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:41:28.828]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:41:28.828]      __ap = 4;
[17:41:28.828]        // -> [__ap <= 0x00000004]
[17:41:28.828]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:41:28.832]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:41:28.832]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:41:28.832]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:41:28.832]    </block>
[17:41:28.832]    <block atomic="false" info="">
[17:41:28.832]      __var nReset = 0x80;
[17:41:28.832]        // -> [nReset <= 0x00000080]
[17:41:28.836]      __var canReadPins = 0;
[17:41:28.836]        // -> [canReadPins <= 0x00000000]
[17:41:28.836]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:41:28.836]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:41:28.836]        // -> [canReadPins <= 0x00000001]
[17:41:28.836]    </block>
[17:41:28.836]    <control if="" while="1" timeout="200" info="">
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.836]      // while "1"  (timeout="200")
[17:41:28.836]      // while-condition  =>  TRUE
[17:41:28.841]      // while "1"  (timeout="200")
[17:41:28.841]      // while-condition  =>  TRUE
[17:41:28.841]      // while "1"  (timeout="200")
[17:41:28.841]      // while-condition  =>  TRUE
[17:41:28.841]      // while "1"  (timeout="200")
[17:41:28.841]      // while-condition  =>  TRUE
[17:41:28.841]      // while "1"  (timeout="200")
[17:41:28.841]      // while-condition  =>  TRUE
[17:41:28.841]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.842]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.842]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.842]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.842]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.842]      // while "1"  (timeout="200")
[17:41:28.842]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.843]      // while "1"  (timeout="200")
[17:41:28.843]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.844]      // while "1"  (timeout="200")
[17:41:28.844]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.846]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.846]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.846]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.846]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.846]      // while-condition  =>  TRUE
[17:41:28.846]      // while "1"  (timeout="200")
[17:41:28.847]      // while-condition  =>  TRUE
[17:41:28.847]      // while "1"  (timeout="200")
[17:41:28.847]      // while  =>  TIMEOUT
[17:41:28.847]      // end while "1"
[17:41:28.847]    </control>
[17:41:28.847]    <control if="canReadPins" while="" timeout="0" info="">
[17:41:28.847]      // if-block "canReadPins"
[17:41:28.847]        // =>  TRUE
[17:41:28.847]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:41:28.847]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:41:28.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:41:28.849]        // while-condition  =>  FALSE
[17:41:28.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:41:28.849]      </control>
[17:41:28.849]      // end if-block "canReadPins"
[17:41:28.849]    </control>
[17:41:28.849]    <control if="!canReadPins" while="" timeout="0" info="">
[17:41:28.849]      // if-block "!canReadPins"
[17:41:28.849]        // =>  FALSE
[17:41:28.849]      // skip if-block "!canReadPins"
[17:41:28.849]    </control>
[17:41:28.849]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:41:28.849]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:41:28.849]        // =>  TRUE
[17:41:28.849]      <block atomic="false" info="">
[17:41:28.849]        WriteAP(0x00, 0x190008);
[17:41:28.852]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:41:28.852]        WriteAP(0xF0, 0x01);
[17:41:28.859]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:41:28.859]      </block>
[17:41:28.859]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:41:28.859]    </control>
[17:41:28.859]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:41:28.859]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:41:28.859]        // =>  FALSE
[17:41:28.859]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:41:28.859]    </control>
[17:41:28.859]    <block atomic="false" info="">
[17:41:28.859]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:41:28.866]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:41:28.866]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:41:28.866]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:41:28.866]      __ap = 0; //lets make sure we reset the access point selection
[17:41:28.866]        // -> [__ap <= 0x00000000]
[17:41:28.866]    </block>
[17:41:28.866]  </sequence>
[17:41:28.866]  
[17:41:28.888]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:41:28.888]  
[17:41:28.888]  <debugvars>
[17:41:28.888]    // Pre-defined
[17:41:28.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:28.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:28.888]    __dp=0x00000000
[17:41:28.888]    __ap=0x00000000
[17:41:28.888]    __traceout=0x00000000      (Trace Disabled)
[17:41:28.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:28.888]    __FlashAddr=0x00000000
[17:41:28.888]    __FlashLen=0x00000000
[17:41:28.896]    __FlashArg=0x00000000
[17:41:28.896]    __FlashOp=0x00000000
[17:41:28.896]    __Result=0x00000000
[17:41:28.896]  </debugvars>
[17:41:28.896]  
[17:41:28.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:41:28.896]    <block atomic="false" info="">
[17:41:28.896]      __var deviceID = 0;
[17:41:28.896]        // -> [deviceID <= 0x00000000]
[17:41:28.896]      __var version = 0;
[17:41:28.896]        // -> [version <= 0x00000000]
[17:41:28.896]      __var partNum = 0;
[17:41:28.896]        // -> [partNum <= 0x00000000]
[17:41:28.896]      __var manuf = 0;
[17:41:28.896]        // -> [manuf <= 0x00000000]
[17:41:28.896]      __var isMSPM0G1X0X_G3X0X = 0;
[17:41:28.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:41:28.896]      __var isProduction = 0;
[17:41:28.896]        // -> [isProduction <= 0x00000000]
[17:41:28.896]      __var continueId = 0;
[17:41:28.896]        // -> [continueId <= 0x00000000]
[17:41:28.896]      deviceID =   Read32(0x41C40004);
[17:41:28.896]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:41:28.896]        // -> [deviceID <= 0x2BB8802F]
[17:41:28.896]      version = deviceID >> 28;
[17:41:28.896]        // -> [version <= 0x00000002]
[17:41:28.896]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:41:28.896]        // -> [partNum <= 0x0000BB88]
[17:41:28.896]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:41:28.896]        // -> [manuf <= 0x00000017]
[17:41:28.896]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:41:28.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:41:28.896]      isProduction = (version > 0);
[17:41:28.896]        // -> [isProduction <= 0x00000001]
[17:41:28.896]    </block>
[17:41:28.896]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:41:28.896]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:41:28.896]        // =>  FALSE
[17:41:28.896]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:41:28.896]    </control>
[17:41:28.896]    <control if="continueId == 4" while="" timeout="0" info="">
[17:41:28.896]      // if-block "continueId == 4"
[17:41:28.896]        // =>  FALSE
[17:41:28.896]      // skip if-block "continueId == 4"
[17:41:28.896]    </control>
[17:41:28.896]    <control if="!isProduction" while="" timeout="0" info="">
[17:41:28.896]      // if-block "!isProduction"
[17:41:28.896]        // =>  FALSE
[17:41:28.906]      // skip if-block "!isProduction"
[17:41:28.906]    </control>
[17:41:28.906]  </sequence>
[17:41:28.906]  
[17:41:38.931]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:41:38.931]  
[17:41:38.941]  <debugvars>
[17:41:38.941]    // Pre-defined
[17:41:38.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:38.941]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:38.941]    __dp=0x00000000
[17:41:38.942]    __ap=0x00000000
[17:41:38.942]    __traceout=0x00000000      (Trace Disabled)
[17:41:38.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:38.942]    __FlashAddr=0x00000000
[17:41:38.942]    __FlashLen=0x00000000
[17:41:38.942]    __FlashArg=0x00000000
[17:41:38.942]    __FlashOp=0x00000000
[17:41:38.942]    __Result=0x00000000
[17:41:38.942]  </debugvars>
[17:41:38.942]  
[17:41:38.942]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:41:38.942]    <block atomic="false" info="">
[17:41:38.943]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:41:38.943]        // -> [isSWJ <= 0x00000001]
[17:41:38.943]      __var hasDormant = __protocol & 0x00020000;
[17:41:38.943]        // -> [hasDormant <= 0x00000000]
[17:41:38.943]      __var protType   = __protocol & 0x0000FFFF;
[17:41:38.943]        // -> [protType <= 0x00000002]
[17:41:38.943]    </block>
[17:41:38.943]    <control if="protType == 1" while="" timeout="0" info="">
[17:41:38.944]      // if-block "protType == 1"
[17:41:38.944]        // =>  FALSE
[17:41:38.944]      // skip if-block "protType == 1"
[17:41:38.944]    </control>
[17:41:38.944]    <control if="protType == 2" while="" timeout="0" info="">
[17:41:38.944]      // if-block "protType == 2"
[17:41:38.944]        // =>  TRUE
[17:41:38.944]      <control if="isSWJ" while="" timeout="0" info="">
[17:41:38.944]        // if-block "isSWJ"
[17:41:38.944]          // =>  TRUE
[17:41:38.945]        <control if="hasDormant" while="" timeout="0" info="">
[17:41:38.945]          // if-block "hasDormant"
[17:41:38.945]            // =>  FALSE
[17:41:38.945]          // skip if-block "hasDormant"
[17:41:38.945]        </control>
[17:41:38.945]        <control if="!hasDormant" while="" timeout="0" info="">
[17:41:38.945]          // if-block "!hasDormant"
[17:41:38.945]            // =>  TRUE
[17:41:38.945]          <block atomic="false" info="">
[17:41:38.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:41:38.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:38.948]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:41:38.950]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:41:38.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:41:38.950]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:38.950]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:41:38.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:41:38.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:41:38.956]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:41:38.956]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:41:38.958]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:41:38.958]          </block>
[17:41:38.958]          // end if-block "!hasDormant"
[17:41:38.958]        </control>
[17:41:38.958]        // end if-block "isSWJ"
[17:41:38.958]      </control>
[17:41:38.958]      <control if="!isSWJ" while="" timeout="0" info="">
[17:41:38.958]        // if-block "!isSWJ"
[17:41:38.958]          // =>  FALSE
[17:41:38.958]        // skip if-block "!isSWJ"
[17:41:38.960]      </control>
[17:41:38.960]      <block atomic="false" info="">
[17:41:38.960]        ReadDP(0x0);
[17:41:38.961]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:41:38.961]      </block>
[17:41:38.961]      // end if-block "protType == 2"
[17:41:38.961]    </control>
[17:41:38.961]  </sequence>
[17:41:38.961]  
[17:41:38.965]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:41:38.965]  
[17:41:38.965]  <debugvars>
[17:41:38.965]    // Pre-defined
[17:41:38.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:38.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:38.965]    __dp=0x00000000
[17:41:38.965]    __ap=0x00000000
[17:41:38.965]    __traceout=0x00000000      (Trace Disabled)
[17:41:38.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:38.965]    __FlashAddr=0x00000000
[17:41:38.965]    __FlashLen=0x00000000
[17:41:38.965]    __FlashArg=0x00000000
[17:41:38.965]    __FlashOp=0x00000000
[17:41:38.965]    __Result=0x00000000
[17:41:38.965]  </debugvars>
[17:41:38.965]  
[17:41:38.965]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:41:38.965]    <block atomic="false" info="">
[17:41:38.965]      __var SW_DP_ABORT       = 0x0;
[17:41:38.965]        // -> [SW_DP_ABORT <= 0x00000000]
[17:41:38.965]      __var DP_CTRL_STAT      = 0x4;
[17:41:38.965]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:41:38.967]      __var DP_SELECT         = 0x8;
[17:41:38.967]        // -> [DP_SELECT <= 0x00000008]
[17:41:38.967]      __var powered_down      = 0;
[17:41:38.967]        // -> [powered_down <= 0x00000000]
[17:41:38.967]      WriteDP(DP_SELECT, 0x00000000);
[17:41:38.969]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:41:38.969]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:41:38.971]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:41:38.971]        // -> [powered_down <= 0x00000001]
[17:41:38.971]    </block>
[17:41:38.971]    <control if="powered_down" while="" timeout="0" info="">
[17:41:38.971]      // if-block "powered_down"
[17:41:38.971]        // =>  TRUE
[17:41:38.971]      <block atomic="false" info="">
[17:41:38.971]        Message(0, "Debug/System power-up request sent");
[17:41:38.972]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:41:38.975]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:41:38.975]      </block>
[17:41:38.975]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:41:38.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:41:38.979]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:41:38.979]        // while-condition  =>  FALSE
[17:41:38.979]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:41:38.979]      </control>
[17:41:38.979]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:41:38.979]        // if-block "(__protocol & 0xFFFF) == 1"
[17:41:38.979]          // =>  FALSE
[17:41:38.979]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:41:38.979]      </control>
[17:41:38.979]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:41:38.979]        // if-block "(__protocol & 0xFFFF) == 2"
[17:41:38.979]          // =>  TRUE
[17:41:38.979]        <block atomic="false" info="">
[17:41:38.979]          Message(0, "executing SWD power up");
[17:41:38.979]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:41:38.979]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:41:38.979]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:41:38.979]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:41:38.979]        </block>
[17:41:38.979]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:41:38.979]      </control>
[17:41:38.979]      // end if-block "powered_down"
[17:41:38.979]    </control>
[17:41:38.979]    <block atomic="false" info="">
[17:41:38.979]      __var DEBUG_PORT_VAL    = 0;
[17:41:38.979]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:41:38.979]      __var ACCESS_POINT_VAL  = 0;
[17:41:38.979]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:41:38.979]      __ap = 1; 
[17:41:38.979]        // -> [__ap <= 0x00000001]
[17:41:38.988]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:41:38.988]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:41:38.988]      __ap = 4;
[17:41:38.988]        // -> [__ap <= 0x00000004]
[17:41:38.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:41:38.988]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:41:38.988]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:41:38.988]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:41:38.988]    </block>
[17:41:38.988]    <block atomic="false" info="">
[17:41:38.988]      __var nReset = 0x80;
[17:41:38.988]        // -> [nReset <= 0x00000080]
[17:41:38.998]      __var canReadPins = 0;
[17:41:38.998]        // -> [canReadPins <= 0x00000000]
[17:41:38.998]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:41:38.998]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:41:38.998]        // -> [canReadPins <= 0x00000001]
[17:41:38.998]    </block>
[17:41:38.998]    <control if="" while="1" timeout="200" info="">
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:38.998]      // while "1"  (timeout="200")
[17:41:38.998]      // while-condition  =>  TRUE
[17:41:39.008]      // while "1"  (timeout="200")
[17:41:39.008]      // while  =>  TIMEOUT
[17:41:39.008]      // end while "1"
[17:41:39.008]    </control>
[17:41:39.008]    <control if="canReadPins" while="" timeout="0" info="">
[17:41:39.008]      // if-block "canReadPins"
[17:41:39.008]        // =>  TRUE
[17:41:39.008]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:41:39.008]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:41:39.008]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:41:39.008]        // while-condition  =>  FALSE
[17:41:39.008]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:41:39.008]      </control>
[17:41:39.008]      // end if-block "canReadPins"
[17:41:39.008]    </control>
[17:41:39.008]    <control if="!canReadPins" while="" timeout="0" info="">
[17:41:39.008]      // if-block "!canReadPins"
[17:41:39.008]        // =>  FALSE
[17:41:39.008]      // skip if-block "!canReadPins"
[17:41:39.008]    </control>
[17:41:39.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:41:39.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:41:39.008]        // =>  TRUE
[17:41:39.008]      <block atomic="false" info="">
[17:41:39.008]        WriteAP(0x00, 0x190008);
[17:41:39.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:41:39.008]        WriteAP(0xF0, 0x01);
[17:41:39.018]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:41:39.018]      </block>
[17:41:39.018]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:41:39.018]    </control>
[17:41:39.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:41:39.018]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:41:39.018]        // =>  FALSE
[17:41:39.018]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:41:39.018]    </control>
[17:41:39.018]    <block atomic="false" info="">
[17:41:39.018]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:41:39.018]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:41:39.018]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:41:39.018]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:41:39.028]      __ap = 0; //lets make sure we reset the access point selection
[17:41:39.028]        // -> [__ap <= 0x00000000]
[17:41:39.028]    </block>
[17:41:39.028]  </sequence>
[17:41:39.028]  
[17:41:39.049]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:41:39.049]  
[17:41:39.049]  <debugvars>
[17:41:39.049]    // Pre-defined
[17:41:39.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:41:39.049]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:41:39.049]    __dp=0x00000000
[17:41:39.049]    __ap=0x00000000
[17:41:39.049]    __traceout=0x00000000      (Trace Disabled)
[17:41:39.049]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:41:39.049]    __FlashAddr=0x00000000
[17:41:39.049]    __FlashLen=0x00000000
[17:41:39.049]    __FlashArg=0x00000000
[17:41:39.049]    __FlashOp=0x00000000
[17:41:39.049]    __Result=0x00000000
[17:41:39.049]  </debugvars>
[17:41:39.049]  
[17:41:39.049]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:41:39.049]    <block atomic="false" info="">
[17:41:39.051]      __var deviceID = 0;
[17:41:39.051]        // -> [deviceID <= 0x00000000]
[17:41:39.051]      __var version = 0;
[17:41:39.051]        // -> [version <= 0x00000000]
[17:41:39.051]      __var partNum = 0;
[17:41:39.051]        // -> [partNum <= 0x00000000]
[17:41:39.051]      __var manuf = 0;
[17:41:39.051]        // -> [manuf <= 0x00000000]
[17:41:39.051]      __var isMSPM0G1X0X_G3X0X = 0;
[17:41:39.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:41:39.051]      __var isProduction = 0;
[17:41:39.051]        // -> [isProduction <= 0x00000000]
[17:41:39.051]      __var continueId = 0;
[17:41:39.051]        // -> [continueId <= 0x00000000]
[17:41:39.051]      deviceID =   Read32(0x41C40004);
[17:41:39.051]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:41:39.051]        // -> [deviceID <= 0x2BB8802F]
[17:41:39.058]      version = deviceID >> 28;
[17:41:39.058]        // -> [version <= 0x00000002]
[17:41:39.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:41:39.058]        // -> [partNum <= 0x0000BB88]
[17:41:39.058]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:41:39.058]        // -> [manuf <= 0x00000017]
[17:41:39.058]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:41:39.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:41:39.058]      isProduction = (version > 0);
[17:41:39.058]        // -> [isProduction <= 0x00000001]
[17:41:39.058]    </block>
[17:41:39.058]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:41:39.058]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:41:39.058]        // =>  FALSE
[17:41:39.058]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:41:39.058]    </control>
[17:41:39.058]    <control if="continueId == 4" while="" timeout="0" info="">
[17:41:39.058]      // if-block "continueId == 4"
[17:41:39.058]        // =>  FALSE
[17:41:39.058]      // skip if-block "continueId == 4"
[17:41:39.058]    </control>
[17:41:39.058]    <control if="!isProduction" while="" timeout="0" info="">
[17:41:39.058]      // if-block "!isProduction"
[17:41:39.058]        // =>  FALSE
[17:41:39.058]      // skip if-block "!isProduction"
[17:41:39.058]    </control>
[17:41:39.058]  </sequence>
[17:41:39.058]  
[17:42:16.239]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:42:16.239]  
[17:42:16.247]  <debugvars>
[17:42:16.247]    // Pre-defined
[17:42:16.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:16.247]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:16.247]    __dp=0x00000000
[17:42:16.247]    __ap=0x00000000
[17:42:16.248]    __traceout=0x00000000      (Trace Disabled)
[17:42:16.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:16.248]    __FlashAddr=0x00000000
[17:42:16.248]    __FlashLen=0x00000000
[17:42:16.248]    __FlashArg=0x00000000
[17:42:16.248]    __FlashOp=0x00000000
[17:42:16.248]    __Result=0x00000000
[17:42:16.248]  </debugvars>
[17:42:16.248]  
[17:42:16.250]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:42:16.250]    <block atomic="false" info="">
[17:42:16.250]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:42:16.250]        // -> [isSWJ <= 0x00000001]
[17:42:16.250]      __var hasDormant = __protocol & 0x00020000;
[17:42:16.250]        // -> [hasDormant <= 0x00000000]
[17:42:16.250]      __var protType   = __protocol & 0x0000FFFF;
[17:42:16.250]        // -> [protType <= 0x00000002]
[17:42:16.250]    </block>
[17:42:16.250]    <control if="protType == 1" while="" timeout="0" info="">
[17:42:16.250]      // if-block "protType == 1"
[17:42:16.250]        // =>  FALSE
[17:42:16.250]      // skip if-block "protType == 1"
[17:42:16.250]    </control>
[17:42:16.250]    <control if="protType == 2" while="" timeout="0" info="">
[17:42:16.252]      // if-block "protType == 2"
[17:42:16.252]        // =>  TRUE
[17:42:16.252]      <control if="isSWJ" while="" timeout="0" info="">
[17:42:16.252]        // if-block "isSWJ"
[17:42:16.252]          // =>  TRUE
[17:42:16.252]        <control if="hasDormant" while="" timeout="0" info="">
[17:42:16.252]          // if-block "hasDormant"
[17:42:16.252]            // =>  FALSE
[17:42:16.252]          // skip if-block "hasDormant"
[17:42:16.252]        </control>
[17:42:16.252]        <control if="!hasDormant" while="" timeout="0" info="">
[17:42:16.252]          // if-block "!hasDormant"
[17:42:16.252]            // =>  TRUE
[17:42:16.252]          <block atomic="false" info="">
[17:42:16.252]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:42:16.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:16.254]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:42:16.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:42:16.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:42:16.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:16.254]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:42:16.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:42:16.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:42:16.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:16.260]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:42:16.260]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:42:16.260]          </block>
[17:42:16.260]          // end if-block "!hasDormant"
[17:42:16.260]        </control>
[17:42:16.260]        // end if-block "isSWJ"
[17:42:16.260]      </control>
[17:42:16.260]      <control if="!isSWJ" while="" timeout="0" info="">
[17:42:16.260]        // if-block "!isSWJ"
[17:42:16.260]          // =>  FALSE
[17:42:16.260]        // skip if-block "!isSWJ"
[17:42:16.260]      </control>
[17:42:16.260]      <block atomic="false" info="">
[17:42:16.263]        ReadDP(0x0);
[17:42:16.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:42:16.263]      </block>
[17:42:16.263]      // end if-block "protType == 2"
[17:42:16.263]    </control>
[17:42:16.263]  </sequence>
[17:42:16.265]  
[17:42:16.268]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:42:16.268]  
[17:42:16.268]  <debugvars>
[17:42:16.268]    // Pre-defined
[17:42:16.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:16.268]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:16.268]    __dp=0x00000000
[17:42:16.268]    __ap=0x00000000
[17:42:16.268]    __traceout=0x00000000      (Trace Disabled)
[17:42:16.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:16.268]    __FlashAddr=0x00000000
[17:42:16.268]    __FlashLen=0x00000000
[17:42:16.268]    __FlashArg=0x00000000
[17:42:16.268]    __FlashOp=0x00000000
[17:42:16.268]    __Result=0x00000000
[17:42:16.268]  </debugvars>
[17:42:16.268]  
[17:42:16.268]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:42:16.268]    <block atomic="false" info="">
[17:42:16.268]      __var SW_DP_ABORT       = 0x0;
[17:42:16.268]        // -> [SW_DP_ABORT <= 0x00000000]
[17:42:16.268]      __var DP_CTRL_STAT      = 0x4;
[17:42:16.268]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:42:16.268]      __var DP_SELECT         = 0x8;
[17:42:16.268]        // -> [DP_SELECT <= 0x00000008]
[17:42:16.268]      __var powered_down      = 0;
[17:42:16.268]        // -> [powered_down <= 0x00000000]
[17:42:16.268]      WriteDP(DP_SELECT, 0x00000000);
[17:42:16.273]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:42:16.273]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:42:16.273]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:42:16.273]        // -> [powered_down <= 0x00000001]
[17:42:16.273]    </block>
[17:42:16.273]    <control if="powered_down" while="" timeout="0" info="">
[17:42:16.273]      // if-block "powered_down"
[17:42:16.273]        // =>  TRUE
[17:42:16.273]      <block atomic="false" info="">
[17:42:16.273]        Message(0, "Debug/System power-up request sent");
[17:42:16.273]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:42:16.279]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:42:16.279]      </block>
[17:42:16.279]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:42:16.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:42:16.280]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:42:16.280]        // while-condition  =>  FALSE
[17:42:16.280]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:42:16.280]      </control>
[17:42:16.280]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:42:16.280]        // if-block "(__protocol & 0xFFFF) == 1"
[17:42:16.280]          // =>  FALSE
[17:42:16.280]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:42:16.280]      </control>
[17:42:16.280]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:42:16.280]        // if-block "(__protocol & 0xFFFF) == 2"
[17:42:16.280]          // =>  TRUE
[17:42:16.283]        <block atomic="false" info="">
[17:42:16.283]          Message(0, "executing SWD power up");
[17:42:16.284]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:42:16.286]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:42:16.286]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:42:16.286]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:42:16.286]        </block>
[17:42:16.286]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:42:16.286]      </control>
[17:42:16.286]      // end if-block "powered_down"
[17:42:16.286]    </control>
[17:42:16.286]    <block atomic="false" info="">
[17:42:16.286]      __var DEBUG_PORT_VAL    = 0;
[17:42:16.286]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:42:16.286]      __var ACCESS_POINT_VAL  = 0;
[17:42:16.286]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:42:16.286]      __ap = 1; 
[17:42:16.286]        // -> [__ap <= 0x00000001]
[17:42:16.286]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:42:16.293]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:42:16.293]      __ap = 4;
[17:42:16.293]        // -> [__ap <= 0x00000004]
[17:42:16.293]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:42:16.303]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:42:16.303]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:42:16.303]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:42:16.307]    </block>
[17:42:16.307]    <block atomic="false" info="">
[17:42:16.307]      __var nReset = 0x80;
[17:42:16.307]        // -> [nReset <= 0x00000080]
[17:42:16.307]      __var canReadPins = 0;
[17:42:16.307]        // -> [canReadPins <= 0x00000000]
[17:42:16.307]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:42:16.307]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:42:16.307]        // -> [canReadPins <= 0x00000001]
[17:42:16.307]    </block>
[17:42:16.307]    <control if="" while="1" timeout="200" info="">
[17:42:16.307]      // while "1"  (timeout="200")
[17:42:16.307]      // while-condition  =>  TRUE
[17:42:16.307]      // while "1"  (timeout="200")
[17:42:16.307]      // while-condition  =>  TRUE
[17:42:16.307]      // while "1"  (timeout="200")
[17:42:16.307]      // while-condition  =>  TRUE
[17:42:16.307]      // while "1"  (timeout="200")
[17:42:16.307]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.311]      // while "1"  (timeout="200")
[17:42:16.311]      // while-condition  =>  TRUE
[17:42:16.313]      // while "1"  (timeout="200")
[17:42:16.313]      // while-condition  =>  TRUE
[17:42:16.313]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.314]      // while-condition  =>  TRUE
[17:42:16.314]      // while "1"  (timeout="200")
[17:42:16.315]      // while-condition  =>  TRUE
[17:42:16.315]      // while "1"  (timeout="200")
[17:42:16.315]      // while  =>  TIMEOUT
[17:42:16.315]      // end while "1"
[17:42:16.315]    </control>
[17:42:16.315]    <control if="canReadPins" while="" timeout="0" info="">
[17:42:16.315]      // if-block "canReadPins"
[17:42:16.315]        // =>  TRUE
[17:42:16.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:42:16.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:42:16.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:42:16.318]        // while-condition  =>  FALSE
[17:42:16.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:42:16.318]      </control>
[17:42:16.318]      // end if-block "canReadPins"
[17:42:16.318]    </control>
[17:42:16.318]    <control if="!canReadPins" while="" timeout="0" info="">
[17:42:16.318]      // if-block "!canReadPins"
[17:42:16.318]        // =>  FALSE
[17:42:16.318]      // skip if-block "!canReadPins"
[17:42:16.318]    </control>
[17:42:16.318]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:42:16.318]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:42:16.318]        // =>  TRUE
[17:42:16.318]      <block atomic="false" info="">
[17:42:16.318]        WriteAP(0x00, 0x190008);
[17:42:16.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:42:16.320]        WriteAP(0xF0, 0x01);
[17:42:16.323]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:42:16.323]      </block>
[17:42:16.323]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:42:16.325]    </control>
[17:42:16.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:42:16.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:42:16.325]        // =>  FALSE
[17:42:16.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:42:16.325]    </control>
[17:42:16.325]    <block atomic="false" info="">
[17:42:16.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:42:16.328]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:42:16.328]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:42:16.333]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:42:16.335]      __ap = 0; //lets make sure we reset the access point selection
[17:42:16.335]        // -> [__ap <= 0x00000000]
[17:42:16.335]    </block>
[17:42:16.335]  </sequence>
[17:42:16.335]  
[17:42:16.358]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:42:16.358]  
[17:42:16.358]  <debugvars>
[17:42:16.358]    // Pre-defined
[17:42:16.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:16.358]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:16.358]    __dp=0x00000000
[17:42:16.358]    __ap=0x00000000
[17:42:16.358]    __traceout=0x00000000      (Trace Disabled)
[17:42:16.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:16.358]    __FlashAddr=0x00000000
[17:42:16.358]    __FlashLen=0x00000000
[17:42:16.358]    __FlashArg=0x00000000
[17:42:16.358]    __FlashOp=0x00000000
[17:42:16.358]    __Result=0x00000000
[17:42:16.358]  </debugvars>
[17:42:16.358]  
[17:42:16.358]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:42:16.358]    <block atomic="false" info="">
[17:42:16.358]      __var deviceID = 0;
[17:42:16.358]        // -> [deviceID <= 0x00000000]
[17:42:16.358]      __var version = 0;
[17:42:16.362]        // -> [version <= 0x00000000]
[17:42:16.362]      __var partNum = 0;
[17:42:16.362]        // -> [partNum <= 0x00000000]
[17:42:16.362]      __var manuf = 0;
[17:42:16.362]        // -> [manuf <= 0x00000000]
[17:42:16.362]      __var isMSPM0G1X0X_G3X0X = 0;
[17:42:16.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:42:16.363]      __var isProduction = 0;
[17:42:16.363]        // -> [isProduction <= 0x00000000]
[17:42:16.363]      __var continueId = 0;
[17:42:16.363]        // -> [continueId <= 0x00000000]
[17:42:16.363]      deviceID =   Read32(0x41C40004);
[17:42:16.370]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:42:16.370]        // -> [deviceID <= 0x2BB8802F]
[17:42:16.370]      version = deviceID >> 28;
[17:42:16.370]        // -> [version <= 0x00000002]
[17:42:16.370]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:42:16.370]        // -> [partNum <= 0x0000BB88]
[17:42:16.370]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:42:16.372]        // -> [manuf <= 0x00000017]
[17:42:16.372]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:42:16.372]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:42:16.372]      isProduction = (version > 0);
[17:42:16.372]        // -> [isProduction <= 0x00000001]
[17:42:16.372]    </block>
[17:42:16.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:42:16.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:42:16.372]        // =>  FALSE
[17:42:16.372]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:42:16.372]    </control>
[17:42:16.372]    <control if="continueId == 4" while="" timeout="0" info="">
[17:42:16.372]      // if-block "continueId == 4"
[17:42:16.373]        // =>  FALSE
[17:42:16.373]      // skip if-block "continueId == 4"
[17:42:16.373]    </control>
[17:42:16.373]    <control if="!isProduction" while="" timeout="0" info="">
[17:42:16.373]      // if-block "!isProduction"
[17:42:16.373]        // =>  FALSE
[17:42:16.373]      // skip if-block "!isProduction"
[17:42:16.373]    </control>
[17:42:16.373]  </sequence>
[17:42:16.373]  
[17:43:33.846]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:43:33.846]  
[17:43:33.854]  <debugvars>
[17:43:33.854]    // Pre-defined
[17:43:33.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:43:33.854]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:43:33.854]    __dp=0x00000000
[17:43:33.854]    __ap=0x00000000
[17:43:33.854]    __traceout=0x00000000      (Trace Disabled)
[17:43:33.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:43:33.854]    __FlashAddr=0x00000000
[17:43:33.854]    __FlashLen=0x00000000
[17:43:33.854]    __FlashArg=0x00000000
[17:43:33.854]    __FlashOp=0x00000000
[17:43:33.854]    __Result=0x00000000
[17:43:33.856]  </debugvars>
[17:43:33.856]  
[17:43:33.856]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:43:33.856]    <block atomic="false" info="">
[17:43:33.856]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:43:33.856]        // -> [isSWJ <= 0x00000001]
[17:43:33.856]      __var hasDormant = __protocol & 0x00020000;
[17:43:33.856]        // -> [hasDormant <= 0x00000000]
[17:43:33.856]      __var protType   = __protocol & 0x0000FFFF;
[17:43:33.857]        // -> [protType <= 0x00000002]
[17:43:33.857]    </block>
[17:43:33.857]    <control if="protType == 1" while="" timeout="0" info="">
[17:43:33.857]      // if-block "protType == 1"
[17:43:33.857]        // =>  FALSE
[17:43:33.857]      // skip if-block "protType == 1"
[17:43:33.857]    </control>
[17:43:33.857]    <control if="protType == 2" while="" timeout="0" info="">
[17:43:33.857]      // if-block "protType == 2"
[17:43:33.857]        // =>  TRUE
[17:43:33.857]      <control if="isSWJ" while="" timeout="0" info="">
[17:43:33.858]        // if-block "isSWJ"
[17:43:33.858]          // =>  TRUE
[17:43:33.858]        <control if="hasDormant" while="" timeout="0" info="">
[17:43:33.858]          // if-block "hasDormant"
[17:43:33.858]            // =>  FALSE
[17:43:33.858]          // skip if-block "hasDormant"
[17:43:33.858]        </control>
[17:43:33.859]        <control if="!hasDormant" while="" timeout="0" info="">
[17:43:33.859]          // if-block "!hasDormant"
[17:43:33.859]            // =>  TRUE
[17:43:33.859]          <block atomic="false" info="">
[17:43:33.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:43:33.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:43:33.860]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:43:33.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:43:33.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:43:33.863]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:43:33.863]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:43:33.866]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:43:33.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:43:33.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:43:33.868]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:43:33.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:43:33.870]          </block>
[17:43:33.870]          // end if-block "!hasDormant"
[17:43:33.870]        </control>
[17:43:33.870]        // end if-block "isSWJ"
[17:43:33.870]      </control>
[17:43:33.870]      <control if="!isSWJ" while="" timeout="0" info="">
[17:43:33.870]        // if-block "!isSWJ"
[17:43:33.871]          // =>  FALSE
[17:43:33.871]        // skip if-block "!isSWJ"
[17:43:33.871]      </control>
[17:43:33.871]      <block atomic="false" info="">
[17:43:33.871]        ReadDP(0x0);
[17:43:33.876]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:43:33.876]      </block>
[17:43:33.876]      // end if-block "protType == 2"
[17:43:33.876]    </control>
[17:43:33.877]  </sequence>
[17:43:33.877]  
[17:43:33.882]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:43:33.882]  
[17:43:33.884]  <debugvars>
[17:43:33.884]    // Pre-defined
[17:43:33.884]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:43:33.884]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:43:33.884]    __dp=0x00000000
[17:43:33.884]    __ap=0x00000000
[17:43:33.884]    __traceout=0x00000000      (Trace Disabled)
[17:43:33.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:43:33.884]    __FlashAddr=0x00000000
[17:43:33.884]    __FlashLen=0x00000000
[17:43:33.884]    __FlashArg=0x00000000
[17:43:33.884]    __FlashOp=0x00000000
[17:43:33.884]    __Result=0x00000000
[17:43:33.884]  </debugvars>
[17:43:33.885]  
[17:43:33.885]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:43:33.885]    <block atomic="false" info="">
[17:43:33.885]      __var SW_DP_ABORT       = 0x0;
[17:43:33.885]        // -> [SW_DP_ABORT <= 0x00000000]
[17:43:33.885]      __var DP_CTRL_STAT      = 0x4;
[17:43:33.885]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:43:33.885]      __var DP_SELECT         = 0x8;
[17:43:33.885]        // -> [DP_SELECT <= 0x00000008]
[17:43:33.885]      __var powered_down      = 0;
[17:43:33.885]        // -> [powered_down <= 0x00000000]
[17:43:33.885]      WriteDP(DP_SELECT, 0x00000000);
[17:43:33.888]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:43:33.888]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:43:33.890]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:43:33.890]        // -> [powered_down <= 0x00000001]
[17:43:33.890]    </block>
[17:43:33.890]    <control if="powered_down" while="" timeout="0" info="">
[17:43:33.890]      // if-block "powered_down"
[17:43:33.891]        // =>  TRUE
[17:43:33.891]      <block atomic="false" info="">
[17:43:33.891]        Message(0, "Debug/System power-up request sent");
[17:43:33.894]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:43:33.895]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:43:33.895]      </block>
[17:43:33.896]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:43:33.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:43:33.897]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:43:33.897]        // while-condition  =>  FALSE
[17:43:33.897]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:43:33.897]      </control>
[17:43:33.897]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:43:33.898]        // if-block "(__protocol & 0xFFFF) == 1"
[17:43:33.898]          // =>  FALSE
[17:43:33.898]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:43:33.898]      </control>
[17:43:33.898]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:43:33.898]        // if-block "(__protocol & 0xFFFF) == 2"
[17:43:33.898]          // =>  TRUE
[17:43:33.898]        <block atomic="false" info="">
[17:43:33.898]          Message(0, "executing SWD power up");
[17:43:33.901]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:43:33.903]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:43:33.903]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:43:33.905]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:43:33.905]        </block>
[17:43:33.905]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:43:33.905]      </control>
[17:43:33.905]      // end if-block "powered_down"
[17:43:33.906]    </control>
[17:43:33.906]    <block atomic="false" info="">
[17:43:33.906]      __var DEBUG_PORT_VAL    = 0;
[17:43:33.906]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:43:33.906]      __var ACCESS_POINT_VAL  = 0;
[17:43:33.906]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:43:33.906]      __ap = 1; 
[17:43:33.906]        // -> [__ap <= 0x00000001]
[17:43:33.906]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:43:33.910]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:43:33.910]      __ap = 4;
[17:43:33.910]        // -> [__ap <= 0x00000004]
[17:43:33.910]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:43:33.913]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:43:33.914]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:43:33.914]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:43:33.915]    </block>
[17:43:33.915]    <block atomic="false" info="">
[17:43:33.915]      __var nReset = 0x80;
[17:43:33.915]        // -> [nReset <= 0x00000080]
[17:43:33.915]      __var canReadPins = 0;
[17:43:33.916]        // -> [canReadPins <= 0x00000000]
[17:43:33.916]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:43:33.920]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:43:33.920]        // -> [canReadPins <= 0x00000001]
[17:43:33.920]    </block>
[17:43:33.920]    <control if="" while="1" timeout="200" info="">
[17:43:33.921]      // while "1"  (timeout="200")
[17:43:33.921]      // while-condition  =>  TRUE
[17:43:33.921]      // while "1"  (timeout="200")
[17:43:33.921]      // while-condition  =>  TRUE
[17:43:33.921]      // while "1"  (timeout="200")
[17:43:33.921]      // while-condition  =>  TRUE
[17:43:33.921]      // while "1"  (timeout="200")
[17:43:33.921]      // while-condition  =>  TRUE
[17:43:33.921]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.922]      // while-condition  =>  TRUE
[17:43:33.922]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.924]      // while "1"  (timeout="200")
[17:43:33.924]      // while-condition  =>  TRUE
[17:43:33.925]      // while "1"  (timeout="200")
[17:43:33.925]      // while  =>  TIMEOUT
[17:43:33.925]      // end while "1"
[17:43:33.925]    </control>
[17:43:33.925]    <control if="canReadPins" while="" timeout="0" info="">
[17:43:33.925]      // if-block "canReadPins"
[17:43:33.925]        // =>  TRUE
[17:43:33.925]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:43:33.925]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:43:33.927]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:43:33.927]        // while-condition  =>  FALSE
[17:43:33.927]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:43:33.927]      </control>
[17:43:33.927]      // end if-block "canReadPins"
[17:43:33.927]    </control>
[17:43:33.927]    <control if="!canReadPins" while="" timeout="0" info="">
[17:43:33.928]      // if-block "!canReadPins"
[17:43:33.928]        // =>  FALSE
[17:43:33.928]      // skip if-block "!canReadPins"
[17:43:33.928]    </control>
[17:43:33.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:43:33.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:43:33.928]        // =>  TRUE
[17:43:33.928]      <block atomic="false" info="">
[17:43:33.928]        WriteAP(0x00, 0x190008);
[17:43:33.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:43:33.932]        WriteAP(0xF0, 0x01);
[17:43:33.937]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:43:33.937]      </block>
[17:43:33.938]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:43:33.938]    </control>
[17:43:33.938]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:43:33.938]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:43:33.938]        // =>  FALSE
[17:43:33.938]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:43:33.938]    </control>
[17:43:33.938]    <block atomic="false" info="">
[17:43:33.938]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:43:33.942]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:43:33.942]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:43:33.942]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:43:33.943]      __ap = 0; //lets make sure we reset the access point selection
[17:43:33.943]        // -> [__ap <= 0x00000000]
[17:43:33.943]    </block>
[17:43:33.943]  </sequence>
[17:43:33.943]  
[17:43:33.962]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:43:33.962]  
[17:43:33.962]  <debugvars>
[17:43:33.962]    // Pre-defined
[17:43:33.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:43:33.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:43:33.963]    __dp=0x00000000
[17:43:33.963]    __ap=0x00000000
[17:43:33.963]    __traceout=0x00000000      (Trace Disabled)
[17:43:33.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:43:33.963]    __FlashAddr=0x00000000
[17:43:33.964]    __FlashLen=0x00000000
[17:43:33.964]    __FlashArg=0x00000000
[17:43:33.964]    __FlashOp=0x00000000
[17:43:33.964]    __Result=0x00000000
[17:43:33.964]  </debugvars>
[17:43:33.964]  
[17:43:33.964]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:43:33.964]    <block atomic="false" info="">
[17:43:33.964]      __var deviceID = 0;
[17:43:33.964]        // -> [deviceID <= 0x00000000]
[17:43:33.965]      __var version = 0;
[17:43:33.965]        // -> [version <= 0x00000000]
[17:43:33.965]      __var partNum = 0;
[17:43:33.965]        // -> [partNum <= 0x00000000]
[17:43:33.965]      __var manuf = 0;
[17:43:33.965]        // -> [manuf <= 0x00000000]
[17:43:33.965]      __var isMSPM0G1X0X_G3X0X = 0;
[17:43:33.965]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:43:33.965]      __var isProduction = 0;
[17:43:33.965]        // -> [isProduction <= 0x00000000]
[17:43:33.965]      __var continueId = 0;
[17:43:33.966]        // -> [continueId <= 0x00000000]
[17:43:33.966]      deviceID =   Read32(0x41C40004);
[17:43:33.970]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:43:33.970]        // -> [deviceID <= 0x2BB8802F]
[17:43:33.970]      version = deviceID >> 28;
[17:43:33.970]        // -> [version <= 0x00000002]
[17:43:33.970]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:43:33.970]        // -> [partNum <= 0x0000BB88]
[17:43:33.971]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:43:33.971]        // -> [manuf <= 0x00000017]
[17:43:33.971]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:43:33.971]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:43:33.971]      isProduction = (version > 0);
[17:43:33.971]        // -> [isProduction <= 0x00000001]
[17:43:33.971]    </block>
[17:43:33.971]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:43:33.971]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:43:33.971]        // =>  FALSE
[17:43:33.972]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:43:33.972]    </control>
[17:43:33.972]    <control if="continueId == 4" while="" timeout="0" info="">
[17:43:33.972]      // if-block "continueId == 4"
[17:43:33.972]        // =>  FALSE
[17:43:33.972]      // skip if-block "continueId == 4"
[17:43:33.972]    </control>
[17:43:33.972]    <control if="!isProduction" while="" timeout="0" info="">
[17:43:33.972]      // if-block "!isProduction"
[17:43:33.973]        // =>  FALSE
[17:43:33.973]      // skip if-block "!isProduction"
[17:43:33.973]    </control>
[17:43:33.973]  </sequence>
[17:43:33.973]  
[17:45:39.473]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:45:39.473]  
[17:45:39.473]  <debugvars>
[17:45:39.473]    // Pre-defined
[17:45:39.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:45:39.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:45:39.473]    __dp=0x00000000
[17:45:39.473]    __ap=0x00000000
[17:45:39.473]    __traceout=0x00000000      (Trace Disabled)
[17:45:39.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:45:39.475]    __FlashAddr=0x00000000
[17:45:39.475]    __FlashLen=0x00000000
[17:45:39.475]    __FlashArg=0x00000000
[17:45:39.475]    __FlashOp=0x00000000
[17:45:39.475]    __Result=0x00000000
[17:45:39.475]  </debugvars>
[17:45:39.475]  
[17:45:39.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:45:39.475]    <block atomic="false" info="">
[17:45:39.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:45:39.476]        // -> [isSWJ <= 0x00000001]
[17:45:39.476]      __var hasDormant = __protocol & 0x00020000;
[17:45:39.476]        // -> [hasDormant <= 0x00000000]
[17:45:39.476]      __var protType   = __protocol & 0x0000FFFF;
[17:45:39.476]        // -> [protType <= 0x00000002]
[17:45:39.476]    </block>
[17:45:39.476]    <control if="protType == 1" while="" timeout="0" info="">
[17:45:39.476]      // if-block "protType == 1"
[17:45:39.476]        // =>  FALSE
[17:45:39.476]      // skip if-block "protType == 1"
[17:45:39.476]    </control>
[17:45:39.478]    <control if="protType == 2" while="" timeout="0" info="">
[17:45:39.478]      // if-block "protType == 2"
[17:45:39.478]        // =>  TRUE
[17:45:39.478]      <control if="isSWJ" while="" timeout="0" info="">
[17:45:39.478]        // if-block "isSWJ"
[17:45:39.478]          // =>  TRUE
[17:45:39.478]        <control if="hasDormant" while="" timeout="0" info="">
[17:45:39.478]          // if-block "hasDormant"
[17:45:39.478]            // =>  FALSE
[17:45:39.478]          // skip if-block "hasDormant"
[17:45:39.478]        </control>
[17:45:39.479]        <control if="!hasDormant" while="" timeout="0" info="">
[17:45:39.479]          // if-block "!hasDormant"
[17:45:39.479]            // =>  TRUE
[17:45:39.479]          <block atomic="false" info="">
[17:45:39.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:45:39.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:45:39.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:45:39.492]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:45:39.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:45:39.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:45:39.495]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:45:39.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:45:39.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:45:39.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:45:39.500]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:45:39.502]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:45:39.502]          </block>
[17:45:39.502]          // end if-block "!hasDormant"
[17:45:39.502]        </control>
[17:45:39.502]        // end if-block "isSWJ"
[17:45:39.503]      </control>
[17:45:39.503]      <control if="!isSWJ" while="" timeout="0" info="">
[17:45:39.503]        // if-block "!isSWJ"
[17:45:39.503]          // =>  FALSE
[17:45:39.503]        // skip if-block "!isSWJ"
[17:45:39.503]      </control>
[17:45:39.503]      <block atomic="false" info="">
[17:45:39.503]        ReadDP(0x0);
[17:45:39.506]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:45:39.506]      </block>
[17:45:39.506]      // end if-block "protType == 2"
[17:45:39.506]    </control>
[17:45:39.506]  </sequence>
[17:45:39.506]  
[17:45:39.510]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:45:39.510]  
[17:45:39.510]  <debugvars>
[17:45:39.510]    // Pre-defined
[17:45:39.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:45:39.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:45:39.511]    __dp=0x00000000
[17:45:39.511]    __ap=0x00000000
[17:45:39.511]    __traceout=0x00000000      (Trace Disabled)
[17:45:39.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:45:39.511]    __FlashAddr=0x00000000
[17:45:39.511]    __FlashLen=0x00000000
[17:45:39.512]    __FlashArg=0x00000000
[17:45:39.512]    __FlashOp=0x00000000
[17:45:39.512]    __Result=0x00000000
[17:45:39.512]  </debugvars>
[17:45:39.512]  
[17:45:39.512]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:45:39.512]    <block atomic="false" info="">
[17:45:39.512]      __var SW_DP_ABORT       = 0x0;
[17:45:39.513]        // -> [SW_DP_ABORT <= 0x00000000]
[17:45:39.513]      __var DP_CTRL_STAT      = 0x4;
[17:45:39.513]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:45:39.513]      __var DP_SELECT         = 0x8;
[17:45:39.513]        // -> [DP_SELECT <= 0x00000008]
[17:45:39.513]      __var powered_down      = 0;
[17:45:39.513]        // -> [powered_down <= 0x00000000]
[17:45:39.513]      WriteDP(DP_SELECT, 0x00000000);
[17:45:39.516]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:45:39.516]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:45:39.518]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:45:39.518]        // -> [powered_down <= 0x00000001]
[17:45:39.518]    </block>
[17:45:39.518]    <control if="powered_down" while="" timeout="0" info="">
[17:45:39.518]      // if-block "powered_down"
[17:45:39.518]        // =>  TRUE
[17:45:39.518]      <block atomic="false" info="">
[17:45:39.518]        Message(0, "Debug/System power-up request sent");
[17:45:39.521]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:45:39.525]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:45:39.525]      </block>
[17:45:39.525]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:45:39.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:45:39.527]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:45:39.528]        // while-condition  =>  FALSE
[17:45:39.528]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:45:39.528]      </control>
[17:45:39.528]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:45:39.528]        // if-block "(__protocol & 0xFFFF) == 1"
[17:45:39.528]          // =>  FALSE
[17:45:39.528]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:45:39.528]      </control>
[17:45:39.528]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:45:39.528]        // if-block "(__protocol & 0xFFFF) == 2"
[17:45:39.529]          // =>  TRUE
[17:45:39.529]        <block atomic="false" info="">
[17:45:39.529]          Message(0, "executing SWD power up");
[17:45:39.530]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:45:39.531]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:45:39.531]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:45:39.531]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:45:39.534]        </block>
[17:45:39.534]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:45:39.534]      </control>
[17:45:39.534]      // end if-block "powered_down"
[17:45:39.535]    </control>
[17:45:39.535]    <block atomic="false" info="">
[17:45:39.535]      __var DEBUG_PORT_VAL    = 0;
[17:45:39.535]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:45:39.535]      __var ACCESS_POINT_VAL  = 0;
[17:45:39.536]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:45:39.536]      __ap = 1; 
[17:45:39.536]        // -> [__ap <= 0x00000001]
[17:45:39.536]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:45:39.537]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:45:39.537]      __ap = 4;
[17:45:39.537]        // -> [__ap <= 0x00000004]
[17:45:39.542]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:45:39.543]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:45:39.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:45:39.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:45:39.543]    </block>
[17:45:39.543]    <block atomic="false" info="">
[17:45:39.543]      __var nReset = 0x80;
[17:45:39.552]        // -> [nReset <= 0x00000080]
[17:45:39.552]      __var canReadPins = 0;
[17:45:39.552]        // -> [canReadPins <= 0x00000000]
[17:45:39.552]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:45:39.552]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:45:39.552]        // -> [canReadPins <= 0x00000001]
[17:45:39.552]    </block>
[17:45:39.552]    <control if="" while="1" timeout="200" info="">
[17:45:39.552]      // while "1"  (timeout="200")
[17:45:39.552]      // while-condition  =>  TRUE
[17:45:39.552]      // while "1"  (timeout="200")
[17:45:39.552]      // while-condition  =>  TRUE
[17:45:39.552]      // while "1"  (timeout="200")
[17:45:39.552]      // while-condition  =>  TRUE
[17:45:39.555]      // while "1"  (timeout="200")
[17:45:39.555]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.556]      // while "1"  (timeout="200")
[17:45:39.556]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.562]      // while "1"  (timeout="200")
[17:45:39.562]      // while-condition  =>  TRUE
[17:45:39.572]      // while "1"  (timeout="200")
[17:45:39.572]      // while  =>  TIMEOUT
[17:45:39.572]      // end while "1"
[17:45:39.572]    </control>
[17:45:39.572]    <control if="canReadPins" while="" timeout="0" info="">
[17:45:39.572]      // if-block "canReadPins"
[17:45:39.572]        // =>  TRUE
[17:45:39.572]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:45:39.572]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:45:39.572]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:45:39.572]        // while-condition  =>  FALSE
[17:45:39.572]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:45:39.572]      </control>
[17:45:39.572]      // end if-block "canReadPins"
[17:45:39.572]    </control>
[17:45:39.572]    <control if="!canReadPins" while="" timeout="0" info="">
[17:45:39.572]      // if-block "!canReadPins"
[17:45:39.572]        // =>  FALSE
[17:45:39.572]      // skip if-block "!canReadPins"
[17:45:39.572]    </control>
[17:45:39.572]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:45:39.572]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:45:39.572]        // =>  TRUE
[17:45:39.572]      <block atomic="false" info="">
[17:45:39.572]        WriteAP(0x00, 0x190008);
[17:45:39.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:45:39.572]        WriteAP(0xF0, 0x01);
[17:45:39.572]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:45:39.572]      </block>
[17:45:39.582]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:45:39.582]    </control>
[17:45:39.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:45:39.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:45:39.582]        // =>  FALSE
[17:45:39.582]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:45:39.582]    </control>
[17:45:39.582]    <block atomic="false" info="">
[17:45:39.582]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:45:39.582]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:45:39.582]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:45:39.582]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:45:39.582]      __ap = 0; //lets make sure we reset the access point selection
[17:45:39.582]        // -> [__ap <= 0x00000000]
[17:45:39.582]    </block>
[17:45:39.582]  </sequence>
[17:45:39.582]  
[17:45:39.615]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:45:39.615]  
[17:45:39.615]  <debugvars>
[17:45:39.615]    // Pre-defined
[17:45:39.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:45:39.615]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:45:39.615]    __dp=0x00000000
[17:45:39.615]    __ap=0x00000000
[17:45:39.615]    __traceout=0x00000000      (Trace Disabled)
[17:45:39.615]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:45:39.615]    __FlashAddr=0x00000000
[17:45:39.615]    __FlashLen=0x00000000
[17:45:39.615]    __FlashArg=0x00000000
[17:45:39.615]    __FlashOp=0x00000000
[17:45:39.615]    __Result=0x00000000
[17:45:39.615]  </debugvars>
[17:45:39.615]  
[17:45:39.615]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:45:39.615]    <block atomic="false" info="">
[17:45:39.617]      __var deviceID = 0;
[17:45:39.617]        // -> [deviceID <= 0x00000000]
[17:45:39.617]      __var version = 0;
[17:45:39.617]        // -> [version <= 0x00000000]
[17:45:39.617]      __var partNum = 0;
[17:45:39.617]        // -> [partNum <= 0x00000000]
[17:45:39.617]      __var manuf = 0;
[17:45:39.617]        // -> [manuf <= 0x00000000]
[17:45:39.618]      __var isMSPM0G1X0X_G3X0X = 0;
[17:45:39.618]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:45:39.618]      __var isProduction = 0;
[17:45:39.618]        // -> [isProduction <= 0x00000000]
[17:45:39.618]      __var continueId = 0;
[17:45:39.618]        // -> [continueId <= 0x00000000]
[17:45:39.618]      deviceID =   Read32(0x41C40004);
[17:45:39.623]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:45:39.623]        // -> [deviceID <= 0x2BB8802F]
[17:45:39.623]      version = deviceID >> 28;
[17:45:39.623]        // -> [version <= 0x00000002]
[17:45:39.623]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:45:39.623]        // -> [partNum <= 0x0000BB88]
[17:45:39.624]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:45:39.624]        // -> [manuf <= 0x00000017]
[17:45:39.624]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:45:39.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:45:39.624]      isProduction = (version > 0);
[17:45:39.624]        // -> [isProduction <= 0x00000001]
[17:45:39.624]    </block>
[17:45:39.624]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:45:39.624]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:45:39.624]        // =>  FALSE
[17:45:39.625]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:45:39.625]    </control>
[17:45:39.625]    <control if="continueId == 4" while="" timeout="0" info="">
[17:45:39.625]      // if-block "continueId == 4"
[17:45:39.625]        // =>  FALSE
[17:45:39.625]      // skip if-block "continueId == 4"
[17:45:39.625]    </control>
[17:45:39.625]    <control if="!isProduction" while="" timeout="0" info="">
[17:45:39.625]      // if-block "!isProduction"
[17:45:39.625]        // =>  FALSE
[17:45:39.625]      // skip if-block "!isProduction"
[17:45:39.626]    </control>
[17:45:39.626]  </sequence>
[17:45:39.626]  
[17:46:08.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:46:08.138]  
[17:46:08.156]  <debugvars>
[17:46:08.156]    // Pre-defined
[17:46:08.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:08.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:08.156]    __dp=0x00000000
[17:46:08.156]    __ap=0x00000000
[17:46:08.156]    __traceout=0x00000000      (Trace Disabled)
[17:46:08.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:08.156]    __FlashAddr=0x00000000
[17:46:08.156]    __FlashLen=0x00000000
[17:46:08.156]    __FlashArg=0x00000000
[17:46:08.156]    __FlashOp=0x00000000
[17:46:08.156]    __Result=0x00000000
[17:46:08.156]  </debugvars>
[17:46:08.156]  
[17:46:08.156]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:46:08.156]    <block atomic="false" info="">
[17:46:08.156]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:46:08.156]        // -> [isSWJ <= 0x00000001]
[17:46:08.156]      __var hasDormant = __protocol & 0x00020000;
[17:46:08.156]        // -> [hasDormant <= 0x00000000]
[17:46:08.156]      __var protType   = __protocol & 0x0000FFFF;
[17:46:08.156]        // -> [protType <= 0x00000002]
[17:46:08.156]    </block>
[17:46:08.156]    <control if="protType == 1" while="" timeout="0" info="">
[17:46:08.158]      // if-block "protType == 1"
[17:46:08.158]        // =>  FALSE
[17:46:08.158]      // skip if-block "protType == 1"
[17:46:08.158]    </control>
[17:46:08.158]    <control if="protType == 2" while="" timeout="0" info="">
[17:46:08.158]      // if-block "protType == 2"
[17:46:08.158]        // =>  TRUE
[17:46:08.158]      <control if="isSWJ" while="" timeout="0" info="">
[17:46:08.158]        // if-block "isSWJ"
[17:46:08.158]          // =>  TRUE
[17:46:08.158]        <control if="hasDormant" while="" timeout="0" info="">
[17:46:08.158]          // if-block "hasDormant"
[17:46:08.158]            // =>  FALSE
[17:46:08.158]          // skip if-block "hasDormant"
[17:46:08.158]        </control>
[17:46:08.158]        <control if="!hasDormant" while="" timeout="0" info="">
[17:46:08.158]          // if-block "!hasDormant"
[17:46:08.158]            // =>  TRUE
[17:46:08.158]          <block atomic="false" info="">
[17:46:08.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:46:08.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:08.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:46:08.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:46:08.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:46:08.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:08.158]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:46:08.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:46:08.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:46:08.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:08.168]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:46:08.168]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:46:08.168]          </block>
[17:46:08.168]          // end if-block "!hasDormant"
[17:46:08.168]        </control>
[17:46:08.168]        // end if-block "isSWJ"
[17:46:08.168]      </control>
[17:46:08.168]      <control if="!isSWJ" while="" timeout="0" info="">
[17:46:08.168]        // if-block "!isSWJ"
[17:46:08.168]          // =>  FALSE
[17:46:08.168]        // skip if-block "!isSWJ"
[17:46:08.168]      </control>
[17:46:08.168]      <block atomic="false" info="">
[17:46:08.168]        ReadDP(0x0);
[17:46:08.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:46:08.168]      </block>
[17:46:08.168]      // end if-block "protType == 2"
[17:46:08.168]    </control>
[17:46:08.168]  </sequence>
[17:46:08.168]  
[17:46:08.178]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:46:08.178]  
[17:46:08.178]  <debugvars>
[17:46:08.178]    // Pre-defined
[17:46:08.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:08.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:08.178]    __dp=0x00000000
[17:46:08.178]    __ap=0x00000000
[17:46:08.178]    __traceout=0x00000000      (Trace Disabled)
[17:46:08.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:08.178]    __FlashAddr=0x00000000
[17:46:08.178]    __FlashLen=0x00000000
[17:46:08.178]    __FlashArg=0x00000000
[17:46:08.178]    __FlashOp=0x00000000
[17:46:08.178]    __Result=0x00000000
[17:46:08.178]  </debugvars>
[17:46:08.178]  
[17:46:08.178]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:46:08.178]    <block atomic="false" info="">
[17:46:08.178]      __var SW_DP_ABORT       = 0x0;
[17:46:08.178]        // -> [SW_DP_ABORT <= 0x00000000]
[17:46:08.178]      __var DP_CTRL_STAT      = 0x4;
[17:46:08.178]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:46:08.178]      __var DP_SELECT         = 0x8;
[17:46:08.178]        // -> [DP_SELECT <= 0x00000008]
[17:46:08.178]      __var powered_down      = 0;
[17:46:08.178]        // -> [powered_down <= 0x00000000]
[17:46:08.178]      WriteDP(DP_SELECT, 0x00000000);
[17:46:08.178]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:46:08.178]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:46:08.188]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:46:08.188]        // -> [powered_down <= 0x00000001]
[17:46:08.188]    </block>
[17:46:08.188]    <control if="powered_down" while="" timeout="0" info="">
[17:46:08.188]      // if-block "powered_down"
[17:46:08.188]        // =>  TRUE
[17:46:08.188]      <block atomic="false" info="">
[17:46:08.188]        Message(0, "Debug/System power-up request sent");
[17:46:08.188]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:46:08.188]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:46:08.188]      </block>
[17:46:08.188]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:46:08.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:46:08.188]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:46:08.188]        // while-condition  =>  FALSE
[17:46:08.188]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:46:08.188]      </control>
[17:46:08.188]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:46:08.188]        // if-block "(__protocol & 0xFFFF) == 1"
[17:46:08.188]          // =>  FALSE
[17:46:08.188]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:46:08.188]      </control>
[17:46:08.188]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:46:08.188]        // if-block "(__protocol & 0xFFFF) == 2"
[17:46:08.198]          // =>  TRUE
[17:46:08.198]        <block atomic="false" info="">
[17:46:08.198]          Message(0, "executing SWD power up");
[17:46:08.199]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:46:08.201]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:46:08.201]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:46:08.204]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:46:08.204]        </block>
[17:46:08.204]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:46:08.204]      </control>
[17:46:08.204]      // end if-block "powered_down"
[17:46:08.204]    </control>
[17:46:08.204]    <block atomic="false" info="">
[17:46:08.204]      __var DEBUG_PORT_VAL    = 0;
[17:46:08.204]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:46:08.204]      __var ACCESS_POINT_VAL  = 0;
[17:46:08.204]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:46:08.204]      __ap = 1; 
[17:46:08.204]        // -> [__ap <= 0x00000001]
[17:46:08.204]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:46:08.209]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:46:08.209]      __ap = 4;
[17:46:08.209]        // -> [__ap <= 0x00000004]
[17:46:08.209]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:46:08.209]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:46:08.209]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:46:08.209]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:46:08.209]    </block>
[17:46:08.209]    <block atomic="false" info="">
[17:46:08.209]      __var nReset = 0x80;
[17:46:08.209]        // -> [nReset <= 0x00000080]
[17:46:08.209]      __var canReadPins = 0;
[17:46:08.209]        // -> [canReadPins <= 0x00000000]
[17:46:08.219]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:46:08.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:46:08.219]        // -> [canReadPins <= 0x00000001]
[17:46:08.219]    </block>
[17:46:08.219]    <control if="" while="1" timeout="200" info="">
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.219]      // while-condition  =>  TRUE
[17:46:08.219]      // while "1"  (timeout="200")
[17:46:08.229]      // while-condition  =>  TRUE
[17:46:08.229]      // while "1"  (timeout="200")
[17:46:08.229]      // while  =>  TIMEOUT
[17:46:08.229]      // end while "1"
[17:46:08.229]    </control>
[17:46:08.229]    <control if="canReadPins" while="" timeout="0" info="">
[17:46:08.229]      // if-block "canReadPins"
[17:46:08.229]        // =>  TRUE
[17:46:08.229]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:46:08.229]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:46:08.229]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:46:08.229]        // while-condition  =>  FALSE
[17:46:08.229]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:46:08.229]      </control>
[17:46:08.229]      // end if-block "canReadPins"
[17:46:08.229]    </control>
[17:46:08.229]    <control if="!canReadPins" while="" timeout="0" info="">
[17:46:08.229]      // if-block "!canReadPins"
[17:46:08.229]        // =>  FALSE
[17:46:08.229]      // skip if-block "!canReadPins"
[17:46:08.229]    </control>
[17:46:08.229]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:46:08.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:46:08.229]        // =>  TRUE
[17:46:08.229]      <block atomic="false" info="">
[17:46:08.229]        WriteAP(0x00, 0x190008);
[17:46:08.229]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:46:08.229]        WriteAP(0xF0, 0x01);
[17:46:08.239]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:46:08.239]      </block>
[17:46:08.239]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:46:08.239]    </control>
[17:46:08.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:46:08.239]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:46:08.239]        // =>  FALSE
[17:46:08.239]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:46:08.239]    </control>
[17:46:08.239]    <block atomic="false" info="">
[17:46:08.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:46:08.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:46:08.249]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:46:08.249]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:46:08.249]      __ap = 0; //lets make sure we reset the access point selection
[17:46:08.249]        // -> [__ap <= 0x00000000]
[17:46:08.249]    </block>
[17:46:08.249]  </sequence>
[17:46:08.249]  
[17:46:08.269]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:46:08.269]  
[17:46:08.269]  <debugvars>
[17:46:08.269]    // Pre-defined
[17:46:08.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:08.269]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:08.269]    __dp=0x00000000
[17:46:08.269]    __ap=0x00000000
[17:46:08.269]    __traceout=0x00000000      (Trace Disabled)
[17:46:08.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:08.269]    __FlashAddr=0x00000000
[17:46:08.269]    __FlashLen=0x00000000
[17:46:08.269]    __FlashArg=0x00000000
[17:46:08.269]    __FlashOp=0x00000000
[17:46:08.269]    __Result=0x00000000
[17:46:08.269]  </debugvars>
[17:46:08.269]  
[17:46:08.269]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:46:08.269]    <block atomic="false" info="">
[17:46:08.269]      __var deviceID = 0;
[17:46:08.269]        // -> [deviceID <= 0x00000000]
[17:46:08.269]      __var version = 0;
[17:46:08.269]        // -> [version <= 0x00000000]
[17:46:08.269]      __var partNum = 0;
[17:46:08.269]        // -> [partNum <= 0x00000000]
[17:46:08.269]      __var manuf = 0;
[17:46:08.269]        // -> [manuf <= 0x00000000]
[17:46:08.269]      __var isMSPM0G1X0X_G3X0X = 0;
[17:46:08.269]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:46:08.269]      __var isProduction = 0;
[17:46:08.269]        // -> [isProduction <= 0x00000000]
[17:46:08.269]      __var continueId = 0;
[17:46:08.269]        // -> [continueId <= 0x00000000]
[17:46:08.269]      deviceID =   Read32(0x41C40004);
[17:46:08.269]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:46:08.269]        // -> [deviceID <= 0x2BB8802F]
[17:46:08.269]      version = deviceID >> 28;
[17:46:08.269]        // -> [version <= 0x00000002]
[17:46:08.279]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:46:08.279]        // -> [partNum <= 0x0000BB88]
[17:46:08.279]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:46:08.279]        // -> [manuf <= 0x00000017]
[17:46:08.279]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:46:08.279]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:46:08.279]      isProduction = (version > 0);
[17:46:08.279]        // -> [isProduction <= 0x00000001]
[17:46:08.279]    </block>
[17:46:08.279]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:46:08.279]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:46:08.279]        // =>  FALSE
[17:46:08.279]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:46:08.279]    </control>
[17:46:08.279]    <control if="continueId == 4" while="" timeout="0" info="">
[17:46:08.279]      // if-block "continueId == 4"
[17:46:08.279]        // =>  FALSE
[17:46:08.279]      // skip if-block "continueId == 4"
[17:46:08.279]    </control>
[17:46:08.279]    <control if="!isProduction" while="" timeout="0" info="">
[17:46:08.279]      // if-block "!isProduction"
[17:46:08.279]        // =>  FALSE
[17:46:08.279]      // skip if-block "!isProduction"
[17:46:08.279]    </control>
[17:46:08.279]  </sequence>
[17:46:08.279]  
[17:46:34.382]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:46:34.382]  
[17:46:34.382]  <debugvars>
[17:46:34.382]    // Pre-defined
[17:46:34.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:34.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:34.382]    __dp=0x00000000
[17:46:34.382]    __ap=0x00000000
[17:46:34.382]    __traceout=0x00000000      (Trace Disabled)
[17:46:34.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:34.382]    __FlashAddr=0x00000000
[17:46:34.382]    __FlashLen=0x00000000
[17:46:34.382]    __FlashArg=0x00000000
[17:46:34.382]    __FlashOp=0x00000000
[17:46:34.382]    __Result=0x00000000
[17:46:34.382]  </debugvars>
[17:46:34.382]  
[17:46:34.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:46:34.382]    <block atomic="false" info="">
[17:46:34.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:46:34.382]        // -> [isSWJ <= 0x00000001]
[17:46:34.382]      __var hasDormant = __protocol & 0x00020000;
[17:46:34.382]        // -> [hasDormant <= 0x00000000]
[17:46:34.382]      __var protType   = __protocol & 0x0000FFFF;
[17:46:34.382]        // -> [protType <= 0x00000002]
[17:46:34.382]    </block>
[17:46:34.382]    <control if="protType == 1" while="" timeout="0" info="">
[17:46:34.382]      // if-block "protType == 1"
[17:46:34.382]        // =>  FALSE
[17:46:34.387]      // skip if-block "protType == 1"
[17:46:34.387]    </control>
[17:46:34.387]    <control if="protType == 2" while="" timeout="0" info="">
[17:46:34.387]      // if-block "protType == 2"
[17:46:34.387]        // =>  TRUE
[17:46:34.387]      <control if="isSWJ" while="" timeout="0" info="">
[17:46:34.387]        // if-block "isSWJ"
[17:46:34.387]          // =>  TRUE
[17:46:34.387]        <control if="hasDormant" while="" timeout="0" info="">
[17:46:34.387]          // if-block "hasDormant"
[17:46:34.387]            // =>  FALSE
[17:46:34.387]          // skip if-block "hasDormant"
[17:46:34.387]        </control>
[17:46:34.387]        <control if="!hasDormant" while="" timeout="0" info="">
[17:46:34.387]          // if-block "!hasDormant"
[17:46:34.387]            // =>  TRUE
[17:46:34.387]          <block atomic="false" info="">
[17:46:34.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:46:34.390]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:34.390]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:46:34.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:46:34.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:46:34.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:34.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:46:34.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:46:34.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:46:34.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:46:34.391]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:46:34.391]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:46:34.391]          </block>
[17:46:34.391]          // end if-block "!hasDormant"
[17:46:34.391]        </control>
[17:46:34.391]        // end if-block "isSWJ"
[17:46:34.391]      </control>
[17:46:34.391]      <control if="!isSWJ" while="" timeout="0" info="">
[17:46:34.391]        // if-block "!isSWJ"
[17:46:34.391]          // =>  FALSE
[17:46:34.391]        // skip if-block "!isSWJ"
[17:46:34.391]      </control>
[17:46:34.391]      <block atomic="false" info="">
[17:46:34.391]        ReadDP(0x0);
[17:46:34.399]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:46:34.399]      </block>
[17:46:34.399]      // end if-block "protType == 2"
[17:46:34.399]    </control>
[17:46:34.399]  </sequence>
[17:46:34.399]  
[17:46:34.401]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:46:34.401]  
[17:46:34.401]  <debugvars>
[17:46:34.401]    // Pre-defined
[17:46:34.401]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:34.401]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:34.401]    __dp=0x00000000
[17:46:34.401]    __ap=0x00000000
[17:46:34.401]    __traceout=0x00000000      (Trace Disabled)
[17:46:34.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:34.401]    __FlashAddr=0x00000000
[17:46:34.401]    __FlashLen=0x00000000
[17:46:34.401]    __FlashArg=0x00000000
[17:46:34.401]    __FlashOp=0x00000000
[17:46:34.401]    __Result=0x00000000
[17:46:34.401]  </debugvars>
[17:46:34.401]  
[17:46:34.401]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:46:34.401]    <block atomic="false" info="">
[17:46:34.401]      __var SW_DP_ABORT       = 0x0;
[17:46:34.401]        // -> [SW_DP_ABORT <= 0x00000000]
[17:46:34.401]      __var DP_CTRL_STAT      = 0x4;
[17:46:34.401]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:46:34.401]      __var DP_SELECT         = 0x8;
[17:46:34.401]        // -> [DP_SELECT <= 0x00000008]
[17:46:34.401]      __var powered_down      = 0;
[17:46:34.401]        // -> [powered_down <= 0x00000000]
[17:46:34.401]      WriteDP(DP_SELECT, 0x00000000);
[17:46:34.401]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:46:34.401]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:46:34.412]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:46:34.412]        // -> [powered_down <= 0x00000001]
[17:46:34.412]    </block>
[17:46:34.412]    <control if="powered_down" while="" timeout="0" info="">
[17:46:34.412]      // if-block "powered_down"
[17:46:34.412]        // =>  TRUE
[17:46:34.412]      <block atomic="false" info="">
[17:46:34.412]        Message(0, "Debug/System power-up request sent");
[17:46:34.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:46:34.420]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:46:34.420]      </block>
[17:46:34.420]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:46:34.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:46:34.420]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:46:34.420]        // while-condition  =>  FALSE
[17:46:34.420]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:46:34.420]      </control>
[17:46:34.420]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:46:34.420]        // if-block "(__protocol & 0xFFFF) == 1"
[17:46:34.420]          // =>  FALSE
[17:46:34.420]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:46:34.420]      </control>
[17:46:34.420]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:46:34.420]        // if-block "(__protocol & 0xFFFF) == 2"
[17:46:34.420]          // =>  TRUE
[17:46:34.420]        <block atomic="false" info="">
[17:46:34.420]          Message(0, "executing SWD power up");
[17:46:34.420]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:46:34.420]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:46:34.420]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:46:34.420]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:46:34.420]        </block>
[17:46:34.420]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:46:34.430]      </control>
[17:46:34.430]      // end if-block "powered_down"
[17:46:34.430]    </control>
[17:46:34.430]    <block atomic="false" info="">
[17:46:34.430]      __var DEBUG_PORT_VAL    = 0;
[17:46:34.430]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:46:34.430]      __var ACCESS_POINT_VAL  = 0;
[17:46:34.430]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:46:34.430]      __ap = 1; 
[17:46:34.430]        // -> [__ap <= 0x00000001]
[17:46:34.430]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:46:34.430]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:46:34.430]      __ap = 4;
[17:46:34.430]        // -> [__ap <= 0x00000004]
[17:46:34.430]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:46:34.430]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:46:34.430]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:46:34.430]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:46:34.440]    </block>
[17:46:34.440]    <block atomic="false" info="">
[17:46:34.440]      __var nReset = 0x80;
[17:46:34.440]        // -> [nReset <= 0x00000080]
[17:46:34.440]      __var canReadPins = 0;
[17:46:34.440]        // -> [canReadPins <= 0x00000000]
[17:46:34.440]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:46:34.440]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:46:34.440]        // -> [canReadPins <= 0x00000001]
[17:46:34.440]    </block>
[17:46:34.440]    <control if="" while="1" timeout="200" info="">
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.440]      // while-condition  =>  TRUE
[17:46:34.440]      // while "1"  (timeout="200")
[17:46:34.450]      // while-condition  =>  TRUE
[17:46:34.450]      // while "1"  (timeout="200")
[17:46:34.450]      // while  =>  TIMEOUT
[17:46:34.450]      // end while "1"
[17:46:34.450]    </control>
[17:46:34.450]    <control if="canReadPins" while="" timeout="0" info="">
[17:46:34.450]      // if-block "canReadPins"
[17:46:34.450]        // =>  TRUE
[17:46:34.450]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:46:34.450]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:46:34.450]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:46:34.450]        // while-condition  =>  FALSE
[17:46:34.450]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:46:34.450]      </control>
[17:46:34.450]      // end if-block "canReadPins"
[17:46:34.450]    </control>
[17:46:34.450]    <control if="!canReadPins" while="" timeout="0" info="">
[17:46:34.450]      // if-block "!canReadPins"
[17:46:34.450]        // =>  FALSE
[17:46:34.450]      // skip if-block "!canReadPins"
[17:46:34.450]    </control>
[17:46:34.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:46:34.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:46:34.450]        // =>  TRUE
[17:46:34.450]      <block atomic="false" info="">
[17:46:34.450]        WriteAP(0x00, 0x190008);
[17:46:34.460]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:46:34.460]        WriteAP(0xF0, 0x01);
[17:46:34.460]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:46:34.460]      </block>
[17:46:34.460]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:46:34.460]    </control>
[17:46:34.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:46:34.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:46:34.460]        // =>  FALSE
[17:46:34.460]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:46:34.460]    </control>
[17:46:34.460]    <block atomic="false" info="">
[17:46:34.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:46:34.460]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:46:34.460]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:46:34.460]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:46:34.460]      __ap = 0; //lets make sure we reset the access point selection
[17:46:34.460]        // -> [__ap <= 0x00000000]
[17:46:34.470]    </block>
[17:46:34.470]  </sequence>
[17:46:34.470]  
[17:46:34.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:46:34.490]  
[17:46:34.490]  <debugvars>
[17:46:34.490]    // Pre-defined
[17:46:34.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:46:34.490]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:46:34.490]    __dp=0x00000000
[17:46:34.490]    __ap=0x00000000
[17:46:34.490]    __traceout=0x00000000      (Trace Disabled)
[17:46:34.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:46:34.490]    __FlashAddr=0x00000000
[17:46:34.490]    __FlashLen=0x00000000
[17:46:34.490]    __FlashArg=0x00000000
[17:46:34.490]    __FlashOp=0x00000000
[17:46:34.490]    __Result=0x00000000
[17:46:34.490]  </debugvars>
[17:46:34.490]  
[17:46:34.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:46:34.490]    <block atomic="false" info="">
[17:46:34.490]      __var deviceID = 0;
[17:46:34.490]        // -> [deviceID <= 0x00000000]
[17:46:34.490]      __var version = 0;
[17:46:34.490]        // -> [version <= 0x00000000]
[17:46:34.490]      __var partNum = 0;
[17:46:34.490]        // -> [partNum <= 0x00000000]
[17:46:34.490]      __var manuf = 0;
[17:46:34.490]        // -> [manuf <= 0x00000000]
[17:46:34.490]      __var isMSPM0G1X0X_G3X0X = 0;
[17:46:34.490]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:46:34.490]      __var isProduction = 0;
[17:46:34.490]        // -> [isProduction <= 0x00000000]
[17:46:34.490]      __var continueId = 0;
[17:46:34.490]        // -> [continueId <= 0x00000000]
[17:46:34.490]      deviceID =   Read32(0x41C40004);
[17:46:34.490]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:46:34.490]        // -> [deviceID <= 0x2BB8802F]
[17:46:34.500]      version = deviceID >> 28;
[17:46:34.500]        // -> [version <= 0x00000002]
[17:46:34.500]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:46:34.500]        // -> [partNum <= 0x0000BB88]
[17:46:34.500]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:46:34.500]        // -> [manuf <= 0x00000017]
[17:46:34.500]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:46:34.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:46:34.500]      isProduction = (version > 0);
[17:46:34.500]        // -> [isProduction <= 0x00000001]
[17:46:34.500]    </block>
[17:46:34.500]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:46:34.500]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:46:34.500]        // =>  FALSE
[17:46:34.500]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:46:34.500]    </control>
[17:46:34.500]    <control if="continueId == 4" while="" timeout="0" info="">
[17:46:34.502]      // if-block "continueId == 4"
[17:46:34.502]        // =>  FALSE
[17:46:34.502]      // skip if-block "continueId == 4"
[17:46:34.502]    </control>
[17:46:34.502]    <control if="!isProduction" while="" timeout="0" info="">
[17:46:34.502]      // if-block "!isProduction"
[17:46:34.502]        // =>  FALSE
[17:46:34.502]      // skip if-block "!isProduction"
[17:46:34.502]    </control>
[17:46:34.502]  </sequence>
[17:46:34.502]  
[17:47:07.133]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:47:07.133]  
[17:47:07.144]  <debugvars>
[17:47:07.144]    // Pre-defined
[17:47:07.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:07.144]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:07.144]    __dp=0x00000000
[17:47:07.144]    __ap=0x00000000
[17:47:07.144]    __traceout=0x00000000      (Trace Disabled)
[17:47:07.144]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:07.144]    __FlashAddr=0x00000000
[17:47:07.144]    __FlashLen=0x00000000
[17:47:07.144]    __FlashArg=0x00000000
[17:47:07.144]    __FlashOp=0x00000000
[17:47:07.144]    __Result=0x00000000
[17:47:07.144]  </debugvars>
[17:47:07.144]  
[17:47:07.144]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:47:07.144]    <block atomic="false" info="">
[17:47:07.144]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:47:07.144]        // -> [isSWJ <= 0x00000001]
[17:47:07.144]      __var hasDormant = __protocol & 0x00020000;
[17:47:07.144]        // -> [hasDormant <= 0x00000000]
[17:47:07.147]      __var protType   = __protocol & 0x0000FFFF;
[17:47:07.147]        // -> [protType <= 0x00000002]
[17:47:07.147]    </block>
[17:47:07.147]    <control if="protType == 1" while="" timeout="0" info="">
[17:47:07.147]      // if-block "protType == 1"
[17:47:07.147]        // =>  FALSE
[17:47:07.147]      // skip if-block "protType == 1"
[17:47:07.147]    </control>
[17:47:07.147]    <control if="protType == 2" while="" timeout="0" info="">
[17:47:07.147]      // if-block "protType == 2"
[17:47:07.148]        // =>  TRUE
[17:47:07.148]      <control if="isSWJ" while="" timeout="0" info="">
[17:47:07.148]        // if-block "isSWJ"
[17:47:07.148]          // =>  TRUE
[17:47:07.148]        <control if="hasDormant" while="" timeout="0" info="">
[17:47:07.148]          // if-block "hasDormant"
[17:47:07.148]            // =>  FALSE
[17:47:07.148]          // skip if-block "hasDormant"
[17:47:07.148]        </control>
[17:47:07.148]        <control if="!hasDormant" while="" timeout="0" info="">
[17:47:07.148]          // if-block "!hasDormant"
[17:47:07.148]            // =>  TRUE
[17:47:07.148]          <block atomic="false" info="">
[17:47:07.148]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:47:07.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:07.148]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:47:07.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:47:07.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:47:07.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:07.152]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:47:07.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:47:07.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:47:07.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:07.158]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:47:07.164]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:47:07.164]          </block>
[17:47:07.164]          // end if-block "!hasDormant"
[17:47:07.164]        </control>
[17:47:07.164]        // end if-block "isSWJ"
[17:47:07.164]      </control>
[17:47:07.164]      <control if="!isSWJ" while="" timeout="0" info="">
[17:47:07.164]        // if-block "!isSWJ"
[17:47:07.164]          // =>  FALSE
[17:47:07.164]        // skip if-block "!isSWJ"
[17:47:07.164]      </control>
[17:47:07.167]      <block atomic="false" info="">
[17:47:07.167]        ReadDP(0x0);
[17:47:07.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:47:07.168]      </block>
[17:47:07.168]      // end if-block "protType == 2"
[17:47:07.168]    </control>
[17:47:07.168]  </sequence>
[17:47:07.169]  
[17:47:07.169]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:47:07.169]  
[17:47:07.169]  <debugvars>
[17:47:07.172]    // Pre-defined
[17:47:07.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:07.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:07.172]    __dp=0x00000000
[17:47:07.172]    __ap=0x00000000
[17:47:07.172]    __traceout=0x00000000      (Trace Disabled)
[17:47:07.172]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:07.172]    __FlashAddr=0x00000000
[17:47:07.172]    __FlashLen=0x00000000
[17:47:07.172]    __FlashArg=0x00000000
[17:47:07.172]    __FlashOp=0x00000000
[17:47:07.172]    __Result=0x00000000
[17:47:07.172]  </debugvars>
[17:47:07.172]  
[17:47:07.172]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:47:07.172]    <block atomic="false" info="">
[17:47:07.172]      __var SW_DP_ABORT       = 0x0;
[17:47:07.172]        // -> [SW_DP_ABORT <= 0x00000000]
[17:47:07.172]      __var DP_CTRL_STAT      = 0x4;
[17:47:07.172]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:47:07.172]      __var DP_SELECT         = 0x8;
[17:47:07.172]        // -> [DP_SELECT <= 0x00000008]
[17:47:07.172]      __var powered_down      = 0;
[17:47:07.172]        // -> [powered_down <= 0x00000000]
[17:47:07.172]      WriteDP(DP_SELECT, 0x00000000);
[17:47:07.172]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:47:07.172]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:47:07.172]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:47:07.178]        // -> [powered_down <= 0x00000001]
[17:47:07.178]    </block>
[17:47:07.178]    <control if="powered_down" while="" timeout="0" info="">
[17:47:07.178]      // if-block "powered_down"
[17:47:07.178]        // =>  TRUE
[17:47:07.178]      <block atomic="false" info="">
[17:47:07.178]        Message(0, "Debug/System power-up request sent");
[17:47:07.178]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:47:07.182]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:47:07.182]      </block>
[17:47:07.182]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:47:07.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:47:07.185]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:47:07.185]        // while-condition  =>  FALSE
[17:47:07.185]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:47:07.185]      </control>
[17:47:07.185]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:47:07.185]        // if-block "(__protocol & 0xFFFF) == 1"
[17:47:07.185]          // =>  FALSE
[17:47:07.185]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:47:07.185]      </control>
[17:47:07.185]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:47:07.185]        // if-block "(__protocol & 0xFFFF) == 2"
[17:47:07.185]          // =>  TRUE
[17:47:07.185]        <block atomic="false" info="">
[17:47:07.185]          Message(0, "executing SWD power up");
[17:47:07.185]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:47:07.185]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:47:07.185]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:47:07.185]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:47:07.185]        </block>
[17:47:07.191]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:47:07.191]      </control>
[17:47:07.191]      // end if-block "powered_down"
[17:47:07.191]    </control>
[17:47:07.191]    <block atomic="false" info="">
[17:47:07.191]      __var DEBUG_PORT_VAL    = 0;
[17:47:07.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:47:07.191]      __var ACCESS_POINT_VAL  = 0;
[17:47:07.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:47:07.191]      __ap = 1; 
[17:47:07.191]        // -> [__ap <= 0x00000001]
[17:47:07.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:47:07.196]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:47:07.196]      __ap = 4;
[17:47:07.196]        // -> [__ap <= 0x00000004]
[17:47:07.196]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:07.202]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:47:07.202]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:47:07.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:07.206]    </block>
[17:47:07.206]    <block atomic="false" info="">
[17:47:07.206]      __var nReset = 0x80;
[17:47:07.206]        // -> [nReset <= 0x00000080]
[17:47:07.206]      __var canReadPins = 0;
[17:47:07.207]        // -> [canReadPins <= 0x00000000]
[17:47:07.207]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:47:07.207]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:47:07.207]        // -> [canReadPins <= 0x00000001]
[17:47:07.207]    </block>
[17:47:07.207]    <control if="" while="1" timeout="200" info="">
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.207]      // while-condition  =>  TRUE
[17:47:07.207]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.212]      // while-condition  =>  TRUE
[17:47:07.212]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.216]      // while-condition  =>  TRUE
[17:47:07.216]      // while "1"  (timeout="200")
[17:47:07.221]      // while-condition  =>  TRUE
[17:47:07.221]      // while "1"  (timeout="200")
[17:47:07.221]      // while  =>  TIMEOUT
[17:47:07.221]      // end while "1"
[17:47:07.221]    </control>
[17:47:07.221]    <control if="canReadPins" while="" timeout="0" info="">
[17:47:07.221]      // if-block "canReadPins"
[17:47:07.221]        // =>  TRUE
[17:47:07.221]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:47:07.221]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:47:07.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:47:07.226]        // while-condition  =>  FALSE
[17:47:07.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:47:07.226]      </control>
[17:47:07.226]      // end if-block "canReadPins"
[17:47:07.226]    </control>
[17:47:07.226]    <control if="!canReadPins" while="" timeout="0" info="">
[17:47:07.226]      // if-block "!canReadPins"
[17:47:07.226]        // =>  FALSE
[17:47:07.226]      // skip if-block "!canReadPins"
[17:47:07.226]    </control>
[17:47:07.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:47:07.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:07.226]        // =>  TRUE
[17:47:07.226]      <block atomic="false" info="">
[17:47:07.226]        WriteAP(0x00, 0x190008);
[17:47:07.232]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:07.232]        WriteAP(0xF0, 0x01);
[17:47:07.236]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:07.236]      </block>
[17:47:07.236]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:07.236]    </control>
[17:47:07.236]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:47:07.237]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:07.237]        // =>  FALSE
[17:47:07.237]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:07.237]    </control>
[17:47:07.237]    <block atomic="false" info="">
[17:47:07.237]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:07.241]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:47:07.241]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:47:07.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:07.242]      __ap = 0; //lets make sure we reset the access point selection
[17:47:07.242]        // -> [__ap <= 0x00000000]
[17:47:07.242]    </block>
[17:47:07.242]  </sequence>
[17:47:07.242]  
[17:47:07.262]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:47:07.262]  
[17:47:07.262]  <debugvars>
[17:47:07.262]    // Pre-defined
[17:47:07.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:07.262]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:07.262]    __dp=0x00000000
[17:47:07.265]    __ap=0x00000000
[17:47:07.265]    __traceout=0x00000000      (Trace Disabled)
[17:47:07.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:07.265]    __FlashAddr=0x00000000
[17:47:07.265]    __FlashLen=0x00000000
[17:47:07.265]    __FlashArg=0x00000000
[17:47:07.265]    __FlashOp=0x00000000
[17:47:07.265]    __Result=0x00000000
[17:47:07.265]  </debugvars>
[17:47:07.267]  
[17:47:07.267]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:47:07.267]    <block atomic="false" info="">
[17:47:07.267]      __var deviceID = 0;
[17:47:07.267]        // -> [deviceID <= 0x00000000]
[17:47:07.267]      __var version = 0;
[17:47:07.267]        // -> [version <= 0x00000000]
[17:47:07.267]      __var partNum = 0;
[17:47:07.267]        // -> [partNum <= 0x00000000]
[17:47:07.267]      __var manuf = 0;
[17:47:07.267]        // -> [manuf <= 0x00000000]
[17:47:07.267]      __var isMSPM0G1X0X_G3X0X = 0;
[17:47:07.267]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:47:07.267]      __var isProduction = 0;
[17:47:07.268]        // -> [isProduction <= 0x00000000]
[17:47:07.268]      __var continueId = 0;
[17:47:07.268]        // -> [continueId <= 0x00000000]
[17:47:07.268]      deviceID =   Read32(0x41C40004);
[17:47:07.272]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:47:07.272]        // -> [deviceID <= 0x2BB8802F]
[17:47:07.272]      version = deviceID >> 28;
[17:47:07.272]        // -> [version <= 0x00000002]
[17:47:07.272]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:47:07.272]        // -> [partNum <= 0x0000BB88]
[17:47:07.272]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:47:07.272]        // -> [manuf <= 0x00000017]
[17:47:07.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:47:07.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:47:07.272]      isProduction = (version > 0);
[17:47:07.272]        // -> [isProduction <= 0x00000001]
[17:47:07.272]    </block>
[17:47:07.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:47:07.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:47:07.272]        // =>  FALSE
[17:47:07.272]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:47:07.272]    </control>
[17:47:07.272]    <control if="continueId == 4" while="" timeout="0" info="">
[17:47:07.272]      // if-block "continueId == 4"
[17:47:07.272]        // =>  FALSE
[17:47:07.272]      // skip if-block "continueId == 4"
[17:47:07.272]    </control>
[17:47:07.272]    <control if="!isProduction" while="" timeout="0" info="">
[17:47:07.272]      // if-block "!isProduction"
[17:47:07.272]        // =>  FALSE
[17:47:07.276]      // skip if-block "!isProduction"
[17:47:07.276]    </control>
[17:47:07.276]  </sequence>
[17:47:07.276]  
[17:47:31.520]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:47:31.520]  
[17:47:31.530]  <debugvars>
[17:47:31.530]    // Pre-defined
[17:47:31.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:31.530]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:31.530]    __dp=0x00000000
[17:47:31.530]    __ap=0x00000000
[17:47:31.530]    __traceout=0x00000000      (Trace Disabled)
[17:47:31.530]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:31.530]    __FlashAddr=0x00000000
[17:47:31.530]    __FlashLen=0x00000000
[17:47:31.530]    __FlashArg=0x00000000
[17:47:31.530]    __FlashOp=0x00000000
[17:47:31.530]    __Result=0x00000000
[17:47:31.530]  </debugvars>
[17:47:31.530]  
[17:47:31.530]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:47:31.530]    <block atomic="false" info="">
[17:47:31.530]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:47:31.530]        // -> [isSWJ <= 0x00000001]
[17:47:31.530]      __var hasDormant = __protocol & 0x00020000;
[17:47:31.530]        // -> [hasDormant <= 0x00000000]
[17:47:31.533]      __var protType   = __protocol & 0x0000FFFF;
[17:47:31.533]        // -> [protType <= 0x00000002]
[17:47:31.533]    </block>
[17:47:31.533]    <control if="protType == 1" while="" timeout="0" info="">
[17:47:31.533]      // if-block "protType == 1"
[17:47:31.533]        // =>  FALSE
[17:47:31.533]      // skip if-block "protType == 1"
[17:47:31.534]    </control>
[17:47:31.534]    <control if="protType == 2" while="" timeout="0" info="">
[17:47:31.534]      // if-block "protType == 2"
[17:47:31.534]        // =>  TRUE
[17:47:31.534]      <control if="isSWJ" while="" timeout="0" info="">
[17:47:31.534]        // if-block "isSWJ"
[17:47:31.534]          // =>  TRUE
[17:47:31.534]        <control if="hasDormant" while="" timeout="0" info="">
[17:47:31.534]          // if-block "hasDormant"
[17:47:31.534]            // =>  FALSE
[17:47:31.534]          // skip if-block "hasDormant"
[17:47:31.534]        </control>
[17:47:31.534]        <control if="!hasDormant" while="" timeout="0" info="">
[17:47:31.535]          // if-block "!hasDormant"
[17:47:31.535]            // =>  TRUE
[17:47:31.535]          <block atomic="false" info="">
[17:47:31.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:47:31.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:31.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:47:31.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:47:31.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:47:31.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:31.540]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:47:31.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:47:31.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:47:31.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:31.543]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:47:31.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:47:31.543]          </block>
[17:47:31.543]          // end if-block "!hasDormant"
[17:47:31.543]        </control>
[17:47:31.543]        // end if-block "isSWJ"
[17:47:31.543]      </control>
[17:47:31.546]      <control if="!isSWJ" while="" timeout="0" info="">
[17:47:31.546]        // if-block "!isSWJ"
[17:47:31.546]          // =>  FALSE
[17:47:31.546]        // skip if-block "!isSWJ"
[17:47:31.547]      </control>
[17:47:31.547]      <block atomic="false" info="">
[17:47:31.547]        ReadDP(0x0);
[17:47:31.548]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:47:31.548]      </block>
[17:47:31.548]      // end if-block "protType == 2"
[17:47:31.548]    </control>
[17:47:31.548]  </sequence>
[17:47:31.548]  
[17:47:31.550]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:47:31.550]  
[17:47:31.550]  <debugvars>
[17:47:31.550]    // Pre-defined
[17:47:31.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:31.550]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:31.550]    __dp=0x00000000
[17:47:31.550]    __ap=0x00000000
[17:47:31.550]    __traceout=0x00000000      (Trace Disabled)
[17:47:31.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:31.550]    __FlashAddr=0x00000000
[17:47:31.550]    __FlashLen=0x00000000
[17:47:31.550]    __FlashArg=0x00000000
[17:47:31.550]    __FlashOp=0x00000000
[17:47:31.550]    __Result=0x00000000
[17:47:31.553]  </debugvars>
[17:47:31.553]  
[17:47:31.553]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:47:31.553]    <block atomic="false" info="">
[17:47:31.553]      __var SW_DP_ABORT       = 0x0;
[17:47:31.553]        // -> [SW_DP_ABORT <= 0x00000000]
[17:47:31.553]      __var DP_CTRL_STAT      = 0x4;
[17:47:31.553]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:47:31.553]      __var DP_SELECT         = 0x8;
[17:47:31.553]        // -> [DP_SELECT <= 0x00000008]
[17:47:31.553]      __var powered_down      = 0;
[17:47:31.554]        // -> [powered_down <= 0x00000000]
[17:47:31.554]      WriteDP(DP_SELECT, 0x00000000);
[17:47:31.554]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:47:31.554]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:47:31.554]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:47:31.554]        // -> [powered_down <= 0x00000001]
[17:47:31.558]    </block>
[17:47:31.558]    <control if="powered_down" while="" timeout="0" info="">
[17:47:31.558]      // if-block "powered_down"
[17:47:31.558]        // =>  TRUE
[17:47:31.558]      <block atomic="false" info="">
[17:47:31.558]        Message(0, "Debug/System power-up request sent");
[17:47:31.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:47:31.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:47:31.563]      </block>
[17:47:31.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:47:31.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:47:31.563]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:47:31.563]        // while-condition  =>  FALSE
[17:47:31.563]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:47:31.563]      </control>
[17:47:31.563]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:47:31.563]        // if-block "(__protocol & 0xFFFF) == 1"
[17:47:31.563]          // =>  FALSE
[17:47:31.563]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:47:31.563]      </control>
[17:47:31.563]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:47:31.563]        // if-block "(__protocol & 0xFFFF) == 2"
[17:47:31.563]          // =>  TRUE
[17:47:31.563]        <block atomic="false" info="">
[17:47:31.567]          Message(0, "executing SWD power up");
[17:47:31.569]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:47:31.569]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:47:31.569]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:47:31.569]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:47:31.569]        </block>
[17:47:31.569]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:47:31.569]      </control>
[17:47:31.569]      // end if-block "powered_down"
[17:47:31.569]    </control>
[17:47:31.569]    <block atomic="false" info="">
[17:47:31.569]      __var DEBUG_PORT_VAL    = 0;
[17:47:31.569]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:47:31.569]      __var ACCESS_POINT_VAL  = 0;
[17:47:31.569]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:47:31.569]      __ap = 1; 
[17:47:31.574]        // -> [__ap <= 0x00000001]
[17:47:31.574]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:47:31.577]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:47:31.577]      __ap = 4;
[17:47:31.577]        // -> [__ap <= 0x00000004]
[17:47:31.578]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:31.581]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:47:31.581]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:47:31.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:31.583]    </block>
[17:47:31.583]    <block atomic="false" info="">
[17:47:31.583]      __var nReset = 0x80;
[17:47:31.583]        // -> [nReset <= 0x00000080]
[17:47:31.583]      __var canReadPins = 0;
[17:47:31.583]        // -> [canReadPins <= 0x00000000]
[17:47:31.583]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:47:31.585]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:47:31.585]        // -> [canReadPins <= 0x00000001]
[17:47:31.585]    </block>
[17:47:31.585]    <control if="" while="1" timeout="200" info="">
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.585]      // while "1"  (timeout="200")
[17:47:31.585]      // while-condition  =>  TRUE
[17:47:31.588]      // while "1"  (timeout="200")
[17:47:31.588]      // while-condition  =>  TRUE
[17:47:31.588]      // while "1"  (timeout="200")
[17:47:31.588]      // while-condition  =>  TRUE
[17:47:31.588]      // while "1"  (timeout="200")
[17:47:31.588]      // while-condition  =>  TRUE
[17:47:31.588]      // while "1"  (timeout="200")
[17:47:31.588]      // while-condition  =>  TRUE
[17:47:31.588]      // while "1"  (timeout="200")
[17:47:31.588]      // while-condition  =>  TRUE
[17:47:31.589]      // while "1"  (timeout="200")
[17:47:31.589]      // while-condition  =>  TRUE
[17:47:31.589]      // while "1"  (timeout="200")
[17:47:31.589]      // while-condition  =>  TRUE
[17:47:31.589]      // while "1"  (timeout="200")
[17:47:31.589]      // while-condition  =>  TRUE
[17:47:31.589]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.590]      // while-condition  =>  TRUE
[17:47:31.590]      // while "1"  (timeout="200")
[17:47:31.591]      // while-condition  =>  TRUE
[17:47:31.591]      // while "1"  (timeout="200")
[17:47:31.591]      // while-condition  =>  TRUE
[17:47:31.591]      // while "1"  (timeout="200")
[17:47:31.591]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.592]      // while "1"  (timeout="200")
[17:47:31.592]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.593]      // while "1"  (timeout="200")
[17:47:31.593]      // while-condition  =>  TRUE
[17:47:31.595]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.596]      // while-condition  =>  TRUE
[17:47:31.596]      // while "1"  (timeout="200")
[17:47:31.598]      // while-condition  =>  TRUE
[17:47:31.598]      // while "1"  (timeout="200")
[17:47:31.598]      // while  =>  TIMEOUT
[17:47:31.598]      // end while "1"
[17:47:31.598]    </control>
[17:47:31.598]    <control if="canReadPins" while="" timeout="0" info="">
[17:47:31.598]      // if-block "canReadPins"
[17:47:31.598]        // =>  TRUE
[17:47:31.598]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:47:31.598]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:47:31.598]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:47:31.598]        // while-condition  =>  FALSE
[17:47:31.598]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:47:31.598]      </control>
[17:47:31.598]      // end if-block "canReadPins"
[17:47:31.602]    </control>
[17:47:31.602]    <control if="!canReadPins" while="" timeout="0" info="">
[17:47:31.602]      // if-block "!canReadPins"
[17:47:31.602]        // =>  FALSE
[17:47:31.602]      // skip if-block "!canReadPins"
[17:47:31.602]    </control>
[17:47:31.602]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:47:31.602]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:31.602]        // =>  TRUE
[17:47:31.602]      <block atomic="false" info="">
[17:47:31.602]        WriteAP(0x00, 0x190008);
[17:47:31.609]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:31.609]        WriteAP(0xF0, 0x01);
[17:47:31.612]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:31.612]      </block>
[17:47:31.612]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:31.612]    </control>
[17:47:31.612]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:47:31.612]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:31.612]        // =>  FALSE
[17:47:31.612]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:31.612]    </control>
[17:47:31.612]    <block atomic="false" info="">
[17:47:31.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:31.616]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:47:31.616]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:47:31.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:31.618]      __ap = 0; //lets make sure we reset the access point selection
[17:47:31.618]        // -> [__ap <= 0x00000000]
[17:47:31.618]    </block>
[17:47:31.618]  </sequence>
[17:47:31.618]  
[17:47:31.639]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:47:31.639]  
[17:47:31.639]  <debugvars>
[17:47:31.639]    // Pre-defined
[17:47:31.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:31.639]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:31.639]    __dp=0x00000000
[17:47:31.639]    __ap=0x00000000
[17:47:31.639]    __traceout=0x00000000      (Trace Disabled)
[17:47:31.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:31.639]    __FlashAddr=0x00000000
[17:47:31.639]    __FlashLen=0x00000000
[17:47:31.639]    __FlashArg=0x00000000
[17:47:31.639]    __FlashOp=0x00000000
[17:47:31.639]    __Result=0x00000000
[17:47:31.639]  </debugvars>
[17:47:31.639]  
[17:47:31.639]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:47:31.639]    <block atomic="false" info="">
[17:47:31.639]      __var deviceID = 0;
[17:47:31.639]        // -> [deviceID <= 0x00000000]
[17:47:31.639]      __var version = 0;
[17:47:31.642]        // -> [version <= 0x00000000]
[17:47:31.642]      __var partNum = 0;
[17:47:31.642]        // -> [partNum <= 0x00000000]
[17:47:31.642]      __var manuf = 0;
[17:47:31.642]        // -> [manuf <= 0x00000000]
[17:47:31.642]      __var isMSPM0G1X0X_G3X0X = 0;
[17:47:31.642]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:47:31.642]      __var isProduction = 0;
[17:47:31.642]        // -> [isProduction <= 0x00000000]
[17:47:31.643]      __var continueId = 0;
[17:47:31.644]        // -> [continueId <= 0x00000000]
[17:47:31.644]      deviceID =   Read32(0x41C40004);
[17:47:31.648]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:47:31.648]        // -> [deviceID <= 0x2BB8802F]
[17:47:31.648]      version = deviceID >> 28;
[17:47:31.648]        // -> [version <= 0x00000002]
[17:47:31.648]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:47:31.648]        // -> [partNum <= 0x0000BB88]
[17:47:31.648]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:47:31.648]        // -> [manuf <= 0x00000017]
[17:47:31.650]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:47:31.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:47:31.650]      isProduction = (version > 0);
[17:47:31.650]        // -> [isProduction <= 0x00000001]
[17:47:31.651]    </block>
[17:47:31.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:47:31.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:47:31.651]        // =>  FALSE
[17:47:31.651]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:47:31.651]    </control>
[17:47:31.651]    <control if="continueId == 4" while="" timeout="0" info="">
[17:47:31.651]      // if-block "continueId == 4"
[17:47:31.651]        // =>  FALSE
[17:47:31.651]      // skip if-block "continueId == 4"
[17:47:31.651]    </control>
[17:47:31.651]    <control if="!isProduction" while="" timeout="0" info="">
[17:47:31.651]      // if-block "!isProduction"
[17:47:31.651]        // =>  FALSE
[17:47:31.651]      // skip if-block "!isProduction"
[17:47:31.651]    </control>
[17:47:31.651]  </sequence>
[17:47:31.651]  
[17:47:56.409]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:47:56.409]  
[17:47:56.409]  <debugvars>
[17:47:56.409]    // Pre-defined
[17:47:56.409]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:56.409]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:56.409]    __dp=0x00000000
[17:47:56.409]    __ap=0x00000000
[17:47:56.409]    __traceout=0x00000000      (Trace Disabled)
[17:47:56.409]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:56.409]    __FlashAddr=0x00000000
[17:47:56.409]    __FlashLen=0x00000000
[17:47:56.409]    __FlashArg=0x00000000
[17:47:56.409]    __FlashOp=0x00000000
[17:47:56.409]    __Result=0x00000000
[17:47:56.409]  </debugvars>
[17:47:56.409]  
[17:47:56.409]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:47:56.409]    <block atomic="false" info="">
[17:47:56.409]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:47:56.409]        // -> [isSWJ <= 0x00000001]
[17:47:56.409]      __var hasDormant = __protocol & 0x00020000;
[17:47:56.409]        // -> [hasDormant <= 0x00000000]
[17:47:56.409]      __var protType   = __protocol & 0x0000FFFF;
[17:47:56.409]        // -> [protType <= 0x00000002]
[17:47:56.409]    </block>
[17:47:56.409]    <control if="protType == 1" while="" timeout="0" info="">
[17:47:56.409]      // if-block "protType == 1"
[17:47:56.414]        // =>  FALSE
[17:47:56.414]      // skip if-block "protType == 1"
[17:47:56.414]    </control>
[17:47:56.414]    <control if="protType == 2" while="" timeout="0" info="">
[17:47:56.414]      // if-block "protType == 2"
[17:47:56.414]        // =>  TRUE
[17:47:56.414]      <control if="isSWJ" while="" timeout="0" info="">
[17:47:56.414]        // if-block "isSWJ"
[17:47:56.414]          // =>  TRUE
[17:47:56.415]        <control if="hasDormant" while="" timeout="0" info="">
[17:47:56.415]          // if-block "hasDormant"
[17:47:56.415]            // =>  FALSE
[17:47:56.415]          // skip if-block "hasDormant"
[17:47:56.415]        </control>
[17:47:56.415]        <control if="!hasDormant" while="" timeout="0" info="">
[17:47:56.415]          // if-block "!hasDormant"
[17:47:56.415]            // =>  TRUE
[17:47:56.415]          <block atomic="false" info="">
[17:47:56.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:47:56.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:56.415]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:47:56.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:47:56.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:47:56.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:56.424]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:47:56.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:47:56.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:47:56.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:47:56.427]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:47:56.429]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:47:56.429]          </block>
[17:47:56.429]          // end if-block "!hasDormant"
[17:47:56.429]        </control>
[17:47:56.429]        // end if-block "isSWJ"
[17:47:56.429]      </control>
[17:47:56.429]      <control if="!isSWJ" while="" timeout="0" info="">
[17:47:56.429]        // if-block "!isSWJ"
[17:47:56.429]          // =>  FALSE
[17:47:56.429]        // skip if-block "!isSWJ"
[17:47:56.429]      </control>
[17:47:56.429]      <block atomic="false" info="">
[17:47:56.429]        ReadDP(0x0);
[17:47:56.429]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:47:56.429]      </block>
[17:47:56.429]      // end if-block "protType == 2"
[17:47:56.429]    </control>
[17:47:56.429]  </sequence>
[17:47:56.429]  
[17:47:56.436]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:47:56.436]  
[17:47:56.436]  <debugvars>
[17:47:56.436]    // Pre-defined
[17:47:56.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:56.436]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:56.436]    __dp=0x00000000
[17:47:56.436]    __ap=0x00000000
[17:47:56.437]    __traceout=0x00000000      (Trace Disabled)
[17:47:56.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:56.437]    __FlashAddr=0x00000000
[17:47:56.437]    __FlashLen=0x00000000
[17:47:56.437]    __FlashArg=0x00000000
[17:47:56.437]    __FlashOp=0x00000000
[17:47:56.437]    __Result=0x00000000
[17:47:56.437]  </debugvars>
[17:47:56.437]  
[17:47:56.437]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:47:56.437]    <block atomic="false" info="">
[17:47:56.437]      __var SW_DP_ABORT       = 0x0;
[17:47:56.437]        // -> [SW_DP_ABORT <= 0x00000000]
[17:47:56.437]      __var DP_CTRL_STAT      = 0x4;
[17:47:56.437]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:47:56.437]      __var DP_SELECT         = 0x8;
[17:47:56.437]        // -> [DP_SELECT <= 0x00000008]
[17:47:56.437]      __var powered_down      = 0;
[17:47:56.437]        // -> [powered_down <= 0x00000000]
[17:47:56.437]      WriteDP(DP_SELECT, 0x00000000);
[17:47:56.437]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:47:56.437]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:47:56.437]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:47:56.437]        // -> [powered_down <= 0x00000001]
[17:47:56.437]    </block>
[17:47:56.437]    <control if="powered_down" while="" timeout="0" info="">
[17:47:56.437]      // if-block "powered_down"
[17:47:56.437]        // =>  TRUE
[17:47:56.437]      <block atomic="false" info="">
[17:47:56.437]        Message(0, "Debug/System power-up request sent");
[17:47:56.444]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:47:56.447]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:47:56.447]      </block>
[17:47:56.447]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:47:56.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:47:56.448]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:47:56.448]        // while-condition  =>  FALSE
[17:47:56.448]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:47:56.448]      </control>
[17:47:56.450]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:47:56.450]        // if-block "(__protocol & 0xFFFF) == 1"
[17:47:56.450]          // =>  FALSE
[17:47:56.450]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:47:56.450]      </control>
[17:47:56.450]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:47:56.450]        // if-block "(__protocol & 0xFFFF) == 2"
[17:47:56.450]          // =>  TRUE
[17:47:56.450]        <block atomic="false" info="">
[17:47:56.450]          Message(0, "executing SWD power up");
[17:47:56.453]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:47:56.454]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:47:56.454]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:47:56.456]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:47:56.456]        </block>
[17:47:56.456]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:47:56.457]      </control>
[17:47:56.457]      // end if-block "powered_down"
[17:47:56.457]    </control>
[17:47:56.457]    <block atomic="false" info="">
[17:47:56.457]      __var DEBUG_PORT_VAL    = 0;
[17:47:56.457]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:47:56.457]      __var ACCESS_POINT_VAL  = 0;
[17:47:56.457]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:47:56.457]      __ap = 1; 
[17:47:56.457]        // -> [__ap <= 0x00000001]
[17:47:56.457]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:47:56.461]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:47:56.461]      __ap = 4;
[17:47:56.461]        // -> [__ap <= 0x00000004]
[17:47:56.461]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:56.464]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:47:56.464]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:47:56.465]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:56.468]    </block>
[17:47:56.468]    <block atomic="false" info="">
[17:47:56.468]      __var nReset = 0x80;
[17:47:56.468]        // -> [nReset <= 0x00000080]
[17:47:56.468]      __var canReadPins = 0;
[17:47:56.468]        // -> [canReadPins <= 0x00000000]
[17:47:56.468]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:47:56.470]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:47:56.470]        // -> [canReadPins <= 0x00000001]
[17:47:56.470]    </block>
[17:47:56.470]    <control if="" while="1" timeout="200" info="">
[17:47:56.470]      // while "1"  (timeout="200")
[17:47:56.470]      // while-condition  =>  TRUE
[17:47:56.470]      // while "1"  (timeout="200")
[17:47:56.471]      // while-condition  =>  TRUE
[17:47:56.471]      // while "1"  (timeout="200")
[17:47:56.471]      // while-condition  =>  TRUE
[17:47:56.471]      // while "1"  (timeout="200")
[17:47:56.471]      // while-condition  =>  TRUE
[17:47:56.471]      // while "1"  (timeout="200")
[17:47:56.472]      // while-condition  =>  TRUE
[17:47:56.472]      // while "1"  (timeout="200")
[17:47:56.472]      // while  =>  TIMEOUT
[17:47:56.472]      // end while "1"
[17:47:56.473]    </control>
[17:47:56.473]    <control if="canReadPins" while="" timeout="0" info="">
[17:47:56.473]      // if-block "canReadPins"
[17:47:56.473]        // =>  TRUE
[17:47:56.473]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:47:56.473]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:47:56.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:47:56.475]        // while-condition  =>  FALSE
[17:47:56.475]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:47:56.475]      </control>
[17:47:56.475]      // end if-block "canReadPins"
[17:47:56.475]    </control>
[17:47:56.475]    <control if="!canReadPins" while="" timeout="0" info="">
[17:47:56.475]      // if-block "!canReadPins"
[17:47:56.476]        // =>  FALSE
[17:47:56.476]      // skip if-block "!canReadPins"
[17:47:56.476]    </control>
[17:47:56.476]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:47:56.476]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:56.476]        // =>  TRUE
[17:47:56.476]      <block atomic="false" info="">
[17:47:56.477]        WriteAP(0x00, 0x190008);
[17:47:56.479]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:56.479]        WriteAP(0xF0, 0x01);
[17:47:56.482]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:47:56.483]      </block>
[17:47:56.483]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:47:56.483]    </control>
[17:47:56.483]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:47:56.483]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:56.483]        // =>  FALSE
[17:47:56.483]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:47:56.483]    </control>
[17:47:56.484]    <block atomic="false" info="">
[17:47:56.484]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:47:56.487]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:47:56.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:47:56.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:47:56.489]      __ap = 0; //lets make sure we reset the access point selection
[17:47:56.489]        // -> [__ap <= 0x00000000]
[17:47:56.489]    </block>
[17:47:56.489]  </sequence>
[17:47:56.489]  
[17:47:56.513]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:47:56.513]  
[17:47:56.513]  <debugvars>
[17:47:56.513]    // Pre-defined
[17:47:56.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:47:56.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:47:56.513]    __dp=0x00000000
[17:47:56.513]    __ap=0x00000000
[17:47:56.513]    __traceout=0x00000000      (Trace Disabled)
[17:47:56.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:47:56.514]    __FlashAddr=0x00000000
[17:47:56.514]    __FlashLen=0x00000000
[17:47:56.514]    __FlashArg=0x00000000
[17:47:56.514]    __FlashOp=0x00000000
[17:47:56.514]    __Result=0x00000000
[17:47:56.514]  </debugvars>
[17:47:56.514]  
[17:47:56.514]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:47:56.514]    <block atomic="false" info="">
[17:47:56.514]      __var deviceID = 0;
[17:47:56.514]        // -> [deviceID <= 0x00000000]
[17:47:56.515]      __var version = 0;
[17:47:56.515]        // -> [version <= 0x00000000]
[17:47:56.515]      __var partNum = 0;
[17:47:56.515]        // -> [partNum <= 0x00000000]
[17:47:56.515]      __var manuf = 0;
[17:47:56.515]        // -> [manuf <= 0x00000000]
[17:47:56.515]      __var isMSPM0G1X0X_G3X0X = 0;
[17:47:56.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:47:56.515]      __var isProduction = 0;
[17:47:56.515]        // -> [isProduction <= 0x00000000]
[17:47:56.515]      __var continueId = 0;
[17:47:56.516]        // -> [continueId <= 0x00000000]
[17:47:56.516]      deviceID =   Read32(0x41C40004);
[17:47:56.520]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:47:56.520]        // -> [deviceID <= 0x2BB8802F]
[17:47:56.520]      version = deviceID >> 28;
[17:47:56.520]        // -> [version <= 0x00000002]
[17:47:56.521]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:47:56.521]        // -> [partNum <= 0x0000BB88]
[17:47:56.521]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:47:56.521]        // -> [manuf <= 0x00000017]
[17:47:56.521]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:47:56.521]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:47:56.521]      isProduction = (version > 0);
[17:47:56.521]        // -> [isProduction <= 0x00000001]
[17:47:56.521]    </block>
[17:47:56.521]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:47:56.522]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:47:56.522]        // =>  FALSE
[17:47:56.522]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:47:56.522]    </control>
[17:47:56.522]    <control if="continueId == 4" while="" timeout="0" info="">
[17:47:56.522]      // if-block "continueId == 4"
[17:47:56.522]        // =>  FALSE
[17:47:56.522]      // skip if-block "continueId == 4"
[17:47:56.522]    </control>
[17:47:56.522]    <control if="!isProduction" while="" timeout="0" info="">
[17:47:56.522]      // if-block "!isProduction"
[17:47:56.522]        // =>  FALSE
[17:47:56.522]      // skip if-block "!isProduction"
[17:47:56.522]    </control>
[17:47:56.522]  </sequence>
[17:47:56.522]  
[17:48:16.948]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:48:16.948]  
[17:48:16.948]  <debugvars>
[17:48:16.948]    // Pre-defined
[17:48:16.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:16.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:16.948]    __dp=0x00000000
[17:48:16.948]    __ap=0x00000000
[17:48:16.948]    __traceout=0x00000000      (Trace Disabled)
[17:48:16.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:16.948]    __FlashAddr=0x00000000
[17:48:16.948]    __FlashLen=0x00000000
[17:48:16.948]    __FlashArg=0x00000000
[17:48:16.948]    __FlashOp=0x00000000
[17:48:16.948]    __Result=0x00000000
[17:48:16.948]  </debugvars>
[17:48:16.948]  
[17:48:16.948]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:48:16.948]    <block atomic="false" info="">
[17:48:16.948]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:48:16.948]        // -> [isSWJ <= 0x00000001]
[17:48:16.948]      __var hasDormant = __protocol & 0x00020000;
[17:48:16.948]        // -> [hasDormant <= 0x00000000]
[17:48:16.948]      __var protType   = __protocol & 0x0000FFFF;
[17:48:16.948]        // -> [protType <= 0x00000002]
[17:48:16.948]    </block>
[17:48:16.948]    <control if="protType == 1" while="" timeout="0" info="">
[17:48:16.948]      // if-block "protType == 1"
[17:48:16.948]        // =>  FALSE
[17:48:16.948]      // skip if-block "protType == 1"
[17:48:16.948]    </control>
[17:48:16.954]    <control if="protType == 2" while="" timeout="0" info="">
[17:48:16.954]      // if-block "protType == 2"
[17:48:16.954]        // =>  TRUE
[17:48:16.954]      <control if="isSWJ" while="" timeout="0" info="">
[17:48:16.954]        // if-block "isSWJ"
[17:48:16.954]          // =>  TRUE
[17:48:16.954]        <control if="hasDormant" while="" timeout="0" info="">
[17:48:16.954]          // if-block "hasDormant"
[17:48:16.954]            // =>  FALSE
[17:48:16.954]          // skip if-block "hasDormant"
[17:48:16.954]        </control>
[17:48:16.954]        <control if="!hasDormant" while="" timeout="0" info="">
[17:48:16.954]          // if-block "!hasDormant"
[17:48:16.954]            // =>  TRUE
[17:48:16.956]          <block atomic="false" info="">
[17:48:16.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:48:16.959]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:16.959]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:48:16.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:48:16.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:48:16.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:16.964]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:48:16.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:48:16.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:48:16.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:16.975]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:48:16.975]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:48:16.975]          </block>
[17:48:16.975]          // end if-block "!hasDormant"
[17:48:16.975]        </control>
[17:48:16.975]        // end if-block "isSWJ"
[17:48:16.975]      </control>
[17:48:16.975]      <control if="!isSWJ" while="" timeout="0" info="">
[17:48:16.975]        // if-block "!isSWJ"
[17:48:16.975]          // =>  FALSE
[17:48:16.975]        // skip if-block "!isSWJ"
[17:48:16.975]      </control>
[17:48:16.975]      <block atomic="false" info="">
[17:48:16.975]        ReadDP(0x0);
[17:48:16.978]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:48:16.978]      </block>
[17:48:16.978]      // end if-block "protType == 2"
[17:48:16.978]    </control>
[17:48:16.978]  </sequence>
[17:48:16.978]  
[17:48:16.984]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:48:16.984]  
[17:48:16.984]  <debugvars>
[17:48:16.984]    // Pre-defined
[17:48:16.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:16.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:16.984]    __dp=0x00000000
[17:48:16.984]    __ap=0x00000000
[17:48:16.984]    __traceout=0x00000000      (Trace Disabled)
[17:48:16.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:16.984]    __FlashAddr=0x00000000
[17:48:16.984]    __FlashLen=0x00000000
[17:48:16.984]    __FlashArg=0x00000000
[17:48:16.984]    __FlashOp=0x00000000
[17:48:16.984]    __Result=0x00000000
[17:48:16.984]  </debugvars>
[17:48:16.984]  
[17:48:16.984]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:48:16.984]    <block atomic="false" info="">
[17:48:16.984]      __var SW_DP_ABORT       = 0x0;
[17:48:16.984]        // -> [SW_DP_ABORT <= 0x00000000]
[17:48:16.984]      __var DP_CTRL_STAT      = 0x4;
[17:48:16.984]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:48:16.984]      __var DP_SELECT         = 0x8;
[17:48:16.984]        // -> [DP_SELECT <= 0x00000008]
[17:48:16.984]      __var powered_down      = 0;
[17:48:16.984]        // -> [powered_down <= 0x00000000]
[17:48:16.984]      WriteDP(DP_SELECT, 0x00000000);
[17:48:16.988]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:48:16.988]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:48:16.993]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:48:16.993]        // -> [powered_down <= 0x00000001]
[17:48:16.993]    </block>
[17:48:16.993]    <control if="powered_down" while="" timeout="0" info="">
[17:48:16.993]      // if-block "powered_down"
[17:48:16.993]        // =>  TRUE
[17:48:16.994]      <block atomic="false" info="">
[17:48:16.994]        Message(0, "Debug/System power-up request sent");
[17:48:16.994]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:48:17.001]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:48:17.001]      </block>
[17:48:17.001]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:48:17.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:48:17.008]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:48:17.008]        // while-condition  =>  FALSE
[17:48:17.008]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:48:17.008]      </control>
[17:48:17.008]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:48:17.008]        // if-block "(__protocol & 0xFFFF) == 1"
[17:48:17.008]          // =>  FALSE
[17:48:17.008]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:48:17.008]      </control>
[17:48:17.008]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:48:17.008]        // if-block "(__protocol & 0xFFFF) == 2"
[17:48:17.008]          // =>  TRUE
[17:48:17.008]        <block atomic="false" info="">
[17:48:17.008]          Message(0, "executing SWD power up");
[17:48:17.016]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:48:17.022]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:48:17.022]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:48:17.024]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:48:17.024]        </block>
[17:48:17.024]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:48:17.024]      </control>
[17:48:17.024]      // end if-block "powered_down"
[17:48:17.024]    </control>
[17:48:17.026]    <block atomic="false" info="">
[17:48:17.026]      __var DEBUG_PORT_VAL    = 0;
[17:48:17.026]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:48:17.026]      __var ACCESS_POINT_VAL  = 0;
[17:48:17.026]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:48:17.026]      __ap = 1; 
[17:48:17.026]        // -> [__ap <= 0x00000001]
[17:48:17.026]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:48:17.035]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:48:17.035]      __ap = 4;
[17:48:17.035]        // -> [__ap <= 0x00000004]
[17:48:17.035]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:48:17.038]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:48:17.038]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:48:17.038]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:48:17.043]    </block>
[17:48:17.043]    <block atomic="false" info="">
[17:48:17.043]      __var nReset = 0x80;
[17:48:17.045]        // -> [nReset <= 0x00000080]
[17:48:17.045]      __var canReadPins = 0;
[17:48:17.045]        // -> [canReadPins <= 0x00000000]
[17:48:17.045]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:48:17.048]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:48:17.048]        // -> [canReadPins <= 0x00000001]
[17:48:17.048]    </block>
[17:48:17.048]    <control if="" while="1" timeout="200" info="">
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.048]      // while-condition  =>  TRUE
[17:48:17.048]      // while "1"  (timeout="200")
[17:48:17.053]      // while-condition  =>  TRUE
[17:48:17.053]      // while "1"  (timeout="200")
[17:48:17.053]      // while  =>  TIMEOUT
[17:48:17.053]      // end while "1"
[17:48:17.053]    </control>
[17:48:17.053]    <control if="canReadPins" while="" timeout="0" info="">
[17:48:17.053]      // if-block "canReadPins"
[17:48:17.053]        // =>  TRUE
[17:48:17.053]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:48:17.053]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:48:17.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:48:17.055]        // while-condition  =>  FALSE
[17:48:17.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:48:17.055]      </control>
[17:48:17.055]      // end if-block "canReadPins"
[17:48:17.055]    </control>
[17:48:17.055]    <control if="!canReadPins" while="" timeout="0" info="">
[17:48:17.055]      // if-block "!canReadPins"
[17:48:17.055]        // =>  FALSE
[17:48:17.055]      // skip if-block "!canReadPins"
[17:48:17.055]    </control>
[17:48:17.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:48:17.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:48:17.055]        // =>  TRUE
[17:48:17.055]      <block atomic="false" info="">
[17:48:17.055]        WriteAP(0x00, 0x190008);
[17:48:17.061]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:48:17.061]        WriteAP(0xF0, 0x01);
[17:48:17.065]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:48:17.065]      </block>
[17:48:17.065]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:48:17.065]    </control>
[17:48:17.068]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:48:17.068]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:48:17.068]        // =>  FALSE
[17:48:17.068]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:48:17.068]    </control>
[17:48:17.068]    <block atomic="false" info="">
[17:48:17.068]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:48:17.078]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:48:17.078]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:48:17.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:48:17.082]      __ap = 0; //lets make sure we reset the access point selection
[17:48:17.082]        // -> [__ap <= 0x00000000]
[17:48:17.082]    </block>
[17:48:17.082]  </sequence>
[17:48:17.082]  
[17:48:17.103]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:48:17.103]  
[17:48:17.103]  <debugvars>
[17:48:17.103]    // Pre-defined
[17:48:17.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:17.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:17.104]    __dp=0x00000000
[17:48:17.104]    __ap=0x00000000
[17:48:17.104]    __traceout=0x00000000      (Trace Disabled)
[17:48:17.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:17.104]    __FlashAddr=0x00000000
[17:48:17.104]    __FlashLen=0x00000000
[17:48:17.104]    __FlashArg=0x00000000
[17:48:17.104]    __FlashOp=0x00000000
[17:48:17.104]    __Result=0x00000000
[17:48:17.104]  </debugvars>
[17:48:17.104]  
[17:48:17.104]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:48:17.104]    <block atomic="false" info="">
[17:48:17.104]      __var deviceID = 0;
[17:48:17.104]        // -> [deviceID <= 0x00000000]
[17:48:17.104]      __var version = 0;
[17:48:17.104]        // -> [version <= 0x00000000]
[17:48:17.104]      __var partNum = 0;
[17:48:17.104]        // -> [partNum <= 0x00000000]
[17:48:17.104]      __var manuf = 0;
[17:48:17.104]        // -> [manuf <= 0x00000000]
[17:48:17.104]      __var isMSPM0G1X0X_G3X0X = 0;
[17:48:17.104]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:48:17.104]      __var isProduction = 0;
[17:48:17.104]        // -> [isProduction <= 0x00000000]
[17:48:17.104]      __var continueId = 0;
[17:48:17.104]        // -> [continueId <= 0x00000000]
[17:48:17.104]      deviceID =   Read32(0x41C40004);
[17:48:17.113]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:48:17.113]        // -> [deviceID <= 0x2BB8802F]
[17:48:17.113]      version = deviceID >> 28;
[17:48:17.113]        // -> [version <= 0x00000002]
[17:48:17.113]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:48:17.113]        // -> [partNum <= 0x0000BB88]
[17:48:17.113]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:48:17.113]        // -> [manuf <= 0x00000017]
[17:48:17.118]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:48:17.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:48:17.118]      isProduction = (version > 0);
[17:48:17.118]        // -> [isProduction <= 0x00000001]
[17:48:17.118]    </block>
[17:48:17.118]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:48:17.119]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:48:17.119]        // =>  FALSE
[17:48:17.119]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:48:17.119]    </control>
[17:48:17.119]    <control if="continueId == 4" while="" timeout="0" info="">
[17:48:17.119]      // if-block "continueId == 4"
[17:48:17.119]        // =>  FALSE
[17:48:17.119]      // skip if-block "continueId == 4"
[17:48:17.119]    </control>
[17:48:17.119]    <control if="!isProduction" while="" timeout="0" info="">
[17:48:17.119]      // if-block "!isProduction"
[17:48:17.119]        // =>  FALSE
[17:48:17.119]      // skip if-block "!isProduction"
[17:48:17.119]    </control>
[17:48:17.119]  </sequence>
[17:48:17.119]  
[17:48:53.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:48:53.205]  
[17:48:53.212]  <debugvars>
[17:48:53.212]    // Pre-defined
[17:48:53.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:53.213]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:53.213]    __dp=0x00000000
[17:48:53.213]    __ap=0x00000000
[17:48:53.213]    __traceout=0x00000000      (Trace Disabled)
[17:48:53.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:53.214]    __FlashAddr=0x00000000
[17:48:53.214]    __FlashLen=0x00000000
[17:48:53.214]    __FlashArg=0x00000000
[17:48:53.214]    __FlashOp=0x00000000
[17:48:53.214]    __Result=0x00000000
[17:48:53.214]  </debugvars>
[17:48:53.214]  
[17:48:53.214]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:48:53.214]    <block atomic="false" info="">
[17:48:53.215]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:48:53.215]        // -> [isSWJ <= 0x00000001]
[17:48:53.215]      __var hasDormant = __protocol & 0x00020000;
[17:48:53.215]        // -> [hasDormant <= 0x00000000]
[17:48:53.215]      __var protType   = __protocol & 0x0000FFFF;
[17:48:53.215]        // -> [protType <= 0x00000002]
[17:48:53.215]    </block>
[17:48:53.215]    <control if="protType == 1" while="" timeout="0" info="">
[17:48:53.215]      // if-block "protType == 1"
[17:48:53.216]        // =>  FALSE
[17:48:53.216]      // skip if-block "protType == 1"
[17:48:53.216]    </control>
[17:48:53.216]    <control if="protType == 2" while="" timeout="0" info="">
[17:48:53.216]      // if-block "protType == 2"
[17:48:53.216]        // =>  TRUE
[17:48:53.216]      <control if="isSWJ" while="" timeout="0" info="">
[17:48:53.216]        // if-block "isSWJ"
[17:48:53.216]          // =>  TRUE
[17:48:53.216]        <control if="hasDormant" while="" timeout="0" info="">
[17:48:53.216]          // if-block "hasDormant"
[17:48:53.216]            // =>  FALSE
[17:48:53.217]          // skip if-block "hasDormant"
[17:48:53.217]        </control>
[17:48:53.217]        <control if="!hasDormant" while="" timeout="0" info="">
[17:48:53.217]          // if-block "!hasDormant"
[17:48:53.217]            // =>  TRUE
[17:48:53.217]          <block atomic="false" info="">
[17:48:53.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:48:53.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:53.219]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:48:53.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:48:53.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:48:53.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:53.227]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:48:53.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:48:53.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:48:53.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:48:53.230]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:48:53.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:48:53.232]          </block>
[17:48:53.232]          // end if-block "!hasDormant"
[17:48:53.232]        </control>
[17:48:53.232]        // end if-block "isSWJ"
[17:48:53.232]      </control>
[17:48:53.232]      <control if="!isSWJ" while="" timeout="0" info="">
[17:48:53.232]        // if-block "!isSWJ"
[17:48:53.232]          // =>  FALSE
[17:48:53.233]        // skip if-block "!isSWJ"
[17:48:53.233]      </control>
[17:48:53.233]      <block atomic="false" info="">
[17:48:53.233]        ReadDP(0x0);
[17:48:53.234]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:48:53.234]      </block>
[17:48:53.234]      // end if-block "protType == 2"
[17:48:53.234]    </control>
[17:48:53.234]  </sequence>
[17:48:53.234]  
[17:48:53.238]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:48:53.238]  
[17:48:53.238]  <debugvars>
[17:48:53.238]    // Pre-defined
[17:48:53.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:53.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:53.238]    __dp=0x00000000
[17:48:53.238]    __ap=0x00000000
[17:48:53.238]    __traceout=0x00000000      (Trace Disabled)
[17:48:53.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:53.238]    __FlashAddr=0x00000000
[17:48:53.238]    __FlashLen=0x00000000
[17:48:53.238]    __FlashArg=0x00000000
[17:48:53.238]    __FlashOp=0x00000000
[17:48:53.238]    __Result=0x00000000
[17:48:53.238]  </debugvars>
[17:48:53.238]  
[17:48:53.240]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:48:53.240]    <block atomic="false" info="">
[17:48:53.240]      __var SW_DP_ABORT       = 0x0;
[17:48:53.240]        // -> [SW_DP_ABORT <= 0x00000000]
[17:48:53.240]      __var DP_CTRL_STAT      = 0x4;
[17:48:53.240]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:48:53.240]      __var DP_SELECT         = 0x8;
[17:48:53.240]        // -> [DP_SELECT <= 0x00000008]
[17:48:53.240]      __var powered_down      = 0;
[17:48:53.240]        // -> [powered_down <= 0x00000000]
[17:48:53.240]      WriteDP(DP_SELECT, 0x00000000);
[17:48:53.242]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:48:53.242]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:48:53.244]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:48:53.244]        // -> [powered_down <= 0x00000001]
[17:48:53.244]    </block>
[17:48:53.244]    <control if="powered_down" while="" timeout="0" info="">
[17:48:53.244]      // if-block "powered_down"
[17:48:53.244]        // =>  TRUE
[17:48:53.244]      <block atomic="false" info="">
[17:48:53.244]        Message(0, "Debug/System power-up request sent");
[17:48:53.246]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:48:53.248]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:48:53.248]      </block>
[17:48:53.248]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:48:53.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:48:53.248]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:48:53.248]        // while-condition  =>  FALSE
[17:48:53.248]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:48:53.248]      </control>
[17:48:53.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:48:53.248]        // if-block "(__protocol & 0xFFFF) == 1"
[17:48:53.248]          // =>  FALSE
[17:48:53.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:48:53.252]      </control>
[17:48:53.252]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:48:53.252]        // if-block "(__protocol & 0xFFFF) == 2"
[17:48:53.252]          // =>  TRUE
[17:48:53.252]        <block atomic="false" info="">
[17:48:53.252]          Message(0, "executing SWD power up");
[17:48:53.254]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:48:53.256]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:48:53.256]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:48:53.257]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:48:53.257]        </block>
[17:48:53.257]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:48:53.257]      </control>
[17:48:53.257]      // end if-block "powered_down"
[17:48:53.257]    </control>
[17:48:53.257]    <block atomic="false" info="">
[17:48:53.259]      __var DEBUG_PORT_VAL    = 0;
[17:48:53.259]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:48:53.259]      __var ACCESS_POINT_VAL  = 0;
[17:48:53.259]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:48:53.259]      __ap = 1; 
[17:48:53.259]        // -> [__ap <= 0x00000001]
[17:48:53.259]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:48:53.262]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:48:53.262]      __ap = 4;
[17:48:53.262]        // -> [__ap <= 0x00000004]
[17:48:53.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:48:53.264]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:48:53.264]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:48:53.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:48:53.264]    </block>
[17:48:53.264]    <block atomic="false" info="">
[17:48:53.264]      __var nReset = 0x80;
[17:48:53.264]        // -> [nReset <= 0x00000080]
[17:48:53.264]      __var canReadPins = 0;
[17:48:53.264]        // -> [canReadPins <= 0x00000000]
[17:48:53.264]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:48:53.269]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:48:53.269]        // -> [canReadPins <= 0x00000001]
[17:48:53.269]    </block>
[17:48:53.269]    <control if="" while="1" timeout="200" info="">
[17:48:53.269]      // while "1"  (timeout="200")
[17:48:53.269]      // while-condition  =>  TRUE
[17:48:53.269]      // while "1"  (timeout="200")
[17:48:53.269]      // while-condition  =>  TRUE
[17:48:53.272]      // while "1"  (timeout="200")
[17:48:53.272]      // while-condition  =>  TRUE
[17:48:53.272]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.273]      // while-condition  =>  TRUE
[17:48:53.273]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.275]      // while "1"  (timeout="200")
[17:48:53.275]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.276]      // while-condition  =>  TRUE
[17:48:53.276]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.277]      // while "1"  (timeout="200")
[17:48:53.277]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.279]      // while "1"  (timeout="200")
[17:48:53.279]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.280]      // while "1"  (timeout="200")
[17:48:53.280]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.282]      // while-condition  =>  TRUE
[17:48:53.282]      // while "1"  (timeout="200")
[17:48:53.286]      // while-condition  =>  TRUE
[17:48:53.286]      // while "1"  (timeout="200")
[17:48:53.286]      // while  =>  TIMEOUT
[17:48:53.286]      // end while "1"
[17:48:53.286]    </control>
[17:48:53.286]    <control if="canReadPins" while="" timeout="0" info="">
[17:48:53.286]      // if-block "canReadPins"
[17:48:53.286]        // =>  TRUE
[17:48:53.286]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:48:53.286]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:48:53.288]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:48:53.288]        // while-condition  =>  FALSE
[17:48:53.288]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:48:53.288]      </control>
[17:48:53.288]      // end if-block "canReadPins"
[17:48:53.288]    </control>
[17:48:53.288]    <control if="!canReadPins" while="" timeout="0" info="">
[17:48:53.288]      // if-block "!canReadPins"
[17:48:53.288]        // =>  FALSE
[17:48:53.288]      // skip if-block "!canReadPins"
[17:48:53.288]    </control>
[17:48:53.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:48:53.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:48:53.290]        // =>  TRUE
[17:48:53.290]      <block atomic="false" info="">
[17:48:53.290]        WriteAP(0x00, 0x190008);
[17:48:53.292]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:48:53.292]        WriteAP(0xF0, 0x01);
[17:48:53.293]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:48:53.293]      </block>
[17:48:53.293]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:48:53.293]    </control>
[17:48:53.293]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:48:53.293]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:48:53.293]        // =>  FALSE
[17:48:53.293]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:48:53.293]    </control>
[17:48:53.293]    <block atomic="false" info="">
[17:48:53.293]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:48:53.302]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:48:53.302]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:48:53.302]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:48:53.304]      __ap = 0; //lets make sure we reset the access point selection
[17:48:53.304]        // -> [__ap <= 0x00000000]
[17:48:53.304]    </block>
[17:48:53.304]  </sequence>
[17:48:53.304]  
[17:48:53.324]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:48:53.324]  
[17:48:53.324]  <debugvars>
[17:48:53.324]    // Pre-defined
[17:48:53.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:48:53.324]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:48:53.324]    __dp=0x00000000
[17:48:53.324]    __ap=0x00000000
[17:48:53.324]    __traceout=0x00000000      (Trace Disabled)
[17:48:53.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:48:53.324]    __FlashAddr=0x00000000
[17:48:53.324]    __FlashLen=0x00000000
[17:48:53.324]    __FlashArg=0x00000000
[17:48:53.324]    __FlashOp=0x00000000
[17:48:53.324]    __Result=0x00000000
[17:48:53.324]  </debugvars>
[17:48:53.324]  
[17:48:53.324]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:48:53.324]    <block atomic="false" info="">
[17:48:53.324]      __var deviceID = 0;
[17:48:53.324]        // -> [deviceID <= 0x00000000]
[17:48:53.324]      __var version = 0;
[17:48:53.324]        // -> [version <= 0x00000000]
[17:48:53.324]      __var partNum = 0;
[17:48:53.324]        // -> [partNum <= 0x00000000]
[17:48:53.324]      __var manuf = 0;
[17:48:53.324]        // -> [manuf <= 0x00000000]
[17:48:53.324]      __var isMSPM0G1X0X_G3X0X = 0;
[17:48:53.324]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:48:53.324]      __var isProduction = 0;
[17:48:53.324]        // -> [isProduction <= 0x00000000]
[17:48:53.324]      __var continueId = 0;
[17:48:53.324]        // -> [continueId <= 0x00000000]
[17:48:53.324]      deviceID =   Read32(0x41C40004);
[17:48:53.336]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:48:53.336]        // -> [deviceID <= 0x2BB8802F]
[17:48:53.336]      version = deviceID >> 28;
[17:48:53.336]        // -> [version <= 0x00000002]
[17:48:53.336]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:48:53.336]        // -> [partNum <= 0x0000BB88]
[17:48:53.336]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:48:53.336]        // -> [manuf <= 0x00000017]
[17:48:53.336]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:48:53.336]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:48:53.336]      isProduction = (version > 0);
[17:48:53.336]        // -> [isProduction <= 0x00000001]
[17:48:53.336]    </block>
[17:48:53.336]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:48:53.336]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:48:53.336]        // =>  FALSE
[17:48:53.336]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:48:53.336]    </control>
[17:48:53.336]    <control if="continueId == 4" while="" timeout="0" info="">
[17:48:53.336]      // if-block "continueId == 4"
[17:48:53.336]        // =>  FALSE
[17:48:53.336]      // skip if-block "continueId == 4"
[17:48:53.336]    </control>
[17:48:53.336]    <control if="!isProduction" while="" timeout="0" info="">
[17:48:53.336]      // if-block "!isProduction"
[17:48:53.336]        // =>  FALSE
[17:48:53.336]      // skip if-block "!isProduction"
[17:48:53.336]    </control>
[17:48:53.336]  </sequence>
[17:48:53.336]  
[17:49:28.883]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:49:28.883]  
[17:49:28.897]  <debugvars>
[17:49:28.897]    // Pre-defined
[17:49:28.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:28.897]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:28.897]    __dp=0x00000000
[17:49:28.897]    __ap=0x00000000
[17:49:28.897]    __traceout=0x00000000      (Trace Disabled)
[17:49:28.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:28.897]    __FlashAddr=0x00000000
[17:49:28.897]    __FlashLen=0x00000000
[17:49:28.897]    __FlashArg=0x00000000
[17:49:28.897]    __FlashOp=0x00000000
[17:49:28.897]    __Result=0x00000000
[17:49:28.897]  </debugvars>
[17:49:28.897]  
[17:49:28.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:49:28.897]    <block atomic="false" info="">
[17:49:28.899]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:49:28.899]        // -> [isSWJ <= 0x00000001]
[17:49:28.899]      __var hasDormant = __protocol & 0x00020000;
[17:49:28.899]        // -> [hasDormant <= 0x00000000]
[17:49:28.899]      __var protType   = __protocol & 0x0000FFFF;
[17:49:28.899]        // -> [protType <= 0x00000002]
[17:49:28.899]    </block>
[17:49:28.899]    <control if="protType == 1" while="" timeout="0" info="">
[17:49:28.899]      // if-block "protType == 1"
[17:49:28.899]        // =>  FALSE
[17:49:28.899]      // skip if-block "protType == 1"
[17:49:28.899]    </control>
[17:49:28.899]    <control if="protType == 2" while="" timeout="0" info="">
[17:49:28.899]      // if-block "protType == 2"
[17:49:28.899]        // =>  TRUE
[17:49:28.899]      <control if="isSWJ" while="" timeout="0" info="">
[17:49:28.899]        // if-block "isSWJ"
[17:49:28.899]          // =>  TRUE
[17:49:28.899]        <control if="hasDormant" while="" timeout="0" info="">
[17:49:28.899]          // if-block "hasDormant"
[17:49:28.899]            // =>  FALSE
[17:49:28.899]          // skip if-block "hasDormant"
[17:49:28.899]        </control>
[17:49:28.899]        <control if="!hasDormant" while="" timeout="0" info="">
[17:49:28.899]          // if-block "!hasDormant"
[17:49:28.901]            // =>  TRUE
[17:49:28.901]          <block atomic="false" info="">
[17:49:28.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:49:28.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:28.904]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:49:28.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:49:28.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:49:28.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:28.907]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:49:28.908]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:49:28.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:49:28.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:28.910]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:49:28.910]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:49:28.910]          </block>
[17:49:28.910]          // end if-block "!hasDormant"
[17:49:28.910]        </control>
[17:49:28.910]        // end if-block "isSWJ"
[17:49:28.910]      </control>
[17:49:28.910]      <control if="!isSWJ" while="" timeout="0" info="">
[17:49:28.910]        // if-block "!isSWJ"
[17:49:28.910]          // =>  FALSE
[17:49:28.910]        // skip if-block "!isSWJ"
[17:49:28.910]      </control>
[17:49:28.910]      <block atomic="false" info="">
[17:49:28.910]        ReadDP(0x0);
[17:49:28.914]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:49:28.914]      </block>
[17:49:28.914]      // end if-block "protType == 2"
[17:49:28.914]    </control>
[17:49:28.914]  </sequence>
[17:49:28.914]  
[17:49:28.917]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:49:28.917]  
[17:49:28.917]  <debugvars>
[17:49:28.917]    // Pre-defined
[17:49:28.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:28.917]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:28.917]    __dp=0x00000000
[17:49:28.917]    __ap=0x00000000
[17:49:28.917]    __traceout=0x00000000      (Trace Disabled)
[17:49:28.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:28.917]    __FlashAddr=0x00000000
[17:49:28.917]    __FlashLen=0x00000000
[17:49:28.917]    __FlashArg=0x00000000
[17:49:28.917]    __FlashOp=0x00000000
[17:49:28.917]    __Result=0x00000000
[17:49:28.917]  </debugvars>
[17:49:28.917]  
[17:49:28.917]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:49:28.919]    <block atomic="false" info="">
[17:49:28.919]      __var SW_DP_ABORT       = 0x0;
[17:49:28.919]        // -> [SW_DP_ABORT <= 0x00000000]
[17:49:28.919]      __var DP_CTRL_STAT      = 0x4;
[17:49:28.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:49:28.919]      __var DP_SELECT         = 0x8;
[17:49:28.919]        // -> [DP_SELECT <= 0x00000008]
[17:49:28.919]      __var powered_down      = 0;
[17:49:28.919]        // -> [powered_down <= 0x00000000]
[17:49:28.919]      WriteDP(DP_SELECT, 0x00000000);
[17:49:28.927]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:49:28.927]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:49:28.927]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:49:28.927]        // -> [powered_down <= 0x00000001]
[17:49:28.927]    </block>
[17:49:28.927]    <control if="powered_down" while="" timeout="0" info="">
[17:49:28.927]      // if-block "powered_down"
[17:49:28.927]        // =>  TRUE
[17:49:28.927]      <block atomic="false" info="">
[17:49:28.927]        Message(0, "Debug/System power-up request sent");
[17:49:28.934]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:49:28.934]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:49:28.934]      </block>
[17:49:28.934]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:49:28.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:49:28.934]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:49:28.934]        // while-condition  =>  FALSE
[17:49:28.934]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:49:28.934]      </control>
[17:49:28.934]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:49:28.934]        // if-block "(__protocol & 0xFFFF) == 1"
[17:49:28.934]          // =>  FALSE
[17:49:28.934]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:49:28.934]      </control>
[17:49:28.934]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:49:28.934]        // if-block "(__protocol & 0xFFFF) == 2"
[17:49:28.934]          // =>  TRUE
[17:49:28.934]        <block atomic="false" info="">
[17:49:28.934]          Message(0, "executing SWD power up");
[17:49:28.944]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:49:28.946]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:49:28.946]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:49:28.949]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:49:28.949]        </block>
[17:49:28.949]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:49:28.949]      </control>
[17:49:28.950]      // end if-block "powered_down"
[17:49:28.950]    </control>
[17:49:28.950]    <block atomic="false" info="">
[17:49:28.950]      __var DEBUG_PORT_VAL    = 0;
[17:49:28.950]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:49:28.950]      __var ACCESS_POINT_VAL  = 0;
[17:49:28.951]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:49:28.951]      __ap = 1; 
[17:49:28.951]        // -> [__ap <= 0x00000001]
[17:49:28.951]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:49:28.954]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:49:28.954]      __ap = 4;
[17:49:28.954]        // -> [__ap <= 0x00000004]
[17:49:28.954]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:49:28.954]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:49:28.954]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:49:28.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:49:28.954]    </block>
[17:49:28.954]    <block atomic="false" info="">
[17:49:28.954]      __var nReset = 0x80;
[17:49:28.954]        // -> [nReset <= 0x00000080]
[17:49:28.954]      __var canReadPins = 0;
[17:49:28.954]        // -> [canReadPins <= 0x00000000]
[17:49:28.954]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:49:28.964]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:49:28.964]        // -> [canReadPins <= 0x00000001]
[17:49:28.964]    </block>
[17:49:28.964]    <control if="" while="1" timeout="200" info="">
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.964]      // while-condition  =>  TRUE
[17:49:28.964]      // while "1"  (timeout="200")
[17:49:28.973]      // while-condition  =>  TRUE
[17:49:28.973]      // while "1"  (timeout="200")
[17:49:28.973]      // while  =>  TIMEOUT
[17:49:28.974]      // end while "1"
[17:49:28.974]    </control>
[17:49:28.974]    <control if="canReadPins" while="" timeout="0" info="">
[17:49:28.974]      // if-block "canReadPins"
[17:49:28.974]        // =>  TRUE
[17:49:28.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:49:28.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:49:28.975]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:49:28.975]        // while-condition  =>  FALSE
[17:49:28.975]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:49:28.975]      </control>
[17:49:28.975]      // end if-block "canReadPins"
[17:49:28.975]    </control>
[17:49:28.975]    <control if="!canReadPins" while="" timeout="0" info="">
[17:49:28.975]      // if-block "!canReadPins"
[17:49:28.975]        // =>  FALSE
[17:49:28.975]      // skip if-block "!canReadPins"
[17:49:28.975]    </control>
[17:49:28.975]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:49:28.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:49:28.975]        // =>  TRUE
[17:49:28.975]      <block atomic="false" info="">
[17:49:28.975]        WriteAP(0x00, 0x190008);
[17:49:28.980]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:49:28.980]        WriteAP(0xF0, 0x01);
[17:49:28.981]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:49:28.981]      </block>
[17:49:28.981]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:49:28.981]    </control>
[17:49:28.984]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:49:28.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:49:28.984]        // =>  FALSE
[17:49:28.984]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:49:28.984]    </control>
[17:49:28.984]    <block atomic="false" info="">
[17:49:28.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:49:28.984]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:49:28.984]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:49:28.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:49:28.989]      __ap = 0; //lets make sure we reset the access point selection
[17:49:28.989]        // -> [__ap <= 0x00000000]
[17:49:28.989]    </block>
[17:49:28.989]  </sequence>
[17:49:28.989]  
[17:49:29.007]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:49:29.007]  
[17:49:29.007]  <debugvars>
[17:49:29.007]    // Pre-defined
[17:49:29.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:29.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:29.007]    __dp=0x00000000
[17:49:29.007]    __ap=0x00000000
[17:49:29.007]    __traceout=0x00000000      (Trace Disabled)
[17:49:29.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:29.007]    __FlashAddr=0x00000000
[17:49:29.007]    __FlashLen=0x00000000
[17:49:29.007]    __FlashArg=0x00000000
[17:49:29.007]    __FlashOp=0x00000000
[17:49:29.007]    __Result=0x00000000
[17:49:29.007]  </debugvars>
[17:49:29.007]  
[17:49:29.007]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:49:29.007]    <block atomic="false" info="">
[17:49:29.007]      __var deviceID = 0;
[17:49:29.007]        // -> [deviceID <= 0x00000000]
[17:49:29.007]      __var version = 0;
[17:49:29.007]        // -> [version <= 0x00000000]
[17:49:29.007]      __var partNum = 0;
[17:49:29.007]        // -> [partNum <= 0x00000000]
[17:49:29.007]      __var manuf = 0;
[17:49:29.007]        // -> [manuf <= 0x00000000]
[17:49:29.007]      __var isMSPM0G1X0X_G3X0X = 0;
[17:49:29.013]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:49:29.013]      __var isProduction = 0;
[17:49:29.013]        // -> [isProduction <= 0x00000000]
[17:49:29.013]      __var continueId = 0;
[17:49:29.013]        // -> [continueId <= 0x00000000]
[17:49:29.013]      deviceID =   Read32(0x41C40004);
[17:49:29.015]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:49:29.015]        // -> [deviceID <= 0x2BB8802F]
[17:49:29.015]      version = deviceID >> 28;
[17:49:29.015]        // -> [version <= 0x00000002]
[17:49:29.015]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:49:29.015]        // -> [partNum <= 0x0000BB88]
[17:49:29.015]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:49:29.015]        // -> [manuf <= 0x00000017]
[17:49:29.015]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:49:29.015]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:49:29.015]      isProduction = (version > 0);
[17:49:29.015]        // -> [isProduction <= 0x00000001]
[17:49:29.015]    </block>
[17:49:29.015]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:49:29.015]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:49:29.015]        // =>  FALSE
[17:49:29.015]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:49:29.015]    </control>
[17:49:29.015]    <control if="continueId == 4" while="" timeout="0" info="">
[17:49:29.015]      // if-block "continueId == 4"
[17:49:29.015]        // =>  FALSE
[17:49:29.015]      // skip if-block "continueId == 4"
[17:49:29.015]    </control>
[17:49:29.015]    <control if="!isProduction" while="" timeout="0" info="">
[17:49:29.015]      // if-block "!isProduction"
[17:49:29.020]        // =>  FALSE
[17:49:29.020]      // skip if-block "!isProduction"
[17:49:29.020]    </control>
[17:49:29.020]  </sequence>
[17:49:29.020]  
[17:49:51.922]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:49:51.922]  
[17:49:51.930]  <debugvars>
[17:49:51.930]    // Pre-defined
[17:49:51.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:51.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:51.930]    __dp=0x00000000
[17:49:51.930]    __ap=0x00000000
[17:49:51.930]    __traceout=0x00000000      (Trace Disabled)
[17:49:51.930]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:51.930]    __FlashAddr=0x00000000
[17:49:51.930]    __FlashLen=0x00000000
[17:49:51.932]    __FlashArg=0x00000000
[17:49:51.932]    __FlashOp=0x00000000
[17:49:51.932]    __Result=0x00000000
[17:49:51.932]  </debugvars>
[17:49:51.932]  
[17:49:51.932]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:49:51.932]    <block atomic="false" info="">
[17:49:51.932]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:49:51.932]        // -> [isSWJ <= 0x00000001]
[17:49:51.932]      __var hasDormant = __protocol & 0x00020000;
[17:49:51.932]        // -> [hasDormant <= 0x00000000]
[17:49:51.932]      __var protType   = __protocol & 0x0000FFFF;
[17:49:51.932]        // -> [protType <= 0x00000002]
[17:49:51.932]    </block>
[17:49:51.932]    <control if="protType == 1" while="" timeout="0" info="">
[17:49:51.932]      // if-block "protType == 1"
[17:49:51.932]        // =>  FALSE
[17:49:51.932]      // skip if-block "protType == 1"
[17:49:51.932]    </control>
[17:49:51.932]    <control if="protType == 2" while="" timeout="0" info="">
[17:49:51.932]      // if-block "protType == 2"
[17:49:51.932]        // =>  TRUE
[17:49:51.932]      <control if="isSWJ" while="" timeout="0" info="">
[17:49:51.932]        // if-block "isSWJ"
[17:49:51.932]          // =>  TRUE
[17:49:51.935]        <control if="hasDormant" while="" timeout="0" info="">
[17:49:51.935]          // if-block "hasDormant"
[17:49:51.935]            // =>  FALSE
[17:49:51.935]          // skip if-block "hasDormant"
[17:49:51.935]        </control>
[17:49:51.935]        <control if="!hasDormant" while="" timeout="0" info="">
[17:49:51.935]          // if-block "!hasDormant"
[17:49:51.935]            // =>  TRUE
[17:49:51.935]          <block atomic="false" info="">
[17:49:51.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:49:51.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:51.935]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:49:51.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:49:51.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:49:51.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:51.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:49:51.941]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:49:51.941]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:49:51.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:49:51.941]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:49:51.945]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:49:51.945]          </block>
[17:49:51.945]          // end if-block "!hasDormant"
[17:49:51.945]        </control>
[17:49:51.945]        // end if-block "isSWJ"
[17:49:51.945]      </control>
[17:49:51.945]      <control if="!isSWJ" while="" timeout="0" info="">
[17:49:51.945]        // if-block "!isSWJ"
[17:49:51.945]          // =>  FALSE
[17:49:51.945]        // skip if-block "!isSWJ"
[17:49:51.945]      </control>
[17:49:51.945]      <block atomic="false" info="">
[17:49:51.945]        ReadDP(0x0);
[17:49:51.951]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:49:51.951]      </block>
[17:49:51.951]      // end if-block "protType == 2"
[17:49:51.951]    </control>
[17:49:51.951]  </sequence>
[17:49:51.951]  
[17:49:51.952]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:49:51.952]  
[17:49:51.952]  <debugvars>
[17:49:51.952]    // Pre-defined
[17:49:51.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:51.955]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:51.955]    __dp=0x00000000
[17:49:51.955]    __ap=0x00000000
[17:49:51.955]    __traceout=0x00000000      (Trace Disabled)
[17:49:51.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:51.955]    __FlashAddr=0x00000000
[17:49:51.955]    __FlashLen=0x00000000
[17:49:51.955]    __FlashArg=0x00000000
[17:49:51.955]    __FlashOp=0x00000000
[17:49:51.955]    __Result=0x00000000
[17:49:51.955]  </debugvars>
[17:49:51.955]  
[17:49:51.955]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:49:51.955]    <block atomic="false" info="">
[17:49:51.955]      __var SW_DP_ABORT       = 0x0;
[17:49:51.955]        // -> [SW_DP_ABORT <= 0x00000000]
[17:49:51.955]      __var DP_CTRL_STAT      = 0x4;
[17:49:51.955]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:49:51.955]      __var DP_SELECT         = 0x8;
[17:49:51.955]        // -> [DP_SELECT <= 0x00000008]
[17:49:51.955]      __var powered_down      = 0;
[17:49:51.955]        // -> [powered_down <= 0x00000000]
[17:49:51.955]      WriteDP(DP_SELECT, 0x00000000);
[17:49:51.955]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:49:51.955]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:49:51.955]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:49:51.955]        // -> [powered_down <= 0x00000001]
[17:49:51.955]    </block>
[17:49:51.955]    <control if="powered_down" while="" timeout="0" info="">
[17:49:51.955]      // if-block "powered_down"
[17:49:51.955]        // =>  TRUE
[17:49:51.955]      <block atomic="false" info="">
[17:49:51.961]        Message(0, "Debug/System power-up request sent");
[17:49:51.961]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:49:51.965]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:49:51.965]      </block>
[17:49:51.965]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:49:51.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:49:51.965]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:49:51.965]        // while-condition  =>  FALSE
[17:49:51.965]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:49:51.965]      </control>
[17:49:51.965]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:49:51.965]        // if-block "(__protocol & 0xFFFF) == 1"
[17:49:51.965]          // =>  FALSE
[17:49:51.965]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:49:51.965]      </control>
[17:49:51.965]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:49:51.965]        // if-block "(__protocol & 0xFFFF) == 2"
[17:49:51.965]          // =>  TRUE
[17:49:51.965]        <block atomic="false" info="">
[17:49:51.965]          Message(0, "executing SWD power up");
[17:49:51.965]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:49:51.972]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:49:51.972]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:49:51.973]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:49:51.973]        </block>
[17:49:51.973]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:49:51.973]      </control>
[17:49:51.975]      // end if-block "powered_down"
[17:49:51.975]    </control>
[17:49:51.975]    <block atomic="false" info="">
[17:49:51.975]      __var DEBUG_PORT_VAL    = 0;
[17:49:51.975]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:49:51.975]      __var ACCESS_POINT_VAL  = 0;
[17:49:51.975]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:49:51.975]      __ap = 1; 
[17:49:51.975]        // -> [__ap <= 0x00000001]
[17:49:51.975]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:49:51.975]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:49:51.975]      __ap = 4;
[17:49:51.975]        // -> [__ap <= 0x00000004]
[17:49:51.975]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:49:51.982]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:49:51.982]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:49:51.982]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:49:51.985]    </block>
[17:49:51.985]    <block atomic="false" info="">
[17:49:51.985]      __var nReset = 0x80;
[17:49:51.985]        // -> [nReset <= 0x00000080]
[17:49:51.985]      __var canReadPins = 0;
[17:49:51.985]        // -> [canReadPins <= 0x00000000]
[17:49:51.985]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:49:51.985]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:49:51.985]        // -> [canReadPins <= 0x00000001]
[17:49:51.985]    </block>
[17:49:51.985]    <control if="" while="1" timeout="200" info="">
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.985]      // while-condition  =>  TRUE
[17:49:51.985]      // while "1"  (timeout="200")
[17:49:51.992]      // while-condition  =>  TRUE
[17:49:51.992]      // while "1"  (timeout="200")
[17:49:51.992]      // while  =>  TIMEOUT
[17:49:51.992]      // end while "1"
[17:49:51.992]    </control>
[17:49:51.992]    <control if="canReadPins" while="" timeout="0" info="">
[17:49:51.992]      // if-block "canReadPins"
[17:49:51.992]        // =>  TRUE
[17:49:51.992]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:49:51.992]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:49:51.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:49:51.995]        // while-condition  =>  FALSE
[17:49:51.995]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:49:51.995]      </control>
[17:49:51.995]      // end if-block "canReadPins"
[17:49:51.995]    </control>
[17:49:51.995]    <control if="!canReadPins" while="" timeout="0" info="">
[17:49:51.995]      // if-block "!canReadPins"
[17:49:51.995]        // =>  FALSE
[17:49:51.995]      // skip if-block "!canReadPins"
[17:49:51.995]    </control>
[17:49:51.995]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:49:51.995]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:49:51.995]        // =>  TRUE
[17:49:51.995]      <block atomic="false" info="">
[17:49:51.995]        WriteAP(0x00, 0x190008);
[17:49:51.995]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:49:51.995]        WriteAP(0xF0, 0x01);
[17:49:51.995]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:49:51.995]      </block>
[17:49:51.995]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:49:51.995]    </control>
[17:49:51.995]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:49:51.995]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:49:52.002]        // =>  FALSE
[17:49:52.002]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:49:52.002]    </control>
[17:49:52.002]    <block atomic="false" info="">
[17:49:52.002]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:49:52.005]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:49:52.005]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:49:52.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:49:52.005]      __ap = 0; //lets make sure we reset the access point selection
[17:49:52.005]        // -> [__ap <= 0x00000000]
[17:49:52.005]    </block>
[17:49:52.005]  </sequence>
[17:49:52.005]  
[17:49:52.029]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:49:52.029]  
[17:49:52.029]  <debugvars>
[17:49:52.029]    // Pre-defined
[17:49:52.029]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:49:52.029]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:49:52.029]    __dp=0x00000000
[17:49:52.029]    __ap=0x00000000
[17:49:52.029]    __traceout=0x00000000      (Trace Disabled)
[17:49:52.029]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:49:52.029]    __FlashAddr=0x00000000
[17:49:52.029]    __FlashLen=0x00000000
[17:49:52.029]    __FlashArg=0x00000000
[17:49:52.030]    __FlashOp=0x00000000
[17:49:52.030]    __Result=0x00000000
[17:49:52.030]  </debugvars>
[17:49:52.030]  
[17:49:52.030]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:49:52.030]    <block atomic="false" info="">
[17:49:52.030]      __var deviceID = 0;
[17:49:52.030]        // -> [deviceID <= 0x00000000]
[17:49:52.030]      __var version = 0;
[17:49:52.030]        // -> [version <= 0x00000000]
[17:49:52.030]      __var partNum = 0;
[17:49:52.030]        // -> [partNum <= 0x00000000]
[17:49:52.030]      __var manuf = 0;
[17:49:52.032]        // -> [manuf <= 0x00000000]
[17:49:52.032]      __var isMSPM0G1X0X_G3X0X = 0;
[17:49:52.032]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:49:52.032]      __var isProduction = 0;
[17:49:52.032]        // -> [isProduction <= 0x00000000]
[17:49:52.032]      __var continueId = 0;
[17:49:52.032]        // -> [continueId <= 0x00000000]
[17:49:52.032]      deviceID =   Read32(0x41C40004);
[17:49:52.035]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:49:52.035]        // -> [deviceID <= 0x2BB8802F]
[17:49:52.035]      version = deviceID >> 28;
[17:49:52.037]        // -> [version <= 0x00000002]
[17:49:52.037]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:49:52.037]        // -> [partNum <= 0x0000BB88]
[17:49:52.037]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:49:52.037]        // -> [manuf <= 0x00000017]
[17:49:52.037]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:49:52.037]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:49:52.037]      isProduction = (version > 0);
[17:49:52.037]        // -> [isProduction <= 0x00000001]
[17:49:52.037]    </block>
[17:49:52.037]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:49:52.037]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:49:52.037]        // =>  FALSE
[17:49:52.037]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:49:52.037]    </control>
[17:49:52.037]    <control if="continueId == 4" while="" timeout="0" info="">
[17:49:52.037]      // if-block "continueId == 4"
[17:49:52.037]        // =>  FALSE
[17:49:52.037]      // skip if-block "continueId == 4"
[17:49:52.040]    </control>
[17:49:52.040]    <control if="!isProduction" while="" timeout="0" info="">
[17:49:52.040]      // if-block "!isProduction"
[17:49:52.040]        // =>  FALSE
[17:49:52.040]      // skip if-block "!isProduction"
[17:49:52.040]    </control>
[17:49:52.040]  </sequence>
[17:49:52.040]  
[17:50:42.997]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:50:42.997]  
[17:50:43.006]  <debugvars>
[17:50:43.006]    // Pre-defined
[17:50:43.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:50:43.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:50:43.006]    __dp=0x00000000
[17:50:43.006]    __ap=0x00000000
[17:50:43.006]    __traceout=0x00000000      (Trace Disabled)
[17:50:43.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:50:43.006]    __FlashAddr=0x00000000
[17:50:43.007]    __FlashLen=0x00000000
[17:50:43.007]    __FlashArg=0x00000000
[17:50:43.007]    __FlashOp=0x00000000
[17:50:43.007]    __Result=0x00000000
[17:50:43.007]  </debugvars>
[17:50:43.007]  
[17:50:43.008]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:50:43.008]    <block atomic="false" info="">
[17:50:43.008]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:50:43.008]        // -> [isSWJ <= 0x00000001]
[17:50:43.008]      __var hasDormant = __protocol & 0x00020000;
[17:50:43.009]        // -> [hasDormant <= 0x00000000]
[17:50:43.009]      __var protType   = __protocol & 0x0000FFFF;
[17:50:43.009]        // -> [protType <= 0x00000002]
[17:50:43.009]    </block>
[17:50:43.009]    <control if="protType == 1" while="" timeout="0" info="">
[17:50:43.009]      // if-block "protType == 1"
[17:50:43.009]        // =>  FALSE
[17:50:43.009]      // skip if-block "protType == 1"
[17:50:43.009]    </control>
[17:50:43.009]    <control if="protType == 2" while="" timeout="0" info="">
[17:50:43.009]      // if-block "protType == 2"
[17:50:43.009]        // =>  TRUE
[17:50:43.011]      <control if="isSWJ" while="" timeout="0" info="">
[17:50:43.011]        // if-block "isSWJ"
[17:50:43.011]          // =>  TRUE
[17:50:43.011]        <control if="hasDormant" while="" timeout="0" info="">
[17:50:43.011]          // if-block "hasDormant"
[17:50:43.011]            // =>  FALSE
[17:50:43.011]          // skip if-block "hasDormant"
[17:50:43.011]        </control>
[17:50:43.012]        <control if="!hasDormant" while="" timeout="0" info="">
[17:50:43.012]          // if-block "!hasDormant"
[17:50:43.012]            // =>  TRUE
[17:50:43.012]          <block atomic="false" info="">
[17:50:43.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:50:43.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:50:43.013]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:50:43.013]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:50:43.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:50:43.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:50:43.019]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:50:43.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:50:43.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:50:43.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:50:43.021]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:50:43.021]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:50:43.021]          </block>
[17:50:43.021]          // end if-block "!hasDormant"
[17:50:43.021]        </control>
[17:50:43.021]        // end if-block "isSWJ"
[17:50:43.023]      </control>
[17:50:43.023]      <control if="!isSWJ" while="" timeout="0" info="">
[17:50:43.023]        // if-block "!isSWJ"
[17:50:43.023]          // =>  FALSE
[17:50:43.023]        // skip if-block "!isSWJ"
[17:50:43.023]      </control>
[17:50:43.023]      <block atomic="false" info="">
[17:50:43.023]        ReadDP(0x0);
[17:50:43.023]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:50:43.023]      </block>
[17:50:43.028]      // end if-block "protType == 2"
[17:50:43.028]    </control>
[17:50:43.028]  </sequence>
[17:50:43.029]  
[17:50:43.031]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:50:43.031]  
[17:50:43.031]  <debugvars>
[17:50:43.031]    // Pre-defined
[17:50:43.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:50:43.031]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:50:43.031]    __dp=0x00000000
[17:50:43.031]    __ap=0x00000000
[17:50:43.031]    __traceout=0x00000000      (Trace Disabled)
[17:50:43.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:50:43.031]    __FlashAddr=0x00000000
[17:50:43.031]    __FlashLen=0x00000000
[17:50:43.031]    __FlashArg=0x00000000
[17:50:43.031]    __FlashOp=0x00000000
[17:50:43.031]    __Result=0x00000000
[17:50:43.031]  </debugvars>
[17:50:43.031]  
[17:50:43.031]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:50:43.037]    <block atomic="false" info="">
[17:50:43.037]      __var SW_DP_ABORT       = 0x0;
[17:50:43.037]        // -> [SW_DP_ABORT <= 0x00000000]
[17:50:43.037]      __var DP_CTRL_STAT      = 0x4;
[17:50:43.037]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:50:43.037]      __var DP_SELECT         = 0x8;
[17:50:43.037]        // -> [DP_SELECT <= 0x00000008]
[17:50:43.037]      __var powered_down      = 0;
[17:50:43.037]        // -> [powered_down <= 0x00000000]
[17:50:43.037]      WriteDP(DP_SELECT, 0x00000000);
[17:50:43.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:50:43.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:50:43.041]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:50:43.041]        // -> [powered_down <= 0x00000001]
[17:50:43.041]    </block>
[17:50:43.041]    <control if="powered_down" while="" timeout="0" info="">
[17:50:43.041]      // if-block "powered_down"
[17:50:43.041]        // =>  TRUE
[17:50:43.041]      <block atomic="false" info="">
[17:50:43.041]        Message(0, "Debug/System power-up request sent");
[17:50:43.045]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:50:43.045]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:50:43.045]      </block>
[17:50:43.045]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:50:43.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:50:43.049]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:50:43.049]        // while-condition  =>  FALSE
[17:50:43.049]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:50:43.050]      </control>
[17:50:43.050]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:50:43.050]        // if-block "(__protocol & 0xFFFF) == 1"
[17:50:43.050]          // =>  FALSE
[17:50:43.050]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:50:43.050]      </control>
[17:50:43.050]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:50:43.050]        // if-block "(__protocol & 0xFFFF) == 2"
[17:50:43.050]          // =>  TRUE
[17:50:43.051]        <block atomic="false" info="">
[17:50:43.051]          Message(0, "executing SWD power up");
[17:50:43.053]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:50:43.055]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:50:43.056]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:50:43.056]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:50:43.056]        </block>
[17:50:43.056]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:50:43.056]      </control>
[17:50:43.056]      // end if-block "powered_down"
[17:50:43.058]    </control>
[17:50:43.058]    <block atomic="false" info="">
[17:50:43.058]      __var DEBUG_PORT_VAL    = 0;
[17:50:43.058]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:50:43.058]      __var ACCESS_POINT_VAL  = 0;
[17:50:43.058]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:50:43.058]      __ap = 1; 
[17:50:43.058]        // -> [__ap <= 0x00000001]
[17:50:43.058]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:50:43.061]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:50:43.061]      __ap = 4;
[17:50:43.061]        // -> [__ap <= 0x00000004]
[17:50:43.061]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:50:43.063]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:50:43.063]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:50:43.063]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:50:43.063]    </block>
[17:50:43.063]    <block atomic="false" info="">
[17:50:43.063]      __var nReset = 0x80;
[17:50:43.063]        // -> [nReset <= 0x00000080]
[17:50:43.063]      __var canReadPins = 0;
[17:50:43.069]        // -> [canReadPins <= 0x00000000]
[17:50:43.069]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:50:43.070]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:50:43.070]        // -> [canReadPins <= 0x00000001]
[17:50:43.070]    </block>
[17:50:43.070]    <control if="" while="1" timeout="200" info="">
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.070]      // while-condition  =>  TRUE
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.070]      // while-condition  =>  TRUE
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.070]      // while-condition  =>  TRUE
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.070]      // while-condition  =>  TRUE
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.070]      // while-condition  =>  TRUE
[17:50:43.070]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.072]      // while-condition  =>  TRUE
[17:50:43.072]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.073]      // while "1"  (timeout="200")
[17:50:43.073]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.075]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.075]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.075]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.075]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.075]      // while-condition  =>  TRUE
[17:50:43.075]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.076]      // while-condition  =>  TRUE
[17:50:43.076]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.079]      // while "1"  (timeout="200")
[17:50:43.079]      // while-condition  =>  TRUE
[17:50:43.080]      // while "1"  (timeout="200")
[17:50:43.080]      // while-condition  =>  TRUE
[17:50:43.080]      // while "1"  (timeout="200")
[17:50:43.080]      // while-condition  =>  TRUE
[17:50:43.080]      // while "1"  (timeout="200")
[17:50:43.080]      // while-condition  =>  TRUE
[17:50:43.080]      // while "1"  (timeout="200")
[17:50:43.081]      // while-condition  =>  TRUE
[17:50:43.081]      // while "1"  (timeout="200")
[17:50:43.081]      // while  =>  TIMEOUT
[17:50:43.081]      // end while "1"
[17:50:43.081]    </control>
[17:50:43.081]    <control if="canReadPins" while="" timeout="0" info="">
[17:50:43.081]      // if-block "canReadPins"
[17:50:43.081]        // =>  TRUE
[17:50:43.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:50:43.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:50:43.088]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:50:43.088]        // while-condition  =>  FALSE
[17:50:43.088]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:50:43.088]      </control>
[17:50:43.088]      // end if-block "canReadPins"
[17:50:43.088]    </control>
[17:50:43.088]    <control if="!canReadPins" while="" timeout="0" info="">
[17:50:43.088]      // if-block "!canReadPins"
[17:50:43.088]        // =>  FALSE
[17:50:43.090]      // skip if-block "!canReadPins"
[17:50:43.090]    </control>
[17:50:43.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:50:43.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:50:43.090]        // =>  TRUE
[17:50:43.090]      <block atomic="false" info="">
[17:50:43.090]        WriteAP(0x00, 0x190008);
[17:50:43.090]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:50:43.093]        WriteAP(0xF0, 0x01);
[17:50:43.096]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:50:43.096]      </block>
[17:50:43.096]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:50:43.096]    </control>
[17:50:43.096]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:50:43.096]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:50:43.096]        // =>  FALSE
[17:50:43.096]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:50:43.096]    </control>
[17:50:43.096]    <block atomic="false" info="">
[17:50:43.096]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:50:43.099]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:50:43.099]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:50:43.099]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:50:43.102]      __ap = 0; //lets make sure we reset the access point selection
[17:50:43.102]        // -> [__ap <= 0x00000000]
[17:50:43.102]    </block>
[17:50:43.102]  </sequence>
[17:50:43.102]  
[17:50:43.124]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:50:43.124]  
[17:50:43.124]  <debugvars>
[17:50:43.124]    // Pre-defined
[17:50:43.124]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:50:43.124]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:50:43.124]    __dp=0x00000000
[17:50:43.124]    __ap=0x00000000
[17:50:43.124]    __traceout=0x00000000      (Trace Disabled)
[17:50:43.124]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:50:43.125]    __FlashAddr=0x00000000
[17:50:43.125]    __FlashLen=0x00000000
[17:50:43.125]    __FlashArg=0x00000000
[17:50:43.125]    __FlashOp=0x00000000
[17:50:43.125]    __Result=0x00000000
[17:50:43.125]  </debugvars>
[17:50:43.125]  
[17:50:43.125]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:50:43.125]    <block atomic="false" info="">
[17:50:43.125]      __var deviceID = 0;
[17:50:43.125]        // -> [deviceID <= 0x00000000]
[17:50:43.125]      __var version = 0;
[17:50:43.125]        // -> [version <= 0x00000000]
[17:50:43.125]      __var partNum = 0;
[17:50:43.125]        // -> [partNum <= 0x00000000]
[17:50:43.125]      __var manuf = 0;
[17:50:43.125]        // -> [manuf <= 0x00000000]
[17:50:43.125]      __var isMSPM0G1X0X_G3X0X = 0;
[17:50:43.125]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:50:43.125]      __var isProduction = 0;
[17:50:43.127]        // -> [isProduction <= 0x00000000]
[17:50:43.127]      __var continueId = 0;
[17:50:43.127]        // -> [continueId <= 0x00000000]
[17:50:43.127]      deviceID =   Read32(0x41C40004);
[17:50:43.131]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:50:43.131]        // -> [deviceID <= 0x2BB8802F]
[17:50:43.131]      version = deviceID >> 28;
[17:50:43.131]        // -> [version <= 0x00000002]
[17:50:43.131]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:50:43.131]        // -> [partNum <= 0x0000BB88]
[17:50:43.131]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:50:43.131]        // -> [manuf <= 0x00000017]
[17:50:43.131]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:50:43.133]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:50:43.133]      isProduction = (version > 0);
[17:50:43.133]        // -> [isProduction <= 0x00000001]
[17:50:43.133]    </block>
[17:50:43.133]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:50:43.133]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:50:43.133]        // =>  FALSE
[17:50:43.133]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:50:43.133]    </control>
[17:50:43.133]    <control if="continueId == 4" while="" timeout="0" info="">
[17:50:43.134]      // if-block "continueId == 4"
[17:50:43.134]        // =>  FALSE
[17:50:43.134]      // skip if-block "continueId == 4"
[17:50:43.134]    </control>
[17:50:43.134]    <control if="!isProduction" while="" timeout="0" info="">
[17:50:43.134]      // if-block "!isProduction"
[17:50:43.134]        // =>  FALSE
[17:50:43.134]      // skip if-block "!isProduction"
[17:50:43.134]    </control>
[17:50:43.134]  </sequence>
[17:50:43.135]  
[17:51:04.103]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:51:04.103]  
[17:51:04.111]  <debugvars>
[17:51:04.111]    // Pre-defined
[17:51:04.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:04.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:04.111]    __dp=0x00000000
[17:51:04.111]    __ap=0x00000000
[17:51:04.111]    __traceout=0x00000000      (Trace Disabled)
[17:51:04.111]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:04.111]    __FlashAddr=0x00000000
[17:51:04.111]    __FlashLen=0x00000000
[17:51:04.111]    __FlashArg=0x00000000
[17:51:04.111]    __FlashOp=0x00000000
[17:51:04.111]    __Result=0x00000000
[17:51:04.111]  </debugvars>
[17:51:04.111]  
[17:51:04.111]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:51:04.111]    <block atomic="false" info="">
[17:51:04.111]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:51:04.111]        // -> [isSWJ <= 0x00000001]
[17:51:04.111]      __var hasDormant = __protocol & 0x00020000;
[17:51:04.111]        // -> [hasDormant <= 0x00000000]
[17:51:04.114]      __var protType   = __protocol & 0x0000FFFF;
[17:51:04.114]        // -> [protType <= 0x00000002]
[17:51:04.114]    </block>
[17:51:04.114]    <control if="protType == 1" while="" timeout="0" info="">
[17:51:04.114]      // if-block "protType == 1"
[17:51:04.114]        // =>  FALSE
[17:51:04.114]      // skip if-block "protType == 1"
[17:51:04.114]    </control>
[17:51:04.114]    <control if="protType == 2" while="" timeout="0" info="">
[17:51:04.114]      // if-block "protType == 2"
[17:51:04.114]        // =>  TRUE
[17:51:04.114]      <control if="isSWJ" while="" timeout="0" info="">
[17:51:04.114]        // if-block "isSWJ"
[17:51:04.114]          // =>  TRUE
[17:51:04.114]        <control if="hasDormant" while="" timeout="0" info="">
[17:51:04.114]          // if-block "hasDormant"
[17:51:04.114]            // =>  FALSE
[17:51:04.114]          // skip if-block "hasDormant"
[17:51:04.114]        </control>
[17:51:04.114]        <control if="!hasDormant" while="" timeout="0" info="">
[17:51:04.114]          // if-block "!hasDormant"
[17:51:04.114]            // =>  TRUE
[17:51:04.114]          <block atomic="false" info="">
[17:51:04.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:51:04.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:04.122]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:51:04.124]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:51:04.124]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:51:04.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:04.127]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:51:04.127]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:51:04.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:51:04.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:04.127]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:51:04.134]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:51:04.134]          </block>
[17:51:04.134]          // end if-block "!hasDormant"
[17:51:04.134]        </control>
[17:51:04.134]        // end if-block "isSWJ"
[17:51:04.134]      </control>
[17:51:04.134]      <control if="!isSWJ" while="" timeout="0" info="">
[17:51:04.134]        // if-block "!isSWJ"
[17:51:04.134]          // =>  FALSE
[17:51:04.134]        // skip if-block "!isSWJ"
[17:51:04.134]      </control>
[17:51:04.134]      <block atomic="false" info="">
[17:51:04.134]        ReadDP(0x0);
[17:51:04.137]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:51:04.137]      </block>
[17:51:04.137]      // end if-block "protType == 2"
[17:51:04.137]    </control>
[17:51:04.137]  </sequence>
[17:51:04.137]  
[17:51:04.148]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:51:04.148]  
[17:51:04.148]  <debugvars>
[17:51:04.148]    // Pre-defined
[17:51:04.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:04.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:04.148]    __dp=0x00000000
[17:51:04.148]    __ap=0x00000000
[17:51:04.148]    __traceout=0x00000000      (Trace Disabled)
[17:51:04.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:04.148]    __FlashAddr=0x00000000
[17:51:04.148]    __FlashLen=0x00000000
[17:51:04.148]    __FlashArg=0x00000000
[17:51:04.148]    __FlashOp=0x00000000
[17:51:04.148]    __Result=0x00000000
[17:51:04.148]  </debugvars>
[17:51:04.148]  
[17:51:04.148]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:51:04.148]    <block atomic="false" info="">
[17:51:04.148]      __var SW_DP_ABORT       = 0x0;
[17:51:04.148]        // -> [SW_DP_ABORT <= 0x00000000]
[17:51:04.148]      __var DP_CTRL_STAT      = 0x4;
[17:51:04.148]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:51:04.148]      __var DP_SELECT         = 0x8;
[17:51:04.148]        // -> [DP_SELECT <= 0x00000008]
[17:51:04.148]      __var powered_down      = 0;
[17:51:04.153]        // -> [powered_down <= 0x00000000]
[17:51:04.153]      WriteDP(DP_SELECT, 0x00000000);
[17:51:04.157]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:51:04.157]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:51:04.157]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:51:04.157]        // -> [powered_down <= 0x00000001]
[17:51:04.157]    </block>
[17:51:04.157]    <control if="powered_down" while="" timeout="0" info="">
[17:51:04.157]      // if-block "powered_down"
[17:51:04.157]        // =>  TRUE
[17:51:04.157]      <block atomic="false" info="">
[17:51:04.157]        Message(0, "Debug/System power-up request sent");
[17:51:04.163]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:51:04.167]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:51:04.167]      </block>
[17:51:04.167]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:51:04.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:51:04.167]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:51:04.167]        // while-condition  =>  FALSE
[17:51:04.167]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:51:04.167]      </control>
[17:51:04.167]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:51:04.173]        // if-block "(__protocol & 0xFFFF) == 1"
[17:51:04.173]          // =>  FALSE
[17:51:04.173]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:51:04.173]      </control>
[17:51:04.173]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:51:04.173]        // if-block "(__protocol & 0xFFFF) == 2"
[17:51:04.173]          // =>  TRUE
[17:51:04.173]        <block atomic="false" info="">
[17:51:04.173]          Message(0, "executing SWD power up");
[17:51:04.175]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:51:04.183]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:51:04.184]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:51:04.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:51:04.190]        </block>
[17:51:04.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:51:04.190]      </control>
[17:51:04.190]      // end if-block "powered_down"
[17:51:04.190]    </control>
[17:51:04.190]    <block atomic="false" info="">
[17:51:04.191]      __var DEBUG_PORT_VAL    = 0;
[17:51:04.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:51:04.191]      __var ACCESS_POINT_VAL  = 0;
[17:51:04.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:51:04.191]      __ap = 1; 
[17:51:04.191]        // -> [__ap <= 0x00000001]
[17:51:04.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:51:04.197]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:51:04.197]      __ap = 4;
[17:51:04.197]        // -> [__ap <= 0x00000004]
[17:51:04.197]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:04.202]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:51:04.202]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:51:04.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:04.204]    </block>
[17:51:04.204]    <block atomic="false" info="">
[17:51:04.204]      __var nReset = 0x80;
[17:51:04.204]        // -> [nReset <= 0x00000080]
[17:51:04.204]      __var canReadPins = 0;
[17:51:04.204]        // -> [canReadPins <= 0x00000000]
[17:51:04.205]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:51:04.206]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:51:04.206]        // -> [canReadPins <= 0x00000001]
[17:51:04.206]    </block>
[17:51:04.206]    <control if="" while="1" timeout="200" info="">
[17:51:04.206]      // while "1"  (timeout="200")
[17:51:04.206]      // while-condition  =>  TRUE
[17:51:04.206]      // while "1"  (timeout="200")
[17:51:04.206]      // while-condition  =>  TRUE
[17:51:04.206]      // while "1"  (timeout="200")
[17:51:04.206]      // while-condition  =>  TRUE
[17:51:04.206]      // while "1"  (timeout="200")
[17:51:04.206]      // while-condition  =>  TRUE
[17:51:04.207]      // while "1"  (timeout="200")
[17:51:04.207]      // while-condition  =>  TRUE
[17:51:04.207]      // while "1"  (timeout="200")
[17:51:04.207]      // while-condition  =>  TRUE
[17:51:04.207]      // while "1"  (timeout="200")
[17:51:04.208]      // while-condition  =>  TRUE
[17:51:04.208]      // while "1"  (timeout="200")
[17:51:04.208]      // while-condition  =>  TRUE
[17:51:04.208]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.209]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.209]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.209]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.209]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.209]      // while "1"  (timeout="200")
[17:51:04.209]      // while-condition  =>  TRUE
[17:51:04.210]      // while "1"  (timeout="200")
[17:51:04.210]      // while-condition  =>  TRUE
[17:51:04.210]      // while "1"  (timeout="200")
[17:51:04.210]      // while-condition  =>  TRUE
[17:51:04.210]      // while "1"  (timeout="200")
[17:51:04.210]      // while-condition  =>  TRUE
[17:51:04.211]      // while "1"  (timeout="200")
[17:51:04.211]      // while-condition  =>  TRUE
[17:51:04.211]      // while "1"  (timeout="200")
[17:51:04.211]      // while-condition  =>  TRUE
[17:51:04.211]      // while "1"  (timeout="200")
[17:51:04.211]      // while-condition  =>  TRUE
[17:51:04.211]      // while "1"  (timeout="200")
[17:51:04.212]      // while-condition  =>  TRUE
[17:51:04.212]      // while "1"  (timeout="200")
[17:51:04.212]      // while-condition  =>  TRUE
[17:51:04.212]      // while "1"  (timeout="200")
[17:51:04.212]      // while-condition  =>  TRUE
[17:51:04.212]      // while "1"  (timeout="200")
[17:51:04.212]      // while-condition  =>  TRUE
[17:51:04.212]      // while "1"  (timeout="200")
[17:51:04.212]      // while-condition  =>  TRUE
[17:51:04.212]      // while "1"  (timeout="200")
[17:51:04.213]      // while-condition  =>  TRUE
[17:51:04.213]      // while "1"  (timeout="200")
[17:51:04.213]      // while-condition  =>  TRUE
[17:51:04.213]      // while "1"  (timeout="200")
[17:51:04.213]      // while-condition  =>  TRUE
[17:51:04.213]      // while "1"  (timeout="200")
[17:51:04.213]      // while-condition  =>  TRUE
[17:51:04.214]      // while "1"  (timeout="200")
[17:51:04.214]      // while-condition  =>  TRUE
[17:51:04.214]      // while "1"  (timeout="200")
[17:51:04.214]      // while-condition  =>  TRUE
[17:51:04.214]      // while "1"  (timeout="200")
[17:51:04.215]      // while-condition  =>  TRUE
[17:51:04.215]      // while "1"  (timeout="200")
[17:51:04.215]      // while-condition  =>  TRUE
[17:51:04.215]      // while "1"  (timeout="200")
[17:51:04.215]      // while-condition  =>  TRUE
[17:51:04.215]      // while "1"  (timeout="200")
[17:51:04.215]      // while-condition  =>  TRUE
[17:51:04.216]      // while "1"  (timeout="200")
[17:51:04.216]      // while-condition  =>  TRUE
[17:51:04.216]      // while "1"  (timeout="200")
[17:51:04.217]      // while-condition  =>  TRUE
[17:51:04.217]      // while "1"  (timeout="200")
[17:51:04.217]      // while-condition  =>  TRUE
[17:51:04.217]      // while "1"  (timeout="200")
[17:51:04.217]      // while-condition  =>  TRUE
[17:51:04.217]      // while "1"  (timeout="200")
[17:51:04.217]      // while-condition  =>  TRUE
[17:51:04.217]      // while "1"  (timeout="200")
[17:51:04.217]      // while-condition  =>  TRUE
[17:51:04.217]      // while "1"  (timeout="200")
[17:51:04.218]      // while-condition  =>  TRUE
[17:51:04.218]      // while "1"  (timeout="200")
[17:51:04.218]      // while-condition  =>  TRUE
[17:51:04.218]      // while "1"  (timeout="200")
[17:51:04.218]      // while-condition  =>  TRUE
[17:51:04.218]      // while "1"  (timeout="200")
[17:51:04.218]      // while-condition  =>  TRUE
[17:51:04.218]      // while "1"  (timeout="200")
[17:51:04.218]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.219]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.219]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.219]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.219]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.219]      // while-condition  =>  TRUE
[17:51:04.219]      // while "1"  (timeout="200")
[17:51:04.220]      // while-condition  =>  TRUE
[17:51:04.220]      // while "1"  (timeout="200")
[17:51:04.220]      // while-condition  =>  TRUE
[17:51:04.220]      // while "1"  (timeout="200")
[17:51:04.220]      // while-condition  =>  TRUE
[17:51:04.220]      // while "1"  (timeout="200")
[17:51:04.220]      // while-condition  =>  TRUE
[17:51:04.220]      // while "1"  (timeout="200")
[17:51:04.220]      // while-condition  =>  TRUE
[17:51:04.221]      // while "1"  (timeout="200")
[17:51:04.221]      // while-condition  =>  TRUE
[17:51:04.221]      // while "1"  (timeout="200")
[17:51:04.221]      // while-condition  =>  TRUE
[17:51:04.221]      // while "1"  (timeout="200")
[17:51:04.221]      // while-condition  =>  TRUE
[17:51:04.222]      // while "1"  (timeout="200")
[17:51:04.222]      // while  =>  TIMEOUT
[17:51:04.222]      // end while "1"
[17:51:04.222]    </control>
[17:51:04.222]    <control if="canReadPins" while="" timeout="0" info="">
[17:51:04.222]      // if-block "canReadPins"
[17:51:04.222]        // =>  TRUE
[17:51:04.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:51:04.223]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:51:04.224]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:51:04.225]        // while-condition  =>  FALSE
[17:51:04.225]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:51:04.225]      </control>
[17:51:04.225]      // end if-block "canReadPins"
[17:51:04.225]    </control>
[17:51:04.226]    <control if="!canReadPins" while="" timeout="0" info="">
[17:51:04.226]      // if-block "!canReadPins"
[17:51:04.226]        // =>  FALSE
[17:51:04.226]      // skip if-block "!canReadPins"
[17:51:04.226]    </control>
[17:51:04.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:51:04.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:04.226]        // =>  TRUE
[17:51:04.226]      <block atomic="false" info="">
[17:51:04.227]        WriteAP(0x00, 0x190008);
[17:51:04.228]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:04.228]        WriteAP(0xF0, 0x01);
[17:51:04.230]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:04.232]      </block>
[17:51:04.232]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:04.232]    </control>
[17:51:04.232]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:51:04.232]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:04.232]        // =>  FALSE
[17:51:04.232]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:04.232]    </control>
[17:51:04.232]    <block atomic="false" info="">
[17:51:04.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:04.235]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:51:04.235]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:51:04.235]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:04.238]      __ap = 0; //lets make sure we reset the access point selection
[17:51:04.238]        // -> [__ap <= 0x00000000]
[17:51:04.238]    </block>
[17:51:04.238]  </sequence>
[17:51:04.238]  
[17:51:04.278]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:51:04.278]  
[17:51:04.278]  <debugvars>
[17:51:04.278]    // Pre-defined
[17:51:04.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:04.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:04.279]    __dp=0x00000000
[17:51:04.279]    __ap=0x00000000
[17:51:04.279]    __traceout=0x00000000      (Trace Disabled)
[17:51:04.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:04.279]    __FlashAddr=0x00000000
[17:51:04.279]    __FlashLen=0x00000000
[17:51:04.279]    __FlashArg=0x00000000
[17:51:04.279]    __FlashOp=0x00000000
[17:51:04.279]    __Result=0x00000000
[17:51:04.279]  </debugvars>
[17:51:04.279]  
[17:51:04.279]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:51:04.279]    <block atomic="false" info="">
[17:51:04.279]      __var deviceID = 0;
[17:51:04.279]        // -> [deviceID <= 0x00000000]
[17:51:04.279]      __var version = 0;
[17:51:04.279]        // -> [version <= 0x00000000]
[17:51:04.279]      __var partNum = 0;
[17:51:04.279]        // -> [partNum <= 0x00000000]
[17:51:04.279]      __var manuf = 0;
[17:51:04.279]        // -> [manuf <= 0x00000000]
[17:51:04.279]      __var isMSPM0G1X0X_G3X0X = 0;
[17:51:04.279]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:51:04.279]      __var isProduction = 0;
[17:51:04.279]        // -> [isProduction <= 0x00000000]
[17:51:04.279]      __var continueId = 0;
[17:51:04.279]        // -> [continueId <= 0x00000000]
[17:51:04.279]      deviceID =   Read32(0x41C40004);
[17:51:04.287]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:51:04.287]        // -> [deviceID <= 0x2BB8802F]
[17:51:04.287]      version = deviceID >> 28;
[17:51:04.287]        // -> [version <= 0x00000002]
[17:51:04.287]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:51:04.287]        // -> [partNum <= 0x0000BB88]
[17:51:04.287]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:51:04.287]        // -> [manuf <= 0x00000017]
[17:51:04.287]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:51:04.287]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:51:04.287]      isProduction = (version > 0);
[17:51:04.287]        // -> [isProduction <= 0x00000001]
[17:51:04.287]    </block>
[17:51:04.287]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:51:04.287]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:51:04.291]        // =>  FALSE
[17:51:04.291]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:51:04.291]    </control>
[17:51:04.291]    <control if="continueId == 4" while="" timeout="0" info="">
[17:51:04.291]      // if-block "continueId == 4"
[17:51:04.291]        // =>  FALSE
[17:51:04.291]      // skip if-block "continueId == 4"
[17:51:04.291]    </control>
[17:51:04.291]    <control if="!isProduction" while="" timeout="0" info="">
[17:51:04.291]      // if-block "!isProduction"
[17:51:04.291]        // =>  FALSE
[17:51:04.291]      // skip if-block "!isProduction"
[17:51:04.291]    </control>
[17:51:04.291]  </sequence>
[17:51:04.291]  
[17:51:22.809]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:51:22.809]  
[17:51:22.809]  <debugvars>
[17:51:22.809]    // Pre-defined
[17:51:22.809]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:22.809]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:22.809]    __dp=0x00000000
[17:51:22.809]    __ap=0x00000000
[17:51:22.809]    __traceout=0x00000000      (Trace Disabled)
[17:51:22.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:22.809]    __FlashAddr=0x00000000
[17:51:22.809]    __FlashLen=0x00000000
[17:51:22.809]    __FlashArg=0x00000000
[17:51:22.809]    __FlashOp=0x00000000
[17:51:22.809]    __Result=0x00000000
[17:51:22.809]  </debugvars>
[17:51:22.809]  
[17:51:22.809]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:51:22.809]    <block atomic="false" info="">
[17:51:22.809]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:51:22.809]        // -> [isSWJ <= 0x00000001]
[17:51:22.809]      __var hasDormant = __protocol & 0x00020000;
[17:51:22.809]        // -> [hasDormant <= 0x00000000]
[17:51:22.809]      __var protType   = __protocol & 0x0000FFFF;
[17:51:22.809]        // -> [protType <= 0x00000002]
[17:51:22.809]    </block>
[17:51:22.809]    <control if="protType == 1" while="" timeout="0" info="">
[17:51:22.809]      // if-block "protType == 1"
[17:51:22.809]        // =>  FALSE
[17:51:22.809]      // skip if-block "protType == 1"
[17:51:22.809]    </control>
[17:51:22.814]    <control if="protType == 2" while="" timeout="0" info="">
[17:51:22.814]      // if-block "protType == 2"
[17:51:22.814]        // =>  TRUE
[17:51:22.814]      <control if="isSWJ" while="" timeout="0" info="">
[17:51:22.814]        // if-block "isSWJ"
[17:51:22.814]          // =>  TRUE
[17:51:22.814]        <control if="hasDormant" while="" timeout="0" info="">
[17:51:22.814]          // if-block "hasDormant"
[17:51:22.814]            // =>  FALSE
[17:51:22.814]          // skip if-block "hasDormant"
[17:51:22.814]        </control>
[17:51:22.814]        <control if="!hasDormant" while="" timeout="0" info="">
[17:51:22.814]          // if-block "!hasDormant"
[17:51:22.814]            // =>  TRUE
[17:51:22.814]          <block atomic="false" info="">
[17:51:22.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:51:22.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:22.817]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:51:22.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:51:22.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:51:22.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:22.817]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:51:22.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:51:22.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:51:22.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:22.825]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:51:22.826]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:51:22.826]          </block>
[17:51:22.826]          // end if-block "!hasDormant"
[17:51:22.827]        </control>
[17:51:22.827]        // end if-block "isSWJ"
[17:51:22.827]      </control>
[17:51:22.827]      <control if="!isSWJ" while="" timeout="0" info="">
[17:51:22.827]        // if-block "!isSWJ"
[17:51:22.827]          // =>  FALSE
[17:51:22.827]        // skip if-block "!isSWJ"
[17:51:22.827]      </control>
[17:51:22.827]      <block atomic="false" info="">
[17:51:22.827]        ReadDP(0x0);
[17:51:22.827]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:51:22.827]      </block>
[17:51:22.827]      // end if-block "protType == 2"
[17:51:22.827]    </control>
[17:51:22.827]  </sequence>
[17:51:22.827]  
[17:51:22.827]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:51:22.827]  
[17:51:22.827]  <debugvars>
[17:51:22.827]    // Pre-defined
[17:51:22.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:22.827]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:22.827]    __dp=0x00000000
[17:51:22.827]    __ap=0x00000000
[17:51:22.827]    __traceout=0x00000000      (Trace Disabled)
[17:51:22.827]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:22.827]    __FlashAddr=0x00000000
[17:51:22.827]    __FlashLen=0x00000000
[17:51:22.827]    __FlashArg=0x00000000
[17:51:22.827]    __FlashOp=0x00000000
[17:51:22.827]    __Result=0x00000000
[17:51:22.827]  </debugvars>
[17:51:22.827]  
[17:51:22.827]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:51:22.827]    <block atomic="false" info="">
[17:51:22.827]      __var SW_DP_ABORT       = 0x0;
[17:51:22.827]        // -> [SW_DP_ABORT <= 0x00000000]
[17:51:22.827]      __var DP_CTRL_STAT      = 0x4;
[17:51:22.827]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:51:22.827]      __var DP_SELECT         = 0x8;
[17:51:22.827]        // -> [DP_SELECT <= 0x00000008]
[17:51:22.827]      __var powered_down      = 0;
[17:51:22.827]        // -> [powered_down <= 0x00000000]
[17:51:22.835]      WriteDP(DP_SELECT, 0x00000000);
[17:51:22.835]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:51:22.835]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:51:22.837]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:51:22.837]        // -> [powered_down <= 0x00000001]
[17:51:22.837]    </block>
[17:51:22.837]    <control if="powered_down" while="" timeout="0" info="">
[17:51:22.837]      // if-block "powered_down"
[17:51:22.837]        // =>  TRUE
[17:51:22.837]      <block atomic="false" info="">
[17:51:22.837]        Message(0, "Debug/System power-up request sent");
[17:51:22.841]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:51:22.841]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:51:22.841]      </block>
[17:51:22.841]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:51:22.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:51:22.845]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:51:22.845]        // while-condition  =>  FALSE
[17:51:22.845]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:51:22.845]      </control>
[17:51:22.845]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:51:22.845]        // if-block "(__protocol & 0xFFFF) == 1"
[17:51:22.845]          // =>  FALSE
[17:51:22.845]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:51:22.845]      </control>
[17:51:22.845]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:51:22.845]        // if-block "(__protocol & 0xFFFF) == 2"
[17:51:22.847]          // =>  TRUE
[17:51:22.847]        <block atomic="false" info="">
[17:51:22.847]          Message(0, "executing SWD power up");
[17:51:22.847]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:51:22.847]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:51:22.847]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:51:22.847]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:51:22.847]        </block>
[17:51:22.847]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:51:22.847]      </control>
[17:51:22.847]      // end if-block "powered_down"
[17:51:22.847]    </control>
[17:51:22.847]    <block atomic="false" info="">
[17:51:22.847]      __var DEBUG_PORT_VAL    = 0;
[17:51:22.847]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:51:22.847]      __var ACCESS_POINT_VAL  = 0;
[17:51:22.847]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:51:22.847]      __ap = 1; 
[17:51:22.847]        // -> [__ap <= 0x00000001]
[17:51:22.847]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:51:22.857]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:51:22.857]      __ap = 4;
[17:51:22.857]        // -> [__ap <= 0x00000004]
[17:51:22.857]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:22.859]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:51:22.859]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:51:22.859]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:22.863]    </block>
[17:51:22.863]    <block atomic="false" info="">
[17:51:22.863]      __var nReset = 0x80;
[17:51:22.863]        // -> [nReset <= 0x00000080]
[17:51:22.863]      __var canReadPins = 0;
[17:51:22.863]        // -> [canReadPins <= 0x00000000]
[17:51:22.863]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:51:22.865]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:51:22.865]        // -> [canReadPins <= 0x00000001]
[17:51:22.865]    </block>
[17:51:22.865]    <control if="" while="1" timeout="200" info="">
[17:51:22.865]      // while "1"  (timeout="200")
[17:51:22.866]      // while-condition  =>  TRUE
[17:51:22.866]      // while "1"  (timeout="200")
[17:51:22.866]      // while-condition  =>  TRUE
[17:51:22.866]      // while "1"  (timeout="200")
[17:51:22.866]      // while-condition  =>  TRUE
[17:51:22.866]      // while "1"  (timeout="200")
[17:51:22.866]      // while-condition  =>  TRUE
[17:51:22.866]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.867]      // while-condition  =>  TRUE
[17:51:22.867]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.868]      // while "1"  (timeout="200")
[17:51:22.868]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.871]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.871]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.871]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.871]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.871]      // while-condition  =>  TRUE
[17:51:22.871]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.873]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.873]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.873]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.873]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.873]      // while "1"  (timeout="200")
[17:51:22.873]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.874]      // while-condition  =>  TRUE
[17:51:22.874]      // while "1"  (timeout="200")
[17:51:22.876]      // while-condition  =>  TRUE
[17:51:22.876]      // while "1"  (timeout="200")
[17:51:22.876]      // while-condition  =>  TRUE
[17:51:22.876]      // while "1"  (timeout="200")
[17:51:22.876]      // while-condition  =>  TRUE
[17:51:22.876]      // while "1"  (timeout="200")
[17:51:22.876]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.877]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.877]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.877]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.877]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.877]      // while-condition  =>  TRUE
[17:51:22.877]      // while "1"  (timeout="200")
[17:51:22.878]      // while-condition  =>  TRUE
[17:51:22.878]      // while "1"  (timeout="200")
[17:51:22.878]      // while  =>  TIMEOUT
[17:51:22.878]      // end while "1"
[17:51:22.878]    </control>
[17:51:22.878]    <control if="canReadPins" while="" timeout="0" info="">
[17:51:22.878]      // if-block "canReadPins"
[17:51:22.878]        // =>  TRUE
[17:51:22.878]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:51:22.878]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:51:22.878]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:51:22.878]        // while-condition  =>  FALSE
[17:51:22.878]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:51:22.878]      </control>
[17:51:22.878]      // end if-block "canReadPins"
[17:51:22.878]    </control>
[17:51:22.878]    <control if="!canReadPins" while="" timeout="0" info="">
[17:51:22.878]      // if-block "!canReadPins"
[17:51:22.878]        // =>  FALSE
[17:51:22.878]      // skip if-block "!canReadPins"
[17:51:22.878]    </control>
[17:51:22.878]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:51:22.878]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:22.878]        // =>  TRUE
[17:51:22.878]      <block atomic="false" info="">
[17:51:22.878]        WriteAP(0x00, 0x190008);
[17:51:22.882]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:22.882]        WriteAP(0xF0, 0x01);
[17:51:22.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:22.886]      </block>
[17:51:22.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:22.886]    </control>
[17:51:22.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:51:22.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:22.887]        // =>  FALSE
[17:51:22.887]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:22.887]    </control>
[17:51:22.887]    <block atomic="false" info="">
[17:51:22.887]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:22.887]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:51:22.887]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:51:22.887]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:22.887]      __ap = 0; //lets make sure we reset the access point selection
[17:51:22.887]        // -> [__ap <= 0x00000000]
[17:51:22.887]    </block>
[17:51:22.887]  </sequence>
[17:51:22.887]  
[17:51:22.909]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:51:22.909]  
[17:51:22.909]  <debugvars>
[17:51:22.909]    // Pre-defined
[17:51:22.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:22.909]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:22.909]    __dp=0x00000000
[17:51:22.909]    __ap=0x00000000
[17:51:22.909]    __traceout=0x00000000      (Trace Disabled)
[17:51:22.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:22.909]    __FlashAddr=0x00000000
[17:51:22.909]    __FlashLen=0x00000000
[17:51:22.909]    __FlashArg=0x00000000
[17:51:22.909]    __FlashOp=0x00000000
[17:51:22.909]    __Result=0x00000000
[17:51:22.909]  </debugvars>
[17:51:22.909]  
[17:51:22.909]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:51:22.909]    <block atomic="false" info="">
[17:51:22.909]      __var deviceID = 0;
[17:51:22.909]        // -> [deviceID <= 0x00000000]
[17:51:22.909]      __var version = 0;
[17:51:22.909]        // -> [version <= 0x00000000]
[17:51:22.909]      __var partNum = 0;
[17:51:22.909]        // -> [partNum <= 0x00000000]
[17:51:22.909]      __var manuf = 0;
[17:51:22.909]        // -> [manuf <= 0x00000000]
[17:51:22.909]      __var isMSPM0G1X0X_G3X0X = 0;
[17:51:22.909]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:51:22.909]      __var isProduction = 0;
[17:51:22.909]        // -> [isProduction <= 0x00000000]
[17:51:22.909]      __var continueId = 0;
[17:51:22.909]        // -> [continueId <= 0x00000000]
[17:51:22.909]      deviceID =   Read32(0x41C40004);
[17:51:22.927]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:51:22.927]        // -> [deviceID <= 0x2BB8802F]
[17:51:22.927]      version = deviceID >> 28;
[17:51:22.927]        // -> [version <= 0x00000002]
[17:51:22.927]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:51:22.927]        // -> [partNum <= 0x0000BB88]
[17:51:22.927]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:51:22.927]        // -> [manuf <= 0x00000017]
[17:51:22.927]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:51:22.927]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:51:22.927]      isProduction = (version > 0);
[17:51:22.927]        // -> [isProduction <= 0x00000001]
[17:51:22.927]    </block>
[17:51:22.927]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:51:22.927]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:51:22.927]        // =>  FALSE
[17:51:22.927]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:51:22.927]    </control>
[17:51:22.927]    <control if="continueId == 4" while="" timeout="0" info="">
[17:51:22.927]      // if-block "continueId == 4"
[17:51:22.927]        // =>  FALSE
[17:51:22.927]      // skip if-block "continueId == 4"
[17:51:22.927]    </control>
[17:51:22.927]    <control if="!isProduction" while="" timeout="0" info="">
[17:51:22.927]      // if-block "!isProduction"
[17:51:22.927]        // =>  FALSE
[17:51:22.927]      // skip if-block "!isProduction"
[17:51:22.927]    </control>
[17:51:22.927]  </sequence>
[17:51:22.927]  
[17:51:50.459]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:51:50.459]  
[17:51:50.475]  <debugvars>
[17:51:50.475]    // Pre-defined
[17:51:50.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:50.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:50.475]    __dp=0x00000000
[17:51:50.475]    __ap=0x00000000
[17:51:50.476]    __traceout=0x00000000      (Trace Disabled)
[17:51:50.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:50.476]    __FlashAddr=0x00000000
[17:51:50.476]    __FlashLen=0x00000000
[17:51:50.476]    __FlashArg=0x00000000
[17:51:50.476]    __FlashOp=0x00000000
[17:51:50.476]    __Result=0x00000000
[17:51:50.476]  </debugvars>
[17:51:50.476]  
[17:51:50.476]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:51:50.476]    <block atomic="false" info="">
[17:51:50.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:51:50.477]        // -> [isSWJ <= 0x00000001]
[17:51:50.477]      __var hasDormant = __protocol & 0x00020000;
[17:51:50.477]        // -> [hasDormant <= 0x00000000]
[17:51:50.477]      __var protType   = __protocol & 0x0000FFFF;
[17:51:50.477]        // -> [protType <= 0x00000002]
[17:51:50.477]    </block>
[17:51:50.477]    <control if="protType == 1" while="" timeout="0" info="">
[17:51:50.477]      // if-block "protType == 1"
[17:51:50.477]        // =>  FALSE
[17:51:50.477]      // skip if-block "protType == 1"
[17:51:50.478]    </control>
[17:51:50.478]    <control if="protType == 2" while="" timeout="0" info="">
[17:51:50.478]      // if-block "protType == 2"
[17:51:50.478]        // =>  TRUE
[17:51:50.478]      <control if="isSWJ" while="" timeout="0" info="">
[17:51:50.478]        // if-block "isSWJ"
[17:51:50.478]          // =>  TRUE
[17:51:50.478]        <control if="hasDormant" while="" timeout="0" info="">
[17:51:50.478]          // if-block "hasDormant"
[17:51:50.478]            // =>  FALSE
[17:51:50.478]          // skip if-block "hasDormant"
[17:51:50.478]        </control>
[17:51:50.478]        <control if="!hasDormant" while="" timeout="0" info="">
[17:51:50.479]          // if-block "!hasDormant"
[17:51:50.479]            // =>  TRUE
[17:51:50.479]          <block atomic="false" info="">
[17:51:50.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:51:50.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:50.479]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:51:50.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:51:50.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:51:50.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:50.479]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:51:50.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:51:50.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:51:50.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:51:50.479]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:51:50.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:51:50.489]          </block>
[17:51:50.489]          // end if-block "!hasDormant"
[17:51:50.489]        </control>
[17:51:50.489]        // end if-block "isSWJ"
[17:51:50.489]      </control>
[17:51:50.489]      <control if="!isSWJ" while="" timeout="0" info="">
[17:51:50.489]        // if-block "!isSWJ"
[17:51:50.489]          // =>  FALSE
[17:51:50.489]        // skip if-block "!isSWJ"
[17:51:50.489]      </control>
[17:51:50.489]      <block atomic="false" info="">
[17:51:50.489]        ReadDP(0x0);
[17:51:50.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:51:50.489]      </block>
[17:51:50.489]      // end if-block "protType == 2"
[17:51:50.489]    </control>
[17:51:50.489]  </sequence>
[17:51:50.489]  
[17:51:50.489]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:51:50.489]  
[17:51:50.489]  <debugvars>
[17:51:50.489]    // Pre-defined
[17:51:50.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:50.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:50.489]    __dp=0x00000000
[17:51:50.489]    __ap=0x00000000
[17:51:50.489]    __traceout=0x00000000      (Trace Disabled)
[17:51:50.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:50.489]    __FlashAddr=0x00000000
[17:51:50.489]    __FlashLen=0x00000000
[17:51:50.489]    __FlashArg=0x00000000
[17:51:50.489]    __FlashOp=0x00000000
[17:51:50.489]    __Result=0x00000000
[17:51:50.489]  </debugvars>
[17:51:50.489]  
[17:51:50.489]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:51:50.489]    <block atomic="false" info="">
[17:51:50.489]      __var SW_DP_ABORT       = 0x0;
[17:51:50.489]        // -> [SW_DP_ABORT <= 0x00000000]
[17:51:50.489]      __var DP_CTRL_STAT      = 0x4;
[17:51:50.497]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:51:50.497]      __var DP_SELECT         = 0x8;
[17:51:50.497]        // -> [DP_SELECT <= 0x00000008]
[17:51:50.497]      __var powered_down      = 0;
[17:51:50.497]        // -> [powered_down <= 0x00000000]
[17:51:50.497]      WriteDP(DP_SELECT, 0x00000000);
[17:51:50.499]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:51:50.499]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:51:50.499]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:51:50.499]        // -> [powered_down <= 0x00000001]
[17:51:50.499]    </block>
[17:51:50.499]    <control if="powered_down" while="" timeout="0" info="">
[17:51:50.499]      // if-block "powered_down"
[17:51:50.499]        // =>  TRUE
[17:51:50.499]      <block atomic="false" info="">
[17:51:50.499]        Message(0, "Debug/System power-up request sent");
[17:51:50.504]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:51:50.504]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:51:50.504]      </block>
[17:51:50.504]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:51:50.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:51:50.508]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:51:50.508]        // while-condition  =>  FALSE
[17:51:50.509]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:51:50.509]      </control>
[17:51:50.509]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:51:50.509]        // if-block "(__protocol & 0xFFFF) == 1"
[17:51:50.509]          // =>  FALSE
[17:51:50.509]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:51:50.509]      </control>
[17:51:50.509]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:51:50.509]        // if-block "(__protocol & 0xFFFF) == 2"
[17:51:50.509]          // =>  TRUE
[17:51:50.509]        <block atomic="false" info="">
[17:51:50.509]          Message(0, "executing SWD power up");
[17:51:50.511]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:51:50.511]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:51:50.511]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:51:50.515]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:51:50.515]        </block>
[17:51:50.515]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:51:50.515]      </control>
[17:51:50.515]      // end if-block "powered_down"
[17:51:50.515]    </control>
[17:51:50.515]    <block atomic="false" info="">
[17:51:50.515]      __var DEBUG_PORT_VAL    = 0;
[17:51:50.515]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:51:50.515]      __var ACCESS_POINT_VAL  = 0;
[17:51:50.515]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:51:50.515]      __ap = 1; 
[17:51:50.515]        // -> [__ap <= 0x00000001]
[17:51:50.515]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:51:50.519]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:51:50.520]      __ap = 4;
[17:51:50.520]        // -> [__ap <= 0x00000004]
[17:51:50.520]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:50.522]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:51:50.522]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:51:50.522]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:50.525]    </block>
[17:51:50.525]    <block atomic="false" info="">
[17:51:50.525]      __var nReset = 0x80;
[17:51:50.525]        // -> [nReset <= 0x00000080]
[17:51:50.525]      __var canReadPins = 0;
[17:51:50.525]        // -> [canReadPins <= 0x00000000]
[17:51:50.525]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:51:50.527]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:51:50.527]        // -> [canReadPins <= 0x00000001]
[17:51:50.527]    </block>
[17:51:50.527]    <control if="" while="1" timeout="200" info="">
[17:51:50.527]      // while "1"  (timeout="200")
[17:51:50.528]      // while-condition  =>  TRUE
[17:51:50.528]      // while "1"  (timeout="200")
[17:51:50.528]      // while-condition  =>  TRUE
[17:51:50.528]      // while "1"  (timeout="200")
[17:51:50.528]      // while-condition  =>  TRUE
[17:51:50.528]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.529]      // while-condition  =>  TRUE
[17:51:50.529]      // while "1"  (timeout="200")
[17:51:50.531]      // while-condition  =>  TRUE
[17:51:50.531]      // while "1"  (timeout="200")
[17:51:50.531]      // while-condition  =>  TRUE
[17:51:50.531]      // while "1"  (timeout="200")
[17:51:50.531]      // while-condition  =>  TRUE
[17:51:50.531]      // while "1"  (timeout="200")
[17:51:50.531]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.532]      // while-condition  =>  TRUE
[17:51:50.532]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.534]      // while "1"  (timeout="200")
[17:51:50.534]      // while-condition  =>  TRUE
[17:51:50.535]      // while "1"  (timeout="200")
[17:51:50.535]      // while  =>  TIMEOUT
[17:51:50.535]      // end while "1"
[17:51:50.535]    </control>
[17:51:50.535]    <control if="canReadPins" while="" timeout="0" info="">
[17:51:50.535]      // if-block "canReadPins"
[17:51:50.535]        // =>  TRUE
[17:51:50.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:51:50.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:51:50.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:51:50.538]        // while-condition  =>  FALSE
[17:51:50.538]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:51:50.538]      </control>
[17:51:50.538]      // end if-block "canReadPins"
[17:51:50.539]    </control>
[17:51:50.539]    <control if="!canReadPins" while="" timeout="0" info="">
[17:51:50.539]      // if-block "!canReadPins"
[17:51:50.539]        // =>  FALSE
[17:51:50.539]      // skip if-block "!canReadPins"
[17:51:50.539]    </control>
[17:51:50.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:51:50.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:50.539]        // =>  TRUE
[17:51:50.539]      <block atomic="false" info="">
[17:51:50.540]        WriteAP(0x00, 0x190008);
[17:51:50.540]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:50.540]        WriteAP(0xF0, 0x01);
[17:51:50.545]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:51:50.545]      </block>
[17:51:50.545]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:51:50.545]    </control>
[17:51:50.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:51:50.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:50.545]        // =>  FALSE
[17:51:50.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:51:50.545]    </control>
[17:51:50.545]    <block atomic="false" info="">
[17:51:50.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:51:50.549]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:51:50.549]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:51:50.550]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:51:50.551]      __ap = 0; //lets make sure we reset the access point selection
[17:51:50.551]        // -> [__ap <= 0x00000000]
[17:51:50.551]    </block>
[17:51:50.551]  </sequence>
[17:51:50.551]  
[17:51:50.577]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:51:50.577]  
[17:51:50.577]  <debugvars>
[17:51:50.578]    // Pre-defined
[17:51:50.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:51:50.578]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:51:50.578]    __dp=0x00000000
[17:51:50.578]    __ap=0x00000000
[17:51:50.578]    __traceout=0x00000000      (Trace Disabled)
[17:51:50.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:51:50.579]    __FlashAddr=0x00000000
[17:51:50.579]    __FlashLen=0x00000000
[17:51:50.579]    __FlashArg=0x00000000
[17:51:50.579]    __FlashOp=0x00000000
[17:51:50.579]    __Result=0x00000000
[17:51:50.579]  </debugvars>
[17:51:50.579]  
[17:51:50.579]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:51:50.579]    <block atomic="false" info="">
[17:51:50.579]      __var deviceID = 0;
[17:51:50.579]        // -> [deviceID <= 0x00000000]
[17:51:50.579]      __var version = 0;
[17:51:50.581]        // -> [version <= 0x00000000]
[17:51:50.581]      __var partNum = 0;
[17:51:50.581]        // -> [partNum <= 0x00000000]
[17:51:50.581]      __var manuf = 0;
[17:51:50.581]        // -> [manuf <= 0x00000000]
[17:51:50.581]      __var isMSPM0G1X0X_G3X0X = 0;
[17:51:50.581]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:51:50.581]      __var isProduction = 0;
[17:51:50.581]        // -> [isProduction <= 0x00000000]
[17:51:50.581]      __var continueId = 0;
[17:51:50.581]        // -> [continueId <= 0x00000000]
[17:51:50.581]      deviceID =   Read32(0x41C40004);
[17:51:50.586]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:51:50.586]        // -> [deviceID <= 0x2BB8802F]
[17:51:50.586]      version = deviceID >> 28;
[17:51:50.586]        // -> [version <= 0x00000002]
[17:51:50.586]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:51:50.586]        // -> [partNum <= 0x0000BB88]
[17:51:50.587]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:51:50.587]        // -> [manuf <= 0x00000017]
[17:51:50.587]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:51:50.587]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:51:50.587]      isProduction = (version > 0);
[17:51:50.587]        // -> [isProduction <= 0x00000001]
[17:51:50.587]    </block>
[17:51:50.587]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:51:50.587]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:51:50.587]        // =>  FALSE
[17:51:50.587]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:51:50.587]    </control>
[17:51:50.588]    <control if="continueId == 4" while="" timeout="0" info="">
[17:51:50.588]      // if-block "continueId == 4"
[17:51:50.588]        // =>  FALSE
[17:51:50.588]      // skip if-block "continueId == 4"
[17:51:50.588]    </control>
[17:51:50.588]    <control if="!isProduction" while="" timeout="0" info="">
[17:51:50.588]      // if-block "!isProduction"
[17:51:50.588]        // =>  FALSE
[17:51:50.589]      // skip if-block "!isProduction"
[17:51:50.589]    </control>
[17:51:50.589]  </sequence>
[17:51:50.589]  
[17:52:12.739]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:52:12.739]  
[17:52:12.749]  <debugvars>
[17:52:12.749]    // Pre-defined
[17:52:12.749]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:12.749]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:12.749]    __dp=0x00000000
[17:52:12.749]    __ap=0x00000000
[17:52:12.749]    __traceout=0x00000000      (Trace Disabled)
[17:52:12.749]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:12.749]    __FlashAddr=0x00000000
[17:52:12.749]    __FlashLen=0x00000000
[17:52:12.751]    __FlashArg=0x00000000
[17:52:12.751]    __FlashOp=0x00000000
[17:52:12.751]    __Result=0x00000000
[17:52:12.751]  </debugvars>
[17:52:12.751]  
[17:52:12.751]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:52:12.751]    <block atomic="false" info="">
[17:52:12.751]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:52:12.751]        // -> [isSWJ <= 0x00000001]
[17:52:12.752]      __var hasDormant = __protocol & 0x00020000;
[17:52:12.752]        // -> [hasDormant <= 0x00000000]
[17:52:12.752]      __var protType   = __protocol & 0x0000FFFF;
[17:52:12.752]        // -> [protType <= 0x00000002]
[17:52:12.752]    </block>
[17:52:12.752]    <control if="protType == 1" while="" timeout="0" info="">
[17:52:12.752]      // if-block "protType == 1"
[17:52:12.752]        // =>  FALSE
[17:52:12.752]      // skip if-block "protType == 1"
[17:52:12.753]    </control>
[17:52:12.753]    <control if="protType == 2" while="" timeout="0" info="">
[17:52:12.753]      // if-block "protType == 2"
[17:52:12.753]        // =>  TRUE
[17:52:12.753]      <control if="isSWJ" while="" timeout="0" info="">
[17:52:12.753]        // if-block "isSWJ"
[17:52:12.753]          // =>  TRUE
[17:52:12.753]        <control if="hasDormant" while="" timeout="0" info="">
[17:52:12.753]          // if-block "hasDormant"
[17:52:12.753]            // =>  FALSE
[17:52:12.754]          // skip if-block "hasDormant"
[17:52:12.754]        </control>
[17:52:12.754]        <control if="!hasDormant" while="" timeout="0" info="">
[17:52:12.754]          // if-block "!hasDormant"
[17:52:12.754]            // =>  TRUE
[17:52:12.754]          <block atomic="false" info="">
[17:52:12.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:52:12.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:12.757]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:52:12.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:52:12.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:52:12.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:12.761]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:52:12.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:52:12.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:52:12.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:12.765]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:52:12.766]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:52:12.766]          </block>
[17:52:12.766]          // end if-block "!hasDormant"
[17:52:12.766]        </control>
[17:52:12.767]        // end if-block "isSWJ"
[17:52:12.767]      </control>
[17:52:12.767]      <control if="!isSWJ" while="" timeout="0" info="">
[17:52:12.767]        // if-block "!isSWJ"
[17:52:12.767]          // =>  FALSE
[17:52:12.767]        // skip if-block "!isSWJ"
[17:52:12.767]      </control>
[17:52:12.767]      <block atomic="false" info="">
[17:52:12.767]        ReadDP(0x0);
[17:52:12.769]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:52:12.769]      </block>
[17:52:12.769]      // end if-block "protType == 2"
[17:52:12.769]    </control>
[17:52:12.769]  </sequence>
[17:52:12.769]  
[17:52:12.772]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:52:12.772]  
[17:52:12.772]  <debugvars>
[17:52:12.773]    // Pre-defined
[17:52:12.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:12.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:12.773]    __dp=0x00000000
[17:52:12.773]    __ap=0x00000000
[17:52:12.773]    __traceout=0x00000000      (Trace Disabled)
[17:52:12.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:12.774]    __FlashAddr=0x00000000
[17:52:12.774]    __FlashLen=0x00000000
[17:52:12.774]    __FlashArg=0x00000000
[17:52:12.774]    __FlashOp=0x00000000
[17:52:12.774]    __Result=0x00000000
[17:52:12.774]  </debugvars>
[17:52:12.774]  
[17:52:12.774]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:52:12.775]    <block atomic="false" info="">
[17:52:12.775]      __var SW_DP_ABORT       = 0x0;
[17:52:12.775]        // -> [SW_DP_ABORT <= 0x00000000]
[17:52:12.775]      __var DP_CTRL_STAT      = 0x4;
[17:52:12.775]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:52:12.775]      __var DP_SELECT         = 0x8;
[17:52:12.775]        // -> [DP_SELECT <= 0x00000008]
[17:52:12.775]      __var powered_down      = 0;
[17:52:12.775]        // -> [powered_down <= 0x00000000]
[17:52:12.775]      WriteDP(DP_SELECT, 0x00000000);
[17:52:12.777]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:52:12.777]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:52:12.778]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:52:12.778]        // -> [powered_down <= 0x00000001]
[17:52:12.778]    </block>
[17:52:12.779]    <control if="powered_down" while="" timeout="0" info="">
[17:52:12.779]      // if-block "powered_down"
[17:52:12.779]        // =>  TRUE
[17:52:12.779]      <block atomic="false" info="">
[17:52:12.779]        Message(0, "Debug/System power-up request sent");
[17:52:12.781]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:52:12.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:52:12.784]      </block>
[17:52:12.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:52:12.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:52:12.785]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:52:12.785]        // while-condition  =>  FALSE
[17:52:12.785]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:52:12.785]      </control>
[17:52:12.785]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:52:12.785]        // if-block "(__protocol & 0xFFFF) == 1"
[17:52:12.785]          // =>  FALSE
[17:52:12.785]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:52:12.787]      </control>
[17:52:12.787]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:52:12.787]        // if-block "(__protocol & 0xFFFF) == 2"
[17:52:12.787]          // =>  TRUE
[17:52:12.787]        <block atomic="false" info="">
[17:52:12.787]          Message(0, "executing SWD power up");
[17:52:12.789]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:52:12.791]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:52:12.791]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:52:12.792]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:52:12.793]        </block>
[17:52:12.793]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:52:12.793]      </control>
[17:52:12.793]      // end if-block "powered_down"
[17:52:12.793]    </control>
[17:52:12.793]    <block atomic="false" info="">
[17:52:12.793]      __var DEBUG_PORT_VAL    = 0;
[17:52:12.793]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:52:12.794]      __var ACCESS_POINT_VAL  = 0;
[17:52:12.794]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:52:12.794]      __ap = 1; 
[17:52:12.794]        // -> [__ap <= 0x00000001]
[17:52:12.794]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:52:12.797]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:52:12.797]      __ap = 4;
[17:52:12.797]        // -> [__ap <= 0x00000004]
[17:52:12.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:52:12.801]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:52:12.801]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:52:12.801]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:52:12.803]    </block>
[17:52:12.803]    <block atomic="false" info="">
[17:52:12.803]      __var nReset = 0x80;
[17:52:12.804]        // -> [nReset <= 0x00000080]
[17:52:12.804]      __var canReadPins = 0;
[17:52:12.804]        // -> [canReadPins <= 0x00000000]
[17:52:12.804]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:52:12.806]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:52:12.806]        // -> [canReadPins <= 0x00000001]
[17:52:12.806]    </block>
[17:52:12.806]    <control if="" while="1" timeout="200" info="">
[17:52:12.806]      // while "1"  (timeout="200")
[17:52:12.806]      // while-condition  =>  TRUE
[17:52:12.806]      // while "1"  (timeout="200")
[17:52:12.807]      // while-condition  =>  TRUE
[17:52:12.807]      // while "1"  (timeout="200")
[17:52:12.807]      // while-condition  =>  TRUE
[17:52:12.807]      // while "1"  (timeout="200")
[17:52:12.807]      // while-condition  =>  TRUE
[17:52:12.807]      // while "1"  (timeout="200")
[17:52:12.807]      // while-condition  =>  TRUE
[17:52:12.807]      // while "1"  (timeout="200")
[17:52:12.808]      // while-condition  =>  TRUE
[17:52:12.808]      // while "1"  (timeout="200")
[17:52:12.808]      // while-condition  =>  TRUE
[17:52:12.808]      // while "1"  (timeout="200")
[17:52:12.808]      // while-condition  =>  TRUE
[17:52:12.808]      // while "1"  (timeout="200")
[17:52:12.808]      // while-condition  =>  TRUE
[17:52:12.808]      // while "1"  (timeout="200")
[17:52:12.808]      // while-condition  =>  TRUE
[17:52:12.809]      // while "1"  (timeout="200")
[17:52:12.809]      // while-condition  =>  TRUE
[17:52:12.809]      // while "1"  (timeout="200")
[17:52:12.809]      // while-condition  =>  TRUE
[17:52:12.809]      // while "1"  (timeout="200")
[17:52:12.809]      // while-condition  =>  TRUE
[17:52:12.809]      // while "1"  (timeout="200")
[17:52:12.809]      // while-condition  =>  TRUE
[17:52:12.809]      // while "1"  (timeout="200")
[17:52:12.809]      // while-condition  =>  TRUE
[17:52:12.810]      // while "1"  (timeout="200")
[17:52:12.810]      // while-condition  =>  TRUE
[17:52:12.810]      // while "1"  (timeout="200")
[17:52:12.810]      // while-condition  =>  TRUE
[17:52:12.810]      // while "1"  (timeout="200")
[17:52:12.810]      // while-condition  =>  TRUE
[17:52:12.810]      // while "1"  (timeout="200")
[17:52:12.810]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.811]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.811]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.811]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.811]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.811]      // while-condition  =>  TRUE
[17:52:12.811]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.812]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.812]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.812]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.812]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.812]      // while "1"  (timeout="200")
[17:52:12.812]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.813]      // while-condition  =>  TRUE
[17:52:12.813]      // while "1"  (timeout="200")
[17:52:12.814]      // while-condition  =>  TRUE
[17:52:12.814]      // while "1"  (timeout="200")
[17:52:12.814]      // while-condition  =>  TRUE
[17:52:12.814]      // while "1"  (timeout="200")
[17:52:12.814]      // while-condition  =>  TRUE
[17:52:12.814]      // while "1"  (timeout="200")
[17:52:12.815]      // while-condition  =>  TRUE
[17:52:12.815]      // while "1"  (timeout="200")
[17:52:12.815]      // while  =>  TIMEOUT
[17:52:12.815]      // end while "1"
[17:52:12.815]    </control>
[17:52:12.815]    <control if="canReadPins" while="" timeout="0" info="">
[17:52:12.815]      // if-block "canReadPins"
[17:52:12.815]        // =>  TRUE
[17:52:12.815]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:52:12.815]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:52:12.818]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:52:12.818]        // while-condition  =>  FALSE
[17:52:12.818]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:52:12.818]      </control>
[17:52:12.818]      // end if-block "canReadPins"
[17:52:12.818]    </control>
[17:52:12.818]    <control if="!canReadPins" while="" timeout="0" info="">
[17:52:12.818]      // if-block "!canReadPins"
[17:52:12.818]        // =>  FALSE
[17:52:12.819]      // skip if-block "!canReadPins"
[17:52:12.819]    </control>
[17:52:12.819]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:52:12.819]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:52:12.819]        // =>  TRUE
[17:52:12.819]      <block atomic="false" info="">
[17:52:12.819]        WriteAP(0x00, 0x190008);
[17:52:12.823]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:52:12.823]        WriteAP(0xF0, 0x01);
[17:52:12.827]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:52:12.827]      </block>
[17:52:12.827]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:52:12.827]    </control>
[17:52:12.827]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:52:12.827]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:52:12.827]        // =>  FALSE
[17:52:12.827]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:52:12.827]    </control>
[17:52:12.828]    <block atomic="false" info="">
[17:52:12.828]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:52:12.833]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:52:12.834]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:52:12.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:52:12.836]      __ap = 0; //lets make sure we reset the access point selection
[17:52:12.836]        // -> [__ap <= 0x00000000]
[17:52:12.836]    </block>
[17:52:12.836]  </sequence>
[17:52:12.836]  
[17:52:12.854]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:52:12.854]  
[17:52:12.855]  <debugvars>
[17:52:12.855]    // Pre-defined
[17:52:12.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:12.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:12.855]    __dp=0x00000000
[17:52:12.855]    __ap=0x00000000
[17:52:12.855]    __traceout=0x00000000      (Trace Disabled)
[17:52:12.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:12.855]    __FlashAddr=0x00000000
[17:52:12.856]    __FlashLen=0x00000000
[17:52:12.856]    __FlashArg=0x00000000
[17:52:12.856]    __FlashOp=0x00000000
[17:52:12.856]    __Result=0x00000000
[17:52:12.856]  </debugvars>
[17:52:12.856]  
[17:52:12.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:52:12.856]    <block atomic="false" info="">
[17:52:12.856]      __var deviceID = 0;
[17:52:12.856]        // -> [deviceID <= 0x00000000]
[17:52:12.858]      __var version = 0;
[17:52:12.858]        // -> [version <= 0x00000000]
[17:52:12.858]      __var partNum = 0;
[17:52:12.858]        // -> [partNum <= 0x00000000]
[17:52:12.858]      __var manuf = 0;
[17:52:12.858]        // -> [manuf <= 0x00000000]
[17:52:12.858]      __var isMSPM0G1X0X_G3X0X = 0;
[17:52:12.858]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:52:12.858]      __var isProduction = 0;
[17:52:12.858]        // -> [isProduction <= 0x00000000]
[17:52:12.858]      __var continueId = 0;
[17:52:12.859]        // -> [continueId <= 0x00000000]
[17:52:12.859]      deviceID =   Read32(0x41C40004);
[17:52:12.863]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:52:12.863]        // -> [deviceID <= 0x2BB8802F]
[17:52:12.863]      version = deviceID >> 28;
[17:52:12.863]        // -> [version <= 0x00000002]
[17:52:12.863]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:52:12.863]        // -> [partNum <= 0x0000BB88]
[17:52:12.864]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:52:12.864]        // -> [manuf <= 0x00000017]
[17:52:12.864]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:52:12.864]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:52:12.864]      isProduction = (version > 0);
[17:52:12.864]        // -> [isProduction <= 0x00000001]
[17:52:12.864]    </block>
[17:52:12.864]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:52:12.864]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:52:12.864]        // =>  FALSE
[17:52:12.864]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:52:12.865]    </control>
[17:52:12.865]    <control if="continueId == 4" while="" timeout="0" info="">
[17:52:12.865]      // if-block "continueId == 4"
[17:52:12.865]        // =>  FALSE
[17:52:12.865]      // skip if-block "continueId == 4"
[17:52:12.865]    </control>
[17:52:12.865]    <control if="!isProduction" while="" timeout="0" info="">
[17:52:12.865]      // if-block "!isProduction"
[17:52:12.866]        // =>  FALSE
[17:52:12.866]      // skip if-block "!isProduction"
[17:52:12.866]    </control>
[17:52:12.866]  </sequence>
[17:52:12.866]  
[17:52:41.176]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:52:41.176]  
[17:52:41.177]  <debugvars>
[17:52:41.177]    // Pre-defined
[17:52:41.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:41.177]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:41.177]    __dp=0x00000000
[17:52:41.177]    __ap=0x00000000
[17:52:41.177]    __traceout=0x00000000      (Trace Disabled)
[17:52:41.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:41.177]    __FlashAddr=0x00000000
[17:52:41.177]    __FlashLen=0x00000000
[17:52:41.177]    __FlashArg=0x00000000
[17:52:41.177]    __FlashOp=0x00000000
[17:52:41.177]    __Result=0x00000000
[17:52:41.177]  </debugvars>
[17:52:41.177]  
[17:52:41.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:52:41.177]    <block atomic="false" info="">
[17:52:41.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:52:41.179]        // -> [isSWJ <= 0x00000001]
[17:52:41.179]      __var hasDormant = __protocol & 0x00020000;
[17:52:41.179]        // -> [hasDormant <= 0x00000000]
[17:52:41.180]      __var protType   = __protocol & 0x0000FFFF;
[17:52:41.180]        // -> [protType <= 0x00000002]
[17:52:41.180]    </block>
[17:52:41.180]    <control if="protType == 1" while="" timeout="0" info="">
[17:52:41.180]      // if-block "protType == 1"
[17:52:41.180]        // =>  FALSE
[17:52:41.180]      // skip if-block "protType == 1"
[17:52:41.180]    </control>
[17:52:41.180]    <control if="protType == 2" while="" timeout="0" info="">
[17:52:41.180]      // if-block "protType == 2"
[17:52:41.181]        // =>  TRUE
[17:52:41.181]      <control if="isSWJ" while="" timeout="0" info="">
[17:52:41.181]        // if-block "isSWJ"
[17:52:41.181]          // =>  TRUE
[17:52:41.181]        <control if="hasDormant" while="" timeout="0" info="">
[17:52:41.181]          // if-block "hasDormant"
[17:52:41.181]            // =>  FALSE
[17:52:41.181]          // skip if-block "hasDormant"
[17:52:41.181]        </control>
[17:52:41.182]        <control if="!hasDormant" while="" timeout="0" info="">
[17:52:41.182]          // if-block "!hasDormant"
[17:52:41.182]            // =>  TRUE
[17:52:41.182]          <block atomic="false" info="">
[17:52:41.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:52:41.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:41.184]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:52:41.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:52:41.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:52:41.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:41.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:52:41.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:52:41.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:52:41.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:52:41.190]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:52:41.192]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:52:41.192]          </block>
[17:52:41.192]          // end if-block "!hasDormant"
[17:52:41.192]        </control>
[17:52:41.192]        // end if-block "isSWJ"
[17:52:41.193]      </control>
[17:52:41.193]      <control if="!isSWJ" while="" timeout="0" info="">
[17:52:41.193]        // if-block "!isSWJ"
[17:52:41.193]          // =>  FALSE
[17:52:41.193]        // skip if-block "!isSWJ"
[17:52:41.193]      </control>
[17:52:41.193]      <block atomic="false" info="">
[17:52:41.193]        ReadDP(0x0);
[17:52:41.196]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:52:41.196]      </block>
[17:52:41.196]      // end if-block "protType == 2"
[17:52:41.196]    </control>
[17:52:41.196]  </sequence>
[17:52:41.196]  
[17:52:41.199]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:52:41.199]  
[17:52:41.199]  <debugvars>
[17:52:41.199]    // Pre-defined
[17:52:41.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:41.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:41.199]    __dp=0x00000000
[17:52:41.200]    __ap=0x00000000
[17:52:41.200]    __traceout=0x00000000      (Trace Disabled)
[17:52:41.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:41.200]    __FlashAddr=0x00000000
[17:52:41.200]    __FlashLen=0x00000000
[17:52:41.200]    __FlashArg=0x00000000
[17:52:41.200]    __FlashOp=0x00000000
[17:52:41.200]    __Result=0x00000000
[17:52:41.200]  </debugvars>
[17:52:41.200]  
[17:52:41.201]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:52:41.201]    <block atomic="false" info="">
[17:52:41.201]      __var SW_DP_ABORT       = 0x0;
[17:52:41.201]        // -> [SW_DP_ABORT <= 0x00000000]
[17:52:41.201]      __var DP_CTRL_STAT      = 0x4;
[17:52:41.202]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:52:41.202]      __var DP_SELECT         = 0x8;
[17:52:41.202]        // -> [DP_SELECT <= 0x00000008]
[17:52:41.202]      __var powered_down      = 0;
[17:52:41.202]        // -> [powered_down <= 0x00000000]
[17:52:41.202]      WriteDP(DP_SELECT, 0x00000000);
[17:52:41.203]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:52:41.203]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:52:41.205]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:52:41.205]        // -> [powered_down <= 0x00000001]
[17:52:41.205]    </block>
[17:52:41.205]    <control if="powered_down" while="" timeout="0" info="">
[17:52:41.205]      // if-block "powered_down"
[17:52:41.205]        // =>  TRUE
[17:52:41.205]      <block atomic="false" info="">
[17:52:41.206]        Message(0, "Debug/System power-up request sent");
[17:52:41.209]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:52:41.211]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:52:41.211]      </block>
[17:52:41.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:52:41.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:52:41.213]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:52:41.213]        // while-condition  =>  FALSE
[17:52:41.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:52:41.214]      </control>
[17:52:41.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:52:41.214]        // if-block "(__protocol & 0xFFFF) == 1"
[17:52:41.214]          // =>  FALSE
[17:52:41.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:52:41.214]      </control>
[17:52:41.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:52:41.215]        // if-block "(__protocol & 0xFFFF) == 2"
[17:52:41.215]          // =>  TRUE
[17:52:41.215]        <block atomic="false" info="">
[17:52:41.215]          Message(0, "executing SWD power up");
[17:52:41.217]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:52:41.219]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:52:41.219]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:52:41.224]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:52:41.224]        </block>
[17:52:41.224]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:52:41.224]      </control>
[17:52:41.224]      // end if-block "powered_down"
[17:52:41.224]    </control>
[17:52:41.224]    <block atomic="false" info="">
[17:52:41.224]      __var DEBUG_PORT_VAL    = 0;
[17:52:41.224]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:52:41.224]      __var ACCESS_POINT_VAL  = 0;
[17:52:41.224]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:52:41.224]      __ap = 1; 
[17:52:41.224]        // -> [__ap <= 0x00000001]
[17:52:41.224]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:52:41.227]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:52:41.227]      __ap = 4;
[17:52:41.227]        // -> [__ap <= 0x00000004]
[17:52:41.227]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:52:41.231]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:52:41.231]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:52:41.231]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:52:41.233]    </block>
[17:52:41.233]    <block atomic="false" info="">
[17:52:41.233]      __var nReset = 0x80;
[17:52:41.233]        // -> [nReset <= 0x00000080]
[17:52:41.233]      __var canReadPins = 0;
[17:52:41.233]        // -> [canReadPins <= 0x00000000]
[17:52:41.233]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:52:41.235]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:52:41.235]        // -> [canReadPins <= 0x00000001]
[17:52:41.235]    </block>
[17:52:41.235]    <control if="" while="1" timeout="200" info="">
[17:52:41.235]      // while "1"  (timeout="200")
[17:52:41.236]      // while-condition  =>  TRUE
[17:52:41.236]      // while "1"  (timeout="200")
[17:52:41.236]      // while-condition  =>  TRUE
[17:52:41.236]      // while "1"  (timeout="200")
[17:52:41.236]      // while-condition  =>  TRUE
[17:52:41.236]      // while "1"  (timeout="200")
[17:52:41.236]      // while-condition  =>  TRUE
[17:52:41.236]      // while "1"  (timeout="200")
[17:52:41.236]      // while-condition  =>  TRUE
[17:52:41.238]      // while "1"  (timeout="200")
[17:52:41.238]      // while  =>  TIMEOUT
[17:52:41.238]      // end while "1"
[17:52:41.238]    </control>
[17:52:41.238]    <control if="canReadPins" while="" timeout="0" info="">
[17:52:41.238]      // if-block "canReadPins"
[17:52:41.238]        // =>  TRUE
[17:52:41.238]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:52:41.238]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:52:41.245]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:52:41.245]        // while-condition  =>  FALSE
[17:52:41.245]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:52:41.245]      </control>
[17:52:41.245]      // end if-block "canReadPins"
[17:52:41.245]    </control>
[17:52:41.245]    <control if="!canReadPins" while="" timeout="0" info="">
[17:52:41.245]      // if-block "!canReadPins"
[17:52:41.245]        // =>  FALSE
[17:52:41.245]      // skip if-block "!canReadPins"
[17:52:41.245]    </control>
[17:52:41.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:52:41.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:52:41.246]        // =>  TRUE
[17:52:41.246]      <block atomic="false" info="">
[17:52:41.246]        WriteAP(0x00, 0x190008);
[17:52:41.246]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:52:41.246]        WriteAP(0xF0, 0x01);
[17:52:41.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:52:41.246]      </block>
[17:52:41.246]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:52:41.246]    </control>
[17:52:41.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:52:41.246]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:52:41.252]        // =>  FALSE
[17:52:41.252]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:52:41.252]    </control>
[17:52:41.252]    <block atomic="false" info="">
[17:52:41.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:52:41.260]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:52:41.260]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:52:41.260]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:52:41.260]      __ap = 0; //lets make sure we reset the access point selection
[17:52:41.260]        // -> [__ap <= 0x00000000]
[17:52:41.260]    </block>
[17:52:41.260]  </sequence>
[17:52:41.260]  
[17:52:41.281]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:52:41.281]  
[17:52:41.281]  <debugvars>
[17:52:41.281]    // Pre-defined
[17:52:41.281]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:52:41.281]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:52:41.281]    __dp=0x00000000
[17:52:41.281]    __ap=0x00000000
[17:52:41.281]    __traceout=0x00000000      (Trace Disabled)
[17:52:41.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:52:41.281]    __FlashAddr=0x00000000
[17:52:41.281]    __FlashLen=0x00000000
[17:52:41.281]    __FlashArg=0x00000000
[17:52:41.281]    __FlashOp=0x00000000
[17:52:41.281]    __Result=0x00000000
[17:52:41.281]  </debugvars>
[17:52:41.281]  
[17:52:41.281]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:52:41.281]    <block atomic="false" info="">
[17:52:41.281]      __var deviceID = 0;
[17:52:41.281]        // -> [deviceID <= 0x00000000]
[17:52:41.281]      __var version = 0;
[17:52:41.281]        // -> [version <= 0x00000000]
[17:52:41.281]      __var partNum = 0;
[17:52:41.281]        // -> [partNum <= 0x00000000]
[17:52:41.281]      __var manuf = 0;
[17:52:41.281]        // -> [manuf <= 0x00000000]
[17:52:41.281]      __var isMSPM0G1X0X_G3X0X = 0;
[17:52:41.281]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:52:41.281]      __var isProduction = 0;
[17:52:41.281]        // -> [isProduction <= 0x00000000]
[17:52:41.281]      __var continueId = 0;
[17:52:41.286]        // -> [continueId <= 0x00000000]
[17:52:41.286]      deviceID =   Read32(0x41C40004);
[17:52:41.288]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:52:41.288]        // -> [deviceID <= 0x2BB8802F]
[17:52:41.288]      version = deviceID >> 28;
[17:52:41.288]        // -> [version <= 0x00000002]
[17:52:41.288]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:52:41.288]        // -> [partNum <= 0x0000BB88]
[17:52:41.288]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:52:41.288]        // -> [manuf <= 0x00000017]
[17:52:41.288]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:52:41.288]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:52:41.288]      isProduction = (version > 0);
[17:52:41.288]        // -> [isProduction <= 0x00000001]
[17:52:41.288]    </block>
[17:52:41.288]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:52:41.288]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:52:41.288]        // =>  FALSE
[17:52:41.288]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:52:41.288]    </control>
[17:52:41.288]    <control if="continueId == 4" while="" timeout="0" info="">
[17:52:41.288]      // if-block "continueId == 4"
[17:52:41.288]        // =>  FALSE
[17:52:41.288]      // skip if-block "continueId == 4"
[17:52:41.288]    </control>
[17:52:41.288]    <control if="!isProduction" while="" timeout="0" info="">
[17:52:41.288]      // if-block "!isProduction"
[17:52:41.288]        // =>  FALSE
[17:52:41.288]      // skip if-block "!isProduction"
[17:52:41.288]    </control>
[17:52:41.288]  </sequence>
[17:52:41.288]  
[17:53:06.844]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:53:06.844]  
[17:53:06.855]  <debugvars>
[17:53:06.855]    // Pre-defined
[17:53:06.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:06.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:06.855]    __dp=0x00000000
[17:53:06.855]    __ap=0x00000000
[17:53:06.855]    __traceout=0x00000000      (Trace Disabled)
[17:53:06.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:06.855]    __FlashAddr=0x00000000
[17:53:06.855]    __FlashLen=0x00000000
[17:53:06.855]    __FlashArg=0x00000000
[17:53:06.855]    __FlashOp=0x00000000
[17:53:06.855]    __Result=0x00000000
[17:53:06.855]  </debugvars>
[17:53:06.855]  
[17:53:06.855]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:53:06.855]    <block atomic="false" info="">
[17:53:06.855]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:53:06.855]        // -> [isSWJ <= 0x00000001]
[17:53:06.855]      __var hasDormant = __protocol & 0x00020000;
[17:53:06.855]        // -> [hasDormant <= 0x00000000]
[17:53:06.855]      __var protType   = __protocol & 0x0000FFFF;
[17:53:06.855]        // -> [protType <= 0x00000002]
[17:53:06.855]    </block>
[17:53:06.855]    <control if="protType == 1" while="" timeout="0" info="">
[17:53:06.855]      // if-block "protType == 1"
[17:53:06.855]        // =>  FALSE
[17:53:06.855]      // skip if-block "protType == 1"
[17:53:06.855]    </control>
[17:53:06.855]    <control if="protType == 2" while="" timeout="0" info="">
[17:53:06.855]      // if-block "protType == 2"
[17:53:06.855]        // =>  TRUE
[17:53:06.855]      <control if="isSWJ" while="" timeout="0" info="">
[17:53:06.855]        // if-block "isSWJ"
[17:53:06.855]          // =>  TRUE
[17:53:06.855]        <control if="hasDormant" while="" timeout="0" info="">
[17:53:06.855]          // if-block "hasDormant"
[17:53:06.855]            // =>  FALSE
[17:53:06.855]          // skip if-block "hasDormant"
[17:53:06.855]        </control>
[17:53:06.860]        <control if="!hasDormant" while="" timeout="0" info="">
[17:53:06.860]          // if-block "!hasDormant"
[17:53:06.860]            // =>  TRUE
[17:53:06.860]          <block atomic="false" info="">
[17:53:06.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:53:06.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:06.860]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:53:06.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:53:06.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:53:06.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:06.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:53:06.866]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:53:06.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:53:06.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:06.868]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:53:06.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:53:06.869]          </block>
[17:53:06.869]          // end if-block "!hasDormant"
[17:53:06.869]        </control>
[17:53:06.869]        // end if-block "isSWJ"
[17:53:06.869]      </control>
[17:53:06.869]      <control if="!isSWJ" while="" timeout="0" info="">
[17:53:06.869]        // if-block "!isSWJ"
[17:53:06.869]          // =>  FALSE
[17:53:06.869]        // skip if-block "!isSWJ"
[17:53:06.869]      </control>
[17:53:06.869]      <block atomic="false" info="">
[17:53:06.869]        ReadDP(0x0);
[17:53:06.869]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:53:06.869]      </block>
[17:53:06.869]      // end if-block "protType == 2"
[17:53:06.869]    </control>
[17:53:06.869]  </sequence>
[17:53:06.869]  
[17:53:06.875]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:53:06.875]  
[17:53:06.875]  <debugvars>
[17:53:06.875]    // Pre-defined
[17:53:06.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:06.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:06.876]    __dp=0x00000000
[17:53:06.876]    __ap=0x00000000
[17:53:06.876]    __traceout=0x00000000      (Trace Disabled)
[17:53:06.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:06.876]    __FlashAddr=0x00000000
[17:53:06.876]    __FlashLen=0x00000000
[17:53:06.876]    __FlashArg=0x00000000
[17:53:06.876]    __FlashOp=0x00000000
[17:53:06.876]    __Result=0x00000000
[17:53:06.876]  </debugvars>
[17:53:06.876]  
[17:53:06.876]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:53:06.876]    <block atomic="false" info="">
[17:53:06.876]      __var SW_DP_ABORT       = 0x0;
[17:53:06.876]        // -> [SW_DP_ABORT <= 0x00000000]
[17:53:06.876]      __var DP_CTRL_STAT      = 0x4;
[17:53:06.876]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:53:06.876]      __var DP_SELECT         = 0x8;
[17:53:06.876]        // -> [DP_SELECT <= 0x00000008]
[17:53:06.876]      __var powered_down      = 0;
[17:53:06.876]        // -> [powered_down <= 0x00000000]
[17:53:06.876]      WriteDP(DP_SELECT, 0x00000000);
[17:53:06.879]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:53:06.879]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:53:06.879]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:53:06.879]        // -> [powered_down <= 0x00000001]
[17:53:06.879]    </block>
[17:53:06.879]    <control if="powered_down" while="" timeout="0" info="">
[17:53:06.879]      // if-block "powered_down"
[17:53:06.879]        // =>  TRUE
[17:53:06.879]      <block atomic="false" info="">
[17:53:06.879]        Message(0, "Debug/System power-up request sent");
[17:53:06.886]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:53:06.887]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:53:06.887]      </block>
[17:53:06.887]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:53:06.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:53:06.889]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:53:06.889]        // while-condition  =>  FALSE
[17:53:06.889]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:53:06.889]      </control>
[17:53:06.889]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:53:06.889]        // if-block "(__protocol & 0xFFFF) == 1"
[17:53:06.889]          // =>  FALSE
[17:53:06.889]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:53:06.889]      </control>
[17:53:06.889]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:53:06.889]        // if-block "(__protocol & 0xFFFF) == 2"
[17:53:06.889]          // =>  TRUE
[17:53:06.889]        <block atomic="false" info="">
[17:53:06.889]          Message(0, "executing SWD power up");
[17:53:06.889]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:53:06.895]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:53:06.895]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:53:06.895]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:53:06.895]        </block>
[17:53:06.895]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:53:06.895]      </control>
[17:53:06.895]      // end if-block "powered_down"
[17:53:06.895]    </control>
[17:53:06.895]    <block atomic="false" info="">
[17:53:06.895]      __var DEBUG_PORT_VAL    = 0;
[17:53:06.895]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:53:06.895]      __var ACCESS_POINT_VAL  = 0;
[17:53:06.895]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:53:06.895]      __ap = 1; 
[17:53:06.895]        // -> [__ap <= 0x00000001]
[17:53:06.895]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:53:06.905]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:53:06.905]      __ap = 4;
[17:53:06.905]        // -> [__ap <= 0x00000004]
[17:53:06.905]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:53:06.909]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:53:06.909]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:53:06.909]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:53:06.909]    </block>
[17:53:06.909]    <block atomic="false" info="">
[17:53:06.909]      __var nReset = 0x80;
[17:53:06.909]        // -> [nReset <= 0x00000080]
[17:53:06.909]      __var canReadPins = 0;
[17:53:06.909]        // -> [canReadPins <= 0x00000000]
[17:53:06.909]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:53:06.909]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:53:06.909]        // -> [canReadPins <= 0x00000001]
[17:53:06.909]    </block>
[17:53:06.909]    <control if="" while="1" timeout="200" info="">
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.909]      // while-condition  =>  TRUE
[17:53:06.909]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.916]      // while "1"  (timeout="200")
[17:53:06.916]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.920]      // while "1"  (timeout="200")
[17:53:06.920]      // while-condition  =>  TRUE
[17:53:06.926]      // while "1"  (timeout="200")
[17:53:06.926]      // while  =>  TIMEOUT
[17:53:06.926]      // end while "1"
[17:53:06.926]    </control>
[17:53:06.926]    <control if="canReadPins" while="" timeout="0" info="">
[17:53:06.926]      // if-block "canReadPins"
[17:53:06.926]        // =>  TRUE
[17:53:06.926]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:53:06.926]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:53:06.926]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:53:06.926]        // while-condition  =>  FALSE
[17:53:06.926]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:53:06.926]      </control>
[17:53:06.926]      // end if-block "canReadPins"
[17:53:06.929]    </control>
[17:53:06.929]    <control if="!canReadPins" while="" timeout="0" info="">
[17:53:06.929]      // if-block "!canReadPins"
[17:53:06.929]        // =>  FALSE
[17:53:06.929]      // skip if-block "!canReadPins"
[17:53:06.929]    </control>
[17:53:06.929]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:53:06.929]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:53:06.929]        // =>  TRUE
[17:53:06.929]      <block atomic="false" info="">
[17:53:06.929]        WriteAP(0x00, 0x190008);
[17:53:06.929]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:53:06.929]        WriteAP(0xF0, 0x01);
[17:53:06.940]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:53:06.940]      </block>
[17:53:06.940]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:53:06.940]    </control>
[17:53:06.940]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:53:06.940]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:53:06.940]        // =>  FALSE
[17:53:06.940]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:53:06.940]    </control>
[17:53:06.940]    <block atomic="false" info="">
[17:53:06.940]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:53:06.947]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:53:06.947]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:53:06.947]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:53:06.949]      __ap = 0; //lets make sure we reset the access point selection
[17:53:06.949]        // -> [__ap <= 0x00000000]
[17:53:06.950]    </block>
[17:53:06.950]  </sequence>
[17:53:06.950]  
[17:53:06.971]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:53:06.971]  
[17:53:06.971]  <debugvars>
[17:53:06.971]    // Pre-defined
[17:53:06.971]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:06.971]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:06.971]    __dp=0x00000000
[17:53:06.971]    __ap=0x00000000
[17:53:06.971]    __traceout=0x00000000      (Trace Disabled)
[17:53:06.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:06.971]    __FlashAddr=0x00000000
[17:53:06.971]    __FlashLen=0x00000000
[17:53:06.971]    __FlashArg=0x00000000
[17:53:06.971]    __FlashOp=0x00000000
[17:53:06.971]    __Result=0x00000000
[17:53:06.971]  </debugvars>
[17:53:06.971]  
[17:53:06.971]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:53:06.971]    <block atomic="false" info="">
[17:53:06.971]      __var deviceID = 0;
[17:53:06.971]        // -> [deviceID <= 0x00000000]
[17:53:06.971]      __var version = 0;
[17:53:06.971]        // -> [version <= 0x00000000]
[17:53:06.971]      __var partNum = 0;
[17:53:06.971]        // -> [partNum <= 0x00000000]
[17:53:06.971]      __var manuf = 0;
[17:53:06.971]        // -> [manuf <= 0x00000000]
[17:53:06.971]      __var isMSPM0G1X0X_G3X0X = 0;
[17:53:06.971]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:53:06.971]      __var isProduction = 0;
[17:53:06.971]        // -> [isProduction <= 0x00000000]
[17:53:06.971]      __var continueId = 0;
[17:53:06.971]        // -> [continueId <= 0x00000000]
[17:53:06.971]      deviceID =   Read32(0x41C40004);
[17:53:06.980]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:53:06.980]        // -> [deviceID <= 0x2BB8802F]
[17:53:06.980]      version = deviceID >> 28;
[17:53:06.980]        // -> [version <= 0x00000002]
[17:53:06.980]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:53:06.980]        // -> [partNum <= 0x0000BB88]
[17:53:06.980]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:53:06.980]        // -> [manuf <= 0x00000017]
[17:53:06.980]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:53:06.980]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:53:06.980]      isProduction = (version > 0);
[17:53:06.980]        // -> [isProduction <= 0x00000001]
[17:53:06.980]    </block>
[17:53:06.980]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:53:06.980]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:53:06.980]        // =>  FALSE
[17:53:06.980]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:53:06.980]    </control>
[17:53:06.980]    <control if="continueId == 4" while="" timeout="0" info="">
[17:53:06.980]      // if-block "continueId == 4"
[17:53:06.980]        // =>  FALSE
[17:53:06.980]      // skip if-block "continueId == 4"
[17:53:06.980]    </control>
[17:53:06.980]    <control if="!isProduction" while="" timeout="0" info="">
[17:53:06.980]      // if-block "!isProduction"
[17:53:06.980]        // =>  FALSE
[17:53:06.980]      // skip if-block "!isProduction"
[17:53:06.980]    </control>
[17:53:06.980]  </sequence>
[17:53:06.980]  
[17:53:30.367]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:53:30.367]  
[17:53:30.367]  <debugvars>
[17:53:30.367]    // Pre-defined
[17:53:30.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:30.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:30.367]    __dp=0x00000000
[17:53:30.367]    __ap=0x00000000
[17:53:30.367]    __traceout=0x00000000      (Trace Disabled)
[17:53:30.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:30.367]    __FlashAddr=0x00000000
[17:53:30.367]    __FlashLen=0x00000000
[17:53:30.367]    __FlashArg=0x00000000
[17:53:30.367]    __FlashOp=0x00000000
[17:53:30.367]    __Result=0x00000000
[17:53:30.367]  </debugvars>
[17:53:30.367]  
[17:53:30.367]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:53:30.367]    <block atomic="false" info="">
[17:53:30.367]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:53:30.367]        // -> [isSWJ <= 0x00000001]
[17:53:30.367]      __var hasDormant = __protocol & 0x00020000;
[17:53:30.367]        // -> [hasDormant <= 0x00000000]
[17:53:30.367]      __var protType   = __protocol & 0x0000FFFF;
[17:53:30.367]        // -> [protType <= 0x00000002]
[17:53:30.367]    </block>
[17:53:30.371]    <control if="protType == 1" while="" timeout="0" info="">
[17:53:30.371]      // if-block "protType == 1"
[17:53:30.371]        // =>  FALSE
[17:53:30.371]      // skip if-block "protType == 1"
[17:53:30.371]    </control>
[17:53:30.371]    <control if="protType == 2" while="" timeout="0" info="">
[17:53:30.371]      // if-block "protType == 2"
[17:53:30.371]        // =>  TRUE
[17:53:30.371]      <control if="isSWJ" while="" timeout="0" info="">
[17:53:30.371]        // if-block "isSWJ"
[17:53:30.371]          // =>  TRUE
[17:53:30.371]        <control if="hasDormant" while="" timeout="0" info="">
[17:53:30.371]          // if-block "hasDormant"
[17:53:30.371]            // =>  FALSE
[17:53:30.371]          // skip if-block "hasDormant"
[17:53:30.371]        </control>
[17:53:30.371]        <control if="!hasDormant" while="" timeout="0" info="">
[17:53:30.371]          // if-block "!hasDormant"
[17:53:30.371]            // =>  TRUE
[17:53:30.371]          <block atomic="false" info="">
[17:53:30.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:53:30.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:30.371]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:53:30.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:53:30.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:53:30.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:30.377]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:53:30.377]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:53:30.377]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:53:30.381]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:30.381]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:53:30.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:53:30.381]          </block>
[17:53:30.381]          // end if-block "!hasDormant"
[17:53:30.381]        </control>
[17:53:30.381]        // end if-block "isSWJ"
[17:53:30.381]      </control>
[17:53:30.381]      <control if="!isSWJ" while="" timeout="0" info="">
[17:53:30.381]        // if-block "!isSWJ"
[17:53:30.381]          // =>  FALSE
[17:53:30.381]        // skip if-block "!isSWJ"
[17:53:30.381]      </control>
[17:53:30.381]      <block atomic="false" info="">
[17:53:30.381]        ReadDP(0x0);
[17:53:30.381]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:53:30.381]      </block>
[17:53:30.381]      // end if-block "protType == 2"
[17:53:30.381]    </control>
[17:53:30.381]  </sequence>
[17:53:30.381]  
[17:53:30.387]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:53:30.387]  
[17:53:30.387]  <debugvars>
[17:53:30.387]    // Pre-defined
[17:53:30.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:30.387]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:30.387]    __dp=0x00000000
[17:53:30.387]    __ap=0x00000000
[17:53:30.387]    __traceout=0x00000000      (Trace Disabled)
[17:53:30.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:30.387]    __FlashAddr=0x00000000
[17:53:30.387]    __FlashLen=0x00000000
[17:53:30.387]    __FlashArg=0x00000000
[17:53:30.387]    __FlashOp=0x00000000
[17:53:30.387]    __Result=0x00000000
[17:53:30.387]  </debugvars>
[17:53:30.387]  
[17:53:30.387]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:53:30.387]    <block atomic="false" info="">
[17:53:30.387]      __var SW_DP_ABORT       = 0x0;
[17:53:30.387]        // -> [SW_DP_ABORT <= 0x00000000]
[17:53:30.387]      __var DP_CTRL_STAT      = 0x4;
[17:53:30.387]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:53:30.387]      __var DP_SELECT         = 0x8;
[17:53:30.387]        // -> [DP_SELECT <= 0x00000008]
[17:53:30.391]      __var powered_down      = 0;
[17:53:30.391]        // -> [powered_down <= 0x00000000]
[17:53:30.391]      WriteDP(DP_SELECT, 0x00000000);
[17:53:30.391]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:53:30.391]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:53:30.391]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:53:30.391]        // -> [powered_down <= 0x00000001]
[17:53:30.391]    </block>
[17:53:30.391]    <control if="powered_down" while="" timeout="0" info="">
[17:53:30.391]      // if-block "powered_down"
[17:53:30.391]        // =>  TRUE
[17:53:30.391]      <block atomic="false" info="">
[17:53:30.391]        Message(0, "Debug/System power-up request sent");
[17:53:30.398]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:53:30.400]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:53:30.400]      </block>
[17:53:30.400]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:53:30.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:53:30.401]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:53:30.401]        // while-condition  =>  FALSE
[17:53:30.401]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:53:30.401]      </control>
[17:53:30.401]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:53:30.401]        // if-block "(__protocol & 0xFFFF) == 1"
[17:53:30.401]          // =>  FALSE
[17:53:30.401]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:53:30.401]      </control>
[17:53:30.401]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:53:30.401]        // if-block "(__protocol & 0xFFFF) == 2"
[17:53:30.401]          // =>  TRUE
[17:53:30.401]        <block atomic="false" info="">
[17:53:30.404]          Message(0, "executing SWD power up");
[17:53:30.405]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:53:30.406]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:53:30.406]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:53:30.409]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:53:30.409]        </block>
[17:53:30.409]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:53:30.409]      </control>
[17:53:30.409]      // end if-block "powered_down"
[17:53:30.409]    </control>
[17:53:30.409]    <block atomic="false" info="">
[17:53:30.409]      __var DEBUG_PORT_VAL    = 0;
[17:53:30.409]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:53:30.409]      __var ACCESS_POINT_VAL  = 0;
[17:53:30.409]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:53:30.411]      __ap = 1; 
[17:53:30.411]        // -> [__ap <= 0x00000001]
[17:53:30.411]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:53:30.413]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:53:30.413]      __ap = 4;
[17:53:30.414]        // -> [__ap <= 0x00000004]
[17:53:30.414]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:53:30.417]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:53:30.417]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:53:30.417]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:53:30.421]    </block>
[17:53:30.421]    <block atomic="false" info="">
[17:53:30.421]      __var nReset = 0x80;
[17:53:30.421]        // -> [nReset <= 0x00000080]
[17:53:30.421]      __var canReadPins = 0;
[17:53:30.421]        // -> [canReadPins <= 0x00000000]
[17:53:30.421]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:53:30.421]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:53:30.421]        // -> [canReadPins <= 0x00000001]
[17:53:30.421]    </block>
[17:53:30.421]    <control if="" while="1" timeout="200" info="">
[17:53:30.421]      // while "1"  (timeout="200")
[17:53:30.421]      // while-condition  =>  TRUE
[17:53:30.421]      // while "1"  (timeout="200")
[17:53:30.421]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.424]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.424]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.424]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.424]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.424]      // while-condition  =>  TRUE
[17:53:30.424]      // while "1"  (timeout="200")
[17:53:30.425]      // while-condition  =>  TRUE
[17:53:30.425]      // while "1"  (timeout="200")
[17:53:30.425]      // while  =>  TIMEOUT
[17:53:30.425]      // end while "1"
[17:53:30.425]    </control>
[17:53:30.425]    <control if="canReadPins" while="" timeout="0" info="">
[17:53:30.425]      // if-block "canReadPins"
[17:53:30.425]        // =>  TRUE
[17:53:30.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:53:30.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:53:30.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:53:30.427]        // while-condition  =>  FALSE
[17:53:30.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:53:30.427]      </control>
[17:53:30.427]      // end if-block "canReadPins"
[17:53:30.427]    </control>
[17:53:30.427]    <control if="!canReadPins" while="" timeout="0" info="">
[17:53:30.427]      // if-block "!canReadPins"
[17:53:30.427]        // =>  FALSE
[17:53:30.429]      // skip if-block "!canReadPins"
[17:53:30.429]    </control>
[17:53:30.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:53:30.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:53:30.429]        // =>  TRUE
[17:53:30.429]      <block atomic="false" info="">
[17:53:30.429]        WriteAP(0x00, 0x190008);
[17:53:30.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:53:30.431]        WriteAP(0xF0, 0x01);
[17:53:30.432]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:53:30.432]      </block>
[17:53:30.432]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:53:30.432]    </control>
[17:53:30.432]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:53:30.432]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:53:30.432]        // =>  FALSE
[17:53:30.432]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:53:30.432]    </control>
[17:53:30.432]    <block atomic="false" info="">
[17:53:30.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:53:30.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:53:30.441]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:53:30.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:53:30.443]      __ap = 0; //lets make sure we reset the access point selection
[17:53:30.443]        // -> [__ap <= 0x00000000]
[17:53:30.443]    </block>
[17:53:30.443]  </sequence>
[17:53:30.443]  
[17:53:30.465]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:53:30.465]  
[17:53:30.465]  <debugvars>
[17:53:30.465]    // Pre-defined
[17:53:30.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:30.465]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:53:30.465]    __dp=0x00000000
[17:53:30.465]    __ap=0x00000000
[17:53:30.468]    __traceout=0x00000000      (Trace Disabled)
[17:53:30.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:30.468]    __FlashAddr=0x00000000
[17:53:30.468]    __FlashLen=0x00000000
[17:53:30.468]    __FlashArg=0x00000000
[17:53:30.468]    __FlashOp=0x00000000
[17:53:30.468]    __Result=0x00000000
[17:53:30.468]  </debugvars>
[17:53:30.468]  
[17:53:30.468]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:53:30.468]    <block atomic="false" info="">
[17:53:30.468]      __var deviceID = 0;
[17:53:30.468]        // -> [deviceID <= 0x00000000]
[17:53:30.469]      __var version = 0;
[17:53:30.469]        // -> [version <= 0x00000000]
[17:53:30.469]      __var partNum = 0;
[17:53:30.469]        // -> [partNum <= 0x00000000]
[17:53:30.469]      __var manuf = 0;
[17:53:30.469]        // -> [manuf <= 0x00000000]
[17:53:30.469]      __var isMSPM0G1X0X_G3X0X = 0;
[17:53:30.469]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:53:30.469]      __var isProduction = 0;
[17:53:30.469]        // -> [isProduction <= 0x00000000]
[17:53:30.469]      __var continueId = 0;
[17:53:30.470]        // -> [continueId <= 0x00000000]
[17:53:30.470]      deviceID =   Read32(0x41C40004);
[17:53:30.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:53:30.476]        // -> [deviceID <= 0x2BB8802F]
[17:53:30.476]      version = deviceID >> 28;
[17:53:30.476]        // -> [version <= 0x00000002]
[17:53:30.476]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:53:30.476]        // -> [partNum <= 0x0000BB88]
[17:53:30.476]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:53:30.476]        // -> [manuf <= 0x00000017]
[17:53:30.476]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:53:30.476]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:53:30.477]      isProduction = (version > 0);
[17:53:30.477]        // -> [isProduction <= 0x00000001]
[17:53:30.477]    </block>
[17:53:30.477]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:53:30.477]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:53:30.477]        // =>  FALSE
[17:53:30.477]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:53:30.477]    </control>
[17:53:30.477]    <control if="continueId == 4" while="" timeout="0" info="">
[17:53:30.477]      // if-block "continueId == 4"
[17:53:30.477]        // =>  FALSE
[17:53:30.477]      // skip if-block "continueId == 4"
[17:53:30.479]    </control>
[17:53:30.479]    <control if="!isProduction" while="" timeout="0" info="">
[17:53:30.479]      // if-block "!isProduction"
[17:53:30.479]        // =>  FALSE
[17:53:30.479]      // skip if-block "!isProduction"
[17:53:30.479]    </control>
[17:53:30.479]  </sequence>
[17:53:30.479]  
[17:53:57.469]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:53:57.469]  
[17:53:57.469]  <debugvars>
[17:53:57.469]    // Pre-defined
[17:53:57.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:53:57.469]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:53:57.469]    __dp=0x00000000
[17:53:57.469]    __ap=0x00000000
[17:53:57.469]    __traceout=0x00000000      (Trace Disabled)
[17:53:57.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:53:57.469]    __FlashAddr=0x00000000
[17:53:57.469]    __FlashLen=0x00000000
[17:53:57.469]    __FlashArg=0x00000000
[17:53:57.469]    __FlashOp=0x00000000
[17:53:57.469]    __Result=0x00000000
[17:53:57.469]  </debugvars>
[17:53:57.473]  
[17:53:57.473]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:53:57.473]    <block atomic="false" info="">
[17:53:57.473]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:53:57.473]        // -> [isSWJ <= 0x00000001]
[17:53:57.473]      __var hasDormant = __protocol & 0x00020000;
[17:53:57.473]        // -> [hasDormant <= 0x00000000]
[17:53:57.473]      __var protType   = __protocol & 0x0000FFFF;
[17:53:57.473]        // -> [protType <= 0x00000002]
[17:53:57.473]    </block>
[17:53:57.473]    <control if="protType == 1" while="" timeout="0" info="">
[17:53:57.473]      // if-block "protType == 1"
[17:53:57.473]        // =>  FALSE
[17:53:57.473]      // skip if-block "protType == 1"
[17:53:57.473]    </control>
[17:53:57.473]    <control if="protType == 2" while="" timeout="0" info="">
[17:53:57.475]      // if-block "protType == 2"
[17:53:57.475]        // =>  TRUE
[17:53:57.475]      <control if="isSWJ" while="" timeout="0" info="">
[17:53:57.475]        // if-block "isSWJ"
[17:53:57.475]          // =>  TRUE
[17:53:57.475]        <control if="hasDormant" while="" timeout="0" info="">
[17:53:57.475]          // if-block "hasDormant"
[17:53:57.475]            // =>  FALSE
[17:53:57.475]          // skip if-block "hasDormant"
[17:53:57.475]        </control>
[17:53:57.475]        <control if="!hasDormant" while="" timeout="0" info="">
[17:53:57.475]          // if-block "!hasDormant"
[17:53:57.475]            // =>  TRUE
[17:53:57.475]          <block atomic="false" info="">
[17:53:57.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:53:57.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:57.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:53:57.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:53:57.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:53:57.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:57.481]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:53:57.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:53:57.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:53:57.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:53:57.482]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:53:57.482]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:53:57.482]          </block>
[17:53:57.482]          // end if-block "!hasDormant"
[17:53:57.482]        </control>
[17:53:57.482]        // end if-block "isSWJ"
[17:53:57.482]      </control>
[17:53:57.482]      <control if="!isSWJ" while="" timeout="0" info="">
[17:53:57.482]        // if-block "!isSWJ"
[17:53:57.482]          // =>  FALSE
[17:53:57.482]        // skip if-block "!isSWJ"
[17:53:57.482]      </control>
[17:53:57.482]      <block atomic="false" info="">
[17:53:57.482]        ReadDP(0x0);
[17:53:57.490]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:53:57.490]      </block>
[17:53:57.490]      // end if-block "protType == 2"
[17:53:57.490]    </control>
[17:53:57.490]  </sequence>
[17:53:57.490]  
[17:54:12.464]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:54:12.464]  
[17:54:12.464]  <debugvars>
[17:54:12.464]    // Pre-defined
[17:54:12.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:12.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:12.464]    __dp=0x00000000
[17:54:12.464]    __ap=0x00000000
[17:54:12.467]    __traceout=0x00000000      (Trace Disabled)
[17:54:12.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:12.467]    __FlashAddr=0x00000000
[17:54:12.467]    __FlashLen=0x00000000
[17:54:12.467]    __FlashArg=0x00000000
[17:54:12.468]    __FlashOp=0x00000000
[17:54:12.468]    __Result=0x00000000
[17:54:12.468]  </debugvars>
[17:54:12.468]  
[17:54:12.468]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:54:12.469]    <block atomic="false" info="">
[17:54:12.469]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:54:12.469]        // -> [isSWJ <= 0x00000001]
[17:54:12.469]      __var hasDormant = __protocol & 0x00020000;
[17:54:12.469]        // -> [hasDormant <= 0x00000000]
[17:54:12.469]      __var protType   = __protocol & 0x0000FFFF;
[17:54:12.469]        // -> [protType <= 0x00000002]
[17:54:12.469]    </block>
[17:54:12.469]    <control if="protType == 1" while="" timeout="0" info="">
[17:54:12.469]      // if-block "protType == 1"
[17:54:12.469]        // =>  FALSE
[17:54:12.469]      // skip if-block "protType == 1"
[17:54:12.469]    </control>
[17:54:12.469]    <control if="protType == 2" while="" timeout="0" info="">
[17:54:12.470]      // if-block "protType == 2"
[17:54:12.470]        // =>  TRUE
[17:54:12.470]      <control if="isSWJ" while="" timeout="0" info="">
[17:54:12.470]        // if-block "isSWJ"
[17:54:12.470]          // =>  TRUE
[17:54:12.470]        <control if="hasDormant" while="" timeout="0" info="">
[17:54:12.470]          // if-block "hasDormant"
[17:54:12.470]            // =>  FALSE
[17:54:12.470]          // skip if-block "hasDormant"
[17:54:12.470]        </control>
[17:54:12.470]        <control if="!hasDormant" while="" timeout="0" info="">
[17:54:12.470]          // if-block "!hasDormant"
[17:54:12.470]            // =>  TRUE
[17:54:12.471]          <block atomic="false" info="">
[17:54:12.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:54:12.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:12.472]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:54:12.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:54:12.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:54:12.474]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:12.474]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:54:12.477]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:54:12.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:54:12.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:12.478]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:54:12.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:54:12.478]          </block>
[17:54:12.478]          // end if-block "!hasDormant"
[17:54:12.478]        </control>
[17:54:12.478]        // end if-block "isSWJ"
[17:54:12.478]      </control>
[17:54:12.478]      <control if="!isSWJ" while="" timeout="0" info="">
[17:54:12.478]        // if-block "!isSWJ"
[17:54:12.478]          // =>  FALSE
[17:54:12.478]        // skip if-block "!isSWJ"
[17:54:12.478]      </control>
[17:54:12.478]      <block atomic="false" info="">
[17:54:12.478]        ReadDP(0x0);
[17:54:12.478]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:54:12.478]      </block>
[17:54:12.478]      // end if-block "protType == 2"
[17:54:12.478]    </control>
[17:54:12.478]  </sequence>
[17:54:12.478]  
[17:54:12.478]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:54:12.478]  
[17:54:12.478]  <debugvars>
[17:54:12.478]    // Pre-defined
[17:54:12.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:12.487]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:12.487]    __dp=0x00000000
[17:54:12.487]    __ap=0x00000000
[17:54:12.487]    __traceout=0x00000000      (Trace Disabled)
[17:54:12.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:12.487]    __FlashAddr=0x00000000
[17:54:12.487]    __FlashLen=0x00000000
[17:54:12.487]    __FlashArg=0x00000000
[17:54:12.487]    __FlashOp=0x00000000
[17:54:12.487]    __Result=0x00000000
[17:54:12.487]  </debugvars>
[17:54:12.487]  
[17:54:12.487]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:54:12.487]    <block atomic="false" info="">
[17:54:12.488]      __var SW_DP_ABORT       = 0x0;
[17:54:12.488]        // -> [SW_DP_ABORT <= 0x00000000]
[17:54:12.488]      __var DP_CTRL_STAT      = 0x4;
[17:54:12.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:54:12.488]      __var DP_SELECT         = 0x8;
[17:54:12.488]        // -> [DP_SELECT <= 0x00000008]
[17:54:12.488]      __var powered_down      = 0;
[17:54:12.488]        // -> [powered_down <= 0x00000000]
[17:54:12.489]      WriteDP(DP_SELECT, 0x00000000);
[17:54:12.490]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:54:12.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:54:12.492]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:54:12.492]        // -> [powered_down <= 0x00000001]
[17:54:12.492]    </block>
[17:54:12.492]    <control if="powered_down" while="" timeout="0" info="">
[17:54:12.492]      // if-block "powered_down"
[17:54:12.492]        // =>  TRUE
[17:54:12.492]      <block atomic="false" info="">
[17:54:12.492]        Message(0, "Debug/System power-up request sent");
[17:54:12.497]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:54:12.498]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:54:12.498]      </block>
[17:54:12.498]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:54:12.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:54:12.500]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:54:12.500]        // while-condition  =>  FALSE
[17:54:12.500]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:54:12.500]      </control>
[17:54:12.500]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:54:12.500]        // if-block "(__protocol & 0xFFFF) == 1"
[17:54:12.500]          // =>  FALSE
[17:54:12.500]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:54:12.500]      </control>
[17:54:12.500]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:54:12.500]        // if-block "(__protocol & 0xFFFF) == 2"
[17:54:12.500]          // =>  TRUE
[17:54:12.500]        <block atomic="false" info="">
[17:54:12.500]          Message(0, "executing SWD power up");
[17:54:12.500]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:54:12.507]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:54:12.507]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:54:12.511]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:54:12.511]        </block>
[17:54:12.511]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:54:12.511]      </control>
[17:54:12.511]      // end if-block "powered_down"
[17:54:12.511]    </control>
[17:54:12.511]    <block atomic="false" info="">
[17:54:12.511]      __var DEBUG_PORT_VAL    = 0;
[17:54:12.511]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:54:12.511]      __var ACCESS_POINT_VAL  = 0;
[17:54:12.511]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:54:12.511]      __ap = 1; 
[17:54:12.511]        // -> [__ap <= 0x00000001]
[17:54:12.511]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:54:12.519]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:54:12.519]      __ap = 4;
[17:54:12.519]        // -> [__ap <= 0x00000004]
[17:54:12.519]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:54:12.523]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:54:12.523]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:54:12.523]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:54:12.527]    </block>
[17:54:12.527]    <block atomic="false" info="">
[17:54:12.527]      __var nReset = 0x80;
[17:54:12.527]        // -> [nReset <= 0x00000080]
[17:54:12.527]      __var canReadPins = 0;
[17:54:12.527]        // -> [canReadPins <= 0x00000000]
[17:54:12.527]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:54:12.530]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:54:12.530]        // -> [canReadPins <= 0x00000001]
[17:54:12.530]    </block>
[17:54:12.530]    <control if="" while="1" timeout="200" info="">
[17:54:12.530]      // while "1"  (timeout="200")
[17:54:12.530]      // while-condition  =>  TRUE
[17:54:12.530]      // while "1"  (timeout="200")
[17:54:12.530]      // while-condition  =>  TRUE
[17:54:12.530]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.532]      // while-condition  =>  TRUE
[17:54:12.532]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.534]      // while "1"  (timeout="200")
[17:54:12.534]      // while-condition  =>  TRUE
[17:54:12.535]      // while "1"  (timeout="200")
[17:54:12.535]      // while  =>  TIMEOUT
[17:54:12.535]      // end while "1"
[17:54:12.535]    </control>
[17:54:12.535]    <control if="canReadPins" while="" timeout="0" info="">
[17:54:12.535]      // if-block "canReadPins"
[17:54:12.535]        // =>  TRUE
[17:54:12.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:54:12.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:54:12.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:54:12.537]        // while-condition  =>  FALSE
[17:54:12.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:54:12.537]      </control>
[17:54:12.537]      // end if-block "canReadPins"
[17:54:12.537]    </control>
[17:54:12.537]    <control if="!canReadPins" while="" timeout="0" info="">
[17:54:12.537]      // if-block "!canReadPins"
[17:54:12.537]        // =>  FALSE
[17:54:12.537]      // skip if-block "!canReadPins"
[17:54:12.537]    </control>
[17:54:12.537]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:54:12.537]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:54:12.537]        // =>  TRUE
[17:54:12.537]      <block atomic="false" info="">
[17:54:12.537]        WriteAP(0x00, 0x190008);
[17:54:12.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:54:12.541]        WriteAP(0xF0, 0x01);
[17:54:12.544]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:54:12.544]      </block>
[17:54:12.544]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:54:12.544]    </control>
[17:54:12.544]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:54:12.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:54:12.544]        // =>  FALSE
[17:54:12.544]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:54:12.544]    </control>
[17:54:12.544]    <block atomic="false" info="">
[17:54:12.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:54:12.547]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:54:12.547]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:54:12.547]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:54:12.556]      __ap = 0; //lets make sure we reset the access point selection
[17:54:12.556]        // -> [__ap <= 0x00000000]
[17:54:12.556]    </block>
[17:54:12.556]  </sequence>
[17:54:12.556]  
[17:54:12.584]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:54:12.584]  
[17:54:12.584]  <debugvars>
[17:54:12.584]    // Pre-defined
[17:54:12.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:12.584]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:12.586]    __dp=0x00000000
[17:54:12.586]    __ap=0x00000000
[17:54:12.586]    __traceout=0x00000000      (Trace Disabled)
[17:54:12.586]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:12.586]    __FlashAddr=0x00000000
[17:54:12.586]    __FlashLen=0x00000000
[17:54:12.586]    __FlashArg=0x00000000
[17:54:12.587]    __FlashOp=0x00000000
[17:54:12.587]    __Result=0x00000000
[17:54:12.587]  </debugvars>
[17:54:12.587]  
[17:54:12.587]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:54:12.587]    <block atomic="false" info="">
[17:54:12.587]      __var deviceID = 0;
[17:54:12.587]        // -> [deviceID <= 0x00000000]
[17:54:12.587]      __var version = 0;
[17:54:12.587]        // -> [version <= 0x00000000]
[17:54:12.587]      __var partNum = 0;
[17:54:12.588]        // -> [partNum <= 0x00000000]
[17:54:12.588]      __var manuf = 0;
[17:54:12.588]        // -> [manuf <= 0x00000000]
[17:54:12.588]      __var isMSPM0G1X0X_G3X0X = 0;
[17:54:12.588]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:54:12.588]      __var isProduction = 0;
[17:54:12.588]        // -> [isProduction <= 0x00000000]
[17:54:12.588]      __var continueId = 0;
[17:54:12.588]        // -> [continueId <= 0x00000000]
[17:54:12.588]      deviceID =   Read32(0x41C40004);
[17:54:12.588]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:54:12.588]        // -> [deviceID <= 0x2BB8802F]
[17:54:12.588]      version = deviceID >> 28;
[17:54:12.588]        // -> [version <= 0x00000002]
[17:54:12.588]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:54:12.588]        // -> [partNum <= 0x0000BB88]
[17:54:12.595]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:54:12.595]        // -> [manuf <= 0x00000017]
[17:54:12.595]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:54:12.595]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:54:12.595]      isProduction = (version > 0);
[17:54:12.595]        // -> [isProduction <= 0x00000001]
[17:54:12.595]    </block>
[17:54:12.595]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:54:12.595]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:54:12.595]        // =>  FALSE
[17:54:12.595]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:54:12.595]    </control>
[17:54:12.595]    <control if="continueId == 4" while="" timeout="0" info="">
[17:54:12.596]      // if-block "continueId == 4"
[17:54:12.596]        // =>  FALSE
[17:54:12.597]      // skip if-block "continueId == 4"
[17:54:12.597]    </control>
[17:54:12.597]    <control if="!isProduction" while="" timeout="0" info="">
[17:54:12.597]      // if-block "!isProduction"
[17:54:12.597]        // =>  FALSE
[17:54:12.597]      // skip if-block "!isProduction"
[17:54:12.597]    </control>
[17:54:12.597]  </sequence>
[17:54:12.597]  
[17:54:37.705]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:54:37.705]  
[17:54:37.705]  <debugvars>
[17:54:37.705]    // Pre-defined
[17:54:37.705]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:37.705]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:37.705]    __dp=0x00000000
[17:54:37.705]    __ap=0x00000000
[17:54:37.705]    __traceout=0x00000000      (Trace Disabled)
[17:54:37.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:37.705]    __FlashAddr=0x00000000
[17:54:37.705]    __FlashLen=0x00000000
[17:54:37.705]    __FlashArg=0x00000000
[17:54:37.705]    __FlashOp=0x00000000
[17:54:37.705]    __Result=0x00000000
[17:54:37.705]  </debugvars>
[17:54:37.705]  
[17:54:37.705]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:54:37.705]    <block atomic="false" info="">
[17:54:37.705]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:54:37.705]        // -> [isSWJ <= 0x00000001]
[17:54:37.705]      __var hasDormant = __protocol & 0x00020000;
[17:54:37.705]        // -> [hasDormant <= 0x00000000]
[17:54:37.705]      __var protType   = __protocol & 0x0000FFFF;
[17:54:37.705]        // -> [protType <= 0x00000002]
[17:54:37.705]    </block>
[17:54:37.705]    <control if="protType == 1" while="" timeout="0" info="">
[17:54:37.705]      // if-block "protType == 1"
[17:54:37.705]        // =>  FALSE
[17:54:37.705]      // skip if-block "protType == 1"
[17:54:37.705]    </control>
[17:54:37.705]    <control if="protType == 2" while="" timeout="0" info="">
[17:54:37.709]      // if-block "protType == 2"
[17:54:37.709]        // =>  TRUE
[17:54:37.709]      <control if="isSWJ" while="" timeout="0" info="">
[17:54:37.709]        // if-block "isSWJ"
[17:54:37.709]          // =>  TRUE
[17:54:37.709]        <control if="hasDormant" while="" timeout="0" info="">
[17:54:37.709]          // if-block "hasDormant"
[17:54:37.709]            // =>  FALSE
[17:54:37.709]          // skip if-block "hasDormant"
[17:54:37.709]        </control>
[17:54:37.709]        <control if="!hasDormant" while="" timeout="0" info="">
[17:54:37.709]          // if-block "!hasDormant"
[17:54:37.709]            // =>  TRUE
[17:54:37.709]          <block atomic="false" info="">
[17:54:37.709]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:54:37.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:37.711]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:54:37.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:54:37.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:54:37.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:37.714]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:54:37.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:54:37.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:54:37.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:54:37.718]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:54:37.720]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:54:37.720]          </block>
[17:54:37.721]          // end if-block "!hasDormant"
[17:54:37.721]        </control>
[17:54:37.721]        // end if-block "isSWJ"
[17:54:37.721]      </control>
[17:54:37.721]      <control if="!isSWJ" while="" timeout="0" info="">
[17:54:37.721]        // if-block "!isSWJ"
[17:54:37.721]          // =>  FALSE
[17:54:37.721]        // skip if-block "!isSWJ"
[17:54:37.721]      </control>
[17:54:37.721]      <block atomic="false" info="">
[17:54:37.721]        ReadDP(0x0);
[17:54:37.724]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:54:37.724]      </block>
[17:54:37.724]      // end if-block "protType == 2"
[17:54:37.724]    </control>
[17:54:37.724]  </sequence>
[17:54:37.724]  
[17:54:37.727]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:54:37.727]  
[17:54:37.727]  <debugvars>
[17:54:37.727]    // Pre-defined
[17:54:37.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:37.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:37.727]    __dp=0x00000000
[17:54:37.727]    __ap=0x00000000
[17:54:37.727]    __traceout=0x00000000      (Trace Disabled)
[17:54:37.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:37.727]    __FlashAddr=0x00000000
[17:54:37.728]    __FlashLen=0x00000000
[17:54:37.728]    __FlashArg=0x00000000
[17:54:37.728]    __FlashOp=0x00000000
[17:54:37.728]    __Result=0x00000000
[17:54:37.728]  </debugvars>
[17:54:37.728]  
[17:54:37.728]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:54:37.728]    <block atomic="false" info="">
[17:54:37.728]      __var SW_DP_ABORT       = 0x0;
[17:54:37.728]        // -> [SW_DP_ABORT <= 0x00000000]
[17:54:37.728]      __var DP_CTRL_STAT      = 0x4;
[17:54:37.728]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:54:37.728]      __var DP_SELECT         = 0x8;
[17:54:37.728]        // -> [DP_SELECT <= 0x00000008]
[17:54:37.729]      __var powered_down      = 0;
[17:54:37.729]        // -> [powered_down <= 0x00000000]
[17:54:37.729]      WriteDP(DP_SELECT, 0x00000000);
[17:54:37.729]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:54:37.729]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:54:37.732]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:54:37.734]        // -> [powered_down <= 0x00000001]
[17:54:37.734]    </block>
[17:54:37.734]    <control if="powered_down" while="" timeout="0" info="">
[17:54:37.734]      // if-block "powered_down"
[17:54:37.734]        // =>  TRUE
[17:54:37.734]      <block atomic="false" info="">
[17:54:37.734]        Message(0, "Debug/System power-up request sent");
[17:54:37.737]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:54:37.739]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:54:37.739]      </block>
[17:54:37.739]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:54:37.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:54:37.739]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:54:37.739]        // while-condition  =>  FALSE
[17:54:37.739]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:54:37.739]      </control>
[17:54:37.739]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:54:37.739]        // if-block "(__protocol & 0xFFFF) == 1"
[17:54:37.739]          // =>  FALSE
[17:54:37.739]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:54:37.739]      </control>
[17:54:37.739]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:54:37.739]        // if-block "(__protocol & 0xFFFF) == 2"
[17:54:37.739]          // =>  TRUE
[17:54:37.739]        <block atomic="false" info="">
[17:54:37.739]          Message(0, "executing SWD power up");
[17:54:37.744]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:54:37.746]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:54:37.746]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:54:37.748]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:54:37.748]        </block>
[17:54:37.748]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:54:37.748]      </control>
[17:54:37.749]      // end if-block "powered_down"
[17:54:37.749]    </control>
[17:54:37.749]    <block atomic="false" info="">
[17:54:37.749]      __var DEBUG_PORT_VAL    = 0;
[17:54:37.749]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:54:37.749]      __var ACCESS_POINT_VAL  = 0;
[17:54:37.749]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:54:37.749]      __ap = 1; 
[17:54:37.749]        // -> [__ap <= 0x00000001]
[17:54:37.749]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:54:37.753]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:54:37.753]      __ap = 4;
[17:54:37.753]        // -> [__ap <= 0x00000004]
[17:54:37.753]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:54:37.758]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:54:37.758]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:54:37.758]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:54:37.761]    </block>
[17:54:37.761]    <block atomic="false" info="">
[17:54:37.761]      __var nReset = 0x80;
[17:54:37.761]        // -> [nReset <= 0x00000080]
[17:54:37.761]      __var canReadPins = 0;
[17:54:37.761]        // -> [canReadPins <= 0x00000000]
[17:54:37.761]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:54:37.762]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:54:37.762]        // -> [canReadPins <= 0x00000001]
[17:54:37.762]    </block>
[17:54:37.762]    <control if="" while="1" timeout="200" info="">
[17:54:37.762]      // while "1"  (timeout="200")
[17:54:37.762]      // while-condition  =>  TRUE
[17:54:37.762]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.764]      // while "1"  (timeout="200")
[17:54:37.764]      // while-condition  =>  TRUE
[17:54:37.766]      // while "1"  (timeout="200")
[17:54:37.766]      // while-condition  =>  TRUE
[17:54:37.766]      // while "1"  (timeout="200")
[17:54:37.766]      // while-condition  =>  TRUE
[17:54:37.766]      // while "1"  (timeout="200")
[17:54:37.766]      // while-condition  =>  TRUE
[17:54:37.766]      // while "1"  (timeout="200")
[17:54:37.766]      // while-condition  =>  TRUE
[17:54:37.766]      // while "1"  (timeout="200")
[17:54:37.766]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.767]      // while-condition  =>  TRUE
[17:54:37.767]      // while "1"  (timeout="200")
[17:54:37.769]      // while-condition  =>  TRUE
[17:54:37.769]      // while "1"  (timeout="200")
[17:54:37.769]      // while  =>  TIMEOUT
[17:54:37.769]      // end while "1"
[17:54:37.769]    </control>
[17:54:37.769]    <control if="canReadPins" while="" timeout="0" info="">
[17:54:37.769]      // if-block "canReadPins"
[17:54:37.769]        // =>  TRUE
[17:54:37.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:54:37.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:54:37.770]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:54:37.770]        // while-condition  =>  FALSE
[17:54:37.770]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:54:37.770]      </control>
[17:54:37.770]      // end if-block "canReadPins"
[17:54:37.770]    </control>
[17:54:37.770]    <control if="!canReadPins" while="" timeout="0" info="">
[17:54:37.770]      // if-block "!canReadPins"
[17:54:37.773]        // =>  FALSE
[17:54:37.773]      // skip if-block "!canReadPins"
[17:54:37.773]    </control>
[17:54:37.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:54:37.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:54:37.773]        // =>  TRUE
[17:54:37.773]      <block atomic="false" info="">
[17:54:37.773]        WriteAP(0x00, 0x190008);
[17:54:37.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:54:37.774]        WriteAP(0xF0, 0x01);
[17:54:37.778]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:54:37.779]      </block>
[17:54:37.779]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:54:37.779]    </control>
[17:54:37.779]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:54:37.779]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:54:37.779]        // =>  FALSE
[17:54:37.779]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:54:37.779]    </control>
[17:54:37.779]    <block atomic="false" info="">
[17:54:37.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:54:37.782]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:54:37.782]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:54:37.782]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:54:37.784]      __ap = 0; //lets make sure we reset the access point selection
[17:54:37.785]        // -> [__ap <= 0x00000000]
[17:54:37.785]    </block>
[17:54:37.785]  </sequence>
[17:54:37.785]  
[17:54:37.807]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:54:37.807]  
[17:54:37.808]  <debugvars>
[17:54:37.808]    // Pre-defined
[17:54:37.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:54:37.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:54:37.808]    __dp=0x00000000
[17:54:37.808]    __ap=0x00000000
[17:54:37.808]    __traceout=0x00000000      (Trace Disabled)
[17:54:37.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:54:37.808]    __FlashAddr=0x00000000
[17:54:37.808]    __FlashLen=0x00000000
[17:54:37.808]    __FlashArg=0x00000000
[17:54:37.808]    __FlashOp=0x00000000
[17:54:37.808]    __Result=0x00000000
[17:54:37.808]  </debugvars>
[17:54:37.808]  
[17:54:37.808]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:54:37.808]    <block atomic="false" info="">
[17:54:37.808]      __var deviceID = 0;
[17:54:37.809]        // -> [deviceID <= 0x00000000]
[17:54:37.810]      __var version = 0;
[17:54:37.810]        // -> [version <= 0x00000000]
[17:54:37.810]      __var partNum = 0;
[17:54:37.810]        // -> [partNum <= 0x00000000]
[17:54:37.810]      __var manuf = 0;
[17:54:37.810]        // -> [manuf <= 0x00000000]
[17:54:37.810]      __var isMSPM0G1X0X_G3X0X = 0;
[17:54:37.810]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:54:37.810]      __var isProduction = 0;
[17:54:37.810]        // -> [isProduction <= 0x00000000]
[17:54:37.810]      __var continueId = 0;
[17:54:37.810]        // -> [continueId <= 0x00000000]
[17:54:37.810]      deviceID =   Read32(0x41C40004);
[17:54:37.815]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:54:37.815]        // -> [deviceID <= 0x2BB8802F]
[17:54:37.815]      version = deviceID >> 28;
[17:54:37.815]        // -> [version <= 0x00000002]
[17:54:37.815]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:54:37.815]        // -> [partNum <= 0x0000BB88]
[17:54:37.815]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:54:37.815]        // -> [manuf <= 0x00000017]
[17:54:37.815]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:54:37.815]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:54:37.815]      isProduction = (version > 0);
[17:54:37.815]        // -> [isProduction <= 0x00000001]
[17:54:37.817]    </block>
[17:54:37.817]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:54:37.817]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:54:37.817]        // =>  FALSE
[17:54:37.817]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:54:37.817]    </control>
[17:54:37.817]    <control if="continueId == 4" while="" timeout="0" info="">
[17:54:37.817]      // if-block "continueId == 4"
[17:54:37.817]        // =>  FALSE
[17:54:37.817]      // skip if-block "continueId == 4"
[17:54:37.817]    </control>
[17:54:37.817]    <control if="!isProduction" while="" timeout="0" info="">
[17:54:37.817]      // if-block "!isProduction"
[17:54:37.818]        // =>  FALSE
[17:54:37.818]      // skip if-block "!isProduction"
[17:54:37.818]    </control>
[17:54:37.818]  </sequence>
[17:54:37.818]  
[17:55:12.948]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:55:12.948]  
[17:55:12.957]  <debugvars>
[17:55:12.957]    // Pre-defined
[17:55:12.957]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:55:12.957]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:55:12.957]    __dp=0x00000000
[17:55:12.957]    __ap=0x00000000
[17:55:12.957]    __traceout=0x00000000      (Trace Disabled)
[17:55:12.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:55:12.957]    __FlashAddr=0x00000000
[17:55:12.957]    __FlashLen=0x00000000
[17:55:12.957]    __FlashArg=0x00000000
[17:55:12.957]    __FlashOp=0x00000000
[17:55:12.957]    __Result=0x00000000
[17:55:12.957]  </debugvars>
[17:55:12.957]  
[17:55:12.957]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:55:12.957]    <block atomic="false" info="">
[17:55:12.957]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:55:12.957]        // -> [isSWJ <= 0x00000001]
[17:55:12.957]      __var hasDormant = __protocol & 0x00020000;
[17:55:12.957]        // -> [hasDormant <= 0x00000000]
[17:55:12.957]      __var protType   = __protocol & 0x0000FFFF;
[17:55:12.957]        // -> [protType <= 0x00000002]
[17:55:12.957]    </block>
[17:55:12.957]    <control if="protType == 1" while="" timeout="0" info="">
[17:55:12.957]      // if-block "protType == 1"
[17:55:12.957]        // =>  FALSE
[17:55:12.957]      // skip if-block "protType == 1"
[17:55:12.957]    </control>
[17:55:12.957]    <control if="protType == 2" while="" timeout="0" info="">
[17:55:12.957]      // if-block "protType == 2"
[17:55:12.957]        // =>  TRUE
[17:55:12.957]      <control if="isSWJ" while="" timeout="0" info="">
[17:55:12.957]        // if-block "isSWJ"
[17:55:12.957]          // =>  TRUE
[17:55:12.957]        <control if="hasDormant" while="" timeout="0" info="">
[17:55:12.957]          // if-block "hasDormant"
[17:55:12.957]            // =>  FALSE
[17:55:12.957]          // skip if-block "hasDormant"
[17:55:12.957]        </control>
[17:55:12.957]        <control if="!hasDormant" while="" timeout="0" info="">
[17:55:12.957]          // if-block "!hasDormant"
[17:55:12.957]            // =>  TRUE
[17:55:12.957]          <block atomic="false" info="">
[17:55:12.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:55:12.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:55:12.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:55:12.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:55:12.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:55:12.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:55:12.971]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:55:12.975]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:55:12.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:55:12.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:55:12.976]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:55:12.978]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:55:12.978]          </block>
[17:55:12.978]          // end if-block "!hasDormant"
[17:55:12.978]        </control>
[17:55:12.978]        // end if-block "isSWJ"
[17:55:12.978]      </control>
[17:55:12.978]      <control if="!isSWJ" while="" timeout="0" info="">
[17:55:12.978]        // if-block "!isSWJ"
[17:55:12.978]          // =>  FALSE
[17:55:12.978]        // skip if-block "!isSWJ"
[17:55:12.978]      </control>
[17:55:12.978]      <block atomic="false" info="">
[17:55:12.978]        ReadDP(0x0);
[17:55:12.978]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:55:12.978]      </block>
[17:55:12.978]      // end if-block "protType == 2"
[17:55:12.982]    </control>
[17:55:12.982]  </sequence>
[17:55:12.982]  
[17:55:12.984]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:55:12.984]  
[17:55:12.984]  <debugvars>
[17:55:12.984]    // Pre-defined
[17:55:12.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:55:12.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:55:12.984]    __dp=0x00000000
[17:55:12.985]    __ap=0x00000000
[17:55:12.985]    __traceout=0x00000000      (Trace Disabled)
[17:55:12.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:55:12.985]    __FlashAddr=0x00000000
[17:55:12.985]    __FlashLen=0x00000000
[17:55:12.985]    __FlashArg=0x00000000
[17:55:12.985]    __FlashOp=0x00000000
[17:55:12.985]    __Result=0x00000000
[17:55:12.985]  </debugvars>
[17:55:12.985]  
[17:55:12.985]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:55:12.986]    <block atomic="false" info="">
[17:55:12.986]      __var SW_DP_ABORT       = 0x0;
[17:55:12.986]        // -> [SW_DP_ABORT <= 0x00000000]
[17:55:12.986]      __var DP_CTRL_STAT      = 0x4;
[17:55:12.986]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:55:12.986]      __var DP_SELECT         = 0x8;
[17:55:12.986]        // -> [DP_SELECT <= 0x00000008]
[17:55:12.986]      __var powered_down      = 0;
[17:55:12.986]        // -> [powered_down <= 0x00000000]
[17:55:12.986]      WriteDP(DP_SELECT, 0x00000000);
[17:55:12.989]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:55:12.989]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:55:12.990]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:55:12.990]        // -> [powered_down <= 0x00000001]
[17:55:12.990]    </block>
[17:55:12.990]    <control if="powered_down" while="" timeout="0" info="">
[17:55:12.992]      // if-block "powered_down"
[17:55:12.992]        // =>  TRUE
[17:55:12.992]      <block atomic="false" info="">
[17:55:12.992]        Message(0, "Debug/System power-up request sent");
[17:55:12.994]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:55:12.996]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:55:12.996]      </block>
[17:55:12.996]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:55:12.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:55:12.996]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:55:12.996]        // while-condition  =>  FALSE
[17:55:12.996]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:55:12.998]      </control>
[17:55:12.998]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:55:12.998]        // if-block "(__protocol & 0xFFFF) == 1"
[17:55:12.998]          // =>  FALSE
[17:55:12.998]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:55:12.998]      </control>
[17:55:12.998]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:55:12.998]        // if-block "(__protocol & 0xFFFF) == 2"
[17:55:12.998]          // =>  TRUE
[17:55:12.998]        <block atomic="false" info="">
[17:55:13.000]          Message(0, "executing SWD power up");
[17:55:13.002]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:55:13.004]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:55:13.004]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:55:13.004]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:55:13.004]        </block>
[17:55:13.004]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:55:13.004]      </control>
[17:55:13.004]      // end if-block "powered_down"
[17:55:13.004]    </control>
[17:55:13.004]    <block atomic="false" info="">
[17:55:13.004]      __var DEBUG_PORT_VAL    = 0;
[17:55:13.007]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:55:13.007]      __var ACCESS_POINT_VAL  = 0;
[17:55:13.007]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:55:13.007]      __ap = 1; 
[17:55:13.007]        // -> [__ap <= 0x00000001]
[17:55:13.007]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:55:13.010]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:55:13.010]      __ap = 4;
[17:55:13.010]        // -> [__ap <= 0x00000004]
[17:55:13.010]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:55:13.010]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:55:13.010]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:55:13.010]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:55:13.018]    </block>
[17:55:13.019]    <block atomic="false" info="">
[17:55:13.019]      __var nReset = 0x80;
[17:55:13.019]        // -> [nReset <= 0x00000080]
[17:55:13.019]      __var canReadPins = 0;
[17:55:13.019]        // -> [canReadPins <= 0x00000000]
[17:55:13.019]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:55:13.020]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:55:13.020]        // -> [canReadPins <= 0x00000001]
[17:55:13.020]    </block>
[17:55:13.022]    <control if="" while="1" timeout="200" info="">
[17:55:13.022]      // while "1"  (timeout="200")
[17:55:13.022]      // while-condition  =>  TRUE
[17:55:13.022]      // while "1"  (timeout="200")
[17:55:13.022]      // while-condition  =>  TRUE
[17:55:13.022]      // while "1"  (timeout="200")
[17:55:13.022]      // while-condition  =>  TRUE
[17:55:13.022]      // while "1"  (timeout="200")
[17:55:13.022]      // while-condition  =>  TRUE
[17:55:13.022]      // while "1"  (timeout="200")
[17:55:13.022]      // while-condition  =>  TRUE
[17:55:13.023]      // while "1"  (timeout="200")
[17:55:13.023]      // while-condition  =>  TRUE
[17:55:13.023]      // while "1"  (timeout="200")
[17:55:13.023]      // while-condition  =>  TRUE
[17:55:13.023]      // while "1"  (timeout="200")
[17:55:13.023]      // while-condition  =>  TRUE
[17:55:13.023]      // while "1"  (timeout="200")
[17:55:13.023]      // while-condition  =>  TRUE
[17:55:13.023]      // while "1"  (timeout="200")
[17:55:13.024]      // while-condition  =>  TRUE
[17:55:13.024]      // while "1"  (timeout="200")
[17:55:13.024]      // while-condition  =>  TRUE
[17:55:13.024]      // while "1"  (timeout="200")
[17:55:13.024]      // while-condition  =>  TRUE
[17:55:13.024]      // while "1"  (timeout="200")
[17:55:13.024]      // while-condition  =>  TRUE
[17:55:13.024]      // while "1"  (timeout="200")
[17:55:13.024]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.025]      // while-condition  =>  TRUE
[17:55:13.025]      // while "1"  (timeout="200")
[17:55:13.028]      // while-condition  =>  TRUE
[17:55:13.028]      // while "1"  (timeout="200")
[17:55:13.028]      // while-condition  =>  TRUE
[17:55:13.028]      // while "1"  (timeout="200")
[17:55:13.028]      // while-condition  =>  TRUE
[17:55:13.028]      // while "1"  (timeout="200")
[17:55:13.028]      // while-condition  =>  TRUE
[17:55:13.028]      // while "1"  (timeout="200")
[17:55:13.028]      // while-condition  =>  TRUE
[17:55:13.028]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.030]      // while-condition  =>  TRUE
[17:55:13.030]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.031]      // while-condition  =>  TRUE
[17:55:13.031]      // while "1"  (timeout="200")
[17:55:13.032]      // while-condition  =>  TRUE
[17:55:13.032]      // while "1"  (timeout="200")
[17:55:13.032]      // while-condition  =>  TRUE
[17:55:13.032]      // while "1"  (timeout="200")
[17:55:13.032]      // while-condition  =>  TRUE
[17:55:13.032]      // while "1"  (timeout="200")
[17:55:13.032]      // while-condition  =>  TRUE
[17:55:13.032]      // while "1"  (timeout="200")
[17:55:13.032]      // while-condition  =>  TRUE
[17:55:13.032]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.033]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.033]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.033]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.033]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.033]      // while "1"  (timeout="200")
[17:55:13.033]      // while-condition  =>  TRUE
[17:55:13.034]      // while "1"  (timeout="200")
[17:55:13.034]      // while  =>  TIMEOUT
[17:55:13.034]      // end while "1"
[17:55:13.034]    </control>
[17:55:13.034]    <control if="canReadPins" while="" timeout="0" info="">
[17:55:13.034]      // if-block "canReadPins"
[17:55:13.034]        // =>  TRUE
[17:55:13.034]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:55:13.034]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:55:13.036]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:55:13.037]        // while-condition  =>  FALSE
[17:55:13.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:55:13.037]      </control>
[17:55:13.037]      // end if-block "canReadPins"
[17:55:13.037]    </control>
[17:55:13.037]    <control if="!canReadPins" while="" timeout="0" info="">
[17:55:13.037]      // if-block "!canReadPins"
[17:55:13.037]        // =>  FALSE
[17:55:13.038]      // skip if-block "!canReadPins"
[17:55:13.038]    </control>
[17:55:13.038]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:55:13.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:55:13.038]        // =>  TRUE
[17:55:13.038]      <block atomic="false" info="">
[17:55:13.039]        WriteAP(0x00, 0x190008);
[17:55:13.040]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:55:13.040]        WriteAP(0xF0, 0x01);
[17:55:13.045]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:55:13.045]      </block>
[17:55:13.045]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:55:13.045]    </control>
[17:55:13.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:55:13.045]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:55:13.045]        // =>  FALSE
[17:55:13.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:55:13.046]    </control>
[17:55:13.046]    <block atomic="false" info="">
[17:55:13.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:55:13.047]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:55:13.047]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:55:13.047]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:55:13.053]      __ap = 0; //lets make sure we reset the access point selection
[17:55:13.053]        // -> [__ap <= 0x00000000]
[17:55:13.053]    </block>
[17:55:13.053]  </sequence>
[17:55:13.053]  
[17:55:13.081]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:55:13.081]  
[17:55:13.081]  <debugvars>
[17:55:13.081]    // Pre-defined
[17:55:13.081]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:55:13.081]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:55:13.081]    __dp=0x00000000
[17:55:13.081]    __ap=0x00000000
[17:55:13.081]    __traceout=0x00000000      (Trace Disabled)
[17:55:13.081]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:55:13.081]    __FlashAddr=0x00000000
[17:55:13.081]    __FlashLen=0x00000000
[17:55:13.081]    __FlashArg=0x00000000
[17:55:13.081]    __FlashOp=0x00000000
[17:55:13.082]    __Result=0x00000000
[17:55:13.082]  </debugvars>
[17:55:13.082]  
[17:55:13.082]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:55:13.082]    <block atomic="false" info="">
[17:55:13.082]      __var deviceID = 0;
[17:55:13.082]        // -> [deviceID <= 0x00000000]
[17:55:13.082]      __var version = 0;
[17:55:13.082]        // -> [version <= 0x00000000]
[17:55:13.083]      __var partNum = 0;
[17:55:13.083]        // -> [partNum <= 0x00000000]
[17:55:13.083]      __var manuf = 0;
[17:55:13.083]        // -> [manuf <= 0x00000000]
[17:55:13.083]      __var isMSPM0G1X0X_G3X0X = 0;
[17:55:13.083]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:55:13.084]      __var isProduction = 0;
[17:55:13.084]        // -> [isProduction <= 0x00000000]
[17:55:13.084]      __var continueId = 0;
[17:55:13.084]        // -> [continueId <= 0x00000000]
[17:55:13.084]      deviceID =   Read32(0x41C40004);
[17:55:13.088]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:55:13.088]        // -> [deviceID <= 0x2BB8802F]
[17:55:13.088]      version = deviceID >> 28;
[17:55:13.088]        // -> [version <= 0x00000002]
[17:55:13.088]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:55:13.088]        // -> [partNum <= 0x0000BB88]
[17:55:13.088]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:55:13.088]        // -> [manuf <= 0x00000017]
[17:55:13.088]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:55:13.088]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:55:13.088]      isProduction = (version > 0);
[17:55:13.088]        // -> [isProduction <= 0x00000001]
[17:55:13.088]    </block>
[17:55:13.088]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:55:13.088]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:55:13.088]        // =>  FALSE
[17:55:13.088]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:55:13.088]    </control>
[17:55:13.088]    <control if="continueId == 4" while="" timeout="0" info="">
[17:55:13.088]      // if-block "continueId == 4"
[17:55:13.088]        // =>  FALSE
[17:55:13.088]      // skip if-block "continueId == 4"
[17:55:13.088]    </control>
[17:55:13.088]    <control if="!isProduction" while="" timeout="0" info="">
[17:55:13.088]      // if-block "!isProduction"
[17:55:13.088]        // =>  FALSE
[17:55:13.088]      // skip if-block "!isProduction"
[17:55:13.088]    </control>
[17:55:13.088]  </sequence>
[17:55:13.088]  
[17:57:03.453]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:57:03.453]  
[17:57:03.457]  <debugvars>
[17:57:03.457]    // Pre-defined
[17:57:03.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:03.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:03.457]    __dp=0x00000000
[17:57:03.457]    __ap=0x00000000
[17:57:03.457]    __traceout=0x00000000      (Trace Disabled)
[17:57:03.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:03.458]    __FlashAddr=0x00000000
[17:57:03.458]    __FlashLen=0x00000000
[17:57:03.458]    __FlashArg=0x00000000
[17:57:03.458]    __FlashOp=0x00000000
[17:57:03.458]    __Result=0x00000000
[17:57:03.458]  </debugvars>
[17:57:03.458]  
[17:57:03.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:57:03.458]    <block atomic="false" info="">
[17:57:03.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:57:03.458]        // -> [isSWJ <= 0x00000001]
[17:57:03.458]      __var hasDormant = __protocol & 0x00020000;
[17:57:03.458]        // -> [hasDormant <= 0x00000000]
[17:57:03.458]      __var protType   = __protocol & 0x0000FFFF;
[17:57:03.458]        // -> [protType <= 0x00000002]
[17:57:03.458]    </block>
[17:57:03.458]    <control if="protType == 1" while="" timeout="0" info="">
[17:57:03.458]      // if-block "protType == 1"
[17:57:03.458]        // =>  FALSE
[17:57:03.458]      // skip if-block "protType == 1"
[17:57:03.458]    </control>
[17:57:03.458]    <control if="protType == 2" while="" timeout="0" info="">
[17:57:03.458]      // if-block "protType == 2"
[17:57:03.458]        // =>  TRUE
[17:57:03.458]      <control if="isSWJ" while="" timeout="0" info="">
[17:57:03.458]        // if-block "isSWJ"
[17:57:03.458]          // =>  TRUE
[17:57:03.458]        <control if="hasDormant" while="" timeout="0" info="">
[17:57:03.458]          // if-block "hasDormant"
[17:57:03.458]            // =>  FALSE
[17:57:03.458]          // skip if-block "hasDormant"
[17:57:03.458]        </control>
[17:57:03.458]        <control if="!hasDormant" while="" timeout="0" info="">
[17:57:03.458]          // if-block "!hasDormant"
[17:57:03.458]            // =>  TRUE
[17:57:03.458]          <block atomic="false" info="">
[17:57:03.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:57:03.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:03.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:57:03.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:57:03.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:57:03.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:03.466]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:57:03.467]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:57:03.467]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:57:03.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:03.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:57:03.469]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:57:03.469]          </block>
[17:57:03.469]          // end if-block "!hasDormant"
[17:57:03.469]        </control>
[17:57:03.469]        // end if-block "isSWJ"
[17:57:03.469]      </control>
[17:57:03.469]      <control if="!isSWJ" while="" timeout="0" info="">
[17:57:03.469]        // if-block "!isSWJ"
[17:57:03.469]          // =>  FALSE
[17:57:03.469]        // skip if-block "!isSWJ"
[17:57:03.469]      </control>
[17:57:03.469]      <block atomic="false" info="">
[17:57:03.469]        ReadDP(0x0);
[17:57:03.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:57:03.473]      </block>
[17:57:03.473]      // end if-block "protType == 2"
[17:57:03.473]    </control>
[17:57:03.473]  </sequence>
[17:57:03.473]  
[17:57:03.473]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:57:03.473]  
[17:57:03.476]  <debugvars>
[17:57:03.476]    // Pre-defined
[17:57:03.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:03.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:03.476]    __dp=0x00000000
[17:57:03.476]    __ap=0x00000000
[17:57:03.477]    __traceout=0x00000000      (Trace Disabled)
[17:57:03.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:03.477]    __FlashAddr=0x00000000
[17:57:03.477]    __FlashLen=0x00000000
[17:57:03.477]    __FlashArg=0x00000000
[17:57:03.477]    __FlashOp=0x00000000
[17:57:03.477]    __Result=0x00000000
[17:57:03.477]  </debugvars>
[17:57:03.477]  
[17:57:03.477]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:57:03.477]    <block atomic="false" info="">
[17:57:03.477]      __var SW_DP_ABORT       = 0x0;
[17:57:03.477]        // -> [SW_DP_ABORT <= 0x00000000]
[17:57:03.477]      __var DP_CTRL_STAT      = 0x4;
[17:57:03.477]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:57:03.477]      __var DP_SELECT         = 0x8;
[17:57:03.477]        // -> [DP_SELECT <= 0x00000008]
[17:57:03.477]      __var powered_down      = 0;
[17:57:03.477]        // -> [powered_down <= 0x00000000]
[17:57:03.477]      WriteDP(DP_SELECT, 0x00000000);
[17:57:03.477]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:57:03.477]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:57:03.477]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:57:03.477]        // -> [powered_down <= 0x00000001]
[17:57:03.477]    </block>
[17:57:03.477]    <control if="powered_down" while="" timeout="0" info="">
[17:57:03.477]      // if-block "powered_down"
[17:57:03.477]        // =>  TRUE
[17:57:03.477]      <block atomic="false" info="">
[17:57:03.477]        Message(0, "Debug/System power-up request sent");
[17:57:03.486]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:57:03.487]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:57:03.487]      </block>
[17:57:03.487]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:57:03.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:57:03.492]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:57:03.492]        // while-condition  =>  FALSE
[17:57:03.492]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:57:03.492]      </control>
[17:57:03.492]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:57:03.492]        // if-block "(__protocol & 0xFFFF) == 1"
[17:57:03.492]          // =>  FALSE
[17:57:03.492]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:57:03.492]      </control>
[17:57:03.492]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:57:03.492]        // if-block "(__protocol & 0xFFFF) == 2"
[17:57:03.492]          // =>  TRUE
[17:57:03.492]        <block atomic="false" info="">
[17:57:03.492]          Message(0, "executing SWD power up");
[17:57:03.494]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:57:03.496]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:57:03.497]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:57:03.499]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:57:03.499]        </block>
[17:57:03.499]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:57:03.499]      </control>
[17:57:03.499]      // end if-block "powered_down"
[17:57:03.499]    </control>
[17:57:03.499]    <block atomic="false" info="">
[17:57:03.499]      __var DEBUG_PORT_VAL    = 0;
[17:57:03.499]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:57:03.499]      __var ACCESS_POINT_VAL  = 0;
[17:57:03.499]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:57:03.499]      __ap = 1; 
[17:57:03.499]        // -> [__ap <= 0x00000001]
[17:57:03.499]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:57:03.504]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:57:03.505]      __ap = 4;
[17:57:03.505]        // -> [__ap <= 0x00000004]
[17:57:03.505]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:57:03.509]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:57:03.509]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:57:03.509]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:57:03.512]    </block>
[17:57:03.512]    <block atomic="false" info="">
[17:57:03.512]      __var nReset = 0x80;
[17:57:03.512]        // -> [nReset <= 0x00000080]
[17:57:03.512]      __var canReadPins = 0;
[17:57:03.512]        // -> [canReadPins <= 0x00000000]
[17:57:03.512]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:57:03.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:57:03.515]        // -> [canReadPins <= 0x00000001]
[17:57:03.515]    </block>
[17:57:03.515]    <control if="" while="1" timeout="200" info="">
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.515]      // while-condition  =>  TRUE
[17:57:03.515]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.517]      // while-condition  =>  TRUE
[17:57:03.517]      // while "1"  (timeout="200")
[17:57:03.519]      // while-condition  =>  TRUE
[17:57:03.519]      // while "1"  (timeout="200")
[17:57:03.519]      // while  =>  TIMEOUT
[17:57:03.519]      // end while "1"
[17:57:03.519]    </control>
[17:57:03.519]    <control if="canReadPins" while="" timeout="0" info="">
[17:57:03.519]      // if-block "canReadPins"
[17:57:03.519]        // =>  TRUE
[17:57:03.519]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:57:03.519]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:57:03.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:57:03.521]        // while-condition  =>  FALSE
[17:57:03.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:57:03.521]      </control>
[17:57:03.521]      // end if-block "canReadPins"
[17:57:03.521]    </control>
[17:57:03.521]    <control if="!canReadPins" while="" timeout="0" info="">
[17:57:03.521]      // if-block "!canReadPins"
[17:57:03.521]        // =>  FALSE
[17:57:03.521]      // skip if-block "!canReadPins"
[17:57:03.521]    </control>
[17:57:03.521]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:57:03.521]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:57:03.521]        // =>  TRUE
[17:57:03.521]      <block atomic="false" info="">
[17:57:03.521]        WriteAP(0x00, 0x190008);
[17:57:03.521]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:57:03.521]        WriteAP(0xF0, 0x01);
[17:57:03.528]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:57:03.528]      </block>
[17:57:03.528]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:57:03.528]    </control>
[17:57:03.528]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:57:03.528]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:57:03.528]        // =>  FALSE
[17:57:03.528]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:57:03.528]    </control>
[17:57:03.528]    <block atomic="false" info="">
[17:57:03.528]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:57:03.532]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:57:03.532]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:57:03.532]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:57:03.535]      __ap = 0; //lets make sure we reset the access point selection
[17:57:03.535]        // -> [__ap <= 0x00000000]
[17:57:03.535]    </block>
[17:57:03.535]  </sequence>
[17:57:03.535]  
[17:57:03.556]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:57:03.556]  
[17:57:03.556]  <debugvars>
[17:57:03.556]    // Pre-defined
[17:57:03.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:03.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:03.556]    __dp=0x00000000
[17:57:03.556]    __ap=0x00000000
[17:57:03.558]    __traceout=0x00000000      (Trace Disabled)
[17:57:03.558]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:03.558]    __FlashAddr=0x00000000
[17:57:03.558]    __FlashLen=0x00000000
[17:57:03.558]    __FlashArg=0x00000000
[17:57:03.558]    __FlashOp=0x00000000
[17:57:03.558]    __Result=0x00000000
[17:57:03.558]  </debugvars>
[17:57:03.558]  
[17:57:03.558]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:57:03.558]    <block atomic="false" info="">
[17:57:03.558]      __var deviceID = 0;
[17:57:03.558]        // -> [deviceID <= 0x00000000]
[17:57:03.558]      __var version = 0;
[17:57:03.558]        // -> [version <= 0x00000000]
[17:57:03.558]      __var partNum = 0;
[17:57:03.558]        // -> [partNum <= 0x00000000]
[17:57:03.558]      __var manuf = 0;
[17:57:03.558]        // -> [manuf <= 0x00000000]
[17:57:03.558]      __var isMSPM0G1X0X_G3X0X = 0;
[17:57:03.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:57:03.558]      __var isProduction = 0;
[17:57:03.558]        // -> [isProduction <= 0x00000000]
[17:57:03.558]      __var continueId = 0;
[17:57:03.558]        // -> [continueId <= 0x00000000]
[17:57:03.558]      deviceID =   Read32(0x41C40004);
[17:57:03.567]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:57:03.567]        // -> [deviceID <= 0x2BB8802F]
[17:57:03.567]      version = deviceID >> 28;
[17:57:03.567]        // -> [version <= 0x00000002]
[17:57:03.568]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:57:03.568]        // -> [partNum <= 0x0000BB88]
[17:57:03.568]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:57:03.568]        // -> [manuf <= 0x00000017]
[17:57:03.568]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:57:03.568]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:57:03.568]      isProduction = (version > 0);
[17:57:03.568]        // -> [isProduction <= 0x00000001]
[17:57:03.568]    </block>
[17:57:03.568]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:57:03.568]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:57:03.568]        // =>  FALSE
[17:57:03.569]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:57:03.569]    </control>
[17:57:03.569]    <control if="continueId == 4" while="" timeout="0" info="">
[17:57:03.569]      // if-block "continueId == 4"
[17:57:03.569]        // =>  FALSE
[17:57:03.569]      // skip if-block "continueId == 4"
[17:57:03.569]    </control>
[17:57:03.569]    <control if="!isProduction" while="" timeout="0" info="">
[17:57:03.569]      // if-block "!isProduction"
[17:57:03.569]        // =>  FALSE
[17:57:03.569]      // skip if-block "!isProduction"
[17:57:03.569]    </control>
[17:57:03.569]  </sequence>
[17:57:03.569]  
[17:57:32.370]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:57:32.370]  
[17:57:32.380]  <debugvars>
[17:57:32.380]    // Pre-defined
[17:57:32.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:32.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:32.380]    __dp=0x00000000
[17:57:32.380]    __ap=0x00000000
[17:57:32.380]    __traceout=0x00000000      (Trace Disabled)
[17:57:32.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:32.380]    __FlashAddr=0x00000000
[17:57:32.380]    __FlashLen=0x00000000
[17:57:32.380]    __FlashArg=0x00000000
[17:57:32.380]    __FlashOp=0x00000000
[17:57:32.380]    __Result=0x00000000
[17:57:32.382]  </debugvars>
[17:57:32.382]  
[17:57:32.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:57:32.382]    <block atomic="false" info="">
[17:57:32.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:57:32.382]        // -> [isSWJ <= 0x00000001]
[17:57:32.382]      __var hasDormant = __protocol & 0x00020000;
[17:57:32.382]        // -> [hasDormant <= 0x00000000]
[17:57:32.382]      __var protType   = __protocol & 0x0000FFFF;
[17:57:32.382]        // -> [protType <= 0x00000002]
[17:57:32.382]    </block>
[17:57:32.383]    <control if="protType == 1" while="" timeout="0" info="">
[17:57:32.383]      // if-block "protType == 1"
[17:57:32.383]        // =>  FALSE
[17:57:32.383]      // skip if-block "protType == 1"
[17:57:32.383]    </control>
[17:57:32.383]    <control if="protType == 2" while="" timeout="0" info="">
[17:57:32.383]      // if-block "protType == 2"
[17:57:32.383]        // =>  TRUE
[17:57:32.383]      <control if="isSWJ" while="" timeout="0" info="">
[17:57:32.383]        // if-block "isSWJ"
[17:57:32.384]          // =>  TRUE
[17:57:32.384]        <control if="hasDormant" while="" timeout="0" info="">
[17:57:32.384]          // if-block "hasDormant"
[17:57:32.384]            // =>  FALSE
[17:57:32.384]          // skip if-block "hasDormant"
[17:57:32.384]        </control>
[17:57:32.384]        <control if="!hasDormant" while="" timeout="0" info="">
[17:57:32.384]          // if-block "!hasDormant"
[17:57:32.384]            // =>  TRUE
[17:57:32.384]          <block atomic="false" info="">
[17:57:32.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:57:32.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:32.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:57:32.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:57:32.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:57:32.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:32.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:57:32.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:57:32.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:57:32.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:57:32.393]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:57:32.393]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:57:32.393]          </block>
[17:57:32.393]          // end if-block "!hasDormant"
[17:57:32.393]        </control>
[17:57:32.393]        // end if-block "isSWJ"
[17:57:32.393]      </control>
[17:57:32.393]      <control if="!isSWJ" while="" timeout="0" info="">
[17:57:32.393]        // if-block "!isSWJ"
[17:57:32.393]          // =>  FALSE
[17:57:32.393]        // skip if-block "!isSWJ"
[17:57:32.393]      </control>
[17:57:32.393]      <block atomic="false" info="">
[17:57:32.393]        ReadDP(0x0);
[17:57:32.400]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:57:32.400]      </block>
[17:57:32.400]      // end if-block "protType == 2"
[17:57:32.400]    </control>
[17:57:32.400]  </sequence>
[17:57:32.400]  
[17:57:32.403]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:57:32.403]  
[17:57:32.403]  <debugvars>
[17:57:32.403]    // Pre-defined
[17:57:32.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:32.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:32.403]    __dp=0x00000000
[17:57:32.403]    __ap=0x00000000
[17:57:32.403]    __traceout=0x00000000      (Trace Disabled)
[17:57:32.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:32.403]    __FlashAddr=0x00000000
[17:57:32.403]    __FlashLen=0x00000000
[17:57:32.403]    __FlashArg=0x00000000
[17:57:32.403]    __FlashOp=0x00000000
[17:57:32.403]    __Result=0x00000000
[17:57:32.403]  </debugvars>
[17:57:32.403]  
[17:57:32.403]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:57:32.403]    <block atomic="false" info="">
[17:57:32.403]      __var SW_DP_ABORT       = 0x0;
[17:57:32.403]        // -> [SW_DP_ABORT <= 0x00000000]
[17:57:32.403]      __var DP_CTRL_STAT      = 0x4;
[17:57:32.403]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:57:32.403]      __var DP_SELECT         = 0x8;
[17:57:32.403]        // -> [DP_SELECT <= 0x00000008]
[17:57:32.403]      __var powered_down      = 0;
[17:57:32.403]        // -> [powered_down <= 0x00000000]
[17:57:32.403]      WriteDP(DP_SELECT, 0x00000000);
[17:57:32.403]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:57:32.403]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:57:32.403]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:57:32.403]        // -> [powered_down <= 0x00000001]
[17:57:32.410]    </block>
[17:57:32.410]    <control if="powered_down" while="" timeout="0" info="">
[17:57:32.410]      // if-block "powered_down"
[17:57:32.410]        // =>  TRUE
[17:57:32.410]      <block atomic="false" info="">
[17:57:32.410]        Message(0, "Debug/System power-up request sent");
[17:57:32.414]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:57:32.415]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:57:32.416]      </block>
[17:57:32.416]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:57:32.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:57:32.417]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:57:32.417]        // while-condition  =>  FALSE
[17:57:32.417]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:57:32.418]      </control>
[17:57:32.418]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:57:32.418]        // if-block "(__protocol & 0xFFFF) == 1"
[17:57:32.418]          // =>  FALSE
[17:57:32.418]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:57:32.418]      </control>
[17:57:32.418]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:57:32.418]        // if-block "(__protocol & 0xFFFF) == 2"
[17:57:32.418]          // =>  TRUE
[17:57:32.418]        <block atomic="false" info="">
[17:57:32.418]          Message(0, "executing SWD power up");
[17:57:32.420]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:57:32.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:57:32.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:57:32.423]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:57:32.423]        </block>
[17:57:32.423]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:57:32.423]      </control>
[17:57:32.423]      // end if-block "powered_down"
[17:57:32.423]    </control>
[17:57:32.423]    <block atomic="false" info="">
[17:57:32.423]      __var DEBUG_PORT_VAL    = 0;
[17:57:32.423]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:57:32.423]      __var ACCESS_POINT_VAL  = 0;
[17:57:32.423]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:57:32.423]      __ap = 1; 
[17:57:32.423]        // -> [__ap <= 0x00000001]
[17:57:32.423]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:57:32.430]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:57:32.430]      __ap = 4;
[17:57:32.430]        // -> [__ap <= 0x00000004]
[17:57:32.430]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:57:32.431]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:57:32.431]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:57:32.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:57:32.431]    </block>
[17:57:32.431]    <block atomic="false" info="">
[17:57:32.431]      __var nReset = 0x80;
[17:57:32.431]        // -> [nReset <= 0x00000080]
[17:57:32.431]      __var canReadPins = 0;
[17:57:32.431]        // -> [canReadPins <= 0x00000000]
[17:57:32.431]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:57:32.431]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:57:32.431]        // -> [canReadPins <= 0x00000001]
[17:57:32.431]    </block>
[17:57:32.431]    <control if="" while="1" timeout="200" info="">
[17:57:32.431]      // while "1"  (timeout="200")
[17:57:32.431]      // while-condition  =>  TRUE
[17:57:32.431]      // while "1"  (timeout="200")
[17:57:32.431]      // while-condition  =>  TRUE
[17:57:32.431]      // while "1"  (timeout="200")
[17:57:32.431]      // while-condition  =>  TRUE
[17:57:32.431]      // while "1"  (timeout="200")
[17:57:32.431]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.440]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.440]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.440]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.440]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.440]      // while-condition  =>  TRUE
[17:57:32.440]      // while "1"  (timeout="200")
[17:57:32.441]      // while-condition  =>  TRUE
[17:57:32.441]      // while "1"  (timeout="200")
[17:57:32.441]      // while  =>  TIMEOUT
[17:57:32.441]      // end while "1"
[17:57:32.441]    </control>
[17:57:32.442]    <control if="canReadPins" while="" timeout="0" info="">
[17:57:32.442]      // if-block "canReadPins"
[17:57:32.442]        // =>  TRUE
[17:57:32.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:57:32.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:57:32.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:57:32.442]        // while-condition  =>  FALSE
[17:57:32.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:57:32.442]      </control>
[17:57:32.442]      // end if-block "canReadPins"
[17:57:32.442]    </control>
[17:57:32.442]    <control if="!canReadPins" while="" timeout="0" info="">
[17:57:32.442]      // if-block "!canReadPins"
[17:57:32.442]        // =>  FALSE
[17:57:32.442]      // skip if-block "!canReadPins"
[17:57:32.442]    </control>
[17:57:32.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:57:32.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:57:32.442]        // =>  TRUE
[17:57:32.442]      <block atomic="false" info="">
[17:57:32.442]        WriteAP(0x00, 0x190008);
[17:57:32.442]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:57:32.442]        WriteAP(0xF0, 0x01);
[17:57:32.450]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:57:32.450]      </block>
[17:57:32.450]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:57:32.450]    </control>
[17:57:32.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:57:32.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:57:32.450]        // =>  FALSE
[17:57:32.450]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:57:32.450]    </control>
[17:57:32.451]    <block atomic="false" info="">
[17:57:32.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:57:32.452]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:57:32.452]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:57:32.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:57:32.452]      __ap = 0; //lets make sure we reset the access point selection
[17:57:32.457]        // -> [__ap <= 0x00000000]
[17:57:32.457]    </block>
[17:57:32.457]  </sequence>
[17:57:32.457]  
[17:57:32.475]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:57:32.475]  
[17:57:32.475]  <debugvars>
[17:57:32.475]    // Pre-defined
[17:57:32.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:57:32.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:57:32.475]    __dp=0x00000000
[17:57:32.475]    __ap=0x00000000
[17:57:32.479]    __traceout=0x00000000      (Trace Disabled)
[17:57:32.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:57:32.479]    __FlashAddr=0x00000000
[17:57:32.479]    __FlashLen=0x00000000
[17:57:32.479]    __FlashArg=0x00000000
[17:57:32.480]    __FlashOp=0x00000000
[17:57:32.480]    __Result=0x00000000
[17:57:32.480]  </debugvars>
[17:57:32.480]  
[17:57:32.480]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:57:32.480]    <block atomic="false" info="">
[17:57:32.480]      __var deviceID = 0;
[17:57:32.480]        // -> [deviceID <= 0x00000000]
[17:57:32.480]      __var version = 0;
[17:57:32.480]        // -> [version <= 0x00000000]
[17:57:32.480]      __var partNum = 0;
[17:57:32.480]        // -> [partNum <= 0x00000000]
[17:57:32.480]      __var manuf = 0;
[17:57:32.480]        // -> [manuf <= 0x00000000]
[17:57:32.480]      __var isMSPM0G1X0X_G3X0X = 0;
[17:57:32.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:57:32.480]      __var isProduction = 0;
[17:57:32.480]        // -> [isProduction <= 0x00000000]
[17:57:32.480]      __var continueId = 0;
[17:57:32.480]        // -> [continueId <= 0x00000000]
[17:57:32.480]      deviceID =   Read32(0x41C40004);
[17:57:32.485]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:57:32.485]        // -> [deviceID <= 0x2BB8802F]
[17:57:32.485]      version = deviceID >> 28;
[17:57:32.485]        // -> [version <= 0x00000002]
[17:57:32.485]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:57:32.485]        // -> [partNum <= 0x0000BB88]
[17:57:32.485]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:57:32.485]        // -> [manuf <= 0x00000017]
[17:57:32.485]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:57:32.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:57:32.485]      isProduction = (version > 0);
[17:57:32.485]        // -> [isProduction <= 0x00000001]
[17:57:32.485]    </block>
[17:57:32.485]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:57:32.485]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:57:32.485]        // =>  FALSE
[17:57:32.485]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:57:32.485]    </control>
[17:57:32.485]    <control if="continueId == 4" while="" timeout="0" info="">
[17:57:32.485]      // if-block "continueId == 4"
[17:57:32.485]        // =>  FALSE
[17:57:32.490]      // skip if-block "continueId == 4"
[17:57:32.490]    </control>
[17:57:32.490]    <control if="!isProduction" while="" timeout="0" info="">
[17:57:32.490]      // if-block "!isProduction"
[17:57:32.490]        // =>  FALSE
[17:57:32.491]      // skip if-block "!isProduction"
[17:57:32.491]    </control>
[17:57:32.491]  </sequence>
[17:57:32.491]  
[18:01:44.606]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:01:44.606]  
[18:01:44.606]  <debugvars>
[18:01:44.606]    // Pre-defined
[18:01:44.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:01:44.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:01:44.606]    __dp=0x00000000
[18:01:44.606]    __ap=0x00000000
[18:01:44.606]    __traceout=0x00000000      (Trace Disabled)
[18:01:44.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:01:44.606]    __FlashAddr=0x00000000
[18:01:44.606]    __FlashLen=0x00000000
[18:01:44.606]    __FlashArg=0x00000000
[18:01:44.606]    __FlashOp=0x00000000
[18:01:44.606]    __Result=0x00000000
[18:01:44.606]  </debugvars>
[18:01:44.606]  
[18:01:44.606]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:01:44.606]    <block atomic="false" info="">
[18:01:44.606]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:01:44.606]        // -> [isSWJ <= 0x00000001]
[18:01:44.606]      __var hasDormant = __protocol & 0x00020000;
[18:01:44.606]        // -> [hasDormant <= 0x00000000]
[18:01:44.606]      __var protType   = __protocol & 0x0000FFFF;
[18:01:44.606]        // -> [protType <= 0x00000002]
[18:01:44.606]    </block>
[18:01:44.606]    <control if="protType == 1" while="" timeout="0" info="">
[18:01:44.606]      // if-block "protType == 1"
[18:01:44.606]        // =>  FALSE
[18:01:44.606]      // skip if-block "protType == 1"
[18:01:44.606]    </control>
[18:01:44.606]    <control if="protType == 2" while="" timeout="0" info="">
[18:01:44.613]      // if-block "protType == 2"
[18:01:44.613]        // =>  TRUE
[18:01:44.613]      <control if="isSWJ" while="" timeout="0" info="">
[18:01:44.613]        // if-block "isSWJ"
[18:01:44.613]          // =>  TRUE
[18:01:44.613]        <control if="hasDormant" while="" timeout="0" info="">
[18:01:44.613]          // if-block "hasDormant"
[18:01:44.613]            // =>  FALSE
[18:01:44.613]          // skip if-block "hasDormant"
[18:01:44.613]        </control>
[18:01:44.613]        <control if="!hasDormant" while="" timeout="0" info="">
[18:01:44.613]          // if-block "!hasDormant"
[18:01:44.613]            // =>  TRUE
[18:01:44.613]          <block atomic="false" info="">
[18:01:44.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:01:44.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:01:44.614]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:01:44.616]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:01:44.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:01:44.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:01:44.616]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:01:44.616]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:01:44.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:01:44.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:01:44.616]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:01:44.616]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:01:44.616]          </block>
[18:01:44.616]          // end if-block "!hasDormant"
[18:01:44.616]        </control>
[18:01:44.616]        // end if-block "isSWJ"
[18:01:44.616]      </control>
[18:01:44.616]      <control if="!isSWJ" while="" timeout="0" info="">
[18:01:44.616]        // if-block "!isSWJ"
[18:01:44.616]          // =>  FALSE
[18:01:44.616]        // skip if-block "!isSWJ"
[18:01:44.616]      </control>
[18:01:44.616]      <block atomic="false" info="">
[18:01:44.616]        ReadDP(0x0);
[18:01:44.626]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:01:44.626]      </block>
[18:01:44.626]      // end if-block "protType == 2"
[18:01:44.626]    </control>
[18:01:44.626]  </sequence>
[18:01:44.626]  
[18:01:44.629]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:01:44.629]  
[18:01:44.629]  <debugvars>
[18:01:44.629]    // Pre-defined
[18:01:44.629]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:01:44.629]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:01:44.629]    __dp=0x00000000
[18:01:44.629]    __ap=0x00000000
[18:01:44.629]    __traceout=0x00000000      (Trace Disabled)
[18:01:44.629]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:01:44.629]    __FlashAddr=0x00000000
[18:01:44.629]    __FlashLen=0x00000000
[18:01:44.629]    __FlashArg=0x00000000
[18:01:44.629]    __FlashOp=0x00000000
[18:01:44.629]    __Result=0x00000000
[18:01:44.629]  </debugvars>
[18:01:44.629]  
[18:01:44.629]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:01:44.629]    <block atomic="false" info="">
[18:01:44.629]      __var SW_DP_ABORT       = 0x0;
[18:01:44.629]        // -> [SW_DP_ABORT <= 0x00000000]
[18:01:44.629]      __var DP_CTRL_STAT      = 0x4;
[18:01:44.629]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:01:44.629]      __var DP_SELECT         = 0x8;
[18:01:44.629]        // -> [DP_SELECT <= 0x00000008]
[18:01:44.629]      __var powered_down      = 0;
[18:01:44.629]        // -> [powered_down <= 0x00000000]
[18:01:44.629]      WriteDP(DP_SELECT, 0x00000000);
[18:01:44.637]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:01:44.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:01:44.637]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:01:44.637]        // -> [powered_down <= 0x00000001]
[18:01:44.637]    </block>
[18:01:44.637]    <control if="powered_down" while="" timeout="0" info="">
[18:01:44.637]      // if-block "powered_down"
[18:01:44.637]        // =>  TRUE
[18:01:44.646]      <block atomic="false" info="">
[18:01:44.646]        Message(0, "Debug/System power-up request sent");
[18:01:44.648]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:01:44.648]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:01:44.648]      </block>
[18:01:44.648]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:01:44.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:01:44.654]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:01:44.654]        // while-condition  =>  FALSE
[18:01:44.654]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:01:44.654]      </control>
[18:01:44.654]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:01:44.654]        // if-block "(__protocol & 0xFFFF) == 1"
[18:01:44.654]          // =>  FALSE
[18:01:44.656]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:01:44.656]      </control>
[18:01:44.656]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:01:44.656]        // if-block "(__protocol & 0xFFFF) == 2"
[18:01:44.656]          // =>  TRUE
[18:01:44.656]        <block atomic="false" info="">
[18:01:44.656]          Message(0, "executing SWD power up");
[18:01:44.657]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:01:44.661]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:01:44.661]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:01:44.663]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:01:44.663]        </block>
[18:01:44.663]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:01:44.665]      </control>
[18:01:44.665]      // end if-block "powered_down"
[18:01:44.665]    </control>
[18:01:44.665]    <block atomic="false" info="">
[18:01:44.665]      __var DEBUG_PORT_VAL    = 0;
[18:01:44.665]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:01:44.665]      __var ACCESS_POINT_VAL  = 0;
[18:01:44.665]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:01:44.665]      __ap = 1; 
[18:01:44.665]        // -> [__ap <= 0x00000001]
[18:01:44.665]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:01:44.668]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:01:44.668]      __ap = 4;
[18:01:44.668]        // -> [__ap <= 0x00000004]
[18:01:44.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:01:44.668]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:01:44.668]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:01:44.668]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:01:44.668]    </block>
[18:01:44.668]    <block atomic="false" info="">
[18:01:44.668]      __var nReset = 0x80;
[18:01:44.668]        // -> [nReset <= 0x00000080]
[18:01:44.668]      __var canReadPins = 0;
[18:01:44.668]        // -> [canReadPins <= 0x00000000]
[18:01:44.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:01:44.680]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:01:44.680]        // -> [canReadPins <= 0x00000001]
[18:01:44.680]    </block>
[18:01:44.680]    <control if="" while="1" timeout="200" info="">
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.680]      // while-condition  =>  TRUE
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.680]      // while-condition  =>  TRUE
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.680]      // while-condition  =>  TRUE
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.680]      // while-condition  =>  TRUE
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.680]      // while-condition  =>  TRUE
[18:01:44.680]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.682]      // while-condition  =>  TRUE
[18:01:44.682]      // while "1"  (timeout="200")
[18:01:44.687]      // while-condition  =>  TRUE
[18:01:44.687]      // while "1"  (timeout="200")
[18:01:44.687]      // while-condition  =>  TRUE
[18:01:44.687]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.688]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.688]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.688]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.688]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.688]      // while "1"  (timeout="200")
[18:01:44.688]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.689]      // while-condition  =>  TRUE
[18:01:44.689]      // while "1"  (timeout="200")
[18:01:44.691]      // while-condition  =>  TRUE
[18:01:44.691]      // while "1"  (timeout="200")
[18:01:44.691]      // while  =>  TIMEOUT
[18:01:44.691]      // end while "1"
[18:01:44.691]    </control>
[18:01:44.691]    <control if="canReadPins" while="" timeout="0" info="">
[18:01:44.691]      // if-block "canReadPins"
[18:01:44.691]        // =>  TRUE
[18:01:44.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:01:44.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:01:44.691]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:01:44.691]        // while-condition  =>  FALSE
[18:01:44.691]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:01:44.698]      </control>
[18:01:44.698]      // end if-block "canReadPins"
[18:01:44.698]    </control>
[18:01:44.698]    <control if="!canReadPins" while="" timeout="0" info="">
[18:01:44.698]      // if-block "!canReadPins"
[18:01:44.698]        // =>  FALSE
[18:01:44.698]      // skip if-block "!canReadPins"
[18:01:44.698]    </control>
[18:01:44.698]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:01:44.698]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:01:44.698]        // =>  TRUE
[18:01:44.698]      <block atomic="false" info="">
[18:01:44.698]        WriteAP(0x00, 0x190008);
[18:01:44.698]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:01:44.698]        WriteAP(0xF0, 0x01);
[18:01:44.698]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:01:44.698]      </block>
[18:01:44.698]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:01:44.698]    </control>
[18:01:44.698]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:01:44.698]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:01:44.698]        // =>  FALSE
[18:01:44.698]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:01:44.698]    </control>
[18:01:44.708]    <block atomic="false" info="">
[18:01:44.708]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:01:44.708]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:01:44.708]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:01:44.708]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:01:44.708]      __ap = 0; //lets make sure we reset the access point selection
[18:01:44.708]        // -> [__ap <= 0x00000000]
[18:01:44.708]    </block>
[18:01:44.708]  </sequence>
[18:01:44.708]  
[18:01:44.738]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:01:44.738]  
[18:01:44.738]  <debugvars>
[18:01:44.738]    // Pre-defined
[18:01:44.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:01:44.738]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:01:44.738]    __dp=0x00000000
[18:01:44.738]    __ap=0x00000000
[18:01:44.738]    __traceout=0x00000000      (Trace Disabled)
[18:01:44.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:01:44.738]    __FlashAddr=0x00000000
[18:01:44.738]    __FlashLen=0x00000000
[18:01:44.738]    __FlashArg=0x00000000
[18:01:44.738]    __FlashOp=0x00000000
[18:01:44.738]    __Result=0x00000000
[18:01:44.738]  </debugvars>
[18:01:44.738]  
[18:01:44.738]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:01:44.738]    <block atomic="false" info="">
[18:01:44.738]      __var deviceID = 0;
[18:01:44.738]        // -> [deviceID <= 0x00000000]
[18:01:44.738]      __var version = 0;
[18:01:44.738]        // -> [version <= 0x00000000]
[18:01:44.738]      __var partNum = 0;
[18:01:44.738]        // -> [partNum <= 0x00000000]
[18:01:44.738]      __var manuf = 0;
[18:01:44.738]        // -> [manuf <= 0x00000000]
[18:01:44.738]      __var isMSPM0G1X0X_G3X0X = 0;
[18:01:44.738]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:01:44.738]      __var isProduction = 0;
[18:01:44.738]        // -> [isProduction <= 0x00000000]
[18:01:44.738]      __var continueId = 0;
[18:01:44.738]        // -> [continueId <= 0x00000000]
[18:01:44.738]      deviceID =   Read32(0x41C40004);
[18:01:44.748]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:01:44.748]        // -> [deviceID <= 0x2BB8802F]
[18:01:44.748]      version = deviceID >> 28;
[18:01:44.748]        // -> [version <= 0x00000002]
[18:01:44.748]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:01:44.748]        // -> [partNum <= 0x0000BB88]
[18:01:44.748]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:01:44.748]        // -> [manuf <= 0x00000017]
[18:01:44.748]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:01:44.748]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:01:44.748]      isProduction = (version > 0);
[18:01:44.748]        // -> [isProduction <= 0x00000001]
[18:01:44.748]    </block>
[18:01:44.748]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:01:44.748]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:01:44.748]        // =>  FALSE
[18:01:44.748]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:01:44.748]    </control>
[18:01:44.748]    <control if="continueId == 4" while="" timeout="0" info="">
[18:01:44.748]      // if-block "continueId == 4"
[18:01:44.748]        // =>  FALSE
[18:01:44.748]      // skip if-block "continueId == 4"
[18:01:44.748]    </control>
[18:01:44.748]    <control if="!isProduction" while="" timeout="0" info="">
[18:01:44.748]      // if-block "!isProduction"
[18:01:44.748]        // =>  FALSE
[18:01:44.748]      // skip if-block "!isProduction"
[18:01:44.748]    </control>
[18:01:44.748]  </sequence>
[18:01:44.748]  
[18:02:58.958]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:02:58.958]  
[18:02:58.958]  <debugvars>
[18:02:58.958]    // Pre-defined
[18:02:58.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:02:58.958]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:02:58.958]    __dp=0x00000000
[18:02:58.958]    __ap=0x00000000
[18:02:58.958]    __traceout=0x00000000      (Trace Disabled)
[18:02:58.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:02:58.958]    __FlashAddr=0x00000000
[18:02:58.958]    __FlashLen=0x00000000
[18:02:58.958]    __FlashArg=0x00000000
[18:02:58.958]    __FlashOp=0x00000000
[18:02:58.958]    __Result=0x00000000
[18:02:58.958]  </debugvars>
[18:02:58.958]  
[18:02:58.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:02:58.961]    <block atomic="false" info="">
[18:02:58.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:02:58.961]        // -> [isSWJ <= 0x00000001]
[18:02:58.961]      __var hasDormant = __protocol & 0x00020000;
[18:02:58.961]        // -> [hasDormant <= 0x00000000]
[18:02:58.961]      __var protType   = __protocol & 0x0000FFFF;
[18:02:58.961]        // -> [protType <= 0x00000002]
[18:02:58.961]    </block>
[18:02:58.961]    <control if="protType == 1" while="" timeout="0" info="">
[18:02:58.961]      // if-block "protType == 1"
[18:02:58.962]        // =>  FALSE
[18:02:58.962]      // skip if-block "protType == 1"
[18:02:58.962]    </control>
[18:02:58.962]    <control if="protType == 2" while="" timeout="0" info="">
[18:02:58.962]      // if-block "protType == 2"
[18:02:58.962]        // =>  TRUE
[18:02:58.962]      <control if="isSWJ" while="" timeout="0" info="">
[18:02:58.962]        // if-block "isSWJ"
[18:02:58.962]          // =>  TRUE
[18:02:58.962]        <control if="hasDormant" while="" timeout="0" info="">
[18:02:58.962]          // if-block "hasDormant"
[18:02:58.962]            // =>  FALSE
[18:02:58.962]          // skip if-block "hasDormant"
[18:02:58.962]        </control>
[18:02:58.962]        <control if="!hasDormant" while="" timeout="0" info="">
[18:02:58.962]          // if-block "!hasDormant"
[18:02:58.962]            // =>  TRUE
[18:02:58.962]          <block atomic="false" info="">
[18:02:58.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:02:58.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:02:58.962]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:02:58.962]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:02:58.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:02:58.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:02:58.962]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:02:58.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:02:58.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:02:58.972]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:02:58.972]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:02:58.976]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:02:58.976]          </block>
[18:02:58.976]          // end if-block "!hasDormant"
[18:02:58.976]        </control>
[18:02:58.976]        // end if-block "isSWJ"
[18:02:58.976]      </control>
[18:02:58.976]      <control if="!isSWJ" while="" timeout="0" info="">
[18:02:58.976]        // if-block "!isSWJ"
[18:02:58.976]          // =>  FALSE
[18:02:58.976]        // skip if-block "!isSWJ"
[18:02:58.976]      </control>
[18:02:58.977]      <block atomic="false" info="">
[18:02:58.977]        ReadDP(0x0);
[18:02:58.982]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:02:58.982]      </block>
[18:02:58.982]      // end if-block "protType == 2"
[18:02:58.982]    </control>
[18:02:58.982]  </sequence>
[18:02:58.982]  
[18:02:58.982]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:02:58.982]  
[18:02:58.982]  <debugvars>
[18:02:58.982]    // Pre-defined
[18:02:58.982]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:02:58.982]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:02:58.982]    __dp=0x00000000
[18:02:58.982]    __ap=0x00000000
[18:02:58.982]    __traceout=0x00000000      (Trace Disabled)
[18:02:58.982]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:02:58.982]    __FlashAddr=0x00000000
[18:02:58.982]    __FlashLen=0x00000000
[18:02:58.982]    __FlashArg=0x00000000
[18:02:58.982]    __FlashOp=0x00000000
[18:02:58.982]    __Result=0x00000000
[18:02:58.982]  </debugvars>
[18:02:58.982]  
[18:02:58.982]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:02:58.982]    <block atomic="false" info="">
[18:02:58.982]      __var SW_DP_ABORT       = 0x0;
[18:02:58.982]        // -> [SW_DP_ABORT <= 0x00000000]
[18:02:58.982]      __var DP_CTRL_STAT      = 0x4;
[18:02:58.982]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:02:58.982]      __var DP_SELECT         = 0x8;
[18:02:58.982]        // -> [DP_SELECT <= 0x00000008]
[18:02:58.982]      __var powered_down      = 0;
[18:02:58.982]        // -> [powered_down <= 0x00000000]
[18:02:58.982]      WriteDP(DP_SELECT, 0x00000000);
[18:02:58.991]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:02:58.991]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:02:58.992]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:02:58.993]        // -> [powered_down <= 0x00000001]
[18:02:58.993]    </block>
[18:02:58.993]    <control if="powered_down" while="" timeout="0" info="">
[18:02:58.993]      // if-block "powered_down"
[18:02:58.993]        // =>  TRUE
[18:02:58.993]      <block atomic="false" info="">
[18:02:58.993]        Message(0, "Debug/System power-up request sent");
[18:02:58.994]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:02:58.994]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:02:58.994]      </block>
[18:02:58.994]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:02:58.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:02:58.994]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:02:58.994]        // while-condition  =>  FALSE
[18:02:58.994]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:02:58.994]      </control>
[18:02:58.994]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:02:58.994]        // if-block "(__protocol & 0xFFFF) == 1"
[18:02:58.994]          // =>  FALSE
[18:02:58.994]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:02:58.994]      </control>
[18:02:59.001]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:02:59.001]        // if-block "(__protocol & 0xFFFF) == 2"
[18:02:59.001]          // =>  TRUE
[18:02:59.001]        <block atomic="false" info="">
[18:02:59.001]          Message(0, "executing SWD power up");
[18:02:59.002]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:02:59.002]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:02:59.002]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:02:59.002]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:02:59.002]        </block>
[18:02:59.002]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:02:59.002]      </control>
[18:02:59.002]      // end if-block "powered_down"
[18:02:59.002]    </control>
[18:02:59.002]    <block atomic="false" info="">
[18:02:59.002]      __var DEBUG_PORT_VAL    = 0;
[18:02:59.002]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:02:59.002]      __var ACCESS_POINT_VAL  = 0;
[18:02:59.002]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:02:59.002]      __ap = 1; 
[18:02:59.002]        // -> [__ap <= 0x00000001]
[18:02:59.002]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:02:59.012]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:02:59.012]      __ap = 4;
[18:02:59.012]        // -> [__ap <= 0x00000004]
[18:02:59.012]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:02:59.016]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:02:59.016]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:02:59.016]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:02:59.021]    </block>
[18:02:59.021]    <block atomic="false" info="">
[18:02:59.021]      __var nReset = 0x80;
[18:02:59.021]        // -> [nReset <= 0x00000080]
[18:02:59.021]      __var canReadPins = 0;
[18:02:59.021]        // -> [canReadPins <= 0x00000000]
[18:02:59.021]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:02:59.022]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:02:59.022]        // -> [canReadPins <= 0x00000001]
[18:02:59.022]    </block>
[18:02:59.022]    <control if="" while="1" timeout="200" info="">
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.022]      // while "1"  (timeout="200")
[18:02:59.022]      // while-condition  =>  TRUE
[18:02:59.031]      // while "1"  (timeout="200")
[18:02:59.031]      // while-condition  =>  TRUE
[18:02:59.031]      // while "1"  (timeout="200")
[18:02:59.031]      // while-condition  =>  TRUE
[18:02:59.031]      // while "1"  (timeout="200")
[18:02:59.031]      // while-condition  =>  TRUE
[18:02:59.031]      // while "1"  (timeout="200")
[18:02:59.031]      // while-condition  =>  TRUE
[18:02:59.031]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.032]      // while "1"  (timeout="200")
[18:02:59.032]      // while-condition  =>  TRUE
[18:02:59.034]      // while "1"  (timeout="200")
[18:02:59.034]      // while  =>  TIMEOUT
[18:02:59.034]      // end while "1"
[18:02:59.034]    </control>
[18:02:59.034]    <control if="canReadPins" while="" timeout="0" info="">
[18:02:59.034]      // if-block "canReadPins"
[18:02:59.034]        // =>  TRUE
[18:02:59.034]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:02:59.034]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:02:59.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:02:59.037]        // while-condition  =>  FALSE
[18:02:59.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:02:59.037]      </control>
[18:02:59.037]      // end if-block "canReadPins"
[18:02:59.037]    </control>
[18:02:59.037]    <control if="!canReadPins" while="" timeout="0" info="">
[18:02:59.037]      // if-block "!canReadPins"
[18:02:59.037]        // =>  FALSE
[18:02:59.037]      // skip if-block "!canReadPins"
[18:02:59.037]    </control>
[18:02:59.037]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:02:59.037]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:02:59.037]        // =>  TRUE
[18:02:59.037]      <block atomic="false" info="">
[18:02:59.037]        WriteAP(0x00, 0x190008);
[18:02:59.037]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:02:59.041]        WriteAP(0xF0, 0x01);
[18:02:59.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:02:59.044]      </block>
[18:02:59.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:02:59.044]    </control>
[18:02:59.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:02:59.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:02:59.044]        // =>  FALSE
[18:02:59.044]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:02:59.044]    </control>
[18:02:59.044]    <block atomic="false" info="">
[18:02:59.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:02:59.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:02:59.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:02:59.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:02:59.054]      __ap = 0; //lets make sure we reset the access point selection
[18:02:59.054]        // -> [__ap <= 0x00000000]
[18:02:59.054]    </block>
[18:02:59.054]  </sequence>
[18:02:59.054]  
[18:02:59.082]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:02:59.082]  
[18:02:59.082]  <debugvars>
[18:02:59.082]    // Pre-defined
[18:02:59.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:02:59.082]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:02:59.084]    __dp=0x00000000
[18:02:59.084]    __ap=0x00000000
[18:02:59.084]    __traceout=0x00000000      (Trace Disabled)
[18:02:59.084]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:02:59.084]    __FlashAddr=0x00000000
[18:02:59.084]    __FlashLen=0x00000000
[18:02:59.084]    __FlashArg=0x00000000
[18:02:59.084]    __FlashOp=0x00000000
[18:02:59.084]    __Result=0x00000000
[18:02:59.084]  </debugvars>
[18:02:59.084]  
[18:02:59.084]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:02:59.084]    <block atomic="false" info="">
[18:02:59.084]      __var deviceID = 0;
[18:02:59.084]        // -> [deviceID <= 0x00000000]
[18:02:59.084]      __var version = 0;
[18:02:59.084]        // -> [version <= 0x00000000]
[18:02:59.084]      __var partNum = 0;
[18:02:59.084]        // -> [partNum <= 0x00000000]
[18:02:59.086]      __var manuf = 0;
[18:02:59.086]        // -> [manuf <= 0x00000000]
[18:02:59.086]      __var isMSPM0G1X0X_G3X0X = 0;
[18:02:59.086]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:02:59.086]      __var isProduction = 0;
[18:02:59.086]        // -> [isProduction <= 0x00000000]
[18:02:59.086]      __var continueId = 0;
[18:02:59.086]        // -> [continueId <= 0x00000000]
[18:02:59.086]      deviceID =   Read32(0x41C40004);
[18:02:59.092]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:02:59.092]        // -> [deviceID <= 0x2BB8802F]
[18:02:59.092]      version = deviceID >> 28;
[18:02:59.092]        // -> [version <= 0x00000002]
[18:02:59.092]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:02:59.092]        // -> [partNum <= 0x0000BB88]
[18:02:59.092]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:02:59.092]        // -> [manuf <= 0x00000017]
[18:02:59.092]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:02:59.092]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:02:59.092]      isProduction = (version > 0);
[18:02:59.092]        // -> [isProduction <= 0x00000001]
[18:02:59.092]    </block>
[18:02:59.092]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:02:59.092]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:02:59.092]        // =>  FALSE
[18:02:59.092]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:02:59.092]    </control>
[18:02:59.094]    <control if="continueId == 4" while="" timeout="0" info="">
[18:02:59.094]      // if-block "continueId == 4"
[18:02:59.094]        // =>  FALSE
[18:02:59.094]      // skip if-block "continueId == 4"
[18:02:59.094]    </control>
[18:02:59.094]    <control if="!isProduction" while="" timeout="0" info="">
[18:02:59.094]      // if-block "!isProduction"
[18:02:59.094]        // =>  FALSE
[18:02:59.094]      // skip if-block "!isProduction"
[18:02:59.094]    </control>
[18:02:59.094]  </sequence>
[18:02:59.094]  
[18:03:23.797]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:03:23.797]  
[18:03:23.812]  <debugvars>
[18:03:23.812]    // Pre-defined
[18:03:23.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:23.812]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:23.812]    __dp=0x00000000
[18:03:23.812]    __ap=0x00000000
[18:03:23.812]    __traceout=0x00000000      (Trace Disabled)
[18:03:23.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:23.812]    __FlashAddr=0x00000000
[18:03:23.812]    __FlashLen=0x00000000
[18:03:23.812]    __FlashArg=0x00000000
[18:03:23.812]    __FlashOp=0x00000000
[18:03:23.812]    __Result=0x00000000
[18:03:23.812]  </debugvars>
[18:03:23.812]  
[18:03:23.812]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:03:23.812]    <block atomic="false" info="">
[18:03:23.812]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:03:23.812]        // -> [isSWJ <= 0x00000001]
[18:03:23.812]      __var hasDormant = __protocol & 0x00020000;
[18:03:23.812]        // -> [hasDormant <= 0x00000000]
[18:03:23.812]      __var protType   = __protocol & 0x0000FFFF;
[18:03:23.812]        // -> [protType <= 0x00000002]
[18:03:23.812]    </block>
[18:03:23.812]    <control if="protType == 1" while="" timeout="0" info="">
[18:03:23.812]      // if-block "protType == 1"
[18:03:23.812]        // =>  FALSE
[18:03:23.812]      // skip if-block "protType == 1"
[18:03:23.812]    </control>
[18:03:23.812]    <control if="protType == 2" while="" timeout="0" info="">
[18:03:23.812]      // if-block "protType == 2"
[18:03:23.812]        // =>  TRUE
[18:03:23.812]      <control if="isSWJ" while="" timeout="0" info="">
[18:03:23.812]        // if-block "isSWJ"
[18:03:23.812]          // =>  TRUE
[18:03:23.812]        <control if="hasDormant" while="" timeout="0" info="">
[18:03:23.812]          // if-block "hasDormant"
[18:03:23.816]            // =>  FALSE
[18:03:23.816]          // skip if-block "hasDormant"
[18:03:23.816]        </control>
[18:03:23.816]        <control if="!hasDormant" while="" timeout="0" info="">
[18:03:23.816]          // if-block "!hasDormant"
[18:03:23.816]            // =>  TRUE
[18:03:23.816]          <block atomic="false" info="">
[18:03:23.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:03:23.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:23.817]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:03:23.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:03:23.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:03:23.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:23.817]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:03:23.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:03:23.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:03:23.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:23.826]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:03:23.826]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:03:23.826]          </block>
[18:03:23.826]          // end if-block "!hasDormant"
[18:03:23.826]        </control>
[18:03:23.826]        // end if-block "isSWJ"
[18:03:23.826]      </control>
[18:03:23.826]      <control if="!isSWJ" while="" timeout="0" info="">
[18:03:23.826]        // if-block "!isSWJ"
[18:03:23.826]          // =>  FALSE
[18:03:23.826]        // skip if-block "!isSWJ"
[18:03:23.826]      </control>
[18:03:23.826]      <block atomic="false" info="">
[18:03:23.826]        ReadDP(0x0);
[18:03:23.826]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:03:23.826]      </block>
[18:03:23.826]      // end if-block "protType == 2"
[18:03:23.826]    </control>
[18:03:23.826]  </sequence>
[18:03:23.836]  
[18:03:23.838]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:03:23.838]  
[18:03:23.838]  <debugvars>
[18:03:23.838]    // Pre-defined
[18:03:23.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:23.838]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:23.838]    __dp=0x00000000
[18:03:23.838]    __ap=0x00000000
[18:03:23.838]    __traceout=0x00000000      (Trace Disabled)
[18:03:23.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:23.838]    __FlashAddr=0x00000000
[18:03:23.838]    __FlashLen=0x00000000
[18:03:23.838]    __FlashArg=0x00000000
[18:03:23.838]    __FlashOp=0x00000000
[18:03:23.838]    __Result=0x00000000
[18:03:23.838]  </debugvars>
[18:03:23.838]  
[18:03:23.838]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:03:23.838]    <block atomic="false" info="">
[18:03:23.838]      __var SW_DP_ABORT       = 0x0;
[18:03:23.838]        // -> [SW_DP_ABORT <= 0x00000000]
[18:03:23.838]      __var DP_CTRL_STAT      = 0x4;
[18:03:23.838]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:03:23.838]      __var DP_SELECT         = 0x8;
[18:03:23.838]        // -> [DP_SELECT <= 0x00000008]
[18:03:23.838]      __var powered_down      = 0;
[18:03:23.838]        // -> [powered_down <= 0x00000000]
[18:03:23.838]      WriteDP(DP_SELECT, 0x00000000);
[18:03:23.838]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:03:23.838]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:03:23.838]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:03:23.838]        // -> [powered_down <= 0x00000001]
[18:03:23.838]    </block>
[18:03:23.846]    <control if="powered_down" while="" timeout="0" info="">
[18:03:23.846]      // if-block "powered_down"
[18:03:23.846]        // =>  TRUE
[18:03:23.846]      <block atomic="false" info="">
[18:03:23.846]        Message(0, "Debug/System power-up request sent");
[18:03:23.849]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:03:23.849]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:03:23.849]      </block>
[18:03:23.849]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:03:23.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:03:23.849]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:03:23.849]        // while-condition  =>  FALSE
[18:03:23.849]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:03:23.849]      </control>
[18:03:23.849]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:03:23.849]        // if-block "(__protocol & 0xFFFF) == 1"
[18:03:23.849]          // =>  FALSE
[18:03:23.849]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:03:23.856]      </control>
[18:03:23.856]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:03:23.856]        // if-block "(__protocol & 0xFFFF) == 2"
[18:03:23.856]          // =>  TRUE
[18:03:23.856]        <block atomic="false" info="">
[18:03:23.856]          Message(0, "executing SWD power up");
[18:03:23.856]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:03:23.856]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:03:23.856]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:03:23.856]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:03:23.856]        </block>
[18:03:23.856]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:03:23.856]      </control>
[18:03:23.856]      // end if-block "powered_down"
[18:03:23.856]    </control>
[18:03:23.856]    <block atomic="false" info="">
[18:03:23.856]      __var DEBUG_PORT_VAL    = 0;
[18:03:23.856]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:03:23.856]      __var ACCESS_POINT_VAL  = 0;
[18:03:23.856]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:03:23.856]      __ap = 1; 
[18:03:23.856]        // -> [__ap <= 0x00000001]
[18:03:23.856]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:03:23.868]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:03:23.868]      __ap = 4;
[18:03:23.868]        // -> [__ap <= 0x00000004]
[18:03:23.868]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:03:23.877]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:03:23.877]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:03:23.877]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:03:23.877]    </block>
[18:03:23.877]    <block atomic="false" info="">
[18:03:23.877]      __var nReset = 0x80;
[18:03:23.877]        // -> [nReset <= 0x00000080]
[18:03:23.877]      __var canReadPins = 0;
[18:03:23.877]        // -> [canReadPins <= 0x00000000]
[18:03:23.877]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:03:23.877]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:03:23.877]        // -> [canReadPins <= 0x00000001]
[18:03:23.877]    </block>
[18:03:23.877]    <control if="" while="1" timeout="200" info="">
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.877]      // while-condition  =>  TRUE
[18:03:23.877]      // while "1"  (timeout="200")
[18:03:23.886]      // while-condition  =>  TRUE
[18:03:23.886]      // while "1"  (timeout="200")
[18:03:23.886]      // while  =>  TIMEOUT
[18:03:23.886]      // end while "1"
[18:03:23.886]    </control>
[18:03:23.886]    <control if="canReadPins" while="" timeout="0" info="">
[18:03:23.886]      // if-block "canReadPins"
[18:03:23.886]        // =>  TRUE
[18:03:23.886]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:03:23.886]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:03:23.888]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:03:23.888]        // while-condition  =>  FALSE
[18:03:23.888]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:03:23.888]      </control>
[18:03:23.888]      // end if-block "canReadPins"
[18:03:23.888]    </control>
[18:03:23.888]    <control if="!canReadPins" while="" timeout="0" info="">
[18:03:23.888]      // if-block "!canReadPins"
[18:03:23.888]        // =>  FALSE
[18:03:23.888]      // skip if-block "!canReadPins"
[18:03:23.888]    </control>
[18:03:23.888]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:03:23.888]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:03:23.888]        // =>  TRUE
[18:03:23.888]      <block atomic="false" info="">
[18:03:23.888]        WriteAP(0x00, 0x190008);
[18:03:23.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:03:23.888]        WriteAP(0xF0, 0x01);
[18:03:23.896]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:03:23.896]      </block>
[18:03:23.896]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:03:23.896]    </control>
[18:03:23.896]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:03:23.896]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:03:23.898]        // =>  FALSE
[18:03:23.898]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:03:23.898]    </control>
[18:03:23.898]    <block atomic="false" info="">
[18:03:23.898]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:03:23.898]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:03:23.898]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:03:23.898]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:03:23.898]      __ap = 0; //lets make sure we reset the access point selection
[18:03:23.898]        // -> [__ap <= 0x00000000]
[18:03:23.898]    </block>
[18:03:23.898]  </sequence>
[18:03:23.898]  
[18:03:23.926]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:03:23.926]  
[18:03:23.926]  <debugvars>
[18:03:23.926]    // Pre-defined
[18:03:23.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:23.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:23.926]    __dp=0x00000000
[18:03:23.926]    __ap=0x00000000
[18:03:23.935]    __traceout=0x00000000      (Trace Disabled)
[18:03:23.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:23.935]    __FlashAddr=0x00000000
[18:03:23.935]    __FlashLen=0x00000000
[18:03:23.935]    __FlashArg=0x00000000
[18:03:23.935]    __FlashOp=0x00000000
[18:03:23.935]    __Result=0x00000000
[18:03:23.935]  </debugvars>
[18:03:23.935]  
[18:03:23.935]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:03:23.936]    <block atomic="false" info="">
[18:03:23.936]      __var deviceID = 0;
[18:03:23.936]        // -> [deviceID <= 0x00000000]
[18:03:23.936]      __var version = 0;
[18:03:23.936]        // -> [version <= 0x00000000]
[18:03:23.936]      __var partNum = 0;
[18:03:23.936]        // -> [partNum <= 0x00000000]
[18:03:23.936]      __var manuf = 0;
[18:03:23.936]        // -> [manuf <= 0x00000000]
[18:03:23.936]      __var isMSPM0G1X0X_G3X0X = 0;
[18:03:23.936]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:03:23.936]      __var isProduction = 0;
[18:03:23.936]        // -> [isProduction <= 0x00000000]
[18:03:23.936]      __var continueId = 0;
[18:03:23.936]        // -> [continueId <= 0x00000000]
[18:03:23.936]      deviceID =   Read32(0x41C40004);
[18:03:23.936]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:03:23.936]        // -> [deviceID <= 0x2BB8802F]
[18:03:23.936]      version = deviceID >> 28;
[18:03:23.936]        // -> [version <= 0x00000002]
[18:03:23.936]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:03:23.936]        // -> [partNum <= 0x0000BB88]
[18:03:23.936]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:03:23.936]        // -> [manuf <= 0x00000017]
[18:03:23.936]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:03:23.936]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:03:23.936]      isProduction = (version > 0);
[18:03:23.936]        // -> [isProduction <= 0x00000001]
[18:03:23.936]    </block>
[18:03:23.936]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:03:23.945]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:03:23.945]        // =>  FALSE
[18:03:23.945]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:03:23.945]    </control>
[18:03:23.945]    <control if="continueId == 4" while="" timeout="0" info="">
[18:03:23.946]      // if-block "continueId == 4"
[18:03:23.946]        // =>  FALSE
[18:03:23.946]      // skip if-block "continueId == 4"
[18:03:23.946]    </control>
[18:03:23.946]    <control if="!isProduction" while="" timeout="0" info="">
[18:03:23.946]      // if-block "!isProduction"
[18:03:23.946]        // =>  FALSE
[18:03:23.947]      // skip if-block "!isProduction"
[18:03:23.947]    </control>
[18:03:23.947]  </sequence>
[18:03:23.947]  
[18:03:59.169]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:03:59.169]  
[18:03:59.178]  <debugvars>
[18:03:59.178]    // Pre-defined
[18:03:59.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:59.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:59.178]    __dp=0x00000000
[18:03:59.178]    __ap=0x00000000
[18:03:59.178]    __traceout=0x00000000      (Trace Disabled)
[18:03:59.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:59.178]    __FlashAddr=0x00000000
[18:03:59.178]    __FlashLen=0x00000000
[18:03:59.178]    __FlashArg=0x00000000
[18:03:59.178]    __FlashOp=0x00000000
[18:03:59.178]    __Result=0x00000000
[18:03:59.178]  </debugvars>
[18:03:59.178]  
[18:03:59.178]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:03:59.178]    <block atomic="false" info="">
[18:03:59.178]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:03:59.178]        // -> [isSWJ <= 0x00000001]
[18:03:59.178]      __var hasDormant = __protocol & 0x00020000;
[18:03:59.180]        // -> [hasDormant <= 0x00000000]
[18:03:59.180]      __var protType   = __protocol & 0x0000FFFF;
[18:03:59.180]        // -> [protType <= 0x00000002]
[18:03:59.180]    </block>
[18:03:59.180]    <control if="protType == 1" while="" timeout="0" info="">
[18:03:59.180]      // if-block "protType == 1"
[18:03:59.180]        // =>  FALSE
[18:03:59.180]      // skip if-block "protType == 1"
[18:03:59.180]    </control>
[18:03:59.180]    <control if="protType == 2" while="" timeout="0" info="">
[18:03:59.180]      // if-block "protType == 2"
[18:03:59.180]        // =>  TRUE
[18:03:59.180]      <control if="isSWJ" while="" timeout="0" info="">
[18:03:59.180]        // if-block "isSWJ"
[18:03:59.180]          // =>  TRUE
[18:03:59.180]        <control if="hasDormant" while="" timeout="0" info="">
[18:03:59.180]          // if-block "hasDormant"
[18:03:59.180]            // =>  FALSE
[18:03:59.180]          // skip if-block "hasDormant"
[18:03:59.180]        </control>
[18:03:59.183]        <control if="!hasDormant" while="" timeout="0" info="">
[18:03:59.183]          // if-block "!hasDormant"
[18:03:59.183]            // =>  TRUE
[18:03:59.183]          <block atomic="false" info="">
[18:03:59.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:03:59.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:59.185]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:03:59.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:03:59.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:03:59.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:59.185]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:03:59.190]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:03:59.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:03:59.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:03:59.190]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:03:59.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:03:59.190]          </block>
[18:03:59.190]          // end if-block "!hasDormant"
[18:03:59.190]        </control>
[18:03:59.190]        // end if-block "isSWJ"
[18:03:59.190]      </control>
[18:03:59.190]      <control if="!isSWJ" while="" timeout="0" info="">
[18:03:59.190]        // if-block "!isSWJ"
[18:03:59.190]          // =>  FALSE
[18:03:59.196]        // skip if-block "!isSWJ"
[18:03:59.196]      </control>
[18:03:59.196]      <block atomic="false" info="">
[18:03:59.196]        ReadDP(0x0);
[18:03:59.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:03:59.197]      </block>
[18:03:59.197]      // end if-block "protType == 2"
[18:03:59.197]    </control>
[18:03:59.197]  </sequence>
[18:03:59.197]  
[18:03:59.200]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:03:59.200]  
[18:03:59.200]  <debugvars>
[18:03:59.200]    // Pre-defined
[18:03:59.200]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:59.200]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:59.200]    __dp=0x00000000
[18:03:59.200]    __ap=0x00000000
[18:03:59.200]    __traceout=0x00000000      (Trace Disabled)
[18:03:59.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:59.200]    __FlashAddr=0x00000000
[18:03:59.200]    __FlashLen=0x00000000
[18:03:59.200]    __FlashArg=0x00000000
[18:03:59.203]    __FlashOp=0x00000000
[18:03:59.203]    __Result=0x00000000
[18:03:59.204]  </debugvars>
[18:03:59.204]  
[18:03:59.204]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:03:59.204]    <block atomic="false" info="">
[18:03:59.204]      __var SW_DP_ABORT       = 0x0;
[18:03:59.204]        // -> [SW_DP_ABORT <= 0x00000000]
[18:03:59.204]      __var DP_CTRL_STAT      = 0x4;
[18:03:59.204]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:03:59.204]      __var DP_SELECT         = 0x8;
[18:03:59.204]        // -> [DP_SELECT <= 0x00000008]
[18:03:59.204]      __var powered_down      = 0;
[18:03:59.204]        // -> [powered_down <= 0x00000000]
[18:03:59.204]      WriteDP(DP_SELECT, 0x00000000);
[18:03:59.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:03:59.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:03:59.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:03:59.204]        // -> [powered_down <= 0x00000001]
[18:03:59.204]    </block>
[18:03:59.204]    <control if="powered_down" while="" timeout="0" info="">
[18:03:59.204]      // if-block "powered_down"
[18:03:59.204]        // =>  TRUE
[18:03:59.204]      <block atomic="false" info="">
[18:03:59.204]        Message(0, "Debug/System power-up request sent");
[18:03:59.212]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:03:59.217]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:03:59.217]      </block>
[18:03:59.218]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:03:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:03:59.232]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:03:59.232]        // while-condition  =>  FALSE
[18:03:59.232]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:03:59.232]      </control>
[18:03:59.232]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:03:59.232]        // if-block "(__protocol & 0xFFFF) == 1"
[18:03:59.232]          // =>  FALSE
[18:03:59.232]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:03:59.232]      </control>
[18:03:59.232]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:03:59.232]        // if-block "(__protocol & 0xFFFF) == 2"
[18:03:59.232]          // =>  TRUE
[18:03:59.232]        <block atomic="false" info="">
[18:03:59.232]          Message(0, "executing SWD power up");
[18:03:59.233]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:03:59.233]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:03:59.233]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:03:59.238]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:03:59.239]        </block>
[18:03:59.239]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:03:59.239]      </control>
[18:03:59.239]      // end if-block "powered_down"
[18:03:59.239]    </control>
[18:03:59.239]    <block atomic="false" info="">
[18:03:59.239]      __var DEBUG_PORT_VAL    = 0;
[18:03:59.239]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:03:59.239]      __var ACCESS_POINT_VAL  = 0;
[18:03:59.239]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:03:59.239]      __ap = 1; 
[18:03:59.239]        // -> [__ap <= 0x00000001]
[18:03:59.239]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:03:59.240]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:03:59.240]      __ap = 4;
[18:03:59.240]        // -> [__ap <= 0x00000004]
[18:03:59.240]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:03:59.245]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:03:59.245]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:03:59.245]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:03:59.245]    </block>
[18:03:59.245]    <block atomic="false" info="">
[18:03:59.245]      __var nReset = 0x80;
[18:03:59.245]        // -> [nReset <= 0x00000080]
[18:03:59.245]      __var canReadPins = 0;
[18:03:59.245]        // -> [canReadPins <= 0x00000000]
[18:03:59.245]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:03:59.252]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:03:59.252]        // -> [canReadPins <= 0x00000001]
[18:03:59.252]    </block>
[18:03:59.252]    <control if="" while="1" timeout="200" info="">
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.252]      // while "1"  (timeout="200")
[18:03:59.252]      // while-condition  =>  TRUE
[18:03:59.258]      // while "1"  (timeout="200")
[18:03:59.258]      // while  =>  TIMEOUT
[18:03:59.258]      // end while "1"
[18:03:59.259]    </control>
[18:03:59.259]    <control if="canReadPins" while="" timeout="0" info="">
[18:03:59.259]      // if-block "canReadPins"
[18:03:59.259]        // =>  TRUE
[18:03:59.259]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:03:59.259]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:03:59.262]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:03:59.262]        // while-condition  =>  FALSE
[18:03:59.262]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:03:59.262]      </control>
[18:03:59.262]      // end if-block "canReadPins"
[18:03:59.262]    </control>
[18:03:59.262]    <control if="!canReadPins" while="" timeout="0" info="">
[18:03:59.262]      // if-block "!canReadPins"
[18:03:59.262]        // =>  FALSE
[18:03:59.262]      // skip if-block "!canReadPins"
[18:03:59.265]    </control>
[18:03:59.265]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:03:59.265]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:03:59.265]        // =>  TRUE
[18:03:59.265]      <block atomic="false" info="">
[18:03:59.265]        WriteAP(0x00, 0x190008);
[18:03:59.266]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:03:59.266]        WriteAP(0xF0, 0x01);
[18:03:59.273]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:03:59.273]      </block>
[18:03:59.273]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:03:59.273]    </control>
[18:03:59.273]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:03:59.273]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:03:59.273]        // =>  FALSE
[18:03:59.273]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:03:59.273]    </control>
[18:03:59.273]    <block atomic="false" info="">
[18:03:59.273]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:03:59.273]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:03:59.273]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:03:59.273]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:03:59.281]      __ap = 0; //lets make sure we reset the access point selection
[18:03:59.281]        // -> [__ap <= 0x00000000]
[18:03:59.281]    </block>
[18:03:59.281]  </sequence>
[18:03:59.281]  
[18:03:59.303]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:03:59.303]  
[18:03:59.303]  <debugvars>
[18:03:59.303]    // Pre-defined
[18:03:59.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:03:59.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:03:59.305]    __dp=0x00000000
[18:03:59.305]    __ap=0x00000000
[18:03:59.305]    __traceout=0x00000000      (Trace Disabled)
[18:03:59.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:03:59.305]    __FlashAddr=0x00000000
[18:03:59.305]    __FlashLen=0x00000000
[18:03:59.305]    __FlashArg=0x00000000
[18:03:59.305]    __FlashOp=0x00000000
[18:03:59.305]    __Result=0x00000000
[18:03:59.305]  </debugvars>
[18:03:59.305]  
[18:03:59.305]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:03:59.305]    <block atomic="false" info="">
[18:03:59.305]      __var deviceID = 0;
[18:03:59.305]        // -> [deviceID <= 0x00000000]
[18:03:59.305]      __var version = 0;
[18:03:59.305]        // -> [version <= 0x00000000]
[18:03:59.305]      __var partNum = 0;
[18:03:59.305]        // -> [partNum <= 0x00000000]
[18:03:59.305]      __var manuf = 0;
[18:03:59.305]        // -> [manuf <= 0x00000000]
[18:03:59.307]      __var isMSPM0G1X0X_G3X0X = 0;
[18:03:59.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:03:59.307]      __var isProduction = 0;
[18:03:59.307]        // -> [isProduction <= 0x00000000]
[18:03:59.307]      __var continueId = 0;
[18:03:59.307]        // -> [continueId <= 0x00000000]
[18:03:59.308]      deviceID =   Read32(0x41C40004);
[18:03:59.315]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:03:59.315]        // -> [deviceID <= 0x2BB8802F]
[18:03:59.315]      version = deviceID >> 28;
[18:03:59.315]        // -> [version <= 0x00000002]
[18:03:59.315]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:03:59.315]        // -> [partNum <= 0x0000BB88]
[18:03:59.315]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:03:59.315]        // -> [manuf <= 0x00000017]
[18:03:59.315]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:03:59.315]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:03:59.315]      isProduction = (version > 0);
[18:03:59.315]        // -> [isProduction <= 0x00000001]
[18:03:59.315]    </block>
[18:03:59.315]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:03:59.315]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:03:59.315]        // =>  FALSE
[18:03:59.315]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:03:59.315]    </control>
[18:03:59.317]    <control if="continueId == 4" while="" timeout="0" info="">
[18:03:59.317]      // if-block "continueId == 4"
[18:03:59.317]        // =>  FALSE
[18:03:59.317]      // skip if-block "continueId == 4"
[18:03:59.317]    </control>
[18:03:59.317]    <control if="!isProduction" while="" timeout="0" info="">
[18:03:59.317]      // if-block "!isProduction"
[18:03:59.317]        // =>  FALSE
[18:03:59.317]      // skip if-block "!isProduction"
[18:03:59.317]    </control>
[18:03:59.317]  </sequence>
[18:03:59.318]  
[18:04:40.153]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:04:40.153]  
[18:04:40.157]  <debugvars>
[18:04:40.157]    // Pre-defined
[18:04:40.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:04:40.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:04:40.157]    __dp=0x00000000
[18:04:40.157]    __ap=0x00000000
[18:04:40.157]    __traceout=0x00000000      (Trace Disabled)
[18:04:40.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:04:40.157]    __FlashAddr=0x00000000
[18:04:40.157]    __FlashLen=0x00000000
[18:04:40.157]    __FlashArg=0x00000000
[18:04:40.157]    __FlashOp=0x00000000
[18:04:40.157]    __Result=0x00000000
[18:04:40.157]  </debugvars>
[18:04:40.157]  
[18:04:40.157]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:04:40.157]    <block atomic="false" info="">
[18:04:40.157]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:04:40.157]        // -> [isSWJ <= 0x00000001]
[18:04:40.157]      __var hasDormant = __protocol & 0x00020000;
[18:04:40.157]        // -> [hasDormant <= 0x00000000]
[18:04:40.157]      __var protType   = __protocol & 0x0000FFFF;
[18:04:40.157]        // -> [protType <= 0x00000002]
[18:04:40.157]    </block>
[18:04:40.157]    <control if="protType == 1" while="" timeout="0" info="">
[18:04:40.157]      // if-block "protType == 1"
[18:04:40.160]        // =>  FALSE
[18:04:40.160]      // skip if-block "protType == 1"
[18:04:40.160]    </control>
[18:04:40.160]    <control if="protType == 2" while="" timeout="0" info="">
[18:04:40.160]      // if-block "protType == 2"
[18:04:40.160]        // =>  TRUE
[18:04:40.160]      <control if="isSWJ" while="" timeout="0" info="">
[18:04:40.160]        // if-block "isSWJ"
[18:04:40.161]          // =>  TRUE
[18:04:40.161]        <control if="hasDormant" while="" timeout="0" info="">
[18:04:40.161]          // if-block "hasDormant"
[18:04:40.161]            // =>  FALSE
[18:04:40.161]          // skip if-block "hasDormant"
[18:04:40.161]        </control>
[18:04:40.161]        <control if="!hasDormant" while="" timeout="0" info="">
[18:04:40.161]          // if-block "!hasDormant"
[18:04:40.161]            // =>  TRUE
[18:04:40.161]          <block atomic="false" info="">
[18:04:40.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:04:40.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:04:40.163]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:04:40.165]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:04:40.165]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:04:40.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:04:40.167]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:04:40.168]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:04:40.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:04:40.170]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:04:40.170]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:04:40.171]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:04:40.172]          </block>
[18:04:40.172]          // end if-block "!hasDormant"
[18:04:40.172]        </control>
[18:04:40.172]        // end if-block "isSWJ"
[18:04:40.172]      </control>
[18:04:40.172]      <control if="!isSWJ" while="" timeout="0" info="">
[18:04:40.172]        // if-block "!isSWJ"
[18:04:40.172]          // =>  FALSE
[18:04:40.172]        // skip if-block "!isSWJ"
[18:04:40.172]      </control>
[18:04:40.173]      <block atomic="false" info="">
[18:04:40.173]        ReadDP(0x0);
[18:04:40.174]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:04:40.174]      </block>
[18:04:40.174]      // end if-block "protType == 2"
[18:04:40.175]    </control>
[18:04:40.175]  </sequence>
[18:04:40.175]  
[18:04:40.177]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:04:40.177]  
[18:04:40.177]  <debugvars>
[18:04:40.177]    // Pre-defined
[18:04:40.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:04:40.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:04:40.178]    __dp=0x00000000
[18:04:40.178]    __ap=0x00000000
[18:04:40.178]    __traceout=0x00000000      (Trace Disabled)
[18:04:40.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:04:40.178]    __FlashAddr=0x00000000
[18:04:40.178]    __FlashLen=0x00000000
[18:04:40.178]    __FlashArg=0x00000000
[18:04:40.179]    __FlashOp=0x00000000
[18:04:40.179]    __Result=0x00000000
[18:04:40.179]  </debugvars>
[18:04:40.179]  
[18:04:40.179]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:04:40.179]    <block atomic="false" info="">
[18:04:40.179]      __var SW_DP_ABORT       = 0x0;
[18:04:40.179]        // -> [SW_DP_ABORT <= 0x00000000]
[18:04:40.180]      __var DP_CTRL_STAT      = 0x4;
[18:04:40.180]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:04:40.180]      __var DP_SELECT         = 0x8;
[18:04:40.180]        // -> [DP_SELECT <= 0x00000008]
[18:04:40.180]      __var powered_down      = 0;
[18:04:40.180]        // -> [powered_down <= 0x00000000]
[18:04:40.180]      WriteDP(DP_SELECT, 0x00000000);
[18:04:40.183]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:04:40.183]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:04:40.184]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:04:40.184]        // -> [powered_down <= 0x00000001]
[18:04:40.184]    </block>
[18:04:40.185]    <control if="powered_down" while="" timeout="0" info="">
[18:04:40.185]      // if-block "powered_down"
[18:04:40.185]        // =>  TRUE
[18:04:40.185]      <block atomic="false" info="">
[18:04:40.185]        Message(0, "Debug/System power-up request sent");
[18:04:40.187]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:04:40.190]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:04:40.190]      </block>
[18:04:40.190]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:04:40.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:04:40.191]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:04:40.191]        // while-condition  =>  FALSE
[18:04:40.192]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:04:40.192]      </control>
[18:04:40.192]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:04:40.192]        // if-block "(__protocol & 0xFFFF) == 1"
[18:04:40.192]          // =>  FALSE
[18:04:40.192]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:04:40.193]      </control>
[18:04:40.193]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:04:40.193]        // if-block "(__protocol & 0xFFFF) == 2"
[18:04:40.193]          // =>  TRUE
[18:04:40.193]        <block atomic="false" info="">
[18:04:40.193]          Message(0, "executing SWD power up");
[18:04:40.195]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:04:40.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:04:40.198]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:04:40.200]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:04:40.200]        </block>
[18:04:40.200]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:04:40.200]      </control>
[18:04:40.200]      // end if-block "powered_down"
[18:04:40.200]    </control>
[18:04:40.200]    <block atomic="false" info="">
[18:04:40.200]      __var DEBUG_PORT_VAL    = 0;
[18:04:40.200]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:04:40.201]      __var ACCESS_POINT_VAL  = 0;
[18:04:40.201]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:04:40.201]      __ap = 1; 
[18:04:40.201]        // -> [__ap <= 0x00000001]
[18:04:40.201]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:04:40.204]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:04:40.204]      __ap = 4;
[18:04:40.204]        // -> [__ap <= 0x00000004]
[18:04:40.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:04:40.206]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:04:40.206]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:04:40.206]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:04:40.209]    </block>
[18:04:40.209]    <block atomic="false" info="">
[18:04:40.209]      __var nReset = 0x80;
[18:04:40.209]        // -> [nReset <= 0x00000080]
[18:04:40.209]      __var canReadPins = 0;
[18:04:40.209]        // -> [canReadPins <= 0x00000000]
[18:04:40.209]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:04:40.213]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:04:40.213]        // -> [canReadPins <= 0x00000001]
[18:04:40.213]    </block>
[18:04:40.213]    <control if="" while="1" timeout="200" info="">
[18:04:40.213]      // while "1"  (timeout="200")
[18:04:40.213]      // while-condition  =>  TRUE
[18:04:40.213]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.215]      // while-condition  =>  TRUE
[18:04:40.215]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.217]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.217]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.217]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.217]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.217]      // while "1"  (timeout="200")
[18:04:40.217]      // while-condition  =>  TRUE
[18:04:40.218]      // while "1"  (timeout="200")
[18:04:40.218]      // while-condition  =>  TRUE
[18:04:40.218]      // while "1"  (timeout="200")
[18:04:40.218]      // while-condition  =>  TRUE
[18:04:40.218]      // while "1"  (timeout="200")
[18:04:40.218]      // while-condition  =>  TRUE
[18:04:40.218]      // while "1"  (timeout="200")
[18:04:40.218]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.219]      // while-condition  =>  TRUE
[18:04:40.219]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.221]      // while-condition  =>  TRUE
[18:04:40.221]      // while "1"  (timeout="200")
[18:04:40.223]      // while-condition  =>  TRUE
[18:04:40.223]      // while "1"  (timeout="200")
[18:04:40.223]      // while  =>  TIMEOUT
[18:04:40.223]      // end while "1"
[18:04:40.223]    </control>
[18:04:40.223]    <control if="canReadPins" while="" timeout="0" info="">
[18:04:40.223]      // if-block "canReadPins"
[18:04:40.223]        // =>  TRUE
[18:04:40.223]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:04:40.223]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:04:40.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:04:40.226]        // while-condition  =>  FALSE
[18:04:40.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:04:40.226]      </control>
[18:04:40.226]      // end if-block "canReadPins"
[18:04:40.226]    </control>
[18:04:40.226]    <control if="!canReadPins" while="" timeout="0" info="">
[18:04:40.226]      // if-block "!canReadPins"
[18:04:40.226]        // =>  FALSE
[18:04:40.226]      // skip if-block "!canReadPins"
[18:04:40.226]    </control>
[18:04:40.233]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:04:40.233]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:04:40.233]        // =>  TRUE
[18:04:40.233]      <block atomic="false" info="">
[18:04:40.234]        WriteAP(0x00, 0x190008);
[18:04:40.234]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:04:40.234]        WriteAP(0xF0, 0x01);
[18:04:40.238]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:04:40.238]      </block>
[18:04:40.238]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:04:40.238]    </control>
[18:04:40.238]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:04:40.238]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:04:40.238]        // =>  FALSE
[18:04:40.238]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:04:40.238]    </control>
[18:04:40.238]    <block atomic="false" info="">
[18:04:40.238]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:04:40.243]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:04:40.243]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:04:40.243]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:04:40.245]      __ap = 0; //lets make sure we reset the access point selection
[18:04:40.245]        // -> [__ap <= 0x00000000]
[18:04:40.245]    </block>
[18:04:40.245]  </sequence>
[18:04:40.245]  
[18:04:40.264]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:04:40.264]  
[18:04:40.264]  <debugvars>
[18:04:40.264]    // Pre-defined
[18:04:40.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:04:40.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:04:40.264]    __dp=0x00000000
[18:04:40.264]    __ap=0x00000000
[18:04:40.264]    __traceout=0x00000000      (Trace Disabled)
[18:04:40.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:04:40.264]    __FlashAddr=0x00000000
[18:04:40.264]    __FlashLen=0x00000000
[18:04:40.264]    __FlashArg=0x00000000
[18:04:40.264]    __FlashOp=0x00000000
[18:04:40.264]    __Result=0x00000000
[18:04:40.264]  </debugvars>
[18:04:40.264]  
[18:04:40.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:04:40.264]    <block atomic="false" info="">
[18:04:40.264]      __var deviceID = 0;
[18:04:40.264]        // -> [deviceID <= 0x00000000]
[18:04:40.264]      __var version = 0;
[18:04:40.264]        // -> [version <= 0x00000000]
[18:04:40.264]      __var partNum = 0;
[18:04:40.264]        // -> [partNum <= 0x00000000]
[18:04:40.264]      __var manuf = 0;
[18:04:40.264]        // -> [manuf <= 0x00000000]
[18:04:40.264]      __var isMSPM0G1X0X_G3X0X = 0;
[18:04:40.264]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:04:40.264]      __var isProduction = 0;
[18:04:40.264]        // -> [isProduction <= 0x00000000]
[18:04:40.264]      __var continueId = 0;
[18:04:40.264]        // -> [continueId <= 0x00000000]
[18:04:40.264]      deviceID =   Read32(0x41C40004);
[18:04:40.274]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:04:40.274]        // -> [deviceID <= 0x2BB8802F]
[18:04:40.274]      version = deviceID >> 28;
[18:04:40.274]        // -> [version <= 0x00000002]
[18:04:40.274]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:04:40.274]        // -> [partNum <= 0x0000BB88]
[18:04:40.274]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:04:40.274]        // -> [manuf <= 0x00000017]
[18:04:40.274]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:04:40.274]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:04:40.274]      isProduction = (version > 0);
[18:04:40.274]        // -> [isProduction <= 0x00000001]
[18:04:40.274]    </block>
[18:04:40.274]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:04:40.274]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:04:40.274]        // =>  FALSE
[18:04:40.274]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:04:40.274]    </control>
[18:04:40.274]    <control if="continueId == 4" while="" timeout="0" info="">
[18:04:40.274]      // if-block "continueId == 4"
[18:04:40.274]        // =>  FALSE
[18:04:40.274]      // skip if-block "continueId == 4"
[18:04:40.274]    </control>
[18:04:40.274]    <control if="!isProduction" while="" timeout="0" info="">
[18:04:40.274]      // if-block "!isProduction"
[18:04:40.274]        // =>  FALSE
[18:04:40.274]      // skip if-block "!isProduction"
[18:04:40.274]    </control>
[18:04:40.274]  </sequence>
[18:04:40.274]  
[18:11:36.874]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:11:36.874]  
[18:11:36.886]  <debugvars>
[18:11:36.886]    // Pre-defined
[18:11:36.886]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:36.886]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:11:36.886]    __dp=0x00000000
[18:11:36.886]    __ap=0x00000000
[18:11:36.886]    __traceout=0x00000000      (Trace Disabled)
[18:11:36.886]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:36.886]    __FlashAddr=0x00000000
[18:11:36.886]    __FlashLen=0x00000000
[18:11:36.886]    __FlashArg=0x00000000
[18:11:36.886]    __FlashOp=0x00000000
[18:11:36.886]    __Result=0x00000000
[18:11:36.886]  </debugvars>
[18:11:36.886]  
[18:11:36.886]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:11:36.886]    <block atomic="false" info="">
[18:11:36.886]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:11:36.886]        // -> [isSWJ <= 0x00000001]
[18:11:36.886]      __var hasDormant = __protocol & 0x00020000;
[18:11:36.886]        // -> [hasDormant <= 0x00000000]
[18:11:36.886]      __var protType   = __protocol & 0x0000FFFF;
[18:11:36.886]        // -> [protType <= 0x00000002]
[18:11:36.886]    </block>
[18:11:36.886]    <control if="protType == 1" while="" timeout="0" info="">
[18:11:36.886]      // if-block "protType == 1"
[18:11:36.886]        // =>  FALSE
[18:11:36.886]      // skip if-block "protType == 1"
[18:11:36.886]    </control>
[18:11:36.886]    <control if="protType == 2" while="" timeout="0" info="">
[18:11:36.886]      // if-block "protType == 2"
[18:11:36.886]        // =>  TRUE
[18:11:36.886]      <control if="isSWJ" while="" timeout="0" info="">
[18:11:36.886]        // if-block "isSWJ"
[18:11:36.886]          // =>  TRUE
[18:11:36.886]        <control if="hasDormant" while="" timeout="0" info="">
[18:11:36.886]          // if-block "hasDormant"
[18:11:36.886]            // =>  FALSE
[18:11:36.886]          // skip if-block "hasDormant"
[18:11:36.886]        </control>
[18:11:36.886]        <control if="!hasDormant" while="" timeout="0" info="">
[18:11:36.886]          // if-block "!hasDormant"
[18:11:36.886]            // =>  TRUE
[18:11:36.886]          <block atomic="false" info="">
[18:11:36.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:11:36.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:36.892]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:11:36.892]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:11:36.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:11:36.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:36.894]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:11:36.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:11:36.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:11:36.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:36.894]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:11:36.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:11:36.894]          </block>
[18:11:36.894]          // end if-block "!hasDormant"
[18:11:36.894]        </control>
[18:11:36.894]        // end if-block "isSWJ"
[18:11:36.894]      </control>
[18:11:36.894]      <control if="!isSWJ" while="" timeout="0" info="">
[18:11:36.894]        // if-block "!isSWJ"
[18:11:36.894]          // =>  FALSE
[18:11:36.902]        // skip if-block "!isSWJ"
[18:11:36.902]      </control>
[18:11:36.902]      <block atomic="false" info="">
[18:11:36.902]        ReadDP(0x0);
[18:11:36.902]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:11:36.902]      </block>
[18:11:36.902]      // end if-block "protType == 2"
[18:11:36.902]    </control>
[18:11:36.902]  </sequence>
[18:11:36.902]  
[18:11:36.902]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:11:36.902]  
[18:11:36.902]  <debugvars>
[18:11:36.902]    // Pre-defined
[18:11:36.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:36.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:11:36.902]    __dp=0x00000000
[18:11:36.902]    __ap=0x00000000
[18:11:36.902]    __traceout=0x00000000      (Trace Disabled)
[18:11:36.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:36.902]    __FlashAddr=0x00000000
[18:11:36.902]    __FlashLen=0x00000000
[18:11:36.902]    __FlashArg=0x00000000
[18:11:36.902]    __FlashOp=0x00000000
[18:11:36.902]    __Result=0x00000000
[18:11:36.902]  </debugvars>
[18:11:36.902]  
[18:11:36.902]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:11:36.902]    <block atomic="false" info="">
[18:11:36.902]      __var SW_DP_ABORT       = 0x0;
[18:11:36.902]        // -> [SW_DP_ABORT <= 0x00000000]
[18:11:36.902]      __var DP_CTRL_STAT      = 0x4;
[18:11:36.902]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:11:36.902]      __var DP_SELECT         = 0x8;
[18:11:36.902]        // -> [DP_SELECT <= 0x00000008]
[18:11:36.902]      __var powered_down      = 0;
[18:11:36.902]        // -> [powered_down <= 0x00000000]
[18:11:36.902]      WriteDP(DP_SELECT, 0x00000000);
[18:11:36.902]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:11:36.902]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:11:36.912]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:11:36.912]        // -> [powered_down <= 0x00000001]
[18:11:36.912]    </block>
[18:11:36.912]    <control if="powered_down" while="" timeout="0" info="">
[18:11:36.912]      // if-block "powered_down"
[18:11:36.912]        // =>  TRUE
[18:11:36.912]      <block atomic="false" info="">
[18:11:36.912]        Message(0, "Debug/System power-up request sent");
[18:11:36.914]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:11:36.915]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:11:36.915]      </block>
[18:11:36.915]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:11:36.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:11:36.918]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:11:36.918]        // while-condition  =>  FALSE
[18:11:36.918]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:11:36.918]      </control>
[18:11:36.918]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:11:36.918]        // if-block "(__protocol & 0xFFFF) == 1"
[18:11:36.918]          // =>  FALSE
[18:11:36.918]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:11:36.918]      </control>
[18:11:36.918]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:11:36.918]        // if-block "(__protocol & 0xFFFF) == 2"
[18:11:36.918]          // =>  TRUE
[18:11:36.918]        <block atomic="false" info="">
[18:11:36.918]          Message(0, "executing SWD power up");
[18:11:36.918]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:11:36.922]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:11:36.922]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:11:36.922]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:11:36.922]        </block>
[18:11:36.922]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:11:36.922]      </control>
[18:11:36.922]      // end if-block "powered_down"
[18:11:36.922]    </control>
[18:11:36.922]    <block atomic="false" info="">
[18:11:36.922]      __var DEBUG_PORT_VAL    = 0;
[18:11:36.922]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:11:36.922]      __var ACCESS_POINT_VAL  = 0;
[18:11:36.922]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:11:36.922]      __ap = 1; 
[18:11:36.922]        // -> [__ap <= 0x00000001]
[18:11:36.922]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:11:36.922]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:11:36.922]      __ap = 4;
[18:11:36.922]        // -> [__ap <= 0x00000004]
[18:11:36.922]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:11:36.933]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:11:36.933]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:11:36.933]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:11:36.934]    </block>
[18:11:36.934]    <block atomic="false" info="">
[18:11:36.934]      __var nReset = 0x80;
[18:11:36.934]        // -> [nReset <= 0x00000080]
[18:11:36.934]      __var canReadPins = 0;
[18:11:36.934]        // -> [canReadPins <= 0x00000000]
[18:11:36.934]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:11:36.934]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:11:36.934]        // -> [canReadPins <= 0x00000001]
[18:11:36.934]    </block>
[18:11:36.934]    <control if="" while="1" timeout="200" info="">
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.934]      // while "1"  (timeout="200")
[18:11:36.934]      // while-condition  =>  TRUE
[18:11:36.942]      // while "1"  (timeout="200")
[18:11:36.942]      // while  =>  TIMEOUT
[18:11:36.942]      // end while "1"
[18:11:36.942]    </control>
[18:11:36.942]    <control if="canReadPins" while="" timeout="0" info="">
[18:11:36.942]      // if-block "canReadPins"
[18:11:36.942]        // =>  TRUE
[18:11:36.942]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:11:36.942]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:11:36.944]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:11:36.944]        // while-condition  =>  FALSE
[18:11:36.944]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:11:36.944]      </control>
[18:11:36.944]      // end if-block "canReadPins"
[18:11:36.944]    </control>
[18:11:36.944]    <control if="!canReadPins" while="" timeout="0" info="">
[18:11:36.944]      // if-block "!canReadPins"
[18:11:36.944]        // =>  FALSE
[18:11:36.944]      // skip if-block "!canReadPins"
[18:11:36.944]    </control>
[18:11:36.953]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:11:36.953]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:11:36.953]        // =>  TRUE
[18:11:36.953]      <block atomic="false" info="">
[18:11:36.953]        WriteAP(0x00, 0x190008);
[18:11:36.953]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:11:36.953]        WriteAP(0xF0, 0x01);
[18:11:36.953]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:11:36.953]      </block>
[18:11:36.953]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:11:36.953]    </control>
[18:11:36.953]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:11:36.953]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:11:36.953]        // =>  FALSE
[18:11:36.953]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:11:36.953]    </control>
[18:11:36.953]    <block atomic="false" info="">
[18:11:36.953]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:11:36.953]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:11:36.953]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:11:36.963]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:11:36.965]      __ap = 0; //lets make sure we reset the access point selection
[18:11:36.965]        // -> [__ap <= 0x00000000]
[18:11:36.965]    </block>
[18:11:36.965]  </sequence>
[18:11:36.965]  
[18:11:36.983]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:11:36.983]  
[18:11:36.983]  <debugvars>
[18:11:36.983]    // Pre-defined
[18:11:36.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:36.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:11:36.983]    __dp=0x00000000
[18:11:36.983]    __ap=0x00000000
[18:11:36.983]    __traceout=0x00000000      (Trace Disabled)
[18:11:36.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:36.983]    __FlashAddr=0x00000000
[18:11:36.983]    __FlashLen=0x00000000
[18:11:36.983]    __FlashArg=0x00000000
[18:11:36.983]    __FlashOp=0x00000000
[18:11:36.983]    __Result=0x00000000
[18:11:36.983]  </debugvars>
[18:11:36.983]  
[18:11:36.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:11:36.983]    <block atomic="false" info="">
[18:11:36.983]      __var deviceID = 0;
[18:11:36.983]        // -> [deviceID <= 0x00000000]
[18:11:36.983]      __var version = 0;
[18:11:36.983]        // -> [version <= 0x00000000]
[18:11:36.983]      __var partNum = 0;
[18:11:36.983]        // -> [partNum <= 0x00000000]
[18:11:36.983]      __var manuf = 0;
[18:11:36.983]        // -> [manuf <= 0x00000000]
[18:11:36.983]      __var isMSPM0G1X0X_G3X0X = 0;
[18:11:36.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:11:36.983]      __var isProduction = 0;
[18:11:36.983]        // -> [isProduction <= 0x00000000]
[18:11:36.983]      __var continueId = 0;
[18:11:36.983]        // -> [continueId <= 0x00000000]
[18:11:36.983]      deviceID =   Read32(0x41C40004);
[18:11:36.993]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:11:36.993]        // -> [deviceID <= 0x2BB8802F]
[18:11:36.993]      version = deviceID >> 28;
[18:11:36.993]        // -> [version <= 0x00000002]
[18:11:36.993]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:11:36.993]        // -> [partNum <= 0x0000BB88]
[18:11:36.993]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:11:36.993]        // -> [manuf <= 0x00000017]
[18:11:36.993]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:11:36.993]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:11:36.993]      isProduction = (version > 0);
[18:11:36.993]        // -> [isProduction <= 0x00000001]
[18:11:36.993]    </block>
[18:11:36.993]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:11:36.993]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:11:36.993]        // =>  FALSE
[18:11:36.993]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:11:36.993]    </control>
[18:11:36.993]    <control if="continueId == 4" while="" timeout="0" info="">
[18:11:36.993]      // if-block "continueId == 4"
[18:11:36.993]        // =>  FALSE
[18:11:36.993]      // skip if-block "continueId == 4"
[18:11:36.993]    </control>
[18:11:36.993]    <control if="!isProduction" while="" timeout="0" info="">
[18:11:36.993]      // if-block "!isProduction"
[18:11:36.993]        // =>  FALSE
[18:11:36.993]      // skip if-block "!isProduction"
[18:11:36.993]    </control>
[18:11:36.993]  </sequence>
[18:11:36.993]  
[18:13:21.526]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:13:21.526]  
[18:13:21.527]  <debugvars>
[18:13:21.527]    // Pre-defined
[18:13:21.527]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:13:21.527]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:13:21.527]    __dp=0x00000000
[18:13:21.527]    __ap=0x00000000
[18:13:21.527]    __traceout=0x00000000      (Trace Disabled)
[18:13:21.527]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:13:21.527]    __FlashAddr=0x00000000
[18:13:21.528]    __FlashLen=0x00000000
[18:13:21.528]    __FlashArg=0x00000000
[18:13:21.528]    __FlashOp=0x00000000
[18:13:21.528]    __Result=0x00000000
[18:13:21.528]  </debugvars>
[18:13:21.528]  
[18:13:21.528]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:13:21.528]    <block atomic="false" info="">
[18:13:21.528]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:13:21.528]        // -> [isSWJ <= 0x00000001]
[18:13:21.529]      __var hasDormant = __protocol & 0x00020000;
[18:13:21.529]        // -> [hasDormant <= 0x00000000]
[18:13:21.529]      __var protType   = __protocol & 0x0000FFFF;
[18:13:21.529]        // -> [protType <= 0x00000002]
[18:13:21.529]    </block>
[18:13:21.529]    <control if="protType == 1" while="" timeout="0" info="">
[18:13:21.529]      // if-block "protType == 1"
[18:13:21.529]        // =>  FALSE
[18:13:21.529]      // skip if-block "protType == 1"
[18:13:21.529]    </control>
[18:13:21.529]    <control if="protType == 2" while="" timeout="0" info="">
[18:13:21.529]      // if-block "protType == 2"
[18:13:21.529]        // =>  TRUE
[18:13:21.529]      <control if="isSWJ" while="" timeout="0" info="">
[18:13:21.529]        // if-block "isSWJ"
[18:13:21.529]          // =>  TRUE
[18:13:21.529]        <control if="hasDormant" while="" timeout="0" info="">
[18:13:21.529]          // if-block "hasDormant"
[18:13:21.529]            // =>  FALSE
[18:13:21.529]          // skip if-block "hasDormant"
[18:13:21.529]        </control>
[18:13:21.529]        <control if="!hasDormant" while="" timeout="0" info="">
[18:13:21.529]          // if-block "!hasDormant"
[18:13:21.529]            // =>  TRUE
[18:13:21.529]          <block atomic="false" info="">
[18:13:21.529]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:13:21.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:13:21.534]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:13:21.535]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:13:21.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:13:21.536]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:13:21.536]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:13:21.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:13:21.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:13:21.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:13:21.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:13:21.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:13:21.543]          </block>
[18:13:21.543]          // end if-block "!hasDormant"
[18:13:21.543]        </control>
[18:13:21.543]        // end if-block "isSWJ"
[18:13:21.544]      </control>
[18:13:21.544]      <control if="!isSWJ" while="" timeout="0" info="">
[18:13:21.544]        // if-block "!isSWJ"
[18:13:21.544]          // =>  FALSE
[18:13:21.544]        // skip if-block "!isSWJ"
[18:13:21.544]      </control>
[18:13:21.544]      <block atomic="false" info="">
[18:13:21.544]        ReadDP(0x0);
[18:13:21.545]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:13:21.545]      </block>
[18:13:21.545]      // end if-block "protType == 2"
[18:13:21.545]    </control>
[18:13:21.545]  </sequence>
[18:13:21.545]  
[18:13:21.551]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:13:21.551]  
[18:13:21.551]  <debugvars>
[18:13:21.551]    // Pre-defined
[18:13:21.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:13:21.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:13:21.551]    __dp=0x00000000
[18:13:21.551]    __ap=0x00000000
[18:13:21.551]    __traceout=0x00000000      (Trace Disabled)
[18:13:21.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:13:21.552]    __FlashAddr=0x00000000
[18:13:21.552]    __FlashLen=0x00000000
[18:13:21.552]    __FlashArg=0x00000000
[18:13:21.552]    __FlashOp=0x00000000
[18:13:21.552]    __Result=0x00000000
[18:13:21.552]  </debugvars>
[18:13:21.552]  
[18:13:21.552]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:13:21.552]    <block atomic="false" info="">
[18:13:21.552]      __var SW_DP_ABORT       = 0x0;
[18:13:21.552]        // -> [SW_DP_ABORT <= 0x00000000]
[18:13:21.552]      __var DP_CTRL_STAT      = 0x4;
[18:13:21.552]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:13:21.552]      __var DP_SELECT         = 0x8;
[18:13:21.554]        // -> [DP_SELECT <= 0x00000008]
[18:13:21.554]      __var powered_down      = 0;
[18:13:21.554]        // -> [powered_down <= 0x00000000]
[18:13:21.554]      WriteDP(DP_SELECT, 0x00000000);
[18:13:21.556]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:13:21.556]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:13:21.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:13:21.559]        // -> [powered_down <= 0x00000001]
[18:13:21.559]    </block>
[18:13:21.559]    <control if="powered_down" while="" timeout="0" info="">
[18:13:21.559]      // if-block "powered_down"
[18:13:21.559]        // =>  TRUE
[18:13:21.559]      <block atomic="false" info="">
[18:13:21.559]        Message(0, "Debug/System power-up request sent");
[18:13:21.559]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:13:21.561]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:13:21.561]      </block>
[18:13:21.561]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:13:21.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:13:21.564]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:13:21.564]        // while-condition  =>  FALSE
[18:13:21.564]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:13:21.564]      </control>
[18:13:21.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:13:21.564]        // if-block "(__protocol & 0xFFFF) == 1"
[18:13:21.564]          // =>  FALSE
[18:13:21.564]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:13:21.564]      </control>
[18:13:21.564]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:13:21.564]        // if-block "(__protocol & 0xFFFF) == 2"
[18:13:21.564]          // =>  TRUE
[18:13:21.564]        <block atomic="false" info="">
[18:13:21.564]          Message(0, "executing SWD power up");
[18:13:21.564]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:13:21.568]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:13:21.568]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:13:21.570]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:13:21.570]        </block>
[18:13:21.570]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:13:21.571]      </control>
[18:13:21.571]      // end if-block "powered_down"
[18:13:21.571]    </control>
[18:13:21.571]    <block atomic="false" info="">
[18:13:21.571]      __var DEBUG_PORT_VAL    = 0;
[18:13:21.571]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:13:21.571]      __var ACCESS_POINT_VAL  = 0;
[18:13:21.571]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:13:21.571]      __ap = 1; 
[18:13:21.571]        // -> [__ap <= 0x00000001]
[18:13:21.571]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:13:21.577]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:13:21.577]      __ap = 4;
[18:13:21.577]        // -> [__ap <= 0x00000004]
[18:13:21.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:13:21.580]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:13:21.580]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:13:21.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:13:21.581]    </block>
[18:13:21.581]    <block atomic="false" info="">
[18:13:21.581]      __var nReset = 0x80;
[18:13:21.581]        // -> [nReset <= 0x00000080]
[18:13:21.581]      __var canReadPins = 0;
[18:13:21.581]        // -> [canReadPins <= 0x00000000]
[18:13:21.581]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:13:21.583]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:13:21.583]        // -> [canReadPins <= 0x00000001]
[18:13:21.583]    </block>
[18:13:21.583]    <control if="" while="1" timeout="200" info="">
[18:13:21.583]      // while "1"  (timeout="200")
[18:13:21.584]      // while-condition  =>  TRUE
[18:13:21.584]      // while "1"  (timeout="200")
[18:13:21.584]      // while-condition  =>  TRUE
[18:13:21.584]      // while "1"  (timeout="200")
[18:13:21.584]      // while-condition  =>  TRUE
[18:13:21.584]      // while "1"  (timeout="200")
[18:13:21.584]      // while-condition  =>  TRUE
[18:13:21.585]      // while "1"  (timeout="200")
[18:13:21.585]      // while-condition  =>  TRUE
[18:13:21.585]      // while "1"  (timeout="200")
[18:13:21.585]      // while-condition  =>  TRUE
[18:13:21.585]      // while "1"  (timeout="200")
[18:13:21.585]      // while-condition  =>  TRUE
[18:13:21.586]      // while "1"  (timeout="200")
[18:13:21.586]      // while-condition  =>  TRUE
[18:13:21.586]      // while "1"  (timeout="200")
[18:13:21.586]      // while-condition  =>  TRUE
[18:13:21.586]      // while "1"  (timeout="200")
[18:13:21.586]      // while-condition  =>  TRUE
[18:13:21.586]      // while "1"  (timeout="200")
[18:13:21.586]      // while-condition  =>  TRUE
[18:13:21.586]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.587]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.587]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.587]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.587]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.587]      // while "1"  (timeout="200")
[18:13:21.587]      // while-condition  =>  TRUE
[18:13:21.588]      // while "1"  (timeout="200")
[18:13:21.588]      // while-condition  =>  TRUE
[18:13:21.588]      // while "1"  (timeout="200")
[18:13:21.588]      // while-condition  =>  TRUE
[18:13:21.588]      // while "1"  (timeout="200")
[18:13:21.588]      // while-condition  =>  TRUE
[18:13:21.588]      // while "1"  (timeout="200")
[18:13:21.588]      // while-condition  =>  TRUE
[18:13:21.588]      // while "1"  (timeout="200")
[18:13:21.588]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.589]      // while "1"  (timeout="200")
[18:13:21.589]      // while-condition  =>  TRUE
[18:13:21.590]      // while "1"  (timeout="200")
[18:13:21.590]      // while-condition  =>  TRUE
[18:13:21.590]      // while "1"  (timeout="200")
[18:13:21.590]      // while-condition  =>  TRUE
[18:13:21.590]      // while "1"  (timeout="200")
[18:13:21.590]      // while-condition  =>  TRUE
[18:13:21.590]      // while "1"  (timeout="200")
[18:13:21.590]      // while-condition  =>  TRUE
[18:13:21.590]      // while "1"  (timeout="200")
[18:13:21.590]      // while-condition  =>  TRUE
[18:13:21.591]      // while "1"  (timeout="200")
[18:13:21.591]      // while-condition  =>  TRUE
[18:13:21.591]      // while "1"  (timeout="200")
[18:13:21.591]      // while-condition  =>  TRUE
[18:13:21.591]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.592]      // while-condition  =>  TRUE
[18:13:21.592]      // while "1"  (timeout="200")
[18:13:21.593]      // while-condition  =>  TRUE
[18:13:21.593]      // while "1"  (timeout="200")
[18:13:21.593]      // while-condition  =>  TRUE
[18:13:21.593]      // while "1"  (timeout="200")
[18:13:21.593]      // while-condition  =>  TRUE
[18:13:21.594]      // while "1"  (timeout="200")
[18:13:21.594]      // while-condition  =>  TRUE
[18:13:21.594]      // while "1"  (timeout="200")
[18:13:21.594]      // while-condition  =>  TRUE
[18:13:21.594]      // while "1"  (timeout="200")
[18:13:21.594]      // while-condition  =>  TRUE
[18:13:21.594]      // while "1"  (timeout="200")
[18:13:21.594]      // while-condition  =>  TRUE
[18:13:21.594]      // while "1"  (timeout="200")
[18:13:21.594]      // while-condition  =>  TRUE
[18:13:21.595]      // while "1"  (timeout="200")
[18:13:21.595]      // while-condition  =>  TRUE
[18:13:21.595]      // while "1"  (timeout="200")
[18:13:21.595]      // while-condition  =>  TRUE
[18:13:21.595]      // while "1"  (timeout="200")
[18:13:21.595]      // while-condition  =>  TRUE
[18:13:21.595]      // while "1"  (timeout="200")
[18:13:21.595]      // while-condition  =>  TRUE
[18:13:21.595]      // while "1"  (timeout="200")
[18:13:21.595]      // while-condition  =>  TRUE
[18:13:21.596]      // while "1"  (timeout="200")
[18:13:21.596]      // while-condition  =>  TRUE
[18:13:21.596]      // while "1"  (timeout="200")
[18:13:21.596]      // while-condition  =>  TRUE
[18:13:21.596]      // while "1"  (timeout="200")
[18:13:21.596]      // while-condition  =>  TRUE
[18:13:21.596]      // while "1"  (timeout="200")
[18:13:21.596]      // while-condition  =>  TRUE
[18:13:21.596]      // while "1"  (timeout="200")
[18:13:21.596]      // while-condition  =>  TRUE
[18:13:21.597]      // while "1"  (timeout="200")
[18:13:21.597]      // while  =>  TIMEOUT
[18:13:21.597]      // end while "1"
[18:13:21.597]    </control>
[18:13:21.597]    <control if="canReadPins" while="" timeout="0" info="">
[18:13:21.597]      // if-block "canReadPins"
[18:13:21.597]        // =>  TRUE
[18:13:21.597]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:13:21.597]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:13:21.599]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:13:21.599]        // while-condition  =>  FALSE
[18:13:21.600]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:13:21.600]      </control>
[18:13:21.600]      // end if-block "canReadPins"
[18:13:21.600]    </control>
[18:13:21.600]    <control if="!canReadPins" while="" timeout="0" info="">
[18:13:21.600]      // if-block "!canReadPins"
[18:13:21.600]        // =>  FALSE
[18:13:21.600]      // skip if-block "!canReadPins"
[18:13:21.600]    </control>
[18:13:21.600]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:13:21.600]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:13:21.601]        // =>  TRUE
[18:13:21.601]      <block atomic="false" info="">
[18:13:21.601]        WriteAP(0x00, 0x190008);
[18:13:21.602]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:13:21.602]        WriteAP(0xF0, 0x01);
[18:13:21.606]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:13:21.606]      </block>
[18:13:21.606]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:13:21.606]    </control>
[18:13:21.606]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:13:21.606]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:13:21.606]        // =>  FALSE
[18:13:21.607]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:13:21.607]    </control>
[18:13:21.607]    <block atomic="false" info="">
[18:13:21.607]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:13:21.610]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:13:21.611]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:13:21.611]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:13:21.614]      __ap = 0; //lets make sure we reset the access point selection
[18:13:21.614]        // -> [__ap <= 0x00000000]
[18:13:21.614]    </block>
[18:13:21.614]  </sequence>
[18:13:21.614]  
[18:13:21.638]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:13:21.638]  
[18:13:21.638]  <debugvars>
[18:13:21.638]    // Pre-defined
[18:13:21.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:13:21.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:13:21.638]    __dp=0x00000000
[18:13:21.638]    __ap=0x00000000
[18:13:21.638]    __traceout=0x00000000      (Trace Disabled)
[18:13:21.640]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:13:21.640]    __FlashAddr=0x00000000
[18:13:21.640]    __FlashLen=0x00000000
[18:13:21.641]    __FlashArg=0x00000000
[18:13:21.641]    __FlashOp=0x00000000
[18:13:21.641]    __Result=0x00000000
[18:13:21.641]  </debugvars>
[18:13:21.641]  
[18:13:21.641]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:13:21.641]    <block atomic="false" info="">
[18:13:21.641]      __var deviceID = 0;
[18:13:21.641]        // -> [deviceID <= 0x00000000]
[18:13:21.641]      __var version = 0;
[18:13:21.641]        // -> [version <= 0x00000000]
[18:13:21.641]      __var partNum = 0;
[18:13:21.641]        // -> [partNum <= 0x00000000]
[18:13:21.641]      __var manuf = 0;
[18:13:21.642]        // -> [manuf <= 0x00000000]
[18:13:21.642]      __var isMSPM0G1X0X_G3X0X = 0;
[18:13:21.642]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:13:21.642]      __var isProduction = 0;
[18:13:21.642]        // -> [isProduction <= 0x00000000]
[18:13:21.642]      __var continueId = 0;
[18:13:21.642]        // -> [continueId <= 0x00000000]
[18:13:21.642]      deviceID =   Read32(0x41C40004);
[18:13:21.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:13:21.647]        // -> [deviceID <= 0x2BB8802F]
[18:13:21.647]      version = deviceID >> 28;
[18:13:21.647]        // -> [version <= 0x00000002]
[18:13:21.647]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:13:21.647]        // -> [partNum <= 0x0000BB88]
[18:13:21.647]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:13:21.647]        // -> [manuf <= 0x00000017]
[18:13:21.647]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:13:21.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:13:21.647]      isProduction = (version > 0);
[18:13:21.647]        // -> [isProduction <= 0x00000001]
[18:13:21.650]    </block>
[18:13:21.650]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:13:21.650]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:13:21.650]        // =>  FALSE
[18:13:21.650]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:13:21.650]    </control>
[18:13:21.650]    <control if="continueId == 4" while="" timeout="0" info="">
[18:13:21.650]      // if-block "continueId == 4"
[18:13:21.650]        // =>  FALSE
[18:13:21.652]      // skip if-block "continueId == 4"
[18:13:21.652]    </control>
[18:13:21.652]    <control if="!isProduction" while="" timeout="0" info="">
[18:13:21.652]      // if-block "!isProduction"
[18:13:21.652]        // =>  FALSE
[18:13:21.652]      // skip if-block "!isProduction"
[18:13:21.652]    </control>
[18:13:21.652]  </sequence>
[18:13:21.652]  
[18:14:14.333]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:14:14.333]  
[18:14:14.337]  <debugvars>
[18:14:14.337]    // Pre-defined
[18:14:14.337]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:14.337]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:14.337]    __dp=0x00000000
[18:14:14.337]    __ap=0x00000000
[18:14:14.337]    __traceout=0x00000000      (Trace Disabled)
[18:14:14.337]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:14.337]    __FlashAddr=0x00000000
[18:14:14.337]    __FlashLen=0x00000000
[18:14:14.338]    __FlashArg=0x00000000
[18:14:14.338]    __FlashOp=0x00000000
[18:14:14.338]    __Result=0x00000000
[18:14:14.338]  </debugvars>
[18:14:14.338]  
[18:14:14.338]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:14:14.338]    <block atomic="false" info="">
[18:14:14.338]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:14:14.338]        // -> [isSWJ <= 0x00000001]
[18:14:14.338]      __var hasDormant = __protocol & 0x00020000;
[18:14:14.338]        // -> [hasDormant <= 0x00000000]
[18:14:14.338]      __var protType   = __protocol & 0x0000FFFF;
[18:14:14.338]        // -> [protType <= 0x00000002]
[18:14:14.338]    </block>
[18:14:14.338]    <control if="protType == 1" while="" timeout="0" info="">
[18:14:14.338]      // if-block "protType == 1"
[18:14:14.338]        // =>  FALSE
[18:14:14.338]      // skip if-block "protType == 1"
[18:14:14.338]    </control>
[18:14:14.338]    <control if="protType == 2" while="" timeout="0" info="">
[18:14:14.338]      // if-block "protType == 2"
[18:14:14.338]        // =>  TRUE
[18:14:14.341]      <control if="isSWJ" while="" timeout="0" info="">
[18:14:14.341]        // if-block "isSWJ"
[18:14:14.341]          // =>  TRUE
[18:14:14.341]        <control if="hasDormant" while="" timeout="0" info="">
[18:14:14.341]          // if-block "hasDormant"
[18:14:14.341]            // =>  FALSE
[18:14:14.341]          // skip if-block "hasDormant"
[18:14:14.341]        </control>
[18:14:14.341]        <control if="!hasDormant" while="" timeout="0" info="">
[18:14:14.341]          // if-block "!hasDormant"
[18:14:14.341]            // =>  TRUE
[18:14:14.341]          <block atomic="false" info="">
[18:14:14.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:14:14.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:14.341]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:14:14.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:14:14.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:14:14.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:14.345]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:14:14.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:14:14.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:14:14.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:14.349]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:14:14.349]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:14:14.349]          </block>
[18:14:14.349]          // end if-block "!hasDormant"
[18:14:14.349]        </control>
[18:14:14.349]        // end if-block "isSWJ"
[18:14:14.349]      </control>
[18:14:14.349]      <control if="!isSWJ" while="" timeout="0" info="">
[18:14:14.349]        // if-block "!isSWJ"
[18:14:14.349]          // =>  FALSE
[18:14:14.349]        // skip if-block "!isSWJ"
[18:14:14.349]      </control>
[18:14:14.349]      <block atomic="false" info="">
[18:14:14.349]        ReadDP(0x0);
[18:14:14.353]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:14:14.353]      </block>
[18:14:14.353]      // end if-block "protType == 2"
[18:14:14.353]    </control>
[18:14:14.353]  </sequence>
[18:14:14.353]  
[18:14:14.353]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:14:14.353]  
[18:14:14.353]  <debugvars>
[18:14:14.357]    // Pre-defined
[18:14:14.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:14.357]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:14.357]    __dp=0x00000000
[18:14:14.357]    __ap=0x00000000
[18:14:14.357]    __traceout=0x00000000      (Trace Disabled)
[18:14:14.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:14.357]    __FlashAddr=0x00000000
[18:14:14.357]    __FlashLen=0x00000000
[18:14:14.357]    __FlashArg=0x00000000
[18:14:14.357]    __FlashOp=0x00000000
[18:14:14.357]    __Result=0x00000000
[18:14:14.357]  </debugvars>
[18:14:14.357]  
[18:14:14.357]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:14:14.357]    <block atomic="false" info="">
[18:14:14.357]      __var SW_DP_ABORT       = 0x0;
[18:14:14.357]        // -> [SW_DP_ABORT <= 0x00000000]
[18:14:14.357]      __var DP_CTRL_STAT      = 0x4;
[18:14:14.357]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:14:14.357]      __var DP_SELECT         = 0x8;
[18:14:14.357]        // -> [DP_SELECT <= 0x00000008]
[18:14:14.357]      __var powered_down      = 0;
[18:14:14.357]        // -> [powered_down <= 0x00000000]
[18:14:14.357]      WriteDP(DP_SELECT, 0x00000000);
[18:14:14.361]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:14:14.361]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:14:14.361]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:14:14.361]        // -> [powered_down <= 0x00000001]
[18:14:14.361]    </block>
[18:14:14.361]    <control if="powered_down" while="" timeout="0" info="">
[18:14:14.361]      // if-block "powered_down"
[18:14:14.361]        // =>  TRUE
[18:14:14.361]      <block atomic="false" info="">
[18:14:14.361]        Message(0, "Debug/System power-up request sent");
[18:14:14.366]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:14:14.370]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:14:14.370]      </block>
[18:14:14.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:14:14.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:14:14.373]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:14:14.373]        // while-condition  =>  FALSE
[18:14:14.373]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:14:14.373]      </control>
[18:14:14.373]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:14:14.373]        // if-block "(__protocol & 0xFFFF) == 1"
[18:14:14.373]          // =>  FALSE
[18:14:14.373]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:14:14.373]      </control>
[18:14:14.373]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:14:14.374]        // if-block "(__protocol & 0xFFFF) == 2"
[18:14:14.374]          // =>  TRUE
[18:14:14.375]        <block atomic="false" info="">
[18:14:14.375]          Message(0, "executing SWD power up");
[18:14:14.376]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:14:14.378]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:14:14.378]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:14:14.380]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:14:14.380]        </block>
[18:14:14.380]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:14:14.380]      </control>
[18:14:14.380]      // end if-block "powered_down"
[18:14:14.380]    </control>
[18:14:14.380]    <block atomic="false" info="">
[18:14:14.380]      __var DEBUG_PORT_VAL    = 0;
[18:14:14.380]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:14:14.380]      __var ACCESS_POINT_VAL  = 0;
[18:14:14.380]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:14:14.380]      __ap = 1; 
[18:14:14.380]        // -> [__ap <= 0x00000001]
[18:14:14.383]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:14:14.387]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:14:14.387]      __ap = 4;
[18:14:14.387]        // -> [__ap <= 0x00000004]
[18:14:14.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:14:14.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:14:14.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:14:14.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:14:14.393]    </block>
[18:14:14.393]    <block atomic="false" info="">
[18:14:14.393]      __var nReset = 0x80;
[18:14:14.393]        // -> [nReset <= 0x00000080]
[18:14:14.393]      __var canReadPins = 0;
[18:14:14.393]        // -> [canReadPins <= 0x00000000]
[18:14:14.393]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:14:14.396]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:14:14.396]        // -> [canReadPins <= 0x00000001]
[18:14:14.396]    </block>
[18:14:14.396]    <control if="" while="1" timeout="200" info="">
[18:14:14.396]      // while "1"  (timeout="200")
[18:14:14.396]      // while-condition  =>  TRUE
[18:14:14.396]      // while "1"  (timeout="200")
[18:14:14.396]      // while-condition  =>  TRUE
[18:14:14.396]      // while "1"  (timeout="200")
[18:14:14.396]      // while-condition  =>  TRUE
[18:14:14.396]      // while "1"  (timeout="200")
[18:14:14.396]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.398]      // while "1"  (timeout="200")
[18:14:14.398]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.400]      // while-condition  =>  TRUE
[18:14:14.400]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.402]      // while "1"  (timeout="200")
[18:14:14.402]      // while-condition  =>  TRUE
[18:14:14.403]      // while "1"  (timeout="200")
[18:14:14.403]      // while-condition  =>  TRUE
[18:14:14.403]      // while "1"  (timeout="200")
[18:14:14.403]      // while-condition  =>  TRUE
[18:14:14.403]      // while "1"  (timeout="200")
[18:14:14.403]      // while-condition  =>  TRUE
[18:14:14.403]      // while "1"  (timeout="200")
[18:14:14.403]      // while-condition  =>  TRUE
[18:14:14.403]      // while "1"  (timeout="200")
[18:14:14.403]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.404]      // while "1"  (timeout="200")
[18:14:14.404]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.406]      // while "1"  (timeout="200")
[18:14:14.406]      // while-condition  =>  TRUE
[18:14:14.407]      // while "1"  (timeout="200")
[18:14:14.407]      // while-condition  =>  TRUE
[18:14:14.407]      // while "1"  (timeout="200")
[18:14:14.407]      // while-condition  =>  TRUE
[18:14:14.407]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.408]      // while "1"  (timeout="200")
[18:14:14.408]      // while-condition  =>  TRUE
[18:14:14.410]      // while "1"  (timeout="200")
[18:14:14.410]      // while  =>  TIMEOUT
[18:14:14.410]      // end while "1"
[18:14:14.410]    </control>
[18:14:14.410]    <control if="canReadPins" while="" timeout="0" info="">
[18:14:14.410]      // if-block "canReadPins"
[18:14:14.410]        // =>  TRUE
[18:14:14.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:14:14.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:14:14.413]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:14:14.413]        // while-condition  =>  FALSE
[18:14:14.413]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:14:14.413]      </control>
[18:14:14.413]      // end if-block "canReadPins"
[18:14:14.413]    </control>
[18:14:14.413]    <control if="!canReadPins" while="" timeout="0" info="">
[18:14:14.413]      // if-block "!canReadPins"
[18:14:14.413]        // =>  FALSE
[18:14:14.413]      // skip if-block "!canReadPins"
[18:14:14.413]    </control>
[18:14:14.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:14:14.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:14:14.414]        // =>  TRUE
[18:14:14.414]      <block atomic="false" info="">
[18:14:14.414]        WriteAP(0x00, 0x190008);
[18:14:14.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:14:14.416]        WriteAP(0xF0, 0x01);
[18:14:14.419]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:14:14.419]      </block>
[18:14:14.419]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:14:14.419]    </control>
[18:14:14.419]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:14:14.419]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:14:14.419]        // =>  FALSE
[18:14:14.420]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:14:14.420]    </control>
[18:14:14.420]    <block atomic="false" info="">
[18:14:14.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:14:14.424]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:14:14.425]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:14:14.425]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:14:14.428]      __ap = 0; //lets make sure we reset the access point selection
[18:14:14.428]        // -> [__ap <= 0x00000000]
[18:14:14.428]    </block>
[18:14:14.428]  </sequence>
[18:14:14.428]  
[18:14:14.453]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:14:14.453]  
[18:14:14.453]  <debugvars>
[18:14:14.453]    // Pre-defined
[18:14:14.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:14.453]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:14.453]    __dp=0x00000000
[18:14:14.453]    __ap=0x00000000
[18:14:14.453]    __traceout=0x00000000      (Trace Disabled)
[18:14:14.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:14.453]    __FlashAddr=0x00000000
[18:14:14.455]    __FlashLen=0x00000000
[18:14:14.455]    __FlashArg=0x00000000
[18:14:14.455]    __FlashOp=0x00000000
[18:14:14.455]    __Result=0x00000000
[18:14:14.455]  </debugvars>
[18:14:14.455]  
[18:14:14.455]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:14:14.455]    <block atomic="false" info="">
[18:14:14.455]      __var deviceID = 0;
[18:14:14.455]        // -> [deviceID <= 0x00000000]
[18:14:14.455]      __var version = 0;
[18:14:14.455]        // -> [version <= 0x00000000]
[18:14:14.455]      __var partNum = 0;
[18:14:14.455]        // -> [partNum <= 0x00000000]
[18:14:14.455]      __var manuf = 0;
[18:14:14.455]        // -> [manuf <= 0x00000000]
[18:14:14.455]      __var isMSPM0G1X0X_G3X0X = 0;
[18:14:14.455]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:14:14.455]      __var isProduction = 0;
[18:14:14.455]        // -> [isProduction <= 0x00000000]
[18:14:14.455]      __var continueId = 0;
[18:14:14.455]        // -> [continueId <= 0x00000000]
[18:14:14.455]      deviceID =   Read32(0x41C40004);
[18:14:14.459]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:14:14.459]        // -> [deviceID <= 0x2BB8802F]
[18:14:14.459]      version = deviceID >> 28;
[18:14:14.459]        // -> [version <= 0x00000002]
[18:14:14.459]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:14:14.463]        // -> [partNum <= 0x0000BB88]
[18:14:14.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:14:14.463]        // -> [manuf <= 0x00000017]
[18:14:14.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:14:14.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:14:14.463]      isProduction = (version > 0);
[18:14:14.463]        // -> [isProduction <= 0x00000001]
[18:14:14.463]    </block>
[18:14:14.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:14:14.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:14:14.463]        // =>  FALSE
[18:14:14.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:14:14.465]    </control>
[18:14:14.465]    <control if="continueId == 4" while="" timeout="0" info="">
[18:14:14.465]      // if-block "continueId == 4"
[18:14:14.465]        // =>  FALSE
[18:14:14.465]      // skip if-block "continueId == 4"
[18:14:14.465]    </control>
[18:14:14.465]    <control if="!isProduction" while="" timeout="0" info="">
[18:14:14.465]      // if-block "!isProduction"
[18:14:14.465]        // =>  FALSE
[18:14:14.465]      // skip if-block "!isProduction"
[18:14:14.465]    </control>
[18:14:14.466]  </sequence>
[18:14:14.466]  
[18:14:47.965]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:14:47.965]  
[18:14:47.965]  <debugvars>
[18:14:47.965]    // Pre-defined
[18:14:47.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:47.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:47.968]    __dp=0x00000000
[18:14:47.968]    __ap=0x00000000
[18:14:47.968]    __traceout=0x00000000      (Trace Disabled)
[18:14:47.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:47.968]    __FlashAddr=0x00000000
[18:14:47.968]    __FlashLen=0x00000000
[18:14:47.968]    __FlashArg=0x00000000
[18:14:47.968]    __FlashOp=0x00000000
[18:14:47.968]    __Result=0x00000000
[18:14:47.968]  </debugvars>
[18:14:47.968]  
[18:14:47.968]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:14:47.968]    <block atomic="false" info="">
[18:14:47.968]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:14:47.968]        // -> [isSWJ <= 0x00000001]
[18:14:47.968]      __var hasDormant = __protocol & 0x00020000;
[18:14:47.968]        // -> [hasDormant <= 0x00000000]
[18:14:47.968]      __var protType   = __protocol & 0x0000FFFF;
[18:14:47.970]        // -> [protType <= 0x00000002]
[18:14:47.970]    </block>
[18:14:47.970]    <control if="protType == 1" while="" timeout="0" info="">
[18:14:47.970]      // if-block "protType == 1"
[18:14:47.970]        // =>  FALSE
[18:14:47.970]      // skip if-block "protType == 1"
[18:14:47.970]    </control>
[18:14:47.970]    <control if="protType == 2" while="" timeout="0" info="">
[18:14:47.970]      // if-block "protType == 2"
[18:14:47.970]        // =>  TRUE
[18:14:47.970]      <control if="isSWJ" while="" timeout="0" info="">
[18:14:47.970]        // if-block "isSWJ"
[18:14:47.970]          // =>  TRUE
[18:14:47.970]        <control if="hasDormant" while="" timeout="0" info="">
[18:14:47.970]          // if-block "hasDormant"
[18:14:47.970]            // =>  FALSE
[18:14:47.970]          // skip if-block "hasDormant"
[18:14:47.970]        </control>
[18:14:47.970]        <control if="!hasDormant" while="" timeout="0" info="">
[18:14:47.970]          // if-block "!hasDormant"
[18:14:47.970]            // =>  TRUE
[18:14:47.970]          <block atomic="false" info="">
[18:14:47.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:14:47.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:47.973]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:14:47.975]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:14:47.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:14:47.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:47.976]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:14:47.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:14:47.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:14:47.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:14:47.982]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:14:47.984]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:14:47.984]          </block>
[18:14:47.984]          // end if-block "!hasDormant"
[18:14:47.984]        </control>
[18:14:47.984]        // end if-block "isSWJ"
[18:14:47.984]      </control>
[18:14:47.984]      <control if="!isSWJ" while="" timeout="0" info="">
[18:14:47.984]        // if-block "!isSWJ"
[18:14:47.984]          // =>  FALSE
[18:14:47.984]        // skip if-block "!isSWJ"
[18:14:47.984]      </control>
[18:14:47.984]      <block atomic="false" info="">
[18:14:47.985]        ReadDP(0x0);
[18:14:47.986]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:14:47.986]      </block>
[18:14:47.986]      // end if-block "protType == 2"
[18:14:47.986]    </control>
[18:14:47.986]  </sequence>
[18:14:47.986]  
[18:14:47.989]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:14:47.989]  
[18:14:47.989]  <debugvars>
[18:14:47.989]    // Pre-defined
[18:14:47.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:47.990]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:47.990]    __dp=0x00000000
[18:14:47.990]    __ap=0x00000000
[18:14:47.990]    __traceout=0x00000000      (Trace Disabled)
[18:14:47.990]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:47.990]    __FlashAddr=0x00000000
[18:14:47.990]    __FlashLen=0x00000000
[18:14:47.990]    __FlashArg=0x00000000
[18:14:47.990]    __FlashOp=0x00000000
[18:14:47.990]    __Result=0x00000000
[18:14:47.990]  </debugvars>
[18:14:47.990]  
[18:14:47.990]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:14:47.990]    <block atomic="false" info="">
[18:14:47.990]      __var SW_DP_ABORT       = 0x0;
[18:14:47.990]        // -> [SW_DP_ABORT <= 0x00000000]
[18:14:47.990]      __var DP_CTRL_STAT      = 0x4;
[18:14:47.990]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:14:47.990]      __var DP_SELECT         = 0x8;
[18:14:47.990]        // -> [DP_SELECT <= 0x00000008]
[18:14:47.990]      __var powered_down      = 0;
[18:14:47.992]        // -> [powered_down <= 0x00000000]
[18:14:47.992]      WriteDP(DP_SELECT, 0x00000000);
[18:14:47.992]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:14:47.992]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:14:47.995]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:14:47.995]        // -> [powered_down <= 0x00000001]
[18:14:47.995]    </block>
[18:14:47.995]    <control if="powered_down" while="" timeout="0" info="">
[18:14:47.995]      // if-block "powered_down"
[18:14:47.995]        // =>  TRUE
[18:14:47.995]      <block atomic="false" info="">
[18:14:47.995]        Message(0, "Debug/System power-up request sent");
[18:14:47.996]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:14:48.000]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:14:48.000]      </block>
[18:14:48.000]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:14:48.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:14:48.000]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:14:48.000]        // while-condition  =>  FALSE
[18:14:48.000]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:14:48.000]      </control>
[18:14:48.000]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:14:48.000]        // if-block "(__protocol & 0xFFFF) == 1"
[18:14:48.000]          // =>  FALSE
[18:14:48.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:14:48.000]      </control>
[18:14:48.000]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:14:48.000]        // if-block "(__protocol & 0xFFFF) == 2"
[18:14:48.000]          // =>  TRUE
[18:14:48.000]        <block atomic="false" info="">
[18:14:48.000]          Message(0, "executing SWD power up");
[18:14:48.004]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:14:48.008]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:14:48.008]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:14:48.011]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:14:48.011]        </block>
[18:14:48.011]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:14:48.011]      </control>
[18:14:48.011]      // end if-block "powered_down"
[18:14:48.011]    </control>
[18:14:48.011]    <block atomic="false" info="">
[18:14:48.011]      __var DEBUG_PORT_VAL    = 0;
[18:14:48.011]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:14:48.011]      __var ACCESS_POINT_VAL  = 0;
[18:14:48.011]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:14:48.011]      __ap = 1; 
[18:14:48.011]        // -> [__ap <= 0x00000001]
[18:14:48.011]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:14:48.013]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:14:48.013]      __ap = 4;
[18:14:48.013]        // -> [__ap <= 0x00000004]
[18:14:48.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:14:48.018]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:14:48.018]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:14:48.018]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:14:48.020]    </block>
[18:14:48.020]    <block atomic="false" info="">
[18:14:48.020]      __var nReset = 0x80;
[18:14:48.020]        // -> [nReset <= 0x00000080]
[18:14:48.020]      __var canReadPins = 0;
[18:14:48.020]        // -> [canReadPins <= 0x00000000]
[18:14:48.020]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:14:48.020]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:14:48.020]        // -> [canReadPins <= 0x00000001]
[18:14:48.020]    </block>
[18:14:48.020]    <control if="" while="1" timeout="200" info="">
[18:14:48.020]      // while "1"  (timeout="200")
[18:14:48.020]      // while-condition  =>  TRUE
[18:14:48.020]      // while "1"  (timeout="200")
[18:14:48.020]      // while-condition  =>  TRUE
[18:14:48.020]      // while "1"  (timeout="200")
[18:14:48.020]      // while-condition  =>  TRUE
[18:14:48.020]      // while "1"  (timeout="200")
[18:14:48.020]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.025]      // while "1"  (timeout="200")
[18:14:48.025]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.029]      // while "1"  (timeout="200")
[18:14:48.029]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.030]      // while "1"  (timeout="200")
[18:14:48.030]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.033]      // while "1"  (timeout="200")
[18:14:48.033]      // while-condition  =>  TRUE
[18:14:48.037]      // while "1"  (timeout="200")
[18:14:48.037]      // while  =>  TIMEOUT
[18:14:48.037]      // end while "1"
[18:14:48.037]    </control>
[18:14:48.037]    <control if="canReadPins" while="" timeout="0" info="">
[18:14:48.037]      // if-block "canReadPins"
[18:14:48.037]        // =>  TRUE
[18:14:48.037]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:14:48.037]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:14:48.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:14:48.037]        // while-condition  =>  FALSE
[18:14:48.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:14:48.039]      </control>
[18:14:48.039]      // end if-block "canReadPins"
[18:14:48.039]    </control>
[18:14:48.039]    <control if="!canReadPins" while="" timeout="0" info="">
[18:14:48.039]      // if-block "!canReadPins"
[18:14:48.039]        // =>  FALSE
[18:14:48.040]      // skip if-block "!canReadPins"
[18:14:48.040]    </control>
[18:14:48.040]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:14:48.040]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:14:48.040]        // =>  TRUE
[18:14:48.040]      <block atomic="false" info="">
[18:14:48.040]        WriteAP(0x00, 0x190008);
[18:14:48.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:14:48.041]        WriteAP(0xF0, 0x01);
[18:14:48.046]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:14:48.046]      </block>
[18:14:48.046]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:14:48.046]    </control>
[18:14:48.046]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:14:48.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:14:48.046]        // =>  FALSE
[18:14:48.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:14:48.046]    </control>
[18:14:48.046]    <block atomic="false" info="">
[18:14:48.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:14:48.050]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:14:48.050]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:14:48.050]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:14:48.054]      __ap = 0; //lets make sure we reset the access point selection
[18:14:48.054]        // -> [__ap <= 0x00000000]
[18:14:48.054]    </block>
[18:14:48.054]  </sequence>
[18:14:48.054]  
[18:14:48.090]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:14:48.092]  
[18:14:48.092]  <debugvars>
[18:14:48.092]    // Pre-defined
[18:14:48.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:14:48.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:14:48.092]    __dp=0x00000000
[18:14:48.092]    __ap=0x00000000
[18:14:48.092]    __traceout=0x00000000      (Trace Disabled)
[18:14:48.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:14:48.092]    __FlashAddr=0x00000000
[18:14:48.092]    __FlashLen=0x00000000
[18:14:48.092]    __FlashArg=0x00000000
[18:14:48.092]    __FlashOp=0x00000000
[18:14:48.092]    __Result=0x00000000
[18:14:48.092]  </debugvars>
[18:14:48.092]  
[18:14:48.092]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:14:48.092]    <block atomic="false" info="">
[18:14:48.092]      __var deviceID = 0;
[18:14:48.092]        // -> [deviceID <= 0x00000000]
[18:14:48.092]      __var version = 0;
[18:14:48.092]        // -> [version <= 0x00000000]
[18:14:48.092]      __var partNum = 0;
[18:14:48.092]        // -> [partNum <= 0x00000000]
[18:14:48.092]      __var manuf = 0;
[18:14:48.092]        // -> [manuf <= 0x00000000]
[18:14:48.092]      __var isMSPM0G1X0X_G3X0X = 0;
[18:14:48.092]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:14:48.092]      __var isProduction = 0;
[18:14:48.092]        // -> [isProduction <= 0x00000000]
[18:14:48.092]      __var continueId = 0;
[18:14:48.092]        // -> [continueId <= 0x00000000]
[18:14:48.092]      deviceID =   Read32(0x41C40004);
[18:14:48.100]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:14:48.100]        // -> [deviceID <= 0x2BB8802F]
[18:14:48.100]      version = deviceID >> 28;
[18:14:48.100]        // -> [version <= 0x00000002]
[18:14:48.100]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:14:48.100]        // -> [partNum <= 0x0000BB88]
[18:14:48.100]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:14:48.100]        // -> [manuf <= 0x00000017]
[18:14:48.100]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:14:48.100]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:14:48.100]      isProduction = (version > 0);
[18:14:48.102]        // -> [isProduction <= 0x00000001]
[18:14:48.102]    </block>
[18:14:48.102]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:14:48.102]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:14:48.102]        // =>  FALSE
[18:14:48.102]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:14:48.102]    </control>
[18:14:48.102]    <control if="continueId == 4" while="" timeout="0" info="">
[18:14:48.102]      // if-block "continueId == 4"
[18:14:48.102]        // =>  FALSE
[18:14:48.102]      // skip if-block "continueId == 4"
[18:14:48.102]    </control>
[18:14:48.102]    <control if="!isProduction" while="" timeout="0" info="">
[18:14:48.102]      // if-block "!isProduction"
[18:14:48.102]        // =>  FALSE
[18:14:48.102]      // skip if-block "!isProduction"
[18:14:48.102]    </control>
[18:14:48.102]  </sequence>
[18:14:48.102]  
[18:15:06.780]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:15:06.780]  
[18:15:06.780]  <debugvars>
[18:15:06.780]    // Pre-defined
[18:15:06.780]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:15:06.780]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:15:06.780]    __dp=0x00000000
[18:15:06.780]    __ap=0x00000000
[18:15:06.780]    __traceout=0x00000000      (Trace Disabled)
[18:15:06.780]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:15:06.780]    __FlashAddr=0x00000000
[18:15:06.783]    __FlashLen=0x00000000
[18:15:06.783]    __FlashArg=0x00000000
[18:15:06.783]    __FlashOp=0x00000000
[18:15:06.783]    __Result=0x00000000
[18:15:06.783]  </debugvars>
[18:15:06.783]  
[18:15:06.783]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:15:06.783]    <block atomic="false" info="">
[18:15:06.783]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:15:06.783]        // -> [isSWJ <= 0x00000001]
[18:15:06.783]      __var hasDormant = __protocol & 0x00020000;
[18:15:06.784]        // -> [hasDormant <= 0x00000000]
[18:15:06.784]      __var protType   = __protocol & 0x0000FFFF;
[18:15:06.784]        // -> [protType <= 0x00000002]
[18:15:06.784]    </block>
[18:15:06.784]    <control if="protType == 1" while="" timeout="0" info="">
[18:15:06.784]      // if-block "protType == 1"
[18:15:06.784]        // =>  FALSE
[18:15:06.784]      // skip if-block "protType == 1"
[18:15:06.784]    </control>
[18:15:06.785]    <control if="protType == 2" while="" timeout="0" info="">
[18:15:06.785]      // if-block "protType == 2"
[18:15:06.785]        // =>  TRUE
[18:15:06.785]      <control if="isSWJ" while="" timeout="0" info="">
[18:15:06.785]        // if-block "isSWJ"
[18:15:06.785]          // =>  TRUE
[18:15:06.785]        <control if="hasDormant" while="" timeout="0" info="">
[18:15:06.785]          // if-block "hasDormant"
[18:15:06.786]            // =>  FALSE
[18:15:06.786]          // skip if-block "hasDormant"
[18:15:06.786]        </control>
[18:15:06.786]        <control if="!hasDormant" while="" timeout="0" info="">
[18:15:06.786]          // if-block "!hasDormant"
[18:15:06.786]            // =>  TRUE
[18:15:06.786]          <block atomic="false" info="">
[18:15:06.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:15:06.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:15:06.788]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:15:06.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:15:06.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:15:06.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:15:06.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:15:06.793]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:15:06.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:15:06.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:15:06.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:15:06.795]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:15:06.795]          </block>
[18:15:06.795]          // end if-block "!hasDormant"
[18:15:06.795]        </control>
[18:15:06.795]        // end if-block "isSWJ"
[18:15:06.795]      </control>
[18:15:06.795]      <control if="!isSWJ" while="" timeout="0" info="">
[18:15:06.795]        // if-block "!isSWJ"
[18:15:06.795]          // =>  FALSE
[18:15:06.795]        // skip if-block "!isSWJ"
[18:15:06.795]      </control>
[18:15:06.795]      <block atomic="false" info="">
[18:15:06.797]        ReadDP(0x0);
[18:15:06.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:15:06.798]      </block>
[18:15:06.798]      // end if-block "protType == 2"
[18:15:06.798]    </control>
[18:15:06.798]  </sequence>
[18:15:06.798]  
[18:15:06.801]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:15:06.801]  
[18:15:06.801]  <debugvars>
[18:15:06.801]    // Pre-defined
[18:15:06.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:15:06.801]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:15:06.801]    __dp=0x00000000
[18:15:06.801]    __ap=0x00000000
[18:15:06.801]    __traceout=0x00000000      (Trace Disabled)
[18:15:06.801]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:15:06.801]    __FlashAddr=0x00000000
[18:15:06.801]    __FlashLen=0x00000000
[18:15:06.801]    __FlashArg=0x00000000
[18:15:06.801]    __FlashOp=0x00000000
[18:15:06.801]    __Result=0x00000000
[18:15:06.801]  </debugvars>
[18:15:06.801]  
[18:15:06.801]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:15:06.801]    <block atomic="false" info="">
[18:15:06.801]      __var SW_DP_ABORT       = 0x0;
[18:15:06.801]        // -> [SW_DP_ABORT <= 0x00000000]
[18:15:06.801]      __var DP_CTRL_STAT      = 0x4;
[18:15:06.801]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:15:06.801]      __var DP_SELECT         = 0x8;
[18:15:06.801]        // -> [DP_SELECT <= 0x00000008]
[18:15:06.801]      __var powered_down      = 0;
[18:15:06.801]        // -> [powered_down <= 0x00000000]
[18:15:06.801]      WriteDP(DP_SELECT, 0x00000000);
[18:15:06.805]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:15:06.805]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:15:06.807]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:15:06.807]        // -> [powered_down <= 0x00000001]
[18:15:06.807]    </block>
[18:15:06.807]    <control if="powered_down" while="" timeout="0" info="">
[18:15:06.809]      // if-block "powered_down"
[18:15:06.809]        // =>  TRUE
[18:15:06.809]      <block atomic="false" info="">
[18:15:06.809]        Message(0, "Debug/System power-up request sent");
[18:15:06.809]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:15:06.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:15:06.813]      </block>
[18:15:06.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:15:06.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:15:06.817]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:15:06.817]        // while-condition  =>  FALSE
[18:15:06.817]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:15:06.817]      </control>
[18:15:06.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:15:06.817]        // if-block "(__protocol & 0xFFFF) == 1"
[18:15:06.817]          // =>  FALSE
[18:15:06.818]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:15:06.818]      </control>
[18:15:06.818]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:15:06.818]        // if-block "(__protocol & 0xFFFF) == 2"
[18:15:06.818]          // =>  TRUE
[18:15:06.818]        <block atomic="false" info="">
[18:15:06.818]          Message(0, "executing SWD power up");
[18:15:06.820]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:15:06.822]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:15:06.822]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:15:06.822]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:15:06.825]        </block>
[18:15:06.825]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:15:06.825]      </control>
[18:15:06.825]      // end if-block "powered_down"
[18:15:06.825]    </control>
[18:15:06.825]    <block atomic="false" info="">
[18:15:06.825]      __var DEBUG_PORT_VAL    = 0;
[18:15:06.825]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:15:06.825]      __var ACCESS_POINT_VAL  = 0;
[18:15:06.825]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:15:06.825]      __ap = 1; 
[18:15:06.825]        // -> [__ap <= 0x00000001]
[18:15:06.825]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:15:06.830]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:15:06.830]      __ap = 4;
[18:15:06.830]        // -> [__ap <= 0x00000004]
[18:15:06.830]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:15:06.833]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:15:06.834]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:15:06.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:15:06.835]    </block>
[18:15:06.835]    <block atomic="false" info="">
[18:15:06.835]      __var nReset = 0x80;
[18:15:06.835]        // -> [nReset <= 0x00000080]
[18:15:06.835]      __var canReadPins = 0;
[18:15:06.835]        // -> [canReadPins <= 0x00000000]
[18:15:06.835]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:15:06.835]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:15:06.835]        // -> [canReadPins <= 0x00000001]
[18:15:06.835]    </block>
[18:15:06.835]    <control if="" while="1" timeout="200" info="">
[18:15:06.835]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.839]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.839]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.839]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.839]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.839]      // while "1"  (timeout="200")
[18:15:06.839]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.840]      // while "1"  (timeout="200")
[18:15:06.840]      // while-condition  =>  TRUE
[18:15:06.842]      // while "1"  (timeout="200")
[18:15:06.842]      // while-condition  =>  TRUE
[18:15:06.842]      // while "1"  (timeout="200")
[18:15:06.842]      // while-condition  =>  TRUE
[18:15:06.842]      // while "1"  (timeout="200")
[18:15:06.842]      // while-condition  =>  TRUE
[18:15:06.842]      // while "1"  (timeout="200")
[18:15:06.842]      // while-condition  =>  TRUE
[18:15:06.842]      // while "1"  (timeout="200")
[18:15:06.842]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.843]      // while "1"  (timeout="200")
[18:15:06.843]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.845]      // while-condition  =>  TRUE
[18:15:06.845]      // while "1"  (timeout="200")
[18:15:06.847]      // while-condition  =>  TRUE
[18:15:06.847]      // while "1"  (timeout="200")
[18:15:06.847]      // while  =>  TIMEOUT
[18:15:06.847]      // end while "1"
[18:15:06.847]    </control>
[18:15:06.847]    <control if="canReadPins" while="" timeout="0" info="">
[18:15:06.847]      // if-block "canReadPins"
[18:15:06.847]        // =>  TRUE
[18:15:06.847]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:15:06.847]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:15:06.847]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:15:06.847]        // while-condition  =>  FALSE
[18:15:06.847]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:15:06.847]      </control>
[18:15:06.847]      // end if-block "canReadPins"
[18:15:06.847]    </control>
[18:15:06.847]    <control if="!canReadPins" while="" timeout="0" info="">
[18:15:06.851]      // if-block "!canReadPins"
[18:15:06.851]        // =>  FALSE
[18:15:06.851]      // skip if-block "!canReadPins"
[18:15:06.851]    </control>
[18:15:06.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:15:06.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:15:06.851]        // =>  TRUE
[18:15:06.851]      <block atomic="false" info="">
[18:15:06.851]        WriteAP(0x00, 0x190008);
[18:15:06.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:15:06.851]        WriteAP(0xF0, 0x01);
[18:15:06.857]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:15:06.857]      </block>
[18:15:06.858]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:15:06.858]    </control>
[18:15:06.858]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:15:06.858]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:15:06.858]        // =>  FALSE
[18:15:06.858]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:15:06.858]    </control>
[18:15:06.858]    <block atomic="false" info="">
[18:15:06.858]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:15:06.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:15:06.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:15:06.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:15:06.864]      __ap = 0; //lets make sure we reset the access point selection
[18:15:06.864]        // -> [__ap <= 0x00000000]
[18:15:06.864]    </block>
[18:15:06.864]  </sequence>
[18:15:06.864]  
[18:15:06.882]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:15:06.882]  
[18:15:06.882]  <debugvars>
[18:15:06.882]    // Pre-defined
[18:15:06.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:15:06.882]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:15:06.882]    __dp=0x00000000
[18:15:06.882]    __ap=0x00000000
[18:15:06.882]    __traceout=0x00000000      (Trace Disabled)
[18:15:06.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:15:06.882]    __FlashAddr=0x00000000
[18:15:06.882]    __FlashLen=0x00000000
[18:15:06.882]    __FlashArg=0x00000000
[18:15:06.882]    __FlashOp=0x00000000
[18:15:06.882]    __Result=0x00000000
[18:15:06.882]  </debugvars>
[18:15:06.882]  
[18:15:06.882]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:15:06.882]    <block atomic="false" info="">
[18:15:06.882]      __var deviceID = 0;
[18:15:06.882]        // -> [deviceID <= 0x00000000]
[18:15:06.887]      __var version = 0;
[18:15:06.887]        // -> [version <= 0x00000000]
[18:15:06.887]      __var partNum = 0;
[18:15:06.887]        // -> [partNum <= 0x00000000]
[18:15:06.887]      __var manuf = 0;
[18:15:06.887]        // -> [manuf <= 0x00000000]
[18:15:06.887]      __var isMSPM0G1X0X_G3X0X = 0;
[18:15:06.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:15:06.887]      __var isProduction = 0;
[18:15:06.887]        // -> [isProduction <= 0x00000000]
[18:15:06.887]      __var continueId = 0;
[18:15:06.887]        // -> [continueId <= 0x00000000]
[18:15:06.887]      deviceID =   Read32(0x41C40004);
[18:15:06.892]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:15:06.892]        // -> [deviceID <= 0x2BB8802F]
[18:15:06.892]      version = deviceID >> 28;
[18:15:06.892]        // -> [version <= 0x00000002]
[18:15:06.892]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:15:06.892]        // -> [partNum <= 0x0000BB88]
[18:15:06.892]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:15:06.892]        // -> [manuf <= 0x00000017]
[18:15:06.892]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:15:06.892]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:15:06.892]      isProduction = (version > 0);
[18:15:06.892]        // -> [isProduction <= 0x00000001]
[18:15:06.892]    </block>
[18:15:06.892]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:15:06.892]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:15:06.892]        // =>  FALSE
[18:15:06.892]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:15:06.892]    </control>
[18:15:06.892]    <control if="continueId == 4" while="" timeout="0" info="">
[18:15:06.892]      // if-block "continueId == 4"
[18:15:06.892]        // =>  FALSE
[18:15:06.892]      // skip if-block "continueId == 4"
[18:15:06.892]    </control>
[18:15:06.892]    <control if="!isProduction" while="" timeout="0" info="">
[18:15:06.892]      // if-block "!isProduction"
[18:15:06.892]        // =>  FALSE
[18:15:06.892]      // skip if-block "!isProduction"
[18:15:06.892]    </control>
[18:15:06.892]  </sequence>
[18:15:06.892]  
[18:16:06.601]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:16:06.601]  
[18:16:06.601]  <debugvars>
[18:16:06.601]    // Pre-defined
[18:16:06.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:06.601]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:06.601]    __dp=0x00000000
[18:16:06.601]    __ap=0x00000000
[18:16:06.601]    __traceout=0x00000000      (Trace Disabled)
[18:16:06.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:06.601]    __FlashAddr=0x00000000
[18:16:06.601]    __FlashLen=0x00000000
[18:16:06.601]    __FlashArg=0x00000000
[18:16:06.601]    __FlashOp=0x00000000
[18:16:06.601]    __Result=0x00000000
[18:16:06.601]  </debugvars>
[18:16:06.601]  
[18:16:06.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:16:06.601]    <block atomic="false" info="">
[18:16:06.601]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:16:06.601]        // -> [isSWJ <= 0x00000001]
[18:16:06.601]      __var hasDormant = __protocol & 0x00020000;
[18:16:06.604]        // -> [hasDormant <= 0x00000000]
[18:16:06.604]      __var protType   = __protocol & 0x0000FFFF;
[18:16:06.604]        // -> [protType <= 0x00000002]
[18:16:06.604]    </block>
[18:16:06.604]    <control if="protType == 1" while="" timeout="0" info="">
[18:16:06.604]      // if-block "protType == 1"
[18:16:06.604]        // =>  FALSE
[18:16:06.604]      // skip if-block "protType == 1"
[18:16:06.604]    </control>
[18:16:06.604]    <control if="protType == 2" while="" timeout="0" info="">
[18:16:06.604]      // if-block "protType == 2"
[18:16:06.604]        // =>  TRUE
[18:16:06.604]      <control if="isSWJ" while="" timeout="0" info="">
[18:16:06.604]        // if-block "isSWJ"
[18:16:06.604]          // =>  TRUE
[18:16:06.604]        <control if="hasDormant" while="" timeout="0" info="">
[18:16:06.604]          // if-block "hasDormant"
[18:16:06.604]            // =>  FALSE
[18:16:06.604]          // skip if-block "hasDormant"
[18:16:06.604]        </control>
[18:16:06.604]        <control if="!hasDormant" while="" timeout="0" info="">
[18:16:06.604]          // if-block "!hasDormant"
[18:16:06.604]            // =>  TRUE
[18:16:06.604]          <block atomic="false" info="">
[18:16:06.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:16:06.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:06.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:16:06.610]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:16:06.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:16:06.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:06.611]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:16:06.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:16:06.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:16:06.615]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:06.615]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:16:06.618]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:16:06.618]          </block>
[18:16:06.618]          // end if-block "!hasDormant"
[18:16:06.618]        </control>
[18:16:06.618]        // end if-block "isSWJ"
[18:16:06.618]      </control>
[18:16:06.618]      <control if="!isSWJ" while="" timeout="0" info="">
[18:16:06.618]        // if-block "!isSWJ"
[18:16:06.618]          // =>  FALSE
[18:16:06.618]        // skip if-block "!isSWJ"
[18:16:06.618]      </control>
[18:16:06.618]      <block atomic="false" info="">
[18:16:06.618]        ReadDP(0x0);
[18:16:06.618]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:16:06.618]      </block>
[18:16:06.618]      // end if-block "protType == 2"
[18:16:06.618]    </control>
[18:16:06.621]  </sequence>
[18:16:06.621]  
[18:16:06.623]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:16:06.623]  
[18:16:06.623]  <debugvars>
[18:16:06.623]    // Pre-defined
[18:16:06.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:06.626]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:06.626]    __dp=0x00000000
[18:16:06.626]    __ap=0x00000000
[18:16:06.626]    __traceout=0x00000000      (Trace Disabled)
[18:16:06.626]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:06.626]    __FlashAddr=0x00000000
[18:16:06.626]    __FlashLen=0x00000000
[18:16:06.626]    __FlashArg=0x00000000
[18:16:06.626]    __FlashOp=0x00000000
[18:16:06.626]    __Result=0x00000000
[18:16:06.626]  </debugvars>
[18:16:06.626]  
[18:16:06.626]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:16:06.626]    <block atomic="false" info="">
[18:16:06.626]      __var SW_DP_ABORT       = 0x0;
[18:16:06.626]        // -> [SW_DP_ABORT <= 0x00000000]
[18:16:06.626]      __var DP_CTRL_STAT      = 0x4;
[18:16:06.626]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:16:06.628]      __var DP_SELECT         = 0x8;
[18:16:06.628]        // -> [DP_SELECT <= 0x00000008]
[18:16:06.628]      __var powered_down      = 0;
[18:16:06.628]        // -> [powered_down <= 0x00000000]
[18:16:06.628]      WriteDP(DP_SELECT, 0x00000000);
[18:16:06.629]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:16:06.632]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:16:06.635]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:16:06.635]        // -> [powered_down <= 0x00000001]
[18:16:06.635]    </block>
[18:16:06.637]    <control if="powered_down" while="" timeout="0" info="">
[18:16:06.637]      // if-block "powered_down"
[18:16:06.637]        // =>  TRUE
[18:16:06.637]      <block atomic="false" info="">
[18:16:06.637]        Message(0, "Debug/System power-up request sent");
[18:16:06.640]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:16:06.642]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:16:06.642]      </block>
[18:16:06.642]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:16:06.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:16:06.643]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:16:06.643]        // while-condition  =>  FALSE
[18:16:06.643]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:16:06.643]      </control>
[18:16:06.643]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:16:06.643]        // if-block "(__protocol & 0xFFFF) == 1"
[18:16:06.643]          // =>  FALSE
[18:16:06.643]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:16:06.643]      </control>
[18:16:06.643]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:16:06.643]        // if-block "(__protocol & 0xFFFF) == 2"
[18:16:06.643]          // =>  TRUE
[18:16:06.643]        <block atomic="false" info="">
[18:16:06.643]          Message(0, "executing SWD power up");
[18:16:06.649]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:16:06.649]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:16:06.649]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:16:06.653]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:16:06.653]        </block>
[18:16:06.653]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:16:06.653]      </control>
[18:16:06.653]      // end if-block "powered_down"
[18:16:06.653]    </control>
[18:16:06.653]    <block atomic="false" info="">
[18:16:06.653]      __var DEBUG_PORT_VAL    = 0;
[18:16:06.653]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:16:06.654]      __var ACCESS_POINT_VAL  = 0;
[18:16:06.654]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:16:06.654]      __ap = 1; 
[18:16:06.654]        // -> [__ap <= 0x00000001]
[18:16:06.654]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:16:06.656]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:16:06.656]      __ap = 4;
[18:16:06.656]        // -> [__ap <= 0x00000004]
[18:16:06.656]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:06.660]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:16:06.660]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:16:06.660]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:06.663]    </block>
[18:16:06.663]    <block atomic="false" info="">
[18:16:06.663]      __var nReset = 0x80;
[18:16:06.663]        // -> [nReset <= 0x00000080]
[18:16:06.663]      __var canReadPins = 0;
[18:16:06.663]        // -> [canReadPins <= 0x00000000]
[18:16:06.663]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:16:06.667]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:16:06.667]        // -> [canReadPins <= 0x00000001]
[18:16:06.667]    </block>
[18:16:06.667]    <control if="" while="1" timeout="200" info="">
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.668]      // while-condition  =>  TRUE
[18:16:06.668]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.670]      // while "1"  (timeout="200")
[18:16:06.670]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.672]      // while "1"  (timeout="200")
[18:16:06.672]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.674]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.674]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.674]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.674]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.674]      // while-condition  =>  TRUE
[18:16:06.674]      // while "1"  (timeout="200")
[18:16:06.675]      // while-condition  =>  TRUE
[18:16:06.675]      // while "1"  (timeout="200")
[18:16:06.675]      // while  =>  TIMEOUT
[18:16:06.675]      // end while "1"
[18:16:06.675]    </control>
[18:16:06.675]    <control if="canReadPins" while="" timeout="0" info="">
[18:16:06.675]      // if-block "canReadPins"
[18:16:06.675]        // =>  TRUE
[18:16:06.675]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:16:06.675]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:16:06.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:16:06.677]        // while-condition  =>  FALSE
[18:16:06.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:16:06.677]      </control>
[18:16:06.677]      // end if-block "canReadPins"
[18:16:06.678]    </control>
[18:16:06.678]    <control if="!canReadPins" while="" timeout="0" info="">
[18:16:06.678]      // if-block "!canReadPins"
[18:16:06.678]        // =>  FALSE
[18:16:06.678]      // skip if-block "!canReadPins"
[18:16:06.678]    </control>
[18:16:06.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:16:06.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:06.678]        // =>  TRUE
[18:16:06.678]      <block atomic="false" info="">
[18:16:06.678]        WriteAP(0x00, 0x190008);
[18:16:06.686]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:06.686]        WriteAP(0xF0, 0x01);
[18:16:06.690]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:06.690]      </block>
[18:16:06.690]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:06.690]    </control>
[18:16:06.691]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:16:06.691]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:06.691]        // =>  FALSE
[18:16:06.691]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:06.691]    </control>
[18:16:06.691]    <block atomic="false" info="">
[18:16:06.691]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:06.693]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:16:06.693]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:16:06.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:06.695]      __ap = 0; //lets make sure we reset the access point selection
[18:16:06.695]        // -> [__ap <= 0x00000000]
[18:16:06.695]    </block>
[18:16:06.695]  </sequence>
[18:16:06.695]  
[18:16:06.716]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:16:06.716]  
[18:16:06.716]  <debugvars>
[18:16:06.716]    // Pre-defined
[18:16:06.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:06.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:06.716]    __dp=0x00000000
[18:16:06.716]    __ap=0x00000000
[18:16:06.716]    __traceout=0x00000000      (Trace Disabled)
[18:16:06.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:06.716]    __FlashAddr=0x00000000
[18:16:06.716]    __FlashLen=0x00000000
[18:16:06.716]    __FlashArg=0x00000000
[18:16:06.716]    __FlashOp=0x00000000
[18:16:06.716]    __Result=0x00000000
[18:16:06.716]  </debugvars>
[18:16:06.718]  
[18:16:06.718]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:16:06.718]    <block atomic="false" info="">
[18:16:06.718]      __var deviceID = 0;
[18:16:06.718]        // -> [deviceID <= 0x00000000]
[18:16:06.718]      __var version = 0;
[18:16:06.718]        // -> [version <= 0x00000000]
[18:16:06.718]      __var partNum = 0;
[18:16:06.718]        // -> [partNum <= 0x00000000]
[18:16:06.718]      __var manuf = 0;
[18:16:06.718]        // -> [manuf <= 0x00000000]
[18:16:06.718]      __var isMSPM0G1X0X_G3X0X = 0;
[18:16:06.718]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:16:06.718]      __var isProduction = 0;
[18:16:06.719]        // -> [isProduction <= 0x00000000]
[18:16:06.719]      __var continueId = 0;
[18:16:06.719]        // -> [continueId <= 0x00000000]
[18:16:06.719]      deviceID =   Read32(0x41C40004);
[18:16:06.726]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:16:06.726]        // -> [deviceID <= 0x2BB8802F]
[18:16:06.726]      version = deviceID >> 28;
[18:16:06.726]        // -> [version <= 0x00000002]
[18:16:06.726]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:16:06.726]        // -> [partNum <= 0x0000BB88]
[18:16:06.726]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:16:06.726]        // -> [manuf <= 0x00000017]
[18:16:06.726]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:16:06.726]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:16:06.726]      isProduction = (version > 0);
[18:16:06.726]        // -> [isProduction <= 0x00000001]
[18:16:06.726]    </block>
[18:16:06.726]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:16:06.726]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:16:06.726]        // =>  FALSE
[18:16:06.726]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:16:06.726]    </control>
[18:16:06.726]    <control if="continueId == 4" while="" timeout="0" info="">
[18:16:06.726]      // if-block "continueId == 4"
[18:16:06.726]        // =>  FALSE
[18:16:06.728]      // skip if-block "continueId == 4"
[18:16:06.728]    </control>
[18:16:06.728]    <control if="!isProduction" while="" timeout="0" info="">
[18:16:06.728]      // if-block "!isProduction"
[18:16:06.728]        // =>  FALSE
[18:16:06.728]      // skip if-block "!isProduction"
[18:16:06.728]    </control>
[18:16:06.728]  </sequence>
[18:16:06.728]  
[18:16:26.351]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:16:26.351]  
[18:16:26.360]  <debugvars>
[18:16:26.360]    // Pre-defined
[18:16:26.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:26.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:26.360]    __dp=0x00000000
[18:16:26.360]    __ap=0x00000000
[18:16:26.360]    __traceout=0x00000000      (Trace Disabled)
[18:16:26.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:26.360]    __FlashAddr=0x00000000
[18:16:26.360]    __FlashLen=0x00000000
[18:16:26.361]    __FlashArg=0x00000000
[18:16:26.361]    __FlashOp=0x00000000
[18:16:26.361]    __Result=0x00000000
[18:16:26.361]  </debugvars>
[18:16:26.361]  
[18:16:26.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:16:26.361]    <block atomic="false" info="">
[18:16:26.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:16:26.361]        // -> [isSWJ <= 0x00000001]
[18:16:26.361]      __var hasDormant = __protocol & 0x00020000;
[18:16:26.361]        // -> [hasDormant <= 0x00000000]
[18:16:26.362]      __var protType   = __protocol & 0x0000FFFF;
[18:16:26.362]        // -> [protType <= 0x00000002]
[18:16:26.362]    </block>
[18:16:26.362]    <control if="protType == 1" while="" timeout="0" info="">
[18:16:26.362]      // if-block "protType == 1"
[18:16:26.362]        // =>  FALSE
[18:16:26.362]      // skip if-block "protType == 1"
[18:16:26.362]    </control>
[18:16:26.362]    <control if="protType == 2" while="" timeout="0" info="">
[18:16:26.362]      // if-block "protType == 2"
[18:16:26.362]        // =>  TRUE
[18:16:26.362]      <control if="isSWJ" while="" timeout="0" info="">
[18:16:26.362]        // if-block "isSWJ"
[18:16:26.363]          // =>  TRUE
[18:16:26.363]        <control if="hasDormant" while="" timeout="0" info="">
[18:16:26.363]          // if-block "hasDormant"
[18:16:26.363]            // =>  FALSE
[18:16:26.363]          // skip if-block "hasDormant"
[18:16:26.363]        </control>
[18:16:26.363]        <control if="!hasDormant" while="" timeout="0" info="">
[18:16:26.363]          // if-block "!hasDormant"
[18:16:26.363]            // =>  TRUE
[18:16:26.363]          <block atomic="false" info="">
[18:16:26.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:16:26.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:26.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:16:26.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:16:26.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:16:26.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:26.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:16:26.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:16:26.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:16:26.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:26.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:16:26.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:16:26.373]          </block>
[18:16:26.373]          // end if-block "!hasDormant"
[18:16:26.373]        </control>
[18:16:26.373]        // end if-block "isSWJ"
[18:16:26.373]      </control>
[18:16:26.373]      <control if="!isSWJ" while="" timeout="0" info="">
[18:16:26.373]        // if-block "!isSWJ"
[18:16:26.373]          // =>  FALSE
[18:16:26.375]        // skip if-block "!isSWJ"
[18:16:26.375]      </control>
[18:16:26.375]      <block atomic="false" info="">
[18:16:26.376]        ReadDP(0x0);
[18:16:26.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:16:26.377]      </block>
[18:16:26.377]      // end if-block "protType == 2"
[18:16:26.377]    </control>
[18:16:26.377]  </sequence>
[18:16:26.378]  
[18:16:26.382]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:16:26.382]  
[18:16:26.382]  <debugvars>
[18:16:26.382]    // Pre-defined
[18:16:26.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:26.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:26.383]    __dp=0x00000000
[18:16:26.383]    __ap=0x00000000
[18:16:26.383]    __traceout=0x00000000      (Trace Disabled)
[18:16:26.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:26.383]    __FlashAddr=0x00000000
[18:16:26.383]    __FlashLen=0x00000000
[18:16:26.383]    __FlashArg=0x00000000
[18:16:26.383]    __FlashOp=0x00000000
[18:16:26.383]    __Result=0x00000000
[18:16:26.383]  </debugvars>
[18:16:26.384]  
[18:16:26.384]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:16:26.384]    <block atomic="false" info="">
[18:16:26.384]      __var SW_DP_ABORT       = 0x0;
[18:16:26.384]        // -> [SW_DP_ABORT <= 0x00000000]
[18:16:26.384]      __var DP_CTRL_STAT      = 0x4;
[18:16:26.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:16:26.384]      __var DP_SELECT         = 0x8;
[18:16:26.384]        // -> [DP_SELECT <= 0x00000008]
[18:16:26.385]      __var powered_down      = 0;
[18:16:26.385]        // -> [powered_down <= 0x00000000]
[18:16:26.385]      WriteDP(DP_SELECT, 0x00000000);
[18:16:26.386]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:16:26.386]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:16:26.389]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:16:26.389]        // -> [powered_down <= 0x00000001]
[18:16:26.389]    </block>
[18:16:26.389]    <control if="powered_down" while="" timeout="0" info="">
[18:16:26.389]      // if-block "powered_down"
[18:16:26.389]        // =>  TRUE
[18:16:26.390]      <block atomic="false" info="">
[18:16:26.390]        Message(0, "Debug/System power-up request sent");
[18:16:26.394]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:16:26.395]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:16:26.395]      </block>
[18:16:26.395]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:16:26.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:16:26.397]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:16:26.397]        // while-condition  =>  FALSE
[18:16:26.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:16:26.397]      </control>
[18:16:26.398]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:16:26.398]        // if-block "(__protocol & 0xFFFF) == 1"
[18:16:26.398]          // =>  FALSE
[18:16:26.398]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:16:26.398]      </control>
[18:16:26.398]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:16:26.399]        // if-block "(__protocol & 0xFFFF) == 2"
[18:16:26.399]          // =>  TRUE
[18:16:26.399]        <block atomic="false" info="">
[18:16:26.399]          Message(0, "executing SWD power up");
[18:16:26.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:16:26.403]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:16:26.404]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:16:26.405]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:16:26.405]        </block>
[18:16:26.405]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:16:26.405]      </control>
[18:16:26.406]      // end if-block "powered_down"
[18:16:26.406]    </control>
[18:16:26.406]    <block atomic="false" info="">
[18:16:26.406]      __var DEBUG_PORT_VAL    = 0;
[18:16:26.406]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:16:26.406]      __var ACCESS_POINT_VAL  = 0;
[18:16:26.406]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:16:26.407]      __ap = 1; 
[18:16:26.407]        // -> [__ap <= 0x00000001]
[18:16:26.407]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:16:26.410]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:16:26.410]      __ap = 4;
[18:16:26.410]        // -> [__ap <= 0x00000004]
[18:16:26.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:26.413]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:16:26.414]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:16:26.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:26.415]    </block>
[18:16:26.415]    <block atomic="false" info="">
[18:16:26.416]      __var nReset = 0x80;
[18:16:26.416]        // -> [nReset <= 0x00000080]
[18:16:26.416]      __var canReadPins = 0;
[18:16:26.416]        // -> [canReadPins <= 0x00000000]
[18:16:26.416]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:16:26.417]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:16:26.417]        // -> [canReadPins <= 0x00000001]
[18:16:26.417]    </block>
[18:16:26.417]    <control if="" while="1" timeout="200" info="">
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.417]      // while-condition  =>  TRUE
[18:16:26.417]      // while "1"  (timeout="200")
[18:16:26.419]      // while-condition  =>  TRUE
[18:16:26.419]      // while "1"  (timeout="200")
[18:16:26.419]      // while-condition  =>  TRUE
[18:16:26.419]      // while "1"  (timeout="200")
[18:16:26.419]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.420]      // while-condition  =>  TRUE
[18:16:26.420]      // while "1"  (timeout="200")
[18:16:26.423]      // while-condition  =>  TRUE
[18:16:26.423]      // while "1"  (timeout="200")
[18:16:26.423]      // while-condition  =>  TRUE
[18:16:26.423]      // while "1"  (timeout="200")
[18:16:26.423]      // while-condition  =>  TRUE
[18:16:26.423]      // while "1"  (timeout="200")
[18:16:26.423]      // while-condition  =>  TRUE
[18:16:26.423]      // while "1"  (timeout="200")
[18:16:26.423]      // while-condition  =>  TRUE
[18:16:26.423]      // while "1"  (timeout="200")
[18:16:26.424]      // while-condition  =>  TRUE
[18:16:26.424]      // while "1"  (timeout="200")
[18:16:26.424]      // while-condition  =>  TRUE
[18:16:26.424]      // while "1"  (timeout="200")
[18:16:26.424]      // while-condition  =>  TRUE
[18:16:26.424]      // while "1"  (timeout="200")
[18:16:26.424]      // while-condition  =>  TRUE
[18:16:26.424]      // while "1"  (timeout="200")
[18:16:26.424]      // while-condition  =>  TRUE
[18:16:26.424]      // while "1"  (timeout="200")
[18:16:26.425]      // while-condition  =>  TRUE
[18:16:26.425]      // while "1"  (timeout="200")
[18:16:26.425]      // while  =>  TIMEOUT
[18:16:26.425]      // end while "1"
[18:16:26.425]    </control>
[18:16:26.425]    <control if="canReadPins" while="" timeout="0" info="">
[18:16:26.425]      // if-block "canReadPins"
[18:16:26.425]        // =>  TRUE
[18:16:26.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:16:26.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:16:26.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:16:26.427]        // while-condition  =>  FALSE
[18:16:26.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:16:26.427]      </control>
[18:16:26.427]      // end if-block "canReadPins"
[18:16:26.427]    </control>
[18:16:26.427]    <control if="!canReadPins" while="" timeout="0" info="">
[18:16:26.427]      // if-block "!canReadPins"
[18:16:26.427]        // =>  FALSE
[18:16:26.429]      // skip if-block "!canReadPins"
[18:16:26.429]    </control>
[18:16:26.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:16:26.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:26.429]        // =>  TRUE
[18:16:26.429]      <block atomic="false" info="">
[18:16:26.429]        WriteAP(0x00, 0x190008);
[18:16:26.429]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:26.429]        WriteAP(0xF0, 0x01);
[18:16:26.434]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:26.434]      </block>
[18:16:26.434]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:26.434]    </control>
[18:16:26.434]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:16:26.434]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:26.434]        // =>  FALSE
[18:16:26.434]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:26.435]    </control>
[18:16:26.435]    <block atomic="false" info="">
[18:16:26.435]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:26.439]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:16:26.439]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:16:26.439]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:26.440]      __ap = 0; //lets make sure we reset the access point selection
[18:16:26.440]        // -> [__ap <= 0x00000000]
[18:16:26.440]    </block>
[18:16:26.440]  </sequence>
[18:16:26.440]  
[18:16:26.457]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:16:26.457]  
[18:16:26.457]  <debugvars>
[18:16:26.457]    // Pre-defined
[18:16:26.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:26.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:26.457]    __dp=0x00000000
[18:16:26.457]    __ap=0x00000000
[18:16:26.461]    __traceout=0x00000000      (Trace Disabled)
[18:16:26.461]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:26.461]    __FlashAddr=0x00000000
[18:16:26.461]    __FlashLen=0x00000000
[18:16:26.461]    __FlashArg=0x00000000
[18:16:26.461]    __FlashOp=0x00000000
[18:16:26.461]    __Result=0x00000000
[18:16:26.461]  </debugvars>
[18:16:26.461]  
[18:16:26.461]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:16:26.461]    <block atomic="false" info="">
[18:16:26.461]      __var deviceID = 0;
[18:16:26.461]        // -> [deviceID <= 0x00000000]
[18:16:26.461]      __var version = 0;
[18:16:26.461]        // -> [version <= 0x00000000]
[18:16:26.461]      __var partNum = 0;
[18:16:26.461]        // -> [partNum <= 0x00000000]
[18:16:26.461]      __var manuf = 0;
[18:16:26.461]        // -> [manuf <= 0x00000000]
[18:16:26.461]      __var isMSPM0G1X0X_G3X0X = 0;
[18:16:26.461]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:16:26.461]      __var isProduction = 0;
[18:16:26.461]        // -> [isProduction <= 0x00000000]
[18:16:26.461]      __var continueId = 0;
[18:16:26.461]        // -> [continueId <= 0x00000000]
[18:16:26.461]      deviceID =   Read32(0x41C40004);
[18:16:26.467]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:16:26.467]        // -> [deviceID <= 0x2BB8802F]
[18:16:26.467]      version = deviceID >> 28;
[18:16:26.467]        // -> [version <= 0x00000002]
[18:16:26.467]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:16:26.467]        // -> [partNum <= 0x0000BB88]
[18:16:26.467]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:16:26.467]        // -> [manuf <= 0x00000017]
[18:16:26.467]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:16:26.467]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:16:26.467]      isProduction = (version > 0);
[18:16:26.467]        // -> [isProduction <= 0x00000001]
[18:16:26.467]    </block>
[18:16:26.469]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:16:26.469]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:16:26.469]        // =>  FALSE
[18:16:26.469]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:16:26.469]    </control>
[18:16:26.469]    <control if="continueId == 4" while="" timeout="0" info="">
[18:16:26.469]      // if-block "continueId == 4"
[18:16:26.469]        // =>  FALSE
[18:16:26.469]      // skip if-block "continueId == 4"
[18:16:26.469]    </control>
[18:16:26.469]    <control if="!isProduction" while="" timeout="0" info="">
[18:16:26.469]      // if-block "!isProduction"
[18:16:26.469]        // =>  FALSE
[18:16:26.469]      // skip if-block "!isProduction"
[18:16:26.469]    </control>
[18:16:26.469]  </sequence>
[18:16:26.469]  
[18:16:46.829]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:16:46.829]  
[18:16:46.837]  <debugvars>
[18:16:46.837]    // Pre-defined
[18:16:46.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:46.837]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:46.837]    __dp=0x00000000
[18:16:46.837]    __ap=0x00000000
[18:16:46.837]    __traceout=0x00000000      (Trace Disabled)
[18:16:46.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:46.837]    __FlashAddr=0x00000000
[18:16:46.837]    __FlashLen=0x00000000
[18:16:46.837]    __FlashArg=0x00000000
[18:16:46.837]    __FlashOp=0x00000000
[18:16:46.837]    __Result=0x00000000
[18:16:46.837]  </debugvars>
[18:16:46.837]  
[18:16:46.839]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:16:46.839]    <block atomic="false" info="">
[18:16:46.839]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:16:46.839]        // -> [isSWJ <= 0x00000001]
[18:16:46.839]      __var hasDormant = __protocol & 0x00020000;
[18:16:46.839]        // -> [hasDormant <= 0x00000000]
[18:16:46.839]      __var protType   = __protocol & 0x0000FFFF;
[18:16:46.839]        // -> [protType <= 0x00000002]
[18:16:46.839]    </block>
[18:16:46.839]    <control if="protType == 1" while="" timeout="0" info="">
[18:16:46.839]      // if-block "protType == 1"
[18:16:46.839]        // =>  FALSE
[18:16:46.839]      // skip if-block "protType == 1"
[18:16:46.839]    </control>
[18:16:46.839]    <control if="protType == 2" while="" timeout="0" info="">
[18:16:46.841]      // if-block "protType == 2"
[18:16:46.841]        // =>  TRUE
[18:16:46.841]      <control if="isSWJ" while="" timeout="0" info="">
[18:16:46.841]        // if-block "isSWJ"
[18:16:46.841]          // =>  TRUE
[18:16:46.841]        <control if="hasDormant" while="" timeout="0" info="">
[18:16:46.841]          // if-block "hasDormant"
[18:16:46.841]            // =>  FALSE
[18:16:46.841]          // skip if-block "hasDormant"
[18:16:46.841]        </control>
[18:16:46.841]        <control if="!hasDormant" while="" timeout="0" info="">
[18:16:46.841]          // if-block "!hasDormant"
[18:16:46.841]            // =>  TRUE
[18:16:46.841]          <block atomic="false" info="">
[18:16:46.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:16:46.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:46.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:16:46.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:16:46.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:16:46.846]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:46.846]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:16:46.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:16:46.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:16:46.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:16:46.851]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:16:46.851]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:16:46.851]          </block>
[18:16:46.851]          // end if-block "!hasDormant"
[18:16:46.851]        </control>
[18:16:46.851]        // end if-block "isSWJ"
[18:16:46.851]      </control>
[18:16:46.851]      <control if="!isSWJ" while="" timeout="0" info="">
[18:16:46.851]        // if-block "!isSWJ"
[18:16:46.851]          // =>  FALSE
[18:16:46.851]        // skip if-block "!isSWJ"
[18:16:46.851]      </control>
[18:16:46.851]      <block atomic="false" info="">
[18:16:46.851]        ReadDP(0x0);
[18:16:46.851]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:16:46.856]      </block>
[18:16:46.856]      // end if-block "protType == 2"
[18:16:46.856]    </control>
[18:16:46.856]  </sequence>
[18:16:46.856]  
[18:16:46.857]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:16:46.857]  
[18:16:46.857]  <debugvars>
[18:16:46.857]    // Pre-defined
[18:16:46.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:46.857]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:46.857]    __dp=0x00000000
[18:16:46.857]    __ap=0x00000000
[18:16:46.857]    __traceout=0x00000000      (Trace Disabled)
[18:16:46.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:46.857]    __FlashAddr=0x00000000
[18:16:46.860]    __FlashLen=0x00000000
[18:16:46.860]    __FlashArg=0x00000000
[18:16:46.860]    __FlashOp=0x00000000
[18:16:46.860]    __Result=0x00000000
[18:16:46.860]  </debugvars>
[18:16:46.860]  
[18:16:46.860]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:16:46.860]    <block atomic="false" info="">
[18:16:46.860]      __var SW_DP_ABORT       = 0x0;
[18:16:46.860]        // -> [SW_DP_ABORT <= 0x00000000]
[18:16:46.860]      __var DP_CTRL_STAT      = 0x4;
[18:16:46.860]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:16:46.860]      __var DP_SELECT         = 0x8;
[18:16:46.860]        // -> [DP_SELECT <= 0x00000008]
[18:16:46.860]      __var powered_down      = 0;
[18:16:46.860]        // -> [powered_down <= 0x00000000]
[18:16:46.860]      WriteDP(DP_SELECT, 0x00000000);
[18:16:46.860]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:16:46.860]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:16:46.865]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:16:46.865]        // -> [powered_down <= 0x00000001]
[18:16:46.865]    </block>
[18:16:46.865]    <control if="powered_down" while="" timeout="0" info="">
[18:16:46.865]      // if-block "powered_down"
[18:16:46.865]        // =>  TRUE
[18:16:46.865]      <block atomic="false" info="">
[18:16:46.865]        Message(0, "Debug/System power-up request sent");
[18:16:46.867]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:16:46.869]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:16:46.869]      </block>
[18:16:46.869]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:16:46.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:16:46.871]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:16:46.871]        // while-condition  =>  FALSE
[18:16:46.871]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:16:46.873]      </control>
[18:16:46.873]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:16:46.873]        // if-block "(__protocol & 0xFFFF) == 1"
[18:16:46.873]          // =>  FALSE
[18:16:46.873]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:16:46.873]      </control>
[18:16:46.873]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:16:46.873]        // if-block "(__protocol & 0xFFFF) == 2"
[18:16:46.873]          // =>  TRUE
[18:16:46.873]        <block atomic="false" info="">
[18:16:46.873]          Message(0, "executing SWD power up");
[18:16:46.873]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:16:46.877]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:16:46.877]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:16:46.877]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:16:46.877]        </block>
[18:16:46.877]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:16:46.877]      </control>
[18:16:46.877]      // end if-block "powered_down"
[18:16:46.879]    </control>
[18:16:46.879]    <block atomic="false" info="">
[18:16:46.879]      __var DEBUG_PORT_VAL    = 0;
[18:16:46.879]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:16:46.879]      __var ACCESS_POINT_VAL  = 0;
[18:16:46.879]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:16:46.879]      __ap = 1; 
[18:16:46.879]        // -> [__ap <= 0x00000001]
[18:16:46.879]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:16:46.881]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:16:46.881]      __ap = 4;
[18:16:46.881]        // -> [__ap <= 0x00000004]
[18:16:46.881]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:46.889]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:16:46.889]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:16:46.889]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:46.889]    </block>
[18:16:46.889]    <block atomic="false" info="">
[18:16:46.889]      __var nReset = 0x80;
[18:16:46.889]        // -> [nReset <= 0x00000080]
[18:16:46.889]      __var canReadPins = 0;
[18:16:46.889]        // -> [canReadPins <= 0x00000000]
[18:16:46.889]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:16:46.893]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:16:46.893]        // -> [canReadPins <= 0x00000001]
[18:16:46.893]    </block>
[18:16:46.893]    <control if="" while="1" timeout="200" info="">
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.893]      // while "1"  (timeout="200")
[18:16:46.893]      // while-condition  =>  TRUE
[18:16:46.897]      // while "1"  (timeout="200")
[18:16:46.897]      // while  =>  TIMEOUT
[18:16:46.897]      // end while "1"
[18:16:46.897]    </control>
[18:16:46.897]    <control if="canReadPins" while="" timeout="0" info="">
[18:16:46.897]      // if-block "canReadPins"
[18:16:46.897]        // =>  TRUE
[18:16:46.897]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:16:46.897]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:16:46.898]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:16:46.898]        // while-condition  =>  FALSE
[18:16:46.898]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:16:46.898]      </control>
[18:16:46.898]      // end if-block "canReadPins"
[18:16:46.898]    </control>
[18:16:46.898]    <control if="!canReadPins" while="" timeout="0" info="">
[18:16:46.901]      // if-block "!canReadPins"
[18:16:46.901]        // =>  FALSE
[18:16:46.901]      // skip if-block "!canReadPins"
[18:16:46.901]    </control>
[18:16:46.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:16:46.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:46.901]        // =>  TRUE
[18:16:46.901]      <block atomic="false" info="">
[18:16:46.901]        WriteAP(0x00, 0x190008);
[18:16:46.901]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:46.901]        WriteAP(0xF0, 0x01);
[18:16:46.906]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:16:46.906]      </block>
[18:16:46.906]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:16:46.907]    </control>
[18:16:46.907]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:16:46.907]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:46.907]        // =>  FALSE
[18:16:46.907]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:16:46.907]    </control>
[18:16:46.908]    <block atomic="false" info="">
[18:16:46.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:16:46.910]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:16:46.911]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:16:46.911]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:16:46.913]      __ap = 0; //lets make sure we reset the access point selection
[18:16:46.914]        // -> [__ap <= 0x00000000]
[18:16:46.914]    </block>
[18:16:46.914]  </sequence>
[18:16:46.914]  
[18:16:46.933]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:16:46.933]  
[18:16:46.934]  <debugvars>
[18:16:46.934]    // Pre-defined
[18:16:46.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:16:46.934]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:16:46.934]    __dp=0x00000000
[18:16:46.934]    __ap=0x00000000
[18:16:46.934]    __traceout=0x00000000      (Trace Disabled)
[18:16:46.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:16:46.934]    __FlashAddr=0x00000000
[18:16:46.935]    __FlashLen=0x00000000
[18:16:46.935]    __FlashArg=0x00000000
[18:16:46.935]    __FlashOp=0x00000000
[18:16:46.935]    __Result=0x00000000
[18:16:46.935]  </debugvars>
[18:16:46.935]  
[18:16:46.935]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:16:46.935]    <block atomic="false" info="">
[18:16:46.935]      __var deviceID = 0;
[18:16:46.936]        // -> [deviceID <= 0x00000000]
[18:16:46.936]      __var version = 0;
[18:16:46.936]        // -> [version <= 0x00000000]
[18:16:46.936]      __var partNum = 0;
[18:16:46.936]        // -> [partNum <= 0x00000000]
[18:16:46.936]      __var manuf = 0;
[18:16:46.936]        // -> [manuf <= 0x00000000]
[18:16:46.936]      __var isMSPM0G1X0X_G3X0X = 0;
[18:16:46.936]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:16:46.936]      __var isProduction = 0;
[18:16:46.936]        // -> [isProduction <= 0x00000000]
[18:16:46.938]      __var continueId = 0;
[18:16:46.938]        // -> [continueId <= 0x00000000]
[18:16:46.938]      deviceID =   Read32(0x41C40004);
[18:16:46.941]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:16:46.941]        // -> [deviceID <= 0x2BB8802F]
[18:16:46.941]      version = deviceID >> 28;
[18:16:46.941]        // -> [version <= 0x00000002]
[18:16:46.941]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:16:46.941]        // -> [partNum <= 0x0000BB88]
[18:16:46.941]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:16:46.941]        // -> [manuf <= 0x00000017]
[18:16:46.941]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:16:46.943]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:16:46.943]      isProduction = (version > 0);
[18:16:46.943]        // -> [isProduction <= 0x00000001]
[18:16:46.943]    </block>
[18:16:46.943]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:16:46.943]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:16:46.943]        // =>  FALSE
[18:16:46.943]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:16:46.943]    </control>
[18:16:46.943]    <control if="continueId == 4" while="" timeout="0" info="">
[18:16:46.943]      // if-block "continueId == 4"
[18:16:46.943]        // =>  FALSE
[18:16:46.943]      // skip if-block "continueId == 4"
[18:16:46.943]    </control>
[18:16:46.943]    <control if="!isProduction" while="" timeout="0" info="">
[18:16:46.943]      // if-block "!isProduction"
[18:16:46.943]        // =>  FALSE
[18:16:46.943]      // skip if-block "!isProduction"
[18:16:46.943]    </control>
[18:16:46.945]  </sequence>
[18:16:46.945]  
[18:17:04.236]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:17:04.236]  
[18:17:04.245]  <debugvars>
[18:17:04.245]    // Pre-defined
[18:17:04.245]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:04.245]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:04.246]    __dp=0x00000000
[18:17:04.246]    __ap=0x00000000
[18:17:04.246]    __traceout=0x00000000      (Trace Disabled)
[18:17:04.246]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:04.246]    __FlashAddr=0x00000000
[18:17:04.247]    __FlashLen=0x00000000
[18:17:04.247]    __FlashArg=0x00000000
[18:17:04.247]    __FlashOp=0x00000000
[18:17:04.247]    __Result=0x00000000
[18:17:04.247]  </debugvars>
[18:17:04.247]  
[18:17:04.247]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:17:04.247]    <block atomic="false" info="">
[18:17:04.247]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:17:04.247]        // -> [isSWJ <= 0x00000001]
[18:17:04.248]      __var hasDormant = __protocol & 0x00020000;
[18:17:04.248]        // -> [hasDormant <= 0x00000000]
[18:17:04.248]      __var protType   = __protocol & 0x0000FFFF;
[18:17:04.248]        // -> [protType <= 0x00000002]
[18:17:04.248]    </block>
[18:17:04.248]    <control if="protType == 1" while="" timeout="0" info="">
[18:17:04.248]      // if-block "protType == 1"
[18:17:04.248]        // =>  FALSE
[18:17:04.249]      // skip if-block "protType == 1"
[18:17:04.249]    </control>
[18:17:04.249]    <control if="protType == 2" while="" timeout="0" info="">
[18:17:04.249]      // if-block "protType == 2"
[18:17:04.249]        // =>  TRUE
[18:17:04.249]      <control if="isSWJ" while="" timeout="0" info="">
[18:17:04.249]        // if-block "isSWJ"
[18:17:04.250]          // =>  TRUE
[18:17:04.250]        <control if="hasDormant" while="" timeout="0" info="">
[18:17:04.250]          // if-block "hasDormant"
[18:17:04.250]            // =>  FALSE
[18:17:04.250]          // skip if-block "hasDormant"
[18:17:04.250]        </control>
[18:17:04.250]        <control if="!hasDormant" while="" timeout="0" info="">
[18:17:04.250]          // if-block "!hasDormant"
[18:17:04.250]            // =>  TRUE
[18:17:04.250]          <block atomic="false" info="">
[18:17:04.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:17:04.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:04.252]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:17:04.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:17:04.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:17:04.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:04.255]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:17:04.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:17:04.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:17:04.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:04.260]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:17:04.261]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:17:04.261]          </block>
[18:17:04.262]          // end if-block "!hasDormant"
[18:17:04.262]        </control>
[18:17:04.262]        // end if-block "isSWJ"
[18:17:04.262]      </control>
[18:17:04.262]      <control if="!isSWJ" while="" timeout="0" info="">
[18:17:04.262]        // if-block "!isSWJ"
[18:17:04.262]          // =>  FALSE
[18:17:04.262]        // skip if-block "!isSWJ"
[18:17:04.263]      </control>
[18:17:04.263]      <block atomic="false" info="">
[18:17:04.263]        ReadDP(0x0);
[18:17:04.264]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:17:04.264]      </block>
[18:17:04.264]      // end if-block "protType == 2"
[18:17:04.264]    </control>
[18:17:04.264]  </sequence>
[18:17:04.264]  
[18:17:04.268]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:17:04.268]  
[18:17:04.268]  <debugvars>
[18:17:04.268]    // Pre-defined
[18:17:04.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:04.268]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:04.268]    __dp=0x00000000
[18:17:04.268]    __ap=0x00000000
[18:17:04.268]    __traceout=0x00000000      (Trace Disabled)
[18:17:04.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:04.268]    __FlashAddr=0x00000000
[18:17:04.268]    __FlashLen=0x00000000
[18:17:04.268]    __FlashArg=0x00000000
[18:17:04.268]    __FlashOp=0x00000000
[18:17:04.268]    __Result=0x00000000
[18:17:04.268]  </debugvars>
[18:17:04.268]  
[18:17:04.268]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:17:04.271]    <block atomic="false" info="">
[18:17:04.271]      __var SW_DP_ABORT       = 0x0;
[18:17:04.271]        // -> [SW_DP_ABORT <= 0x00000000]
[18:17:04.271]      __var DP_CTRL_STAT      = 0x4;
[18:17:04.271]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:17:04.271]      __var DP_SELECT         = 0x8;
[18:17:04.271]        // -> [DP_SELECT <= 0x00000008]
[18:17:04.271]      __var powered_down      = 0;
[18:17:04.271]        // -> [powered_down <= 0x00000000]
[18:17:04.272]      WriteDP(DP_SELECT, 0x00000000);
[18:17:04.272]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:17:04.272]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:17:04.275]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:17:04.275]        // -> [powered_down <= 0x00000001]
[18:17:04.275]    </block>
[18:17:04.275]    <control if="powered_down" while="" timeout="0" info="">
[18:17:04.275]      // if-block "powered_down"
[18:17:04.275]        // =>  TRUE
[18:17:04.276]      <block atomic="false" info="">
[18:17:04.276]        Message(0, "Debug/System power-up request sent");
[18:17:04.278]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:17:04.279]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:17:04.279]      </block>
[18:17:04.279]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:17:04.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:17:04.279]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:17:04.279]        // while-condition  =>  FALSE
[18:17:04.279]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:17:04.279]      </control>
[18:17:04.279]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:17:04.283]        // if-block "(__protocol & 0xFFFF) == 1"
[18:17:04.283]          // =>  FALSE
[18:17:04.283]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:17:04.283]      </control>
[18:17:04.283]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:17:04.283]        // if-block "(__protocol & 0xFFFF) == 2"
[18:17:04.283]          // =>  TRUE
[18:17:04.283]        <block atomic="false" info="">
[18:17:04.283]          Message(0, "executing SWD power up");
[18:17:04.283]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:17:04.287]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:17:04.287]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:17:04.288]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:17:04.288]        </block>
[18:17:04.288]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:17:04.288]      </control>
[18:17:04.290]      // end if-block "powered_down"
[18:17:04.290]    </control>
[18:17:04.290]    <block atomic="false" info="">
[18:17:04.290]      __var DEBUG_PORT_VAL    = 0;
[18:17:04.290]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:17:04.290]      __var ACCESS_POINT_VAL  = 0;
[18:17:04.290]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:17:04.290]      __ap = 1; 
[18:17:04.290]        // -> [__ap <= 0x00000001]
[18:17:04.290]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:17:04.293]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:17:04.293]      __ap = 4;
[18:17:04.296]        // -> [__ap <= 0x00000004]
[18:17:04.296]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:17:04.298]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:17:04.298]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:17:04.298]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:17:04.300]    </block>
[18:17:04.300]    <block atomic="false" info="">
[18:17:04.300]      __var nReset = 0x80;
[18:17:04.300]        // -> [nReset <= 0x00000080]
[18:17:04.300]      __var canReadPins = 0;
[18:17:04.300]        // -> [canReadPins <= 0x00000000]
[18:17:04.300]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:17:04.304]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:17:04.304]        // -> [canReadPins <= 0x00000001]
[18:17:04.308]    </block>
[18:17:04.308]    <control if="" while="1" timeout="200" info="">
[18:17:04.308]      // while "1"  (timeout="200")
[18:17:04.308]      // while-condition  =>  TRUE
[18:17:04.308]      // while "1"  (timeout="200")
[18:17:04.308]      // while-condition  =>  TRUE
[18:17:04.308]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.309]      // while "1"  (timeout="200")
[18:17:04.309]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.311]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.311]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.311]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.311]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.311]      // while-condition  =>  TRUE
[18:17:04.311]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.312]      // while-condition  =>  TRUE
[18:17:04.312]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.314]      // while-condition  =>  TRUE
[18:17:04.314]      // while "1"  (timeout="200")
[18:17:04.316]      // while-condition  =>  TRUE
[18:17:04.316]      // while "1"  (timeout="200")
[18:17:04.316]      // while  =>  TIMEOUT
[18:17:04.316]      // end while "1"
[18:17:04.316]    </control>
[18:17:04.316]    <control if="canReadPins" while="" timeout="0" info="">
[18:17:04.316]      // if-block "canReadPins"
[18:17:04.316]        // =>  TRUE
[18:17:04.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:17:04.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:17:04.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:17:04.322]        // while-condition  =>  FALSE
[18:17:04.322]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:17:04.322]      </control>
[18:17:04.322]      // end if-block "canReadPins"
[18:17:04.322]    </control>
[18:17:04.322]    <control if="!canReadPins" while="" timeout="0" info="">
[18:17:04.322]      // if-block "!canReadPins"
[18:17:04.323]        // =>  FALSE
[18:17:04.323]      // skip if-block "!canReadPins"
[18:17:04.323]    </control>
[18:17:04.323]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:17:04.323]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:17:04.323]        // =>  TRUE
[18:17:04.323]      <block atomic="false" info="">
[18:17:04.323]        WriteAP(0x00, 0x190008);
[18:17:04.323]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:17:04.323]        WriteAP(0xF0, 0x01);
[18:17:04.328]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:17:04.328]      </block>
[18:17:04.328]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:17:04.328]    </control>
[18:17:04.328]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:17:04.330]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:17:04.330]        // =>  FALSE
[18:17:04.330]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:17:04.330]    </control>
[18:17:04.330]    <block atomic="false" info="">
[18:17:04.330]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:17:04.332]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:17:04.332]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:17:04.332]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:17:04.335]      __ap = 0; //lets make sure we reset the access point selection
[18:17:04.335]        // -> [__ap <= 0x00000000]
[18:17:04.335]    </block>
[18:17:04.335]  </sequence>
[18:17:04.335]  
[18:17:04.358]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:17:04.358]  
[18:17:04.360]  <debugvars>
[18:17:04.360]    // Pre-defined
[18:17:04.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:04.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:04.360]    __dp=0x00000000
[18:17:04.360]    __ap=0x00000000
[18:17:04.360]    __traceout=0x00000000      (Trace Disabled)
[18:17:04.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:04.360]    __FlashAddr=0x00000000
[18:17:04.360]    __FlashLen=0x00000000
[18:17:04.360]    __FlashArg=0x00000000
[18:17:04.360]    __FlashOp=0x00000000
[18:17:04.360]    __Result=0x00000000
[18:17:04.360]  </debugvars>
[18:17:04.361]  
[18:17:04.361]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:17:04.361]    <block atomic="false" info="">
[18:17:04.361]      __var deviceID = 0;
[18:17:04.361]        // -> [deviceID <= 0x00000000]
[18:17:04.361]      __var version = 0;
[18:17:04.361]        // -> [version <= 0x00000000]
[18:17:04.361]      __var partNum = 0;
[18:17:04.361]        // -> [partNum <= 0x00000000]
[18:17:04.361]      __var manuf = 0;
[18:17:04.361]        // -> [manuf <= 0x00000000]
[18:17:04.361]      __var isMSPM0G1X0X_G3X0X = 0;
[18:17:04.361]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:17:04.362]      __var isProduction = 0;
[18:17:04.362]        // -> [isProduction <= 0x00000000]
[18:17:04.362]      __var continueId = 0;
[18:17:04.362]        // -> [continueId <= 0x00000000]
[18:17:04.362]      deviceID =   Read32(0x41C40004);
[18:17:04.372]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:17:04.372]        // -> [deviceID <= 0x2BB8802F]
[18:17:04.372]      version = deviceID >> 28;
[18:17:04.372]        // -> [version <= 0x00000002]
[18:17:04.372]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:17:04.372]        // -> [partNum <= 0x0000BB88]
[18:17:04.372]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:17:04.374]        // -> [manuf <= 0x00000017]
[18:17:04.374]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:17:04.374]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:17:04.374]      isProduction = (version > 0);
[18:17:04.374]        // -> [isProduction <= 0x00000001]
[18:17:04.374]    </block>
[18:17:04.374]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:17:04.374]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:17:04.374]        // =>  FALSE
[18:17:04.374]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:17:04.374]    </control>
[18:17:04.374]    <control if="continueId == 4" while="" timeout="0" info="">
[18:17:04.374]      // if-block "continueId == 4"
[18:17:04.374]        // =>  FALSE
[18:17:04.374]      // skip if-block "continueId == 4"
[18:17:04.374]    </control>
[18:17:04.374]    <control if="!isProduction" while="" timeout="0" info="">
[18:17:04.374]      // if-block "!isProduction"
[18:17:04.374]        // =>  FALSE
[18:17:04.375]      // skip if-block "!isProduction"
[18:17:04.375]    </control>
[18:17:04.375]  </sequence>
[18:17:04.375]  
[18:17:26.156]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:17:26.156]  
[18:17:26.165]  <debugvars>
[18:17:26.165]    // Pre-defined
[18:17:26.165]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:26.165]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:26.165]    __dp=0x00000000
[18:17:26.165]    __ap=0x00000000
[18:17:26.165]    __traceout=0x00000000      (Trace Disabled)
[18:17:26.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:26.165]    __FlashAddr=0x00000000
[18:17:26.165]    __FlashLen=0x00000000
[18:17:26.165]    __FlashArg=0x00000000
[18:17:26.165]    __FlashOp=0x00000000
[18:17:26.165]    __Result=0x00000000
[18:17:26.165]  </debugvars>
[18:17:26.165]  
[18:17:26.168]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:17:26.168]    <block atomic="false" info="">
[18:17:26.168]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:17:26.168]        // -> [isSWJ <= 0x00000001]
[18:17:26.168]      __var hasDormant = __protocol & 0x00020000;
[18:17:26.168]        // -> [hasDormant <= 0x00000000]
[18:17:26.168]      __var protType   = __protocol & 0x0000FFFF;
[18:17:26.168]        // -> [protType <= 0x00000002]
[18:17:26.168]    </block>
[18:17:26.168]    <control if="protType == 1" while="" timeout="0" info="">
[18:17:26.168]      // if-block "protType == 1"
[18:17:26.168]        // =>  FALSE
[18:17:26.168]      // skip if-block "protType == 1"
[18:17:26.168]    </control>
[18:17:26.168]    <control if="protType == 2" while="" timeout="0" info="">
[18:17:26.168]      // if-block "protType == 2"
[18:17:26.168]        // =>  TRUE
[18:17:26.168]      <control if="isSWJ" while="" timeout="0" info="">
[18:17:26.168]        // if-block "isSWJ"
[18:17:26.168]          // =>  TRUE
[18:17:26.168]        <control if="hasDormant" while="" timeout="0" info="">
[18:17:26.168]          // if-block "hasDormant"
[18:17:26.168]            // =>  FALSE
[18:17:26.168]          // skip if-block "hasDormant"
[18:17:26.168]        </control>
[18:17:26.168]        <control if="!hasDormant" while="" timeout="0" info="">
[18:17:26.168]          // if-block "!hasDormant"
[18:17:26.168]            // =>  TRUE
[18:17:26.168]          <block atomic="false" info="">
[18:17:26.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:17:26.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:26.172]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:17:26.173]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:17:26.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:17:26.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:26.173]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:17:26.176]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:17:26.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:17:26.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:17:26.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:17:26.176]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:17:26.176]          </block>
[18:17:26.176]          // end if-block "!hasDormant"
[18:17:26.176]        </control>
[18:17:26.176]        // end if-block "isSWJ"
[18:17:26.176]      </control>
[18:17:26.180]      <control if="!isSWJ" while="" timeout="0" info="">
[18:17:26.180]        // if-block "!isSWJ"
[18:17:26.180]          // =>  FALSE
[18:17:26.180]        // skip if-block "!isSWJ"
[18:17:26.180]      </control>
[18:17:26.180]      <block atomic="false" info="">
[18:17:26.180]        ReadDP(0x0);
[18:17:26.180]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:17:26.180]      </block>
[18:17:26.180]      // end if-block "protType == 2"
[18:17:26.184]    </control>
[18:17:26.184]  </sequence>
[18:17:26.184]  
[18:17:26.185]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:17:26.185]  
[18:17:26.185]  <debugvars>
[18:17:26.185]    // Pre-defined
[18:17:26.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:26.185]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:26.185]    __dp=0x00000000
[18:17:26.185]    __ap=0x00000000
[18:17:26.185]    __traceout=0x00000000      (Trace Disabled)
[18:17:26.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:26.185]    __FlashAddr=0x00000000
[18:17:26.185]    __FlashLen=0x00000000
[18:17:26.185]    __FlashArg=0x00000000
[18:17:26.185]    __FlashOp=0x00000000
[18:17:26.185]    __Result=0x00000000
[18:17:26.185]  </debugvars>
[18:17:26.185]  
[18:17:26.185]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:17:26.188]    <block atomic="false" info="">
[18:17:26.188]      __var SW_DP_ABORT       = 0x0;
[18:17:26.188]        // -> [SW_DP_ABORT <= 0x00000000]
[18:17:26.188]      __var DP_CTRL_STAT      = 0x4;
[18:17:26.188]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:17:26.188]      __var DP_SELECT         = 0x8;
[18:17:26.188]        // -> [DP_SELECT <= 0x00000008]
[18:17:26.188]      __var powered_down      = 0;
[18:17:26.188]        // -> [powered_down <= 0x00000000]
[18:17:26.188]      WriteDP(DP_SELECT, 0x00000000);
[18:17:26.193]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:17:26.193]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:17:26.193]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:17:26.193]        // -> [powered_down <= 0x00000001]
[18:17:26.193]    </block>
[18:17:26.193]    <control if="powered_down" while="" timeout="0" info="">
[18:17:26.193]      // if-block "powered_down"
[18:17:26.193]        // =>  TRUE
[18:17:26.193]      <block atomic="false" info="">
[18:17:26.193]        Message(0, "Debug/System power-up request sent");
[18:17:26.196]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:17:26.200]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:17:26.200]      </block>
[18:17:26.200]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:17:26.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:17:26.200]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:17:26.200]        // while-condition  =>  FALSE
[18:17:26.200]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:17:26.200]      </control>
[18:17:26.200]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:17:26.200]        // if-block "(__protocol & 0xFFFF) == 1"
[18:17:26.200]          // =>  FALSE
[18:17:26.200]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:17:26.200]      </control>
[18:17:26.203]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:17:26.203]        // if-block "(__protocol & 0xFFFF) == 2"
[18:17:26.203]          // =>  TRUE
[18:17:26.203]        <block atomic="false" info="">
[18:17:26.203]          Message(0, "executing SWD power up");
[18:17:26.205]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:17:26.207]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:17:26.207]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:17:26.208]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:17:26.209]        </block>
[18:17:26.209]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:17:26.209]      </control>
[18:17:26.209]      // end if-block "powered_down"
[18:17:26.209]    </control>
[18:17:26.209]    <block atomic="false" info="">
[18:17:26.209]      __var DEBUG_PORT_VAL    = 0;
[18:17:26.210]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:17:26.210]      __var ACCESS_POINT_VAL  = 0;
[18:17:26.210]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:17:26.210]      __ap = 1; 
[18:17:26.210]        // -> [__ap <= 0x00000001]
[18:17:26.210]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:17:26.213]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:17:26.215]      __ap = 4;
[18:17:26.215]        // -> [__ap <= 0x00000004]
[18:17:26.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:17:26.217]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:17:26.217]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:17:26.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:17:26.218]    </block>
[18:17:26.218]    <block atomic="false" info="">
[18:17:26.218]      __var nReset = 0x80;
[18:17:26.218]        // -> [nReset <= 0x00000080]
[18:17:26.218]      __var canReadPins = 0;
[18:17:26.218]        // -> [canReadPins <= 0x00000000]
[18:17:26.218]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:17:26.222]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:17:26.222]        // -> [canReadPins <= 0x00000001]
[18:17:26.222]    </block>
[18:17:26.222]    <control if="" while="1" timeout="200" info="">
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.222]      // while-condition  =>  TRUE
[18:17:26.222]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.225]      // while "1"  (timeout="200")
[18:17:26.225]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.227]      // while-condition  =>  TRUE
[18:17:26.227]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.230]      // while-condition  =>  TRUE
[18:17:26.230]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.234]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.234]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.234]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.234]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.234]      // while "1"  (timeout="200")
[18:17:26.234]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.235]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.235]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.235]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.235]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.235]      // while-condition  =>  TRUE
[18:17:26.235]      // while "1"  (timeout="200")
[18:17:26.236]      // while-condition  =>  TRUE
[18:17:26.236]      // while "1"  (timeout="200")
[18:17:26.236]      // while-condition  =>  TRUE
[18:17:26.236]      // while "1"  (timeout="200")
[18:17:26.236]      // while-condition  =>  TRUE
[18:17:26.236]      // while "1"  (timeout="200")
[18:17:26.236]      // while-condition  =>  TRUE
[18:17:26.236]      // while "1"  (timeout="200")
[18:17:26.236]      // while-condition  =>  TRUE
[18:17:26.237]      // while "1"  (timeout="200")
[18:17:26.237]      // while-condition  =>  TRUE
[18:17:26.237]      // while "1"  (timeout="200")
[18:17:26.237]      // while-condition  =>  TRUE
[18:17:26.237]      // while "1"  (timeout="200")
[18:17:26.237]      // while-condition  =>  TRUE
[18:17:26.237]      // while "1"  (timeout="200")
[18:17:26.237]      // while-condition  =>  TRUE
[18:17:26.237]      // while "1"  (timeout="200")
[18:17:26.237]      // while-condition  =>  TRUE
[18:17:26.238]      // while "1"  (timeout="200")
[18:17:26.238]      // while  =>  TIMEOUT
[18:17:26.238]      // end while "1"
[18:17:26.238]    </control>
[18:17:26.238]    <control if="canReadPins" while="" timeout="0" info="">
[18:17:26.238]      // if-block "canReadPins"
[18:17:26.238]        // =>  TRUE
[18:17:26.238]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:17:26.238]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:17:26.239]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:17:26.239]        // while-condition  =>  FALSE
[18:17:26.239]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:17:26.239]      </control>
[18:17:26.239]      // end if-block "canReadPins"
[18:17:26.239]    </control>
[18:17:26.239]    <control if="!canReadPins" while="" timeout="0" info="">
[18:17:26.239]      // if-block "!canReadPins"
[18:17:26.239]        // =>  FALSE
[18:17:26.239]      // skip if-block "!canReadPins"
[18:17:26.239]    </control>
[18:17:26.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:17:26.242]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:17:26.242]        // =>  TRUE
[18:17:26.242]      <block atomic="false" info="">
[18:17:26.242]        WriteAP(0x00, 0x190008);
[18:17:26.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:17:26.243]        WriteAP(0xF0, 0x01);
[18:17:26.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:17:26.246]      </block>
[18:17:26.246]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:17:26.246]    </control>
[18:17:26.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:17:26.246]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:17:26.246]        // =>  FALSE
[18:17:26.248]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:17:26.248]    </control>
[18:17:26.248]    <block atomic="false" info="">
[18:17:26.248]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:17:26.251]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:17:26.251]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:17:26.251]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:17:26.252]      __ap = 0; //lets make sure we reset the access point selection
[18:17:26.252]        // -> [__ap <= 0x00000000]
[18:17:26.254]    </block>
[18:17:26.254]  </sequence>
[18:17:26.254]  
[18:17:26.273]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:17:26.273]  
[18:17:26.273]  <debugvars>
[18:17:26.273]    // Pre-defined
[18:17:26.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:17:26.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:17:26.273]    __dp=0x00000000
[18:17:26.273]    __ap=0x00000000
[18:17:26.273]    __traceout=0x00000000      (Trace Disabled)
[18:17:26.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:17:26.273]    __FlashAddr=0x00000000
[18:17:26.273]    __FlashLen=0x00000000
[18:17:26.273]    __FlashArg=0x00000000
[18:17:26.273]    __FlashOp=0x00000000
[18:17:26.273]    __Result=0x00000000
[18:17:26.273]  </debugvars>
[18:17:26.276]  
[18:17:26.276]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:17:26.276]    <block atomic="false" info="">
[18:17:26.276]      __var deviceID = 0;
[18:17:26.276]        // -> [deviceID <= 0x00000000]
[18:17:26.276]      __var version = 0;
[18:17:26.276]        // -> [version <= 0x00000000]
[18:17:26.276]      __var partNum = 0;
[18:17:26.276]        // -> [partNum <= 0x00000000]
[18:17:26.276]      __var manuf = 0;
[18:17:26.276]        // -> [manuf <= 0x00000000]
[18:17:26.276]      __var isMSPM0G1X0X_G3X0X = 0;
[18:17:26.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:17:26.276]      __var isProduction = 0;
[18:17:26.276]        // -> [isProduction <= 0x00000000]
[18:17:26.276]      __var continueId = 0;
[18:17:26.276]        // -> [continueId <= 0x00000000]
[18:17:26.276]      deviceID =   Read32(0x41C40004);
[18:17:26.278]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:17:26.278]        // -> [deviceID <= 0x2BB8802F]
[18:17:26.282]      version = deviceID >> 28;
[18:17:26.282]        // -> [version <= 0x00000002]
[18:17:26.282]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:17:26.283]        // -> [partNum <= 0x0000BB88]
[18:17:26.283]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:17:26.283]        // -> [manuf <= 0x00000017]
[18:17:26.283]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:17:26.283]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:17:26.283]      isProduction = (version > 0);
[18:17:26.283]        // -> [isProduction <= 0x00000001]
[18:17:26.283]    </block>
[18:17:26.283]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:17:26.283]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:17:26.284]        // =>  FALSE
[18:17:26.284]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:17:26.284]    </control>
[18:17:26.284]    <control if="continueId == 4" while="" timeout="0" info="">
[18:17:26.284]      // if-block "continueId == 4"
[18:17:26.284]        // =>  FALSE
[18:17:26.284]      // skip if-block "continueId == 4"
[18:17:26.284]    </control>
[18:17:26.284]    <control if="!isProduction" while="" timeout="0" info="">
[18:17:26.284]      // if-block "!isProduction"
[18:17:26.284]        // =>  FALSE
[18:17:26.284]      // skip if-block "!isProduction"
[18:17:26.284]    </control>
[18:17:26.284]  </sequence>
[18:17:26.284]  
[18:18:17.376]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:18:17.376]  
[18:18:17.379]  <debugvars>
[18:18:17.379]    // Pre-defined
[18:18:17.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:17.379]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:17.379]    __dp=0x00000000
[18:18:17.379]    __ap=0x00000000
[18:18:17.379]    __traceout=0x00000000      (Trace Disabled)
[18:18:17.379]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:17.379]    __FlashAddr=0x00000000
[18:18:17.379]    __FlashLen=0x00000000
[18:18:17.379]    __FlashArg=0x00000000
[18:18:17.379]    __FlashOp=0x00000000
[18:18:17.379]    __Result=0x00000000
[18:18:17.379]  </debugvars>
[18:18:17.379]  
[18:18:17.379]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:18:17.379]    <block atomic="false" info="">
[18:18:17.379]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:18:17.379]        // -> [isSWJ <= 0x00000001]
[18:18:17.379]      __var hasDormant = __protocol & 0x00020000;
[18:18:17.379]        // -> [hasDormant <= 0x00000000]
[18:18:17.379]      __var protType   = __protocol & 0x0000FFFF;
[18:18:17.379]        // -> [protType <= 0x00000002]
[18:18:17.379]    </block>
[18:18:17.379]    <control if="protType == 1" while="" timeout="0" info="">
[18:18:17.379]      // if-block "protType == 1"
[18:18:17.379]        // =>  FALSE
[18:18:17.379]      // skip if-block "protType == 1"
[18:18:17.379]    </control>
[18:18:17.379]    <control if="protType == 2" while="" timeout="0" info="">
[18:18:17.379]      // if-block "protType == 2"
[18:18:17.379]        // =>  TRUE
[18:18:17.379]      <control if="isSWJ" while="" timeout="0" info="">
[18:18:17.383]        // if-block "isSWJ"
[18:18:17.383]          // =>  TRUE
[18:18:17.383]        <control if="hasDormant" while="" timeout="0" info="">
[18:18:17.383]          // if-block "hasDormant"
[18:18:17.383]            // =>  FALSE
[18:18:17.383]          // skip if-block "hasDormant"
[18:18:17.383]        </control>
[18:18:17.383]        <control if="!hasDormant" while="" timeout="0" info="">
[18:18:17.383]          // if-block "!hasDormant"
[18:18:17.383]            // =>  TRUE
[18:18:17.383]          <block atomic="false" info="">
[18:18:17.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:18:17.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:17.383]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:18:17.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:18:17.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:18:17.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:17.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:18:17.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:18:17.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:18:17.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:18:17.407]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:18:17.415]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:18:17.415]          </block>
[18:18:17.419]          // end if-block "!hasDormant"
[18:18:17.419]        </control>
[18:18:17.420]        // end if-block "isSWJ"
[18:18:17.420]      </control>
[18:18:17.420]      <control if="!isSWJ" while="" timeout="0" info="">
[18:18:17.420]        // if-block "!isSWJ"
[18:18:17.420]          // =>  FALSE
[18:18:17.420]        // skip if-block "!isSWJ"
[18:18:17.420]      </control>
[18:18:17.420]      <block atomic="false" info="">
[18:18:17.420]        ReadDP(0x0);
[18:18:17.430]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:18:17.430]      </block>
[18:18:17.432]      // end if-block "protType == 2"
[18:18:17.432]    </control>
[18:18:17.432]  </sequence>
[18:18:17.432]  
[18:18:17.436]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:18:17.436]  
[18:18:17.436]  <debugvars>
[18:18:17.436]    // Pre-defined
[18:18:17.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:17.436]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:17.436]    __dp=0x00000000
[18:18:17.436]    __ap=0x00000000
[18:18:17.436]    __traceout=0x00000000      (Trace Disabled)
[18:18:17.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:17.436]    __FlashAddr=0x00000000
[18:18:17.436]    __FlashLen=0x00000000
[18:18:17.436]    __FlashArg=0x00000000
[18:18:17.436]    __FlashOp=0x00000000
[18:18:17.436]    __Result=0x00000000
[18:18:17.436]  </debugvars>
[18:18:17.436]  
[18:18:17.436]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:18:17.436]    <block atomic="false" info="">
[18:18:17.436]      __var SW_DP_ABORT       = 0x0;
[18:18:17.436]        // -> [SW_DP_ABORT <= 0x00000000]
[18:18:17.436]      __var DP_CTRL_STAT      = 0x4;
[18:18:17.436]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:18:17.436]      __var DP_SELECT         = 0x8;
[18:18:17.436]        // -> [DP_SELECT <= 0x00000008]
[18:18:17.436]      __var powered_down      = 0;
[18:18:17.436]        // -> [powered_down <= 0x00000000]
[18:18:17.436]      WriteDP(DP_SELECT, 0x00000000);
[18:18:17.445]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:18:17.445]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:18:17.448]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:18:17.448]        // -> [powered_down <= 0x00000001]
[18:18:17.448]    </block>
[18:18:17.448]    <control if="powered_down" while="" timeout="0" info="">
[18:18:17.448]      // if-block "powered_down"
[18:18:17.448]        // =>  TRUE
[18:18:17.448]      <block atomic="false" info="">
[18:18:17.448]        Message(0, "Debug/System power-up request sent");
[18:18:17.452]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:18:17.456]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:18:17.456]      </block>
[18:18:17.460]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:18:17.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:18:17.460]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:18:17.460]        // while-condition  =>  FALSE
[18:18:17.460]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:18:17.460]      </control>
[18:18:17.460]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:18:17.460]        // if-block "(__protocol & 0xFFFF) == 1"
[18:18:17.460]          // =>  FALSE
[18:18:17.460]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:18:17.460]      </control>
[18:18:17.460]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:18:17.460]        // if-block "(__protocol & 0xFFFF) == 2"
[18:18:17.460]          // =>  TRUE
[18:18:17.460]        <block atomic="false" info="">
[18:18:17.464]          Message(0, "executing SWD power up");
[18:18:17.464]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:18:17.467]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:18:17.467]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:18:17.469]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:18:17.469]        </block>
[18:18:17.469]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:18:17.469]      </control>
[18:18:17.469]      // end if-block "powered_down"
[18:18:17.469]    </control>
[18:18:17.469]    <block atomic="false" info="">
[18:18:17.469]      __var DEBUG_PORT_VAL    = 0;
[18:18:17.469]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:18:17.469]      __var ACCESS_POINT_VAL  = 0;
[18:18:17.469]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:18:17.469]      __ap = 1; 
[18:18:17.469]        // -> [__ap <= 0x00000001]
[18:18:17.469]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:18:17.481]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:18:17.481]      __ap = 4;
[18:18:17.481]        // -> [__ap <= 0x00000004]
[18:18:17.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:18:17.481]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:18:17.481]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:18:17.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:18:17.485]    </block>
[18:18:17.485]    <block atomic="false" info="">
[18:18:17.485]      __var nReset = 0x80;
[18:18:17.485]        // -> [nReset <= 0x00000080]
[18:18:17.485]      __var canReadPins = 0;
[18:18:17.485]        // -> [canReadPins <= 0x00000000]
[18:18:17.485]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:18:17.510]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:18:17.510]        // -> [canReadPins <= 0x00000001]
[18:18:17.510]    </block>
[18:18:17.510]    <control if="" while="1" timeout="200" info="">
[18:18:17.510]      // while "1"  (timeout="200")
[18:18:17.510]      // while-condition  =>  TRUE
[18:18:17.510]      // while "1"  (timeout="200")
[18:18:17.510]      // while-condition  =>  TRUE
[18:18:17.513]      // while "1"  (timeout="200")
[18:18:17.513]      // while-condition  =>  TRUE
[18:18:17.513]      // while "1"  (timeout="200")
[18:18:17.513]      // while-condition  =>  TRUE
[18:18:17.513]      // while "1"  (timeout="200")
[18:18:17.513]      // while-condition  =>  TRUE
[18:18:17.513]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.514]      // while-condition  =>  TRUE
[18:18:17.514]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.515]      // while "1"  (timeout="200")
[18:18:17.515]      // while-condition  =>  TRUE
[18:18:17.516]      // while "1"  (timeout="200")
[18:18:17.516]      // while-condition  =>  TRUE
[18:18:17.516]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.517]      // while "1"  (timeout="200")
[18:18:17.517]      // while-condition  =>  TRUE
[18:18:17.519]      // while "1"  (timeout="200")
[18:18:17.519]      // while  =>  TIMEOUT
[18:18:17.519]      // end while "1"
[18:18:17.519]    </control>
[18:18:17.519]    <control if="canReadPins" while="" timeout="0" info="">
[18:18:17.519]      // if-block "canReadPins"
[18:18:17.519]        // =>  TRUE
[18:18:17.519]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:18:17.519]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:18:17.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:18:17.522]        // while-condition  =>  FALSE
[18:18:17.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:18:17.522]      </control>
[18:18:17.522]      // end if-block "canReadPins"
[18:18:17.522]    </control>
[18:18:17.522]    <control if="!canReadPins" while="" timeout="0" info="">
[18:18:17.524]      // if-block "!canReadPins"
[18:18:17.524]        // =>  FALSE
[18:18:17.524]      // skip if-block "!canReadPins"
[18:18:17.524]    </control>
[18:18:17.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:18:17.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:18:17.524]        // =>  TRUE
[18:18:17.524]      <block atomic="false" info="">
[18:18:17.524]        WriteAP(0x00, 0x190008);
[18:18:17.527]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:18:17.527]        WriteAP(0xF0, 0x01);
[18:18:17.534]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:18:17.535]      </block>
[18:18:17.535]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:18:17.535]    </control>
[18:18:17.535]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:18:17.535]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:18:17.535]        // =>  FALSE
[18:18:17.535]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:18:17.535]    </control>
[18:18:17.535]    <block atomic="false" info="">
[18:18:17.535]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:18:17.541]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:18:17.541]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:18:17.541]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:18:17.543]      __ap = 0; //lets make sure we reset the access point selection
[18:18:17.543]        // -> [__ap <= 0x00000000]
[18:18:17.543]    </block>
[18:18:17.543]  </sequence>
[18:18:17.543]  
[18:18:17.615]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:18:17.615]  
[18:18:17.615]  <debugvars>
[18:18:17.615]    // Pre-defined
[18:18:17.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:18:17.615]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:18:17.615]    __dp=0x00000000
[18:18:17.615]    __ap=0x00000000
[18:18:17.615]    __traceout=0x00000000      (Trace Disabled)
[18:18:17.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:18:17.617]    __FlashAddr=0x00000000
[18:18:17.617]    __FlashLen=0x00000000
[18:18:17.617]    __FlashArg=0x00000000
[18:18:17.617]    __FlashOp=0x00000000
[18:18:17.617]    __Result=0x00000000
[18:18:17.617]  </debugvars>
[18:18:17.617]  
[18:18:17.618]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:18:17.618]    <block atomic="false" info="">
[18:18:17.618]      __var deviceID = 0;
[18:18:17.618]        // -> [deviceID <= 0x00000000]
[18:18:17.618]      __var version = 0;
[18:18:17.618]        // -> [version <= 0x00000000]
[18:18:17.618]      __var partNum = 0;
[18:18:17.618]        // -> [partNum <= 0x00000000]
[18:18:17.618]      __var manuf = 0;
[18:18:17.618]        // -> [manuf <= 0x00000000]
[18:18:17.619]      __var isMSPM0G1X0X_G3X0X = 0;
[18:18:17.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:18:17.620]      __var isProduction = 0;
[18:18:17.620]        // -> [isProduction <= 0x00000000]
[18:18:17.620]      __var continueId = 0;
[18:18:17.620]        // -> [continueId <= 0x00000000]
[18:18:17.620]      deviceID =   Read32(0x41C40004);
[18:18:17.630]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:18:17.630]        // -> [deviceID <= 0x2BB8802F]
[18:18:17.630]      version = deviceID >> 28;
[18:18:17.630]        // -> [version <= 0x00000002]
[18:18:17.630]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:18:17.630]        // -> [partNum <= 0x0000BB88]
[18:18:17.630]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:18:17.630]        // -> [manuf <= 0x00000017]
[18:18:17.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:18:17.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:18:17.632]      isProduction = (version > 0);
[18:18:17.632]        // -> [isProduction <= 0x00000001]
[18:18:17.632]    </block>
[18:18:17.632]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:18:17.632]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:18:17.632]        // =>  FALSE
[18:18:17.632]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:18:17.632]    </control>
[18:18:17.632]    <control if="continueId == 4" while="" timeout="0" info="">
[18:18:17.632]      // if-block "continueId == 4"
[18:18:17.632]        // =>  FALSE
[18:18:17.632]      // skip if-block "continueId == 4"
[18:18:17.632]    </control>
[18:18:17.632]    <control if="!isProduction" while="" timeout="0" info="">
[18:18:17.632]      // if-block "!isProduction"
[18:18:17.632]        // =>  FALSE
[18:18:17.632]      // skip if-block "!isProduction"
[18:18:17.632]    </control>
[18:18:17.632]  </sequence>
[18:18:17.632]  
[18:21:19.238]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:21:19.238]  
[18:21:19.238]  <debugvars>
[18:21:19.238]    // Pre-defined
[18:21:19.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:19.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:19.239]    __dp=0x00000000
[18:21:19.239]    __ap=0x00000000
[18:21:19.239]    __traceout=0x00000000      (Trace Disabled)
[18:21:19.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:19.239]    __FlashAddr=0x00000000
[18:21:19.239]    __FlashLen=0x00000000
[18:21:19.239]    __FlashArg=0x00000000
[18:21:19.239]    __FlashOp=0x00000000
[18:21:19.240]    __Result=0x00000000
[18:21:19.240]  </debugvars>
[18:21:19.240]  
[18:21:19.240]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:21:19.240]    <block atomic="false" info="">
[18:21:19.240]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:21:19.240]        // -> [isSWJ <= 0x00000001]
[18:21:19.240]      __var hasDormant = __protocol & 0x00020000;
[18:21:19.240]        // -> [hasDormant <= 0x00000000]
[18:21:19.240]      __var protType   = __protocol & 0x0000FFFF;
[18:21:19.241]        // -> [protType <= 0x00000002]
[18:21:19.241]    </block>
[18:21:19.241]    <control if="protType == 1" while="" timeout="0" info="">
[18:21:19.241]      // if-block "protType == 1"
[18:21:19.241]        // =>  FALSE
[18:21:19.241]      // skip if-block "protType == 1"
[18:21:19.241]    </control>
[18:21:19.241]    <control if="protType == 2" while="" timeout="0" info="">
[18:21:19.242]      // if-block "protType == 2"
[18:21:19.242]        // =>  TRUE
[18:21:19.242]      <control if="isSWJ" while="" timeout="0" info="">
[18:21:19.242]        // if-block "isSWJ"
[18:21:19.242]          // =>  TRUE
[18:21:19.242]        <control if="hasDormant" while="" timeout="0" info="">
[18:21:19.242]          // if-block "hasDormant"
[18:21:19.242]            // =>  FALSE
[18:21:19.243]          // skip if-block "hasDormant"
[18:21:19.243]        </control>
[18:21:19.243]        <control if="!hasDormant" while="" timeout="0" info="">
[18:21:19.243]          // if-block "!hasDormant"
[18:21:19.243]            // =>  TRUE
[18:21:19.243]          <block atomic="false" info="">
[18:21:19.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:21:19.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:19.245]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:21:19.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:21:19.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:21:19.250]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:19.250]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:21:19.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:21:19.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:21:19.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:19.252]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:21:19.254]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:21:19.254]          </block>
[18:21:19.254]          // end if-block "!hasDormant"
[18:21:19.254]        </control>
[18:21:19.255]        // end if-block "isSWJ"
[18:21:19.255]      </control>
[18:21:19.255]      <control if="!isSWJ" while="" timeout="0" info="">
[18:21:19.255]        // if-block "!isSWJ"
[18:21:19.255]          // =>  FALSE
[18:21:19.255]        // skip if-block "!isSWJ"
[18:21:19.255]      </control>
[18:21:19.255]      <block atomic="false" info="">
[18:21:19.255]        ReadDP(0x0);
[18:21:19.257]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:21:19.257]      </block>
[18:21:19.257]      // end if-block "protType == 2"
[18:21:19.257]    </control>
[18:21:19.257]  </sequence>
[18:21:19.257]  
[18:21:19.260]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:21:19.260]  
[18:21:19.260]  <debugvars>
[18:21:19.260]    // Pre-defined
[18:21:19.260]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:19.260]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:19.260]    __dp=0x00000000
[18:21:19.260]    __ap=0x00000000
[18:21:19.260]    __traceout=0x00000000      (Trace Disabled)
[18:21:19.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:19.260]    __FlashAddr=0x00000000
[18:21:19.260]    __FlashLen=0x00000000
[18:21:19.260]    __FlashArg=0x00000000
[18:21:19.260]    __FlashOp=0x00000000
[18:21:19.263]    __Result=0x00000000
[18:21:19.264]  </debugvars>
[18:21:19.264]  
[18:21:19.264]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:21:19.264]    <block atomic="false" info="">
[18:21:19.264]      __var SW_DP_ABORT       = 0x0;
[18:21:19.264]        // -> [SW_DP_ABORT <= 0x00000000]
[18:21:19.264]      __var DP_CTRL_STAT      = 0x4;
[18:21:19.264]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:21:19.264]      __var DP_SELECT         = 0x8;
[18:21:19.264]        // -> [DP_SELECT <= 0x00000008]
[18:21:19.264]      __var powered_down      = 0;
[18:21:19.264]        // -> [powered_down <= 0x00000000]
[18:21:19.264]      WriteDP(DP_SELECT, 0x00000000);
[18:21:19.268]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:21:19.268]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:21:19.269]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:21:19.269]        // -> [powered_down <= 0x00000001]
[18:21:19.269]    </block>
[18:21:19.271]    <control if="powered_down" while="" timeout="0" info="">
[18:21:19.271]      // if-block "powered_down"
[18:21:19.271]        // =>  TRUE
[18:21:19.271]      <block atomic="false" info="">
[18:21:19.271]        Message(0, "Debug/System power-up request sent");
[18:21:19.271]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:21:19.273]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:21:19.273]      </block>
[18:21:19.273]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:21:19.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:21:19.275]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:21:19.275]        // while-condition  =>  FALSE
[18:21:19.275]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:21:19.275]      </control>
[18:21:19.275]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:21:19.276]        // if-block "(__protocol & 0xFFFF) == 1"
[18:21:19.276]          // =>  FALSE
[18:21:19.276]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:21:19.276]      </control>
[18:21:19.276]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:21:19.276]        // if-block "(__protocol & 0xFFFF) == 2"
[18:21:19.276]          // =>  TRUE
[18:21:19.276]        <block atomic="false" info="">
[18:21:19.276]          Message(0, "executing SWD power up");
[18:21:19.276]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:21:19.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:21:19.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:21:19.289]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:21:19.289]        </block>
[18:21:19.289]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:21:19.289]      </control>
[18:21:19.289]      // end if-block "powered_down"
[18:21:19.289]    </control>
[18:21:19.289]    <block atomic="false" info="">
[18:21:19.289]      __var DEBUG_PORT_VAL    = 0;
[18:21:19.289]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:21:19.289]      __var ACCESS_POINT_VAL  = 0;
[18:21:19.289]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:21:19.289]      __ap = 1; 
[18:21:19.289]        // -> [__ap <= 0x00000001]
[18:21:19.289]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:21:19.316]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:21:19.317]      __ap = 4;
[18:21:19.317]        // -> [__ap <= 0x00000004]
[18:21:19.317]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:21:19.319]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:21:19.319]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:21:19.319]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:21:19.319]    </block>
[18:21:19.321]    <block atomic="false" info="">
[18:21:19.321]      __var nReset = 0x80;
[18:21:19.321]        // -> [nReset <= 0x00000080]
[18:21:19.321]      __var canReadPins = 0;
[18:21:19.321]        // -> [canReadPins <= 0x00000000]
[18:21:19.321]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:21:19.323]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:21:19.323]        // -> [canReadPins <= 0x00000001]
[18:21:19.326]    </block>
[18:21:19.326]    <control if="" while="1" timeout="200" info="">
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.326]      // while "1"  (timeout="200")
[18:21:19.326]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.330]      // while "1"  (timeout="200")
[18:21:19.330]      // while-condition  =>  TRUE
[18:21:19.331]      // while "1"  (timeout="200")
[18:21:19.331]      // while-condition  =>  TRUE
[18:21:19.331]      // while "1"  (timeout="200")
[18:21:19.331]      // while  =>  TIMEOUT
[18:21:19.331]      // end while "1"
[18:21:19.331]    </control>
[18:21:19.331]    <control if="canReadPins" while="" timeout="0" info="">
[18:21:19.331]      // if-block "canReadPins"
[18:21:19.331]        // =>  TRUE
[18:21:19.331]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:21:19.331]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:21:19.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:21:19.333]        // while-condition  =>  FALSE
[18:21:19.333]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:21:19.333]      </control>
[18:21:19.333]      // end if-block "canReadPins"
[18:21:19.334]    </control>
[18:21:19.334]    <control if="!canReadPins" while="" timeout="0" info="">
[18:21:19.334]      // if-block "!canReadPins"
[18:21:19.334]        // =>  FALSE
[18:21:19.334]      // skip if-block "!canReadPins"
[18:21:19.334]    </control>
[18:21:19.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:21:19.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:21:19.334]        // =>  TRUE
[18:21:19.334]      <block atomic="false" info="">
[18:21:19.334]        WriteAP(0x00, 0x190008);
[18:21:19.337]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:21:19.337]        WriteAP(0xF0, 0x01);
[18:21:19.340]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:21:19.340]      </block>
[18:21:19.340]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:21:19.340]    </control>
[18:21:19.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:21:19.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:21:19.342]        // =>  FALSE
[18:21:19.342]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:21:19.342]    </control>
[18:21:19.342]    <block atomic="false" info="">
[18:21:19.342]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:21:19.344]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:21:19.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:21:19.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:21:19.350]      __ap = 0; //lets make sure we reset the access point selection
[18:21:19.350]        // -> [__ap <= 0x00000000]
[18:21:19.350]    </block>
[18:21:19.350]  </sequence>
[18:21:19.350]  
[18:21:19.370]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:21:19.370]  
[18:21:19.370]  <debugvars>
[18:21:19.370]    // Pre-defined
[18:21:19.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:19.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:19.372]    __dp=0x00000000
[18:21:19.372]    __ap=0x00000000
[18:21:19.372]    __traceout=0x00000000      (Trace Disabled)
[18:21:19.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:19.373]    __FlashAddr=0x00000000
[18:21:19.373]    __FlashLen=0x00000000
[18:21:19.373]    __FlashArg=0x00000000
[18:21:19.373]    __FlashOp=0x00000000
[18:21:19.373]    __Result=0x00000000
[18:21:19.373]  </debugvars>
[18:21:19.373]  
[18:21:19.373]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:21:19.373]    <block atomic="false" info="">
[18:21:19.373]      __var deviceID = 0;
[18:21:19.373]        // -> [deviceID <= 0x00000000]
[18:21:19.373]      __var version = 0;
[18:21:19.375]        // -> [version <= 0x00000000]
[18:21:19.375]      __var partNum = 0;
[18:21:19.375]        // -> [partNum <= 0x00000000]
[18:21:19.375]      __var manuf = 0;
[18:21:19.375]        // -> [manuf <= 0x00000000]
[18:21:19.375]      __var isMSPM0G1X0X_G3X0X = 0;
[18:21:19.375]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:21:19.375]      __var isProduction = 0;
[18:21:19.375]        // -> [isProduction <= 0x00000000]
[18:21:19.375]      __var continueId = 0;
[18:21:19.375]        // -> [continueId <= 0x00000000]
[18:21:19.375]      deviceID =   Read32(0x41C40004);
[18:21:19.380]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:21:19.380]        // -> [deviceID <= 0x2BB8802F]
[18:21:19.380]      version = deviceID >> 28;
[18:21:19.380]        // -> [version <= 0x00000002]
[18:21:19.380]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:21:19.380]        // -> [partNum <= 0x0000BB88]
[18:21:19.380]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:21:19.380]        // -> [manuf <= 0x00000017]
[18:21:19.380]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:21:19.380]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:21:19.380]      isProduction = (version > 0);
[18:21:19.382]        // -> [isProduction <= 0x00000001]
[18:21:19.382]    </block>
[18:21:19.382]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:21:19.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:21:19.382]        // =>  FALSE
[18:21:19.382]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:21:19.382]    </control>
[18:21:19.382]    <control if="continueId == 4" while="" timeout="0" info="">
[18:21:19.382]      // if-block "continueId == 4"
[18:21:19.382]        // =>  FALSE
[18:21:19.382]      // skip if-block "continueId == 4"
[18:21:19.382]    </control>
[18:21:19.382]    <control if="!isProduction" while="" timeout="0" info="">
[18:21:19.382]      // if-block "!isProduction"
[18:21:19.382]        // =>  FALSE
[18:21:19.382]      // skip if-block "!isProduction"
[18:21:19.382]    </control>
[18:21:19.382]  </sequence>
[18:21:19.382]  
[18:29:19.210]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:29:19.210]  
[18:29:19.218]  <debugvars>
[18:29:19.218]    // Pre-defined
[18:29:19.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:19.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:19.218]    __dp=0x00000000
[18:29:19.218]    __ap=0x00000000
[18:29:19.218]    __traceout=0x00000000      (Trace Disabled)
[18:29:19.218]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:19.218]    __FlashAddr=0x00000000
[18:29:19.218]    __FlashLen=0x00000000
[18:29:19.218]    __FlashArg=0x00000000
[18:29:19.218]    __FlashOp=0x00000000
[18:29:19.218]    __Result=0x00000000
[18:29:19.218]  </debugvars>
[18:29:19.218]  
[18:29:19.218]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:29:19.218]    <block atomic="false" info="">
[18:29:19.218]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:29:19.218]        // -> [isSWJ <= 0x00000001]
[18:29:19.218]      __var hasDormant = __protocol & 0x00020000;
[18:29:19.218]        // -> [hasDormant <= 0x00000000]
[18:29:19.218]      __var protType   = __protocol & 0x0000FFFF;
[18:29:19.218]        // -> [protType <= 0x00000002]
[18:29:19.218]    </block>
[18:29:19.218]    <control if="protType == 1" while="" timeout="0" info="">
[18:29:19.218]      // if-block "protType == 1"
[18:29:19.218]        // =>  FALSE
[18:29:19.218]      // skip if-block "protType == 1"
[18:29:19.221]    </control>
[18:29:19.221]    <control if="protType == 2" while="" timeout="0" info="">
[18:29:19.221]      // if-block "protType == 2"
[18:29:19.221]        // =>  TRUE
[18:29:19.221]      <control if="isSWJ" while="" timeout="0" info="">
[18:29:19.221]        // if-block "isSWJ"
[18:29:19.221]          // =>  TRUE
[18:29:19.221]        <control if="hasDormant" while="" timeout="0" info="">
[18:29:19.221]          // if-block "hasDormant"
[18:29:19.221]            // =>  FALSE
[18:29:19.221]          // skip if-block "hasDormant"
[18:29:19.221]        </control>
[18:29:19.221]        <control if="!hasDormant" while="" timeout="0" info="">
[18:29:19.221]          // if-block "!hasDormant"
[18:29:19.221]            // =>  TRUE
[18:29:19.221]          <block atomic="false" info="">
[18:29:19.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:29:19.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:19.223]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:29:19.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:29:19.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:29:19.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:19.227]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:29:19.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:29:19.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:29:19.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:19.230]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:29:19.231]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:29:19.231]          </block>
[18:29:19.231]          // end if-block "!hasDormant"
[18:29:19.231]        </control>
[18:29:19.231]        // end if-block "isSWJ"
[18:29:19.231]      </control>
[18:29:19.231]      <control if="!isSWJ" while="" timeout="0" info="">
[18:29:19.231]        // if-block "!isSWJ"
[18:29:19.231]          // =>  FALSE
[18:29:19.231]        // skip if-block "!isSWJ"
[18:29:19.231]      </control>
[18:29:19.233]      <block atomic="false" info="">
[18:29:19.233]        ReadDP(0x0);
[18:29:19.233]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:29:19.233]      </block>
[18:29:19.233]      // end if-block "protType == 2"
[18:29:19.235]    </control>
[18:29:19.235]  </sequence>
[18:29:19.235]  
[18:29:19.237]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:29:19.237]  
[18:29:19.237]  <debugvars>
[18:29:19.237]    // Pre-defined
[18:29:19.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:19.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:19.237]    __dp=0x00000000
[18:29:19.237]    __ap=0x00000000
[18:29:19.237]    __traceout=0x00000000      (Trace Disabled)
[18:29:19.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:19.237]    __FlashAddr=0x00000000
[18:29:19.237]    __FlashLen=0x00000000
[18:29:19.237]    __FlashArg=0x00000000
[18:29:19.237]    __FlashOp=0x00000000
[18:29:19.237]    __Result=0x00000000
[18:29:19.237]  </debugvars>
[18:29:19.237]  
[18:29:19.239]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:29:19.239]    <block atomic="false" info="">
[18:29:19.239]      __var SW_DP_ABORT       = 0x0;
[18:29:19.239]        // -> [SW_DP_ABORT <= 0x00000000]
[18:29:19.239]      __var DP_CTRL_STAT      = 0x4;
[18:29:19.239]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:29:19.239]      __var DP_SELECT         = 0x8;
[18:29:19.239]        // -> [DP_SELECT <= 0x00000008]
[18:29:19.239]      __var powered_down      = 0;
[18:29:19.239]        // -> [powered_down <= 0x00000000]
[18:29:19.239]      WriteDP(DP_SELECT, 0x00000000);
[18:29:19.242]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:29:19.242]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:29:19.244]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:29:19.244]        // -> [powered_down <= 0x00000001]
[18:29:19.244]    </block>
[18:29:19.244]    <control if="powered_down" while="" timeout="0" info="">
[18:29:19.244]      // if-block "powered_down"
[18:29:19.244]        // =>  TRUE
[18:29:19.244]      <block atomic="false" info="">
[18:29:19.244]        Message(0, "Debug/System power-up request sent");
[18:29:19.245]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:29:19.245]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:29:19.248]      </block>
[18:29:19.248]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:29:19.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:29:19.250]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:29:19.250]        // while-condition  =>  FALSE
[18:29:19.250]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:29:19.250]      </control>
[18:29:19.250]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:29:19.250]        // if-block "(__protocol & 0xFFFF) == 1"
[18:29:19.250]          // =>  FALSE
[18:29:19.250]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:29:19.250]      </control>
[18:29:19.250]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:29:19.250]        // if-block "(__protocol & 0xFFFF) == 2"
[18:29:19.250]          // =>  TRUE
[18:29:19.250]        <block atomic="false" info="">
[18:29:19.250]          Message(0, "executing SWD power up");
[18:29:19.252]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:29:19.252]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:29:19.252]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:29:19.252]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:29:19.252]        </block>
[18:29:19.256]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:29:19.256]      </control>
[18:29:19.256]      // end if-block "powered_down"
[18:29:19.256]    </control>
[18:29:19.256]    <block atomic="false" info="">
[18:29:19.256]      __var DEBUG_PORT_VAL    = 0;
[18:29:19.256]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:29:19.256]      __var ACCESS_POINT_VAL  = 0;
[18:29:19.256]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:29:19.256]      __ap = 1; 
[18:29:19.256]        // -> [__ap <= 0x00000001]
[18:29:19.256]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:29:19.260]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:29:19.260]      __ap = 4;
[18:29:19.260]        // -> [__ap <= 0x00000004]
[18:29:19.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:19.265]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:29:19.265]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:29:19.265]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:19.265]    </block>
[18:29:19.265]    <block atomic="false" info="">
[18:29:19.265]      __var nReset = 0x80;
[18:29:19.265]        // -> [nReset <= 0x00000080]
[18:29:19.265]      __var canReadPins = 0;
[18:29:19.265]        // -> [canReadPins <= 0x00000000]
[18:29:19.265]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:29:19.265]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:29:19.265]        // -> [canReadPins <= 0x00000001]
[18:29:19.265]    </block>
[18:29:19.269]    <control if="" while="1" timeout="200" info="">
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.269]      // while-condition  =>  TRUE
[18:29:19.269]      // while "1"  (timeout="200")
[18:29:19.272]      // while-condition  =>  TRUE
[18:29:19.272]      // while "1"  (timeout="200")
[18:29:19.272]      // while-condition  =>  TRUE
[18:29:19.272]      // while "1"  (timeout="200")
[18:29:19.272]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.273]      // while "1"  (timeout="200")
[18:29:19.273]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.277]      // while-condition  =>  TRUE
[18:29:19.277]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.279]      // while "1"  (timeout="200")
[18:29:19.279]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.282]      // while-condition  =>  TRUE
[18:29:19.282]      // while "1"  (timeout="200")
[18:29:19.286]      // while-condition  =>  TRUE
[18:29:19.286]      // while "1"  (timeout="200")
[18:29:19.286]      // while  =>  TIMEOUT
[18:29:19.286]      // end while "1"
[18:29:19.286]    </control>
[18:29:19.286]    <control if="canReadPins" while="" timeout="0" info="">
[18:29:19.286]      // if-block "canReadPins"
[18:29:19.286]        // =>  TRUE
[18:29:19.286]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:29:19.287]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:29:19.287]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:29:19.287]        // while-condition  =>  FALSE
[18:29:19.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:29:19.287]      </control>
[18:29:19.287]      // end if-block "canReadPins"
[18:29:19.287]    </control>
[18:29:19.287]    <control if="!canReadPins" while="" timeout="0" info="">
[18:29:19.287]      // if-block "!canReadPins"
[18:29:19.287]        // =>  FALSE
[18:29:19.287]      // skip if-block "!canReadPins"
[18:29:19.287]    </control>
[18:29:19.287]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:29:19.287]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:19.287]        // =>  TRUE
[18:29:19.287]      <block atomic="false" info="">
[18:29:19.287]        WriteAP(0x00, 0x190008);
[18:29:19.290]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:19.290]        WriteAP(0xF0, 0x01);
[18:29:19.294]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:19.294]      </block>
[18:29:19.294]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:19.294]    </control>
[18:29:19.294]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:29:19.294]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:19.294]        // =>  FALSE
[18:29:19.294]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:19.294]    </control>
[18:29:19.294]    <block atomic="false" info="">
[18:29:19.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:19.299]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:29:19.299]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:29:19.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:19.299]      __ap = 0; //lets make sure we reset the access point selection
[18:29:19.299]        // -> [__ap <= 0x00000000]
[18:29:19.299]    </block>
[18:29:19.299]  </sequence>
[18:29:19.299]  
[18:29:19.322]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:29:19.322]  
[18:29:19.322]  <debugvars>
[18:29:19.322]    // Pre-defined
[18:29:19.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:19.322]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:19.322]    __dp=0x00000000
[18:29:19.322]    __ap=0x00000000
[18:29:19.322]    __traceout=0x00000000      (Trace Disabled)
[18:29:19.322]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:19.322]    __FlashAddr=0x00000000
[18:29:19.326]    __FlashLen=0x00000000
[18:29:19.326]    __FlashArg=0x00000000
[18:29:19.326]    __FlashOp=0x00000000
[18:29:19.326]    __Result=0x00000000
[18:29:19.326]  </debugvars>
[18:29:19.326]  
[18:29:19.326]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:29:19.326]    <block atomic="false" info="">
[18:29:19.326]      __var deviceID = 0;
[18:29:19.326]        // -> [deviceID <= 0x00000000]
[18:29:19.326]      __var version = 0;
[18:29:19.326]        // -> [version <= 0x00000000]
[18:29:19.326]      __var partNum = 0;
[18:29:19.326]        // -> [partNum <= 0x00000000]
[18:29:19.326]      __var manuf = 0;
[18:29:19.326]        // -> [manuf <= 0x00000000]
[18:29:19.326]      __var isMSPM0G1X0X_G3X0X = 0;
[18:29:19.326]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:29:19.326]      __var isProduction = 0;
[18:29:19.326]        // -> [isProduction <= 0x00000000]
[18:29:19.326]      __var continueId = 0;
[18:29:19.326]        // -> [continueId <= 0x00000000]
[18:29:19.326]      deviceID =   Read32(0x41C40004);
[18:29:19.330]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:29:19.330]        // -> [deviceID <= 0x2BB8802F]
[18:29:19.330]      version = deviceID >> 28;
[18:29:19.330]        // -> [version <= 0x00000002]
[18:29:19.330]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:29:19.330]        // -> [partNum <= 0x0000BB88]
[18:29:19.330]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:29:19.330]        // -> [manuf <= 0x00000017]
[18:29:19.330]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:29:19.330]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:29:19.330]      isProduction = (version > 0);
[18:29:19.330]        // -> [isProduction <= 0x00000001]
[18:29:19.334]    </block>
[18:29:19.334]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:29:19.334]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:29:19.334]        // =>  FALSE
[18:29:19.334]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:29:19.334]    </control>
[18:29:19.334]    <control if="continueId == 4" while="" timeout="0" info="">
[18:29:19.334]      // if-block "continueId == 4"
[18:29:19.334]        // =>  FALSE
[18:29:19.334]      // skip if-block "continueId == 4"
[18:29:19.334]    </control>
[18:29:19.334]    <control if="!isProduction" while="" timeout="0" info="">
[18:29:19.334]      // if-block "!isProduction"
[18:29:19.334]        // =>  FALSE
[18:29:19.334]      // skip if-block "!isProduction"
[18:29:19.334]    </control>
[18:29:19.334]  </sequence>
[18:29:19.334]  
[18:30:04.868]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:30:04.868]  
[18:30:04.868]  <debugvars>
[18:30:04.868]    // Pre-defined
[18:30:04.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:04.868]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:04.868]    __dp=0x00000000
[18:30:04.868]    __ap=0x00000000
[18:30:04.868]    __traceout=0x00000000      (Trace Disabled)
[18:30:04.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:04.868]    __FlashAddr=0x00000000
[18:30:04.868]    __FlashLen=0x00000000
[18:30:04.868]    __FlashArg=0x00000000
[18:30:04.868]    __FlashOp=0x00000000
[18:30:04.868]    __Result=0x00000000
[18:30:04.868]  </debugvars>
[18:30:04.868]  
[18:30:04.868]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:30:04.868]    <block atomic="false" info="">
[18:30:04.868]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:30:04.868]        // -> [isSWJ <= 0x00000001]
[18:30:04.868]      __var hasDormant = __protocol & 0x00020000;
[18:30:04.868]        // -> [hasDormant <= 0x00000000]
[18:30:04.868]      __var protType   = __protocol & 0x0000FFFF;
[18:30:04.868]        // -> [protType <= 0x00000002]
[18:30:04.868]    </block>
[18:30:04.868]    <control if="protType == 1" while="" timeout="0" info="">
[18:30:04.868]      // if-block "protType == 1"
[18:30:04.868]        // =>  FALSE
[18:30:04.868]      // skip if-block "protType == 1"
[18:30:04.868]    </control>
[18:30:04.868]    <control if="protType == 2" while="" timeout="0" info="">
[18:30:04.868]      // if-block "protType == 2"
[18:30:04.868]        // =>  TRUE
[18:30:04.868]      <control if="isSWJ" while="" timeout="0" info="">
[18:30:04.868]        // if-block "isSWJ"
[18:30:04.868]          // =>  TRUE
[18:30:04.868]        <control if="hasDormant" while="" timeout="0" info="">
[18:30:04.868]          // if-block "hasDormant"
[18:30:04.868]            // =>  FALSE
[18:30:04.868]          // skip if-block "hasDormant"
[18:30:04.868]        </control>
[18:30:04.868]        <control if="!hasDormant" while="" timeout="0" info="">
[18:30:04.868]          // if-block "!hasDormant"
[18:30:04.868]            // =>  TRUE
[18:30:04.868]          <block atomic="false" info="">
[18:30:04.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:30:04.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:04.878]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:30:04.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:30:04.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:30:04.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:04.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:30:04.884]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:30:04.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:30:04.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:04.886]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:30:04.890]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:30:04.890]          </block>
[18:30:04.896]          // end if-block "!hasDormant"
[18:30:04.896]        </control>
[18:30:04.896]        // end if-block "isSWJ"
[18:30:04.896]      </control>
[18:30:04.896]      <control if="!isSWJ" while="" timeout="0" info="">
[18:30:04.896]        // if-block "!isSWJ"
[18:30:04.896]          // =>  FALSE
[18:30:04.896]        // skip if-block "!isSWJ"
[18:30:04.896]      </control>
[18:30:04.896]      <block atomic="false" info="">
[18:30:04.896]        ReadDP(0x0);
[18:30:04.898]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:30:04.899]      </block>
[18:30:04.899]      // end if-block "protType == 2"
[18:30:04.899]    </control>
[18:30:04.899]  </sequence>
[18:30:04.899]  
[18:30:04.902]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:30:04.902]  
[18:30:04.902]  <debugvars>
[18:30:04.903]    // Pre-defined
[18:30:04.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:04.903]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:04.903]    __dp=0x00000000
[18:30:04.903]    __ap=0x00000000
[18:30:04.903]    __traceout=0x00000000      (Trace Disabled)
[18:30:04.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:04.903]    __FlashAddr=0x00000000
[18:30:04.903]    __FlashLen=0x00000000
[18:30:04.903]    __FlashArg=0x00000000
[18:30:04.903]    __FlashOp=0x00000000
[18:30:04.903]    __Result=0x00000000
[18:30:04.903]  </debugvars>
[18:30:04.903]  
[18:30:04.903]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:30:04.903]    <block atomic="false" info="">
[18:30:04.905]      __var SW_DP_ABORT       = 0x0;
[18:30:04.905]        // -> [SW_DP_ABORT <= 0x00000000]
[18:30:04.905]      __var DP_CTRL_STAT      = 0x4;
[18:30:04.905]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:30:04.905]      __var DP_SELECT         = 0x8;
[18:30:04.905]        // -> [DP_SELECT <= 0x00000008]
[18:30:04.905]      __var powered_down      = 0;
[18:30:04.905]        // -> [powered_down <= 0x00000000]
[18:30:04.905]      WriteDP(DP_SELECT, 0x00000000);
[18:30:04.907]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:30:04.907]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:30:04.911]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:30:04.911]        // -> [powered_down <= 0x00000001]
[18:30:04.911]    </block>
[18:30:04.911]    <control if="powered_down" while="" timeout="0" info="">
[18:30:04.911]      // if-block "powered_down"
[18:30:04.911]        // =>  TRUE
[18:30:04.911]      <block atomic="false" info="">
[18:30:04.911]        Message(0, "Debug/System power-up request sent");
[18:30:04.912]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:30:04.916]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:30:04.916]      </block>
[18:30:04.916]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:30:04.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:04.916]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:30:04.916]        // while-condition  =>  FALSE
[18:30:04.916]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:30:04.916]      </control>
[18:30:04.916]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:30:04.916]        // if-block "(__protocol & 0xFFFF) == 1"
[18:30:04.916]          // =>  FALSE
[18:30:04.916]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:30:04.916]      </control>
[18:30:04.916]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:30:04.916]        // if-block "(__protocol & 0xFFFF) == 2"
[18:30:04.916]          // =>  TRUE
[18:30:04.916]        <block atomic="false" info="">
[18:30:04.916]          Message(0, "executing SWD power up");
[18:30:04.919]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:30:04.922]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:30:04.923]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:30:04.923]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:30:04.923]        </block>
[18:30:04.923]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:30:04.923]      </control>
[18:30:04.923]      // end if-block "powered_down"
[18:30:04.923]    </control>
[18:30:04.923]    <block atomic="false" info="">
[18:30:04.923]      __var DEBUG_PORT_VAL    = 0;
[18:30:04.923]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:30:04.923]      __var ACCESS_POINT_VAL  = 0;
[18:30:04.923]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:30:04.923]      __ap = 1; 
[18:30:04.923]        // -> [__ap <= 0x00000001]
[18:30:04.923]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:30:04.930]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:30:04.930]      __ap = 4;
[18:30:04.930]        // -> [__ap <= 0x00000004]
[18:30:04.930]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:30:04.935]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:30:04.935]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:30:04.935]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:30:04.937]    </block>
[18:30:04.938]    <block atomic="false" info="">
[18:30:04.938]      __var nReset = 0x80;
[18:30:04.938]        // -> [nReset <= 0x00000080]
[18:30:04.938]      __var canReadPins = 0;
[18:30:04.938]        // -> [canReadPins <= 0x00000000]
[18:30:04.938]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:30:04.940]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:30:04.940]        // -> [canReadPins <= 0x00000001]
[18:30:04.940]    </block>
[18:30:04.940]    <control if="" while="1" timeout="200" info="">
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.940]      // while-condition  =>  TRUE
[18:30:04.940]      // while "1"  (timeout="200")
[18:30:04.943]      // while-condition  =>  TRUE
[18:30:04.943]      // while "1"  (timeout="200")
[18:30:04.943]      // while  =>  TIMEOUT
[18:30:04.943]      // end while "1"
[18:30:04.943]    </control>
[18:30:04.943]    <control if="canReadPins" while="" timeout="0" info="">
[18:30:04.943]      // if-block "canReadPins"
[18:30:04.943]        // =>  TRUE
[18:30:04.943]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:30:04.943]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:30:04.947]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:30:04.947]        // while-condition  =>  FALSE
[18:30:04.947]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:30:04.947]      </control>
[18:30:04.947]      // end if-block "canReadPins"
[18:30:04.947]    </control>
[18:30:04.947]    <control if="!canReadPins" while="" timeout="0" info="">
[18:30:04.947]      // if-block "!canReadPins"
[18:30:04.947]        // =>  FALSE
[18:30:04.947]      // skip if-block "!canReadPins"
[18:30:04.947]    </control>
[18:30:04.947]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:30:04.947]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:30:04.947]        // =>  TRUE
[18:30:04.947]      <block atomic="false" info="">
[18:30:04.947]        WriteAP(0x00, 0x190008);
[18:30:04.949]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:30:04.950]        WriteAP(0xF0, 0x01);
[18:30:04.954]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:30:04.954]      </block>
[18:30:04.955]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:30:04.955]    </control>
[18:30:04.955]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:30:04.955]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:30:04.955]        // =>  FALSE
[18:30:04.955]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:30:04.955]    </control>
[18:30:04.956]    <block atomic="false" info="">
[18:30:04.956]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:30:04.963]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:30:04.963]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:30:04.963]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:30:04.965]      __ap = 0; //lets make sure we reset the access point selection
[18:30:04.965]        // -> [__ap <= 0x00000000]
[18:30:04.965]    </block>
[18:30:04.965]  </sequence>
[18:30:04.965]  
[18:30:04.993]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:30:04.993]  
[18:30:04.993]  <debugvars>
[18:30:04.993]    // Pre-defined
[18:30:04.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:04.993]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:04.993]    __dp=0x00000000
[18:30:04.993]    __ap=0x00000000
[18:30:04.993]    __traceout=0x00000000      (Trace Disabled)
[18:30:04.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:04.993]    __FlashAddr=0x00000000
[18:30:04.993]    __FlashLen=0x00000000
[18:30:04.993]    __FlashArg=0x00000000
[18:30:04.993]    __FlashOp=0x00000000
[18:30:04.993]    __Result=0x00000000
[18:30:04.993]  </debugvars>
[18:30:04.993]  
[18:30:04.993]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:30:04.993]    <block atomic="false" info="">
[18:30:04.993]      __var deviceID = 0;
[18:30:05.001]        // -> [deviceID <= 0x00000000]
[18:30:05.001]      __var version = 0;
[18:30:05.001]        // -> [version <= 0x00000000]
[18:30:05.001]      __var partNum = 0;
[18:30:05.001]        // -> [partNum <= 0x00000000]
[18:30:05.001]      __var manuf = 0;
[18:30:05.001]        // -> [manuf <= 0x00000000]
[18:30:05.002]      __var isMSPM0G1X0X_G3X0X = 0;
[18:30:05.002]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:30:05.002]      __var isProduction = 0;
[18:30:05.002]        // -> [isProduction <= 0x00000000]
[18:30:05.002]      __var continueId = 0;
[18:30:05.002]        // -> [continueId <= 0x00000000]
[18:30:05.002]      deviceID =   Read32(0x41C40004);
[18:30:05.009]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:30:05.009]        // -> [deviceID <= 0x2BB8802F]
[18:30:05.009]      version = deviceID >> 28;
[18:30:05.009]        // -> [version <= 0x00000002]
[18:30:05.009]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:30:05.009]        // -> [partNum <= 0x0000BB88]
[18:30:05.009]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:30:05.009]        // -> [manuf <= 0x00000017]
[18:30:05.009]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:30:05.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:30:05.009]      isProduction = (version > 0);
[18:30:05.009]        // -> [isProduction <= 0x00000001]
[18:30:05.009]    </block>
[18:30:05.009]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:30:05.009]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:30:05.009]        // =>  FALSE
[18:30:05.009]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:30:05.011]    </control>
[18:30:05.011]    <control if="continueId == 4" while="" timeout="0" info="">
[18:30:05.011]      // if-block "continueId == 4"
[18:30:05.011]        // =>  FALSE
[18:30:05.011]      // skip if-block "continueId == 4"
[18:30:05.011]    </control>
[18:30:05.011]    <control if="!isProduction" while="" timeout="0" info="">
[18:30:05.011]      // if-block "!isProduction"
[18:30:05.011]        // =>  FALSE
[18:30:05.012]      // skip if-block "!isProduction"
[18:30:05.012]    </control>
[18:30:05.012]  </sequence>
[18:30:05.013]  
[18:31:03.779]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:31:03.779]  
[18:31:03.788]  <debugvars>
[18:31:03.788]    // Pre-defined
[18:31:03.788]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:03.788]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:03.788]    __dp=0x00000000
[18:31:03.788]    __ap=0x00000000
[18:31:03.788]    __traceout=0x00000000      (Trace Disabled)
[18:31:03.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:03.788]    __FlashAddr=0x00000000
[18:31:03.788]    __FlashLen=0x00000000
[18:31:03.788]    __FlashArg=0x00000000
[18:31:03.788]    __FlashOp=0x00000000
[18:31:03.788]    __Result=0x00000000
[18:31:03.788]  </debugvars>
[18:31:03.788]  
[18:31:03.788]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:31:03.788]    <block atomic="false" info="">
[18:31:03.788]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:31:03.788]        // -> [isSWJ <= 0x00000001]
[18:31:03.788]      __var hasDormant = __protocol & 0x00020000;
[18:31:03.788]        // -> [hasDormant <= 0x00000000]
[18:31:03.788]      __var protType   = __protocol & 0x0000FFFF;
[18:31:03.788]        // -> [protType <= 0x00000002]
[18:31:03.788]    </block>
[18:31:03.788]    <control if="protType == 1" while="" timeout="0" info="">
[18:31:03.788]      // if-block "protType == 1"
[18:31:03.788]        // =>  FALSE
[18:31:03.788]      // skip if-block "protType == 1"
[18:31:03.792]    </control>
[18:31:03.792]    <control if="protType == 2" while="" timeout="0" info="">
[18:31:03.792]      // if-block "protType == 2"
[18:31:03.792]        // =>  TRUE
[18:31:03.792]      <control if="isSWJ" while="" timeout="0" info="">
[18:31:03.792]        // if-block "isSWJ"
[18:31:03.792]          // =>  TRUE
[18:31:03.792]        <control if="hasDormant" while="" timeout="0" info="">
[18:31:03.792]          // if-block "hasDormant"
[18:31:03.792]            // =>  FALSE
[18:31:03.793]          // skip if-block "hasDormant"
[18:31:03.793]        </control>
[18:31:03.793]        <control if="!hasDormant" while="" timeout="0" info="">
[18:31:03.793]          // if-block "!hasDormant"
[18:31:03.793]            // =>  TRUE
[18:31:03.793]          <block atomic="false" info="">
[18:31:03.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:31:03.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:03.793]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:31:03.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:31:03.797]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:31:03.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:03.797]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:31:03.801]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:31:03.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:31:03.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:31:03.801]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:31:03.801]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:31:03.801]          </block>
[18:31:03.801]          // end if-block "!hasDormant"
[18:31:03.801]        </control>
[18:31:03.805]        // end if-block "isSWJ"
[18:31:03.805]      </control>
[18:31:03.805]      <control if="!isSWJ" while="" timeout="0" info="">
[18:31:03.805]        // if-block "!isSWJ"
[18:31:03.805]          // =>  FALSE
[18:31:03.805]        // skip if-block "!isSWJ"
[18:31:03.805]      </control>
[18:31:03.805]      <block atomic="false" info="">
[18:31:03.805]        ReadDP(0x0);
[18:31:03.805]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:31:03.805]      </block>
[18:31:03.807]      // end if-block "protType == 2"
[18:31:03.807]    </control>
[18:31:03.807]  </sequence>
[18:31:03.807]  
[18:31:03.809]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:31:03.809]  
[18:31:03.809]  <debugvars>
[18:31:03.809]    // Pre-defined
[18:31:03.809]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:03.809]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:03.809]    __dp=0x00000000
[18:31:03.809]    __ap=0x00000000
[18:31:03.809]    __traceout=0x00000000      (Trace Disabled)
[18:31:03.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:03.809]    __FlashAddr=0x00000000
[18:31:03.809]    __FlashLen=0x00000000
[18:31:03.809]    __FlashArg=0x00000000
[18:31:03.809]    __FlashOp=0x00000000
[18:31:03.809]    __Result=0x00000000
[18:31:03.809]  </debugvars>
[18:31:03.809]  
[18:31:03.809]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:31:03.809]    <block atomic="false" info="">
[18:31:03.809]      __var SW_DP_ABORT       = 0x0;
[18:31:03.809]        // -> [SW_DP_ABORT <= 0x00000000]
[18:31:03.809]      __var DP_CTRL_STAT      = 0x4;
[18:31:03.812]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:31:03.812]      __var DP_SELECT         = 0x8;
[18:31:03.812]        // -> [DP_SELECT <= 0x00000008]
[18:31:03.812]      __var powered_down      = 0;
[18:31:03.812]        // -> [powered_down <= 0x00000000]
[18:31:03.812]      WriteDP(DP_SELECT, 0x00000000);
[18:31:03.813]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:31:03.813]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:31:03.816]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:31:03.816]        // -> [powered_down <= 0x00000001]
[18:31:03.816]    </block>
[18:31:03.816]    <control if="powered_down" while="" timeout="0" info="">
[18:31:03.816]      // if-block "powered_down"
[18:31:03.816]        // =>  TRUE
[18:31:03.816]      <block atomic="false" info="">
[18:31:03.816]        Message(0, "Debug/System power-up request sent");
[18:31:03.817]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:31:03.820]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:31:03.820]      </block>
[18:31:03.820]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:31:03.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:31:03.822]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:31:03.822]        // while-condition  =>  FALSE
[18:31:03.822]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:31:03.822]      </control>
[18:31:03.823]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:31:03.823]        // if-block "(__protocol & 0xFFFF) == 1"
[18:31:03.823]          // =>  FALSE
[18:31:03.823]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:31:03.823]      </control>
[18:31:03.823]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:31:03.823]        // if-block "(__protocol & 0xFFFF) == 2"
[18:31:03.823]          // =>  TRUE
[18:31:03.823]        <block atomic="false" info="">
[18:31:03.824]          Message(0, "executing SWD power up");
[18:31:03.825]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:31:03.827]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:31:03.827]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:31:03.829]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:31:03.829]        </block>
[18:31:03.829]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:31:03.829]      </control>
[18:31:03.829]      // end if-block "powered_down"
[18:31:03.829]    </control>
[18:31:03.829]    <block atomic="false" info="">
[18:31:03.829]      __var DEBUG_PORT_VAL    = 0;
[18:31:03.830]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:31:03.830]      __var ACCESS_POINT_VAL  = 0;
[18:31:03.830]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:31:03.830]      __ap = 1; 
[18:31:03.830]        // -> [__ap <= 0x00000001]
[18:31:03.830]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:31:03.835]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:31:03.835]      __ap = 4;
[18:31:03.835]        // -> [__ap <= 0x00000004]
[18:31:03.835]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:03.839]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:31:03.839]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:31:03.839]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:03.841]    </block>
[18:31:03.841]    <block atomic="false" info="">
[18:31:03.842]      __var nReset = 0x80;
[18:31:03.842]        // -> [nReset <= 0x00000080]
[18:31:03.842]      __var canReadPins = 0;
[18:31:03.842]        // -> [canReadPins <= 0x00000000]
[18:31:03.842]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:31:03.843]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:31:03.843]        // -> [canReadPins <= 0x00000001]
[18:31:03.843]    </block>
[18:31:03.844]    <control if="" while="1" timeout="200" info="">
[18:31:03.844]      // while "1"  (timeout="200")
[18:31:03.844]      // while-condition  =>  TRUE
[18:31:03.844]      // while "1"  (timeout="200")
[18:31:03.844]      // while-condition  =>  TRUE
[18:31:03.844]      // while "1"  (timeout="200")
[18:31:03.844]      // while-condition  =>  TRUE
[18:31:03.844]      // while "1"  (timeout="200")
[18:31:03.845]      // while-condition  =>  TRUE
[18:31:03.845]      // while "1"  (timeout="200")
[18:31:03.845]      // while-condition  =>  TRUE
[18:31:03.845]      // while "1"  (timeout="200")
[18:31:03.845]      // while-condition  =>  TRUE
[18:31:03.845]      // while "1"  (timeout="200")
[18:31:03.845]      // while-condition  =>  TRUE
[18:31:03.845]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.846]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.846]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.846]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.846]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.846]      // while "1"  (timeout="200")
[18:31:03.846]      // while-condition  =>  TRUE
[18:31:03.847]      // while "1"  (timeout="200")
[18:31:03.847]      // while  =>  TIMEOUT
[18:31:03.847]      // end while "1"
[18:31:03.847]    </control>
[18:31:03.847]    <control if="canReadPins" while="" timeout="0" info="">
[18:31:03.847]      // if-block "canReadPins"
[18:31:03.847]        // =>  TRUE
[18:31:03.847]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:31:03.847]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:31:03.848]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:31:03.848]        // while-condition  =>  FALSE
[18:31:03.848]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:31:03.850]      </control>
[18:31:03.850]      // end if-block "canReadPins"
[18:31:03.850]    </control>
[18:31:03.850]    <control if="!canReadPins" while="" timeout="0" info="">
[18:31:03.850]      // if-block "!canReadPins"
[18:31:03.850]        // =>  FALSE
[18:31:03.850]      // skip if-block "!canReadPins"
[18:31:03.850]    </control>
[18:31:03.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:31:03.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:03.851]        // =>  TRUE
[18:31:03.851]      <block atomic="false" info="">
[18:31:03.851]        WriteAP(0x00, 0x190008);
[18:31:03.854]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:03.854]        WriteAP(0xF0, 0x01);
[18:31:03.859]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:31:03.859]      </block>
[18:31:03.859]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:31:03.859]    </control>
[18:31:03.859]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:31:03.859]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:03.859]        // =>  FALSE
[18:31:03.859]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:31:03.859]    </control>
[18:31:03.859]    <block atomic="false" info="">
[18:31:03.859]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:31:03.863]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:31:03.863]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:31:03.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:31:03.866]      __ap = 0; //lets make sure we reset the access point selection
[18:31:03.867]        // -> [__ap <= 0x00000000]
[18:31:03.867]    </block>
[18:31:03.867]  </sequence>
[18:31:03.867]  
[18:31:03.885]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:31:03.885]  
[18:31:03.888]  <debugvars>
[18:31:03.888]    // Pre-defined
[18:31:03.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:31:03.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:31:03.888]    __dp=0x00000000
[18:31:03.888]    __ap=0x00000000
[18:31:03.888]    __traceout=0x00000000      (Trace Disabled)
[18:31:03.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:31:03.888]    __FlashAddr=0x00000000
[18:31:03.888]    __FlashLen=0x00000000
[18:31:03.888]    __FlashArg=0x00000000
[18:31:03.888]    __FlashOp=0x00000000
[18:31:03.888]    __Result=0x00000000
[18:31:03.888]  </debugvars>
[18:31:03.888]  
[18:31:03.888]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:31:03.888]    <block atomic="false" info="">
[18:31:03.888]      __var deviceID = 0;
[18:31:03.888]        // -> [deviceID <= 0x00000000]
[18:31:03.888]      __var version = 0;
[18:31:03.888]        // -> [version <= 0x00000000]
[18:31:03.888]      __var partNum = 0;
[18:31:03.888]        // -> [partNum <= 0x00000000]
[18:31:03.888]      __var manuf = 0;
[18:31:03.888]        // -> [manuf <= 0x00000000]
[18:31:03.888]      __var isMSPM0G1X0X_G3X0X = 0;
[18:31:03.888]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:31:03.888]      __var isProduction = 0;
[18:31:03.888]        // -> [isProduction <= 0x00000000]
[18:31:03.888]      __var continueId = 0;
[18:31:03.888]        // -> [continueId <= 0x00000000]
[18:31:03.888]      deviceID =   Read32(0x41C40004);
[18:31:03.896]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:31:03.896]        // -> [deviceID <= 0x2BB8802F]
[18:31:03.896]      version = deviceID >> 28;
[18:31:03.896]        // -> [version <= 0x00000002]
[18:31:03.896]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:31:03.896]        // -> [partNum <= 0x0000BB88]
[18:31:03.896]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:31:03.896]        // -> [manuf <= 0x00000017]
[18:31:03.896]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:31:03.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:31:03.896]      isProduction = (version > 0);
[18:31:03.896]        // -> [isProduction <= 0x00000001]
[18:31:03.896]    </block>
[18:31:03.896]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:31:03.896]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:31:03.896]        // =>  FALSE
[18:31:03.896]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:31:03.896]    </control>
[18:31:03.896]    <control if="continueId == 4" while="" timeout="0" info="">
[18:31:03.896]      // if-block "continueId == 4"
[18:31:03.896]        // =>  FALSE
[18:31:03.896]      // skip if-block "continueId == 4"
[18:31:03.896]    </control>
[18:31:03.896]    <control if="!isProduction" while="" timeout="0" info="">
[18:31:03.896]      // if-block "!isProduction"
[18:31:03.900]        // =>  FALSE
[18:31:03.900]      // skip if-block "!isProduction"
[18:31:03.900]    </control>
[18:31:03.900]  </sequence>
[18:31:03.900]  
