/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0020.log
 *  Created     : 15:30:21 (02/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:30:21.415]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:30:21.415]  
[15:30:21.415]  <debugvars>
[15:30:21.415]    // Pre-defined
[15:30:21.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:30:21.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:30:21.415]    __dp=0x00000000
[15:30:21.415]    __ap=0x00000000
[15:30:21.415]    __traceout=0x00000000      (Trace Disabled)
[15:30:21.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:30:21.415]    __FlashAddr=0x00000000
[15:30:21.415]    __FlashLen=0x00000000
[15:30:21.415]    __FlashArg=0x00000000
[15:30:21.415]    __FlashOp=0x00000000
[15:30:21.415]    __Result=0x00000000
[15:30:21.415]  </debugvars>
[15:30:21.419]  
[15:30:21.419]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:30:21.419]    <block atomic="false" info="">
[15:30:21.419]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:30:21.419]        // -> [isSWJ <= 0x00000001]
[15:30:21.419]      __var hasDormant = __protocol & 0x00020000;
[15:30:21.419]        // -> [hasDormant <= 0x00000000]
[15:30:21.419]      __var protType   = __protocol & 0x0000FFFF;
[15:30:21.419]        // -> [protType <= 0x00000002]
[15:30:21.419]    </block>
[15:30:21.419]    <control if="protType == 1" while="" timeout="0" info="">
[15:30:21.419]      // if-block "protType == 1"
[15:30:21.419]        // =>  FALSE
[15:30:21.419]      // skip if-block "protType == 1"
[15:30:21.419]    </control>
[15:30:21.419]    <control if="protType == 2" while="" timeout="0" info="">
[15:30:21.419]      // if-block "protType == 2"
[15:30:21.419]        // =>  TRUE
[15:30:21.419]      <control if="isSWJ" while="" timeout="0" info="">
[15:30:21.419]        // if-block "isSWJ"
[15:30:21.419]          // =>  TRUE
[15:30:21.419]        <control if="hasDormant" while="" timeout="0" info="">
[15:30:21.419]          // if-block "hasDormant"
[15:30:21.419]            // =>  FALSE
[15:30:21.419]          // skip if-block "hasDormant"
[15:30:21.419]        </control>
[15:30:21.419]        <control if="!hasDormant" while="" timeout="0" info="">
[15:30:21.419]          // if-block "!hasDormant"
[15:30:21.419]            // =>  TRUE
[15:30:21.419]          <block atomic="false" info="">
[15:30:21.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:30:21.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:30:21.419]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:30:21.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:30:21.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:30:21.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:30:21.430]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:30:21.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:30:21.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:30:21.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:30:21.440]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:30:21.440]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:30:21.440]          </block>
[15:30:21.440]          // end if-block "!hasDormant"
[15:30:21.440]        </control>
[15:30:21.440]        // end if-block "isSWJ"
[15:30:21.440]      </control>
[15:30:21.440]      <control if="!isSWJ" while="" timeout="0" info="">
[15:30:21.440]        // if-block "!isSWJ"
[15:30:21.440]          // =>  FALSE
[15:30:21.440]        // skip if-block "!isSWJ"
[15:30:21.440]      </control>
[15:30:21.440]      <block atomic="false" info="">
[15:30:21.440]        ReadDP(0x0);
[15:30:21.440]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:30:21.440]      </block>
[15:30:21.440]      // end if-block "protType == 2"
[15:30:21.440]    </control>
[15:30:21.440]  </sequence>
[15:30:21.440]  
[15:30:21.450]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:30:21.450]  
[15:30:21.450]  <debugvars>
[15:30:21.450]    // Pre-defined
[15:30:21.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:30:21.450]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:30:21.450]    __dp=0x00000000
[15:30:21.450]    __ap=0x00000000
[15:30:21.450]    __traceout=0x00000000      (Trace Disabled)
[15:30:21.450]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:30:21.450]    __FlashAddr=0x00000000
[15:30:21.450]    __FlashLen=0x00000000
[15:30:21.450]    __FlashArg=0x00000000
[15:30:21.450]    __FlashOp=0x00000000
[15:30:21.450]    __Result=0x00000000
[15:30:21.450]  </debugvars>
[15:30:21.450]  
[15:30:21.450]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:30:21.450]    <block atomic="false" info="">
[15:30:21.450]      __var SW_DP_ABORT       = 0x0;
[15:30:21.460]        // -> [SW_DP_ABORT <= 0x00000000]
[15:30:21.460]      __var DP_CTRL_STAT      = 0x4;
[15:30:21.460]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:30:21.460]      __var DP_SELECT         = 0x8;
[15:30:21.460]        // -> [DP_SELECT <= 0x00000008]
[15:30:21.460]      __var powered_down      = 0;
[15:30:21.460]        // -> [powered_down <= 0x00000000]
[15:30:21.460]      WriteDP(DP_SELECT, 0x00000000);
[15:30:21.460]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:30:21.460]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:30:21.460]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:30:21.460]        // -> [powered_down <= 0x00000001]
[15:30:21.460]    </block>
[15:30:21.460]    <control if="powered_down" while="" timeout="0" info="">
[15:30:21.460]      // if-block "powered_down"
[15:30:21.460]        // =>  TRUE
[15:30:21.460]      <block atomic="false" info="">
[15:30:21.460]        Message(0, "Debug/System power-up request sent");
[15:30:21.470]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:30:21.470]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:30:21.470]      </block>
[15:30:21.470]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:30:21.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:30:21.480]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:30:21.480]        // while-condition  =>  FALSE
[15:30:21.480]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:30:21.480]      </control>
[15:30:21.480]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:30:21.480]        // if-block "(__protocol & 0xFFFF) == 1"
[15:30:21.480]          // =>  FALSE
[15:30:21.480]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:30:21.480]      </control>
[15:30:21.480]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:30:21.480]        // if-block "(__protocol & 0xFFFF) == 2"
[15:30:21.480]          // =>  TRUE
[15:30:21.480]        <block atomic="false" info="">
[15:30:21.480]          Message(0, "executing SWD power up");
[15:30:21.480]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:30:21.480]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:30:21.480]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:30:21.490]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:30:21.490]        </block>
[15:30:21.490]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:30:21.490]      </control>
[15:30:21.490]      // end if-block "powered_down"
[15:30:21.490]    </control>
[15:30:21.490]    <block atomic="false" info="">
[15:30:21.490]      __var DEBUG_PORT_VAL    = 0;
[15:30:21.490]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:30:21.490]      __var ACCESS_POINT_VAL  = 0;
[15:30:21.490]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:30:21.490]      __ap = 1; 
[15:30:21.490]        // -> [__ap <= 0x00000001]
[15:30:21.490]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:30:21.500]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:30:21.500]      __ap = 4;
[15:30:21.500]        // -> [__ap <= 0x00000004]
[15:30:21.500]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:30:21.510]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:30:21.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:30:21.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:30:21.510]    </block>
[15:30:21.510]    <block atomic="false" info="">
[15:30:21.510]      __var nReset = 0x80;
[15:30:21.510]        // -> [nReset <= 0x00000080]
[15:30:21.510]      __var canReadPins = 0;
[15:30:21.510]        // -> [canReadPins <= 0x00000000]
[15:30:21.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:30:21.520]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:30:21.520]        // -> [canReadPins <= 0x00000001]
[15:30:21.520]    </block>
[15:30:21.520]    <control if="" while="1" timeout="200" info="">
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.520]      // while "1"  (timeout="200")
[15:30:21.520]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.530]      // while "1"  (timeout="200")
[15:30:21.530]      // while-condition  =>  TRUE
[15:30:21.540]      // while "1"  (timeout="200")
[15:30:21.540]      // while  =>  TIMEOUT
[15:30:21.540]      // end while "1"
[15:30:21.540]    </control>
[15:30:21.540]    <control if="canReadPins" while="" timeout="0" info="">
[15:30:21.540]      // if-block "canReadPins"
[15:30:21.540]        // =>  TRUE
[15:30:21.540]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:30:21.540]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:30:21.540]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:30:21.540]        // while-condition  =>  FALSE
[15:30:21.540]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:30:21.540]      </control>
[15:30:21.540]      // end if-block "canReadPins"
[15:30:21.540]    </control>
[15:30:21.540]    <control if="!canReadPins" while="" timeout="0" info="">
[15:30:21.540]      // if-block "!canReadPins"
[15:30:21.540]        // =>  FALSE
[15:30:21.540]      // skip if-block "!canReadPins"
[15:30:21.540]    </control>
[15:30:21.540]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:30:21.540]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:30:21.540]        // =>  TRUE
[15:30:21.540]      <block atomic="false" info="">
[15:30:21.540]        WriteAP(0x00, 0x190008);
[15:30:21.550]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:30:21.550]        WriteAP(0xF0, 0x01);
[15:30:21.560]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:30:21.560]      </block>
[15:30:21.560]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:30:21.560]    </control>
[15:30:21.560]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:30:21.560]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:30:21.560]        // =>  FALSE
[15:30:21.560]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:30:21.560]    </control>
[15:30:21.560]    <block atomic="false" info="">
[15:30:21.560]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:30:21.570]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:30:21.570]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:30:21.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:30:21.570]      __ap = 0; //lets make sure we reset the access point selection
[15:30:21.570]        // -> [__ap <= 0x00000000]
[15:30:21.570]    </block>
[15:30:21.570]  </sequence>
[15:30:21.570]  
[15:30:21.620]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:30:21.620]  
[15:30:21.620]  <debugvars>
[15:30:21.620]    // Pre-defined
[15:30:21.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:30:21.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:30:21.620]    __dp=0x00000000
[15:30:21.620]    __ap=0x00000000
[15:30:21.620]    __traceout=0x00000000      (Trace Disabled)
[15:30:21.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:30:21.620]    __FlashAddr=0x00000000
[15:30:21.620]    __FlashLen=0x00000000
[15:30:21.620]    __FlashArg=0x00000000
[15:30:21.620]    __FlashOp=0x00000000
[15:30:21.620]    __Result=0x00000000
[15:30:21.620]  </debugvars>
[15:30:21.620]  
[15:30:21.620]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:30:21.620]    <block atomic="false" info="">
[15:30:21.620]      __var deviceID = 0;
[15:30:21.620]        // -> [deviceID <= 0x00000000]
[15:30:21.620]      __var version = 0;
[15:30:21.620]        // -> [version <= 0x00000000]
[15:30:21.620]      __var partNum = 0;
[15:30:21.620]        // -> [partNum <= 0x00000000]
[15:30:21.620]      __var manuf = 0;
[15:30:21.620]        // -> [manuf <= 0x00000000]
[15:30:21.620]      __var isMSPM0G1X0X_G3X0X = 0;
[15:30:21.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:30:21.620]      __var isProduction = 0;
[15:30:21.620]        // -> [isProduction <= 0x00000000]
[15:30:21.620]      __var continueId = 0;
[15:30:21.620]        // -> [continueId <= 0x00000000]
[15:30:21.630]      deviceID =   Read32(0x41C40004);
[15:30:21.630]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:30:21.630]        // -> [deviceID <= 0x2BB8802F]
[15:30:21.630]      version = deviceID >> 28;
[15:30:21.630]        // -> [version <= 0x00000002]
[15:30:21.630]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:30:21.640]        // -> [partNum <= 0x0000BB88]
[15:30:21.640]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:30:21.640]        // -> [manuf <= 0x00000017]
[15:30:21.640]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:30:21.640]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:30:21.640]      isProduction = (version > 0);
[15:30:21.640]        // -> [isProduction <= 0x00000001]
[15:30:21.640]    </block>
[15:30:21.640]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:30:21.640]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:30:21.640]        // =>  FALSE
[15:30:21.640]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:30:21.640]    </control>
[15:30:21.640]    <control if="continueId == 4" while="" timeout="0" info="">
[15:30:21.640]      // if-block "continueId == 4"
[15:30:21.640]        // =>  FALSE
[15:30:21.640]      // skip if-block "continueId == 4"
[15:30:21.640]    </control>
[15:30:21.640]    <control if="!isProduction" while="" timeout="0" info="">
[15:30:21.640]      // if-block "!isProduction"
[15:30:21.640]        // =>  FALSE
[15:30:21.640]      // skip if-block "!isProduction"
[15:30:21.640]    </control>
[15:30:21.640]  </sequence>
[15:30:21.640]  
[15:31:31.997]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:31:31.997]  
[15:31:31.997]  <debugvars>
[15:31:31.997]    // Pre-defined
[15:31:31.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:31:31.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:31:31.997]    __dp=0x00000000
[15:31:31.997]    __ap=0x00000000
[15:31:31.997]    __traceout=0x00000000      (Trace Disabled)
[15:31:31.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:31:31.997]    __FlashAddr=0x00000000
[15:31:31.997]    __FlashLen=0x00000000
[15:31:31.997]    __FlashArg=0x00000000
[15:31:31.997]    __FlashOp=0x00000000
[15:31:31.997]    __Result=0x00000000
[15:31:31.997]  </debugvars>
[15:31:31.997]  
[15:31:31.997]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:31:31.997]    <block atomic="false" info="">
[15:31:31.997]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:31:31.997]        // -> [isSWJ <= 0x00000001]
[15:31:31.997]      __var hasDormant = __protocol & 0x00020000;
[15:31:31.997]        // -> [hasDormant <= 0x00000000]
[15:31:32.007]      __var protType   = __protocol & 0x0000FFFF;
[15:31:32.007]        // -> [protType <= 0x00000002]
[15:31:32.007]    </block>
[15:31:32.007]    <control if="protType == 1" while="" timeout="0" info="">
[15:31:32.007]      // if-block "protType == 1"
[15:31:32.007]        // =>  FALSE
[15:31:32.007]      // skip if-block "protType == 1"
[15:31:32.007]    </control>
[15:31:32.007]    <control if="protType == 2" while="" timeout="0" info="">
[15:31:32.007]      // if-block "protType == 2"
[15:31:32.007]        // =>  TRUE
[15:31:32.007]      <control if="isSWJ" while="" timeout="0" info="">
[15:31:32.007]        // if-block "isSWJ"
[15:31:32.007]          // =>  TRUE
[15:31:32.007]        <control if="hasDormant" while="" timeout="0" info="">
[15:31:32.007]          // if-block "hasDormant"
[15:31:32.007]            // =>  FALSE
[15:31:32.007]          // skip if-block "hasDormant"
[15:31:32.007]        </control>
[15:31:32.007]        <control if="!hasDormant" while="" timeout="0" info="">
[15:31:32.007]          // if-block "!hasDormant"
[15:31:32.007]            // =>  TRUE
[15:31:32.007]          <block atomic="false" info="">
[15:31:32.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:31:32.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:31:32.007]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:31:32.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:31:32.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:31:32.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:31:32.017]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:31:32.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:31:32.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:31:32.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:31:32.027]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:31:32.027]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:31:32.027]          </block>
[15:31:32.027]          // end if-block "!hasDormant"
[15:31:32.027]        </control>
[15:31:32.027]        // end if-block "isSWJ"
[15:31:32.027]      </control>
[15:31:32.027]      <control if="!isSWJ" while="" timeout="0" info="">
[15:31:32.027]        // if-block "!isSWJ"
[15:31:32.027]          // =>  FALSE
[15:31:32.027]        // skip if-block "!isSWJ"
[15:31:32.027]      </control>
[15:31:32.027]      <block atomic="false" info="">
[15:31:32.027]        ReadDP(0x0);
[15:31:32.027]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:31:32.027]      </block>
[15:31:32.027]      // end if-block "protType == 2"
[15:31:32.027]    </control>
[15:31:32.027]  </sequence>
[15:31:32.027]  
[15:31:32.037]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:31:32.037]  
[15:31:32.037]  <debugvars>
[15:31:32.037]    // Pre-defined
[15:31:32.037]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:31:32.037]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:31:32.037]    __dp=0x00000000
[15:31:32.037]    __ap=0x00000000
[15:31:32.037]    __traceout=0x00000000      (Trace Disabled)
[15:31:32.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:31:32.037]    __FlashAddr=0x00000000
[15:31:32.037]    __FlashLen=0x00000000
[15:31:32.037]    __FlashArg=0x00000000
[15:31:32.037]    __FlashOp=0x00000000
[15:31:32.037]    __Result=0x00000000
[15:31:32.037]  </debugvars>
[15:31:32.037]  
[15:31:32.037]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:31:32.047]    <block atomic="false" info="">
[15:31:32.047]      __var SW_DP_ABORT       = 0x0;
[15:31:32.047]        // -> [SW_DP_ABORT <= 0x00000000]
[15:31:32.047]      __var DP_CTRL_STAT      = 0x4;
[15:31:32.047]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:31:32.047]      __var DP_SELECT         = 0x8;
[15:31:32.047]        // -> [DP_SELECT <= 0x00000008]
[15:31:32.047]      __var powered_down      = 0;
[15:31:32.047]        // -> [powered_down <= 0x00000000]
[15:31:32.047]      WriteDP(DP_SELECT, 0x00000000);
[15:31:32.047]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:31:32.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:31:32.047]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:31:32.047]        // -> [powered_down <= 0x00000001]
[15:31:32.047]    </block>
[15:31:32.047]    <control if="powered_down" while="" timeout="0" info="">
[15:31:32.057]      // if-block "powered_down"
[15:31:32.057]        // =>  TRUE
[15:31:32.057]      <block atomic="false" info="">
[15:31:32.057]        Message(0, "Debug/System power-up request sent");
[15:31:32.057]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:31:32.057]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:31:32.057]      </block>
[15:31:32.057]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:31:32.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:31:32.067]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:31:32.067]        // while-condition  =>  FALSE
[15:31:32.067]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:31:32.067]      </control>
[15:31:32.067]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:31:32.067]        // if-block "(__protocol & 0xFFFF) == 1"
[15:31:32.067]          // =>  FALSE
[15:31:32.067]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:31:32.067]      </control>
[15:31:32.067]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:31:32.067]        // if-block "(__protocol & 0xFFFF) == 2"
[15:31:32.067]          // =>  TRUE
[15:31:32.067]        <block atomic="false" info="">
[15:31:32.067]          Message(0, "executing SWD power up");
[15:31:32.067]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:31:32.077]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:31:32.077]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:31:32.077]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:31:32.077]        </block>
[15:31:32.077]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:31:32.077]      </control>
[15:31:32.077]      // end if-block "powered_down"
[15:31:32.077]    </control>
[15:31:32.077]    <block atomic="false" info="">
[15:31:32.077]      __var DEBUG_PORT_VAL    = 0;
[15:31:32.077]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:31:32.077]      __var ACCESS_POINT_VAL  = 0;
[15:31:32.077]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:31:32.077]      __ap = 1; 
[15:31:32.077]        // -> [__ap <= 0x00000001]
[15:31:32.077]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:31:32.087]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:31:32.087]      __ap = 4;
[15:31:32.087]        // -> [__ap <= 0x00000004]
[15:31:32.087]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:31:32.097]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:31:32.097]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:31:32.097]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:31:32.107]    </block>
[15:31:32.107]    <block atomic="false" info="">
[15:31:32.107]      __var nReset = 0x80;
[15:31:32.107]        // -> [nReset <= 0x00000080]
[15:31:32.107]      __var canReadPins = 0;
[15:31:32.107]        // -> [canReadPins <= 0x00000000]
[15:31:32.107]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:31:32.107]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:31:32.107]        // -> [canReadPins <= 0x00000001]
[15:31:32.107]    </block>
[15:31:32.107]    <control if="" while="1" timeout="200" info="">
[15:31:32.107]      // while "1"  (timeout="200")
[15:31:32.107]      // while-condition  =>  TRUE
[15:31:32.107]      // while "1"  (timeout="200")
[15:31:32.107]      // while-condition  =>  TRUE
[15:31:32.107]      // while "1"  (timeout="200")
[15:31:32.117]      // while-condition  =>  TRUE
[15:31:32.117]      // while "1"  (timeout="200")
[15:31:32.117]      // while  =>  TIMEOUT
[15:31:32.117]      // end while "1"
[15:31:32.117]    </control>
[15:31:32.117]    <control if="canReadPins" while="" timeout="0" info="">
[15:31:32.117]      // if-block "canReadPins"
[15:31:32.117]        // =>  TRUE
[15:31:32.117]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:31:32.117]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:31:32.117]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:31:32.117]        // while-condition  =>  FALSE
[15:31:32.117]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:31:32.117]      </control>
[15:31:32.117]      // end if-block "canReadPins"
[15:31:32.117]    </control>
[15:31:32.117]    <control if="!canReadPins" while="" timeout="0" info="">
[15:31:32.117]      // if-block "!canReadPins"
[15:31:32.117]        // =>  FALSE
[15:31:32.117]      // skip if-block "!canReadPins"
[15:31:32.117]    </control>
[15:31:32.124]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:31:32.124]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:31:32.124]        // =>  TRUE
[15:31:32.124]      <block atomic="false" info="">
[15:31:32.124]        WriteAP(0x00, 0x190008);
[15:31:32.127]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:31:32.127]        WriteAP(0xF0, 0x01);
[15:31:32.137]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:31:32.137]      </block>
[15:31:32.137]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:31:32.137]    </control>
[15:31:32.137]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:31:32.137]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:31:32.137]        // =>  FALSE
[15:31:32.137]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:31:32.137]    </control>
[15:31:32.137]    <block atomic="false" info="">
[15:31:32.137]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:31:32.147]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:31:32.147]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:31:32.147]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:31:32.157]      __ap = 0; //lets make sure we reset the access point selection
[15:31:32.157]        // -> [__ap <= 0x00000000]
[15:31:32.157]    </block>
[15:31:32.157]  </sequence>
[15:31:32.157]  
[15:31:32.217]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:31:32.217]  
[15:31:32.217]  <debugvars>
[15:31:32.217]    // Pre-defined
[15:31:32.217]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:31:32.217]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:31:32.217]    __dp=0x00000000
[15:31:32.217]    __ap=0x00000000
[15:31:32.224]    __traceout=0x00000000      (Trace Disabled)
[15:31:32.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:31:32.224]    __FlashAddr=0x00000000
[15:31:32.224]    __FlashLen=0x00000000
[15:31:32.224]    __FlashArg=0x00000000
[15:31:32.224]    __FlashOp=0x00000000
[15:31:32.224]    __Result=0x00000000
[15:31:32.224]  </debugvars>
[15:31:32.224]  
[15:31:32.224]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:31:32.224]    <block atomic="false" info="">
[15:31:32.224]      __var deviceID = 0;
[15:31:32.224]        // -> [deviceID <= 0x00000000]
[15:31:32.224]      __var version = 0;
[15:31:32.224]        // -> [version <= 0x00000000]
[15:31:32.224]      __var partNum = 0;
[15:31:32.224]        // -> [partNum <= 0x00000000]
[15:31:32.227]      __var manuf = 0;
[15:31:32.227]        // -> [manuf <= 0x00000000]
[15:31:32.227]      __var isMSPM0G1X0X_G3X0X = 0;
[15:31:32.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:31:32.227]      __var isProduction = 0;
[15:31:32.227]        // -> [isProduction <= 0x00000000]
[15:31:32.227]      __var continueId = 0;
[15:31:32.227]        // -> [continueId <= 0x00000000]
[15:31:32.227]      deviceID =   Read32(0x41C40004);
[15:31:32.237]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:31:32.237]        // -> [deviceID <= 0x2BB8802F]
[15:31:32.237]      version = deviceID >> 28;
[15:31:32.237]        // -> [version <= 0x00000002]
[15:31:32.237]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:31:32.237]        // -> [partNum <= 0x0000BB88]
[15:31:32.237]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:31:32.237]        // -> [manuf <= 0x00000017]
[15:31:32.237]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:31:32.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:31:32.237]      isProduction = (version > 0);
[15:31:32.237]        // -> [isProduction <= 0x00000001]
[15:31:32.237]    </block>
[15:31:32.237]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:31:32.237]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:31:32.237]        // =>  FALSE
[15:31:32.237]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:31:32.237]    </control>
[15:31:32.237]    <control if="continueId == 4" while="" timeout="0" info="">
[15:31:32.237]      // if-block "continueId == 4"
[15:31:32.237]        // =>  FALSE
[15:31:32.237]      // skip if-block "continueId == 4"
[15:31:32.237]    </control>
[15:31:32.237]    <control if="!isProduction" while="" timeout="0" info="">
[15:31:32.237]      // if-block "!isProduction"
[15:31:32.237]        // =>  FALSE
[15:31:32.237]      // skip if-block "!isProduction"
[15:31:32.237]    </control>
[15:31:32.237]  </sequence>
[15:31:32.237]  
[15:33:23.631]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:33:23.631]  
[15:33:23.645]  <debugvars>
[15:33:23.645]    // Pre-defined
[15:33:23.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:33:23.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:33:23.645]    __dp=0x00000000
[15:33:23.645]    __ap=0x00000000
[15:33:23.645]    __traceout=0x00000000      (Trace Disabled)
[15:33:23.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:33:23.645]    __FlashAddr=0x00000000
[15:33:23.645]    __FlashLen=0x00000000
[15:33:23.645]    __FlashArg=0x00000000
[15:33:23.645]    __FlashOp=0x00000000
[15:33:23.645]    __Result=0x00000000
[15:33:23.647]  </debugvars>
[15:33:23.647]  
[15:33:23.647]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:33:23.647]    <block atomic="false" info="">
[15:33:23.647]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:33:23.647]        // -> [isSWJ <= 0x00000001]
[15:33:23.647]      __var hasDormant = __protocol & 0x00020000;
[15:33:23.647]        // -> [hasDormant <= 0x00000000]
[15:33:23.647]      __var protType   = __protocol & 0x0000FFFF;
[15:33:23.647]        // -> [protType <= 0x00000002]
[15:33:23.647]    </block>
[15:33:23.647]    <control if="protType == 1" while="" timeout="0" info="">
[15:33:23.647]      // if-block "protType == 1"
[15:33:23.647]        // =>  FALSE
[15:33:23.647]      // skip if-block "protType == 1"
[15:33:23.647]    </control>
[15:33:23.647]    <control if="protType == 2" while="" timeout="0" info="">
[15:33:23.647]      // if-block "protType == 2"
[15:33:23.647]        // =>  TRUE
[15:33:23.647]      <control if="isSWJ" while="" timeout="0" info="">
[15:33:23.647]        // if-block "isSWJ"
[15:33:23.647]          // =>  TRUE
[15:33:23.647]        <control if="hasDormant" while="" timeout="0" info="">
[15:33:23.647]          // if-block "hasDormant"
[15:33:23.647]            // =>  FALSE
[15:33:23.647]          // skip if-block "hasDormant"
[15:33:23.652]        </control>
[15:33:23.652]        <control if="!hasDormant" while="" timeout="0" info="">
[15:33:23.652]          // if-block "!hasDormant"
[15:33:23.652]            // =>  TRUE
[15:33:23.652]          <block atomic="false" info="">
[15:33:23.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:33:23.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:33:23.652]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:33:23.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:33:23.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:33:23.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:33:23.663]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:33:23.669]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:33:23.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:33:23.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:33:23.675]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:33:23.679]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:33:23.679]          </block>
[15:33:23.679]          // end if-block "!hasDormant"
[15:33:23.679]        </control>
[15:33:23.679]        // end if-block "isSWJ"
[15:33:23.679]      </control>
[15:33:23.680]      <control if="!isSWJ" while="" timeout="0" info="">
[15:33:23.680]        // if-block "!isSWJ"
[15:33:23.680]          // =>  FALSE
[15:33:23.680]        // skip if-block "!isSWJ"
[15:33:23.680]      </control>
[15:33:23.681]      <block atomic="false" info="">
[15:33:23.681]        ReadDP(0x0);
[15:33:23.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:33:23.685]      </block>
[15:33:23.685]      // end if-block "protType == 2"
[15:33:23.685]    </control>
[15:33:23.685]  </sequence>
[15:33:23.685]  
[15:33:23.691]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:33:23.691]  
[15:33:23.692]  <debugvars>
[15:33:23.692]    // Pre-defined
[15:33:23.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:33:23.692]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:33:23.692]    __dp=0x00000000
[15:33:23.693]    __ap=0x00000000
[15:33:23.693]    __traceout=0x00000000      (Trace Disabled)
[15:33:23.693]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:33:23.693]    __FlashAddr=0x00000000
[15:33:23.693]    __FlashLen=0x00000000
[15:33:23.693]    __FlashArg=0x00000000
[15:33:23.694]    __FlashOp=0x00000000
[15:33:23.694]    __Result=0x00000000
[15:33:23.694]  </debugvars>
[15:33:23.694]  
[15:33:23.694]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:33:23.694]    <block atomic="false" info="">
[15:33:23.694]      __var SW_DP_ABORT       = 0x0;
[15:33:23.695]        // -> [SW_DP_ABORT <= 0x00000000]
[15:33:23.695]      __var DP_CTRL_STAT      = 0x4;
[15:33:23.695]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:33:23.695]      __var DP_SELECT         = 0x8;
[15:33:23.695]        // -> [DP_SELECT <= 0x00000008]
[15:33:23.695]      __var powered_down      = 0;
[15:33:23.695]        // -> [powered_down <= 0x00000000]
[15:33:23.696]      WriteDP(DP_SELECT, 0x00000000);
[15:33:23.700]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:33:23.701]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:33:23.703]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:33:23.703]        // -> [powered_down <= 0x00000001]
[15:33:23.704]    </block>
[15:33:23.704]    <control if="powered_down" while="" timeout="0" info="">
[15:33:23.704]      // if-block "powered_down"
[15:33:23.704]        // =>  TRUE
[15:33:23.704]      <block atomic="false" info="">
[15:33:23.704]        Message(0, "Debug/System power-up request sent");
[15:33:23.709]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:33:23.716]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:33:23.717]      </block>
[15:33:23.717]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:33:23.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:33:23.720]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:33:23.721]        // while-condition  =>  FALSE
[15:33:23.721]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:33:23.721]      </control>
[15:33:23.721]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:33:23.722]        // if-block "(__protocol & 0xFFFF) == 1"
[15:33:23.722]          // =>  FALSE
[15:33:23.722]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:33:23.722]      </control>
[15:33:23.722]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:33:23.723]        // if-block "(__protocol & 0xFFFF) == 2"
[15:33:23.723]          // =>  TRUE
[15:33:23.723]        <block atomic="false" info="">
[15:33:23.724]          Message(0, "executing SWD power up");
[15:33:23.727]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:33:23.729]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:33:23.729]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:33:23.729]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:33:23.729]        </block>
[15:33:23.729]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:33:23.729]      </control>
[15:33:23.729]      // end if-block "powered_down"
[15:33:23.729]    </control>
[15:33:23.729]    <block atomic="false" info="">
[15:33:23.729]      __var DEBUG_PORT_VAL    = 0;
[15:33:23.729]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:33:23.729]      __var ACCESS_POINT_VAL  = 0;
[15:33:23.729]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:33:23.729]      __ap = 1; 
[15:33:23.729]        // -> [__ap <= 0x00000001]
[15:33:23.729]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:33:23.740]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:33:23.740]      __ap = 4;
[15:33:23.740]        // -> [__ap <= 0x00000004]
[15:33:23.740]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:33:23.750]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:33:23.750]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:33:23.750]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:33:23.750]    </block>
[15:33:23.750]    <block atomic="false" info="">
[15:33:23.750]      __var nReset = 0x80;
[15:33:23.750]        // -> [nReset <= 0x00000080]
[15:33:23.750]      __var canReadPins = 0;
[15:33:23.750]        // -> [canReadPins <= 0x00000000]
[15:33:23.750]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:33:23.757]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:33:23.757]        // -> [canReadPins <= 0x00000001]
[15:33:23.757]    </block>
[15:33:23.757]    <control if="" while="1" timeout="200" info="">
[15:33:23.757]      // while "1"  (timeout="200")
[15:33:23.757]      // while-condition  =>  TRUE
[15:33:23.757]      // while "1"  (timeout="200")
[15:33:23.757]      // while-condition  =>  TRUE
[15:33:23.757]      // while "1"  (timeout="200")
[15:33:23.760]      // while-condition  =>  TRUE
[15:33:23.760]      // while "1"  (timeout="200")
[15:33:23.760]      // while-condition  =>  TRUE
[15:33:23.760]      // while "1"  (timeout="200")
[15:33:23.760]      // while-condition  =>  TRUE
[15:33:23.760]      // while "1"  (timeout="200")
[15:33:23.760]      // while-condition  =>  TRUE
[15:33:23.760]      // while "1"  (timeout="200")
[15:33:23.760]      // while-condition  =>  TRUE
[15:33:23.760]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.761]      // while-condition  =>  TRUE
[15:33:23.761]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.767]      // while "1"  (timeout="200")
[15:33:23.767]      // while-condition  =>  TRUE
[15:33:23.770]      // while "1"  (timeout="200")
[15:33:23.770]      // while  =>  TIMEOUT
[15:33:23.770]      // end while "1"
[15:33:23.770]    </control>
[15:33:23.770]    <control if="canReadPins" while="" timeout="0" info="">
[15:33:23.770]      // if-block "canReadPins"
[15:33:23.770]        // =>  TRUE
[15:33:23.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:33:23.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:33:23.772]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:33:23.772]        // while-condition  =>  FALSE
[15:33:23.772]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:33:23.772]      </control>
[15:33:23.772]      // end if-block "canReadPins"
[15:33:23.772]    </control>
[15:33:23.772]    <control if="!canReadPins" while="" timeout="0" info="">
[15:33:23.772]      // if-block "!canReadPins"
[15:33:23.772]        // =>  FALSE
[15:33:23.772]      // skip if-block "!canReadPins"
[15:33:23.772]    </control>
[15:33:23.772]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:33:23.772]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:33:23.772]        // =>  TRUE
[15:33:23.772]      <block atomic="false" info="">
[15:33:23.772]        WriteAP(0x00, 0x190008);
[15:33:23.780]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:33:23.780]        WriteAP(0xF0, 0x01);
[15:33:23.780]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:33:23.790]      </block>
[15:33:23.790]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:33:23.790]    </control>
[15:33:23.790]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:33:23.790]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:33:23.790]        // =>  FALSE
[15:33:23.790]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:33:23.790]    </control>
[15:33:23.790]    <block atomic="false" info="">
[15:33:23.790]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:33:23.790]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:33:23.800]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:33:23.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:33:23.800]      __ap = 0; //lets make sure we reset the access point selection
[15:33:23.800]        // -> [__ap <= 0x00000000]
[15:33:23.800]    </block>
[15:33:23.800]  </sequence>
[15:33:23.800]  
[15:33:23.861]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:33:23.861]  
[15:33:23.861]  <debugvars>
[15:33:23.861]    // Pre-defined
[15:33:23.861]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:33:23.861]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:33:23.861]    __dp=0x00000000
[15:33:23.861]    __ap=0x00000000
[15:33:23.861]    __traceout=0x00000000      (Trace Disabled)
[15:33:23.861]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:33:23.861]    __FlashAddr=0x00000000
[15:33:23.861]    __FlashLen=0x00000000
[15:33:23.861]    __FlashArg=0x00000000
[15:33:23.861]    __FlashOp=0x00000000
[15:33:23.861]    __Result=0x00000000
[15:33:23.861]  </debugvars>
[15:33:23.861]  
[15:33:23.861]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:33:23.861]    <block atomic="false" info="">
[15:33:23.861]      __var deviceID = 0;
[15:33:23.861]        // -> [deviceID <= 0x00000000]
[15:33:23.861]      __var version = 0;
[15:33:23.861]        // -> [version <= 0x00000000]
[15:33:23.861]      __var partNum = 0;
[15:33:23.861]        // -> [partNum <= 0x00000000]
[15:33:23.861]      __var manuf = 0;
[15:33:23.861]        // -> [manuf <= 0x00000000]
[15:33:23.861]      __var isMSPM0G1X0X_G3X0X = 0;
[15:33:23.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:33:23.861]      __var isProduction = 0;
[15:33:23.861]        // -> [isProduction <= 0x00000000]
[15:33:23.861]      __var continueId = 0;
[15:33:23.861]        // -> [continueId <= 0x00000000]
[15:33:23.861]      deviceID =   Read32(0x41C40004);
[15:33:23.880]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:33:23.880]        // -> [deviceID <= 0x2BB8802F]
[15:33:23.880]      version = deviceID >> 28;
[15:33:23.880]        // -> [version <= 0x00000002]
[15:33:23.880]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:33:23.880]        // -> [partNum <= 0x0000BB88]
[15:33:23.880]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:33:23.880]        // -> [manuf <= 0x00000017]
[15:33:23.880]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:33:23.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:33:23.880]      isProduction = (version > 0);
[15:33:23.880]        // -> [isProduction <= 0x00000001]
[15:33:23.880]    </block>
[15:33:23.880]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:33:23.880]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:33:23.880]        // =>  FALSE
[15:33:23.880]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:33:23.880]    </control>
[15:33:23.880]    <control if="continueId == 4" while="" timeout="0" info="">
[15:33:23.880]      // if-block "continueId == 4"
[15:33:23.880]        // =>  FALSE
[15:33:23.880]      // skip if-block "continueId == 4"
[15:33:23.880]    </control>
[15:33:23.880]    <control if="!isProduction" while="" timeout="0" info="">
[15:33:23.880]      // if-block "!isProduction"
[15:33:23.880]        // =>  FALSE
[15:33:23.880]      // skip if-block "!isProduction"
[15:33:23.880]    </control>
[15:33:23.880]  </sequence>
[15:33:23.880]  
[15:34:33.197]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:34:33.197]  
[15:34:33.208]  <debugvars>
[15:34:33.208]    // Pre-defined
[15:34:33.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:34:33.208]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:34:33.208]    __dp=0x00000000
[15:34:33.208]    __ap=0x00000000
[15:34:33.208]    __traceout=0x00000000      (Trace Disabled)
[15:34:33.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:34:33.208]    __FlashAddr=0x00000000
[15:34:33.208]    __FlashLen=0x00000000
[15:34:33.208]    __FlashArg=0x00000000
[15:34:33.208]    __FlashOp=0x00000000
[15:34:33.208]    __Result=0x00000000
[15:34:33.208]  </debugvars>
[15:34:33.208]  
[15:34:33.208]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:34:33.208]    <block atomic="false" info="">
[15:34:33.208]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:34:33.208]        // -> [isSWJ <= 0x00000001]
[15:34:33.208]      __var hasDormant = __protocol & 0x00020000;
[15:34:33.208]        // -> [hasDormant <= 0x00000000]
[15:34:33.208]      __var protType   = __protocol & 0x0000FFFF;
[15:34:33.208]        // -> [protType <= 0x00000002]
[15:34:33.208]    </block>
[15:34:33.208]    <control if="protType == 1" while="" timeout="0" info="">
[15:34:33.208]      // if-block "protType == 1"
[15:34:33.208]        // =>  FALSE
[15:34:33.208]      // skip if-block "protType == 1"
[15:34:33.208]    </control>
[15:34:33.208]    <control if="protType == 2" while="" timeout="0" info="">
[15:34:33.208]      // if-block "protType == 2"
[15:34:33.208]        // =>  TRUE
[15:34:33.208]      <control if="isSWJ" while="" timeout="0" info="">
[15:34:33.208]        // if-block "isSWJ"
[15:34:33.208]          // =>  TRUE
[15:34:33.208]        <control if="hasDormant" while="" timeout="0" info="">
[15:34:33.208]          // if-block "hasDormant"
[15:34:33.208]            // =>  FALSE
[15:34:33.208]          // skip if-block "hasDormant"
[15:34:33.208]        </control>
[15:34:33.208]        <control if="!hasDormant" while="" timeout="0" info="">
[15:34:33.208]          // if-block "!hasDormant"
[15:34:33.208]            // =>  TRUE
[15:34:33.208]          <block atomic="false" info="">
[15:34:33.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:34:33.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:34:33.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:34:33.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:34:33.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:34:33.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:34:33.217]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:34:33.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:34:33.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:34:33.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:34:33.227]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:34:33.227]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:34:33.227]          </block>
[15:34:33.227]          // end if-block "!hasDormant"
[15:34:33.227]        </control>
[15:34:33.227]        // end if-block "isSWJ"
[15:34:33.227]      </control>
[15:34:33.227]      <control if="!isSWJ" while="" timeout="0" info="">
[15:34:33.227]        // if-block "!isSWJ"
[15:34:33.227]          // =>  FALSE
[15:34:33.227]        // skip if-block "!isSWJ"
[15:34:33.227]      </control>
[15:34:33.227]      <block atomic="false" info="">
[15:34:33.227]        ReadDP(0x0);
[15:34:33.237]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:34:33.237]      </block>
[15:34:33.237]      // end if-block "protType == 2"
[15:34:33.237]    </control>
[15:34:33.237]  </sequence>
[15:34:33.237]  
[15:34:33.247]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:34:33.247]  
[15:34:33.247]  <debugvars>
[15:34:33.247]    // Pre-defined
[15:34:33.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:34:33.247]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:34:33.247]    __dp=0x00000000
[15:34:33.247]    __ap=0x00000000
[15:34:33.247]    __traceout=0x00000000      (Trace Disabled)
[15:34:33.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:34:33.247]    __FlashAddr=0x00000000
[15:34:33.247]    __FlashLen=0x00000000
[15:34:33.247]    __FlashArg=0x00000000
[15:34:33.247]    __FlashOp=0x00000000
[15:34:33.247]    __Result=0x00000000
[15:34:33.247]  </debugvars>
[15:34:33.247]  
[15:34:33.247]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:34:33.247]    <block atomic="false" info="">
[15:34:33.247]      __var SW_DP_ABORT       = 0x0;
[15:34:33.247]        // -> [SW_DP_ABORT <= 0x00000000]
[15:34:33.247]      __var DP_CTRL_STAT      = 0x4;
[15:34:33.247]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:34:33.247]      __var DP_SELECT         = 0x8;
[15:34:33.247]        // -> [DP_SELECT <= 0x00000008]
[15:34:33.247]      __var powered_down      = 0;
[15:34:33.247]        // -> [powered_down <= 0x00000000]
[15:34:33.247]      WriteDP(DP_SELECT, 0x00000000);
[15:34:33.257]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:34:33.257]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:34:33.257]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:34:33.257]        // -> [powered_down <= 0x00000001]
[15:34:33.257]    </block>
[15:34:33.257]    <control if="powered_down" while="" timeout="0" info="">
[15:34:33.257]      // if-block "powered_down"
[15:34:33.257]        // =>  TRUE
[15:34:33.257]      <block atomic="false" info="">
[15:34:33.257]        Message(0, "Debug/System power-up request sent");
[15:34:33.267]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:34:33.267]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:34:33.267]      </block>
[15:34:33.267]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:34:33.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:34:33.267]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:34:33.267]        // while-condition  =>  FALSE
[15:34:33.267]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:34:33.267]      </control>
[15:34:33.267]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:34:33.267]        // if-block "(__protocol & 0xFFFF) == 1"
[15:34:33.277]          // =>  FALSE
[15:34:33.277]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:34:33.277]      </control>
[15:34:33.277]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:34:33.277]        // if-block "(__protocol & 0xFFFF) == 2"
[15:34:33.277]          // =>  TRUE
[15:34:33.277]        <block atomic="false" info="">
[15:34:33.277]          Message(0, "executing SWD power up");
[15:34:33.277]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:34:33.277]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:34:33.277]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:34:33.287]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:34:33.287]        </block>
[15:34:33.287]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:34:33.287]      </control>
[15:34:33.287]      // end if-block "powered_down"
[15:34:33.287]    </control>
[15:34:33.287]    <block atomic="false" info="">
[15:34:33.287]      __var DEBUG_PORT_VAL    = 0;
[15:34:33.287]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:34:33.287]      __var ACCESS_POINT_VAL  = 0;
[15:34:33.287]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:34:33.287]      __ap = 1; 
[15:34:33.287]        // -> [__ap <= 0x00000001]
[15:34:33.287]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:34:33.307]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:34:33.307]      __ap = 4;
[15:34:33.307]        // -> [__ap <= 0x00000004]
[15:34:33.307]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:34:33.307]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:34:33.307]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:34:33.307]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:34:33.317]    </block>
[15:34:33.317]    <block atomic="false" info="">
[15:34:33.317]      __var nReset = 0x80;
[15:34:33.317]        // -> [nReset <= 0x00000080]
[15:34:33.317]      __var canReadPins = 0;
[15:34:33.317]        // -> [canReadPins <= 0x00000000]
[15:34:33.317]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:34:33.317]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:34:33.317]        // -> [canReadPins <= 0x00000001]
[15:34:33.317]    </block>
[15:34:33.317]    <control if="" while="1" timeout="200" info="">
[15:34:33.317]      // while "1"  (timeout="200")
[15:34:33.317]      // while-condition  =>  TRUE
[15:34:33.317]      // while "1"  (timeout="200")
[15:34:33.317]      // while-condition  =>  TRUE
[15:34:33.317]      // while "1"  (timeout="200")
[15:34:33.317]      // while-condition  =>  TRUE
[15:34:33.317]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.327]      // while "1"  (timeout="200")
[15:34:33.327]      // while-condition  =>  TRUE
[15:34:33.337]      // while "1"  (timeout="200")
[15:34:33.337]      // while  =>  TIMEOUT
[15:34:33.337]      // end while "1"
[15:34:33.337]    </control>
[15:34:33.337]    <control if="canReadPins" while="" timeout="0" info="">
[15:34:33.337]      // if-block "canReadPins"
[15:34:33.337]        // =>  TRUE
[15:34:33.337]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:34:33.337]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:34:33.337]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:34:33.337]        // while-condition  =>  FALSE
[15:34:33.337]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:34:33.337]      </control>
[15:34:33.337]      // end if-block "canReadPins"
[15:34:33.337]    </control>
[15:34:33.337]    <control if="!canReadPins" while="" timeout="0" info="">
[15:34:33.337]      // if-block "!canReadPins"
[15:34:33.337]        // =>  FALSE
[15:34:33.337]      // skip if-block "!canReadPins"
[15:34:33.337]    </control>
[15:34:33.337]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:34:33.337]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:34:33.337]        // =>  TRUE
[15:34:33.337]      <block atomic="false" info="">
[15:34:33.337]        WriteAP(0x00, 0x190008);
[15:34:33.347]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:34:33.347]        WriteAP(0xF0, 0x01);
[15:34:33.347]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:34:33.347]      </block>
[15:34:33.347]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:34:33.347]    </control>
[15:34:33.347]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:34:33.347]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:34:33.347]        // =>  FALSE
[15:34:33.357]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:34:33.357]    </control>
[15:34:33.357]    <block atomic="false" info="">
[15:34:33.357]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:34:33.357]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:34:33.357]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:34:33.357]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:34:33.367]      __ap = 0; //lets make sure we reset the access point selection
[15:34:33.367]        // -> [__ap <= 0x00000000]
[15:34:33.367]    </block>
[15:34:33.367]  </sequence>
[15:34:33.367]  
[15:34:33.407]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:34:33.407]  
[15:34:33.407]  <debugvars>
[15:34:33.407]    // Pre-defined
[15:34:33.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:34:33.407]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:34:33.407]    __dp=0x00000000
[15:34:33.407]    __ap=0x00000000
[15:34:33.407]    __traceout=0x00000000      (Trace Disabled)
[15:34:33.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:34:33.407]    __FlashAddr=0x00000000
[15:34:33.407]    __FlashLen=0x00000000
[15:34:33.407]    __FlashArg=0x00000000
[15:34:33.407]    __FlashOp=0x00000000
[15:34:33.407]    __Result=0x00000000
[15:34:33.407]  </debugvars>
[15:34:33.407]  
[15:34:33.407]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:34:33.407]    <block atomic="false" info="">
[15:34:33.407]      __var deviceID = 0;
[15:34:33.407]        // -> [deviceID <= 0x00000000]
[15:34:33.407]      __var version = 0;
[15:34:33.407]        // -> [version <= 0x00000000]
[15:34:33.407]      __var partNum = 0;
[15:34:33.407]        // -> [partNum <= 0x00000000]
[15:34:33.407]      __var manuf = 0;
[15:34:33.407]        // -> [manuf <= 0x00000000]
[15:34:33.407]      __var isMSPM0G1X0X_G3X0X = 0;
[15:34:33.407]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:34:33.407]      __var isProduction = 0;
[15:34:33.407]        // -> [isProduction <= 0x00000000]
[15:34:33.407]      __var continueId = 0;
[15:34:33.407]        // -> [continueId <= 0x00000000]
[15:34:33.407]      deviceID =   Read32(0x41C40004);
[15:34:33.417]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:34:33.417]        // -> [deviceID <= 0x2BB8802F]
[15:34:33.417]      version = deviceID >> 28;
[15:34:33.417]        // -> [version <= 0x00000002]
[15:34:33.417]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:34:33.417]        // -> [partNum <= 0x0000BB88]
[15:34:33.417]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:34:33.417]        // -> [manuf <= 0x00000017]
[15:34:33.417]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:34:33.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:34:33.427]      isProduction = (version > 0);
[15:34:33.427]        // -> [isProduction <= 0x00000001]
[15:34:33.427]    </block>
[15:34:33.427]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:34:33.427]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:34:33.427]        // =>  FALSE
[15:34:33.427]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:34:33.427]    </control>
[15:34:33.427]    <control if="continueId == 4" while="" timeout="0" info="">
[15:34:33.427]      // if-block "continueId == 4"
[15:34:33.427]        // =>  FALSE
[15:34:33.427]      // skip if-block "continueId == 4"
[15:34:33.427]    </control>
[15:34:33.427]    <control if="!isProduction" while="" timeout="0" info="">
[15:34:33.427]      // if-block "!isProduction"
[15:34:33.427]        // =>  FALSE
[15:34:33.427]      // skip if-block "!isProduction"
[15:34:33.427]    </control>
[15:34:33.427]  </sequence>
[15:34:33.427]  
[15:35:46.374]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:35:46.374]  
[15:35:46.391]  <debugvars>
[15:35:46.391]    // Pre-defined
[15:35:46.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:35:46.391]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:35:46.391]    __dp=0x00000000
[15:35:46.391]    __ap=0x00000000
[15:35:46.391]    __traceout=0x00000000      (Trace Disabled)
[15:35:46.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:35:46.391]    __FlashAddr=0x00000000
[15:35:46.391]    __FlashLen=0x00000000
[15:35:46.391]    __FlashArg=0x00000000
[15:35:46.391]    __FlashOp=0x00000000
[15:35:46.391]    __Result=0x00000000
[15:35:46.391]  </debugvars>
[15:35:46.391]  
[15:35:46.391]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:35:46.391]    <block atomic="false" info="">
[15:35:46.395]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:35:46.395]        // -> [isSWJ <= 0x00000001]
[15:35:46.395]      __var hasDormant = __protocol & 0x00020000;
[15:35:46.395]        // -> [hasDormant <= 0x00000000]
[15:35:46.395]      __var protType   = __protocol & 0x0000FFFF;
[15:35:46.395]        // -> [protType <= 0x00000002]
[15:35:46.395]    </block>
[15:35:46.395]    <control if="protType == 1" while="" timeout="0" info="">
[15:35:46.395]      // if-block "protType == 1"
[15:35:46.395]        // =>  FALSE
[15:35:46.395]      // skip if-block "protType == 1"
[15:35:46.395]    </control>
[15:35:46.395]    <control if="protType == 2" while="" timeout="0" info="">
[15:35:46.395]      // if-block "protType == 2"
[15:35:46.395]        // =>  TRUE
[15:35:46.395]      <control if="isSWJ" while="" timeout="0" info="">
[15:35:46.395]        // if-block "isSWJ"
[15:35:46.395]          // =>  TRUE
[15:35:46.395]        <control if="hasDormant" while="" timeout="0" info="">
[15:35:46.395]          // if-block "hasDormant"
[15:35:46.395]            // =>  FALSE
[15:35:46.395]          // skip if-block "hasDormant"
[15:35:46.395]        </control>
[15:35:46.395]        <control if="!hasDormant" while="" timeout="0" info="">
[15:35:46.395]          // if-block "!hasDormant"
[15:35:46.395]            // =>  TRUE
[15:35:46.395]          <block atomic="false" info="">
[15:35:46.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:35:46.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:35:46.405]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:35:46.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:35:46.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:35:46.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:35:46.415]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:35:46.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:35:46.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:35:46.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:35:46.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:35:46.425]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:35:46.425]          </block>
[15:35:46.425]          // end if-block "!hasDormant"
[15:35:46.425]        </control>
[15:35:46.425]        // end if-block "isSWJ"
[15:35:46.425]      </control>
[15:35:46.425]      <control if="!isSWJ" while="" timeout="0" info="">
[15:35:46.425]        // if-block "!isSWJ"
[15:35:46.425]          // =>  FALSE
[15:35:46.425]        // skip if-block "!isSWJ"
[15:35:46.425]      </control>
[15:35:46.425]      <block atomic="false" info="">
[15:35:46.425]        ReadDP(0x0);
[15:35:46.435]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:35:46.435]      </block>
[15:35:46.435]      // end if-block "protType == 2"
[15:35:46.435]    </control>
[15:35:46.435]  </sequence>
[15:35:46.435]  
[15:35:46.445]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:35:46.445]  
[15:35:46.445]  <debugvars>
[15:35:46.445]    // Pre-defined
[15:35:46.445]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:35:46.445]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:35:46.445]    __dp=0x00000000
[15:35:46.445]    __ap=0x00000000
[15:35:46.445]    __traceout=0x00000000      (Trace Disabled)
[15:35:46.445]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:35:46.445]    __FlashAddr=0x00000000
[15:35:46.445]    __FlashLen=0x00000000
[15:35:46.445]    __FlashArg=0x00000000
[15:35:46.445]    __FlashOp=0x00000000
[15:35:46.450]    __Result=0x00000000
[15:35:46.450]  </debugvars>
[15:35:46.450]  
[15:35:46.450]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:35:46.450]    <block atomic="false" info="">
[15:35:46.450]      __var SW_DP_ABORT       = 0x0;
[15:35:46.450]        // -> [SW_DP_ABORT <= 0x00000000]
[15:35:46.450]      __var DP_CTRL_STAT      = 0x4;
[15:35:46.450]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:35:46.450]      __var DP_SELECT         = 0x8;
[15:35:46.450]        // -> [DP_SELECT <= 0x00000008]
[15:35:46.450]      __var powered_down      = 0;
[15:35:46.450]        // -> [powered_down <= 0x00000000]
[15:35:46.450]      WriteDP(DP_SELECT, 0x00000000);
[15:35:46.455]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:35:46.455]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:35:46.455]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:35:46.455]        // -> [powered_down <= 0x00000001]
[15:35:46.455]    </block>
[15:35:46.455]    <control if="powered_down" while="" timeout="0" info="">
[15:35:46.455]      // if-block "powered_down"
[15:35:46.455]        // =>  TRUE
[15:35:46.465]      <block atomic="false" info="">
[15:35:46.465]        Message(0, "Debug/System power-up request sent");
[15:35:46.465]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:35:46.475]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:35:46.475]      </block>
[15:35:46.475]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:35:46.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:35:46.495]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:35:46.495]        // while-condition  =>  FALSE
[15:35:46.495]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:35:46.495]      </control>
[15:35:46.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:35:46.495]        // if-block "(__protocol & 0xFFFF) == 1"
[15:35:46.495]          // =>  FALSE
[15:35:46.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:35:46.495]      </control>
[15:35:46.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:35:46.495]        // if-block "(__protocol & 0xFFFF) == 2"
[15:35:46.495]          // =>  TRUE
[15:35:46.495]        <block atomic="false" info="">
[15:35:46.495]          Message(0, "executing SWD power up");
[15:35:46.495]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:35:46.505]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:35:46.505]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:35:46.515]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:35:46.515]        </block>
[15:35:46.515]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:35:46.515]      </control>
[15:35:46.515]      // end if-block "powered_down"
[15:35:46.515]    </control>
[15:35:46.515]    <block atomic="false" info="">
[15:35:46.515]      __var DEBUG_PORT_VAL    = 0;
[15:35:46.515]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:35:46.515]      __var ACCESS_POINT_VAL  = 0;
[15:35:46.515]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:35:46.515]      __ap = 1; 
[15:35:46.515]        // -> [__ap <= 0x00000001]
[15:35:46.515]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:35:46.525]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:35:46.525]      __ap = 4;
[15:35:46.525]        // -> [__ap <= 0x00000004]
[15:35:46.525]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:35:46.535]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:35:46.535]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:35:46.535]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:35:46.535]    </block>
[15:35:46.535]    <block atomic="false" info="">
[15:35:46.535]      __var nReset = 0x80;
[15:35:46.535]        // -> [nReset <= 0x00000080]
[15:35:46.535]      __var canReadPins = 0;
[15:35:46.535]        // -> [canReadPins <= 0x00000000]
[15:35:46.535]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:35:46.545]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:35:46.545]        // -> [canReadPins <= 0x00000001]
[15:35:46.545]    </block>
[15:35:46.545]    <control if="" while="1" timeout="200" info="">
[15:35:46.545]      // while "1"  (timeout="200")
[15:35:46.545]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.550]      // while "1"  (timeout="200")
[15:35:46.550]      // while-condition  =>  TRUE
[15:35:46.555]      // while "1"  (timeout="200")
[15:35:46.555]      // while  =>  TIMEOUT
[15:35:46.555]      // end while "1"
[15:35:46.555]    </control>
[15:35:46.555]    <control if="canReadPins" while="" timeout="0" info="">
[15:35:46.555]      // if-block "canReadPins"
[15:35:46.555]        // =>  TRUE
[15:35:46.555]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:35:46.555]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:35:46.555]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:35:46.555]        // while-condition  =>  FALSE
[15:35:46.555]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:35:46.555]      </control>
[15:35:46.555]      // end if-block "canReadPins"
[15:35:46.555]    </control>
[15:35:46.555]    <control if="!canReadPins" while="" timeout="0" info="">
[15:35:46.555]      // if-block "!canReadPins"
[15:35:46.555]        // =>  FALSE
[15:35:46.555]      // skip if-block "!canReadPins"
[15:35:46.555]    </control>
[15:35:46.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:35:46.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:35:46.555]        // =>  TRUE
[15:35:46.555]      <block atomic="false" info="">
[15:35:46.555]        WriteAP(0x00, 0x190008);
[15:35:46.565]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:35:46.565]        WriteAP(0xF0, 0x01);
[15:35:46.575]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:35:46.575]      </block>
[15:35:46.575]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:35:46.575]    </control>
[15:35:46.575]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:35:46.575]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:35:46.575]        // =>  FALSE
[15:35:46.575]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:35:46.575]    </control>
[15:35:46.575]    <block atomic="false" info="">
[15:35:46.575]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:35:46.585]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:35:46.585]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:35:46.585]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:35:46.595]      __ap = 0; //lets make sure we reset the access point selection
[15:35:46.595]        // -> [__ap <= 0x00000000]
[15:35:46.595]    </block>
[15:35:46.595]  </sequence>
[15:35:46.595]  
[15:35:46.655]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:35:46.655]  
[15:35:46.655]  <debugvars>
[15:35:46.655]    // Pre-defined
[15:35:46.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:35:46.655]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:35:46.655]    __dp=0x00000000
[15:35:46.655]    __ap=0x00000000
[15:35:46.655]    __traceout=0x00000000      (Trace Disabled)
[15:35:46.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:35:46.655]    __FlashAddr=0x00000000
[15:35:46.655]    __FlashLen=0x00000000
[15:35:46.655]    __FlashArg=0x00000000
[15:35:46.655]    __FlashOp=0x00000000
[15:35:46.655]    __Result=0x00000000
[15:35:46.655]  </debugvars>
[15:35:46.655]  
[15:35:46.655]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:35:46.655]    <block atomic="false" info="">
[15:35:46.655]      __var deviceID = 0;
[15:35:46.655]        // -> [deviceID <= 0x00000000]
[15:35:46.655]      __var version = 0;
[15:35:46.655]        // -> [version <= 0x00000000]
[15:35:46.655]      __var partNum = 0;
[15:35:46.655]        // -> [partNum <= 0x00000000]
[15:35:46.655]      __var manuf = 0;
[15:35:46.665]        // -> [manuf <= 0x00000000]
[15:35:46.665]      __var isMSPM0G1X0X_G3X0X = 0;
[15:35:46.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:35:46.665]      __var isProduction = 0;
[15:35:46.665]        // -> [isProduction <= 0x00000000]
[15:35:46.665]      __var continueId = 0;
[15:35:46.665]        // -> [continueId <= 0x00000000]
[15:35:46.665]      deviceID =   Read32(0x41C40004);
[15:35:46.675]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:35:46.675]        // -> [deviceID <= 0x2BB8802F]
[15:35:46.675]      version = deviceID >> 28;
[15:35:46.675]        // -> [version <= 0x00000002]
[15:35:46.675]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:35:46.675]        // -> [partNum <= 0x0000BB88]
[15:35:46.675]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:35:46.675]        // -> [manuf <= 0x00000017]
[15:35:46.675]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:35:46.675]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:35:46.675]      isProduction = (version > 0);
[15:35:46.685]        // -> [isProduction <= 0x00000001]
[15:35:46.685]    </block>
[15:35:46.685]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:35:46.685]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:35:46.685]        // =>  FALSE
[15:35:46.685]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:35:46.685]    </control>
[15:35:46.685]    <control if="continueId == 4" while="" timeout="0" info="">
[15:35:46.685]      // if-block "continueId == 4"
[15:35:46.685]        // =>  FALSE
[15:35:46.685]      // skip if-block "continueId == 4"
[15:35:46.685]    </control>
[15:35:46.685]    <control if="!isProduction" while="" timeout="0" info="">
[15:35:46.685]      // if-block "!isProduction"
[15:35:46.685]        // =>  FALSE
[15:35:46.685]      // skip if-block "!isProduction"
[15:35:46.685]    </control>
[15:35:46.685]  </sequence>
[15:35:46.685]  
[15:39:59.409]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:39:59.409]  
[15:39:59.424]  <debugvars>
[15:39:59.424]    // Pre-defined
[15:39:59.424]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:39:59.424]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:39:59.424]    __dp=0x00000000
[15:39:59.424]    __ap=0x00000000
[15:39:59.424]    __traceout=0x00000000      (Trace Disabled)
[15:39:59.424]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:39:59.424]    __FlashAddr=0x00000000
[15:39:59.424]    __FlashLen=0x00000000
[15:39:59.424]    __FlashArg=0x00000000
[15:39:59.424]    __FlashOp=0x00000000
[15:39:59.424]    __Result=0x00000000
[15:39:59.424]  </debugvars>
[15:39:59.424]  
[15:39:59.424]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:39:59.424]    <block atomic="false" info="">
[15:39:59.424]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:39:59.427]        // -> [isSWJ <= 0x00000001]
[15:39:59.427]      __var hasDormant = __protocol & 0x00020000;
[15:39:59.427]        // -> [hasDormant <= 0x00000000]
[15:39:59.427]      __var protType   = __protocol & 0x0000FFFF;
[15:39:59.427]        // -> [protType <= 0x00000002]
[15:39:59.427]    </block>
[15:39:59.427]    <control if="protType == 1" while="" timeout="0" info="">
[15:39:59.427]      // if-block "protType == 1"
[15:39:59.427]        // =>  FALSE
[15:39:59.427]      // skip if-block "protType == 1"
[15:39:59.427]    </control>
[15:39:59.427]    <control if="protType == 2" while="" timeout="0" info="">
[15:39:59.427]      // if-block "protType == 2"
[15:39:59.427]        // =>  TRUE
[15:39:59.430]      <control if="isSWJ" while="" timeout="0" info="">
[15:39:59.430]        // if-block "isSWJ"
[15:39:59.430]          // =>  TRUE
[15:39:59.430]        <control if="hasDormant" while="" timeout="0" info="">
[15:39:59.430]          // if-block "hasDormant"
[15:39:59.430]            // =>  FALSE
[15:39:59.430]          // skip if-block "hasDormant"
[15:39:59.430]        </control>
[15:39:59.430]        <control if="!hasDormant" while="" timeout="0" info="">
[15:39:59.430]          // if-block "!hasDormant"
[15:39:59.430]            // =>  TRUE
[15:39:59.430]          <block atomic="false" info="">
[15:39:59.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:39:59.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:39:59.437]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:39:59.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:39:59.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:39:59.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:39:59.440]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:39:59.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:39:59.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:39:59.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:39:59.449]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:39:59.460]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:39:59.460]          </block>
[15:39:59.460]          // end if-block "!hasDormant"
[15:39:59.460]        </control>
[15:39:59.460]        // end if-block "isSWJ"
[15:39:59.460]      </control>
[15:39:59.460]      <control if="!isSWJ" while="" timeout="0" info="">
[15:39:59.460]        // if-block "!isSWJ"
[15:39:59.460]          // =>  FALSE
[15:39:59.460]        // skip if-block "!isSWJ"
[15:39:59.460]      </control>
[15:39:59.460]      <block atomic="false" info="">
[15:39:59.460]        ReadDP(0x0);
[15:39:59.465]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:39:59.465]      </block>
[15:39:59.465]      // end if-block "protType == 2"
[15:39:59.465]    </control>
[15:39:59.465]  </sequence>
[15:39:59.468]  
[15:39:59.478]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:39:59.478]  
[15:39:59.478]  <debugvars>
[15:39:59.478]    // Pre-defined
[15:39:59.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:39:59.478]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:39:59.478]    __dp=0x00000000
[15:39:59.478]    __ap=0x00000000
[15:39:59.478]    __traceout=0x00000000      (Trace Disabled)
[15:39:59.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:39:59.478]    __FlashAddr=0x00000000
[15:39:59.478]    __FlashLen=0x00000000
[15:39:59.478]    __FlashArg=0x00000000
[15:39:59.478]    __FlashOp=0x00000000
[15:39:59.478]    __Result=0x00000000
[15:39:59.478]  </debugvars>
[15:39:59.478]  
[15:39:59.478]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:39:59.478]    <block atomic="false" info="">
[15:39:59.478]      __var SW_DP_ABORT       = 0x0;
[15:39:59.478]        // -> [SW_DP_ABORT <= 0x00000000]
[15:39:59.478]      __var DP_CTRL_STAT      = 0x4;
[15:39:59.478]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:39:59.478]      __var DP_SELECT         = 0x8;
[15:39:59.478]        // -> [DP_SELECT <= 0x00000008]
[15:39:59.478]      __var powered_down      = 0;
[15:39:59.478]        // -> [powered_down <= 0x00000000]
[15:39:59.478]      WriteDP(DP_SELECT, 0x00000000);
[15:39:59.478]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:39:59.478]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:39:59.488]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:39:59.488]        // -> [powered_down <= 0x00000001]
[15:39:59.488]    </block>
[15:39:59.488]    <control if="powered_down" while="" timeout="0" info="">
[15:39:59.488]      // if-block "powered_down"
[15:39:59.488]        // =>  TRUE
[15:39:59.488]      <block atomic="false" info="">
[15:39:59.488]        Message(0, "Debug/System power-up request sent");
[15:39:59.496]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:39:59.498]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:39:59.498]      </block>
[15:39:59.498]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:39:59.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:39:59.508]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:39:59.508]        // while-condition  =>  FALSE
[15:39:59.508]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:39:59.508]      </control>
[15:39:59.508]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:39:59.508]        // if-block "(__protocol & 0xFFFF) == 1"
[15:39:59.508]          // =>  FALSE
[15:39:59.508]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:39:59.508]      </control>
[15:39:59.508]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:39:59.508]        // if-block "(__protocol & 0xFFFF) == 2"
[15:39:59.508]          // =>  TRUE
[15:39:59.508]        <block atomic="false" info="">
[15:39:59.508]          Message(0, "executing SWD power up");
[15:39:59.508]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:39:59.518]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:39:59.518]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:39:59.518]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:39:59.518]        </block>
[15:39:59.518]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:39:59.518]      </control>
[15:39:59.518]      // end if-block "powered_down"
[15:39:59.518]    </control>
[15:39:59.518]    <block atomic="false" info="">
[15:39:59.518]      __var DEBUG_PORT_VAL    = 0;
[15:39:59.518]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:39:59.518]      __var ACCESS_POINT_VAL  = 0;
[15:39:59.518]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:39:59.518]      __ap = 1; 
[15:39:59.518]        // -> [__ap <= 0x00000001]
[15:39:59.518]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:39:59.538]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:39:59.538]      __ap = 4;
[15:39:59.538]        // -> [__ap <= 0x00000004]
[15:39:59.538]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:39:59.548]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:39:59.548]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:39:59.548]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:39:59.548]    </block>
[15:39:59.548]    <block atomic="false" info="">
[15:39:59.548]      __var nReset = 0x80;
[15:39:59.548]        // -> [nReset <= 0x00000080]
[15:39:59.548]      __var canReadPins = 0;
[15:39:59.548]        // -> [canReadPins <= 0x00000000]
[15:39:59.548]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:39:59.558]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:39:59.558]        // -> [canReadPins <= 0x00000001]
[15:39:59.558]    </block>
[15:39:59.558]    <control if="" while="1" timeout="200" info="">
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.558]      // while "1"  (timeout="200")
[15:39:59.558]      // while-condition  =>  TRUE
[15:39:59.568]      // while "1"  (timeout="200")
[15:39:59.568]      // while  =>  TIMEOUT
[15:39:59.568]      // end while "1"
[15:39:59.568]    </control>
[15:39:59.568]    <control if="canReadPins" while="" timeout="0" info="">
[15:39:59.568]      // if-block "canReadPins"
[15:39:59.568]        // =>  TRUE
[15:39:59.568]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:39:59.568]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:39:59.568]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:39:59.568]        // while-condition  =>  FALSE
[15:39:59.568]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:39:59.568]      </control>
[15:39:59.568]      // end if-block "canReadPins"
[15:39:59.568]    </control>
[15:39:59.568]    <control if="!canReadPins" while="" timeout="0" info="">
[15:39:59.568]      // if-block "!canReadPins"
[15:39:59.568]        // =>  FALSE
[15:39:59.568]      // skip if-block "!canReadPins"
[15:39:59.568]    </control>
[15:39:59.568]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:39:59.568]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:39:59.568]        // =>  TRUE
[15:39:59.568]      <block atomic="false" info="">
[15:39:59.568]        WriteAP(0x00, 0x190008);
[15:39:59.578]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:39:59.578]        WriteAP(0xF0, 0x01);
[15:39:59.588]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:39:59.588]      </block>
[15:39:59.588]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:39:59.588]    </control>
[15:39:59.588]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:39:59.588]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:39:59.588]        // =>  FALSE
[15:39:59.588]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:39:59.588]    </control>
[15:39:59.588]    <block atomic="false" info="">
[15:39:59.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:39:59.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:39:59.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:39:59.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:39:59.608]      __ap = 0; //lets make sure we reset the access point selection
[15:39:59.608]        // -> [__ap <= 0x00000000]
[15:39:59.608]    </block>
[15:39:59.608]  </sequence>
[15:39:59.608]  
[15:39:59.688]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:39:59.688]  
[15:39:59.688]  <debugvars>
[15:39:59.688]    // Pre-defined
[15:39:59.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:39:59.696]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:39:59.696]    __dp=0x00000000
[15:39:59.696]    __ap=0x00000000
[15:39:59.696]    __traceout=0x00000000      (Trace Disabled)
[15:39:59.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:39:59.696]    __FlashAddr=0x00000000
[15:39:59.696]    __FlashLen=0x00000000
[15:39:59.696]    __FlashArg=0x00000000
[15:39:59.696]    __FlashOp=0x00000000
[15:39:59.696]    __Result=0x00000000
[15:39:59.696]  </debugvars>
[15:39:59.696]  
[15:39:59.696]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:39:59.698]    <block atomic="false" info="">
[15:39:59.698]      __var deviceID = 0;
[15:39:59.698]        // -> [deviceID <= 0x00000000]
[15:39:59.698]      __var version = 0;
[15:39:59.698]        // -> [version <= 0x00000000]
[15:39:59.698]      __var partNum = 0;
[15:39:59.698]        // -> [partNum <= 0x00000000]
[15:39:59.698]      __var manuf = 0;
[15:39:59.698]        // -> [manuf <= 0x00000000]
[15:39:59.698]      __var isMSPM0G1X0X_G3X0X = 0;
[15:39:59.698]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:39:59.698]      __var isProduction = 0;
[15:39:59.698]        // -> [isProduction <= 0x00000000]
[15:39:59.698]      __var continueId = 0;
[15:39:59.698]        // -> [continueId <= 0x00000000]
[15:39:59.698]      deviceID =   Read32(0x41C40004);
[15:39:59.708]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:39:59.708]        // -> [deviceID <= 0x2BB8802F]
[15:39:59.708]      version = deviceID >> 28;
[15:39:59.708]        // -> [version <= 0x00000002]
[15:39:59.708]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:39:59.708]        // -> [partNum <= 0x0000BB88]
[15:39:59.708]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:39:59.708]        // -> [manuf <= 0x00000017]
[15:39:59.708]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:39:59.708]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:39:59.708]      isProduction = (version > 0);
[15:39:59.708]        // -> [isProduction <= 0x00000001]
[15:39:59.708]    </block>
[15:39:59.708]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:39:59.708]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:39:59.708]        // =>  FALSE
[15:39:59.708]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:39:59.708]    </control>
[15:39:59.708]    <control if="continueId == 4" while="" timeout="0" info="">
[15:39:59.708]      // if-block "continueId == 4"
[15:39:59.708]        // =>  FALSE
[15:39:59.708]      // skip if-block "continueId == 4"
[15:39:59.708]    </control>
[15:39:59.708]    <control if="!isProduction" while="" timeout="0" info="">
[15:39:59.708]      // if-block "!isProduction"
[15:39:59.708]        // =>  FALSE
[15:39:59.708]      // skip if-block "!isProduction"
[15:39:59.708]    </control>
[15:39:59.708]  </sequence>
[15:39:59.708]  
[15:41:44.542]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:41:44.542]  
[15:41:44.559]  <debugvars>
[15:41:44.559]    // Pre-defined
[15:41:44.559]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:44.559]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:44.559]    __dp=0x00000000
[15:41:44.559]    __ap=0x00000000
[15:41:44.559]    __traceout=0x00000000      (Trace Disabled)
[15:41:44.559]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:44.559]    __FlashAddr=0x00000000
[15:41:44.559]    __FlashLen=0x00000000
[15:41:44.559]    __FlashArg=0x00000000
[15:41:44.559]    __FlashOp=0x00000000
[15:41:44.559]    __Result=0x00000000
[15:41:44.559]  </debugvars>
[15:41:44.559]  
[15:41:44.559]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:41:44.559]    <block atomic="false" info="">
[15:41:44.562]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:41:44.562]        // -> [isSWJ <= 0x00000001]
[15:41:44.562]      __var hasDormant = __protocol & 0x00020000;
[15:41:44.562]        // -> [hasDormant <= 0x00000000]
[15:41:44.562]      __var protType   = __protocol & 0x0000FFFF;
[15:41:44.562]        // -> [protType <= 0x00000002]
[15:41:44.562]    </block>
[15:41:44.562]    <control if="protType == 1" while="" timeout="0" info="">
[15:41:44.562]      // if-block "protType == 1"
[15:41:44.562]        // =>  FALSE
[15:41:44.562]      // skip if-block "protType == 1"
[15:41:44.562]    </control>
[15:41:44.562]    <control if="protType == 2" while="" timeout="0" info="">
[15:41:44.562]      // if-block "protType == 2"
[15:41:44.562]        // =>  TRUE
[15:41:44.562]      <control if="isSWJ" while="" timeout="0" info="">
[15:41:44.562]        // if-block "isSWJ"
[15:41:44.562]          // =>  TRUE
[15:41:44.562]        <control if="hasDormant" while="" timeout="0" info="">
[15:41:44.562]          // if-block "hasDormant"
[15:41:44.562]            // =>  FALSE
[15:41:44.562]          // skip if-block "hasDormant"
[15:41:44.562]        </control>
[15:41:44.562]        <control if="!hasDormant" while="" timeout="0" info="">
[15:41:44.562]          // if-block "!hasDormant"
[15:41:44.562]            // =>  TRUE
[15:41:44.562]          <block atomic="false" info="">
[15:41:44.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:41:44.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:44.562]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:41:44.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:41:44.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:41:44.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:44.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:41:44.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:41:44.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:41:44.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:41:44.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:41:44.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:41:44.582]          </block>
[15:41:44.582]          // end if-block "!hasDormant"
[15:41:44.582]        </control>
[15:41:44.582]        // end if-block "isSWJ"
[15:41:44.582]      </control>
[15:41:44.582]      <control if="!isSWJ" while="" timeout="0" info="">
[15:41:44.582]        // if-block "!isSWJ"
[15:41:44.582]          // =>  FALSE
[15:41:44.582]        // skip if-block "!isSWJ"
[15:41:44.582]      </control>
[15:41:44.582]      <block atomic="false" info="">
[15:41:44.582]        ReadDP(0x0);
[15:41:44.582]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:41:44.582]      </block>
[15:41:44.582]      // end if-block "protType == 2"
[15:41:44.582]    </control>
[15:41:44.582]  </sequence>
[15:41:44.582]  
[15:41:44.602]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:41:44.602]  
[15:41:44.602]  <debugvars>
[15:41:44.602]    // Pre-defined
[15:41:44.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:44.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:44.602]    __dp=0x00000000
[15:41:44.602]    __ap=0x00000000
[15:41:44.602]    __traceout=0x00000000      (Trace Disabled)
[15:41:44.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:44.602]    __FlashAddr=0x00000000
[15:41:44.602]    __FlashLen=0x00000000
[15:41:44.602]    __FlashArg=0x00000000
[15:41:44.602]    __FlashOp=0x00000000
[15:41:44.602]    __Result=0x00000000
[15:41:44.602]  </debugvars>
[15:41:44.602]  
[15:41:44.602]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:41:44.602]    <block atomic="false" info="">
[15:41:44.602]      __var SW_DP_ABORT       = 0x0;
[15:41:44.602]        // -> [SW_DP_ABORT <= 0x00000000]
[15:41:44.602]      __var DP_CTRL_STAT      = 0x4;
[15:41:44.602]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:41:44.602]      __var DP_SELECT         = 0x8;
[15:41:44.602]        // -> [DP_SELECT <= 0x00000008]
[15:41:44.602]      __var powered_down      = 0;
[15:41:44.602]        // -> [powered_down <= 0x00000000]
[15:41:44.602]      WriteDP(DP_SELECT, 0x00000000);
[15:41:44.602]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:41:44.602]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:41:44.612]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:41:44.612]        // -> [powered_down <= 0x00000001]
[15:41:44.612]    </block>
[15:41:44.612]    <control if="powered_down" while="" timeout="0" info="">
[15:41:44.612]      // if-block "powered_down"
[15:41:44.612]        // =>  TRUE
[15:41:44.612]      <block atomic="false" info="">
[15:41:44.612]        Message(0, "Debug/System power-up request sent");
[15:41:44.612]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:41:44.622]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:41:44.622]      </block>
[15:41:44.622]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:41:44.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:41:44.622]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:41:44.622]        // while-condition  =>  FALSE
[15:41:44.622]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:41:44.622]      </control>
[15:41:44.622]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:41:44.622]        // if-block "(__protocol & 0xFFFF) == 1"
[15:41:44.622]          // =>  FALSE
[15:41:44.622]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:41:44.622]      </control>
[15:41:44.622]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:41:44.622]        // if-block "(__protocol & 0xFFFF) == 2"
[15:41:44.622]          // =>  TRUE
[15:41:44.622]        <block atomic="false" info="">
[15:41:44.622]          Message(0, "executing SWD power up");
[15:41:44.632]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:41:44.632]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:41:44.632]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:41:44.638]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:41:44.638]        </block>
[15:41:44.638]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:41:44.638]      </control>
[15:41:44.638]      // end if-block "powered_down"
[15:41:44.638]    </control>
[15:41:44.638]    <block atomic="false" info="">
[15:41:44.638]      __var DEBUG_PORT_VAL    = 0;
[15:41:44.638]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:41:44.638]      __var ACCESS_POINT_VAL  = 0;
[15:41:44.638]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:41:44.638]      __ap = 1; 
[15:41:44.638]        // -> [__ap <= 0x00000001]
[15:41:44.642]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:41:44.642]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:41:44.642]      __ap = 4;
[15:41:44.642]        // -> [__ap <= 0x00000004]
[15:41:44.642]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:44.655]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:41:44.655]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:41:44.655]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:44.655]    </block>
[15:41:44.655]    <block atomic="false" info="">
[15:41:44.655]      __var nReset = 0x80;
[15:41:44.655]        // -> [nReset <= 0x00000080]
[15:41:44.655]      __var canReadPins = 0;
[15:41:44.655]        // -> [canReadPins <= 0x00000000]
[15:41:44.655]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:41:44.662]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:41:44.662]        // -> [canReadPins <= 0x00000001]
[15:41:44.662]    </block>
[15:41:44.662]    <control if="" while="1" timeout="200" info="">
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.662]      // while-condition  =>  TRUE
[15:41:44.662]      // while "1"  (timeout="200")
[15:41:44.671]      // while-condition  =>  TRUE
[15:41:44.671]      // while "1"  (timeout="200")
[15:41:44.671]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.672]      // while-condition  =>  TRUE
[15:41:44.672]      // while "1"  (timeout="200")
[15:41:44.681]      // while-condition  =>  TRUE
[15:41:44.681]      // while "1"  (timeout="200")
[15:41:44.681]      // while  =>  TIMEOUT
[15:41:44.681]      // end while "1"
[15:41:44.681]    </control>
[15:41:44.681]    <control if="canReadPins" while="" timeout="0" info="">
[15:41:44.681]      // if-block "canReadPins"
[15:41:44.681]        // =>  TRUE
[15:41:44.681]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:41:44.681]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:41:44.681]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:41:44.681]        // while-condition  =>  FALSE
[15:41:44.681]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:41:44.681]      </control>
[15:41:44.681]      // end if-block "canReadPins"
[15:41:44.681]    </control>
[15:41:44.681]    <control if="!canReadPins" while="" timeout="0" info="">
[15:41:44.688]      // if-block "!canReadPins"
[15:41:44.688]        // =>  FALSE
[15:41:44.688]      // skip if-block "!canReadPins"
[15:41:44.688]    </control>
[15:41:44.688]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:41:44.688]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:44.688]        // =>  TRUE
[15:41:44.688]      <block atomic="false" info="">
[15:41:44.688]        WriteAP(0x00, 0x190008);
[15:41:44.691]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:44.691]        WriteAP(0xF0, 0x01);
[15:41:44.701]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:41:44.701]      </block>
[15:41:44.701]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:41:44.701]    </control>
[15:41:44.701]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:41:44.701]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:44.701]        // =>  FALSE
[15:41:44.701]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:41:44.701]    </control>
[15:41:44.701]    <block atomic="false" info="">
[15:41:44.701]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:41:44.711]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:41:44.711]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:41:44.711]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:41:44.711]      __ap = 0; //lets make sure we reset the access point selection
[15:41:44.711]        // -> [__ap <= 0x00000000]
[15:41:44.711]    </block>
[15:41:44.711]  </sequence>
[15:41:44.711]  
[15:41:44.761]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:41:44.761]  
[15:41:44.761]  <debugvars>
[15:41:44.761]    // Pre-defined
[15:41:44.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:41:44.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:41:44.761]    __dp=0x00000000
[15:41:44.761]    __ap=0x00000000
[15:41:44.761]    __traceout=0x00000000      (Trace Disabled)
[15:41:44.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:41:44.761]    __FlashAddr=0x00000000
[15:41:44.761]    __FlashLen=0x00000000
[15:41:44.761]    __FlashArg=0x00000000
[15:41:44.761]    __FlashOp=0x00000000
[15:41:44.761]    __Result=0x00000000
[15:41:44.761]  </debugvars>
[15:41:44.761]  
[15:41:44.761]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:41:44.761]    <block atomic="false" info="">
[15:41:44.761]      __var deviceID = 0;
[15:41:44.761]        // -> [deviceID <= 0x00000000]
[15:41:44.761]      __var version = 0;
[15:41:44.761]        // -> [version <= 0x00000000]
[15:41:44.761]      __var partNum = 0;
[15:41:44.761]        // -> [partNum <= 0x00000000]
[15:41:44.761]      __var manuf = 0;
[15:41:44.761]        // -> [manuf <= 0x00000000]
[15:41:44.772]      __var isMSPM0G1X0X_G3X0X = 0;
[15:41:44.772]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:41:44.772]      __var isProduction = 0;
[15:41:44.772]        // -> [isProduction <= 0x00000000]
[15:41:44.772]      __var continueId = 0;
[15:41:44.772]        // -> [continueId <= 0x00000000]
[15:41:44.772]      deviceID =   Read32(0x41C40004);
[15:41:44.782]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:41:44.782]        // -> [deviceID <= 0x2BB8802F]
[15:41:44.782]      version = deviceID >> 28;
[15:41:44.782]        // -> [version <= 0x00000002]
[15:41:44.782]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:41:44.782]        // -> [partNum <= 0x0000BB88]
[15:41:44.782]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:41:44.782]        // -> [manuf <= 0x00000017]
[15:41:44.782]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:41:44.782]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:41:44.782]      isProduction = (version > 0);
[15:41:44.782]        // -> [isProduction <= 0x00000001]
[15:41:44.782]    </block>
[15:41:44.782]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:41:44.782]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:41:44.782]        // =>  FALSE
[15:41:44.782]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:41:44.782]    </control>
[15:41:44.782]    <control if="continueId == 4" while="" timeout="0" info="">
[15:41:44.782]      // if-block "continueId == 4"
[15:41:44.782]        // =>  FALSE
[15:41:44.782]      // skip if-block "continueId == 4"
[15:41:44.782]    </control>
[15:41:44.782]    <control if="!isProduction" while="" timeout="0" info="">
[15:41:44.782]      // if-block "!isProduction"
[15:41:44.782]        // =>  FALSE
[15:41:44.782]      // skip if-block "!isProduction"
[15:41:44.782]    </control>
[15:41:44.782]  </sequence>
[15:41:44.782]  
[15:42:28.424]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:42:28.424]  
[15:42:28.437]  <debugvars>
[15:42:28.437]    // Pre-defined
[15:42:28.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:28.437]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:28.437]    __dp=0x00000000
[15:42:28.437]    __ap=0x00000000
[15:42:28.437]    __traceout=0x00000000      (Trace Disabled)
[15:42:28.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:28.437]    __FlashAddr=0x00000000
[15:42:28.437]    __FlashLen=0x00000000
[15:42:28.437]    __FlashArg=0x00000000
[15:42:28.437]    __FlashOp=0x00000000
[15:42:28.437]    __Result=0x00000000
[15:42:28.437]  </debugvars>
[15:42:28.437]  
[15:42:28.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:42:28.437]    <block atomic="false" info="">
[15:42:28.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:42:28.437]        // -> [isSWJ <= 0x00000001]
[15:42:28.437]      __var hasDormant = __protocol & 0x00020000;
[15:42:28.437]        // -> [hasDormant <= 0x00000000]
[15:42:28.437]      __var protType   = __protocol & 0x0000FFFF;
[15:42:28.440]        // -> [protType <= 0x00000002]
[15:42:28.440]    </block>
[15:42:28.440]    <control if="protType == 1" while="" timeout="0" info="">
[15:42:28.440]      // if-block "protType == 1"
[15:42:28.440]        // =>  FALSE
[15:42:28.440]      // skip if-block "protType == 1"
[15:42:28.440]    </control>
[15:42:28.440]    <control if="protType == 2" while="" timeout="0" info="">
[15:42:28.440]      // if-block "protType == 2"
[15:42:28.440]        // =>  TRUE
[15:42:28.440]      <control if="isSWJ" while="" timeout="0" info="">
[15:42:28.440]        // if-block "isSWJ"
[15:42:28.440]          // =>  TRUE
[15:42:28.440]        <control if="hasDormant" while="" timeout="0" info="">
[15:42:28.440]          // if-block "hasDormant"
[15:42:28.440]            // =>  FALSE
[15:42:28.440]          // skip if-block "hasDormant"
[15:42:28.440]        </control>
[15:42:28.440]        <control if="!hasDormant" while="" timeout="0" info="">
[15:42:28.440]          // if-block "!hasDormant"
[15:42:28.440]            // =>  TRUE
[15:42:28.440]          <block atomic="false" info="">
[15:42:28.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:42:28.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:28.444]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:42:28.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:42:28.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:42:28.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:28.444]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:42:28.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:42:28.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:42:28.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:42:28.454]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:42:28.464]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:42:28.464]          </block>
[15:42:28.464]          // end if-block "!hasDormant"
[15:42:28.464]        </control>
[15:42:28.464]        // end if-block "isSWJ"
[15:42:28.464]      </control>
[15:42:28.464]      <control if="!isSWJ" while="" timeout="0" info="">
[15:42:28.464]        // if-block "!isSWJ"
[15:42:28.464]          // =>  FALSE
[15:42:28.464]        // skip if-block "!isSWJ"
[15:42:28.464]      </control>
[15:42:28.464]      <block atomic="false" info="">
[15:42:28.464]        ReadDP(0x0);
[15:42:28.464]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:42:28.464]      </block>
[15:42:28.464]      // end if-block "protType == 2"
[15:42:28.464]    </control>
[15:42:28.464]  </sequence>
[15:42:28.464]  
[15:42:28.474]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:42:28.474]  
[15:42:28.474]  <debugvars>
[15:42:28.474]    // Pre-defined
[15:42:28.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:28.474]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:28.474]    __dp=0x00000000
[15:42:28.474]    __ap=0x00000000
[15:42:28.474]    __traceout=0x00000000      (Trace Disabled)
[15:42:28.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:28.474]    __FlashAddr=0x00000000
[15:42:28.474]    __FlashLen=0x00000000
[15:42:28.474]    __FlashArg=0x00000000
[15:42:28.474]    __FlashOp=0x00000000
[15:42:28.474]    __Result=0x00000000
[15:42:28.474]  </debugvars>
[15:42:28.474]  
[15:42:28.474]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:42:28.474]    <block atomic="false" info="">
[15:42:28.474]      __var SW_DP_ABORT       = 0x0;
[15:42:28.474]        // -> [SW_DP_ABORT <= 0x00000000]
[15:42:28.474]      __var DP_CTRL_STAT      = 0x4;
[15:42:28.474]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:42:28.474]      __var DP_SELECT         = 0x8;
[15:42:28.474]        // -> [DP_SELECT <= 0x00000008]
[15:42:28.474]      __var powered_down      = 0;
[15:42:28.474]        // -> [powered_down <= 0x00000000]
[15:42:28.484]      WriteDP(DP_SELECT, 0x00000000);
[15:42:28.484]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:42:28.484]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:42:28.484]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:42:28.484]        // -> [powered_down <= 0x00000001]
[15:42:28.484]    </block>
[15:42:28.484]    <control if="powered_down" while="" timeout="0" info="">
[15:42:28.484]      // if-block "powered_down"
[15:42:28.484]        // =>  TRUE
[15:42:28.484]      <block atomic="false" info="">
[15:42:28.484]        Message(0, "Debug/System power-up request sent");
[15:42:28.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:42:28.500]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:42:28.500]      </block>
[15:42:28.500]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:42:28.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:42:28.504]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:42:28.504]        // while-condition  =>  FALSE
[15:42:28.504]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:42:28.504]      </control>
[15:42:28.504]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:42:28.504]        // if-block "(__protocol & 0xFFFF) == 1"
[15:42:28.504]          // =>  FALSE
[15:42:28.504]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:42:28.504]      </control>
[15:42:28.504]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:42:28.504]        // if-block "(__protocol & 0xFFFF) == 2"
[15:42:28.504]          // =>  TRUE
[15:42:28.504]        <block atomic="false" info="">
[15:42:28.504]          Message(0, "executing SWD power up");
[15:42:28.504]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:42:28.514]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:42:28.514]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:42:28.514]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:42:28.514]        </block>
[15:42:28.514]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:42:28.514]      </control>
[15:42:28.514]      // end if-block "powered_down"
[15:42:28.514]    </control>
[15:42:28.514]    <block atomic="false" info="">
[15:42:28.514]      __var DEBUG_PORT_VAL    = 0;
[15:42:28.514]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:42:28.514]      __var ACCESS_POINT_VAL  = 0;
[15:42:28.514]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:42:28.514]      __ap = 1; 
[15:42:28.514]        // -> [__ap <= 0x00000001]
[15:42:28.514]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:42:28.524]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:42:28.524]      __ap = 4;
[15:42:28.524]        // -> [__ap <= 0x00000004]
[15:42:28.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:28.534]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:42:28.534]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:42:28.534]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:28.544]    </block>
[15:42:28.544]    <block atomic="false" info="">
[15:42:28.544]      __var nReset = 0x80;
[15:42:28.544]        // -> [nReset <= 0x00000080]
[15:42:28.544]      __var canReadPins = 0;
[15:42:28.544]        // -> [canReadPins <= 0x00000000]
[15:42:28.544]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:42:28.544]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:42:28.544]        // -> [canReadPins <= 0x00000001]
[15:42:28.544]    </block>
[15:42:28.544]    <control if="" while="1" timeout="200" info="">
[15:42:28.544]      // while "1"  (timeout="200")
[15:42:28.544]      // while-condition  =>  TRUE
[15:42:28.554]      // while "1"  (timeout="200")
[15:42:28.554]      // while  =>  TIMEOUT
[15:42:28.554]      // end while "1"
[15:42:28.554]    </control>
[15:42:28.554]    <control if="canReadPins" while="" timeout="0" info="">
[15:42:28.554]      // if-block "canReadPins"
[15:42:28.554]        // =>  TRUE
[15:42:28.554]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:42:28.554]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:42:28.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:42:28.554]        // while-condition  =>  FALSE
[15:42:28.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:42:28.554]      </control>
[15:42:28.554]      // end if-block "canReadPins"
[15:42:28.554]    </control>
[15:42:28.554]    <control if="!canReadPins" while="" timeout="0" info="">
[15:42:28.554]      // if-block "!canReadPins"
[15:42:28.554]        // =>  FALSE
[15:42:28.554]      // skip if-block "!canReadPins"
[15:42:28.554]    </control>
[15:42:28.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:42:28.554]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:28.554]        // =>  TRUE
[15:42:28.554]      <block atomic="false" info="">
[15:42:28.554]        WriteAP(0x00, 0x190008);
[15:42:28.564]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:28.564]        WriteAP(0xF0, 0x01);
[15:42:28.564]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:42:28.564]      </block>
[15:42:28.564]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:42:28.564]    </control>
[15:42:28.564]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:42:28.564]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:28.574]        // =>  FALSE
[15:42:28.574]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:42:28.574]    </control>
[15:42:28.574]    <block atomic="false" info="">
[15:42:28.574]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:42:28.574]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:42:28.574]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:42:28.574]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:42:28.584]      __ap = 0; //lets make sure we reset the access point selection
[15:42:28.584]        // -> [__ap <= 0x00000000]
[15:42:28.584]    </block>
[15:42:28.584]  </sequence>
[15:42:28.584]  
[15:42:28.624]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:42:28.624]  
[15:42:28.624]  <debugvars>
[15:42:28.624]    // Pre-defined
[15:42:28.624]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:42:28.624]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:42:28.624]    __dp=0x00000000
[15:42:28.624]    __ap=0x00000000
[15:42:28.624]    __traceout=0x00000000      (Trace Disabled)
[15:42:28.624]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:42:28.624]    __FlashAddr=0x00000000
[15:42:28.624]    __FlashLen=0x00000000
[15:42:28.624]    __FlashArg=0x00000000
[15:42:28.624]    __FlashOp=0x00000000
[15:42:28.624]    __Result=0x00000000
[15:42:28.624]  </debugvars>
[15:42:28.624]  
[15:42:28.624]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:42:28.624]    <block atomic="false" info="">
[15:42:28.624]      __var deviceID = 0;
[15:42:28.624]        // -> [deviceID <= 0x00000000]
[15:42:28.624]      __var version = 0;
[15:42:28.624]        // -> [version <= 0x00000000]
[15:42:28.624]      __var partNum = 0;
[15:42:28.624]        // -> [partNum <= 0x00000000]
[15:42:28.624]      __var manuf = 0;
[15:42:28.624]        // -> [manuf <= 0x00000000]
[15:42:28.624]      __var isMSPM0G1X0X_G3X0X = 0;
[15:42:28.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:42:28.624]      __var isProduction = 0;
[15:42:28.624]        // -> [isProduction <= 0x00000000]
[15:42:28.624]      __var continueId = 0;
[15:42:28.624]        // -> [continueId <= 0x00000000]
[15:42:28.624]      deviceID =   Read32(0x41C40004);
[15:42:28.644]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:42:28.644]        // -> [deviceID <= 0x2BB8802F]
[15:42:28.644]      version = deviceID >> 28;
[15:42:28.644]        // -> [version <= 0x00000002]
[15:42:28.644]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:42:28.644]        // -> [partNum <= 0x0000BB88]
[15:42:28.644]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:42:28.644]        // -> [manuf <= 0x00000017]
[15:42:28.644]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:42:28.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:42:28.644]      isProduction = (version > 0);
[15:42:28.644]        // -> [isProduction <= 0x00000001]
[15:42:28.644]    </block>
[15:42:28.644]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:42:28.644]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:42:28.644]        // =>  FALSE
[15:42:28.644]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:42:28.644]    </control>
[15:42:28.644]    <control if="continueId == 4" while="" timeout="0" info="">
[15:42:28.644]      // if-block "continueId == 4"
[15:42:28.644]        // =>  FALSE
[15:42:28.644]      // skip if-block "continueId == 4"
[15:42:28.644]    </control>
[15:42:28.644]    <control if="!isProduction" while="" timeout="0" info="">
[15:42:28.644]      // if-block "!isProduction"
[15:42:28.644]        // =>  FALSE
[15:42:28.644]      // skip if-block "!isProduction"
[15:42:28.644]    </control>
[15:42:28.644]  </sequence>
[15:42:28.644]  
[15:43:02.181]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:43:02.181]  
[15:43:02.181]  <debugvars>
[15:43:02.181]    // Pre-defined
[15:43:02.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:43:02.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:43:02.181]    __dp=0x00000000
[15:43:02.181]    __ap=0x00000000
[15:43:02.181]    __traceout=0x00000000      (Trace Disabled)
[15:43:02.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:43:02.181]    __FlashAddr=0x00000000
[15:43:02.181]    __FlashLen=0x00000000
[15:43:02.181]    __FlashArg=0x00000000
[15:43:02.181]    __FlashOp=0x00000000
[15:43:02.181]    __Result=0x00000000
[15:43:02.181]  </debugvars>
[15:43:02.181]  
[15:43:02.181]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:43:02.181]    <block atomic="false" info="">
[15:43:02.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:43:02.181]        // -> [isSWJ <= 0x00000001]
[15:43:02.181]      __var hasDormant = __protocol & 0x00020000;
[15:43:02.181]        // -> [hasDormant <= 0x00000000]
[15:43:02.181]      __var protType   = __protocol & 0x0000FFFF;
[15:43:02.181]        // -> [protType <= 0x00000002]
[15:43:02.181]    </block>
[15:43:02.181]    <control if="protType == 1" while="" timeout="0" info="">
[15:43:02.181]      // if-block "protType == 1"
[15:43:02.181]        // =>  FALSE
[15:43:02.181]      // skip if-block "protType == 1"
[15:43:02.181]    </control>
[15:43:02.181]    <control if="protType == 2" while="" timeout="0" info="">
[15:43:02.181]      // if-block "protType == 2"
[15:43:02.181]        // =>  TRUE
[15:43:02.181]      <control if="isSWJ" while="" timeout="0" info="">
[15:43:02.181]        // if-block "isSWJ"
[15:43:02.181]          // =>  TRUE
[15:43:02.181]        <control if="hasDormant" while="" timeout="0" info="">
[15:43:02.181]          // if-block "hasDormant"
[15:43:02.191]            // =>  FALSE
[15:43:02.191]          // skip if-block "hasDormant"
[15:43:02.191]        </control>
[15:43:02.191]        <control if="!hasDormant" while="" timeout="0" info="">
[15:43:02.191]          // if-block "!hasDormant"
[15:43:02.191]            // =>  TRUE
[15:43:02.191]          <block atomic="false" info="">
[15:43:02.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:43:02.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:43:02.191]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:43:02.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:43:02.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:43:02.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:43:02.201]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:43:02.201]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:43:02.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:43:02.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:43:02.201]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:43:02.201]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:43:02.201]          </block>
[15:43:02.201]          // end if-block "!hasDormant"
[15:43:02.211]        </control>
[15:43:02.211]        // end if-block "isSWJ"
[15:43:02.212]      </control>
[15:43:02.212]      <control if="!isSWJ" while="" timeout="0" info="">
[15:43:02.212]        // if-block "!isSWJ"
[15:43:02.212]          // =>  FALSE
[15:43:02.212]        // skip if-block "!isSWJ"
[15:43:02.212]      </control>
[15:43:02.212]      <block atomic="false" info="">
[15:43:02.212]        ReadDP(0x0);
[15:43:02.212]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:43:02.212]      </block>
[15:43:02.212]      // end if-block "protType == 2"
[15:43:02.212]    </control>
[15:43:02.212]  </sequence>
[15:43:02.212]  
[15:43:02.223]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:43:02.223]  
[15:43:02.223]  <debugvars>
[15:43:02.223]    // Pre-defined
[15:43:02.223]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:43:02.223]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:43:02.223]    __dp=0x00000000
[15:43:02.223]    __ap=0x00000000
[15:43:02.223]    __traceout=0x00000000      (Trace Disabled)
[15:43:02.223]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:43:02.223]    __FlashAddr=0x00000000
[15:43:02.223]    __FlashLen=0x00000000
[15:43:02.223]    __FlashArg=0x00000000
[15:43:02.223]    __FlashOp=0x00000000
[15:43:02.223]    __Result=0x00000000
[15:43:02.223]  </debugvars>
[15:43:02.223]  
[15:43:02.223]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:43:02.223]    <block atomic="false" info="">
[15:43:02.223]      __var SW_DP_ABORT       = 0x0;
[15:43:02.223]        // -> [SW_DP_ABORT <= 0x00000000]
[15:43:02.223]      __var DP_CTRL_STAT      = 0x4;
[15:43:02.223]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:43:02.223]      __var DP_SELECT         = 0x8;
[15:43:02.223]        // -> [DP_SELECT <= 0x00000008]
[15:43:02.223]      __var powered_down      = 0;
[15:43:02.223]        // -> [powered_down <= 0x00000000]
[15:43:02.223]      WriteDP(DP_SELECT, 0x00000000);
[15:43:02.231]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:43:02.231]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:43:02.241]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:43:02.241]        // -> [powered_down <= 0x00000001]
[15:43:02.241]    </block>
[15:43:02.241]    <control if="powered_down" while="" timeout="0" info="">
[15:43:02.241]      // if-block "powered_down"
[15:43:02.241]        // =>  TRUE
[15:43:02.241]      <block atomic="false" info="">
[15:43:02.241]        Message(0, "Debug/System power-up request sent");
[15:43:02.241]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:43:02.251]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:43:02.251]      </block>
[15:43:02.251]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:43:02.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:43:02.261]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:43:02.261]        // while-condition  =>  FALSE
[15:43:02.261]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:43:02.261]      </control>
[15:43:02.261]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:43:02.261]        // if-block "(__protocol & 0xFFFF) == 1"
[15:43:02.261]          // =>  FALSE
[15:43:02.261]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:43:02.261]      </control>
[15:43:02.261]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:43:02.261]        // if-block "(__protocol & 0xFFFF) == 2"
[15:43:02.261]          // =>  TRUE
[15:43:02.261]        <block atomic="false" info="">
[15:43:02.261]          Message(0, "executing SWD power up");
[15:43:02.261]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:43:02.261]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:43:02.261]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:43:02.271]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:43:02.271]        </block>
[15:43:02.271]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:43:02.271]      </control>
[15:43:02.271]      // end if-block "powered_down"
[15:43:02.271]    </control>
[15:43:02.271]    <block atomic="false" info="">
[15:43:02.271]      __var DEBUG_PORT_VAL    = 0;
[15:43:02.271]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:43:02.271]      __var ACCESS_POINT_VAL  = 0;
[15:43:02.271]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:43:02.271]      __ap = 1; 
[15:43:02.271]        // -> [__ap <= 0x00000001]
[15:43:02.271]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:43:02.271]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:43:02.271]      __ap = 4;
[15:43:02.271]        // -> [__ap <= 0x00000004]
[15:43:02.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:43:02.291]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:43:02.291]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:43:02.291]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:43:02.291]    </block>
[15:43:02.291]    <block atomic="false" info="">
[15:43:02.291]      __var nReset = 0x80;
[15:43:02.291]        // -> [nReset <= 0x00000080]
[15:43:02.291]      __var canReadPins = 0;
[15:43:02.291]        // -> [canReadPins <= 0x00000000]
[15:43:02.291]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:43:02.291]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:43:02.291]        // -> [canReadPins <= 0x00000001]
[15:43:02.291]    </block>
[15:43:02.291]    <control if="" while="1" timeout="200" info="">
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.291]      // while-condition  =>  TRUE
[15:43:02.291]      // while "1"  (timeout="200")
[15:43:02.301]      // while-condition  =>  TRUE
[15:43:02.301]      // while "1"  (timeout="200")
[15:43:02.301]      // while  =>  TIMEOUT
[15:43:02.301]      // end while "1"
[15:43:02.301]    </control>
[15:43:02.301]    <control if="canReadPins" while="" timeout="0" info="">
[15:43:02.301]      // if-block "canReadPins"
[15:43:02.301]        // =>  TRUE
[15:43:02.301]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:43:02.301]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:43:02.301]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:43:02.301]        // while-condition  =>  FALSE
[15:43:02.301]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:43:02.301]      </control>
[15:43:02.301]      // end if-block "canReadPins"
[15:43:02.301]    </control>
[15:43:02.301]    <control if="!canReadPins" while="" timeout="0" info="">
[15:43:02.301]      // if-block "!canReadPins"
[15:43:02.301]        // =>  FALSE
[15:43:02.301]      // skip if-block "!canReadPins"
[15:43:02.301]    </control>
[15:43:02.301]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:43:02.301]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:43:02.301]        // =>  TRUE
[15:43:02.301]      <block atomic="false" info="">
[15:43:02.301]        WriteAP(0x00, 0x190008);
[15:43:02.311]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:43:02.311]        WriteAP(0xF0, 0x01);
[15:43:02.311]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:43:02.311]      </block>
[15:43:02.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:43:02.311]    </control>
[15:43:02.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:43:02.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:43:02.311]        // =>  FALSE
[15:43:02.311]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:43:02.311]    </control>
[15:43:02.311]    <block atomic="false" info="">
[15:43:02.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:43:02.323]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:43:02.323]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:43:02.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:43:02.323]      __ap = 0; //lets make sure we reset the access point selection
[15:43:02.323]        // -> [__ap <= 0x00000000]
[15:43:02.323]    </block>
[15:43:02.323]  </sequence>
[15:43:02.323]  
[15:43:02.391]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:43:02.391]  
[15:43:02.391]  <debugvars>
[15:43:02.391]    // Pre-defined
[15:43:02.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:43:02.391]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:43:02.391]    __dp=0x00000000
[15:43:02.391]    __ap=0x00000000
[15:43:02.391]    __traceout=0x00000000      (Trace Disabled)
[15:43:02.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:43:02.391]    __FlashAddr=0x00000000
[15:43:02.391]    __FlashLen=0x00000000
[15:43:02.391]    __FlashArg=0x00000000
[15:43:02.391]    __FlashOp=0x00000000
[15:43:02.391]    __Result=0x00000000
[15:43:02.391]  </debugvars>
[15:43:02.391]  
[15:43:02.391]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:43:02.391]    <block atomic="false" info="">
[15:43:02.391]      __var deviceID = 0;
[15:43:02.391]        // -> [deviceID <= 0x00000000]
[15:43:02.391]      __var version = 0;
[15:43:02.391]        // -> [version <= 0x00000000]
[15:43:02.391]      __var partNum = 0;
[15:43:02.391]        // -> [partNum <= 0x00000000]
[15:43:02.391]      __var manuf = 0;
[15:43:02.391]        // -> [manuf <= 0x00000000]
[15:43:02.391]      __var isMSPM0G1X0X_G3X0X = 0;
[15:43:02.391]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:43:02.391]      __var isProduction = 0;
[15:43:02.391]        // -> [isProduction <= 0x00000000]
[15:43:02.391]      __var continueId = 0;
[15:43:02.391]        // -> [continueId <= 0x00000000]
[15:43:02.391]      deviceID =   Read32(0x41C40004);
[15:43:02.401]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:43:02.401]        // -> [deviceID <= 0x2BB8802F]
[15:43:02.401]      version = deviceID >> 28;
[15:43:02.401]        // -> [version <= 0x00000002]
[15:43:02.401]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:43:02.401]        // -> [partNum <= 0x0000BB88]
[15:43:02.401]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:43:02.401]        // -> [manuf <= 0x00000017]
[15:43:02.401]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:43:02.401]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:43:02.401]      isProduction = (version > 0);
[15:43:02.401]        // -> [isProduction <= 0x00000001]
[15:43:02.401]    </block>
[15:43:02.401]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:43:02.401]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:43:02.401]        // =>  FALSE
[15:43:02.401]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:43:02.401]    </control>
[15:43:02.411]    <control if="continueId == 4" while="" timeout="0" info="">
[15:43:02.411]      // if-block "continueId == 4"
[15:43:02.411]        // =>  FALSE
[15:43:02.411]      // skip if-block "continueId == 4"
[15:43:02.411]    </control>
[15:43:02.411]    <control if="!isProduction" while="" timeout="0" info="">
[15:43:02.411]      // if-block "!isProduction"
[15:43:02.411]        // =>  FALSE
[15:43:02.411]      // skip if-block "!isProduction"
[15:43:02.411]    </control>
[15:43:02.411]  </sequence>
[15:43:02.411]  
[15:44:15.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:44:15.218]  
[15:44:15.231]  <debugvars>
[15:44:15.231]    // Pre-defined
[15:44:15.231]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:15.231]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:15.231]    __dp=0x00000000
[15:44:15.231]    __ap=0x00000000
[15:44:15.231]    __traceout=0x00000000      (Trace Disabled)
[15:44:15.231]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:15.231]    __FlashAddr=0x00000000
[15:44:15.231]    __FlashLen=0x00000000
[15:44:15.231]    __FlashArg=0x00000000
[15:44:15.231]    __FlashOp=0x00000000
[15:44:15.231]    __Result=0x00000000
[15:44:15.231]  </debugvars>
[15:44:15.231]  
[15:44:15.231]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:44:15.231]    <block atomic="false" info="">
[15:44:15.231]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:44:15.231]        // -> [isSWJ <= 0x00000001]
[15:44:15.231]      __var hasDormant = __protocol & 0x00020000;
[15:44:15.231]        // -> [hasDormant <= 0x00000000]
[15:44:15.231]      __var protType   = __protocol & 0x0000FFFF;
[15:44:15.231]        // -> [protType <= 0x00000002]
[15:44:15.231]    </block>
[15:44:15.231]    <control if="protType == 1" while="" timeout="0" info="">
[15:44:15.231]      // if-block "protType == 1"
[15:44:15.231]        // =>  FALSE
[15:44:15.231]      // skip if-block "protType == 1"
[15:44:15.231]    </control>
[15:44:15.231]    <control if="protType == 2" while="" timeout="0" info="">
[15:44:15.231]      // if-block "protType == 2"
[15:44:15.231]        // =>  TRUE
[15:44:15.231]      <control if="isSWJ" while="" timeout="0" info="">
[15:44:15.238]        // if-block "isSWJ"
[15:44:15.238]          // =>  TRUE
[15:44:15.238]        <control if="hasDormant" while="" timeout="0" info="">
[15:44:15.238]          // if-block "hasDormant"
[15:44:15.238]            // =>  FALSE
[15:44:15.238]          // skip if-block "hasDormant"
[15:44:15.238]        </control>
[15:44:15.238]        <control if="!hasDormant" while="" timeout="0" info="">
[15:44:15.238]          // if-block "!hasDormant"
[15:44:15.238]            // =>  TRUE
[15:44:15.238]          <block atomic="false" info="">
[15:44:15.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:44:15.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:15.248]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:44:15.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:44:15.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:44:15.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:15.258]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:44:15.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:44:15.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:44:15.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:44:15.268]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:44:15.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:44:15.281]          </block>
[15:44:15.281]          // end if-block "!hasDormant"
[15:44:15.281]        </control>
[15:44:15.281]        // end if-block "isSWJ"
[15:44:15.281]      </control>
[15:44:15.281]      <control if="!isSWJ" while="" timeout="0" info="">
[15:44:15.281]        // if-block "!isSWJ"
[15:44:15.281]          // =>  FALSE
[15:44:15.281]        // skip if-block "!isSWJ"
[15:44:15.281]      </control>
[15:44:15.281]      <block atomic="false" info="">
[15:44:15.281]        ReadDP(0x0);
[15:44:15.288]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:44:15.288]      </block>
[15:44:15.288]      // end if-block "protType == 2"
[15:44:15.288]    </control>
[15:44:15.288]  </sequence>
[15:44:15.288]  
[15:44:15.297]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:44:15.297]  
[15:44:15.297]  <debugvars>
[15:44:15.297]    // Pre-defined
[15:44:15.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:15.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:15.297]    __dp=0x00000000
[15:44:15.297]    __ap=0x00000000
[15:44:15.297]    __traceout=0x00000000      (Trace Disabled)
[15:44:15.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:15.297]    __FlashAddr=0x00000000
[15:44:15.297]    __FlashLen=0x00000000
[15:44:15.297]    __FlashArg=0x00000000
[15:44:15.297]    __FlashOp=0x00000000
[15:44:15.297]    __Result=0x00000000
[15:44:15.297]  </debugvars>
[15:44:15.297]  
[15:44:15.297]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:44:15.297]    <block atomic="false" info="">
[15:44:15.297]      __var SW_DP_ABORT       = 0x0;
[15:44:15.297]        // -> [SW_DP_ABORT <= 0x00000000]
[15:44:15.297]      __var DP_CTRL_STAT      = 0x4;
[15:44:15.297]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:44:15.297]      __var DP_SELECT         = 0x8;
[15:44:15.297]        // -> [DP_SELECT <= 0x00000008]
[15:44:15.297]      __var powered_down      = 0;
[15:44:15.297]        // -> [powered_down <= 0x00000000]
[15:44:15.297]      WriteDP(DP_SELECT, 0x00000000);
[15:44:15.307]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:44:15.307]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:44:15.314]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:44:15.314]        // -> [powered_down <= 0x00000001]
[15:44:15.314]    </block>
[15:44:15.314]    <control if="powered_down" while="" timeout="0" info="">
[15:44:15.314]      // if-block "powered_down"
[15:44:15.314]        // =>  TRUE
[15:44:15.314]      <block atomic="false" info="">
[15:44:15.314]        Message(0, "Debug/System power-up request sent");
[15:44:15.314]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:44:15.318]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:44:15.318]      </block>
[15:44:15.318]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:44:15.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:44:15.318]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:44:15.318]        // while-condition  =>  FALSE
[15:44:15.318]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:44:15.318]      </control>
[15:44:15.318]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:44:15.318]        // if-block "(__protocol & 0xFFFF) == 1"
[15:44:15.318]          // =>  FALSE
[15:44:15.318]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:44:15.318]      </control>
[15:44:15.318]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:44:15.318]        // if-block "(__protocol & 0xFFFF) == 2"
[15:44:15.318]          // =>  TRUE
[15:44:15.318]        <block atomic="false" info="">
[15:44:15.318]          Message(0, "executing SWD power up");
[15:44:15.318]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:44:15.328]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:44:15.328]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:44:15.328]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:44:15.328]        </block>
[15:44:15.328]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:44:15.328]      </control>
[15:44:15.328]      // end if-block "powered_down"
[15:44:15.328]    </control>
[15:44:15.328]    <block atomic="false" info="">
[15:44:15.328]      __var DEBUG_PORT_VAL    = 0;
[15:44:15.328]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:44:15.328]      __var ACCESS_POINT_VAL  = 0;
[15:44:15.328]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:44:15.328]      __ap = 1; 
[15:44:15.328]        // -> [__ap <= 0x00000001]
[15:44:15.328]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:44:15.338]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:44:15.338]      __ap = 4;
[15:44:15.338]        // -> [__ap <= 0x00000004]
[15:44:15.338]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:15.348]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:44:15.348]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:44:15.348]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:15.348]    </block>
[15:44:15.348]    <block atomic="false" info="">
[15:44:15.348]      __var nReset = 0x80;
[15:44:15.348]        // -> [nReset <= 0x00000080]
[15:44:15.348]      __var canReadPins = 0;
[15:44:15.348]        // -> [canReadPins <= 0x00000000]
[15:44:15.348]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:44:15.358]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:44:15.358]        // -> [canReadPins <= 0x00000001]
[15:44:15.358]    </block>
[15:44:15.358]    <control if="" while="1" timeout="200" info="">
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.358]      // while "1"  (timeout="200")
[15:44:15.358]      // while-condition  =>  TRUE
[15:44:15.368]      // while "1"  (timeout="200")
[15:44:15.368]      // while  =>  TIMEOUT
[15:44:15.368]      // end while "1"
[15:44:15.368]    </control>
[15:44:15.368]    <control if="canReadPins" while="" timeout="0" info="">
[15:44:15.368]      // if-block "canReadPins"
[15:44:15.368]        // =>  TRUE
[15:44:15.368]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:44:15.368]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:44:15.368]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:44:15.368]        // while-condition  =>  FALSE
[15:44:15.368]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:44:15.368]      </control>
[15:44:15.368]      // end if-block "canReadPins"
[15:44:15.368]    </control>
[15:44:15.368]    <control if="!canReadPins" while="" timeout="0" info="">
[15:44:15.368]      // if-block "!canReadPins"
[15:44:15.368]        // =>  FALSE
[15:44:15.368]      // skip if-block "!canReadPins"
[15:44:15.368]    </control>
[15:44:15.368]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:44:15.368]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:15.368]        // =>  TRUE
[15:44:15.368]      <block atomic="false" info="">
[15:44:15.368]        WriteAP(0x00, 0x190008);
[15:44:15.378]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:15.378]        WriteAP(0xF0, 0x01);
[15:44:15.378]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:44:15.378]      </block>
[15:44:15.378]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:44:15.378]    </control>
[15:44:15.378]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:44:15.378]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:15.388]        // =>  FALSE
[15:44:15.388]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:44:15.388]    </control>
[15:44:15.388]    <block atomic="false" info="">
[15:44:15.388]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:44:15.388]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:44:15.388]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:44:15.388]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:44:15.388]      __ap = 0; //lets make sure we reset the access point selection
[15:44:15.388]        // -> [__ap <= 0x00000000]
[15:44:15.388]    </block>
[15:44:15.388]  </sequence>
[15:44:15.388]  
[15:44:15.438]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:44:15.438]  
[15:44:15.438]  <debugvars>
[15:44:15.438]    // Pre-defined
[15:44:15.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:44:15.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:44:15.438]    __dp=0x00000000
[15:44:15.438]    __ap=0x00000000
[15:44:15.448]    __traceout=0x00000000      (Trace Disabled)
[15:44:15.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:44:15.448]    __FlashAddr=0x00000000
[15:44:15.448]    __FlashLen=0x00000000
[15:44:15.448]    __FlashArg=0x00000000
[15:44:15.448]    __FlashOp=0x00000000
[15:44:15.448]    __Result=0x00000000
[15:44:15.448]  </debugvars>
[15:44:15.448]  
[15:44:15.448]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:44:15.448]    <block atomic="false" info="">
[15:44:15.448]      __var deviceID = 0;
[15:44:15.448]        // -> [deviceID <= 0x00000000]
[15:44:15.448]      __var version = 0;
[15:44:15.448]        // -> [version <= 0x00000000]
[15:44:15.448]      __var partNum = 0;
[15:44:15.448]        // -> [partNum <= 0x00000000]
[15:44:15.448]      __var manuf = 0;
[15:44:15.448]        // -> [manuf <= 0x00000000]
[15:44:15.448]      __var isMSPM0G1X0X_G3X0X = 0;
[15:44:15.448]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:44:15.448]      __var isProduction = 0;
[15:44:15.448]        // -> [isProduction <= 0x00000000]
[15:44:15.448]      __var continueId = 0;
[15:44:15.448]        // -> [continueId <= 0x00000000]
[15:44:15.448]      deviceID =   Read32(0x41C40004);
[15:44:15.458]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:44:15.458]        // -> [deviceID <= 0x2BB8802F]
[15:44:15.458]      version = deviceID >> 28;
[15:44:15.458]        // -> [version <= 0x00000002]
[15:44:15.458]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:44:15.458]        // -> [partNum <= 0x0000BB88]
[15:44:15.458]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:44:15.458]        // -> [manuf <= 0x00000017]
[15:44:15.458]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:44:15.458]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:44:15.458]      isProduction = (version > 0);
[15:44:15.458]        // -> [isProduction <= 0x00000001]
[15:44:15.458]    </block>
[15:44:15.458]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:44:15.458]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:44:15.458]        // =>  FALSE
[15:44:15.458]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:44:15.458]    </control>
[15:44:15.458]    <control if="continueId == 4" while="" timeout="0" info="">
[15:44:15.458]      // if-block "continueId == 4"
[15:44:15.458]        // =>  FALSE
[15:44:15.458]      // skip if-block "continueId == 4"
[15:44:15.458]    </control>
[15:44:15.458]    <control if="!isProduction" while="" timeout="0" info="">
[15:44:15.458]      // if-block "!isProduction"
[15:44:15.458]        // =>  FALSE
[15:44:15.458]      // skip if-block "!isProduction"
[15:44:15.458]    </control>
[15:44:15.458]  </sequence>
[15:44:15.458]  
[15:45:49.961]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:45:49.961]  
[15:45:49.975]  <debugvars>
[15:45:49.975]    // Pre-defined
[15:45:49.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:49.975]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:49.975]    __dp=0x00000000
[15:45:49.975]    __ap=0x00000000
[15:45:49.975]    __traceout=0x00000000      (Trace Disabled)
[15:45:49.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:49.975]    __FlashAddr=0x00000000
[15:45:49.975]    __FlashLen=0x00000000
[15:45:49.975]    __FlashArg=0x00000000
[15:45:49.975]    __FlashOp=0x00000000
[15:45:49.975]    __Result=0x00000000
[15:45:49.975]  </debugvars>
[15:45:49.975]  
[15:45:49.975]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:45:49.975]    <block atomic="false" info="">
[15:45:49.975]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:45:49.975]        // -> [isSWJ <= 0x00000001]
[15:45:49.975]      __var hasDormant = __protocol & 0x00020000;
[15:45:49.975]        // -> [hasDormant <= 0x00000000]
[15:45:49.975]      __var protType   = __protocol & 0x0000FFFF;
[15:45:49.975]        // -> [protType <= 0x00000002]
[15:45:49.975]    </block>
[15:45:49.975]    <control if="protType == 1" while="" timeout="0" info="">
[15:45:49.975]      // if-block "protType == 1"
[15:45:49.975]        // =>  FALSE
[15:45:49.975]      // skip if-block "protType == 1"
[15:45:49.975]    </control>
[15:45:49.975]    <control if="protType == 2" while="" timeout="0" info="">
[15:45:49.975]      // if-block "protType == 2"
[15:45:49.975]        // =>  TRUE
[15:45:49.975]      <control if="isSWJ" while="" timeout="0" info="">
[15:45:49.975]        // if-block "isSWJ"
[15:45:49.975]          // =>  TRUE
[15:45:49.975]        <control if="hasDormant" while="" timeout="0" info="">
[15:45:49.975]          // if-block "hasDormant"
[15:45:49.975]            // =>  FALSE
[15:45:49.982]          // skip if-block "hasDormant"
[15:45:49.982]        </control>
[15:45:49.982]        <control if="!hasDormant" while="" timeout="0" info="">
[15:45:49.982]          // if-block "!hasDormant"
[15:45:49.982]            // =>  TRUE
[15:45:49.982]          <block atomic="false" info="">
[15:45:49.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:45:49.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:49.991]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:45:49.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:45:49.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:45:49.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:49.992]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:45:50.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:45:50.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:45:50.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:50.002]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:45:50.007]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:45:50.007]          </block>
[15:45:50.007]          // end if-block "!hasDormant"
[15:45:50.007]        </control>
[15:45:50.007]        // end if-block "isSWJ"
[15:45:50.007]      </control>
[15:45:50.007]      <control if="!isSWJ" while="" timeout="0" info="">
[15:45:50.007]        // if-block "!isSWJ"
[15:45:50.007]          // =>  FALSE
[15:45:50.007]        // skip if-block "!isSWJ"
[15:45:50.007]      </control>
[15:45:50.007]      <block atomic="false" info="">
[15:45:50.007]        ReadDP(0x0);
[15:45:50.012]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:45:50.012]      </block>
[15:45:50.012]      // end if-block "protType == 2"
[15:45:50.012]    </control>
[15:45:50.012]  </sequence>
[15:45:50.012]  
[15:45:50.022]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:45:50.022]  
[15:45:50.022]  <debugvars>
[15:45:50.022]    // Pre-defined
[15:45:50.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:50.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:50.022]    __dp=0x00000000
[15:45:50.022]    __ap=0x00000000
[15:45:50.022]    __traceout=0x00000000      (Trace Disabled)
[15:45:50.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:50.022]    __FlashAddr=0x00000000
[15:45:50.022]    __FlashLen=0x00000000
[15:45:50.022]    __FlashArg=0x00000000
[15:45:50.022]    __FlashOp=0x00000000
[15:45:50.022]    __Result=0x00000000
[15:45:50.022]  </debugvars>
[15:45:50.022]  
[15:45:50.022]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:45:50.022]    <block atomic="false" info="">
[15:45:50.022]      __var SW_DP_ABORT       = 0x0;
[15:45:50.022]        // -> [SW_DP_ABORT <= 0x00000000]
[15:45:50.022]      __var DP_CTRL_STAT      = 0x4;
[15:45:50.022]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:45:50.022]      __var DP_SELECT         = 0x8;
[15:45:50.022]        // -> [DP_SELECT <= 0x00000008]
[15:45:50.022]      __var powered_down      = 0;
[15:45:50.022]        // -> [powered_down <= 0x00000000]
[15:45:50.022]      WriteDP(DP_SELECT, 0x00000000);
[15:45:50.022]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:45:50.032]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:45:50.032]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:45:50.032]        // -> [powered_down <= 0x00000001]
[15:45:50.032]    </block>
[15:45:50.032]    <control if="powered_down" while="" timeout="0" info="">
[15:45:50.032]      // if-block "powered_down"
[15:45:50.032]        // =>  TRUE
[15:45:50.032]      <block atomic="false" info="">
[15:45:50.032]        Message(0, "Debug/System power-up request sent");
[15:45:50.032]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:45:50.032]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:45:50.032]      </block>
[15:45:50.032]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:45:50.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:45:50.042]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:45:50.042]        // while-condition  =>  FALSE
[15:45:50.042]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:45:50.042]      </control>
[15:45:50.042]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:45:50.042]        // if-block "(__protocol & 0xFFFF) == 1"
[15:45:50.042]          // =>  FALSE
[15:45:50.042]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:45:50.042]      </control>
[15:45:50.042]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:45:50.042]        // if-block "(__protocol & 0xFFFF) == 2"
[15:45:50.042]          // =>  TRUE
[15:45:50.042]        <block atomic="false" info="">
[15:45:50.042]          Message(0, "executing SWD power up");
[15:45:50.042]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:45:50.052]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:45:50.052]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:45:50.052]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:45:50.052]        </block>
[15:45:50.052]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:45:50.052]      </control>
[15:45:50.052]      // end if-block "powered_down"
[15:45:50.052]    </control>
[15:45:50.052]    <block atomic="false" info="">
[15:45:50.052]      __var DEBUG_PORT_VAL    = 0;
[15:45:50.052]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:45:50.052]      __var ACCESS_POINT_VAL  = 0;
[15:45:50.052]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:45:50.052]      __ap = 1; 
[15:45:50.052]        // -> [__ap <= 0x00000001]
[15:45:50.052]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:45:50.072]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:45:50.072]      __ap = 4;
[15:45:50.072]        // -> [__ap <= 0x00000004]
[15:45:50.072]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:50.082]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:45:50.082]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:45:50.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:50.082]    </block>
[15:45:50.082]    <block atomic="false" info="">
[15:45:50.082]      __var nReset = 0x80;
[15:45:50.082]        // -> [nReset <= 0x00000080]
[15:45:50.082]      __var canReadPins = 0;
[15:45:50.082]        // -> [canReadPins <= 0x00000000]
[15:45:50.082]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:45:50.092]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:45:50.092]        // -> [canReadPins <= 0x00000001]
[15:45:50.092]    </block>
[15:45:50.092]    <control if="" while="1" timeout="200" info="">
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.092]      // while "1"  (timeout="200")
[15:45:50.092]      // while-condition  =>  TRUE
[15:45:50.102]      // while "1"  (timeout="200")
[15:45:50.102]      // while  =>  TIMEOUT
[15:45:50.102]      // end while "1"
[15:45:50.102]    </control>
[15:45:50.102]    <control if="canReadPins" while="" timeout="0" info="">
[15:45:50.102]      // if-block "canReadPins"
[15:45:50.102]        // =>  TRUE
[15:45:50.102]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:45:50.102]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:45:50.102]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:45:50.102]        // while-condition  =>  FALSE
[15:45:50.102]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:45:50.102]      </control>
[15:45:50.102]      // end if-block "canReadPins"
[15:45:50.102]    </control>
[15:45:50.102]    <control if="!canReadPins" while="" timeout="0" info="">
[15:45:50.102]      // if-block "!canReadPins"
[15:45:50.102]        // =>  FALSE
[15:45:50.102]      // skip if-block "!canReadPins"
[15:45:50.102]    </control>
[15:45:50.102]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:45:50.102]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:50.102]        // =>  TRUE
[15:45:50.102]      <block atomic="false" info="">
[15:45:50.102]        WriteAP(0x00, 0x190008);
[15:45:50.112]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:50.112]        WriteAP(0xF0, 0x01);
[15:45:50.122]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:50.122]      </block>
[15:45:50.122]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:50.122]    </control>
[15:45:50.122]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:45:50.122]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:50.122]        // =>  FALSE
[15:45:50.122]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:50.122]    </control>
[15:45:50.122]    <block atomic="false" info="">
[15:45:50.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:50.132]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:45:50.132]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:45:50.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:50.132]      __ap = 0; //lets make sure we reset the access point selection
[15:45:50.132]        // -> [__ap <= 0x00000000]
[15:45:50.132]    </block>
[15:45:50.132]  </sequence>
[15:45:50.132]  
[15:45:50.197]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:45:50.197]  
[15:45:50.197]  <debugvars>
[15:45:50.198]    // Pre-defined
[15:45:50.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:50.198]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:50.198]    __dp=0x00000000
[15:45:50.198]    __ap=0x00000000
[15:45:50.198]    __traceout=0x00000000      (Trace Disabled)
[15:45:50.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:50.199]    __FlashAddr=0x00000000
[15:45:50.199]    __FlashLen=0x00000000
[15:45:50.199]    __FlashArg=0x00000000
[15:45:50.199]    __FlashOp=0x00000000
[15:45:50.200]    __Result=0x00000000
[15:45:50.200]  </debugvars>
[15:45:50.200]  
[15:45:50.200]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:45:50.200]    <block atomic="false" info="">
[15:45:50.200]      __var deviceID = 0;
[15:45:50.201]        // -> [deviceID <= 0x00000000]
[15:45:50.201]      __var version = 0;
[15:45:50.201]        // -> [version <= 0x00000000]
[15:45:50.201]      __var partNum = 0;
[15:45:50.201]        // -> [partNum <= 0x00000000]
[15:45:50.201]      __var manuf = 0;
[15:45:50.202]        // -> [manuf <= 0x00000000]
[15:45:50.202]      __var isMSPM0G1X0X_G3X0X = 0;
[15:45:50.203]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:45:50.203]      __var isProduction = 0;
[15:45:50.203]        // -> [isProduction <= 0x00000000]
[15:45:50.203]      __var continueId = 0;
[15:45:50.203]        // -> [continueId <= 0x00000000]
[15:45:50.203]      deviceID =   Read32(0x41C40004);
[15:45:50.212]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:45:50.212]        // -> [deviceID <= 0x2BB8802F]
[15:45:50.212]      version = deviceID >> 28;
[15:45:50.214]        // -> [version <= 0x00000002]
[15:45:50.214]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:45:50.214]        // -> [partNum <= 0x0000BB88]
[15:45:50.214]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:45:50.214]        // -> [manuf <= 0x00000017]
[15:45:50.214]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:45:50.214]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:45:50.215]      isProduction = (version > 0);
[15:45:50.215]        // -> [isProduction <= 0x00000001]
[15:45:50.216]    </block>
[15:45:50.216]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:45:50.216]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:45:50.216]        // =>  FALSE
[15:45:50.216]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:45:50.216]    </control>
[15:45:50.216]    <control if="continueId == 4" while="" timeout="0" info="">
[15:45:50.216]      // if-block "continueId == 4"
[15:45:50.216]        // =>  FALSE
[15:45:50.216]      // skip if-block "continueId == 4"
[15:45:50.216]    </control>
[15:45:50.216]    <control if="!isProduction" while="" timeout="0" info="">
[15:45:50.216]      // if-block "!isProduction"
[15:45:50.216]        // =>  FALSE
[15:45:50.216]      // skip if-block "!isProduction"
[15:45:50.216]    </control>
[15:45:50.216]  </sequence>
[15:45:50.216]  
[15:47:06.222]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:47:06.222]  
[15:47:06.222]  <debugvars>
[15:47:06.222]    // Pre-defined
[15:47:06.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:06.222]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:06.222]    __dp=0x00000000
[15:47:06.222]    __ap=0x00000000
[15:47:06.222]    __traceout=0x00000000      (Trace Disabled)
[15:47:06.222]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:06.222]    __FlashAddr=0x00000000
[15:47:06.222]    __FlashLen=0x00000000
[15:47:06.222]    __FlashArg=0x00000000
[15:47:06.222]    __FlashOp=0x00000000
[15:47:06.222]    __Result=0x00000000
[15:47:06.222]  </debugvars>
[15:47:06.222]  
[15:47:06.222]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:47:06.222]    <block atomic="false" info="">
[15:47:06.222]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:47:06.222]        // -> [isSWJ <= 0x00000001]
[15:47:06.222]      __var hasDormant = __protocol & 0x00020000;
[15:47:06.222]        // -> [hasDormant <= 0x00000000]
[15:47:06.222]      __var protType   = __protocol & 0x0000FFFF;
[15:47:06.222]        // -> [protType <= 0x00000002]
[15:47:06.222]    </block>
[15:47:06.222]    <control if="protType == 1" while="" timeout="0" info="">
[15:47:06.222]      // if-block "protType == 1"
[15:47:06.222]        // =>  FALSE
[15:47:06.232]      // skip if-block "protType == 1"
[15:47:06.232]    </control>
[15:47:06.232]    <control if="protType == 2" while="" timeout="0" info="">
[15:47:06.232]      // if-block "protType == 2"
[15:47:06.232]        // =>  TRUE
[15:47:06.232]      <control if="isSWJ" while="" timeout="0" info="">
[15:47:06.232]        // if-block "isSWJ"
[15:47:06.232]          // =>  TRUE
[15:47:06.232]        <control if="hasDormant" while="" timeout="0" info="">
[15:47:06.232]          // if-block "hasDormant"
[15:47:06.232]            // =>  FALSE
[15:47:06.232]          // skip if-block "hasDormant"
[15:47:06.232]        </control>
[15:47:06.232]        <control if="!hasDormant" while="" timeout="0" info="">
[15:47:06.232]          // if-block "!hasDormant"
[15:47:06.232]            // =>  TRUE
[15:47:06.232]          <block atomic="false" info="">
[15:47:06.232]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:47:06.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:06.245]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:47:06.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:47:06.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:47:06.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:06.252]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:47:06.252]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:47:06.252]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:47:06.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:06.262]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:47:06.270]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:47:06.270]          </block>
[15:47:06.270]          // end if-block "!hasDormant"
[15:47:06.271]        </control>
[15:47:06.271]        // end if-block "isSWJ"
[15:47:06.271]      </control>
[15:47:06.271]      <control if="!isSWJ" while="" timeout="0" info="">
[15:47:06.272]        // if-block "!isSWJ"
[15:47:06.272]          // =>  FALSE
[15:47:06.272]        // skip if-block "!isSWJ"
[15:47:06.273]      </control>
[15:47:06.273]      <block atomic="false" info="">
[15:47:06.273]        ReadDP(0x0);
[15:47:06.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:47:06.279]      </block>
[15:47:06.280]      // end if-block "protType == 2"
[15:47:06.280]    </control>
[15:47:06.280]  </sequence>
[15:47:06.280]  
[15:47:06.286]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:47:06.286]  
[15:47:06.286]  <debugvars>
[15:47:06.286]    // Pre-defined
[15:47:06.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:06.287]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:06.287]    __dp=0x00000000
[15:47:06.287]    __ap=0x00000000
[15:47:06.287]    __traceout=0x00000000      (Trace Disabled)
[15:47:06.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:06.288]    __FlashAddr=0x00000000
[15:47:06.288]    __FlashLen=0x00000000
[15:47:06.288]    __FlashArg=0x00000000
[15:47:06.288]    __FlashOp=0x00000000
[15:47:06.288]    __Result=0x00000000
[15:47:06.288]  </debugvars>
[15:47:06.288]  
[15:47:06.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:47:06.288]    <block atomic="false" info="">
[15:47:06.288]      __var SW_DP_ABORT       = 0x0;
[15:47:06.289]        // -> [SW_DP_ABORT <= 0x00000000]
[15:47:06.289]      __var DP_CTRL_STAT      = 0x4;
[15:47:06.289]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:47:06.290]      __var DP_SELECT         = 0x8;
[15:47:06.290]        // -> [DP_SELECT <= 0x00000008]
[15:47:06.290]      __var powered_down      = 0;
[15:47:06.290]        // -> [powered_down <= 0x00000000]
[15:47:06.291]      WriteDP(DP_SELECT, 0x00000000);
[15:47:06.293]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:47:06.293]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:47:06.296]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:47:06.297]        // -> [powered_down <= 0x00000001]
[15:47:06.297]    </block>
[15:47:06.297]    <control if="powered_down" while="" timeout="0" info="">
[15:47:06.297]      // if-block "powered_down"
[15:47:06.297]        // =>  TRUE
[15:47:06.297]      <block atomic="false" info="">
[15:47:06.298]        Message(0, "Debug/System power-up request sent");
[15:47:06.298]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:47:06.301]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:47:06.302]      </block>
[15:47:06.302]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:47:06.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:47:06.308]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:47:06.308]        // while-condition  =>  FALSE
[15:47:06.308]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:47:06.308]      </control>
[15:47:06.309]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:47:06.309]        // if-block "(__protocol & 0xFFFF) == 1"
[15:47:06.309]          // =>  FALSE
[15:47:06.310]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:47:06.310]      </control>
[15:47:06.310]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:47:06.310]        // if-block "(__protocol & 0xFFFF) == 2"
[15:47:06.310]          // =>  TRUE
[15:47:06.310]        <block atomic="false" info="">
[15:47:06.310]          Message(0, "executing SWD power up");
[15:47:06.311]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:47:06.314]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:47:06.314]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:47:06.317]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:47:06.317]        </block>
[15:47:06.317]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:47:06.317]      </control>
[15:47:06.318]      // end if-block "powered_down"
[15:47:06.318]    </control>
[15:47:06.318]    <block atomic="false" info="">
[15:47:06.319]      __var DEBUG_PORT_VAL    = 0;
[15:47:06.319]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:47:06.319]      __var ACCESS_POINT_VAL  = 0;
[15:47:06.319]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:47:06.319]      __ap = 1; 
[15:47:06.319]        // -> [__ap <= 0x00000001]
[15:47:06.319]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:47:06.323]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:47:06.323]      __ap = 4;
[15:47:06.323]        // -> [__ap <= 0x00000004]
[15:47:06.323]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:06.331]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:47:06.331]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:47:06.331]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:06.331]    </block>
[15:47:06.331]    <block atomic="false" info="">
[15:47:06.331]      __var nReset = 0x80;
[15:47:06.331]        // -> [nReset <= 0x00000080]
[15:47:06.331]      __var canReadPins = 0;
[15:47:06.331]        // -> [canReadPins <= 0x00000000]
[15:47:06.331]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:47:06.331]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:47:06.331]        // -> [canReadPins <= 0x00000001]
[15:47:06.331]    </block>
[15:47:06.331]    <control if="" while="1" timeout="200" info="">
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.341]      // while-condition  =>  TRUE
[15:47:06.341]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.344]      // while-condition  =>  TRUE
[15:47:06.344]      // while "1"  (timeout="200")
[15:47:06.351]      // while-condition  =>  TRUE
[15:47:06.351]      // while "1"  (timeout="200")
[15:47:06.351]      // while  =>  TIMEOUT
[15:47:06.351]      // end while "1"
[15:47:06.351]    </control>
[15:47:06.351]    <control if="canReadPins" while="" timeout="0" info="">
[15:47:06.351]      // if-block "canReadPins"
[15:47:06.351]        // =>  TRUE
[15:47:06.351]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:47:06.351]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:47:06.351]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:47:06.351]        // while-condition  =>  FALSE
[15:47:06.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:47:06.351]      </control>
[15:47:06.351]      // end if-block "canReadPins"
[15:47:06.351]    </control>
[15:47:06.351]    <control if="!canReadPins" while="" timeout="0" info="">
[15:47:06.351]      // if-block "!canReadPins"
[15:47:06.351]        // =>  FALSE
[15:47:06.351]      // skip if-block "!canReadPins"
[15:47:06.351]    </control>
[15:47:06.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:47:06.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:06.351]        // =>  TRUE
[15:47:06.351]      <block atomic="false" info="">
[15:47:06.351]        WriteAP(0x00, 0x190008);
[15:47:06.361]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:06.361]        WriteAP(0xF0, 0x01);
[15:47:06.361]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:06.361]      </block>
[15:47:06.361]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:06.361]    </control>
[15:47:06.371]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:47:06.371]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:06.371]        // =>  FALSE
[15:47:06.371]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:06.371]    </control>
[15:47:06.371]    <block atomic="false" info="">
[15:47:06.371]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:06.382]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:47:06.382]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:47:06.382]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:06.382]      __ap = 0; //lets make sure we reset the access point selection
[15:47:06.382]        // -> [__ap <= 0x00000000]
[15:47:06.382]    </block>
[15:47:06.382]  </sequence>
[15:47:06.382]  
[15:47:06.421]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:47:06.421]  
[15:47:06.421]  <debugvars>
[15:47:06.421]    // Pre-defined
[15:47:06.421]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:06.421]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:06.421]    __dp=0x00000000
[15:47:06.421]    __ap=0x00000000
[15:47:06.421]    __traceout=0x00000000      (Trace Disabled)
[15:47:06.421]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:06.421]    __FlashAddr=0x00000000
[15:47:06.421]    __FlashLen=0x00000000
[15:47:06.421]    __FlashArg=0x00000000
[15:47:06.421]    __FlashOp=0x00000000
[15:47:06.421]    __Result=0x00000000
[15:47:06.421]  </debugvars>
[15:47:06.421]  
[15:47:06.421]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:47:06.421]    <block atomic="false" info="">
[15:47:06.421]      __var deviceID = 0;
[15:47:06.421]        // -> [deviceID <= 0x00000000]
[15:47:06.421]      __var version = 0;
[15:47:06.421]        // -> [version <= 0x00000000]
[15:47:06.421]      __var partNum = 0;
[15:47:06.421]        // -> [partNum <= 0x00000000]
[15:47:06.421]      __var manuf = 0;
[15:47:06.421]        // -> [manuf <= 0x00000000]
[15:47:06.421]      __var isMSPM0G1X0X_G3X0X = 0;
[15:47:06.421]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:47:06.421]      __var isProduction = 0;
[15:47:06.421]        // -> [isProduction <= 0x00000000]
[15:47:06.421]      __var continueId = 0;
[15:47:06.431]        // -> [continueId <= 0x00000000]
[15:47:06.431]      deviceID =   Read32(0x41C40004);
[15:47:06.441]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:47:06.441]        // -> [deviceID <= 0x2BB8802F]
[15:47:06.441]      version = deviceID >> 28;
[15:47:06.441]        // -> [version <= 0x00000002]
[15:47:06.441]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:47:06.441]        // -> [partNum <= 0x0000BB88]
[15:47:06.441]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:47:06.441]        // -> [manuf <= 0x00000017]
[15:47:06.441]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:47:06.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:47:06.441]      isProduction = (version > 0);
[15:47:06.441]        // -> [isProduction <= 0x00000001]
[15:47:06.445]    </block>
[15:47:06.445]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:47:06.445]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:47:06.445]        // =>  FALSE
[15:47:06.445]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:47:06.445]    </control>
[15:47:06.445]    <control if="continueId == 4" while="" timeout="0" info="">
[15:47:06.445]      // if-block "continueId == 4"
[15:47:06.445]        // =>  FALSE
[15:47:06.445]      // skip if-block "continueId == 4"
[15:47:06.445]    </control>
[15:47:06.445]    <control if="!isProduction" while="" timeout="0" info="">
[15:47:06.445]      // if-block "!isProduction"
[15:47:06.445]        // =>  FALSE
[15:47:06.445]      // skip if-block "!isProduction"
[15:47:06.445]    </control>
[15:47:06.445]  </sequence>
[15:47:06.445]  
