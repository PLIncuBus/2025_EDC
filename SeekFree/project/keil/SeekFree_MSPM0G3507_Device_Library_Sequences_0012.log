/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0012.log
 *  Created     : 01:28:34 (24/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[01:28:34.314]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:28:34.314]  
[01:28:34.314]  <debugvars>
[01:28:34.314]    // Pre-defined
[01:28:34.314]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:34.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:34.315]    __dp=0x00000000
[01:28:34.315]    __ap=0x00000000
[01:28:34.315]    __traceout=0x00000000      (Trace Disabled)
[01:28:34.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:34.315]    __FlashAddr=0x00000000
[01:28:34.316]    __FlashLen=0x00000000
[01:28:34.316]    __FlashArg=0x00000000
[01:28:34.317]    __FlashOp=0x00000000
[01:28:34.317]    __Result=0x00000000
[01:28:34.317]  </debugvars>
[01:28:34.317]  
[01:28:34.317]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:28:34.317]    <block atomic="false" info="">
[01:28:34.317]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:28:34.317]        // -> [isSWJ <= 0x00000001]
[01:28:34.317]      __var hasDormant = __protocol & 0x00020000;
[01:28:34.317]        // -> [hasDormant <= 0x00000000]
[01:28:34.318]      __var protType   = __protocol & 0x0000FFFF;
[01:28:34.318]        // -> [protType <= 0x00000002]
[01:28:34.318]    </block>
[01:28:34.318]    <control if="protType == 1" while="" timeout="0" info="">
[01:28:34.318]      // if-block "protType == 1"
[01:28:34.318]        // =>  FALSE
[01:28:34.318]      // skip if-block "protType == 1"
[01:28:34.318]    </control>
[01:28:34.318]    <control if="protType == 2" while="" timeout="0" info="">
[01:28:34.318]      // if-block "protType == 2"
[01:28:34.318]        // =>  TRUE
[01:28:34.319]      <control if="isSWJ" while="" timeout="0" info="">
[01:28:34.319]        // if-block "isSWJ"
[01:28:34.319]          // =>  TRUE
[01:28:34.319]        <control if="hasDormant" while="" timeout="0" info="">
[01:28:34.319]          // if-block "hasDormant"
[01:28:34.319]            // =>  FALSE
[01:28:34.319]          // skip if-block "hasDormant"
[01:28:34.319]        </control>
[01:28:34.319]        <control if="!hasDormant" while="" timeout="0" info="">
[01:28:34.320]          // if-block "!hasDormant"
[01:28:34.320]            // =>  TRUE
[01:28:34.320]          <block atomic="false" info="">
[01:28:34.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:28:34.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:34.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:28:34.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:28:34.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:28:34.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:34.321]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:28:34.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:28:34.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:28:34.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:34.322]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:28:34.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:28:34.323]          </block>
[01:28:34.323]          // end if-block "!hasDormant"
[01:28:34.323]        </control>
[01:28:34.323]        // end if-block "isSWJ"
[01:28:34.323]      </control>
[01:28:34.323]      <control if="!isSWJ" while="" timeout="0" info="">
[01:28:34.323]        // if-block "!isSWJ"
[01:28:34.323]          // =>  FALSE
[01:28:34.323]        // skip if-block "!isSWJ"
[01:28:34.324]      </control>
[01:28:34.324]      <block atomic="false" info="">
[01:28:34.324]        ReadDP(0x0);
[01:28:34.324]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:28:34.324]      </block>
[01:28:34.324]      // end if-block "protType == 2"
[01:28:34.325]    </control>
[01:28:34.325]  </sequence>
[01:28:34.325]  
[01:28:34.325]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:28:34.325]  
[01:28:34.325]  <debugvars>
[01:28:34.325]    // Pre-defined
[01:28:34.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:34.326]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:34.326]    __dp=0x00000000
[01:28:34.326]    __ap=0x00000000
[01:28:34.326]    __traceout=0x00000000      (Trace Disabled)
[01:28:34.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:34.326]    __FlashAddr=0x00000000
[01:28:34.326]    __FlashLen=0x00000000
[01:28:34.326]    __FlashArg=0x00000000
[01:28:34.326]    __FlashOp=0x00000000
[01:28:34.326]    __Result=0x00000000
[01:28:34.327]  </debugvars>
[01:28:34.327]  
[01:28:34.327]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:28:34.327]    <block atomic="false" info="">
[01:28:34.327]      __var SW_DP_ABORT       = 0x0;
[01:28:34.327]        // -> [SW_DP_ABORT <= 0x00000000]
[01:28:34.327]      __var DP_CTRL_STAT      = 0x4;
[01:28:34.327]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:28:34.327]      __var DP_SELECT         = 0x8;
[01:28:34.327]        // -> [DP_SELECT <= 0x00000008]
[01:28:34.327]      __var powered_down      = 0;
[01:28:34.327]        // -> [powered_down <= 0x00000000]
[01:28:34.328]      WriteDP(DP_SELECT, 0x00000000);
[01:28:34.328]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:28:34.328]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:28:34.329]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[01:28:34.329]        // -> [powered_down <= 0x00000000]
[01:28:34.329]    </block>
[01:28:34.329]    <control if="powered_down" while="" timeout="0" info="">
[01:28:34.329]      // if-block "powered_down"
[01:28:34.329]        // =>  FALSE
[01:28:34.329]      // skip if-block "powered_down"
[01:28:34.329]    </control>
[01:28:34.330]    <block atomic="false" info="">
[01:28:34.330]      __var DEBUG_PORT_VAL    = 0;
[01:28:34.330]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:28:34.330]      __var ACCESS_POINT_VAL  = 0;
[01:28:34.330]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:28:34.330]      __ap = 1; 
[01:28:34.330]        // -> [__ap <= 0x00000001]
[01:28:34.331]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:28:34.332]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:28:34.332]      __ap = 4;
[01:28:34.333]        // -> [__ap <= 0x00000004]
[01:28:34.333]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:34.334]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[01:28:34.334]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[01:28:34.334]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:34.335]    </block>
[01:28:34.335]    <block atomic="false" info="">
[01:28:34.336]      __var nReset = 0x80;
[01:28:34.336]        // -> [nReset <= 0x00000080]
[01:28:34.336]      __var canReadPins = 0;
[01:28:34.336]        // -> [canReadPins <= 0x00000000]
[01:28:34.336]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:28:34.336]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:28:34.336]        // -> [canReadPins <= 0x00000001]
[01:28:34.337]    </block>
[01:28:34.337]    <control if="" while="1" timeout="200" info="">
[01:28:34.337]      // while "1"  (timeout="200")
[01:28:34.337]      // while-condition  =>  TRUE
[01:28:34.337]      // while "1"  (timeout="200")
[01:28:34.337]      // while-condition  =>  TRUE
[01:28:34.337]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.338]      // while-condition  =>  TRUE
[01:28:34.338]      // while "1"  (timeout="200")
[01:28:34.340]      // while-condition  =>  TRUE
[01:28:34.340]      // while "1"  (timeout="200")
[01:28:34.340]      // while-condition  =>  TRUE
[01:28:34.340]      // while "1"  (timeout="200")
[01:28:34.340]      // while-condition  =>  TRUE
[01:28:34.340]      // while "1"  (timeout="200")
[01:28:34.340]      // while-condition  =>  TRUE
[01:28:34.340]      // while "1"  (timeout="200")
[01:28:34.340]      // while-condition  =>  TRUE
[01:28:34.340]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.341]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.341]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.341]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.341]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.341]      // while "1"  (timeout="200")
[01:28:34.341]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.342]      // while-condition  =>  TRUE
[01:28:34.342]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.343]      // while-condition  =>  TRUE
[01:28:34.343]      // while "1"  (timeout="200")
[01:28:34.344]      // while-condition  =>  TRUE
[01:28:34.344]      // while "1"  (timeout="200")
[01:28:34.344]      // while-condition  =>  TRUE
[01:28:34.344]      // while "1"  (timeout="200")
[01:28:34.344]      // while-condition  =>  TRUE
[01:28:34.344]      // while "1"  (timeout="200")
[01:28:34.344]      // while-condition  =>  TRUE
[01:28:34.344]      // while "1"  (timeout="200")
[01:28:34.344]      // while-condition  =>  TRUE
[01:28:34.344]      // while "1"  (timeout="200")
[01:28:34.345]      // while-condition  =>  TRUE
[01:28:34.345]      // while "1"  (timeout="200")
[01:28:34.345]      // while-condition  =>  TRUE
[01:28:34.345]      // while "1"  (timeout="200")
[01:28:34.345]      // while-condition  =>  TRUE
[01:28:34.345]      // while "1"  (timeout="200")
[01:28:34.346]      // while-condition  =>  TRUE
[01:28:34.346]      // while "1"  (timeout="200")
[01:28:34.346]      // while-condition  =>  TRUE
[01:28:34.346]      // while "1"  (timeout="200")
[01:28:34.346]      // while-condition  =>  TRUE
[01:28:34.346]      // while "1"  (timeout="200")
[01:28:34.346]      // while-condition  =>  TRUE
[01:28:34.346]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.347]      // while-condition  =>  TRUE
[01:28:34.347]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.349]      // while "1"  (timeout="200")
[01:28:34.349]      // while-condition  =>  TRUE
[01:28:34.350]      // while "1"  (timeout="200")
[01:28:34.350]      // while  =>  TIMEOUT
[01:28:34.350]      // end while "1"
[01:28:34.350]    </control>
[01:28:34.350]    <control if="canReadPins" while="" timeout="0" info="">
[01:28:34.350]      // if-block "canReadPins"
[01:28:34.350]        // =>  TRUE
[01:28:34.350]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:28:34.350]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:28:34.351]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:28:34.351]        // while-condition  =>  FALSE
[01:28:34.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:28:34.351]      </control>
[01:28:34.351]      // end if-block "canReadPins"
[01:28:34.351]    </control>
[01:28:34.351]    <control if="!canReadPins" while="" timeout="0" info="">
[01:28:34.351]      // if-block "!canReadPins"
[01:28:34.351]        // =>  FALSE
[01:28:34.351]      // skip if-block "!canReadPins"
[01:28:34.352]    </control>
[01:28:34.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:28:34.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:34.352]        // =>  FALSE
[01:28:34.352]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:34.352]    </control>
[01:28:34.353]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:28:34.353]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:34.353]        // =>  TRUE
[01:28:34.353]      <block atomic="false" info="">
[01:28:34.354]        WriteAP(0xF0, 0x01);
[01:28:34.355]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:34.355]        WriteAP(0x00, 0xF90008);
[01:28:34.356]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:34.356]        WriteAP(0xF0, 0x01);
[01:28:34.357]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:34.357]      </block>
[01:28:34.358]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:34.358]    </control>
[01:28:34.358]    <block atomic="false" info="">
[01:28:34.358]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:34.359]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[01:28:34.359]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[01:28:34.359]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:34.359]      __ap = 0; //lets make sure we reset the access point selection
[01:28:34.359]        // -> [__ap <= 0x00000000]
[01:28:34.360]    </block>
[01:28:34.360]  </sequence>
[01:28:34.360]  
[01:28:34.365]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:28:34.365]  
[01:28:34.366]  <debugvars>
[01:28:34.366]    // Pre-defined
[01:28:34.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:34.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:34.366]    __dp=0x00000000
[01:28:34.366]    __ap=0x00000000
[01:28:34.366]    __traceout=0x00000000      (Trace Disabled)
[01:28:34.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:34.366]    __FlashAddr=0x00000000
[01:28:34.366]    __FlashLen=0x00000000
[01:28:34.366]    __FlashArg=0x00000000
[01:28:34.367]    __FlashOp=0x00000000
[01:28:34.367]    __Result=0x00000000
[01:28:34.367]  </debugvars>
[01:28:34.367]  
[01:28:34.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:28:34.367]    <block atomic="false" info="">
[01:28:34.367]      __var deviceID = 0;
[01:28:34.367]        // -> [deviceID <= 0x00000000]
[01:28:34.367]      __var version = 0;
[01:28:34.367]        // -> [version <= 0x00000000]
[01:28:34.368]      __var partNum = 0;
[01:28:34.368]        // -> [partNum <= 0x00000000]
[01:28:34.368]      __var manuf = 0;
[01:28:34.368]        // -> [manuf <= 0x00000000]
[01:28:34.368]      __var isMSPM0G1X0X_G3X0X = 0;
[01:28:34.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:28:34.368]      __var isProduction = 0;
[01:28:34.368]        // -> [isProduction <= 0x00000000]
[01:28:34.368]      __var continueId = 0;
[01:28:34.368]        // -> [continueId <= 0x00000000]
[01:28:34.369]      deviceID =   Read32(0x41C40004);
[01:28:34.370]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:28:34.370]        // -> [deviceID <= 0x2BB8802F]
[01:28:34.370]      version = deviceID >> 28;
[01:28:34.370]        // -> [version <= 0x00000002]
[01:28:34.370]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:28:34.370]        // -> [partNum <= 0x0000BB88]
[01:28:34.371]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:28:34.371]        // -> [manuf <= 0x00000017]
[01:28:34.371]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:28:34.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:28:34.371]      isProduction = (version > 0);
[01:28:34.371]        // -> [isProduction <= 0x00000001]
[01:28:34.371]    </block>
[01:28:34.371]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:28:34.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:28:34.372]        // =>  FALSE
[01:28:34.372]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:28:34.372]    </control>
[01:28:34.372]    <control if="continueId == 4" while="" timeout="0" info="">
[01:28:34.372]      // if-block "continueId == 4"
[01:28:34.372]        // =>  FALSE
[01:28:34.372]      // skip if-block "continueId == 4"
[01:28:34.373]    </control>
[01:28:34.373]    <control if="!isProduction" while="" timeout="0" info="">
[01:28:34.373]      // if-block "!isProduction"
[01:28:34.373]        // =>  FALSE
[01:28:34.373]      // skip if-block "!isProduction"
[01:28:34.373]    </control>
[01:28:34.373]  </sequence>
[01:28:34.373]  
[01:28:37.906]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:28:37.906]  
[01:28:37.906]  <debugvars>
[01:28:37.906]    // Pre-defined
[01:28:37.906]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:37.906]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:37.907]    __dp=0x00000000
[01:28:37.907]    __ap=0x00000000
[01:28:37.907]    __traceout=0x00000000      (Trace Disabled)
[01:28:37.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:37.907]    __FlashAddr=0x00000000
[01:28:37.907]    __FlashLen=0x00000000
[01:28:37.907]    __FlashArg=0x00000000
[01:28:37.907]    __FlashOp=0x00000000
[01:28:37.907]    __Result=0x00000000
[01:28:37.907]  </debugvars>
[01:28:37.907]  
[01:28:37.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:28:37.907]    <block atomic="false" info="">
[01:28:37.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:28:37.907]        // -> [isSWJ <= 0x00000001]
[01:28:37.907]      __var hasDormant = __protocol & 0x00020000;
[01:28:37.908]        // -> [hasDormant <= 0x00000000]
[01:28:37.908]      __var protType   = __protocol & 0x0000FFFF;
[01:28:37.908]        // -> [protType <= 0x00000002]
[01:28:37.908]    </block>
[01:28:37.908]    <control if="protType == 1" while="" timeout="0" info="">
[01:28:37.908]      // if-block "protType == 1"
[01:28:37.909]        // =>  FALSE
[01:28:37.909]      // skip if-block "protType == 1"
[01:28:37.909]    </control>
[01:28:37.909]    <control if="protType == 2" while="" timeout="0" info="">
[01:28:37.909]      // if-block "protType == 2"
[01:28:37.909]        // =>  TRUE
[01:28:37.909]      <control if="isSWJ" while="" timeout="0" info="">
[01:28:37.909]        // if-block "isSWJ"
[01:28:37.909]          // =>  TRUE
[01:28:37.909]        <control if="hasDormant" while="" timeout="0" info="">
[01:28:37.909]          // if-block "hasDormant"
[01:28:37.910]            // =>  FALSE
[01:28:37.910]          // skip if-block "hasDormant"
[01:28:37.910]        </control>
[01:28:37.910]        <control if="!hasDormant" while="" timeout="0" info="">
[01:28:37.910]          // if-block "!hasDormant"
[01:28:37.910]            // =>  TRUE
[01:28:37.910]          <block atomic="false" info="">
[01:28:37.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:28:37.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:37.911]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:28:37.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:28:37.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:28:37.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:37.912]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:28:37.912]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:28:37.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:28:37.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:37.913]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:28:37.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:28:37.913]          </block>
[01:28:37.914]          // end if-block "!hasDormant"
[01:28:37.914]        </control>
[01:28:37.914]        // end if-block "isSWJ"
[01:28:37.914]      </control>
[01:28:37.914]      <control if="!isSWJ" while="" timeout="0" info="">
[01:28:37.914]        // if-block "!isSWJ"
[01:28:37.915]          // =>  FALSE
[01:28:37.915]        // skip if-block "!isSWJ"
[01:28:37.915]      </control>
[01:28:37.915]      <block atomic="false" info="">
[01:28:37.915]        ReadDP(0x0);
[01:28:37.915]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:28:37.916]      </block>
[01:28:37.916]      // end if-block "protType == 2"
[01:28:37.916]    </control>
[01:28:37.916]  </sequence>
[01:28:37.916]  
[01:28:37.916]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:28:37.916]  
[01:28:37.917]  <debugvars>
[01:28:37.917]    // Pre-defined
[01:28:37.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:37.917]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:37.917]    __dp=0x00000000
[01:28:37.918]    __ap=0x00000000
[01:28:37.918]    __traceout=0x00000000      (Trace Disabled)
[01:28:37.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:37.918]    __FlashAddr=0x00000000
[01:28:37.918]    __FlashLen=0x00000000
[01:28:37.918]    __FlashArg=0x00000000
[01:28:37.918]    __FlashOp=0x00000000
[01:28:37.918]    __Result=0x00000000
[01:28:37.918]  </debugvars>
[01:28:37.918]  
[01:28:37.918]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:28:37.919]    <block atomic="false" info="">
[01:28:37.919]      __var SW_DP_ABORT       = 0x0;
[01:28:37.919]        // -> [SW_DP_ABORT <= 0x00000000]
[01:28:37.919]      __var DP_CTRL_STAT      = 0x4;
[01:28:37.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:28:37.919]      __var DP_SELECT         = 0x8;
[01:28:37.919]        // -> [DP_SELECT <= 0x00000008]
[01:28:37.919]      __var powered_down      = 0;
[01:28:37.919]        // -> [powered_down <= 0x00000000]
[01:28:37.919]      WriteDP(DP_SELECT, 0x00000000);
[01:28:37.920]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:28:37.920]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:28:37.921]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:28:37.921]        // -> [powered_down <= 0x00000001]
[01:28:37.921]    </block>
[01:28:37.921]    <control if="powered_down" while="" timeout="0" info="">
[01:28:37.921]      // if-block "powered_down"
[01:28:37.921]        // =>  TRUE
[01:28:37.921]      <block atomic="false" info="">
[01:28:37.921]        Message(0, "Debug/System power-up request sent");
[01:28:37.921]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:28:37.922]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:28:37.922]      </block>
[01:28:37.922]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:28:37.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:28:37.923]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:28:37.923]        // while-condition  =>  FALSE
[01:28:37.923]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:28:37.923]      </control>
[01:28:37.923]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:28:37.923]        // if-block "(__protocol & 0xFFFF) == 1"
[01:28:37.923]          // =>  FALSE
[01:28:37.923]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:28:37.924]      </control>
[01:28:37.924]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:28:37.924]        // if-block "(__protocol & 0xFFFF) == 2"
[01:28:37.924]          // =>  TRUE
[01:28:37.924]        <block atomic="false" info="">
[01:28:37.924]          Message(0, "executing SWD power up");
[01:28:37.928]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:28:37.928]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:28:37.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:28:37.929]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:28:37.929]        </block>
[01:28:37.930]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:28:37.930]      </control>
[01:28:37.930]      // end if-block "powered_down"
[01:28:37.930]    </control>
[01:28:37.930]    <block atomic="false" info="">
[01:28:37.930]      __var DEBUG_PORT_VAL    = 0;
[01:28:37.930]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:28:37.931]      __var ACCESS_POINT_VAL  = 0;
[01:28:37.931]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:28:37.931]      __ap = 1; 
[01:28:37.931]        // -> [__ap <= 0x00000001]
[01:28:37.931]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:28:37.932]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:28:37.932]      __ap = 4;
[01:28:37.932]        // -> [__ap <= 0x00000004]
[01:28:37.932]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:37.933]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:28:37.933]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:28:37.933]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:37.934]    </block>
[01:28:37.935]    <block atomic="false" info="">
[01:28:37.935]      __var nReset = 0x80;
[01:28:37.935]        // -> [nReset <= 0x00000080]
[01:28:37.935]      __var canReadPins = 0;
[01:28:37.935]        // -> [canReadPins <= 0x00000000]
[01:28:37.935]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:28:37.935]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:28:37.936]        // -> [canReadPins <= 0x00000001]
[01:28:37.936]    </block>
[01:28:37.936]    <control if="" while="1" timeout="200" info="">
[01:28:37.936]      // while "1"  (timeout="200")
[01:28:37.936]      // while-condition  =>  TRUE
[01:28:37.936]      // while "1"  (timeout="200")
[01:28:37.936]      // while-condition  =>  TRUE
[01:28:37.936]      // while "1"  (timeout="200")
[01:28:37.936]      // while-condition  =>  TRUE
[01:28:37.936]      // while "1"  (timeout="200")
[01:28:37.936]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.937]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.937]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.937]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.937]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.937]      // while-condition  =>  TRUE
[01:28:37.937]      // while "1"  (timeout="200")
[01:28:37.938]      // while-condition  =>  TRUE
[01:28:37.938]      // while "1"  (timeout="200")
[01:28:37.938]      // while-condition  =>  TRUE
[01:28:37.938]      // while "1"  (timeout="200")
[01:28:37.938]      // while-condition  =>  TRUE
[01:28:37.938]      // while "1"  (timeout="200")
[01:28:37.938]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.939]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.939]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.939]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.939]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.939]      // while-condition  =>  TRUE
[01:28:37.939]      // while "1"  (timeout="200")
[01:28:37.940]      // while-condition  =>  TRUE
[01:28:37.940]      // while "1"  (timeout="200")
[01:28:37.940]      // while-condition  =>  TRUE
[01:28:37.940]      // while "1"  (timeout="200")
[01:28:37.940]      // while-condition  =>  TRUE
[01:28:37.940]      // while "1"  (timeout="200")
[01:28:37.940]      // while-condition  =>  TRUE
[01:28:37.940]      // while "1"  (timeout="200")
[01:28:37.941]      // while-condition  =>  TRUE
[01:28:37.941]      // while "1"  (timeout="200")
[01:28:37.941]      // while-condition  =>  TRUE
[01:28:37.941]      // while "1"  (timeout="200")
[01:28:37.941]      // while-condition  =>  TRUE
[01:28:37.941]      // while "1"  (timeout="200")
[01:28:37.941]      // while-condition  =>  TRUE
[01:28:37.941]      // while "1"  (timeout="200")
[01:28:37.941]      // while-condition  =>  TRUE
[01:28:37.941]      // while "1"  (timeout="200")
[01:28:37.942]      // while-condition  =>  TRUE
[01:28:37.942]      // while "1"  (timeout="200")
[01:28:37.942]      // while-condition  =>  TRUE
[01:28:37.942]      // while "1"  (timeout="200")
[01:28:37.942]      // while-condition  =>  TRUE
[01:28:37.942]      // while "1"  (timeout="200")
[01:28:37.942]      // while-condition  =>  TRUE
[01:28:37.942]      // while "1"  (timeout="200")
[01:28:37.942]      // while-condition  =>  TRUE
[01:28:37.942]      // while "1"  (timeout="200")
[01:28:37.943]      // while-condition  =>  TRUE
[01:28:37.943]      // while "1"  (timeout="200")
[01:28:37.943]      // while  =>  TIMEOUT
[01:28:37.943]      // end while "1"
[01:28:37.943]    </control>
[01:28:37.943]    <control if="canReadPins" while="" timeout="0" info="">
[01:28:37.943]      // if-block "canReadPins"
[01:28:37.943]        // =>  TRUE
[01:28:37.943]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:28:37.944]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:28:37.944]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:28:37.944]        // while-condition  =>  FALSE
[01:28:37.944]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:28:37.944]      </control>
[01:28:37.944]      // end if-block "canReadPins"
[01:28:37.944]    </control>
[01:28:37.945]    <control if="!canReadPins" while="" timeout="0" info="">
[01:28:37.945]      // if-block "!canReadPins"
[01:28:37.945]        // =>  FALSE
[01:28:37.945]      // skip if-block "!canReadPins"
[01:28:37.945]    </control>
[01:28:37.945]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:28:37.945]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:37.945]        // =>  TRUE
[01:28:37.945]      <block atomic="false" info="">
[01:28:37.945]        WriteAP(0x00, 0x190008);
[01:28:37.946]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:37.946]        WriteAP(0xF0, 0x01);
[01:28:37.947]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:37.947]      </block>
[01:28:37.947]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:37.947]    </control>
[01:28:37.947]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:28:37.947]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:37.949]        // =>  FALSE
[01:28:37.949]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:37.949]    </control>
[01:28:37.949]    <block atomic="false" info="">
[01:28:37.949]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:37.950]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:28:37.950]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:28:37.950]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:37.951]      __ap = 0; //lets make sure we reset the access point selection
[01:28:37.951]        // -> [__ap <= 0x00000000]
[01:28:37.952]    </block>
[01:28:37.952]  </sequence>
[01:28:37.952]  
[01:28:37.959]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:28:37.959]  
[01:28:37.959]  <debugvars>
[01:28:37.959]    // Pre-defined
[01:28:37.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:37.959]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:37.959]    __dp=0x00000000
[01:28:37.959]    __ap=0x00000000
[01:28:37.959]    __traceout=0x00000000      (Trace Disabled)
[01:28:37.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:37.959]    __FlashAddr=0x00000000
[01:28:37.960]    __FlashLen=0x00000000
[01:28:37.960]    __FlashArg=0x00000000
[01:28:37.960]    __FlashOp=0x00000000
[01:28:37.960]    __Result=0x00000000
[01:28:37.960]  </debugvars>
[01:28:37.960]  
[01:28:37.960]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:28:37.960]    <block atomic="false" info="">
[01:28:37.960]      __var deviceID = 0;
[01:28:37.961]        // -> [deviceID <= 0x00000000]
[01:28:37.961]      __var version = 0;
[01:28:37.961]        // -> [version <= 0x00000000]
[01:28:37.961]      __var partNum = 0;
[01:28:37.961]        // -> [partNum <= 0x00000000]
[01:28:37.961]      __var manuf = 0;
[01:28:37.961]        // -> [manuf <= 0x00000000]
[01:28:37.961]      __var isMSPM0G1X0X_G3X0X = 0;
[01:28:37.961]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:28:37.961]      __var isProduction = 0;
[01:28:37.961]        // -> [isProduction <= 0x00000000]
[01:28:37.961]      __var continueId = 0;
[01:28:37.961]        // -> [continueId <= 0x00000000]
[01:28:37.961]      deviceID =   Read32(0x41C40004);
[01:28:37.963]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:28:37.963]        // -> [deviceID <= 0x2BB8802F]
[01:28:37.963]      version = deviceID >> 28;
[01:28:37.963]        // -> [version <= 0x00000002]
[01:28:37.963]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:28:37.963]        // -> [partNum <= 0x0000BB88]
[01:28:37.963]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:28:37.963]        // -> [manuf <= 0x00000017]
[01:28:37.963]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:28:37.963]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:28:37.963]      isProduction = (version > 0);
[01:28:37.963]        // -> [isProduction <= 0x00000001]
[01:28:37.963]    </block>
[01:28:37.965]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:28:37.965]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:28:37.965]        // =>  FALSE
[01:28:37.965]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:28:37.965]    </control>
[01:28:37.965]    <control if="continueId == 4" while="" timeout="0" info="">
[01:28:37.965]      // if-block "continueId == 4"
[01:28:37.965]        // =>  FALSE
[01:28:37.965]      // skip if-block "continueId == 4"
[01:28:37.965]    </control>
[01:28:37.965]    <control if="!isProduction" while="" timeout="0" info="">
[01:28:37.966]      // if-block "!isProduction"
[01:28:37.966]        // =>  FALSE
[01:28:37.966]      // skip if-block "!isProduction"
[01:28:37.966]    </control>
[01:28:37.966]  </sequence>
[01:28:37.966]  
[01:29:47.825]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:47.825]  
[01:29:47.834]  <debugvars>
[01:29:47.834]    // Pre-defined
[01:29:47.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:47.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:47.834]    __dp=0x00000000
[01:29:47.834]    __ap=0x00000000
[01:29:47.834]    __traceout=0x00000000      (Trace Disabled)
[01:29:47.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:47.835]    __FlashAddr=0x00000000
[01:29:47.835]    __FlashLen=0x00000000
[01:29:47.835]    __FlashArg=0x00000000
[01:29:47.835]    __FlashOp=0x00000000
[01:29:47.835]    __Result=0x00000000
[01:29:47.835]  </debugvars>
[01:29:47.835]  
[01:29:47.835]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:47.835]    <block atomic="false" info="">
[01:29:47.835]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:47.835]        // -> [isSWJ <= 0x00000001]
[01:29:47.835]      __var hasDormant = __protocol & 0x00020000;
[01:29:47.835]        // -> [hasDormant <= 0x00000000]
[01:29:47.835]      __var protType   = __protocol & 0x0000FFFF;
[01:29:47.835]        // -> [protType <= 0x00000002]
[01:29:47.836]    </block>
[01:29:47.836]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:47.836]      // if-block "protType == 1"
[01:29:47.836]        // =>  FALSE
[01:29:47.836]      // skip if-block "protType == 1"
[01:29:47.836]    </control>
[01:29:47.836]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:47.836]      // if-block "protType == 2"
[01:29:47.836]        // =>  TRUE
[01:29:47.836]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:47.836]        // if-block "isSWJ"
[01:29:47.837]          // =>  TRUE
[01:29:47.837]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:47.837]          // if-block "hasDormant"
[01:29:47.837]            // =>  FALSE
[01:29:47.837]          // skip if-block "hasDormant"
[01:29:47.837]        </control>
[01:29:47.837]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:47.837]          // if-block "!hasDormant"
[01:29:47.837]            // =>  TRUE
[01:29:47.837]          <block atomic="false" info="">
[01:29:47.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:47.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:47.838]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:47.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:47.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:47.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:47.839]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:47.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:47.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:47.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:47.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:47.840]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:47.840]          </block>
[01:29:47.840]          // end if-block "!hasDormant"
[01:29:47.840]        </control>
[01:29:47.840]        // end if-block "isSWJ"
[01:29:47.840]      </control>
[01:29:47.841]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:47.841]        // if-block "!isSWJ"
[01:29:47.841]          // =>  FALSE
[01:29:47.841]        // skip if-block "!isSWJ"
[01:29:47.841]      </control>
[01:29:47.841]      <block atomic="false" info="">
[01:29:47.841]        ReadDP(0x0);
[01:29:47.842]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:47.842]      </block>
[01:29:47.842]      // end if-block "protType == 2"
[01:29:47.843]    </control>
[01:29:47.843]  </sequence>
[01:29:47.843]  
[01:29:47.843]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:47.843]  
[01:29:47.843]  <debugvars>
[01:29:47.843]    // Pre-defined
[01:29:47.843]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:47.843]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:47.844]    __dp=0x00000000
[01:29:47.844]    __ap=0x00000000
[01:29:47.844]    __traceout=0x00000000      (Trace Disabled)
[01:29:47.844]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:47.844]    __FlashAddr=0x00000000
[01:29:47.844]    __FlashLen=0x00000000
[01:29:47.844]    __FlashArg=0x00000000
[01:29:47.844]    __FlashOp=0x00000000
[01:29:47.844]    __Result=0x00000000
[01:29:47.844]  </debugvars>
[01:29:47.844]  
[01:29:47.844]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:47.845]    <block atomic="false" info="">
[01:29:47.845]      __var SW_DP_ABORT       = 0x0;
[01:29:47.845]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:47.845]      __var DP_CTRL_STAT      = 0x4;
[01:29:47.845]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:47.845]      __var DP_SELECT         = 0x8;
[01:29:47.845]        // -> [DP_SELECT <= 0x00000008]
[01:29:47.846]      __var powered_down      = 0;
[01:29:47.846]        // -> [powered_down <= 0x00000000]
[01:29:47.846]      WriteDP(DP_SELECT, 0x00000000);
[01:29:47.847]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:47.847]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:47.847]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:47.847]        // -> [powered_down <= 0x00000001]
[01:29:47.847]    </block>
[01:29:47.847]    <control if="powered_down" while="" timeout="0" info="">
[01:29:47.847]      // if-block "powered_down"
[01:29:47.847]        // =>  TRUE
[01:29:47.848]      <block atomic="false" info="">
[01:29:47.848]        Message(0, "Debug/System power-up request sent");
[01:29:47.852]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:47.853]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:47.853]      </block>
[01:29:47.853]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:47.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:47.854]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:47.854]        // while-condition  =>  FALSE
[01:29:47.854]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:47.854]      </control>
[01:29:47.854]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:47.854]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:47.854]          // =>  FALSE
[01:29:47.854]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:47.854]      </control>
[01:29:47.854]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:47.854]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:47.855]          // =>  TRUE
[01:29:47.855]        <block atomic="false" info="">
[01:29:47.855]          Message(0, "executing SWD power up");
[01:29:47.857]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:47.858]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:47.858]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:47.859]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:47.859]        </block>
[01:29:47.859]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:47.859]      </control>
[01:29:47.859]      // end if-block "powered_down"
[01:29:47.859]    </control>
[01:29:47.859]    <block atomic="false" info="">
[01:29:47.859]      __var DEBUG_PORT_VAL    = 0;
[01:29:47.859]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:47.859]      __var ACCESS_POINT_VAL  = 0;
[01:29:47.860]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:47.860]      __ap = 1; 
[01:29:47.860]        // -> [__ap <= 0x00000001]
[01:29:47.860]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:47.861]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:47.861]      __ap = 4;
[01:29:47.861]        // -> [__ap <= 0x00000004]
[01:29:47.861]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:47.862]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:47.862]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:47.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:47.864]    </block>
[01:29:47.864]    <block atomic="false" info="">
[01:29:47.866]      __var nReset = 0x80;
[01:29:47.866]        // -> [nReset <= 0x00000080]
[01:29:47.866]      __var canReadPins = 0;
[01:29:47.866]        // -> [canReadPins <= 0x00000000]
[01:29:47.866]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:47.867]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:47.867]        // -> [canReadPins <= 0x00000001]
[01:29:47.867]    </block>
[01:29:47.867]    <control if="" while="1" timeout="200" info="">
[01:29:47.867]      // while "1"  (timeout="200")
[01:29:47.867]      // while-condition  =>  TRUE
[01:29:47.867]      // while "1"  (timeout="200")
[01:29:47.867]      // while-condition  =>  TRUE
[01:29:47.867]      // while "1"  (timeout="200")
[01:29:47.867]      // while-condition  =>  TRUE
[01:29:47.867]      // while "1"  (timeout="200")
[01:29:47.868]      // while-condition  =>  TRUE
[01:29:47.868]      // while "1"  (timeout="200")
[01:29:47.868]      // while-condition  =>  TRUE
[01:29:47.868]      // while "1"  (timeout="200")
[01:29:47.868]      // while-condition  =>  TRUE
[01:29:47.868]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.869]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.869]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.869]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.869]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.869]      // while "1"  (timeout="200")
[01:29:47.869]      // while-condition  =>  TRUE
[01:29:47.870]      // while "1"  (timeout="200")
[01:29:47.870]      // while-condition  =>  TRUE
[01:29:47.870]      // while "1"  (timeout="200")
[01:29:47.870]      // while-condition  =>  TRUE
[01:29:47.870]      // while "1"  (timeout="200")
[01:29:47.870]      // while-condition  =>  TRUE
[01:29:47.870]      // while "1"  (timeout="200")
[01:29:47.870]      // while-condition  =>  TRUE
[01:29:47.870]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.871]      // while-condition  =>  TRUE
[01:29:47.871]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.872]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.872]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.872]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.872]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.872]      // while "1"  (timeout="200")
[01:29:47.872]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.873]      // while "1"  (timeout="200")
[01:29:47.873]      // while-condition  =>  TRUE
[01:29:47.874]      // while "1"  (timeout="200")
[01:29:47.874]      // while-condition  =>  TRUE
[01:29:47.874]      // while "1"  (timeout="200")
[01:29:47.874]      // while-condition  =>  TRUE
[01:29:47.874]      // while "1"  (timeout="200")
[01:29:47.874]      // while-condition  =>  TRUE
[01:29:47.875]      // while "1"  (timeout="200")
[01:29:47.875]      // while-condition  =>  TRUE
[01:29:47.875]      // while "1"  (timeout="200")
[01:29:47.875]      // while-condition  =>  TRUE
[01:29:47.875]      // while "1"  (timeout="200")
[01:29:47.875]      // while-condition  =>  TRUE
[01:29:47.875]      // while "1"  (timeout="200")
[01:29:47.876]      // while-condition  =>  TRUE
[01:29:47.876]      // while "1"  (timeout="200")
[01:29:47.876]      // while-condition  =>  TRUE
[01:29:47.876]      // while "1"  (timeout="200")
[01:29:47.876]      // while-condition  =>  TRUE
[01:29:47.876]      // while "1"  (timeout="200")
[01:29:47.876]      // while-condition  =>  TRUE
[01:29:47.876]      // while "1"  (timeout="200")
[01:29:47.876]      // while-condition  =>  TRUE
[01:29:47.878]      // while "1"  (timeout="200")
[01:29:47.878]      // while-condition  =>  TRUE
[01:29:47.878]      // while "1"  (timeout="200")
[01:29:47.878]      // while-condition  =>  TRUE
[01:29:47.878]      // while "1"  (timeout="200")
[01:29:47.878]      // while-condition  =>  TRUE
[01:29:47.878]      // while "1"  (timeout="200")
[01:29:47.878]      // while-condition  =>  TRUE
[01:29:47.878]      // while "1"  (timeout="200")
[01:29:47.878]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.879]      // while "1"  (timeout="200")
[01:29:47.879]      // while-condition  =>  TRUE
[01:29:47.880]      // while "1"  (timeout="200")
[01:29:47.880]      // while-condition  =>  TRUE
[01:29:47.880]      // while "1"  (timeout="200")
[01:29:47.880]      // while-condition  =>  TRUE
[01:29:47.880]      // while "1"  (timeout="200")
[01:29:47.880]      // while-condition  =>  TRUE
[01:29:47.881]      // while "1"  (timeout="200")
[01:29:47.881]      // while  =>  TIMEOUT
[01:29:47.881]      // end while "1"
[01:29:47.881]    </control>
[01:29:47.881]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:47.881]      // if-block "canReadPins"
[01:29:47.881]        // =>  TRUE
[01:29:47.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:47.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:47.882]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:47.882]        // while-condition  =>  FALSE
[01:29:47.882]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:47.882]      </control>
[01:29:47.882]      // end if-block "canReadPins"
[01:29:47.883]    </control>
[01:29:47.883]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:47.883]      // if-block "!canReadPins"
[01:29:47.883]        // =>  FALSE
[01:29:47.883]      // skip if-block "!canReadPins"
[01:29:47.883]    </control>
[01:29:47.883]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:47.883]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:47.883]        // =>  TRUE
[01:29:47.883]      <block atomic="false" info="">
[01:29:47.883]        WriteAP(0x00, 0x190008);
[01:29:47.884]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:47.884]        WriteAP(0xF0, 0x01);
[01:29:47.884]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:47.886]      </block>
[01:29:47.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:47.886]    </control>
[01:29:47.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:47.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:47.886]        // =>  FALSE
[01:29:47.887]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:47.887]    </control>
[01:29:47.887]    <block atomic="false" info="">
[01:29:47.887]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:47.888]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:47.888]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:47.888]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:47.889]      __ap = 0; //lets make sure we reset the access point selection
[01:29:47.890]        // -> [__ap <= 0x00000000]
[01:29:47.890]    </block>
[01:29:47.890]  </sequence>
[01:29:47.890]  
[01:29:47.897]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:47.897]  
[01:29:47.897]  <debugvars>
[01:29:47.897]    // Pre-defined
[01:29:47.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:47.897]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:47.897]    __dp=0x00000000
[01:29:47.897]    __ap=0x00000000
[01:29:47.897]    __traceout=0x00000000      (Trace Disabled)
[01:29:47.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:47.897]    __FlashAddr=0x00000000
[01:29:47.898]    __FlashLen=0x00000000
[01:29:47.898]    __FlashArg=0x00000000
[01:29:47.898]    __FlashOp=0x00000000
[01:29:47.898]    __Result=0x00000000
[01:29:47.898]  </debugvars>
[01:29:47.898]  
[01:29:47.898]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:47.898]    <block atomic="false" info="">
[01:29:47.898]      __var deviceID = 0;
[01:29:47.898]        // -> [deviceID <= 0x00000000]
[01:29:47.899]      __var version = 0;
[01:29:47.899]        // -> [version <= 0x00000000]
[01:29:47.899]      __var partNum = 0;
[01:29:47.899]        // -> [partNum <= 0x00000000]
[01:29:47.899]      __var manuf = 0;
[01:29:47.899]        // -> [manuf <= 0x00000000]
[01:29:47.899]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:47.899]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:47.899]      __var isProduction = 0;
[01:29:47.899]        // -> [isProduction <= 0x00000000]
[01:29:47.899]      __var continueId = 0;
[01:29:47.899]        // -> [continueId <= 0x00000000]
[01:29:47.899]      deviceID =   Read32(0x41C40004);
[01:29:47.901]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:47.901]        // -> [deviceID <= 0x2BB8802F]
[01:29:47.901]      version = deviceID >> 28;
[01:29:47.901]        // -> [version <= 0x00000002]
[01:29:47.901]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:47.901]        // -> [partNum <= 0x0000BB88]
[01:29:47.901]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:47.901]        // -> [manuf <= 0x00000017]
[01:29:47.901]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:47.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:47.902]      isProduction = (version > 0);
[01:29:47.902]        // -> [isProduction <= 0x00000001]
[01:29:47.902]    </block>
[01:29:47.903]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:47.903]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:47.903]        // =>  FALSE
[01:29:47.903]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:47.903]    </control>
[01:29:47.903]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:47.903]      // if-block "continueId == 4"
[01:29:47.903]        // =>  FALSE
[01:29:47.903]      // skip if-block "continueId == 4"
[01:29:47.903]    </control>
[01:29:47.903]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:47.904]      // if-block "!isProduction"
[01:29:47.904]        // =>  FALSE
[01:29:47.904]      // skip if-block "!isProduction"
[01:29:47.904]    </control>
[01:29:47.904]  </sequence>
[01:29:47.904]  
[01:29:53.302]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:53.302]  
[01:29:53.312]  <debugvars>
[01:29:53.312]    // Pre-defined
[01:29:53.312]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:53.312]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:53.312]    __dp=0x00000000
[01:29:53.312]    __ap=0x00000000
[01:29:53.312]    __traceout=0x00000000      (Trace Disabled)
[01:29:53.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:53.312]    __FlashAddr=0x00000000
[01:29:53.312]    __FlashLen=0x00000000
[01:29:53.312]    __FlashArg=0x00000000
[01:29:53.312]    __FlashOp=0x00000000
[01:29:53.312]    __Result=0x00000000
[01:29:53.312]  </debugvars>
[01:29:53.313]  
[01:29:53.313]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:53.313]    <block atomic="false" info="">
[01:29:53.313]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:53.313]        // -> [isSWJ <= 0x00000001]
[01:29:53.313]      __var hasDormant = __protocol & 0x00020000;
[01:29:53.313]        // -> [hasDormant <= 0x00000000]
[01:29:53.313]      __var protType   = __protocol & 0x0000FFFF;
[01:29:53.313]        // -> [protType <= 0x00000002]
[01:29:53.313]    </block>
[01:29:53.315]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:53.315]      // if-block "protType == 1"
[01:29:53.315]        // =>  FALSE
[01:29:53.315]      // skip if-block "protType == 1"
[01:29:53.315]    </control>
[01:29:53.315]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:53.315]      // if-block "protType == 2"
[01:29:53.315]        // =>  TRUE
[01:29:53.315]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:53.315]        // if-block "isSWJ"
[01:29:53.316]          // =>  TRUE
[01:29:53.316]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:53.316]          // if-block "hasDormant"
[01:29:53.316]            // =>  FALSE
[01:29:53.316]          // skip if-block "hasDormant"
[01:29:53.316]        </control>
[01:29:53.316]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:53.316]          // if-block "!hasDormant"
[01:29:53.316]            // =>  TRUE
[01:29:53.316]          <block atomic="false" info="">
[01:29:53.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:53.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:53.317]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:53.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:53.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:53.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:53.318]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:53.318]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:53.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:53.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:53.319]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:53.319]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:53.319]          </block>
[01:29:53.319]          // end if-block "!hasDormant"
[01:29:53.319]        </control>
[01:29:53.320]        // end if-block "isSWJ"
[01:29:53.320]      </control>
[01:29:53.320]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:53.320]        // if-block "!isSWJ"
[01:29:53.320]          // =>  FALSE
[01:29:53.320]        // skip if-block "!isSWJ"
[01:29:53.320]      </control>
[01:29:53.320]      <block atomic="false" info="">
[01:29:53.320]        ReadDP(0x0);
[01:29:53.321]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:53.321]      </block>
[01:29:53.321]      // end if-block "protType == 2"
[01:29:53.321]    </control>
[01:29:53.321]  </sequence>
[01:29:53.321]  
[01:29:53.322]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:53.322]  
[01:29:53.322]  <debugvars>
[01:29:53.322]    // Pre-defined
[01:29:53.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:53.322]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:53.322]    __dp=0x00000000
[01:29:53.322]    __ap=0x00000000
[01:29:53.322]    __traceout=0x00000000      (Trace Disabled)
[01:29:53.322]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:53.323]    __FlashAddr=0x00000000
[01:29:53.323]    __FlashLen=0x00000000
[01:29:53.323]    __FlashArg=0x00000000
[01:29:53.323]    __FlashOp=0x00000000
[01:29:53.323]    __Result=0x00000000
[01:29:53.323]  </debugvars>
[01:29:53.323]  
[01:29:53.323]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:53.324]    <block atomic="false" info="">
[01:29:53.324]      __var SW_DP_ABORT       = 0x0;
[01:29:53.324]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:53.324]      __var DP_CTRL_STAT      = 0x4;
[01:29:53.324]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:53.324]      __var DP_SELECT         = 0x8;
[01:29:53.325]        // -> [DP_SELECT <= 0x00000008]
[01:29:53.325]      __var powered_down      = 0;
[01:29:53.325]        // -> [powered_down <= 0x00000000]
[01:29:53.325]      WriteDP(DP_SELECT, 0x00000000);
[01:29:53.325]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:53.326]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:53.326]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:53.326]        // -> [powered_down <= 0x00000001]
[01:29:53.326]    </block>
[01:29:53.326]    <control if="powered_down" while="" timeout="0" info="">
[01:29:53.328]      // if-block "powered_down"
[01:29:53.328]        // =>  TRUE
[01:29:53.328]      <block atomic="false" info="">
[01:29:53.328]        Message(0, "Debug/System power-up request sent");
[01:29:53.330]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:53.331]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:53.331]      </block>
[01:29:53.331]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:53.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:53.331]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:53.331]        // while-condition  =>  FALSE
[01:29:53.331]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:53.331]      </control>
[01:29:53.331]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:53.331]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:53.332]          // =>  FALSE
[01:29:53.332]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:53.332]      </control>
[01:29:53.332]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:53.332]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:53.332]          // =>  TRUE
[01:29:53.332]        <block atomic="false" info="">
[01:29:53.332]          Message(0, "executing SWD power up");
[01:29:53.334]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:53.335]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:53.335]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:53.335]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:53.336]        </block>
[01:29:53.336]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:53.336]      </control>
[01:29:53.336]      // end if-block "powered_down"
[01:29:53.336]    </control>
[01:29:53.336]    <block atomic="false" info="">
[01:29:53.337]      __var DEBUG_PORT_VAL    = 0;
[01:29:53.337]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:53.337]      __var ACCESS_POINT_VAL  = 0;
[01:29:53.337]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:53.337]      __ap = 1; 
[01:29:53.337]        // -> [__ap <= 0x00000001]
[01:29:53.337]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:53.338]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:53.338]      __ap = 4;
[01:29:53.338]        // -> [__ap <= 0x00000004]
[01:29:53.338]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:53.339]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:53.340]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:53.340]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:53.341]    </block>
[01:29:53.341]    <block atomic="false" info="">
[01:29:53.341]      __var nReset = 0x80;
[01:29:53.341]        // -> [nReset <= 0x00000080]
[01:29:53.341]      __var canReadPins = 0;
[01:29:53.341]        // -> [canReadPins <= 0x00000000]
[01:29:53.341]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:53.341]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:53.342]        // -> [canReadPins <= 0x00000001]
[01:29:53.343]    </block>
[01:29:53.343]    <control if="" while="1" timeout="200" info="">
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.343]      // while "1"  (timeout="200")
[01:29:53.343]      // while-condition  =>  TRUE
[01:29:53.344]      // while "1"  (timeout="200")
[01:29:53.344]      // while-condition  =>  TRUE
[01:29:53.344]      // while "1"  (timeout="200")
[01:29:53.344]      // while-condition  =>  TRUE
[01:29:53.344]      // while "1"  (timeout="200")
[01:29:53.344]      // while-condition  =>  TRUE
[01:29:53.344]      // while "1"  (timeout="200")
[01:29:53.344]      // while-condition  =>  TRUE
[01:29:53.344]      // while "1"  (timeout="200")
[01:29:53.345]      // while-condition  =>  TRUE
[01:29:53.345]      // while "1"  (timeout="200")
[01:29:53.345]      // while-condition  =>  TRUE
[01:29:53.345]      // while "1"  (timeout="200")
[01:29:53.345]      // while-condition  =>  TRUE
[01:29:53.345]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.346]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.346]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.346]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.346]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.346]      // while "1"  (timeout="200")
[01:29:53.346]      // while-condition  =>  TRUE
[01:29:53.347]      // while "1"  (timeout="200")
[01:29:53.347]      // while-condition  =>  TRUE
[01:29:53.347]      // while "1"  (timeout="200")
[01:29:53.347]      // while-condition  =>  TRUE
[01:29:53.347]      // while "1"  (timeout="200")
[01:29:53.348]      // while-condition  =>  TRUE
[01:29:53.348]      // while "1"  (timeout="200")
[01:29:53.348]      // while-condition  =>  TRUE
[01:29:53.348]      // while "1"  (timeout="200")
[01:29:53.348]      // while-condition  =>  TRUE
[01:29:53.348]      // while "1"  (timeout="200")
[01:29:53.348]      // while-condition  =>  TRUE
[01:29:53.348]      // while "1"  (timeout="200")
[01:29:53.348]      // while-condition  =>  TRUE
[01:29:53.348]      // while "1"  (timeout="200")
[01:29:53.349]      // while-condition  =>  TRUE
[01:29:53.349]      // while "1"  (timeout="200")
[01:29:53.349]      // while-condition  =>  TRUE
[01:29:53.349]      // while "1"  (timeout="200")
[01:29:53.349]      // while-condition  =>  TRUE
[01:29:53.349]      // while "1"  (timeout="200")
[01:29:53.349]      // while-condition  =>  TRUE
[01:29:53.349]      // while "1"  (timeout="200")
[01:29:53.349]      // while-condition  =>  TRUE
[01:29:53.349]      // while "1"  (timeout="200")
[01:29:53.350]      // while-condition  =>  TRUE
[01:29:53.350]      // while "1"  (timeout="200")
[01:29:53.350]      // while  =>  TIMEOUT
[01:29:53.350]      // end while "1"
[01:29:53.350]    </control>
[01:29:53.350]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:53.350]      // if-block "canReadPins"
[01:29:53.350]        // =>  TRUE
[01:29:53.350]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:53.351]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:53.351]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:53.351]        // while-condition  =>  FALSE
[01:29:53.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:53.351]      </control>
[01:29:53.351]      // end if-block "canReadPins"
[01:29:53.351]    </control>
[01:29:53.352]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:53.352]      // if-block "!canReadPins"
[01:29:53.352]        // =>  FALSE
[01:29:53.352]      // skip if-block "!canReadPins"
[01:29:53.352]    </control>
[01:29:53.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:53.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:53.352]        // =>  TRUE
[01:29:53.352]      <block atomic="false" info="">
[01:29:53.352]        WriteAP(0x00, 0x190008);
[01:29:53.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:53.353]        WriteAP(0xF0, 0x01);
[01:29:53.354]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:53.355]      </block>
[01:29:53.355]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:53.355]    </control>
[01:29:53.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:53.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:53.355]        // =>  FALSE
[01:29:53.355]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:53.356]    </control>
[01:29:53.356]    <block atomic="false" info="">
[01:29:53.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:53.358]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:53.358]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:53.358]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:53.359]      __ap = 0; //lets make sure we reset the access point selection
[01:29:53.360]        // -> [__ap <= 0x00000000]
[01:29:53.360]    </block>
[01:29:53.360]  </sequence>
[01:29:53.360]  
[01:29:53.365]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:53.365]  
[01:29:53.365]  <debugvars>
[01:29:53.366]    // Pre-defined
[01:29:53.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:53.366]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:53.366]    __dp=0x00000000
[01:29:53.366]    __ap=0x00000000
[01:29:53.366]    __traceout=0x00000000      (Trace Disabled)
[01:29:53.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:53.367]    __FlashAddr=0x00000000
[01:29:53.367]    __FlashLen=0x00000000
[01:29:53.367]    __FlashArg=0x00000000
[01:29:53.367]    __FlashOp=0x00000000
[01:29:53.367]    __Result=0x00000000
[01:29:53.367]  </debugvars>
[01:29:53.367]  
[01:29:53.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:53.367]    <block atomic="false" info="">
[01:29:53.367]      __var deviceID = 0;
[01:29:53.368]        // -> [deviceID <= 0x00000000]
[01:29:53.368]      __var version = 0;
[01:29:53.368]        // -> [version <= 0x00000000]
[01:29:53.368]      __var partNum = 0;
[01:29:53.368]        // -> [partNum <= 0x00000000]
[01:29:53.368]      __var manuf = 0;
[01:29:53.368]        // -> [manuf <= 0x00000000]
[01:29:53.368]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:53.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:53.368]      __var isProduction = 0;
[01:29:53.368]        // -> [isProduction <= 0x00000000]
[01:29:53.368]      __var continueId = 0;
[01:29:53.369]        // -> [continueId <= 0x00000000]
[01:29:53.369]      deviceID =   Read32(0x41C40004);
[01:29:53.371]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:53.371]        // -> [deviceID <= 0x2BB8802F]
[01:29:53.371]      version = deviceID >> 28;
[01:29:53.371]        // -> [version <= 0x00000002]
[01:29:53.371]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:53.371]        // -> [partNum <= 0x0000BB88]
[01:29:53.371]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:53.371]        // -> [manuf <= 0x00000017]
[01:29:53.371]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:53.372]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:53.372]      isProduction = (version > 0);
[01:29:53.372]        // -> [isProduction <= 0x00000001]
[01:29:53.372]    </block>
[01:29:53.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:53.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:53.373]        // =>  FALSE
[01:29:53.373]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:53.373]    </control>
[01:29:53.373]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:53.373]      // if-block "continueId == 4"
[01:29:53.373]        // =>  FALSE
[01:29:53.373]      // skip if-block "continueId == 4"
[01:29:53.373]    </control>
[01:29:53.373]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:53.373]      // if-block "!isProduction"
[01:29:53.374]        // =>  FALSE
[01:29:53.374]      // skip if-block "!isProduction"
[01:29:53.374]    </control>
[01:29:53.374]  </sequence>
[01:29:53.374]  
[01:30:34.313]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:30:34.313]  
[01:30:34.313]  <debugvars>
[01:30:34.313]    // Pre-defined
[01:30:34.313]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:34.313]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:34.313]    __dp=0x00000000
[01:30:34.315]    __ap=0x00000000
[01:30:34.315]    __traceout=0x00000000      (Trace Disabled)
[01:30:34.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:34.315]    __FlashAddr=0x00000000
[01:30:34.315]    __FlashLen=0x00000000
[01:30:34.315]    __FlashArg=0x00000000
[01:30:34.315]    __FlashOp=0x00000000
[01:30:34.315]    __Result=0x00000000
[01:30:34.315]  </debugvars>
[01:30:34.316]  
[01:30:34.316]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:30:34.316]    <block atomic="false" info="">
[01:30:34.316]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:30:34.316]        // -> [isSWJ <= 0x00000001]
[01:30:34.316]      __var hasDormant = __protocol & 0x00020000;
[01:30:34.316]        // -> [hasDormant <= 0x00000000]
[01:30:34.316]      __var protType   = __protocol & 0x0000FFFF;
[01:30:34.316]        // -> [protType <= 0x00000002]
[01:30:34.316]    </block>
[01:30:34.316]    <control if="protType == 1" while="" timeout="0" info="">
[01:30:34.316]      // if-block "protType == 1"
[01:30:34.316]        // =>  FALSE
[01:30:34.316]      // skip if-block "protType == 1"
[01:30:34.317]    </control>
[01:30:34.317]    <control if="protType == 2" while="" timeout="0" info="">
[01:30:34.317]      // if-block "protType == 2"
[01:30:34.317]        // =>  TRUE
[01:30:34.317]      <control if="isSWJ" while="" timeout="0" info="">
[01:30:34.317]        // if-block "isSWJ"
[01:30:34.317]          // =>  TRUE
[01:30:34.317]        <control if="hasDormant" while="" timeout="0" info="">
[01:30:34.317]          // if-block "hasDormant"
[01:30:34.317]            // =>  FALSE
[01:30:34.317]          // skip if-block "hasDormant"
[01:30:34.317]        </control>
[01:30:34.317]        <control if="!hasDormant" while="" timeout="0" info="">
[01:30:34.318]          // if-block "!hasDormant"
[01:30:34.318]            // =>  TRUE
[01:30:34.318]          <block atomic="false" info="">
[01:30:34.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:30:34.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:34.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:30:34.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:30:34.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:30:34.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:34.320]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:30:34.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:30:34.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:30:34.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:34.321]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:30:34.321]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:30:34.321]          </block>
[01:30:34.321]          // end if-block "!hasDormant"
[01:30:34.321]        </control>
[01:30:34.323]        // end if-block "isSWJ"
[01:30:34.323]      </control>
[01:30:34.323]      <control if="!isSWJ" while="" timeout="0" info="">
[01:30:34.323]        // if-block "!isSWJ"
[01:30:34.323]          // =>  FALSE
[01:30:34.323]        // skip if-block "!isSWJ"
[01:30:34.323]      </control>
[01:30:34.323]      <block atomic="false" info="">
[01:30:34.323]        ReadDP(0x0);
[01:30:34.323]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:30:34.323]      </block>
[01:30:34.323]      // end if-block "protType == 2"
[01:30:34.323]    </control>
[01:30:34.324]  </sequence>
[01:30:34.324]  
[01:30:34.324]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:30:34.324]  
[01:30:34.324]  <debugvars>
[01:30:34.324]    // Pre-defined
[01:30:34.325]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:34.325]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:34.325]    __dp=0x00000000
[01:30:34.325]    __ap=0x00000000
[01:30:34.325]    __traceout=0x00000000      (Trace Disabled)
[01:30:34.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:34.325]    __FlashAddr=0x00000000
[01:30:34.325]    __FlashLen=0x00000000
[01:30:34.325]    __FlashArg=0x00000000
[01:30:34.325]    __FlashOp=0x00000000
[01:30:34.325]    __Result=0x00000000
[01:30:34.325]  </debugvars>
[01:30:34.326]  
[01:30:34.326]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:30:34.326]    <block atomic="false" info="">
[01:30:34.326]      __var SW_DP_ABORT       = 0x0;
[01:30:34.326]        // -> [SW_DP_ABORT <= 0x00000000]
[01:30:34.326]      __var DP_CTRL_STAT      = 0x4;
[01:30:34.326]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:30:34.326]      __var DP_SELECT         = 0x8;
[01:30:34.326]        // -> [DP_SELECT <= 0x00000008]
[01:30:34.326]      __var powered_down      = 0;
[01:30:34.326]        // -> [powered_down <= 0x00000000]
[01:30:34.327]      WriteDP(DP_SELECT, 0x00000000);
[01:30:34.327]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:30:34.327]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:30:34.328]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:30:34.328]        // -> [powered_down <= 0x00000001]
[01:30:34.328]    </block>
[01:30:34.328]    <control if="powered_down" while="" timeout="0" info="">
[01:30:34.328]      // if-block "powered_down"
[01:30:34.328]        // =>  TRUE
[01:30:34.328]      <block atomic="false" info="">
[01:30:34.328]        Message(0, "Debug/System power-up request sent");
[01:30:34.331]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:30:34.332]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:30:34.332]      </block>
[01:30:34.332]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:30:34.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:30:34.333]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:30:34.333]        // while-condition  =>  FALSE
[01:30:34.333]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:30:34.333]      </control>
[01:30:34.333]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:30:34.333]        // if-block "(__protocol & 0xFFFF) == 1"
[01:30:34.333]          // =>  FALSE
[01:30:34.333]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:30:34.333]      </control>
[01:30:34.333]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:30:34.333]        // if-block "(__protocol & 0xFFFF) == 2"
[01:30:34.333]          // =>  TRUE
[01:30:34.333]        <block atomic="false" info="">
[01:30:34.333]          Message(0, "executing SWD power up");
[01:30:34.335]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:30:34.335]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:30:34.337]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:30:34.337]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:30:34.337]        </block>
[01:30:34.337]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:30:34.337]      </control>
[01:30:34.338]      // end if-block "powered_down"
[01:30:34.338]    </control>
[01:30:34.338]    <block atomic="false" info="">
[01:30:34.338]      __var DEBUG_PORT_VAL    = 0;
[01:30:34.338]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:30:34.338]      __var ACCESS_POINT_VAL  = 0;
[01:30:34.338]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:30:34.338]      __ap = 1; 
[01:30:34.338]        // -> [__ap <= 0x00000001]
[01:30:34.338]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:30:34.340]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:30:34.340]      __ap = 4;
[01:30:34.340]        // -> [__ap <= 0x00000004]
[01:30:34.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:34.341]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:30:34.341]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:30:34.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:34.343]    </block>
[01:30:34.343]    <block atomic="false" info="">
[01:30:34.343]      __var nReset = 0x80;
[01:30:34.343]        // -> [nReset <= 0x00000080]
[01:30:34.343]      __var canReadPins = 0;
[01:30:34.343]        // -> [canReadPins <= 0x00000000]
[01:30:34.343]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:30:34.343]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:30:34.343]        // -> [canReadPins <= 0x00000001]
[01:30:34.343]    </block>
[01:30:34.345]    <control if="" while="1" timeout="200" info="">
[01:30:34.345]      // while "1"  (timeout="200")
[01:30:34.345]      // while-condition  =>  TRUE
[01:30:34.345]      // while "1"  (timeout="200")
[01:30:34.345]      // while-condition  =>  TRUE
[01:30:34.345]      // while "1"  (timeout="200")
[01:30:34.345]      // while-condition  =>  TRUE
[01:30:34.345]      // while "1"  (timeout="200")
[01:30:34.345]      // while-condition  =>  TRUE
[01:30:34.345]      // while "1"  (timeout="200")
[01:30:34.345]      // while-condition  =>  TRUE
[01:30:34.346]      // while "1"  (timeout="200")
[01:30:34.346]      // while-condition  =>  TRUE
[01:30:34.346]      // while "1"  (timeout="200")
[01:30:34.346]      // while-condition  =>  TRUE
[01:30:34.346]      // while "1"  (timeout="200")
[01:30:34.346]      // while-condition  =>  TRUE
[01:30:34.347]      // while "1"  (timeout="200")
[01:30:34.347]      // while-condition  =>  TRUE
[01:30:34.347]      // while "1"  (timeout="200")
[01:30:34.347]      // while-condition  =>  TRUE
[01:30:34.347]      // while "1"  (timeout="200")
[01:30:34.347]      // while-condition  =>  TRUE
[01:30:34.347]      // while "1"  (timeout="200")
[01:30:34.347]      // while-condition  =>  TRUE
[01:30:34.347]      // while "1"  (timeout="200")
[01:30:34.347]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.348]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.348]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.348]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.348]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.348]      // while-condition  =>  TRUE
[01:30:34.348]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.349]      // while-condition  =>  TRUE
[01:30:34.349]      // while "1"  (timeout="200")
[01:30:34.350]      // while-condition  =>  TRUE
[01:30:34.350]      // while "1"  (timeout="200")
[01:30:34.350]      // while  =>  TIMEOUT
[01:30:34.350]      // end while "1"
[01:30:34.350]    </control>
[01:30:34.350]    <control if="canReadPins" while="" timeout="0" info="">
[01:30:34.350]      // if-block "canReadPins"
[01:30:34.350]        // =>  TRUE
[01:30:34.350]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:30:34.351]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:30:34.351]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:30:34.351]        // while-condition  =>  FALSE
[01:30:34.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:30:34.351]      </control>
[01:30:34.351]      // end if-block "canReadPins"
[01:30:34.351]    </control>
[01:30:34.351]    <control if="!canReadPins" while="" timeout="0" info="">
[01:30:34.352]      // if-block "!canReadPins"
[01:30:34.352]        // =>  FALSE
[01:30:34.352]      // skip if-block "!canReadPins"
[01:30:34.352]    </control>
[01:30:34.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:30:34.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:34.352]        // =>  TRUE
[01:30:34.352]      <block atomic="false" info="">
[01:30:34.352]        WriteAP(0x00, 0x190008);
[01:30:34.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:34.354]        WriteAP(0xF0, 0x01);
[01:30:34.355]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:34.355]      </block>
[01:30:34.355]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:34.355]    </control>
[01:30:34.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:30:34.356]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:34.356]        // =>  FALSE
[01:30:34.356]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:34.356]    </control>
[01:30:34.356]    <block atomic="false" info="">
[01:30:34.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:34.357]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:30:34.357]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:30:34.357]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:34.359]      __ap = 0; //lets make sure we reset the access point selection
[01:30:34.359]        // -> [__ap <= 0x00000000]
[01:30:34.359]    </block>
[01:30:34.359]  </sequence>
[01:30:34.360]  
[01:30:34.365]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:30:34.365]  
[01:30:34.366]  <debugvars>
[01:30:34.366]    // Pre-defined
[01:30:34.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:34.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:34.366]    __dp=0x00000000
[01:30:34.366]    __ap=0x00000000
[01:30:34.366]    __traceout=0x00000000      (Trace Disabled)
[01:30:34.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:34.366]    __FlashAddr=0x00000000
[01:30:34.366]    __FlashLen=0x00000000
[01:30:34.366]    __FlashArg=0x00000000
[01:30:34.367]    __FlashOp=0x00000000
[01:30:34.367]    __Result=0x00000000
[01:30:34.367]  </debugvars>
[01:30:34.367]  
[01:30:34.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:30:34.367]    <block atomic="false" info="">
[01:30:34.367]      __var deviceID = 0;
[01:30:34.367]        // -> [deviceID <= 0x00000000]
[01:30:34.367]      __var version = 0;
[01:30:34.367]        // -> [version <= 0x00000000]
[01:30:34.367]      __var partNum = 0;
[01:30:34.368]        // -> [partNum <= 0x00000000]
[01:30:34.368]      __var manuf = 0;
[01:30:34.368]        // -> [manuf <= 0x00000000]
[01:30:34.368]      __var isMSPM0G1X0X_G3X0X = 0;
[01:30:34.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:30:34.368]      __var isProduction = 0;
[01:30:34.368]        // -> [isProduction <= 0x00000000]
[01:30:34.368]      __var continueId = 0;
[01:30:34.368]        // -> [continueId <= 0x00000000]
[01:30:34.368]      deviceID =   Read32(0x41C40004);
[01:30:34.370]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:30:34.370]        // -> [deviceID <= 0x2BB8802F]
[01:30:34.370]      version = deviceID >> 28;
[01:30:34.370]        // -> [version <= 0x00000002]
[01:30:34.370]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:30:34.370]        // -> [partNum <= 0x0000BB88]
[01:30:34.370]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:30:34.370]        // -> [manuf <= 0x00000017]
[01:30:34.370]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:30:34.370]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:30:34.371]      isProduction = (version > 0);
[01:30:34.371]        // -> [isProduction <= 0x00000001]
[01:30:34.371]    </block>
[01:30:34.371]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:30:34.371]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:30:34.371]        // =>  FALSE
[01:30:34.371]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:30:34.372]    </control>
[01:30:34.372]    <control if="continueId == 4" while="" timeout="0" info="">
[01:30:34.372]      // if-block "continueId == 4"
[01:30:34.372]        // =>  FALSE
[01:30:34.372]      // skip if-block "continueId == 4"
[01:30:34.372]    </control>
[01:30:34.373]    <control if="!isProduction" while="" timeout="0" info="">
[01:30:34.373]      // if-block "!isProduction"
[01:30:34.373]        // =>  FALSE
[01:30:34.373]      // skip if-block "!isProduction"
[01:30:34.373]    </control>
[01:30:34.373]  </sequence>
[01:30:34.373]  
[01:31:16.510]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:31:16.510]  
[01:31:16.518]  <debugvars>
[01:31:16.518]    // Pre-defined
[01:31:16.518]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:16.518]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:16.518]    __dp=0x00000000
[01:31:16.518]    __ap=0x00000000
[01:31:16.518]    __traceout=0x00000000      (Trace Disabled)
[01:31:16.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:16.520]    __FlashAddr=0x00000000
[01:31:16.520]    __FlashLen=0x00000000
[01:31:16.520]    __FlashArg=0x00000000
[01:31:16.520]    __FlashOp=0x00000000
[01:31:16.520]    __Result=0x00000000
[01:31:16.520]  </debugvars>
[01:31:16.520]  
[01:31:16.520]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:31:16.520]    <block atomic="false" info="">
[01:31:16.520]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:31:16.521]        // -> [isSWJ <= 0x00000001]
[01:31:16.521]      __var hasDormant = __protocol & 0x00020000;
[01:31:16.521]        // -> [hasDormant <= 0x00000000]
[01:31:16.521]      __var protType   = __protocol & 0x0000FFFF;
[01:31:16.521]        // -> [protType <= 0x00000002]
[01:31:16.521]    </block>
[01:31:16.521]    <control if="protType == 1" while="" timeout="0" info="">
[01:31:16.521]      // if-block "protType == 1"
[01:31:16.521]        // =>  FALSE
[01:31:16.521]      // skip if-block "protType == 1"
[01:31:16.521]    </control>
[01:31:16.521]    <control if="protType == 2" while="" timeout="0" info="">
[01:31:16.522]      // if-block "protType == 2"
[01:31:16.522]        // =>  TRUE
[01:31:16.522]      <control if="isSWJ" while="" timeout="0" info="">
[01:31:16.522]        // if-block "isSWJ"
[01:31:16.522]          // =>  TRUE
[01:31:16.522]        <control if="hasDormant" while="" timeout="0" info="">
[01:31:16.522]          // if-block "hasDormant"
[01:31:16.522]            // =>  FALSE
[01:31:16.522]          // skip if-block "hasDormant"
[01:31:16.522]        </control>
[01:31:16.522]        <control if="!hasDormant" while="" timeout="0" info="">
[01:31:16.522]          // if-block "!hasDormant"
[01:31:16.523]            // =>  TRUE
[01:31:16.523]          <block atomic="false" info="">
[01:31:16.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:31:16.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:16.523]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:31:16.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:31:16.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:31:16.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:16.524]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:31:16.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:31:16.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:31:16.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:16.525]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:31:16.525]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:31:16.525]          </block>
[01:31:16.525]          // end if-block "!hasDormant"
[01:31:16.526]        </control>
[01:31:16.526]        // end if-block "isSWJ"
[01:31:16.526]      </control>
[01:31:16.526]      <control if="!isSWJ" while="" timeout="0" info="">
[01:31:16.526]        // if-block "!isSWJ"
[01:31:16.526]          // =>  FALSE
[01:31:16.526]        // skip if-block "!isSWJ"
[01:31:16.526]      </control>
[01:31:16.526]      <block atomic="false" info="">
[01:31:16.526]        ReadDP(0x0);
[01:31:16.527]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:31:16.527]      </block>
[01:31:16.527]      // end if-block "protType == 2"
[01:31:16.527]    </control>
[01:31:16.528]  </sequence>
[01:31:16.528]  
[01:31:16.528]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:31:16.528]  
[01:31:16.528]  <debugvars>
[01:31:16.528]    // Pre-defined
[01:31:16.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:16.529]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:16.529]    __dp=0x00000000
[01:31:16.529]    __ap=0x00000000
[01:31:16.529]    __traceout=0x00000000      (Trace Disabled)
[01:31:16.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:16.529]    __FlashAddr=0x00000000
[01:31:16.529]    __FlashLen=0x00000000
[01:31:16.529]    __FlashArg=0x00000000
[01:31:16.529]    __FlashOp=0x00000000
[01:31:16.529]    __Result=0x00000000
[01:31:16.529]  </debugvars>
[01:31:16.530]  
[01:31:16.530]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:31:16.530]    <block atomic="false" info="">
[01:31:16.530]      __var SW_DP_ABORT       = 0x0;
[01:31:16.530]        // -> [SW_DP_ABORT <= 0x00000000]
[01:31:16.530]      __var DP_CTRL_STAT      = 0x4;
[01:31:16.530]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:31:16.530]      __var DP_SELECT         = 0x8;
[01:31:16.530]        // -> [DP_SELECT <= 0x00000008]
[01:31:16.530]      __var powered_down      = 0;
[01:31:16.530]        // -> [powered_down <= 0x00000000]
[01:31:16.530]      WriteDP(DP_SELECT, 0x00000000);
[01:31:16.531]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:31:16.531]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:31:16.531]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:31:16.531]        // -> [powered_down <= 0x00000001]
[01:31:16.532]    </block>
[01:31:16.532]    <control if="powered_down" while="" timeout="0" info="">
[01:31:16.532]      // if-block "powered_down"
[01:31:16.532]        // =>  TRUE
[01:31:16.532]      <block atomic="false" info="">
[01:31:16.532]        Message(0, "Debug/System power-up request sent");
[01:31:16.532]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:31:16.533]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:31:16.533]      </block>
[01:31:16.533]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:31:16.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:31:16.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:31:16.534]        // while-condition  =>  FALSE
[01:31:16.534]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:31:16.534]      </control>
[01:31:16.534]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:31:16.534]        // if-block "(__protocol & 0xFFFF) == 1"
[01:31:16.534]          // =>  FALSE
[01:31:16.534]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:31:16.534]      </control>
[01:31:16.534]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:31:16.534]        // if-block "(__protocol & 0xFFFF) == 2"
[01:31:16.536]          // =>  TRUE
[01:31:16.536]        <block atomic="false" info="">
[01:31:16.536]          Message(0, "executing SWD power up");
[01:31:16.536]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:31:16.536]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:31:16.536]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:31:16.536]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:31:16.536]        </block>
[01:31:16.536]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:31:16.537]      </control>
[01:31:16.537]      // end if-block "powered_down"
[01:31:16.537]    </control>
[01:31:16.537]    <block atomic="false" info="">
[01:31:16.537]      __var DEBUG_PORT_VAL    = 0;
[01:31:16.537]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:31:16.537]      __var ACCESS_POINT_VAL  = 0;
[01:31:16.539]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:31:16.539]      __ap = 1; 
[01:31:16.539]        // -> [__ap <= 0x00000001]
[01:31:16.539]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:31:16.540]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:31:16.540]      __ap = 4;
[01:31:16.540]        // -> [__ap <= 0x00000004]
[01:31:16.540]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:16.541]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:31:16.542]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:31:16.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:16.542]    </block>
[01:31:16.542]    <block atomic="false" info="">
[01:31:16.542]      __var nReset = 0x80;
[01:31:16.542]        // -> [nReset <= 0x00000080]
[01:31:16.542]      __var canReadPins = 0;
[01:31:16.542]        // -> [canReadPins <= 0x00000000]
[01:31:16.543]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:31:16.543]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:31:16.543]        // -> [canReadPins <= 0x00000001]
[01:31:16.543]    </block>
[01:31:16.543]    <control if="" while="1" timeout="200" info="">
[01:31:16.543]      // while "1"  (timeout="200")
[01:31:16.544]      // while-condition  =>  TRUE
[01:31:16.544]      // while "1"  (timeout="200")
[01:31:16.544]      // while-condition  =>  TRUE
[01:31:16.544]      // while "1"  (timeout="200")
[01:31:16.544]      // while-condition  =>  TRUE
[01:31:16.544]      // while "1"  (timeout="200")
[01:31:16.544]      // while-condition  =>  TRUE
[01:31:16.544]      // while "1"  (timeout="200")
[01:31:16.544]      // while-condition  =>  TRUE
[01:31:16.544]      // while "1"  (timeout="200")
[01:31:16.545]      // while-condition  =>  TRUE
[01:31:16.545]      // while "1"  (timeout="200")
[01:31:16.545]      // while-condition  =>  TRUE
[01:31:16.545]      // while "1"  (timeout="200")
[01:31:16.545]      // while-condition  =>  TRUE
[01:31:16.545]      // while "1"  (timeout="200")
[01:31:16.545]      // while-condition  =>  TRUE
[01:31:16.545]      // while "1"  (timeout="200")
[01:31:16.545]      // while-condition  =>  TRUE
[01:31:16.545]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.546]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.546]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.546]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.546]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.546]      // while "1"  (timeout="200")
[01:31:16.546]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.547]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.547]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.547]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.547]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.547]      // while-condition  =>  TRUE
[01:31:16.547]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.548]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.548]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.548]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.548]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.548]      // while "1"  (timeout="200")
[01:31:16.548]      // while-condition  =>  TRUE
[01:31:16.549]      // while "1"  (timeout="200")
[01:31:16.549]      // while-condition  =>  TRUE
[01:31:16.549]      // while "1"  (timeout="200")
[01:31:16.549]      // while-condition  =>  TRUE
[01:31:16.549]      // while "1"  (timeout="200")
[01:31:16.549]      // while-condition  =>  TRUE
[01:31:16.549]      // while "1"  (timeout="200")
[01:31:16.549]      // while-condition  =>  TRUE
[01:31:16.549]      // while "1"  (timeout="200")
[01:31:16.549]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.550]      // while-condition  =>  TRUE
[01:31:16.550]      // while "1"  (timeout="200")
[01:31:16.551]      // while-condition  =>  TRUE
[01:31:16.551]      // while "1"  (timeout="200")
[01:31:16.551]      // while-condition  =>  TRUE
[01:31:16.551]      // while "1"  (timeout="200")
[01:31:16.551]      // while-condition  =>  TRUE
[01:31:16.551]      // while "1"  (timeout="200")
[01:31:16.551]      // while-condition  =>  TRUE
[01:31:16.551]      // while "1"  (timeout="200")
[01:31:16.552]      // while-condition  =>  TRUE
[01:31:16.552]      // while "1"  (timeout="200")
[01:31:16.552]      // while-condition  =>  TRUE
[01:31:16.552]      // while "1"  (timeout="200")
[01:31:16.553]      // while-condition  =>  TRUE
[01:31:16.553]      // while "1"  (timeout="200")
[01:31:16.553]      // while  =>  TIMEOUT
[01:31:16.553]      // end while "1"
[01:31:16.553]    </control>
[01:31:16.553]    <control if="canReadPins" while="" timeout="0" info="">
[01:31:16.553]      // if-block "canReadPins"
[01:31:16.554]        // =>  TRUE
[01:31:16.554]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:31:16.554]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:31:16.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:31:16.554]        // while-condition  =>  FALSE
[01:31:16.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:31:16.554]      </control>
[01:31:16.555]      // end if-block "canReadPins"
[01:31:16.555]    </control>
[01:31:16.555]    <control if="!canReadPins" while="" timeout="0" info="">
[01:31:16.555]      // if-block "!canReadPins"
[01:31:16.555]        // =>  FALSE
[01:31:16.555]      // skip if-block "!canReadPins"
[01:31:16.555]    </control>
[01:31:16.556]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:31:16.556]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:16.556]        // =>  TRUE
[01:31:16.556]      <block atomic="false" info="">
[01:31:16.556]        WriteAP(0x00, 0x190008);
[01:31:16.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:16.557]        WriteAP(0xF0, 0x01);
[01:31:16.558]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:16.558]      </block>
[01:31:16.558]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:16.559]    </control>
[01:31:16.559]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:31:16.559]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:16.559]        // =>  FALSE
[01:31:16.559]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:16.559]    </control>
[01:31:16.559]    <block atomic="false" info="">
[01:31:16.559]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:16.560]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:31:16.560]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:31:16.560]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:16.564]      __ap = 0; //lets make sure we reset the access point selection
[01:31:16.564]        // -> [__ap <= 0x00000000]
[01:31:16.564]    </block>
[01:31:16.564]  </sequence>
[01:31:16.564]  
[01:31:16.570]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:31:16.570]  
[01:31:16.570]  <debugvars>
[01:31:16.570]    // Pre-defined
[01:31:16.570]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:16.571]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:16.571]    __dp=0x00000000
[01:31:16.571]    __ap=0x00000000
[01:31:16.571]    __traceout=0x00000000      (Trace Disabled)
[01:31:16.571]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:16.571]    __FlashAddr=0x00000000
[01:31:16.571]    __FlashLen=0x00000000
[01:31:16.571]    __FlashArg=0x00000000
[01:31:16.571]    __FlashOp=0x00000000
[01:31:16.571]    __Result=0x00000000
[01:31:16.571]  </debugvars>
[01:31:16.572]  
[01:31:16.572]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:31:16.572]    <block atomic="false" info="">
[01:31:16.572]      __var deviceID = 0;
[01:31:16.572]        // -> [deviceID <= 0x00000000]
[01:31:16.572]      __var version = 0;
[01:31:16.572]        // -> [version <= 0x00000000]
[01:31:16.572]      __var partNum = 0;
[01:31:16.572]        // -> [partNum <= 0x00000000]
[01:31:16.572]      __var manuf = 0;
[01:31:16.573]        // -> [manuf <= 0x00000000]
[01:31:16.573]      __var isMSPM0G1X0X_G3X0X = 0;
[01:31:16.573]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:31:16.573]      __var isProduction = 0;
[01:31:16.573]        // -> [isProduction <= 0x00000000]
[01:31:16.573]      __var continueId = 0;
[01:31:16.573]        // -> [continueId <= 0x00000000]
[01:31:16.573]      deviceID =   Read32(0x41C40004);
[01:31:16.574]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:31:16.574]        // -> [deviceID <= 0x2BB8802F]
[01:31:16.574]      version = deviceID >> 28;
[01:31:16.575]        // -> [version <= 0x00000002]
[01:31:16.575]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:31:16.575]        // -> [partNum <= 0x0000BB88]
[01:31:16.575]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:31:16.575]        // -> [manuf <= 0x00000017]
[01:31:16.575]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:31:16.576]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:31:16.576]      isProduction = (version > 0);
[01:31:16.576]        // -> [isProduction <= 0x00000001]
[01:31:16.576]    </block>
[01:31:16.576]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:31:16.576]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:31:16.576]        // =>  FALSE
[01:31:16.576]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:31:16.577]    </control>
[01:31:16.577]    <control if="continueId == 4" while="" timeout="0" info="">
[01:31:16.577]      // if-block "continueId == 4"
[01:31:16.577]        // =>  FALSE
[01:31:16.577]      // skip if-block "continueId == 4"
[01:31:16.577]    </control>
[01:31:16.577]    <control if="!isProduction" while="" timeout="0" info="">
[01:31:16.577]      // if-block "!isProduction"
[01:31:16.577]        // =>  FALSE
[01:31:16.578]      // skip if-block "!isProduction"
[01:31:16.578]    </control>
[01:31:16.578]  </sequence>
[01:31:16.578]  
[01:31:20.126]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:31:20.126]  
[01:31:20.134]  <debugvars>
[01:31:20.134]    // Pre-defined
[01:31:20.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:20.134]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:20.134]    __dp=0x00000000
[01:31:20.134]    __ap=0x00000000
[01:31:20.134]    __traceout=0x00000000      (Trace Disabled)
[01:31:20.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:20.134]    __FlashAddr=0x00000000
[01:31:20.135]    __FlashLen=0x00000000
[01:31:20.135]    __FlashArg=0x00000000
[01:31:20.135]    __FlashOp=0x00000000
[01:31:20.135]    __Result=0x00000000
[01:31:20.135]  </debugvars>
[01:31:20.135]  
[01:31:20.135]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:31:20.135]    <block atomic="false" info="">
[01:31:20.135]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:31:20.135]        // -> [isSWJ <= 0x00000001]
[01:31:20.135]      __var hasDormant = __protocol & 0x00020000;
[01:31:20.135]        // -> [hasDormant <= 0x00000000]
[01:31:20.135]      __var protType   = __protocol & 0x0000FFFF;
[01:31:20.135]        // -> [protType <= 0x00000002]
[01:31:20.137]    </block>
[01:31:20.137]    <control if="protType == 1" while="" timeout="0" info="">
[01:31:20.137]      // if-block "protType == 1"
[01:31:20.137]        // =>  FALSE
[01:31:20.137]      // skip if-block "protType == 1"
[01:31:20.137]    </control>
[01:31:20.137]    <control if="protType == 2" while="" timeout="0" info="">
[01:31:20.137]      // if-block "protType == 2"
[01:31:20.137]        // =>  TRUE
[01:31:20.137]      <control if="isSWJ" while="" timeout="0" info="">
[01:31:20.137]        // if-block "isSWJ"
[01:31:20.137]          // =>  TRUE
[01:31:20.138]        <control if="hasDormant" while="" timeout="0" info="">
[01:31:20.138]          // if-block "hasDormant"
[01:31:20.138]            // =>  FALSE
[01:31:20.138]          // skip if-block "hasDormant"
[01:31:20.138]        </control>
[01:31:20.138]        <control if="!hasDormant" while="" timeout="0" info="">
[01:31:20.138]          // if-block "!hasDormant"
[01:31:20.138]            // =>  TRUE
[01:31:20.138]          <block atomic="false" info="">
[01:31:20.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:31:20.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:20.139]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:31:20.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:31:20.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:31:20.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:20.140]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:31:20.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:31:20.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:31:20.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:20.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:31:20.140]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:31:20.141]          </block>
[01:31:20.141]          // end if-block "!hasDormant"
[01:31:20.141]        </control>
[01:31:20.141]        // end if-block "isSWJ"
[01:31:20.141]      </control>
[01:31:20.141]      <control if="!isSWJ" while="" timeout="0" info="">
[01:31:20.141]        // if-block "!isSWJ"
[01:31:20.141]          // =>  FALSE
[01:31:20.141]        // skip if-block "!isSWJ"
[01:31:20.142]      </control>
[01:31:20.142]      <block atomic="false" info="">
[01:31:20.142]        ReadDP(0x0);
[01:31:20.143]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:31:20.143]      </block>
[01:31:20.143]      // end if-block "protType == 2"
[01:31:20.143]    </control>
[01:31:20.143]  </sequence>
[01:31:20.143]  
[01:31:20.143]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:31:20.143]  
[01:31:20.144]  <debugvars>
[01:31:20.144]    // Pre-defined
[01:31:20.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:20.144]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:20.144]    __dp=0x00000000
[01:31:20.144]    __ap=0x00000000
[01:31:20.144]    __traceout=0x00000000      (Trace Disabled)
[01:31:20.144]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:20.144]    __FlashAddr=0x00000000
[01:31:20.144]    __FlashLen=0x00000000
[01:31:20.144]    __FlashArg=0x00000000
[01:31:20.145]    __FlashOp=0x00000000
[01:31:20.145]    __Result=0x00000000
[01:31:20.145]  </debugvars>
[01:31:20.145]  
[01:31:20.145]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:31:20.145]    <block atomic="false" info="">
[01:31:20.145]      __var SW_DP_ABORT       = 0x0;
[01:31:20.145]        // -> [SW_DP_ABORT <= 0x00000000]
[01:31:20.145]      __var DP_CTRL_STAT      = 0x4;
[01:31:20.145]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:31:20.145]      __var DP_SELECT         = 0x8;
[01:31:20.146]        // -> [DP_SELECT <= 0x00000008]
[01:31:20.146]      __var powered_down      = 0;
[01:31:20.146]        // -> [powered_down <= 0x00000000]
[01:31:20.146]      WriteDP(DP_SELECT, 0x00000000);
[01:31:20.147]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:31:20.147]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:31:20.147]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:31:20.147]        // -> [powered_down <= 0x00000001]
[01:31:20.147]    </block>
[01:31:20.147]    <control if="powered_down" while="" timeout="0" info="">
[01:31:20.147]      // if-block "powered_down"
[01:31:20.148]        // =>  TRUE
[01:31:20.148]      <block atomic="false" info="">
[01:31:20.148]        Message(0, "Debug/System power-up request sent");
[01:31:20.149]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:31:20.150]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:31:20.150]      </block>
[01:31:20.150]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:31:20.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:31:20.151]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:31:20.151]        // while-condition  =>  FALSE
[01:31:20.152]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:31:20.152]      </control>
[01:31:20.152]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:31:20.152]        // if-block "(__protocol & 0xFFFF) == 1"
[01:31:20.152]          // =>  FALSE
[01:31:20.152]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:31:20.152]      </control>
[01:31:20.152]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:31:20.152]        // if-block "(__protocol & 0xFFFF) == 2"
[01:31:20.152]          // =>  TRUE
[01:31:20.152]        <block atomic="false" info="">
[01:31:20.152]          Message(0, "executing SWD power up");
[01:31:20.153]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:31:20.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:31:20.154]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:31:20.155]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:31:20.155]        </block>
[01:31:20.155]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:31:20.155]      </control>
[01:31:20.155]      // end if-block "powered_down"
[01:31:20.155]    </control>
[01:31:20.155]    <block atomic="false" info="">
[01:31:20.155]      __var DEBUG_PORT_VAL    = 0;
[01:31:20.155]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:31:20.155]      __var ACCESS_POINT_VAL  = 0;
[01:31:20.155]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:31:20.155]      __ap = 1; 
[01:31:20.157]        // -> [__ap <= 0x00000001]
[01:31:20.157]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:31:20.158]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:31:20.158]      __ap = 4;
[01:31:20.158]        // -> [__ap <= 0x00000004]
[01:31:20.158]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:20.159]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:31:20.159]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:31:20.159]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:20.161]    </block>
[01:31:20.161]    <block atomic="false" info="">
[01:31:20.161]      __var nReset = 0x80;
[01:31:20.161]        // -> [nReset <= 0x00000080]
[01:31:20.161]      __var canReadPins = 0;
[01:31:20.161]        // -> [canReadPins <= 0x00000000]
[01:31:20.161]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:31:20.161]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:31:20.162]        // -> [canReadPins <= 0x00000001]
[01:31:20.162]    </block>
[01:31:20.162]    <control if="" while="1" timeout="200" info="">
[01:31:20.162]      // while "1"  (timeout="200")
[01:31:20.162]      // while-condition  =>  TRUE
[01:31:20.162]      // while "1"  (timeout="200")
[01:31:20.162]      // while-condition  =>  TRUE
[01:31:20.162]      // while "1"  (timeout="200")
[01:31:20.162]      // while-condition  =>  TRUE
[01:31:20.162]      // while "1"  (timeout="200")
[01:31:20.162]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.164]      // while-condition  =>  TRUE
[01:31:20.164]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.165]      // while-condition  =>  TRUE
[01:31:20.165]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.166]      // while-condition  =>  TRUE
[01:31:20.166]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.167]      // while-condition  =>  TRUE
[01:31:20.167]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.168]      // while-condition  =>  TRUE
[01:31:20.168]      // while "1"  (timeout="200")
[01:31:20.169]      // while-condition  =>  TRUE
[01:31:20.169]      // while "1"  (timeout="200")
[01:31:20.169]      // while-condition  =>  TRUE
[01:31:20.169]      // while "1"  (timeout="200")
[01:31:20.169]      // while-condition  =>  TRUE
[01:31:20.169]      // while "1"  (timeout="200")
[01:31:20.169]      // while-condition  =>  TRUE
[01:31:20.170]      // while "1"  (timeout="200")
[01:31:20.170]      // while-condition  =>  TRUE
[01:31:20.170]      // while "1"  (timeout="200")
[01:31:20.170]      // while-condition  =>  TRUE
[01:31:20.170]      // while "1"  (timeout="200")
[01:31:20.170]      // while-condition  =>  TRUE
[01:31:20.170]      // while "1"  (timeout="200")
[01:31:20.170]      // while-condition  =>  TRUE
[01:31:20.170]      // while "1"  (timeout="200")
[01:31:20.170]      // while-condition  =>  TRUE
[01:31:20.171]      // while "1"  (timeout="200")
[01:31:20.171]      // while-condition  =>  TRUE
[01:31:20.171]      // while "1"  (timeout="200")
[01:31:20.171]      // while-condition  =>  TRUE
[01:31:20.171]      // while "1"  (timeout="200")
[01:31:20.171]      // while-condition  =>  TRUE
[01:31:20.171]      // while "1"  (timeout="200")
[01:31:20.171]      // while-condition  =>  TRUE
[01:31:20.171]      // while "1"  (timeout="200")
[01:31:20.171]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.172]      // while "1"  (timeout="200")
[01:31:20.172]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.173]      // while "1"  (timeout="200")
[01:31:20.173]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.175]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.175]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.175]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.175]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.175]      // while-condition  =>  TRUE
[01:31:20.175]      // while "1"  (timeout="200")
[01:31:20.176]      // while-condition  =>  TRUE
[01:31:20.176]      // while "1"  (timeout="200")
[01:31:20.176]      // while-condition  =>  TRUE
[01:31:20.176]      // while "1"  (timeout="200")
[01:31:20.176]      // while-condition  =>  TRUE
[01:31:20.176]      // while "1"  (timeout="200")
[01:31:20.176]      // while-condition  =>  TRUE
[01:31:20.176]      // while "1"  (timeout="200")
[01:31:20.176]      // while-condition  =>  TRUE
[01:31:20.176]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.177]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.177]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.177]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.177]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.177]      // while "1"  (timeout="200")
[01:31:20.177]      // while-condition  =>  TRUE
[01:31:20.178]      // while "1"  (timeout="200")
[01:31:20.178]      // while  =>  TIMEOUT
[01:31:20.178]      // end while "1"
[01:31:20.178]    </control>
[01:31:20.178]    <control if="canReadPins" while="" timeout="0" info="">
[01:31:20.178]      // if-block "canReadPins"
[01:31:20.178]        // =>  TRUE
[01:31:20.178]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:31:20.179]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:31:20.179]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:31:20.179]        // while-condition  =>  FALSE
[01:31:20.179]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:31:20.179]      </control>
[01:31:20.179]      // end if-block "canReadPins"
[01:31:20.179]    </control>
[01:31:20.180]    <control if="!canReadPins" while="" timeout="0" info="">
[01:31:20.180]      // if-block "!canReadPins"
[01:31:20.180]        // =>  FALSE
[01:31:20.180]      // skip if-block "!canReadPins"
[01:31:20.180]    </control>
[01:31:20.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:31:20.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:20.180]        // =>  TRUE
[01:31:20.180]      <block atomic="false" info="">
[01:31:20.180]        WriteAP(0x00, 0x190008);
[01:31:20.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:20.181]        WriteAP(0xF0, 0x01);
[01:31:20.182]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:20.182]      </block>
[01:31:20.182]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:20.182]    </control>
[01:31:20.182]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:31:20.182]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:20.182]        // =>  FALSE
[01:31:20.182]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:20.183]    </control>
[01:31:20.183]    <block atomic="false" info="">
[01:31:20.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:20.184]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:31:20.184]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:31:20.184]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:20.186]      __ap = 0; //lets make sure we reset the access point selection
[01:31:20.186]        // -> [__ap <= 0x00000000]
[01:31:20.187]    </block>
[01:31:20.187]  </sequence>
[01:31:20.187]  
[01:31:20.193]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:31:20.193]  
[01:31:20.193]  <debugvars>
[01:31:20.193]    // Pre-defined
[01:31:20.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:20.193]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:20.193]    __dp=0x00000000
[01:31:20.193]    __ap=0x00000000
[01:31:20.193]    __traceout=0x00000000      (Trace Disabled)
[01:31:20.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:20.194]    __FlashAddr=0x00000000
[01:31:20.194]    __FlashLen=0x00000000
[01:31:20.194]    __FlashArg=0x00000000
[01:31:20.194]    __FlashOp=0x00000000
[01:31:20.194]    __Result=0x00000000
[01:31:20.194]  </debugvars>
[01:31:20.194]  
[01:31:20.194]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:31:20.194]    <block atomic="false" info="">
[01:31:20.194]      __var deviceID = 0;
[01:31:20.194]        // -> [deviceID <= 0x00000000]
[01:31:20.195]      __var version = 0;
[01:31:20.195]        // -> [version <= 0x00000000]
[01:31:20.195]      __var partNum = 0;
[01:31:20.195]        // -> [partNum <= 0x00000000]
[01:31:20.195]      __var manuf = 0;
[01:31:20.195]        // -> [manuf <= 0x00000000]
[01:31:20.195]      __var isMSPM0G1X0X_G3X0X = 0;
[01:31:20.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:31:20.195]      __var isProduction = 0;
[01:31:20.195]        // -> [isProduction <= 0x00000000]
[01:31:20.195]      __var continueId = 0;
[01:31:20.195]        // -> [continueId <= 0x00000000]
[01:31:20.196]      deviceID =   Read32(0x41C40004);
[01:31:20.197]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:31:20.197]        // -> [deviceID <= 0x2BB8802F]
[01:31:20.197]      version = deviceID >> 28;
[01:31:20.197]        // -> [version <= 0x00000002]
[01:31:20.197]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:31:20.197]        // -> [partNum <= 0x0000BB88]
[01:31:20.197]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:31:20.197]        // -> [manuf <= 0x00000017]
[01:31:20.197]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:31:20.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:31:20.198]      isProduction = (version > 0);
[01:31:20.198]        // -> [isProduction <= 0x00000001]
[01:31:20.198]    </block>
[01:31:20.198]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:31:20.198]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:31:20.198]        // =>  FALSE
[01:31:20.198]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:31:20.198]    </control>
[01:31:20.198]    <control if="continueId == 4" while="" timeout="0" info="">
[01:31:20.198]      // if-block "continueId == 4"
[01:31:20.198]        // =>  FALSE
[01:31:20.198]      // skip if-block "continueId == 4"
[01:31:20.200]    </control>
[01:31:20.200]    <control if="!isProduction" while="" timeout="0" info="">
[01:31:20.200]      // if-block "!isProduction"
[01:31:20.200]        // =>  FALSE
[01:31:20.200]      // skip if-block "!isProduction"
[01:31:20.200]    </control>
[01:31:20.200]  </sequence>
[01:31:20.200]  
[01:33:32.081]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:33:32.081]  
[01:33:32.090]  <debugvars>
[01:33:32.090]    // Pre-defined
[01:33:32.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:32.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:32.090]    __dp=0x00000000
[01:33:32.090]    __ap=0x00000000
[01:33:32.090]    __traceout=0x00000000      (Trace Disabled)
[01:33:32.090]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:32.090]    __FlashAddr=0x00000000
[01:33:32.090]    __FlashLen=0x00000000
[01:33:32.090]    __FlashArg=0x00000000
[01:33:32.090]    __FlashOp=0x00000000
[01:33:32.090]    __Result=0x00000000
[01:33:32.090]  </debugvars>
[01:33:32.090]  
[01:33:32.091]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:33:32.091]    <block atomic="false" info="">
[01:33:32.091]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:33:32.091]        // -> [isSWJ <= 0x00000001]
[01:33:32.091]      __var hasDormant = __protocol & 0x00020000;
[01:33:32.091]        // -> [hasDormant <= 0x00000000]
[01:33:32.091]      __var protType   = __protocol & 0x0000FFFF;
[01:33:32.091]        // -> [protType <= 0x00000002]
[01:33:32.091]    </block>
[01:33:32.091]    <control if="protType == 1" while="" timeout="0" info="">
[01:33:32.091]      // if-block "protType == 1"
[01:33:32.091]        // =>  FALSE
[01:33:32.092]      // skip if-block "protType == 1"
[01:33:32.092]    </control>
[01:33:32.092]    <control if="protType == 2" while="" timeout="0" info="">
[01:33:32.092]      // if-block "protType == 2"
[01:33:32.092]        // =>  TRUE
[01:33:32.092]      <control if="isSWJ" while="" timeout="0" info="">
[01:33:32.092]        // if-block "isSWJ"
[01:33:32.092]          // =>  TRUE
[01:33:32.092]        <control if="hasDormant" while="" timeout="0" info="">
[01:33:32.092]          // if-block "hasDormant"
[01:33:32.092]            // =>  FALSE
[01:33:32.093]          // skip if-block "hasDormant"
[01:33:32.093]        </control>
[01:33:32.093]        <control if="!hasDormant" while="" timeout="0" info="">
[01:33:32.093]          // if-block "!hasDormant"
[01:33:32.093]            // =>  TRUE
[01:33:32.093]          <block atomic="false" info="">
[01:33:32.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:33:32.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:32.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:33:32.094]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:33:32.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:33:32.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:32.095]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:33:32.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:33:32.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:33:32.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:32.096]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:33:32.096]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:33:32.096]          </block>
[01:33:32.096]          // end if-block "!hasDormant"
[01:33:32.097]        </control>
[01:33:32.097]        // end if-block "isSWJ"
[01:33:32.097]      </control>
[01:33:32.097]      <control if="!isSWJ" while="" timeout="0" info="">
[01:33:32.097]        // if-block "!isSWJ"
[01:33:32.097]          // =>  FALSE
[01:33:32.097]        // skip if-block "!isSWJ"
[01:33:32.097]      </control>
[01:33:32.097]      <block atomic="false" info="">
[01:33:32.097]        ReadDP(0x0);
[01:33:32.097]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:33:32.098]      </block>
[01:33:32.098]      // end if-block "protType == 2"
[01:33:32.098]    </control>
[01:33:32.098]  </sequence>
[01:33:32.098]  
[01:33:32.098]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:33:32.098]  
[01:33:32.099]  <debugvars>
[01:33:32.099]    // Pre-defined
[01:33:32.099]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:32.099]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:32.099]    __dp=0x00000000
[01:33:32.099]    __ap=0x00000000
[01:33:32.099]    __traceout=0x00000000      (Trace Disabled)
[01:33:32.099]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:32.099]    __FlashAddr=0x00000000
[01:33:32.099]    __FlashLen=0x00000000
[01:33:32.101]    __FlashArg=0x00000000
[01:33:32.101]    __FlashOp=0x00000000
[01:33:32.101]    __Result=0x00000000
[01:33:32.101]  </debugvars>
[01:33:32.101]  
[01:33:32.101]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:33:32.101]    <block atomic="false" info="">
[01:33:32.101]      __var SW_DP_ABORT       = 0x0;
[01:33:32.101]        // -> [SW_DP_ABORT <= 0x00000000]
[01:33:32.101]      __var DP_CTRL_STAT      = 0x4;
[01:33:32.102]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:33:32.102]      __var DP_SELECT         = 0x8;
[01:33:32.102]        // -> [DP_SELECT <= 0x00000008]
[01:33:32.102]      __var powered_down      = 0;
[01:33:32.102]        // -> [powered_down <= 0x00000000]
[01:33:32.102]      WriteDP(DP_SELECT, 0x00000000);
[01:33:32.103]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:33:32.103]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:33:32.103]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:33:32.103]        // -> [powered_down <= 0x00000001]
[01:33:32.103]    </block>
[01:33:32.103]    <control if="powered_down" while="" timeout="0" info="">
[01:33:32.104]      // if-block "powered_down"
[01:33:32.104]        // =>  TRUE
[01:33:32.104]      <block atomic="false" info="">
[01:33:32.104]        Message(0, "Debug/System power-up request sent");
[01:33:32.106]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:33:32.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:33:32.107]      </block>
[01:33:32.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:33:32.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:33:32.107]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:33:32.107]        // while-condition  =>  FALSE
[01:33:32.107]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:33:32.107]      </control>
[01:33:32.108]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:33:32.108]        // if-block "(__protocol & 0xFFFF) == 1"
[01:33:32.108]          // =>  FALSE
[01:33:32.108]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:33:32.108]      </control>
[01:33:32.108]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:33:32.108]        // if-block "(__protocol & 0xFFFF) == 2"
[01:33:32.108]          // =>  TRUE
[01:33:32.108]        <block atomic="false" info="">
[01:33:32.108]          Message(0, "executing SWD power up");
[01:33:32.110]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:33:32.112]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:33:32.112]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:33:32.112]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:33:32.112]        </block>
[01:33:32.112]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:33:32.113]      </control>
[01:33:32.113]      // end if-block "powered_down"
[01:33:32.113]    </control>
[01:33:32.113]    <block atomic="false" info="">
[01:33:32.113]      __var DEBUG_PORT_VAL    = 0;
[01:33:32.113]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:33:32.113]      __var ACCESS_POINT_VAL  = 0;
[01:33:32.113]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:33:32.113]      __ap = 1; 
[01:33:32.113]        // -> [__ap <= 0x00000001]
[01:33:32.114]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:33:32.115]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:33:32.115]      __ap = 4;
[01:33:32.115]        // -> [__ap <= 0x00000004]
[01:33:32.115]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:32.117]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:33:32.117]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:33:32.117]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:32.119]    </block>
[01:33:32.119]    <block atomic="false" info="">
[01:33:32.119]      __var nReset = 0x80;
[01:33:32.119]        // -> [nReset <= 0x00000080]
[01:33:32.119]      __var canReadPins = 0;
[01:33:32.119]        // -> [canReadPins <= 0x00000000]
[01:33:32.119]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:33:32.120]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:33:32.120]        // -> [canReadPins <= 0x00000001]
[01:33:32.120]    </block>
[01:33:32.120]    <control if="" while="1" timeout="200" info="">
[01:33:32.120]      // while "1"  (timeout="200")
[01:33:32.120]      // while-condition  =>  TRUE
[01:33:32.120]      // while "1"  (timeout="200")
[01:33:32.120]      // while-condition  =>  TRUE
[01:33:32.121]      // while "1"  (timeout="200")
[01:33:32.121]      // while-condition  =>  TRUE
[01:33:32.121]      // while "1"  (timeout="200")
[01:33:32.121]      // while-condition  =>  TRUE
[01:33:32.121]      // while "1"  (timeout="200")
[01:33:32.121]      // while-condition  =>  TRUE
[01:33:32.121]      // while "1"  (timeout="200")
[01:33:32.121]      // while-condition  =>  TRUE
[01:33:32.121]      // while "1"  (timeout="200")
[01:33:32.122]      // while-condition  =>  TRUE
[01:33:32.122]      // while "1"  (timeout="200")
[01:33:32.122]      // while-condition  =>  TRUE
[01:33:32.122]      // while "1"  (timeout="200")
[01:33:32.122]      // while-condition  =>  TRUE
[01:33:32.122]      // while "1"  (timeout="200")
[01:33:32.122]      // while-condition  =>  TRUE
[01:33:32.122]      // while "1"  (timeout="200")
[01:33:32.122]      // while-condition  =>  TRUE
[01:33:32.123]      // while "1"  (timeout="200")
[01:33:32.123]      // while-condition  =>  TRUE
[01:33:32.123]      // while "1"  (timeout="200")
[01:33:32.123]      // while-condition  =>  TRUE
[01:33:32.123]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.124]      // while-condition  =>  TRUE
[01:33:32.124]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.125]      // while-condition  =>  TRUE
[01:33:32.125]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.126]      // while-condition  =>  TRUE
[01:33:32.126]      // while "1"  (timeout="200")
[01:33:32.127]      // while-condition  =>  TRUE
[01:33:32.127]      // while "1"  (timeout="200")
[01:33:32.127]      // while-condition  =>  TRUE
[01:33:32.127]      // while "1"  (timeout="200")
[01:33:32.127]      // while-condition  =>  TRUE
[01:33:32.127]      // while "1"  (timeout="200")
[01:33:32.127]      // while-condition  =>  TRUE
[01:33:32.127]      // while "1"  (timeout="200")
[01:33:32.127]      // while-condition  =>  TRUE
[01:33:32.127]      // while "1"  (timeout="200")
[01:33:32.128]      // while-condition  =>  TRUE
[01:33:32.128]      // while "1"  (timeout="200")
[01:33:32.128]      // while-condition  =>  TRUE
[01:33:32.128]      // while "1"  (timeout="200")
[01:33:32.128]      // while-condition  =>  TRUE
[01:33:32.128]      // while "1"  (timeout="200")
[01:33:32.128]      // while-condition  =>  TRUE
[01:33:32.128]      // while "1"  (timeout="200")
[01:33:32.128]      // while-condition  =>  TRUE
[01:33:32.128]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.129]      // while-condition  =>  TRUE
[01:33:32.129]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.130]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.130]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.130]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.130]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.130]      // while "1"  (timeout="200")
[01:33:32.130]      // while-condition  =>  TRUE
[01:33:32.131]      // while "1"  (timeout="200")
[01:33:32.131]      // while  =>  TIMEOUT
[01:33:32.131]      // end while "1"
[01:33:32.131]    </control>
[01:33:32.131]    <control if="canReadPins" while="" timeout="0" info="">
[01:33:32.131]      // if-block "canReadPins"
[01:33:32.131]        // =>  TRUE
[01:33:32.131]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:33:32.131]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:33:32.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:33:32.132]        // while-condition  =>  FALSE
[01:33:32.132]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:33:32.132]      </control>
[01:33:32.132]      // end if-block "canReadPins"
[01:33:32.132]    </control>
[01:33:32.132]    <control if="!canReadPins" while="" timeout="0" info="">
[01:33:32.132]      // if-block "!canReadPins"
[01:33:32.132]        // =>  FALSE
[01:33:32.132]      // skip if-block "!canReadPins"
[01:33:32.134]    </control>
[01:33:32.134]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:33:32.134]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:32.134]        // =>  TRUE
[01:33:32.134]      <block atomic="false" info="">
[01:33:32.134]        WriteAP(0x00, 0x190008);
[01:33:32.135]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:32.135]        WriteAP(0xF0, 0x01);
[01:33:32.136]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:32.136]      </block>
[01:33:32.136]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:32.136]    </control>
[01:33:32.136]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:33:32.136]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:32.137]        // =>  FALSE
[01:33:32.137]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:32.137]    </control>
[01:33:32.137]    <block atomic="false" info="">
[01:33:32.137]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:32.138]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:33:32.138]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:33:32.138]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:32.140]      __ap = 0; //lets make sure we reset the access point selection
[01:33:32.140]        // -> [__ap <= 0x00000000]
[01:33:32.140]    </block>
[01:33:32.140]  </sequence>
[01:33:32.140]  
[01:33:32.146]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:33:32.146]  
[01:33:32.146]  <debugvars>
[01:33:32.147]    // Pre-defined
[01:33:32.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:32.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:32.147]    __dp=0x00000000
[01:33:32.147]    __ap=0x00000000
[01:33:32.147]    __traceout=0x00000000      (Trace Disabled)
[01:33:32.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:32.147]    __FlashAddr=0x00000000
[01:33:32.147]    __FlashLen=0x00000000
[01:33:32.147]    __FlashArg=0x00000000
[01:33:32.147]    __FlashOp=0x00000000
[01:33:32.147]    __Result=0x00000000
[01:33:32.147]  </debugvars>
[01:33:32.147]  
[01:33:32.148]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:33:32.148]    <block atomic="false" info="">
[01:33:32.148]      __var deviceID = 0;
[01:33:32.148]        // -> [deviceID <= 0x00000000]
[01:33:32.148]      __var version = 0;
[01:33:32.148]        // -> [version <= 0x00000000]
[01:33:32.148]      __var partNum = 0;
[01:33:32.148]        // -> [partNum <= 0x00000000]
[01:33:32.148]      __var manuf = 0;
[01:33:32.148]        // -> [manuf <= 0x00000000]
[01:33:32.148]      __var isMSPM0G1X0X_G3X0X = 0;
[01:33:32.148]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:33:32.148]      __var isProduction = 0;
[01:33:32.148]        // -> [isProduction <= 0x00000000]
[01:33:32.149]      __var continueId = 0;
[01:33:32.149]        // -> [continueId <= 0x00000000]
[01:33:32.149]      deviceID =   Read32(0x41C40004);
[01:33:32.151]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:33:32.151]        // -> [deviceID <= 0x2BB8802F]
[01:33:32.151]      version = deviceID >> 28;
[01:33:32.151]        // -> [version <= 0x00000002]
[01:33:32.151]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:33:32.151]        // -> [partNum <= 0x0000BB88]
[01:33:32.151]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:33:32.151]        // -> [manuf <= 0x00000017]
[01:33:32.151]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:33:32.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:33:32.152]      isProduction = (version > 0);
[01:33:32.152]        // -> [isProduction <= 0x00000001]
[01:33:32.152]    </block>
[01:33:32.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:33:32.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:33:32.152]        // =>  FALSE
[01:33:32.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:33:32.154]    </control>
[01:33:32.154]    <control if="continueId == 4" while="" timeout="0" info="">
[01:33:32.154]      // if-block "continueId == 4"
[01:33:32.154]        // =>  FALSE
[01:33:32.154]      // skip if-block "continueId == 4"
[01:33:32.154]    </control>
[01:33:32.154]    <control if="!isProduction" while="" timeout="0" info="">
[01:33:32.154]      // if-block "!isProduction"
[01:33:32.154]        // =>  FALSE
[01:33:32.154]      // skip if-block "!isProduction"
[01:33:32.155]    </control>
[01:33:32.155]  </sequence>
[01:33:32.155]  
[01:33:35.686]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:33:35.686]  
[01:33:35.687]  <debugvars>
[01:33:35.687]    // Pre-defined
[01:33:35.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:35.687]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:33:35.687]    __dp=0x00000000
[01:33:35.687]    __ap=0x00000000
[01:33:35.687]    __traceout=0x00000000      (Trace Disabled)
[01:33:35.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:35.687]    __FlashAddr=0x00000000
[01:33:35.687]    __FlashLen=0x00000000
[01:33:35.687]    __FlashArg=0x00000000
[01:33:35.688]    __FlashOp=0x00000000
[01:33:35.688]    __Result=0x00000000
[01:33:35.688]  </debugvars>
[01:33:35.688]  
[01:33:35.688]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:33:35.688]    <block atomic="false" info="">
[01:33:35.688]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:33:35.688]        // -> [isSWJ <= 0x00000001]
[01:33:35.688]      __var hasDormant = __protocol & 0x00020000;
[01:33:35.688]        // -> [hasDormant <= 0x00000000]
[01:33:35.688]      __var protType   = __protocol & 0x0000FFFF;
[01:33:35.689]        // -> [protType <= 0x00000002]
[01:33:35.689]    </block>
[01:33:35.689]    <control if="protType == 1" while="" timeout="0" info="">
[01:33:35.689]      // if-block "protType == 1"
[01:33:35.689]        // =>  FALSE
[01:33:35.689]      // skip if-block "protType == 1"
[01:33:35.689]    </control>
[01:33:35.689]    <control if="protType == 2" while="" timeout="0" info="">
[01:33:35.689]      // if-block "protType == 2"
[01:33:35.689]        // =>  TRUE
[01:33:35.691]      <control if="isSWJ" while="" timeout="0" info="">
[01:33:35.691]        // if-block "isSWJ"
[01:33:35.691]          // =>  TRUE
[01:33:35.691]        <control if="hasDormant" while="" timeout="0" info="">
[01:33:35.691]          // if-block "hasDormant"
[01:33:35.691]            // =>  FALSE
[01:33:35.691]          // skip if-block "hasDormant"
[01:33:35.691]        </control>
[01:33:35.691]        <control if="!hasDormant" while="" timeout="0" info="">
[01:33:35.691]          // if-block "!hasDormant"
[01:33:35.691]            // =>  TRUE
[01:33:35.692]          <block atomic="false" info="">
[01:33:35.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:33:35.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.692]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:33:35.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:33:35.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:33:35.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.693]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:33:35.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:33:35.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:33:35.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.694]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:33:35.694]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:33:35.694]          </block>
[01:33:35.694]          // end if-block "!hasDormant"
[01:33:35.694]        </control>
[01:33:35.695]        // end if-block "isSWJ"
[01:33:35.695]      </control>
[01:33:35.695]      <control if="!isSWJ" while="" timeout="0" info="">
[01:33:35.695]        // if-block "!isSWJ"
[01:33:35.695]          // =>  FALSE
[01:33:35.695]        // skip if-block "!isSWJ"
[01:33:35.695]      </control>
[01:33:35.695]      <block atomic="false" info="">
[01:33:35.695]        ReadDP(0x0);
[01:33:35.695]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:33:35.695]      </block>
[01:33:35.696]      // end if-block "protType == 2"
[01:33:35.696]    </control>
[01:33:35.696]  </sequence>
[01:33:35.696]  
[01:33:35.696]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:33:35.696]  
[01:33:35.696]  <debugvars>
[01:33:35.697]    // Pre-defined
[01:33:35.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:35.697]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:33:35.697]    __dp=0x00000000
[01:33:35.697]    __ap=0x00000000
[01:33:35.697]    __traceout=0x00000000      (Trace Disabled)
[01:33:35.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:35.697]    __FlashAddr=0x00000000
[01:33:35.697]    __FlashLen=0x00000000
[01:33:35.697]    __FlashArg=0x00000000
[01:33:35.697]    __FlashOp=0x00000000
[01:33:35.698]    __Result=0x00000000
[01:33:35.698]  </debugvars>
[01:33:35.698]  
[01:33:35.698]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:33:35.698]    <block atomic="false" info="">
[01:33:35.698]      __var SW_DP_ABORT       = 0x0;
[01:33:35.698]        // -> [SW_DP_ABORT <= 0x00000000]
[01:33:35.698]      __var DP_CTRL_STAT      = 0x4;
[01:33:35.698]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:33:35.698]      __var DP_SELECT         = 0x8;
[01:33:35.698]        // -> [DP_SELECT <= 0x00000008]
[01:33:35.699]      __var powered_down      = 0;
[01:33:35.699]        // -> [powered_down <= 0x00000000]
[01:33:35.699]      WriteDP(DP_SELECT, 0x00000000);
[01:33:35.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:33:35.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:33:35.701]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:33:35.701]        // -> [powered_down <= 0x00000001]
[01:33:35.701]    </block>
[01:33:35.701]    <control if="powered_down" while="" timeout="0" info="">
[01:33:35.701]      // if-block "powered_down"
[01:33:35.701]        // =>  TRUE
[01:33:35.701]      <block atomic="false" info="">
[01:33:35.701]        Message(0, "Debug/System power-up request sent");
[01:33:35.703]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:33:35.704]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:33:35.704]      </block>
[01:33:35.704]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:33:35.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:33:35.704]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:33:35.704]        // while-condition  =>  FALSE
[01:33:35.704]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:33:35.704]      </control>
[01:33:35.705]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:33:35.705]        // if-block "(__protocol & 0xFFFF) == 1"
[01:33:35.705]          // =>  FALSE
[01:33:35.705]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:33:35.705]      </control>
[01:33:35.705]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:33:35.705]        // if-block "(__protocol & 0xFFFF) == 2"
[01:33:35.705]          // =>  TRUE
[01:33:35.705]        <block atomic="false" info="">
[01:33:35.705]          Message(0, "executing SWD power up");
[01:33:35.707]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:33:35.707]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:33:35.708]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:33:35.708]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:33:35.708]        </block>
[01:33:35.708]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:33:35.708]      </control>
[01:33:35.708]      // end if-block "powered_down"
[01:33:35.709]    </control>
[01:33:35.709]    <block atomic="false" info="">
[01:33:35.709]      __var DEBUG_PORT_VAL    = 0;
[01:33:35.709]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:33:35.709]      __var ACCESS_POINT_VAL  = 0;
[01:33:35.709]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:33:35.710]      __ap = 1; 
[01:33:35.710]        // -> [__ap <= 0x00000001]
[01:33:35.710]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:33:35.710]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:33:35.712]      __ap = 4;
[01:33:35.712]        // -> [__ap <= 0x00000004]
[01:33:35.712]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:35.713]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:33:35.713]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:33:35.713]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:35.715]    </block>
[01:33:35.716]    <block atomic="false" info="">
[01:33:35.716]      __var nReset = 0x80;
[01:33:35.716]        // -> [nReset <= 0x00000080]
[01:33:35.716]      __var canReadPins = 0;
[01:33:35.716]        // -> [canReadPins <= 0x00000000]
[01:33:35.716]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:33:35.716]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:33:35.717]        // -> [canReadPins <= 0x00000001]
[01:33:35.717]    </block>
[01:33:35.717]    <control if="" while="1" timeout="200" info="">
[01:33:35.717]      // while "1"  (timeout="200")
[01:33:35.717]      // while-condition  =>  TRUE
[01:33:35.717]      // while "1"  (timeout="200")
[01:33:35.717]      // while-condition  =>  TRUE
[01:33:35.717]      // while "1"  (timeout="200")
[01:33:35.717]      // while-condition  =>  TRUE
[01:33:35.717]      // while "1"  (timeout="200")
[01:33:35.717]      // while-condition  =>  TRUE
[01:33:35.717]      // while "1"  (timeout="200")
[01:33:35.717]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.718]      // while "1"  (timeout="200")
[01:33:35.718]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.719]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.719]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.719]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.719]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.719]      // while-condition  =>  TRUE
[01:33:35.719]      // while "1"  (timeout="200")
[01:33:35.721]      // while-condition  =>  TRUE
[01:33:35.721]      // while "1"  (timeout="200")
[01:33:35.721]      // while-condition  =>  TRUE
[01:33:35.721]      // while "1"  (timeout="200")
[01:33:35.721]      // while-condition  =>  TRUE
[01:33:35.721]      // while "1"  (timeout="200")
[01:33:35.721]      // while-condition  =>  TRUE
[01:33:35.721]      // while "1"  (timeout="200")
[01:33:35.721]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.722]      // while "1"  (timeout="200")
[01:33:35.722]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.723]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.723]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.723]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.723]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.723]      // while-condition  =>  TRUE
[01:33:35.723]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.724]      // while-condition  =>  TRUE
[01:33:35.724]      // while "1"  (timeout="200")
[01:33:35.725]      // while-condition  =>  TRUE
[01:33:35.725]      // while "1"  (timeout="200")
[01:33:35.725]      // while  =>  TIMEOUT
[01:33:35.725]      // end while "1"
[01:33:35.725]    </control>
[01:33:35.725]    <control if="canReadPins" while="" timeout="0" info="">
[01:33:35.725]      // if-block "canReadPins"
[01:33:35.725]        // =>  TRUE
[01:33:35.725]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:33:35.725]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:33:35.725]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:33:35.726]        // while-condition  =>  FALSE
[01:33:35.726]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:33:35.726]      </control>
[01:33:35.726]      // end if-block "canReadPins"
[01:33:35.726]    </control>
[01:33:35.726]    <control if="!canReadPins" while="" timeout="0" info="">
[01:33:35.726]      // if-block "!canReadPins"
[01:33:35.726]        // =>  FALSE
[01:33:35.726]      // skip if-block "!canReadPins"
[01:33:35.727]    </control>
[01:33:35.727]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:33:35.727]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:35.727]        // =>  TRUE
[01:33:35.727]      <block atomic="false" info="">
[01:33:35.727]        WriteAP(0x00, 0x190008);
[01:33:35.728]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:35.728]        WriteAP(0xF0, 0x01);
[01:33:35.729]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:35.729]      </block>
[01:33:35.729]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:35.729]    </control>
[01:33:35.730]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:33:35.730]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:35.730]        // =>  FALSE
[01:33:35.730]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:35.730]    </control>
[01:33:35.730]    <block atomic="false" info="">
[01:33:35.730]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:35.732]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:33:35.732]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:33:35.732]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:35.734]      __ap = 0; //lets make sure we reset the access point selection
[01:33:35.734]        // -> [__ap <= 0x00000000]
[01:33:35.734]    </block>
[01:33:35.734]  </sequence>
[01:33:35.734]  
[01:33:35.740]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:33:35.740]  
[01:33:35.740]  <debugvars>
[01:33:35.740]    // Pre-defined
[01:33:35.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:35.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:33:35.740]    __dp=0x00000000
[01:33:35.741]    __ap=0x00000000
[01:33:35.741]    __traceout=0x00000000      (Trace Disabled)
[01:33:35.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:35.741]    __FlashAddr=0x00000000
[01:33:35.741]    __FlashLen=0x00000000
[01:33:35.741]    __FlashArg=0x00000000
[01:33:35.741]    __FlashOp=0x00000000
[01:33:35.741]    __Result=0x00000000
[01:33:35.741]  </debugvars>
[01:33:35.742]  
[01:33:35.742]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:33:35.742]    <block atomic="false" info="">
[01:33:35.742]      __var deviceID = 0;
[01:33:35.742]        // -> [deviceID <= 0x00000000]
[01:33:35.742]      __var version = 0;
[01:33:35.742]        // -> [version <= 0x00000000]
[01:33:35.742]      __var partNum = 0;
[01:33:35.742]        // -> [partNum <= 0x00000000]
[01:33:35.742]      __var manuf = 0;
[01:33:35.742]        // -> [manuf <= 0x00000000]
[01:33:35.744]      __var isMSPM0G1X0X_G3X0X = 0;
[01:33:35.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:33:35.744]      __var isProduction = 0;
[01:33:35.744]        // -> [isProduction <= 0x00000000]
[01:33:35.744]      __var continueId = 0;
[01:33:35.744]        // -> [continueId <= 0x00000000]
[01:33:35.744]      deviceID =   Read32(0x41C40004);
[01:33:35.745]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:33:35.746]        // -> [deviceID <= 0x2BB8802F]
[01:33:35.746]      version = deviceID >> 28;
[01:33:35.746]        // -> [version <= 0x00000002]
[01:33:35.746]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:33:35.746]        // -> [partNum <= 0x0000BB88]
[01:33:35.746]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:33:35.746]        // -> [manuf <= 0x00000017]
[01:33:35.746]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:33:35.746]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:33:35.747]      isProduction = (version > 0);
[01:33:35.747]        // -> [isProduction <= 0x00000001]
[01:33:35.747]    </block>
[01:33:35.747]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:33:35.747]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:33:35.747]        // =>  FALSE
[01:33:35.747]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:33:35.747]    </control>
[01:33:35.747]    <control if="continueId == 4" while="" timeout="0" info="">
[01:33:35.747]      // if-block "continueId == 4"
[01:33:35.747]        // =>  FALSE
[01:33:35.747]      // skip if-block "continueId == 4"
[01:33:35.748]    </control>
[01:33:35.748]    <control if="!isProduction" while="" timeout="0" info="">
[01:33:35.748]      // if-block "!isProduction"
[01:33:35.748]        // =>  FALSE
[01:33:35.748]      // skip if-block "!isProduction"
[01:33:35.748]    </control>
[01:33:35.748]  </sequence>
[01:33:35.748]  
[01:34:52.619]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:34:52.619]  
[01:34:52.627]  <debugvars>
[01:34:52.627]    // Pre-defined
[01:34:52.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:52.627]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:52.628]    __dp=0x00000000
[01:34:52.628]    __ap=0x00000000
[01:34:52.628]    __traceout=0x00000000      (Trace Disabled)
[01:34:52.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:52.628]    __FlashAddr=0x00000000
[01:34:52.628]    __FlashLen=0x00000000
[01:34:52.628]    __FlashArg=0x00000000
[01:34:52.628]    __FlashOp=0x00000000
[01:34:52.628]    __Result=0x00000000
[01:34:52.628]  </debugvars>
[01:34:52.628]  
[01:34:52.629]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:34:52.629]    <block atomic="false" info="">
[01:34:52.629]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:34:52.629]        // -> [isSWJ <= 0x00000001]
[01:34:52.629]      __var hasDormant = __protocol & 0x00020000;
[01:34:52.629]        // -> [hasDormant <= 0x00000000]
[01:34:52.629]      __var protType   = __protocol & 0x0000FFFF;
[01:34:52.629]        // -> [protType <= 0x00000002]
[01:34:52.629]    </block>
[01:34:52.629]    <control if="protType == 1" while="" timeout="0" info="">
[01:34:52.629]      // if-block "protType == 1"
[01:34:52.629]        // =>  FALSE
[01:34:52.629]      // skip if-block "protType == 1"
[01:34:52.629]    </control>
[01:34:52.629]    <control if="protType == 2" while="" timeout="0" info="">
[01:34:52.629]      // if-block "protType == 2"
[01:34:52.629]        // =>  TRUE
[01:34:52.630]      <control if="isSWJ" while="" timeout="0" info="">
[01:34:52.630]        // if-block "isSWJ"
[01:34:52.630]          // =>  TRUE
[01:34:52.630]        <control if="hasDormant" while="" timeout="0" info="">
[01:34:52.630]          // if-block "hasDormant"
[01:34:52.630]            // =>  FALSE
[01:34:52.630]          // skip if-block "hasDormant"
[01:34:52.630]        </control>
[01:34:52.630]        <control if="!hasDormant" while="" timeout="0" info="">
[01:34:52.630]          // if-block "!hasDormant"
[01:34:52.630]            // =>  TRUE
[01:34:52.630]          <block atomic="false" info="">
[01:34:52.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:34:52.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:52.632]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:34:52.632]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:34:52.632]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:34:52.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:52.632]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:34:52.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:34:52.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:34:52.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:52.633]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:34:52.634]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:34:52.634]          </block>
[01:34:52.634]          // end if-block "!hasDormant"
[01:34:52.634]        </control>
[01:34:52.634]        // end if-block "isSWJ"
[01:34:52.634]      </control>
[01:34:52.634]      <control if="!isSWJ" while="" timeout="0" info="">
[01:34:52.636]        // if-block "!isSWJ"
[01:34:52.636]          // =>  FALSE
[01:34:52.636]        // skip if-block "!isSWJ"
[01:34:52.636]      </control>
[01:34:52.636]      <block atomic="false" info="">
[01:34:52.636]        ReadDP(0x0);
[01:34:52.636]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:34:52.636]      </block>
[01:34:52.637]      // end if-block "protType == 2"
[01:34:52.637]    </control>
[01:34:52.637]  </sequence>
[01:34:52.637]  
[01:34:52.637]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:34:52.637]  
[01:34:52.638]  <debugvars>
[01:34:52.638]    // Pre-defined
[01:34:52.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:52.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:52.638]    __dp=0x00000000
[01:34:52.638]    __ap=0x00000000
[01:34:52.638]    __traceout=0x00000000      (Trace Disabled)
[01:34:52.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:52.638]    __FlashAddr=0x00000000
[01:34:52.638]    __FlashLen=0x00000000
[01:34:52.638]    __FlashArg=0x00000000
[01:34:52.639]    __FlashOp=0x00000000
[01:34:52.639]    __Result=0x00000000
[01:34:52.639]  </debugvars>
[01:34:52.639]  
[01:34:52.639]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:34:52.639]    <block atomic="false" info="">
[01:34:52.639]      __var SW_DP_ABORT       = 0x0;
[01:34:52.639]        // -> [SW_DP_ABORT <= 0x00000000]
[01:34:52.639]      __var DP_CTRL_STAT      = 0x4;
[01:34:52.639]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:34:52.639]      __var DP_SELECT         = 0x8;
[01:34:52.640]        // -> [DP_SELECT <= 0x00000008]
[01:34:52.640]      __var powered_down      = 0;
[01:34:52.640]        // -> [powered_down <= 0x00000000]
[01:34:52.640]      WriteDP(DP_SELECT, 0x00000000);
[01:34:52.640]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:34:52.640]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:34:52.640]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:34:52.640]        // -> [powered_down <= 0x00000001]
[01:34:52.642]    </block>
[01:34:52.642]    <control if="powered_down" while="" timeout="0" info="">
[01:34:52.642]      // if-block "powered_down"
[01:34:52.642]        // =>  TRUE
[01:34:52.642]      <block atomic="false" info="">
[01:34:52.642]        Message(0, "Debug/System power-up request sent");
[01:34:52.644]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:34:52.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:34:52.645]      </block>
[01:34:52.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:34:52.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:34:52.645]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:34:52.645]        // while-condition  =>  FALSE
[01:34:52.645]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:34:52.646]      </control>
[01:34:52.646]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:34:52.646]        // if-block "(__protocol & 0xFFFF) == 1"
[01:34:52.646]          // =>  FALSE
[01:34:52.646]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:34:52.646]      </control>
[01:34:52.646]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:34:52.646]        // if-block "(__protocol & 0xFFFF) == 2"
[01:34:52.646]          // =>  TRUE
[01:34:52.646]        <block atomic="false" info="">
[01:34:52.646]          Message(0, "executing SWD power up");
[01:34:52.647]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:34:52.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:34:52.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:34:52.649]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:34:52.649]        </block>
[01:34:52.649]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:34:52.649]      </control>
[01:34:52.649]      // end if-block "powered_down"
[01:34:52.649]    </control>
[01:34:52.649]    <block atomic="false" info="">
[01:34:52.649]      __var DEBUG_PORT_VAL    = 0;
[01:34:52.649]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:34:52.651]      __var ACCESS_POINT_VAL  = 0;
[01:34:52.651]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:34:52.651]      __ap = 1; 
[01:34:52.651]        // -> [__ap <= 0x00000001]
[01:34:52.651]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:34:52.652]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:34:52.652]      __ap = 4;
[01:34:52.652]        // -> [__ap <= 0x00000004]
[01:34:52.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:52.653]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:34:52.654]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:34:52.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:52.655]    </block>
[01:34:52.655]    <block atomic="false" info="">
[01:34:52.655]      __var nReset = 0x80;
[01:34:52.655]        // -> [nReset <= 0x00000080]
[01:34:52.655]      __var canReadPins = 0;
[01:34:52.656]        // -> [canReadPins <= 0x00000000]
[01:34:52.656]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:34:52.656]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:34:52.656]        // -> [canReadPins <= 0x00000001]
[01:34:52.656]    </block>
[01:34:52.656]    <control if="" while="1" timeout="200" info="">
[01:34:52.656]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.657]      // while "1"  (timeout="200")
[01:34:52.657]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.658]      // while "1"  (timeout="200")
[01:34:52.658]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.659]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.659]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.659]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.659]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.659]      // while-condition  =>  TRUE
[01:34:52.659]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.660]      // while "1"  (timeout="200")
[01:34:52.660]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.662]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.662]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.662]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.662]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.662]      // while-condition  =>  TRUE
[01:34:52.662]      // while "1"  (timeout="200")
[01:34:52.663]      // while-condition  =>  TRUE
[01:34:52.663]      // while "1"  (timeout="200")
[01:34:52.663]      // while  =>  TIMEOUT
[01:34:52.663]      // end while "1"
[01:34:52.663]    </control>
[01:34:52.663]    <control if="canReadPins" while="" timeout="0" info="">
[01:34:52.663]      // if-block "canReadPins"
[01:34:52.663]        // =>  TRUE
[01:34:52.663]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:34:52.664]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:34:52.664]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:34:52.664]        // while-condition  =>  FALSE
[01:34:52.664]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:34:52.664]      </control>
[01:34:52.664]      // end if-block "canReadPins"
[01:34:52.664]    </control>
[01:34:52.664]    <control if="!canReadPins" while="" timeout="0" info="">
[01:34:52.665]      // if-block "!canReadPins"
[01:34:52.665]        // =>  FALSE
[01:34:52.665]      // skip if-block "!canReadPins"
[01:34:52.665]    </control>
[01:34:52.665]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:34:52.665]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:52.665]        // =>  TRUE
[01:34:52.666]      <block atomic="false" info="">
[01:34:52.666]        WriteAP(0x00, 0x190008);
[01:34:52.666]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:52.666]        WriteAP(0xF0, 0x01);
[01:34:52.667]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:52.667]      </block>
[01:34:52.668]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:52.668]    </control>
[01:34:52.668]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:34:52.668]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:52.668]        // =>  FALSE
[01:34:52.668]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:52.668]    </control>
[01:34:52.668]    <block atomic="false" info="">
[01:34:52.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:52.669]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:34:52.669]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:34:52.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:52.672]      __ap = 0; //lets make sure we reset the access point selection
[01:34:52.672]        // -> [__ap <= 0x00000000]
[01:34:52.672]    </block>
[01:34:52.672]  </sequence>
[01:34:52.672]  
[01:34:52.678]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:34:52.678]  
[01:34:52.678]  <debugvars>
[01:34:52.678]    // Pre-defined
[01:34:52.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:52.679]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:52.679]    __dp=0x00000000
[01:34:52.679]    __ap=0x00000000
[01:34:52.679]    __traceout=0x00000000      (Trace Disabled)
[01:34:52.679]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:52.679]    __FlashAddr=0x00000000
[01:34:52.679]    __FlashLen=0x00000000
[01:34:52.680]    __FlashArg=0x00000000
[01:34:52.680]    __FlashOp=0x00000000
[01:34:52.680]    __Result=0x00000000
[01:34:52.680]  </debugvars>
[01:34:52.680]  
[01:34:52.680]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:34:52.680]    <block atomic="false" info="">
[01:34:52.680]      __var deviceID = 0;
[01:34:52.681]        // -> [deviceID <= 0x00000000]
[01:34:52.681]      __var version = 0;
[01:34:52.681]        // -> [version <= 0x00000000]
[01:34:52.681]      __var partNum = 0;
[01:34:52.681]        // -> [partNum <= 0x00000000]
[01:34:52.681]      __var manuf = 0;
[01:34:52.681]        // -> [manuf <= 0x00000000]
[01:34:52.681]      __var isMSPM0G1X0X_G3X0X = 0;
[01:34:52.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:34:52.682]      __var isProduction = 0;
[01:34:52.682]        // -> [isProduction <= 0x00000000]
[01:34:52.682]      __var continueId = 0;
[01:34:52.682]        // -> [continueId <= 0x00000000]
[01:34:52.682]      deviceID =   Read32(0x41C40004);
[01:34:52.684]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:34:52.684]        // -> [deviceID <= 0x2BB8802F]
[01:34:52.684]      version = deviceID >> 28;
[01:34:52.684]        // -> [version <= 0x00000002]
[01:34:52.684]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:34:52.684]        // -> [partNum <= 0x0000BB88]
[01:34:52.684]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:34:52.684]        // -> [manuf <= 0x00000017]
[01:34:52.684]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:34:52.684]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:34:52.684]      isProduction = (version > 0);
[01:34:52.684]        // -> [isProduction <= 0x00000001]
[01:34:52.686]    </block>
[01:34:52.686]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:34:52.686]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:34:52.686]        // =>  FALSE
[01:34:52.686]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:34:52.686]    </control>
[01:34:52.686]    <control if="continueId == 4" while="" timeout="0" info="">
[01:34:52.686]      // if-block "continueId == 4"
[01:34:52.686]        // =>  FALSE
[01:34:52.686]      // skip if-block "continueId == 4"
[01:34:52.687]    </control>
[01:34:52.687]    <control if="!isProduction" while="" timeout="0" info="">
[01:34:52.687]      // if-block "!isProduction"
[01:34:52.687]        // =>  FALSE
[01:34:52.687]      // skip if-block "!isProduction"
[01:34:52.687]    </control>
[01:34:52.687]  </sequence>
[01:34:52.687]  
[01:34:56.272]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:34:56.272]  
[01:34:56.273]  <debugvars>
[01:34:56.273]    // Pre-defined
[01:34:56.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:56.273]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:34:56.273]    __dp=0x00000000
[01:34:56.273]    __ap=0x00000000
[01:34:56.273]    __traceout=0x00000000      (Trace Disabled)
[01:34:56.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:56.273]    __FlashAddr=0x00000000
[01:34:56.273]    __FlashLen=0x00000000
[01:34:56.273]    __FlashArg=0x00000000
[01:34:56.273]    __FlashOp=0x00000000
[01:34:56.273]    __Result=0x00000000
[01:34:56.273]  </debugvars>
[01:34:56.274]  
[01:34:56.274]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:34:56.274]    <block atomic="false" info="">
[01:34:56.274]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:34:56.274]        // -> [isSWJ <= 0x00000001]
[01:34:56.274]      __var hasDormant = __protocol & 0x00020000;
[01:34:56.274]        // -> [hasDormant <= 0x00000000]
[01:34:56.274]      __var protType   = __protocol & 0x0000FFFF;
[01:34:56.274]        // -> [protType <= 0x00000002]
[01:34:56.274]    </block>
[01:34:56.276]    <control if="protType == 1" while="" timeout="0" info="">
[01:34:56.276]      // if-block "protType == 1"
[01:34:56.276]        // =>  FALSE
[01:34:56.276]      // skip if-block "protType == 1"
[01:34:56.276]    </control>
[01:34:56.276]    <control if="protType == 2" while="" timeout="0" info="">
[01:34:56.276]      // if-block "protType == 2"
[01:34:56.276]        // =>  TRUE
[01:34:56.276]      <control if="isSWJ" while="" timeout="0" info="">
[01:34:56.276]        // if-block "isSWJ"
[01:34:56.276]          // =>  TRUE
[01:34:56.276]        <control if="hasDormant" while="" timeout="0" info="">
[01:34:56.276]          // if-block "hasDormant"
[01:34:56.277]            // =>  FALSE
[01:34:56.277]          // skip if-block "hasDormant"
[01:34:56.277]        </control>
[01:34:56.277]        <control if="!hasDormant" while="" timeout="0" info="">
[01:34:56.277]          // if-block "!hasDormant"
[01:34:56.277]            // =>  TRUE
[01:34:56.277]          <block atomic="false" info="">
[01:34:56.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:34:56.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:56.277]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:34:56.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:34:56.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:34:56.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:56.278]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:34:56.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:34:56.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:34:56.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:56.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:34:56.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:34:56.280]          </block>
[01:34:56.280]          // end if-block "!hasDormant"
[01:34:56.280]        </control>
[01:34:56.280]        // end if-block "isSWJ"
[01:34:56.280]      </control>
[01:34:56.280]      <control if="!isSWJ" while="" timeout="0" info="">
[01:34:56.280]        // if-block "!isSWJ"
[01:34:56.281]          // =>  FALSE
[01:34:56.281]        // skip if-block "!isSWJ"
[01:34:56.281]      </control>
[01:34:56.281]      <block atomic="false" info="">
[01:34:56.281]        ReadDP(0x0);
[01:34:56.281]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:34:56.281]      </block>
[01:34:56.281]      // end if-block "protType == 2"
[01:34:56.283]    </control>
[01:34:56.283]  </sequence>
[01:34:56.283]  
[01:34:56.283]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:34:56.283]  
[01:34:56.283]  <debugvars>
[01:34:56.283]    // Pre-defined
[01:34:56.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:56.283]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:34:56.283]    __dp=0x00000000
[01:34:56.283]    __ap=0x00000000
[01:34:56.283]    __traceout=0x00000000      (Trace Disabled)
[01:34:56.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:56.284]    __FlashAddr=0x00000000
[01:34:56.284]    __FlashLen=0x00000000
[01:34:56.284]    __FlashArg=0x00000000
[01:34:56.284]    __FlashOp=0x00000000
[01:34:56.284]    __Result=0x00000000
[01:34:56.284]  </debugvars>
[01:34:56.284]  
[01:34:56.284]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:34:56.284]    <block atomic="false" info="">
[01:34:56.284]      __var SW_DP_ABORT       = 0x0;
[01:34:56.285]        // -> [SW_DP_ABORT <= 0x00000000]
[01:34:56.285]      __var DP_CTRL_STAT      = 0x4;
[01:34:56.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:34:56.285]      __var DP_SELECT         = 0x8;
[01:34:56.285]        // -> [DP_SELECT <= 0x00000008]
[01:34:56.285]      __var powered_down      = 0;
[01:34:56.285]        // -> [powered_down <= 0x00000000]
[01:34:56.285]      WriteDP(DP_SELECT, 0x00000000);
[01:34:56.286]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:34:56.286]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:34:56.286]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:34:56.287]        // -> [powered_down <= 0x00000001]
[01:34:56.287]    </block>
[01:34:56.287]    <control if="powered_down" while="" timeout="0" info="">
[01:34:56.287]      // if-block "powered_down"
[01:34:56.287]        // =>  TRUE
[01:34:56.287]      <block atomic="false" info="">
[01:34:56.287]        Message(0, "Debug/System power-up request sent");
[01:34:56.290]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:34:56.291]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:34:56.291]      </block>
[01:34:56.291]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:34:56.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:34:56.292]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:34:56.292]        // while-condition  =>  FALSE
[01:34:56.292]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:34:56.292]      </control>
[01:34:56.292]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:34:56.292]        // if-block "(__protocol & 0xFFFF) == 1"
[01:34:56.292]          // =>  FALSE
[01:34:56.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:34:56.293]      </control>
[01:34:56.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:34:56.293]        // if-block "(__protocol & 0xFFFF) == 2"
[01:34:56.293]          // =>  TRUE
[01:34:56.293]        <block atomic="false" info="">
[01:34:56.293]          Message(0, "executing SWD power up");
[01:34:56.294]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:34:56.295]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:34:56.295]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:34:56.295]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:34:56.296]        </block>
[01:34:56.296]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:34:56.296]      </control>
[01:34:56.296]      // end if-block "powered_down"
[01:34:56.296]    </control>
[01:34:56.296]    <block atomic="false" info="">
[01:34:56.296]      __var DEBUG_PORT_VAL    = 0;
[01:34:56.297]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:34:56.297]      __var ACCESS_POINT_VAL  = 0;
[01:34:56.297]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:34:56.297]      __ap = 1; 
[01:34:56.297]        // -> [__ap <= 0x00000001]
[01:34:56.297]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:34:56.298]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:34:56.298]      __ap = 4;
[01:34:56.298]        // -> [__ap <= 0x00000004]
[01:34:56.298]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:56.299]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:34:56.299]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:34:56.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:56.301]    </block>
[01:34:56.301]    <block atomic="false" info="">
[01:34:56.301]      __var nReset = 0x80;
[01:34:56.301]        // -> [nReset <= 0x00000080]
[01:34:56.302]      __var canReadPins = 0;
[01:34:56.302]        // -> [canReadPins <= 0x00000000]
[01:34:56.302]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:34:56.302]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:34:56.303]        // -> [canReadPins <= 0x00000001]
[01:34:56.303]    </block>
[01:34:56.303]    <control if="" while="1" timeout="200" info="">
[01:34:56.303]      // while "1"  (timeout="200")
[01:34:56.303]      // while-condition  =>  TRUE
[01:34:56.303]      // while "1"  (timeout="200")
[01:34:56.303]      // while-condition  =>  TRUE
[01:34:56.303]      // while "1"  (timeout="200")
[01:34:56.303]      // while-condition  =>  TRUE
[01:34:56.303]      // while "1"  (timeout="200")
[01:34:56.305]      // while-condition  =>  TRUE
[01:34:56.305]      // while "1"  (timeout="200")
[01:34:56.305]      // while-condition  =>  TRUE
[01:34:56.305]      // while "1"  (timeout="200")
[01:34:56.305]      // while-condition  =>  TRUE
[01:34:56.305]      // while "1"  (timeout="200")
[01:34:56.305]      // while-condition  =>  TRUE
[01:34:56.305]      // while "1"  (timeout="200")
[01:34:56.306]      // while-condition  =>  TRUE
[01:34:56.306]      // while "1"  (timeout="200")
[01:34:56.306]      // while-condition  =>  TRUE
[01:34:56.306]      // while "1"  (timeout="200")
[01:34:56.306]      // while-condition  =>  TRUE
[01:34:56.306]      // while "1"  (timeout="200")
[01:34:56.306]      // while-condition  =>  TRUE
[01:34:56.306]      // while "1"  (timeout="200")
[01:34:56.306]      // while-condition  =>  TRUE
[01:34:56.307]      // while "1"  (timeout="200")
[01:34:56.307]      // while-condition  =>  TRUE
[01:34:56.307]      // while "1"  (timeout="200")
[01:34:56.307]      // while-condition  =>  TRUE
[01:34:56.307]      // while "1"  (timeout="200")
[01:34:56.307]      // while-condition  =>  TRUE
[01:34:56.307]      // while "1"  (timeout="200")
[01:34:56.307]      // while-condition  =>  TRUE
[01:34:56.307]      // while "1"  (timeout="200")
[01:34:56.307]      // while-condition  =>  TRUE
[01:34:56.308]      // while "1"  (timeout="200")
[01:34:56.308]      // while-condition  =>  TRUE
[01:34:56.308]      // while "1"  (timeout="200")
[01:34:56.308]      // while-condition  =>  TRUE
[01:34:56.308]      // while "1"  (timeout="200")
[01:34:56.308]      // while-condition  =>  TRUE
[01:34:56.308]      // while "1"  (timeout="200")
[01:34:56.308]      // while-condition  =>  TRUE
[01:34:56.308]      // while "1"  (timeout="200")
[01:34:56.308]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.309]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.309]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.309]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.309]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.309]      // while-condition  =>  TRUE
[01:34:56.309]      // while "1"  (timeout="200")
[01:34:56.310]      // while-condition  =>  TRUE
[01:34:56.310]      // while "1"  (timeout="200")
[01:34:56.310]      // while-condition  =>  TRUE
[01:34:56.310]      // while "1"  (timeout="200")
[01:34:56.310]      // while-condition  =>  TRUE
[01:34:56.310]      // while "1"  (timeout="200")
[01:34:56.310]      // while-condition  =>  TRUE
[01:34:56.310]      // while "1"  (timeout="200")
[01:34:56.310]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.311]      // while "1"  (timeout="200")
[01:34:56.311]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.312]      // while "1"  (timeout="200")
[01:34:56.312]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.313]      // while "1"  (timeout="200")
[01:34:56.313]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.315]      // while-condition  =>  TRUE
[01:34:56.315]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.316]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.316]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.316]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.316]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.316]      // while "1"  (timeout="200")
[01:34:56.316]      // while-condition  =>  TRUE
[01:34:56.317]      // while "1"  (timeout="200")
[01:34:56.317]      // while-condition  =>  TRUE
[01:34:56.317]      // while "1"  (timeout="200")
[01:34:56.317]      // while-condition  =>  TRUE
[01:34:56.317]      // while "1"  (timeout="200")
[01:34:56.317]      // while-condition  =>  TRUE
[01:34:56.317]      // while "1"  (timeout="200")
[01:34:56.317]      // while-condition  =>  TRUE
[01:34:56.317]      // while "1"  (timeout="200")
[01:34:56.317]      // while-condition  =>  TRUE
[01:34:56.318]      // while "1"  (timeout="200")
[01:34:56.318]      // while-condition  =>  TRUE
[01:34:56.318]      // while "1"  (timeout="200")
[01:34:56.318]      // while-condition  =>  TRUE
[01:34:56.318]      // while "1"  (timeout="200")
[01:34:56.318]      // while-condition  =>  TRUE
[01:34:56.318]      // while "1"  (timeout="200")
[01:34:56.318]      // while-condition  =>  TRUE
[01:34:56.319]      // while "1"  (timeout="200")
[01:34:56.319]      // while  =>  TIMEOUT
[01:34:56.319]      // end while "1"
[01:34:56.319]    </control>
[01:34:56.319]    <control if="canReadPins" while="" timeout="0" info="">
[01:34:56.319]      // if-block "canReadPins"
[01:34:56.319]        // =>  TRUE
[01:34:56.319]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:34:56.319]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:34:56.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:34:56.320]        // while-condition  =>  FALSE
[01:34:56.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:34:56.320]      </control>
[01:34:56.320]      // end if-block "canReadPins"
[01:34:56.320]    </control>
[01:34:56.320]    <control if="!canReadPins" while="" timeout="0" info="">
[01:34:56.320]      // if-block "!canReadPins"
[01:34:56.320]        // =>  FALSE
[01:34:56.320]      // skip if-block "!canReadPins"
[01:34:56.320]    </control>
[01:34:56.320]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:34:56.320]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:56.322]        // =>  TRUE
[01:34:56.322]      <block atomic="false" info="">
[01:34:56.322]        WriteAP(0x00, 0x190008);
[01:34:56.322]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:56.323]        WriteAP(0xF0, 0x01);
[01:34:56.323]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:56.323]      </block>
[01:34:56.323]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:56.323]    </control>
[01:34:56.323]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:34:56.323]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:56.323]        // =>  FALSE
[01:34:56.323]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:56.323]    </control>
[01:34:56.324]    <block atomic="false" info="">
[01:34:56.324]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:56.324]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:34:56.326]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:34:56.326]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:56.327]      __ap = 0; //lets make sure we reset the access point selection
[01:34:56.327]        // -> [__ap <= 0x00000000]
[01:34:56.327]    </block>
[01:34:56.327]  </sequence>
[01:34:56.327]  
[01:34:56.334]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:34:56.334]  
[01:34:56.334]  <debugvars>
[01:34:56.334]    // Pre-defined
[01:34:56.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:56.334]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:34:56.334]    __dp=0x00000000
[01:34:56.334]    __ap=0x00000000
[01:34:56.334]    __traceout=0x00000000      (Trace Disabled)
[01:34:56.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:56.334]    __FlashAddr=0x00000000
[01:34:56.334]    __FlashLen=0x00000000
[01:34:56.334]    __FlashArg=0x00000000
[01:34:56.335]    __FlashOp=0x00000000
[01:34:56.335]    __Result=0x00000000
[01:34:56.335]  </debugvars>
[01:34:56.335]  
[01:34:56.335]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:34:56.335]    <block atomic="false" info="">
[01:34:56.335]      __var deviceID = 0;
[01:34:56.335]        // -> [deviceID <= 0x00000000]
[01:34:56.335]      __var version = 0;
[01:34:56.335]        // -> [version <= 0x00000000]
[01:34:56.335]      __var partNum = 0;
[01:34:56.336]        // -> [partNum <= 0x00000000]
[01:34:56.336]      __var manuf = 0;
[01:34:56.336]        // -> [manuf <= 0x00000000]
[01:34:56.336]      __var isMSPM0G1X0X_G3X0X = 0;
[01:34:56.336]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:34:56.336]      __var isProduction = 0;
[01:34:56.336]        // -> [isProduction <= 0x00000000]
[01:34:56.336]      __var continueId = 0;
[01:34:56.336]        // -> [continueId <= 0x00000000]
[01:34:56.336]      deviceID =   Read32(0x41C40004);
[01:34:56.338]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:34:56.338]        // -> [deviceID <= 0x2BB8802F]
[01:34:56.338]      version = deviceID >> 28;
[01:34:56.338]        // -> [version <= 0x00000002]
[01:34:56.338]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:34:56.338]        // -> [partNum <= 0x0000BB88]
[01:34:56.339]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:34:56.339]        // -> [manuf <= 0x00000017]
[01:34:56.339]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:34:56.339]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:34:56.339]      isProduction = (version > 0);
[01:34:56.339]        // -> [isProduction <= 0x00000001]
[01:34:56.339]    </block>
[01:34:56.339]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:34:56.339]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:34:56.339]        // =>  FALSE
[01:34:56.340]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:34:56.340]    </control>
[01:34:56.340]    <control if="continueId == 4" while="" timeout="0" info="">
[01:34:56.340]      // if-block "continueId == 4"
[01:34:56.340]        // =>  FALSE
[01:34:56.340]      // skip if-block "continueId == 4"
[01:34:56.340]    </control>
[01:34:56.340]    <control if="!isProduction" while="" timeout="0" info="">
[01:34:56.340]      // if-block "!isProduction"
[01:34:56.341]        // =>  FALSE
[01:34:56.341]      // skip if-block "!isProduction"
[01:34:56.341]    </control>
[01:34:56.341]  </sequence>
[01:34:56.341]  
[01:37:06.491]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:37:06.491]  
[01:37:06.500]  <debugvars>
[01:37:06.500]    // Pre-defined
[01:37:06.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:06.500]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:37:06.500]    __dp=0x00000000
[01:37:06.500]    __ap=0x00000000
[01:37:06.500]    __traceout=0x00000000      (Trace Disabled)
[01:37:06.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:06.500]    __FlashAddr=0x00000000
[01:37:06.500]    __FlashLen=0x00000000
[01:37:06.500]    __FlashArg=0x00000000
[01:37:06.500]    __FlashOp=0x00000000
[01:37:06.501]    __Result=0x00000000
[01:37:06.501]  </debugvars>
[01:37:06.501]  
[01:37:06.501]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:37:06.501]    <block atomic="false" info="">
[01:37:06.501]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:37:06.501]        // -> [isSWJ <= 0x00000001]
[01:37:06.501]      __var hasDormant = __protocol & 0x00020000;
[01:37:06.501]        // -> [hasDormant <= 0x00000000]
[01:37:06.501]      __var protType   = __protocol & 0x0000FFFF;
[01:37:06.501]        // -> [protType <= 0x00000002]
[01:37:06.501]    </block>
[01:37:06.501]    <control if="protType == 1" while="" timeout="0" info="">
[01:37:06.501]      // if-block "protType == 1"
[01:37:06.501]        // =>  FALSE
[01:37:06.503]      // skip if-block "protType == 1"
[01:37:06.503]    </control>
[01:37:06.503]    <control if="protType == 2" while="" timeout="0" info="">
[01:37:06.503]      // if-block "protType == 2"
[01:37:06.503]        // =>  TRUE
[01:37:06.503]      <control if="isSWJ" while="" timeout="0" info="">
[01:37:06.504]        // if-block "isSWJ"
[01:37:06.504]          // =>  TRUE
[01:37:06.504]        <control if="hasDormant" while="" timeout="0" info="">
[01:37:06.504]          // if-block "hasDormant"
[01:37:06.504]            // =>  FALSE
[01:37:06.504]          // skip if-block "hasDormant"
[01:37:06.504]        </control>
[01:37:06.505]        <control if="!hasDormant" while="" timeout="0" info="">
[01:37:06.505]          // if-block "!hasDormant"
[01:37:06.505]            // =>  TRUE
[01:37:06.505]          <block atomic="false" info="">
[01:37:06.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:37:06.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:06.506]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:37:06.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:37:06.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:37:06.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:06.507]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:37:06.507]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:37:06.507]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:37:06.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:06.508]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:37:06.508]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:37:06.508]          </block>
[01:37:06.508]          // end if-block "!hasDormant"
[01:37:06.508]        </control>
[01:37:06.508]        // end if-block "isSWJ"
[01:37:06.508]      </control>
[01:37:06.508]      <control if="!isSWJ" while="" timeout="0" info="">
[01:37:06.508]        // if-block "!isSWJ"
[01:37:06.509]          // =>  FALSE
[01:37:06.509]        // skip if-block "!isSWJ"
[01:37:06.509]      </control>
[01:37:06.509]      <block atomic="false" info="">
[01:37:06.509]        ReadDP(0x0);
[01:37:06.510]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:37:06.510]      </block>
[01:37:06.510]      // end if-block "protType == 2"
[01:37:06.510]    </control>
[01:37:06.510]  </sequence>
[01:37:06.510]  
[01:37:06.511]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:37:06.511]  
[01:37:06.511]  <debugvars>
[01:37:06.511]    // Pre-defined
[01:37:06.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:06.511]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:37:06.511]    __dp=0x00000000
[01:37:06.511]    __ap=0x00000000
[01:37:06.511]    __traceout=0x00000000      (Trace Disabled)
[01:37:06.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:06.511]    __FlashAddr=0x00000000
[01:37:06.511]    __FlashLen=0x00000000
[01:37:06.511]    __FlashArg=0x00000000
[01:37:06.511]    __FlashOp=0x00000000
[01:37:06.511]    __Result=0x00000000
[01:37:06.512]  </debugvars>
[01:37:06.512]  
[01:37:06.512]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:37:06.512]    <block atomic="false" info="">
[01:37:06.512]      __var SW_DP_ABORT       = 0x0;
[01:37:06.512]        // -> [SW_DP_ABORT <= 0x00000000]
[01:37:06.512]      __var DP_CTRL_STAT      = 0x4;
[01:37:06.512]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:37:06.512]      __var DP_SELECT         = 0x8;
[01:37:06.512]        // -> [DP_SELECT <= 0x00000008]
[01:37:06.512]      __var powered_down      = 0;
[01:37:06.512]        // -> [powered_down <= 0x00000000]
[01:37:06.512]      WriteDP(DP_SELECT, 0x00000000);
[01:37:06.514]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:37:06.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:37:06.515]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:37:06.515]        // -> [powered_down <= 0x00000001]
[01:37:06.515]    </block>
[01:37:06.515]    <control if="powered_down" while="" timeout="0" info="">
[01:37:06.515]      // if-block "powered_down"
[01:37:06.515]        // =>  TRUE
[01:37:06.516]      <block atomic="false" info="">
[01:37:06.516]        Message(0, "Debug/System power-up request sent");
[01:37:06.517]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:37:06.518]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:37:06.518]      </block>
[01:37:06.518]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:37:06.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:37:06.519]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:37:06.519]        // while-condition  =>  FALSE
[01:37:06.519]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:37:06.519]      </control>
[01:37:06.519]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:37:06.519]        // if-block "(__protocol & 0xFFFF) == 1"
[01:37:06.519]          // =>  FALSE
[01:37:06.519]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:37:06.520]      </control>
[01:37:06.520]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:37:06.520]        // if-block "(__protocol & 0xFFFF) == 2"
[01:37:06.520]          // =>  TRUE
[01:37:06.520]        <block atomic="false" info="">
[01:37:06.520]          Message(0, "executing SWD power up");
[01:37:06.522]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:37:06.522]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:37:06.522]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:37:06.522]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:37:06.523]        </block>
[01:37:06.523]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:37:06.523]      </control>
[01:37:06.523]      // end if-block "powered_down"
[01:37:06.523]    </control>
[01:37:06.523]    <block atomic="false" info="">
[01:37:06.523]      __var DEBUG_PORT_VAL    = 0;
[01:37:06.523]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:37:06.523]      __var ACCESS_POINT_VAL  = 0;
[01:37:06.525]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:37:06.525]      __ap = 1; 
[01:37:06.525]        // -> [__ap <= 0x00000001]
[01:37:06.525]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:37:06.526]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:37:06.526]      __ap = 4;
[01:37:06.526]        // -> [__ap <= 0x00000004]
[01:37:06.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:06.528]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:37:06.528]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:37:06.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:06.529]    </block>
[01:37:06.529]    <block atomic="false" info="">
[01:37:06.530]      __var nReset = 0x80;
[01:37:06.530]        // -> [nReset <= 0x00000080]
[01:37:06.530]      __var canReadPins = 0;
[01:37:06.530]        // -> [canReadPins <= 0x00000000]
[01:37:06.530]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:37:06.530]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:37:06.530]        // -> [canReadPins <= 0x00000001]
[01:37:06.531]    </block>
[01:37:06.531]    <control if="" while="1" timeout="200" info="">
[01:37:06.531]      // while "1"  (timeout="200")
[01:37:06.531]      // while-condition  =>  TRUE
[01:37:06.531]      // while "1"  (timeout="200")
[01:37:06.531]      // while-condition  =>  TRUE
[01:37:06.531]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.532]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.532]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.532]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.532]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.532]      // while "1"  (timeout="200")
[01:37:06.532]      // while-condition  =>  TRUE
[01:37:06.533]      // while "1"  (timeout="200")
[01:37:06.533]      // while-condition  =>  TRUE
[01:37:06.533]      // while "1"  (timeout="200")
[01:37:06.533]      // while-condition  =>  TRUE
[01:37:06.533]      // while "1"  (timeout="200")
[01:37:06.533]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.534]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.534]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.534]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.534]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.534]      // while-condition  =>  TRUE
[01:37:06.534]      // while "1"  (timeout="200")
[01:37:06.535]      // while-condition  =>  TRUE
[01:37:06.535]      // while "1"  (timeout="200")
[01:37:06.535]      // while-condition  =>  TRUE
[01:37:06.535]      // while "1"  (timeout="200")
[01:37:06.535]      // while-condition  =>  TRUE
[01:37:06.535]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.536]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.536]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.536]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.536]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.536]      // while "1"  (timeout="200")
[01:37:06.536]      // while-condition  =>  TRUE
[01:37:06.537]      // while "1"  (timeout="200")
[01:37:06.537]      // while  =>  TIMEOUT
[01:37:06.537]      // end while "1"
[01:37:06.537]    </control>
[01:37:06.537]    <control if="canReadPins" while="" timeout="0" info="">
[01:37:06.537]      // if-block "canReadPins"
[01:37:06.537]        // =>  TRUE
[01:37:06.537]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:37:06.537]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:37:06.538]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:37:06.538]        // while-condition  =>  FALSE
[01:37:06.538]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:37:06.538]      </control>
[01:37:06.538]      // end if-block "canReadPins"
[01:37:06.538]    </control>
[01:37:06.538]    <control if="!canReadPins" while="" timeout="0" info="">
[01:37:06.538]      // if-block "!canReadPins"
[01:37:06.538]        // =>  FALSE
[01:37:06.538]      // skip if-block "!canReadPins"
[01:37:06.539]    </control>
[01:37:06.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:37:06.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:06.539]        // =>  TRUE
[01:37:06.539]      <block atomic="false" info="">
[01:37:06.539]        WriteAP(0x00, 0x190008);
[01:37:06.540]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:06.540]        WriteAP(0xF0, 0x01);
[01:37:06.541]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:06.541]      </block>
[01:37:06.542]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:06.542]    </control>
[01:37:06.542]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:37:06.542]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:06.542]        // =>  FALSE
[01:37:06.542]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:06.542]    </control>
[01:37:06.542]    <block atomic="false" info="">
[01:37:06.542]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:06.543]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:37:06.543]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:37:06.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:06.545]      __ap = 0; //lets make sure we reset the access point selection
[01:37:06.545]        // -> [__ap <= 0x00000000]
[01:37:06.545]    </block>
[01:37:06.545]  </sequence>
[01:37:06.545]  
[01:37:06.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:37:06.552]  
[01:37:06.552]  <debugvars>
[01:37:06.552]    // Pre-defined
[01:37:06.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:06.552]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:37:06.553]    __dp=0x00000000
[01:37:06.553]    __ap=0x00000000
[01:37:06.553]    __traceout=0x00000000      (Trace Disabled)
[01:37:06.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:06.553]    __FlashAddr=0x00000000
[01:37:06.553]    __FlashLen=0x00000000
[01:37:06.553]    __FlashArg=0x00000000
[01:37:06.553]    __FlashOp=0x00000000
[01:37:06.553]    __Result=0x00000000
[01:37:06.554]  </debugvars>
[01:37:06.554]  
[01:37:06.554]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:37:06.554]    <block atomic="false" info="">
[01:37:06.554]      __var deviceID = 0;
[01:37:06.555]        // -> [deviceID <= 0x00000000]
[01:37:06.555]      __var version = 0;
[01:37:06.555]        // -> [version <= 0x00000000]
[01:37:06.555]      __var partNum = 0;
[01:37:06.555]        // -> [partNum <= 0x00000000]
[01:37:06.555]      __var manuf = 0;
[01:37:06.555]        // -> [manuf <= 0x00000000]
[01:37:06.555]      __var isMSPM0G1X0X_G3X0X = 0;
[01:37:06.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:37:06.555]      __var isProduction = 0;
[01:37:06.555]        // -> [isProduction <= 0x00000000]
[01:37:06.556]      __var continueId = 0;
[01:37:06.556]        // -> [continueId <= 0x00000000]
[01:37:06.556]      deviceID =   Read32(0x41C40004);
[01:37:06.557]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:37:06.557]        // -> [deviceID <= 0x2BB8802F]
[01:37:06.557]      version = deviceID >> 28;
[01:37:06.558]        // -> [version <= 0x00000002]
[01:37:06.558]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:37:06.558]        // -> [partNum <= 0x0000BB88]
[01:37:06.558]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:37:06.558]        // -> [manuf <= 0x00000017]
[01:37:06.558]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:37:06.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:37:06.558]      isProduction = (version > 0);
[01:37:06.558]        // -> [isProduction <= 0x00000001]
[01:37:06.558]    </block>
[01:37:06.558]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:37:06.559]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:37:06.559]        // =>  FALSE
[01:37:06.559]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:37:06.559]    </control>
[01:37:06.559]    <control if="continueId == 4" while="" timeout="0" info="">
[01:37:06.559]      // if-block "continueId == 4"
[01:37:06.559]        // =>  FALSE
[01:37:06.559]      // skip if-block "continueId == 4"
[01:37:06.559]    </control>
[01:37:06.560]    <control if="!isProduction" while="" timeout="0" info="">
[01:37:06.560]      // if-block "!isProduction"
[01:37:06.560]        // =>  FALSE
[01:37:06.560]      // skip if-block "!isProduction"
[01:37:06.560]    </control>
[01:37:06.560]  </sequence>
[01:37:06.560]  
[01:38:54.669]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:38:54.669]  
[01:38:54.669]  <debugvars>
[01:38:54.669]    // Pre-defined
[01:38:54.670]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:54.670]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:54.670]    __dp=0x00000000
[01:38:54.670]    __ap=0x00000000
[01:38:54.670]    __traceout=0x00000000      (Trace Disabled)
[01:38:54.670]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:54.670]    __FlashAddr=0x00000000
[01:38:54.670]    __FlashLen=0x00000000
[01:38:54.671]    __FlashArg=0x00000000
[01:38:54.671]    __FlashOp=0x00000000
[01:38:54.671]    __Result=0x00000000
[01:38:54.671]  </debugvars>
[01:38:54.672]  
[01:38:54.672]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:38:54.672]    <block atomic="false" info="">
[01:38:54.672]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:38:54.672]        // -> [isSWJ <= 0x00000001]
[01:38:54.672]      __var hasDormant = __protocol & 0x00020000;
[01:38:54.672]        // -> [hasDormant <= 0x00000000]
[01:38:54.672]      __var protType   = __protocol & 0x0000FFFF;
[01:38:54.672]        // -> [protType <= 0x00000002]
[01:38:54.672]    </block>
[01:38:54.672]    <control if="protType == 1" while="" timeout="0" info="">
[01:38:54.672]      // if-block "protType == 1"
[01:38:54.672]        // =>  FALSE
[01:38:54.673]      // skip if-block "protType == 1"
[01:38:54.673]    </control>
[01:38:54.673]    <control if="protType == 2" while="" timeout="0" info="">
[01:38:54.673]      // if-block "protType == 2"
[01:38:54.673]        // =>  TRUE
[01:38:54.673]      <control if="isSWJ" while="" timeout="0" info="">
[01:38:54.673]        // if-block "isSWJ"
[01:38:54.673]          // =>  TRUE
[01:38:54.673]        <control if="hasDormant" while="" timeout="0" info="">
[01:38:54.674]          // if-block "hasDormant"
[01:38:54.674]            // =>  FALSE
[01:38:54.674]          // skip if-block "hasDormant"
[01:38:54.674]        </control>
[01:38:54.674]        <control if="!hasDormant" while="" timeout="0" info="">
[01:38:54.674]          // if-block "!hasDormant"
[01:38:54.674]            // =>  TRUE
[01:38:54.674]          <block atomic="false" info="">
[01:38:54.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:38:54.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:54.675]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:38:54.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:38:54.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:38:54.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:54.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:38:54.677]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:38:54.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:38:54.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:54.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:38:54.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:38:54.678]          </block>
[01:38:54.678]          // end if-block "!hasDormant"
[01:38:54.678]        </control>
[01:38:54.678]        // end if-block "isSWJ"
[01:38:54.678]      </control>
[01:38:54.678]      <control if="!isSWJ" while="" timeout="0" info="">
[01:38:54.678]        // if-block "!isSWJ"
[01:38:54.678]          // =>  FALSE
[01:38:54.678]        // skip if-block "!isSWJ"
[01:38:54.678]      </control>
[01:38:54.678]      <block atomic="false" info="">
[01:38:54.678]        ReadDP(0x0);
[01:38:54.679]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:38:54.679]      </block>
[01:38:54.679]      // end if-block "protType == 2"
[01:38:54.679]    </control>
[01:38:54.679]  </sequence>
[01:38:54.679]  
[01:38:54.680]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:38:54.680]  
[01:38:54.680]  <debugvars>
[01:38:54.680]    // Pre-defined
[01:38:54.680]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:54.680]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:54.681]    __dp=0x00000000
[01:38:54.681]    __ap=0x00000000
[01:38:54.682]    __traceout=0x00000000      (Trace Disabled)
[01:38:54.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:54.682]    __FlashAddr=0x00000000
[01:38:54.682]    __FlashLen=0x00000000
[01:38:54.682]    __FlashArg=0x00000000
[01:38:54.682]    __FlashOp=0x00000000
[01:38:54.683]    __Result=0x00000000
[01:38:54.683]  </debugvars>
[01:38:54.683]  
[01:38:54.683]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:38:54.683]    <block atomic="false" info="">
[01:38:54.683]      __var SW_DP_ABORT       = 0x0;
[01:38:54.683]        // -> [SW_DP_ABORT <= 0x00000000]
[01:38:54.683]      __var DP_CTRL_STAT      = 0x4;
[01:38:54.683]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:38:54.683]      __var DP_SELECT         = 0x8;
[01:38:54.683]        // -> [DP_SELECT <= 0x00000008]
[01:38:54.683]      __var powered_down      = 0;
[01:38:54.684]        // -> [powered_down <= 0x00000000]
[01:38:54.684]      WriteDP(DP_SELECT, 0x00000000);
[01:38:54.684]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:38:54.684]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:38:54.685]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:38:54.685]        // -> [powered_down <= 0x00000001]
[01:38:54.685]    </block>
[01:38:54.685]    <control if="powered_down" while="" timeout="0" info="">
[01:38:54.685]      // if-block "powered_down"
[01:38:54.685]        // =>  TRUE
[01:38:54.685]      <block atomic="false" info="">
[01:38:54.686]        Message(0, "Debug/System power-up request sent");
[01:38:54.687]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:38:54.688]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:38:54.688]      </block>
[01:38:54.688]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:38:54.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:38:54.689]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:38:54.689]        // while-condition  =>  FALSE
[01:38:54.689]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:38:54.689]      </control>
[01:38:54.689]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:38:54.689]        // if-block "(__protocol & 0xFFFF) == 1"
[01:38:54.689]          // =>  FALSE
[01:38:54.689]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:38:54.689]      </control>
[01:38:54.689]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:38:54.689]        // if-block "(__protocol & 0xFFFF) == 2"
[01:38:54.689]          // =>  TRUE
[01:38:54.689]        <block atomic="false" info="">
[01:38:54.689]          Message(0, "executing SWD power up");
[01:38:54.692]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:38:54.693]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:38:54.693]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:38:54.694]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:38:54.694]        </block>
[01:38:54.694]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:38:54.694]      </control>
[01:38:54.694]      // end if-block "powered_down"
[01:38:54.694]    </control>
[01:38:54.694]    <block atomic="false" info="">
[01:38:54.695]      __var DEBUG_PORT_VAL    = 0;
[01:38:54.695]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:38:54.695]      __var ACCESS_POINT_VAL  = 0;
[01:38:54.695]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:38:54.695]      __ap = 1; 
[01:38:54.695]        // -> [__ap <= 0x00000001]
[01:38:54.695]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:38:54.696]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:38:54.697]      __ap = 4;
[01:38:54.697]        // -> [__ap <= 0x00000004]
[01:38:54.697]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:54.698]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:38:54.698]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:38:54.698]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:54.699]    </block>
[01:38:54.699]    <block atomic="false" info="">
[01:38:54.699]      __var nReset = 0x80;
[01:38:54.699]        // -> [nReset <= 0x00000080]
[01:38:54.699]      __var canReadPins = 0;
[01:38:54.699]        // -> [canReadPins <= 0x00000000]
[01:38:54.701]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:38:54.701]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:38:54.701]        // -> [canReadPins <= 0x00000001]
[01:38:54.701]    </block>
[01:38:54.701]    <control if="" while="1" timeout="200" info="">
[01:38:54.701]      // while "1"  (timeout="200")
[01:38:54.701]      // while-condition  =>  TRUE
[01:38:54.701]      // while "1"  (timeout="200")
[01:38:54.702]      // while-condition  =>  TRUE
[01:38:54.702]      // while "1"  (timeout="200")
[01:38:54.702]      // while-condition  =>  TRUE
[01:38:54.702]      // while "1"  (timeout="200")
[01:38:54.702]      // while-condition  =>  TRUE
[01:38:54.702]      // while "1"  (timeout="200")
[01:38:54.702]      // while-condition  =>  TRUE
[01:38:54.702]      // while "1"  (timeout="200")
[01:38:54.702]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.703]      // while "1"  (timeout="200")
[01:38:54.703]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.704]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.704]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.704]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.704]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.704]      // while-condition  =>  TRUE
[01:38:54.704]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.705]      // while-condition  =>  TRUE
[01:38:54.705]      // while "1"  (timeout="200")
[01:38:54.706]      // while-condition  =>  TRUE
[01:38:54.706]      // while "1"  (timeout="200")
[01:38:54.706]      // while-condition  =>  TRUE
[01:38:54.706]      // while "1"  (timeout="200")
[01:38:54.706]      // while-condition  =>  TRUE
[01:38:54.706]      // while "1"  (timeout="200")
[01:38:54.706]      // while-condition  =>  TRUE
[01:38:54.706]      // while "1"  (timeout="200")
[01:38:54.706]      // while-condition  =>  TRUE
[01:38:54.706]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.707]      // while-condition  =>  TRUE
[01:38:54.707]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.708]      // while-condition  =>  TRUE
[01:38:54.708]      // while "1"  (timeout="200")
[01:38:54.709]      // while-condition  =>  TRUE
[01:38:54.709]      // while "1"  (timeout="200")
[01:38:54.709]      // while  =>  TIMEOUT
[01:38:54.709]      // end while "1"
[01:38:54.709]    </control>
[01:38:54.709]    <control if="canReadPins" while="" timeout="0" info="">
[01:38:54.709]      // if-block "canReadPins"
[01:38:54.709]        // =>  TRUE
[01:38:54.709]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:38:54.709]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:38:54.710]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:38:54.710]        // while-condition  =>  FALSE
[01:38:54.710]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:38:54.710]      </control>
[01:38:54.710]      // end if-block "canReadPins"
[01:38:54.710]    </control>
[01:38:54.710]    <control if="!canReadPins" while="" timeout="0" info="">
[01:38:54.710]      // if-block "!canReadPins"
[01:38:54.710]        // =>  FALSE
[01:38:54.710]      // skip if-block "!canReadPins"
[01:38:54.710]    </control>
[01:38:54.711]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:38:54.711]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:54.711]        // =>  TRUE
[01:38:54.711]      <block atomic="false" info="">
[01:38:54.711]        WriteAP(0x00, 0x190008);
[01:38:54.712]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:54.712]        WriteAP(0xF0, 0x01);
[01:38:54.713]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:54.713]      </block>
[01:38:54.713]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:54.713]    </control>
[01:38:54.713]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:38:54.713]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:54.713]        // =>  FALSE
[01:38:54.713]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:54.713]    </control>
[01:38:54.713]    <block atomic="false" info="">
[01:38:54.713]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:54.714]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:38:54.714]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:38:54.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:54.716]      __ap = 0; //lets make sure we reset the access point selection
[01:38:54.716]        // -> [__ap <= 0x00000000]
[01:38:54.716]    </block>
[01:38:54.716]  </sequence>
[01:38:54.716]  
[01:38:54.723]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:38:54.723]  
[01:38:54.723]  <debugvars>
[01:38:54.724]    // Pre-defined
[01:38:54.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:54.724]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:54.724]    __dp=0x00000000
[01:38:54.724]    __ap=0x00000000
[01:38:54.724]    __traceout=0x00000000      (Trace Disabled)
[01:38:54.724]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:54.724]    __FlashAddr=0x00000000
[01:38:54.724]    __FlashLen=0x00000000
[01:38:54.724]    __FlashArg=0x00000000
[01:38:54.725]    __FlashOp=0x00000000
[01:38:54.725]    __Result=0x00000000
[01:38:54.725]  </debugvars>
[01:38:54.725]  
[01:38:54.725]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:38:54.725]    <block atomic="false" info="">
[01:38:54.725]      __var deviceID = 0;
[01:38:54.725]        // -> [deviceID <= 0x00000000]
[01:38:54.725]      __var version = 0;
[01:38:54.725]        // -> [version <= 0x00000000]
[01:38:54.726]      __var partNum = 0;
[01:38:54.726]        // -> [partNum <= 0x00000000]
[01:38:54.726]      __var manuf = 0;
[01:38:54.726]        // -> [manuf <= 0x00000000]
[01:38:54.726]      __var isMSPM0G1X0X_G3X0X = 0;
[01:38:54.726]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:38:54.727]      __var isProduction = 0;
[01:38:54.727]        // -> [isProduction <= 0x00000000]
[01:38:54.727]      __var continueId = 0;
[01:38:54.727]        // -> [continueId <= 0x00000000]
[01:38:54.727]      deviceID =   Read32(0x41C40004);
[01:38:54.729]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:38:54.729]        // -> [deviceID <= 0x2BB8802F]
[01:38:54.729]      version = deviceID >> 28;
[01:38:54.730]        // -> [version <= 0x00000002]
[01:38:54.730]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:38:54.730]        // -> [partNum <= 0x0000BB88]
[01:38:54.730]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:38:54.730]        // -> [manuf <= 0x00000017]
[01:38:54.730]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:38:54.730]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:38:54.730]      isProduction = (version > 0);
[01:38:54.730]        // -> [isProduction <= 0x00000001]
[01:38:54.730]    </block>
[01:38:54.730]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:38:54.730]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:38:54.730]        // =>  FALSE
[01:38:54.730]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:38:54.730]    </control>
[01:38:54.730]    <control if="continueId == 4" while="" timeout="0" info="">
[01:38:54.730]      // if-block "continueId == 4"
[01:38:54.731]        // =>  FALSE
[01:38:54.731]      // skip if-block "continueId == 4"
[01:38:54.731]    </control>
[01:38:54.731]    <control if="!isProduction" while="" timeout="0" info="">
[01:38:54.731]      // if-block "!isProduction"
[01:38:54.731]        // =>  FALSE
[01:38:54.731]      // skip if-block "!isProduction"
[01:38:54.732]    </control>
[01:38:54.732]  </sequence>
[01:38:54.732]  
[01:38:58.302]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:38:58.302]  
[01:38:58.309]  <debugvars>
[01:38:58.309]    // Pre-defined
[01:38:58.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:58.309]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:38:58.309]    __dp=0x00000000
[01:38:58.309]    __ap=0x00000000
[01:38:58.309]    __traceout=0x00000000      (Trace Disabled)
[01:38:58.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:58.310]    __FlashAddr=0x00000000
[01:38:58.310]    __FlashLen=0x00000000
[01:38:58.310]    __FlashArg=0x00000000
[01:38:58.310]    __FlashOp=0x00000000
[01:38:58.310]    __Result=0x00000000
[01:38:58.310]  </debugvars>
[01:38:58.310]  
[01:38:58.310]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:38:58.310]    <block atomic="false" info="">
[01:38:58.311]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:38:58.311]        // -> [isSWJ <= 0x00000001]
[01:38:58.311]      __var hasDormant = __protocol & 0x00020000;
[01:38:58.311]        // -> [hasDormant <= 0x00000000]
[01:38:58.311]      __var protType   = __protocol & 0x0000FFFF;
[01:38:58.311]        // -> [protType <= 0x00000002]
[01:38:58.311]    </block>
[01:38:58.311]    <control if="protType == 1" while="" timeout="0" info="">
[01:38:58.311]      // if-block "protType == 1"
[01:38:58.311]        // =>  FALSE
[01:38:58.311]      // skip if-block "protType == 1"
[01:38:58.311]    </control>
[01:38:58.312]    <control if="protType == 2" while="" timeout="0" info="">
[01:38:58.312]      // if-block "protType == 2"
[01:38:58.312]        // =>  TRUE
[01:38:58.312]      <control if="isSWJ" while="" timeout="0" info="">
[01:38:58.312]        // if-block "isSWJ"
[01:38:58.312]          // =>  TRUE
[01:38:58.312]        <control if="hasDormant" while="" timeout="0" info="">
[01:38:58.312]          // if-block "hasDormant"
[01:38:58.312]            // =>  FALSE
[01:38:58.312]          // skip if-block "hasDormant"
[01:38:58.313]        </control>
[01:38:58.313]        <control if="!hasDormant" while="" timeout="0" info="">
[01:38:58.313]          // if-block "!hasDormant"
[01:38:58.313]            // =>  TRUE
[01:38:58.313]          <block atomic="false" info="">
[01:38:58.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:38:58.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:58.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:38:58.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:38:58.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:38:58.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:58.315]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:38:58.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:38:58.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:38:58.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:58.316]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:38:58.317]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:38:58.317]          </block>
[01:38:58.317]          // end if-block "!hasDormant"
[01:38:58.317]        </control>
[01:38:58.317]        // end if-block "isSWJ"
[01:38:58.317]      </control>
[01:38:58.317]      <control if="!isSWJ" while="" timeout="0" info="">
[01:38:58.318]        // if-block "!isSWJ"
[01:38:58.318]          // =>  FALSE
[01:38:58.318]        // skip if-block "!isSWJ"
[01:38:58.318]      </control>
[01:38:58.318]      <block atomic="false" info="">
[01:38:58.318]        ReadDP(0x0);
[01:38:58.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:38:58.318]      </block>
[01:38:58.318]      // end if-block "protType == 2"
[01:38:58.318]    </control>
[01:38:58.319]  </sequence>
[01:38:58.319]  
[01:38:58.319]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:38:58.319]  
[01:38:58.319]  <debugvars>
[01:38:58.319]    // Pre-defined
[01:38:58.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:58.319]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:38:58.319]    __dp=0x00000000
[01:38:58.321]    __ap=0x00000000
[01:38:58.321]    __traceout=0x00000000      (Trace Disabled)
[01:38:58.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:58.321]    __FlashAddr=0x00000000
[01:38:58.321]    __FlashLen=0x00000000
[01:38:58.321]    __FlashArg=0x00000000
[01:38:58.321]    __FlashOp=0x00000000
[01:38:58.321]    __Result=0x00000000
[01:38:58.322]  </debugvars>
[01:38:58.322]  
[01:38:58.322]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:38:58.322]    <block atomic="false" info="">
[01:38:58.322]      __var SW_DP_ABORT       = 0x0;
[01:38:58.322]        // -> [SW_DP_ABORT <= 0x00000000]
[01:38:58.322]      __var DP_CTRL_STAT      = 0x4;
[01:38:58.322]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:38:58.322]      __var DP_SELECT         = 0x8;
[01:38:58.322]        // -> [DP_SELECT <= 0x00000008]
[01:38:58.323]      __var powered_down      = 0;
[01:38:58.323]        // -> [powered_down <= 0x00000000]
[01:38:58.323]      WriteDP(DP_SELECT, 0x00000000);
[01:38:58.324]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:38:58.324]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:38:58.324]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:38:58.324]        // -> [powered_down <= 0x00000001]
[01:38:58.324]    </block>
[01:38:58.324]    <control if="powered_down" while="" timeout="0" info="">
[01:38:58.325]      // if-block "powered_down"
[01:38:58.325]        // =>  TRUE
[01:38:58.325]      <block atomic="false" info="">
[01:38:58.325]        Message(0, "Debug/System power-up request sent");
[01:38:58.326]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:38:58.327]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:38:58.327]      </block>
[01:38:58.327]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:38:58.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:38:58.328]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:38:58.328]        // while-condition  =>  FALSE
[01:38:58.328]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:38:58.328]      </control>
[01:38:58.328]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:38:58.328]        // if-block "(__protocol & 0xFFFF) == 1"
[01:38:58.328]          // =>  FALSE
[01:38:58.329]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:38:58.329]      </control>
[01:38:58.329]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:38:58.329]        // if-block "(__protocol & 0xFFFF) == 2"
[01:38:58.329]          // =>  TRUE
[01:38:58.329]        <block atomic="false" info="">
[01:38:58.329]          Message(0, "executing SWD power up");
[01:38:58.332]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:38:58.332]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:38:58.332]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:38:58.333]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:38:58.333]        </block>
[01:38:58.333]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:38:58.333]      </control>
[01:38:58.333]      // end if-block "powered_down"
[01:38:58.333]    </control>
[01:38:58.333]    <block atomic="false" info="">
[01:38:58.333]      __var DEBUG_PORT_VAL    = 0;
[01:38:58.333]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:38:58.333]      __var ACCESS_POINT_VAL  = 0;
[01:38:58.333]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:38:58.333]      __ap = 1; 
[01:38:58.333]        // -> [__ap <= 0x00000001]
[01:38:58.334]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:38:58.335]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:38:58.335]      __ap = 4;
[01:38:58.335]        // -> [__ap <= 0x00000004]
[01:38:58.335]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:58.336]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:38:58.336]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:38:58.336]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:58.338]    </block>
[01:38:58.338]    <block atomic="false" info="">
[01:38:58.338]      __var nReset = 0x80;
[01:38:58.338]        // -> [nReset <= 0x00000080]
[01:38:58.338]      __var canReadPins = 0;
[01:38:58.338]        // -> [canReadPins <= 0x00000000]
[01:38:58.338]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:38:58.340]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:38:58.340]        // -> [canReadPins <= 0x00000001]
[01:38:58.340]    </block>
[01:38:58.340]    <control if="" while="1" timeout="200" info="">
[01:38:58.340]      // while "1"  (timeout="200")
[01:38:58.340]      // while-condition  =>  TRUE
[01:38:58.340]      // while "1"  (timeout="200")
[01:38:58.340]      // while-condition  =>  TRUE
[01:38:58.340]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.341]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.341]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.341]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.341]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.341]      // while "1"  (timeout="200")
[01:38:58.341]      // while-condition  =>  TRUE
[01:38:58.342]      // while "1"  (timeout="200")
[01:38:58.342]      // while-condition  =>  TRUE
[01:38:58.342]      // while "1"  (timeout="200")
[01:38:58.342]      // while-condition  =>  TRUE
[01:38:58.342]      // while "1"  (timeout="200")
[01:38:58.342]      // while-condition  =>  TRUE
[01:38:58.342]      // while "1"  (timeout="200")
[01:38:58.342]      // while-condition  =>  TRUE
[01:38:58.342]      // while "1"  (timeout="200")
[01:38:58.342]      // while-condition  =>  TRUE
[01:38:58.343]      // while "1"  (timeout="200")
[01:38:58.343]      // while-condition  =>  TRUE
[01:38:58.343]      // while "1"  (timeout="200")
[01:38:58.343]      // while-condition  =>  TRUE
[01:38:58.343]      // while "1"  (timeout="200")
[01:38:58.343]      // while-condition  =>  TRUE
[01:38:58.344]      // while "1"  (timeout="200")
[01:38:58.344]      // while-condition  =>  TRUE
[01:38:58.344]      // while "1"  (timeout="200")
[01:38:58.344]      // while-condition  =>  TRUE
[01:38:58.344]      // while "1"  (timeout="200")
[01:38:58.344]      // while-condition  =>  TRUE
[01:38:58.344]      // while "1"  (timeout="200")
[01:38:58.344]      // while-condition  =>  TRUE
[01:38:58.344]      // while "1"  (timeout="200")
[01:38:58.344]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.345]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.345]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.345]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.345]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.345]      // while-condition  =>  TRUE
[01:38:58.345]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.346]      // while "1"  (timeout="200")
[01:38:58.346]      // while-condition  =>  TRUE
[01:38:58.347]      // while "1"  (timeout="200")
[01:38:58.347]      // while-condition  =>  TRUE
[01:38:58.347]      // while "1"  (timeout="200")
[01:38:58.347]      // while-condition  =>  TRUE
[01:38:58.347]      // while "1"  (timeout="200")
[01:38:58.347]      // while-condition  =>  TRUE
[01:38:58.347]      // while "1"  (timeout="200")
[01:38:58.347]      // while-condition  =>  TRUE
[01:38:58.347]      // while "1"  (timeout="200")
[01:38:58.347]      // while-condition  =>  TRUE
[01:38:58.348]      // while "1"  (timeout="200")
[01:38:58.348]      // while-condition  =>  TRUE
[01:38:58.348]      // while "1"  (timeout="200")
[01:38:58.348]      // while-condition  =>  TRUE
[01:38:58.348]      // while "1"  (timeout="200")
[01:38:58.348]      // while-condition  =>  TRUE
[01:38:58.348]      // while "1"  (timeout="200")
[01:38:58.348]      // while-condition  =>  TRUE
[01:38:58.348]      // while "1"  (timeout="200")
[01:38:58.348]      // while-condition  =>  TRUE
[01:38:58.349]      // while "1"  (timeout="200")
[01:38:58.349]      // while  =>  TIMEOUT
[01:38:58.349]      // end while "1"
[01:38:58.349]    </control>
[01:38:58.349]    <control if="canReadPins" while="" timeout="0" info="">
[01:38:58.349]      // if-block "canReadPins"
[01:38:58.349]        // =>  TRUE
[01:38:58.349]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:38:58.349]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:38:58.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:38:58.349]        // while-condition  =>  FALSE
[01:38:58.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:38:58.351]      </control>
[01:38:58.351]      // end if-block "canReadPins"
[01:38:58.351]    </control>
[01:38:58.351]    <control if="!canReadPins" while="" timeout="0" info="">
[01:38:58.351]      // if-block "!canReadPins"
[01:38:58.351]        // =>  FALSE
[01:38:58.351]      // skip if-block "!canReadPins"
[01:38:58.351]    </control>
[01:38:58.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:38:58.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:58.352]        // =>  TRUE
[01:38:58.352]      <block atomic="false" info="">
[01:38:58.352]        WriteAP(0x00, 0x190008);
[01:38:58.352]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:58.352]        WriteAP(0xF0, 0x01);
[01:38:58.354]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:58.354]      </block>
[01:38:58.354]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:58.354]    </control>
[01:38:58.354]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:38:58.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:58.355]        // =>  FALSE
[01:38:58.355]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:58.355]    </control>
[01:38:58.355]    <block atomic="false" info="">
[01:38:58.355]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:58.356]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:38:58.356]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:38:58.356]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:58.358]      __ap = 0; //lets make sure we reset the access point selection
[01:38:58.358]        // -> [__ap <= 0x00000000]
[01:38:58.358]    </block>
[01:38:58.358]  </sequence>
[01:38:58.358]  
[01:38:58.364]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:38:58.364]  
[01:38:58.364]  <debugvars>
[01:38:58.364]    // Pre-defined
[01:38:58.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:58.365]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:38:58.365]    __dp=0x00000000
[01:38:58.365]    __ap=0x00000000
[01:38:58.365]    __traceout=0x00000000      (Trace Disabled)
[01:38:58.365]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:58.365]    __FlashAddr=0x00000000
[01:38:58.366]    __FlashLen=0x00000000
[01:38:58.366]    __FlashArg=0x00000000
[01:38:58.366]    __FlashOp=0x00000000
[01:38:58.366]    __Result=0x00000000
[01:38:58.366]  </debugvars>
[01:38:58.367]  
[01:38:58.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:38:58.367]    <block atomic="false" info="">
[01:38:58.367]      __var deviceID = 0;
[01:38:58.367]        // -> [deviceID <= 0x00000000]
[01:38:58.368]      __var version = 0;
[01:38:58.368]        // -> [version <= 0x00000000]
[01:38:58.368]      __var partNum = 0;
[01:38:58.368]        // -> [partNum <= 0x00000000]
[01:38:58.368]      __var manuf = 0;
[01:38:58.368]        // -> [manuf <= 0x00000000]
[01:38:58.369]      __var isMSPM0G1X0X_G3X0X = 0;
[01:38:58.369]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:38:58.369]      __var isProduction = 0;
[01:38:58.369]        // -> [isProduction <= 0x00000000]
[01:38:58.369]      __var continueId = 0;
[01:38:58.369]        // -> [continueId <= 0x00000000]
[01:38:58.370]      deviceID =   Read32(0x41C40004);
[01:38:58.371]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:38:58.371]        // -> [deviceID <= 0x2BB8802F]
[01:38:58.372]      version = deviceID >> 28;
[01:38:58.372]        // -> [version <= 0x00000002]
[01:38:58.372]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:38:58.372]        // -> [partNum <= 0x0000BB88]
[01:38:58.372]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:38:58.372]        // -> [manuf <= 0x00000017]
[01:38:58.373]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:38:58.373]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:38:58.373]      isProduction = (version > 0);
[01:38:58.373]        // -> [isProduction <= 0x00000001]
[01:38:58.373]    </block>
[01:38:58.373]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:38:58.373]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:38:58.373]        // =>  FALSE
[01:38:58.373]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:38:58.373]    </control>
[01:38:58.373]    <control if="continueId == 4" while="" timeout="0" info="">
[01:38:58.373]      // if-block "continueId == 4"
[01:38:58.373]        // =>  FALSE
[01:38:58.374]      // skip if-block "continueId == 4"
[01:38:58.374]    </control>
[01:38:58.374]    <control if="!isProduction" while="" timeout="0" info="">
[01:38:58.374]      // if-block "!isProduction"
[01:38:58.374]        // =>  FALSE
[01:38:58.374]      // skip if-block "!isProduction"
[01:38:58.374]    </control>
[01:38:58.374]  </sequence>
[01:38:58.375]  
[01:39:56.502]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:39:56.502]  
[01:39:56.511]  <debugvars>
[01:39:56.511]    // Pre-defined
[01:39:56.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:56.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:56.512]    __dp=0x00000000
[01:39:56.512]    __ap=0x00000000
[01:39:56.512]    __traceout=0x00000000      (Trace Disabled)
[01:39:56.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:56.512]    __FlashAddr=0x00000000
[01:39:56.513]    __FlashLen=0x00000000
[01:39:56.513]    __FlashArg=0x00000000
[01:39:56.513]    __FlashOp=0x00000000
[01:39:56.513]    __Result=0x00000000
[01:39:56.513]  </debugvars>
[01:39:56.513]  
[01:39:56.513]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:39:56.513]    <block atomic="false" info="">
[01:39:56.513]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:39:56.513]        // -> [isSWJ <= 0x00000001]
[01:39:56.514]      __var hasDormant = __protocol & 0x00020000;
[01:39:56.514]        // -> [hasDormant <= 0x00000000]
[01:39:56.514]      __var protType   = __protocol & 0x0000FFFF;
[01:39:56.514]        // -> [protType <= 0x00000002]
[01:39:56.514]    </block>
[01:39:56.514]    <control if="protType == 1" while="" timeout="0" info="">
[01:39:56.514]      // if-block "protType == 1"
[01:39:56.514]        // =>  FALSE
[01:39:56.514]      // skip if-block "protType == 1"
[01:39:56.514]    </control>
[01:39:56.514]    <control if="protType == 2" while="" timeout="0" info="">
[01:39:56.515]      // if-block "protType == 2"
[01:39:56.515]        // =>  TRUE
[01:39:56.515]      <control if="isSWJ" while="" timeout="0" info="">
[01:39:56.515]        // if-block "isSWJ"
[01:39:56.515]          // =>  TRUE
[01:39:56.515]        <control if="hasDormant" while="" timeout="0" info="">
[01:39:56.515]          // if-block "hasDormant"
[01:39:56.515]            // =>  FALSE
[01:39:56.515]          // skip if-block "hasDormant"
[01:39:56.515]        </control>
[01:39:56.515]        <control if="!hasDormant" while="" timeout="0" info="">
[01:39:56.515]          // if-block "!hasDormant"
[01:39:56.516]            // =>  TRUE
[01:39:56.516]          <block atomic="false" info="">
[01:39:56.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:39:56.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:56.516]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:39:56.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:39:56.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:39:56.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:56.517]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:39:56.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:39:56.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:39:56.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:56.518]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:39:56.518]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:39:56.518]          </block>
[01:39:56.518]          // end if-block "!hasDormant"
[01:39:56.518]        </control>
[01:39:56.518]        // end if-block "isSWJ"
[01:39:56.518]      </control>
[01:39:56.520]      <control if="!isSWJ" while="" timeout="0" info="">
[01:39:56.520]        // if-block "!isSWJ"
[01:39:56.520]          // =>  FALSE
[01:39:56.520]        // skip if-block "!isSWJ"
[01:39:56.520]      </control>
[01:39:56.520]      <block atomic="false" info="">
[01:39:56.520]        ReadDP(0x0);
[01:39:56.520]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:39:56.520]      </block>
[01:39:56.520]      // end if-block "protType == 2"
[01:39:56.520]    </control>
[01:39:56.520]  </sequence>
[01:39:56.520]  
[01:39:56.521]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:39:56.521]  
[01:39:56.522]  <debugvars>
[01:39:56.522]    // Pre-defined
[01:39:56.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:56.522]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:56.522]    __dp=0x00000000
[01:39:56.522]    __ap=0x00000000
[01:39:56.522]    __traceout=0x00000000      (Trace Disabled)
[01:39:56.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:56.522]    __FlashAddr=0x00000000
[01:39:56.522]    __FlashLen=0x00000000
[01:39:56.522]    __FlashArg=0x00000000
[01:39:56.523]    __FlashOp=0x00000000
[01:39:56.523]    __Result=0x00000000
[01:39:56.523]  </debugvars>
[01:39:56.523]  
[01:39:56.523]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:39:56.523]    <block atomic="false" info="">
[01:39:56.523]      __var SW_DP_ABORT       = 0x0;
[01:39:56.523]        // -> [SW_DP_ABORT <= 0x00000000]
[01:39:56.523]      __var DP_CTRL_STAT      = 0x4;
[01:39:56.523]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:39:56.523]      __var DP_SELECT         = 0x8;
[01:39:56.524]        // -> [DP_SELECT <= 0x00000008]
[01:39:56.524]      __var powered_down      = 0;
[01:39:56.524]        // -> [powered_down <= 0x00000000]
[01:39:56.524]      WriteDP(DP_SELECT, 0x00000000);
[01:39:56.524]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:39:56.525]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:39:56.525]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:39:56.525]        // -> [powered_down <= 0x00000001]
[01:39:56.525]    </block>
[01:39:56.525]    <control if="powered_down" while="" timeout="0" info="">
[01:39:56.525]      // if-block "powered_down"
[01:39:56.525]        // =>  TRUE
[01:39:56.525]      <block atomic="false" info="">
[01:39:56.525]        Message(0, "Debug/System power-up request sent");
[01:39:56.528]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:39:56.528]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:39:56.528]      </block>
[01:39:56.528]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:39:56.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:39:56.529]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:39:56.529]        // while-condition  =>  FALSE
[01:39:56.529]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:39:56.529]      </control>
[01:39:56.529]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:39:56.529]        // if-block "(__protocol & 0xFFFF) == 1"
[01:39:56.530]          // =>  FALSE
[01:39:56.530]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:39:56.530]      </control>
[01:39:56.530]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:39:56.530]        // if-block "(__protocol & 0xFFFF) == 2"
[01:39:56.531]          // =>  TRUE
[01:39:56.531]        <block atomic="false" info="">
[01:39:56.531]          Message(0, "executing SWD power up");
[01:39:56.533]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:39:56.533]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:39:56.533]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:39:56.534]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:39:56.534]        </block>
[01:39:56.534]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:39:56.534]      </control>
[01:39:56.534]      // end if-block "powered_down"
[01:39:56.534]    </control>
[01:39:56.534]    <block atomic="false" info="">
[01:39:56.534]      __var DEBUG_PORT_VAL    = 0;
[01:39:56.534]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:39:56.534]      __var ACCESS_POINT_VAL  = 0;
[01:39:56.534]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:39:56.534]      __ap = 1; 
[01:39:56.535]        // -> [__ap <= 0x00000001]
[01:39:56.535]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:39:56.536]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:39:56.536]      __ap = 4;
[01:39:56.536]        // -> [__ap <= 0x00000004]
[01:39:56.536]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:39:56.537]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:39:56.538]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:39:56.538]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:39:56.539]    </block>
[01:39:56.539]    <block atomic="false" info="">
[01:39:56.539]      __var nReset = 0x80;
[01:39:56.539]        // -> [nReset <= 0x00000080]
[01:39:56.539]      __var canReadPins = 0;
[01:39:56.541]        // -> [canReadPins <= 0x00000000]
[01:39:56.541]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:39:56.541]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:39:56.541]        // -> [canReadPins <= 0x00000001]
[01:39:56.541]    </block>
[01:39:56.542]    <control if="" while="1" timeout="200" info="">
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.542]      // while-condition  =>  TRUE
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.542]      // while-condition  =>  TRUE
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.542]      // while-condition  =>  TRUE
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.542]      // while-condition  =>  TRUE
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.542]      // while-condition  =>  TRUE
[01:39:56.542]      // while "1"  (timeout="200")
[01:39:56.543]      // while-condition  =>  TRUE
[01:39:56.543]      // while "1"  (timeout="200")
[01:39:56.543]      // while-condition  =>  TRUE
[01:39:56.543]      // while "1"  (timeout="200")
[01:39:56.543]      // while-condition  =>  TRUE
[01:39:56.543]      // while "1"  (timeout="200")
[01:39:56.543]      // while-condition  =>  TRUE
[01:39:56.543]      // while "1"  (timeout="200")
[01:39:56.543]      // while-condition  =>  TRUE
[01:39:56.544]      // while "1"  (timeout="200")
[01:39:56.544]      // while-condition  =>  TRUE
[01:39:56.544]      // while "1"  (timeout="200")
[01:39:56.544]      // while-condition  =>  TRUE
[01:39:56.544]      // while "1"  (timeout="200")
[01:39:56.544]      // while-condition  =>  TRUE
[01:39:56.544]      // while "1"  (timeout="200")
[01:39:56.544]      // while-condition  =>  TRUE
[01:39:56.544]      // while "1"  (timeout="200")
[01:39:56.544]      // while-condition  =>  TRUE
[01:39:56.545]      // while "1"  (timeout="200")
[01:39:56.545]      // while-condition  =>  TRUE
[01:39:56.545]      // while "1"  (timeout="200")
[01:39:56.545]      // while-condition  =>  TRUE
[01:39:56.546]      // while "1"  (timeout="200")
[01:39:56.546]      // while-condition  =>  TRUE
[01:39:56.546]      // while "1"  (timeout="200")
[01:39:56.546]      // while-condition  =>  TRUE
[01:39:56.546]      // while "1"  (timeout="200")
[01:39:56.546]      // while-condition  =>  TRUE
[01:39:56.546]      // while "1"  (timeout="200")
[01:39:56.546]      // while-condition  =>  TRUE
[01:39:56.546]      // while "1"  (timeout="200")
[01:39:56.547]      // while-condition  =>  TRUE
[01:39:56.547]      // while "1"  (timeout="200")
[01:39:56.547]      // while-condition  =>  TRUE
[01:39:56.547]      // while "1"  (timeout="200")
[01:39:56.547]      // while-condition  =>  TRUE
[01:39:56.547]      // while "1"  (timeout="200")
[01:39:56.547]      // while-condition  =>  TRUE
[01:39:56.547]      // while "1"  (timeout="200")
[01:39:56.547]      // while-condition  =>  TRUE
[01:39:56.547]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.548]      // while-condition  =>  TRUE
[01:39:56.548]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.549]      // while-condition  =>  TRUE
[01:39:56.549]      // while "1"  (timeout="200")
[01:39:56.551]      // while-condition  =>  TRUE
[01:39:56.551]      // while "1"  (timeout="200")
[01:39:56.551]      // while-condition  =>  TRUE
[01:39:56.551]      // while "1"  (timeout="200")
[01:39:56.551]      // while-condition  =>  TRUE
[01:39:56.551]      // while "1"  (timeout="200")
[01:39:56.551]      // while-condition  =>  TRUE
[01:39:56.551]      // while "1"  (timeout="200")
[01:39:56.551]      // while-condition  =>  TRUE
[01:39:56.551]      // while "1"  (timeout="200")
[01:39:56.552]      // while-condition  =>  TRUE
[01:39:56.552]      // while "1"  (timeout="200")
[01:39:56.552]      // while-condition  =>  TRUE
[01:39:56.552]      // while "1"  (timeout="200")
[01:39:56.552]      // while-condition  =>  TRUE
[01:39:56.552]      // while "1"  (timeout="200")
[01:39:56.552]      // while-condition  =>  TRUE
[01:39:56.552]      // while "1"  (timeout="200")
[01:39:56.552]      // while-condition  =>  TRUE
[01:39:56.553]      // while "1"  (timeout="200")
[01:39:56.553]      // while  =>  TIMEOUT
[01:39:56.553]      // end while "1"
[01:39:56.553]    </control>
[01:39:56.553]    <control if="canReadPins" while="" timeout="0" info="">
[01:39:56.553]      // if-block "canReadPins"
[01:39:56.553]        // =>  TRUE
[01:39:56.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:39:56.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:39:56.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:39:56.554]        // while-condition  =>  FALSE
[01:39:56.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:39:56.554]      </control>
[01:39:56.554]      // end if-block "canReadPins"
[01:39:56.554]    </control>
[01:39:56.554]    <control if="!canReadPins" while="" timeout="0" info="">
[01:39:56.554]      // if-block "!canReadPins"
[01:39:56.554]        // =>  FALSE
[01:39:56.554]      // skip if-block "!canReadPins"
[01:39:56.554]    </control>
[01:39:56.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:39:56.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:39:56.555]        // =>  TRUE
[01:39:56.555]      <block atomic="false" info="">
[01:39:56.555]        WriteAP(0x00, 0x190008);
[01:39:56.556]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:39:56.556]        WriteAP(0xF0, 0x01);
[01:39:56.557]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:39:56.557]      </block>
[01:39:56.557]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:39:56.557]    </control>
[01:39:56.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:39:56.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:39:56.557]        // =>  FALSE
[01:39:56.558]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:39:56.558]    </control>
[01:39:56.558]    <block atomic="false" info="">
[01:39:56.558]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:39:56.559]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:39:56.559]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:39:56.559]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:39:56.561]      __ap = 0; //lets make sure we reset the access point selection
[01:39:56.561]        // -> [__ap <= 0x00000000]
[01:39:56.562]    </block>
[01:39:56.562]  </sequence>
[01:39:56.562]  
[01:39:56.567]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:39:56.567]  
[01:39:56.568]  <debugvars>
[01:39:56.568]    // Pre-defined
[01:39:56.568]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:56.568]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:56.568]    __dp=0x00000000
[01:39:56.568]    __ap=0x00000000
[01:39:56.568]    __traceout=0x00000000      (Trace Disabled)
[01:39:56.568]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:56.568]    __FlashAddr=0x00000000
[01:39:56.570]    __FlashLen=0x00000000
[01:39:56.570]    __FlashArg=0x00000000
[01:39:56.570]    __FlashOp=0x00000000
[01:39:56.570]    __Result=0x00000000
[01:39:56.570]  </debugvars>
[01:39:56.570]  
[01:39:56.570]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:39:56.570]    <block atomic="false" info="">
[01:39:56.570]      __var deviceID = 0;
[01:39:56.570]        // -> [deviceID <= 0x00000000]
[01:39:56.570]      __var version = 0;
[01:39:56.570]        // -> [version <= 0x00000000]
[01:39:56.570]      __var partNum = 0;
[01:39:56.570]        // -> [partNum <= 0x00000000]
[01:39:56.570]      __var manuf = 0;
[01:39:56.570]        // -> [manuf <= 0x00000000]
[01:39:56.570]      __var isMSPM0G1X0X_G3X0X = 0;
[01:39:56.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:39:56.571]      __var isProduction = 0;
[01:39:56.571]        // -> [isProduction <= 0x00000000]
[01:39:56.571]      __var continueId = 0;
[01:39:56.571]        // -> [continueId <= 0x00000000]
[01:39:56.571]      deviceID =   Read32(0x41C40004);
[01:39:56.573]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:39:56.573]        // -> [deviceID <= 0x2BB8802F]
[01:39:56.573]      version = deviceID >> 28;
[01:39:56.573]        // -> [version <= 0x00000002]
[01:39:56.573]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:39:56.573]        // -> [partNum <= 0x0000BB88]
[01:39:56.573]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:39:56.574]        // -> [manuf <= 0x00000017]
[01:39:56.574]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:39:56.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:39:56.574]      isProduction = (version > 0);
[01:39:56.574]        // -> [isProduction <= 0x00000001]
[01:39:56.574]    </block>
[01:39:56.574]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:39:56.574]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:39:56.574]        // =>  FALSE
[01:39:56.574]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:39:56.574]    </control>
[01:39:56.574]    <control if="continueId == 4" while="" timeout="0" info="">
[01:39:56.575]      // if-block "continueId == 4"
[01:39:56.575]        // =>  FALSE
[01:39:56.575]      // skip if-block "continueId == 4"
[01:39:56.575]    </control>
[01:39:56.575]    <control if="!isProduction" while="" timeout="0" info="">
[01:39:56.575]      // if-block "!isProduction"
[01:39:56.575]        // =>  FALSE
[01:39:56.575]      // skip if-block "!isProduction"
[01:39:56.575]    </control>
[01:39:56.575]  </sequence>
[01:39:56.576]  
[01:40:00.190]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:40:00.190]  
[01:40:00.191]  <debugvars>
[01:40:00.191]    // Pre-defined
[01:40:00.191]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:00.191]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:00.192]    __dp=0x00000000
[01:40:00.192]    __ap=0x00000000
[01:40:00.192]    __traceout=0x00000000      (Trace Disabled)
[01:40:00.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:00.192]    __FlashAddr=0x00000000
[01:40:00.192]    __FlashLen=0x00000000
[01:40:00.192]    __FlashArg=0x00000000
[01:40:00.192]    __FlashOp=0x00000000
[01:40:00.193]    __Result=0x00000000
[01:40:00.193]  </debugvars>
[01:40:00.193]  
[01:40:00.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:40:00.193]    <block atomic="false" info="">
[01:40:00.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:40:00.193]        // -> [isSWJ <= 0x00000001]
[01:40:00.193]      __var hasDormant = __protocol & 0x00020000;
[01:40:00.193]        // -> [hasDormant <= 0x00000000]
[01:40:00.194]      __var protType   = __protocol & 0x0000FFFF;
[01:40:00.194]        // -> [protType <= 0x00000002]
[01:40:00.194]    </block>
[01:40:00.194]    <control if="protType == 1" while="" timeout="0" info="">
[01:40:00.194]      // if-block "protType == 1"
[01:40:00.194]        // =>  FALSE
[01:40:00.194]      // skip if-block "protType == 1"
[01:40:00.194]    </control>
[01:40:00.194]    <control if="protType == 2" while="" timeout="0" info="">
[01:40:00.194]      // if-block "protType == 2"
[01:40:00.194]        // =>  TRUE
[01:40:00.195]      <control if="isSWJ" while="" timeout="0" info="">
[01:40:00.195]        // if-block "isSWJ"
[01:40:00.195]          // =>  TRUE
[01:40:00.195]        <control if="hasDormant" while="" timeout="0" info="">
[01:40:00.195]          // if-block "hasDormant"
[01:40:00.195]            // =>  FALSE
[01:40:00.195]          // skip if-block "hasDormant"
[01:40:00.195]        </control>
[01:40:00.196]        <control if="!hasDormant" while="" timeout="0" info="">
[01:40:00.196]          // if-block "!hasDormant"
[01:40:00.196]            // =>  TRUE
[01:40:00.196]          <block atomic="false" info="">
[01:40:00.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:40:00.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:00.197]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:40:00.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:40:00.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:40:00.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:00.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:40:00.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:40:00.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:40:00.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:00.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:40:00.199]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:40:00.199]          </block>
[01:40:00.199]          // end if-block "!hasDormant"
[01:40:00.199]        </control>
[01:40:00.199]        // end if-block "isSWJ"
[01:40:00.199]      </control>
[01:40:00.199]      <control if="!isSWJ" while="" timeout="0" info="">
[01:40:00.199]        // if-block "!isSWJ"
[01:40:00.199]          // =>  FALSE
[01:40:00.199]        // skip if-block "!isSWJ"
[01:40:00.201]      </control>
[01:40:00.201]      <block atomic="false" info="">
[01:40:00.201]        ReadDP(0x0);
[01:40:00.201]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:40:00.201]      </block>
[01:40:00.202]      // end if-block "protType == 2"
[01:40:00.202]    </control>
[01:40:00.202]  </sequence>
[01:40:00.202]  
[01:40:00.203]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:40:00.203]  
[01:40:00.203]  <debugvars>
[01:40:00.203]    // Pre-defined
[01:40:00.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:00.203]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:00.203]    __dp=0x00000000
[01:40:00.203]    __ap=0x00000000
[01:40:00.203]    __traceout=0x00000000      (Trace Disabled)
[01:40:00.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:00.203]    __FlashAddr=0x00000000
[01:40:00.204]    __FlashLen=0x00000000
[01:40:00.204]    __FlashArg=0x00000000
[01:40:00.204]    __FlashOp=0x00000000
[01:40:00.204]    __Result=0x00000000
[01:40:00.204]  </debugvars>
[01:40:00.204]  
[01:40:00.204]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:40:00.204]    <block atomic="false" info="">
[01:40:00.204]      __var SW_DP_ABORT       = 0x0;
[01:40:00.205]        // -> [SW_DP_ABORT <= 0x00000000]
[01:40:00.205]      __var DP_CTRL_STAT      = 0x4;
[01:40:00.205]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:40:00.205]      __var DP_SELECT         = 0x8;
[01:40:00.205]        // -> [DP_SELECT <= 0x00000008]
[01:40:00.205]      __var powered_down      = 0;
[01:40:00.205]        // -> [powered_down <= 0x00000000]
[01:40:00.205]      WriteDP(DP_SELECT, 0x00000000);
[01:40:00.206]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:40:00.206]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:40:00.206]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:40:00.206]        // -> [powered_down <= 0x00000001]
[01:40:00.206]    </block>
[01:40:00.206]    <control if="powered_down" while="" timeout="0" info="">
[01:40:00.206]      // if-block "powered_down"
[01:40:00.206]        // =>  TRUE
[01:40:00.206]      <block atomic="false" info="">
[01:40:00.208]        Message(0, "Debug/System power-up request sent");
[01:40:00.209]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:40:00.210]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:40:00.210]      </block>
[01:40:00.210]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:40:00.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:40:00.211]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:40:00.211]        // while-condition  =>  FALSE
[01:40:00.211]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:40:00.211]      </control>
[01:40:00.212]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:40:00.212]        // if-block "(__protocol & 0xFFFF) == 1"
[01:40:00.212]          // =>  FALSE
[01:40:00.212]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:40:00.212]      </control>
[01:40:00.212]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:40:00.212]        // if-block "(__protocol & 0xFFFF) == 2"
[01:40:00.212]          // =>  TRUE
[01:40:00.212]        <block atomic="false" info="">
[01:40:00.212]          Message(0, "executing SWD power up");
[01:40:00.214]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:40:00.214]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:40:00.214]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:40:00.215]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:40:00.215]        </block>
[01:40:00.215]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:40:00.215]      </control>
[01:40:00.215]      // end if-block "powered_down"
[01:40:00.215]    </control>
[01:40:00.215]    <block atomic="false" info="">
[01:40:00.215]      __var DEBUG_PORT_VAL    = 0;
[01:40:00.215]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:40:00.215]      __var ACCESS_POINT_VAL  = 0;
[01:40:00.215]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:40:00.217]      __ap = 1; 
[01:40:00.217]        // -> [__ap <= 0x00000001]
[01:40:00.217]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:40:00.218]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:40:00.218]      __ap = 4;
[01:40:00.218]        // -> [__ap <= 0x00000004]
[01:40:00.218]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:00.220]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:40:00.220]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:40:00.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:00.224]    </block>
[01:40:00.224]    <block atomic="false" info="">
[01:40:00.224]      __var nReset = 0x80;
[01:40:00.224]        // -> [nReset <= 0x00000080]
[01:40:00.225]      __var canReadPins = 0;
[01:40:00.225]        // -> [canReadPins <= 0x00000000]
[01:40:00.225]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:40:00.225]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:40:00.225]        // -> [canReadPins <= 0x00000001]
[01:40:00.225]    </block>
[01:40:00.225]    <control if="" while="1" timeout="200" info="">
[01:40:00.225]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.227]      // while-condition  =>  TRUE
[01:40:00.227]      // while "1"  (timeout="200")
[01:40:00.228]      // while-condition  =>  TRUE
[01:40:00.228]      // while "1"  (timeout="200")
[01:40:00.228]      // while-condition  =>  TRUE
[01:40:00.228]      // while "1"  (timeout="200")
[01:40:00.228]      // while-condition  =>  TRUE
[01:40:00.228]      // while "1"  (timeout="200")
[01:40:00.228]      // while-condition  =>  TRUE
[01:40:00.228]      // while "1"  (timeout="200")
[01:40:00.229]      // while-condition  =>  TRUE
[01:40:00.229]      // while "1"  (timeout="200")
[01:40:00.229]      // while-condition  =>  TRUE
[01:40:00.229]      // while "1"  (timeout="200")
[01:40:00.229]      // while-condition  =>  TRUE
[01:40:00.229]      // while "1"  (timeout="200")
[01:40:00.229]      // while-condition  =>  TRUE
[01:40:00.229]      // while "1"  (timeout="200")
[01:40:00.229]      // while-condition  =>  TRUE
[01:40:00.230]      // while "1"  (timeout="200")
[01:40:00.230]      // while-condition  =>  TRUE
[01:40:00.230]      // while "1"  (timeout="200")
[01:40:00.230]      // while-condition  =>  TRUE
[01:40:00.230]      // while "1"  (timeout="200")
[01:40:00.230]      // while-condition  =>  TRUE
[01:40:00.230]      // while "1"  (timeout="200")
[01:40:00.230]      // while-condition  =>  TRUE
[01:40:00.230]      // while "1"  (timeout="200")
[01:40:00.231]      // while-condition  =>  TRUE
[01:40:00.231]      // while "1"  (timeout="200")
[01:40:00.231]      // while-condition  =>  TRUE
[01:40:00.231]      // while "1"  (timeout="200")
[01:40:00.231]      // while-condition  =>  TRUE
[01:40:00.231]      // while "1"  (timeout="200")
[01:40:00.231]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.232]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.232]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.232]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.232]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.232]      // while-condition  =>  TRUE
[01:40:00.232]      // while "1"  (timeout="200")
[01:40:00.233]      // while-condition  =>  TRUE
[01:40:00.233]      // while "1"  (timeout="200")
[01:40:00.233]      // while-condition  =>  TRUE
[01:40:00.233]      // while "1"  (timeout="200")
[01:40:00.233]      // while-condition  =>  TRUE
[01:40:00.233]      // while "1"  (timeout="200")
[01:40:00.233]      // while-condition  =>  TRUE
[01:40:00.234]      // while "1"  (timeout="200")
[01:40:00.234]      // while-condition  =>  TRUE
[01:40:00.234]      // while "1"  (timeout="200")
[01:40:00.234]      // while-condition  =>  TRUE
[01:40:00.234]      // while "1"  (timeout="200")
[01:40:00.234]      // while-condition  =>  TRUE
[01:40:00.234]      // while "1"  (timeout="200")
[01:40:00.234]      // while-condition  =>  TRUE
[01:40:00.234]      // while "1"  (timeout="200")
[01:40:00.234]      // while-condition  =>  TRUE
[01:40:00.235]      // while "1"  (timeout="200")
[01:40:00.235]      // while-condition  =>  TRUE
[01:40:00.235]      // while "1"  (timeout="200")
[01:40:00.235]      // while-condition  =>  TRUE
[01:40:00.235]      // while "1"  (timeout="200")
[01:40:00.235]      // while-condition  =>  TRUE
[01:40:00.235]      // while "1"  (timeout="200")
[01:40:00.235]      // while-condition  =>  TRUE
[01:40:00.235]      // while "1"  (timeout="200")
[01:40:00.235]      // while-condition  =>  TRUE
[01:40:00.236]      // while "1"  (timeout="200")
[01:40:00.236]      // while-condition  =>  TRUE
[01:40:00.236]      // while "1"  (timeout="200")
[01:40:00.236]      // while-condition  =>  TRUE
[01:40:00.236]      // while "1"  (timeout="200")
[01:40:00.236]      // while-condition  =>  TRUE
[01:40:00.236]      // while "1"  (timeout="200")
[01:40:00.236]      // while-condition  =>  TRUE
[01:40:00.236]      // while "1"  (timeout="200")
[01:40:00.237]      // while-condition  =>  TRUE
[01:40:00.237]      // while "1"  (timeout="200")
[01:40:00.237]      // while-condition  =>  TRUE
[01:40:00.237]      // while "1"  (timeout="200")
[01:40:00.237]      // while-condition  =>  TRUE
[01:40:00.237]      // while "1"  (timeout="200")
[01:40:00.238]      // while-condition  =>  TRUE
[01:40:00.238]      // while "1"  (timeout="200")
[01:40:00.238]      // while-condition  =>  TRUE
[01:40:00.238]      // while "1"  (timeout="200")
[01:40:00.238]      // while-condition  =>  TRUE
[01:40:00.238]      // while "1"  (timeout="200")
[01:40:00.238]      // while-condition  =>  TRUE
[01:40:00.238]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.239]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.239]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.239]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.239]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.239]      // while "1"  (timeout="200")
[01:40:00.239]      // while-condition  =>  TRUE
[01:40:00.241]      // while "1"  (timeout="200")
[01:40:00.241]      // while  =>  TIMEOUT
[01:40:00.241]      // end while "1"
[01:40:00.241]    </control>
[01:40:00.241]    <control if="canReadPins" while="" timeout="0" info="">
[01:40:00.241]      // if-block "canReadPins"
[01:40:00.241]        // =>  TRUE
[01:40:00.241]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:40:00.241]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:40:00.242]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:40:00.242]        // while-condition  =>  FALSE
[01:40:00.242]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:40:00.242]      </control>
[01:40:00.242]      // end if-block "canReadPins"
[01:40:00.242]    </control>
[01:40:00.242]    <control if="!canReadPins" while="" timeout="0" info="">
[01:40:00.242]      // if-block "!canReadPins"
[01:40:00.243]        // =>  FALSE
[01:40:00.243]      // skip if-block "!canReadPins"
[01:40:00.243]    </control>
[01:40:00.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:40:00.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:00.243]        // =>  TRUE
[01:40:00.243]      <block atomic="false" info="">
[01:40:00.243]        WriteAP(0x00, 0x190008);
[01:40:00.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:00.243]        WriteAP(0xF0, 0x01);
[01:40:00.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:00.246]      </block>
[01:40:00.246]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:00.246]    </control>
[01:40:00.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:40:00.246]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:00.247]        // =>  FALSE
[01:40:00.247]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:00.247]    </control>
[01:40:00.247]    <block atomic="false" info="">
[01:40:00.247]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:00.248]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:40:00.248]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:40:00.248]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:00.250]      __ap = 0; //lets make sure we reset the access point selection
[01:40:00.250]        // -> [__ap <= 0x00000000]
[01:40:00.250]    </block>
[01:40:00.250]  </sequence>
[01:40:00.251]  
[01:40:00.256]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:40:00.256]  
[01:40:00.257]  <debugvars>
[01:40:00.257]    // Pre-defined
[01:40:00.257]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:00.257]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:00.257]    __dp=0x00000000
[01:40:00.257]    __ap=0x00000000
[01:40:00.257]    __traceout=0x00000000      (Trace Disabled)
[01:40:00.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:00.257]    __FlashAddr=0x00000000
[01:40:00.257]    __FlashLen=0x00000000
[01:40:00.257]    __FlashArg=0x00000000
[01:40:00.257]    __FlashOp=0x00000000
[01:40:00.257]    __Result=0x00000000
[01:40:00.259]  </debugvars>
[01:40:00.259]  
[01:40:00.259]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:40:00.259]    <block atomic="false" info="">
[01:40:00.259]      __var deviceID = 0;
[01:40:00.259]        // -> [deviceID <= 0x00000000]
[01:40:00.259]      __var version = 0;
[01:40:00.259]        // -> [version <= 0x00000000]
[01:40:00.259]      __var partNum = 0;
[01:40:00.259]        // -> [partNum <= 0x00000000]
[01:40:00.259]      __var manuf = 0;
[01:40:00.260]        // -> [manuf <= 0x00000000]
[01:40:00.260]      __var isMSPM0G1X0X_G3X0X = 0;
[01:40:00.260]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:40:00.260]      __var isProduction = 0;
[01:40:00.260]        // -> [isProduction <= 0x00000000]
[01:40:00.260]      __var continueId = 0;
[01:40:00.260]        // -> [continueId <= 0x00000000]
[01:40:00.261]      deviceID =   Read32(0x41C40004);
[01:40:00.262]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:40:00.262]        // -> [deviceID <= 0x2BB8802F]
[01:40:00.262]      version = deviceID >> 28;
[01:40:00.262]        // -> [version <= 0x00000002]
[01:40:00.262]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:40:00.262]        // -> [partNum <= 0x0000BB88]
[01:40:00.263]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:40:00.263]        // -> [manuf <= 0x00000017]
[01:40:00.263]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:40:00.263]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:40:00.263]      isProduction = (version > 0);
[01:40:00.263]        // -> [isProduction <= 0x00000001]
[01:40:00.263]    </block>
[01:40:00.263]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:40:00.263]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:40:00.263]        // =>  FALSE
[01:40:00.263]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:40:00.263]    </control>
[01:40:00.263]    <control if="continueId == 4" while="" timeout="0" info="">
[01:40:00.263]      // if-block "continueId == 4"
[01:40:00.264]        // =>  FALSE
[01:40:00.264]      // skip if-block "continueId == 4"
[01:40:00.264]    </control>
[01:40:00.264]    <control if="!isProduction" while="" timeout="0" info="">
[01:40:00.264]      // if-block "!isProduction"
[01:40:00.264]        // =>  FALSE
[01:40:00.264]      // skip if-block "!isProduction"
[01:40:00.264]    </control>
[01:40:00.264]  </sequence>
[01:40:00.265]  
[01:40:40.244]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:40:40.244]  
[01:40:40.253]  <debugvars>
[01:40:40.253]    // Pre-defined
[01:40:40.253]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:40.254]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:40:40.254]    __dp=0x00000000
[01:40:40.254]    __ap=0x00000000
[01:40:40.254]    __traceout=0x00000000      (Trace Disabled)
[01:40:40.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:40.254]    __FlashAddr=0x00000000
[01:40:40.254]    __FlashLen=0x00000000
[01:40:40.254]    __FlashArg=0x00000000
[01:40:40.254]    __FlashOp=0x00000000
[01:40:40.254]    __Result=0x00000000
[01:40:40.254]  </debugvars>
[01:40:40.254]  
[01:40:40.255]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:40:40.255]    <block atomic="false" info="">
[01:40:40.255]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:40:40.255]        // -> [isSWJ <= 0x00000001]
[01:40:40.255]      __var hasDormant = __protocol & 0x00020000;
[01:40:40.255]        // -> [hasDormant <= 0x00000000]
[01:40:40.255]      __var protType   = __protocol & 0x0000FFFF;
[01:40:40.255]        // -> [protType <= 0x00000002]
[01:40:40.255]    </block>
[01:40:40.255]    <control if="protType == 1" while="" timeout="0" info="">
[01:40:40.255]      // if-block "protType == 1"
[01:40:40.255]        // =>  FALSE
[01:40:40.255]      // skip if-block "protType == 1"
[01:40:40.255]    </control>
[01:40:40.255]    <control if="protType == 2" while="" timeout="0" info="">
[01:40:40.255]      // if-block "protType == 2"
[01:40:40.255]        // =>  TRUE
[01:40:40.257]      <control if="isSWJ" while="" timeout="0" info="">
[01:40:40.257]        // if-block "isSWJ"
[01:40:40.257]          // =>  TRUE
[01:40:40.257]        <control if="hasDormant" while="" timeout="0" info="">
[01:40:40.257]          // if-block "hasDormant"
[01:40:40.257]            // =>  FALSE
[01:40:40.257]          // skip if-block "hasDormant"
[01:40:40.258]        </control>
[01:40:40.258]        <control if="!hasDormant" while="" timeout="0" info="">
[01:40:40.258]          // if-block "!hasDormant"
[01:40:40.258]            // =>  TRUE
[01:40:40.258]          <block atomic="false" info="">
[01:40:40.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:40:40.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:40.259]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:40:40.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:40:40.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:40:40.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:40.259]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:40:40.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:40:40.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:40:40.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:40.260]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:40:40.261]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:40:40.261]          </block>
[01:40:40.261]          // end if-block "!hasDormant"
[01:40:40.261]        </control>
[01:40:40.261]        // end if-block "isSWJ"
[01:40:40.261]      </control>
[01:40:40.261]      <control if="!isSWJ" while="" timeout="0" info="">
[01:40:40.262]        // if-block "!isSWJ"
[01:40:40.262]          // =>  FALSE
[01:40:40.262]        // skip if-block "!isSWJ"
[01:40:40.262]      </control>
[01:40:40.262]      <block atomic="false" info="">
[01:40:40.262]        ReadDP(0x0);
[01:40:40.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:40:40.263]      </block>
[01:40:40.263]      // end if-block "protType == 2"
[01:40:40.263]    </control>
[01:40:40.263]  </sequence>
[01:40:40.263]  
[01:40:40.263]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:40:40.264]  
[01:40:40.264]  <debugvars>
[01:40:40.264]    // Pre-defined
[01:40:40.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:40.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:40:40.264]    __dp=0x00000000
[01:40:40.264]    __ap=0x00000000
[01:40:40.264]    __traceout=0x00000000      (Trace Disabled)
[01:40:40.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:40.264]    __FlashAddr=0x00000000
[01:40:40.264]    __FlashLen=0x00000000
[01:40:40.264]    __FlashArg=0x00000000
[01:40:40.265]    __FlashOp=0x00000000
[01:40:40.265]    __Result=0x00000000
[01:40:40.265]  </debugvars>
[01:40:40.265]  
[01:40:40.265]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:40:40.265]    <block atomic="false" info="">
[01:40:40.265]      __var SW_DP_ABORT       = 0x0;
[01:40:40.265]        // -> [SW_DP_ABORT <= 0x00000000]
[01:40:40.265]      __var DP_CTRL_STAT      = 0x4;
[01:40:40.265]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:40:40.265]      __var DP_SELECT         = 0x8;
[01:40:40.265]        // -> [DP_SELECT <= 0x00000008]
[01:40:40.266]      __var powered_down      = 0;
[01:40:40.266]        // -> [powered_down <= 0x00000000]
[01:40:40.266]      WriteDP(DP_SELECT, 0x00000000);
[01:40:40.266]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:40:40.266]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:40:40.267]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:40:40.267]        // -> [powered_down <= 0x00000001]
[01:40:40.267]    </block>
[01:40:40.267]    <control if="powered_down" while="" timeout="0" info="">
[01:40:40.267]      // if-block "powered_down"
[01:40:40.267]        // =>  TRUE
[01:40:40.267]      <block atomic="false" info="">
[01:40:40.267]        Message(0, "Debug/System power-up request sent");
[01:40:40.270]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:40:40.270]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:40:40.270]      </block>
[01:40:40.271]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:40:40.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:40:40.271]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:40:40.271]        // while-condition  =>  FALSE
[01:40:40.271]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:40:40.271]      </control>
[01:40:40.272]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:40:40.272]        // if-block "(__protocol & 0xFFFF) == 1"
[01:40:40.272]          // =>  FALSE
[01:40:40.272]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:40:40.272]      </control>
[01:40:40.272]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:40:40.272]        // if-block "(__protocol & 0xFFFF) == 2"
[01:40:40.272]          // =>  TRUE
[01:40:40.272]        <block atomic="false" info="">
[01:40:40.272]          Message(0, "executing SWD power up");
[01:40:40.274]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:40:40.275]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:40:40.275]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:40:40.276]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:40:40.276]        </block>
[01:40:40.276]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:40:40.276]      </control>
[01:40:40.276]      // end if-block "powered_down"
[01:40:40.276]    </control>
[01:40:40.276]    <block atomic="false" info="">
[01:40:40.276]      __var DEBUG_PORT_VAL    = 0;
[01:40:40.276]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:40:40.276]      __var ACCESS_POINT_VAL  = 0;
[01:40:40.277]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:40:40.277]      __ap = 1; 
[01:40:40.277]        // -> [__ap <= 0x00000001]
[01:40:40.277]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:40:40.278]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:40:40.278]      __ap = 4;
[01:40:40.278]        // -> [__ap <= 0x00000004]
[01:40:40.278]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:40.280]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:40:40.280]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:40:40.280]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:40.282]    </block>
[01:40:40.282]    <block atomic="false" info="">
[01:40:40.282]      __var nReset = 0x80;
[01:40:40.283]        // -> [nReset <= 0x00000080]
[01:40:40.283]      __var canReadPins = 0;
[01:40:40.283]        // -> [canReadPins <= 0x00000000]
[01:40:40.283]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:40:40.283]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:40:40.283]        // -> [canReadPins <= 0x00000001]
[01:40:40.283]    </block>
[01:40:40.283]    <control if="" while="1" timeout="200" info="">
[01:40:40.283]      // while "1"  (timeout="200")
[01:40:40.283]      // while-condition  =>  TRUE
[01:40:40.284]      // while "1"  (timeout="200")
[01:40:40.284]      // while-condition  =>  TRUE
[01:40:40.284]      // while "1"  (timeout="200")
[01:40:40.284]      // while-condition  =>  TRUE
[01:40:40.284]      // while "1"  (timeout="200")
[01:40:40.284]      // while-condition  =>  TRUE
[01:40:40.284]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.285]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.285]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.285]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.285]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.285]      // while "1"  (timeout="200")
[01:40:40.285]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.286]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.286]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.286]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.286]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.286]      // while-condition  =>  TRUE
[01:40:40.286]      // while "1"  (timeout="200")
[01:40:40.287]      // while-condition  =>  TRUE
[01:40:40.287]      // while "1"  (timeout="200")
[01:40:40.287]      // while  =>  TIMEOUT
[01:40:40.287]      // end while "1"
[01:40:40.287]    </control>
[01:40:40.287]    <control if="canReadPins" while="" timeout="0" info="">
[01:40:40.287]      // if-block "canReadPins"
[01:40:40.287]        // =>  TRUE
[01:40:40.287]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:40:40.287]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:40:40.288]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:40:40.288]        // while-condition  =>  FALSE
[01:40:40.288]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:40:40.288]      </control>
[01:40:40.288]      // end if-block "canReadPins"
[01:40:40.288]    </control>
[01:40:40.289]    <control if="!canReadPins" while="" timeout="0" info="">
[01:40:40.289]      // if-block "!canReadPins"
[01:40:40.289]        // =>  FALSE
[01:40:40.289]      // skip if-block "!canReadPins"
[01:40:40.289]    </control>
[01:40:40.289]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:40:40.289]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:40.289]        // =>  TRUE
[01:40:40.289]      <block atomic="false" info="">
[01:40:40.289]        WriteAP(0x00, 0x190008);
[01:40:40.291]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:40.291]        WriteAP(0xF0, 0x01);
[01:40:40.292]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:40.292]      </block>
[01:40:40.292]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:40.292]    </control>
[01:40:40.292]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:40:40.292]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:40.292]        // =>  FALSE
[01:40:40.292]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:40.292]    </control>
[01:40:40.292]    <block atomic="false" info="">
[01:40:40.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:40.293]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:40:40.293]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:40:40.294]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:40.295]      __ap = 0; //lets make sure we reset the access point selection
[01:40:40.296]        // -> [__ap <= 0x00000000]
[01:40:40.296]    </block>
[01:40:40.296]  </sequence>
[01:40:40.296]  
[01:40:40.302]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:40:40.302]  
[01:40:40.303]  <debugvars>
[01:40:40.303]    // Pre-defined
[01:40:40.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:40.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:40:40.303]    __dp=0x00000000
[01:40:40.303]    __ap=0x00000000
[01:40:40.303]    __traceout=0x00000000      (Trace Disabled)
[01:40:40.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:40.303]    __FlashAddr=0x00000000
[01:40:40.303]    __FlashLen=0x00000000
[01:40:40.303]    __FlashArg=0x00000000
[01:40:40.303]    __FlashOp=0x00000000
[01:40:40.303]    __Result=0x00000000
[01:40:40.303]  </debugvars>
[01:40:40.304]  
[01:40:40.304]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:40:40.304]    <block atomic="false" info="">
[01:40:40.304]      __var deviceID = 0;
[01:40:40.304]        // -> [deviceID <= 0x00000000]
[01:40:40.304]      __var version = 0;
[01:40:40.304]        // -> [version <= 0x00000000]
[01:40:40.304]      __var partNum = 0;
[01:40:40.304]        // -> [partNum <= 0x00000000]
[01:40:40.305]      __var manuf = 0;
[01:40:40.305]        // -> [manuf <= 0x00000000]
[01:40:40.305]      __var isMSPM0G1X0X_G3X0X = 0;
[01:40:40.305]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:40:40.305]      __var isProduction = 0;
[01:40:40.305]        // -> [isProduction <= 0x00000000]
[01:40:40.305]      __var continueId = 0;
[01:40:40.305]        // -> [continueId <= 0x00000000]
[01:40:40.305]      deviceID =   Read32(0x41C40004);
[01:40:40.307]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:40:40.307]        // -> [deviceID <= 0x2BB8802F]
[01:40:40.307]      version = deviceID >> 28;
[01:40:40.307]        // -> [version <= 0x00000002]
[01:40:40.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:40:40.307]        // -> [partNum <= 0x0000BB88]
[01:40:40.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:40:40.307]        // -> [manuf <= 0x00000017]
[01:40:40.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:40:40.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:40:40.307]      isProduction = (version > 0);
[01:40:40.307]        // -> [isProduction <= 0x00000001]
[01:40:40.308]    </block>
[01:40:40.308]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:40:40.308]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:40:40.308]        // =>  FALSE
[01:40:40.308]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:40:40.308]    </control>
[01:40:40.308]    <control if="continueId == 4" while="" timeout="0" info="">
[01:40:40.308]      // if-block "continueId == 4"
[01:40:40.308]        // =>  FALSE
[01:40:40.308]      // skip if-block "continueId == 4"
[01:40:40.308]    </control>
[01:40:40.309]    <control if="!isProduction" while="" timeout="0" info="">
[01:40:40.309]      // if-block "!isProduction"
[01:40:40.309]        // =>  FALSE
[01:40:40.309]      // skip if-block "!isProduction"
[01:40:40.309]    </control>
[01:40:40.309]  </sequence>
[01:40:40.309]  
[01:40:43.873]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:40:43.873]  
[01:40:43.883]  <debugvars>
[01:40:43.883]    // Pre-defined
[01:40:43.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:43.883]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:43.883]    __dp=0x00000000
[01:40:43.883]    __ap=0x00000000
[01:40:43.884]    __traceout=0x00000000      (Trace Disabled)
[01:40:43.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:43.884]    __FlashAddr=0x00000000
[01:40:43.884]    __FlashLen=0x00000000
[01:40:43.884]    __FlashArg=0x00000000
[01:40:43.884]    __FlashOp=0x00000000
[01:40:43.884]    __Result=0x00000000
[01:40:43.884]  </debugvars>
[01:40:43.884]  
[01:40:43.884]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:40:43.885]    <block atomic="false" info="">
[01:40:43.885]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:40:43.885]        // -> [isSWJ <= 0x00000001]
[01:40:43.885]      __var hasDormant = __protocol & 0x00020000;
[01:40:43.885]        // -> [hasDormant <= 0x00000000]
[01:40:43.885]      __var protType   = __protocol & 0x0000FFFF;
[01:40:43.885]        // -> [protType <= 0x00000002]
[01:40:43.885]    </block>
[01:40:43.885]    <control if="protType == 1" while="" timeout="0" info="">
[01:40:43.885]      // if-block "protType == 1"
[01:40:43.885]        // =>  FALSE
[01:40:43.886]      // skip if-block "protType == 1"
[01:40:43.886]    </control>
[01:40:43.886]    <control if="protType == 2" while="" timeout="0" info="">
[01:40:43.886]      // if-block "protType == 2"
[01:40:43.886]        // =>  TRUE
[01:40:43.886]      <control if="isSWJ" while="" timeout="0" info="">
[01:40:43.886]        // if-block "isSWJ"
[01:40:43.886]          // =>  TRUE
[01:40:43.886]        <control if="hasDormant" while="" timeout="0" info="">
[01:40:43.886]          // if-block "hasDormant"
[01:40:43.886]            // =>  FALSE
[01:40:43.887]          // skip if-block "hasDormant"
[01:40:43.887]        </control>
[01:40:43.887]        <control if="!hasDormant" while="" timeout="0" info="">
[01:40:43.887]          // if-block "!hasDormant"
[01:40:43.887]            // =>  TRUE
[01:40:43.887]          <block atomic="false" info="">
[01:40:43.887]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:40:43.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:43.888]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:40:43.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:40:43.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:40:43.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:43.889]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:40:43.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:40:43.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:40:43.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:43.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:40:43.890]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:40:43.890]          </block>
[01:40:43.890]          // end if-block "!hasDormant"
[01:40:43.890]        </control>
[01:40:43.890]        // end if-block "isSWJ"
[01:40:43.890]      </control>
[01:40:43.890]      <control if="!isSWJ" while="" timeout="0" info="">
[01:40:43.890]        // if-block "!isSWJ"
[01:40:43.891]          // =>  FALSE
[01:40:43.891]        // skip if-block "!isSWJ"
[01:40:43.892]      </control>
[01:40:43.892]      <block atomic="false" info="">
[01:40:43.892]        ReadDP(0x0);
[01:40:43.892]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:40:43.892]      </block>
[01:40:43.892]      // end if-block "protType == 2"
[01:40:43.892]    </control>
[01:40:43.893]  </sequence>
[01:40:43.893]  
[01:40:43.893]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:40:43.893]  
[01:40:43.893]  <debugvars>
[01:40:43.893]    // Pre-defined
[01:40:43.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:43.893]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:43.893]    __dp=0x00000000
[01:40:43.893]    __ap=0x00000000
[01:40:43.893]    __traceout=0x00000000      (Trace Disabled)
[01:40:43.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:43.894]    __FlashAddr=0x00000000
[01:40:43.894]    __FlashLen=0x00000000
[01:40:43.894]    __FlashArg=0x00000000
[01:40:43.894]    __FlashOp=0x00000000
[01:40:43.894]    __Result=0x00000000
[01:40:43.894]  </debugvars>
[01:40:43.894]  
[01:40:43.894]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:40:43.894]    <block atomic="false" info="">
[01:40:43.894]      __var SW_DP_ABORT       = 0x0;
[01:40:43.894]        // -> [SW_DP_ABORT <= 0x00000000]
[01:40:43.895]      __var DP_CTRL_STAT      = 0x4;
[01:40:43.895]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:40:43.895]      __var DP_SELECT         = 0x8;
[01:40:43.895]        // -> [DP_SELECT <= 0x00000008]
[01:40:43.895]      __var powered_down      = 0;
[01:40:43.895]        // -> [powered_down <= 0x00000000]
[01:40:43.895]      WriteDP(DP_SELECT, 0x00000000);
[01:40:43.896]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:40:43.896]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:40:43.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:40:43.896]        // -> [powered_down <= 0x00000001]
[01:40:43.896]    </block>
[01:40:43.896]    <control if="powered_down" while="" timeout="0" info="">
[01:40:43.897]      // if-block "powered_down"
[01:40:43.897]        // =>  TRUE
[01:40:43.897]      <block atomic="false" info="">
[01:40:43.897]        Message(0, "Debug/System power-up request sent");
[01:40:43.901]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:40:43.902]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:40:43.902]      </block>
[01:40:43.902]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:40:43.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:40:43.903]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:40:43.903]        // while-condition  =>  FALSE
[01:40:43.903]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:40:43.903]      </control>
[01:40:43.903]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:40:43.903]        // if-block "(__protocol & 0xFFFF) == 1"
[01:40:43.903]          // =>  FALSE
[01:40:43.903]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:40:43.903]      </control>
[01:40:43.904]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:40:43.904]        // if-block "(__protocol & 0xFFFF) == 2"
[01:40:43.904]          // =>  TRUE
[01:40:43.904]        <block atomic="false" info="">
[01:40:43.904]          Message(0, "executing SWD power up");
[01:40:43.906]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:40:43.906]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:40:43.906]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:40:43.907]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:40:43.907]        </block>
[01:40:43.907]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:40:43.907]      </control>
[01:40:43.907]      // end if-block "powered_down"
[01:40:43.907]    </control>
[01:40:43.908]    <block atomic="false" info="">
[01:40:43.908]      __var DEBUG_PORT_VAL    = 0;
[01:40:43.908]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:40:43.908]      __var ACCESS_POINT_VAL  = 0;
[01:40:43.908]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:40:43.908]      __ap = 1; 
[01:40:43.908]        // -> [__ap <= 0x00000001]
[01:40:43.908]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:40:43.910]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:40:43.911]      __ap = 4;
[01:40:43.911]        // -> [__ap <= 0x00000004]
[01:40:43.911]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:43.912]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:40:43.912]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:40:43.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:43.915]    </block>
[01:40:43.915]    <block atomic="false" info="">
[01:40:43.915]      __var nReset = 0x80;
[01:40:43.915]        // -> [nReset <= 0x00000080]
[01:40:43.915]      __var canReadPins = 0;
[01:40:43.915]        // -> [canReadPins <= 0x00000000]
[01:40:43.915]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:40:43.916]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:40:43.916]        // -> [canReadPins <= 0x00000001]
[01:40:43.916]    </block>
[01:40:43.916]    <control if="" while="1" timeout="200" info="">
[01:40:43.916]      // while "1"  (timeout="200")
[01:40:43.916]      // while-condition  =>  TRUE
[01:40:43.916]      // while "1"  (timeout="200")
[01:40:43.916]      // while-condition  =>  TRUE
[01:40:43.916]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.917]      // while-condition  =>  TRUE
[01:40:43.917]      // while "1"  (timeout="200")
[01:40:43.918]      // while-condition  =>  TRUE
[01:40:43.918]      // while "1"  (timeout="200")
[01:40:43.918]      // while-condition  =>  TRUE
[01:40:43.918]      // while "1"  (timeout="200")
[01:40:43.918]      // while-condition  =>  TRUE
[01:40:43.918]      // while "1"  (timeout="200")
[01:40:43.918]      // while-condition  =>  TRUE
[01:40:43.918]      // while "1"  (timeout="200")
[01:40:43.918]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.919]      // while-condition  =>  TRUE
[01:40:43.919]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.921]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.921]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.921]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.921]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.921]      // while "1"  (timeout="200")
[01:40:43.921]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.922]      // while-condition  =>  TRUE
[01:40:43.922]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.923]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.923]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.923]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.923]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.923]      // while "1"  (timeout="200")
[01:40:43.923]      // while-condition  =>  TRUE
[01:40:43.924]      // while "1"  (timeout="200")
[01:40:43.924]      // while-condition  =>  TRUE
[01:40:43.924]      // while "1"  (timeout="200")
[01:40:43.924]      // while-condition  =>  TRUE
[01:40:43.924]      // while "1"  (timeout="200")
[01:40:43.924]      // while-condition  =>  TRUE
[01:40:43.924]      // while "1"  (timeout="200")
[01:40:43.924]      // while-condition  =>  TRUE
[01:40:43.924]      // while "1"  (timeout="200")
[01:40:43.924]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.925]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.925]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.925]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.925]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.925]      // while-condition  =>  TRUE
[01:40:43.925]      // while "1"  (timeout="200")
[01:40:43.926]      // while-condition  =>  TRUE
[01:40:43.926]      // while "1"  (timeout="200")
[01:40:43.926]      // while-condition  =>  TRUE
[01:40:43.926]      // while "1"  (timeout="200")
[01:40:43.926]      // while-condition  =>  TRUE
[01:40:43.926]      // while "1"  (timeout="200")
[01:40:43.926]      // while-condition  =>  TRUE
[01:40:43.926]      // while "1"  (timeout="200")
[01:40:43.926]      // while-condition  =>  TRUE
[01:40:43.926]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.927]      // while-condition  =>  TRUE
[01:40:43.927]      // while "1"  (timeout="200")
[01:40:43.928]      // while-condition  =>  TRUE
[01:40:43.928]      // while "1"  (timeout="200")
[01:40:43.928]      // while  =>  TIMEOUT
[01:40:43.928]      // end while "1"
[01:40:43.928]    </control>
[01:40:43.928]    <control if="canReadPins" while="" timeout="0" info="">
[01:40:43.928]      // if-block "canReadPins"
[01:40:43.929]        // =>  TRUE
[01:40:43.929]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:40:43.929]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:40:43.929]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:40:43.929]        // while-condition  =>  FALSE
[01:40:43.929]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:40:43.929]      </control>
[01:40:43.929]      // end if-block "canReadPins"
[01:40:43.929]    </control>
[01:40:43.929]    <control if="!canReadPins" while="" timeout="0" info="">
[01:40:43.929]      // if-block "!canReadPins"
[01:40:43.929]        // =>  FALSE
[01:40:43.929]      // skip if-block "!canReadPins"
[01:40:43.931]    </control>
[01:40:43.931]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:40:43.931]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:43.931]        // =>  TRUE
[01:40:43.931]      <block atomic="false" info="">
[01:40:43.931]        WriteAP(0x00, 0x190008);
[01:40:43.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:43.932]        WriteAP(0xF0, 0x01);
[01:40:43.933]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:40:43.933]      </block>
[01:40:43.933]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:40:43.933]    </control>
[01:40:43.933]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:40:43.933]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:43.933]        // =>  FALSE
[01:40:43.933]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:40:43.933]    </control>
[01:40:43.933]    <block atomic="false" info="">
[01:40:43.933]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:40:43.935]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:40:43.935]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:40:43.935]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:40:43.936]      __ap = 0; //lets make sure we reset the access point selection
[01:40:43.936]        // -> [__ap <= 0x00000000]
[01:40:43.936]    </block>
[01:40:43.936]  </sequence>
[01:40:43.936]  
[01:40:43.943]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:40:43.943]  
[01:40:43.944]  <debugvars>
[01:40:43.944]    // Pre-defined
[01:40:43.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:43.944]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:43.945]    __dp=0x00000000
[01:40:43.945]    __ap=0x00000000
[01:40:43.945]    __traceout=0x00000000      (Trace Disabled)
[01:40:43.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:43.945]    __FlashAddr=0x00000000
[01:40:43.945]    __FlashLen=0x00000000
[01:40:43.945]    __FlashArg=0x00000000
[01:40:43.946]    __FlashOp=0x00000000
[01:40:43.946]    __Result=0x00000000
[01:40:43.946]  </debugvars>
[01:40:43.946]  
[01:40:43.946]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:40:43.946]    <block atomic="false" info="">
[01:40:43.946]      __var deviceID = 0;
[01:40:43.946]        // -> [deviceID <= 0x00000000]
[01:40:43.946]      __var version = 0;
[01:40:43.946]        // -> [version <= 0x00000000]
[01:40:43.946]      __var partNum = 0;
[01:40:43.947]        // -> [partNum <= 0x00000000]
[01:40:43.947]      __var manuf = 0;
[01:40:43.947]        // -> [manuf <= 0x00000000]
[01:40:43.947]      __var isMSPM0G1X0X_G3X0X = 0;
[01:40:43.947]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:40:43.947]      __var isProduction = 0;
[01:40:43.947]        // -> [isProduction <= 0x00000000]
[01:40:43.947]      __var continueId = 0;
[01:40:43.947]        // -> [continueId <= 0x00000000]
[01:40:43.948]      deviceID =   Read32(0x41C40004);
[01:40:43.949]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:40:43.949]        // -> [deviceID <= 0x2BB8802F]
[01:40:43.949]      version = deviceID >> 28;
[01:40:43.949]        // -> [version <= 0x00000002]
[01:40:43.949]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:40:43.950]        // -> [partNum <= 0x0000BB88]
[01:40:43.950]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:40:43.950]        // -> [manuf <= 0x00000017]
[01:40:43.950]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:40:43.950]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:40:43.950]      isProduction = (version > 0);
[01:40:43.950]        // -> [isProduction <= 0x00000001]
[01:40:43.950]    </block>
[01:40:43.950]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:40:43.950]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:40:43.950]        // =>  FALSE
[01:40:43.950]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:40:43.950]    </control>
[01:40:43.950]    <control if="continueId == 4" while="" timeout="0" info="">
[01:40:43.950]      // if-block "continueId == 4"
[01:40:43.950]        // =>  FALSE
[01:40:43.951]      // skip if-block "continueId == 4"
[01:40:43.951]    </control>
[01:40:43.951]    <control if="!isProduction" while="" timeout="0" info="">
[01:40:43.951]      // if-block "!isProduction"
[01:40:43.951]        // =>  FALSE
[01:40:43.952]      // skip if-block "!isProduction"
[01:40:43.952]    </control>
[01:40:43.952]  </sequence>
[01:40:43.952]  
