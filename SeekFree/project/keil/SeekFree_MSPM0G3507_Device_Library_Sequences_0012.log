/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0012.log
 *  Created     : 19:24:26 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[19:24:26.905]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:24:26.905]  
[19:24:26.905]  <debugvars>
[19:24:26.905]    // Pre-defined
[19:24:26.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:26.905]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:26.905]    __dp=0x00000000
[19:24:26.905]    __ap=0x00000000
[19:24:26.905]    __traceout=0x00000000      (Trace Disabled)
[19:24:26.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:26.907]    __FlashAddr=0x00000000
[19:24:26.907]    __FlashLen=0x00000000
[19:24:26.907]    __FlashArg=0x00000000
[19:24:26.907]    __FlashOp=0x00000000
[19:24:26.907]    __Result=0x00000000
[19:24:26.907]  </debugvars>
[19:24:26.907]  
[19:24:26.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:24:26.907]    <block atomic="false" info="">
[19:24:26.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:24:26.907]        // -> [isSWJ <= 0x00000001]
[19:24:26.908]      __var hasDormant = __protocol & 0x00020000;
[19:24:26.908]        // -> [hasDormant <= 0x00000000]
[19:24:26.908]      __var protType   = __protocol & 0x0000FFFF;
[19:24:26.908]        // -> [protType <= 0x00000002]
[19:24:26.908]    </block>
[19:24:26.908]    <control if="protType == 1" while="" timeout="0" info="">
[19:24:26.908]      // if-block "protType == 1"
[19:24:26.908]        // =>  FALSE
[19:24:26.908]      // skip if-block "protType == 1"
[19:24:26.908]    </control>
[19:24:26.908]    <control if="protType == 2" while="" timeout="0" info="">
[19:24:26.910]      // if-block "protType == 2"
[19:24:26.910]        // =>  TRUE
[19:24:26.910]      <control if="isSWJ" while="" timeout="0" info="">
[19:24:26.910]        // if-block "isSWJ"
[19:24:26.910]          // =>  TRUE
[19:24:26.910]        <control if="hasDormant" while="" timeout="0" info="">
[19:24:26.910]          // if-block "hasDormant"
[19:24:26.910]            // =>  FALSE
[19:24:26.910]          // skip if-block "hasDormant"
[19:24:26.910]        </control>
[19:24:26.910]        <control if="!hasDormant" while="" timeout="0" info="">
[19:24:26.910]          // if-block "!hasDormant"
[19:24:26.911]            // =>  TRUE
[19:24:26.911]          <block atomic="false" info="">
[19:24:26.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:24:26.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:26.915]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:24:26.919]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:24:26.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:24:26.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:26.927]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:24:26.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:24:26.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:24:26.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:24:26.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:24:26.936]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:24:26.936]          </block>
[19:24:26.936]          // end if-block "!hasDormant"
[19:24:26.936]        </control>
[19:24:26.936]        // end if-block "isSWJ"
[19:24:26.936]      </control>
[19:24:26.936]      <control if="!isSWJ" while="" timeout="0" info="">
[19:24:26.936]        // if-block "!isSWJ"
[19:24:26.936]          // =>  FALSE
[19:24:26.936]        // skip if-block "!isSWJ"
[19:24:26.936]      </control>
[19:24:26.936]      <block atomic="false" info="">
[19:24:26.936]        ReadDP(0x0);
[19:24:26.940]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:24:26.940]      </block>
[19:24:26.940]      // end if-block "protType == 2"
[19:24:26.940]    </control>
[19:24:26.940]  </sequence>
[19:24:26.940]  
[19:24:26.945]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:24:26.945]  
[19:24:26.945]  <debugvars>
[19:24:26.945]    // Pre-defined
[19:24:26.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:26.945]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:26.945]    __dp=0x00000000
[19:24:26.945]    __ap=0x00000000
[19:24:26.945]    __traceout=0x00000000      (Trace Disabled)
[19:24:26.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:26.945]    __FlashAddr=0x00000000
[19:24:26.945]    __FlashLen=0x00000000
[19:24:26.945]    __FlashArg=0x00000000
[19:24:26.948]    __FlashOp=0x00000000
[19:24:26.948]    __Result=0x00000000
[19:24:26.948]  </debugvars>
[19:24:26.948]  
[19:24:26.948]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:24:26.948]    <block atomic="false" info="">
[19:24:26.948]      __var SW_DP_ABORT       = 0x0;
[19:24:26.948]        // -> [SW_DP_ABORT <= 0x00000000]
[19:24:26.948]      __var DP_CTRL_STAT      = 0x4;
[19:24:26.948]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:24:26.948]      __var DP_SELECT         = 0x8;
[19:24:26.948]        // -> [DP_SELECT <= 0x00000008]
[19:24:26.948]      __var powered_down      = 0;
[19:24:26.948]        // -> [powered_down <= 0x00000000]
[19:24:26.948]      WriteDP(DP_SELECT, 0x00000000);
[19:24:26.949]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:24:26.949]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:24:26.954]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:24:26.954]        // -> [powered_down <= 0x00000001]
[19:24:26.954]    </block>
[19:24:26.954]    <control if="powered_down" while="" timeout="0" info="">
[19:24:26.954]      // if-block "powered_down"
[19:24:26.954]        // =>  TRUE
[19:24:26.954]      <block atomic="false" info="">
[19:24:26.954]        Message(0, "Debug/System power-up request sent");
[19:24:26.956]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:24:26.959]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:24:26.959]      </block>
[19:24:26.959]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:24:26.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:24:26.959]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:24:26.966]        // while-condition  =>  FALSE
[19:24:26.966]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:24:26.966]      </control>
[19:24:26.966]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:24:26.966]        // if-block "(__protocol & 0xFFFF) == 1"
[19:24:26.966]          // =>  FALSE
[19:24:26.966]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:24:26.966]      </control>
[19:24:26.966]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:24:26.966]        // if-block "(__protocol & 0xFFFF) == 2"
[19:24:26.966]          // =>  TRUE
[19:24:26.966]        <block atomic="false" info="">
[19:24:26.966]          Message(0, "executing SWD power up");
[19:24:26.966]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:24:26.966]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:24:26.966]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:24:26.976]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:24:26.976]        </block>
[19:24:26.976]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:24:26.976]      </control>
[19:24:26.976]      // end if-block "powered_down"
[19:24:26.976]    </control>
[19:24:26.976]    <block atomic="false" info="">
[19:24:26.976]      __var DEBUG_PORT_VAL    = 0;
[19:24:26.976]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:24:26.976]      __var ACCESS_POINT_VAL  = 0;
[19:24:26.976]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:24:26.976]      __ap = 1; 
[19:24:26.976]        // -> [__ap <= 0x00000001]
[19:24:26.976]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:24:26.976]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:24:26.976]      __ap = 4;
[19:24:26.976]        // -> [__ap <= 0x00000004]
[19:24:26.976]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:26.986]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:24:26.986]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:24:26.986]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:26.986]    </block>
[19:24:26.986]    <block atomic="false" info="">
[19:24:26.986]      __var nReset = 0x80;
[19:24:26.986]        // -> [nReset <= 0x00000080]
[19:24:26.986]      __var canReadPins = 0;
[19:24:26.986]        // -> [canReadPins <= 0x00000000]
[19:24:26.986]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:24:26.998]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:24:26.998]        // -> [canReadPins <= 0x00000001]
[19:24:26.998]    </block>
[19:24:26.998]    <control if="" while="1" timeout="200" info="">
[19:24:26.998]      // while "1"  (timeout="200")
[19:24:26.998]      // while-condition  =>  TRUE
[19:24:26.998]      // while "1"  (timeout="200")
[19:24:26.998]      // while-condition  =>  TRUE
[19:24:26.998]      // while "1"  (timeout="200")
[19:24:26.998]      // while-condition  =>  TRUE
[19:24:26.998]      // while "1"  (timeout="200")
[19:24:26.998]      // while-condition  =>  TRUE
[19:24:26.998]      // while "1"  (timeout="200")
[19:24:27.000]      // while-condition  =>  TRUE
[19:24:27.000]      // while "1"  (timeout="200")
[19:24:27.000]      // while-condition  =>  TRUE
[19:24:27.000]      // while "1"  (timeout="200")
[19:24:27.000]      // while-condition  =>  TRUE
[19:24:27.000]      // while "1"  (timeout="200")
[19:24:27.000]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.001]      // while "1"  (timeout="200")
[19:24:27.001]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.002]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.002]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.002]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.002]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.002]      // while-condition  =>  TRUE
[19:24:27.002]      // while "1"  (timeout="200")
[19:24:27.004]      // while-condition  =>  TRUE
[19:24:27.004]      // while "1"  (timeout="200")
[19:24:27.004]      // while  =>  TIMEOUT
[19:24:27.004]      // end while "1"
[19:24:27.004]    </control>
[19:24:27.004]    <control if="canReadPins" while="" timeout="0" info="">
[19:24:27.004]      // if-block "canReadPins"
[19:24:27.004]        // =>  TRUE
[19:24:27.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:24:27.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:24:27.006]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:24:27.006]        // while-condition  =>  FALSE
[19:24:27.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:24:27.006]      </control>
[19:24:27.008]      // end if-block "canReadPins"
[19:24:27.008]    </control>
[19:24:27.008]    <control if="!canReadPins" while="" timeout="0" info="">
[19:24:27.008]      // if-block "!canReadPins"
[19:24:27.008]        // =>  FALSE
[19:24:27.008]      // skip if-block "!canReadPins"
[19:24:27.008]    </control>
[19:24:27.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:24:27.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:27.008]        // =>  TRUE
[19:24:27.008]      <block atomic="false" info="">
[19:24:27.008]        WriteAP(0x00, 0x190008);
[19:24:27.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:27.009]        WriteAP(0xF0, 0x01);
[19:24:27.025]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:24:27.027]      </block>
[19:24:27.027]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:24:27.027]    </control>
[19:24:27.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:24:27.027]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:27.027]        // =>  FALSE
[19:24:27.027]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:24:27.027]    </control>
[19:24:27.027]    <block atomic="false" info="">
[19:24:27.027]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:24:27.042]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:24:27.042]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:24:27.042]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:24:27.045]      __ap = 0; //lets make sure we reset the access point selection
[19:24:27.045]        // -> [__ap <= 0x00000000]
[19:24:27.045]    </block>
[19:24:27.045]  </sequence>
[19:24:27.045]  
[19:24:27.077]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:24:27.077]  
[19:24:27.077]  <debugvars>
[19:24:27.077]    // Pre-defined
[19:24:27.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:24:27.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:24:27.077]    __dp=0x00000000
[19:24:27.077]    __ap=0x00000000
[19:24:27.077]    __traceout=0x00000000      (Trace Disabled)
[19:24:27.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:24:27.077]    __FlashAddr=0x00000000
[19:24:27.077]    __FlashLen=0x00000000
[19:24:27.077]    __FlashArg=0x00000000
[19:24:27.077]    __FlashOp=0x00000000
[19:24:27.077]    __Result=0x00000000
[19:24:27.077]  </debugvars>
[19:24:27.077]  
[19:24:27.077]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:24:27.077]    <block atomic="false" info="">
[19:24:27.077]      __var deviceID = 0;
[19:24:27.077]        // -> [deviceID <= 0x00000000]
[19:24:27.077]      __var version = 0;
[19:24:27.077]        // -> [version <= 0x00000000]
[19:24:27.077]      __var partNum = 0;
[19:24:27.077]        // -> [partNum <= 0x00000000]
[19:24:27.077]      __var manuf = 0;
[19:24:27.077]        // -> [manuf <= 0x00000000]
[19:24:27.077]      __var isMSPM0G1X0X_G3X0X = 0;
[19:24:27.077]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:24:27.077]      __var isProduction = 0;
[19:24:27.077]        // -> [isProduction <= 0x00000000]
[19:24:27.077]      __var continueId = 0;
[19:24:27.077]        // -> [continueId <= 0x00000000]
[19:24:27.077]      deviceID =   Read32(0x41C40004);
[19:24:27.097]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:24:27.097]        // -> [deviceID <= 0x2BB8802F]
[19:24:27.097]      version = deviceID >> 28;
[19:24:27.097]        // -> [version <= 0x00000002]
[19:24:27.097]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:24:27.097]        // -> [partNum <= 0x0000BB88]
[19:24:27.097]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:24:27.097]        // -> [manuf <= 0x00000017]
[19:24:27.097]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:24:27.097]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:24:27.097]      isProduction = (version > 0);
[19:24:27.097]        // -> [isProduction <= 0x00000001]
[19:24:27.097]    </block>
[19:24:27.097]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:24:27.097]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:24:27.097]        // =>  FALSE
[19:24:27.097]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:24:27.097]    </control>
[19:24:27.097]    <control if="continueId == 4" while="" timeout="0" info="">
[19:24:27.097]      // if-block "continueId == 4"
[19:24:27.097]        // =>  FALSE
[19:24:27.097]      // skip if-block "continueId == 4"
[19:24:27.097]    </control>
[19:24:27.097]    <control if="!isProduction" while="" timeout="0" info="">
[19:24:27.097]      // if-block "!isProduction"
[19:24:27.097]        // =>  FALSE
[19:24:27.097]      // skip if-block "!isProduction"
[19:24:27.097]    </control>
[19:24:27.097]  </sequence>
[19:24:27.097]  
[19:27:55.456]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:27:55.456]  
[19:27:55.469]  <debugvars>
[19:27:55.469]    // Pre-defined
[19:27:55.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:55.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:55.469]    __dp=0x00000000
[19:27:55.469]    __ap=0x00000000
[19:27:55.469]    __traceout=0x00000000      (Trace Disabled)
[19:27:55.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:55.469]    __FlashAddr=0x00000000
[19:27:55.469]    __FlashLen=0x00000000
[19:27:55.469]    __FlashArg=0x00000000
[19:27:55.469]    __FlashOp=0x00000000
[19:27:55.469]    __Result=0x00000000
[19:27:55.469]  </debugvars>
[19:27:55.469]  
[19:27:55.469]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:27:55.469]    <block atomic="false" info="">
[19:27:55.469]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:27:55.469]        // -> [isSWJ <= 0x00000001]
[19:27:55.469]      __var hasDormant = __protocol & 0x00020000;
[19:27:55.469]        // -> [hasDormant <= 0x00000000]
[19:27:55.469]      __var protType   = __protocol & 0x0000FFFF;
[19:27:55.469]        // -> [protType <= 0x00000002]
[19:27:55.469]    </block>
[19:27:55.469]    <control if="protType == 1" while="" timeout="0" info="">
[19:27:55.469]      // if-block "protType == 1"
[19:27:55.469]        // =>  FALSE
[19:27:55.469]      // skip if-block "protType == 1"
[19:27:55.469]    </control>
[19:27:55.469]    <control if="protType == 2" while="" timeout="0" info="">
[19:27:55.469]      // if-block "protType == 2"
[19:27:55.469]        // =>  TRUE
[19:27:55.469]      <control if="isSWJ" while="" timeout="0" info="">
[19:27:55.469]        // if-block "isSWJ"
[19:27:55.469]          // =>  TRUE
[19:27:55.469]        <control if="hasDormant" while="" timeout="0" info="">
[19:27:55.469]          // if-block "hasDormant"
[19:27:55.469]            // =>  FALSE
[19:27:55.469]          // skip if-block "hasDormant"
[19:27:55.469]        </control>
[19:27:55.469]        <control if="!hasDormant" while="" timeout="0" info="">
[19:27:55.469]          // if-block "!hasDormant"
[19:27:55.469]            // =>  TRUE
[19:27:55.469]          <block atomic="false" info="">
[19:27:55.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:27:55.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:55.476]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:27:55.486]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:27:55.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:27:55.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:55.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:27:55.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:27:55.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:27:55.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:55.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:27:55.496]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:27:55.496]          </block>
[19:27:55.496]          // end if-block "!hasDormant"
[19:27:55.496]        </control>
[19:27:55.496]        // end if-block "isSWJ"
[19:27:55.496]      </control>
[19:27:55.496]      <control if="!isSWJ" while="" timeout="0" info="">
[19:27:55.496]        // if-block "!isSWJ"
[19:27:55.496]          // =>  FALSE
[19:27:55.496]        // skip if-block "!isSWJ"
[19:27:55.496]      </control>
[19:27:55.496]      <block atomic="false" info="">
[19:27:55.496]        ReadDP(0x0);
[19:27:55.499]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:27:55.499]      </block>
[19:27:55.499]      // end if-block "protType == 2"
[19:27:55.499]    </control>
[19:27:55.501]  </sequence>
[19:27:55.501]  
[19:27:55.506]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:27:55.506]  
[19:27:55.506]  <debugvars>
[19:27:55.506]    // Pre-defined
[19:27:55.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:55.506]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:55.506]    __dp=0x00000000
[19:27:55.506]    __ap=0x00000000
[19:27:55.506]    __traceout=0x00000000      (Trace Disabled)
[19:27:55.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:55.506]    __FlashAddr=0x00000000
[19:27:55.506]    __FlashLen=0x00000000
[19:27:55.509]    __FlashArg=0x00000000
[19:27:55.509]    __FlashOp=0x00000000
[19:27:55.509]    __Result=0x00000000
[19:27:55.509]  </debugvars>
[19:27:55.509]  
[19:27:55.509]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:27:55.509]    <block atomic="false" info="">
[19:27:55.509]      __var SW_DP_ABORT       = 0x0;
[19:27:55.509]        // -> [SW_DP_ABORT <= 0x00000000]
[19:27:55.509]      __var DP_CTRL_STAT      = 0x4;
[19:27:55.509]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:27:55.509]      __var DP_SELECT         = 0x8;
[19:27:55.509]        // -> [DP_SELECT <= 0x00000008]
[19:27:55.509]      __var powered_down      = 0;
[19:27:55.509]        // -> [powered_down <= 0x00000000]
[19:27:55.509]      WriteDP(DP_SELECT, 0x00000000);
[19:27:55.509]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:27:55.509]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:27:55.509]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:27:55.509]        // -> [powered_down <= 0x00000001]
[19:27:55.509]    </block>
[19:27:55.509]    <control if="powered_down" while="" timeout="0" info="">
[19:27:55.509]      // if-block "powered_down"
[19:27:55.509]        // =>  TRUE
[19:27:55.509]      <block atomic="false" info="">
[19:27:55.509]        Message(0, "Debug/System power-up request sent");
[19:27:55.516]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:27:55.516]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:27:55.516]      </block>
[19:27:55.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:27:55.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:27:55.516]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:27:55.516]        // while-condition  =>  FALSE
[19:27:55.516]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:27:55.516]      </control>
[19:27:55.516]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:27:55.516]        // if-block "(__protocol & 0xFFFF) == 1"
[19:27:55.516]          // =>  FALSE
[19:27:55.516]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:27:55.516]      </control>
[19:27:55.516]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:27:55.516]        // if-block "(__protocol & 0xFFFF) == 2"
[19:27:55.516]          // =>  TRUE
[19:27:55.516]        <block atomic="false" info="">
[19:27:55.516]          Message(0, "executing SWD power up");
[19:27:55.516]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:27:55.528]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:27:55.528]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:27:55.530]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:27:55.530]        </block>
[19:27:55.530]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:27:55.530]      </control>
[19:27:55.530]      // end if-block "powered_down"
[19:27:55.530]    </control>
[19:27:55.530]    <block atomic="false" info="">
[19:27:55.530]      __var DEBUG_PORT_VAL    = 0;
[19:27:55.530]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:27:55.530]      __var ACCESS_POINT_VAL  = 0;
[19:27:55.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:27:55.530]      __ap = 1; 
[19:27:55.530]        // -> [__ap <= 0x00000001]
[19:27:55.530]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:27:55.537]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:27:55.537]      __ap = 4;
[19:27:55.537]        // -> [__ap <= 0x00000004]
[19:27:55.537]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:55.537]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:27:55.537]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:27:55.537]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:55.547]    </block>
[19:27:55.547]    <block atomic="false" info="">
[19:27:55.547]      __var nReset = 0x80;
[19:27:55.547]        // -> [nReset <= 0x00000080]
[19:27:55.547]      __var canReadPins = 0;
[19:27:55.547]        // -> [canReadPins <= 0x00000000]
[19:27:55.547]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:27:55.547]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:27:55.547]        // -> [canReadPins <= 0x00000001]
[19:27:55.547]    </block>
[19:27:55.547]    <control if="" while="1" timeout="200" info="">
[19:27:55.547]      // while "1"  (timeout="200")
[19:27:55.547]      // while-condition  =>  TRUE
[19:27:55.547]      // while "1"  (timeout="200")
[19:27:55.547]      // while-condition  =>  TRUE
[19:27:55.547]      // while "1"  (timeout="200")
[19:27:55.547]      // while-condition  =>  TRUE
[19:27:55.547]      // while "1"  (timeout="200")
[19:27:55.547]      // while-condition  =>  TRUE
[19:27:55.555]      // while "1"  (timeout="200")
[19:27:55.555]      // while  =>  TIMEOUT
[19:27:55.555]      // end while "1"
[19:27:55.555]    </control>
[19:27:55.555]    <control if="canReadPins" while="" timeout="0" info="">
[19:27:55.555]      // if-block "canReadPins"
[19:27:55.555]        // =>  TRUE
[19:27:55.555]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:27:55.555]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:27:55.557]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:27:55.557]        // while-condition  =>  FALSE
[19:27:55.557]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:27:55.557]      </control>
[19:27:55.557]      // end if-block "canReadPins"
[19:27:55.557]    </control>
[19:27:55.557]    <control if="!canReadPins" while="" timeout="0" info="">
[19:27:55.557]      // if-block "!canReadPins"
[19:27:55.557]        // =>  FALSE
[19:27:55.557]      // skip if-block "!canReadPins"
[19:27:55.557]    </control>
[19:27:55.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:27:55.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:55.557]        // =>  TRUE
[19:27:55.557]      <block atomic="false" info="">
[19:27:55.557]        WriteAP(0x00, 0x190008);
[19:27:55.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:55.557]        WriteAP(0xF0, 0x01);
[19:27:55.557]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:55.557]      </block>
[19:27:55.557]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:55.557]    </control>
[19:27:55.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:27:55.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:55.557]        // =>  FALSE
[19:27:55.557]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:55.557]    </control>
[19:27:55.557]    <block atomic="false" info="">
[19:27:55.557]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:55.567]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:27:55.567]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:27:55.567]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:55.577]      __ap = 0; //lets make sure we reset the access point selection
[19:27:55.577]        // -> [__ap <= 0x00000000]
[19:27:55.577]    </block>
[19:27:55.577]  </sequence>
[19:27:55.577]  
[19:27:55.618]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:27:55.618]  
[19:27:55.618]  <debugvars>
[19:27:55.618]    // Pre-defined
[19:27:55.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:55.618]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:55.618]    __dp=0x00000000
[19:27:55.618]    __ap=0x00000000
[19:27:55.618]    __traceout=0x00000000      (Trace Disabled)
[19:27:55.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:55.618]    __FlashAddr=0x00000000
[19:27:55.618]    __FlashLen=0x00000000
[19:27:55.618]    __FlashArg=0x00000000
[19:27:55.618]    __FlashOp=0x00000000
[19:27:55.618]    __Result=0x00000000
[19:27:55.618]  </debugvars>
[19:27:55.618]  
[19:27:55.618]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:27:55.618]    <block atomic="false" info="">
[19:27:55.618]      __var deviceID = 0;
[19:27:55.618]        // -> [deviceID <= 0x00000000]
[19:27:55.618]      __var version = 0;
[19:27:55.618]        // -> [version <= 0x00000000]
[19:27:55.618]      __var partNum = 0;
[19:27:55.618]        // -> [partNum <= 0x00000000]
[19:27:55.618]      __var manuf = 0;
[19:27:55.618]        // -> [manuf <= 0x00000000]
[19:27:55.618]      __var isMSPM0G1X0X_G3X0X = 0;
[19:27:55.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:27:55.624]      __var isProduction = 0;
[19:27:55.624]        // -> [isProduction <= 0x00000000]
[19:27:55.624]      __var continueId = 0;
[19:27:55.624]        // -> [continueId <= 0x00000000]
[19:27:55.624]      deviceID =   Read32(0x41C40004);
[19:27:55.628]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:27:55.628]        // -> [deviceID <= 0x2BB8802F]
[19:27:55.628]      version = deviceID >> 28;
[19:27:55.638]        // -> [version <= 0x00000002]
[19:27:55.638]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:27:55.638]        // -> [partNum <= 0x0000BB88]
[19:27:55.638]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:27:55.638]        // -> [manuf <= 0x00000017]
[19:27:55.638]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:27:55.638]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:27:55.638]      isProduction = (version > 0);
[19:27:55.638]        // -> [isProduction <= 0x00000001]
[19:27:55.638]    </block>
[19:27:55.638]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:27:55.638]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:27:55.638]        // =>  FALSE
[19:27:55.638]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:27:55.638]    </control>
[19:27:55.638]    <control if="continueId == 4" while="" timeout="0" info="">
[19:27:55.638]      // if-block "continueId == 4"
[19:27:55.638]        // =>  FALSE
[19:27:55.638]      // skip if-block "continueId == 4"
[19:27:55.638]    </control>
[19:27:55.638]    <control if="!isProduction" while="" timeout="0" info="">
[19:27:55.638]      // if-block "!isProduction"
[19:27:55.638]        // =>  FALSE
[19:27:55.638]      // skip if-block "!isProduction"
[19:27:55.638]    </control>
[19:27:55.638]  </sequence>
[19:27:55.638]  
[19:34:06.282]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:34:06.282]  
[19:34:06.292]  <debugvars>
[19:34:06.292]    // Pre-defined
[19:34:06.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:06.292]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:06.292]    __dp=0x00000000
[19:34:06.292]    __ap=0x00000000
[19:34:06.292]    __traceout=0x00000000      (Trace Disabled)
[19:34:06.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:06.292]    __FlashAddr=0x00000000
[19:34:06.292]    __FlashLen=0x00000000
[19:34:06.292]    __FlashArg=0x00000000
[19:34:06.292]    __FlashOp=0x00000000
[19:34:06.292]    __Result=0x00000000
[19:34:06.292]  </debugvars>
[19:34:06.292]  
[19:34:06.292]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:34:06.292]    <block atomic="false" info="">
[19:34:06.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:34:06.292]        // -> [isSWJ <= 0x00000001]
[19:34:06.292]      __var hasDormant = __protocol & 0x00020000;
[19:34:06.292]        // -> [hasDormant <= 0x00000000]
[19:34:06.292]      __var protType   = __protocol & 0x0000FFFF;
[19:34:06.292]        // -> [protType <= 0x00000002]
[19:34:06.292]    </block>
[19:34:06.292]    <control if="protType == 1" while="" timeout="0" info="">
[19:34:06.292]      // if-block "protType == 1"
[19:34:06.292]        // =>  FALSE
[19:34:06.292]      // skip if-block "protType == 1"
[19:34:06.292]    </control>
[19:34:06.292]    <control if="protType == 2" while="" timeout="0" info="">
[19:34:06.292]      // if-block "protType == 2"
[19:34:06.292]        // =>  TRUE
[19:34:06.292]      <control if="isSWJ" while="" timeout="0" info="">
[19:34:06.292]        // if-block "isSWJ"
[19:34:06.292]          // =>  TRUE
[19:34:06.292]        <control if="hasDormant" while="" timeout="0" info="">
[19:34:06.292]          // if-block "hasDormant"
[19:34:06.292]            // =>  FALSE
[19:34:06.292]          // skip if-block "hasDormant"
[19:34:06.292]        </control>
[19:34:06.292]        <control if="!hasDormant" while="" timeout="0" info="">
[19:34:06.292]          // if-block "!hasDormant"
[19:34:06.292]            // =>  TRUE
[19:34:06.292]          <block atomic="false" info="">
[19:34:06.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:34:06.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:06.292]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:34:06.292]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:34:06.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:34:06.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:06.292]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:34:06.302]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:34:06.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:34:06.302]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:34:06.302]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:34:06.302]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:34:06.302]          </block>
[19:34:06.302]          // end if-block "!hasDormant"
[19:34:06.302]        </control>
[19:34:06.302]        // end if-block "isSWJ"
[19:34:06.302]      </control>
[19:34:06.302]      <control if="!isSWJ" while="" timeout="0" info="">
[19:34:06.302]        // if-block "!isSWJ"
[19:34:06.302]          // =>  FALSE
[19:34:06.302]        // skip if-block "!isSWJ"
[19:34:06.302]      </control>
[19:34:06.302]      <block atomic="false" info="">
[19:34:06.302]        ReadDP(0x0);
[19:34:06.302]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:34:06.302]      </block>
[19:34:06.302]      // end if-block "protType == 2"
[19:34:06.302]    </control>
[19:34:06.312]  </sequence>
[19:34:06.312]  
[19:34:06.312]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:34:06.312]  
[19:34:06.312]  <debugvars>
[19:34:06.312]    // Pre-defined
[19:34:06.312]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:06.312]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:06.312]    __dp=0x00000000
[19:34:06.312]    __ap=0x00000000
[19:34:06.312]    __traceout=0x00000000      (Trace Disabled)
[19:34:06.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:06.312]    __FlashAddr=0x00000000
[19:34:06.312]    __FlashLen=0x00000000
[19:34:06.312]    __FlashArg=0x00000000
[19:34:06.312]    __FlashOp=0x00000000
[19:34:06.312]    __Result=0x00000000
[19:34:06.312]  </debugvars>
[19:34:06.312]  
[19:34:06.312]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:34:06.312]    <block atomic="false" info="">
[19:34:06.312]      __var SW_DP_ABORT       = 0x0;
[19:34:06.312]        // -> [SW_DP_ABORT <= 0x00000000]
[19:34:06.312]      __var DP_CTRL_STAT      = 0x4;
[19:34:06.312]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:34:06.312]      __var DP_SELECT         = 0x8;
[19:34:06.312]        // -> [DP_SELECT <= 0x00000008]
[19:34:06.312]      __var powered_down      = 0;
[19:34:06.312]        // -> [powered_down <= 0x00000000]
[19:34:06.312]      WriteDP(DP_SELECT, 0x00000000);
[19:34:06.312]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:34:06.312]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:34:06.312]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:34:06.322]        // -> [powered_down <= 0x00000001]
[19:34:06.322]    </block>
[19:34:06.322]    <control if="powered_down" while="" timeout="0" info="">
[19:34:06.322]      // if-block "powered_down"
[19:34:06.322]        // =>  TRUE
[19:34:06.322]      <block atomic="false" info="">
[19:34:06.322]        Message(0, "Debug/System power-up request sent");
[19:34:06.322]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:34:06.322]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:34:06.322]      </block>
[19:34:06.322]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:34:06.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:34:06.322]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:34:06.322]        // while-condition  =>  FALSE
[19:34:06.322]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:34:06.332]      </control>
[19:34:06.332]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:34:06.332]        // if-block "(__protocol & 0xFFFF) == 1"
[19:34:06.332]          // =>  FALSE
[19:34:06.332]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:34:06.332]      </control>
[19:34:06.332]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:34:06.332]        // if-block "(__protocol & 0xFFFF) == 2"
[19:34:06.332]          // =>  TRUE
[19:34:06.332]        <block atomic="false" info="">
[19:34:06.332]          Message(0, "executing SWD power up");
[19:34:06.332]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:34:06.342]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:34:06.342]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:34:06.342]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:34:06.342]        </block>
[19:34:06.342]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:34:06.342]      </control>
[19:34:06.342]      // end if-block "powered_down"
[19:34:06.342]    </control>
[19:34:06.342]    <block atomic="false" info="">
[19:34:06.342]      __var DEBUG_PORT_VAL    = 0;
[19:34:06.342]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:34:06.342]      __var ACCESS_POINT_VAL  = 0;
[19:34:06.342]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:34:06.342]      __ap = 1; 
[19:34:06.342]        // -> [__ap <= 0x00000001]
[19:34:06.342]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:34:06.342]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:34:06.342]      __ap = 4;
[19:34:06.342]        // -> [__ap <= 0x00000004]
[19:34:06.342]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:34:06.352]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:34:06.352]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:34:06.352]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:34:06.352]    </block>
[19:34:06.352]    <block atomic="false" info="">
[19:34:06.352]      __var nReset = 0x80;
[19:34:06.352]        // -> [nReset <= 0x00000080]
[19:34:06.352]      __var canReadPins = 0;
[19:34:06.352]        // -> [canReadPins <= 0x00000000]
[19:34:06.352]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:34:06.352]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:34:06.352]        // -> [canReadPins <= 0x00000001]
[19:34:06.352]    </block>
[19:34:06.352]    <control if="" while="1" timeout="200" info="">
[19:34:06.352]      // while "1"  (timeout="200")
[19:34:06.352]      // while-condition  =>  TRUE
[19:34:06.352]      // while "1"  (timeout="200")
[19:34:06.352]      // while-condition  =>  TRUE
[19:34:06.352]      // while "1"  (timeout="200")
[19:34:06.352]      // while-condition  =>  TRUE
[19:34:06.352]      // while "1"  (timeout="200")
[19:34:06.352]      // while-condition  =>  TRUE
[19:34:06.352]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.362]      // while "1"  (timeout="200")
[19:34:06.362]      // while-condition  =>  TRUE
[19:34:06.372]      // while "1"  (timeout="200")
[19:34:06.372]      // while  =>  TIMEOUT
[19:34:06.372]      // end while "1"
[19:34:06.372]    </control>
[19:34:06.372]    <control if="canReadPins" while="" timeout="0" info="">
[19:34:06.372]      // if-block "canReadPins"
[19:34:06.372]        // =>  TRUE
[19:34:06.372]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:34:06.372]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:34:06.373]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:34:06.373]        // while-condition  =>  FALSE
[19:34:06.373]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:34:06.373]      </control>
[19:34:06.373]      // end if-block "canReadPins"
[19:34:06.373]    </control>
[19:34:06.373]    <control if="!canReadPins" while="" timeout="0" info="">
[19:34:06.373]      // if-block "!canReadPins"
[19:34:06.373]        // =>  FALSE
[19:34:06.373]      // skip if-block "!canReadPins"
[19:34:06.373]    </control>
[19:34:06.373]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:34:06.373]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:34:06.373]        // =>  TRUE
[19:34:06.373]      <block atomic="false" info="">
[19:34:06.373]        WriteAP(0x00, 0x190008);
[19:34:06.373]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:34:06.373]        WriteAP(0xF0, 0x01);
[19:34:06.382]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:34:06.382]      </block>
[19:34:06.382]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:34:06.382]    </control>
[19:34:06.384]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:34:06.384]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:34:06.384]        // =>  FALSE
[19:34:06.384]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:34:06.384]    </control>
[19:34:06.384]    <block atomic="false" info="">
[19:34:06.384]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:34:06.384]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:34:06.384]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:34:06.384]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:34:06.384]      __ap = 0; //lets make sure we reset the access point selection
[19:34:06.384]        // -> [__ap <= 0x00000000]
[19:34:06.384]    </block>
[19:34:06.384]  </sequence>
[19:34:06.384]  
[19:34:06.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:34:06.412]  
[19:34:06.412]  <debugvars>
[19:34:06.412]    // Pre-defined
[19:34:06.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:34:06.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:34:06.412]    __dp=0x00000000
[19:34:06.412]    __ap=0x00000000
[19:34:06.412]    __traceout=0x00000000      (Trace Disabled)
[19:34:06.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:34:06.412]    __FlashAddr=0x00000000
[19:34:06.412]    __FlashLen=0x00000000
[19:34:06.412]    __FlashArg=0x00000000
[19:34:06.412]    __FlashOp=0x00000000
[19:34:06.412]    __Result=0x00000000
[19:34:06.412]  </debugvars>
[19:34:06.412]  
[19:34:06.412]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:34:06.412]    <block atomic="false" info="">
[19:34:06.412]      __var deviceID = 0;
[19:34:06.422]        // -> [deviceID <= 0x00000000]
[19:34:06.422]      __var version = 0;
[19:34:06.422]        // -> [version <= 0x00000000]
[19:34:06.422]      __var partNum = 0;
[19:34:06.422]        // -> [partNum <= 0x00000000]
[19:34:06.422]      __var manuf = 0;
[19:34:06.422]        // -> [manuf <= 0x00000000]
[19:34:06.422]      __var isMSPM0G1X0X_G3X0X = 0;
[19:34:06.422]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:34:06.422]      __var isProduction = 0;
[19:34:06.422]        // -> [isProduction <= 0x00000000]
[19:34:06.422]      __var continueId = 0;
[19:34:06.422]        // -> [continueId <= 0x00000000]
[19:34:06.422]      deviceID =   Read32(0x41C40004);
[19:34:06.432]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:34:06.432]        // -> [deviceID <= 0x2BB8802F]
[19:34:06.432]      version = deviceID >> 28;
[19:34:06.432]        // -> [version <= 0x00000002]
[19:34:06.432]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:34:06.432]        // -> [partNum <= 0x0000BB88]
[19:34:06.432]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:34:06.432]        // -> [manuf <= 0x00000017]
[19:34:06.432]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:34:06.432]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:34:06.432]      isProduction = (version > 0);
[19:34:06.432]        // -> [isProduction <= 0x00000001]
[19:34:06.432]    </block>
[19:34:06.432]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:34:06.432]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:34:06.432]        // =>  FALSE
[19:34:06.432]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:34:06.432]    </control>
[19:34:06.432]    <control if="continueId == 4" while="" timeout="0" info="">
[19:34:06.432]      // if-block "continueId == 4"
[19:34:06.432]        // =>  FALSE
[19:34:06.432]      // skip if-block "continueId == 4"
[19:34:06.432]    </control>
[19:34:06.432]    <control if="!isProduction" while="" timeout="0" info="">
[19:34:06.432]      // if-block "!isProduction"
[19:34:06.432]        // =>  FALSE
[19:34:06.432]      // skip if-block "!isProduction"
[19:34:06.432]    </control>
[19:34:06.432]  </sequence>
[19:34:06.432]  
[19:44:48.798]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:44:48.798]  
[19:44:48.811]  <debugvars>
[19:44:48.811]    // Pre-defined
[19:44:48.811]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:48.811]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:44:48.811]    __dp=0x00000000
[19:44:48.811]    __ap=0x00000000
[19:44:48.811]    __traceout=0x00000000      (Trace Disabled)
[19:44:48.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:48.811]    __FlashAddr=0x00000000
[19:44:48.811]    __FlashLen=0x00000000
[19:44:48.811]    __FlashArg=0x00000000
[19:44:48.811]    __FlashOp=0x00000000
[19:44:48.811]    __Result=0x00000000
[19:44:48.811]  </debugvars>
[19:44:48.811]  
[19:44:48.811]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:44:48.811]    <block atomic="false" info="">
[19:44:48.811]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:44:48.811]        // -> [isSWJ <= 0x00000001]
[19:44:48.811]      __var hasDormant = __protocol & 0x00020000;
[19:44:48.811]        // -> [hasDormant <= 0x00000000]
[19:44:48.811]      __var protType   = __protocol & 0x0000FFFF;
[19:44:48.811]        // -> [protType <= 0x00000002]
[19:44:48.811]    </block>
[19:44:48.811]    <control if="protType == 1" while="" timeout="0" info="">
[19:44:48.811]      // if-block "protType == 1"
[19:44:48.811]        // =>  FALSE
[19:44:48.811]      // skip if-block "protType == 1"
[19:44:48.811]    </control>
[19:44:48.811]    <control if="protType == 2" while="" timeout="0" info="">
[19:44:48.811]      // if-block "protType == 2"
[19:44:48.811]        // =>  TRUE
[19:44:48.811]      <control if="isSWJ" while="" timeout="0" info="">
[19:44:48.811]        // if-block "isSWJ"
[19:44:48.811]          // =>  TRUE
[19:44:48.811]        <control if="hasDormant" while="" timeout="0" info="">
[19:44:48.811]          // if-block "hasDormant"
[19:44:48.811]            // =>  FALSE
[19:44:48.811]          // skip if-block "hasDormant"
[19:44:48.811]        </control>
[19:44:48.811]        <control if="!hasDormant" while="" timeout="0" info="">
[19:44:48.811]          // if-block "!hasDormant"
[19:44:48.811]            // =>  TRUE
[19:44:48.811]          <block atomic="false" info="">
[19:44:48.811]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:44:48.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:48.811]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:44:48.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:44:48.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:44:48.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:48.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:44:48.828]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:44:48.828]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:44:48.828]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:48.828]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:44:48.828]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:44:48.828]          </block>
[19:44:48.838]          // end if-block "!hasDormant"
[19:44:48.838]        </control>
[19:44:48.838]        // end if-block "isSWJ"
[19:44:48.838]      </control>
[19:44:48.838]      <control if="!isSWJ" while="" timeout="0" info="">
[19:44:48.838]        // if-block "!isSWJ"
[19:44:48.838]          // =>  FALSE
[19:44:48.838]        // skip if-block "!isSWJ"
[19:44:48.838]      </control>
[19:44:48.838]      <block atomic="false" info="">
[19:44:48.838]        ReadDP(0x0);
[19:44:48.838]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:44:48.838]      </block>
[19:44:48.838]      // end if-block "protType == 2"
[19:44:48.838]    </control>
[19:44:48.838]  </sequence>
[19:44:48.838]  
[19:44:48.848]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:44:48.848]  
[19:44:48.848]  <debugvars>
[19:44:48.848]    // Pre-defined
[19:44:48.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:48.848]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:44:48.848]    __dp=0x00000000
[19:44:48.848]    __ap=0x00000000
[19:44:48.848]    __traceout=0x00000000      (Trace Disabled)
[19:44:48.848]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:48.848]    __FlashAddr=0x00000000
[19:44:48.848]    __FlashLen=0x00000000
[19:44:48.848]    __FlashArg=0x00000000
[19:44:48.848]    __FlashOp=0x00000000
[19:44:48.848]    __Result=0x00000000
[19:44:48.848]  </debugvars>
[19:44:48.848]  
[19:44:48.848]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:44:48.848]    <block atomic="false" info="">
[19:44:48.848]      __var SW_DP_ABORT       = 0x0;
[19:44:48.848]        // -> [SW_DP_ABORT <= 0x00000000]
[19:44:48.848]      __var DP_CTRL_STAT      = 0x4;
[19:44:48.848]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:44:48.848]      __var DP_SELECT         = 0x8;
[19:44:48.848]        // -> [DP_SELECT <= 0x00000008]
[19:44:48.848]      __var powered_down      = 0;
[19:44:48.848]        // -> [powered_down <= 0x00000000]
[19:44:48.848]      WriteDP(DP_SELECT, 0x00000000);
[19:44:48.858]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:44:48.858]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:44:48.858]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:44:48.858]        // -> [powered_down <= 0x00000001]
[19:44:48.858]    </block>
[19:44:48.858]    <control if="powered_down" while="" timeout="0" info="">
[19:44:48.858]      // if-block "powered_down"
[19:44:48.858]        // =>  TRUE
[19:44:48.858]      <block atomic="false" info="">
[19:44:48.858]        Message(0, "Debug/System power-up request sent");
[19:44:48.858]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:44:48.868]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:44:48.868]      </block>
[19:44:48.868]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:44:48.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:44:48.868]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:44:48.868]        // while-condition  =>  FALSE
[19:44:48.868]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:44:48.868]      </control>
[19:44:48.868]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:44:48.868]        // if-block "(__protocol & 0xFFFF) == 1"
[19:44:48.868]          // =>  FALSE
[19:44:48.868]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:44:48.868]      </control>
[19:44:48.868]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:44:48.868]        // if-block "(__protocol & 0xFFFF) == 2"
[19:44:48.868]          // =>  TRUE
[19:44:48.868]        <block atomic="false" info="">
[19:44:48.868]          Message(0, "executing SWD power up");
[19:44:48.868]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:44:48.878]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:44:48.878]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:44:48.878]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:44:48.878]        </block>
[19:44:48.878]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:44:48.878]      </control>
[19:44:48.878]      // end if-block "powered_down"
[19:44:48.878]    </control>
[19:44:48.878]    <block atomic="false" info="">
[19:44:48.878]      __var DEBUG_PORT_VAL    = 0;
[19:44:48.878]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:44:48.878]      __var ACCESS_POINT_VAL  = 0;
[19:44:48.878]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:44:48.878]      __ap = 1; 
[19:44:48.878]        // -> [__ap <= 0x00000001]
[19:44:48.878]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:44:48.888]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:44:48.888]      __ap = 4;
[19:44:48.888]        // -> [__ap <= 0x00000004]
[19:44:48.888]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:44:48.898]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:44:48.898]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:44:48.898]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:44:48.898]    </block>
[19:44:48.898]    <block atomic="false" info="">
[19:44:48.898]      __var nReset = 0x80;
[19:44:48.898]        // -> [nReset <= 0x00000080]
[19:44:48.898]      __var canReadPins = 0;
[19:44:48.898]        // -> [canReadPins <= 0x00000000]
[19:44:48.898]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:44:48.908]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:44:48.908]        // -> [canReadPins <= 0x00000001]
[19:44:48.908]    </block>
[19:44:48.908]    <control if="" while="1" timeout="200" info="">
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.908]      // while "1"  (timeout="200")
[19:44:48.908]      // while-condition  =>  TRUE
[19:44:48.918]      // while "1"  (timeout="200")
[19:44:48.918]      // while  =>  TIMEOUT
[19:44:48.918]      // end while "1"
[19:44:48.918]    </control>
[19:44:48.918]    <control if="canReadPins" while="" timeout="0" info="">
[19:44:48.918]      // if-block "canReadPins"
[19:44:48.918]        // =>  TRUE
[19:44:48.918]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:44:48.918]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:44:48.918]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:44:48.918]        // while-condition  =>  FALSE
[19:44:48.918]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:44:48.918]      </control>
[19:44:48.918]      // end if-block "canReadPins"
[19:44:48.918]    </control>
[19:44:48.918]    <control if="!canReadPins" while="" timeout="0" info="">
[19:44:48.918]      // if-block "!canReadPins"
[19:44:48.918]        // =>  FALSE
[19:44:48.918]      // skip if-block "!canReadPins"
[19:44:48.918]    </control>
[19:44:48.918]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:44:48.918]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:44:48.918]        // =>  TRUE
[19:44:48.918]      <block atomic="false" info="">
[19:44:48.918]        WriteAP(0x00, 0x190008);
[19:44:48.918]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:44:48.918]        WriteAP(0xF0, 0x01);
[19:44:48.930]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:44:48.930]      </block>
[19:44:48.930]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:44:48.930]    </control>
[19:44:48.930]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:44:48.930]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:44:48.930]        // =>  FALSE
[19:44:48.930]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:44:48.930]    </control>
[19:44:48.930]    <block atomic="false" info="">
[19:44:48.930]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:44:48.938]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:44:48.938]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:44:48.938]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:44:48.938]      __ap = 0; //lets make sure we reset the access point selection
[19:44:48.938]        // -> [__ap <= 0x00000000]
[19:44:48.938]    </block>
[19:44:48.938]  </sequence>
[19:44:48.938]  
[19:44:48.979]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:44:48.979]  
[19:44:48.979]  <debugvars>
[19:44:48.979]    // Pre-defined
[19:44:48.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:48.979]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:44:48.979]    __dp=0x00000000
[19:44:48.979]    __ap=0x00000000
[19:44:48.980]    __traceout=0x00000000      (Trace Disabled)
[19:44:48.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:48.980]    __FlashAddr=0x00000000
[19:44:48.980]    __FlashLen=0x00000000
[19:44:48.980]    __FlashArg=0x00000000
[19:44:48.980]    __FlashOp=0x00000000
[19:44:48.980]    __Result=0x00000000
[19:44:48.980]  </debugvars>
[19:44:48.980]  
[19:44:48.980]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:44:48.980]    <block atomic="false" info="">
[19:44:48.980]      __var deviceID = 0;
[19:44:48.980]        // -> [deviceID <= 0x00000000]
[19:44:48.980]      __var version = 0;
[19:44:48.980]        // -> [version <= 0x00000000]
[19:44:48.980]      __var partNum = 0;
[19:44:48.980]        // -> [partNum <= 0x00000000]
[19:44:48.980]      __var manuf = 0;
[19:44:48.980]        // -> [manuf <= 0x00000000]
[19:44:48.980]      __var isMSPM0G1X0X_G3X0X = 0;
[19:44:48.980]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:44:48.980]      __var isProduction = 0;
[19:44:48.980]        // -> [isProduction <= 0x00000000]
[19:44:48.980]      __var continueId = 0;
[19:44:48.980]        // -> [continueId <= 0x00000000]
[19:44:48.980]      deviceID =   Read32(0x41C40004);
[19:44:49.000]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:44:49.000]        // -> [deviceID <= 0x2BB8802F]
[19:44:49.000]      version = deviceID >> 28;
[19:44:49.000]        // -> [version <= 0x00000002]
[19:44:49.000]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:44:49.000]        // -> [partNum <= 0x0000BB88]
[19:44:49.000]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:44:49.000]        // -> [manuf <= 0x00000017]
[19:44:49.000]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:44:49.000]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:44:49.002]      isProduction = (version > 0);
[19:44:49.002]        // -> [isProduction <= 0x00000001]
[19:44:49.002]    </block>
[19:44:49.002]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:44:49.002]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:44:49.002]        // =>  FALSE
[19:44:49.002]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:44:49.002]    </control>
[19:44:49.002]    <control if="continueId == 4" while="" timeout="0" info="">
[19:44:49.002]      // if-block "continueId == 4"
[19:44:49.003]        // =>  FALSE
[19:44:49.003]      // skip if-block "continueId == 4"
[19:44:49.003]    </control>
[19:44:49.003]    <control if="!isProduction" while="" timeout="0" info="">
[19:44:49.003]      // if-block "!isProduction"
[19:44:49.003]        // =>  FALSE
[19:44:49.003]      // skip if-block "!isProduction"
[19:44:49.003]    </control>
[19:44:49.003]  </sequence>
[19:44:49.004]  
[19:48:55.763]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:48:55.763]  
[19:48:55.777]  <debugvars>
[19:48:55.777]    // Pre-defined
[19:48:55.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:55.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:55.777]    __dp=0x00000000
[19:48:55.777]    __ap=0x00000000
[19:48:55.777]    __traceout=0x00000000      (Trace Disabled)
[19:48:55.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:55.777]    __FlashAddr=0x00000000
[19:48:55.777]    __FlashLen=0x00000000
[19:48:55.777]    __FlashArg=0x00000000
[19:48:55.777]    __FlashOp=0x00000000
[19:48:55.777]    __Result=0x00000000
[19:48:55.777]  </debugvars>
[19:48:55.777]  
[19:48:55.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:48:55.777]    <block atomic="false" info="">
[19:48:55.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:48:55.777]        // -> [isSWJ <= 0x00000001]
[19:48:55.777]      __var hasDormant = __protocol & 0x00020000;
[19:48:55.777]        // -> [hasDormant <= 0x00000000]
[19:48:55.777]      __var protType   = __protocol & 0x0000FFFF;
[19:48:55.777]        // -> [protType <= 0x00000002]
[19:48:55.777]    </block>
[19:48:55.777]    <control if="protType == 1" while="" timeout="0" info="">
[19:48:55.777]      // if-block "protType == 1"
[19:48:55.777]        // =>  FALSE
[19:48:55.777]      // skip if-block "protType == 1"
[19:48:55.780]    </control>
[19:48:55.780]    <control if="protType == 2" while="" timeout="0" info="">
[19:48:55.780]      // if-block "protType == 2"
[19:48:55.780]        // =>  TRUE
[19:48:55.780]      <control if="isSWJ" while="" timeout="0" info="">
[19:48:55.780]        // if-block "isSWJ"
[19:48:55.780]          // =>  TRUE
[19:48:55.780]        <control if="hasDormant" while="" timeout="0" info="">
[19:48:55.780]          // if-block "hasDormant"
[19:48:55.780]            // =>  FALSE
[19:48:55.780]          // skip if-block "hasDormant"
[19:48:55.780]        </control>
[19:48:55.780]        <control if="!hasDormant" while="" timeout="0" info="">
[19:48:55.780]          // if-block "!hasDormant"
[19:48:55.780]            // =>  TRUE
[19:48:55.780]          <block atomic="false" info="">
[19:48:55.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:48:55.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:55.784]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:48:55.785]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:48:55.785]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:48:55.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:55.788]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:48:55.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:48:55.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:48:55.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:55.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:48:55.794]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:48:55.794]          </block>
[19:48:55.794]          // end if-block "!hasDormant"
[19:48:55.794]        </control>
[19:48:55.794]        // end if-block "isSWJ"
[19:48:55.794]      </control>
[19:48:55.794]      <control if="!isSWJ" while="" timeout="0" info="">
[19:48:55.794]        // if-block "!isSWJ"
[19:48:55.794]          // =>  FALSE
[19:48:55.794]        // skip if-block "!isSWJ"
[19:48:55.794]      </control>
[19:48:55.800]      <block atomic="false" info="">
[19:48:55.800]        ReadDP(0x0);
[19:48:55.805]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:48:55.805]      </block>
[19:48:55.806]      // end if-block "protType == 2"
[19:48:55.806]    </control>
[19:48:55.806]  </sequence>
[19:48:55.806]  
[19:48:55.811]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:48:55.811]  
[19:48:55.811]  <debugvars>
[19:48:55.811]    // Pre-defined
[19:48:55.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:55.812]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:55.812]    __dp=0x00000000
[19:48:55.812]    __ap=0x00000000
[19:48:55.812]    __traceout=0x00000000      (Trace Disabled)
[19:48:55.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:55.812]    __FlashAddr=0x00000000
[19:48:55.812]    __FlashLen=0x00000000
[19:48:55.812]    __FlashArg=0x00000000
[19:48:55.812]    __FlashOp=0x00000000
[19:48:55.812]    __Result=0x00000000
[19:48:55.813]  </debugvars>
[19:48:55.813]  
[19:48:55.813]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:48:55.813]    <block atomic="false" info="">
[19:48:55.813]      __var SW_DP_ABORT       = 0x0;
[19:48:55.813]        // -> [SW_DP_ABORT <= 0x00000000]
[19:48:55.813]      __var DP_CTRL_STAT      = 0x4;
[19:48:55.813]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:48:55.813]      __var DP_SELECT         = 0x8;
[19:48:55.813]        // -> [DP_SELECT <= 0x00000008]
[19:48:55.814]      __var powered_down      = 0;
[19:48:55.814]        // -> [powered_down <= 0x00000000]
[19:48:55.814]      WriteDP(DP_SELECT, 0x00000000);
[19:48:55.815]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:48:55.815]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:48:55.819]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:48:55.819]        // -> [powered_down <= 0x00000001]
[19:48:55.819]    </block>
[19:48:55.819]    <control if="powered_down" while="" timeout="0" info="">
[19:48:55.819]      // if-block "powered_down"
[19:48:55.819]        // =>  TRUE
[19:48:55.819]      <block atomic="false" info="">
[19:48:55.819]        Message(0, "Debug/System power-up request sent");
[19:48:55.821]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:48:55.826]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:48:55.826]      </block>
[19:48:55.826]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:48:55.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:48:55.830]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:48:55.830]        // while-condition  =>  FALSE
[19:48:55.831]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:48:55.831]      </control>
[19:48:55.831]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:48:55.831]        // if-block "(__protocol & 0xFFFF) == 1"
[19:48:55.831]          // =>  FALSE
[19:48:55.831]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:48:55.831]      </control>
[19:48:55.831]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:48:55.833]        // if-block "(__protocol & 0xFFFF) == 2"
[19:48:55.833]          // =>  TRUE
[19:48:55.833]        <block atomic="false" info="">
[19:48:55.833]          Message(0, "executing SWD power up");
[19:48:55.834]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:48:55.836]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:48:55.837]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:48:55.838]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:48:55.838]        </block>
[19:48:55.838]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:48:55.838]      </control>
[19:48:55.838]      // end if-block "powered_down"
[19:48:55.840]    </control>
[19:48:55.840]    <block atomic="false" info="">
[19:48:55.840]      __var DEBUG_PORT_VAL    = 0;
[19:48:55.840]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:48:55.840]      __var ACCESS_POINT_VAL  = 0;
[19:48:55.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:48:55.840]      __ap = 1; 
[19:48:55.840]        // -> [__ap <= 0x00000001]
[19:48:55.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:48:55.845]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:48:55.845]      __ap = 4;
[19:48:55.845]        // -> [__ap <= 0x00000004]
[19:48:55.846]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:55.862]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:48:55.862]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:48:55.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:55.863]    </block>
[19:48:55.863]    <block atomic="false" info="">
[19:48:55.863]      __var nReset = 0x80;
[19:48:55.863]        // -> [nReset <= 0x00000080]
[19:48:55.863]      __var canReadPins = 0;
[19:48:55.863]        // -> [canReadPins <= 0x00000000]
[19:48:55.863]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:48:55.866]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:48:55.866]        // -> [canReadPins <= 0x00000001]
[19:48:55.866]    </block>
[19:48:55.866]    <control if="" while="1" timeout="200" info="">
[19:48:55.866]      // while "1"  (timeout="200")
[19:48:55.866]      // while-condition  =>  TRUE
[19:48:55.866]      // while "1"  (timeout="200")
[19:48:55.866]      // while-condition  =>  TRUE
[19:48:55.866]      // while "1"  (timeout="200")
[19:48:55.866]      // while-condition  =>  TRUE
[19:48:55.866]      // while "1"  (timeout="200")
[19:48:55.866]      // while-condition  =>  TRUE
[19:48:55.866]      // while "1"  (timeout="200")
[19:48:55.870]      // while-condition  =>  TRUE
[19:48:55.870]      // while "1"  (timeout="200")
[19:48:55.870]      // while-condition  =>  TRUE
[19:48:55.870]      // while "1"  (timeout="200")
[19:48:55.870]      // while-condition  =>  TRUE
[19:48:55.870]      // while "1"  (timeout="200")
[19:48:55.870]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.871]      // while "1"  (timeout="200")
[19:48:55.871]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.873]      // while-condition  =>  TRUE
[19:48:55.873]      // while "1"  (timeout="200")
[19:48:55.876]      // while-condition  =>  TRUE
[19:48:55.876]      // while "1"  (timeout="200")
[19:48:55.876]      // while-condition  =>  TRUE
[19:48:55.876]      // while "1"  (timeout="200")
[19:48:55.876]      // while-condition  =>  TRUE
[19:48:55.876]      // while "1"  (timeout="200")
[19:48:55.876]      // while-condition  =>  TRUE
[19:48:55.876]      // while "1"  (timeout="200")
[19:48:55.876]      // while-condition  =>  TRUE
[19:48:55.876]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.877]      // while "1"  (timeout="200")
[19:48:55.877]      // while-condition  =>  TRUE
[19:48:55.880]      // while "1"  (timeout="200")
[19:48:55.880]      // while  =>  TIMEOUT
[19:48:55.880]      // end while "1"
[19:48:55.880]    </control>
[19:48:55.880]    <control if="canReadPins" while="" timeout="0" info="">
[19:48:55.880]      // if-block "canReadPins"
[19:48:55.880]        // =>  TRUE
[19:48:55.880]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:48:55.880]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:48:55.887]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:48:55.887]        // while-condition  =>  FALSE
[19:48:55.887]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:48:55.887]      </control>
[19:48:55.887]      // end if-block "canReadPins"
[19:48:55.887]    </control>
[19:48:55.887]    <control if="!canReadPins" while="" timeout="0" info="">
[19:48:55.887]      // if-block "!canReadPins"
[19:48:55.887]        // =>  FALSE
[19:48:55.890]      // skip if-block "!canReadPins"
[19:48:55.890]    </control>
[19:48:55.890]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:48:55.890]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:55.890]        // =>  TRUE
[19:48:55.890]      <block atomic="false" info="">
[19:48:55.890]        WriteAP(0x00, 0x190008);
[19:48:55.892]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:55.892]        WriteAP(0xF0, 0x01);
[19:48:55.899]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:55.901]      </block>
[19:48:55.901]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:55.901]    </control>
[19:48:55.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:48:55.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:55.901]        // =>  FALSE
[19:48:55.901]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:55.901]    </control>
[19:48:55.901]    <block atomic="false" info="">
[19:48:55.901]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:55.908]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:48:55.908]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:48:55.908]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:55.908]      __ap = 0; //lets make sure we reset the access point selection
[19:48:55.908]        // -> [__ap <= 0x00000000]
[19:48:55.908]    </block>
[19:48:55.908]  </sequence>
[19:48:55.908]  
[19:48:55.978]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:48:55.978]  
[19:48:55.978]  <debugvars>
[19:48:55.978]    // Pre-defined
[19:48:55.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:55.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:55.978]    __dp=0x00000000
[19:48:55.978]    __ap=0x00000000
[19:48:55.978]    __traceout=0x00000000      (Trace Disabled)
[19:48:55.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:55.978]    __FlashAddr=0x00000000
[19:48:55.978]    __FlashLen=0x00000000
[19:48:55.978]    __FlashArg=0x00000000
[19:48:55.978]    __FlashOp=0x00000000
[19:48:55.978]    __Result=0x00000000
[19:48:55.978]  </debugvars>
[19:48:55.978]  
[19:48:55.978]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:48:55.978]    <block atomic="false" info="">
[19:48:55.978]      __var deviceID = 0;
[19:48:55.978]        // -> [deviceID <= 0x00000000]
[19:48:55.978]      __var version = 0;
[19:48:55.978]        // -> [version <= 0x00000000]
[19:48:55.978]      __var partNum = 0;
[19:48:55.978]        // -> [partNum <= 0x00000000]
[19:48:55.978]      __var manuf = 0;
[19:48:55.978]        // -> [manuf <= 0x00000000]
[19:48:55.978]      __var isMSPM0G1X0X_G3X0X = 0;
[19:48:55.978]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:48:55.988]      __var isProduction = 0;
[19:48:55.988]        // -> [isProduction <= 0x00000000]
[19:48:55.988]      __var continueId = 0;
[19:48:55.988]        // -> [continueId <= 0x00000000]
[19:48:55.988]      deviceID =   Read32(0x41C40004);
[19:48:55.988]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:48:55.988]        // -> [deviceID <= 0x2BB8802F]
[19:48:55.988]      version = deviceID >> 28;
[19:48:55.988]        // -> [version <= 0x00000002]
[19:48:55.988]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:48:55.988]        // -> [partNum <= 0x0000BB88]
[19:48:55.988]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:48:55.988]        // -> [manuf <= 0x00000017]
[19:48:55.988]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:48:55.988]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:48:55.988]      isProduction = (version > 0);
[19:48:55.988]        // -> [isProduction <= 0x00000001]
[19:48:55.988]    </block>
[19:48:55.988]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:48:55.988]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:48:55.988]        // =>  FALSE
[19:48:55.988]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:48:55.998]    </control>
[19:48:55.998]    <control if="continueId == 4" while="" timeout="0" info="">
[19:48:55.998]      // if-block "continueId == 4"
[19:48:55.998]        // =>  FALSE
[19:48:55.998]      // skip if-block "continueId == 4"
[19:48:55.998]    </control>
[19:48:55.998]    <control if="!isProduction" while="" timeout="0" info="">
[19:48:55.998]      // if-block "!isProduction"
[19:48:55.998]        // =>  FALSE
[19:48:55.998]      // skip if-block "!isProduction"
[19:48:55.998]    </control>
[19:48:55.998]  </sequence>
[19:48:55.998]  
[19:50:01.633]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:50:01.633]  
[19:50:01.633]  <debugvars>
[19:50:01.633]    // Pre-defined
[19:50:01.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.633]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:01.633]    __dp=0x00000000
[19:50:01.633]    __ap=0x00000000
[19:50:01.633]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.633]    __FlashAddr=0x00000000
[19:50:01.633]    __FlashLen=0x00000000
[19:50:01.641]    __FlashArg=0x00000000
[19:50:01.641]    __FlashOp=0x00000000
[19:50:01.641]    __Result=0x00000000
[19:50:01.641]  </debugvars>
[19:50:01.641]  
[19:50:01.641]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:01.641]    <block atomic="false" info="">
[19:50:01.641]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:01.641]        // -> [isSWJ <= 0x00000001]
[19:50:01.641]      __var hasDormant = __protocol & 0x00020000;
[19:50:01.641]        // -> [hasDormant <= 0x00000000]
[19:50:01.641]      __var protType   = __protocol & 0x0000FFFF;
[19:50:01.641]        // -> [protType <= 0x00000002]
[19:50:01.641]    </block>
[19:50:01.641]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:01.641]      // if-block "protType == 1"
[19:50:01.641]        // =>  FALSE
[19:50:01.641]      // skip if-block "protType == 1"
[19:50:01.641]    </control>
[19:50:01.641]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:01.641]      // if-block "protType == 2"
[19:50:01.641]        // =>  TRUE
[19:50:01.641]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:01.641]        // if-block "isSWJ"
[19:50:01.641]          // =>  TRUE
[19:50:01.641]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:01.641]          // if-block "hasDormant"
[19:50:01.641]            // =>  FALSE
[19:50:01.641]          // skip if-block "hasDormant"
[19:50:01.641]        </control>
[19:50:01.641]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:01.641]          // if-block "!hasDormant"
[19:50:01.641]            // =>  TRUE
[19:50:01.641]          <block atomic="false" info="">
[19:50:01.641]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:01.641]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.641]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:01.651]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:01.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:01.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.654]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:01.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:01.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:01.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:01.654]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:01.654]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:01.662]          </block>
[19:50:01.662]          // end if-block "!hasDormant"
[19:50:01.662]        </control>
[19:50:01.662]        // end if-block "isSWJ"
[19:50:01.662]      </control>
[19:50:01.662]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:01.662]        // if-block "!isSWJ"
[19:50:01.662]          // =>  FALSE
[19:50:01.662]        // skip if-block "!isSWJ"
[19:50:01.662]      </control>
[19:50:01.662]      <block atomic="false" info="">
[19:50:01.662]        ReadDP(0x0);
[19:50:01.664]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:01.664]      </block>
[19:50:01.664]      // end if-block "protType == 2"
[19:50:01.664]    </control>
[19:50:01.664]  </sequence>
[19:50:01.664]  
[19:50:01.671]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:50:01.671]  
[19:50:01.671]  <debugvars>
[19:50:01.671]    // Pre-defined
[19:50:01.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.671]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:01.671]    __dp=0x00000000
[19:50:01.671]    __ap=0x00000000
[19:50:01.671]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.672]    __FlashAddr=0x00000000
[19:50:01.672]    __FlashLen=0x00000000
[19:50:01.672]    __FlashArg=0x00000000
[19:50:01.672]    __FlashOp=0x00000000
[19:50:01.672]    __Result=0x00000000
[19:50:01.672]  </debugvars>
[19:50:01.672]  
[19:50:01.672]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:50:01.672]    <block atomic="false" info="">
[19:50:01.672]      __var SW_DP_ABORT       = 0x0;
[19:50:01.672]        // -> [SW_DP_ABORT <= 0x00000000]
[19:50:01.672]      __var DP_CTRL_STAT      = 0x4;
[19:50:01.672]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:50:01.672]      __var DP_SELECT         = 0x8;
[19:50:01.672]        // -> [DP_SELECT <= 0x00000008]
[19:50:01.672]      __var powered_down      = 0;
[19:50:01.672]        // -> [powered_down <= 0x00000000]
[19:50:01.672]      WriteDP(DP_SELECT, 0x00000000);
[19:50:01.672]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:50:01.672]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:50:01.672]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:50:01.672]        // -> [powered_down <= 0x00000001]
[19:50:01.672]    </block>
[19:50:01.672]    <control if="powered_down" while="" timeout="0" info="">
[19:50:01.672]      // if-block "powered_down"
[19:50:01.672]        // =>  TRUE
[19:50:01.672]      <block atomic="false" info="">
[19:50:01.672]        Message(0, "Debug/System power-up request sent");
[19:50:01.682]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:50:01.682]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:50:01.682]      </block>
[19:50:01.682]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:50:01.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:50:01.682]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:50:01.682]        // while-condition  =>  FALSE
[19:50:01.682]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:50:01.682]      </control>
[19:50:01.682]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:50:01.682]        // if-block "(__protocol & 0xFFFF) == 1"
[19:50:01.682]          // =>  FALSE
[19:50:01.682]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:50:01.682]      </control>
[19:50:01.682]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:50:01.682]        // if-block "(__protocol & 0xFFFF) == 2"
[19:50:01.682]          // =>  TRUE
[19:50:01.682]        <block atomic="false" info="">
[19:50:01.682]          Message(0, "executing SWD power up");
[19:50:01.692]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:50:01.697]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:50:01.698]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:50:01.698]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:50:01.698]        </block>
[19:50:01.698]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:50:01.698]      </control>
[19:50:01.698]      // end if-block "powered_down"
[19:50:01.698]    </control>
[19:50:01.698]    <block atomic="false" info="">
[19:50:01.698]      __var DEBUG_PORT_VAL    = 0;
[19:50:01.698]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:50:01.698]      __var ACCESS_POINT_VAL  = 0;
[19:50:01.698]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:50:01.698]      __ap = 1; 
[19:50:01.698]        // -> [__ap <= 0x00000001]
[19:50:01.698]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:50:01.702]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:50:01.702]      __ap = 4;
[19:50:01.702]        // -> [__ap <= 0x00000004]
[19:50:01.702]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:01.702]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:50:01.702]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:50:01.712]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:01.714]    </block>
[19:50:01.714]    <block atomic="false" info="">
[19:50:01.714]      __var nReset = 0x80;
[19:50:01.714]        // -> [nReset <= 0x00000080]
[19:50:01.714]      __var canReadPins = 0;
[19:50:01.714]        // -> [canReadPins <= 0x00000000]
[19:50:01.714]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:50:01.714]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:50:01.714]        // -> [canReadPins <= 0x00000001]
[19:50:01.714]    </block>
[19:50:01.714]    <control if="" while="1" timeout="200" info="">
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.714]      // while "1"  (timeout="200")
[19:50:01.714]      // while-condition  =>  TRUE
[19:50:01.723]      // while "1"  (timeout="200")
[19:50:01.723]      // while  =>  TIMEOUT
[19:50:01.723]      // end while "1"
[19:50:01.723]    </control>
[19:50:01.723]    <control if="canReadPins" while="" timeout="0" info="">
[19:50:01.723]      // if-block "canReadPins"
[19:50:01.723]        // =>  TRUE
[19:50:01.723]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:50:01.723]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:50:01.723]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:50:01.723]        // while-condition  =>  FALSE
[19:50:01.723]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:50:01.723]      </control>
[19:50:01.723]      // end if-block "canReadPins"
[19:50:01.723]    </control>
[19:50:01.723]    <control if="!canReadPins" while="" timeout="0" info="">
[19:50:01.723]      // if-block "!canReadPins"
[19:50:01.723]        // =>  FALSE
[19:50:01.723]      // skip if-block "!canReadPins"
[19:50:01.723]    </control>
[19:50:01.723]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:50:01.723]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:01.723]        // =>  TRUE
[19:50:01.723]      <block atomic="false" info="">
[19:50:01.723]        WriteAP(0x00, 0x190008);
[19:50:01.733]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:01.733]        WriteAP(0xF0, 0x01);
[19:50:01.743]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:01.743]      </block>
[19:50:01.743]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:01.743]    </control>
[19:50:01.743]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:50:01.743]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:01.743]        // =>  FALSE
[19:50:01.743]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:01.743]    </control>
[19:50:01.743]    <block atomic="false" info="">
[19:50:01.743]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:01.755]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:50:01.755]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:50:01.755]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:01.760]      __ap = 0; //lets make sure we reset the access point selection
[19:50:01.760]        // -> [__ap <= 0x00000000]
[19:50:01.760]    </block>
[19:50:01.760]  </sequence>
[19:50:01.760]  
[19:50:01.783]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:50:01.783]  
[19:50:01.783]  <debugvars>
[19:50:01.793]    // Pre-defined
[19:50:01.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:01.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:01.793]    __dp=0x00000000
[19:50:01.793]    __ap=0x00000000
[19:50:01.793]    __traceout=0x00000000      (Trace Disabled)
[19:50:01.793]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:01.793]    __FlashAddr=0x00000000
[19:50:01.793]    __FlashLen=0x00000000
[19:50:01.793]    __FlashArg=0x00000000
[19:50:01.793]    __FlashOp=0x00000000
[19:50:01.793]    __Result=0x00000000
[19:50:01.793]  </debugvars>
[19:50:01.795]  
[19:50:01.795]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:50:01.795]    <block atomic="false" info="">
[19:50:01.795]      __var deviceID = 0;
[19:50:01.795]        // -> [deviceID <= 0x00000000]
[19:50:01.795]      __var version = 0;
[19:50:01.795]        // -> [version <= 0x00000000]
[19:50:01.795]      __var partNum = 0;
[19:50:01.795]        // -> [partNum <= 0x00000000]
[19:50:01.795]      __var manuf = 0;
[19:50:01.795]        // -> [manuf <= 0x00000000]
[19:50:01.795]      __var isMSPM0G1X0X_G3X0X = 0;
[19:50:01.795]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:50:01.795]      __var isProduction = 0;
[19:50:01.795]        // -> [isProduction <= 0x00000000]
[19:50:01.795]      __var continueId = 0;
[19:50:01.795]        // -> [continueId <= 0x00000000]
[19:50:01.795]      deviceID =   Read32(0x41C40004);
[19:50:01.795]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:50:01.795]        // -> [deviceID <= 0x2BB8802F]
[19:50:01.795]      version = deviceID >> 28;
[19:50:01.795]        // -> [version <= 0x00000002]
[19:50:01.795]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:50:01.795]        // -> [partNum <= 0x0000BB88]
[19:50:01.795]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:50:01.795]        // -> [manuf <= 0x00000017]
[19:50:01.795]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:50:01.795]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:50:01.795]      isProduction = (version > 0);
[19:50:01.795]        // -> [isProduction <= 0x00000001]
[19:50:01.795]    </block>
[19:50:01.795]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:50:01.795]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:50:01.803]        // =>  FALSE
[19:50:01.803]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:50:01.803]    </control>
[19:50:01.803]    <control if="continueId == 4" while="" timeout="0" info="">
[19:50:01.803]      // if-block "continueId == 4"
[19:50:01.803]        // =>  FALSE
[19:50:01.803]      // skip if-block "continueId == 4"
[19:50:01.803]    </control>
[19:50:01.803]    <control if="!isProduction" while="" timeout="0" info="">
[19:50:01.803]      // if-block "!isProduction"
[19:50:01.803]        // =>  FALSE
[19:50:01.803]      // skip if-block "!isProduction"
[19:50:01.803]    </control>
[19:50:01.803]  </sequence>
[19:50:01.803]  
[19:51:21.386]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:51:21.386]  
[19:51:21.394]  <debugvars>
[19:51:21.394]    // Pre-defined
[19:51:21.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:21.394]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:51:21.394]    __dp=0x00000000
[19:51:21.394]    __ap=0x00000000
[19:51:21.394]    __traceout=0x00000000      (Trace Disabled)
[19:51:21.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:21.394]    __FlashAddr=0x00000000
[19:51:21.394]    __FlashLen=0x00000000
[19:51:21.394]    __FlashArg=0x00000000
[19:51:21.394]    __FlashOp=0x00000000
[19:51:21.394]    __Result=0x00000000
[19:51:21.394]  </debugvars>
[19:51:21.394]  
[19:51:21.394]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:51:21.394]    <block atomic="false" info="">
[19:51:21.394]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:51:21.394]        // -> [isSWJ <= 0x00000001]
[19:51:21.394]      __var hasDormant = __protocol & 0x00020000;
[19:51:21.394]        // -> [hasDormant <= 0x00000000]
[19:51:21.394]      __var protType   = __protocol & 0x0000FFFF;
[19:51:21.394]        // -> [protType <= 0x00000002]
[19:51:21.394]    </block>
[19:51:21.394]    <control if="protType == 1" while="" timeout="0" info="">
[19:51:21.394]      // if-block "protType == 1"
[19:51:21.394]        // =>  FALSE
[19:51:21.394]      // skip if-block "protType == 1"
[19:51:21.394]    </control>
[19:51:21.394]    <control if="protType == 2" while="" timeout="0" info="">
[19:51:21.394]      // if-block "protType == 2"
[19:51:21.394]        // =>  TRUE
[19:51:21.394]      <control if="isSWJ" while="" timeout="0" info="">
[19:51:21.394]        // if-block "isSWJ"
[19:51:21.394]          // =>  TRUE
[19:51:21.394]        <control if="hasDormant" while="" timeout="0" info="">
[19:51:21.394]          // if-block "hasDormant"
[19:51:21.394]            // =>  FALSE
[19:51:21.394]          // skip if-block "hasDormant"
[19:51:21.394]        </control>
[19:51:21.394]        <control if="!hasDormant" while="" timeout="0" info="">
[19:51:21.394]          // if-block "!hasDormant"
[19:51:21.394]            // =>  TRUE
[19:51:21.394]          <block atomic="false" info="">
[19:51:21.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:51:21.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:21.394]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:51:21.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:51:21.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:51:21.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:21.425]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:51:21.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:51:21.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:51:21.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:21.435]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:51:21.444]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:51:21.444]          </block>
[19:51:21.444]          // end if-block "!hasDormant"
[19:51:21.444]        </control>
[19:51:21.444]        // end if-block "isSWJ"
[19:51:21.444]      </control>
[19:51:21.444]      <control if="!isSWJ" while="" timeout="0" info="">
[19:51:21.444]        // if-block "!isSWJ"
[19:51:21.444]          // =>  FALSE
[19:51:21.444]        // skip if-block "!isSWJ"
[19:51:21.444]      </control>
[19:51:21.444]      <block atomic="false" info="">
[19:51:21.444]        ReadDP(0x0);
[19:51:21.444]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:51:21.444]      </block>
[19:51:21.444]      // end if-block "protType == 2"
[19:51:21.444]    </control>
[19:51:21.454]  </sequence>
[19:51:21.454]  
[19:51:21.456]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:51:21.456]  
[19:51:21.456]  <debugvars>
[19:51:21.456]    // Pre-defined
[19:51:21.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:21.456]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:51:21.456]    __dp=0x00000000
[19:51:21.456]    __ap=0x00000000
[19:51:21.456]    __traceout=0x00000000      (Trace Disabled)
[19:51:21.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:21.456]    __FlashAddr=0x00000000
[19:51:21.456]    __FlashLen=0x00000000
[19:51:21.456]    __FlashArg=0x00000000
[19:51:21.456]    __FlashOp=0x00000000
[19:51:21.456]    __Result=0x00000000
[19:51:21.456]  </debugvars>
[19:51:21.456]  
[19:51:21.456]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:51:21.456]    <block atomic="false" info="">
[19:51:21.456]      __var SW_DP_ABORT       = 0x0;
[19:51:21.456]        // -> [SW_DP_ABORT <= 0x00000000]
[19:51:21.456]      __var DP_CTRL_STAT      = 0x4;
[19:51:21.456]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:51:21.456]      __var DP_SELECT         = 0x8;
[19:51:21.456]        // -> [DP_SELECT <= 0x00000008]
[19:51:21.456]      __var powered_down      = 0;
[19:51:21.456]        // -> [powered_down <= 0x00000000]
[19:51:21.456]      WriteDP(DP_SELECT, 0x00000000);
[19:51:21.456]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:51:21.456]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:51:21.467]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:51:21.467]        // -> [powered_down <= 0x00000001]
[19:51:21.467]    </block>
[19:51:21.467]    <control if="powered_down" while="" timeout="0" info="">
[19:51:21.467]      // if-block "powered_down"
[19:51:21.467]        // =>  TRUE
[19:51:21.467]      <block atomic="false" info="">
[19:51:21.467]        Message(0, "Debug/System power-up request sent");
[19:51:21.467]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:51:21.475]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:51:21.475]      </block>
[19:51:21.475]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:51:21.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:51:21.476]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:51:21.476]        // while-condition  =>  FALSE
[19:51:21.476]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:51:21.476]      </control>
[19:51:21.476]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:51:21.476]        // if-block "(__protocol & 0xFFFF) == 1"
[19:51:21.476]          // =>  FALSE
[19:51:21.476]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:51:21.476]      </control>
[19:51:21.476]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:51:21.476]        // if-block "(__protocol & 0xFFFF) == 2"
[19:51:21.476]          // =>  TRUE
[19:51:21.476]        <block atomic="false" info="">
[19:51:21.476]          Message(0, "executing SWD power up");
[19:51:21.476]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:51:21.487]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:51:21.487]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:51:21.487]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:51:21.487]        </block>
[19:51:21.487]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:51:21.487]      </control>
[19:51:21.487]      // end if-block "powered_down"
[19:51:21.487]    </control>
[19:51:21.487]    <block atomic="false" info="">
[19:51:21.487]      __var DEBUG_PORT_VAL    = 0;
[19:51:21.487]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:51:21.487]      __var ACCESS_POINT_VAL  = 0;
[19:51:21.487]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:51:21.487]      __ap = 1; 
[19:51:21.487]        // -> [__ap <= 0x00000001]
[19:51:21.487]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:51:21.498]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:51:21.498]      __ap = 4;
[19:51:21.498]        // -> [__ap <= 0x00000004]
[19:51:21.498]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:21.508]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:51:21.508]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:51:21.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:21.508]    </block>
[19:51:21.508]    <block atomic="false" info="">
[19:51:21.508]      __var nReset = 0x80;
[19:51:21.508]        // -> [nReset <= 0x00000080]
[19:51:21.508]      __var canReadPins = 0;
[19:51:21.508]        // -> [canReadPins <= 0x00000000]
[19:51:21.508]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:51:21.508]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:51:21.508]        // -> [canReadPins <= 0x00000001]
[19:51:21.508]    </block>
[19:51:21.508]    <control if="" while="1" timeout="200" info="">
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.508]      // while-condition  =>  TRUE
[19:51:21.508]      // while "1"  (timeout="200")
[19:51:21.516]      // while-condition  =>  TRUE
[19:51:21.516]      // while "1"  (timeout="200")
[19:51:21.516]      // while-condition  =>  TRUE
[19:51:21.516]      // while "1"  (timeout="200")
[19:51:21.516]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.517]      // while-condition  =>  TRUE
[19:51:21.517]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.519]      // while "1"  (timeout="200")
[19:51:21.519]      // while-condition  =>  TRUE
[19:51:21.521]      // while "1"  (timeout="200")
[19:51:21.521]      // while  =>  TIMEOUT
[19:51:21.521]      // end while "1"
[19:51:21.521]    </control>
[19:51:21.521]    <control if="canReadPins" while="" timeout="0" info="">
[19:51:21.521]      // if-block "canReadPins"
[19:51:21.521]        // =>  TRUE
[19:51:21.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:51:21.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:51:21.527]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:51:21.527]        // while-condition  =>  FALSE
[19:51:21.527]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:51:21.527]      </control>
[19:51:21.527]      // end if-block "canReadPins"
[19:51:21.527]    </control>
[19:51:21.527]    <control if="!canReadPins" while="" timeout="0" info="">
[19:51:21.527]      // if-block "!canReadPins"
[19:51:21.528]        // =>  FALSE
[19:51:21.528]      // skip if-block "!canReadPins"
[19:51:21.528]    </control>
[19:51:21.528]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:51:21.528]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:21.528]        // =>  TRUE
[19:51:21.528]      <block atomic="false" info="">
[19:51:21.529]        WriteAP(0x00, 0x190008);
[19:51:21.529]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:21.529]        WriteAP(0xF0, 0x01);
[19:51:21.539]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:21.539]      </block>
[19:51:21.539]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:21.539]    </control>
[19:51:21.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:51:21.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:21.539]        // =>  FALSE
[19:51:21.539]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:21.539]    </control>
[19:51:21.539]    <block atomic="false" info="">
[19:51:21.539]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:21.547]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:51:21.547]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:51:21.547]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:21.557]      __ap = 0; //lets make sure we reset the access point selection
[19:51:21.557]        // -> [__ap <= 0x00000000]
[19:51:21.557]    </block>
[19:51:21.557]  </sequence>
[19:51:21.557]  
[19:51:21.599]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:51:21.599]  
[19:51:21.599]  <debugvars>
[19:51:21.599]    // Pre-defined
[19:51:21.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:21.599]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:51:21.599]    __dp=0x00000000
[19:51:21.599]    __ap=0x00000000
[19:51:21.599]    __traceout=0x00000000      (Trace Disabled)
[19:51:21.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:21.599]    __FlashAddr=0x00000000
[19:51:21.599]    __FlashLen=0x00000000
[19:51:21.599]    __FlashArg=0x00000000
[19:51:21.599]    __FlashOp=0x00000000
[19:51:21.599]    __Result=0x00000000
[19:51:21.599]  </debugvars>
[19:51:21.599]  
[19:51:21.599]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:51:21.599]    <block atomic="false" info="">
[19:51:21.599]      __var deviceID = 0;
[19:51:21.599]        // -> [deviceID <= 0x00000000]
[19:51:21.599]      __var version = 0;
[19:51:21.599]        // -> [version <= 0x00000000]
[19:51:21.608]      __var partNum = 0;
[19:51:21.608]        // -> [partNum <= 0x00000000]
[19:51:21.608]      __var manuf = 0;
[19:51:21.608]        // -> [manuf <= 0x00000000]
[19:51:21.608]      __var isMSPM0G1X0X_G3X0X = 0;
[19:51:21.608]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:51:21.608]      __var isProduction = 0;
[19:51:21.608]        // -> [isProduction <= 0x00000000]
[19:51:21.608]      __var continueId = 0;
[19:51:21.608]        // -> [continueId <= 0x00000000]
[19:51:21.608]      deviceID =   Read32(0x41C40004);
[19:51:21.621]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:51:21.621]        // -> [deviceID <= 0x2BB8802F]
[19:51:21.621]      version = deviceID >> 28;
[19:51:21.621]        // -> [version <= 0x00000002]
[19:51:21.621]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:51:21.621]        // -> [partNum <= 0x0000BB88]
[19:51:21.621]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:51:21.621]        // -> [manuf <= 0x00000017]
[19:51:21.621]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:51:21.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:51:21.621]      isProduction = (version > 0);
[19:51:21.621]        // -> [isProduction <= 0x00000001]
[19:51:21.621]    </block>
[19:51:21.621]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:51:21.621]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:51:21.621]        // =>  FALSE
[19:51:21.621]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:51:21.621]    </control>
[19:51:21.621]    <control if="continueId == 4" while="" timeout="0" info="">
[19:51:21.621]      // if-block "continueId == 4"
[19:51:21.621]        // =>  FALSE
[19:51:21.621]      // skip if-block "continueId == 4"
[19:51:21.621]    </control>
[19:51:21.627]    <control if="!isProduction" while="" timeout="0" info="">
[19:51:21.627]      // if-block "!isProduction"
[19:51:21.627]        // =>  FALSE
[19:51:21.627]      // skip if-block "!isProduction"
[19:51:21.627]    </control>
[19:51:21.627]  </sequence>
[19:51:21.627]  
[19:52:23.999]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:52:23.999]  
[19:52:24.012]  <debugvars>
[19:52:24.012]    // Pre-defined
[19:52:24.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:24.012]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:24.012]    __dp=0x00000000
[19:52:24.012]    __ap=0x00000000
[19:52:24.012]    __traceout=0x00000000      (Trace Disabled)
[19:52:24.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:24.012]    __FlashAddr=0x00000000
[19:52:24.012]    __FlashLen=0x00000000
[19:52:24.012]    __FlashArg=0x00000000
[19:52:24.012]    __FlashOp=0x00000000
[19:52:24.012]    __Result=0x00000000
[19:52:24.012]  </debugvars>
[19:52:24.012]  
[19:52:24.012]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:52:24.012]    <block atomic="false" info="">
[19:52:24.012]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:52:24.012]        // -> [isSWJ <= 0x00000001]
[19:52:24.012]      __var hasDormant = __protocol & 0x00020000;
[19:52:24.012]        // -> [hasDormant <= 0x00000000]
[19:52:24.012]      __var protType   = __protocol & 0x0000FFFF;
[19:52:24.012]        // -> [protType <= 0x00000002]
[19:52:24.012]    </block>
[19:52:24.012]    <control if="protType == 1" while="" timeout="0" info="">
[19:52:24.012]      // if-block "protType == 1"
[19:52:24.012]        // =>  FALSE
[19:52:24.012]      // skip if-block "protType == 1"
[19:52:24.012]    </control>
[19:52:24.012]    <control if="protType == 2" while="" timeout="0" info="">
[19:52:24.012]      // if-block "protType == 2"
[19:52:24.012]        // =>  TRUE
[19:52:24.012]      <control if="isSWJ" while="" timeout="0" info="">
[19:52:24.012]        // if-block "isSWJ"
[19:52:24.012]          // =>  TRUE
[19:52:24.012]        <control if="hasDormant" while="" timeout="0" info="">
[19:52:24.012]          // if-block "hasDormant"
[19:52:24.012]            // =>  FALSE
[19:52:24.012]          // skip if-block "hasDormant"
[19:52:24.012]        </control>
[19:52:24.012]        <control if="!hasDormant" while="" timeout="0" info="">
[19:52:24.012]          // if-block "!hasDormant"
[19:52:24.012]            // =>  TRUE
[19:52:24.012]          <block atomic="false" info="">
[19:52:24.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:52:24.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:24.018]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:52:24.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:52:24.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:52:24.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:24.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:52:24.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:52:24.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:52:24.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:24.028]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:52:24.028]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:52:24.028]          </block>
[19:52:24.028]          // end if-block "!hasDormant"
[19:52:24.038]        </control>
[19:52:24.038]        // end if-block "isSWJ"
[19:52:24.038]      </control>
[19:52:24.038]      <control if="!isSWJ" while="" timeout="0" info="">
[19:52:24.038]        // if-block "!isSWJ"
[19:52:24.038]          // =>  FALSE
[19:52:24.038]        // skip if-block "!isSWJ"
[19:52:24.038]      </control>
[19:52:24.038]      <block atomic="false" info="">
[19:52:24.038]        ReadDP(0x0);
[19:52:24.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:52:24.038]      </block>
[19:52:24.038]      // end if-block "protType == 2"
[19:52:24.038]    </control>
[19:52:24.038]  </sequence>
[19:52:24.048]  
[19:52:24.048]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:52:24.048]  
[19:52:24.048]  <debugvars>
[19:52:24.048]    // Pre-defined
[19:52:24.048]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:24.054]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:24.054]    __dp=0x00000000
[19:52:24.054]    __ap=0x00000000
[19:52:24.054]    __traceout=0x00000000      (Trace Disabled)
[19:52:24.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:24.054]    __FlashAddr=0x00000000
[19:52:24.054]    __FlashLen=0x00000000
[19:52:24.054]    __FlashArg=0x00000000
[19:52:24.054]    __FlashOp=0x00000000
[19:52:24.054]    __Result=0x00000000
[19:52:24.054]  </debugvars>
[19:52:24.054]  
[19:52:24.054]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:52:24.054]    <block atomic="false" info="">
[19:52:24.054]      __var SW_DP_ABORT       = 0x0;
[19:52:24.054]        // -> [SW_DP_ABORT <= 0x00000000]
[19:52:24.054]      __var DP_CTRL_STAT      = 0x4;
[19:52:24.054]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:52:24.054]      __var DP_SELECT         = 0x8;
[19:52:24.054]        // -> [DP_SELECT <= 0x00000008]
[19:52:24.054]      __var powered_down      = 0;
[19:52:24.054]        // -> [powered_down <= 0x00000000]
[19:52:24.054]      WriteDP(DP_SELECT, 0x00000000);
[19:52:24.054]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:52:24.054]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:52:24.058]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:52:24.058]        // -> [powered_down <= 0x00000001]
[19:52:24.058]    </block>
[19:52:24.058]    <control if="powered_down" while="" timeout="0" info="">
[19:52:24.058]      // if-block "powered_down"
[19:52:24.058]        // =>  TRUE
[19:52:24.058]      <block atomic="false" info="">
[19:52:24.058]        Message(0, "Debug/System power-up request sent");
[19:52:24.058]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:52:24.058]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:52:24.058]      </block>
[19:52:24.058]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:52:24.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:52:24.058]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:52:24.058]        // while-condition  =>  FALSE
[19:52:24.058]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:52:24.058]      </control>
[19:52:24.058]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:52:24.058]        // if-block "(__protocol & 0xFFFF) == 1"
[19:52:24.058]          // =>  FALSE
[19:52:24.058]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:52:24.058]      </control>
[19:52:24.058]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:52:24.058]        // if-block "(__protocol & 0xFFFF) == 2"
[19:52:24.058]          // =>  TRUE
[19:52:24.068]        <block atomic="false" info="">
[19:52:24.068]          Message(0, "executing SWD power up");
[19:52:24.070]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:52:24.070]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:52:24.070]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:52:24.070]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:52:24.070]        </block>
[19:52:24.070]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:52:24.070]      </control>
[19:52:24.070]      // end if-block "powered_down"
[19:52:24.070]    </control>
[19:52:24.070]    <block atomic="false" info="">
[19:52:24.070]      __var DEBUG_PORT_VAL    = 0;
[19:52:24.070]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:52:24.070]      __var ACCESS_POINT_VAL  = 0;
[19:52:24.070]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:52:24.070]      __ap = 1; 
[19:52:24.070]        // -> [__ap <= 0x00000001]
[19:52:24.070]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:52:24.078]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:52:24.078]      __ap = 4;
[19:52:24.078]        // -> [__ap <= 0x00000004]
[19:52:24.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:24.091]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:52:24.091]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:52:24.091]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:24.091]    </block>
[19:52:24.091]    <block atomic="false" info="">
[19:52:24.091]      __var nReset = 0x80;
[19:52:24.091]        // -> [nReset <= 0x00000080]
[19:52:24.091]      __var canReadPins = 0;
[19:52:24.091]        // -> [canReadPins <= 0x00000000]
[19:52:24.091]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:52:24.091]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:52:24.091]        // -> [canReadPins <= 0x00000001]
[19:52:24.091]    </block>
[19:52:24.091]    <control if="" while="1" timeout="200" info="">
[19:52:24.091]      // while "1"  (timeout="200")
[19:52:24.091]      // while-condition  =>  TRUE
[19:52:24.091]      // while "1"  (timeout="200")
[19:52:24.099]      // while-condition  =>  TRUE
[19:52:24.099]      // while "1"  (timeout="200")
[19:52:24.099]      // while  =>  TIMEOUT
[19:52:24.099]      // end while "1"
[19:52:24.099]    </control>
[19:52:24.099]    <control if="canReadPins" while="" timeout="0" info="">
[19:52:24.099]      // if-block "canReadPins"
[19:52:24.099]        // =>  TRUE
[19:52:24.099]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:52:24.099]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:52:24.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:52:24.099]        // while-condition  =>  FALSE
[19:52:24.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:52:24.099]      </control>
[19:52:24.099]      // end if-block "canReadPins"
[19:52:24.099]    </control>
[19:52:24.099]    <control if="!canReadPins" while="" timeout="0" info="">
[19:52:24.099]      // if-block "!canReadPins"
[19:52:24.099]        // =>  FALSE
[19:52:24.099]      // skip if-block "!canReadPins"
[19:52:24.099]    </control>
[19:52:24.099]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:52:24.099]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:24.099]        // =>  TRUE
[19:52:24.099]      <block atomic="false" info="">
[19:52:24.099]        WriteAP(0x00, 0x190008);
[19:52:24.099]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:24.099]        WriteAP(0xF0, 0x01);
[19:52:24.109]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:24.109]      </block>
[19:52:24.109]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:24.109]    </control>
[19:52:24.109]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:52:24.109]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:24.109]        // =>  FALSE
[19:52:24.109]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:24.109]    </control>
[19:52:24.109]    <block atomic="false" info="">
[19:52:24.109]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:24.109]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:52:24.109]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:52:24.109]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:24.109]      __ap = 0; //lets make sure we reset the access point selection
[19:52:24.109]        // -> [__ap <= 0x00000000]
[19:52:24.109]    </block>
[19:52:24.109]  </sequence>
[19:52:24.109]  
[19:52:24.139]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:52:24.139]  
[19:52:24.139]  <debugvars>
[19:52:24.139]    // Pre-defined
[19:52:24.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:24.139]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:24.139]    __dp=0x00000000
[19:52:24.139]    __ap=0x00000000
[19:52:24.139]    __traceout=0x00000000      (Trace Disabled)
[19:52:24.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:24.139]    __FlashAddr=0x00000000
[19:52:24.139]    __FlashLen=0x00000000
[19:52:24.139]    __FlashArg=0x00000000
[19:52:24.139]    __FlashOp=0x00000000
[19:52:24.139]    __Result=0x00000000
[19:52:24.139]  </debugvars>
[19:52:24.139]  
[19:52:24.139]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:52:24.149]    <block atomic="false" info="">
[19:52:24.149]      __var deviceID = 0;
[19:52:24.149]        // -> [deviceID <= 0x00000000]
[19:52:24.149]      __var version = 0;
[19:52:24.149]        // -> [version <= 0x00000000]
[19:52:24.149]      __var partNum = 0;
[19:52:24.149]        // -> [partNum <= 0x00000000]
[19:52:24.149]      __var manuf = 0;
[19:52:24.149]        // -> [manuf <= 0x00000000]
[19:52:24.149]      __var isMSPM0G1X0X_G3X0X = 0;
[19:52:24.150]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:52:24.150]      __var isProduction = 0;
[19:52:24.150]        // -> [isProduction <= 0x00000000]
[19:52:24.150]      __var continueId = 0;
[19:52:24.150]        // -> [continueId <= 0x00000000]
[19:52:24.150]      deviceID =   Read32(0x41C40004);
[19:52:24.159]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:52:24.159]        // -> [deviceID <= 0x2BB8802F]
[19:52:24.159]      version = deviceID >> 28;
[19:52:24.159]        // -> [version <= 0x00000002]
[19:52:24.159]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:52:24.159]        // -> [partNum <= 0x0000BB88]
[19:52:24.159]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:52:24.159]        // -> [manuf <= 0x00000017]
[19:52:24.159]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:52:24.159]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:52:24.159]      isProduction = (version > 0);
[19:52:24.159]        // -> [isProduction <= 0x00000001]
[19:52:24.159]    </block>
[19:52:24.159]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:52:24.159]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:52:24.159]        // =>  FALSE
[19:52:24.159]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:52:24.159]    </control>
[19:52:24.159]    <control if="continueId == 4" while="" timeout="0" info="">
[19:52:24.159]      // if-block "continueId == 4"
[19:52:24.159]        // =>  FALSE
[19:52:24.159]      // skip if-block "continueId == 4"
[19:52:24.159]    </control>
[19:52:24.159]    <control if="!isProduction" while="" timeout="0" info="">
[19:52:24.159]      // if-block "!isProduction"
[19:52:24.159]        // =>  FALSE
[19:52:24.159]      // skip if-block "!isProduction"
[19:52:24.159]    </control>
[19:52:24.159]  </sequence>
[19:52:24.159]  
[19:53:47.303]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:53:47.303]  
[19:53:47.315]  <debugvars>
[19:53:47.315]    // Pre-defined
[19:53:47.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:47.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:47.315]    __dp=0x00000000
[19:53:47.315]    __ap=0x00000000
[19:53:47.315]    __traceout=0x00000000      (Trace Disabled)
[19:53:47.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:47.315]    __FlashAddr=0x00000000
[19:53:47.315]    __FlashLen=0x00000000
[19:53:47.315]    __FlashArg=0x00000000
[19:53:47.315]    __FlashOp=0x00000000
[19:53:47.315]    __Result=0x00000000
[19:53:47.315]  </debugvars>
[19:53:47.315]  
[19:53:47.315]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:53:47.315]    <block atomic="false" info="">
[19:53:47.315]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:53:47.315]        // -> [isSWJ <= 0x00000001]
[19:53:47.315]      __var hasDormant = __protocol & 0x00020000;
[19:53:47.315]        // -> [hasDormant <= 0x00000000]
[19:53:47.315]      __var protType   = __protocol & 0x0000FFFF;
[19:53:47.315]        // -> [protType <= 0x00000002]
[19:53:47.315]    </block>
[19:53:47.315]    <control if="protType == 1" while="" timeout="0" info="">
[19:53:47.315]      // if-block "protType == 1"
[19:53:47.315]        // =>  FALSE
[19:53:47.315]      // skip if-block "protType == 1"
[19:53:47.315]    </control>
[19:53:47.315]    <control if="protType == 2" while="" timeout="0" info="">
[19:53:47.315]      // if-block "protType == 2"
[19:53:47.315]        // =>  TRUE
[19:53:47.315]      <control if="isSWJ" while="" timeout="0" info="">
[19:53:47.315]        // if-block "isSWJ"
[19:53:47.315]          // =>  TRUE
[19:53:47.315]        <control if="hasDormant" while="" timeout="0" info="">
[19:53:47.315]          // if-block "hasDormant"
[19:53:47.315]            // =>  FALSE
[19:53:47.315]          // skip if-block "hasDormant"
[19:53:47.315]        </control>
[19:53:47.315]        <control if="!hasDormant" while="" timeout="0" info="">
[19:53:47.315]          // if-block "!hasDormant"
[19:53:47.315]            // =>  TRUE
[19:53:47.315]          <block atomic="false" info="">
[19:53:47.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:53:47.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:47.315]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:53:47.324]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:53:47.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:53:47.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:47.326]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:53:47.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:53:47.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:53:47.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:47.338]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:53:47.342]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:53:47.342]          </block>
[19:53:47.342]          // end if-block "!hasDormant"
[19:53:47.342]        </control>
[19:53:47.342]        // end if-block "isSWJ"
[19:53:47.342]      </control>
[19:53:47.342]      <control if="!isSWJ" while="" timeout="0" info="">
[19:53:47.342]        // if-block "!isSWJ"
[19:53:47.342]          // =>  FALSE
[19:53:47.342]        // skip if-block "!isSWJ"
[19:53:47.342]      </control>
[19:53:47.342]      <block atomic="false" info="">
[19:53:47.342]        ReadDP(0x0);
[19:53:47.344]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:53:47.344]      </block>
[19:53:47.344]      // end if-block "protType == 2"
[19:53:47.344]    </control>
[19:53:47.344]  </sequence>
[19:53:47.344]  
[19:53:47.356]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:53:47.356]  
[19:53:47.356]  <debugvars>
[19:53:47.356]    // Pre-defined
[19:53:47.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:47.356]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:47.356]    __dp=0x00000000
[19:53:47.356]    __ap=0x00000000
[19:53:47.356]    __traceout=0x00000000      (Trace Disabled)
[19:53:47.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:47.356]    __FlashAddr=0x00000000
[19:53:47.356]    __FlashLen=0x00000000
[19:53:47.356]    __FlashArg=0x00000000
[19:53:47.356]    __FlashOp=0x00000000
[19:53:47.356]    __Result=0x00000000
[19:53:47.356]  </debugvars>
[19:53:47.356]  
[19:53:47.356]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:53:47.356]    <block atomic="false" info="">
[19:53:47.356]      __var SW_DP_ABORT       = 0x0;
[19:53:47.356]        // -> [SW_DP_ABORT <= 0x00000000]
[19:53:47.356]      __var DP_CTRL_STAT      = 0x4;
[19:53:47.356]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:53:47.356]      __var DP_SELECT         = 0x8;
[19:53:47.356]        // -> [DP_SELECT <= 0x00000008]
[19:53:47.356]      __var powered_down      = 0;
[19:53:47.356]        // -> [powered_down <= 0x00000000]
[19:53:47.356]      WriteDP(DP_SELECT, 0x00000000);
[19:53:47.364]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:53:47.364]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:53:47.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:53:47.367]        // -> [powered_down <= 0x00000001]
[19:53:47.367]    </block>
[19:53:47.367]    <control if="powered_down" while="" timeout="0" info="">
[19:53:47.367]      // if-block "powered_down"
[19:53:47.367]        // =>  TRUE
[19:53:47.367]      <block atomic="false" info="">
[19:53:47.367]        Message(0, "Debug/System power-up request sent");
[19:53:47.367]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:53:47.367]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:53:47.367]      </block>
[19:53:47.367]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:53:47.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:53:47.374]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:53:47.374]        // while-condition  =>  FALSE
[19:53:47.374]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:53:47.375]      </control>
[19:53:47.375]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:53:47.375]        // if-block "(__protocol & 0xFFFF) == 1"
[19:53:47.375]          // =>  FALSE
[19:53:47.375]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:53:47.375]      </control>
[19:53:47.375]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:53:47.375]        // if-block "(__protocol & 0xFFFF) == 2"
[19:53:47.375]          // =>  TRUE
[19:53:47.375]        <block atomic="false" info="">
[19:53:47.375]          Message(0, "executing SWD power up");
[19:53:47.375]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:53:47.375]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:53:47.375]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:53:47.375]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:53:47.375]        </block>
[19:53:47.375]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:53:47.375]      </control>
[19:53:47.375]      // end if-block "powered_down"
[19:53:47.375]    </control>
[19:53:47.375]    <block atomic="false" info="">
[19:53:47.375]      __var DEBUG_PORT_VAL    = 0;
[19:53:47.375]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:53:47.375]      __var ACCESS_POINT_VAL  = 0;
[19:53:47.375]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:53:47.375]      __ap = 1; 
[19:53:47.375]        // -> [__ap <= 0x00000001]
[19:53:47.375]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:53:47.385]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:53:47.385]      __ap = 4;
[19:53:47.385]        // -> [__ap <= 0x00000004]
[19:53:47.385]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:47.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:53:47.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:53:47.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:47.392]    </block>
[19:53:47.392]    <block atomic="false" info="">
[19:53:47.392]      __var nReset = 0x80;
[19:53:47.392]        // -> [nReset <= 0x00000080]
[19:53:47.392]      __var canReadPins = 0;
[19:53:47.395]        // -> [canReadPins <= 0x00000000]
[19:53:47.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:53:47.397]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:53:47.397]        // -> [canReadPins <= 0x00000001]
[19:53:47.398]    </block>
[19:53:47.398]    <control if="" while="1" timeout="200" info="">
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.398]      // while "1"  (timeout="200")
[19:53:47.398]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.405]      // while "1"  (timeout="200")
[19:53:47.405]      // while-condition  =>  TRUE
[19:53:47.415]      // while "1"  (timeout="200")
[19:53:47.415]      // while  =>  TIMEOUT
[19:53:47.415]      // end while "1"
[19:53:47.415]    </control>
[19:53:47.415]    <control if="canReadPins" while="" timeout="0" info="">
[19:53:47.415]      // if-block "canReadPins"
[19:53:47.415]        // =>  TRUE
[19:53:47.416]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:53:47.417]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:53:47.418]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:53:47.418]        // while-condition  =>  FALSE
[19:53:47.418]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:53:47.418]      </control>
[19:53:47.418]      // end if-block "canReadPins"
[19:53:47.418]    </control>
[19:53:47.419]    <control if="!canReadPins" while="" timeout="0" info="">
[19:53:47.419]      // if-block "!canReadPins"
[19:53:47.419]        // =>  FALSE
[19:53:47.419]      // skip if-block "!canReadPins"
[19:53:47.419]    </control>
[19:53:47.419]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:53:47.419]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:47.419]        // =>  TRUE
[19:53:47.419]      <block atomic="false" info="">
[19:53:47.419]        WriteAP(0x00, 0x190008);
[19:53:47.422]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:47.422]        WriteAP(0xF0, 0x01);
[19:53:47.426]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:47.428]      </block>
[19:53:47.428]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:47.428]    </control>
[19:53:47.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:53:47.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:47.428]        // =>  FALSE
[19:53:47.428]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:47.428]    </control>
[19:53:47.428]    <block atomic="false" info="">
[19:53:47.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:47.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:53:47.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:53:47.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:47.436]      __ap = 0; //lets make sure we reset the access point selection
[19:53:47.436]        // -> [__ap <= 0x00000000]
[19:53:47.436]    </block>
[19:53:47.436]  </sequence>
[19:53:47.436]  
[19:53:47.459]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:53:47.459]  
[19:53:47.459]  <debugvars>
[19:53:47.459]    // Pre-defined
[19:53:47.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:47.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:47.459]    __dp=0x00000000
[19:53:47.459]    __ap=0x00000000
[19:53:47.459]    __traceout=0x00000000      (Trace Disabled)
[19:53:47.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:47.459]    __FlashAddr=0x00000000
[19:53:47.466]    __FlashLen=0x00000000
[19:53:47.466]    __FlashArg=0x00000000
[19:53:47.466]    __FlashOp=0x00000000
[19:53:47.466]    __Result=0x00000000
[19:53:47.466]  </debugvars>
[19:53:47.466]  
[19:53:47.467]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:53:47.467]    <block atomic="false" info="">
[19:53:47.467]      __var deviceID = 0;
[19:53:47.467]        // -> [deviceID <= 0x00000000]
[19:53:47.467]      __var version = 0;
[19:53:47.467]        // -> [version <= 0x00000000]
[19:53:47.467]      __var partNum = 0;
[19:53:47.467]        // -> [partNum <= 0x00000000]
[19:53:47.467]      __var manuf = 0;
[19:53:47.467]        // -> [manuf <= 0x00000000]
[19:53:47.467]      __var isMSPM0G1X0X_G3X0X = 0;
[19:53:47.467]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:53:47.467]      __var isProduction = 0;
[19:53:47.467]        // -> [isProduction <= 0x00000000]
[19:53:47.467]      __var continueId = 0;
[19:53:47.467]        // -> [continueId <= 0x00000000]
[19:53:47.467]      deviceID =   Read32(0x41C40004);
[19:53:47.470]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:53:47.470]        // -> [deviceID <= 0x2BB8802F]
[19:53:47.470]      version = deviceID >> 28;
[19:53:47.470]        // -> [version <= 0x00000002]
[19:53:47.470]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:53:47.470]        // -> [partNum <= 0x0000BB88]
[19:53:47.470]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:53:47.470]        // -> [manuf <= 0x00000017]
[19:53:47.470]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:53:47.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:53:47.476]      isProduction = (version > 0);
[19:53:47.476]        // -> [isProduction <= 0x00000001]
[19:53:47.476]    </block>
[19:53:47.476]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:53:47.476]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:53:47.476]        // =>  FALSE
[19:53:47.476]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:53:47.476]    </control>
[19:53:47.476]    <control if="continueId == 4" while="" timeout="0" info="">
[19:53:47.476]      // if-block "continueId == 4"
[19:53:47.476]        // =>  FALSE
[19:53:47.476]      // skip if-block "continueId == 4"
[19:53:47.476]    </control>
[19:53:47.476]    <control if="!isProduction" while="" timeout="0" info="">
[19:53:47.476]      // if-block "!isProduction"
[19:53:47.476]        // =>  FALSE
[19:53:47.476]      // skip if-block "!isProduction"
[19:53:47.476]    </control>
[19:53:47.476]  </sequence>
[19:53:47.476]  
[20:02:22.127]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:02:22.127]  
[20:02:22.136]  <debugvars>
[20:02:22.136]    // Pre-defined
[20:02:22.136]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:22.136]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:22.136]    __dp=0x00000000
[20:02:22.136]    __ap=0x00000000
[20:02:22.136]    __traceout=0x00000000      (Trace Disabled)
[20:02:22.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:22.136]    __FlashAddr=0x00000000
[20:02:22.136]    __FlashLen=0x00000000
[20:02:22.136]    __FlashArg=0x00000000
[20:02:22.136]    __FlashOp=0x00000000
[20:02:22.136]    __Result=0x00000000
[20:02:22.136]  </debugvars>
[20:02:22.136]  
[20:02:22.136]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:02:22.136]    <block atomic="false" info="">
[20:02:22.136]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:02:22.136]        // -> [isSWJ <= 0x00000001]
[20:02:22.136]      __var hasDormant = __protocol & 0x00020000;
[20:02:22.136]        // -> [hasDormant <= 0x00000000]
[20:02:22.136]      __var protType   = __protocol & 0x0000FFFF;
[20:02:22.136]        // -> [protType <= 0x00000002]
[20:02:22.136]    </block>
[20:02:22.136]    <control if="protType == 1" while="" timeout="0" info="">
[20:02:22.136]      // if-block "protType == 1"
[20:02:22.136]        // =>  FALSE
[20:02:22.136]      // skip if-block "protType == 1"
[20:02:22.136]    </control>
[20:02:22.136]    <control if="protType == 2" while="" timeout="0" info="">
[20:02:22.136]      // if-block "protType == 2"
[20:02:22.136]        // =>  TRUE
[20:02:22.136]      <control if="isSWJ" while="" timeout="0" info="">
[20:02:22.136]        // if-block "isSWJ"
[20:02:22.136]          // =>  TRUE
[20:02:22.136]        <control if="hasDormant" while="" timeout="0" info="">
[20:02:22.136]          // if-block "hasDormant"
[20:02:22.136]            // =>  FALSE
[20:02:22.136]          // skip if-block "hasDormant"
[20:02:22.136]        </control>
[20:02:22.136]        <control if="!hasDormant" while="" timeout="0" info="">
[20:02:22.136]          // if-block "!hasDormant"
[20:02:22.136]            // =>  TRUE
[20:02:22.136]          <block atomic="false" info="">
[20:02:22.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:02:22.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:22.141]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:02:22.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:02:22.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:02:22.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:22.146]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:02:22.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:02:22.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:02:22.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:22.146]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:02:22.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:02:22.151]          </block>
[20:02:22.151]          // end if-block "!hasDormant"
[20:02:22.151]        </control>
[20:02:22.151]        // end if-block "isSWJ"
[20:02:22.151]      </control>
[20:02:22.151]      <control if="!isSWJ" while="" timeout="0" info="">
[20:02:22.151]        // if-block "!isSWJ"
[20:02:22.151]          // =>  FALSE
[20:02:22.151]        // skip if-block "!isSWJ"
[20:02:22.151]      </control>
[20:02:22.151]      <block atomic="false" info="">
[20:02:22.151]        ReadDP(0x0);
[20:02:22.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:02:22.151]      </block>
[20:02:22.151]      // end if-block "protType == 2"
[20:02:22.151]    </control>
[20:02:22.151]  </sequence>
[20:02:22.151]  
[20:02:22.156]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:02:22.156]  
[20:02:22.156]  <debugvars>
[20:02:22.156]    // Pre-defined
[20:02:22.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:22.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:22.156]    __dp=0x00000000
[20:02:22.156]    __ap=0x00000000
[20:02:22.156]    __traceout=0x00000000      (Trace Disabled)
[20:02:22.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:22.156]    __FlashAddr=0x00000000
[20:02:22.156]    __FlashLen=0x00000000
[20:02:22.156]    __FlashArg=0x00000000
[20:02:22.156]    __FlashOp=0x00000000
[20:02:22.156]    __Result=0x00000000
[20:02:22.156]  </debugvars>
[20:02:22.156]  
[20:02:22.161]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:02:22.162]    <block atomic="false" info="">
[20:02:22.162]      __var SW_DP_ABORT       = 0x0;
[20:02:22.162]        // -> [SW_DP_ABORT <= 0x00000000]
[20:02:22.162]      __var DP_CTRL_STAT      = 0x4;
[20:02:22.162]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:02:22.162]      __var DP_SELECT         = 0x8;
[20:02:22.162]        // -> [DP_SELECT <= 0x00000008]
[20:02:22.162]      __var powered_down      = 0;
[20:02:22.162]        // -> [powered_down <= 0x00000000]
[20:02:22.162]      WriteDP(DP_SELECT, 0x00000000);
[20:02:22.167]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:02:22.167]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:02:22.173]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:02:22.173]        // -> [powered_down <= 0x00000001]
[20:02:22.173]    </block>
[20:02:22.173]    <control if="powered_down" while="" timeout="0" info="">
[20:02:22.173]      // if-block "powered_down"
[20:02:22.173]        // =>  TRUE
[20:02:22.173]      <block atomic="false" info="">
[20:02:22.173]        Message(0, "Debug/System power-up request sent");
[20:02:22.173]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:02:22.173]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:02:22.182]      </block>
[20:02:22.182]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:02:22.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:02:22.183]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:02:22.183]        // while-condition  =>  FALSE
[20:02:22.183]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:02:22.183]      </control>
[20:02:22.183]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:02:22.183]        // if-block "(__protocol & 0xFFFF) == 1"
[20:02:22.183]          // =>  FALSE
[20:02:22.183]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:02:22.183]      </control>
[20:02:22.183]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:02:22.183]        // if-block "(__protocol & 0xFFFF) == 2"
[20:02:22.183]          // =>  TRUE
[20:02:22.183]        <block atomic="false" info="">
[20:02:22.183]          Message(0, "executing SWD power up");
[20:02:22.183]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:02:22.191]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:02:22.191]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:02:22.193]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:02:22.193]        </block>
[20:02:22.193]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:02:22.193]      </control>
[20:02:22.193]      // end if-block "powered_down"
[20:02:22.193]    </control>
[20:02:22.193]    <block atomic="false" info="">
[20:02:22.193]      __var DEBUG_PORT_VAL    = 0;
[20:02:22.193]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:02:22.193]      __var ACCESS_POINT_VAL  = 0;
[20:02:22.193]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:02:22.193]      __ap = 1; 
[20:02:22.193]        // -> [__ap <= 0x00000001]
[20:02:22.193]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:02:22.202]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:02:22.202]      __ap = 4;
[20:02:22.202]        // -> [__ap <= 0x00000004]
[20:02:22.202]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:22.211]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:02:22.211]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:02:22.211]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:22.211]    </block>
[20:02:22.211]    <block atomic="false" info="">
[20:02:22.211]      __var nReset = 0x80;
[20:02:22.211]        // -> [nReset <= 0x00000080]
[20:02:22.211]      __var canReadPins = 0;
[20:02:22.211]        // -> [canReadPins <= 0x00000000]
[20:02:22.211]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:02:22.211]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:02:22.211]        // -> [canReadPins <= 0x00000001]
[20:02:22.211]    </block>
[20:02:22.211]    <control if="" while="1" timeout="200" info="">
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.211]      // while-condition  =>  TRUE
[20:02:22.211]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.221]      // while-condition  =>  TRUE
[20:02:22.221]      // while "1"  (timeout="200")
[20:02:22.223]      // while-condition  =>  TRUE
[20:02:22.223]      // while "1"  (timeout="200")
[20:02:22.223]      // while  =>  TIMEOUT
[20:02:22.223]      // end while "1"
[20:02:22.223]    </control>
[20:02:22.223]    <control if="canReadPins" while="" timeout="0" info="">
[20:02:22.223]      // if-block "canReadPins"
[20:02:22.223]        // =>  TRUE
[20:02:22.223]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:02:22.223]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:02:22.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:02:22.223]        // while-condition  =>  FALSE
[20:02:22.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:02:22.223]      </control>
[20:02:22.223]      // end if-block "canReadPins"
[20:02:22.223]    </control>
[20:02:22.223]    <control if="!canReadPins" while="" timeout="0" info="">
[20:02:22.223]      // if-block "!canReadPins"
[20:02:22.223]        // =>  FALSE
[20:02:22.223]      // skip if-block "!canReadPins"
[20:02:22.223]    </control>
[20:02:22.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:02:22.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:22.223]        // =>  TRUE
[20:02:22.223]      <block atomic="false" info="">
[20:02:22.223]        WriteAP(0x00, 0x190008);
[20:02:22.223]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:22.223]        WriteAP(0xF0, 0x01);
[20:02:22.231]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:22.231]      </block>
[20:02:22.231]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:22.231]    </control>
[20:02:22.231]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:02:22.231]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:22.231]        // =>  FALSE
[20:02:22.231]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:22.231]    </control>
[20:02:22.231]    <block atomic="false" info="">
[20:02:22.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:22.243]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:02:22.243]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:02:22.243]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:22.243]      __ap = 0; //lets make sure we reset the access point selection
[20:02:22.243]        // -> [__ap <= 0x00000000]
[20:02:22.251]    </block>
[20:02:22.251]  </sequence>
[20:02:22.251]  
[20:02:22.283]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:02:22.283]  
[20:02:22.283]  <debugvars>
[20:02:22.283]    // Pre-defined
[20:02:22.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:22.283]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:22.283]    __dp=0x00000000
[20:02:22.283]    __ap=0x00000000
[20:02:22.283]    __traceout=0x00000000      (Trace Disabled)
[20:02:22.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:22.292]    __FlashAddr=0x00000000
[20:02:22.292]    __FlashLen=0x00000000
[20:02:22.292]    __FlashArg=0x00000000
[20:02:22.292]    __FlashOp=0x00000000
[20:02:22.292]    __Result=0x00000000
[20:02:22.292]  </debugvars>
[20:02:22.292]  
[20:02:22.292]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:02:22.292]    <block atomic="false" info="">
[20:02:22.292]      __var deviceID = 0;
[20:02:22.293]        // -> [deviceID <= 0x00000000]
[20:02:22.293]      __var version = 0;
[20:02:22.293]        // -> [version <= 0x00000000]
[20:02:22.293]      __var partNum = 0;
[20:02:22.293]        // -> [partNum <= 0x00000000]
[20:02:22.293]      __var manuf = 0;
[20:02:22.293]        // -> [manuf <= 0x00000000]
[20:02:22.293]      __var isMSPM0G1X0X_G3X0X = 0;
[20:02:22.293]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:02:22.293]      __var isProduction = 0;
[20:02:22.293]        // -> [isProduction <= 0x00000000]
[20:02:22.293]      __var continueId = 0;
[20:02:22.293]        // -> [continueId <= 0x00000000]
[20:02:22.293]      deviceID =   Read32(0x41C40004);
[20:02:22.301]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:02:22.301]        // -> [deviceID <= 0x2BB8802F]
[20:02:22.301]      version = deviceID >> 28;
[20:02:22.301]        // -> [version <= 0x00000002]
[20:02:22.301]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:02:22.301]        // -> [partNum <= 0x0000BB88]
[20:02:22.301]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:02:22.301]        // -> [manuf <= 0x00000017]
[20:02:22.301]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:02:22.301]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:02:22.301]      isProduction = (version > 0);
[20:02:22.301]        // -> [isProduction <= 0x00000001]
[20:02:22.301]    </block>
[20:02:22.301]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:02:22.301]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:02:22.301]        // =>  FALSE
[20:02:22.301]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:02:22.301]    </control>
[20:02:22.301]    <control if="continueId == 4" while="" timeout="0" info="">
[20:02:22.301]      // if-block "continueId == 4"
[20:02:22.301]        // =>  FALSE
[20:02:22.301]      // skip if-block "continueId == 4"
[20:02:22.301]    </control>
[20:02:22.301]    <control if="!isProduction" while="" timeout="0" info="">
[20:02:22.301]      // if-block "!isProduction"
[20:02:22.301]        // =>  FALSE
[20:02:22.301]      // skip if-block "!isProduction"
[20:02:22.301]    </control>
[20:02:22.301]  </sequence>
[20:02:22.301]  
[20:03:54.594]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:03:54.594]  
[20:03:54.594]  <debugvars>
[20:03:54.596]    // Pre-defined
[20:03:54.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:54.596]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:54.596]    __dp=0x00000000
[20:03:54.596]    __ap=0x00000000
[20:03:54.596]    __traceout=0x00000000      (Trace Disabled)
[20:03:54.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:54.596]    __FlashAddr=0x00000000
[20:03:54.596]    __FlashLen=0x00000000
[20:03:54.596]    __FlashArg=0x00000000
[20:03:54.596]    __FlashOp=0x00000000
[20:03:54.597]    __Result=0x00000000
[20:03:54.597]  </debugvars>
[20:03:54.597]  
[20:03:54.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:03:54.597]    <block atomic="false" info="">
[20:03:54.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:03:54.597]        // -> [isSWJ <= 0x00000001]
[20:03:54.597]      __var hasDormant = __protocol & 0x00020000;
[20:03:54.597]        // -> [hasDormant <= 0x00000000]
[20:03:54.597]      __var protType   = __protocol & 0x0000FFFF;
[20:03:54.598]        // -> [protType <= 0x00000002]
[20:03:54.598]    </block>
[20:03:54.598]    <control if="protType == 1" while="" timeout="0" info="">
[20:03:54.598]      // if-block "protType == 1"
[20:03:54.598]        // =>  FALSE
[20:03:54.598]      // skip if-block "protType == 1"
[20:03:54.598]    </control>
[20:03:54.598]    <control if="protType == 2" while="" timeout="0" info="">
[20:03:54.598]      // if-block "protType == 2"
[20:03:54.598]        // =>  TRUE
[20:03:54.598]      <control if="isSWJ" while="" timeout="0" info="">
[20:03:54.600]        // if-block "isSWJ"
[20:03:54.600]          // =>  TRUE
[20:03:54.600]        <control if="hasDormant" while="" timeout="0" info="">
[20:03:54.600]          // if-block "hasDormant"
[20:03:54.600]            // =>  FALSE
[20:03:54.600]          // skip if-block "hasDormant"
[20:03:54.600]        </control>
[20:03:54.600]        <control if="!hasDormant" while="" timeout="0" info="">
[20:03:54.600]          // if-block "!hasDormant"
[20:03:54.600]            // =>  TRUE
[20:03:54.600]          <block atomic="false" info="">
[20:03:54.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:03:54.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:54.602]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:03:54.606]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:03:54.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:03:54.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:54.611]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:03:54.613]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:03:54.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:03:54.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:54.613]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:03:54.613]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:03:54.613]          </block>
[20:03:54.613]          // end if-block "!hasDormant"
[20:03:54.613]        </control>
[20:03:54.613]        // end if-block "isSWJ"
[20:03:54.613]      </control>
[20:03:54.613]      <control if="!isSWJ" while="" timeout="0" info="">
[20:03:54.613]        // if-block "!isSWJ"
[20:03:54.613]          // =>  FALSE
[20:03:54.613]        // skip if-block "!isSWJ"
[20:03:54.613]      </control>
[20:03:54.613]      <block atomic="false" info="">
[20:03:54.613]        ReadDP(0x0);
[20:03:54.620]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:03:54.620]      </block>
[20:03:54.620]      // end if-block "protType == 2"
[20:03:54.620]    </control>
[20:03:54.620]  </sequence>
[20:03:54.620]  
[20:03:54.629]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:03:54.629]  
[20:03:54.629]  <debugvars>
[20:03:54.629]    // Pre-defined
[20:03:54.629]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:54.629]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:54.629]    __dp=0x00000000
[20:03:54.629]    __ap=0x00000000
[20:03:54.629]    __traceout=0x00000000      (Trace Disabled)
[20:03:54.629]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:54.629]    __FlashAddr=0x00000000
[20:03:54.629]    __FlashLen=0x00000000
[20:03:54.629]    __FlashArg=0x00000000
[20:03:54.629]    __FlashOp=0x00000000
[20:03:54.629]    __Result=0x00000000
[20:03:54.629]  </debugvars>
[20:03:54.629]  
[20:03:54.629]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:03:54.629]    <block atomic="false" info="">
[20:03:54.629]      __var SW_DP_ABORT       = 0x0;
[20:03:54.629]        // -> [SW_DP_ABORT <= 0x00000000]
[20:03:54.629]      __var DP_CTRL_STAT      = 0x4;
[20:03:54.629]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:03:54.629]      __var DP_SELECT         = 0x8;
[20:03:54.629]        // -> [DP_SELECT <= 0x00000008]
[20:03:54.629]      __var powered_down      = 0;
[20:03:54.632]        // -> [powered_down <= 0x00000000]
[20:03:54.632]      WriteDP(DP_SELECT, 0x00000000);
[20:03:54.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:03:54.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:03:54.644]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:03:54.644]        // -> [powered_down <= 0x00000001]
[20:03:54.644]    </block>
[20:03:54.644]    <control if="powered_down" while="" timeout="0" info="">
[20:03:54.644]      // if-block "powered_down"
[20:03:54.644]        // =>  TRUE
[20:03:54.644]      <block atomic="false" info="">
[20:03:54.644]        Message(0, "Debug/System power-up request sent");
[20:03:54.645]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:03:54.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:03:54.645]      </block>
[20:03:54.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:03:54.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:03:54.652]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:03:54.652]        // while-condition  =>  FALSE
[20:03:54.652]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:03:54.652]      </control>
[20:03:54.652]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:03:54.652]        // if-block "(__protocol & 0xFFFF) == 1"
[20:03:54.652]          // =>  FALSE
[20:03:54.652]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:03:54.652]      </control>
[20:03:54.652]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:03:54.652]        // if-block "(__protocol & 0xFFFF) == 2"
[20:03:54.652]          // =>  TRUE
[20:03:54.652]        <block atomic="false" info="">
[20:03:54.652]          Message(0, "executing SWD power up");
[20:03:54.652]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:03:54.659]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:03:54.659]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:03:54.662]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:03:54.662]        </block>
[20:03:54.662]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:03:54.662]      </control>
[20:03:54.662]      // end if-block "powered_down"
[20:03:54.662]    </control>
[20:03:54.662]    <block atomic="false" info="">
[20:03:54.662]      __var DEBUG_PORT_VAL    = 0;
[20:03:54.662]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:03:54.662]      __var ACCESS_POINT_VAL  = 0;
[20:03:54.662]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:03:54.662]      __ap = 1; 
[20:03:54.662]        // -> [__ap <= 0x00000001]
[20:03:54.662]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:03:54.674]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:03:54.674]      __ap = 4;
[20:03:54.674]        // -> [__ap <= 0x00000004]
[20:03:54.674]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:54.682]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:03:54.682]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:03:54.682]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:54.682]    </block>
[20:03:54.682]    <block atomic="false" info="">
[20:03:54.682]      __var nReset = 0x80;
[20:03:54.682]        // -> [nReset <= 0x00000080]
[20:03:54.682]      __var canReadPins = 0;
[20:03:54.682]        // -> [canReadPins <= 0x00000000]
[20:03:54.682]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:03:54.690]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:03:54.690]        // -> [canReadPins <= 0x00000001]
[20:03:54.690]    </block>
[20:03:54.690]    <control if="" while="1" timeout="200" info="">
[20:03:54.690]      // while "1"  (timeout="200")
[20:03:54.690]      // while-condition  =>  TRUE
[20:03:54.690]      // while "1"  (timeout="200")
[20:03:54.690]      // while-condition  =>  TRUE
[20:03:54.690]      // while "1"  (timeout="200")
[20:03:54.690]      // while-condition  =>  TRUE
[20:03:54.691]      // while "1"  (timeout="200")
[20:03:54.691]      // while  =>  TIMEOUT
[20:03:54.691]      // end while "1"
[20:03:54.691]    </control>
[20:03:54.691]    <control if="canReadPins" while="" timeout="0" info="">
[20:03:54.691]      // if-block "canReadPins"
[20:03:54.691]        // =>  TRUE
[20:03:54.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:03:54.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:03:54.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:03:54.695]        // while-condition  =>  FALSE
[20:03:54.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:03:54.695]      </control>
[20:03:54.695]      // end if-block "canReadPins"
[20:03:54.695]    </control>
[20:03:54.695]    <control if="!canReadPins" while="" timeout="0" info="">
[20:03:54.695]      // if-block "!canReadPins"
[20:03:54.695]        // =>  FALSE
[20:03:54.695]      // skip if-block "!canReadPins"
[20:03:54.695]    </control>
[20:03:54.695]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:03:54.695]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:54.695]        // =>  TRUE
[20:03:54.695]      <block atomic="false" info="">
[20:03:54.695]        WriteAP(0x00, 0x190008);
[20:03:54.699]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:54.699]        WriteAP(0xF0, 0x01);
[20:03:54.703]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:54.703]      </block>
[20:03:54.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:54.703]    </control>
[20:03:54.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:03:54.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:54.703]        // =>  FALSE
[20:03:54.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:54.703]    </control>
[20:03:54.703]    <block atomic="false" info="">
[20:03:54.703]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:54.712]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:03:54.712]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:03:54.712]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:54.712]      __ap = 0; //lets make sure we reset the access point selection
[20:03:54.712]        // -> [__ap <= 0x00000000]
[20:03:54.712]    </block>
[20:03:54.712]  </sequence>
[20:03:54.712]  
[20:03:54.750]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:03:54.750]  
[20:03:54.750]  <debugvars>
[20:03:54.750]    // Pre-defined
[20:03:54.750]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:54.750]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:54.750]    __dp=0x00000000
[20:03:54.750]    __ap=0x00000000
[20:03:54.750]    __traceout=0x00000000      (Trace Disabled)
[20:03:54.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:54.750]    __FlashAddr=0x00000000
[20:03:54.750]    __FlashLen=0x00000000
[20:03:54.750]    __FlashArg=0x00000000
[20:03:54.750]    __FlashOp=0x00000000
[20:03:54.750]    __Result=0x00000000
[20:03:54.750]  </debugvars>
[20:03:54.750]  
[20:03:54.750]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:03:54.750]    <block atomic="false" info="">
[20:03:54.750]      __var deviceID = 0;
[20:03:54.750]        // -> [deviceID <= 0x00000000]
[20:03:54.750]      __var version = 0;
[20:03:54.750]        // -> [version <= 0x00000000]
[20:03:54.750]      __var partNum = 0;
[20:03:54.750]        // -> [partNum <= 0x00000000]
[20:03:54.750]      __var manuf = 0;
[20:03:54.750]        // -> [manuf <= 0x00000000]
[20:03:54.750]      __var isMSPM0G1X0X_G3X0X = 0;
[20:03:54.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:03:54.750]      __var isProduction = 0;
[20:03:54.750]        // -> [isProduction <= 0x00000000]
[20:03:54.750]      __var continueId = 0;
[20:03:54.750]        // -> [continueId <= 0x00000000]
[20:03:54.750]      deviceID =   Read32(0x41C40004);
[20:03:54.759]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:03:54.759]        // -> [deviceID <= 0x2BB8802F]
[20:03:54.759]      version = deviceID >> 28;
[20:03:54.759]        // -> [version <= 0x00000002]
[20:03:54.759]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:03:54.759]        // -> [partNum <= 0x0000BB88]
[20:03:54.759]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:03:54.759]        // -> [manuf <= 0x00000017]
[20:03:54.759]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:03:54.759]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:03:54.759]      isProduction = (version > 0);
[20:03:54.759]        // -> [isProduction <= 0x00000001]
[20:03:54.759]    </block>
[20:03:54.759]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:03:54.759]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:03:54.759]        // =>  FALSE
[20:03:54.759]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:03:54.759]    </control>
[20:03:54.759]    <control if="continueId == 4" while="" timeout="0" info="">
[20:03:54.759]      // if-block "continueId == 4"
[20:03:54.759]        // =>  FALSE
[20:03:54.759]      // skip if-block "continueId == 4"
[20:03:54.759]    </control>
[20:03:54.759]    <control if="!isProduction" while="" timeout="0" info="">
[20:03:54.759]      // if-block "!isProduction"
[20:03:54.759]        // =>  FALSE
[20:03:54.759]      // skip if-block "!isProduction"
[20:03:54.759]    </control>
[20:03:54.759]  </sequence>
[20:03:54.759]  
[20:04:39.735]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:04:39.735]  
[20:04:39.744]  <debugvars>
[20:04:39.744]    // Pre-defined
[20:04:39.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:39.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:39.744]    __dp=0x00000000
[20:04:39.744]    __ap=0x00000000
[20:04:39.744]    __traceout=0x00000000      (Trace Disabled)
[20:04:39.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:39.744]    __FlashAddr=0x00000000
[20:04:39.744]    __FlashLen=0x00000000
[20:04:39.744]    __FlashArg=0x00000000
[20:04:39.744]    __FlashOp=0x00000000
[20:04:39.744]    __Result=0x00000000
[20:04:39.744]  </debugvars>
[20:04:39.744]  
[20:04:39.744]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:04:39.744]    <block atomic="false" info="">
[20:04:39.744]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:04:39.744]        // -> [isSWJ <= 0x00000001]
[20:04:39.744]      __var hasDormant = __protocol & 0x00020000;
[20:04:39.744]        // -> [hasDormant <= 0x00000000]
[20:04:39.744]      __var protType   = __protocol & 0x0000FFFF;
[20:04:39.744]        // -> [protType <= 0x00000002]
[20:04:39.744]    </block>
[20:04:39.744]    <control if="protType == 1" while="" timeout="0" info="">
[20:04:39.744]      // if-block "protType == 1"
[20:04:39.744]        // =>  FALSE
[20:04:39.744]      // skip if-block "protType == 1"
[20:04:39.744]    </control>
[20:04:39.744]    <control if="protType == 2" while="" timeout="0" info="">
[20:04:39.744]      // if-block "protType == 2"
[20:04:39.744]        // =>  TRUE
[20:04:39.744]      <control if="isSWJ" while="" timeout="0" info="">
[20:04:39.744]        // if-block "isSWJ"
[20:04:39.744]          // =>  TRUE
[20:04:39.744]        <control if="hasDormant" while="" timeout="0" info="">
[20:04:39.744]          // if-block "hasDormant"
[20:04:39.744]            // =>  FALSE
[20:04:39.744]          // skip if-block "hasDormant"
[20:04:39.744]        </control>
[20:04:39.744]        <control if="!hasDormant" while="" timeout="0" info="">
[20:04:39.744]          // if-block "!hasDormant"
[20:04:39.744]            // =>  TRUE
[20:04:39.744]          <block atomic="false" info="">
[20:04:39.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:04:39.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:39.744]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:04:39.752]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:04:39.752]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:04:39.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:39.763]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:04:39.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:04:39.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:04:39.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:39.764]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:04:39.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:04:39.764]          </block>
[20:04:39.764]          // end if-block "!hasDormant"
[20:04:39.764]        </control>
[20:04:39.764]        // end if-block "isSWJ"
[20:04:39.764]      </control>
[20:04:39.764]      <control if="!isSWJ" while="" timeout="0" info="">
[20:04:39.764]        // if-block "!isSWJ"
[20:04:39.764]          // =>  FALSE
[20:04:39.764]        // skip if-block "!isSWJ"
[20:04:39.764]      </control>
[20:04:39.764]      <block atomic="false" info="">
[20:04:39.764]        ReadDP(0x0);
[20:04:39.772]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:04:39.772]      </block>
[20:04:39.772]      // end if-block "protType == 2"
[20:04:39.774]    </control>
[20:04:39.774]  </sequence>
[20:04:39.774]  
[20:04:39.774]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:04:39.774]  
[20:04:39.774]  <debugvars>
[20:04:39.774]    // Pre-defined
[20:04:39.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:39.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:39.774]    __dp=0x00000000
[20:04:39.774]    __ap=0x00000000
[20:04:39.774]    __traceout=0x00000000      (Trace Disabled)
[20:04:39.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:39.774]    __FlashAddr=0x00000000
[20:04:39.774]    __FlashLen=0x00000000
[20:04:39.774]    __FlashArg=0x00000000
[20:04:39.774]    __FlashOp=0x00000000
[20:04:39.774]    __Result=0x00000000
[20:04:39.774]  </debugvars>
[20:04:39.774]  
[20:04:39.774]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:04:39.774]    <block atomic="false" info="">
[20:04:39.774]      __var SW_DP_ABORT       = 0x0;
[20:04:39.774]        // -> [SW_DP_ABORT <= 0x00000000]
[20:04:39.774]      __var DP_CTRL_STAT      = 0x4;
[20:04:39.774]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:04:39.774]      __var DP_SELECT         = 0x8;
[20:04:39.774]        // -> [DP_SELECT <= 0x00000008]
[20:04:39.774]      __var powered_down      = 0;
[20:04:39.774]        // -> [powered_down <= 0x00000000]
[20:04:39.774]      WriteDP(DP_SELECT, 0x00000000);
[20:04:39.774]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:04:39.774]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:04:39.783]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:04:39.783]        // -> [powered_down <= 0x00000001]
[20:04:39.783]    </block>
[20:04:39.783]    <control if="powered_down" while="" timeout="0" info="">
[20:04:39.783]      // if-block "powered_down"
[20:04:39.783]        // =>  TRUE
[20:04:39.783]      <block atomic="false" info="">
[20:04:39.783]        Message(0, "Debug/System power-up request sent");
[20:04:39.783]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:04:39.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:04:39.783]      </block>
[20:04:39.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:04:39.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:04:39.783]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:04:39.783]        // while-condition  =>  FALSE
[20:04:39.783]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:04:39.793]      </control>
[20:04:39.793]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:04:39.793]        // if-block "(__protocol & 0xFFFF) == 1"
[20:04:39.793]          // =>  FALSE
[20:04:39.793]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:04:39.793]      </control>
[20:04:39.793]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:04:39.793]        // if-block "(__protocol & 0xFFFF) == 2"
[20:04:39.793]          // =>  TRUE
[20:04:39.793]        <block atomic="false" info="">
[20:04:39.793]          Message(0, "executing SWD power up");
[20:04:39.795]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:04:39.799]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:04:39.800]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:04:39.800]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:04:39.800]        </block>
[20:04:39.800]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:04:39.803]      </control>
[20:04:39.803]      // end if-block "powered_down"
[20:04:39.803]    </control>
[20:04:39.803]    <block atomic="false" info="">
[20:04:39.803]      __var DEBUG_PORT_VAL    = 0;
[20:04:39.803]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:04:39.804]      __var ACCESS_POINT_VAL  = 0;
[20:04:39.804]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:04:39.804]      __ap = 1; 
[20:04:39.804]        // -> [__ap <= 0x00000001]
[20:04:39.804]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:04:39.813]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:04:39.813]      __ap = 4;
[20:04:39.813]        // -> [__ap <= 0x00000004]
[20:04:39.813]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:39.827]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:04:39.827]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:04:39.827]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:39.827]    </block>
[20:04:39.827]    <block atomic="false" info="">
[20:04:39.827]      __var nReset = 0x80;
[20:04:39.827]        // -> [nReset <= 0x00000080]
[20:04:39.827]      __var canReadPins = 0;
[20:04:39.827]        // -> [canReadPins <= 0x00000000]
[20:04:39.827]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:04:39.834]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:04:39.834]        // -> [canReadPins <= 0x00000001]
[20:04:39.834]    </block>
[20:04:39.834]    <control if="" while="1" timeout="200" info="">
[20:04:39.834]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.835]      // while "1"  (timeout="200")
[20:04:39.835]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.844]      // while "1"  (timeout="200")
[20:04:39.844]      // while-condition  =>  TRUE
[20:04:39.854]      // while "1"  (timeout="200")
[20:04:39.854]      // while  =>  TIMEOUT
[20:04:39.854]      // end while "1"
[20:04:39.854]    </control>
[20:04:39.854]    <control if="canReadPins" while="" timeout="0" info="">
[20:04:39.854]      // if-block "canReadPins"
[20:04:39.854]        // =>  TRUE
[20:04:39.854]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:04:39.855]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:04:39.855]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:04:39.855]        // while-condition  =>  FALSE
[20:04:39.855]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:04:39.855]      </control>
[20:04:39.855]      // end if-block "canReadPins"
[20:04:39.855]    </control>
[20:04:39.855]    <control if="!canReadPins" while="" timeout="0" info="">
[20:04:39.855]      // if-block "!canReadPins"
[20:04:39.855]        // =>  FALSE
[20:04:39.855]      // skip if-block "!canReadPins"
[20:04:39.855]    </control>
[20:04:39.855]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:04:39.855]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:39.855]        // =>  TRUE
[20:04:39.855]      <block atomic="false" info="">
[20:04:39.855]        WriteAP(0x00, 0x190008);
[20:04:39.855]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:39.855]        WriteAP(0xF0, 0x01);
[20:04:39.864]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:39.864]      </block>
[20:04:39.864]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:39.864]    </control>
[20:04:39.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:04:39.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:39.864]        // =>  FALSE
[20:04:39.864]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:39.864]    </control>
[20:04:39.864]    <block atomic="false" info="">
[20:04:39.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:39.864]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:04:39.864]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:04:39.864]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:39.875]      __ap = 0; //lets make sure we reset the access point selection
[20:04:39.875]        // -> [__ap <= 0x00000000]
[20:04:39.875]    </block>
[20:04:39.875]  </sequence>
[20:04:39.875]  
[20:04:39.926]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:04:39.926]  
[20:04:39.926]  <debugvars>
[20:04:39.926]    // Pre-defined
[20:04:39.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:39.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:39.927]    __dp=0x00000000
[20:04:39.927]    __ap=0x00000000
[20:04:39.927]    __traceout=0x00000000      (Trace Disabled)
[20:04:39.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:39.927]    __FlashAddr=0x00000000
[20:04:39.927]    __FlashLen=0x00000000
[20:04:39.927]    __FlashArg=0x00000000
[20:04:39.928]    __FlashOp=0x00000000
[20:04:39.928]    __Result=0x00000000
[20:04:39.928]  </debugvars>
[20:04:39.928]  
[20:04:39.928]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:04:39.928]    <block atomic="false" info="">
[20:04:39.928]      __var deviceID = 0;
[20:04:39.928]        // -> [deviceID <= 0x00000000]
[20:04:39.928]      __var version = 0;
[20:04:39.928]        // -> [version <= 0x00000000]
[20:04:39.928]      __var partNum = 0;
[20:04:39.928]        // -> [partNum <= 0x00000000]
[20:04:39.928]      __var manuf = 0;
[20:04:39.928]        // -> [manuf <= 0x00000000]
[20:04:39.928]      __var isMSPM0G1X0X_G3X0X = 0;
[20:04:39.928]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:04:39.928]      __var isProduction = 0;
[20:04:39.928]        // -> [isProduction <= 0x00000000]
[20:04:39.928]      __var continueId = 0;
[20:04:39.928]        // -> [continueId <= 0x00000000]
[20:04:39.928]      deviceID =   Read32(0x41C40004);
[20:04:39.938]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:04:39.938]        // -> [deviceID <= 0x2BB8802F]
[20:04:39.938]      version = deviceID >> 28;
[20:04:39.938]        // -> [version <= 0x00000002]
[20:04:39.938]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:04:39.938]        // -> [partNum <= 0x0000BB88]
[20:04:39.938]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:04:39.938]        // -> [manuf <= 0x00000017]
[20:04:39.938]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:04:39.938]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:04:39.938]      isProduction = (version > 0);
[20:04:39.938]        // -> [isProduction <= 0x00000001]
[20:04:39.938]    </block>
[20:04:39.938]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:04:39.938]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:04:39.938]        // =>  FALSE
[20:04:39.938]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:04:39.938]    </control>
[20:04:39.938]    <control if="continueId == 4" while="" timeout="0" info="">
[20:04:39.938]      // if-block "continueId == 4"
[20:04:39.938]        // =>  FALSE
[20:04:39.938]      // skip if-block "continueId == 4"
[20:04:39.938]    </control>
[20:04:39.938]    <control if="!isProduction" while="" timeout="0" info="">
[20:04:39.938]      // if-block "!isProduction"
[20:04:39.938]        // =>  FALSE
[20:04:39.938]      // skip if-block "!isProduction"
[20:04:39.938]    </control>
[20:04:39.938]  </sequence>
[20:04:39.938]  
[20:05:17.314]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:05:17.314]  
[20:05:17.323]  <debugvars>
[20:05:17.323]    // Pre-defined
[20:05:17.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:17.323]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:17.323]    __dp=0x00000000
[20:05:17.323]    __ap=0x00000000
[20:05:17.323]    __traceout=0x00000000      (Trace Disabled)
[20:05:17.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:17.323]    __FlashAddr=0x00000000
[20:05:17.323]    __FlashLen=0x00000000
[20:05:17.323]    __FlashArg=0x00000000
[20:05:17.323]    __FlashOp=0x00000000
[20:05:17.323]    __Result=0x00000000
[20:05:17.323]  </debugvars>
[20:05:17.323]  
[20:05:17.323]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:05:17.323]    <block atomic="false" info="">
[20:05:17.323]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:05:17.323]        // -> [isSWJ <= 0x00000001]
[20:05:17.323]      __var hasDormant = __protocol & 0x00020000;
[20:05:17.323]        // -> [hasDormant <= 0x00000000]
[20:05:17.323]      __var protType   = __protocol & 0x0000FFFF;
[20:05:17.323]        // -> [protType <= 0x00000002]
[20:05:17.323]    </block>
[20:05:17.323]    <control if="protType == 1" while="" timeout="0" info="">
[20:05:17.323]      // if-block "protType == 1"
[20:05:17.323]        // =>  FALSE
[20:05:17.323]      // skip if-block "protType == 1"
[20:05:17.323]    </control>
[20:05:17.323]    <control if="protType == 2" while="" timeout="0" info="">
[20:05:17.323]      // if-block "protType == 2"
[20:05:17.323]        // =>  TRUE
[20:05:17.327]      <control if="isSWJ" while="" timeout="0" info="">
[20:05:17.327]        // if-block "isSWJ"
[20:05:17.327]          // =>  TRUE
[20:05:17.327]        <control if="hasDormant" while="" timeout="0" info="">
[20:05:17.327]          // if-block "hasDormant"
[20:05:17.327]            // =>  FALSE
[20:05:17.327]          // skip if-block "hasDormant"
[20:05:17.327]        </control>
[20:05:17.327]        <control if="!hasDormant" while="" timeout="0" info="">
[20:05:17.327]          // if-block "!hasDormant"
[20:05:17.327]            // =>  TRUE
[20:05:17.327]          <block atomic="false" info="">
[20:05:17.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:05:17.328]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:17.328]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:05:17.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:05:17.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:05:17.333]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:17.333]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:05:17.337]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:05:17.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:05:17.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:17.339]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:05:17.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:05:17.340]          </block>
[20:05:17.340]          // end if-block "!hasDormant"
[20:05:17.340]        </control>
[20:05:17.340]        // end if-block "isSWJ"
[20:05:17.340]      </control>
[20:05:17.340]      <control if="!isSWJ" while="" timeout="0" info="">
[20:05:17.340]        // if-block "!isSWJ"
[20:05:17.340]          // =>  FALSE
[20:05:17.340]        // skip if-block "!isSWJ"
[20:05:17.340]      </control>
[20:05:17.340]      <block atomic="false" info="">
[20:05:17.340]        ReadDP(0x0);
[20:05:17.346]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:05:17.346]      </block>
[20:05:17.346]      // end if-block "protType == 2"
[20:05:17.346]    </control>
[20:05:17.346]  </sequence>
[20:05:17.346]  
[20:05:17.355]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:05:17.355]  
[20:05:17.355]  <debugvars>
[20:05:17.355]    // Pre-defined
[20:05:17.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:17.355]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:17.355]    __dp=0x00000000
[20:05:17.355]    __ap=0x00000000
[20:05:17.355]    __traceout=0x00000000      (Trace Disabled)
[20:05:17.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:17.355]    __FlashAddr=0x00000000
[20:05:17.355]    __FlashLen=0x00000000
[20:05:17.355]    __FlashArg=0x00000000
[20:05:17.355]    __FlashOp=0x00000000
[20:05:17.355]    __Result=0x00000000
[20:05:17.355]  </debugvars>
[20:05:17.355]  
[20:05:17.355]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:05:17.355]    <block atomic="false" info="">
[20:05:17.355]      __var SW_DP_ABORT       = 0x0;
[20:05:17.355]        // -> [SW_DP_ABORT <= 0x00000000]
[20:05:17.355]      __var DP_CTRL_STAT      = 0x4;
[20:05:17.355]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:05:17.355]      __var DP_SELECT         = 0x8;
[20:05:17.355]        // -> [DP_SELECT <= 0x00000008]
[20:05:17.355]      __var powered_down      = 0;
[20:05:17.355]        // -> [powered_down <= 0x00000000]
[20:05:17.355]      WriteDP(DP_SELECT, 0x00000000);
[20:05:17.355]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:05:17.355]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:05:17.364]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:05:17.365]        // -> [powered_down <= 0x00000001]
[20:05:17.365]    </block>
[20:05:17.365]    <control if="powered_down" while="" timeout="0" info="">
[20:05:17.365]      // if-block "powered_down"
[20:05:17.365]        // =>  TRUE
[20:05:17.365]      <block atomic="false" info="">
[20:05:17.365]        Message(0, "Debug/System power-up request sent");
[20:05:17.367]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:05:17.372]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:05:17.374]      </block>
[20:05:17.374]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:05:17.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:05:17.375]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:05:17.375]        // while-condition  =>  FALSE
[20:05:17.375]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:05:17.375]      </control>
[20:05:17.375]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:05:17.375]        // if-block "(__protocol & 0xFFFF) == 1"
[20:05:17.375]          // =>  FALSE
[20:05:17.375]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:05:17.375]      </control>
[20:05:17.375]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:05:17.375]        // if-block "(__protocol & 0xFFFF) == 2"
[20:05:17.375]          // =>  TRUE
[20:05:17.375]        <block atomic="false" info="">
[20:05:17.375]          Message(0, "executing SWD power up");
[20:05:17.378]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:05:17.379]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:05:17.379]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:05:17.379]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:05:17.379]        </block>
[20:05:17.379]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:05:17.379]      </control>
[20:05:17.379]      // end if-block "powered_down"
[20:05:17.379]    </control>
[20:05:17.379]    <block atomic="false" info="">
[20:05:17.379]      __var DEBUG_PORT_VAL    = 0;
[20:05:17.379]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:05:17.379]      __var ACCESS_POINT_VAL  = 0;
[20:05:17.379]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:05:17.379]      __ap = 1; 
[20:05:17.379]        // -> [__ap <= 0x00000001]
[20:05:17.379]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:05:17.395]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:05:17.395]      __ap = 4;
[20:05:17.395]        // -> [__ap <= 0x00000004]
[20:05:17.395]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:17.397]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:05:17.397]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:05:17.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:17.402]    </block>
[20:05:17.402]    <block atomic="false" info="">
[20:05:17.402]      __var nReset = 0x80;
[20:05:17.402]        // -> [nReset <= 0x00000080]
[20:05:17.402]      __var canReadPins = 0;
[20:05:17.402]        // -> [canReadPins <= 0x00000000]
[20:05:17.402]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:05:17.406]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:05:17.406]        // -> [canReadPins <= 0x00000001]
[20:05:17.406]    </block>
[20:05:17.406]    <control if="" while="1" timeout="200" info="">
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.406]      // while "1"  (timeout="200")
[20:05:17.406]      // while-condition  =>  TRUE
[20:05:17.411]      // while "1"  (timeout="200")
[20:05:17.411]      // while  =>  TIMEOUT
[20:05:17.411]      // end while "1"
[20:05:17.411]    </control>
[20:05:17.411]    <control if="canReadPins" while="" timeout="0" info="">
[20:05:17.411]      // if-block "canReadPins"
[20:05:17.411]        // =>  TRUE
[20:05:17.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:05:17.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:05:17.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:05:17.412]        // while-condition  =>  FALSE
[20:05:17.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:05:17.412]      </control>
[20:05:17.412]      // end if-block "canReadPins"
[20:05:17.412]    </control>
[20:05:17.412]    <control if="!canReadPins" while="" timeout="0" info="">
[20:05:17.412]      // if-block "!canReadPins"
[20:05:17.412]        // =>  FALSE
[20:05:17.415]      // skip if-block "!canReadPins"
[20:05:17.415]    </control>
[20:05:17.415]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:05:17.415]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:17.415]        // =>  TRUE
[20:05:17.415]      <block atomic="false" info="">
[20:05:17.415]        WriteAP(0x00, 0x190008);
[20:05:17.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:17.416]        WriteAP(0xF0, 0x01);
[20:05:17.426]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:17.426]      </block>
[20:05:17.426]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:17.426]    </control>
[20:05:17.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:05:17.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:17.426]        // =>  FALSE
[20:05:17.428]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:17.428]    </control>
[20:05:17.428]    <block atomic="false" info="">
[20:05:17.428]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:17.431]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:05:17.431]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:05:17.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:17.432]      __ap = 0; //lets make sure we reset the access point selection
[20:05:17.432]        // -> [__ap <= 0x00000000]
[20:05:17.432]    </block>
[20:05:17.432]  </sequence>
[20:05:17.432]  
[20:05:17.467]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:05:17.467]  
[20:05:17.467]  <debugvars>
[20:05:17.467]    // Pre-defined
[20:05:17.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:17.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:17.467]    __dp=0x00000000
[20:05:17.467]    __ap=0x00000000
[20:05:17.467]    __traceout=0x00000000      (Trace Disabled)
[20:05:17.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:17.467]    __FlashAddr=0x00000000
[20:05:17.467]    __FlashLen=0x00000000
[20:05:17.467]    __FlashArg=0x00000000
[20:05:17.467]    __FlashOp=0x00000000
[20:05:17.467]    __Result=0x00000000
[20:05:17.467]  </debugvars>
[20:05:17.467]  
[20:05:17.467]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:05:17.467]    <block atomic="false" info="">
[20:05:17.467]      __var deviceID = 0;
[20:05:17.467]        // -> [deviceID <= 0x00000000]
[20:05:17.467]      __var version = 0;
[20:05:17.467]        // -> [version <= 0x00000000]
[20:05:17.467]      __var partNum = 0;
[20:05:17.467]        // -> [partNum <= 0x00000000]
[20:05:17.467]      __var manuf = 0;
[20:05:17.467]        // -> [manuf <= 0x00000000]
[20:05:17.467]      __var isMSPM0G1X0X_G3X0X = 0;
[20:05:17.467]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:05:17.467]      __var isProduction = 0;
[20:05:17.467]        // -> [isProduction <= 0x00000000]
[20:05:17.467]      __var continueId = 0;
[20:05:17.467]        // -> [continueId <= 0x00000000]
[20:05:17.467]      deviceID =   Read32(0x41C40004);
[20:05:17.475]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:05:17.475]        // -> [deviceID <= 0x2BB8802F]
[20:05:17.475]      version = deviceID >> 28;
[20:05:17.475]        // -> [version <= 0x00000002]
[20:05:17.475]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:05:17.475]        // -> [partNum <= 0x0000BB88]
[20:05:17.475]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:05:17.475]        // -> [manuf <= 0x00000017]
[20:05:17.475]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:05:17.475]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:05:17.475]      isProduction = (version > 0);
[20:05:17.475]        // -> [isProduction <= 0x00000001]
[20:05:17.475]    </block>
[20:05:17.475]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:05:17.475]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:05:17.475]        // =>  FALSE
[20:05:17.475]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:05:17.475]    </control>
[20:05:17.475]    <control if="continueId == 4" while="" timeout="0" info="">
[20:05:17.475]      // if-block "continueId == 4"
[20:05:17.475]        // =>  FALSE
[20:05:17.475]      // skip if-block "continueId == 4"
[20:05:17.475]    </control>
[20:05:17.475]    <control if="!isProduction" while="" timeout="0" info="">
[20:05:17.475]      // if-block "!isProduction"
[20:05:17.475]        // =>  FALSE
[20:05:17.475]      // skip if-block "!isProduction"
[20:05:17.475]    </control>
[20:05:17.475]  </sequence>
[20:05:17.475]  
[20:06:08.626]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:06:08.626]  
[20:06:08.630]  <debugvars>
[20:06:08.630]    // Pre-defined
[20:06:08.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:08.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:08.630]    __dp=0x00000000
[20:06:08.630]    __ap=0x00000000
[20:06:08.630]    __traceout=0x00000000      (Trace Disabled)
[20:06:08.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:08.630]    __FlashAddr=0x00000000
[20:06:08.630]    __FlashLen=0x00000000
[20:06:08.630]    __FlashArg=0x00000000
[20:06:08.630]    __FlashOp=0x00000000
[20:06:08.630]    __Result=0x00000000
[20:06:08.630]  </debugvars>
[20:06:08.630]  
[20:06:08.630]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:06:08.630]    <block atomic="false" info="">
[20:06:08.630]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:06:08.630]        // -> [isSWJ <= 0x00000001]
[20:06:08.630]      __var hasDormant = __protocol & 0x00020000;
[20:06:08.630]        // -> [hasDormant <= 0x00000000]
[20:06:08.630]      __var protType   = __protocol & 0x0000FFFF;
[20:06:08.630]        // -> [protType <= 0x00000002]
[20:06:08.630]    </block>
[20:06:08.630]    <control if="protType == 1" while="" timeout="0" info="">
[20:06:08.630]      // if-block "protType == 1"
[20:06:08.630]        // =>  FALSE
[20:06:08.630]      // skip if-block "protType == 1"
[20:06:08.630]    </control>
[20:06:08.630]    <control if="protType == 2" while="" timeout="0" info="">
[20:06:08.630]      // if-block "protType == 2"
[20:06:08.630]        // =>  TRUE
[20:06:08.630]      <control if="isSWJ" while="" timeout="0" info="">
[20:06:08.630]        // if-block "isSWJ"
[20:06:08.630]          // =>  TRUE
[20:06:08.630]        <control if="hasDormant" while="" timeout="0" info="">
[20:06:08.630]          // if-block "hasDormant"
[20:06:08.630]            // =>  FALSE
[20:06:08.630]          // skip if-block "hasDormant"
[20:06:08.630]        </control>
[20:06:08.630]        <control if="!hasDormant" while="" timeout="0" info="">
[20:06:08.630]          // if-block "!hasDormant"
[20:06:08.630]            // =>  TRUE
[20:06:08.630]          <block atomic="false" info="">
[20:06:08.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:06:08.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:08.638]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:06:08.638]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:06:08.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:06:08.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:08.638]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:06:08.638]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:06:08.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:06:08.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:08.650]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:06:08.650]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:06:08.650]          </block>
[20:06:08.650]          // end if-block "!hasDormant"
[20:06:08.650]        </control>
[20:06:08.650]        // end if-block "isSWJ"
[20:06:08.650]      </control>
[20:06:08.650]      <control if="!isSWJ" while="" timeout="0" info="">
[20:06:08.650]        // if-block "!isSWJ"
[20:06:08.650]          // =>  FALSE
[20:06:08.650]        // skip if-block "!isSWJ"
[20:06:08.650]      </control>
[20:06:08.650]      <block atomic="false" info="">
[20:06:08.650]        ReadDP(0x0);
[20:06:08.659]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:06:08.659]      </block>
[20:06:08.659]      // end if-block "protType == 2"
[20:06:08.659]    </control>
[20:06:08.659]  </sequence>
[20:06:08.659]  
[20:06:08.659]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:06:08.659]  
[20:06:08.659]  <debugvars>
[20:06:08.659]    // Pre-defined
[20:06:08.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:08.659]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:08.659]    __dp=0x00000000
[20:06:08.659]    __ap=0x00000000
[20:06:08.659]    __traceout=0x00000000      (Trace Disabled)
[20:06:08.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:08.659]    __FlashAddr=0x00000000
[20:06:08.659]    __FlashLen=0x00000000
[20:06:08.659]    __FlashArg=0x00000000
[20:06:08.659]    __FlashOp=0x00000000
[20:06:08.659]    __Result=0x00000000
[20:06:08.659]  </debugvars>
[20:06:08.659]  
[20:06:08.659]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:06:08.659]    <block atomic="false" info="">
[20:06:08.659]      __var SW_DP_ABORT       = 0x0;
[20:06:08.659]        // -> [SW_DP_ABORT <= 0x00000000]
[20:06:08.659]      __var DP_CTRL_STAT      = 0x4;
[20:06:08.659]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:06:08.659]      __var DP_SELECT         = 0x8;
[20:06:08.659]        // -> [DP_SELECT <= 0x00000008]
[20:06:08.659]      __var powered_down      = 0;
[20:06:08.659]        // -> [powered_down <= 0x00000000]
[20:06:08.659]      WriteDP(DP_SELECT, 0x00000000);
[20:06:08.669]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:06:08.669]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:06:08.669]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:06:08.669]        // -> [powered_down <= 0x00000001]
[20:06:08.669]    </block>
[20:06:08.669]    <control if="powered_down" while="" timeout="0" info="">
[20:06:08.669]      // if-block "powered_down"
[20:06:08.669]        // =>  TRUE
[20:06:08.669]      <block atomic="false" info="">
[20:06:08.669]        Message(0, "Debug/System power-up request sent");
[20:06:08.669]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:06:08.679]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:06:08.679]      </block>
[20:06:08.679]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:06:08.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:06:08.679]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:06:08.679]        // while-condition  =>  FALSE
[20:06:08.679]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:06:08.679]      </control>
[20:06:08.679]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:06:08.679]        // if-block "(__protocol & 0xFFFF) == 1"
[20:06:08.679]          // =>  FALSE
[20:06:08.679]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:06:08.679]      </control>
[20:06:08.679]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:06:08.679]        // if-block "(__protocol & 0xFFFF) == 2"
[20:06:08.679]          // =>  TRUE
[20:06:08.679]        <block atomic="false" info="">
[20:06:08.679]          Message(0, "executing SWD power up");
[20:06:08.689]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:06:08.690]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:06:08.690]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:06:08.690]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:06:08.690]        </block>
[20:06:08.690]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:06:08.690]      </control>
[20:06:08.690]      // end if-block "powered_down"
[20:06:08.690]    </control>
[20:06:08.690]    <block atomic="false" info="">
[20:06:08.690]      __var DEBUG_PORT_VAL    = 0;
[20:06:08.690]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:06:08.690]      __var ACCESS_POINT_VAL  = 0;
[20:06:08.690]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:06:08.690]      __ap = 1; 
[20:06:08.690]        // -> [__ap <= 0x00000001]
[20:06:08.690]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:06:08.699]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:06:08.699]      __ap = 4;
[20:06:08.699]        // -> [__ap <= 0x00000004]
[20:06:08.699]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:06:08.699]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:06:08.699]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:06:08.699]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:06:08.699]    </block>
[20:06:08.699]    <block atomic="false" info="">
[20:06:08.699]      __var nReset = 0x80;
[20:06:08.699]        // -> [nReset <= 0x00000080]
[20:06:08.699]      __var canReadPins = 0;
[20:06:08.699]        // -> [canReadPins <= 0x00000000]
[20:06:08.699]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:06:08.709]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:06:08.709]        // -> [canReadPins <= 0x00000001]
[20:06:08.709]    </block>
[20:06:08.709]    <control if="" while="1" timeout="200" info="">
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.711]      // while-condition  =>  TRUE
[20:06:08.711]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.712]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.712]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.712]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.712]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.712]      // while "1"  (timeout="200")
[20:06:08.712]      // while-condition  =>  TRUE
[20:06:08.713]      // while "1"  (timeout="200")
[20:06:08.713]      // while-condition  =>  TRUE
[20:06:08.713]      // while "1"  (timeout="200")
[20:06:08.713]      // while-condition  =>  TRUE
[20:06:08.713]      // while "1"  (timeout="200")
[20:06:08.713]      // while-condition  =>  TRUE
[20:06:08.713]      // while "1"  (timeout="200")
[20:06:08.713]      // while-condition  =>  TRUE
[20:06:08.713]      // while "1"  (timeout="200")
[20:06:08.713]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.714]      // while "1"  (timeout="200")
[20:06:08.714]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.716]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.716]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.716]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.716]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.716]      // while-condition  =>  TRUE
[20:06:08.716]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.717]      // while-condition  =>  TRUE
[20:06:08.717]      // while "1"  (timeout="200")
[20:06:08.719]      // while-condition  =>  TRUE
[20:06:08.719]      // while "1"  (timeout="200")
[20:06:08.719]      // while-condition  =>  TRUE
[20:06:08.719]      // while "1"  (timeout="200")
[20:06:08.719]      // while-condition  =>  TRUE
[20:06:08.719]      // while "1"  (timeout="200")
[20:06:08.719]      // while-condition  =>  TRUE
[20:06:08.719]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.720]      // while-condition  =>  TRUE
[20:06:08.720]      // while "1"  (timeout="200")
[20:06:08.722]      // while-condition  =>  TRUE
[20:06:08.722]      // while "1"  (timeout="200")
[20:06:08.722]      // while  =>  TIMEOUT
[20:06:08.722]      // end while "1"
[20:06:08.722]    </control>
[20:06:08.722]    <control if="canReadPins" while="" timeout="0" info="">
[20:06:08.722]      // if-block "canReadPins"
[20:06:08.722]        // =>  TRUE
[20:06:08.722]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:06:08.722]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:06:08.724]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:06:08.724]        // while-condition  =>  FALSE
[20:06:08.724]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:06:08.724]      </control>
[20:06:08.724]      // end if-block "canReadPins"
[20:06:08.724]    </control>
[20:06:08.724]    <control if="!canReadPins" while="" timeout="0" info="">
[20:06:08.724]      // if-block "!canReadPins"
[20:06:08.724]        // =>  FALSE
[20:06:08.724]      // skip if-block "!canReadPins"
[20:06:08.724]    </control>
[20:06:08.724]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:06:08.724]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:06:08.724]        // =>  TRUE
[20:06:08.727]      <block atomic="false" info="">
[20:06:08.727]        WriteAP(0x00, 0x190008);
[20:06:08.729]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:06:08.729]        WriteAP(0xF0, 0x01);
[20:06:08.731]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:06:08.731]      </block>
[20:06:08.731]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:06:08.731]    </control>
[20:06:08.731]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:06:08.731]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:06:08.731]        // =>  FALSE
[20:06:08.731]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:06:08.731]    </control>
[20:06:08.731]    <block atomic="false" info="">
[20:06:08.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:06:08.740]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:06:08.740]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:06:08.740]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:06:08.740]      __ap = 0; //lets make sure we reset the access point selection
[20:06:08.740]        // -> [__ap <= 0x00000000]
[20:06:08.740]    </block>
[20:06:08.740]  </sequence>
[20:06:08.740]  
[20:06:08.779]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:06:08.779]  
[20:06:08.779]  <debugvars>
[20:06:08.779]    // Pre-defined
[20:06:08.779]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:08.779]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:08.779]    __dp=0x00000000
[20:06:08.779]    __ap=0x00000000
[20:06:08.779]    __traceout=0x00000000      (Trace Disabled)
[20:06:08.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:08.779]    __FlashAddr=0x00000000
[20:06:08.779]    __FlashLen=0x00000000
[20:06:08.779]    __FlashArg=0x00000000
[20:06:08.779]    __FlashOp=0x00000000
[20:06:08.779]    __Result=0x00000000
[20:06:08.779]  </debugvars>
[20:06:08.779]  
[20:06:08.779]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:06:08.779]    <block atomic="false" info="">
[20:06:08.779]      __var deviceID = 0;
[20:06:08.779]        // -> [deviceID <= 0x00000000]
[20:06:08.779]      __var version = 0;
[20:06:08.779]        // -> [version <= 0x00000000]
[20:06:08.779]      __var partNum = 0;
[20:06:08.779]        // -> [partNum <= 0x00000000]
[20:06:08.779]      __var manuf = 0;
[20:06:08.779]        // -> [manuf <= 0x00000000]
[20:06:08.779]      __var isMSPM0G1X0X_G3X0X = 0;
[20:06:08.779]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:06:08.779]      __var isProduction = 0;
[20:06:08.779]        // -> [isProduction <= 0x00000000]
[20:06:08.779]      __var continueId = 0;
[20:06:08.779]        // -> [continueId <= 0x00000000]
[20:06:08.779]      deviceID =   Read32(0x41C40004);
[20:06:08.791]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:06:08.791]        // -> [deviceID <= 0x2BB8802F]
[20:06:08.791]      version = deviceID >> 28;
[20:06:08.791]        // -> [version <= 0x00000002]
[20:06:08.791]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:06:08.791]        // -> [partNum <= 0x0000BB88]
[20:06:08.791]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:06:08.791]        // -> [manuf <= 0x00000017]
[20:06:08.791]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:06:08.791]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:06:08.791]      isProduction = (version > 0);
[20:06:08.791]        // -> [isProduction <= 0x00000001]
[20:06:08.791]    </block>
[20:06:08.791]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:06:08.791]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:06:08.791]        // =>  FALSE
[20:06:08.791]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:06:08.791]    </control>
[20:06:08.791]    <control if="continueId == 4" while="" timeout="0" info="">
[20:06:08.791]      // if-block "continueId == 4"
[20:06:08.791]        // =>  FALSE
[20:06:08.791]      // skip if-block "continueId == 4"
[20:06:08.791]    </control>
[20:06:08.791]    <control if="!isProduction" while="" timeout="0" info="">
[20:06:08.791]      // if-block "!isProduction"
[20:06:08.791]        // =>  FALSE
[20:06:08.791]      // skip if-block "!isProduction"
[20:06:08.791]    </control>
[20:06:08.791]  </sequence>
[20:06:08.791]  
[20:08:13.124]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:08:13.124]  
[20:08:13.131]  <debugvars>
[20:08:13.132]    // Pre-defined
[20:08:13.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:13.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:13.132]    __dp=0x00000000
[20:08:13.132]    __ap=0x00000000
[20:08:13.132]    __traceout=0x00000000      (Trace Disabled)
[20:08:13.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:13.132]    __FlashAddr=0x00000000
[20:08:13.132]    __FlashLen=0x00000000
[20:08:13.132]    __FlashArg=0x00000000
[20:08:13.132]    __FlashOp=0x00000000
[20:08:13.132]    __Result=0x00000000
[20:08:13.132]  </debugvars>
[20:08:13.132]  
[20:08:13.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:08:13.132]    <block atomic="false" info="">
[20:08:13.132]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:08:13.132]        // -> [isSWJ <= 0x00000001]
[20:08:13.132]      __var hasDormant = __protocol & 0x00020000;
[20:08:13.132]        // -> [hasDormant <= 0x00000000]
[20:08:13.132]      __var protType   = __protocol & 0x0000FFFF;
[20:08:13.132]        // -> [protType <= 0x00000002]
[20:08:13.132]    </block>
[20:08:13.134]    <control if="protType == 1" while="" timeout="0" info="">
[20:08:13.134]      // if-block "protType == 1"
[20:08:13.134]        // =>  FALSE
[20:08:13.134]      // skip if-block "protType == 1"
[20:08:13.134]    </control>
[20:08:13.134]    <control if="protType == 2" while="" timeout="0" info="">
[20:08:13.134]      // if-block "protType == 2"
[20:08:13.134]        // =>  TRUE
[20:08:13.134]      <control if="isSWJ" while="" timeout="0" info="">
[20:08:13.134]        // if-block "isSWJ"
[20:08:13.134]          // =>  TRUE
[20:08:13.135]        <control if="hasDormant" while="" timeout="0" info="">
[20:08:13.135]          // if-block "hasDormant"
[20:08:13.135]            // =>  FALSE
[20:08:13.135]          // skip if-block "hasDormant"
[20:08:13.135]        </control>
[20:08:13.135]        <control if="!hasDormant" while="" timeout="0" info="">
[20:08:13.135]          // if-block "!hasDormant"
[20:08:13.135]            // =>  TRUE
[20:08:13.135]          <block atomic="false" info="">
[20:08:13.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:08:13.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:13.137]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:08:13.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:08:13.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:08:13.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:13.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:08:13.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:08:13.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:08:13.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:13.149]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:08:13.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:08:13.151]          </block>
[20:08:13.151]          // end if-block "!hasDormant"
[20:08:13.151]        </control>
[20:08:13.151]        // end if-block "isSWJ"
[20:08:13.151]      </control>
[20:08:13.151]      <control if="!isSWJ" while="" timeout="0" info="">
[20:08:13.151]        // if-block "!isSWJ"
[20:08:13.151]          // =>  FALSE
[20:08:13.157]        // skip if-block "!isSWJ"
[20:08:13.157]      </control>
[20:08:13.157]      <block atomic="false" info="">
[20:08:13.157]        ReadDP(0x0);
[20:08:13.158]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:08:13.158]      </block>
[20:08:13.158]      // end if-block "protType == 2"
[20:08:13.158]    </control>
[20:08:13.158]  </sequence>
[20:08:13.158]  
[20:08:13.164]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:08:13.164]  
[20:08:13.164]  <debugvars>
[20:08:13.164]    // Pre-defined
[20:08:13.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:13.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:13.164]    __dp=0x00000000
[20:08:13.164]    __ap=0x00000000
[20:08:13.164]    __traceout=0x00000000      (Trace Disabled)
[20:08:13.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:13.164]    __FlashAddr=0x00000000
[20:08:13.164]    __FlashLen=0x00000000
[20:08:13.164]    __FlashArg=0x00000000
[20:08:13.164]    __FlashOp=0x00000000
[20:08:13.164]    __Result=0x00000000
[20:08:13.164]  </debugvars>
[20:08:13.164]  
[20:08:13.164]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:08:13.164]    <block atomic="false" info="">
[20:08:13.164]      __var SW_DP_ABORT       = 0x0;
[20:08:13.164]        // -> [SW_DP_ABORT <= 0x00000000]
[20:08:13.164]      __var DP_CTRL_STAT      = 0x4;
[20:08:13.164]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:08:13.164]      __var DP_SELECT         = 0x8;
[20:08:13.164]        // -> [DP_SELECT <= 0x00000008]
[20:08:13.166]      __var powered_down      = 0;
[20:08:13.166]        // -> [powered_down <= 0x00000000]
[20:08:13.166]      WriteDP(DP_SELECT, 0x00000000);
[20:08:13.168]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:08:13.168]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:08:13.170]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:08:13.170]        // -> [powered_down <= 0x00000001]
[20:08:13.170]    </block>
[20:08:13.170]    <control if="powered_down" while="" timeout="0" info="">
[20:08:13.170]      // if-block "powered_down"
[20:08:13.170]        // =>  TRUE
[20:08:13.170]      <block atomic="false" info="">
[20:08:13.170]        Message(0, "Debug/System power-up request sent");
[20:08:13.170]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:08:13.176]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:08:13.176]      </block>
[20:08:13.176]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:08:13.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:08:13.181]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:08:13.181]        // while-condition  =>  FALSE
[20:08:13.181]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:08:13.181]      </control>
[20:08:13.181]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:08:13.181]        // if-block "(__protocol & 0xFFFF) == 1"
[20:08:13.181]          // =>  FALSE
[20:08:13.181]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:08:13.181]      </control>
[20:08:13.181]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:08:13.181]        // if-block "(__protocol & 0xFFFF) == 2"
[20:08:13.181]          // =>  TRUE
[20:08:13.181]        <block atomic="false" info="">
[20:08:13.181]          Message(0, "executing SWD power up");
[20:08:13.181]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:08:13.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:08:13.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:08:13.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:08:13.190]        </block>
[20:08:13.192]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:08:13.192]      </control>
[20:08:13.192]      // end if-block "powered_down"
[20:08:13.192]    </control>
[20:08:13.192]    <block atomic="false" info="">
[20:08:13.192]      __var DEBUG_PORT_VAL    = 0;
[20:08:13.192]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:08:13.192]      __var ACCESS_POINT_VAL  = 0;
[20:08:13.192]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:08:13.192]      __ap = 1; 
[20:08:13.192]        // -> [__ap <= 0x00000001]
[20:08:13.192]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:08:13.198]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:08:13.198]      __ap = 4;
[20:08:13.198]        // -> [__ap <= 0x00000004]
[20:08:13.198]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:13.200]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:08:13.200]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:08:13.200]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:13.200]    </block>
[20:08:13.200]    <block atomic="false" info="">
[20:08:13.200]      __var nReset = 0x80;
[20:08:13.200]        // -> [nReset <= 0x00000080]
[20:08:13.200]      __var canReadPins = 0;
[20:08:13.200]        // -> [canReadPins <= 0x00000000]
[20:08:13.200]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:08:13.211]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:08:13.211]        // -> [canReadPins <= 0x00000001]
[20:08:13.211]    </block>
[20:08:13.211]    <control if="" while="1" timeout="200" info="">
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.211]      // while "1"  (timeout="200")
[20:08:13.211]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.219]      // while-condition  =>  TRUE
[20:08:13.219]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.221]      // while "1"  (timeout="200")
[20:08:13.221]      // while-condition  =>  TRUE
[20:08:13.229]      // while "1"  (timeout="200")
[20:08:13.229]      // while  =>  TIMEOUT
[20:08:13.229]      // end while "1"
[20:08:13.229]    </control>
[20:08:13.229]    <control if="canReadPins" while="" timeout="0" info="">
[20:08:13.229]      // if-block "canReadPins"
[20:08:13.230]        // =>  TRUE
[20:08:13.230]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:08:13.230]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:08:13.233]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:08:13.233]        // while-condition  =>  FALSE
[20:08:13.233]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:08:13.233]      </control>
[20:08:13.233]      // end if-block "canReadPins"
[20:08:13.233]    </control>
[20:08:13.233]    <control if="!canReadPins" while="" timeout="0" info="">
[20:08:13.233]      // if-block "!canReadPins"
[20:08:13.233]        // =>  FALSE
[20:08:13.233]      // skip if-block "!canReadPins"
[20:08:13.233]    </control>
[20:08:13.233]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:08:13.233]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:13.233]        // =>  TRUE
[20:08:13.233]      <block atomic="false" info="">
[20:08:13.233]        WriteAP(0x00, 0x190008);
[20:08:13.233]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:13.233]        WriteAP(0xF0, 0x01);
[20:08:13.241]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:13.241]      </block>
[20:08:13.241]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:13.241]    </control>
[20:08:13.241]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:08:13.241]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:13.241]        // =>  FALSE
[20:08:13.241]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:13.241]    </control>
[20:08:13.241]    <block atomic="false" info="">
[20:08:13.241]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:13.242]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:08:13.242]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:08:13.242]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:13.251]      __ap = 0; //lets make sure we reset the access point selection
[20:08:13.251]        // -> [__ap <= 0x00000000]
[20:08:13.251]    </block>
[20:08:13.251]  </sequence>
[20:08:13.251]  
[20:08:13.291]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:08:13.291]  
[20:08:13.291]  <debugvars>
[20:08:13.292]    // Pre-defined
[20:08:13.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:13.292]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:13.292]    __dp=0x00000000
[20:08:13.292]    __ap=0x00000000
[20:08:13.292]    __traceout=0x00000000      (Trace Disabled)
[20:08:13.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:13.292]    __FlashAddr=0x00000000
[20:08:13.292]    __FlashLen=0x00000000
[20:08:13.292]    __FlashArg=0x00000000
[20:08:13.292]    __FlashOp=0x00000000
[20:08:13.292]    __Result=0x00000000
[20:08:13.292]  </debugvars>
[20:08:13.292]  
[20:08:13.292]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:08:13.292]    <block atomic="false" info="">
[20:08:13.292]      __var deviceID = 0;
[20:08:13.292]        // -> [deviceID <= 0x00000000]
[20:08:13.292]      __var version = 0;
[20:08:13.292]        // -> [version <= 0x00000000]
[20:08:13.292]      __var partNum = 0;
[20:08:13.292]        // -> [partNum <= 0x00000000]
[20:08:13.292]      __var manuf = 0;
[20:08:13.292]        // -> [manuf <= 0x00000000]
[20:08:13.292]      __var isMSPM0G1X0X_G3X0X = 0;
[20:08:13.292]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:08:13.292]      __var isProduction = 0;
[20:08:13.292]        // -> [isProduction <= 0x00000000]
[20:08:13.292]      __var continueId = 0;
[20:08:13.292]        // -> [continueId <= 0x00000000]
[20:08:13.292]      deviceID =   Read32(0x41C40004);
[20:08:13.300]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:08:13.300]        // -> [deviceID <= 0x2BB8802F]
[20:08:13.300]      version = deviceID >> 28;
[20:08:13.300]        // -> [version <= 0x00000002]
[20:08:13.300]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:08:13.300]        // -> [partNum <= 0x0000BB88]
[20:08:13.300]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:08:13.300]        // -> [manuf <= 0x00000017]
[20:08:13.300]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:08:13.300]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:08:13.300]      isProduction = (version > 0);
[20:08:13.300]        // -> [isProduction <= 0x00000001]
[20:08:13.300]    </block>
[20:08:13.300]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:08:13.300]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:08:13.300]        // =>  FALSE
[20:08:13.300]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:08:13.300]    </control>
[20:08:13.300]    <control if="continueId == 4" while="" timeout="0" info="">
[20:08:13.300]      // if-block "continueId == 4"
[20:08:13.300]        // =>  FALSE
[20:08:13.300]      // skip if-block "continueId == 4"
[20:08:13.300]    </control>
[20:08:13.300]    <control if="!isProduction" while="" timeout="0" info="">
[20:08:13.300]      // if-block "!isProduction"
[20:08:13.300]        // =>  FALSE
[20:08:13.300]      // skip if-block "!isProduction"
[20:08:13.300]    </control>
[20:08:13.300]  </sequence>
[20:08:13.300]  
[20:08:48.229]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:08:48.229]  
[20:08:48.229]  <debugvars>
[20:08:48.229]    // Pre-defined
[20:08:48.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:48.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:48.229]    __dp=0x00000000
[20:08:48.229]    __ap=0x00000000
[20:08:48.229]    __traceout=0x00000000      (Trace Disabled)
[20:08:48.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:48.229]    __FlashAddr=0x00000000
[20:08:48.229]    __FlashLen=0x00000000
[20:08:48.229]    __FlashArg=0x00000000
[20:08:48.229]    __FlashOp=0x00000000
[20:08:48.229]    __Result=0x00000000
[20:08:48.229]  </debugvars>
[20:08:48.229]  
[20:08:48.229]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:08:48.229]    <block atomic="false" info="">
[20:08:48.234]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:08:48.234]        // -> [isSWJ <= 0x00000001]
[20:08:48.234]      __var hasDormant = __protocol & 0x00020000;
[20:08:48.234]        // -> [hasDormant <= 0x00000000]
[20:08:48.234]      __var protType   = __protocol & 0x0000FFFF;
[20:08:48.234]        // -> [protType <= 0x00000002]
[20:08:48.234]    </block>
[20:08:48.234]    <control if="protType == 1" while="" timeout="0" info="">
[20:08:48.234]      // if-block "protType == 1"
[20:08:48.234]        // =>  FALSE
[20:08:48.234]      // skip if-block "protType == 1"
[20:08:48.234]    </control>
[20:08:48.234]    <control if="protType == 2" while="" timeout="0" info="">
[20:08:48.234]      // if-block "protType == 2"
[20:08:48.234]        // =>  TRUE
[20:08:48.234]      <control if="isSWJ" while="" timeout="0" info="">
[20:08:48.234]        // if-block "isSWJ"
[20:08:48.234]          // =>  TRUE
[20:08:48.234]        <control if="hasDormant" while="" timeout="0" info="">
[20:08:48.234]          // if-block "hasDormant"
[20:08:48.234]            // =>  FALSE
[20:08:48.234]          // skip if-block "hasDormant"
[20:08:48.234]        </control>
[20:08:48.234]        <control if="!hasDormant" while="" timeout="0" info="">
[20:08:48.234]          // if-block "!hasDormant"
[20:08:48.234]            // =>  TRUE
[20:08:48.234]          <block atomic="false" info="">
[20:08:48.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:08:48.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:48.246]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:08:48.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:08:48.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:08:48.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:48.249]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:08:48.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:08:48.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:08:48.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:48.258]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:08:48.258]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:08:48.263]          </block>
[20:08:48.263]          // end if-block "!hasDormant"
[20:08:48.263]        </control>
[20:08:48.263]        // end if-block "isSWJ"
[20:08:48.263]      </control>
[20:08:48.263]      <control if="!isSWJ" while="" timeout="0" info="">
[20:08:48.263]        // if-block "!isSWJ"
[20:08:48.263]          // =>  FALSE
[20:08:48.263]        // skip if-block "!isSWJ"
[20:08:48.263]      </control>
[20:08:48.263]      <block atomic="false" info="">
[20:08:48.263]        ReadDP(0x0);
[20:08:48.265]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:08:48.265]      </block>
[20:08:48.265]      // end if-block "protType == 2"
[20:08:48.265]    </control>
[20:08:48.265]  </sequence>
[20:08:48.265]  
[20:08:48.268]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:08:48.268]  
[20:08:48.268]  <debugvars>
[20:08:48.268]    // Pre-defined
[20:08:48.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:48.268]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:48.268]    __dp=0x00000000
[20:08:48.268]    __ap=0x00000000
[20:08:48.268]    __traceout=0x00000000      (Trace Disabled)
[20:08:48.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:48.268]    __FlashAddr=0x00000000
[20:08:48.268]    __FlashLen=0x00000000
[20:08:48.268]    __FlashArg=0x00000000
[20:08:48.268]    __FlashOp=0x00000000
[20:08:48.268]    __Result=0x00000000
[20:08:48.268]  </debugvars>
[20:08:48.268]  
[20:08:48.268]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:08:48.268]    <block atomic="false" info="">
[20:08:48.268]      __var SW_DP_ABORT       = 0x0;
[20:08:48.268]        // -> [SW_DP_ABORT <= 0x00000000]
[20:08:48.268]      __var DP_CTRL_STAT      = 0x4;
[20:08:48.268]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:08:48.268]      __var DP_SELECT         = 0x8;
[20:08:48.268]        // -> [DP_SELECT <= 0x00000008]
[20:08:48.268]      __var powered_down      = 0;
[20:08:48.268]        // -> [powered_down <= 0x00000000]
[20:08:48.268]      WriteDP(DP_SELECT, 0x00000000);
[20:08:48.275]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:08:48.275]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:08:48.279]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:08:48.279]        // -> [powered_down <= 0x00000001]
[20:08:48.279]    </block>
[20:08:48.279]    <control if="powered_down" while="" timeout="0" info="">
[20:08:48.279]      // if-block "powered_down"
[20:08:48.279]        // =>  TRUE
[20:08:48.279]      <block atomic="false" info="">
[20:08:48.279]        Message(0, "Debug/System power-up request sent");
[20:08:48.279]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:08:48.284]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:08:48.284]      </block>
[20:08:48.284]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:08:48.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:08:48.286]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:08:48.286]        // while-condition  =>  FALSE
[20:08:48.286]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:08:48.286]      </control>
[20:08:48.286]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:08:48.286]        // if-block "(__protocol & 0xFFFF) == 1"
[20:08:48.286]          // =>  FALSE
[20:08:48.286]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:08:48.286]      </control>
[20:08:48.286]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:08:48.286]        // if-block "(__protocol & 0xFFFF) == 2"
[20:08:48.288]          // =>  TRUE
[20:08:48.288]        <block atomic="false" info="">
[20:08:48.288]          Message(0, "executing SWD power up");
[20:08:48.289]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:08:48.296]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:08:48.296]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:08:48.299]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:08:48.299]        </block>
[20:08:48.299]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:08:48.299]      </control>
[20:08:48.299]      // end if-block "powered_down"
[20:08:48.299]    </control>
[20:08:48.299]    <block atomic="false" info="">
[20:08:48.299]      __var DEBUG_PORT_VAL    = 0;
[20:08:48.299]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:08:48.299]      __var ACCESS_POINT_VAL  = 0;
[20:08:48.299]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:08:48.299]      __ap = 1; 
[20:08:48.299]        // -> [__ap <= 0x00000001]
[20:08:48.299]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:08:48.308]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:08:48.308]      __ap = 4;
[20:08:48.308]        // -> [__ap <= 0x00000004]
[20:08:48.308]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:48.324]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:08:48.324]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:08:48.324]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:48.327]    </block>
[20:08:48.327]    <block atomic="false" info="">
[20:08:48.327]      __var nReset = 0x80;
[20:08:48.327]        // -> [nReset <= 0x00000080]
[20:08:48.327]      __var canReadPins = 0;
[20:08:48.329]        // -> [canReadPins <= 0x00000000]
[20:08:48.329]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:08:48.329]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:08:48.329]        // -> [canReadPins <= 0x00000001]
[20:08:48.329]    </block>
[20:08:48.329]    <control if="" while="1" timeout="200" info="">
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.329]      // while-condition  =>  TRUE
[20:08:48.329]      // while "1"  (timeout="200")
[20:08:48.337]      // while-condition  =>  TRUE
[20:08:48.337]      // while "1"  (timeout="200")
[20:08:48.337]      // while  =>  TIMEOUT
[20:08:48.337]      // end while "1"
[20:08:48.337]    </control>
[20:08:48.337]    <control if="canReadPins" while="" timeout="0" info="">
[20:08:48.337]      // if-block "canReadPins"
[20:08:48.337]        // =>  TRUE
[20:08:48.337]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:08:48.337]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:08:48.347]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:08:48.347]        // while-condition  =>  FALSE
[20:08:48.347]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:08:48.347]      </control>
[20:08:48.347]      // end if-block "canReadPins"
[20:08:48.347]    </control>
[20:08:48.347]    <control if="!canReadPins" while="" timeout="0" info="">
[20:08:48.347]      // if-block "!canReadPins"
[20:08:48.347]        // =>  FALSE
[20:08:48.347]      // skip if-block "!canReadPins"
[20:08:48.347]    </control>
[20:08:48.347]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:08:48.347]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:48.349]        // =>  TRUE
[20:08:48.349]      <block atomic="false" info="">
[20:08:48.349]        WriteAP(0x00, 0x190008);
[20:08:48.349]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:48.349]        WriteAP(0xF0, 0x01);
[20:08:48.359]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:48.359]      </block>
[20:08:48.359]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:48.359]    </control>
[20:08:48.359]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:08:48.359]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:48.359]        // =>  FALSE
[20:08:48.359]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:48.359]    </control>
[20:08:48.359]    <block atomic="false" info="">
[20:08:48.359]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:48.364]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:08:48.364]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:08:48.364]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:48.369]      __ap = 0; //lets make sure we reset the access point selection
[20:08:48.369]        // -> [__ap <= 0x00000000]
[20:08:48.369]    </block>
[20:08:48.369]  </sequence>
[20:08:48.369]  
[20:08:48.424]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:08:48.424]  
[20:08:48.424]  <debugvars>
[20:08:48.424]    // Pre-defined
[20:08:48.424]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:48.424]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:48.424]    __dp=0x00000000
[20:08:48.424]    __ap=0x00000000
[20:08:48.424]    __traceout=0x00000000      (Trace Disabled)
[20:08:48.424]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:48.424]    __FlashAddr=0x00000000
[20:08:48.424]    __FlashLen=0x00000000
[20:08:48.424]    __FlashArg=0x00000000
[20:08:48.424]    __FlashOp=0x00000000
[20:08:48.424]    __Result=0x00000000
[20:08:48.424]  </debugvars>
[20:08:48.424]  
[20:08:48.424]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:08:48.424]    <block atomic="false" info="">
[20:08:48.424]      __var deviceID = 0;
[20:08:48.424]        // -> [deviceID <= 0x00000000]
[20:08:48.424]      __var version = 0;
[20:08:48.429]        // -> [version <= 0x00000000]
[20:08:48.429]      __var partNum = 0;
[20:08:48.429]        // -> [partNum <= 0x00000000]
[20:08:48.429]      __var manuf = 0;
[20:08:48.429]        // -> [manuf <= 0x00000000]
[20:08:48.429]      __var isMSPM0G1X0X_G3X0X = 0;
[20:08:48.429]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:08:48.430]      __var isProduction = 0;
[20:08:48.430]        // -> [isProduction <= 0x00000000]
[20:08:48.430]      __var continueId = 0;
[20:08:48.430]        // -> [continueId <= 0x00000000]
[20:08:48.430]      deviceID =   Read32(0x41C40004);
[20:08:48.441]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:08:48.441]        // -> [deviceID <= 0x2BB8802F]
[20:08:48.441]      version = deviceID >> 28;
[20:08:48.441]        // -> [version <= 0x00000002]
[20:08:48.441]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:08:48.441]        // -> [partNum <= 0x0000BB88]
[20:08:48.441]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:08:48.441]        // -> [manuf <= 0x00000017]
[20:08:48.441]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:08:48.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:08:48.441]      isProduction = (version > 0);
[20:08:48.441]        // -> [isProduction <= 0x00000001]
[20:08:48.441]    </block>
[20:08:48.441]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:08:48.441]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:08:48.441]        // =>  FALSE
[20:08:48.441]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:08:48.441]    </control>
[20:08:48.441]    <control if="continueId == 4" while="" timeout="0" info="">
[20:08:48.441]      // if-block "continueId == 4"
[20:08:48.441]        // =>  FALSE
[20:08:48.441]      // skip if-block "continueId == 4"
[20:08:48.448]    </control>
[20:08:48.448]    <control if="!isProduction" while="" timeout="0" info="">
[20:08:48.448]      // if-block "!isProduction"
[20:08:48.448]        // =>  FALSE
[20:08:48.448]      // skip if-block "!isProduction"
[20:08:48.448]    </control>
[20:08:48.448]  </sequence>
[20:08:48.448]  
[20:26:34.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:26:34.455]  
[20:26:34.472]  <debugvars>
[20:26:34.472]    // Pre-defined
[20:26:34.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:34.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:34.472]    __dp=0x00000000
[20:26:34.472]    __ap=0x00000000
[20:26:34.472]    __traceout=0x00000000      (Trace Disabled)
[20:26:34.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:34.472]    __FlashAddr=0x00000000
[20:26:34.472]    __FlashLen=0x00000000
[20:26:34.472]    __FlashArg=0x00000000
[20:26:34.472]    __FlashOp=0x00000000
[20:26:34.472]    __Result=0x00000000
[20:26:34.472]  </debugvars>
[20:26:34.472]  
[20:26:34.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:26:34.472]    <block atomic="false" info="">
[20:26:34.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:26:34.472]        // -> [isSWJ <= 0x00000001]
[20:26:34.472]      __var hasDormant = __protocol & 0x00020000;
[20:26:34.472]        // -> [hasDormant <= 0x00000000]
[20:26:34.472]      __var protType   = __protocol & 0x0000FFFF;
[20:26:34.472]        // -> [protType <= 0x00000002]
[20:26:34.472]    </block>
[20:26:34.472]    <control if="protType == 1" while="" timeout="0" info="">
[20:26:34.472]      // if-block "protType == 1"
[20:26:34.472]        // =>  FALSE
[20:26:34.472]      // skip if-block "protType == 1"
[20:26:34.472]    </control>
[20:26:34.475]    <control if="protType == 2" while="" timeout="0" info="">
[20:26:34.475]      // if-block "protType == 2"
[20:26:34.475]        // =>  TRUE
[20:26:34.475]      <control if="isSWJ" while="" timeout="0" info="">
[20:26:34.475]        // if-block "isSWJ"
[20:26:34.475]          // =>  TRUE
[20:26:34.475]        <control if="hasDormant" while="" timeout="0" info="">
[20:26:34.475]          // if-block "hasDormant"
[20:26:34.475]            // =>  FALSE
[20:26:34.475]          // skip if-block "hasDormant"
[20:26:34.475]        </control>
[20:26:34.475]        <control if="!hasDormant" while="" timeout="0" info="">
[20:26:34.475]          // if-block "!hasDormant"
[20:26:34.475]            // =>  TRUE
[20:26:34.475]          <block atomic="false" info="">
[20:26:34.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:26:34.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:34.475]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:26:34.475]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:26:34.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:26:34.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:34.485]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:26:34.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:26:34.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:26:34.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:34.495]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:26:34.505]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:26:34.505]          </block>
[20:26:34.505]          // end if-block "!hasDormant"
[20:26:34.505]        </control>
[20:26:34.505]        // end if-block "isSWJ"
[20:26:34.505]      </control>
[20:26:34.505]      <control if="!isSWJ" while="" timeout="0" info="">
[20:26:34.505]        // if-block "!isSWJ"
[20:26:34.505]          // =>  FALSE
[20:26:34.505]        // skip if-block "!isSWJ"
[20:26:34.505]      </control>
[20:26:34.505]      <block atomic="false" info="">
[20:26:34.505]        ReadDP(0x0);
[20:26:34.508]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:26:34.508]      </block>
[20:26:34.508]      // end if-block "protType == 2"
[20:26:34.508]    </control>
[20:26:34.508]  </sequence>
[20:26:34.508]  
[20:26:34.508]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:26:34.508]  
[20:26:34.508]  <debugvars>
[20:26:34.508]    // Pre-defined
[20:26:34.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:34.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:34.508]    __dp=0x00000000
[20:26:34.508]    __ap=0x00000000
[20:26:34.508]    __traceout=0x00000000      (Trace Disabled)
[20:26:34.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:34.508]    __FlashAddr=0x00000000
[20:26:34.508]    __FlashLen=0x00000000
[20:26:34.508]    __FlashArg=0x00000000
[20:26:34.508]    __FlashOp=0x00000000
[20:26:34.508]    __Result=0x00000000
[20:26:34.508]  </debugvars>
[20:26:34.508]  
[20:26:34.508]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:26:34.508]    <block atomic="false" info="">
[20:26:34.508]      __var SW_DP_ABORT       = 0x0;
[20:26:34.508]        // -> [SW_DP_ABORT <= 0x00000000]
[20:26:34.508]      __var DP_CTRL_STAT      = 0x4;
[20:26:34.508]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:26:34.508]      __var DP_SELECT         = 0x8;
[20:26:34.516]        // -> [DP_SELECT <= 0x00000008]
[20:26:34.516]      __var powered_down      = 0;
[20:26:34.516]        // -> [powered_down <= 0x00000000]
[20:26:34.516]      WriteDP(DP_SELECT, 0x00000000);
[20:26:34.516]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:26:34.516]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:26:34.516]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:26:34.516]        // -> [powered_down <= 0x00000001]
[20:26:34.516]    </block>
[20:26:34.516]    <control if="powered_down" while="" timeout="0" info="">
[20:26:34.516]      // if-block "powered_down"
[20:26:34.516]        // =>  TRUE
[20:26:34.516]      <block atomic="false" info="">
[20:26:34.516]        Message(0, "Debug/System power-up request sent");
[20:26:34.516]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:26:34.516]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:26:34.516]      </block>
[20:26:34.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:26:34.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:26:34.526]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:26:34.536]        // while-condition  =>  FALSE
[20:26:34.536]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:26:34.536]      </control>
[20:26:34.536]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:26:34.536]        // if-block "(__protocol & 0xFFFF) == 1"
[20:26:34.536]          // =>  FALSE
[20:26:34.536]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:26:34.536]      </control>
[20:26:34.536]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:26:34.536]        // if-block "(__protocol & 0xFFFF) == 2"
[20:26:34.536]          // =>  TRUE
[20:26:34.536]        <block atomic="false" info="">
[20:26:34.536]          Message(0, "executing SWD power up");
[20:26:34.536]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:26:34.536]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:26:34.536]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:26:34.548]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:26:34.548]        </block>
[20:26:34.548]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:26:34.548]      </control>
[20:26:34.548]      // end if-block "powered_down"
[20:26:34.548]    </control>
[20:26:34.548]    <block atomic="false" info="">
[20:26:34.548]      __var DEBUG_PORT_VAL    = 0;
[20:26:34.548]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:26:34.548]      __var ACCESS_POINT_VAL  = 0;
[20:26:34.548]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:26:34.548]      __ap = 1; 
[20:26:34.548]        // -> [__ap <= 0x00000001]
[20:26:34.548]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:26:34.557]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:26:34.557]      __ap = 4;
[20:26:34.557]        // -> [__ap <= 0x00000004]
[20:26:34.557]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:34.560]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:26:34.560]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:26:34.560]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:34.566]    </block>
[20:26:34.567]    <block atomic="false" info="">
[20:26:34.567]      __var nReset = 0x80;
[20:26:34.567]        // -> [nReset <= 0x00000080]
[20:26:34.568]      __var canReadPins = 0;
[20:26:34.568]        // -> [canReadPins <= 0x00000000]
[20:26:34.568]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:26:34.572]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:26:34.573]        // -> [canReadPins <= 0x00000001]
[20:26:34.573]    </block>
[20:26:34.573]    <control if="" while="1" timeout="200" info="">
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.573]      // while-condition  =>  TRUE
[20:26:34.573]      // while "1"  (timeout="200")
[20:26:34.576]      // while-condition  =>  TRUE
[20:26:34.576]      // while "1"  (timeout="200")
[20:26:34.576]      // while-condition  =>  TRUE
[20:26:34.576]      // while "1"  (timeout="200")
[20:26:34.576]      // while-condition  =>  TRUE
[20:26:34.576]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.578]      // while "1"  (timeout="200")
[20:26:34.578]      // while-condition  =>  TRUE
[20:26:34.586]      // while "1"  (timeout="200")
[20:26:34.586]      // while  =>  TIMEOUT
[20:26:34.586]      // end while "1"
[20:26:34.586]    </control>
[20:26:34.586]    <control if="canReadPins" while="" timeout="0" info="">
[20:26:34.586]      // if-block "canReadPins"
[20:26:34.586]        // =>  TRUE
[20:26:34.586]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:26:34.587]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:26:34.597]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:26:34.597]        // while-condition  =>  FALSE
[20:26:34.597]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:26:34.597]      </control>
[20:26:34.597]      // end if-block "canReadPins"
[20:26:34.597]    </control>
[20:26:34.597]    <control if="!canReadPins" while="" timeout="0" info="">
[20:26:34.597]      // if-block "!canReadPins"
[20:26:34.597]        // =>  FALSE
[20:26:34.597]      // skip if-block "!canReadPins"
[20:26:34.597]    </control>
[20:26:34.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:26:34.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:34.597]        // =>  TRUE
[20:26:34.597]      <block atomic="false" info="">
[20:26:34.597]        WriteAP(0x00, 0x190008);
[20:26:34.597]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:34.597]        WriteAP(0xF0, 0x01);
[20:26:34.597]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:34.597]      </block>
[20:26:34.597]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:34.597]    </control>
[20:26:34.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:26:34.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:34.597]        // =>  FALSE
[20:26:34.597]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:34.597]    </control>
[20:26:34.597]    <block atomic="false" info="">
[20:26:34.597]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:34.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:26:34.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:26:34.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:34.608]      __ap = 0; //lets make sure we reset the access point selection
[20:26:34.608]        // -> [__ap <= 0x00000000]
[20:26:34.608]    </block>
[20:26:34.608]  </sequence>
[20:26:34.608]  
[20:26:34.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:26:34.647]  
[20:26:34.647]  <debugvars>
[20:26:34.647]    // Pre-defined
[20:26:34.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:34.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:34.647]    __dp=0x00000000
[20:26:34.647]    __ap=0x00000000
[20:26:34.647]    __traceout=0x00000000      (Trace Disabled)
[20:26:34.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:34.647]    __FlashAddr=0x00000000
[20:26:34.647]    __FlashLen=0x00000000
[20:26:34.647]    __FlashArg=0x00000000
[20:26:34.647]    __FlashOp=0x00000000
[20:26:34.647]    __Result=0x00000000
[20:26:34.647]  </debugvars>
[20:26:34.647]  
[20:26:34.647]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:26:34.647]    <block atomic="false" info="">
[20:26:34.647]      __var deviceID = 0;
[20:26:34.647]        // -> [deviceID <= 0x00000000]
[20:26:34.647]      __var version = 0;
[20:26:34.647]        // -> [version <= 0x00000000]
[20:26:34.647]      __var partNum = 0;
[20:26:34.647]        // -> [partNum <= 0x00000000]
[20:26:34.655]      __var manuf = 0;
[20:26:34.655]        // -> [manuf <= 0x00000000]
[20:26:34.655]      __var isMSPM0G1X0X_G3X0X = 0;
[20:26:34.655]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:26:34.655]      __var isProduction = 0;
[20:26:34.655]        // -> [isProduction <= 0x00000000]
[20:26:34.655]      __var continueId = 0;
[20:26:34.655]        // -> [continueId <= 0x00000000]
[20:26:34.655]      deviceID =   Read32(0x41C40004);
[20:26:34.658]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:26:34.658]        // -> [deviceID <= 0x2BB8802F]
[20:26:34.658]      version = deviceID >> 28;
[20:26:34.658]        // -> [version <= 0x00000002]
[20:26:34.658]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:26:34.667]        // -> [partNum <= 0x0000BB88]
[20:26:34.667]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:26:34.667]        // -> [manuf <= 0x00000017]
[20:26:34.667]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:26:34.667]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:26:34.667]      isProduction = (version > 0);
[20:26:34.667]        // -> [isProduction <= 0x00000001]
[20:26:34.667]    </block>
[20:26:34.667]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:26:34.667]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:26:34.667]        // =>  FALSE
[20:26:34.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:26:34.667]    </control>
[20:26:34.667]    <control if="continueId == 4" while="" timeout="0" info="">
[20:26:34.667]      // if-block "continueId == 4"
[20:26:34.667]        // =>  FALSE
[20:26:34.667]      // skip if-block "continueId == 4"
[20:26:34.667]    </control>
[20:26:34.667]    <control if="!isProduction" while="" timeout="0" info="">
[20:26:34.667]      // if-block "!isProduction"
[20:26:34.667]        // =>  FALSE
[20:26:34.667]      // skip if-block "!isProduction"
[20:26:34.667]    </control>
[20:26:34.667]  </sequence>
[20:26:34.667]  
[20:27:31.174]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:27:31.174]  
[20:27:31.183]  <debugvars>
[20:27:31.183]    // Pre-defined
[20:27:31.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:31.183]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:31.183]    __dp=0x00000000
[20:27:31.183]    __ap=0x00000000
[20:27:31.183]    __traceout=0x00000000      (Trace Disabled)
[20:27:31.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:31.183]    __FlashAddr=0x00000000
[20:27:31.184]    __FlashLen=0x00000000
[20:27:31.184]    __FlashArg=0x00000000
[20:27:31.184]    __FlashOp=0x00000000
[20:27:31.184]    __Result=0x00000000
[20:27:31.184]  </debugvars>
[20:27:31.184]  
[20:27:31.184]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:27:31.184]    <block atomic="false" info="">
[20:27:31.184]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:27:31.184]        // -> [isSWJ <= 0x00000001]
[20:27:31.184]      __var hasDormant = __protocol & 0x00020000;
[20:27:31.184]        // -> [hasDormant <= 0x00000000]
[20:27:31.184]      __var protType   = __protocol & 0x0000FFFF;
[20:27:31.184]        // -> [protType <= 0x00000002]
[20:27:31.184]    </block>
[20:27:31.184]    <control if="protType == 1" while="" timeout="0" info="">
[20:27:31.184]      // if-block "protType == 1"
[20:27:31.184]        // =>  FALSE
[20:27:31.184]      // skip if-block "protType == 1"
[20:27:31.184]    </control>
[20:27:31.184]    <control if="protType == 2" while="" timeout="0" info="">
[20:27:31.184]      // if-block "protType == 2"
[20:27:31.184]        // =>  TRUE
[20:27:31.184]      <control if="isSWJ" while="" timeout="0" info="">
[20:27:31.184]        // if-block "isSWJ"
[20:27:31.187]          // =>  TRUE
[20:27:31.187]        <control if="hasDormant" while="" timeout="0" info="">
[20:27:31.187]          // if-block "hasDormant"
[20:27:31.187]            // =>  FALSE
[20:27:31.187]          // skip if-block "hasDormant"
[20:27:31.187]        </control>
[20:27:31.187]        <control if="!hasDormant" while="" timeout="0" info="">
[20:27:31.187]          // if-block "!hasDormant"
[20:27:31.187]            // =>  TRUE
[20:27:31.187]          <block atomic="false" info="">
[20:27:31.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:27:31.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:31.190]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:27:31.195]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:27:31.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:27:31.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:31.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:27:31.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:27:31.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:27:31.200]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:31.200]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:27:31.205]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:27:31.205]          </block>
[20:27:31.205]          // end if-block "!hasDormant"
[20:27:31.205]        </control>
[20:27:31.205]        // end if-block "isSWJ"
[20:27:31.205]      </control>
[20:27:31.205]      <control if="!isSWJ" while="" timeout="0" info="">
[20:27:31.205]        // if-block "!isSWJ"
[20:27:31.205]          // =>  FALSE
[20:27:31.205]        // skip if-block "!isSWJ"
[20:27:31.205]      </control>
[20:27:31.205]      <block atomic="false" info="">
[20:27:31.205]        ReadDP(0x0);
[20:27:31.220]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:27:31.220]      </block>
[20:27:31.220]      // end if-block "protType == 2"
[20:27:31.220]    </control>
[20:27:31.220]  </sequence>
[20:27:31.220]  
[20:27:31.225]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:27:31.225]  
[20:27:31.225]  <debugvars>
[20:27:31.225]    // Pre-defined
[20:27:31.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:31.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:31.230]    __dp=0x00000000
[20:27:31.230]    __ap=0x00000000
[20:27:31.230]    __traceout=0x00000000      (Trace Disabled)
[20:27:31.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:31.230]    __FlashAddr=0x00000000
[20:27:31.230]    __FlashLen=0x00000000
[20:27:31.230]    __FlashArg=0x00000000
[20:27:31.230]    __FlashOp=0x00000000
[20:27:31.230]    __Result=0x00000000
[20:27:31.230]  </debugvars>
[20:27:31.230]  
[20:27:31.230]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:27:31.230]    <block atomic="false" info="">
[20:27:31.230]      __var SW_DP_ABORT       = 0x0;
[20:27:31.230]        // -> [SW_DP_ABORT <= 0x00000000]
[20:27:31.230]      __var DP_CTRL_STAT      = 0x4;
[20:27:31.230]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:27:31.230]      __var DP_SELECT         = 0x8;
[20:27:31.232]        // -> [DP_SELECT <= 0x00000008]
[20:27:31.232]      __var powered_down      = 0;
[20:27:31.232]        // -> [powered_down <= 0x00000000]
[20:27:31.232]      WriteDP(DP_SELECT, 0x00000000);
[20:27:31.236]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:27:31.236]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:27:31.237]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:27:31.237]        // -> [powered_down <= 0x00000001]
[20:27:31.237]    </block>
[20:27:31.237]    <control if="powered_down" while="" timeout="0" info="">
[20:27:31.237]      // if-block "powered_down"
[20:27:31.237]        // =>  TRUE
[20:27:31.237]      <block atomic="false" info="">
[20:27:31.237]        Message(0, "Debug/System power-up request sent");
[20:27:31.240]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:27:31.240]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:27:31.240]      </block>
[20:27:31.240]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:27:31.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:27:31.246]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:27:31.246]        // while-condition  =>  FALSE
[20:27:31.246]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:27:31.246]      </control>
[20:27:31.250]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:27:31.250]        // if-block "(__protocol & 0xFFFF) == 1"
[20:27:31.250]          // =>  FALSE
[20:27:31.250]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:27:31.250]      </control>
[20:27:31.250]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:27:31.250]        // if-block "(__protocol & 0xFFFF) == 2"
[20:27:31.250]          // =>  TRUE
[20:27:31.250]        <block atomic="false" info="">
[20:27:31.250]          Message(0, "executing SWD power up");
[20:27:31.250]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:27:31.250]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:27:31.250]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:27:31.256]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:27:31.256]        </block>
[20:27:31.256]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:27:31.256]      </control>
[20:27:31.257]      // end if-block "powered_down"
[20:27:31.257]    </control>
[20:27:31.258]    <block atomic="false" info="">
[20:27:31.258]      __var DEBUG_PORT_VAL    = 0;
[20:27:31.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:27:31.258]      __var ACCESS_POINT_VAL  = 0;
[20:27:31.258]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:27:31.258]      __ap = 1; 
[20:27:31.258]        // -> [__ap <= 0x00000001]
[20:27:31.258]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:27:31.260]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:27:31.260]      __ap = 4;
[20:27:31.260]        // -> [__ap <= 0x00000004]
[20:27:31.267]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:31.270]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:27:31.270]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:27:31.270]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:31.270]    </block>
[20:27:31.270]    <block atomic="false" info="">
[20:27:31.270]      __var nReset = 0x80;
[20:27:31.270]        // -> [nReset <= 0x00000080]
[20:27:31.270]      __var canReadPins = 0;
[20:27:31.270]        // -> [canReadPins <= 0x00000000]
[20:27:31.270]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:27:31.274]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:27:31.274]        // -> [canReadPins <= 0x00000001]
[20:27:31.274]    </block>
[20:27:31.274]    <control if="" while="1" timeout="200" info="">
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.277]      // while-condition  =>  TRUE
[20:27:31.277]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.280]      // while-condition  =>  TRUE
[20:27:31.280]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.284]      // while "1"  (timeout="200")
[20:27:31.284]      // while-condition  =>  TRUE
[20:27:31.286]      // while "1"  (timeout="200")
[20:27:31.286]      // while  =>  TIMEOUT
[20:27:31.286]      // end while "1"
[20:27:31.286]    </control>
[20:27:31.286]    <control if="canReadPins" while="" timeout="0" info="">
[20:27:31.286]      // if-block "canReadPins"
[20:27:31.286]        // =>  TRUE
[20:27:31.286]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:27:31.286]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:27:31.291]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:27:31.291]        // while-condition  =>  FALSE
[20:27:31.291]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:27:31.291]      </control>
[20:27:31.291]      // end if-block "canReadPins"
[20:27:31.291]    </control>
[20:27:31.291]    <control if="!canReadPins" while="" timeout="0" info="">
[20:27:31.291]      // if-block "!canReadPins"
[20:27:31.291]        // =>  FALSE
[20:27:31.291]      // skip if-block "!canReadPins"
[20:27:31.291]    </control>
[20:27:31.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:27:31.291]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:31.291]        // =>  TRUE
[20:27:31.291]      <block atomic="false" info="">
[20:27:31.291]        WriteAP(0x00, 0x190008);
[20:27:31.298]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:31.298]        WriteAP(0xF0, 0x01);
[20:27:31.300]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:31.300]      </block>
[20:27:31.300]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:31.300]    </control>
[20:27:31.300]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:27:31.300]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:31.300]        // =>  FALSE
[20:27:31.300]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:31.300]    </control>
[20:27:31.300]    <block atomic="false" info="">
[20:27:31.300]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:31.300]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:27:31.300]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:27:31.307]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:31.309]      __ap = 0; //lets make sure we reset the access point selection
[20:27:31.309]        // -> [__ap <= 0x00000000]
[20:27:31.309]    </block>
[20:27:31.309]  </sequence>
[20:27:31.309]  
[20:27:31.337]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:27:31.337]  
[20:27:31.337]  <debugvars>
[20:27:31.337]    // Pre-defined
[20:27:31.337]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:31.337]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:31.337]    __dp=0x00000000
[20:27:31.337]    __ap=0x00000000
[20:27:31.337]    __traceout=0x00000000      (Trace Disabled)
[20:27:31.337]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:31.337]    __FlashAddr=0x00000000
[20:27:31.337]    __FlashLen=0x00000000
[20:27:31.337]    __FlashArg=0x00000000
[20:27:31.339]    __FlashOp=0x00000000
[20:27:31.339]    __Result=0x00000000
[20:27:31.339]  </debugvars>
[20:27:31.339]  
[20:27:31.339]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:27:31.340]    <block atomic="false" info="">
[20:27:31.340]      __var deviceID = 0;
[20:27:31.340]        // -> [deviceID <= 0x00000000]
[20:27:31.340]      __var version = 0;
[20:27:31.340]        // -> [version <= 0x00000000]
[20:27:31.340]      __var partNum = 0;
[20:27:31.340]        // -> [partNum <= 0x00000000]
[20:27:31.341]      __var manuf = 0;
[20:27:31.341]        // -> [manuf <= 0x00000000]
[20:27:31.341]      __var isMSPM0G1X0X_G3X0X = 0;
[20:27:31.341]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:27:31.341]      __var isProduction = 0;
[20:27:31.341]        // -> [isProduction <= 0x00000000]
[20:27:31.341]      __var continueId = 0;
[20:27:31.341]        // -> [continueId <= 0x00000000]
[20:27:31.341]      deviceID =   Read32(0x41C40004);
[20:27:31.342]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:27:31.342]        // -> [deviceID <= 0x2BB8802F]
[20:27:31.342]      version = deviceID >> 28;
[20:27:31.342]        // -> [version <= 0x00000002]
[20:27:31.342]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:27:31.342]        // -> [partNum <= 0x0000BB88]
[20:27:31.342]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:27:31.342]        // -> [manuf <= 0x00000017]
[20:27:31.342]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:27:31.342]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:27:31.342]      isProduction = (version > 0);
[20:27:31.342]        // -> [isProduction <= 0x00000001]
[20:27:31.342]    </block>
[20:27:31.348]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:27:31.348]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:27:31.348]        // =>  FALSE
[20:27:31.348]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:27:31.348]    </control>
[20:27:31.348]    <control if="continueId == 4" while="" timeout="0" info="">
[20:27:31.348]      // if-block "continueId == 4"
[20:27:31.348]        // =>  FALSE
[20:27:31.348]      // skip if-block "continueId == 4"
[20:27:31.348]    </control>
[20:27:31.348]    <control if="!isProduction" while="" timeout="0" info="">
[20:27:31.348]      // if-block "!isProduction"
[20:27:31.348]        // =>  FALSE
[20:27:31.348]      // skip if-block "!isProduction"
[20:27:31.348]    </control>
[20:27:31.348]  </sequence>
[20:27:31.348]  
[20:28:50.891]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:28:50.891]  
[20:28:50.901]  <debugvars>
[20:28:50.901]    // Pre-defined
[20:28:50.901]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:50.901]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:50.901]    __dp=0x00000000
[20:28:50.901]    __ap=0x00000000
[20:28:50.901]    __traceout=0x00000000      (Trace Disabled)
[20:28:50.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:50.901]    __FlashAddr=0x00000000
[20:28:50.901]    __FlashLen=0x00000000
[20:28:50.901]    __FlashArg=0x00000000
[20:28:50.901]    __FlashOp=0x00000000
[20:28:50.901]    __Result=0x00000000
[20:28:50.901]  </debugvars>
[20:28:50.901]  
[20:28:50.901]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:28:50.903]    <block atomic="false" info="">
[20:28:50.903]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:28:50.903]        // -> [isSWJ <= 0x00000001]
[20:28:50.903]      __var hasDormant = __protocol & 0x00020000;
[20:28:50.903]        // -> [hasDormant <= 0x00000000]
[20:28:50.904]      __var protType   = __protocol & 0x0000FFFF;
[20:28:50.904]        // -> [protType <= 0x00000002]
[20:28:50.904]    </block>
[20:28:50.904]    <control if="protType == 1" while="" timeout="0" info="">
[20:28:50.904]      // if-block "protType == 1"
[20:28:50.904]        // =>  FALSE
[20:28:50.904]      // skip if-block "protType == 1"
[20:28:50.904]    </control>
[20:28:50.904]    <control if="protType == 2" while="" timeout="0" info="">
[20:28:50.904]      // if-block "protType == 2"
[20:28:50.904]        // =>  TRUE
[20:28:50.904]      <control if="isSWJ" while="" timeout="0" info="">
[20:28:50.904]        // if-block "isSWJ"
[20:28:50.904]          // =>  TRUE
[20:28:50.904]        <control if="hasDormant" while="" timeout="0" info="">
[20:28:50.904]          // if-block "hasDormant"
[20:28:50.904]            // =>  FALSE
[20:28:50.904]          // skip if-block "hasDormant"
[20:28:50.904]        </control>
[20:28:50.904]        <control if="!hasDormant" while="" timeout="0" info="">
[20:28:50.904]          // if-block "!hasDormant"
[20:28:50.904]            // =>  TRUE
[20:28:50.904]          <block atomic="false" info="">
[20:28:50.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:28:50.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:50.912]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:28:50.912]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:28:50.912]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:28:50.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:50.912]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:28:50.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:28:50.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:28:50.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:50.921]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:28:50.921]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:28:50.921]          </block>
[20:28:50.921]          // end if-block "!hasDormant"
[20:28:50.921]        </control>
[20:28:50.921]        // end if-block "isSWJ"
[20:28:50.921]      </control>
[20:28:50.921]      <control if="!isSWJ" while="" timeout="0" info="">
[20:28:50.921]        // if-block "!isSWJ"
[20:28:50.921]          // =>  FALSE
[20:28:50.921]        // skip if-block "!isSWJ"
[20:28:50.921]      </control>
[20:28:50.921]      <block atomic="false" info="">
[20:28:50.921]        ReadDP(0x0);
[20:28:50.921]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:28:50.921]      </block>
[20:28:50.921]      // end if-block "protType == 2"
[20:28:50.921]    </control>
[20:28:50.921]  </sequence>
[20:28:50.921]  
[20:28:50.932]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:28:50.932]  
[20:28:50.932]  <debugvars>
[20:28:50.932]    // Pre-defined
[20:28:50.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:50.932]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:50.932]    __dp=0x00000000
[20:28:50.932]    __ap=0x00000000
[20:28:50.932]    __traceout=0x00000000      (Trace Disabled)
[20:28:50.933]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:50.933]    __FlashAddr=0x00000000
[20:28:50.933]    __FlashLen=0x00000000
[20:28:50.933]    __FlashArg=0x00000000
[20:28:50.933]    __FlashOp=0x00000000
[20:28:50.933]    __Result=0x00000000
[20:28:50.933]  </debugvars>
[20:28:50.933]  
[20:28:50.933]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:28:50.933]    <block atomic="false" info="">
[20:28:50.933]      __var SW_DP_ABORT       = 0x0;
[20:28:50.933]        // -> [SW_DP_ABORT <= 0x00000000]
[20:28:50.933]      __var DP_CTRL_STAT      = 0x4;
[20:28:50.933]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:28:50.933]      __var DP_SELECT         = 0x8;
[20:28:50.933]        // -> [DP_SELECT <= 0x00000008]
[20:28:50.933]      __var powered_down      = 0;
[20:28:50.933]        // -> [powered_down <= 0x00000000]
[20:28:50.933]      WriteDP(DP_SELECT, 0x00000000);
[20:28:50.933]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:28:50.933]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:28:50.933]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:28:50.933]        // -> [powered_down <= 0x00000001]
[20:28:50.933]    </block>
[20:28:50.933]    <control if="powered_down" while="" timeout="0" info="">
[20:28:50.933]      // if-block "powered_down"
[20:28:50.933]        // =>  TRUE
[20:28:50.933]      <block atomic="false" info="">
[20:28:50.933]        Message(0, "Debug/System power-up request sent");
[20:28:50.933]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:28:50.942]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:28:50.942]      </block>
[20:28:50.942]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:28:50.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:28:50.943]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:28:50.943]        // while-condition  =>  FALSE
[20:28:50.943]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:28:50.943]      </control>
[20:28:50.943]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:28:50.943]        // if-block "(__protocol & 0xFFFF) == 1"
[20:28:50.943]          // =>  FALSE
[20:28:50.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:28:50.943]      </control>
[20:28:50.943]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:28:50.943]        // if-block "(__protocol & 0xFFFF) == 2"
[20:28:50.943]          // =>  TRUE
[20:28:50.943]        <block atomic="false" info="">
[20:28:50.943]          Message(0, "executing SWD power up");
[20:28:50.946]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:28:50.946]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:28:50.946]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:28:50.951]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:28:50.951]        </block>
[20:28:50.952]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:28:50.952]      </control>
[20:28:50.952]      // end if-block "powered_down"
[20:28:50.952]    </control>
[20:28:50.952]    <block atomic="false" info="">
[20:28:50.952]      __var DEBUG_PORT_VAL    = 0;
[20:28:50.952]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:28:50.952]      __var ACCESS_POINT_VAL  = 0;
[20:28:50.952]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:28:50.952]      __ap = 1; 
[20:28:50.952]        // -> [__ap <= 0x00000001]
[20:28:50.952]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:28:50.952]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:28:50.957]      __ap = 4;
[20:28:50.957]        // -> [__ap <= 0x00000004]
[20:28:50.957]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:50.957]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:28:50.957]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:28:50.957]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:50.962]    </block>
[20:28:50.962]    <block atomic="false" info="">
[20:28:50.962]      __var nReset = 0x80;
[20:28:50.962]        // -> [nReset <= 0x00000080]
[20:28:50.962]      __var canReadPins = 0;
[20:28:50.962]        // -> [canReadPins <= 0x00000000]
[20:28:50.962]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:28:50.965]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:28:50.965]        // -> [canReadPins <= 0x00000001]
[20:28:50.965]    </block>
[20:28:50.965]    <control if="" while="1" timeout="200" info="">
[20:28:50.965]      // while "1"  (timeout="200")
[20:28:50.965]      // while-condition  =>  TRUE
[20:28:50.965]      // while "1"  (timeout="200")
[20:28:50.965]      // while-condition  =>  TRUE
[20:28:50.965]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.966]      // while-condition  =>  TRUE
[20:28:50.966]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.971]      // while "1"  (timeout="200")
[20:28:50.971]      // while-condition  =>  TRUE
[20:28:50.981]      // while "1"  (timeout="200")
[20:28:50.981]      // while  =>  TIMEOUT
[20:28:50.981]      // end while "1"
[20:28:50.981]    </control>
[20:28:50.981]    <control if="canReadPins" while="" timeout="0" info="">
[20:28:50.981]      // if-block "canReadPins"
[20:28:50.981]        // =>  TRUE
[20:28:50.981]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:28:50.981]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:28:50.983]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:28:50.983]        // while-condition  =>  FALSE
[20:28:50.983]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:28:50.983]      </control>
[20:28:50.983]      // end if-block "canReadPins"
[20:28:50.983]    </control>
[20:28:50.983]    <control if="!canReadPins" while="" timeout="0" info="">
[20:28:50.983]      // if-block "!canReadPins"
[20:28:50.983]        // =>  FALSE
[20:28:50.983]      // skip if-block "!canReadPins"
[20:28:50.983]    </control>
[20:28:50.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:28:50.983]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:50.983]        // =>  TRUE
[20:28:50.983]      <block atomic="false" info="">
[20:28:50.983]        WriteAP(0x00, 0x190008);
[20:28:50.983]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:50.983]        WriteAP(0xF0, 0x01);
[20:28:50.994]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:50.994]      </block>
[20:28:50.994]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:50.994]    </control>
[20:28:50.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:28:50.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:50.994]        // =>  FALSE
[20:28:50.994]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:50.994]    </control>
[20:28:50.994]    <block atomic="false" info="">
[20:28:50.994]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:51.001]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:28:51.001]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:28:51.001]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:51.012]      __ap = 0; //lets make sure we reset the access point selection
[20:28:51.012]        // -> [__ap <= 0x00000000]
[20:28:51.012]    </block>
[20:28:51.012]  </sequence>
[20:28:51.012]  
[20:28:51.043]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:28:51.043]  
[20:28:51.043]  <debugvars>
[20:28:51.043]    // Pre-defined
[20:28:51.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:51.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:51.043]    __dp=0x00000000
[20:28:51.043]    __ap=0x00000000
[20:28:51.043]    __traceout=0x00000000      (Trace Disabled)
[20:28:51.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:51.043]    __FlashAddr=0x00000000
[20:28:51.043]    __FlashLen=0x00000000
[20:28:51.043]    __FlashArg=0x00000000
[20:28:51.043]    __FlashOp=0x00000000
[20:28:51.043]    __Result=0x00000000
[20:28:51.043]  </debugvars>
[20:28:51.043]  
[20:28:51.043]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:28:51.043]    <block atomic="false" info="">
[20:28:51.043]      __var deviceID = 0;
[20:28:51.043]        // -> [deviceID <= 0x00000000]
[20:28:51.043]      __var version = 0;
[20:28:51.043]        // -> [version <= 0x00000000]
[20:28:51.043]      __var partNum = 0;
[20:28:51.043]        // -> [partNum <= 0x00000000]
[20:28:51.043]      __var manuf = 0;
[20:28:51.043]        // -> [manuf <= 0x00000000]
[20:28:51.043]      __var isMSPM0G1X0X_G3X0X = 0;
[20:28:51.043]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:28:51.043]      __var isProduction = 0;
[20:28:51.043]        // -> [isProduction <= 0x00000000]
[20:28:51.043]      __var continueId = 0;
[20:28:51.043]        // -> [continueId <= 0x00000000]
[20:28:51.043]      deviceID =   Read32(0x41C40004);
[20:28:51.051]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:28:51.051]        // -> [deviceID <= 0x2BB8802F]
[20:28:51.051]      version = deviceID >> 28;
[20:28:51.051]        // -> [version <= 0x00000002]
[20:28:51.051]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:28:51.051]        // -> [partNum <= 0x0000BB88]
[20:28:51.051]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:28:51.051]        // -> [manuf <= 0x00000017]
[20:28:51.051]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:28:51.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:28:51.051]      isProduction = (version > 0);
[20:28:51.051]        // -> [isProduction <= 0x00000001]
[20:28:51.051]    </block>
[20:28:51.051]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:28:51.051]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:28:51.051]        // =>  FALSE
[20:28:51.051]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:28:51.051]    </control>
[20:28:51.051]    <control if="continueId == 4" while="" timeout="0" info="">
[20:28:51.051]      // if-block "continueId == 4"
[20:28:51.051]        // =>  FALSE
[20:28:51.051]      // skip if-block "continueId == 4"
[20:28:51.051]    </control>
[20:28:51.051]    <control if="!isProduction" while="" timeout="0" info="">
[20:28:51.051]      // if-block "!isProduction"
[20:28:51.051]        // =>  FALSE
[20:28:51.051]      // skip if-block "!isProduction"
[20:28:51.051]    </control>
[20:28:51.051]  </sequence>
[20:28:51.051]  
[20:30:50.407]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:30:50.407]  
[20:30:50.415]  <debugvars>
[20:30:50.415]    // Pre-defined
[20:30:50.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:50.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:50.415]    __dp=0x00000000
[20:30:50.415]    __ap=0x00000000
[20:30:50.415]    __traceout=0x00000000      (Trace Disabled)
[20:30:50.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:50.415]    __FlashAddr=0x00000000
[20:30:50.415]    __FlashLen=0x00000000
[20:30:50.415]    __FlashArg=0x00000000
[20:30:50.415]    __FlashOp=0x00000000
[20:30:50.415]    __Result=0x00000000
[20:30:50.415]  </debugvars>
[20:30:50.415]  
[20:30:50.415]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:30:50.417]    <block atomic="false" info="">
[20:30:50.417]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:30:50.417]        // -> [isSWJ <= 0x00000001]
[20:30:50.417]      __var hasDormant = __protocol & 0x00020000;
[20:30:50.417]        // -> [hasDormant <= 0x00000000]
[20:30:50.417]      __var protType   = __protocol & 0x0000FFFF;
[20:30:50.417]        // -> [protType <= 0x00000002]
[20:30:50.417]    </block>
[20:30:50.417]    <control if="protType == 1" while="" timeout="0" info="">
[20:30:50.417]      // if-block "protType == 1"
[20:30:50.417]        // =>  FALSE
[20:30:50.417]      // skip if-block "protType == 1"
[20:30:50.417]    </control>
[20:30:50.417]    <control if="protType == 2" while="" timeout="0" info="">
[20:30:50.417]      // if-block "protType == 2"
[20:30:50.417]        // =>  TRUE
[20:30:50.417]      <control if="isSWJ" while="" timeout="0" info="">
[20:30:50.417]        // if-block "isSWJ"
[20:30:50.417]          // =>  TRUE
[20:30:50.417]        <control if="hasDormant" while="" timeout="0" info="">
[20:30:50.417]          // if-block "hasDormant"
[20:30:50.417]            // =>  FALSE
[20:30:50.417]          // skip if-block "hasDormant"
[20:30:50.417]        </control>
[20:30:50.417]        <control if="!hasDormant" while="" timeout="0" info="">
[20:30:50.417]          // if-block "!hasDormant"
[20:30:50.417]            // =>  TRUE
[20:30:50.417]          <block atomic="false" info="">
[20:30:50.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:30:50.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:50.417]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:30:50.417]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:30:50.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:30:50.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:50.427]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:30:50.429]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:30:50.429]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:30:50.429]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:50.429]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:30:50.429]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:30:50.429]          </block>
[20:30:50.429]          // end if-block "!hasDormant"
[20:30:50.429]        </control>
[20:30:50.429]        // end if-block "isSWJ"
[20:30:50.429]      </control>
[20:30:50.429]      <control if="!isSWJ" while="" timeout="0" info="">
[20:30:50.429]        // if-block "!isSWJ"
[20:30:50.429]          // =>  FALSE
[20:30:50.429]        // skip if-block "!isSWJ"
[20:30:50.429]      </control>
[20:30:50.429]      <block atomic="false" info="">
[20:30:50.429]        ReadDP(0x0);
[20:30:50.429]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:30:50.429]      </block>
[20:30:50.429]      // end if-block "protType == 2"
[20:30:50.429]    </control>
[20:30:50.429]  </sequence>
[20:30:50.438]  
[20:30:50.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:30:50.438]  
[20:30:50.438]  <debugvars>
[20:30:50.438]    // Pre-defined
[20:30:50.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:50.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:50.438]    __dp=0x00000000
[20:30:50.438]    __ap=0x00000000
[20:30:50.438]    __traceout=0x00000000      (Trace Disabled)
[20:30:50.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:50.438]    __FlashAddr=0x00000000
[20:30:50.438]    __FlashLen=0x00000000
[20:30:50.438]    __FlashArg=0x00000000
[20:30:50.438]    __FlashOp=0x00000000
[20:30:50.438]    __Result=0x00000000
[20:30:50.438]  </debugvars>
[20:30:50.438]  
[20:30:50.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:30:50.438]    <block atomic="false" info="">
[20:30:50.438]      __var SW_DP_ABORT       = 0x0;
[20:30:50.438]        // -> [SW_DP_ABORT <= 0x00000000]
[20:30:50.438]      __var DP_CTRL_STAT      = 0x4;
[20:30:50.438]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:30:50.438]      __var DP_SELECT         = 0x8;
[20:30:50.438]        // -> [DP_SELECT <= 0x00000008]
[20:30:50.438]      __var powered_down      = 0;
[20:30:50.438]        // -> [powered_down <= 0x00000000]
[20:30:50.438]      WriteDP(DP_SELECT, 0x00000000);
[20:30:50.438]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:30:50.438]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:30:50.438]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:30:50.438]        // -> [powered_down <= 0x00000001]
[20:30:50.438]    </block>
[20:30:50.438]    <control if="powered_down" while="" timeout="0" info="">
[20:30:50.438]      // if-block "powered_down"
[20:30:50.438]        // =>  TRUE
[20:30:50.438]      <block atomic="false" info="">
[20:30:50.438]        Message(0, "Debug/System power-up request sent");
[20:30:50.448]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:30:50.448]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:30:50.448]      </block>
[20:30:50.448]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:30:50.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:30:50.448]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:30:50.448]        // while-condition  =>  FALSE
[20:30:50.448]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:30:50.448]      </control>
[20:30:50.448]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:30:50.448]        // if-block "(__protocol & 0xFFFF) == 1"
[20:30:50.448]          // =>  FALSE
[20:30:50.448]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:30:50.448]      </control>
[20:30:50.448]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:30:50.448]        // if-block "(__protocol & 0xFFFF) == 2"
[20:30:50.448]          // =>  TRUE
[20:30:50.448]        <block atomic="false" info="">
[20:30:50.448]          Message(0, "executing SWD power up");
[20:30:50.448]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:30:50.458]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:30:50.458]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:30:50.458]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:30:50.458]        </block>
[20:30:50.458]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:30:50.458]      </control>
[20:30:50.458]      // end if-block "powered_down"
[20:30:50.458]    </control>
[20:30:50.458]    <block atomic="false" info="">
[20:30:50.458]      __var DEBUG_PORT_VAL    = 0;
[20:30:50.458]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:30:50.458]      __var ACCESS_POINT_VAL  = 0;
[20:30:50.458]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:30:50.458]      __ap = 1; 
[20:30:50.458]        // -> [__ap <= 0x00000001]
[20:30:50.458]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:30:50.458]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:30:50.458]      __ap = 4;
[20:30:50.458]        // -> [__ap <= 0x00000004]
[20:30:50.458]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:30:50.468]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.468]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:30:50.468]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:30:50.478]    </block>
[20:30:50.478]    <block atomic="false" info="">
[20:30:50.478]      __var nReset = 0x80;
[20:30:50.478]        // -> [nReset <= 0x00000080]
[20:30:50.478]      __var canReadPins = 0;
[20:30:50.478]        // -> [canReadPins <= 0x00000000]
[20:30:50.478]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:30:50.478]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:30:50.478]        // -> [canReadPins <= 0x00000001]
[20:30:50.478]    </block>
[20:30:50.478]    <control if="" while="1" timeout="200" info="">
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.478]      // while-condition  =>  TRUE
[20:30:50.478]      // while "1"  (timeout="200")
[20:30:50.488]      // while-condition  =>  TRUE
[20:30:50.488]      // while "1"  (timeout="200")
[20:30:50.488]      // while  =>  TIMEOUT
[20:30:50.488]      // end while "1"
[20:30:50.488]    </control>
[20:30:50.488]    <control if="canReadPins" while="" timeout="0" info="">
[20:30:50.488]      // if-block "canReadPins"
[20:30:50.488]        // =>  TRUE
[20:30:50.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:30:50.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:30:50.488]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:30:50.488]        // while-condition  =>  FALSE
[20:30:50.488]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:30:50.488]      </control>
[20:30:50.488]      // end if-block "canReadPins"
[20:30:50.488]    </control>
[20:30:50.488]    <control if="!canReadPins" while="" timeout="0" info="">
[20:30:50.488]      // if-block "!canReadPins"
[20:30:50.488]        // =>  FALSE
[20:30:50.488]      // skip if-block "!canReadPins"
[20:30:50.488]    </control>
[20:30:50.488]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:30:50.488]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:30:50.488]        // =>  TRUE
[20:30:50.488]      <block atomic="false" info="">
[20:30:50.488]        WriteAP(0x00, 0x190008);
[20:30:50.488]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.488]        WriteAP(0xF0, 0x01);
[20:30:50.498]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.498]      </block>
[20:30:50.498]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:30:50.498]    </control>
[20:30:50.498]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:30:50.498]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:30:50.498]        // =>  FALSE
[20:30:50.498]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:30:50.498]    </control>
[20:30:50.498]    <block atomic="false" info="">
[20:30:50.498]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:30:50.498]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.498]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:30:50.498]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:30:50.498]      __ap = 0; //lets make sure we reset the access point selection
[20:30:50.508]        // -> [__ap <= 0x00000000]
[20:30:50.508]    </block>
[20:30:50.508]  </sequence>
[20:30:50.508]  
[20:30:50.547]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:30:50.547]  
[20:30:50.547]  <debugvars>
[20:30:50.547]    // Pre-defined
[20:30:50.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:50.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:50.547]    __dp=0x00000000
[20:30:50.547]    __ap=0x00000000
[20:30:50.547]    __traceout=0x00000000      (Trace Disabled)
[20:30:50.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:50.547]    __FlashAddr=0x00000000
[20:30:50.547]    __FlashLen=0x00000000
[20:30:50.547]    __FlashArg=0x00000000
[20:30:50.547]    __FlashOp=0x00000000
[20:30:50.547]    __Result=0x00000000
[20:30:50.547]  </debugvars>
[20:30:50.547]  
[20:30:50.547]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:30:50.547]    <block atomic="false" info="">
[20:30:50.547]      __var deviceID = 0;
[20:30:50.547]        // -> [deviceID <= 0x00000000]
[20:30:50.547]      __var version = 0;
[20:30:50.547]        // -> [version <= 0x00000000]
[20:30:50.547]      __var partNum = 0;
[20:30:50.547]        // -> [partNum <= 0x00000000]
[20:30:50.547]      __var manuf = 0;
[20:30:50.547]        // -> [manuf <= 0x00000000]
[20:30:50.547]      __var isMSPM0G1X0X_G3X0X = 0;
[20:30:50.547]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:30:50.547]      __var isProduction = 0;
[20:30:50.547]        // -> [isProduction <= 0x00000000]
[20:30:50.547]      __var continueId = 0;
[20:30:50.547]        // -> [continueId <= 0x00000000]
[20:30:50.547]      deviceID =   Read32(0x41C40004);
[20:30:50.557]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:30:50.557]        // -> [deviceID <= 0x2BB8802F]
[20:30:50.557]      version = deviceID >> 28;
[20:30:50.557]        // -> [version <= 0x00000002]
[20:30:50.557]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:30:50.557]        // -> [partNum <= 0x0000BB88]
[20:30:50.557]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:30:50.557]        // -> [manuf <= 0x00000017]
[20:30:50.557]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:30:50.557]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:30:50.557]      isProduction = (version > 0);
[20:30:50.557]        // -> [isProduction <= 0x00000001]
[20:30:50.557]    </block>
[20:30:50.557]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:30:50.557]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:30:50.557]        // =>  FALSE
[20:30:50.557]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:30:50.557]    </control>
[20:30:50.557]    <control if="continueId == 4" while="" timeout="0" info="">
[20:30:50.557]      // if-block "continueId == 4"
[20:30:50.557]        // =>  FALSE
[20:30:50.557]      // skip if-block "continueId == 4"
[20:30:50.557]    </control>
[20:30:50.557]    <control if="!isProduction" while="" timeout="0" info="">
[20:30:50.557]      // if-block "!isProduction"
[20:30:50.557]        // =>  FALSE
[20:30:50.557]      // skip if-block "!isProduction"
[20:30:50.557]    </control>
[20:30:50.557]  </sequence>
[20:30:50.557]  
[20:34:25.536]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:34:25.536]  
[20:34:25.545]  <debugvars>
[20:34:25.545]    // Pre-defined
[20:34:25.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:25.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:25.545]    __dp=0x00000000
[20:34:25.545]    __ap=0x00000000
[20:34:25.545]    __traceout=0x00000000      (Trace Disabled)
[20:34:25.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:25.545]    __FlashAddr=0x00000000
[20:34:25.545]    __FlashLen=0x00000000
[20:34:25.545]    __FlashArg=0x00000000
[20:34:25.545]    __FlashOp=0x00000000
[20:34:25.545]    __Result=0x00000000
[20:34:25.545]  </debugvars>
[20:34:25.545]  
[20:34:25.545]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:25.545]    <block atomic="false" info="">
[20:34:25.545]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:25.545]        // -> [isSWJ <= 0x00000001]
[20:34:25.545]      __var hasDormant = __protocol & 0x00020000;
[20:34:25.545]        // -> [hasDormant <= 0x00000000]
[20:34:25.545]      __var protType   = __protocol & 0x0000FFFF;
[20:34:25.545]        // -> [protType <= 0x00000002]
[20:34:25.545]    </block>
[20:34:25.545]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:25.545]      // if-block "protType == 1"
[20:34:25.545]        // =>  FALSE
[20:34:25.545]      // skip if-block "protType == 1"
[20:34:25.545]    </control>
[20:34:25.545]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:25.545]      // if-block "protType == 2"
[20:34:25.545]        // =>  TRUE
[20:34:25.545]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:25.545]        // if-block "isSWJ"
[20:34:25.545]          // =>  TRUE
[20:34:25.545]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:25.545]          // if-block "hasDormant"
[20:34:25.545]            // =>  FALSE
[20:34:25.545]          // skip if-block "hasDormant"
[20:34:25.545]        </control>
[20:34:25.545]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:25.545]          // if-block "!hasDormant"
[20:34:25.545]            // =>  TRUE
[20:34:25.545]          <block atomic="false" info="">
[20:34:25.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:25.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:25.551]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:34:25.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:34:25.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:34:25.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:25.553]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:34:25.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:34:25.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:34:25.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:25.553]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:34:25.562]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:34:25.562]          </block>
[20:34:25.562]          // end if-block "!hasDormant"
[20:34:25.562]        </control>
[20:34:25.562]        // end if-block "isSWJ"
[20:34:25.562]      </control>
[20:34:25.562]      <control if="!isSWJ" while="" timeout="0" info="">
[20:34:25.562]        // if-block "!isSWJ"
[20:34:25.562]          // =>  FALSE
[20:34:25.562]        // skip if-block "!isSWJ"
[20:34:25.562]      </control>
[20:34:25.562]      <block atomic="false" info="">
[20:34:25.562]        ReadDP(0x0);
[20:34:25.562]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:34:25.562]      </block>
[20:34:25.562]      // end if-block "protType == 2"
[20:34:25.562]    </control>
[20:34:25.562]  </sequence>
[20:34:25.562]  
[20:34:25.572]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:34:25.572]  
[20:34:25.572]  <debugvars>
[20:34:25.572]    // Pre-defined
[20:34:25.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:25.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:25.572]    __dp=0x00000000
[20:34:25.572]    __ap=0x00000000
[20:34:25.572]    __traceout=0x00000000      (Trace Disabled)
[20:34:25.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:25.572]    __FlashAddr=0x00000000
[20:34:25.572]    __FlashLen=0x00000000
[20:34:25.572]    __FlashArg=0x00000000
[20:34:25.572]    __FlashOp=0x00000000
[20:34:25.572]    __Result=0x00000000
[20:34:25.572]  </debugvars>
[20:34:25.572]  
[20:34:25.572]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:34:25.572]    <block atomic="false" info="">
[20:34:25.572]      __var SW_DP_ABORT       = 0x0;
[20:34:25.572]        // -> [SW_DP_ABORT <= 0x00000000]
[20:34:25.572]      __var DP_CTRL_STAT      = 0x4;
[20:34:25.572]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:34:25.572]      __var DP_SELECT         = 0x8;
[20:34:25.572]        // -> [DP_SELECT <= 0x00000008]
[20:34:25.572]      __var powered_down      = 0;
[20:34:25.572]        // -> [powered_down <= 0x00000000]
[20:34:25.572]      WriteDP(DP_SELECT, 0x00000000);
[20:34:25.582]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:34:25.582]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:34:25.583]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:34:25.583]        // -> [powered_down <= 0x00000001]
[20:34:25.583]    </block>
[20:34:25.583]    <control if="powered_down" while="" timeout="0" info="">
[20:34:25.583]      // if-block "powered_down"
[20:34:25.583]        // =>  TRUE
[20:34:25.583]      <block atomic="false" info="">
[20:34:25.583]        Message(0, "Debug/System power-up request sent");
[20:34:25.583]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:34:25.583]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:34:25.583]      </block>
[20:34:25.583]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:34:25.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:34:25.583]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:34:25.583]        // while-condition  =>  FALSE
[20:34:25.583]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:34:25.583]      </control>
[20:34:25.583]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:34:25.583]        // if-block "(__protocol & 0xFFFF) == 1"
[20:34:25.592]          // =>  FALSE
[20:34:25.592]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:34:25.592]      </control>
[20:34:25.592]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:34:25.592]        // if-block "(__protocol & 0xFFFF) == 2"
[20:34:25.592]          // =>  TRUE
[20:34:25.592]        <block atomic="false" info="">
[20:34:25.592]          Message(0, "executing SWD power up");
[20:34:25.592]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:34:25.595]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:34:25.595]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:34:25.595]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:34:25.595]        </block>
[20:34:25.595]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:34:25.599]      </control>
[20:34:25.599]      // end if-block "powered_down"
[20:34:25.599]    </control>
[20:34:25.599]    <block atomic="false" info="">
[20:34:25.599]      __var DEBUG_PORT_VAL    = 0;
[20:34:25.599]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:34:25.599]      __var ACCESS_POINT_VAL  = 0;
[20:34:25.599]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:34:25.599]      __ap = 1; 
[20:34:25.599]        // -> [__ap <= 0x00000001]
[20:34:25.599]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:34:25.603]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:34:25.603]      __ap = 4;
[20:34:25.603]        // -> [__ap <= 0x00000004]
[20:34:25.603]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:25.612]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:34:25.612]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:34:25.612]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:25.612]    </block>
[20:34:25.612]    <block atomic="false" info="">
[20:34:25.612]      __var nReset = 0x80;
[20:34:25.612]        // -> [nReset <= 0x00000080]
[20:34:25.612]      __var canReadPins = 0;
[20:34:25.612]        // -> [canReadPins <= 0x00000000]
[20:34:25.612]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:34:25.620]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:34:25.620]        // -> [canReadPins <= 0x00000001]
[20:34:25.620]    </block>
[20:34:25.620]    <control if="" while="1" timeout="200" info="">
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.620]      // while-condition  =>  TRUE
[20:34:25.620]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.623]      // while-condition  =>  TRUE
[20:34:25.623]      // while "1"  (timeout="200")
[20:34:25.632]      // while-condition  =>  TRUE
[20:34:25.632]      // while "1"  (timeout="200")
[20:34:25.632]      // while  =>  TIMEOUT
[20:34:25.632]      // end while "1"
[20:34:25.632]    </control>
[20:34:25.632]    <control if="canReadPins" while="" timeout="0" info="">
[20:34:25.633]      // if-block "canReadPins"
[20:34:25.633]        // =>  TRUE
[20:34:25.633]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:34:25.633]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:34:25.634]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:34:25.634]        // while-condition  =>  FALSE
[20:34:25.634]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:34:25.634]      </control>
[20:34:25.634]      // end if-block "canReadPins"
[20:34:25.634]    </control>
[20:34:25.634]    <control if="!canReadPins" while="" timeout="0" info="">
[20:34:25.634]      // if-block "!canReadPins"
[20:34:25.634]        // =>  FALSE
[20:34:25.634]      // skip if-block "!canReadPins"
[20:34:25.634]    </control>
[20:34:25.634]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:34:25.634]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:25.634]        // =>  TRUE
[20:34:25.634]      <block atomic="false" info="">
[20:34:25.634]        WriteAP(0x00, 0x190008);
[20:34:25.643]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:25.643]        WriteAP(0xF0, 0x01);
[20:34:25.643]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:25.643]      </block>
[20:34:25.643]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:25.643]    </control>
[20:34:25.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:34:25.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:25.643]        // =>  FALSE
[20:34:25.643]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:25.643]    </control>
[20:34:25.643]    <block atomic="false" info="">
[20:34:25.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:25.643]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:34:25.643]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:34:25.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:25.655]      __ap = 0; //lets make sure we reset the access point selection
[20:34:25.655]        // -> [__ap <= 0x00000000]
[20:34:25.655]    </block>
[20:34:25.655]  </sequence>
[20:34:25.655]  
[20:34:25.686]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:34:25.686]  
[20:34:25.686]  <debugvars>
[20:34:25.686]    // Pre-defined
[20:34:25.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:25.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:25.686]    __dp=0x00000000
[20:34:25.686]    __ap=0x00000000
[20:34:25.686]    __traceout=0x00000000      (Trace Disabled)
[20:34:25.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:25.686]    __FlashAddr=0x00000000
[20:34:25.686]    __FlashLen=0x00000000
[20:34:25.686]    __FlashArg=0x00000000
[20:34:25.686]    __FlashOp=0x00000000
[20:34:25.686]    __Result=0x00000000
[20:34:25.686]  </debugvars>
[20:34:25.686]  
[20:34:25.686]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:34:25.686]    <block atomic="false" info="">
[20:34:25.686]      __var deviceID = 0;
[20:34:25.686]        // -> [deviceID <= 0x00000000]
[20:34:25.686]      __var version = 0;
[20:34:25.686]        // -> [version <= 0x00000000]
[20:34:25.686]      __var partNum = 0;
[20:34:25.686]        // -> [partNum <= 0x00000000]
[20:34:25.686]      __var manuf = 0;
[20:34:25.686]        // -> [manuf <= 0x00000000]
[20:34:25.686]      __var isMSPM0G1X0X_G3X0X = 0;
[20:34:25.694]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:34:25.694]      __var isProduction = 0;
[20:34:25.694]        // -> [isProduction <= 0x00000000]
[20:34:25.694]      __var continueId = 0;
[20:34:25.694]        // -> [continueId <= 0x00000000]
[20:34:25.694]      deviceID =   Read32(0x41C40004);
[20:34:25.696]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:34:25.696]        // -> [deviceID <= 0x2BB8802F]
[20:34:25.696]      version = deviceID >> 28;
[20:34:25.696]        // -> [version <= 0x00000002]
[20:34:25.696]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:34:25.696]        // -> [partNum <= 0x0000BB88]
[20:34:25.696]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:34:25.696]        // -> [manuf <= 0x00000017]
[20:34:25.696]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:34:25.696]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:34:25.696]      isProduction = (version > 0);
[20:34:25.696]        // -> [isProduction <= 0x00000001]
[20:34:25.696]    </block>
[20:34:25.696]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:34:25.696]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:34:25.696]        // =>  FALSE
[20:34:25.696]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:34:25.696]    </control>
[20:34:25.696]    <control if="continueId == 4" while="" timeout="0" info="">
[20:34:25.696]      // if-block "continueId == 4"
[20:34:25.696]        // =>  FALSE
[20:34:25.696]      // skip if-block "continueId == 4"
[20:34:25.696]    </control>
[20:34:25.696]    <control if="!isProduction" while="" timeout="0" info="">
[20:34:25.696]      // if-block "!isProduction"
[20:34:25.696]        // =>  FALSE
[20:34:25.696]      // skip if-block "!isProduction"
[20:34:25.696]    </control>
[20:34:25.696]  </sequence>
[20:34:25.696]  
[20:34:32.825]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:34:32.825]  
[20:34:32.838]  <debugvars>
[20:34:32.838]    // Pre-defined
[20:34:32.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:32.838]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:32.838]    __dp=0x00000000
[20:34:32.838]    __ap=0x00000000
[20:34:32.838]    __traceout=0x00000000      (Trace Disabled)
[20:34:32.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:32.838]    __FlashAddr=0x00000000
[20:34:32.838]    __FlashLen=0x00000000
[20:34:32.838]    __FlashArg=0x00000000
[20:34:32.838]    __FlashOp=0x00000000
[20:34:32.838]    __Result=0x00000000
[20:34:32.838]  </debugvars>
[20:34:32.838]  
[20:34:32.838]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:32.838]    <block atomic="false" info="">
[20:34:32.838]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:32.838]        // -> [isSWJ <= 0x00000001]
[20:34:32.838]      __var hasDormant = __protocol & 0x00020000;
[20:34:32.838]        // -> [hasDormant <= 0x00000000]
[20:34:32.838]      __var protType   = __protocol & 0x0000FFFF;
[20:34:32.838]        // -> [protType <= 0x00000002]
[20:34:32.838]    </block>
[20:34:32.838]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:32.838]      // if-block "protType == 1"
[20:34:32.838]        // =>  FALSE
[20:34:32.838]      // skip if-block "protType == 1"
[20:34:32.838]    </control>
[20:34:32.838]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:32.838]      // if-block "protType == 2"
[20:34:32.838]        // =>  TRUE
[20:34:32.838]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:32.838]        // if-block "isSWJ"
[20:34:32.838]          // =>  TRUE
[20:34:32.838]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:32.838]          // if-block "hasDormant"
[20:34:32.838]            // =>  FALSE
[20:34:32.838]          // skip if-block "hasDormant"
[20:34:32.838]        </control>
[20:34:32.838]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:32.838]          // if-block "!hasDormant"
[20:34:32.838]            // =>  TRUE
[20:34:32.838]          <block atomic="false" info="">
[20:34:32.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:32.846]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:32.846]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:34:32.846]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:34:32.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:34:32.850]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:32.850]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:34:32.850]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:34:32.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:34:32.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:32.856]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:34:32.856]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:34:32.856]          </block>
[20:34:32.856]          // end if-block "!hasDormant"
[20:34:32.856]        </control>
[20:34:32.856]        // end if-block "isSWJ"
[20:34:32.856]      </control>
[20:34:32.856]      <control if="!isSWJ" while="" timeout="0" info="">
[20:34:32.856]        // if-block "!isSWJ"
[20:34:32.856]          // =>  FALSE
[20:34:32.856]        // skip if-block "!isSWJ"
[20:34:32.856]      </control>
[20:34:32.856]      <block atomic="false" info="">
[20:34:32.856]        ReadDP(0x0);
[20:34:32.856]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:34:32.856]      </block>
[20:34:32.856]      // end if-block "protType == 2"
[20:34:32.856]    </control>
[20:34:32.856]  </sequence>
[20:34:32.856]  
[20:34:32.866]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:34:32.866]  
[20:34:32.866]  <debugvars>
[20:34:32.866]    // Pre-defined
[20:34:32.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:32.866]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:32.866]    __dp=0x00000000
[20:34:32.866]    __ap=0x00000000
[20:34:32.866]    __traceout=0x00000000      (Trace Disabled)
[20:34:32.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:32.866]    __FlashAddr=0x00000000
[20:34:32.866]    __FlashLen=0x00000000
[20:34:32.866]    __FlashArg=0x00000000
[20:34:32.866]    __FlashOp=0x00000000
[20:34:32.866]    __Result=0x00000000
[20:34:32.866]  </debugvars>
[20:34:32.866]  
[20:34:32.866]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:34:32.866]    <block atomic="false" info="">
[20:34:32.866]      __var SW_DP_ABORT       = 0x0;
[20:34:32.866]        // -> [SW_DP_ABORT <= 0x00000000]
[20:34:32.866]      __var DP_CTRL_STAT      = 0x4;
[20:34:32.866]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:34:32.866]      __var DP_SELECT         = 0x8;
[20:34:32.866]        // -> [DP_SELECT <= 0x00000008]
[20:34:32.866]      __var powered_down      = 0;
[20:34:32.866]        // -> [powered_down <= 0x00000000]
[20:34:32.866]      WriteDP(DP_SELECT, 0x00000000);
[20:34:32.866]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:34:32.866]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:34:32.866]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:34:32.866]        // -> [powered_down <= 0x00000001]
[20:34:32.866]    </block>
[20:34:32.876]    <control if="powered_down" while="" timeout="0" info="">
[20:34:32.876]      // if-block "powered_down"
[20:34:32.876]        // =>  TRUE
[20:34:32.876]      <block atomic="false" info="">
[20:34:32.876]        Message(0, "Debug/System power-up request sent");
[20:34:32.876]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:34:32.887]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:34:32.887]      </block>
[20:34:32.887]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:34:32.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:34:32.887]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:34:32.887]        // while-condition  =>  FALSE
[20:34:32.887]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:34:32.887]      </control>
[20:34:32.887]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:34:32.887]        // if-block "(__protocol & 0xFFFF) == 1"
[20:34:32.887]          // =>  FALSE
[20:34:32.887]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:34:32.887]      </control>
[20:34:32.887]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:34:32.887]        // if-block "(__protocol & 0xFFFF) == 2"
[20:34:32.887]          // =>  TRUE
[20:34:32.887]        <block atomic="false" info="">
[20:34:32.887]          Message(0, "executing SWD power up");
[20:34:32.887]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:34:32.896]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:34:32.896]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:34:32.899]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:34:32.899]        </block>
[20:34:32.899]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:34:32.899]      </control>
[20:34:32.899]      // end if-block "powered_down"
[20:34:32.899]    </control>
[20:34:32.899]    <block atomic="false" info="">
[20:34:32.900]      __var DEBUG_PORT_VAL    = 0;
[20:34:32.900]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:34:32.900]      __var ACCESS_POINT_VAL  = 0;
[20:34:32.900]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:34:32.900]      __ap = 1; 
[20:34:32.900]        // -> [__ap <= 0x00000001]
[20:34:32.900]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:34:32.900]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:34:32.900]      __ap = 4;
[20:34:32.900]        // -> [__ap <= 0x00000004]
[20:34:32.900]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:32.906]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:34:32.906]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:34:32.906]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:32.906]    </block>
[20:34:32.906]    <block atomic="false" info="">
[20:34:32.906]      __var nReset = 0x80;
[20:34:32.906]        // -> [nReset <= 0x00000080]
[20:34:32.906]      __var canReadPins = 0;
[20:34:32.906]        // -> [canReadPins <= 0x00000000]
[20:34:32.906]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:34:32.906]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:34:32.906]        // -> [canReadPins <= 0x00000001]
[20:34:32.906]    </block>
[20:34:32.906]    <control if="" while="1" timeout="200" info="">
[20:34:32.906]      // while "1"  (timeout="200")
[20:34:32.906]      // while-condition  =>  TRUE
[20:34:32.906]      // while "1"  (timeout="200")
[20:34:32.906]      // while-condition  =>  TRUE
[20:34:32.906]      // while "1"  (timeout="200")
[20:34:32.906]      // while-condition  =>  TRUE
[20:34:32.906]      // while "1"  (timeout="200")
[20:34:32.906]      // while-condition  =>  TRUE
[20:34:32.916]      // while "1"  (timeout="200")
[20:34:32.916]      // while  =>  TIMEOUT
[20:34:32.916]      // end while "1"
[20:34:32.916]    </control>
[20:34:32.916]    <control if="canReadPins" while="" timeout="0" info="">
[20:34:32.916]      // if-block "canReadPins"
[20:34:32.916]        // =>  TRUE
[20:34:32.916]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:34:32.916]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:34:32.916]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:34:32.916]        // while-condition  =>  FALSE
[20:34:32.916]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:34:32.916]      </control>
[20:34:32.916]      // end if-block "canReadPins"
[20:34:32.916]    </control>
[20:34:32.916]    <control if="!canReadPins" while="" timeout="0" info="">
[20:34:32.916]      // if-block "!canReadPins"
[20:34:32.916]        // =>  FALSE
[20:34:32.916]      // skip if-block "!canReadPins"
[20:34:32.916]    </control>
[20:34:32.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:34:32.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:32.916]        // =>  TRUE
[20:34:32.916]      <block atomic="false" info="">
[20:34:32.916]        WriteAP(0x00, 0x190008);
[20:34:32.926]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:32.926]        WriteAP(0xF0, 0x01);
[20:34:32.936]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:32.936]      </block>
[20:34:32.936]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:32.936]    </control>
[20:34:32.936]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:34:32.936]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:32.936]        // =>  FALSE
[20:34:32.936]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:32.936]    </control>
[20:34:32.936]    <block atomic="false" info="">
[20:34:32.936]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:32.949]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:34:32.950]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:34:32.950]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:32.951]      __ap = 0; //lets make sure we reset the access point selection
[20:34:32.951]        // -> [__ap <= 0x00000000]
[20:34:32.951]    </block>
[20:34:32.951]  </sequence>
[20:34:32.951]  
[20:34:32.983]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:34:32.983]  
[20:34:32.983]  <debugvars>
[20:34:32.983]    // Pre-defined
[20:34:32.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:32.984]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:32.984]    __dp=0x00000000
[20:34:32.984]    __ap=0x00000000
[20:34:32.984]    __traceout=0x00000000      (Trace Disabled)
[20:34:32.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:32.984]    __FlashAddr=0x00000000
[20:34:32.984]    __FlashLen=0x00000000
[20:34:32.984]    __FlashArg=0x00000000
[20:34:32.984]    __FlashOp=0x00000000
[20:34:32.984]    __Result=0x00000000
[20:34:32.984]  </debugvars>
[20:34:32.984]  
[20:34:32.984]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:34:32.986]    <block atomic="false" info="">
[20:34:32.986]      __var deviceID = 0;
[20:34:32.986]        // -> [deviceID <= 0x00000000]
[20:34:32.986]      __var version = 0;
[20:34:32.986]        // -> [version <= 0x00000000]
[20:34:32.986]      __var partNum = 0;
[20:34:32.986]        // -> [partNum <= 0x00000000]
[20:34:32.986]      __var manuf = 0;
[20:34:32.986]        // -> [manuf <= 0x00000000]
[20:34:32.986]      __var isMSPM0G1X0X_G3X0X = 0;
[20:34:32.986]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:34:32.986]      __var isProduction = 0;
[20:34:32.986]        // -> [isProduction <= 0x00000000]
[20:34:32.986]      __var continueId = 0;
[20:34:32.986]        // -> [continueId <= 0x00000000]
[20:34:32.986]      deviceID =   Read32(0x41C40004);
[20:34:32.990]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:34:32.990]        // -> [deviceID <= 0x2BB8802F]
[20:34:32.990]      version = deviceID >> 28;
[20:34:32.990]        // -> [version <= 0x00000002]
[20:34:32.990]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:34:32.990]        // -> [partNum <= 0x0000BB88]
[20:34:32.990]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:34:32.990]        // -> [manuf <= 0x00000017]
[20:34:32.990]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:34:32.990]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:34:32.990]      isProduction = (version > 0);
[20:34:32.990]        // -> [isProduction <= 0x00000001]
[20:34:32.990]    </block>
[20:34:32.990]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:34:32.990]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:34:32.990]        // =>  FALSE
[20:34:32.990]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:34:32.990]    </control>
[20:34:32.990]    <control if="continueId == 4" while="" timeout="0" info="">
[20:34:32.990]      // if-block "continueId == 4"
[20:34:32.990]        // =>  FALSE
[20:34:32.990]      // skip if-block "continueId == 4"
[20:34:32.990]    </control>
[20:34:32.990]    <control if="!isProduction" while="" timeout="0" info="">
[20:34:32.990]      // if-block "!isProduction"
[20:34:32.990]        // =>  FALSE
[20:34:32.990]      // skip if-block "!isProduction"
[20:34:32.990]    </control>
[20:34:32.990]  </sequence>
[20:34:32.990]  
