/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0014.log
 *  Created     : 00:06:31 (01/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[00:06:31.893]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:06:31.893]  
[00:06:31.893]  <debugvars>
[00:06:31.894]    // Pre-defined
[00:06:31.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:31.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:31.894]    __dp=0x00000000
[00:06:31.894]    __ap=0x00000000
[00:06:31.894]    __traceout=0x00000000      (Trace Disabled)
[00:06:31.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:31.895]    __FlashAddr=0x00000000
[00:06:31.895]    __FlashLen=0x00000000
[00:06:31.895]    __FlashArg=0x00000000
[00:06:31.895]    __FlashOp=0x00000000
[00:06:31.895]    __Result=0x00000000
[00:06:31.895]  </debugvars>
[00:06:31.895]  
[00:06:31.895]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:06:31.895]    <block atomic="false" info="">
[00:06:31.895]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:06:31.895]        // -> [isSWJ <= 0x00000001]
[00:06:31.895]      __var hasDormant = __protocol & 0x00020000;
[00:06:31.895]        // -> [hasDormant <= 0x00000000]
[00:06:31.895]      __var protType   = __protocol & 0x0000FFFF;
[00:06:31.895]        // -> [protType <= 0x00000002]
[00:06:31.895]    </block>
[00:06:31.895]    <control if="protType == 1" while="" timeout="0" info="">
[00:06:31.895]      // if-block "protType == 1"
[00:06:31.895]        // =>  FALSE
[00:06:31.895]      // skip if-block "protType == 1"
[00:06:31.895]    </control>
[00:06:31.895]    <control if="protType == 2" while="" timeout="0" info="">
[00:06:31.895]      // if-block "protType == 2"
[00:06:31.895]        // =>  TRUE
[00:06:31.895]      <control if="isSWJ" while="" timeout="0" info="">
[00:06:31.895]        // if-block "isSWJ"
[00:06:31.895]          // =>  TRUE
[00:06:31.899]        <control if="hasDormant" while="" timeout="0" info="">
[00:06:31.899]          // if-block "hasDormant"
[00:06:31.899]            // =>  FALSE
[00:06:31.899]          // skip if-block "hasDormant"
[00:06:31.899]        </control>
[00:06:31.899]        <control if="!hasDormant" while="" timeout="0" info="">
[00:06:31.899]          // if-block "!hasDormant"
[00:06:31.899]            // =>  TRUE
[00:06:31.899]          <block atomic="false" info="">
[00:06:31.899]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:06:31.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:31.911]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:06:31.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:06:31.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:06:31.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:31.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:06:31.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:06:31.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:06:31.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:31.915]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:06:31.921]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:06:31.921]          </block>
[00:06:31.921]          // end if-block "!hasDormant"
[00:06:31.923]        </control>
[00:06:31.923]        // end if-block "isSWJ"
[00:06:31.923]      </control>
[00:06:31.923]      <control if="!isSWJ" while="" timeout="0" info="">
[00:06:31.923]        // if-block "!isSWJ"
[00:06:31.923]          // =>  FALSE
[00:06:31.923]        // skip if-block "!isSWJ"
[00:06:31.923]      </control>
[00:06:31.923]      <block atomic="false" info="">
[00:06:31.923]        ReadDP(0x0);
[00:06:31.923]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:06:31.923]      </block>
[00:06:31.923]      // end if-block "protType == 2"
[00:06:31.927]    </control>
[00:06:31.927]  </sequence>
[00:06:31.927]  
[00:06:31.931]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:06:31.931]  
[00:06:31.931]  <debugvars>
[00:06:31.931]    // Pre-defined
[00:06:31.931]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:31.931]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:31.931]    __dp=0x00000000
[00:06:31.931]    __ap=0x00000000
[00:06:31.931]    __traceout=0x00000000      (Trace Disabled)
[00:06:31.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:31.931]    __FlashAddr=0x00000000
[00:06:31.931]    __FlashLen=0x00000000
[00:06:31.931]    __FlashArg=0x00000000
[00:06:31.931]    __FlashOp=0x00000000
[00:06:31.931]    __Result=0x00000000
[00:06:31.931]  </debugvars>
[00:06:31.931]  
[00:06:31.931]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:06:31.931]    <block atomic="false" info="">
[00:06:31.931]      __var SW_DP_ABORT       = 0x0;
[00:06:31.931]        // -> [SW_DP_ABORT <= 0x00000000]
[00:06:31.931]      __var DP_CTRL_STAT      = 0x4;
[00:06:31.935]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:06:31.935]      __var DP_SELECT         = 0x8;
[00:06:31.935]        // -> [DP_SELECT <= 0x00000008]
[00:06:31.935]      __var powered_down      = 0;
[00:06:31.935]        // -> [powered_down <= 0x00000000]
[00:06:31.935]      WriteDP(DP_SELECT, 0x00000000);
[00:06:31.939]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:06:31.939]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:06:31.941]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:06:31.941]        // -> [powered_down <= 0x00000001]
[00:06:31.941]    </block>
[00:06:31.941]    <control if="powered_down" while="" timeout="0" info="">
[00:06:31.941]      // if-block "powered_down"
[00:06:31.941]        // =>  TRUE
[00:06:31.941]      <block atomic="false" info="">
[00:06:31.941]        Message(0, "Debug/System power-up request sent");
[00:06:31.943]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:06:31.947]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:06:31.947]      </block>
[00:06:31.947]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:06:31.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:06:31.949]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:06:31.949]        // while-condition  =>  FALSE
[00:06:31.949]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:06:31.949]      </control>
[00:06:31.949]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:06:31.949]        // if-block "(__protocol & 0xFFFF) == 1"
[00:06:31.951]          // =>  FALSE
[00:06:31.951]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:06:31.951]      </control>
[00:06:31.951]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:06:31.951]        // if-block "(__protocol & 0xFFFF) == 2"
[00:06:31.951]          // =>  TRUE
[00:06:31.951]        <block atomic="false" info="">
[00:06:31.951]          Message(0, "executing SWD power up");
[00:06:31.951]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:06:31.957]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:06:31.957]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:06:31.960]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:06:31.960]        </block>
[00:06:31.960]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:06:31.960]      </control>
[00:06:31.960]      // end if-block "powered_down"
[00:06:31.960]    </control>
[00:06:31.960]    <block atomic="false" info="">
[00:06:31.960]      __var DEBUG_PORT_VAL    = 0;
[00:06:31.960]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:06:31.960]      __var ACCESS_POINT_VAL  = 0;
[00:06:31.960]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:06:31.960]      __ap = 1; 
[00:06:31.960]        // -> [__ap <= 0x00000001]
[00:06:31.960]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:06:31.967]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:06:31.967]      __ap = 4;
[00:06:31.967]        // -> [__ap <= 0x00000004]
[00:06:31.969]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:31.975]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:06:31.975]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:06:31.975]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:31.979]    </block>
[00:06:31.979]    <block atomic="false" info="">
[00:06:31.979]      __var nReset = 0x80;
[00:06:31.979]        // -> [nReset <= 0x00000080]
[00:06:31.979]      __var canReadPins = 0;
[00:06:31.979]        // -> [canReadPins <= 0x00000000]
[00:06:31.979]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:06:31.982]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:06:31.982]        // -> [canReadPins <= 0x00000001]
[00:06:31.982]    </block>
[00:06:31.982]    <control if="" while="1" timeout="200" info="">
[00:06:31.982]      // while "1"  (timeout="200")
[00:06:31.982]      // while-condition  =>  TRUE
[00:06:31.982]      // while "1"  (timeout="200")
[00:06:31.982]      // while-condition  =>  TRUE
[00:06:31.982]      // while "1"  (timeout="200")
[00:06:31.982]      // while-condition  =>  TRUE
[00:06:31.982]      // while "1"  (timeout="200")
[00:06:31.983]      // while-condition  =>  TRUE
[00:06:31.983]      // while "1"  (timeout="200")
[00:06:31.983]      // while-condition  =>  TRUE
[00:06:31.983]      // while "1"  (timeout="200")
[00:06:31.983]      // while-condition  =>  TRUE
[00:06:31.984]      // while "1"  (timeout="200")
[00:06:31.984]      // while-condition  =>  TRUE
[00:06:31.984]      // while "1"  (timeout="200")
[00:06:31.984]      // while-condition  =>  TRUE
[00:06:31.984]      // while "1"  (timeout="200")
[00:06:31.984]      // while-condition  =>  TRUE
[00:06:31.984]      // while "1"  (timeout="200")
[00:06:31.984]      // while-condition  =>  TRUE
[00:06:31.986]      // while "1"  (timeout="200")
[00:06:31.986]      // while-condition  =>  TRUE
[00:06:31.986]      // while "1"  (timeout="200")
[00:06:31.986]      // while-condition  =>  TRUE
[00:06:31.986]      // while "1"  (timeout="200")
[00:06:31.986]      // while-condition  =>  TRUE
[00:06:31.986]      // while "1"  (timeout="200")
[00:06:31.986]      // while-condition  =>  TRUE
[00:06:31.986]      // while "1"  (timeout="200")
[00:06:31.986]      // while-condition  =>  TRUE
[00:06:31.987]      // while "1"  (timeout="200")
[00:06:31.987]      // while-condition  =>  TRUE
[00:06:31.987]      // while "1"  (timeout="200")
[00:06:31.987]      // while-condition  =>  TRUE
[00:06:31.987]      // while "1"  (timeout="200")
[00:06:31.987]      // while-condition  =>  TRUE
[00:06:31.987]      // while "1"  (timeout="200")
[00:06:31.987]      // while-condition  =>  TRUE
[00:06:31.987]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.988]      // while "1"  (timeout="200")
[00:06:31.988]      // while-condition  =>  TRUE
[00:06:31.991]      // while "1"  (timeout="200")
[00:06:31.991]      // while  =>  TIMEOUT
[00:06:31.991]      // end while "1"
[00:06:31.991]    </control>
[00:06:31.991]    <control if="canReadPins" while="" timeout="0" info="">
[00:06:31.992]      // if-block "canReadPins"
[00:06:31.992]        // =>  TRUE
[00:06:31.992]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:06:31.992]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:06:31.993]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:06:31.993]        // while-condition  =>  FALSE
[00:06:31.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:06:31.993]      </control>
[00:06:31.993]      // end if-block "canReadPins"
[00:06:31.993]    </control>
[00:06:31.993]    <control if="!canReadPins" while="" timeout="0" info="">
[00:06:31.994]      // if-block "!canReadPins"
[00:06:31.994]        // =>  FALSE
[00:06:31.994]      // skip if-block "!canReadPins"
[00:06:31.994]    </control>
[00:06:31.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:06:31.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:31.994]        // =>  TRUE
[00:06:31.994]      <block atomic="false" info="">
[00:06:31.994]        WriteAP(0x00, 0x190008);
[00:06:31.998]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:31.998]        WriteAP(0xF0, 0x01);
[00:06:32.004]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:32.004]      </block>
[00:06:32.004]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:32.004]    </control>
[00:06:32.004]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:06:32.004]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:32.004]        // =>  FALSE
[00:06:32.004]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:32.004]    </control>
[00:06:32.004]    <block atomic="false" info="">
[00:06:32.004]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:32.011]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:06:32.011]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:06:32.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:32.012]      __ap = 0; //lets make sure we reset the access point selection
[00:06:32.012]        // -> [__ap <= 0x00000000]
[00:06:32.012]    </block>
[00:06:32.012]  </sequence>
[00:06:32.012]  
[00:06:32.053]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:06:32.053]  
[00:06:32.053]  <debugvars>
[00:06:32.053]    // Pre-defined
[00:06:32.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:32.053]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:32.053]    __dp=0x00000000
[00:06:32.053]    __ap=0x00000000
[00:06:32.053]    __traceout=0x00000000      (Trace Disabled)
[00:06:32.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:32.053]    __FlashAddr=0x00000000
[00:06:32.057]    __FlashLen=0x00000000
[00:06:32.057]    __FlashArg=0x00000000
[00:06:32.057]    __FlashOp=0x00000000
[00:06:32.057]    __Result=0x00000000
[00:06:32.057]  </debugvars>
[00:06:32.057]  
[00:06:32.057]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:06:32.057]    <block atomic="false" info="">
[00:06:32.057]      __var deviceID = 0;
[00:06:32.057]        // -> [deviceID <= 0x00000000]
[00:06:32.057]      __var version = 0;
[00:06:32.057]        // -> [version <= 0x00000000]
[00:06:32.057]      __var partNum = 0;
[00:06:32.057]        // -> [partNum <= 0x00000000]
[00:06:32.057]      __var manuf = 0;
[00:06:32.057]        // -> [manuf <= 0x00000000]
[00:06:32.057]      __var isMSPM0G1X0X_G3X0X = 0;
[00:06:32.057]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:06:32.057]      __var isProduction = 0;
[00:06:32.057]        // -> [isProduction <= 0x00000000]
[00:06:32.057]      __var continueId = 0;
[00:06:32.057]        // -> [continueId <= 0x00000000]
[00:06:32.057]      deviceID =   Read32(0x41C40004);
[00:06:32.065]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:06:32.065]        // -> [deviceID <= 0x2BB8802F]
[00:06:32.065]      version = deviceID >> 28;
[00:06:32.065]        // -> [version <= 0x00000002]
[00:06:32.065]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:06:32.065]        // -> [partNum <= 0x0000BB88]
[00:06:32.065]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:06:32.065]        // -> [manuf <= 0x00000017]
[00:06:32.069]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:06:32.069]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:06:32.069]      isProduction = (version > 0);
[00:06:32.069]        // -> [isProduction <= 0x00000001]
[00:06:32.069]    </block>
[00:06:32.069]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:06:32.069]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:06:32.069]        // =>  FALSE
[00:06:32.069]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:06:32.069]    </control>
[00:06:32.069]    <control if="continueId == 4" while="" timeout="0" info="">
[00:06:32.069]      // if-block "continueId == 4"
[00:06:32.069]        // =>  FALSE
[00:06:32.069]      // skip if-block "continueId == 4"
[00:06:32.069]    </control>
[00:06:32.069]    <control if="!isProduction" while="" timeout="0" info="">
[00:06:32.069]      // if-block "!isProduction"
[00:06:32.071]        // =>  FALSE
[00:06:32.071]      // skip if-block "!isProduction"
[00:06:32.071]    </control>
[00:06:32.071]  </sequence>
[00:06:32.071]  
[00:07:59.772]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:07:59.772]  
[00:07:59.784]  <debugvars>
[00:07:59.784]    // Pre-defined
[00:07:59.784]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:59.784]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:59.784]    __dp=0x00000000
[00:07:59.784]    __ap=0x00000000
[00:07:59.784]    __traceout=0x00000000      (Trace Disabled)
[00:07:59.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:59.784]    __FlashAddr=0x00000000
[00:07:59.784]    __FlashLen=0x00000000
[00:07:59.784]    __FlashArg=0x00000000
[00:07:59.784]    __FlashOp=0x00000000
[00:07:59.784]    __Result=0x00000000
[00:07:59.784]  </debugvars>
[00:07:59.784]  
[00:07:59.784]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:07:59.784]    <block atomic="false" info="">
[00:07:59.784]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:07:59.784]        // -> [isSWJ <= 0x00000001]
[00:07:59.787]      __var hasDormant = __protocol & 0x00020000;
[00:07:59.787]        // -> [hasDormant <= 0x00000000]
[00:07:59.787]      __var protType   = __protocol & 0x0000FFFF;
[00:07:59.787]        // -> [protType <= 0x00000002]
[00:07:59.787]    </block>
[00:07:59.787]    <control if="protType == 1" while="" timeout="0" info="">
[00:07:59.787]      // if-block "protType == 1"
[00:07:59.787]        // =>  FALSE
[00:07:59.787]      // skip if-block "protType == 1"
[00:07:59.788]    </control>
[00:07:59.788]    <control if="protType == 2" while="" timeout="0" info="">
[00:07:59.788]      // if-block "protType == 2"
[00:07:59.788]        // =>  TRUE
[00:07:59.788]      <control if="isSWJ" while="" timeout="0" info="">
[00:07:59.788]        // if-block "isSWJ"
[00:07:59.788]          // =>  TRUE
[00:07:59.789]        <control if="hasDormant" while="" timeout="0" info="">
[00:07:59.789]          // if-block "hasDormant"
[00:07:59.789]            // =>  FALSE
[00:07:59.789]          // skip if-block "hasDormant"
[00:07:59.789]        </control>
[00:07:59.789]        <control if="!hasDormant" while="" timeout="0" info="">
[00:07:59.789]          // if-block "!hasDormant"
[00:07:59.789]            // =>  TRUE
[00:07:59.789]          <block atomic="false" info="">
[00:07:59.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:07:59.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:59.792]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:07:59.796]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:07:59.796]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:07:59.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:59.797]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:07:59.800]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:07:59.800]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:07:59.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:59.800]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:07:59.802]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:07:59.802]          </block>
[00:07:59.802]          // end if-block "!hasDormant"
[00:07:59.802]        </control>
[00:07:59.802]        // end if-block "isSWJ"
[00:07:59.802]      </control>
[00:07:59.804]      <control if="!isSWJ" while="" timeout="0" info="">
[00:07:59.804]        // if-block "!isSWJ"
[00:07:59.804]          // =>  FALSE
[00:07:59.804]        // skip if-block "!isSWJ"
[00:07:59.804]      </control>
[00:07:59.804]      <block atomic="false" info="">
[00:07:59.804]        ReadDP(0x0);
[00:07:59.804]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:07:59.804]      </block>
[00:07:59.804]      // end if-block "protType == 2"
[00:07:59.804]    </control>
[00:07:59.804]  </sequence>
[00:07:59.804]  
[00:07:59.818]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:07:59.818]  
[00:07:59.818]  <debugvars>
[00:07:59.818]    // Pre-defined
[00:07:59.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:59.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:59.818]    __dp=0x00000000
[00:07:59.818]    __ap=0x00000000
[00:07:59.818]    __traceout=0x00000000      (Trace Disabled)
[00:07:59.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:59.818]    __FlashAddr=0x00000000
[00:07:59.818]    __FlashLen=0x00000000
[00:07:59.818]    __FlashArg=0x00000000
[00:07:59.818]    __FlashOp=0x00000000
[00:07:59.818]    __Result=0x00000000
[00:07:59.818]  </debugvars>
[00:07:59.818]  
[00:07:59.818]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:07:59.818]    <block atomic="false" info="">
[00:07:59.818]      __var SW_DP_ABORT       = 0x0;
[00:07:59.821]        // -> [SW_DP_ABORT <= 0x00000000]
[00:07:59.821]      __var DP_CTRL_STAT      = 0x4;
[00:07:59.821]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:07:59.821]      __var DP_SELECT         = 0x8;
[00:07:59.821]        // -> [DP_SELECT <= 0x00000008]
[00:07:59.821]      __var powered_down      = 0;
[00:07:59.821]        // -> [powered_down <= 0x00000000]
[00:07:59.821]      WriteDP(DP_SELECT, 0x00000000);
[00:07:59.832]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:07:59.832]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:07:59.837]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:07:59.837]        // -> [powered_down <= 0x00000001]
[00:07:59.837]    </block>
[00:07:59.837]    <control if="powered_down" while="" timeout="0" info="">
[00:07:59.837]      // if-block "powered_down"
[00:07:59.837]        // =>  TRUE
[00:07:59.837]      <block atomic="false" info="">
[00:07:59.837]        Message(0, "Debug/System power-up request sent");
[00:07:59.841]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:07:59.849]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:07:59.849]      </block>
[00:07:59.849]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:07:59.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:07:59.852]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:07:59.852]        // while-condition  =>  FALSE
[00:07:59.852]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:07:59.852]      </control>
[00:07:59.852]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:07:59.852]        // if-block "(__protocol & 0xFFFF) == 1"
[00:07:59.852]          // =>  FALSE
[00:07:59.852]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:07:59.852]      </control>
[00:07:59.852]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:07:59.852]        // if-block "(__protocol & 0xFFFF) == 2"
[00:07:59.852]          // =>  TRUE
[00:07:59.852]        <block atomic="false" info="">
[00:07:59.852]          Message(0, "executing SWD power up");
[00:07:59.852]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:07:59.862]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:07:59.862]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:07:59.864]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:07:59.864]        </block>
[00:07:59.868]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:07:59.868]      </control>
[00:07:59.868]      // end if-block "powered_down"
[00:07:59.868]    </control>
[00:07:59.868]    <block atomic="false" info="">
[00:07:59.868]      __var DEBUG_PORT_VAL    = 0;
[00:07:59.868]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:07:59.868]      __var ACCESS_POINT_VAL  = 0;
[00:07:59.868]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:07:59.868]      __ap = 1; 
[00:07:59.868]        // -> [__ap <= 0x00000001]
[00:07:59.868]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:07:59.877]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:07:59.877]      __ap = 4;
[00:07:59.877]        // -> [__ap <= 0x00000004]
[00:07:59.877]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:07:59.885]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:07:59.885]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:07:59.885]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:07:59.891]    </block>
[00:07:59.891]    <block atomic="false" info="">
[00:07:59.892]      __var nReset = 0x80;
[00:07:59.892]        // -> [nReset <= 0x00000080]
[00:07:59.892]      __var canReadPins = 0;
[00:07:59.892]        // -> [canReadPins <= 0x00000000]
[00:07:59.892]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:07:59.894]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:07:59.894]        // -> [canReadPins <= 0x00000001]
[00:07:59.894]    </block>
[00:07:59.894]    <control if="" while="1" timeout="200" info="">
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.894]      // while "1"  (timeout="200")
[00:07:59.894]      // while-condition  =>  TRUE
[00:07:59.897]      // while "1"  (timeout="200")
[00:07:59.897]      // while  =>  TIMEOUT
[00:07:59.897]      // end while "1"
[00:07:59.897]    </control>
[00:07:59.897]    <control if="canReadPins" while="" timeout="0" info="">
[00:07:59.897]      // if-block "canReadPins"
[00:07:59.897]        // =>  TRUE
[00:07:59.897]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:07:59.898]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:07:59.899]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:07:59.899]        // while-condition  =>  FALSE
[00:07:59.899]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:07:59.899]      </control>
[00:07:59.899]      // end if-block "canReadPins"
[00:07:59.899]    </control>
[00:07:59.899]    <control if="!canReadPins" while="" timeout="0" info="">
[00:07:59.899]      // if-block "!canReadPins"
[00:07:59.901]        // =>  FALSE
[00:07:59.901]      // skip if-block "!canReadPins"
[00:07:59.901]    </control>
[00:07:59.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:07:59.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:07:59.901]        // =>  TRUE
[00:07:59.901]      <block atomic="false" info="">
[00:07:59.901]        WriteAP(0x00, 0x190008);
[00:07:59.902]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:07:59.902]        WriteAP(0xF0, 0x01);
[00:07:59.905]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:07:59.905]      </block>
[00:07:59.905]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:07:59.908]    </control>
[00:07:59.908]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:07:59.908]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:07:59.908]        // =>  FALSE
[00:07:59.908]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:07:59.908]    </control>
[00:07:59.908]    <block atomic="false" info="">
[00:07:59.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:07:59.912]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:07:59.912]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:07:59.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:07:59.915]      __ap = 0; //lets make sure we reset the access point selection
[00:07:59.915]        // -> [__ap <= 0x00000000]
[00:07:59.915]    </block>
[00:07:59.915]  </sequence>
[00:07:59.915]  
[00:07:59.944]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:07:59.944]  
[00:07:59.944]  <debugvars>
[00:07:59.944]    // Pre-defined
[00:07:59.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:59.946]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:59.946]    __dp=0x00000000
[00:07:59.946]    __ap=0x00000000
[00:07:59.946]    __traceout=0x00000000      (Trace Disabled)
[00:07:59.946]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:59.946]    __FlashAddr=0x00000000
[00:07:59.946]    __FlashLen=0x00000000
[00:07:59.946]    __FlashArg=0x00000000
[00:07:59.946]    __FlashOp=0x00000000
[00:07:59.947]    __Result=0x00000000
[00:07:59.947]  </debugvars>
[00:07:59.947]  
[00:07:59.947]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:07:59.947]    <block atomic="false" info="">
[00:07:59.947]      __var deviceID = 0;
[00:07:59.947]        // -> [deviceID <= 0x00000000]
[00:07:59.947]      __var version = 0;
[00:07:59.947]        // -> [version <= 0x00000000]
[00:07:59.947]      __var partNum = 0;
[00:07:59.947]        // -> [partNum <= 0x00000000]
[00:07:59.947]      __var manuf = 0;
[00:07:59.947]        // -> [manuf <= 0x00000000]
[00:07:59.947]      __var isMSPM0G1X0X_G3X0X = 0;
[00:07:59.948]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:07:59.948]      __var isProduction = 0;
[00:07:59.948]        // -> [isProduction <= 0x00000000]
[00:07:59.948]      __var continueId = 0;
[00:07:59.948]        // -> [continueId <= 0x00000000]
[00:07:59.948]      deviceID =   Read32(0x41C40004);
[00:07:59.953]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:07:59.953]        // -> [deviceID <= 0x2BB8802F]
[00:07:59.953]      version = deviceID >> 28;
[00:07:59.953]        // -> [version <= 0x00000002]
[00:07:59.953]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:07:59.955]        // -> [partNum <= 0x0000BB88]
[00:07:59.955]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:07:59.955]        // -> [manuf <= 0x00000017]
[00:07:59.955]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:07:59.955]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:07:59.955]      isProduction = (version > 0);
[00:07:59.955]        // -> [isProduction <= 0x00000001]
[00:07:59.955]    </block>
[00:07:59.955]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:07:59.955]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:07:59.955]        // =>  FALSE
[00:07:59.955]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:07:59.955]    </control>
[00:07:59.955]    <control if="continueId == 4" while="" timeout="0" info="">
[00:07:59.955]      // if-block "continueId == 4"
[00:07:59.955]        // =>  FALSE
[00:07:59.955]      // skip if-block "continueId == 4"
[00:07:59.955]    </control>
[00:07:59.957]    <control if="!isProduction" while="" timeout="0" info="">
[00:07:59.957]      // if-block "!isProduction"
[00:07:59.957]        // =>  FALSE
[00:07:59.957]      // skip if-block "!isProduction"
[00:07:59.957]    </control>
[00:07:59.957]  </sequence>
[00:07:59.957]  
[00:09:07.734]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:09:07.734]  
[00:09:07.743]  <debugvars>
[00:09:07.743]    // Pre-defined
[00:09:07.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:07.743]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:09:07.743]    __dp=0x00000000
[00:09:07.743]    __ap=0x00000000
[00:09:07.743]    __traceout=0x00000000      (Trace Disabled)
[00:09:07.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:07.744]    __FlashAddr=0x00000000
[00:09:07.744]    __FlashLen=0x00000000
[00:09:07.744]    __FlashArg=0x00000000
[00:09:07.744]    __FlashOp=0x00000000
[00:09:07.744]    __Result=0x00000000
[00:09:07.744]  </debugvars>
[00:09:07.744]  
[00:09:07.744]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:09:07.744]    <block atomic="false" info="">
[00:09:07.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:09:07.745]        // -> [isSWJ <= 0x00000001]
[00:09:07.745]      __var hasDormant = __protocol & 0x00020000;
[00:09:07.745]        // -> [hasDormant <= 0x00000000]
[00:09:07.745]      __var protType   = __protocol & 0x0000FFFF;
[00:09:07.745]        // -> [protType <= 0x00000002]
[00:09:07.745]    </block>
[00:09:07.745]    <control if="protType == 1" while="" timeout="0" info="">
[00:09:07.745]      // if-block "protType == 1"
[00:09:07.745]        // =>  FALSE
[00:09:07.745]      // skip if-block "protType == 1"
[00:09:07.745]    </control>
[00:09:07.745]    <control if="protType == 2" while="" timeout="0" info="">
[00:09:07.745]      // if-block "protType == 2"
[00:09:07.745]        // =>  TRUE
[00:09:07.745]      <control if="isSWJ" while="" timeout="0" info="">
[00:09:07.745]        // if-block "isSWJ"
[00:09:07.745]          // =>  TRUE
[00:09:07.745]        <control if="hasDormant" while="" timeout="0" info="">
[00:09:07.745]          // if-block "hasDormant"
[00:09:07.745]            // =>  FALSE
[00:09:07.745]          // skip if-block "hasDormant"
[00:09:07.745]        </control>
[00:09:07.745]        <control if="!hasDormant" while="" timeout="0" info="">
[00:09:07.745]          // if-block "!hasDormant"
[00:09:07.745]            // =>  TRUE
[00:09:07.745]          <block atomic="false" info="">
[00:09:07.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:09:07.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:07.749]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:09:07.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:09:07.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:09:07.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:07.749]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:09:07.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:09:07.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:09:07.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:07.755]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:09:07.758]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:09:07.758]          </block>
[00:09:07.758]          // end if-block "!hasDormant"
[00:09:07.758]        </control>
[00:09:07.758]        // end if-block "isSWJ"
[00:09:07.758]      </control>
[00:09:07.758]      <control if="!isSWJ" while="" timeout="0" info="">
[00:09:07.758]        // if-block "!isSWJ"
[00:09:07.758]          // =>  FALSE
[00:09:07.758]        // skip if-block "!isSWJ"
[00:09:07.758]      </control>
[00:09:07.758]      <block atomic="false" info="">
[00:09:07.758]        ReadDP(0x0);
[00:09:07.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:09:07.758]      </block>
[00:09:07.758]      // end if-block "protType == 2"
[00:09:07.758]    </control>
[00:09:07.758]  </sequence>
[00:09:07.758]  
[00:09:07.766]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:09:07.766]  
[00:09:07.766]  <debugvars>
[00:09:07.766]    // Pre-defined
[00:09:07.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:07.766]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:09:07.766]    __dp=0x00000000
[00:09:07.766]    __ap=0x00000000
[00:09:07.766]    __traceout=0x00000000      (Trace Disabled)
[00:09:07.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:07.769]    __FlashAddr=0x00000000
[00:09:07.769]    __FlashLen=0x00000000
[00:09:07.769]    __FlashArg=0x00000000
[00:09:07.769]    __FlashOp=0x00000000
[00:09:07.769]    __Result=0x00000000
[00:09:07.769]  </debugvars>
[00:09:07.769]  
[00:09:07.769]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:09:07.769]    <block atomic="false" info="">
[00:09:07.771]      __var SW_DP_ABORT       = 0x0;
[00:09:07.771]        // -> [SW_DP_ABORT <= 0x00000000]
[00:09:07.771]      __var DP_CTRL_STAT      = 0x4;
[00:09:07.771]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:09:07.771]      __var DP_SELECT         = 0x8;
[00:09:07.771]        // -> [DP_SELECT <= 0x00000008]
[00:09:07.771]      __var powered_down      = 0;
[00:09:07.772]        // -> [powered_down <= 0x00000000]
[00:09:07.772]      WriteDP(DP_SELECT, 0x00000000);
[00:09:07.773]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:09:07.774]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:09:07.775]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:09:07.775]        // -> [powered_down <= 0x00000001]
[00:09:07.775]    </block>
[00:09:07.775]    <control if="powered_down" while="" timeout="0" info="">
[00:09:07.775]      // if-block "powered_down"
[00:09:07.775]        // =>  TRUE
[00:09:07.775]      <block atomic="false" info="">
[00:09:07.775]        Message(0, "Debug/System power-up request sent");
[00:09:07.777]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:09:07.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:09:07.784]      </block>
[00:09:07.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:09:07.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:09:07.785]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:09:07.785]        // while-condition  =>  FALSE
[00:09:07.785]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:09:07.785]      </control>
[00:09:07.785]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:09:07.785]        // if-block "(__protocol & 0xFFFF) == 1"
[00:09:07.785]          // =>  FALSE
[00:09:07.785]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:09:07.785]      </control>
[00:09:07.785]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:09:07.785]        // if-block "(__protocol & 0xFFFF) == 2"
[00:09:07.785]          // =>  TRUE
[00:09:07.785]        <block atomic="false" info="">
[00:09:07.785]          Message(0, "executing SWD power up");
[00:09:07.785]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:09:07.789]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:09:07.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:09:07.789]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:09:07.789]        </block>
[00:09:07.789]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:09:07.789]      </control>
[00:09:07.789]      // end if-block "powered_down"
[00:09:07.789]    </control>
[00:09:07.789]    <block atomic="false" info="">
[00:09:07.789]      __var DEBUG_PORT_VAL    = 0;
[00:09:07.789]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:09:07.789]      __var ACCESS_POINT_VAL  = 0;
[00:09:07.794]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:09:07.794]      __ap = 1; 
[00:09:07.794]        // -> [__ap <= 0x00000001]
[00:09:07.794]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:09:07.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:09:07.798]      __ap = 4;
[00:09:07.798]        // -> [__ap <= 0x00000004]
[00:09:07.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:07.798]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:09:07.802]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:09:07.802]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:07.804]    </block>
[00:09:07.804]    <block atomic="false" info="">
[00:09:07.804]      __var nReset = 0x80;
[00:09:07.804]        // -> [nReset <= 0x00000080]
[00:09:07.804]      __var canReadPins = 0;
[00:09:07.804]        // -> [canReadPins <= 0x00000000]
[00:09:07.804]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:09:07.806]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:09:07.806]        // -> [canReadPins <= 0x00000001]
[00:09:07.806]    </block>
[00:09:07.806]    <control if="" while="1" timeout="200" info="">
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.806]      // while-condition  =>  TRUE
[00:09:07.806]      // while "1"  (timeout="200")
[00:09:07.810]      // while-condition  =>  TRUE
[00:09:07.810]      // while "1"  (timeout="200")
[00:09:07.810]      // while-condition  =>  TRUE
[00:09:07.811]      // while "1"  (timeout="200")
[00:09:07.811]      // while-condition  =>  TRUE
[00:09:07.811]      // while "1"  (timeout="200")
[00:09:07.811]      // while-condition  =>  TRUE
[00:09:07.811]      // while "1"  (timeout="200")
[00:09:07.811]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.812]      // while "1"  (timeout="200")
[00:09:07.812]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.814]      // while "1"  (timeout="200")
[00:09:07.814]      // while-condition  =>  TRUE
[00:09:07.816]      // while "1"  (timeout="200")
[00:09:07.816]      // while  =>  TIMEOUT
[00:09:07.816]      // end while "1"
[00:09:07.816]    </control>
[00:09:07.816]    <control if="canReadPins" while="" timeout="0" info="">
[00:09:07.816]      // if-block "canReadPins"
[00:09:07.816]        // =>  TRUE
[00:09:07.816]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:09:07.816]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:09:07.818]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:09:07.818]        // while-condition  =>  FALSE
[00:09:07.818]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:09:07.818]      </control>
[00:09:07.818]      // end if-block "canReadPins"
[00:09:07.818]    </control>
[00:09:07.818]    <control if="!canReadPins" while="" timeout="0" info="">
[00:09:07.820]      // if-block "!canReadPins"
[00:09:07.820]        // =>  FALSE
[00:09:07.820]      // skip if-block "!canReadPins"
[00:09:07.820]    </control>
[00:09:07.820]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:09:07.820]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:07.820]        // =>  TRUE
[00:09:07.820]      <block atomic="false" info="">
[00:09:07.820]        WriteAP(0x00, 0x190008);
[00:09:07.827]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:07.827]        WriteAP(0xF0, 0x01);
[00:09:07.836]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:07.836]      </block>
[00:09:07.836]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:07.836]    </control>
[00:09:07.836]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:09:07.836]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:07.836]        // =>  FALSE
[00:09:07.836]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:07.836]    </control>
[00:09:07.836]    <block atomic="false" info="">
[00:09:07.838]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:07.841]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:09:07.841]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:09:07.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:07.842]      __ap = 0; //lets make sure we reset the access point selection
[00:09:07.842]        // -> [__ap <= 0x00000000]
[00:09:07.842]    </block>
[00:09:07.842]  </sequence>
[00:09:07.842]  
[00:09:07.868]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:09:07.868]  
[00:09:07.868]  <debugvars>
[00:09:07.868]    // Pre-defined
[00:09:07.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:07.872]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:09:07.872]    __dp=0x00000000
[00:09:07.872]    __ap=0x00000000
[00:09:07.872]    __traceout=0x00000000      (Trace Disabled)
[00:09:07.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:07.872]    __FlashAddr=0x00000000
[00:09:07.872]    __FlashLen=0x00000000
[00:09:07.872]    __FlashArg=0x00000000
[00:09:07.872]    __FlashOp=0x00000000
[00:09:07.872]    __Result=0x00000000
[00:09:07.872]  </debugvars>
[00:09:07.872]  
[00:09:07.872]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:09:07.872]    <block atomic="false" info="">
[00:09:07.872]      __var deviceID = 0;
[00:09:07.872]        // -> [deviceID <= 0x00000000]
[00:09:07.874]      __var version = 0;
[00:09:07.874]        // -> [version <= 0x00000000]
[00:09:07.874]      __var partNum = 0;
[00:09:07.874]        // -> [partNum <= 0x00000000]
[00:09:07.874]      __var manuf = 0;
[00:09:07.874]        // -> [manuf <= 0x00000000]
[00:09:07.874]      __var isMSPM0G1X0X_G3X0X = 0;
[00:09:07.874]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:09:07.874]      __var isProduction = 0;
[00:09:07.874]        // -> [isProduction <= 0x00000000]
[00:09:07.874]      __var continueId = 0;
[00:09:07.874]        // -> [continueId <= 0x00000000]
[00:09:07.874]      deviceID =   Read32(0x41C40004);
[00:09:07.880]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:09:07.880]        // -> [deviceID <= 0x2BB8802F]
[00:09:07.880]      version = deviceID >> 28;
[00:09:07.880]        // -> [version <= 0x00000002]
[00:09:07.880]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:09:07.880]        // -> [partNum <= 0x0000BB88]
[00:09:07.880]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:09:07.880]        // -> [manuf <= 0x00000017]
[00:09:07.880]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:09:07.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:09:07.880]      isProduction = (version > 0);
[00:09:07.882]        // -> [isProduction <= 0x00000001]
[00:09:07.882]    </block>
[00:09:07.882]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:09:07.882]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:09:07.882]        // =>  FALSE
[00:09:07.882]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:09:07.882]    </control>
[00:09:07.882]    <control if="continueId == 4" while="" timeout="0" info="">
[00:09:07.882]      // if-block "continueId == 4"
[00:09:07.882]        // =>  FALSE
[00:09:07.882]      // skip if-block "continueId == 4"
[00:09:07.882]    </control>
[00:09:07.882]    <control if="!isProduction" while="" timeout="0" info="">
[00:09:07.882]      // if-block "!isProduction"
[00:09:07.882]        // =>  FALSE
[00:09:07.882]      // skip if-block "!isProduction"
[00:09:07.882]    </control>
[00:09:07.882]  </sequence>
[00:09:07.882]  
[00:14:08.301]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:14:08.301]  
[00:14:08.301]  <debugvars>
[00:14:08.301]    // Pre-defined
[00:14:08.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:08.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:08.301]    __dp=0x00000000
[00:14:08.301]    __ap=0x00000000
[00:14:08.301]    __traceout=0x00000000      (Trace Disabled)
[00:14:08.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:08.302]    __FlashAddr=0x00000000
[00:14:08.302]    __FlashLen=0x00000000
[00:14:08.302]    __FlashArg=0x00000000
[00:14:08.302]    __FlashOp=0x00000000
[00:14:08.302]    __Result=0x00000000
[00:14:08.302]  </debugvars>
[00:14:08.302]  
[00:14:08.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:14:08.302]    <block atomic="false" info="">
[00:14:08.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:14:08.302]        // -> [isSWJ <= 0x00000001]
[00:14:08.302]      __var hasDormant = __protocol & 0x00020000;
[00:14:08.302]        // -> [hasDormant <= 0x00000000]
[00:14:08.302]      __var protType   = __protocol & 0x0000FFFF;
[00:14:08.302]        // -> [protType <= 0x00000002]
[00:14:08.302]    </block>
[00:14:08.302]    <control if="protType == 1" while="" timeout="0" info="">
[00:14:08.302]      // if-block "protType == 1"
[00:14:08.302]        // =>  FALSE
[00:14:08.302]      // skip if-block "protType == 1"
[00:14:08.302]    </control>
[00:14:08.302]    <control if="protType == 2" while="" timeout="0" info="">
[00:14:08.302]      // if-block "protType == 2"
[00:14:08.302]        // =>  TRUE
[00:14:08.302]      <control if="isSWJ" while="" timeout="0" info="">
[00:14:08.302]        // if-block "isSWJ"
[00:14:08.302]          // =>  TRUE
[00:14:08.302]        <control if="hasDormant" while="" timeout="0" info="">
[00:14:08.302]          // if-block "hasDormant"
[00:14:08.302]            // =>  FALSE
[00:14:08.302]          // skip if-block "hasDormant"
[00:14:08.302]        </control>
[00:14:08.302]        <control if="!hasDormant" while="" timeout="0" info="">
[00:14:08.302]          // if-block "!hasDormant"
[00:14:08.302]            // =>  TRUE
[00:14:08.302]          <block atomic="false" info="">
[00:14:08.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:14:08.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:08.310]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:14:08.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:14:08.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:14:08.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:08.314]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:14:08.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:14:08.318]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:14:08.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:08.320]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:14:08.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:14:08.322]          </block>
[00:14:08.322]          // end if-block "!hasDormant"
[00:14:08.322]        </control>
[00:14:08.322]        // end if-block "isSWJ"
[00:14:08.322]      </control>
[00:14:08.322]      <control if="!isSWJ" while="" timeout="0" info="">
[00:14:08.322]        // if-block "!isSWJ"
[00:14:08.322]          // =>  FALSE
[00:14:08.322]        // skip if-block "!isSWJ"
[00:14:08.322]      </control>
[00:14:08.322]      <block atomic="false" info="">
[00:14:08.322]        ReadDP(0x0);
[00:14:08.330]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:14:08.330]      </block>
[00:14:08.330]      // end if-block "protType == 2"
[00:14:08.330]    </control>
[00:14:08.334]  </sequence>
[00:14:08.334]  
[00:14:08.338]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:14:08.338]  
[00:14:08.338]  <debugvars>
[00:14:08.338]    // Pre-defined
[00:14:08.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:08.338]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:08.340]    __dp=0x00000000
[00:14:08.340]    __ap=0x00000000
[00:14:08.340]    __traceout=0x00000000      (Trace Disabled)
[00:14:08.340]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:08.340]    __FlashAddr=0x00000000
[00:14:08.340]    __FlashLen=0x00000000
[00:14:08.340]    __FlashArg=0x00000000
[00:14:08.340]    __FlashOp=0x00000000
[00:14:08.340]    __Result=0x00000000
[00:14:08.340]  </debugvars>
[00:14:08.340]  
[00:14:08.340]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:14:08.340]    <block atomic="false" info="">
[00:14:08.340]      __var SW_DP_ABORT       = 0x0;
[00:14:08.340]        // -> [SW_DP_ABORT <= 0x00000000]
[00:14:08.340]      __var DP_CTRL_STAT      = 0x4;
[00:14:08.340]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:14:08.340]      __var DP_SELECT         = 0x8;
[00:14:08.340]        // -> [DP_SELECT <= 0x00000008]
[00:14:08.340]      __var powered_down      = 0;
[00:14:08.340]        // -> [powered_down <= 0x00000000]
[00:14:08.340]      WriteDP(DP_SELECT, 0x00000000);
[00:14:08.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:14:08.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:14:08.347]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:14:08.347]        // -> [powered_down <= 0x00000001]
[00:14:08.347]    </block>
[00:14:08.347]    <control if="powered_down" while="" timeout="0" info="">
[00:14:08.347]      // if-block "powered_down"
[00:14:08.347]        // =>  TRUE
[00:14:08.347]      <block atomic="false" info="">
[00:14:08.347]        Message(0, "Debug/System power-up request sent");
[00:14:08.350]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:14:08.350]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:14:08.350]      </block>
[00:14:08.350]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:14:08.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:14:08.358]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:14:08.358]        // while-condition  =>  FALSE
[00:14:08.358]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:14:08.358]      </control>
[00:14:08.358]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:14:08.358]        // if-block "(__protocol & 0xFFFF) == 1"
[00:14:08.358]          // =>  FALSE
[00:14:08.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:14:08.358]      </control>
[00:14:08.358]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:14:08.358]        // if-block "(__protocol & 0xFFFF) == 2"
[00:14:08.358]          // =>  TRUE
[00:14:08.358]        <block atomic="false" info="">
[00:14:08.358]          Message(0, "executing SWD power up");
[00:14:08.360]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:14:08.362]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:14:08.362]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:14:08.362]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:14:08.362]        </block>
[00:14:08.366]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:14:08.366]      </control>
[00:14:08.366]      // end if-block "powered_down"
[00:14:08.366]    </control>
[00:14:08.366]    <block atomic="false" info="">
[00:14:08.366]      __var DEBUG_PORT_VAL    = 0;
[00:14:08.366]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:14:08.366]      __var ACCESS_POINT_VAL  = 0;
[00:14:08.366]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:14:08.366]      __ap = 1; 
[00:14:08.366]        // -> [__ap <= 0x00000001]
[00:14:08.366]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:14:08.375]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:14:08.375]      __ap = 4;
[00:14:08.375]        // -> [__ap <= 0x00000004]
[00:14:08.375]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:08.380]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:14:08.380]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:14:08.380]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:08.380]    </block>
[00:14:08.380]    <block atomic="false" info="">
[00:14:08.380]      __var nReset = 0x80;
[00:14:08.380]        // -> [nReset <= 0x00000080]
[00:14:08.380]      __var canReadPins = 0;
[00:14:08.380]        // -> [canReadPins <= 0x00000000]
[00:14:08.380]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:14:08.383]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:14:08.383]        // -> [canReadPins <= 0x00000001]
[00:14:08.383]    </block>
[00:14:08.383]    <control if="" while="1" timeout="200" info="">
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.383]      // while-condition  =>  TRUE
[00:14:08.383]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.387]      // while "1"  (timeout="200")
[00:14:08.387]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.390]      // while "1"  (timeout="200")
[00:14:08.390]      // while-condition  =>  TRUE
[00:14:08.394]      // while "1"  (timeout="200")
[00:14:08.394]      // while  =>  TIMEOUT
[00:14:08.394]      // end while "1"
[00:14:08.394]    </control>
[00:14:08.394]    <control if="canReadPins" while="" timeout="0" info="">
[00:14:08.394]      // if-block "canReadPins"
[00:14:08.394]        // =>  TRUE
[00:14:08.394]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:14:08.394]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:14:08.394]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:14:08.394]        // while-condition  =>  FALSE
[00:14:08.394]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:14:08.394]      </control>
[00:14:08.394]      // end if-block "canReadPins"
[00:14:08.394]    </control>
[00:14:08.394]    <control if="!canReadPins" while="" timeout="0" info="">
[00:14:08.394]      // if-block "!canReadPins"
[00:14:08.398]        // =>  FALSE
[00:14:08.398]      // skip if-block "!canReadPins"
[00:14:08.398]    </control>
[00:14:08.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:14:08.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:08.398]        // =>  TRUE
[00:14:08.398]      <block atomic="false" info="">
[00:14:08.398]        WriteAP(0x00, 0x190008);
[00:14:08.402]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:08.402]        WriteAP(0xF0, 0x01);
[00:14:08.410]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:08.410]      </block>
[00:14:08.410]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:08.410]    </control>
[00:14:08.410]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:14:08.410]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:08.410]        // =>  FALSE
[00:14:08.410]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:08.410]    </control>
[00:14:08.410]    <block atomic="false" info="">
[00:14:08.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:08.420]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:14:08.420]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:14:08.420]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:08.422]      __ap = 0; //lets make sure we reset the access point selection
[00:14:08.422]        // -> [__ap <= 0x00000000]
[00:14:08.422]    </block>
[00:14:08.422]  </sequence>
[00:14:08.422]  
[00:14:08.462]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:14:08.462]  
[00:14:08.462]  <debugvars>
[00:14:08.462]    // Pre-defined
[00:14:08.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:08.466]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:08.466]    __dp=0x00000000
[00:14:08.466]    __ap=0x00000000
[00:14:08.466]    __traceout=0x00000000      (Trace Disabled)
[00:14:08.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:08.466]    __FlashAddr=0x00000000
[00:14:08.466]    __FlashLen=0x00000000
[00:14:08.466]    __FlashArg=0x00000000
[00:14:08.466]    __FlashOp=0x00000000
[00:14:08.466]    __Result=0x00000000
[00:14:08.466]  </debugvars>
[00:14:08.466]  
[00:14:08.466]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:14:08.466]    <block atomic="false" info="">
[00:14:08.466]      __var deviceID = 0;
[00:14:08.466]        // -> [deviceID <= 0x00000000]
[00:14:08.466]      __var version = 0;
[00:14:08.466]        // -> [version <= 0x00000000]
[00:14:08.466]      __var partNum = 0;
[00:14:08.466]        // -> [partNum <= 0x00000000]
[00:14:08.466]      __var manuf = 0;
[00:14:08.466]        // -> [manuf <= 0x00000000]
[00:14:08.466]      __var isMSPM0G1X0X_G3X0X = 0;
[00:14:08.466]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:14:08.466]      __var isProduction = 0;
[00:14:08.466]        // -> [isProduction <= 0x00000000]
[00:14:08.466]      __var continueId = 0;
[00:14:08.466]        // -> [continueId <= 0x00000000]
[00:14:08.466]      deviceID =   Read32(0x41C40004);
[00:14:08.482]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:14:08.482]        // -> [deviceID <= 0x2BB8802F]
[00:14:08.482]      version = deviceID >> 28;
[00:14:08.482]        // -> [version <= 0x00000002]
[00:14:08.482]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:14:08.482]        // -> [partNum <= 0x0000BB88]
[00:14:08.482]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:14:08.482]        // -> [manuf <= 0x00000017]
[00:14:08.482]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:14:08.482]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:14:08.482]      isProduction = (version > 0);
[00:14:08.482]        // -> [isProduction <= 0x00000001]
[00:14:08.482]    </block>
[00:14:08.482]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:14:08.482]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:14:08.482]        // =>  FALSE
[00:14:08.482]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:14:08.482]    </control>
[00:14:08.482]    <control if="continueId == 4" while="" timeout="0" info="">
[00:14:08.482]      // if-block "continueId == 4"
[00:14:08.482]        // =>  FALSE
[00:14:08.482]      // skip if-block "continueId == 4"
[00:14:08.482]    </control>
[00:14:08.482]    <control if="!isProduction" while="" timeout="0" info="">
[00:14:08.482]      // if-block "!isProduction"
[00:14:08.482]        // =>  FALSE
[00:14:08.482]      // skip if-block "!isProduction"
[00:14:08.482]    </control>
[00:14:08.486]  </sequence>
[00:14:08.486]  
[00:14:56.151]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:14:56.151]  
[00:14:56.163]  <debugvars>
[00:14:56.163]    // Pre-defined
[00:14:56.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.163]    __dp=0x00000000
[00:14:56.163]    __ap=0x00000000
[00:14:56.163]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.163]    __FlashAddr=0x00000000
[00:14:56.163]    __FlashLen=0x00000000
[00:14:56.163]    __FlashArg=0x00000000
[00:14:56.163]    __FlashOp=0x00000000
[00:14:56.163]    __Result=0x00000000
[00:14:56.163]  </debugvars>
[00:14:56.163]  
[00:14:56.163]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:14:56.163]    <block atomic="false" info="">
[00:14:56.163]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:14:56.163]        // -> [isSWJ <= 0x00000001]
[00:14:56.163]      __var hasDormant = __protocol & 0x00020000;
[00:14:56.163]        // -> [hasDormant <= 0x00000000]
[00:14:56.163]      __var protType   = __protocol & 0x0000FFFF;
[00:14:56.163]        // -> [protType <= 0x00000002]
[00:14:56.163]    </block>
[00:14:56.163]    <control if="protType == 1" while="" timeout="0" info="">
[00:14:56.163]      // if-block "protType == 1"
[00:14:56.163]        // =>  FALSE
[00:14:56.163]      // skip if-block "protType == 1"
[00:14:56.163]    </control>
[00:14:56.163]    <control if="protType == 2" while="" timeout="0" info="">
[00:14:56.163]      // if-block "protType == 2"
[00:14:56.167]        // =>  TRUE
[00:14:56.167]      <control if="isSWJ" while="" timeout="0" info="">
[00:14:56.167]        // if-block "isSWJ"
[00:14:56.167]          // =>  TRUE
[00:14:56.167]        <control if="hasDormant" while="" timeout="0" info="">
[00:14:56.167]          // if-block "hasDormant"
[00:14:56.167]            // =>  FALSE
[00:14:56.167]          // skip if-block "hasDormant"
[00:14:56.167]        </control>
[00:14:56.167]        <control if="!hasDormant" while="" timeout="0" info="">
[00:14:56.167]          // if-block "!hasDormant"
[00:14:56.167]            // =>  TRUE
[00:14:56.167]          <block atomic="false" info="">
[00:14:56.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:14:56.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.167]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:14:56.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:14:56.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:14:56.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.173]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:14:56.175]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:14:56.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:14:56.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.175]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:14:56.179]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:14:56.179]          </block>
[00:14:56.179]          // end if-block "!hasDormant"
[00:14:56.179]        </control>
[00:14:56.179]        // end if-block "isSWJ"
[00:14:56.179]      </control>
[00:14:56.179]      <control if="!isSWJ" while="" timeout="0" info="">
[00:14:56.179]        // if-block "!isSWJ"
[00:14:56.179]          // =>  FALSE
[00:14:56.179]        // skip if-block "!isSWJ"
[00:14:56.179]      </control>
[00:14:56.181]      <block atomic="false" info="">
[00:14:56.181]        ReadDP(0x0);
[00:14:56.181]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:14:56.181]      </block>
[00:14:56.181]      // end if-block "protType == 2"
[00:14:56.181]    </control>
[00:14:56.181]  </sequence>
[00:14:56.181]  
[00:14:56.185]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:14:56.185]  
[00:14:56.185]  <debugvars>
[00:14:56.185]    // Pre-defined
[00:14:56.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.185]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.185]    __dp=0x00000000
[00:14:56.185]    __ap=0x00000000
[00:14:56.185]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.185]    __FlashAddr=0x00000000
[00:14:56.185]    __FlashLen=0x00000000
[00:14:56.188]    __FlashArg=0x00000000
[00:14:56.188]    __FlashOp=0x00000000
[00:14:56.188]    __Result=0x00000000
[00:14:56.188]  </debugvars>
[00:14:56.188]  
[00:14:56.188]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:14:56.188]    <block atomic="false" info="">
[00:14:56.188]      __var SW_DP_ABORT       = 0x0;
[00:14:56.188]        // -> [SW_DP_ABORT <= 0x00000000]
[00:14:56.188]      __var DP_CTRL_STAT      = 0x4;
[00:14:56.188]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:14:56.188]      __var DP_SELECT         = 0x8;
[00:14:56.188]        // -> [DP_SELECT <= 0x00000008]
[00:14:56.188]      __var powered_down      = 0;
[00:14:56.188]        // -> [powered_down <= 0x00000000]
[00:14:56.188]      WriteDP(DP_SELECT, 0x00000000);
[00:14:56.188]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:14:56.191]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:14:56.191]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:14:56.191]        // -> [powered_down <= 0x00000001]
[00:14:56.191]    </block>
[00:14:56.191]    <control if="powered_down" while="" timeout="0" info="">
[00:14:56.191]      // if-block "powered_down"
[00:14:56.191]        // =>  TRUE
[00:14:56.191]      <block atomic="false" info="">
[00:14:56.191]        Message(0, "Debug/System power-up request sent");
[00:14:56.195]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:14:56.195]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:14:56.195]      </block>
[00:14:56.195]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:14:56.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:14:56.203]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:14:56.203]        // while-condition  =>  FALSE
[00:14:56.203]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:14:56.203]      </control>
[00:14:56.203]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:14:56.203]        // if-block "(__protocol & 0xFFFF) == 1"
[00:14:56.203]          // =>  FALSE
[00:14:56.203]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:14:56.203]      </control>
[00:14:56.203]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:14:56.203]        // if-block "(__protocol & 0xFFFF) == 2"
[00:14:56.203]          // =>  TRUE
[00:14:56.203]        <block atomic="false" info="">
[00:14:56.207]          Message(0, "executing SWD power up");
[00:14:56.207]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:14:56.211]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:14:56.211]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:14:56.211]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:14:56.211]        </block>
[00:14:56.211]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:14:56.211]      </control>
[00:14:56.211]      // end if-block "powered_down"
[00:14:56.211]    </control>
[00:14:56.211]    <block atomic="false" info="">
[00:14:56.211]      __var DEBUG_PORT_VAL    = 0;
[00:14:56.211]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:14:56.211]      __var ACCESS_POINT_VAL  = 0;
[00:14:56.211]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:14:56.211]      __ap = 1; 
[00:14:56.211]        // -> [__ap <= 0x00000001]
[00:14:56.211]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:14:56.223]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:14:56.223]      __ap = 4;
[00:14:56.223]        // -> [__ap <= 0x00000004]
[00:14:56.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:56.227]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.227]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:14:56.227]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:56.229]    </block>
[00:14:56.229]    <block atomic="false" info="">
[00:14:56.229]      __var nReset = 0x80;
[00:14:56.229]        // -> [nReset <= 0x00000080]
[00:14:56.229]      __var canReadPins = 0;
[00:14:56.229]        // -> [canReadPins <= 0x00000000]
[00:14:56.229]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:14:56.231]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:14:56.231]        // -> [canReadPins <= 0x00000001]
[00:14:56.231]    </block>
[00:14:56.231]    <control if="" while="1" timeout="200" info="">
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.231]      // while-condition  =>  TRUE
[00:14:56.231]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.235]      // while-condition  =>  TRUE
[00:14:56.235]      // while "1"  (timeout="200")
[00:14:56.239]      // while-condition  =>  TRUE
[00:14:56.239]      // while "1"  (timeout="200")
[00:14:56.239]      // while  =>  TIMEOUT
[00:14:56.239]      // end while "1"
[00:14:56.239]    </control>
[00:14:56.239]    <control if="canReadPins" while="" timeout="0" info="">
[00:14:56.239]      // if-block "canReadPins"
[00:14:56.239]        // =>  TRUE
[00:14:56.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:14:56.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:14:56.243]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:14:56.243]        // while-condition  =>  FALSE
[00:14:56.243]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:14:56.243]      </control>
[00:14:56.243]      // end if-block "canReadPins"
[00:14:56.243]    </control>
[00:14:56.243]    <control if="!canReadPins" while="" timeout="0" info="">
[00:14:56.243]      // if-block "!canReadPins"
[00:14:56.243]        // =>  FALSE
[00:14:56.243]      // skip if-block "!canReadPins"
[00:14:56.243]    </control>
[00:14:56.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:14:56.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:56.243]        // =>  TRUE
[00:14:56.243]      <block atomic="false" info="">
[00:14:56.243]        WriteAP(0x00, 0x190008);
[00:14:56.247]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.247]        WriteAP(0xF0, 0x01);
[00:14:56.252]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.252]      </block>
[00:14:56.252]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:56.252]    </control>
[00:14:56.252]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:14:56.252]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:56.252]        // =>  FALSE
[00:14:56.252]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:56.252]    </control>
[00:14:56.252]    <block atomic="false" info="">
[00:14:56.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:56.259]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.259]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:14:56.259]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:56.261]      __ap = 0; //lets make sure we reset the access point selection
[00:14:56.261]        // -> [__ap <= 0x00000000]
[00:14:56.261]    </block>
[00:14:56.261]  </sequence>
[00:14:56.261]  
[00:14:56.291]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:14:56.291]  
[00:14:56.291]  <debugvars>
[00:14:56.291]    // Pre-defined
[00:14:56.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.291]    __dp=0x00000000
[00:14:56.291]    __ap=0x00000000
[00:14:56.291]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.291]    __FlashAddr=0x00000000
[00:14:56.291]    __FlashLen=0x00000000
[00:14:56.291]    __FlashArg=0x00000000
[00:14:56.291]    __FlashOp=0x00000000
[00:14:56.291]    __Result=0x00000000
[00:14:56.291]  </debugvars>
[00:14:56.291]  
[00:14:56.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:14:56.291]    <block atomic="false" info="">
[00:14:56.291]      __var deviceID = 0;
[00:14:56.291]        // -> [deviceID <= 0x00000000]
[00:14:56.291]      __var version = 0;
[00:14:56.291]        // -> [version <= 0x00000000]
[00:14:56.291]      __var partNum = 0;
[00:14:56.291]        // -> [partNum <= 0x00000000]
[00:14:56.291]      __var manuf = 0;
[00:14:56.291]        // -> [manuf <= 0x00000000]
[00:14:56.291]      __var isMSPM0G1X0X_G3X0X = 0;
[00:14:56.291]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:14:56.295]      __var isProduction = 0;
[00:14:56.295]        // -> [isProduction <= 0x00000000]
[00:14:56.295]      __var continueId = 0;
[00:14:56.295]        // -> [continueId <= 0x00000000]
[00:14:56.295]      deviceID =   Read32(0x41C40004);
[00:14:56.301]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:14:56.301]        // -> [deviceID <= 0x2BB8802F]
[00:14:56.301]      version = deviceID >> 28;
[00:14:56.301]        // -> [version <= 0x00000002]
[00:14:56.301]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:14:56.301]        // -> [partNum <= 0x0000BB88]
[00:14:56.303]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:14:56.303]        // -> [manuf <= 0x00000017]
[00:14:56.303]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:14:56.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:14:56.303]      isProduction = (version > 0);
[00:14:56.303]        // -> [isProduction <= 0x00000001]
[00:14:56.303]    </block>
[00:14:56.303]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:14:56.303]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:14:56.303]        // =>  FALSE
[00:14:56.303]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:14:56.303]    </control>
[00:14:56.303]    <control if="continueId == 4" while="" timeout="0" info="">
[00:14:56.303]      // if-block "continueId == 4"
[00:14:56.303]        // =>  FALSE
[00:14:56.303]      // skip if-block "continueId == 4"
[00:14:56.303]    </control>
[00:14:56.303]    <control if="!isProduction" while="" timeout="0" info="">
[00:14:56.303]      // if-block "!isProduction"
[00:14:56.303]        // =>  FALSE
[00:14:56.303]      // skip if-block "!isProduction"
[00:14:56.303]    </control>
[00:14:56.303]  </sequence>
[00:14:56.303]  
[00:16:29.959]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:16:29.959]  
[00:16:29.959]  <debugvars>
[00:16:29.959]    // Pre-defined
[00:16:29.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:29.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:16:29.959]    __dp=0x00000000
[00:16:29.959]    __ap=0x00000000
[00:16:29.959]    __traceout=0x00000000      (Trace Disabled)
[00:16:29.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:29.959]    __FlashAddr=0x00000000
[00:16:29.959]    __FlashLen=0x00000000
[00:16:29.959]    __FlashArg=0x00000000
[00:16:29.959]    __FlashOp=0x00000000
[00:16:29.959]    __Result=0x00000000
[00:16:29.959]  </debugvars>
[00:16:29.959]  
[00:16:29.959]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:29.959]    <block atomic="false" info="">
[00:16:29.959]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:29.959]        // -> [isSWJ <= 0x00000001]
[00:16:29.959]      __var hasDormant = __protocol & 0x00020000;
[00:16:29.959]        // -> [hasDormant <= 0x00000000]
[00:16:29.959]      __var protType   = __protocol & 0x0000FFFF;
[00:16:29.959]        // -> [protType <= 0x00000002]
[00:16:29.959]    </block>
[00:16:29.959]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:29.959]      // if-block "protType == 1"
[00:16:29.959]        // =>  FALSE
[00:16:29.959]      // skip if-block "protType == 1"
[00:16:29.959]    </control>
[00:16:29.959]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:29.959]      // if-block "protType == 2"
[00:16:29.959]        // =>  TRUE
[00:16:29.959]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:29.959]        // if-block "isSWJ"
[00:16:29.959]          // =>  TRUE
[00:16:29.959]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:29.959]          // if-block "hasDormant"
[00:16:29.959]            // =>  FALSE
[00:16:29.963]          // skip if-block "hasDormant"
[00:16:29.963]        </control>
[00:16:29.963]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:29.963]          // if-block "!hasDormant"
[00:16:29.963]            // =>  TRUE
[00:16:29.963]          <block atomic="false" info="">
[00:16:29.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:29.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:29.963]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:16:29.963]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:16:29.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:16:29.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:29.967]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:16:29.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:16:29.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:16:29.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:29.973]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:16:29.975]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:16:29.975]          </block>
[00:16:29.975]          // end if-block "!hasDormant"
[00:16:29.975]        </control>
[00:16:29.975]        // end if-block "isSWJ"
[00:16:29.975]      </control>
[00:16:29.975]      <control if="!isSWJ" while="" timeout="0" info="">
[00:16:29.975]        // if-block "!isSWJ"
[00:16:29.975]          // =>  FALSE
[00:16:29.979]        // skip if-block "!isSWJ"
[00:16:29.979]      </control>
[00:16:29.979]      <block atomic="false" info="">
[00:16:29.979]        ReadDP(0x0);
[00:16:29.979]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:16:29.979]      </block>
[00:16:29.979]      // end if-block "protType == 2"
[00:16:29.979]    </control>
[00:16:29.979]  </sequence>
[00:16:29.979]  
[00:16:30.003]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:16:30.003]  
[00:16:30.003]  <debugvars>
[00:16:30.003]    // Pre-defined
[00:16:30.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:30.003]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:16:30.003]    __dp=0x00000000
[00:16:30.003]    __ap=0x00000000
[00:16:30.003]    __traceout=0x00000000      (Trace Disabled)
[00:16:30.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:30.003]    __FlashAddr=0x00000000
[00:16:30.003]    __FlashLen=0x00000000
[00:16:30.003]    __FlashArg=0x00000000
[00:16:30.003]    __FlashOp=0x00000000
[00:16:30.003]    __Result=0x00000000
[00:16:30.003]  </debugvars>
[00:16:30.003]  
[00:16:30.003]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:16:30.003]    <block atomic="false" info="">
[00:16:30.003]      __var SW_DP_ABORT       = 0x0;
[00:16:30.003]        // -> [SW_DP_ABORT <= 0x00000000]
[00:16:30.003]      __var DP_CTRL_STAT      = 0x4;
[00:16:30.003]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:16:30.003]      __var DP_SELECT         = 0x8;
[00:16:30.003]        // -> [DP_SELECT <= 0x00000008]
[00:16:30.003]      __var powered_down      = 0;
[00:16:30.003]        // -> [powered_down <= 0x00000000]
[00:16:30.003]      WriteDP(DP_SELECT, 0x00000000);
[00:16:30.007]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:16:30.007]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:16:30.011]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:16:30.011]        // -> [powered_down <= 0x00000001]
[00:16:30.011]    </block>
[00:16:30.011]    <control if="powered_down" while="" timeout="0" info="">
[00:16:30.011]      // if-block "powered_down"
[00:16:30.011]        // =>  TRUE
[00:16:30.011]      <block atomic="false" info="">
[00:16:30.011]        Message(0, "Debug/System power-up request sent");
[00:16:30.013]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:16:30.015]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:16:30.015]      </block>
[00:16:30.015]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:16:30.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:16:30.019]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:16:30.019]        // while-condition  =>  FALSE
[00:16:30.019]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:16:30.021]      </control>
[00:16:30.021]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:16:30.021]        // if-block "(__protocol & 0xFFFF) == 1"
[00:16:30.021]          // =>  FALSE
[00:16:30.021]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:16:30.021]      </control>
[00:16:30.021]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:16:30.021]        // if-block "(__protocol & 0xFFFF) == 2"
[00:16:30.021]          // =>  TRUE
[00:16:30.021]        <block atomic="false" info="">
[00:16:30.021]          Message(0, "executing SWD power up");
[00:16:30.023]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:16:30.023]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:16:30.023]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:16:30.028]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:16:30.028]        </block>
[00:16:30.028]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:16:30.028]      </control>
[00:16:30.028]      // end if-block "powered_down"
[00:16:30.028]    </control>
[00:16:30.028]    <block atomic="false" info="">
[00:16:30.031]      __var DEBUG_PORT_VAL    = 0;
[00:16:30.031]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:16:30.031]      __var ACCESS_POINT_VAL  = 0;
[00:16:30.031]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:16:30.031]      __ap = 1; 
[00:16:30.031]        // -> [__ap <= 0x00000001]
[00:16:30.031]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:16:30.033]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:16:30.033]      __ap = 4;
[00:16:30.033]        // -> [__ap <= 0x00000004]
[00:16:30.035]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:30.039]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:16:30.039]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:16:30.040]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:30.040]    </block>
[00:16:30.040]    <block atomic="false" info="">
[00:16:30.040]      __var nReset = 0x80;
[00:16:30.040]        // -> [nReset <= 0x00000080]
[00:16:30.040]      __var canReadPins = 0;
[00:16:30.040]        // -> [canReadPins <= 0x00000000]
[00:16:30.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:16:30.043]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:16:30.043]        // -> [canReadPins <= 0x00000001]
[00:16:30.044]    </block>
[00:16:30.044]    <control if="" while="1" timeout="200" info="">
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.044]      // while-condition  =>  TRUE
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.044]      // while-condition  =>  TRUE
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.044]      // while-condition  =>  TRUE
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.044]      // while-condition  =>  TRUE
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.044]      // while-condition  =>  TRUE
[00:16:30.044]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.045]      // while "1"  (timeout="200")
[00:16:30.045]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.047]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.047]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.047]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.047]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.047]      // while-condition  =>  TRUE
[00:16:30.047]      // while "1"  (timeout="200")
[00:16:30.048]      // while-condition  =>  TRUE
[00:16:30.048]      // while "1"  (timeout="200")
[00:16:30.048]      // while-condition  =>  TRUE
[00:16:30.048]      // while "1"  (timeout="200")
[00:16:30.048]      // while-condition  =>  TRUE
[00:16:30.048]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.050]      // while "1"  (timeout="200")
[00:16:30.050]      // while-condition  =>  TRUE
[00:16:30.051]      // while "1"  (timeout="200")
[00:16:30.051]      // while  =>  TIMEOUT
[00:16:30.051]      // end while "1"
[00:16:30.051]    </control>
[00:16:30.051]    <control if="canReadPins" while="" timeout="0" info="">
[00:16:30.051]      // if-block "canReadPins"
[00:16:30.051]        // =>  TRUE
[00:16:30.051]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:16:30.051]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:16:30.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:16:30.055]        // while-condition  =>  FALSE
[00:16:30.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:16:30.055]      </control>
[00:16:30.055]      // end if-block "canReadPins"
[00:16:30.055]    </control>
[00:16:30.059]    <control if="!canReadPins" while="" timeout="0" info="">
[00:16:30.059]      // if-block "!canReadPins"
[00:16:30.059]        // =>  FALSE
[00:16:30.059]      // skip if-block "!canReadPins"
[00:16:30.059]    </control>
[00:16:30.059]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:16:30.059]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:30.059]        // =>  TRUE
[00:16:30.059]      <block atomic="false" info="">
[00:16:30.059]        WriteAP(0x00, 0x190008);
[00:16:30.063]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:30.063]        WriteAP(0xF0, 0x01);
[00:16:30.071]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:30.073]      </block>
[00:16:30.073]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:30.073]    </control>
[00:16:30.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:16:30.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:30.073]        // =>  FALSE
[00:16:30.073]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:30.073]    </control>
[00:16:30.073]    <block atomic="false" info="">
[00:16:30.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:30.079]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:16:30.079]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:16:30.079]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:30.079]      __ap = 0; //lets make sure we reset the access point selection
[00:16:30.079]        // -> [__ap <= 0x00000000]
[00:16:30.079]    </block>
[00:16:30.079]  </sequence>
[00:16:30.079]  
[00:16:30.127]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:16:30.127]  
[00:16:30.127]  <debugvars>
[00:16:30.127]    // Pre-defined
[00:16:30.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:30.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:16:30.127]    __dp=0x00000000
[00:16:30.127]    __ap=0x00000000
[00:16:30.127]    __traceout=0x00000000      (Trace Disabled)
[00:16:30.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:30.127]    __FlashAddr=0x00000000
[00:16:30.127]    __FlashLen=0x00000000
[00:16:30.127]    __FlashArg=0x00000000
[00:16:30.127]    __FlashOp=0x00000000
[00:16:30.127]    __Result=0x00000000
[00:16:30.127]  </debugvars>
[00:16:30.131]  
[00:16:30.131]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:16:30.131]    <block atomic="false" info="">
[00:16:30.131]      __var deviceID = 0;
[00:16:30.131]        // -> [deviceID <= 0x00000000]
[00:16:30.132]      __var version = 0;
[00:16:30.132]        // -> [version <= 0x00000000]
[00:16:30.132]      __var partNum = 0;
[00:16:30.132]        // -> [partNum <= 0x00000000]
[00:16:30.132]      __var manuf = 0;
[00:16:30.132]        // -> [manuf <= 0x00000000]
[00:16:30.132]      __var isMSPM0G1X0X_G3X0X = 0;
[00:16:30.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:16:30.132]      __var isProduction = 0;
[00:16:30.132]        // -> [isProduction <= 0x00000000]
[00:16:30.132]      __var continueId = 0;
[00:16:30.133]        // -> [continueId <= 0x00000000]
[00:16:30.133]      deviceID =   Read32(0x41C40004);
[00:16:30.138]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:16:30.138]        // -> [deviceID <= 0x2BB8802F]
[00:16:30.138]      version = deviceID >> 28;
[00:16:30.138]        // -> [version <= 0x00000002]
[00:16:30.138]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:16:30.138]        // -> [partNum <= 0x0000BB88]
[00:16:30.138]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:16:30.138]        // -> [manuf <= 0x00000017]
[00:16:30.139]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:16:30.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:16:30.139]      isProduction = (version > 0);
[00:16:30.139]        // -> [isProduction <= 0x00000001]
[00:16:30.139]    </block>
[00:16:30.139]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:16:30.139]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:16:30.139]        // =>  FALSE
[00:16:30.139]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:16:30.139]    </control>
[00:16:30.139]    <control if="continueId == 4" while="" timeout="0" info="">
[00:16:30.139]      // if-block "continueId == 4"
[00:16:30.139]        // =>  FALSE
[00:16:30.139]      // skip if-block "continueId == 4"
[00:16:30.139]    </control>
[00:16:30.139]    <control if="!isProduction" while="" timeout="0" info="">
[00:16:30.139]      // if-block "!isProduction"
[00:16:30.139]        // =>  FALSE
[00:16:30.139]      // skip if-block "!isProduction"
[00:16:30.139]    </control>
[00:16:30.139]  </sequence>
[00:16:30.141]  
[00:18:06.537]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:18:06.537]  
[00:18:06.547]  <debugvars>
[00:18:06.547]    // Pre-defined
[00:18:06.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:06.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:06.547]    __dp=0x00000000
[00:18:06.547]    __ap=0x00000000
[00:18:06.547]    __traceout=0x00000000      (Trace Disabled)
[00:18:06.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:06.547]    __FlashAddr=0x00000000
[00:18:06.547]    __FlashLen=0x00000000
[00:18:06.547]    __FlashArg=0x00000000
[00:18:06.547]    __FlashOp=0x00000000
[00:18:06.547]    __Result=0x00000000
[00:18:06.547]  </debugvars>
[00:18:06.547]  
[00:18:06.549]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:18:06.549]    <block atomic="false" info="">
[00:18:06.549]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:18:06.549]        // -> [isSWJ <= 0x00000001]
[00:18:06.549]      __var hasDormant = __protocol & 0x00020000;
[00:18:06.549]        // -> [hasDormant <= 0x00000000]
[00:18:06.549]      __var protType   = __protocol & 0x0000FFFF;
[00:18:06.549]        // -> [protType <= 0x00000002]
[00:18:06.549]    </block>
[00:18:06.549]    <control if="protType == 1" while="" timeout="0" info="">
[00:18:06.549]      // if-block "protType == 1"
[00:18:06.549]        // =>  FALSE
[00:18:06.549]      // skip if-block "protType == 1"
[00:18:06.549]    </control>
[00:18:06.549]    <control if="protType == 2" while="" timeout="0" info="">
[00:18:06.549]      // if-block "protType == 2"
[00:18:06.549]        // =>  TRUE
[00:18:06.549]      <control if="isSWJ" while="" timeout="0" info="">
[00:18:06.549]        // if-block "isSWJ"
[00:18:06.549]          // =>  TRUE
[00:18:06.549]        <control if="hasDormant" while="" timeout="0" info="">
[00:18:06.549]          // if-block "hasDormant"
[00:18:06.549]            // =>  FALSE
[00:18:06.549]          // skip if-block "hasDormant"
[00:18:06.549]        </control>
[00:18:06.549]        <control if="!hasDormant" while="" timeout="0" info="">
[00:18:06.549]          // if-block "!hasDormant"
[00:18:06.549]            // =>  TRUE
[00:18:06.549]          <block atomic="false" info="">
[00:18:06.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:18:06.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:06.553]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:18:06.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:18:06.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:18:06.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:06.556]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:18:06.560]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:18:06.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:18:06.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:06.561]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:18:06.561]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:18:06.561]          </block>
[00:18:06.561]          // end if-block "!hasDormant"
[00:18:06.561]        </control>
[00:18:06.561]        // end if-block "isSWJ"
[00:18:06.561]      </control>
[00:18:06.561]      <control if="!isSWJ" while="" timeout="0" info="">
[00:18:06.565]        // if-block "!isSWJ"
[00:18:06.565]          // =>  FALSE
[00:18:06.565]        // skip if-block "!isSWJ"
[00:18:06.565]      </control>
[00:18:06.565]      <block atomic="false" info="">
[00:18:06.565]        ReadDP(0x0);
[00:18:06.565]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:18:06.565]      </block>
[00:18:06.565]      // end if-block "protType == 2"
[00:18:06.565]    </control>
[00:18:06.565]  </sequence>
[00:18:06.565]  
[00:18:06.569]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:18:06.569]  
[00:18:06.569]  <debugvars>
[00:18:06.569]    // Pre-defined
[00:18:06.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:06.569]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:06.569]    __dp=0x00000000
[00:18:06.569]    __ap=0x00000000
[00:18:06.569]    __traceout=0x00000000      (Trace Disabled)
[00:18:06.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:06.569]    __FlashAddr=0x00000000
[00:18:06.569]    __FlashLen=0x00000000
[00:18:06.569]    __FlashArg=0x00000000
[00:18:06.573]    __FlashOp=0x00000000
[00:18:06.573]    __Result=0x00000000
[00:18:06.573]  </debugvars>
[00:18:06.573]  
[00:18:06.573]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:18:06.573]    <block atomic="false" info="">
[00:18:06.573]      __var SW_DP_ABORT       = 0x0;
[00:18:06.573]        // -> [SW_DP_ABORT <= 0x00000000]
[00:18:06.573]      __var DP_CTRL_STAT      = 0x4;
[00:18:06.573]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:18:06.573]      __var DP_SELECT         = 0x8;
[00:18:06.573]        // -> [DP_SELECT <= 0x00000008]
[00:18:06.573]      __var powered_down      = 0;
[00:18:06.573]        // -> [powered_down <= 0x00000000]
[00:18:06.573]      WriteDP(DP_SELECT, 0x00000000);
[00:18:06.580]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:18:06.580]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:18:06.581]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:18:06.581]        // -> [powered_down <= 0x00000001]
[00:18:06.581]    </block>
[00:18:06.581]    <control if="powered_down" while="" timeout="0" info="">
[00:18:06.581]      // if-block "powered_down"
[00:18:06.581]        // =>  TRUE
[00:18:06.581]      <block atomic="false" info="">
[00:18:06.581]        Message(0, "Debug/System power-up request sent");
[00:18:06.583]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:18:06.586]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:18:06.586]      </block>
[00:18:06.586]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:18:06.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:18:06.590]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:18:06.591]        // while-condition  =>  FALSE
[00:18:06.591]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:18:06.591]      </control>
[00:18:06.591]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:18:06.591]        // if-block "(__protocol & 0xFFFF) == 1"
[00:18:06.591]          // =>  FALSE
[00:18:06.591]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:18:06.591]      </control>
[00:18:06.591]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:18:06.592]        // if-block "(__protocol & 0xFFFF) == 2"
[00:18:06.592]          // =>  TRUE
[00:18:06.592]        <block atomic="false" info="">
[00:18:06.592]          Message(0, "executing SWD power up");
[00:18:06.594]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:18:06.595]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:18:06.595]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:18:06.596]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:18:06.596]        </block>
[00:18:06.596]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:18:06.596]      </control>
[00:18:06.596]      // end if-block "powered_down"
[00:18:06.596]    </control>
[00:18:06.596]    <block atomic="false" info="">
[00:18:06.598]      __var DEBUG_PORT_VAL    = 0;
[00:18:06.598]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:18:06.598]      __var ACCESS_POINT_VAL  = 0;
[00:18:06.598]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:18:06.598]      __ap = 1; 
[00:18:06.599]        // -> [__ap <= 0x00000001]
[00:18:06.599]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:18:06.605]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:18:06.605]      __ap = 4;
[00:18:06.605]        // -> [__ap <= 0x00000004]
[00:18:06.605]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:18:06.620]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:18:06.620]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:18:06.620]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:18:06.621]    </block>
[00:18:06.621]    <block atomic="false" info="">
[00:18:06.621]      __var nReset = 0x80;
[00:18:06.621]        // -> [nReset <= 0x00000080]
[00:18:06.621]      __var canReadPins = 0;
[00:18:06.621]        // -> [canReadPins <= 0x00000000]
[00:18:06.621]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:18:06.625]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:18:06.625]        // -> [canReadPins <= 0x00000001]
[00:18:06.625]    </block>
[00:18:06.625]    <control if="" while="1" timeout="200" info="">
[00:18:06.625]      // while "1"  (timeout="200")
[00:18:06.625]      // while-condition  =>  TRUE
[00:18:06.625]      // while "1"  (timeout="200")
[00:18:06.625]      // while-condition  =>  TRUE
[00:18:06.625]      // while "1"  (timeout="200")
[00:18:06.625]      // while-condition  =>  TRUE
[00:18:06.625]      // while "1"  (timeout="200")
[00:18:06.625]      // while-condition  =>  TRUE
[00:18:06.625]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.627]      // while "1"  (timeout="200")
[00:18:06.627]      // while-condition  =>  TRUE
[00:18:06.629]      // while "1"  (timeout="200")
[00:18:06.629]      // while  =>  TIMEOUT
[00:18:06.629]      // end while "1"
[00:18:06.629]    </control>
[00:18:06.629]    <control if="canReadPins" while="" timeout="0" info="">
[00:18:06.629]      // if-block "canReadPins"
[00:18:06.629]        // =>  TRUE
[00:18:06.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:18:06.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:18:06.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:18:06.631]        // while-condition  =>  FALSE
[00:18:06.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:18:06.631]      </control>
[00:18:06.631]      // end if-block "canReadPins"
[00:18:06.631]    </control>
[00:18:06.631]    <control if="!canReadPins" while="" timeout="0" info="">
[00:18:06.631]      // if-block "!canReadPins"
[00:18:06.633]        // =>  FALSE
[00:18:06.633]      // skip if-block "!canReadPins"
[00:18:06.633]    </control>
[00:18:06.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:18:06.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:18:06.633]        // =>  TRUE
[00:18:06.633]      <block atomic="false" info="">
[00:18:06.633]        WriteAP(0x00, 0x190008);
[00:18:06.635]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:18:06.635]        WriteAP(0xF0, 0x01);
[00:18:06.639]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:18:06.639]      </block>
[00:18:06.639]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:18:06.639]    </control>
[00:18:06.639]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:18:06.639]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:18:06.639]        // =>  FALSE
[00:18:06.639]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:18:06.639]    </control>
[00:18:06.639]    <block atomic="false" info="">
[00:18:06.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:18:06.642]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:18:06.642]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:18:06.642]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:18:06.644]      __ap = 0; //lets make sure we reset the access point selection
[00:18:06.644]        // -> [__ap <= 0x00000000]
[00:18:06.645]    </block>
[00:18:06.645]  </sequence>
[00:18:06.645]  
[00:18:06.664]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:18:06.664]  
[00:18:06.665]  <debugvars>
[00:18:06.665]    // Pre-defined
[00:18:06.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:06.665]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:06.665]    __dp=0x00000000
[00:18:06.665]    __ap=0x00000000
[00:18:06.665]    __traceout=0x00000000      (Trace Disabled)
[00:18:06.665]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:06.665]    __FlashAddr=0x00000000
[00:18:06.665]    __FlashLen=0x00000000
[00:18:06.665]    __FlashArg=0x00000000
[00:18:06.665]    __FlashOp=0x00000000
[00:18:06.665]    __Result=0x00000000
[00:18:06.665]  </debugvars>
[00:18:06.665]  
[00:18:06.665]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:18:06.665]    <block atomic="false" info="">
[00:18:06.665]      __var deviceID = 0;
[00:18:06.667]        // -> [deviceID <= 0x00000000]
[00:18:06.667]      __var version = 0;
[00:18:06.667]        // -> [version <= 0x00000000]
[00:18:06.667]      __var partNum = 0;
[00:18:06.667]        // -> [partNum <= 0x00000000]
[00:18:06.668]      __var manuf = 0;
[00:18:06.668]        // -> [manuf <= 0x00000000]
[00:18:06.668]      __var isMSPM0G1X0X_G3X0X = 0;
[00:18:06.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:18:06.668]      __var isProduction = 0;
[00:18:06.668]        // -> [isProduction <= 0x00000000]
[00:18:06.668]      __var continueId = 0;
[00:18:06.668]        // -> [continueId <= 0x00000000]
[00:18:06.668]      deviceID =   Read32(0x41C40004);
[00:18:06.680]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:18:06.680]        // -> [deviceID <= 0x2BB8802F]
[00:18:06.680]      version = deviceID >> 28;
[00:18:06.680]        // -> [version <= 0x00000002]
[00:18:06.680]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:18:06.680]        // -> [partNum <= 0x0000BB88]
[00:18:06.680]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:18:06.680]        // -> [manuf <= 0x00000017]
[00:18:06.680]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:18:06.680]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:18:06.680]      isProduction = (version > 0);
[00:18:06.680]        // -> [isProduction <= 0x00000001]
[00:18:06.680]    </block>
[00:18:06.680]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:18:06.680]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:18:06.680]        // =>  FALSE
[00:18:06.680]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:18:06.680]    </control>
[00:18:06.680]    <control if="continueId == 4" while="" timeout="0" info="">
[00:18:06.683]      // if-block "continueId == 4"
[00:18:06.683]        // =>  FALSE
[00:18:06.683]      // skip if-block "continueId == 4"
[00:18:06.683]    </control>
[00:18:06.683]    <control if="!isProduction" while="" timeout="0" info="">
[00:18:06.683]      // if-block "!isProduction"
[00:18:06.683]        // =>  FALSE
[00:18:06.683]      // skip if-block "!isProduction"
[00:18:06.683]    </control>
[00:18:06.683]  </sequence>
[00:18:06.683]  
[00:19:02.112]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:19:02.112]  
[00:19:02.123]  <debugvars>
[00:19:02.123]    // Pre-defined
[00:19:02.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:02.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:02.123]    __dp=0x00000000
[00:19:02.123]    __ap=0x00000000
[00:19:02.123]    __traceout=0x00000000      (Trace Disabled)
[00:19:02.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:02.123]    __FlashAddr=0x00000000
[00:19:02.123]    __FlashLen=0x00000000
[00:19:02.123]    __FlashArg=0x00000000
[00:19:02.123]    __FlashOp=0x00000000
[00:19:02.123]    __Result=0x00000000
[00:19:02.123]  </debugvars>
[00:19:02.123]  
[00:19:02.123]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:19:02.123]    <block atomic="false" info="">
[00:19:02.123]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:19:02.123]        // -> [isSWJ <= 0x00000001]
[00:19:02.123]      __var hasDormant = __protocol & 0x00020000;
[00:19:02.123]        // -> [hasDormant <= 0x00000000]
[00:19:02.123]      __var protType   = __protocol & 0x0000FFFF;
[00:19:02.123]        // -> [protType <= 0x00000002]
[00:19:02.123]    </block>
[00:19:02.123]    <control if="protType == 1" while="" timeout="0" info="">
[00:19:02.123]      // if-block "protType == 1"
[00:19:02.123]        // =>  FALSE
[00:19:02.123]      // skip if-block "protType == 1"
[00:19:02.126]    </control>
[00:19:02.126]    <control if="protType == 2" while="" timeout="0" info="">
[00:19:02.126]      // if-block "protType == 2"
[00:19:02.126]        // =>  TRUE
[00:19:02.126]      <control if="isSWJ" while="" timeout="0" info="">
[00:19:02.126]        // if-block "isSWJ"
[00:19:02.126]          // =>  TRUE
[00:19:02.126]        <control if="hasDormant" while="" timeout="0" info="">
[00:19:02.126]          // if-block "hasDormant"
[00:19:02.126]            // =>  FALSE
[00:19:02.126]          // skip if-block "hasDormant"
[00:19:02.126]        </control>
[00:19:02.126]        <control if="!hasDormant" while="" timeout="0" info="">
[00:19:02.126]          // if-block "!hasDormant"
[00:19:02.126]            // =>  TRUE
[00:19:02.126]          <block atomic="false" info="">
[00:19:02.126]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:19:02.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:02.130]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:19:02.134]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:19:02.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:19:02.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:02.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:19:02.138]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:19:02.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:19:02.138]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:02.138]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:19:02.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:19:02.142]          </block>
[00:19:02.142]          // end if-block "!hasDormant"
[00:19:02.143]        </control>
[00:19:02.143]        // end if-block "isSWJ"
[00:19:02.143]      </control>
[00:19:02.143]      <control if="!isSWJ" while="" timeout="0" info="">
[00:19:02.143]        // if-block "!isSWJ"
[00:19:02.143]          // =>  FALSE
[00:19:02.143]        // skip if-block "!isSWJ"
[00:19:02.143]      </control>
[00:19:02.143]      <block atomic="false" info="">
[00:19:02.144]        ReadDP(0x0);
[00:19:02.150]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:19:02.150]      </block>
[00:19:02.150]      // end if-block "protType == 2"
[00:19:02.150]    </control>
[00:19:02.150]  </sequence>
[00:19:02.150]  
[00:19:02.154]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:19:02.154]  
[00:19:02.154]  <debugvars>
[00:19:02.156]    // Pre-defined
[00:19:02.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:02.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:02.156]    __dp=0x00000000
[00:19:02.156]    __ap=0x00000000
[00:19:02.156]    __traceout=0x00000000      (Trace Disabled)
[00:19:02.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:02.156]    __FlashAddr=0x00000000
[00:19:02.156]    __FlashLen=0x00000000
[00:19:02.156]    __FlashArg=0x00000000
[00:19:02.156]    __FlashOp=0x00000000
[00:19:02.156]    __Result=0x00000000
[00:19:02.156]  </debugvars>
[00:19:02.156]  
[00:19:02.156]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:19:02.156]    <block atomic="false" info="">
[00:19:02.156]      __var SW_DP_ABORT       = 0x0;
[00:19:02.158]        // -> [SW_DP_ABORT <= 0x00000000]
[00:19:02.158]      __var DP_CTRL_STAT      = 0x4;
[00:19:02.158]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:19:02.158]      __var DP_SELECT         = 0x8;
[00:19:02.158]        // -> [DP_SELECT <= 0x00000008]
[00:19:02.158]      __var powered_down      = 0;
[00:19:02.158]        // -> [powered_down <= 0x00000000]
[00:19:02.158]      WriteDP(DP_SELECT, 0x00000000);
[00:19:02.158]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:19:02.158]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:19:02.162]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:19:02.162]        // -> [powered_down <= 0x00000001]
[00:19:02.162]    </block>
[00:19:02.162]    <control if="powered_down" while="" timeout="0" info="">
[00:19:02.162]      // if-block "powered_down"
[00:19:02.162]        // =>  TRUE
[00:19:02.162]      <block atomic="false" info="">
[00:19:02.162]        Message(0, "Debug/System power-up request sent");
[00:19:02.162]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:19:02.170]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:19:02.170]      </block>
[00:19:02.170]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:19:02.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:19:02.170]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:19:02.170]        // while-condition  =>  FALSE
[00:19:02.170]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:19:02.174]      </control>
[00:19:02.174]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:19:02.174]        // if-block "(__protocol & 0xFFFF) == 1"
[00:19:02.174]          // =>  FALSE
[00:19:02.174]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:19:02.174]      </control>
[00:19:02.174]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:19:02.174]        // if-block "(__protocol & 0xFFFF) == 2"
[00:19:02.174]          // =>  TRUE
[00:19:02.174]        <block atomic="false" info="">
[00:19:02.174]          Message(0, "executing SWD power up");
[00:19:02.176]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:19:02.182]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:19:02.182]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:19:02.183]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:19:02.183]        </block>
[00:19:02.183]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:19:02.183]      </control>
[00:19:02.183]      // end if-block "powered_down"
[00:19:02.186]    </control>
[00:19:02.186]    <block atomic="false" info="">
[00:19:02.186]      __var DEBUG_PORT_VAL    = 0;
[00:19:02.186]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:19:02.186]      __var ACCESS_POINT_VAL  = 0;
[00:19:02.186]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:19:02.186]      __ap = 1; 
[00:19:02.186]        // -> [__ap <= 0x00000001]
[00:19:02.186]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:19:02.193]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:19:02.193]      __ap = 4;
[00:19:02.193]        // -> [__ap <= 0x00000004]
[00:19:02.193]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:02.196]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:19:02.196]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:19:02.196]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:02.196]    </block>
[00:19:02.196]    <block atomic="false" info="">
[00:19:02.198]      __var nReset = 0x80;
[00:19:02.198]        // -> [nReset <= 0x00000080]
[00:19:02.198]      __var canReadPins = 0;
[00:19:02.198]        // -> [canReadPins <= 0x00000000]
[00:19:02.198]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:19:02.201]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:19:02.201]        // -> [canReadPins <= 0x00000001]
[00:19:02.201]    </block>
[00:19:02.201]    <control if="" while="1" timeout="200" info="">
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.201]      // while-condition  =>  TRUE
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.201]      // while-condition  =>  TRUE
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.201]      // while-condition  =>  TRUE
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.201]      // while-condition  =>  TRUE
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.201]      // while-condition  =>  TRUE
[00:19:02.201]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.203]      // while-condition  =>  TRUE
[00:19:02.203]      // while "1"  (timeout="200")
[00:19:02.206]      // while-condition  =>  TRUE
[00:19:02.206]      // while "1"  (timeout="200")
[00:19:02.207]      // while-condition  =>  TRUE
[00:19:02.207]      // while "1"  (timeout="200")
[00:19:02.207]      // while  =>  TIMEOUT
[00:19:02.207]      // end while "1"
[00:19:02.207]    </control>
[00:19:02.207]    <control if="canReadPins" while="" timeout="0" info="">
[00:19:02.207]      // if-block "canReadPins"
[00:19:02.207]        // =>  TRUE
[00:19:02.207]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:19:02.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:19:02.211]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:19:02.211]        // while-condition  =>  FALSE
[00:19:02.211]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:19:02.211]      </control>
[00:19:02.211]      // end if-block "canReadPins"
[00:19:02.211]    </control>
[00:19:02.211]    <control if="!canReadPins" while="" timeout="0" info="">
[00:19:02.211]      // if-block "!canReadPins"
[00:19:02.215]        // =>  FALSE
[00:19:02.215]      // skip if-block "!canReadPins"
[00:19:02.215]    </control>
[00:19:02.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:19:02.215]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:02.215]        // =>  TRUE
[00:19:02.215]      <block atomic="false" info="">
[00:19:02.215]        WriteAP(0x00, 0x190008);
[00:19:02.219]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:02.219]        WriteAP(0xF0, 0x01);
[00:19:02.219]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:02.219]      </block>
[00:19:02.219]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:02.219]    </control>
[00:19:02.219]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:19:02.219]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:02.223]        // =>  FALSE
[00:19:02.223]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:02.223]    </control>
[00:19:02.223]    <block atomic="false" info="">
[00:19:02.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:02.227]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:19:02.227]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:19:02.227]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:02.227]      __ap = 0; //lets make sure we reset the access point selection
[00:19:02.227]        // -> [__ap <= 0x00000000]
[00:19:02.227]    </block>
[00:19:02.227]  </sequence>
[00:19:02.230]  
[00:19:02.251]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:19:02.251]  
[00:19:02.251]  <debugvars>
[00:19:02.251]    // Pre-defined
[00:19:02.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:02.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:02.251]    __dp=0x00000000
[00:19:02.251]    __ap=0x00000000
[00:19:02.251]    __traceout=0x00000000      (Trace Disabled)
[00:19:02.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:02.251]    __FlashAddr=0x00000000
[00:19:02.251]    __FlashLen=0x00000000
[00:19:02.251]    __FlashArg=0x00000000
[00:19:02.251]    __FlashOp=0x00000000
[00:19:02.251]    __Result=0x00000000
[00:19:02.251]  </debugvars>
[00:19:02.251]  
[00:19:02.251]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:19:02.251]    <block atomic="false" info="">
[00:19:02.251]      __var deviceID = 0;
[00:19:02.251]        // -> [deviceID <= 0x00000000]
[00:19:02.251]      __var version = 0;
[00:19:02.251]        // -> [version <= 0x00000000]
[00:19:02.251]      __var partNum = 0;
[00:19:02.251]        // -> [partNum <= 0x00000000]
[00:19:02.251]      __var manuf = 0;
[00:19:02.251]        // -> [manuf <= 0x00000000]
[00:19:02.251]      __var isMSPM0G1X0X_G3X0X = 0;
[00:19:02.251]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:19:02.251]      __var isProduction = 0;
[00:19:02.251]        // -> [isProduction <= 0x00000000]
[00:19:02.251]      __var continueId = 0;
[00:19:02.256]        // -> [continueId <= 0x00000000]
[00:19:02.256]      deviceID =   Read32(0x41C40004);
[00:19:02.260]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:19:02.260]        // -> [deviceID <= 0x2BB8802F]
[00:19:02.260]      version = deviceID >> 28;
[00:19:02.260]        // -> [version <= 0x00000002]
[00:19:02.260]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:19:02.260]        // -> [partNum <= 0x0000BB88]
[00:19:02.260]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:19:02.260]        // -> [manuf <= 0x00000017]
[00:19:02.260]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:19:02.260]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:19:02.260]      isProduction = (version > 0);
[00:19:02.260]        // -> [isProduction <= 0x00000001]
[00:19:02.260]    </block>
[00:19:02.260]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:19:02.260]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:19:02.260]        // =>  FALSE
[00:19:02.260]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:19:02.260]    </control>
[00:19:02.260]    <control if="continueId == 4" while="" timeout="0" info="">
[00:19:02.260]      // if-block "continueId == 4"
[00:19:02.260]        // =>  FALSE
[00:19:02.260]      // skip if-block "continueId == 4"
[00:19:02.260]    </control>
[00:19:02.260]    <control if="!isProduction" while="" timeout="0" info="">
[00:19:02.260]      // if-block "!isProduction"
[00:19:02.260]        // =>  FALSE
[00:19:02.260]      // skip if-block "!isProduction"
[00:19:02.260]    </control>
[00:19:02.260]  </sequence>
[00:19:02.260]  
[00:19:56.837]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:19:56.837]  
[00:19:56.845]  <debugvars>
[00:19:56.845]    // Pre-defined
[00:19:56.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.845]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.845]    __dp=0x00000000
[00:19:56.845]    __ap=0x00000000
[00:19:56.845]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.845]    __FlashAddr=0x00000000
[00:19:56.845]    __FlashLen=0x00000000
[00:19:56.846]    __FlashArg=0x00000000
[00:19:56.846]    __FlashOp=0x00000000
[00:19:56.846]    __Result=0x00000000
[00:19:56.847]  </debugvars>
[00:19:56.847]  
[00:19:56.847]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:19:56.847]    <block atomic="false" info="">
[00:19:56.847]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:19:56.847]        // -> [isSWJ <= 0x00000001]
[00:19:56.847]      __var hasDormant = __protocol & 0x00020000;
[00:19:56.847]        // -> [hasDormant <= 0x00000000]
[00:19:56.848]      __var protType   = __protocol & 0x0000FFFF;
[00:19:56.848]        // -> [protType <= 0x00000002]
[00:19:56.848]    </block>
[00:19:56.848]    <control if="protType == 1" while="" timeout="0" info="">
[00:19:56.848]      // if-block "protType == 1"
[00:19:56.848]        // =>  FALSE
[00:19:56.848]      // skip if-block "protType == 1"
[00:19:56.848]    </control>
[00:19:56.848]    <control if="protType == 2" while="" timeout="0" info="">
[00:19:56.848]      // if-block "protType == 2"
[00:19:56.848]        // =>  TRUE
[00:19:56.848]      <control if="isSWJ" while="" timeout="0" info="">
[00:19:56.848]        // if-block "isSWJ"
[00:19:56.848]          // =>  TRUE
[00:19:56.848]        <control if="hasDormant" while="" timeout="0" info="">
[00:19:56.848]          // if-block "hasDormant"
[00:19:56.850]            // =>  FALSE
[00:19:56.850]          // skip if-block "hasDormant"
[00:19:56.850]        </control>
[00:19:56.850]        <control if="!hasDormant" while="" timeout="0" info="">
[00:19:56.850]          // if-block "!hasDormant"
[00:19:56.850]            // =>  TRUE
[00:19:56.850]          <block atomic="false" info="">
[00:19:56.851]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:19:56.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:19:56.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:19:56.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:19:56.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.856]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:19:56.857]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:19:56.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:19:56.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.859]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:19:56.859]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:19:56.859]          </block>
[00:19:56.859]          // end if-block "!hasDormant"
[00:19:56.859]        </control>
[00:19:56.859]        // end if-block "isSWJ"
[00:19:56.859]      </control>
[00:19:56.859]      <control if="!isSWJ" while="" timeout="0" info="">
[00:19:56.862]        // if-block "!isSWJ"
[00:19:56.862]          // =>  FALSE
[00:19:56.862]        // skip if-block "!isSWJ"
[00:19:56.862]      </control>
[00:19:56.862]      <block atomic="false" info="">
[00:19:56.862]        ReadDP(0x0);
[00:19:56.863]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:19:56.863]      </block>
[00:19:56.863]      // end if-block "protType == 2"
[00:19:56.863]    </control>
[00:19:56.863]  </sequence>
[00:19:56.863]  
[00:19:56.867]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:19:56.867]  
[00:19:56.867]  <debugvars>
[00:19:56.867]    // Pre-defined
[00:19:56.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.868]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.868]    __dp=0x00000000
[00:19:56.868]    __ap=0x00000000
[00:19:56.868]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.868]    __FlashAddr=0x00000000
[00:19:56.868]    __FlashLen=0x00000000
[00:19:56.868]    __FlashArg=0x00000000
[00:19:56.868]    __FlashOp=0x00000000
[00:19:56.868]    __Result=0x00000000
[00:19:56.868]  </debugvars>
[00:19:56.868]  
[00:19:56.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:19:56.868]    <block atomic="false" info="">
[00:19:56.868]      __var SW_DP_ABORT       = 0x0;
[00:19:56.868]        // -> [SW_DP_ABORT <= 0x00000000]
[00:19:56.868]      __var DP_CTRL_STAT      = 0x4;
[00:19:56.868]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:19:56.868]      __var DP_SELECT         = 0x8;
[00:19:56.868]        // -> [DP_SELECT <= 0x00000008]
[00:19:56.868]      __var powered_down      = 0;
[00:19:56.868]        // -> [powered_down <= 0x00000000]
[00:19:56.868]      WriteDP(DP_SELECT, 0x00000000);
[00:19:56.873]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:19:56.873]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:19:56.873]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:19:56.875]        // -> [powered_down <= 0x00000001]
[00:19:56.875]    </block>
[00:19:56.875]    <control if="powered_down" while="" timeout="0" info="">
[00:19:56.875]      // if-block "powered_down"
[00:19:56.875]        // =>  TRUE
[00:19:56.875]      <block atomic="false" info="">
[00:19:56.875]        Message(0, "Debug/System power-up request sent");
[00:19:56.877]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:19:56.877]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:19:56.879]      </block>
[00:19:56.879]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:19:56.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:19:56.880]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:19:56.880]        // while-condition  =>  FALSE
[00:19:56.880]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:19:56.883]      </control>
[00:19:56.883]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:19:56.883]        // if-block "(__protocol & 0xFFFF) == 1"
[00:19:56.883]          // =>  FALSE
[00:19:56.883]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:19:56.883]      </control>
[00:19:56.883]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:19:56.884]        // if-block "(__protocol & 0xFFFF) == 2"
[00:19:56.884]          // =>  TRUE
[00:19:56.884]        <block atomic="false" info="">
[00:19:56.884]          Message(0, "executing SWD power up");
[00:19:56.884]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:19:56.888]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:19:56.888]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:19:56.888]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:19:56.888]        </block>
[00:19:56.888]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:19:56.888]      </control>
[00:19:56.888]      // end if-block "powered_down"
[00:19:56.888]    </control>
[00:19:56.888]    <block atomic="false" info="">
[00:19:56.888]      __var DEBUG_PORT_VAL    = 0;
[00:19:56.888]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:19:56.890]      __var ACCESS_POINT_VAL  = 0;
[00:19:56.890]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:19:56.890]      __ap = 1; 
[00:19:56.890]        // -> [__ap <= 0x00000001]
[00:19:56.890]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:19:56.891]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:19:56.891]      __ap = 4;
[00:19:56.891]        // -> [__ap <= 0x00000004]
[00:19:56.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:56.899]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.899]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:19:56.899]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:56.901]    </block>
[00:19:56.901]    <block atomic="false" info="">
[00:19:56.901]      __var nReset = 0x80;
[00:19:56.901]        // -> [nReset <= 0x00000080]
[00:19:56.901]      __var canReadPins = 0;
[00:19:56.901]        // -> [canReadPins <= 0x00000000]
[00:19:56.901]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:19:56.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:19:56.901]        // -> [canReadPins <= 0x00000001]
[00:19:56.901]    </block>
[00:19:56.904]    <control if="" while="1" timeout="200" info="">
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.904]      // while "1"  (timeout="200")
[00:19:56.904]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.907]      // while-condition  =>  TRUE
[00:19:56.907]      // while "1"  (timeout="200")
[00:19:56.911]      // while-condition  =>  TRUE
[00:19:56.911]      // while "1"  (timeout="200")
[00:19:56.911]      // while  =>  TIMEOUT
[00:19:56.911]      // end while "1"
[00:19:56.911]    </control>
[00:19:56.911]    <control if="canReadPins" while="" timeout="0" info="">
[00:19:56.911]      // if-block "canReadPins"
[00:19:56.911]        // =>  TRUE
[00:19:56.911]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:19:56.911]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:19:56.911]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:19:56.911]        // while-condition  =>  FALSE
[00:19:56.911]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:19:56.911]      </control>
[00:19:56.911]      // end if-block "canReadPins"
[00:19:56.911]    </control>
[00:19:56.911]    <control if="!canReadPins" while="" timeout="0" info="">
[00:19:56.911]      // if-block "!canReadPins"
[00:19:56.915]        // =>  FALSE
[00:19:56.915]      // skip if-block "!canReadPins"
[00:19:56.915]    </control>
[00:19:56.915]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:19:56.915]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:56.915]        // =>  TRUE
[00:19:56.915]      <block atomic="false" info="">
[00:19:56.915]        WriteAP(0x00, 0x190008);
[00:19:56.917]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.917]        WriteAP(0xF0, 0x01);
[00:19:56.919]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.919]      </block>
[00:19:56.919]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:56.919]    </control>
[00:19:56.919]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:19:56.919]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:56.923]        // =>  FALSE
[00:19:56.923]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:56.923]    </control>
[00:19:56.923]    <block atomic="false" info="">
[00:19:56.923]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:56.927]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.927]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:19:56.927]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:56.927]      __ap = 0; //lets make sure we reset the access point selection
[00:19:56.927]        // -> [__ap <= 0x00000000]
[00:19:56.927]    </block>
[00:19:56.927]  </sequence>
[00:19:56.927]  
[00:19:56.951]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:19:56.951]  
[00:19:56.951]  <debugvars>
[00:19:56.951]    // Pre-defined
[00:19:56.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.955]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.955]    __dp=0x00000000
[00:19:56.955]    __ap=0x00000000
[00:19:56.955]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.955]    __FlashAddr=0x00000000
[00:19:56.956]    __FlashLen=0x00000000
[00:19:56.956]    __FlashArg=0x00000000
[00:19:56.956]    __FlashOp=0x00000000
[00:19:56.956]    __Result=0x00000000
[00:19:56.956]  </debugvars>
[00:19:56.956]  
[00:19:56.956]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:19:56.956]    <block atomic="false" info="">
[00:19:56.956]      __var deviceID = 0;
[00:19:56.956]        // -> [deviceID <= 0x00000000]
[00:19:56.956]      __var version = 0;
[00:19:56.957]        // -> [version <= 0x00000000]
[00:19:56.957]      __var partNum = 0;
[00:19:56.957]        // -> [partNum <= 0x00000000]
[00:19:56.957]      __var manuf = 0;
[00:19:56.957]        // -> [manuf <= 0x00000000]
[00:19:56.957]      __var isMSPM0G1X0X_G3X0X = 0;
[00:19:56.957]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:19:56.957]      __var isProduction = 0;
[00:19:56.957]        // -> [isProduction <= 0x00000000]
[00:19:56.957]      __var continueId = 0;
[00:19:56.957]        // -> [continueId <= 0x00000000]
[00:19:56.958]      deviceID =   Read32(0x41C40004);
[00:19:56.959]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:19:56.963]        // -> [deviceID <= 0x2BB8802F]
[00:19:56.963]      version = deviceID >> 28;
[00:19:56.963]        // -> [version <= 0x00000002]
[00:19:56.963]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:19:56.963]        // -> [partNum <= 0x0000BB88]
[00:19:56.963]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:19:56.963]        // -> [manuf <= 0x00000017]
[00:19:56.963]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:19:56.964]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:19:56.964]      isProduction = (version > 0);
[00:19:56.964]        // -> [isProduction <= 0x00000001]
[00:19:56.964]    </block>
[00:19:56.964]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:19:56.964]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:19:56.965]        // =>  FALSE
[00:19:56.965]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:19:56.965]    </control>
[00:19:56.965]    <control if="continueId == 4" while="" timeout="0" info="">
[00:19:56.965]      // if-block "continueId == 4"
[00:19:56.965]        // =>  FALSE
[00:19:56.965]      // skip if-block "continueId == 4"
[00:19:56.965]    </control>
[00:19:56.965]    <control if="!isProduction" while="" timeout="0" info="">
[00:19:56.965]      // if-block "!isProduction"
[00:19:56.965]        // =>  FALSE
[00:19:56.965]      // skip if-block "!isProduction"
[00:19:56.965]    </control>
[00:19:56.965]  </sequence>
[00:19:56.965]  
[00:21:21.983]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:21:21.983]  
[00:21:21.993]  <debugvars>
[00:21:21.993]    // Pre-defined
[00:21:21.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:21.993]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:21.993]    __dp=0x00000000
[00:21:21.993]    __ap=0x00000000
[00:21:21.993]    __traceout=0x00000000      (Trace Disabled)
[00:21:21.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:21.993]    __FlashAddr=0x00000000
[00:21:21.993]    __FlashLen=0x00000000
[00:21:21.993]    __FlashArg=0x00000000
[00:21:21.993]    __FlashOp=0x00000000
[00:21:21.993]    __Result=0x00000000
[00:21:21.993]  </debugvars>
[00:21:21.993]  
[00:21:21.993]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:21:21.993]    <block atomic="false" info="">
[00:21:21.993]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:21:21.993]        // -> [isSWJ <= 0x00000001]
[00:21:21.993]      __var hasDormant = __protocol & 0x00020000;
[00:21:21.993]        // -> [hasDormant <= 0x00000000]
[00:21:21.993]      __var protType   = __protocol & 0x0000FFFF;
[00:21:21.993]        // -> [protType <= 0x00000002]
[00:21:21.993]    </block>
[00:21:21.993]    <control if="protType == 1" while="" timeout="0" info="">
[00:21:21.993]      // if-block "protType == 1"
[00:21:21.993]        // =>  FALSE
[00:21:21.993]      // skip if-block "protType == 1"
[00:21:21.993]    </control>
[00:21:21.993]    <control if="protType == 2" while="" timeout="0" info="">
[00:21:21.993]      // if-block "protType == 2"
[00:21:21.993]        // =>  TRUE
[00:21:21.993]      <control if="isSWJ" while="" timeout="0" info="">
[00:21:21.997]        // if-block "isSWJ"
[00:21:21.997]          // =>  TRUE
[00:21:21.997]        <control if="hasDormant" while="" timeout="0" info="">
[00:21:21.997]          // if-block "hasDormant"
[00:21:21.997]            // =>  FALSE
[00:21:21.997]          // skip if-block "hasDormant"
[00:21:21.997]        </control>
[00:21:21.997]        <control if="!hasDormant" while="" timeout="0" info="">
[00:21:21.997]          // if-block "!hasDormant"
[00:21:21.997]            // =>  TRUE
[00:21:21.997]          <block atomic="false" info="">
[00:21:21.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:21:21.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:21.999]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:21:22.001]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:21:22.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:21:22.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:22.006]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:21:22.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:21:22.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:21:22.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:22.009]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:21:22.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:21:22.011]          </block>
[00:21:22.011]          // end if-block "!hasDormant"
[00:21:22.011]        </control>
[00:21:22.011]        // end if-block "isSWJ"
[00:21:22.011]      </control>
[00:21:22.011]      <control if="!isSWJ" while="" timeout="0" info="">
[00:21:22.011]        // if-block "!isSWJ"
[00:21:22.011]          // =>  FALSE
[00:21:22.011]        // skip if-block "!isSWJ"
[00:21:22.011]      </control>
[00:21:22.011]      <block atomic="false" info="">
[00:21:22.011]        ReadDP(0x0);
[00:21:22.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:21:22.013]      </block>
[00:21:22.013]      // end if-block "protType == 2"
[00:21:22.013]    </control>
[00:21:22.013]  </sequence>
[00:21:22.013]  
[00:21:22.017]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:21:22.017]  
[00:21:22.017]  <debugvars>
[00:21:22.017]    // Pre-defined
[00:21:22.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:22.017]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:22.019]    __dp=0x00000000
[00:21:22.019]    __ap=0x00000000
[00:21:22.019]    __traceout=0x00000000      (Trace Disabled)
[00:21:22.019]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:22.019]    __FlashAddr=0x00000000
[00:21:22.019]    __FlashLen=0x00000000
[00:21:22.019]    __FlashArg=0x00000000
[00:21:22.019]    __FlashOp=0x00000000
[00:21:22.020]    __Result=0x00000000
[00:21:22.020]  </debugvars>
[00:21:22.020]  
[00:21:22.020]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:21:22.020]    <block atomic="false" info="">
[00:21:22.020]      __var SW_DP_ABORT       = 0x0;
[00:21:22.020]        // -> [SW_DP_ABORT <= 0x00000000]
[00:21:22.020]      __var DP_CTRL_STAT      = 0x4;
[00:21:22.020]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:21:22.020]      __var DP_SELECT         = 0x8;
[00:21:22.020]        // -> [DP_SELECT <= 0x00000008]
[00:21:22.020]      __var powered_down      = 0;
[00:21:22.020]        // -> [powered_down <= 0x00000000]
[00:21:22.020]      WriteDP(DP_SELECT, 0x00000000);
[00:21:22.022]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:21:22.022]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:21:22.022]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:21:22.022]        // -> [powered_down <= 0x00000001]
[00:21:22.022]    </block>
[00:21:22.022]    <control if="powered_down" while="" timeout="0" info="">
[00:21:22.022]      // if-block "powered_down"
[00:21:22.022]        // =>  TRUE
[00:21:22.022]      <block atomic="false" info="">
[00:21:22.022]        Message(0, "Debug/System power-up request sent");
[00:21:22.027]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:21:22.029]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:21:22.029]      </block>
[00:21:22.029]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:21:22.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:21:22.033]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:21:22.033]        // while-condition  =>  FALSE
[00:21:22.033]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:21:22.033]      </control>
[00:21:22.033]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:21:22.033]        // if-block "(__protocol & 0xFFFF) == 1"
[00:21:22.033]          // =>  FALSE
[00:21:22.033]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:21:22.033]      </control>
[00:21:22.033]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:21:22.033]        // if-block "(__protocol & 0xFFFF) == 2"
[00:21:22.033]          // =>  TRUE
[00:21:22.033]        <block atomic="false" info="">
[00:21:22.033]          Message(0, "executing SWD power up");
[00:21:22.039]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:21:22.042]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:21:22.042]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:21:22.043]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:21:22.043]        </block>
[00:21:22.043]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:21:22.046]      </control>
[00:21:22.046]      // end if-block "powered_down"
[00:21:22.046]    </control>
[00:21:22.046]    <block atomic="false" info="">
[00:21:22.046]      __var DEBUG_PORT_VAL    = 0;
[00:21:22.046]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:21:22.046]      __var ACCESS_POINT_VAL  = 0;
[00:21:22.046]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:21:22.046]      __ap = 1; 
[00:21:22.046]        // -> [__ap <= 0x00000001]
[00:21:22.046]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:21:22.050]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:21:22.050]      __ap = 4;
[00:21:22.050]        // -> [__ap <= 0x00000004]
[00:21:22.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:22.054]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:21:22.054]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:21:22.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:22.058]    </block>
[00:21:22.058]    <block atomic="false" info="">
[00:21:22.058]      __var nReset = 0x80;
[00:21:22.059]        // -> [nReset <= 0x00000080]
[00:21:22.059]      __var canReadPins = 0;
[00:21:22.059]        // -> [canReadPins <= 0x00000000]
[00:21:22.059]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:21:22.062]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:21:22.062]        // -> [canReadPins <= 0x00000001]
[00:21:22.062]    </block>
[00:21:22.062]    <control if="" while="1" timeout="200" info="">
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.062]      // while "1"  (timeout="200")
[00:21:22.062]      // while-condition  =>  TRUE
[00:21:22.065]      // while "1"  (timeout="200")
[00:21:22.065]      // while-condition  =>  TRUE
[00:21:22.065]      // while "1"  (timeout="200")
[00:21:22.065]      // while-condition  =>  TRUE
[00:21:22.065]      // while "1"  (timeout="200")
[00:21:22.065]      // while-condition  =>  TRUE
[00:21:22.065]      // while "1"  (timeout="200")
[00:21:22.065]      // while-condition  =>  TRUE
[00:21:22.065]      // while "1"  (timeout="200")
[00:21:22.065]      // while-condition  =>  TRUE
[00:21:22.066]      // while "1"  (timeout="200")
[00:21:22.066]      // while  =>  TIMEOUT
[00:21:22.066]      // end while "1"
[00:21:22.066]    </control>
[00:21:22.066]    <control if="canReadPins" while="" timeout="0" info="">
[00:21:22.066]      // if-block "canReadPins"
[00:21:22.066]        // =>  TRUE
[00:21:22.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:21:22.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:21:22.069]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:21:22.069]        // while-condition  =>  FALSE
[00:21:22.069]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:21:22.069]      </control>
[00:21:22.069]      // end if-block "canReadPins"
[00:21:22.069]    </control>
[00:21:22.069]    <control if="!canReadPins" while="" timeout="0" info="">
[00:21:22.069]      // if-block "!canReadPins"
[00:21:22.069]        // =>  FALSE
[00:21:22.070]      // skip if-block "!canReadPins"
[00:21:22.070]    </control>
[00:21:22.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:21:22.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:22.070]        // =>  TRUE
[00:21:22.070]      <block atomic="false" info="">
[00:21:22.070]        WriteAP(0x00, 0x190008);
[00:21:22.072]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:22.072]        WriteAP(0xF0, 0x01);
[00:21:22.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:22.078]      </block>
[00:21:22.078]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:22.078]    </control>
[00:21:22.078]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:21:22.078]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:22.078]        // =>  FALSE
[00:21:22.078]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:22.078]    </control>
[00:21:22.078]    <block atomic="false" info="">
[00:21:22.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:22.085]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:21:22.085]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:21:22.085]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:22.087]      __ap = 0; //lets make sure we reset the access point selection
[00:21:22.087]        // -> [__ap <= 0x00000000]
[00:21:22.088]    </block>
[00:21:22.088]  </sequence>
[00:21:22.088]  
[00:21:22.129]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:21:22.129]  
[00:21:22.129]  <debugvars>
[00:21:22.129]    // Pre-defined
[00:21:22.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:22.129]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:22.129]    __dp=0x00000000
[00:21:22.129]    __ap=0x00000000
[00:21:22.129]    __traceout=0x00000000      (Trace Disabled)
[00:21:22.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:22.129]    __FlashAddr=0x00000000
[00:21:22.129]    __FlashLen=0x00000000
[00:21:22.129]    __FlashArg=0x00000000
[00:21:22.129]    __FlashOp=0x00000000
[00:21:22.129]    __Result=0x00000000
[00:21:22.129]  </debugvars>
[00:21:22.129]  
[00:21:22.129]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:21:22.129]    <block atomic="false" info="">
[00:21:22.133]      __var deviceID = 0;
[00:21:22.133]        // -> [deviceID <= 0x00000000]
[00:21:22.133]      __var version = 0;
[00:21:22.133]        // -> [version <= 0x00000000]
[00:21:22.133]      __var partNum = 0;
[00:21:22.133]        // -> [partNum <= 0x00000000]
[00:21:22.133]      __var manuf = 0;
[00:21:22.133]        // -> [manuf <= 0x00000000]
[00:21:22.133]      __var isMSPM0G1X0X_G3X0X = 0;
[00:21:22.133]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:21:22.133]      __var isProduction = 0;
[00:21:22.133]        // -> [isProduction <= 0x00000000]
[00:21:22.133]      __var continueId = 0;
[00:21:22.133]        // -> [continueId <= 0x00000000]
[00:21:22.133]      deviceID =   Read32(0x41C40004);
[00:21:22.150]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:21:22.152]        // -> [deviceID <= 0x2BB8802F]
[00:21:22.152]      version = deviceID >> 28;
[00:21:22.152]        // -> [version <= 0x00000002]
[00:21:22.152]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:21:22.152]        // -> [partNum <= 0x0000BB88]
[00:21:22.152]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:21:22.152]        // -> [manuf <= 0x00000017]
[00:21:22.152]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:21:22.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:21:22.152]      isProduction = (version > 0);
[00:21:22.152]        // -> [isProduction <= 0x00000001]
[00:21:22.152]    </block>
[00:21:22.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:21:22.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:21:22.152]        // =>  FALSE
[00:21:22.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:21:22.152]    </control>
[00:21:22.152]    <control if="continueId == 4" while="" timeout="0" info="">
[00:21:22.152]      // if-block "continueId == 4"
[00:21:22.152]        // =>  FALSE
[00:21:22.152]      // skip if-block "continueId == 4"
[00:21:22.152]    </control>
[00:21:22.152]    <control if="!isProduction" while="" timeout="0" info="">
[00:21:22.155]      // if-block "!isProduction"
[00:21:22.155]        // =>  FALSE
[00:21:22.155]      // skip if-block "!isProduction"
[00:21:22.155]    </control>
[00:21:22.155]  </sequence>
[00:21:22.155]  
[00:22:51.112]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:22:51.112]  
[00:22:51.112]  <debugvars>
[00:22:51.112]    // Pre-defined
[00:22:51.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:22:51.112]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:22:51.112]    __dp=0x00000000
[00:22:51.112]    __ap=0x00000000
[00:22:51.112]    __traceout=0x00000000      (Trace Disabled)
[00:22:51.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:22:51.112]    __FlashAddr=0x00000000
[00:22:51.112]    __FlashLen=0x00000000
[00:22:51.112]    __FlashArg=0x00000000
[00:22:51.112]    __FlashOp=0x00000000
[00:22:51.112]    __Result=0x00000000
[00:22:51.112]  </debugvars>
[00:22:51.112]  
[00:22:51.112]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:22:51.112]    <block atomic="false" info="">
[00:22:51.112]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:22:51.112]        // -> [isSWJ <= 0x00000001]
[00:22:51.116]      __var hasDormant = __protocol & 0x00020000;
[00:22:51.116]        // -> [hasDormant <= 0x00000000]
[00:22:51.116]      __var protType   = __protocol & 0x0000FFFF;
[00:22:51.116]        // -> [protType <= 0x00000002]
[00:22:51.116]    </block>
[00:22:51.116]    <control if="protType == 1" while="" timeout="0" info="">
[00:22:51.116]      // if-block "protType == 1"
[00:22:51.116]        // =>  FALSE
[00:22:51.116]      // skip if-block "protType == 1"
[00:22:51.116]    </control>
[00:22:51.116]    <control if="protType == 2" while="" timeout="0" info="">
[00:22:51.116]      // if-block "protType == 2"
[00:22:51.116]        // =>  TRUE
[00:22:51.116]      <control if="isSWJ" while="" timeout="0" info="">
[00:22:51.116]        // if-block "isSWJ"
[00:22:51.116]          // =>  TRUE
[00:22:51.116]        <control if="hasDormant" while="" timeout="0" info="">
[00:22:51.118]          // if-block "hasDormant"
[00:22:51.118]            // =>  FALSE
[00:22:51.118]          // skip if-block "hasDormant"
[00:22:51.118]        </control>
[00:22:51.118]        <control if="!hasDormant" while="" timeout="0" info="">
[00:22:51.118]          // if-block "!hasDormant"
[00:22:51.118]            // =>  TRUE
[00:22:51.118]          <block atomic="false" info="">
[00:22:51.118]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:22:51.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:22:51.129]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:22:51.131]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:22:51.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:22:51.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:22:51.132]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:22:51.132]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:22:51.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:22:51.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:22:51.132]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:22:51.141]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:22:51.145]          </block>
[00:22:51.145]          // end if-block "!hasDormant"
[00:22:51.145]        </control>
[00:22:51.145]        // end if-block "isSWJ"
[00:22:51.145]      </control>
[00:22:51.145]      <control if="!isSWJ" while="" timeout="0" info="">
[00:22:51.145]        // if-block "!isSWJ"
[00:22:51.145]          // =>  FALSE
[00:22:51.145]        // skip if-block "!isSWJ"
[00:22:51.145]      </control>
[00:22:51.145]      <block atomic="false" info="">
[00:22:51.145]        ReadDP(0x0);
[00:22:51.147]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:22:51.147]      </block>
[00:22:51.147]      // end if-block "protType == 2"
[00:22:51.147]    </control>
[00:22:51.147]  </sequence>
[00:22:51.147]  
[00:22:51.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:22:51.157]  
[00:22:51.157]  <debugvars>
[00:22:51.157]    // Pre-defined
[00:22:51.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:22:51.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:22:51.157]    __dp=0x00000000
[00:22:51.157]    __ap=0x00000000
[00:22:51.157]    __traceout=0x00000000      (Trace Disabled)
[00:22:51.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:22:51.157]    __FlashAddr=0x00000000
[00:22:51.157]    __FlashLen=0x00000000
[00:22:51.157]    __FlashArg=0x00000000
[00:22:51.157]    __FlashOp=0x00000000
[00:22:51.157]    __Result=0x00000000
[00:22:51.157]  </debugvars>
[00:22:51.157]  
[00:22:51.161]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:22:51.161]    <block atomic="false" info="">
[00:22:51.161]      __var SW_DP_ABORT       = 0x0;
[00:22:51.161]        // -> [SW_DP_ABORT <= 0x00000000]
[00:22:51.161]      __var DP_CTRL_STAT      = 0x4;
[00:22:51.161]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:22:51.161]      __var DP_SELECT         = 0x8;
[00:22:51.161]        // -> [DP_SELECT <= 0x00000008]
[00:22:51.161]      __var powered_down      = 0;
[00:22:51.161]        // -> [powered_down <= 0x00000000]
[00:22:51.161]      WriteDP(DP_SELECT, 0x00000000);
[00:22:51.161]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:22:51.165]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:22:51.166]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:22:51.166]        // -> [powered_down <= 0x00000001]
[00:22:51.166]    </block>
[00:22:51.166]    <control if="powered_down" while="" timeout="0" info="">
[00:22:51.166]      // if-block "powered_down"
[00:22:51.166]        // =>  TRUE
[00:22:51.166]      <block atomic="false" info="">
[00:22:51.166]        Message(0, "Debug/System power-up request sent");
[00:22:51.171]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:22:51.172]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:22:51.172]      </block>
[00:22:51.172]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:22:51.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:22:51.177]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:22:51.177]        // while-condition  =>  FALSE
[00:22:51.177]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:22:51.177]      </control>
[00:22:51.177]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:22:51.177]        // if-block "(__protocol & 0xFFFF) == 1"
[00:22:51.177]          // =>  FALSE
[00:22:51.181]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:22:51.181]      </control>
[00:22:51.181]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:22:51.181]        // if-block "(__protocol & 0xFFFF) == 2"
[00:22:51.181]          // =>  TRUE
[00:22:51.181]        <block atomic="false" info="">
[00:22:51.181]          Message(0, "executing SWD power up");
[00:22:51.182]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:22:51.189]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:22:51.189]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:22:51.191]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:22:51.191]        </block>
[00:22:51.191]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:22:51.191]      </control>
[00:22:51.191]      // end if-block "powered_down"
[00:22:51.191]    </control>
[00:22:51.191]    <block atomic="false" info="">
[00:22:51.191]      __var DEBUG_PORT_VAL    = 0;
[00:22:51.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:22:51.191]      __var ACCESS_POINT_VAL  = 0;
[00:22:51.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:22:51.191]      __ap = 1; 
[00:22:51.191]        // -> [__ap <= 0x00000001]
[00:22:51.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:22:51.203]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:22:51.203]      __ap = 4;
[00:22:51.203]        // -> [__ap <= 0x00000004]
[00:22:51.203]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:22:51.213]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:22:51.213]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:22:51.213]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:22:51.213]    </block>
[00:22:51.213]    <block atomic="false" info="">
[00:22:51.213]      __var nReset = 0x80;
[00:22:51.213]        // -> [nReset <= 0x00000080]
[00:22:51.213]      __var canReadPins = 0;
[00:22:51.213]        // -> [canReadPins <= 0x00000000]
[00:22:51.213]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:22:51.220]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:22:51.220]        // -> [canReadPins <= 0x00000001]
[00:22:51.220]    </block>
[00:22:51.220]    <control if="" while="1" timeout="200" info="">
[00:22:51.220]      // while "1"  (timeout="200")
[00:22:51.220]      // while-condition  =>  TRUE
[00:22:51.220]      // while "1"  (timeout="200")
[00:22:51.220]      // while-condition  =>  TRUE
[00:22:51.220]      // while "1"  (timeout="200")
[00:22:51.220]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.221]      // while "1"  (timeout="200")
[00:22:51.221]      // while-condition  =>  TRUE
[00:22:51.223]      // while "1"  (timeout="200")
[00:22:51.223]      // while  =>  TIMEOUT
[00:22:51.223]      // end while "1"
[00:22:51.223]    </control>
[00:22:51.223]    <control if="canReadPins" while="" timeout="0" info="">
[00:22:51.223]      // if-block "canReadPins"
[00:22:51.223]        // =>  TRUE
[00:22:51.223]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:22:51.223]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:22:51.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:22:51.225]        // while-condition  =>  FALSE
[00:22:51.225]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:22:51.225]      </control>
[00:22:51.225]      // end if-block "canReadPins"
[00:22:51.225]    </control>
[00:22:51.225]    <control if="!canReadPins" while="" timeout="0" info="">
[00:22:51.225]      // if-block "!canReadPins"
[00:22:51.225]        // =>  FALSE
[00:22:51.225]      // skip if-block "!canReadPins"
[00:22:51.225]    </control>
[00:22:51.225]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:22:51.225]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:22:51.225]        // =>  TRUE
[00:22:51.225]      <block atomic="false" info="">
[00:22:51.225]        WriteAP(0x00, 0x190008);
[00:22:51.229]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:22:51.229]        WriteAP(0xF0, 0x01);
[00:22:51.233]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:22:51.235]      </block>
[00:22:51.235]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:22:51.235]    </control>
[00:22:51.235]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:22:51.235]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:22:51.235]        // =>  FALSE
[00:22:51.235]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:22:51.235]    </control>
[00:22:51.235]    <block atomic="false" info="">
[00:22:51.235]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:22:51.241]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:22:51.241]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:22:51.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:22:51.242]      __ap = 0; //lets make sure we reset the access point selection
[00:22:51.243]        // -> [__ap <= 0x00000000]
[00:22:51.243]    </block>
[00:22:51.243]  </sequence>
[00:22:51.243]  
[00:22:51.291]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:22:51.291]  
[00:22:51.291]  <debugvars>
[00:22:51.291]    // Pre-defined
[00:22:51.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:22:51.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:22:51.291]    __dp=0x00000000
[00:22:51.291]    __ap=0x00000000
[00:22:51.291]    __traceout=0x00000000      (Trace Disabled)
[00:22:51.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:22:51.291]    __FlashAddr=0x00000000
[00:22:51.291]    __FlashLen=0x00000000
[00:22:51.291]    __FlashArg=0x00000000
[00:22:51.291]    __FlashOp=0x00000000
[00:22:51.291]    __Result=0x00000000
[00:22:51.291]  </debugvars>
[00:22:51.291]  
[00:22:51.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:22:51.291]    <block atomic="false" info="">
[00:22:51.295]      __var deviceID = 0;
[00:22:51.295]        // -> [deviceID <= 0x00000000]
[00:22:51.295]      __var version = 0;
[00:22:51.295]        // -> [version <= 0x00000000]
[00:22:51.295]      __var partNum = 0;
[00:22:51.296]        // -> [partNum <= 0x00000000]
[00:22:51.297]      __var manuf = 0;
[00:22:51.297]        // -> [manuf <= 0x00000000]
[00:22:51.297]      __var isMSPM0G1X0X_G3X0X = 0;
[00:22:51.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:22:51.297]      __var isProduction = 0;
[00:22:51.297]        // -> [isProduction <= 0x00000000]
[00:22:51.297]      __var continueId = 0;
[00:22:51.297]        // -> [continueId <= 0x00000000]
[00:22:51.297]      deviceID =   Read32(0x41C40004);
[00:22:51.301]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:22:51.301]        // -> [deviceID <= 0x2BB8802F]
[00:22:51.301]      version = deviceID >> 28;
[00:22:51.301]        // -> [version <= 0x00000002]
[00:22:51.304]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:22:51.304]        // -> [partNum <= 0x0000BB88]
[00:22:51.304]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:22:51.304]        // -> [manuf <= 0x00000017]
[00:22:51.304]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:22:51.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:22:51.304]      isProduction = (version > 0);
[00:22:51.304]        // -> [isProduction <= 0x00000001]
[00:22:51.304]    </block>
[00:22:51.304]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:22:51.304]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:22:51.304]        // =>  FALSE
[00:22:51.304]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:22:51.304]    </control>
[00:22:51.304]    <control if="continueId == 4" while="" timeout="0" info="">
[00:22:51.304]      // if-block "continueId == 4"
[00:22:51.304]        // =>  FALSE
[00:22:51.304]      // skip if-block "continueId == 4"
[00:22:51.304]    </control>
[00:22:51.304]    <control if="!isProduction" while="" timeout="0" info="">
[00:22:51.304]      // if-block "!isProduction"
[00:22:51.304]        // =>  FALSE
[00:22:51.304]      // skip if-block "!isProduction"
[00:22:51.304]    </control>
[00:22:51.304]  </sequence>
[00:22:51.304]  
[00:23:27.717]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:27.717]  
[00:23:27.726]  <debugvars>
[00:23:27.726]    // Pre-defined
[00:23:27.726]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:27.726]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:27.726]    __dp=0x00000000
[00:23:27.726]    __ap=0x00000000
[00:23:27.726]    __traceout=0x00000000      (Trace Disabled)
[00:23:27.726]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:27.726]    __FlashAddr=0x00000000
[00:23:27.726]    __FlashLen=0x00000000
[00:23:27.726]    __FlashArg=0x00000000
[00:23:27.726]    __FlashOp=0x00000000
[00:23:27.726]    __Result=0x00000000
[00:23:27.726]  </debugvars>
[00:23:27.726]  
[00:23:27.726]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:27.726]    <block atomic="false" info="">
[00:23:27.729]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:27.729]        // -> [isSWJ <= 0x00000001]
[00:23:27.729]      __var hasDormant = __protocol & 0x00020000;
[00:23:27.729]        // -> [hasDormant <= 0x00000000]
[00:23:27.729]      __var protType   = __protocol & 0x0000FFFF;
[00:23:27.729]        // -> [protType <= 0x00000002]
[00:23:27.729]    </block>
[00:23:27.729]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:27.729]      // if-block "protType == 1"
[00:23:27.729]        // =>  FALSE
[00:23:27.729]      // skip if-block "protType == 1"
[00:23:27.729]    </control>
[00:23:27.729]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:27.729]      // if-block "protType == 2"
[00:23:27.729]        // =>  TRUE
[00:23:27.729]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:27.731]        // if-block "isSWJ"
[00:23:27.731]          // =>  TRUE
[00:23:27.731]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:27.731]          // if-block "hasDormant"
[00:23:27.731]            // =>  FALSE
[00:23:27.731]          // skip if-block "hasDormant"
[00:23:27.731]        </control>
[00:23:27.731]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:27.731]          // if-block "!hasDormant"
[00:23:27.731]            // =>  TRUE
[00:23:27.731]          <block atomic="false" info="">
[00:23:27.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:27.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:27.733]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:27.737]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:27.737]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:27.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:27.741]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:27.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:27.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:27.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:27.741]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:27.746]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:27.746]          </block>
[00:23:27.746]          // end if-block "!hasDormant"
[00:23:27.746]        </control>
[00:23:27.746]        // end if-block "isSWJ"
[00:23:27.746]      </control>
[00:23:27.746]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:27.746]        // if-block "!isSWJ"
[00:23:27.746]          // =>  FALSE
[00:23:27.746]        // skip if-block "!isSWJ"
[00:23:27.746]      </control>
[00:23:27.746]      <block atomic="false" info="">
[00:23:27.746]        ReadDP(0x0);
[00:23:27.754]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:27.754]      </block>
[00:23:27.754]      // end if-block "protType == 2"
[00:23:27.754]    </control>
[00:23:27.754]  </sequence>
[00:23:27.754]  
[00:23:27.758]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:27.758]  
[00:23:27.761]  <debugvars>
[00:23:27.761]    // Pre-defined
[00:23:27.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:27.761]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:27.761]    __dp=0x00000000
[00:23:27.761]    __ap=0x00000000
[00:23:27.761]    __traceout=0x00000000      (Trace Disabled)
[00:23:27.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:27.761]    __FlashAddr=0x00000000
[00:23:27.761]    __FlashLen=0x00000000
[00:23:27.761]    __FlashArg=0x00000000
[00:23:27.761]    __FlashOp=0x00000000
[00:23:27.761]    __Result=0x00000000
[00:23:27.761]  </debugvars>
[00:23:27.761]  
[00:23:27.761]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:27.761]    <block atomic="false" info="">
[00:23:27.761]      __var SW_DP_ABORT       = 0x0;
[00:23:27.761]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:27.761]      __var DP_CTRL_STAT      = 0x4;
[00:23:27.761]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:27.761]      __var DP_SELECT         = 0x8;
[00:23:27.761]        // -> [DP_SELECT <= 0x00000008]
[00:23:27.761]      __var powered_down      = 0;
[00:23:27.761]        // -> [powered_down <= 0x00000000]
[00:23:27.761]      WriteDP(DP_SELECT, 0x00000000);
[00:23:27.765]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:27.765]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:27.765]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:27.765]        // -> [powered_down <= 0x00000001]
[00:23:27.765]    </block>
[00:23:27.765]    <control if="powered_down" while="" timeout="0" info="">
[00:23:27.765]      // if-block "powered_down"
[00:23:27.765]        // =>  TRUE
[00:23:27.769]      <block atomic="false" info="">
[00:23:27.769]        Message(0, "Debug/System power-up request sent");
[00:23:27.769]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:27.771]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:27.771]      </block>
[00:23:27.771]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:27.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:27.773]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:27.773]        // while-condition  =>  FALSE
[00:23:27.773]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:27.773]      </control>
[00:23:27.773]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:27.773]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:27.773]          // =>  FALSE
[00:23:27.773]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:27.773]      </control>
[00:23:27.773]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:27.773]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:27.773]          // =>  TRUE
[00:23:27.773]        <block atomic="false" info="">
[00:23:27.773]          Message(0, "executing SWD power up");
[00:23:27.777]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:27.781]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:27.781]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:27.781]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:27.781]        </block>
[00:23:27.781]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:27.781]      </control>
[00:23:27.781]      // end if-block "powered_down"
[00:23:27.781]    </control>
[00:23:27.781]    <block atomic="false" info="">
[00:23:27.781]      __var DEBUG_PORT_VAL    = 0;
[00:23:27.781]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:27.781]      __var ACCESS_POINT_VAL  = 0;
[00:23:27.781]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:27.781]      __ap = 1; 
[00:23:27.781]        // -> [__ap <= 0x00000001]
[00:23:27.781]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:27.785]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:27.785]      __ap = 4;
[00:23:27.785]        // -> [__ap <= 0x00000004]
[00:23:27.785]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:27.791]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:27.791]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:27.791]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:27.791]    </block>
[00:23:27.791]    <block atomic="false" info="">
[00:23:27.791]      __var nReset = 0x80;
[00:23:27.791]        // -> [nReset <= 0x00000080]
[00:23:27.793]      __var canReadPins = 0;
[00:23:27.793]        // -> [canReadPins <= 0x00000000]
[00:23:27.793]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:27.793]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:27.793]        // -> [canReadPins <= 0x00000001]
[00:23:27.793]    </block>
[00:23:27.793]    <control if="" while="1" timeout="200" info="">
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.793]      // while "1"  (timeout="200")
[00:23:27.793]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.797]      // while "1"  (timeout="200")
[00:23:27.797]      // while-condition  =>  TRUE
[00:23:27.801]      // while "1"  (timeout="200")
[00:23:27.801]      // while  =>  TIMEOUT
[00:23:27.801]      // end while "1"
[00:23:27.801]    </control>
[00:23:27.801]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:27.801]      // if-block "canReadPins"
[00:23:27.801]        // =>  TRUE
[00:23:27.801]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:27.801]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:27.810]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:27.811]        // while-condition  =>  FALSE
[00:23:27.811]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:27.811]      </control>
[00:23:27.811]      // end if-block "canReadPins"
[00:23:27.811]    </control>
[00:23:27.811]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:27.811]      // if-block "!canReadPins"
[00:23:27.811]        // =>  FALSE
[00:23:27.811]      // skip if-block "!canReadPins"
[00:23:27.811]    </control>
[00:23:27.811]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:27.811]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:27.811]        // =>  TRUE
[00:23:27.811]      <block atomic="false" info="">
[00:23:27.811]        WriteAP(0x00, 0x190008);
[00:23:27.815]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:27.815]        WriteAP(0xF0, 0x01);
[00:23:27.818]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:27.818]      </block>
[00:23:27.818]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:27.818]    </control>
[00:23:27.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:27.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:27.818]        // =>  FALSE
[00:23:27.818]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:27.818]    </control>
[00:23:27.818]    <block atomic="false" info="">
[00:23:27.818]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:27.821]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:27.821]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:27.821]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:27.825]      __ap = 0; //lets make sure we reset the access point selection
[00:23:27.825]        // -> [__ap <= 0x00000000]
[00:23:27.825]    </block>
[00:23:27.825]  </sequence>
[00:23:27.825]  
[00:23:27.854]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:27.854]  
[00:23:27.854]  <debugvars>
[00:23:27.854]    // Pre-defined
[00:23:27.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:27.854]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:27.854]    __dp=0x00000000
[00:23:27.854]    __ap=0x00000000
[00:23:27.854]    __traceout=0x00000000      (Trace Disabled)
[00:23:27.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:27.854]    __FlashAddr=0x00000000
[00:23:27.854]    __FlashLen=0x00000000
[00:23:27.854]    __FlashArg=0x00000000
[00:23:27.854]    __FlashOp=0x00000000
[00:23:27.854]    __Result=0x00000000
[00:23:27.854]  </debugvars>
[00:23:27.854]  
[00:23:27.854]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:27.854]    <block atomic="false" info="">
[00:23:27.854]      __var deviceID = 0;
[00:23:27.854]        // -> [deviceID <= 0x00000000]
[00:23:27.854]      __var version = 0;
[00:23:27.854]        // -> [version <= 0x00000000]
[00:23:27.854]      __var partNum = 0;
[00:23:27.854]        // -> [partNum <= 0x00000000]
[00:23:27.854]      __var manuf = 0;
[00:23:27.854]        // -> [manuf <= 0x00000000]
[00:23:27.854]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:27.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:27.854]      __var isProduction = 0;
[00:23:27.854]        // -> [isProduction <= 0x00000000]
[00:23:27.854]      __var continueId = 0;
[00:23:27.854]        // -> [continueId <= 0x00000000]
[00:23:27.858]      deviceID =   Read32(0x41C40004);
[00:23:27.861]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:27.861]        // -> [deviceID <= 0x2BB8802F]
[00:23:27.861]      version = deviceID >> 28;
[00:23:27.861]        // -> [version <= 0x00000002]
[00:23:27.861]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:27.861]        // -> [partNum <= 0x0000BB88]
[00:23:27.861]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:27.861]        // -> [manuf <= 0x00000017]
[00:23:27.861]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:27.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:27.861]      isProduction = (version > 0);
[00:23:27.861]        // -> [isProduction <= 0x00000001]
[00:23:27.861]    </block>
[00:23:27.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:27.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:27.861]        // =>  FALSE
[00:23:27.861]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:27.861]    </control>
[00:23:27.861]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:27.861]      // if-block "continueId == 4"
[00:23:27.861]        // =>  FALSE
[00:23:27.861]      // skip if-block "continueId == 4"
[00:23:27.861]    </control>
[00:23:27.861]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:27.861]      // if-block "!isProduction"
[00:23:27.861]        // =>  FALSE
[00:23:27.861]      // skip if-block "!isProduction"
[00:23:27.861]    </control>
[00:23:27.861]  </sequence>
[00:23:27.865]  
[00:25:20.571]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:25:20.571]  
[00:25:20.571]  <debugvars>
[00:25:20.571]    // Pre-defined
[00:25:20.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:25:20.571]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:25:20.571]    __dp=0x00000000
[00:25:20.572]    __ap=0x00000000
[00:25:20.572]    __traceout=0x00000000      (Trace Disabled)
[00:25:20.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:25:20.572]    __FlashAddr=0x00000000
[00:25:20.572]    __FlashLen=0x00000000
[00:25:20.572]    __FlashArg=0x00000000
[00:25:20.572]    __FlashOp=0x00000000
[00:25:20.572]    __Result=0x00000000
[00:25:20.572]  </debugvars>
[00:25:20.572]  
[00:25:20.572]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:25:20.573]    <block atomic="false" info="">
[00:25:20.573]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:25:20.573]        // -> [isSWJ <= 0x00000001]
[00:25:20.573]      __var hasDormant = __protocol & 0x00020000;
[00:25:20.573]        // -> [hasDormant <= 0x00000000]
[00:25:20.573]      __var protType   = __protocol & 0x0000FFFF;
[00:25:20.573]        // -> [protType <= 0x00000002]
[00:25:20.573]    </block>
[00:25:20.573]    <control if="protType == 1" while="" timeout="0" info="">
[00:25:20.573]      // if-block "protType == 1"
[00:25:20.573]        // =>  FALSE
[00:25:20.573]      // skip if-block "protType == 1"
[00:25:20.573]    </control>
[00:25:20.573]    <control if="protType == 2" while="" timeout="0" info="">
[00:25:20.573]      // if-block "protType == 2"
[00:25:20.573]        // =>  TRUE
[00:25:20.573]      <control if="isSWJ" while="" timeout="0" info="">
[00:25:20.575]        // if-block "isSWJ"
[00:25:20.575]          // =>  TRUE
[00:25:20.575]        <control if="hasDormant" while="" timeout="0" info="">
[00:25:20.575]          // if-block "hasDormant"
[00:25:20.575]            // =>  FALSE
[00:25:20.575]          // skip if-block "hasDormant"
[00:25:20.575]        </control>
[00:25:20.575]        <control if="!hasDormant" while="" timeout="0" info="">
[00:25:20.575]          // if-block "!hasDormant"
[00:25:20.575]            // =>  TRUE
[00:25:20.575]          <block atomic="false" info="">
[00:25:20.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:25:20.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:25:20.579]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:25:20.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:25:20.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:25:20.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:25:20.599]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:25:20.604]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:25:20.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:25:20.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:25:20.608]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:25:20.613]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:25:20.613]          </block>
[00:25:20.613]          // end if-block "!hasDormant"
[00:25:20.613]        </control>
[00:25:20.613]        // end if-block "isSWJ"
[00:25:20.613]      </control>
[00:25:20.613]      <control if="!isSWJ" while="" timeout="0" info="">
[00:25:20.615]        // if-block "!isSWJ"
[00:25:20.615]          // =>  FALSE
[00:25:20.615]        // skip if-block "!isSWJ"
[00:25:20.615]      </control>
[00:25:20.615]      <block atomic="false" info="">
[00:25:20.615]        ReadDP(0x0);
[00:25:20.616]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:25:20.616]      </block>
[00:25:20.617]      // end if-block "protType == 2"
[00:25:20.617]    </control>
[00:25:20.617]  </sequence>
[00:25:20.617]  
[00:25:20.623]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:25:20.623]  
[00:25:20.623]  <debugvars>
[00:25:20.623]    // Pre-defined
[00:25:20.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:25:20.623]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:25:20.623]    __dp=0x00000000
[00:25:20.623]    __ap=0x00000000
[00:25:20.623]    __traceout=0x00000000      (Trace Disabled)
[00:25:20.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:25:20.623]    __FlashAddr=0x00000000
[00:25:20.623]    __FlashLen=0x00000000
[00:25:20.623]    __FlashArg=0x00000000
[00:25:20.624]    __FlashOp=0x00000000
[00:25:20.624]    __Result=0x00000000
[00:25:20.624]  </debugvars>
[00:25:20.624]  
[00:25:20.624]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:25:20.624]    <block atomic="false" info="">
[00:25:20.624]      __var SW_DP_ABORT       = 0x0;
[00:25:20.624]        // -> [SW_DP_ABORT <= 0x00000000]
[00:25:20.624]      __var DP_CTRL_STAT      = 0x4;
[00:25:20.625]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:25:20.625]      __var DP_SELECT         = 0x8;
[00:25:20.625]        // -> [DP_SELECT <= 0x00000008]
[00:25:20.625]      __var powered_down      = 0;
[00:25:20.625]        // -> [powered_down <= 0x00000000]
[00:25:20.625]      WriteDP(DP_SELECT, 0x00000000);
[00:25:20.627]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:25:20.628]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:25:20.630]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:25:20.630]        // -> [powered_down <= 0x00000001]
[00:25:20.630]    </block>
[00:25:20.630]    <control if="powered_down" while="" timeout="0" info="">
[00:25:20.632]      // if-block "powered_down"
[00:25:20.632]        // =>  TRUE
[00:25:20.632]      <block atomic="false" info="">
[00:25:20.632]        Message(0, "Debug/System power-up request sent");
[00:25:20.634]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:25:20.640]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:25:20.640]      </block>
[00:25:20.640]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:25:20.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:25:20.644]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:25:20.644]        // while-condition  =>  FALSE
[00:25:20.644]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:25:20.644]      </control>
[00:25:20.644]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:25:20.644]        // if-block "(__protocol & 0xFFFF) == 1"
[00:25:20.644]          // =>  FALSE
[00:25:20.644]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:25:20.644]      </control>
[00:25:20.644]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:25:20.644]        // if-block "(__protocol & 0xFFFF) == 2"
[00:25:20.644]          // =>  TRUE
[00:25:20.644]        <block atomic="false" info="">
[00:25:20.644]          Message(0, "executing SWD power up");
[00:25:20.644]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:25:20.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:25:20.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:25:20.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:25:20.652]        </block>
[00:25:20.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:25:20.652]      </control>
[00:25:20.652]      // end if-block "powered_down"
[00:25:20.652]    </control>
[00:25:20.652]    <block atomic="false" info="">
[00:25:20.652]      __var DEBUG_PORT_VAL    = 0;
[00:25:20.652]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:25:20.652]      __var ACCESS_POINT_VAL  = 0;
[00:25:20.652]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:25:20.652]      __ap = 1; 
[00:25:20.653]        // -> [__ap <= 0x00000001]
[00:25:20.653]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:25:20.656]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:25:20.656]      __ap = 4;
[00:25:20.656]        // -> [__ap <= 0x00000004]
[00:25:20.656]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:25:20.669]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:25:20.669]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:25:20.669]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:25:20.672]    </block>
[00:25:20.672]    <block atomic="false" info="">
[00:25:20.672]      __var nReset = 0x80;
[00:25:20.672]        // -> [nReset <= 0x00000080]
[00:25:20.672]      __var canReadPins = 0;
[00:25:20.672]        // -> [canReadPins <= 0x00000000]
[00:25:20.672]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:25:20.688]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:25:20.688]        // -> [canReadPins <= 0x00000001]
[00:25:20.688]    </block>
[00:25:20.688]    <control if="" while="1" timeout="200" info="">
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.688]      // while-condition  =>  TRUE
[00:25:20.688]      // while "1"  (timeout="200")
[00:25:20.692]      // while-condition  =>  TRUE
[00:25:20.692]      // while "1"  (timeout="200")
[00:25:20.692]      // while  =>  TIMEOUT
[00:25:20.692]      // end while "1"
[00:25:20.692]    </control>
[00:25:20.692]    <control if="canReadPins" while="" timeout="0" info="">
[00:25:20.692]      // if-block "canReadPins"
[00:25:20.692]        // =>  TRUE
[00:25:20.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:25:20.694]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:25:20.697]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:25:20.697]        // while-condition  =>  FALSE
[00:25:20.697]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:25:20.697]      </control>
[00:25:20.697]      // end if-block "canReadPins"
[00:25:20.697]    </control>
[00:25:20.697]    <control if="!canReadPins" while="" timeout="0" info="">
[00:25:20.697]      // if-block "!canReadPins"
[00:25:20.697]        // =>  FALSE
[00:25:20.697]      // skip if-block "!canReadPins"
[00:25:20.697]    </control>
[00:25:20.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:25:20.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:25:20.697]        // =>  TRUE
[00:25:20.697]      <block atomic="false" info="">
[00:25:20.697]        WriteAP(0x00, 0x190008);
[00:25:20.702]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:25:20.702]        WriteAP(0xF0, 0x01);
[00:25:20.705]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:25:20.705]      </block>
[00:25:20.705]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:25:20.705]    </control>
[00:25:20.705]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:25:20.705]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:25:20.705]        // =>  FALSE
[00:25:20.705]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:25:20.705]    </control>
[00:25:20.705]    <block atomic="false" info="">
[00:25:20.705]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:25:20.718]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:25:20.718]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:25:20.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:25:20.719]      __ap = 0; //lets make sure we reset the access point selection
[00:25:20.719]        // -> [__ap <= 0x00000000]
[00:25:20.719]    </block>
[00:25:20.719]  </sequence>
[00:25:20.719]  
[00:25:20.794]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:25:20.794]  
[00:25:20.794]  <debugvars>
[00:25:20.794]    // Pre-defined
[00:25:20.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:25:20.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:25:20.794]    __dp=0x00000000
[00:25:20.794]    __ap=0x00000000
[00:25:20.794]    __traceout=0x00000000      (Trace Disabled)
[00:25:20.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:25:20.794]    __FlashAddr=0x00000000
[00:25:20.794]    __FlashLen=0x00000000
[00:25:20.794]    __FlashArg=0x00000000
[00:25:20.794]    __FlashOp=0x00000000
[00:25:20.796]    __Result=0x00000000
[00:25:20.796]  </debugvars>
[00:25:20.796]  
[00:25:20.796]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:25:20.796]    <block atomic="false" info="">
[00:25:20.796]      __var deviceID = 0;
[00:25:20.796]        // -> [deviceID <= 0x00000000]
[00:25:20.796]      __var version = 0;
[00:25:20.796]        // -> [version <= 0x00000000]
[00:25:20.796]      __var partNum = 0;
[00:25:20.796]        // -> [partNum <= 0x00000000]
[00:25:20.796]      __var manuf = 0;
[00:25:20.796]        // -> [manuf <= 0x00000000]
[00:25:20.796]      __var isMSPM0G1X0X_G3X0X = 0;
[00:25:20.796]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:25:20.796]      __var isProduction = 0;
[00:25:20.796]        // -> [isProduction <= 0x00000000]
[00:25:20.796]      __var continueId = 0;
[00:25:20.796]        // -> [continueId <= 0x00000000]
[00:25:20.796]      deviceID =   Read32(0x41C40004);
[00:25:20.804]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:25:20.804]        // -> [deviceID <= 0x2BB8802F]
[00:25:20.804]      version = deviceID >> 28;
[00:25:20.804]        // -> [version <= 0x00000002]
[00:25:20.807]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:25:20.807]        // -> [partNum <= 0x0000BB88]
[00:25:20.807]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:25:20.807]        // -> [manuf <= 0x00000017]
[00:25:20.807]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:25:20.807]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:25:20.807]      isProduction = (version > 0);
[00:25:20.807]        // -> [isProduction <= 0x00000001]
[00:25:20.807]    </block>
[00:25:20.807]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:25:20.807]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:25:20.807]        // =>  FALSE
[00:25:20.807]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:25:20.807]    </control>
[00:25:20.807]    <control if="continueId == 4" while="" timeout="0" info="">
[00:25:20.807]      // if-block "continueId == 4"
[00:25:20.807]        // =>  FALSE
[00:25:20.807]      // skip if-block "continueId == 4"
[00:25:20.810]    </control>
[00:25:20.810]    <control if="!isProduction" while="" timeout="0" info="">
[00:25:20.810]      // if-block "!isProduction"
[00:25:20.810]        // =>  FALSE
[00:25:20.810]      // skip if-block "!isProduction"
[00:25:20.810]    </control>
[00:25:20.810]  </sequence>
[00:25:20.810]  
[00:26:18.198]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:26:18.198]  
[00:26:18.208]  <debugvars>
[00:26:18.208]    // Pre-defined
[00:26:18.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:26:18.208]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:26:18.208]    __dp=0x00000000
[00:26:18.208]    __ap=0x00000000
[00:26:18.208]    __traceout=0x00000000      (Trace Disabled)
[00:26:18.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:26:18.208]    __FlashAddr=0x00000000
[00:26:18.208]    __FlashLen=0x00000000
[00:26:18.208]    __FlashArg=0x00000000
[00:26:18.208]    __FlashOp=0x00000000
[00:26:18.208]    __Result=0x00000000
[00:26:18.208]  </debugvars>
[00:26:18.208]  
[00:26:18.208]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:26:18.208]    <block atomic="false" info="">
[00:26:18.208]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:26:18.208]        // -> [isSWJ <= 0x00000001]
[00:26:18.208]      __var hasDormant = __protocol & 0x00020000;
[00:26:18.208]        // -> [hasDormant <= 0x00000000]
[00:26:18.208]      __var protType   = __protocol & 0x0000FFFF;
[00:26:18.208]        // -> [protType <= 0x00000002]
[00:26:18.208]    </block>
[00:26:18.208]    <control if="protType == 1" while="" timeout="0" info="">
[00:26:18.208]      // if-block "protType == 1"
[00:26:18.208]        // =>  FALSE
[00:26:18.208]      // skip if-block "protType == 1"
[00:26:18.208]    </control>
[00:26:18.208]    <control if="protType == 2" while="" timeout="0" info="">
[00:26:18.208]      // if-block "protType == 2"
[00:26:18.208]        // =>  TRUE
[00:26:18.208]      <control if="isSWJ" while="" timeout="0" info="">
[00:26:18.208]        // if-block "isSWJ"
[00:26:18.208]          // =>  TRUE
[00:26:18.212]        <control if="hasDormant" while="" timeout="0" info="">
[00:26:18.212]          // if-block "hasDormant"
[00:26:18.212]            // =>  FALSE
[00:26:18.212]          // skip if-block "hasDormant"
[00:26:18.212]        </control>
[00:26:18.212]        <control if="!hasDormant" while="" timeout="0" info="">
[00:26:18.212]          // if-block "!hasDormant"
[00:26:18.212]            // =>  TRUE
[00:26:18.212]          <block atomic="false" info="">
[00:26:18.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:26:18.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:26:18.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:26:18.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:26:18.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:26:18.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:26:18.220]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:26:18.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:26:18.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:26:18.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:26:18.227]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:26:18.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:26:18.229]          </block>
[00:26:18.229]          // end if-block "!hasDormant"
[00:26:18.229]        </control>
[00:26:18.229]        // end if-block "isSWJ"
[00:26:18.229]      </control>
[00:26:18.229]      <control if="!isSWJ" while="" timeout="0" info="">
[00:26:18.229]        // if-block "!isSWJ"
[00:26:18.229]          // =>  FALSE
[00:26:18.229]        // skip if-block "!isSWJ"
[00:26:18.229]      </control>
[00:26:18.229]      <block atomic="false" info="">
[00:26:18.229]        ReadDP(0x0);
[00:26:18.229]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:26:18.229]      </block>
[00:26:18.229]      // end if-block "protType == 2"
[00:26:18.229]    </control>
[00:26:18.233]  </sequence>
[00:26:18.233]  
[00:26:18.235]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:26:18.235]  
[00:26:18.235]  <debugvars>
[00:26:18.235]    // Pre-defined
[00:26:18.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:26:18.235]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:26:18.235]    __dp=0x00000000
[00:26:18.235]    __ap=0x00000000
[00:26:18.235]    __traceout=0x00000000      (Trace Disabled)
[00:26:18.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:26:18.235]    __FlashAddr=0x00000000
[00:26:18.235]    __FlashLen=0x00000000
[00:26:18.235]    __FlashArg=0x00000000
[00:26:18.235]    __FlashOp=0x00000000
[00:26:18.235]    __Result=0x00000000
[00:26:18.235]  </debugvars>
[00:26:18.235]  
[00:26:18.237]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:26:18.237]    <block atomic="false" info="">
[00:26:18.237]      __var SW_DP_ABORT       = 0x0;
[00:26:18.237]        // -> [SW_DP_ABORT <= 0x00000000]
[00:26:18.237]      __var DP_CTRL_STAT      = 0x4;
[00:26:18.237]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:26:18.237]      __var DP_SELECT         = 0x8;
[00:26:18.237]        // -> [DP_SELECT <= 0x00000008]
[00:26:18.237]      __var powered_down      = 0;
[00:26:18.237]        // -> [powered_down <= 0x00000000]
[00:26:18.239]      WriteDP(DP_SELECT, 0x00000000);
[00:26:18.241]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:26:18.241]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:26:18.245]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:26:18.245]        // -> [powered_down <= 0x00000001]
[00:26:18.245]    </block>
[00:26:18.245]    <control if="powered_down" while="" timeout="0" info="">
[00:26:18.245]      // if-block "powered_down"
[00:26:18.245]        // =>  TRUE
[00:26:18.245]      <block atomic="false" info="">
[00:26:18.245]        Message(0, "Debug/System power-up request sent");
[00:26:18.245]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:26:18.249]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:26:18.249]      </block>
[00:26:18.249]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:26:18.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:26:18.254]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:26:18.254]        // while-condition  =>  FALSE
[00:26:18.255]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:26:18.255]      </control>
[00:26:18.255]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:26:18.255]        // if-block "(__protocol & 0xFFFF) == 1"
[00:26:18.255]          // =>  FALSE
[00:26:18.255]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:26:18.255]      </control>
[00:26:18.255]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:26:18.255]        // if-block "(__protocol & 0xFFFF) == 2"
[00:26:18.255]          // =>  TRUE
[00:26:18.255]        <block atomic="false" info="">
[00:26:18.255]          Message(0, "executing SWD power up");
[00:26:18.257]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:26:18.259]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:26:18.259]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:26:18.262]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:26:18.262]        </block>
[00:26:18.262]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:26:18.262]      </control>
[00:26:18.262]      // end if-block "powered_down"
[00:26:18.262]    </control>
[00:26:18.262]    <block atomic="false" info="">
[00:26:18.262]      __var DEBUG_PORT_VAL    = 0;
[00:26:18.262]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:26:18.262]      __var ACCESS_POINT_VAL  = 0;
[00:26:18.262]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:26:18.262]      __ap = 1; 
[00:26:18.262]        // -> [__ap <= 0x00000001]
[00:26:18.262]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:26:18.267]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:26:18.267]      __ap = 4;
[00:26:18.267]        // -> [__ap <= 0x00000004]
[00:26:18.267]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:26:18.271]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:26:18.271]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:26:18.271]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:26:18.273]    </block>
[00:26:18.273]    <block atomic="false" info="">
[00:26:18.273]      __var nReset = 0x80;
[00:26:18.273]        // -> [nReset <= 0x00000080]
[00:26:18.273]      __var canReadPins = 0;
[00:26:18.273]        // -> [canReadPins <= 0x00000000]
[00:26:18.273]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:26:18.275]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:26:18.275]        // -> [canReadPins <= 0x00000001]
[00:26:18.275]    </block>
[00:26:18.275]    <control if="" while="1" timeout="200" info="">
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.275]      // while "1"  (timeout="200")
[00:26:18.275]      // while-condition  =>  TRUE
[00:26:18.278]      // while "1"  (timeout="200")
[00:26:18.278]      // while-condition  =>  TRUE
[00:26:18.278]      // while "1"  (timeout="200")
[00:26:18.278]      // while-condition  =>  TRUE
[00:26:18.278]      // while "1"  (timeout="200")
[00:26:18.278]      // while-condition  =>  TRUE
[00:26:18.278]      // while "1"  (timeout="200")
[00:26:18.278]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.279]      // while "1"  (timeout="200")
[00:26:18.279]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.280]      // while-condition  =>  TRUE
[00:26:18.280]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.282]      // while "1"  (timeout="200")
[00:26:18.282]      // while-condition  =>  TRUE
[00:26:18.284]      // while "1"  (timeout="200")
[00:26:18.284]      // while-condition  =>  TRUE
[00:26:18.284]      // while "1"  (timeout="200")
[00:26:18.284]      // while-condition  =>  TRUE
[00:26:18.284]      // while "1"  (timeout="200")
[00:26:18.284]      // while-condition  =>  TRUE
[00:26:18.284]      // while "1"  (timeout="200")
[00:26:18.284]      // while-condition  =>  TRUE
[00:26:18.284]      // while "1"  (timeout="200")
[00:26:18.284]      // while-condition  =>  TRUE
[00:26:18.285]      // while "1"  (timeout="200")
[00:26:18.285]      // while  =>  TIMEOUT
[00:26:18.285]      // end while "1"
[00:26:18.285]    </control>
[00:26:18.285]    <control if="canReadPins" while="" timeout="0" info="">
[00:26:18.285]      // if-block "canReadPins"
[00:26:18.285]        // =>  TRUE
[00:26:18.285]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:26:18.285]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:26:18.287]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:26:18.287]        // while-condition  =>  FALSE
[00:26:18.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:26:18.287]      </control>
[00:26:18.287]      // end if-block "canReadPins"
[00:26:18.287]    </control>
[00:26:18.287]    <control if="!canReadPins" while="" timeout="0" info="">
[00:26:18.287]      // if-block "!canReadPins"
[00:26:18.287]        // =>  FALSE
[00:26:18.287]      // skip if-block "!canReadPins"
[00:26:18.289]    </control>
[00:26:18.289]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:26:18.289]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:26:18.289]        // =>  TRUE
[00:26:18.289]      <block atomic="false" info="">
[00:26:18.289]        WriteAP(0x00, 0x190008);
[00:26:18.290]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:26:18.290]        WriteAP(0xF0, 0x01);
[00:26:18.301]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:26:18.303]      </block>
[00:26:18.303]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:26:18.303]    </control>
[00:26:18.303]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:26:18.303]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:26:18.303]        // =>  FALSE
[00:26:18.303]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:26:18.303]    </control>
[00:26:18.303]    <block atomic="false" info="">
[00:26:18.303]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:26:18.309]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:26:18.309]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:26:18.309]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:26:18.311]      __ap = 0; //lets make sure we reset the access point selection
[00:26:18.312]        // -> [__ap <= 0x00000000]
[00:26:18.312]    </block>
[00:26:18.312]  </sequence>
[00:26:18.312]  
[00:26:18.340]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:26:18.340]  
[00:26:18.340]  <debugvars>
[00:26:18.340]    // Pre-defined
[00:26:18.340]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:26:18.340]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:26:18.340]    __dp=0x00000000
[00:26:18.340]    __ap=0x00000000
[00:26:18.340]    __traceout=0x00000000      (Trace Disabled)
[00:26:18.340]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:26:18.340]    __FlashAddr=0x00000000
[00:26:18.340]    __FlashLen=0x00000000
[00:26:18.340]    __FlashArg=0x00000000
[00:26:18.345]    __FlashOp=0x00000000
[00:26:18.345]    __Result=0x00000000
[00:26:18.345]  </debugvars>
[00:26:18.345]  
[00:26:18.345]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:26:18.345]    <block atomic="false" info="">
[00:26:18.345]      __var deviceID = 0;
[00:26:18.345]        // -> [deviceID <= 0x00000000]
[00:26:18.345]      __var version = 0;
[00:26:18.345]        // -> [version <= 0x00000000]
[00:26:18.345]      __var partNum = 0;
[00:26:18.345]        // -> [partNum <= 0x00000000]
[00:26:18.346]      __var manuf = 0;
[00:26:18.346]        // -> [manuf <= 0x00000000]
[00:26:18.346]      __var isMSPM0G1X0X_G3X0X = 0;
[00:26:18.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:26:18.346]      __var isProduction = 0;
[00:26:18.346]        // -> [isProduction <= 0x00000000]
[00:26:18.346]      __var continueId = 0;
[00:26:18.346]        // -> [continueId <= 0x00000000]
[00:26:18.346]      deviceID =   Read32(0x41C40004);
[00:26:18.353]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:26:18.353]        // -> [deviceID <= 0x2BB8802F]
[00:26:18.353]      version = deviceID >> 28;
[00:26:18.353]        // -> [version <= 0x00000002]
[00:26:18.353]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:26:18.353]        // -> [partNum <= 0x0000BB88]
[00:26:18.353]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:26:18.353]        // -> [manuf <= 0x00000017]
[00:26:18.353]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:26:18.353]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:26:18.353]      isProduction = (version > 0);
[00:26:18.353]        // -> [isProduction <= 0x00000001]
[00:26:18.353]    </block>
[00:26:18.353]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:26:18.353]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:26:18.353]        // =>  FALSE
[00:26:18.353]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:26:18.353]    </control>
[00:26:18.355]    <control if="continueId == 4" while="" timeout="0" info="">
[00:26:18.355]      // if-block "continueId == 4"
[00:26:18.355]        // =>  FALSE
[00:26:18.355]      // skip if-block "continueId == 4"
[00:26:18.355]    </control>
[00:26:18.355]    <control if="!isProduction" while="" timeout="0" info="">
[00:26:18.355]      // if-block "!isProduction"
[00:26:18.355]        // =>  FALSE
[00:26:18.355]      // skip if-block "!isProduction"
[00:26:18.355]    </control>
[00:26:18.355]  </sequence>
[00:26:18.355]  
[00:28:20.084]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:28:20.084]  
[00:28:20.092]  <debugvars>
[00:28:20.092]    // Pre-defined
[00:28:20.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:28:20.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:28:20.092]    __dp=0x00000000
[00:28:20.092]    __ap=0x00000000
[00:28:20.092]    __traceout=0x00000000      (Trace Disabled)
[00:28:20.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:28:20.092]    __FlashAddr=0x00000000
[00:28:20.092]    __FlashLen=0x00000000
[00:28:20.092]    __FlashArg=0x00000000
[00:28:20.092]    __FlashOp=0x00000000
[00:28:20.092]    __Result=0x00000000
[00:28:20.092]  </debugvars>
[00:28:20.092]  
[00:28:20.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:28:20.092]    <block atomic="false" info="">
[00:28:20.092]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:28:20.092]        // -> [isSWJ <= 0x00000001]
[00:28:20.092]      __var hasDormant = __protocol & 0x00020000;
[00:28:20.092]        // -> [hasDormant <= 0x00000000]
[00:28:20.092]      __var protType   = __protocol & 0x0000FFFF;
[00:28:20.092]        // -> [protType <= 0x00000002]
[00:28:20.095]    </block>
[00:28:20.095]    <control if="protType == 1" while="" timeout="0" info="">
[00:28:20.095]      // if-block "protType == 1"
[00:28:20.095]        // =>  FALSE
[00:28:20.095]      // skip if-block "protType == 1"
[00:28:20.095]    </control>
[00:28:20.095]    <control if="protType == 2" while="" timeout="0" info="">
[00:28:20.095]      // if-block "protType == 2"
[00:28:20.095]        // =>  TRUE
[00:28:20.095]      <control if="isSWJ" while="" timeout="0" info="">
[00:28:20.095]        // if-block "isSWJ"
[00:28:20.096]          // =>  TRUE
[00:28:20.096]        <control if="hasDormant" while="" timeout="0" info="">
[00:28:20.096]          // if-block "hasDormant"
[00:28:20.096]            // =>  FALSE
[00:28:20.096]          // skip if-block "hasDormant"
[00:28:20.096]        </control>
[00:28:20.096]        <control if="!hasDormant" while="" timeout="0" info="">
[00:28:20.096]          // if-block "!hasDormant"
[00:28:20.096]            // =>  TRUE
[00:28:20.096]          <block atomic="false" info="">
[00:28:20.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:28:20.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:28:20.101]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:28:20.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:28:20.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:28:20.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:28:20.106]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:28:20.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:28:20.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:28:20.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:28:20.111]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:28:20.111]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:28:20.111]          </block>
[00:28:20.111]          // end if-block "!hasDormant"
[00:28:20.111]        </control>
[00:28:20.111]        // end if-block "isSWJ"
[00:28:20.111]      </control>
[00:28:20.114]      <control if="!isSWJ" while="" timeout="0" info="">
[00:28:20.114]        // if-block "!isSWJ"
[00:28:20.114]          // =>  FALSE
[00:28:20.114]        // skip if-block "!isSWJ"
[00:28:20.114]      </control>
[00:28:20.114]      <block atomic="false" info="">
[00:28:20.114]        ReadDP(0x0);
[00:28:20.116]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:28:20.116]      </block>
[00:28:20.116]      // end if-block "protType == 2"
[00:28:20.116]    </control>
[00:28:20.116]  </sequence>
[00:28:20.116]  
[00:28:20.120]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:28:20.120]  
[00:28:20.120]  <debugvars>
[00:28:20.120]    // Pre-defined
[00:28:20.120]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:28:20.120]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:28:20.120]    __dp=0x00000000
[00:28:20.120]    __ap=0x00000000
[00:28:20.120]    __traceout=0x00000000      (Trace Disabled)
[00:28:20.120]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:28:20.120]    __FlashAddr=0x00000000
[00:28:20.120]    __FlashLen=0x00000000
[00:28:20.120]    __FlashArg=0x00000000
[00:28:20.120]    __FlashOp=0x00000000
[00:28:20.120]    __Result=0x00000000
[00:28:20.124]  </debugvars>
[00:28:20.124]  
[00:28:20.124]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:28:20.124]    <block atomic="false" info="">
[00:28:20.124]      __var SW_DP_ABORT       = 0x0;
[00:28:20.124]        // -> [SW_DP_ABORT <= 0x00000000]
[00:28:20.124]      __var DP_CTRL_STAT      = 0x4;
[00:28:20.124]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:28:20.124]      __var DP_SELECT         = 0x8;
[00:28:20.124]        // -> [DP_SELECT <= 0x00000008]
[00:28:20.125]      __var powered_down      = 0;
[00:28:20.125]        // -> [powered_down <= 0x00000000]
[00:28:20.125]      WriteDP(DP_SELECT, 0x00000000);
[00:28:20.125]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:28:20.125]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:28:20.127]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:28:20.127]        // -> [powered_down <= 0x00000001]
[00:28:20.127]    </block>
[00:28:20.127]    <control if="powered_down" while="" timeout="0" info="">
[00:28:20.127]      // if-block "powered_down"
[00:28:20.127]        // =>  TRUE
[00:28:20.127]      <block atomic="false" info="">
[00:28:20.127]        Message(0, "Debug/System power-up request sent");
[00:28:20.130]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:28:20.133]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:28:20.133]      </block>
[00:28:20.133]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:28:20.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:28:20.133]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:28:20.136]        // while-condition  =>  FALSE
[00:28:20.136]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:28:20.136]      </control>
[00:28:20.136]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:28:20.136]        // if-block "(__protocol & 0xFFFF) == 1"
[00:28:20.136]          // =>  FALSE
[00:28:20.136]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:28:20.136]      </control>
[00:28:20.136]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:28:20.136]        // if-block "(__protocol & 0xFFFF) == 2"
[00:28:20.136]          // =>  TRUE
[00:28:20.136]        <block atomic="false" info="">
[00:28:20.136]          Message(0, "executing SWD power up");
[00:28:20.137]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:28:20.140]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:28:20.140]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:28:20.142]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:28:20.142]        </block>
[00:28:20.142]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:28:20.142]      </control>
[00:28:20.142]      // end if-block "powered_down"
[00:28:20.142]    </control>
[00:28:20.142]    <block atomic="false" info="">
[00:28:20.142]      __var DEBUG_PORT_VAL    = 0;
[00:28:20.142]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:28:20.142]      __var ACCESS_POINT_VAL  = 0;
[00:28:20.142]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:28:20.142]      __ap = 1; 
[00:28:20.142]        // -> [__ap <= 0x00000001]
[00:28:20.142]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:28:20.148]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:28:20.148]      __ap = 4;
[00:28:20.148]        // -> [__ap <= 0x00000004]
[00:28:20.148]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:28:20.152]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:28:20.152]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:28:20.152]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:28:20.156]    </block>
[00:28:20.156]    <block atomic="false" info="">
[00:28:20.156]      __var nReset = 0x80;
[00:28:20.156]        // -> [nReset <= 0x00000080]
[00:28:20.157]      __var canReadPins = 0;
[00:28:20.157]        // -> [canReadPins <= 0x00000000]
[00:28:20.157]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:28:20.161]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:28:20.161]        // -> [canReadPins <= 0x00000001]
[00:28:20.161]    </block>
[00:28:20.161]    <control if="" while="1" timeout="200" info="">
[00:28:20.161]      // while "1"  (timeout="200")
[00:28:20.161]      // while-condition  =>  TRUE
[00:28:20.161]      // while "1"  (timeout="200")
[00:28:20.161]      // while-condition  =>  TRUE
[00:28:20.161]      // while "1"  (timeout="200")
[00:28:20.161]      // while-condition  =>  TRUE
[00:28:20.161]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.162]      // while-condition  =>  TRUE
[00:28:20.162]      // while "1"  (timeout="200")
[00:28:20.163]      // while-condition  =>  TRUE
[00:28:20.163]      // while "1"  (timeout="200")
[00:28:20.163]      // while-condition  =>  TRUE
[00:28:20.163]      // while "1"  (timeout="200")
[00:28:20.163]      // while-condition  =>  TRUE
[00:28:20.163]      // while "1"  (timeout="200")
[00:28:20.163]      // while-condition  =>  TRUE
[00:28:20.163]      // while "1"  (timeout="200")
[00:28:20.163]      // while-condition  =>  TRUE
[00:28:20.163]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.164]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.164]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.164]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.164]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.164]      // while "1"  (timeout="200")
[00:28:20.164]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.166]      // while "1"  (timeout="200")
[00:28:20.166]      // while-condition  =>  TRUE
[00:28:20.168]      // while "1"  (timeout="200")
[00:28:20.168]      // while-condition  =>  TRUE
[00:28:20.168]      // while "1"  (timeout="200")
[00:28:20.168]      // while-condition  =>  TRUE
[00:28:20.168]      // while "1"  (timeout="200")
[00:28:20.168]      // while-condition  =>  TRUE
[00:28:20.168]      // while "1"  (timeout="200")
[00:28:20.168]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.169]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.169]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.169]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.169]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.169]      // while-condition  =>  TRUE
[00:28:20.169]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.170]      // while "1"  (timeout="200")
[00:28:20.170]      // while-condition  =>  TRUE
[00:28:20.171]      // while "1"  (timeout="200")
[00:28:20.171]      // while-condition  =>  TRUE
[00:28:20.171]      // while "1"  (timeout="200")
[00:28:20.171]      // while-condition  =>  TRUE
[00:28:20.171]      // while "1"  (timeout="200")
[00:28:20.171]      // while-condition  =>  TRUE
[00:28:20.171]      // while "1"  (timeout="200")
[00:28:20.171]      // while-condition  =>  TRUE
[00:28:20.171]      // while "1"  (timeout="200")
[00:28:20.171]      // while-condition  =>  TRUE
[00:28:20.173]      // while "1"  (timeout="200")
[00:28:20.173]      // while-condition  =>  TRUE
[00:28:20.173]      // while "1"  (timeout="200")
[00:28:20.173]      // while-condition  =>  TRUE
[00:28:20.173]      // while "1"  (timeout="200")
[00:28:20.173]      // while-condition  =>  TRUE
[00:28:20.173]      // while "1"  (timeout="200")
[00:28:20.173]      // while-condition  =>  TRUE
[00:28:20.173]      // while "1"  (timeout="200")
[00:28:20.173]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.174]      // while "1"  (timeout="200")
[00:28:20.174]      // while-condition  =>  TRUE
[00:28:20.176]      // while "1"  (timeout="200")
[00:28:20.176]      // while  =>  TIMEOUT
[00:28:20.176]      // end while "1"
[00:28:20.176]    </control>
[00:28:20.176]    <control if="canReadPins" while="" timeout="0" info="">
[00:28:20.176]      // if-block "canReadPins"
[00:28:20.176]        // =>  TRUE
[00:28:20.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:28:20.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:28:20.177]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:28:20.177]        // while-condition  =>  FALSE
[00:28:20.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:28:20.177]      </control>
[00:28:20.177]      // end if-block "canReadPins"
[00:28:20.177]    </control>
[00:28:20.177]    <control if="!canReadPins" while="" timeout="0" info="">
[00:28:20.177]      // if-block "!canReadPins"
[00:28:20.177]        // =>  FALSE
[00:28:20.177]      // skip if-block "!canReadPins"
[00:28:20.177]    </control>
[00:28:20.177]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:28:20.177]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:28:20.177]        // =>  TRUE
[00:28:20.177]      <block atomic="false" info="">
[00:28:20.180]        WriteAP(0x00, 0x190008);
[00:28:20.180]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:28:20.180]        WriteAP(0xF0, 0x01);
[00:28:20.184]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:28:20.184]      </block>
[00:28:20.184]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:28:20.184]    </control>
[00:28:20.184]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:28:20.184]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:28:20.184]        // =>  FALSE
[00:28:20.184]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:28:20.184]    </control>
[00:28:20.184]    <block atomic="false" info="">
[00:28:20.184]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:28:20.188]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:28:20.188]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:28:20.188]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:28:20.189]      __ap = 0; //lets make sure we reset the access point selection
[00:28:20.189]        // -> [__ap <= 0x00000000]
[00:28:20.189]    </block>
[00:28:20.189]  </sequence>
[00:28:20.189]  
[00:28:20.211]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:28:20.211]  
[00:28:20.211]  <debugvars>
[00:28:20.211]    // Pre-defined
[00:28:20.214]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:28:20.214]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:28:20.214]    __dp=0x00000000
[00:28:20.214]    __ap=0x00000000
[00:28:20.214]    __traceout=0x00000000      (Trace Disabled)
[00:28:20.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:28:20.214]    __FlashAddr=0x00000000
[00:28:20.214]    __FlashLen=0x00000000
[00:28:20.214]    __FlashArg=0x00000000
[00:28:20.214]    __FlashOp=0x00000000
[00:28:20.214]    __Result=0x00000000
[00:28:20.214]  </debugvars>
[00:28:20.215]  
[00:28:20.215]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:28:20.215]    <block atomic="false" info="">
[00:28:20.215]      __var deviceID = 0;
[00:28:20.215]        // -> [deviceID <= 0x00000000]
[00:28:20.215]      __var version = 0;
[00:28:20.215]        // -> [version <= 0x00000000]
[00:28:20.215]      __var partNum = 0;
[00:28:20.215]        // -> [partNum <= 0x00000000]
[00:28:20.215]      __var manuf = 0;
[00:28:20.215]        // -> [manuf <= 0x00000000]
[00:28:20.215]      __var isMSPM0G1X0X_G3X0X = 0;
[00:28:20.215]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:28:20.216]      __var isProduction = 0;
[00:28:20.216]        // -> [isProduction <= 0x00000000]
[00:28:20.216]      __var continueId = 0;
[00:28:20.216]        // -> [continueId <= 0x00000000]
[00:28:20.216]      deviceID =   Read32(0x41C40004);
[00:28:20.222]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:28:20.222]        // -> [deviceID <= 0x2BB8802F]
[00:28:20.222]      version = deviceID >> 28;
[00:28:20.222]        // -> [version <= 0x00000002]
[00:28:20.222]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:28:20.222]        // -> [partNum <= 0x0000BB88]
[00:28:20.222]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:28:20.222]        // -> [manuf <= 0x00000017]
[00:28:20.222]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:28:20.222]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:28:20.222]      isProduction = (version > 0);
[00:28:20.222]        // -> [isProduction <= 0x00000001]
[00:28:20.222]    </block>
[00:28:20.222]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:28:20.222]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:28:20.222]        // =>  FALSE
[00:28:20.222]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:28:20.222]    </control>
[00:28:20.222]    <control if="continueId == 4" while="" timeout="0" info="">
[00:28:20.222]      // if-block "continueId == 4"
[00:28:20.222]        // =>  FALSE
[00:28:20.222]      // skip if-block "continueId == 4"
[00:28:20.222]    </control>
[00:28:20.226]    <control if="!isProduction" while="" timeout="0" info="">
[00:28:20.226]      // if-block "!isProduction"
[00:28:20.226]        // =>  FALSE
[00:28:20.226]      // skip if-block "!isProduction"
[00:28:20.226]    </control>
[00:28:20.226]  </sequence>
[00:28:20.226]  
[00:30:58.264]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:30:58.264]  
[00:30:58.276]  <debugvars>
[00:30:58.276]    // Pre-defined
[00:30:58.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:58.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:58.276]    __dp=0x00000000
[00:30:58.277]    __ap=0x00000000
[00:30:58.277]    __traceout=0x00000000      (Trace Disabled)
[00:30:58.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:58.277]    __FlashAddr=0x00000000
[00:30:58.277]    __FlashLen=0x00000000
[00:30:58.277]    __FlashArg=0x00000000
[00:30:58.277]    __FlashOp=0x00000000
[00:30:58.277]    __Result=0x00000000
[00:30:58.277]  </debugvars>
[00:30:58.277]  
[00:30:58.277]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:30:58.277]    <block atomic="false" info="">
[00:30:58.277]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:30:58.277]        // -> [isSWJ <= 0x00000001]
[00:30:58.277]      __var hasDormant = __protocol & 0x00020000;
[00:30:58.277]        // -> [hasDormant <= 0x00000000]
[00:30:58.277]      __var protType   = __protocol & 0x0000FFFF;
[00:30:58.277]        // -> [protType <= 0x00000002]
[00:30:58.277]    </block>
[00:30:58.277]    <control if="protType == 1" while="" timeout="0" info="">
[00:30:58.277]      // if-block "protType == 1"
[00:30:58.277]        // =>  FALSE
[00:30:58.277]      // skip if-block "protType == 1"
[00:30:58.277]    </control>
[00:30:58.277]    <control if="protType == 2" while="" timeout="0" info="">
[00:30:58.277]      // if-block "protType == 2"
[00:30:58.277]        // =>  TRUE
[00:30:58.281]      <control if="isSWJ" while="" timeout="0" info="">
[00:30:58.281]        // if-block "isSWJ"
[00:30:58.281]          // =>  TRUE
[00:30:58.281]        <control if="hasDormant" while="" timeout="0" info="">
[00:30:58.281]          // if-block "hasDormant"
[00:30:58.281]            // =>  FALSE
[00:30:58.281]          // skip if-block "hasDormant"
[00:30:58.281]        </control>
[00:30:58.281]        <control if="!hasDormant" while="" timeout="0" info="">
[00:30:58.281]          // if-block "!hasDormant"
[00:30:58.281]            // =>  TRUE
[00:30:58.281]          <block atomic="false" info="">
[00:30:58.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:30:58.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:58.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:30:58.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:30:58.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:30:58.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:58.285]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:30:58.292]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:30:58.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:30:58.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:58.294]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:30:58.295]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:30:58.295]          </block>
[00:30:58.295]          // end if-block "!hasDormant"
[00:30:58.295]        </control>
[00:30:58.295]        // end if-block "isSWJ"
[00:30:58.295]      </control>
[00:30:58.295]      <control if="!isSWJ" while="" timeout="0" info="">
[00:30:58.295]        // if-block "!isSWJ"
[00:30:58.295]          // =>  FALSE
[00:30:58.295]        // skip if-block "!isSWJ"
[00:30:58.297]      </control>
[00:30:58.297]      <block atomic="false" info="">
[00:30:58.297]        ReadDP(0x0);
[00:30:58.307]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:30:58.307]      </block>
[00:30:58.307]      // end if-block "protType == 2"
[00:30:58.307]    </control>
[00:30:58.307]  </sequence>
[00:30:58.307]  
[00:30:58.310]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:30:58.310]  
[00:30:58.310]  <debugvars>
[00:30:58.310]    // Pre-defined
[00:30:58.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:58.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:58.310]    __dp=0x00000000
[00:30:58.310]    __ap=0x00000000
[00:30:58.310]    __traceout=0x00000000      (Trace Disabled)
[00:30:58.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:58.310]    __FlashAddr=0x00000000
[00:30:58.313]    __FlashLen=0x00000000
[00:30:58.313]    __FlashArg=0x00000000
[00:30:58.313]    __FlashOp=0x00000000
[00:30:58.313]    __Result=0x00000000
[00:30:58.313]  </debugvars>
[00:30:58.313]  
[00:30:58.313]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:30:58.313]    <block atomic="false" info="">
[00:30:58.313]      __var SW_DP_ABORT       = 0x0;
[00:30:58.313]        // -> [SW_DP_ABORT <= 0x00000000]
[00:30:58.313]      __var DP_CTRL_STAT      = 0x4;
[00:30:58.313]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:30:58.313]      __var DP_SELECT         = 0x8;
[00:30:58.313]        // -> [DP_SELECT <= 0x00000008]
[00:30:58.313]      __var powered_down      = 0;
[00:30:58.313]        // -> [powered_down <= 0x00000000]
[00:30:58.313]      WriteDP(DP_SELECT, 0x00000000);
[00:30:58.319]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:30:58.319]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:30:58.321]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:30:58.321]        // -> [powered_down <= 0x00000001]
[00:30:58.321]    </block>
[00:30:58.321]    <control if="powered_down" while="" timeout="0" info="">
[00:30:58.321]      // if-block "powered_down"
[00:30:58.321]        // =>  TRUE
[00:30:58.321]      <block atomic="false" info="">
[00:30:58.321]        Message(0, "Debug/System power-up request sent");
[00:30:58.325]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:30:58.325]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:30:58.325]      </block>
[00:30:58.325]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:30:58.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:30:58.329]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:30:58.329]        // while-condition  =>  FALSE
[00:30:58.329]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:30:58.329]      </control>
[00:30:58.329]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:30:58.329]        // if-block "(__protocol & 0xFFFF) == 1"
[00:30:58.329]          // =>  FALSE
[00:30:58.329]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:30:58.329]      </control>
[00:30:58.329]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:30:58.329]        // if-block "(__protocol & 0xFFFF) == 2"
[00:30:58.329]          // =>  TRUE
[00:30:58.329]        <block atomic="false" info="">
[00:30:58.329]          Message(0, "executing SWD power up");
[00:30:58.331]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:30:58.333]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:30:58.333]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:30:58.333]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:30:58.333]        </block>
[00:30:58.337]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:30:58.337]      </control>
[00:30:58.337]      // end if-block "powered_down"
[00:30:58.337]    </control>
[00:30:58.337]    <block atomic="false" info="">
[00:30:58.337]      __var DEBUG_PORT_VAL    = 0;
[00:30:58.337]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:30:58.337]      __var ACCESS_POINT_VAL  = 0;
[00:30:58.337]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:30:58.337]      __ap = 1; 
[00:30:58.337]        // -> [__ap <= 0x00000001]
[00:30:58.337]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:30:58.341]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:30:58.341]      __ap = 4;
[00:30:58.341]        // -> [__ap <= 0x00000004]
[00:30:58.341]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:58.351]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:30:58.351]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:30:58.353]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:58.354]    </block>
[00:30:58.354]    <block atomic="false" info="">
[00:30:58.354]      __var nReset = 0x80;
[00:30:58.354]        // -> [nReset <= 0x00000080]
[00:30:58.354]      __var canReadPins = 0;
[00:30:58.354]        // -> [canReadPins <= 0x00000000]
[00:30:58.354]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:30:58.360]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:30:58.360]        // -> [canReadPins <= 0x00000001]
[00:30:58.361]    </block>
[00:30:58.361]    <control if="" while="1" timeout="200" info="">
[00:30:58.361]      // while "1"  (timeout="200")
[00:30:58.361]      // while-condition  =>  TRUE
[00:30:58.361]      // while "1"  (timeout="200")
[00:30:58.361]      // while-condition  =>  TRUE
[00:30:58.361]      // while "1"  (timeout="200")
[00:30:58.361]      // while-condition  =>  TRUE
[00:30:58.361]      // while "1"  (timeout="200")
[00:30:58.363]      // while-condition  =>  TRUE
[00:30:58.363]      // while "1"  (timeout="200")
[00:30:58.363]      // while-condition  =>  TRUE
[00:30:58.363]      // while "1"  (timeout="200")
[00:30:58.363]      // while-condition  =>  TRUE
[00:30:58.363]      // while "1"  (timeout="200")
[00:30:58.363]      // while-condition  =>  TRUE
[00:30:58.363]      // while "1"  (timeout="200")
[00:30:58.363]      // while-condition  =>  TRUE
[00:30:58.363]      // while "1"  (timeout="200")
[00:30:58.364]      // while-condition  =>  TRUE
[00:30:58.364]      // while "1"  (timeout="200")
[00:30:58.364]      // while  =>  TIMEOUT
[00:30:58.364]      // end while "1"
[00:30:58.364]    </control>
[00:30:58.364]    <control if="canReadPins" while="" timeout="0" info="">
[00:30:58.364]      // if-block "canReadPins"
[00:30:58.364]        // =>  TRUE
[00:30:58.364]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:30:58.364]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:30:58.367]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:30:58.367]        // while-condition  =>  FALSE
[00:30:58.367]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:30:58.367]      </control>
[00:30:58.367]      // end if-block "canReadPins"
[00:30:58.367]    </control>
[00:30:58.367]    <control if="!canReadPins" while="" timeout="0" info="">
[00:30:58.368]      // if-block "!canReadPins"
[00:30:58.368]        // =>  FALSE
[00:30:58.368]      // skip if-block "!canReadPins"
[00:30:58.368]    </control>
[00:30:58.368]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:30:58.368]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:58.368]        // =>  TRUE
[00:30:58.368]      <block atomic="false" info="">
[00:30:58.368]        WriteAP(0x00, 0x190008);
[00:30:58.371]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:58.372]        WriteAP(0xF0, 0x01);
[00:30:58.380]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:58.380]      </block>
[00:30:58.380]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:58.380]    </control>
[00:30:58.380]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:30:58.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:58.380]        // =>  FALSE
[00:30:58.380]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:58.380]    </control>
[00:30:58.383]    <block atomic="false" info="">
[00:30:58.383]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:58.384]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:30:58.384]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:30:58.384]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:58.384]      __ap = 0; //lets make sure we reset the access point selection
[00:30:58.388]        // -> [__ap <= 0x00000000]
[00:30:58.388]    </block>
[00:30:58.388]  </sequence>
[00:30:58.388]  
[00:30:58.418]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:30:58.418]  
[00:30:58.418]  <debugvars>
[00:30:58.418]    // Pre-defined
[00:30:58.418]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:58.418]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:58.418]    __dp=0x00000000
[00:30:58.418]    __ap=0x00000000
[00:30:58.418]    __traceout=0x00000000      (Trace Disabled)
[00:30:58.418]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:58.418]    __FlashAddr=0x00000000
[00:30:58.418]    __FlashLen=0x00000000
[00:30:58.418]    __FlashArg=0x00000000
[00:30:58.418]    __FlashOp=0x00000000
[00:30:58.418]    __Result=0x00000000
[00:30:58.418]  </debugvars>
[00:30:58.418]  
[00:30:58.418]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:30:58.418]    <block atomic="false" info="">
[00:30:58.418]      __var deviceID = 0;
[00:30:58.418]        // -> [deviceID <= 0x00000000]
[00:30:58.418]      __var version = 0;
[00:30:58.418]        // -> [version <= 0x00000000]
[00:30:58.418]      __var partNum = 0;
[00:30:58.418]        // -> [partNum <= 0x00000000]
[00:30:58.418]      __var manuf = 0;
[00:30:58.418]        // -> [manuf <= 0x00000000]
[00:30:58.418]      __var isMSPM0G1X0X_G3X0X = 0;
[00:30:58.421]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:30:58.421]      __var isProduction = 0;
[00:30:58.421]        // -> [isProduction <= 0x00000000]
[00:30:58.421]      __var continueId = 0;
[00:30:58.421]        // -> [continueId <= 0x00000000]
[00:30:58.421]      deviceID =   Read32(0x41C40004);
[00:30:58.429]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:30:58.429]        // -> [deviceID <= 0x2BB8802F]
[00:30:58.429]      version = deviceID >> 28;
[00:30:58.429]        // -> [version <= 0x00000002]
[00:30:58.429]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:30:58.429]        // -> [partNum <= 0x0000BB88]
[00:30:58.429]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:30:58.429]        // -> [manuf <= 0x00000017]
[00:30:58.430]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:30:58.430]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:30:58.430]      isProduction = (version > 0);
[00:30:58.430]        // -> [isProduction <= 0x00000001]
[00:30:58.430]    </block>
[00:30:58.431]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:30:58.431]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:30:58.431]        // =>  FALSE
[00:30:58.431]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:30:58.431]    </control>
[00:30:58.431]    <control if="continueId == 4" while="" timeout="0" info="">
[00:30:58.431]      // if-block "continueId == 4"
[00:30:58.431]        // =>  FALSE
[00:30:58.431]      // skip if-block "continueId == 4"
[00:30:58.431]    </control>
[00:30:58.431]    <control if="!isProduction" while="" timeout="0" info="">
[00:30:58.431]      // if-block "!isProduction"
[00:30:58.431]        // =>  FALSE
[00:30:58.431]      // skip if-block "!isProduction"
[00:30:58.431]    </control>
[00:30:58.431]  </sequence>
[00:30:58.431]  
[00:31:37.558]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:31:37.558]  
[00:31:37.567]  <debugvars>
[00:31:37.567]    // Pre-defined
[00:31:37.567]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.567]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.567]    __dp=0x00000000
[00:31:37.567]    __ap=0x00000000
[00:31:37.567]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.567]    __FlashAddr=0x00000000
[00:31:37.567]    __FlashLen=0x00000000
[00:31:37.567]    __FlashArg=0x00000000
[00:31:37.567]    __FlashOp=0x00000000
[00:31:37.567]    __Result=0x00000000
[00:31:37.567]  </debugvars>
[00:31:37.567]  
[00:31:37.567]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:37.567]    <block atomic="false" info="">
[00:31:37.567]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:37.569]        // -> [isSWJ <= 0x00000001]
[00:31:37.569]      __var hasDormant = __protocol & 0x00020000;
[00:31:37.569]        // -> [hasDormant <= 0x00000000]
[00:31:37.569]      __var protType   = __protocol & 0x0000FFFF;
[00:31:37.569]        // -> [protType <= 0x00000002]
[00:31:37.569]    </block>
[00:31:37.569]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:37.569]      // if-block "protType == 1"
[00:31:37.569]        // =>  FALSE
[00:31:37.569]      // skip if-block "protType == 1"
[00:31:37.569]    </control>
[00:31:37.569]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:37.569]      // if-block "protType == 2"
[00:31:37.569]        // =>  TRUE
[00:31:37.571]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:37.571]        // if-block "isSWJ"
[00:31:37.571]          // =>  TRUE
[00:31:37.571]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:37.571]          // if-block "hasDormant"
[00:31:37.571]            // =>  FALSE
[00:31:37.571]          // skip if-block "hasDormant"
[00:31:37.571]        </control>
[00:31:37.571]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:37.572]          // if-block "!hasDormant"
[00:31:37.572]            // =>  TRUE
[00:31:37.572]          <block atomic="false" info="">
[00:31:37.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:37.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.577]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:31:37.582]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:31:37.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:31:37.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:31:37.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:31:37.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:31:37.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.586]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:31:37.592]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:31:37.592]          </block>
[00:31:37.593]          // end if-block "!hasDormant"
[00:31:37.593]        </control>
[00:31:37.593]        // end if-block "isSWJ"
[00:31:37.593]      </control>
[00:31:37.593]      <control if="!isSWJ" while="" timeout="0" info="">
[00:31:37.593]        // if-block "!isSWJ"
[00:31:37.593]          // =>  FALSE
[00:31:37.593]        // skip if-block "!isSWJ"
[00:31:37.593]      </control>
[00:31:37.593]      <block atomic="false" info="">
[00:31:37.593]        ReadDP(0x0);
[00:31:37.593]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:31:37.593]      </block>
[00:31:37.593]      // end if-block "protType == 2"
[00:31:37.593]    </control>
[00:31:37.593]  </sequence>
[00:31:37.593]  
[00:31:37.608]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:31:37.608]  
[00:31:37.608]  <debugvars>
[00:31:37.608]    // Pre-defined
[00:31:37.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.608]    __dp=0x00000000
[00:31:37.608]    __ap=0x00000000
[00:31:37.608]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.608]    __FlashAddr=0x00000000
[00:31:37.608]    __FlashLen=0x00000000
[00:31:37.608]    __FlashArg=0x00000000
[00:31:37.608]    __FlashOp=0x00000000
[00:31:37.608]    __Result=0x00000000
[00:31:37.608]  </debugvars>
[00:31:37.608]  
[00:31:37.610]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:31:37.610]    <block atomic="false" info="">
[00:31:37.610]      __var SW_DP_ABORT       = 0x0;
[00:31:37.610]        // -> [SW_DP_ABORT <= 0x00000000]
[00:31:37.610]      __var DP_CTRL_STAT      = 0x4;
[00:31:37.610]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:31:37.610]      __var DP_SELECT         = 0x8;
[00:31:37.610]        // -> [DP_SELECT <= 0x00000008]
[00:31:37.610]      __var powered_down      = 0;
[00:31:37.610]        // -> [powered_down <= 0x00000000]
[00:31:37.610]      WriteDP(DP_SELECT, 0x00000000);
[00:31:37.611]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:31:37.611]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:31:37.618]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:31:37.618]        // -> [powered_down <= 0x00000001]
[00:31:37.618]    </block>
[00:31:37.618]    <control if="powered_down" while="" timeout="0" info="">
[00:31:37.618]      // if-block "powered_down"
[00:31:37.618]        // =>  TRUE
[00:31:37.618]      <block atomic="false" info="">
[00:31:37.618]        Message(0, "Debug/System power-up request sent");
[00:31:37.621]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:31:37.627]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:31:37.627]      </block>
[00:31:37.627]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:31:37.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:31:37.631]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:31:37.631]        // while-condition  =>  FALSE
[00:31:37.631]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:31:37.631]      </control>
[00:31:37.631]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:31:37.631]        // if-block "(__protocol & 0xFFFF) == 1"
[00:31:37.632]          // =>  FALSE
[00:31:37.632]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:31:37.632]      </control>
[00:31:37.632]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:31:37.632]        // if-block "(__protocol & 0xFFFF) == 2"
[00:31:37.632]          // =>  TRUE
[00:31:37.632]        <block atomic="false" info="">
[00:31:37.632]          Message(0, "executing SWD power up");
[00:31:37.634]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:31:37.639]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:31:37.639]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:31:37.644]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:31:37.644]        </block>
[00:31:37.644]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:31:37.644]      </control>
[00:31:37.644]      // end if-block "powered_down"
[00:31:37.644]    </control>
[00:31:37.644]    <block atomic="false" info="">
[00:31:37.644]      __var DEBUG_PORT_VAL    = 0;
[00:31:37.644]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:31:37.644]      __var ACCESS_POINT_VAL  = 0;
[00:31:37.644]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:31:37.644]      __ap = 1; 
[00:31:37.644]        // -> [__ap <= 0x00000001]
[00:31:37.644]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:31:37.651]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:31:37.651]      __ap = 4;
[00:31:37.651]        // -> [__ap <= 0x00000004]
[00:31:37.651]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:37.657]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.657]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:31:37.657]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:37.657]    </block>
[00:31:37.657]    <block atomic="false" info="">
[00:31:37.659]      __var nReset = 0x80;
[00:31:37.659]        // -> [nReset <= 0x00000080]
[00:31:37.659]      __var canReadPins = 0;
[00:31:37.659]        // -> [canReadPins <= 0x00000000]
[00:31:37.659]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:31:37.661]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:31:37.661]        // -> [canReadPins <= 0x00000001]
[00:31:37.661]    </block>
[00:31:37.661]    <control if="" while="1" timeout="200" info="">
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.661]      // while "1"  (timeout="200")
[00:31:37.661]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.663]      // while "1"  (timeout="200")
[00:31:37.663]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.666]      // while "1"  (timeout="200")
[00:31:37.666]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.668]      // while-condition  =>  TRUE
[00:31:37.668]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.671]      // while-condition  =>  TRUE
[00:31:37.671]      // while "1"  (timeout="200")
[00:31:37.672]      // while-condition  =>  TRUE
[00:31:37.672]      // while "1"  (timeout="200")
[00:31:37.672]      // while-condition  =>  TRUE
[00:31:37.672]      // while "1"  (timeout="200")
[00:31:37.672]      // while-condition  =>  TRUE
[00:31:37.672]      // while "1"  (timeout="200")
[00:31:37.672]      // while-condition  =>  TRUE
[00:31:37.672]      // while "1"  (timeout="200")
[00:31:37.672]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.673]      // while-condition  =>  TRUE
[00:31:37.673]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.675]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.675]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.675]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.675]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.675]      // while "1"  (timeout="200")
[00:31:37.675]      // while-condition  =>  TRUE
[00:31:37.676]      // while "1"  (timeout="200")
[00:31:37.677]      // while  =>  TIMEOUT
[00:31:37.677]      // end while "1"
[00:31:37.677]    </control>
[00:31:37.677]    <control if="canReadPins" while="" timeout="0" info="">
[00:31:37.677]      // if-block "canReadPins"
[00:31:37.677]        // =>  TRUE
[00:31:37.677]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:31:37.678]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:31:37.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:31:37.678]        // while-condition  =>  FALSE
[00:31:37.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:31:37.678]      </control>
[00:31:37.678]      // end if-block "canReadPins"
[00:31:37.678]    </control>
[00:31:37.678]    <control if="!canReadPins" while="" timeout="0" info="">
[00:31:37.678]      // if-block "!canReadPins"
[00:31:37.678]        // =>  FALSE
[00:31:37.681]      // skip if-block "!canReadPins"
[00:31:37.681]    </control>
[00:31:37.681]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:31:37.681]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:37.681]        // =>  TRUE
[00:31:37.681]      <block atomic="false" info="">
[00:31:37.681]        WriteAP(0x00, 0x190008);
[00:31:37.681]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.681]        WriteAP(0xF0, 0x01);
[00:31:37.694]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.694]      </block>
[00:31:37.694]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:37.694]    </control>
[00:31:37.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:31:37.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:37.694]        // =>  FALSE
[00:31:37.694]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:37.694]    </control>
[00:31:37.694]    <block atomic="false" info="">
[00:31:37.694]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:37.702]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.703]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:31:37.703]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:37.703]      __ap = 0; //lets make sure we reset the access point selection
[00:31:37.703]        // -> [__ap <= 0x00000000]
[00:31:37.703]    </block>
[00:31:37.706]  </sequence>
[00:31:37.706]  
[00:31:37.737]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:31:37.737]  
[00:31:37.737]  <debugvars>
[00:31:37.737]    // Pre-defined
[00:31:37.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.737]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.737]    __dp=0x00000000
[00:31:37.737]    __ap=0x00000000
[00:31:37.737]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.739]    __FlashAddr=0x00000000
[00:31:37.739]    __FlashLen=0x00000000
[00:31:37.739]    __FlashArg=0x00000000
[00:31:37.739]    __FlashOp=0x00000000
[00:31:37.739]    __Result=0x00000000
[00:31:37.739]  </debugvars>
[00:31:37.739]  
[00:31:37.740]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:31:37.740]    <block atomic="false" info="">
[00:31:37.740]      __var deviceID = 0;
[00:31:37.740]        // -> [deviceID <= 0x00000000]
[00:31:37.740]      __var version = 0;
[00:31:37.740]        // -> [version <= 0x00000000]
[00:31:37.740]      __var partNum = 0;
[00:31:37.740]        // -> [partNum <= 0x00000000]
[00:31:37.740]      __var manuf = 0;
[00:31:37.740]        // -> [manuf <= 0x00000000]
[00:31:37.740]      __var isMSPM0G1X0X_G3X0X = 0;
[00:31:37.740]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:31:37.740]      __var isProduction = 0;
[00:31:37.740]        // -> [isProduction <= 0x00000000]
[00:31:37.740]      __var continueId = 0;
[00:31:37.741]        // -> [continueId <= 0x00000000]
[00:31:37.741]      deviceID =   Read32(0x41C40004);
[00:31:37.750]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:31:37.750]        // -> [deviceID <= 0x2BB8802F]
[00:31:37.750]      version = deviceID >> 28;
[00:31:37.750]        // -> [version <= 0x00000002]
[00:31:37.750]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:31:37.750]        // -> [partNum <= 0x0000BB88]
[00:31:37.750]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:31:37.750]        // -> [manuf <= 0x00000017]
[00:31:37.750]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:31:37.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:31:37.750]      isProduction = (version > 0);
[00:31:37.752]        // -> [isProduction <= 0x00000001]
[00:31:37.752]    </block>
[00:31:37.752]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:31:37.752]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:31:37.752]        // =>  FALSE
[00:31:37.752]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:31:37.752]    </control>
[00:31:37.752]    <control if="continueId == 4" while="" timeout="0" info="">
[00:31:37.753]      // if-block "continueId == 4"
[00:31:37.753]        // =>  FALSE
[00:31:37.753]      // skip if-block "continueId == 4"
[00:31:37.753]    </control>
[00:31:37.753]    <control if="!isProduction" while="" timeout="0" info="">
[00:31:37.753]      // if-block "!isProduction"
[00:31:37.753]        // =>  FALSE
[00:31:37.753]      // skip if-block "!isProduction"
[00:31:37.753]    </control>
[00:31:37.753]  </sequence>
[00:31:37.754]  
[00:32:51.401]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:32:51.401]  
[00:32:51.409]  <debugvars>
[00:32:51.409]    // Pre-defined
[00:32:51.409]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:51.409]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:51.409]    __dp=0x00000000
[00:32:51.409]    __ap=0x00000000
[00:32:51.410]    __traceout=0x00000000      (Trace Disabled)
[00:32:51.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:51.410]    __FlashAddr=0x00000000
[00:32:51.410]    __FlashLen=0x00000000
[00:32:51.410]    __FlashArg=0x00000000
[00:32:51.410]    __FlashOp=0x00000000
[00:32:51.410]    __Result=0x00000000
[00:32:51.410]  </debugvars>
[00:32:51.410]  
[00:32:51.410]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:32:51.410]    <block atomic="false" info="">
[00:32:51.410]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:32:51.410]        // -> [isSWJ <= 0x00000001]
[00:32:51.410]      __var hasDormant = __protocol & 0x00020000;
[00:32:51.410]        // -> [hasDormant <= 0x00000000]
[00:32:51.410]      __var protType   = __protocol & 0x0000FFFF;
[00:32:51.410]        // -> [protType <= 0x00000002]
[00:32:51.410]    </block>
[00:32:51.410]    <control if="protType == 1" while="" timeout="0" info="">
[00:32:51.410]      // if-block "protType == 1"
[00:32:51.410]        // =>  FALSE
[00:32:51.410]      // skip if-block "protType == 1"
[00:32:51.413]    </control>
[00:32:51.413]    <control if="protType == 2" while="" timeout="0" info="">
[00:32:51.413]      // if-block "protType == 2"
[00:32:51.413]        // =>  TRUE
[00:32:51.413]      <control if="isSWJ" while="" timeout="0" info="">
[00:32:51.413]        // if-block "isSWJ"
[00:32:51.413]          // =>  TRUE
[00:32:51.413]        <control if="hasDormant" while="" timeout="0" info="">
[00:32:51.413]          // if-block "hasDormant"
[00:32:51.413]            // =>  FALSE
[00:32:51.413]          // skip if-block "hasDormant"
[00:32:51.413]        </control>
[00:32:51.413]        <control if="!hasDormant" while="" timeout="0" info="">
[00:32:51.413]          // if-block "!hasDormant"
[00:32:51.413]            // =>  TRUE
[00:32:51.413]          <block atomic="false" info="">
[00:32:51.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:32:51.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:51.418]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:32:51.421]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:32:51.421]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:32:51.423]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:51.423]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:32:51.425]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:32:51.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:32:51.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:51.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:32:51.428]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:32:51.429]          </block>
[00:32:51.429]          // end if-block "!hasDormant"
[00:32:51.429]        </control>
[00:32:51.429]        // end if-block "isSWJ"
[00:32:51.429]      </control>
[00:32:51.429]      <control if="!isSWJ" while="" timeout="0" info="">
[00:32:51.429]        // if-block "!isSWJ"
[00:32:51.429]          // =>  FALSE
[00:32:51.429]        // skip if-block "!isSWJ"
[00:32:51.429]      </control>
[00:32:51.429]      <block atomic="false" info="">
[00:32:51.429]        ReadDP(0x0);
[00:32:51.431]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:32:51.431]      </block>
[00:32:51.431]      // end if-block "protType == 2"
[00:32:51.431]    </control>
[00:32:51.431]  </sequence>
[00:32:51.431]  
[00:32:51.436]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:32:51.436]  
[00:32:51.436]  <debugvars>
[00:32:51.436]    // Pre-defined
[00:32:51.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:51.436]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:51.436]    __dp=0x00000000
[00:32:51.436]    __ap=0x00000000
[00:32:51.436]    __traceout=0x00000000      (Trace Disabled)
[00:32:51.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:51.436]    __FlashAddr=0x00000000
[00:32:51.436]    __FlashLen=0x00000000
[00:32:51.438]    __FlashArg=0x00000000
[00:32:51.438]    __FlashOp=0x00000000
[00:32:51.438]    __Result=0x00000000
[00:32:51.438]  </debugvars>
[00:32:51.438]  
[00:32:51.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:32:51.438]    <block atomic="false" info="">
[00:32:51.438]      __var SW_DP_ABORT       = 0x0;
[00:32:51.438]        // -> [SW_DP_ABORT <= 0x00000000]
[00:32:51.438]      __var DP_CTRL_STAT      = 0x4;
[00:32:51.438]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:32:51.438]      __var DP_SELECT         = 0x8;
[00:32:51.438]        // -> [DP_SELECT <= 0x00000008]
[00:32:51.438]      __var powered_down      = 0;
[00:32:51.438]        // -> [powered_down <= 0x00000000]
[00:32:51.438]      WriteDP(DP_SELECT, 0x00000000);
[00:32:51.441]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:32:51.441]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:32:51.445]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:32:51.445]        // -> [powered_down <= 0x00000001]
[00:32:51.445]    </block>
[00:32:51.446]    <control if="powered_down" while="" timeout="0" info="">
[00:32:51.446]      // if-block "powered_down"
[00:32:51.446]        // =>  TRUE
[00:32:51.446]      <block atomic="false" info="">
[00:32:51.446]        Message(0, "Debug/System power-up request sent");
[00:32:51.448]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:32:51.449]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:32:51.449]      </block>
[00:32:51.449]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:32:51.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:32:51.451]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:32:51.451]        // while-condition  =>  FALSE
[00:32:51.451]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:32:51.451]      </control>
[00:32:51.451]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:32:51.451]        // if-block "(__protocol & 0xFFFF) == 1"
[00:32:51.453]          // =>  FALSE
[00:32:51.453]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:32:51.453]      </control>
[00:32:51.453]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:32:51.453]        // if-block "(__protocol & 0xFFFF) == 2"
[00:32:51.453]          // =>  TRUE
[00:32:51.453]        <block atomic="false" info="">
[00:32:51.453]          Message(0, "executing SWD power up");
[00:32:51.455]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:32:51.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:32:51.458]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:32:51.458]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:32:51.458]        </block>
[00:32:51.458]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:32:51.458]      </control>
[00:32:51.458]      // end if-block "powered_down"
[00:32:51.458]    </control>
[00:32:51.458]    <block atomic="false" info="">
[00:32:51.458]      __var DEBUG_PORT_VAL    = 0;
[00:32:51.458]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:32:51.458]      __var ACCESS_POINT_VAL  = 0;
[00:32:51.458]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:32:51.458]      __ap = 1; 
[00:32:51.461]        // -> [__ap <= 0x00000001]
[00:32:51.461]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:32:51.464]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:32:51.465]      __ap = 4;
[00:32:51.465]        // -> [__ap <= 0x00000004]
[00:32:51.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:51.469]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:32:51.469]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:32:51.469]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:51.471]    </block>
[00:32:51.471]    <block atomic="false" info="">
[00:32:51.471]      __var nReset = 0x80;
[00:32:51.471]        // -> [nReset <= 0x00000080]
[00:32:51.471]      __var canReadPins = 0;
[00:32:51.471]        // -> [canReadPins <= 0x00000000]
[00:32:51.471]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:32:51.475]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:32:51.476]        // -> [canReadPins <= 0x00000001]
[00:32:51.476]    </block>
[00:32:51.476]    <control if="" while="1" timeout="200" info="">
[00:32:51.476]      // while "1"  (timeout="200")
[00:32:51.476]      // while-condition  =>  TRUE
[00:32:51.476]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.477]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.477]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.477]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.477]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.477]      // while "1"  (timeout="200")
[00:32:51.477]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.478]      // while "1"  (timeout="200")
[00:32:51.478]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.479]      // while-condition  =>  TRUE
[00:32:51.479]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.481]      // while "1"  (timeout="200")
[00:32:51.481]      // while-condition  =>  TRUE
[00:32:51.483]      // while "1"  (timeout="200")
[00:32:51.483]      // while-condition  =>  TRUE
[00:32:51.483]      // while "1"  (timeout="200")
[00:32:51.483]      // while-condition  =>  TRUE
[00:32:51.483]      // while "1"  (timeout="200")
[00:32:51.483]      // while-condition  =>  TRUE
[00:32:51.483]      // while "1"  (timeout="200")
[00:32:51.483]      // while-condition  =>  TRUE
[00:32:51.483]      // while "1"  (timeout="200")
[00:32:51.483]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.484]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.484]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.484]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.484]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.484]      // while-condition  =>  TRUE
[00:32:51.484]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.486]      // while "1"  (timeout="200")
[00:32:51.486]      // while-condition  =>  TRUE
[00:32:51.488]      // while "1"  (timeout="200")
[00:32:51.488]      // while  =>  TIMEOUT
[00:32:51.488]      // end while "1"
[00:32:51.488]    </control>
[00:32:51.488]    <control if="canReadPins" while="" timeout="0" info="">
[00:32:51.488]      // if-block "canReadPins"
[00:32:51.488]        // =>  TRUE
[00:32:51.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:32:51.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:32:51.494]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:32:51.494]        // while-condition  =>  FALSE
[00:32:51.494]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:32:51.494]      </control>
[00:32:51.494]      // end if-block "canReadPins"
[00:32:51.494]    </control>
[00:32:51.494]    <control if="!canReadPins" while="" timeout="0" info="">
[00:32:51.494]      // if-block "!canReadPins"
[00:32:51.494]        // =>  FALSE
[00:32:51.496]      // skip if-block "!canReadPins"
[00:32:51.496]    </control>
[00:32:51.496]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:32:51.496]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:51.496]        // =>  TRUE
[00:32:51.496]      <block atomic="false" info="">
[00:32:51.496]        WriteAP(0x00, 0x190008);
[00:32:51.498]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:51.499]        WriteAP(0xF0, 0x01);
[00:32:51.502]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:51.502]      </block>
[00:32:51.502]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:51.502]    </control>
[00:32:51.502]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:32:51.502]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:51.502]        // =>  FALSE
[00:32:51.502]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:51.502]    </control>
[00:32:51.502]    <block atomic="false" info="">
[00:32:51.502]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:51.508]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:32:51.508]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:32:51.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:51.510]      __ap = 0; //lets make sure we reset the access point selection
[00:32:51.510]        // -> [__ap <= 0x00000000]
[00:32:51.510]    </block>
[00:32:51.510]  </sequence>
[00:32:51.510]  
[00:32:51.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:32:51.534]  
[00:32:51.534]  <debugvars>
[00:32:51.534]    // Pre-defined
[00:32:51.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:51.534]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:51.534]    __dp=0x00000000
[00:32:51.534]    __ap=0x00000000
[00:32:51.534]    __traceout=0x00000000      (Trace Disabled)
[00:32:51.534]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:51.534]    __FlashAddr=0x00000000
[00:32:51.534]    __FlashLen=0x00000000
[00:32:51.538]    __FlashArg=0x00000000
[00:32:51.538]    __FlashOp=0x00000000
[00:32:51.538]    __Result=0x00000000
[00:32:51.538]  </debugvars>
[00:32:51.538]  
[00:32:51.538]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:32:51.539]    <block atomic="false" info="">
[00:32:51.539]      __var deviceID = 0;
[00:32:51.539]        // -> [deviceID <= 0x00000000]
[00:32:51.539]      __var version = 0;
[00:32:51.539]        // -> [version <= 0x00000000]
[00:32:51.539]      __var partNum = 0;
[00:32:51.539]        // -> [partNum <= 0x00000000]
[00:32:51.539]      __var manuf = 0;
[00:32:51.539]        // -> [manuf <= 0x00000000]
[00:32:51.539]      __var isMSPM0G1X0X_G3X0X = 0;
[00:32:51.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:32:51.539]      __var isProduction = 0;
[00:32:51.539]        // -> [isProduction <= 0x00000000]
[00:32:51.539]      __var continueId = 0;
[00:32:51.539]        // -> [continueId <= 0x00000000]
[00:32:51.539]      deviceID =   Read32(0x41C40004);
[00:32:51.550]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:32:51.550]        // -> [deviceID <= 0x2BB8802F]
[00:32:51.550]      version = deviceID >> 28;
[00:32:51.550]        // -> [version <= 0x00000002]
[00:32:51.550]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:32:51.550]        // -> [partNum <= 0x0000BB88]
[00:32:51.550]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:32:51.550]        // -> [manuf <= 0x00000017]
[00:32:51.550]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:32:51.550]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:32:51.550]      isProduction = (version > 0);
[00:32:51.550]        // -> [isProduction <= 0x00000001]
[00:32:51.550]    </block>
[00:32:51.550]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:32:51.550]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:32:51.550]        // =>  FALSE
[00:32:51.550]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:32:51.550]    </control>
[00:32:51.550]    <control if="continueId == 4" while="" timeout="0" info="">
[00:32:51.550]      // if-block "continueId == 4"
[00:32:51.550]        // =>  FALSE
[00:32:51.550]      // skip if-block "continueId == 4"
[00:32:51.550]    </control>
[00:32:51.550]    <control if="!isProduction" while="" timeout="0" info="">
[00:32:51.550]      // if-block "!isProduction"
[00:32:51.550]        // =>  FALSE
[00:32:51.550]      // skip if-block "!isProduction"
[00:32:51.550]    </control>
[00:32:51.553]  </sequence>
[00:32:51.553]  
[00:33:45.903]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:33:45.903]  
[00:33:45.903]  <debugvars>
[00:33:45.903]    // Pre-defined
[00:33:45.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:45.903]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:45.903]    __dp=0x00000000
[00:33:45.903]    __ap=0x00000000
[00:33:45.903]    __traceout=0x00000000      (Trace Disabled)
[00:33:45.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:45.903]    __FlashAddr=0x00000000
[00:33:45.903]    __FlashLen=0x00000000
[00:33:45.903]    __FlashArg=0x00000000
[00:33:45.903]    __FlashOp=0x00000000
[00:33:45.907]    __Result=0x00000000
[00:33:45.907]  </debugvars>
[00:33:45.907]  
[00:33:45.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:33:45.907]    <block atomic="false" info="">
[00:33:45.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:33:45.907]        // -> [isSWJ <= 0x00000001]
[00:33:45.907]      __var hasDormant = __protocol & 0x00020000;
[00:33:45.907]        // -> [hasDormant <= 0x00000000]
[00:33:45.907]      __var protType   = __protocol & 0x0000FFFF;
[00:33:45.907]        // -> [protType <= 0x00000002]
[00:33:45.907]    </block>
[00:33:45.907]    <control if="protType == 1" while="" timeout="0" info="">
[00:33:45.907]      // if-block "protType == 1"
[00:33:45.907]        // =>  FALSE
[00:33:45.909]      // skip if-block "protType == 1"
[00:33:45.909]    </control>
[00:33:45.909]    <control if="protType == 2" while="" timeout="0" info="">
[00:33:45.909]      // if-block "protType == 2"
[00:33:45.909]        // =>  TRUE
[00:33:45.909]      <control if="isSWJ" while="" timeout="0" info="">
[00:33:45.909]        // if-block "isSWJ"
[00:33:45.909]          // =>  TRUE
[00:33:45.909]        <control if="hasDormant" while="" timeout="0" info="">
[00:33:45.909]          // if-block "hasDormant"
[00:33:45.909]            // =>  FALSE
[00:33:45.909]          // skip if-block "hasDormant"
[00:33:45.909]        </control>
[00:33:45.909]        <control if="!hasDormant" while="" timeout="0" info="">
[00:33:45.909]          // if-block "!hasDormant"
[00:33:45.909]            // =>  TRUE
[00:33:45.909]          <block atomic="false" info="">
[00:33:45.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:33:45.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:45.911]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:33:45.919]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:33:45.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:33:45.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:45.923]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:33:45.927]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:33:45.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:33:45.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:45.935]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:33:45.939]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:33:45.941]          </block>
[00:33:45.941]          // end if-block "!hasDormant"
[00:33:45.941]        </control>
[00:33:45.941]        // end if-block "isSWJ"
[00:33:45.941]      </control>
[00:33:45.941]      <control if="!isSWJ" while="" timeout="0" info="">
[00:33:45.941]        // if-block "!isSWJ"
[00:33:45.941]          // =>  FALSE
[00:33:45.941]        // skip if-block "!isSWJ"
[00:33:45.941]      </control>
[00:33:45.941]      <block atomic="false" info="">
[00:33:45.941]        ReadDP(0x0);
[00:33:45.945]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:33:45.945]      </block>
[00:33:45.945]      // end if-block "protType == 2"
[00:33:45.945]    </control>
[00:33:45.945]  </sequence>
[00:33:45.945]  
[00:33:45.949]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:33:45.949]  
[00:33:45.949]  <debugvars>
[00:33:45.952]    // Pre-defined
[00:33:45.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:45.952]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:45.952]    __dp=0x00000000
[00:33:45.952]    __ap=0x00000000
[00:33:45.952]    __traceout=0x00000000      (Trace Disabled)
[00:33:45.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:45.952]    __FlashAddr=0x00000000
[00:33:45.952]    __FlashLen=0x00000000
[00:33:45.952]    __FlashArg=0x00000000
[00:33:45.952]    __FlashOp=0x00000000
[00:33:45.952]    __Result=0x00000000
[00:33:45.952]  </debugvars>
[00:33:45.952]  
[00:33:45.952]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:33:45.952]    <block atomic="false" info="">
[00:33:45.952]      __var SW_DP_ABORT       = 0x0;
[00:33:45.952]        // -> [SW_DP_ABORT <= 0x00000000]
[00:33:45.952]      __var DP_CTRL_STAT      = 0x4;
[00:33:45.952]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:33:45.954]      __var DP_SELECT         = 0x8;
[00:33:45.954]        // -> [DP_SELECT <= 0x00000008]
[00:33:45.954]      __var powered_down      = 0;
[00:33:45.954]        // -> [powered_down <= 0x00000000]
[00:33:45.954]      WriteDP(DP_SELECT, 0x00000000);
[00:33:45.962]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:33:45.962]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:33:45.969]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:33:45.969]        // -> [powered_down <= 0x00000001]
[00:33:45.969]    </block>
[00:33:45.969]    <control if="powered_down" while="" timeout="0" info="">
[00:33:45.969]      // if-block "powered_down"
[00:33:45.970]        // =>  TRUE
[00:33:45.970]      <block atomic="false" info="">
[00:33:45.970]        Message(0, "Debug/System power-up request sent");
[00:33:45.970]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:33:45.977]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:33:45.977]      </block>
[00:33:45.977]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:33:45.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:33:45.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:33:45.989]        // while-condition  =>  FALSE
[00:33:45.989]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:33:45.989]      </control>
[00:33:45.989]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:33:45.989]        // if-block "(__protocol & 0xFFFF) == 1"
[00:33:45.989]          // =>  FALSE
[00:33:45.989]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:33:45.989]      </control>
[00:33:45.989]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:33:45.989]        // if-block "(__protocol & 0xFFFF) == 2"
[00:33:45.989]          // =>  TRUE
[00:33:45.989]        <block atomic="false" info="">
[00:33:45.989]          Message(0, "executing SWD power up");
[00:33:45.993]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:33:45.997]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:33:45.997]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:33:46.000]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:33:46.000]        </block>
[00:33:46.000]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:33:46.000]      </control>
[00:33:46.000]      // end if-block "powered_down"
[00:33:46.000]    </control>
[00:33:46.000]    <block atomic="false" info="">
[00:33:46.000]      __var DEBUG_PORT_VAL    = 0;
[00:33:46.000]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:33:46.000]      __var ACCESS_POINT_VAL  = 0;
[00:33:46.000]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:33:46.001]      __ap = 1; 
[00:33:46.001]        // -> [__ap <= 0x00000001]
[00:33:46.001]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:33:46.014]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:33:46.014]      __ap = 4;
[00:33:46.014]        // -> [__ap <= 0x00000004]
[00:33:46.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:33:46.025]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:33:46.025]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:33:46.025]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:33:46.027]    </block>
[00:33:46.027]    <block atomic="false" info="">
[00:33:46.027]      __var nReset = 0x80;
[00:33:46.027]        // -> [nReset <= 0x00000080]
[00:33:46.027]      __var canReadPins = 0;
[00:33:46.027]        // -> [canReadPins <= 0x00000000]
[00:33:46.027]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:33:46.029]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:33:46.029]        // -> [canReadPins <= 0x00000001]
[00:33:46.029]    </block>
[00:33:46.029]    <control if="" while="1" timeout="200" info="">
[00:33:46.029]      // while "1"  (timeout="200")
[00:33:46.029]      // while-condition  =>  TRUE
[00:33:46.029]      // while "1"  (timeout="200")
[00:33:46.029]      // while-condition  =>  TRUE
[00:33:46.029]      // while "1"  (timeout="200")
[00:33:46.029]      // while-condition  =>  TRUE
[00:33:46.029]      // while "1"  (timeout="200")
[00:33:46.029]      // while-condition  =>  TRUE
[00:33:46.029]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.033]      // while-condition  =>  TRUE
[00:33:46.033]      // while "1"  (timeout="200")
[00:33:46.037]      // while-condition  =>  TRUE
[00:33:46.037]      // while "1"  (timeout="200")
[00:33:46.037]      // while  =>  TIMEOUT
[00:33:46.037]      // end while "1"
[00:33:46.037]    </control>
[00:33:46.037]    <control if="canReadPins" while="" timeout="0" info="">
[00:33:46.037]      // if-block "canReadPins"
[00:33:46.037]        // =>  TRUE
[00:33:46.037]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:33:46.037]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:33:46.039]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:33:46.041]        // while-condition  =>  FALSE
[00:33:46.041]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:33:46.041]      </control>
[00:33:46.041]      // end if-block "canReadPins"
[00:33:46.041]    </control>
[00:33:46.041]    <control if="!canReadPins" while="" timeout="0" info="">
[00:33:46.041]      // if-block "!canReadPins"
[00:33:46.041]        // =>  FALSE
[00:33:46.041]      // skip if-block "!canReadPins"
[00:33:46.041]    </control>
[00:33:46.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:33:46.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:33:46.041]        // =>  TRUE
[00:33:46.041]      <block atomic="false" info="">
[00:33:46.041]        WriteAP(0x00, 0x190008);
[00:33:46.045]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:33:46.045]        WriteAP(0xF0, 0x01);
[00:33:46.051]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:33:46.051]      </block>
[00:33:46.051]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:33:46.051]    </control>
[00:33:46.051]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:33:46.051]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:33:46.051]        // =>  FALSE
[00:33:46.051]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:33:46.051]    </control>
[00:33:46.051]    <block atomic="false" info="">
[00:33:46.051]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:33:46.057]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:33:46.059]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:33:46.059]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:33:46.059]      __ap = 0; //lets make sure we reset the access point selection
[00:33:46.061]        // -> [__ap <= 0x00000000]
[00:33:46.061]    </block>
[00:33:46.061]  </sequence>
[00:33:46.061]  
[00:33:46.103]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:33:46.103]  
[00:33:46.103]  <debugvars>
[00:33:46.103]    // Pre-defined
[00:33:46.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:46.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:46.103]    __dp=0x00000000
[00:33:46.103]    __ap=0x00000000
[00:33:46.103]    __traceout=0x00000000      (Trace Disabled)
[00:33:46.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:46.103]    __FlashAddr=0x00000000
[00:33:46.103]    __FlashLen=0x00000000
[00:33:46.105]    __FlashArg=0x00000000
[00:33:46.105]    __FlashOp=0x00000000
[00:33:46.105]    __Result=0x00000000
[00:33:46.105]  </debugvars>
[00:33:46.105]  
[00:33:46.105]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:33:46.105]    <block atomic="false" info="">
[00:33:46.105]      __var deviceID = 0;
[00:33:46.105]        // -> [deviceID <= 0x00000000]
[00:33:46.105]      __var version = 0;
[00:33:46.105]        // -> [version <= 0x00000000]
[00:33:46.105]      __var partNum = 0;
[00:33:46.105]        // -> [partNum <= 0x00000000]
[00:33:46.105]      __var manuf = 0;
[00:33:46.105]        // -> [manuf <= 0x00000000]
[00:33:46.105]      __var isMSPM0G1X0X_G3X0X = 0;
[00:33:46.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:33:46.105]      __var isProduction = 0;
[00:33:46.105]        // -> [isProduction <= 0x00000000]
[00:33:46.105]      __var continueId = 0;
[00:33:46.105]        // -> [continueId <= 0x00000000]
[00:33:46.105]      deviceID =   Read32(0x41C40004);
[00:33:46.123]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:33:46.123]        // -> [deviceID <= 0x2BB8802F]
[00:33:46.123]      version = deviceID >> 28;
[00:33:46.123]        // -> [version <= 0x00000002]
[00:33:46.123]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:33:46.123]        // -> [partNum <= 0x0000BB88]
[00:33:46.125]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:33:46.125]        // -> [manuf <= 0x00000017]
[00:33:46.125]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:33:46.125]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:33:46.125]      isProduction = (version > 0);
[00:33:46.125]        // -> [isProduction <= 0x00000001]
[00:33:46.125]    </block>
[00:33:46.125]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:33:46.125]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:33:46.125]        // =>  FALSE
[00:33:46.125]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:33:46.126]    </control>
[00:33:46.126]    <control if="continueId == 4" while="" timeout="0" info="">
[00:33:46.126]      // if-block "continueId == 4"
[00:33:46.126]        // =>  FALSE
[00:33:46.126]      // skip if-block "continueId == 4"
[00:33:46.126]    </control>
[00:33:46.126]    <control if="!isProduction" while="" timeout="0" info="">
[00:33:46.126]      // if-block "!isProduction"
[00:33:46.126]        // =>  FALSE
[00:33:46.126]      // skip if-block "!isProduction"
[00:33:46.126]    </control>
[00:33:46.126]  </sequence>
[00:33:46.127]  
[00:35:13.013]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:35:13.013]  
[00:35:13.021]  <debugvars>
[00:35:13.021]    // Pre-defined
[00:35:13.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:13.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:13.021]    __dp=0x00000000
[00:35:13.021]    __ap=0x00000000
[00:35:13.021]    __traceout=0x00000000      (Trace Disabled)
[00:35:13.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:13.021]    __FlashAddr=0x00000000
[00:35:13.021]    __FlashLen=0x00000000
[00:35:13.021]    __FlashArg=0x00000000
[00:35:13.021]    __FlashOp=0x00000000
[00:35:13.021]    __Result=0x00000000
[00:35:13.021]  </debugvars>
[00:35:13.021]  
[00:35:13.021]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:35:13.023]    <block atomic="false" info="">
[00:35:13.023]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:35:13.023]        // -> [isSWJ <= 0x00000001]
[00:35:13.023]      __var hasDormant = __protocol & 0x00020000;
[00:35:13.023]        // -> [hasDormant <= 0x00000000]
[00:35:13.023]      __var protType   = __protocol & 0x0000FFFF;
[00:35:13.023]        // -> [protType <= 0x00000002]
[00:35:13.023]    </block>
[00:35:13.023]    <control if="protType == 1" while="" timeout="0" info="">
[00:35:13.023]      // if-block "protType == 1"
[00:35:13.023]        // =>  FALSE
[00:35:13.023]      // skip if-block "protType == 1"
[00:35:13.023]    </control>
[00:35:13.023]    <control if="protType == 2" while="" timeout="0" info="">
[00:35:13.024]      // if-block "protType == 2"
[00:35:13.024]        // =>  TRUE
[00:35:13.024]      <control if="isSWJ" while="" timeout="0" info="">
[00:35:13.024]        // if-block "isSWJ"
[00:35:13.024]          // =>  TRUE
[00:35:13.024]        <control if="hasDormant" while="" timeout="0" info="">
[00:35:13.024]          // if-block "hasDormant"
[00:35:13.024]            // =>  FALSE
[00:35:13.024]          // skip if-block "hasDormant"
[00:35:13.024]        </control>
[00:35:13.024]        <control if="!hasDormant" while="" timeout="0" info="">
[00:35:13.024]          // if-block "!hasDormant"
[00:35:13.024]            // =>  TRUE
[00:35:13.024]          <block atomic="false" info="">
[00:35:13.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:35:13.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:13.027]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:35:13.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:35:13.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:35:13.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:13.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:35:13.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:35:13.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:35:13.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:13.035]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:35:13.036]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:35:13.036]          </block>
[00:35:13.036]          // end if-block "!hasDormant"
[00:35:13.036]        </control>
[00:35:13.036]        // end if-block "isSWJ"
[00:35:13.036]      </control>
[00:35:13.036]      <control if="!isSWJ" while="" timeout="0" info="">
[00:35:13.036]        // if-block "!isSWJ"
[00:35:13.036]          // =>  FALSE
[00:35:13.036]        // skip if-block "!isSWJ"
[00:35:13.036]      </control>
[00:35:13.036]      <block atomic="false" info="">
[00:35:13.036]        ReadDP(0x0);
[00:35:13.039]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:35:13.039]      </block>
[00:35:13.041]      // end if-block "protType == 2"
[00:35:13.041]    </control>
[00:35:13.041]  </sequence>
[00:35:13.041]  
[00:35:13.043]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:35:13.043]  
[00:35:13.047]  <debugvars>
[00:35:13.047]    // Pre-defined
[00:35:13.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:13.047]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:13.047]    __dp=0x00000000
[00:35:13.047]    __ap=0x00000000
[00:35:13.047]    __traceout=0x00000000      (Trace Disabled)
[00:35:13.047]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:13.047]    __FlashAddr=0x00000000
[00:35:13.047]    __FlashLen=0x00000000
[00:35:13.047]    __FlashArg=0x00000000
[00:35:13.047]    __FlashOp=0x00000000
[00:35:13.047]    __Result=0x00000000
[00:35:13.047]  </debugvars>
[00:35:13.047]  
[00:35:13.047]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:35:13.047]    <block atomic="false" info="">
[00:35:13.047]      __var SW_DP_ABORT       = 0x0;
[00:35:13.047]        // -> [SW_DP_ABORT <= 0x00000000]
[00:35:13.047]      __var DP_CTRL_STAT      = 0x4;
[00:35:13.047]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:35:13.049]      __var DP_SELECT         = 0x8;
[00:35:13.049]        // -> [DP_SELECT <= 0x00000008]
[00:35:13.049]      __var powered_down      = 0;
[00:35:13.049]        // -> [powered_down <= 0x00000000]
[00:35:13.049]      WriteDP(DP_SELECT, 0x00000000);
[00:35:13.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:35:13.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:35:13.062]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:35:13.062]        // -> [powered_down <= 0x00000001]
[00:35:13.062]    </block>
[00:35:13.062]    <control if="powered_down" while="" timeout="0" info="">
[00:35:13.062]      // if-block "powered_down"
[00:35:13.062]        // =>  TRUE
[00:35:13.062]      <block atomic="false" info="">
[00:35:13.062]        Message(0, "Debug/System power-up request sent");
[00:35:13.063]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:35:13.063]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:35:13.063]      </block>
[00:35:13.063]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:35:13.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:35:13.071]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:35:13.071]        // while-condition  =>  FALSE
[00:35:13.071]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:35:13.071]      </control>
[00:35:13.071]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:35:13.076]        // if-block "(__protocol & 0xFFFF) == 1"
[00:35:13.076]          // =>  FALSE
[00:35:13.076]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:35:13.076]      </control>
[00:35:13.076]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:35:13.076]        // if-block "(__protocol & 0xFFFF) == 2"
[00:35:13.076]          // =>  TRUE
[00:35:13.076]        <block atomic="false" info="">
[00:35:13.076]          Message(0, "executing SWD power up");
[00:35:13.077]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:35:13.083]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:35:13.083]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:35:13.088]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:35:13.088]        </block>
[00:35:13.088]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:35:13.088]      </control>
[00:35:13.088]      // end if-block "powered_down"
[00:35:13.088]    </control>
[00:35:13.088]    <block atomic="false" info="">
[00:35:13.088]      __var DEBUG_PORT_VAL    = 0;
[00:35:13.088]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:35:13.088]      __var ACCESS_POINT_VAL  = 0;
[00:35:13.088]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:35:13.088]      __ap = 1; 
[00:35:13.088]        // -> [__ap <= 0x00000001]
[00:35:13.088]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:35:13.092]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:35:13.092]      __ap = 4;
[00:35:13.092]        // -> [__ap <= 0x00000004]
[00:35:13.092]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:35:13.096]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:35:13.096]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:35:13.096]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:35:13.100]    </block>
[00:35:13.100]    <block atomic="false" info="">
[00:35:13.100]      __var nReset = 0x80;
[00:35:13.100]        // -> [nReset <= 0x00000080]
[00:35:13.100]      __var canReadPins = 0;
[00:35:13.100]        // -> [canReadPins <= 0x00000000]
[00:35:13.100]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:35:13.110]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:35:13.110]        // -> [canReadPins <= 0x00000001]
[00:35:13.110]    </block>
[00:35:13.110]    <control if="" while="1" timeout="200" info="">
[00:35:13.110]      // while "1"  (timeout="200")
[00:35:13.110]      // while-condition  =>  TRUE
[00:35:13.110]      // while "1"  (timeout="200")
[00:35:13.110]      // while-condition  =>  TRUE
[00:35:13.110]      // while "1"  (timeout="200")
[00:35:13.110]      // while-condition  =>  TRUE
[00:35:13.112]      // while "1"  (timeout="200")
[00:35:13.112]      // while-condition  =>  TRUE
[00:35:13.112]      // while "1"  (timeout="200")
[00:35:13.112]      // while-condition  =>  TRUE
[00:35:13.112]      // while "1"  (timeout="200")
[00:35:13.112]      // while-condition  =>  TRUE
[00:35:13.112]      // while "1"  (timeout="200")
[00:35:13.113]      // while-condition  =>  TRUE
[00:35:13.113]      // while "1"  (timeout="200")
[00:35:13.113]      // while  =>  TIMEOUT
[00:35:13.113]      // end while "1"
[00:35:13.113]    </control>
[00:35:13.113]    <control if="canReadPins" while="" timeout="0" info="">
[00:35:13.113]      // if-block "canReadPins"
[00:35:13.113]        // =>  TRUE
[00:35:13.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:35:13.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:35:13.114]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:35:13.114]        // while-condition  =>  FALSE
[00:35:13.114]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:35:13.114]      </control>
[00:35:13.114]      // end if-block "canReadPins"
[00:35:13.114]    </control>
[00:35:13.114]    <control if="!canReadPins" while="" timeout="0" info="">
[00:35:13.114]      // if-block "!canReadPins"
[00:35:13.116]        // =>  FALSE
[00:35:13.116]      // skip if-block "!canReadPins"
[00:35:13.116]    </control>
[00:35:13.116]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:35:13.116]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:35:13.116]        // =>  TRUE
[00:35:13.116]      <block atomic="false" info="">
[00:35:13.116]        WriteAP(0x00, 0x190008);
[00:35:13.117]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:35:13.117]        WriteAP(0xF0, 0x01);
[00:35:13.121]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:35:13.121]      </block>
[00:35:13.121]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:35:13.123]    </control>
[00:35:13.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:35:13.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:35:13.123]        // =>  FALSE
[00:35:13.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:35:13.123]    </control>
[00:35:13.123]    <block atomic="false" info="">
[00:35:13.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:35:13.125]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:35:13.125]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:35:13.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:35:13.125]      __ap = 0; //lets make sure we reset the access point selection
[00:35:13.125]        // -> [__ap <= 0x00000000]
[00:35:13.125]    </block>
[00:35:13.125]  </sequence>
[00:35:13.125]  
[00:35:13.160]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:35:13.160]  
[00:35:13.160]  <debugvars>
[00:35:13.162]    // Pre-defined
[00:35:13.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:13.162]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:13.162]    __dp=0x00000000
[00:35:13.162]    __ap=0x00000000
[00:35:13.162]    __traceout=0x00000000      (Trace Disabled)
[00:35:13.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:13.162]    __FlashAddr=0x00000000
[00:35:13.162]    __FlashLen=0x00000000
[00:35:13.162]    __FlashArg=0x00000000
[00:35:13.162]    __FlashOp=0x00000000
[00:35:13.162]    __Result=0x00000000
[00:35:13.162]  </debugvars>
[00:35:13.162]  
[00:35:13.162]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:35:13.162]    <block atomic="false" info="">
[00:35:13.162]      __var deviceID = 0;
[00:35:13.162]        // -> [deviceID <= 0x00000000]
[00:35:13.162]      __var version = 0;
[00:35:13.162]        // -> [version <= 0x00000000]
[00:35:13.162]      __var partNum = 0;
[00:35:13.162]        // -> [partNum <= 0x00000000]
[00:35:13.164]      __var manuf = 0;
[00:35:13.164]        // -> [manuf <= 0x00000000]
[00:35:13.164]      __var isMSPM0G1X0X_G3X0X = 0;
[00:35:13.164]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:35:13.164]      __var isProduction = 0;
[00:35:13.164]        // -> [isProduction <= 0x00000000]
[00:35:13.164]      __var continueId = 0;
[00:35:13.164]        // -> [continueId <= 0x00000000]
[00:35:13.164]      deviceID =   Read32(0x41C40004);
[00:35:13.173]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:35:13.173]        // -> [deviceID <= 0x2BB8802F]
[00:35:13.173]      version = deviceID >> 28;
[00:35:13.173]        // -> [version <= 0x00000002]
[00:35:13.173]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:35:13.173]        // -> [partNum <= 0x0000BB88]
[00:35:13.175]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:35:13.175]        // -> [manuf <= 0x00000017]
[00:35:13.175]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:35:13.175]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:35:13.175]      isProduction = (version > 0);
[00:35:13.175]        // -> [isProduction <= 0x00000001]
[00:35:13.175]    </block>
[00:35:13.175]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:35:13.175]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:35:13.175]        // =>  FALSE
[00:35:13.175]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:35:13.175]    </control>
[00:35:13.175]    <control if="continueId == 4" while="" timeout="0" info="">
[00:35:13.175]      // if-block "continueId == 4"
[00:35:13.175]        // =>  FALSE
[00:35:13.175]      // skip if-block "continueId == 4"
[00:35:13.175]    </control>
[00:35:13.175]    <control if="!isProduction" while="" timeout="0" info="">
[00:35:13.175]      // if-block "!isProduction"
[00:35:13.175]        // =>  FALSE
[00:35:13.175]      // skip if-block "!isProduction"
[00:35:13.175]    </control>
[00:35:13.175]  </sequence>
[00:35:13.175]  
[00:36:45.753]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:36:45.753]  
[00:36:45.763]  <debugvars>
[00:36:45.763]    // Pre-defined
[00:36:45.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:45.763]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:45.763]    __dp=0x00000000
[00:36:45.763]    __ap=0x00000000
[00:36:45.763]    __traceout=0x00000000      (Trace Disabled)
[00:36:45.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:45.763]    __FlashAddr=0x00000000
[00:36:45.763]    __FlashLen=0x00000000
[00:36:45.763]    __FlashArg=0x00000000
[00:36:45.763]    __FlashOp=0x00000000
[00:36:45.763]    __Result=0x00000000
[00:36:45.763]  </debugvars>
[00:36:45.763]  
[00:36:45.763]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:36:45.763]    <block atomic="false" info="">
[00:36:45.763]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:36:45.763]        // -> [isSWJ <= 0x00000001]
[00:36:45.763]      __var hasDormant = __protocol & 0x00020000;
[00:36:45.765]        // -> [hasDormant <= 0x00000000]
[00:36:45.765]      __var protType   = __protocol & 0x0000FFFF;
[00:36:45.765]        // -> [protType <= 0x00000002]
[00:36:45.765]    </block>
[00:36:45.765]    <control if="protType == 1" while="" timeout="0" info="">
[00:36:45.765]      // if-block "protType == 1"
[00:36:45.765]        // =>  FALSE
[00:36:45.765]      // skip if-block "protType == 1"
[00:36:45.765]    </control>
[00:36:45.765]    <control if="protType == 2" while="" timeout="0" info="">
[00:36:45.765]      // if-block "protType == 2"
[00:36:45.765]        // =>  TRUE
[00:36:45.765]      <control if="isSWJ" while="" timeout="0" info="">
[00:36:45.765]        // if-block "isSWJ"
[00:36:45.765]          // =>  TRUE
[00:36:45.765]        <control if="hasDormant" while="" timeout="0" info="">
[00:36:45.765]          // if-block "hasDormant"
[00:36:45.765]            // =>  FALSE
[00:36:45.765]          // skip if-block "hasDormant"
[00:36:45.765]        </control>
[00:36:45.765]        <control if="!hasDormant" while="" timeout="0" info="">
[00:36:45.765]          // if-block "!hasDormant"
[00:36:45.765]            // =>  TRUE
[00:36:45.765]          <block atomic="false" info="">
[00:36:45.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:36:45.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:45.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:36:45.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:36:45.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:36:45.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:45.772]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:36:45.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:36:45.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:36:45.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:45.783]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:36:45.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:36:45.783]          </block>
[00:36:45.783]          // end if-block "!hasDormant"
[00:36:45.785]        </control>
[00:36:45.785]        // end if-block "isSWJ"
[00:36:45.785]      </control>
[00:36:45.785]      <control if="!isSWJ" while="" timeout="0" info="">
[00:36:45.785]        // if-block "!isSWJ"
[00:36:45.785]          // =>  FALSE
[00:36:45.785]        // skip if-block "!isSWJ"
[00:36:45.785]      </control>
[00:36:45.785]      <block atomic="false" info="">
[00:36:45.785]        ReadDP(0x0);
[00:36:45.789]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:36:45.789]      </block>
[00:36:45.789]      // end if-block "protType == 2"
[00:36:45.789]    </control>
[00:36:45.789]  </sequence>
[00:36:45.789]  
[00:36:45.791]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:36:45.791]  
[00:36:45.793]  <debugvars>
[00:36:45.793]    // Pre-defined
[00:36:45.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:45.793]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:45.793]    __dp=0x00000000
[00:36:45.793]    __ap=0x00000000
[00:36:45.793]    __traceout=0x00000000      (Trace Disabled)
[00:36:45.793]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:45.793]    __FlashAddr=0x00000000
[00:36:45.793]    __FlashLen=0x00000000
[00:36:45.793]    __FlashArg=0x00000000
[00:36:45.793]    __FlashOp=0x00000000
[00:36:45.793]    __Result=0x00000000
[00:36:45.793]  </debugvars>
[00:36:45.793]  
[00:36:45.793]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:36:45.793]    <block atomic="false" info="">
[00:36:45.793]      __var SW_DP_ABORT       = 0x0;
[00:36:45.793]        // -> [SW_DP_ABORT <= 0x00000000]
[00:36:45.793]      __var DP_CTRL_STAT      = 0x4;
[00:36:45.793]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:36:45.793]      __var DP_SELECT         = 0x8;
[00:36:45.793]        // -> [DP_SELECT <= 0x00000008]
[00:36:45.793]      __var powered_down      = 0;
[00:36:45.793]        // -> [powered_down <= 0x00000000]
[00:36:45.793]      WriteDP(DP_SELECT, 0x00000000);
[00:36:45.801]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:36:45.801]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:36:45.803]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:36:45.803]        // -> [powered_down <= 0x00000001]
[00:36:45.803]    </block>
[00:36:45.803]    <control if="powered_down" while="" timeout="0" info="">
[00:36:45.803]      // if-block "powered_down"
[00:36:45.803]        // =>  TRUE
[00:36:45.803]      <block atomic="false" info="">
[00:36:45.803]        Message(0, "Debug/System power-up request sent");
[00:36:45.805]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:36:45.805]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:36:45.805]      </block>
[00:36:45.805]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:36:45.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:36:45.809]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:36:45.809]        // while-condition  =>  FALSE
[00:36:45.809]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:36:45.809]      </control>
[00:36:45.809]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:36:45.809]        // if-block "(__protocol & 0xFFFF) == 1"
[00:36:45.809]          // =>  FALSE
[00:36:45.809]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:36:45.809]      </control>
[00:36:45.809]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:36:45.809]        // if-block "(__protocol & 0xFFFF) == 2"
[00:36:45.809]          // =>  TRUE
[00:36:45.809]        <block atomic="false" info="">
[00:36:45.809]          Message(0, "executing SWD power up");
[00:36:45.809]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:36:45.813]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:36:45.813]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:36:45.813]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:36:45.813]        </block>
[00:36:45.813]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:36:45.813]      </control>
[00:36:45.813]      // end if-block "powered_down"
[00:36:45.813]    </control>
[00:36:45.813]    <block atomic="false" info="">
[00:36:45.813]      __var DEBUG_PORT_VAL    = 0;
[00:36:45.813]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:36:45.817]      __var ACCESS_POINT_VAL  = 0;
[00:36:45.817]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:36:45.817]      __ap = 1; 
[00:36:45.817]        // -> [__ap <= 0x00000001]
[00:36:45.817]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:36:45.817]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:36:45.817]      __ap = 4;
[00:36:45.821]        // -> [__ap <= 0x00000004]
[00:36:45.821]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:45.827]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:36:45.827]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:36:45.827]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:45.827]    </block>
[00:36:45.827]    <block atomic="false" info="">
[00:36:45.827]      __var nReset = 0x80;
[00:36:45.827]        // -> [nReset <= 0x00000080]
[00:36:45.827]      __var canReadPins = 0;
[00:36:45.827]        // -> [canReadPins <= 0x00000000]
[00:36:45.827]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:36:45.833]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:36:45.833]        // -> [canReadPins <= 0x00000001]
[00:36:45.833]    </block>
[00:36:45.833]    <control if="" while="1" timeout="200" info="">
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.833]      // while "1"  (timeout="200")
[00:36:45.833]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.837]      // while-condition  =>  TRUE
[00:36:45.837]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.841]      // while "1"  (timeout="200")
[00:36:45.841]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.842]      // while "1"  (timeout="200")
[00:36:45.842]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.845]      // while "1"  (timeout="200")
[00:36:45.845]      // while-condition  =>  TRUE
[00:36:45.849]      // while "1"  (timeout="200")
[00:36:45.849]      // while  =>  TIMEOUT
[00:36:45.849]      // end while "1"
[00:36:45.849]    </control>
[00:36:45.849]    <control if="canReadPins" while="" timeout="0" info="">
[00:36:45.849]      // if-block "canReadPins"
[00:36:45.849]        // =>  TRUE
[00:36:45.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:36:45.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:36:45.852]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:36:45.852]        // while-condition  =>  FALSE
[00:36:45.852]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:36:45.852]      </control>
[00:36:45.852]      // end if-block "canReadPins"
[00:36:45.852]    </control>
[00:36:45.852]    <control if="!canReadPins" while="" timeout="0" info="">
[00:36:45.852]      // if-block "!canReadPins"
[00:36:45.852]        // =>  FALSE
[00:36:45.852]      // skip if-block "!canReadPins"
[00:36:45.852]    </control>
[00:36:45.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:36:45.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:45.852]        // =>  TRUE
[00:36:45.852]      <block atomic="false" info="">
[00:36:45.852]        WriteAP(0x00, 0x190008);
[00:36:45.861]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:45.861]        WriteAP(0xF0, 0x01);
[00:36:45.865]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:45.865]      </block>
[00:36:45.865]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:45.865]    </control>
[00:36:45.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:36:45.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:45.865]        // =>  FALSE
[00:36:45.865]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:45.865]    </control>
[00:36:45.865]    <block atomic="false" info="">
[00:36:45.866]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:45.869]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:36:45.869]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:36:45.869]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:45.869]      __ap = 0; //lets make sure we reset the access point selection
[00:36:45.869]        // -> [__ap <= 0x00000000]
[00:36:45.869]    </block>
[00:36:45.869]  </sequence>
[00:36:45.869]  
[00:36:45.905]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:36:45.905]  
[00:36:45.905]  <debugvars>
[00:36:45.905]    // Pre-defined
[00:36:45.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:45.905]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:45.905]    __dp=0x00000000
[00:36:45.905]    __ap=0x00000000
[00:36:45.905]    __traceout=0x00000000      (Trace Disabled)
[00:36:45.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:45.905]    __FlashAddr=0x00000000
[00:36:45.905]    __FlashLen=0x00000000
[00:36:45.905]    __FlashArg=0x00000000
[00:36:45.905]    __FlashOp=0x00000000
[00:36:45.905]    __Result=0x00000000
[00:36:45.905]  </debugvars>
[00:36:45.905]  
[00:36:45.905]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:36:45.905]    <block atomic="false" info="">
[00:36:45.905]      __var deviceID = 0;
[00:36:45.905]        // -> [deviceID <= 0x00000000]
[00:36:45.905]      __var version = 0;
[00:36:45.905]        // -> [version <= 0x00000000]
[00:36:45.905]      __var partNum = 0;
[00:36:45.905]        // -> [partNum <= 0x00000000]
[00:36:45.905]      __var manuf = 0;
[00:36:45.905]        // -> [manuf <= 0x00000000]
[00:36:45.905]      __var isMSPM0G1X0X_G3X0X = 0;
[00:36:45.905]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:36:45.905]      __var isProduction = 0;
[00:36:45.908]        // -> [isProduction <= 0x00000000]
[00:36:45.908]      __var continueId = 0;
[00:36:45.908]        // -> [continueId <= 0x00000000]
[00:36:45.908]      deviceID =   Read32(0x41C40004);
[00:36:45.913]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:36:45.913]        // -> [deviceID <= 0x2BB8802F]
[00:36:45.913]      version = deviceID >> 28;
[00:36:45.913]        // -> [version <= 0x00000002]
[00:36:45.913]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:36:45.914]        // -> [partNum <= 0x0000BB88]
[00:36:45.914]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:36:45.914]        // -> [manuf <= 0x00000017]
[00:36:45.914]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:36:45.914]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:36:45.914]      isProduction = (version > 0);
[00:36:45.914]        // -> [isProduction <= 0x00000001]
[00:36:45.914]    </block>
[00:36:45.914]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:36:45.914]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:36:45.914]        // =>  FALSE
[00:36:45.914]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:36:45.914]    </control>
[00:36:45.914]    <control if="continueId == 4" while="" timeout="0" info="">
[00:36:45.914]      // if-block "continueId == 4"
[00:36:45.914]        // =>  FALSE
[00:36:45.914]      // skip if-block "continueId == 4"
[00:36:45.914]    </control>
[00:36:45.916]    <control if="!isProduction" while="" timeout="0" info="">
[00:36:45.916]      // if-block "!isProduction"
[00:36:45.916]        // =>  FALSE
[00:36:45.916]      // skip if-block "!isProduction"
[00:36:45.916]    </control>
[00:36:45.916]  </sequence>
[00:36:45.916]  
[00:39:44.331]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:44.331]  
[00:39:44.341]  <debugvars>
[00:39:44.341]    // Pre-defined
[00:39:44.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:44.341]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:44.341]    __dp=0x00000000
[00:39:44.341]    __ap=0x00000000
[00:39:44.341]    __traceout=0x00000000      (Trace Disabled)
[00:39:44.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:44.341]    __FlashAddr=0x00000000
[00:39:44.341]    __FlashLen=0x00000000
[00:39:44.341]    __FlashArg=0x00000000
[00:39:44.341]    __FlashOp=0x00000000
[00:39:44.341]    __Result=0x00000000
[00:39:44.341]  </debugvars>
[00:39:44.341]  
[00:39:44.341]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:44.341]    <block atomic="false" info="">
[00:39:44.341]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:44.341]        // -> [isSWJ <= 0x00000001]
[00:39:44.341]      __var hasDormant = __protocol & 0x00020000;
[00:39:44.341]        // -> [hasDormant <= 0x00000000]
[00:39:44.341]      __var protType   = __protocol & 0x0000FFFF;
[00:39:44.341]        // -> [protType <= 0x00000002]
[00:39:44.341]    </block>
[00:39:44.341]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:44.344]      // if-block "protType == 1"
[00:39:44.344]        // =>  FALSE
[00:39:44.344]      // skip if-block "protType == 1"
[00:39:44.344]    </control>
[00:39:44.344]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:44.344]      // if-block "protType == 2"
[00:39:44.344]        // =>  TRUE
[00:39:44.344]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:44.344]        // if-block "isSWJ"
[00:39:44.344]          // =>  TRUE
[00:39:44.344]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:44.344]          // if-block "hasDormant"
[00:39:44.344]            // =>  FALSE
[00:39:44.344]          // skip if-block "hasDormant"
[00:39:44.344]        </control>
[00:39:44.344]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:44.344]          // if-block "!hasDormant"
[00:39:44.344]            // =>  TRUE
[00:39:44.346]          <block atomic="false" info="">
[00:39:44.346]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:44.346]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:44.348]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:44.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:44.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:44.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:44.351]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:44.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:44.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:44.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:44.356]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:44.356]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:44.356]          </block>
[00:39:44.356]          // end if-block "!hasDormant"
[00:39:44.356]        </control>
[00:39:44.356]        // end if-block "isSWJ"
[00:39:44.356]      </control>
[00:39:44.356]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:44.356]        // if-block "!isSWJ"
[00:39:44.356]          // =>  FALSE
[00:39:44.356]        // skip if-block "!isSWJ"
[00:39:44.356]      </control>
[00:39:44.356]      <block atomic="false" info="">
[00:39:44.356]        ReadDP(0x0);
[00:39:44.360]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:44.360]      </block>
[00:39:44.360]      // end if-block "protType == 2"
[00:39:44.360]    </control>
[00:39:44.360]  </sequence>
[00:39:44.360]  
[00:39:44.366]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:44.366]  
[00:39:44.366]  <debugvars>
[00:39:44.366]    // Pre-defined
[00:39:44.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:44.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:44.366]    __dp=0x00000000
[00:39:44.366]    __ap=0x00000000
[00:39:44.366]    __traceout=0x00000000      (Trace Disabled)
[00:39:44.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:44.366]    __FlashAddr=0x00000000
[00:39:44.366]    __FlashLen=0x00000000
[00:39:44.368]    __FlashArg=0x00000000
[00:39:44.368]    __FlashOp=0x00000000
[00:39:44.368]    __Result=0x00000000
[00:39:44.368]  </debugvars>
[00:39:44.368]  
[00:39:44.368]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:44.368]    <block atomic="false" info="">
[00:39:44.368]      __var SW_DP_ABORT       = 0x0;
[00:39:44.368]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:44.368]      __var DP_CTRL_STAT      = 0x4;
[00:39:44.368]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:44.368]      __var DP_SELECT         = 0x8;
[00:39:44.368]        // -> [DP_SELECT <= 0x00000008]
[00:39:44.368]      __var powered_down      = 0;
[00:39:44.368]        // -> [powered_down <= 0x00000000]
[00:39:44.368]      WriteDP(DP_SELECT, 0x00000000);
[00:39:44.372]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:44.372]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:44.372]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:44.372]        // -> [powered_down <= 0x00000001]
[00:39:44.372]    </block>
[00:39:44.372]    <control if="powered_down" while="" timeout="0" info="">
[00:39:44.372]      // if-block "powered_down"
[00:39:44.372]        // =>  TRUE
[00:39:44.372]      <block atomic="false" info="">
[00:39:44.376]        Message(0, "Debug/System power-up request sent");
[00:39:44.377]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:44.378]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:44.378]      </block>
[00:39:44.378]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:44.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:44.380]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:44.380]        // while-condition  =>  FALSE
[00:39:44.380]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:44.380]      </control>
[00:39:44.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:44.380]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:44.380]          // =>  FALSE
[00:39:44.383]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:44.383]      </control>
[00:39:44.383]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:44.383]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:44.383]          // =>  TRUE
[00:39:44.383]        <block atomic="false" info="">
[00:39:44.383]          Message(0, "executing SWD power up");
[00:39:44.385]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:44.386]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:44.386]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:44.386]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:44.386]        </block>
[00:39:44.386]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:44.386]      </control>
[00:39:44.386]      // end if-block "powered_down"
[00:39:44.386]    </control>
[00:39:44.386]    <block atomic="false" info="">
[00:39:44.386]      __var DEBUG_PORT_VAL    = 0;
[00:39:44.386]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:44.386]      __var ACCESS_POINT_VAL  = 0;
[00:39:44.386]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:44.386]      __ap = 1; 
[00:39:44.386]        // -> [__ap <= 0x00000001]
[00:39:44.389]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:44.389]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:44.389]      __ap = 4;
[00:39:44.389]        // -> [__ap <= 0x00000004]
[00:39:44.389]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:44.396]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:44.396]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:44.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:44.399]    </block>
[00:39:44.399]    <block atomic="false" info="">
[00:39:44.399]      __var nReset = 0x80;
[00:39:44.399]        // -> [nReset <= 0x00000080]
[00:39:44.399]      __var canReadPins = 0;
[00:39:44.399]        // -> [canReadPins <= 0x00000000]
[00:39:44.399]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:44.402]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:44.402]        // -> [canReadPins <= 0x00000001]
[00:39:44.402]    </block>
[00:39:44.402]    <control if="" while="1" timeout="200" info="">
[00:39:44.402]      // while "1"  (timeout="200")
[00:39:44.402]      // while-condition  =>  TRUE
[00:39:44.402]      // while "1"  (timeout="200")
[00:39:44.402]      // while-condition  =>  TRUE
[00:39:44.402]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.406]      // while-condition  =>  TRUE
[00:39:44.406]      // while "1"  (timeout="200")
[00:39:44.410]      // while-condition  =>  TRUE
[00:39:44.410]      // while "1"  (timeout="200")
[00:39:44.410]      // while  =>  TIMEOUT
[00:39:44.410]      // end while "1"
[00:39:44.410]    </control>
[00:39:44.410]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:44.410]      // if-block "canReadPins"
[00:39:44.410]        // =>  TRUE
[00:39:44.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:44.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:44.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:44.410]        // while-condition  =>  FALSE
[00:39:44.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:44.410]      </control>
[00:39:44.410]      // end if-block "canReadPins"
[00:39:44.410]    </control>
[00:39:44.414]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:44.414]      // if-block "!canReadPins"
[00:39:44.414]        // =>  FALSE
[00:39:44.414]      // skip if-block "!canReadPins"
[00:39:44.414]    </control>
[00:39:44.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:44.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:44.414]        // =>  TRUE
[00:39:44.414]      <block atomic="false" info="">
[00:39:44.414]        WriteAP(0x00, 0x190008);
[00:39:44.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:44.416]        WriteAP(0xF0, 0x01);
[00:39:44.422]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:44.422]      </block>
[00:39:44.422]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:44.426]    </control>
[00:39:44.427]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:44.427]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:44.427]        // =>  FALSE
[00:39:44.427]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:44.427]    </control>
[00:39:44.427]    <block atomic="false" info="">
[00:39:44.427]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:44.431]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:44.435]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:44.435]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:44.436]      __ap = 0; //lets make sure we reset the access point selection
[00:39:44.436]        // -> [__ap <= 0x00000000]
[00:39:44.436]    </block>
[00:39:44.436]  </sequence>
[00:39:44.436]  
[00:39:44.466]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:44.466]  
[00:39:44.466]  <debugvars>
[00:39:44.466]    // Pre-defined
[00:39:44.466]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:44.466]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:44.466]    __dp=0x00000000
[00:39:44.467]    __ap=0x00000000
[00:39:44.468]    __traceout=0x00000000      (Trace Disabled)
[00:39:44.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:44.468]    __FlashAddr=0x00000000
[00:39:44.468]    __FlashLen=0x00000000
[00:39:44.468]    __FlashArg=0x00000000
[00:39:44.468]    __FlashOp=0x00000000
[00:39:44.468]    __Result=0x00000000
[00:39:44.468]  </debugvars>
[00:39:44.468]  
[00:39:44.468]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:44.468]    <block atomic="false" info="">
[00:39:44.468]      __var deviceID = 0;
[00:39:44.468]        // -> [deviceID <= 0x00000000]
[00:39:44.468]      __var version = 0;
[00:39:44.468]        // -> [version <= 0x00000000]
[00:39:44.468]      __var partNum = 0;
[00:39:44.469]        // -> [partNum <= 0x00000000]
[00:39:44.469]      __var manuf = 0;
[00:39:44.469]        // -> [manuf <= 0x00000000]
[00:39:44.469]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:44.469]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:44.469]      __var isProduction = 0;
[00:39:44.470]        // -> [isProduction <= 0x00000000]
[00:39:44.470]      __var continueId = 0;
[00:39:44.470]        // -> [continueId <= 0x00000000]
[00:39:44.470]      deviceID =   Read32(0x41C40004);
[00:39:44.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:44.476]        // -> [deviceID <= 0x2BB8802F]
[00:39:44.478]      version = deviceID >> 28;
[00:39:44.478]        // -> [version <= 0x00000002]
[00:39:44.478]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:44.478]        // -> [partNum <= 0x0000BB88]
[00:39:44.478]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:44.478]        // -> [manuf <= 0x00000017]
[00:39:44.478]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:44.478]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:44.478]      isProduction = (version > 0);
[00:39:44.478]        // -> [isProduction <= 0x00000001]
[00:39:44.478]    </block>
[00:39:44.478]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:44.478]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:44.480]        // =>  FALSE
[00:39:44.480]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:44.480]    </control>
[00:39:44.480]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:44.480]      // if-block "continueId == 4"
[00:39:44.480]        // =>  FALSE
[00:39:44.480]      // skip if-block "continueId == 4"
[00:39:44.480]    </control>
[00:39:44.480]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:44.480]      // if-block "!isProduction"
[00:39:44.480]        // =>  FALSE
[00:39:44.480]      // skip if-block "!isProduction"
[00:39:44.481]    </control>
[00:39:44.481]  </sequence>
[00:39:44.481]  
[00:39:50.766]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:50.766]  
[00:39:50.776]  <debugvars>
[00:39:50.776]    // Pre-defined
[00:39:50.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:50.776]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:39:50.776]    __dp=0x00000000
[00:39:50.776]    __ap=0x00000000
[00:39:50.776]    __traceout=0x00000000      (Trace Disabled)
[00:39:50.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:50.776]    __FlashAddr=0x00000000
[00:39:50.776]    __FlashLen=0x00000000
[00:39:50.776]    __FlashArg=0x00000000
[00:39:50.776]    __FlashOp=0x00000000
[00:39:50.776]    __Result=0x00000000
[00:39:50.776]  </debugvars>
[00:39:50.776]  
[00:39:50.776]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:50.776]    <block atomic="false" info="">
[00:39:50.776]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:50.776]        // -> [isSWJ <= 0x00000001]
[00:39:50.776]      __var hasDormant = __protocol & 0x00020000;
[00:39:50.776]        // -> [hasDormant <= 0x00000000]
[00:39:50.776]      __var protType   = __protocol & 0x0000FFFF;
[00:39:50.776]        // -> [protType <= 0x00000002]
[00:39:50.776]    </block>
[00:39:50.776]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:50.776]      // if-block "protType == 1"
[00:39:50.776]        // =>  FALSE
[00:39:50.776]      // skip if-block "protType == 1"
[00:39:50.776]    </control>
[00:39:50.776]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:50.776]      // if-block "protType == 2"
[00:39:50.776]        // =>  TRUE
[00:39:50.776]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:50.776]        // if-block "isSWJ"
[00:39:50.776]          // =>  TRUE
[00:39:50.776]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:50.776]          // if-block "hasDormant"
[00:39:50.776]            // =>  FALSE
[00:39:50.776]          // skip if-block "hasDormant"
[00:39:50.776]        </control>
[00:39:50.776]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:50.776]          // if-block "!hasDormant"
[00:39:50.780]            // =>  TRUE
[00:39:50.780]          <block atomic="false" info="">
[00:39:50.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:50.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:50.786]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:50.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:50.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:50.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:50.789]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:50.793]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:50.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:50.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:50.795]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:50.797]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:50.797]          </block>
[00:39:50.797]          // end if-block "!hasDormant"
[00:39:50.797]        </control>
[00:39:50.797]        // end if-block "isSWJ"
[00:39:50.797]      </control>
[00:39:50.797]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:50.797]        // if-block "!isSWJ"
[00:39:50.797]          // =>  FALSE
[00:39:50.797]        // skip if-block "!isSWJ"
[00:39:50.797]      </control>
[00:39:50.797]      <block atomic="false" info="">
[00:39:50.797]        ReadDP(0x0);
[00:39:50.801]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:50.801]      </block>
[00:39:50.801]      // end if-block "protType == 2"
[00:39:50.801]    </control>
[00:39:50.801]  </sequence>
[00:39:50.801]  
[00:39:50.810]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:50.810]  
[00:39:50.810]  <debugvars>
[00:39:50.810]    // Pre-defined
[00:39:50.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:50.810]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:39:50.810]    __dp=0x00000000
[00:39:50.810]    __ap=0x00000000
[00:39:50.810]    __traceout=0x00000000      (Trace Disabled)
[00:39:50.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:50.810]    __FlashAddr=0x00000000
[00:39:50.810]    __FlashLen=0x00000000
[00:39:50.810]    __FlashArg=0x00000000
[00:39:50.810]    __FlashOp=0x00000000
[00:39:50.810]    __Result=0x00000000
[00:39:50.810]  </debugvars>
[00:39:50.810]  
[00:39:50.810]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:50.810]    <block atomic="false" info="">
[00:39:50.810]      __var SW_DP_ABORT       = 0x0;
[00:39:50.810]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:50.810]      __var DP_CTRL_STAT      = 0x4;
[00:39:50.810]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:50.810]      __var DP_SELECT         = 0x8;
[00:39:50.810]        // -> [DP_SELECT <= 0x00000008]
[00:39:50.810]      __var powered_down      = 0;
[00:39:50.810]        // -> [powered_down <= 0x00000000]
[00:39:50.810]      WriteDP(DP_SELECT, 0x00000000);
[00:39:50.814]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:50.814]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:50.816]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:50.816]        // -> [powered_down <= 0x00000001]
[00:39:50.816]    </block>
[00:39:50.816]    <control if="powered_down" while="" timeout="0" info="">
[00:39:50.816]      // if-block "powered_down"
[00:39:50.816]        // =>  TRUE
[00:39:50.816]      <block atomic="false" info="">
[00:39:50.816]        Message(0, "Debug/System power-up request sent");
[00:39:50.820]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:50.822]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:50.822]      </block>
[00:39:50.822]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:50.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:50.823]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:50.823]        // while-condition  =>  FALSE
[00:39:50.823]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:50.823]      </control>
[00:39:50.823]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:50.823]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:50.823]          // =>  FALSE
[00:39:50.823]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:50.823]      </control>
[00:39:50.823]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:50.823]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:50.823]          // =>  TRUE
[00:39:50.823]        <block atomic="false" info="">
[00:39:50.827]          Message(0, "executing SWD power up");
[00:39:50.827]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:50.831]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:50.831]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:50.831]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:50.831]        </block>
[00:39:50.831]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:50.831]      </control>
[00:39:50.831]      // end if-block "powered_down"
[00:39:50.831]    </control>
[00:39:50.831]    <block atomic="false" info="">
[00:39:50.831]      __var DEBUG_PORT_VAL    = 0;
[00:39:50.831]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:50.831]      __var ACCESS_POINT_VAL  = 0;
[00:39:50.831]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:50.831]      __ap = 1; 
[00:39:50.831]        // -> [__ap <= 0x00000001]
[00:39:50.831]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:50.837]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:50.837]      __ap = 4;
[00:39:50.837]        // -> [__ap <= 0x00000004]
[00:39:50.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:50.846]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:50.846]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:50.846]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:50.846]    </block>
[00:39:50.846]    <block atomic="false" info="">
[00:39:50.846]      __var nReset = 0x80;
[00:39:50.846]        // -> [nReset <= 0x00000080]
[00:39:50.846]      __var canReadPins = 0;
[00:39:50.846]        // -> [canReadPins <= 0x00000000]
[00:39:50.846]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:50.850]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:50.850]        // -> [canReadPins <= 0x00000001]
[00:39:50.850]    </block>
[00:39:50.850]    <control if="" while="1" timeout="200" info="">
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.850]      // while "1"  (timeout="200")
[00:39:50.850]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.854]      // while-condition  =>  TRUE
[00:39:50.854]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.856]      // while-condition  =>  TRUE
[00:39:50.856]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.858]      // while-condition  =>  TRUE
[00:39:50.858]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.862]      // while-condition  =>  TRUE
[00:39:50.862]      // while "1"  (timeout="200")
[00:39:50.867]      // while-condition  =>  TRUE
[00:39:50.867]      // while "1"  (timeout="200")
[00:39:50.867]      // while  =>  TIMEOUT
[00:39:50.867]      // end while "1"
[00:39:50.868]    </control>
[00:39:50.868]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:50.868]      // if-block "canReadPins"
[00:39:50.868]        // =>  TRUE
[00:39:50.868]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:50.868]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:50.869]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:50.869]        // while-condition  =>  FALSE
[00:39:50.869]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:50.869]      </control>
[00:39:50.869]      // end if-block "canReadPins"
[00:39:50.869]    </control>
[00:39:50.869]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:50.869]      // if-block "!canReadPins"
[00:39:50.869]        // =>  FALSE
[00:39:50.869]      // skip if-block "!canReadPins"
[00:39:50.869]    </control>
[00:39:50.869]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:50.869]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:50.871]        // =>  TRUE
[00:39:50.871]      <block atomic="false" info="">
[00:39:50.871]        WriteAP(0x00, 0x190008);
[00:39:50.871]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:50.871]        WriteAP(0xF0, 0x01);
[00:39:50.883]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:50.883]      </block>
[00:39:50.883]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:50.883]    </control>
[00:39:50.883]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:50.883]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:50.883]        // =>  FALSE
[00:39:50.883]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:50.883]    </control>
[00:39:50.883]    <block atomic="false" info="">
[00:39:50.883]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:50.887]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:50.887]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:50.887]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:50.891]      __ap = 0; //lets make sure we reset the access point selection
[00:39:50.891]        // -> [__ap <= 0x00000000]
[00:39:50.891]    </block>
[00:39:50.891]  </sequence>
[00:39:50.891]  
[00:39:50.912]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:50.912]  
[00:39:50.912]  <debugvars>
[00:39:50.912]    // Pre-defined
[00:39:50.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:50.912]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:39:50.912]    __dp=0x00000000
[00:39:50.912]    __ap=0x00000000
[00:39:50.912]    __traceout=0x00000000      (Trace Disabled)
[00:39:50.912]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:50.912]    __FlashAddr=0x00000000
[00:39:50.912]    __FlashLen=0x00000000
[00:39:50.912]    __FlashArg=0x00000000
[00:39:50.912]    __FlashOp=0x00000000
[00:39:50.912]    __Result=0x00000000
[00:39:50.912]  </debugvars>
[00:39:50.912]  
[00:39:50.912]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:50.912]    <block atomic="false" info="">
[00:39:50.912]      __var deviceID = 0;
[00:39:50.912]        // -> [deviceID <= 0x00000000]
[00:39:50.912]      __var version = 0;
[00:39:50.912]        // -> [version <= 0x00000000]
[00:39:50.912]      __var partNum = 0;
[00:39:50.912]        // -> [partNum <= 0x00000000]
[00:39:50.912]      __var manuf = 0;
[00:39:50.912]        // -> [manuf <= 0x00000000]
[00:39:50.915]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:50.915]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:50.915]      __var isProduction = 0;
[00:39:50.915]        // -> [isProduction <= 0x00000000]
[00:39:50.915]      __var continueId = 0;
[00:39:50.915]        // -> [continueId <= 0x00000000]
[00:39:50.915]      deviceID =   Read32(0x41C40004);
[00:39:50.923]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:50.923]        // -> [deviceID <= 0x2BB8802F]
[00:39:50.923]      version = deviceID >> 28;
[00:39:50.923]        // -> [version <= 0x00000002]
[00:39:50.923]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:50.923]        // -> [partNum <= 0x0000BB88]
[00:39:50.923]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:50.923]        // -> [manuf <= 0x00000017]
[00:39:50.923]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:50.923]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:50.923]      isProduction = (version > 0);
[00:39:50.923]        // -> [isProduction <= 0x00000001]
[00:39:50.923]    </block>
[00:39:50.923]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:50.923]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:50.926]        // =>  FALSE
[00:39:50.926]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:50.926]    </control>
[00:39:50.926]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:50.926]      // if-block "continueId == 4"
[00:39:50.926]        // =>  FALSE
[00:39:50.926]      // skip if-block "continueId == 4"
[00:39:50.926]    </control>
[00:39:50.927]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:50.927]      // if-block "!isProduction"
[00:39:50.927]        // =>  FALSE
[00:39:50.927]      // skip if-block "!isProduction"
[00:39:50.927]    </control>
[00:39:50.927]  </sequence>
[00:39:50.927]  
[00:40:43.248]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:40:43.248]  
[00:40:43.248]  <debugvars>
[00:40:43.248]    // Pre-defined
[00:40:43.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:43.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:43.248]    __dp=0x00000000
[00:40:43.248]    __ap=0x00000000
[00:40:43.248]    __traceout=0x00000000      (Trace Disabled)
[00:40:43.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:43.248]    __FlashAddr=0x00000000
[00:40:43.249]    __FlashLen=0x00000000
[00:40:43.249]    __FlashArg=0x00000000
[00:40:43.249]    __FlashOp=0x00000000
[00:40:43.249]    __Result=0x00000000
[00:40:43.249]  </debugvars>
[00:40:43.249]  
[00:40:43.249]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:40:43.249]    <block atomic="false" info="">
[00:40:43.249]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:40:43.249]        // -> [isSWJ <= 0x00000001]
[00:40:43.249]      __var hasDormant = __protocol & 0x00020000;
[00:40:43.249]        // -> [hasDormant <= 0x00000000]
[00:40:43.249]      __var protType   = __protocol & 0x0000FFFF;
[00:40:43.249]        // -> [protType <= 0x00000002]
[00:40:43.249]    </block>
[00:40:43.249]    <control if="protType == 1" while="" timeout="0" info="">
[00:40:43.249]      // if-block "protType == 1"
[00:40:43.249]        // =>  FALSE
[00:40:43.249]      // skip if-block "protType == 1"
[00:40:43.249]    </control>
[00:40:43.249]    <control if="protType == 2" while="" timeout="0" info="">
[00:40:43.249]      // if-block "protType == 2"
[00:40:43.249]        // =>  TRUE
[00:40:43.249]      <control if="isSWJ" while="" timeout="0" info="">
[00:40:43.249]        // if-block "isSWJ"
[00:40:43.249]          // =>  TRUE
[00:40:43.249]        <control if="hasDormant" while="" timeout="0" info="">
[00:40:43.249]          // if-block "hasDormant"
[00:40:43.249]            // =>  FALSE
[00:40:43.249]          // skip if-block "hasDormant"
[00:40:43.249]        </control>
[00:40:43.249]        <control if="!hasDormant" while="" timeout="0" info="">
[00:40:43.249]          // if-block "!hasDormant"
[00:40:43.249]            // =>  TRUE
[00:40:43.249]          <block atomic="false" info="">
[00:40:43.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:40:43.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:43.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:40:43.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:40:43.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:40:43.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:43.258]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:40:43.261]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:40:43.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:40:43.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:43.265]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:40:43.267]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:40:43.267]          </block>
[00:40:43.267]          // end if-block "!hasDormant"
[00:40:43.267]        </control>
[00:40:43.267]        // end if-block "isSWJ"
[00:40:43.267]      </control>
[00:40:43.267]      <control if="!isSWJ" while="" timeout="0" info="">
[00:40:43.267]        // if-block "!isSWJ"
[00:40:43.267]          // =>  FALSE
[00:40:43.267]        // skip if-block "!isSWJ"
[00:40:43.269]      </control>
[00:40:43.269]      <block atomic="false" info="">
[00:40:43.269]        ReadDP(0x0);
[00:40:43.269]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:40:43.269]      </block>
[00:40:43.273]      // end if-block "protType == 2"
[00:40:43.273]    </control>
[00:40:43.273]  </sequence>
[00:40:43.273]  
[00:40:43.277]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:40:43.277]  
[00:40:43.277]  <debugvars>
[00:40:43.277]    // Pre-defined
[00:40:43.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:43.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:43.279]    __dp=0x00000000
[00:40:43.279]    __ap=0x00000000
[00:40:43.279]    __traceout=0x00000000      (Trace Disabled)
[00:40:43.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:43.279]    __FlashAddr=0x00000000
[00:40:43.279]    __FlashLen=0x00000000
[00:40:43.279]    __FlashArg=0x00000000
[00:40:43.279]    __FlashOp=0x00000000
[00:40:43.279]    __Result=0x00000000
[00:40:43.279]  </debugvars>
[00:40:43.279]  
[00:40:43.279]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:40:43.279]    <block atomic="false" info="">
[00:40:43.279]      __var SW_DP_ABORT       = 0x0;
[00:40:43.281]        // -> [SW_DP_ABORT <= 0x00000000]
[00:40:43.281]      __var DP_CTRL_STAT      = 0x4;
[00:40:43.281]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:40:43.281]      __var DP_SELECT         = 0x8;
[00:40:43.281]        // -> [DP_SELECT <= 0x00000008]
[00:40:43.281]      __var powered_down      = 0;
[00:40:43.281]        // -> [powered_down <= 0x00000000]
[00:40:43.281]      WriteDP(DP_SELECT, 0x00000000);
[00:40:43.281]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:40:43.281]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:40:43.285]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:40:43.285]        // -> [powered_down <= 0x00000001]
[00:40:43.285]    </block>
[00:40:43.285]    <control if="powered_down" while="" timeout="0" info="">
[00:40:43.285]      // if-block "powered_down"
[00:40:43.285]        // =>  TRUE
[00:40:43.285]      <block atomic="false" info="">
[00:40:43.285]        Message(0, "Debug/System power-up request sent");
[00:40:43.287]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:40:43.289]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:40:43.289]      </block>
[00:40:43.289]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:40:43.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:40:43.289]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:40:43.289]        // while-condition  =>  FALSE
[00:40:43.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:40:43.289]      </control>
[00:40:43.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:40:43.293]        // if-block "(__protocol & 0xFFFF) == 1"
[00:40:43.293]          // =>  FALSE
[00:40:43.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:40:43.293]      </control>
[00:40:43.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:40:43.293]        // if-block "(__protocol & 0xFFFF) == 2"
[00:40:43.293]          // =>  TRUE
[00:40:43.293]        <block atomic="false" info="">
[00:40:43.293]          Message(0, "executing SWD power up");
[00:40:43.295]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:40:43.303]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:40:43.303]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:40:43.303]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:40:43.303]        </block>
[00:40:43.303]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:40:43.303]      </control>
[00:40:43.306]      // end if-block "powered_down"
[00:40:43.306]    </control>
[00:40:43.306]    <block atomic="false" info="">
[00:40:43.306]      __var DEBUG_PORT_VAL    = 0;
[00:40:43.306]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:40:43.306]      __var ACCESS_POINT_VAL  = 0;
[00:40:43.306]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:40:43.306]      __ap = 1; 
[00:40:43.306]        // -> [__ap <= 0x00000001]
[00:40:43.306]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:40:43.310]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:40:43.310]      __ap = 4;
[00:40:43.310]        // -> [__ap <= 0x00000004]
[00:40:43.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:43.315]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:40:43.315]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:40:43.315]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:43.318]    </block>
[00:40:43.318]    <block atomic="false" info="">
[00:40:43.318]      __var nReset = 0x80;
[00:40:43.318]        // -> [nReset <= 0x00000080]
[00:40:43.318]      __var canReadPins = 0;
[00:40:43.318]        // -> [canReadPins <= 0x00000000]
[00:40:43.318]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:40:43.323]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:40:43.323]        // -> [canReadPins <= 0x00000001]
[00:40:43.323]    </block>
[00:40:43.323]    <control if="" while="1" timeout="200" info="">
[00:40:43.323]      // while "1"  (timeout="200")
[00:40:43.323]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.325]      // while "1"  (timeout="200")
[00:40:43.325]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.326]      // while "1"  (timeout="200")
[00:40:43.326]      // while-condition  =>  TRUE
[00:40:43.328]      // while "1"  (timeout="200")
[00:40:43.328]      // while-condition  =>  TRUE
[00:40:43.328]      // while "1"  (timeout="200")
[00:40:43.328]      // while-condition  =>  TRUE
[00:40:43.328]      // while "1"  (timeout="200")
[00:40:43.328]      // while-condition  =>  TRUE
[00:40:43.328]      // while "1"  (timeout="200")
[00:40:43.328]      // while-condition  =>  TRUE
[00:40:43.328]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.329]      // while-condition  =>  TRUE
[00:40:43.329]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.330]      // while "1"  (timeout="200")
[00:40:43.330]      // while-condition  =>  TRUE
[00:40:43.332]      // while "1"  (timeout="200")
[00:40:43.332]      // while  =>  TIMEOUT
[00:40:43.332]      // end while "1"
[00:40:43.332]    </control>
[00:40:43.332]    <control if="canReadPins" while="" timeout="0" info="">
[00:40:43.332]      // if-block "canReadPins"
[00:40:43.332]        // =>  TRUE
[00:40:43.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:40:43.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:40:43.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:40:43.332]        // while-condition  =>  FALSE
[00:40:43.335]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:40:43.335]      </control>
[00:40:43.335]      // end if-block "canReadPins"
[00:40:43.335]    </control>
[00:40:43.335]    <control if="!canReadPins" while="" timeout="0" info="">
[00:40:43.335]      // if-block "!canReadPins"
[00:40:43.335]        // =>  FALSE
[00:40:43.335]      // skip if-block "!canReadPins"
[00:40:43.335]    </control>
[00:40:43.335]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:40:43.335]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:43.335]        // =>  TRUE
[00:40:43.335]      <block atomic="false" info="">
[00:40:43.335]        WriteAP(0x00, 0x190008);
[00:40:43.338]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:43.338]        WriteAP(0xF0, 0x01);
[00:40:43.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:43.343]      </block>
[00:40:43.343]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:43.343]    </control>
[00:40:43.343]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:40:43.343]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:43.343]        // =>  FALSE
[00:40:43.343]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:43.343]    </control>
[00:40:43.343]    <block atomic="false" info="">
[00:40:43.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:43.349]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:40:43.349]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:40:43.349]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:43.353]      __ap = 0; //lets make sure we reset the access point selection
[00:40:43.353]        // -> [__ap <= 0x00000000]
[00:40:43.353]    </block>
[00:40:43.353]  </sequence>
[00:40:43.353]  
[00:40:43.387]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:40:43.387]  
[00:40:43.387]  <debugvars>
[00:40:43.387]    // Pre-defined
[00:40:43.389]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:43.389]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:43.389]    __dp=0x00000000
[00:40:43.389]    __ap=0x00000000
[00:40:43.389]    __traceout=0x00000000      (Trace Disabled)
[00:40:43.389]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:43.389]    __FlashAddr=0x00000000
[00:40:43.389]    __FlashLen=0x00000000
[00:40:43.389]    __FlashArg=0x00000000
[00:40:43.390]    __FlashOp=0x00000000
[00:40:43.390]    __Result=0x00000000
[00:40:43.390]  </debugvars>
[00:40:43.390]  
[00:40:43.390]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:40:43.390]    <block atomic="false" info="">
[00:40:43.390]      __var deviceID = 0;
[00:40:43.390]        // -> [deviceID <= 0x00000000]
[00:40:43.390]      __var version = 0;
[00:40:43.390]        // -> [version <= 0x00000000]
[00:40:43.390]      __var partNum = 0;
[00:40:43.390]        // -> [partNum <= 0x00000000]
[00:40:43.390]      __var manuf = 0;
[00:40:43.390]        // -> [manuf <= 0x00000000]
[00:40:43.390]      __var isMSPM0G1X0X_G3X0X = 0;
[00:40:43.390]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:40:43.390]      __var isProduction = 0;
[00:40:43.390]        // -> [isProduction <= 0x00000000]
[00:40:43.390]      __var continueId = 0;
[00:40:43.390]        // -> [continueId <= 0x00000000]
[00:40:43.390]      deviceID =   Read32(0x41C40004);
[00:40:43.401]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:40:43.401]        // -> [deviceID <= 0x2BB8802F]
[00:40:43.401]      version = deviceID >> 28;
[00:40:43.401]        // -> [version <= 0x00000002]
[00:40:43.401]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:40:43.401]        // -> [partNum <= 0x0000BB88]
[00:40:43.401]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:40:43.401]        // -> [manuf <= 0x00000017]
[00:40:43.401]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:40:43.401]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:40:43.401]      isProduction = (version > 0);
[00:40:43.401]        // -> [isProduction <= 0x00000001]
[00:40:43.401]    </block>
[00:40:43.401]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:40:43.401]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:40:43.401]        // =>  FALSE
[00:40:43.401]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:40:43.401]    </control>
[00:40:43.401]    <control if="continueId == 4" while="" timeout="0" info="">
[00:40:43.401]      // if-block "continueId == 4"
[00:40:43.401]        // =>  FALSE
[00:40:43.405]      // skip if-block "continueId == 4"
[00:40:43.405]    </control>
[00:40:43.405]    <control if="!isProduction" while="" timeout="0" info="">
[00:40:43.405]      // if-block "!isProduction"
[00:40:43.405]        // =>  FALSE
[00:40:43.406]      // skip if-block "!isProduction"
[00:40:43.406]    </control>
[00:40:43.406]  </sequence>
[00:40:43.406]  
[00:45:26.373]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:45:26.373]  
[00:45:26.381]  <debugvars>
[00:45:26.381]    // Pre-defined
[00:45:26.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:45:26.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:45:26.381]    __dp=0x00000000
[00:45:26.381]    __ap=0x00000000
[00:45:26.381]    __traceout=0x00000000      (Trace Disabled)
[00:45:26.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:45:26.383]    __FlashAddr=0x00000000
[00:45:26.383]    __FlashLen=0x00000000
[00:45:26.383]    __FlashArg=0x00000000
[00:45:26.383]    __FlashOp=0x00000000
[00:45:26.383]    __Result=0x00000000
[00:45:26.383]  </debugvars>
[00:45:26.383]  
[00:45:26.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:45:26.383]    <block atomic="false" info="">
[00:45:26.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:45:26.383]        // -> [isSWJ <= 0x00000001]
[00:45:26.383]      __var hasDormant = __protocol & 0x00020000;
[00:45:26.383]        // -> [hasDormant <= 0x00000000]
[00:45:26.383]      __var protType   = __protocol & 0x0000FFFF;
[00:45:26.383]        // -> [protType <= 0x00000002]
[00:45:26.383]    </block>
[00:45:26.383]    <control if="protType == 1" while="" timeout="0" info="">
[00:45:26.383]      // if-block "protType == 1"
[00:45:26.383]        // =>  FALSE
[00:45:26.383]      // skip if-block "protType == 1"
[00:45:26.383]    </control>
[00:45:26.383]    <control if="protType == 2" while="" timeout="0" info="">
[00:45:26.383]      // if-block "protType == 2"
[00:45:26.383]        // =>  TRUE
[00:45:26.383]      <control if="isSWJ" while="" timeout="0" info="">
[00:45:26.383]        // if-block "isSWJ"
[00:45:26.383]          // =>  TRUE
[00:45:26.383]        <control if="hasDormant" while="" timeout="0" info="">
[00:45:26.383]          // if-block "hasDormant"
[00:45:26.383]            // =>  FALSE
[00:45:26.383]          // skip if-block "hasDormant"
[00:45:26.383]        </control>
[00:45:26.383]        <control if="!hasDormant" while="" timeout="0" info="">
[00:45:26.383]          // if-block "!hasDormant"
[00:45:26.383]            // =>  TRUE
[00:45:26.383]          <block atomic="false" info="">
[00:45:26.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:45:26.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:45:26.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:45:26.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:45:26.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:45:26.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:45:26.393]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:45:26.396]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:45:26.396]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:45:26.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:45:26.400]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:45:26.400]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:45:26.403]          </block>
[00:45:26.403]          // end if-block "!hasDormant"
[00:45:26.403]        </control>
[00:45:26.403]        // end if-block "isSWJ"
[00:45:26.403]      </control>
[00:45:26.403]      <control if="!isSWJ" while="" timeout="0" info="">
[00:45:26.403]        // if-block "!isSWJ"
[00:45:26.403]          // =>  FALSE
[00:45:26.403]        // skip if-block "!isSWJ"
[00:45:26.405]      </control>
[00:45:26.405]      <block atomic="false" info="">
[00:45:26.405]        ReadDP(0x0);
[00:45:26.407]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:45:26.408]      </block>
[00:45:26.408]      // end if-block "protType == 2"
[00:45:26.408]    </control>
[00:45:26.408]  </sequence>
[00:45:26.408]  
[00:45:26.416]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:45:26.416]  
[00:45:26.416]  <debugvars>
[00:45:26.416]    // Pre-defined
[00:45:26.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:45:26.416]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:45:26.416]    __dp=0x00000000
[00:45:26.416]    __ap=0x00000000
[00:45:26.416]    __traceout=0x00000000      (Trace Disabled)
[00:45:26.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:45:26.416]    __FlashAddr=0x00000000
[00:45:26.416]    __FlashLen=0x00000000
[00:45:26.416]    __FlashArg=0x00000000
[00:45:26.416]    __FlashOp=0x00000000
[00:45:26.416]    __Result=0x00000000
[00:45:26.416]  </debugvars>
[00:45:26.416]  
[00:45:26.419]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:45:26.419]    <block atomic="false" info="">
[00:45:26.419]      __var SW_DP_ABORT       = 0x0;
[00:45:26.419]        // -> [SW_DP_ABORT <= 0x00000000]
[00:45:26.419]      __var DP_CTRL_STAT      = 0x4;
[00:45:26.419]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:45:26.419]      __var DP_SELECT         = 0x8;
[00:45:26.419]        // -> [DP_SELECT <= 0x00000008]
[00:45:26.419]      __var powered_down      = 0;
[00:45:26.419]        // -> [powered_down <= 0x00000000]
[00:45:26.420]      WriteDP(DP_SELECT, 0x00000000);
[00:45:26.429]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:45:26.429]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:45:26.433]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:45:26.433]        // -> [powered_down <= 0x00000001]
[00:45:26.433]    </block>
[00:45:26.433]    <control if="powered_down" while="" timeout="0" info="">
[00:45:26.433]      // if-block "powered_down"
[00:45:26.434]        // =>  TRUE
[00:45:26.434]      <block atomic="false" info="">
[00:45:26.434]        Message(0, "Debug/System power-up request sent");
[00:45:26.436]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:45:26.441]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:45:26.441]      </block>
[00:45:26.441]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:45:26.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:45:26.443]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:45:26.443]        // while-condition  =>  FALSE
[00:45:26.443]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:45:26.443]      </control>
[00:45:26.443]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:45:26.443]        // if-block "(__protocol & 0xFFFF) == 1"
[00:45:26.443]          // =>  FALSE
[00:45:26.443]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:45:26.443]      </control>
[00:45:26.443]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:45:26.443]        // if-block "(__protocol & 0xFFFF) == 2"
[00:45:26.445]          // =>  TRUE
[00:45:26.445]        <block atomic="false" info="">
[00:45:26.445]          Message(0, "executing SWD power up");
[00:45:26.447]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:45:26.450]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:45:26.450]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:45:26.453]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:45:26.453]        </block>
[00:45:26.453]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:45:26.453]      </control>
[00:45:26.453]      // end if-block "powered_down"
[00:45:26.453]    </control>
[00:45:26.453]    <block atomic="false" info="">
[00:45:26.453]      __var DEBUG_PORT_VAL    = 0;
[00:45:26.453]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:45:26.453]      __var ACCESS_POINT_VAL  = 0;
[00:45:26.453]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:45:26.453]      __ap = 1; 
[00:45:26.453]        // -> [__ap <= 0x00000001]
[00:45:26.453]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:45:26.461]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:45:26.461]      __ap = 4;
[00:45:26.461]        // -> [__ap <= 0x00000004]
[00:45:26.461]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:45:26.471]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:45:26.471]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:45:26.471]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:45:26.473]    </block>
[00:45:26.473]    <block atomic="false" info="">
[00:45:26.473]      __var nReset = 0x80;
[00:45:26.473]        // -> [nReset <= 0x00000080]
[00:45:26.473]      __var canReadPins = 0;
[00:45:26.473]        // -> [canReadPins <= 0x00000000]
[00:45:26.473]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:45:26.491]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:45:26.492]        // -> [canReadPins <= 0x00000001]
[00:45:26.492]    </block>
[00:45:26.492]    <control if="" while="1" timeout="200" info="">
[00:45:26.492]      // while "1"  (timeout="200")
[00:45:26.492]      // while-condition  =>  TRUE
[00:45:26.492]      // while "1"  (timeout="200")
[00:45:26.492]      // while-condition  =>  TRUE
[00:45:26.492]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.493]      // while "1"  (timeout="200")
[00:45:26.493]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.495]      // while "1"  (timeout="200")
[00:45:26.495]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.497]      // while "1"  (timeout="200")
[00:45:26.497]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.499]      // while-condition  =>  TRUE
[00:45:26.499]      // while "1"  (timeout="200")
[00:45:26.501]      // while-condition  =>  TRUE
[00:45:26.501]      // while "1"  (timeout="200")
[00:45:26.501]      // while-condition  =>  TRUE
[00:45:26.501]      // while "1"  (timeout="200")
[00:45:26.501]      // while-condition  =>  TRUE
[00:45:26.501]      // while "1"  (timeout="200")
[00:45:26.501]      // while-condition  =>  TRUE
[00:45:26.502]      // while "1"  (timeout="200")
[00:45:26.502]      // while-condition  =>  TRUE
[00:45:26.502]      // while "1"  (timeout="200")
[00:45:26.502]      // while-condition  =>  TRUE
[00:45:26.502]      // while "1"  (timeout="200")
[00:45:26.502]      // while-condition  =>  TRUE
[00:45:26.502]      // while "1"  (timeout="200")
[00:45:26.502]      // while-condition  =>  TRUE
[00:45:26.502]      // while "1"  (timeout="200")
[00:45:26.502]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.503]      // while "1"  (timeout="200")
[00:45:26.503]      // while-condition  =>  TRUE
[00:45:26.505]      // while "1"  (timeout="200")
[00:45:26.505]      // while  =>  TIMEOUT
[00:45:26.505]      // end while "1"
[00:45:26.505]    </control>
[00:45:26.505]    <control if="canReadPins" while="" timeout="0" info="">
[00:45:26.505]      // if-block "canReadPins"
[00:45:26.505]        // =>  TRUE
[00:45:26.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:45:26.505]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:45:26.511]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:45:26.513]        // while-condition  =>  FALSE
[00:45:26.513]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:45:26.513]      </control>
[00:45:26.513]      // end if-block "canReadPins"
[00:45:26.513]    </control>
[00:45:26.513]    <control if="!canReadPins" while="" timeout="0" info="">
[00:45:26.513]      // if-block "!canReadPins"
[00:45:26.513]        // =>  FALSE
[00:45:26.513]      // skip if-block "!canReadPins"
[00:45:26.515]    </control>
[00:45:26.515]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:45:26.515]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:45:26.515]        // =>  TRUE
[00:45:26.515]      <block atomic="false" info="">
[00:45:26.515]        WriteAP(0x00, 0x190008);
[00:45:26.516]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:45:26.516]        WriteAP(0xF0, 0x01);
[00:45:26.531]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:45:26.533]      </block>
[00:45:26.533]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:45:26.533]    </control>
[00:45:26.533]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:45:26.533]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:45:26.533]        // =>  FALSE
[00:45:26.533]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:45:26.533]    </control>
[00:45:26.533]    <block atomic="false" info="">
[00:45:26.533]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:45:26.535]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:45:26.535]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:45:26.535]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:45:26.539]      __ap = 0; //lets make sure we reset the access point selection
[00:45:26.539]        // -> [__ap <= 0x00000000]
[00:45:26.539]    </block>
[00:45:26.539]  </sequence>
[00:45:26.539]  
[00:45:26.584]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:45:26.584]  
[00:45:26.584]  <debugvars>
[00:45:26.585]    // Pre-defined
[00:45:26.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:45:26.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:45:26.585]    __dp=0x00000000
[00:45:26.585]    __ap=0x00000000
[00:45:26.585]    __traceout=0x00000000      (Trace Disabled)
[00:45:26.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:45:26.585]    __FlashAddr=0x00000000
[00:45:26.585]    __FlashLen=0x00000000
[00:45:26.587]    __FlashArg=0x00000000
[00:45:26.587]    __FlashOp=0x00000000
[00:45:26.587]    __Result=0x00000000
[00:45:26.587]  </debugvars>
[00:45:26.587]  
[00:45:26.587]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:45:26.587]    <block atomic="false" info="">
[00:45:26.587]      __var deviceID = 0;
[00:45:26.587]        // -> [deviceID <= 0x00000000]
[00:45:26.587]      __var version = 0;
[00:45:26.587]        // -> [version <= 0x00000000]
[00:45:26.587]      __var partNum = 0;
[00:45:26.587]        // -> [partNum <= 0x00000000]
[00:45:26.587]      __var manuf = 0;
[00:45:26.589]        // -> [manuf <= 0x00000000]
[00:45:26.589]      __var isMSPM0G1X0X_G3X0X = 0;
[00:45:26.589]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:45:26.589]      __var isProduction = 0;
[00:45:26.589]        // -> [isProduction <= 0x00000000]
[00:45:26.589]      __var continueId = 0;
[00:45:26.589]        // -> [continueId <= 0x00000000]
[00:45:26.589]      deviceID =   Read32(0x41C40004);
[00:45:26.597]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:45:26.597]        // -> [deviceID <= 0x2BB8802F]
[00:45:26.597]      version = deviceID >> 28;
[00:45:26.597]        // -> [version <= 0x00000002]
[00:45:26.597]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:45:26.597]        // -> [partNum <= 0x0000BB88]
[00:45:26.597]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:45:26.597]        // -> [manuf <= 0x00000017]
[00:45:26.597]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:45:26.597]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:45:26.600]      isProduction = (version > 0);
[00:45:26.600]        // -> [isProduction <= 0x00000001]
[00:45:26.600]    </block>
[00:45:26.600]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:45:26.600]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:45:26.600]        // =>  FALSE
[00:45:26.600]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:45:26.600]    </control>
[00:45:26.600]    <control if="continueId == 4" while="" timeout="0" info="">
[00:45:26.600]      // if-block "continueId == 4"
[00:45:26.600]        // =>  FALSE
[00:45:26.600]      // skip if-block "continueId == 4"
[00:45:26.600]    </control>
[00:45:26.600]    <control if="!isProduction" while="" timeout="0" info="">
[00:45:26.601]      // if-block "!isProduction"
[00:45:26.601]        // =>  FALSE
[00:45:26.601]      // skip if-block "!isProduction"
[00:45:26.601]    </control>
[00:45:26.601]  </sequence>
[00:45:26.601]  
[00:47:26.904]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:47:26.904]  
[00:47:26.913]  <debugvars>
[00:47:26.913]    // Pre-defined
[00:47:26.913]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:26.913]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:47:26.913]    __dp=0x00000000
[00:47:26.913]    __ap=0x00000000
[00:47:26.913]    __traceout=0x00000000      (Trace Disabled)
[00:47:26.913]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:26.913]    __FlashAddr=0x00000000
[00:47:26.913]    __FlashLen=0x00000000
[00:47:26.913]    __FlashArg=0x00000000
[00:47:26.914]    __FlashOp=0x00000000
[00:47:26.914]    __Result=0x00000000
[00:47:26.914]  </debugvars>
[00:47:26.914]  
[00:47:26.914]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:47:26.914]    <block atomic="false" info="">
[00:47:26.914]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:47:26.914]        // -> [isSWJ <= 0x00000001]
[00:47:26.914]      __var hasDormant = __protocol & 0x00020000;
[00:47:26.914]        // -> [hasDormant <= 0x00000000]
[00:47:26.914]      __var protType   = __protocol & 0x0000FFFF;
[00:47:26.914]        // -> [protType <= 0x00000002]
[00:47:26.916]    </block>
[00:47:26.916]    <control if="protType == 1" while="" timeout="0" info="">
[00:47:26.916]      // if-block "protType == 1"
[00:47:26.916]        // =>  FALSE
[00:47:26.916]      // skip if-block "protType == 1"
[00:47:26.916]    </control>
[00:47:26.916]    <control if="protType == 2" while="" timeout="0" info="">
[00:47:26.916]      // if-block "protType == 2"
[00:47:26.916]        // =>  TRUE
[00:47:26.917]      <control if="isSWJ" while="" timeout="0" info="">
[00:47:26.917]        // if-block "isSWJ"
[00:47:26.917]          // =>  TRUE
[00:47:26.917]        <control if="hasDormant" while="" timeout="0" info="">
[00:47:26.917]          // if-block "hasDormant"
[00:47:26.917]            // =>  FALSE
[00:47:26.917]          // skip if-block "hasDormant"
[00:47:26.917]        </control>
[00:47:26.917]        <control if="!hasDormant" while="" timeout="0" info="">
[00:47:26.917]          // if-block "!hasDormant"
[00:47:26.917]            // =>  TRUE
[00:47:26.917]          <block atomic="false" info="">
[00:47:26.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:47:26.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:26.919]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:47:26.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:47:26.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:47:26.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:26.934]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:47:26.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:47:26.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:47:26.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:26.940]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:47:26.953]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:47:26.953]          </block>
[00:47:26.953]          // end if-block "!hasDormant"
[00:47:26.953]        </control>
[00:47:26.953]        // end if-block "isSWJ"
[00:47:26.953]      </control>
[00:47:26.953]      <control if="!isSWJ" while="" timeout="0" info="">
[00:47:26.953]        // if-block "!isSWJ"
[00:47:26.953]          // =>  FALSE
[00:47:26.953]        // skip if-block "!isSWJ"
[00:47:26.953]      </control>
[00:47:26.953]      <block atomic="false" info="">
[00:47:26.953]        ReadDP(0x0);
[00:47:26.959]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:47:26.959]      </block>
[00:47:26.959]      // end if-block "protType == 2"
[00:47:26.959]    </control>
[00:47:26.959]  </sequence>
[00:47:26.959]  
[00:47:26.961]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:47:26.961]  
[00:47:26.961]  <debugvars>
[00:47:26.961]    // Pre-defined
[00:47:26.961]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:26.961]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:47:26.961]    __dp=0x00000000
[00:47:26.961]    __ap=0x00000000
[00:47:26.961]    __traceout=0x00000000      (Trace Disabled)
[00:47:26.961]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:26.961]    __FlashAddr=0x00000000
[00:47:26.961]    __FlashLen=0x00000000
[00:47:26.966]    __FlashArg=0x00000000
[00:47:26.966]    __FlashOp=0x00000000
[00:47:26.966]    __Result=0x00000000
[00:47:26.966]  </debugvars>
[00:47:26.966]  
[00:47:26.966]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:47:26.966]    <block atomic="false" info="">
[00:47:26.966]      __var SW_DP_ABORT       = 0x0;
[00:47:26.966]        // -> [SW_DP_ABORT <= 0x00000000]
[00:47:26.966]      __var DP_CTRL_STAT      = 0x4;
[00:47:26.966]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:47:26.966]      __var DP_SELECT         = 0x8;
[00:47:26.966]        // -> [DP_SELECT <= 0x00000008]
[00:47:26.966]      __var powered_down      = 0;
[00:47:26.966]        // -> [powered_down <= 0x00000000]
[00:47:26.966]      WriteDP(DP_SELECT, 0x00000000);
[00:47:26.970]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:47:26.970]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:47:26.978]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:47:26.978]        // -> [powered_down <= 0x00000001]
[00:47:26.978]    </block>
[00:47:26.978]    <control if="powered_down" while="" timeout="0" info="">
[00:47:26.978]      // if-block "powered_down"
[00:47:26.978]        // =>  TRUE
[00:47:26.978]      <block atomic="false" info="">
[00:47:26.978]        Message(0, "Debug/System power-up request sent");
[00:47:26.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:47:28.000]  
[00:47:28.000]  !!! E310 : Debug access failed - cannot write value 0x50000000 to DP register 0x04
[00:47:28.000]  
[00:47:28.000]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:47:28.004]      </block>
[00:47:28.004]      // end if-block "powered_down"
[00:47:28.004]    </control>
[00:47:28.004]  </sequence>
[00:47:28.004]  
[00:47:36.657]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:47:36.657]  
[00:47:36.666]  <debugvars>
[00:47:36.666]    // Pre-defined
[00:47:36.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:36.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:47:36.666]    __dp=0x00000000
[00:47:36.666]    __ap=0x00000000
[00:47:36.666]    __traceout=0x00000000      (Trace Disabled)
[00:47:36.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:36.666]    __FlashAddr=0x00000000
[00:47:36.666]    __FlashLen=0x00000000
[00:47:36.666]    __FlashArg=0x00000000
[00:47:36.668]    __FlashOp=0x00000000
[00:47:36.668]    __Result=0x00000000
[00:47:36.668]  </debugvars>
[00:47:36.668]  
[00:47:36.668]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:47:36.668]    <block atomic="false" info="">
[00:47:36.668]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:47:36.668]        // -> [isSWJ <= 0x00000001]
[00:47:36.668]      __var hasDormant = __protocol & 0x00020000;
[00:47:36.668]        // -> [hasDormant <= 0x00000000]
[00:47:36.668]      __var protType   = __protocol & 0x0000FFFF;
[00:47:36.668]        // -> [protType <= 0x00000002]
[00:47:36.669]    </block>
[00:47:36.669]    <control if="protType == 1" while="" timeout="0" info="">
[00:47:36.669]      // if-block "protType == 1"
[00:47:36.669]        // =>  FALSE
[00:47:36.669]      // skip if-block "protType == 1"
[00:47:36.669]    </control>
[00:47:36.669]    <control if="protType == 2" while="" timeout="0" info="">
[00:47:36.669]      // if-block "protType == 2"
[00:47:36.670]        // =>  TRUE
[00:47:36.670]      <control if="isSWJ" while="" timeout="0" info="">
[00:47:36.670]        // if-block "isSWJ"
[00:47:36.670]          // =>  TRUE
[00:47:36.670]        <control if="hasDormant" while="" timeout="0" info="">
[00:47:36.670]          // if-block "hasDormant"
[00:47:36.670]            // =>  FALSE
[00:47:36.670]          // skip if-block "hasDormant"
[00:47:36.670]        </control>
[00:47:36.670]        <control if="!hasDormant" while="" timeout="0" info="">
[00:47:36.670]          // if-block "!hasDormant"
[00:47:36.670]            // =>  TRUE
[00:47:36.670]          <block atomic="false" info="">
[00:47:36.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:47:36.672]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:36.672]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:47:36.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:47:36.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:47:36.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:36.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:47:36.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:47:36.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:47:36.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:47:36.693]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:47:36.696]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:47:36.696]          </block>
[00:47:36.696]          // end if-block "!hasDormant"
[00:47:36.696]        </control>
[00:47:36.696]        // end if-block "isSWJ"
[00:47:36.696]      </control>
[00:47:36.696]      <control if="!isSWJ" while="" timeout="0" info="">
[00:47:36.696]        // if-block "!isSWJ"
[00:47:36.696]          // =>  FALSE
[00:47:36.696]        // skip if-block "!isSWJ"
[00:47:36.696]      </control>
[00:47:36.697]      <block atomic="false" info="">
[00:47:36.697]        ReadDP(0x0);
[00:47:36.699]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:47:36.699]      </block>
[00:47:36.699]      // end if-block "protType == 2"
[00:47:36.699]    </control>
[00:47:36.699]  </sequence>
[00:47:36.699]  
[00:47:36.699]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:47:36.699]  
[00:47:36.699]  <debugvars>
[00:47:36.703]    // Pre-defined
[00:47:36.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:36.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:47:36.703]    __dp=0x00000000
[00:47:36.703]    __ap=0x00000000
[00:47:36.703]    __traceout=0x00000000      (Trace Disabled)
[00:47:36.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:36.703]    __FlashAddr=0x00000000
[00:47:36.703]    __FlashLen=0x00000000
[00:47:36.703]    __FlashArg=0x00000000
[00:47:36.703]    __FlashOp=0x00000000
[00:47:36.703]    __Result=0x00000000
[00:47:36.703]  </debugvars>
[00:47:36.703]  
[00:47:36.703]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:47:36.703]    <block atomic="false" info="">
[00:47:36.703]      __var SW_DP_ABORT       = 0x0;
[00:47:36.703]        // -> [SW_DP_ABORT <= 0x00000000]
[00:47:36.703]      __var DP_CTRL_STAT      = 0x4;
[00:47:36.703]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:47:36.703]      __var DP_SELECT         = 0x8;
[00:47:36.703]        // -> [DP_SELECT <= 0x00000008]
[00:47:36.706]      __var powered_down      = 0;
[00:47:36.706]        // -> [powered_down <= 0x00000000]
[00:47:36.706]      WriteDP(DP_SELECT, 0x00000000);
[00:47:36.707]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:47:36.707]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:47:36.709]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:47:36.709]        // -> [powered_down <= 0x00000001]
[00:47:36.709]    </block>
[00:47:36.709]    <control if="powered_down" while="" timeout="0" info="">
[00:47:36.709]      // if-block "powered_down"
[00:47:36.709]        // =>  TRUE
[00:47:36.709]      <block atomic="false" info="">
[00:47:36.709]        Message(0, "Debug/System power-up request sent");
[00:47:36.711]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:47:36.711]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:47:36.711]      </block>
[00:47:36.711]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:47:36.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:47:36.716]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:47:36.716]        // while-condition  =>  FALSE
[00:47:36.716]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:47:36.716]      </control>
[00:47:36.716]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:47:36.716]        // if-block "(__protocol & 0xFFFF) == 1"
[00:47:36.716]          // =>  FALSE
[00:47:36.716]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:47:36.716]      </control>
[00:47:36.716]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:47:36.716]        // if-block "(__protocol & 0xFFFF) == 2"
[00:47:36.716]          // =>  TRUE
[00:47:36.716]        <block atomic="false" info="">
[00:47:36.716]          Message(0, "executing SWD power up");
[00:47:36.719]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:47:36.720]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:47:36.720]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:47:36.724]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:47:36.724]        </block>
[00:47:36.724]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:47:36.724]      </control>
[00:47:36.724]      // end if-block "powered_down"
[00:47:36.724]    </control>
[00:47:36.724]    <block atomic="false" info="">
[00:47:36.724]      __var DEBUG_PORT_VAL    = 0;
[00:47:36.724]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:47:36.724]      __var ACCESS_POINT_VAL  = 0;
[00:47:36.724]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:47:36.724]      __ap = 1; 
[00:47:36.724]        // -> [__ap <= 0x00000001]
[00:47:36.724]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:47:36.732]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:47:36.732]      __ap = 4;
[00:47:36.732]        // -> [__ap <= 0x00000004]
[00:47:36.732]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:47:36.736]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:47:36.736]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:47:36.736]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:47:36.740]    </block>
[00:47:36.740]    <block atomic="false" info="">
[00:47:36.740]      __var nReset = 0x80;
[00:47:36.740]        // -> [nReset <= 0x00000080]
[00:47:36.740]      __var canReadPins = 0;
[00:47:36.740]        // -> [canReadPins <= 0x00000000]
[00:47:36.740]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:47:36.740]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:47:36.740]        // -> [canReadPins <= 0x00000001]
[00:47:36.740]    </block>
[00:47:36.740]    <control if="" while="1" timeout="200" info="">
[00:47:36.740]      // while "1"  (timeout="200")
[00:47:36.740]      // while-condition  =>  TRUE
[00:47:36.740]      // while "1"  (timeout="200")
[00:47:36.740]      // while-condition  =>  TRUE
[00:47:36.740]      // while "1"  (timeout="200")
[00:47:36.740]      // while-condition  =>  TRUE
[00:47:36.740]      // while "1"  (timeout="200")
[00:47:36.740]      // while-condition  =>  TRUE
[00:47:36.740]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.744]      // while "1"  (timeout="200")
[00:47:36.744]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.746]      // while "1"  (timeout="200")
[00:47:36.746]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.747]      // while-condition  =>  TRUE
[00:47:36.747]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.748]      // while-condition  =>  TRUE
[00:47:36.748]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.752]      // while-condition  =>  TRUE
[00:47:36.752]      // while "1"  (timeout="200")
[00:47:36.755]      // while-condition  =>  TRUE
[00:47:36.755]      // while "1"  (timeout="200")
[00:47:36.755]      // while  =>  TIMEOUT
[00:47:36.755]      // end while "1"
[00:47:36.755]    </control>
[00:47:36.755]    <control if="canReadPins" while="" timeout="0" info="">
[00:47:36.755]      // if-block "canReadPins"
[00:47:36.755]        // =>  TRUE
[00:47:36.755]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:47:36.756]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:47:36.757]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:47:36.757]        // while-condition  =>  FALSE
[00:47:36.757]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:47:36.757]      </control>
[00:47:36.757]      // end if-block "canReadPins"
[00:47:36.757]    </control>
[00:47:36.757]    <control if="!canReadPins" while="" timeout="0" info="">
[00:47:36.757]      // if-block "!canReadPins"
[00:47:36.757]        // =>  FALSE
[00:47:36.758]      // skip if-block "!canReadPins"
[00:47:36.758]    </control>
[00:47:36.758]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:47:36.758]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:47:36.758]        // =>  TRUE
[00:47:36.758]      <block atomic="false" info="">
[00:47:36.758]        WriteAP(0x00, 0x190008);
[00:47:36.761]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:47:36.761]        WriteAP(0xF0, 0x01);
[00:47:36.766]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:47:36.766]      </block>
[00:47:36.766]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:47:36.766]    </control>
[00:47:36.766]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:47:36.766]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:47:36.766]        // =>  FALSE
[00:47:36.766]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:47:36.766]    </control>
[00:47:36.766]    <block atomic="false" info="">
[00:47:36.766]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:47:36.770]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:47:36.770]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:47:36.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:47:36.771]      __ap = 0; //lets make sure we reset the access point selection
[00:47:36.771]        // -> [__ap <= 0x00000000]
[00:47:36.771]    </block>
[00:47:36.771]  </sequence>
[00:47:36.773]  
[00:47:36.798]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:47:36.798]  
[00:47:36.798]  <debugvars>
[00:47:36.798]    // Pre-defined
[00:47:36.798]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:36.798]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:47:36.798]    __dp=0x00000000
[00:47:36.798]    __ap=0x00000000
[00:47:36.798]    __traceout=0x00000000      (Trace Disabled)
[00:47:36.798]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:36.798]    __FlashAddr=0x00000000
[00:47:36.798]    __FlashLen=0x00000000
[00:47:36.798]    __FlashArg=0x00000000
[00:47:36.798]    __FlashOp=0x00000000
[00:47:36.798]    __Result=0x00000000
[00:47:36.798]  </debugvars>
[00:47:36.798]  
[00:47:36.798]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:47:36.798]    <block atomic="false" info="">
[00:47:36.798]      __var deviceID = 0;
[00:47:36.802]        // -> [deviceID <= 0x00000000]
[00:47:36.802]      __var version = 0;
[00:47:36.802]        // -> [version <= 0x00000000]
[00:47:36.802]      __var partNum = 0;
[00:47:36.802]        // -> [partNum <= 0x00000000]
[00:47:36.802]      __var manuf = 0;
[00:47:36.802]        // -> [manuf <= 0x00000000]
[00:47:36.802]      __var isMSPM0G1X0X_G3X0X = 0;
[00:47:36.802]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:47:36.802]      __var isProduction = 0;
[00:47:36.802]        // -> [isProduction <= 0x00000000]
[00:47:36.802]      __var continueId = 0;
[00:47:36.802]        // -> [continueId <= 0x00000000]
[00:47:36.802]      deviceID =   Read32(0x41C40004);
[00:47:36.807]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:47:36.807]        // -> [deviceID <= 0x2BB8802F]
[00:47:36.807]      version = deviceID >> 28;
[00:47:36.807]        // -> [version <= 0x00000002]
[00:47:36.807]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:47:36.807]        // -> [partNum <= 0x0000BB88]
[00:47:36.807]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:47:36.807]        // -> [manuf <= 0x00000017]
[00:47:36.807]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:47:36.807]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:47:36.807]      isProduction = (version > 0);
[00:47:36.807]        // -> [isProduction <= 0x00000001]
[00:47:36.807]    </block>
[00:47:36.807]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:47:36.807]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:47:36.807]        // =>  FALSE
[00:47:36.807]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:47:36.811]    </control>
[00:47:36.811]    <control if="continueId == 4" while="" timeout="0" info="">
[00:47:36.811]      // if-block "continueId == 4"
[00:47:36.811]        // =>  FALSE
[00:47:36.811]      // skip if-block "continueId == 4"
[00:47:36.811]    </control>
[00:47:36.811]    <control if="!isProduction" while="" timeout="0" info="">
[00:47:36.811]      // if-block "!isProduction"
[00:47:36.811]        // =>  FALSE
[00:47:36.811]      // skip if-block "!isProduction"
[00:47:36.811]    </control>
[00:47:36.811]  </sequence>
[00:47:36.811]  
[00:50:12.282]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:50:12.282]  
[00:50:12.293]  <debugvars>
[00:50:12.293]    // Pre-defined
[00:50:12.293]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:12.293]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:12.293]    __dp=0x00000000
[00:50:12.293]    __ap=0x00000000
[00:50:12.293]    __traceout=0x00000000      (Trace Disabled)
[00:50:12.293]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:12.293]    __FlashAddr=0x00000000
[00:50:12.293]    __FlashLen=0x00000000
[00:50:12.293]    __FlashArg=0x00000000
[00:50:12.293]    __FlashOp=0x00000000
[00:50:12.293]    __Result=0x00000000
[00:50:12.293]  </debugvars>
[00:50:12.293]  
[00:50:12.293]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:50:12.293]    <block atomic="false" info="">
[00:50:12.293]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:50:12.293]        // -> [isSWJ <= 0x00000001]
[00:50:12.293]      __var hasDormant = __protocol & 0x00020000;
[00:50:12.293]        // -> [hasDormant <= 0x00000000]
[00:50:12.293]      __var protType   = __protocol & 0x0000FFFF;
[00:50:12.293]        // -> [protType <= 0x00000002]
[00:50:12.293]    </block>
[00:50:12.293]    <control if="protType == 1" while="" timeout="0" info="">
[00:50:12.293]      // if-block "protType == 1"
[00:50:12.293]        // =>  FALSE
[00:50:12.293]      // skip if-block "protType == 1"
[00:50:12.293]    </control>
[00:50:12.293]    <control if="protType == 2" while="" timeout="0" info="">
[00:50:12.293]      // if-block "protType == 2"
[00:50:12.293]        // =>  TRUE
[00:50:12.293]      <control if="isSWJ" while="" timeout="0" info="">
[00:50:12.293]        // if-block "isSWJ"
[00:50:12.293]          // =>  TRUE
[00:50:12.297]        <control if="hasDormant" while="" timeout="0" info="">
[00:50:12.297]          // if-block "hasDormant"
[00:50:12.297]            // =>  FALSE
[00:50:12.297]          // skip if-block "hasDormant"
[00:50:12.297]        </control>
[00:50:12.297]        <control if="!hasDormant" while="" timeout="0" info="">
[00:50:12.297]          // if-block "!hasDormant"
[00:50:12.297]            // =>  TRUE
[00:50:12.297]          <block atomic="false" info="">
[00:50:12.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:50:12.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:12.301]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:50:12.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:50:12.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:50:12.309]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:12.309]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:50:12.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:50:12.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:50:12.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:12.313]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:50:12.317]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:50:12.317]          </block>
[00:50:12.317]          // end if-block "!hasDormant"
[00:50:12.317]        </control>
[00:50:12.317]        // end if-block "isSWJ"
[00:50:12.317]      </control>
[00:50:12.319]      <control if="!isSWJ" while="" timeout="0" info="">
[00:50:12.319]        // if-block "!isSWJ"
[00:50:12.319]          // =>  FALSE
[00:50:12.319]        // skip if-block "!isSWJ"
[00:50:12.319]      </control>
[00:50:12.319]      <block atomic="false" info="">
[00:50:12.319]        ReadDP(0x0);
[00:50:12.322]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:50:12.322]      </block>
[00:50:12.322]      // end if-block "protType == 2"
[00:50:12.322]    </control>
[00:50:12.322]  </sequence>
[00:50:12.322]  
[00:50:12.327]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:50:12.327]  
[00:50:12.327]  <debugvars>
[00:50:12.327]    // Pre-defined
[00:50:12.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:12.327]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:12.327]    __dp=0x00000000
[00:50:12.327]    __ap=0x00000000
[00:50:12.329]    __traceout=0x00000000      (Trace Disabled)
[00:50:12.329]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:12.329]    __FlashAddr=0x00000000
[00:50:12.329]    __FlashLen=0x00000000
[00:50:12.329]    __FlashArg=0x00000000
[00:50:12.329]    __FlashOp=0x00000000
[00:50:12.329]    __Result=0x00000000
[00:50:12.329]  </debugvars>
[00:50:12.329]  
[00:50:12.329]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:50:12.329]    <block atomic="false" info="">
[00:50:12.329]      __var SW_DP_ABORT       = 0x0;
[00:50:12.329]        // -> [SW_DP_ABORT <= 0x00000000]
[00:50:12.329]      __var DP_CTRL_STAT      = 0x4;
[00:50:12.329]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:50:12.329]      __var DP_SELECT         = 0x8;
[00:50:12.329]        // -> [DP_SELECT <= 0x00000008]
[00:50:12.331]      __var powered_down      = 0;
[00:50:12.331]        // -> [powered_down <= 0x00000000]
[00:50:12.331]      WriteDP(DP_SELECT, 0x00000000);
[00:50:12.332]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:50:12.332]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:50:12.334]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:50:12.334]        // -> [powered_down <= 0x00000001]
[00:50:12.335]    </block>
[00:50:12.335]    <control if="powered_down" while="" timeout="0" info="">
[00:50:12.335]      // if-block "powered_down"
[00:50:12.335]        // =>  TRUE
[00:50:12.335]      <block atomic="false" info="">
[00:50:12.335]        Message(0, "Debug/System power-up request sent");
[00:50:12.336]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:50:12.339]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:50:12.339]      </block>
[00:50:12.339]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:50:12.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:50:12.340]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:50:12.340]        // while-condition  =>  FALSE
[00:50:12.340]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:50:12.340]      </control>
[00:50:12.340]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:50:12.340]        // if-block "(__protocol & 0xFFFF) == 1"
[00:50:12.340]          // =>  FALSE
[00:50:12.340]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:50:12.340]      </control>
[00:50:12.340]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:50:12.340]        // if-block "(__protocol & 0xFFFF) == 2"
[00:50:12.340]          // =>  TRUE
[00:50:12.343]        <block atomic="false" info="">
[00:50:12.343]          Message(0, "executing SWD power up");
[00:50:12.344]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:50:12.347]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:50:12.349]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:50:12.356]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:50:12.356]        </block>
[00:50:12.356]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:50:12.356]      </control>
[00:50:12.356]      // end if-block "powered_down"
[00:50:12.356]    </control>
[00:50:12.356]    <block atomic="false" info="">
[00:50:12.356]      __var DEBUG_PORT_VAL    = 0;
[00:50:12.356]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:50:12.356]      __var ACCESS_POINT_VAL  = 0;
[00:50:12.356]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:50:12.356]      __ap = 1; 
[00:50:12.356]        // -> [__ap <= 0x00000001]
[00:50:12.356]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:50:12.359]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:50:12.359]      __ap = 4;
[00:50:12.359]        // -> [__ap <= 0x00000004]
[00:50:12.359]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:12.367]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:50:12.367]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:50:12.367]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:12.369]    </block>
[00:50:12.369]    <block atomic="false" info="">
[00:50:12.369]      __var nReset = 0x80;
[00:50:12.369]        // -> [nReset <= 0x00000080]
[00:50:12.369]      __var canReadPins = 0;
[00:50:12.369]        // -> [canReadPins <= 0x00000000]
[00:50:12.369]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:50:12.371]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:50:12.371]        // -> [canReadPins <= 0x00000001]
[00:50:12.371]    </block>
[00:50:12.371]    <control if="" while="1" timeout="200" info="">
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.371]      // while "1"  (timeout="200")
[00:50:12.371]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.375]      // while "1"  (timeout="200")
[00:50:12.375]      // while-condition  =>  TRUE
[00:50:12.379]      // while "1"  (timeout="200")
[00:50:12.379]      // while  =>  TIMEOUT
[00:50:12.379]      // end while "1"
[00:50:12.379]    </control>
[00:50:12.379]    <control if="canReadPins" while="" timeout="0" info="">
[00:50:12.379]      // if-block "canReadPins"
[00:50:12.379]        // =>  TRUE
[00:50:12.379]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:50:12.379]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:50:12.388]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:50:12.389]        // while-condition  =>  FALSE
[00:50:12.389]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:50:12.389]      </control>
[00:50:12.389]      // end if-block "canReadPins"
[00:50:12.389]    </control>
[00:50:12.389]    <control if="!canReadPins" while="" timeout="0" info="">
[00:50:12.389]      // if-block "!canReadPins"
[00:50:12.389]        // =>  FALSE
[00:50:12.389]      // skip if-block "!canReadPins"
[00:50:12.389]    </control>
[00:50:12.389]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:50:12.389]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:12.389]        // =>  TRUE
[00:50:12.389]      <block atomic="false" info="">
[00:50:12.389]        WriteAP(0x00, 0x190008);
[00:50:12.392]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:12.392]        WriteAP(0xF0, 0x01);
[00:50:12.396]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:12.396]      </block>
[00:50:12.396]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:12.396]    </control>
[00:50:12.396]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:50:12.396]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:12.396]        // =>  FALSE
[00:50:12.396]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:12.396]    </control>
[00:50:12.396]    <block atomic="false" info="">
[00:50:12.396]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:12.402]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:50:12.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:50:12.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:12.403]      __ap = 0; //lets make sure we reset the access point selection
[00:50:12.403]        // -> [__ap <= 0x00000000]
[00:50:12.403]    </block>
[00:50:12.403]  </sequence>
[00:50:12.403]  
[00:50:12.439]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:50:12.439]  
[00:50:12.440]  <debugvars>
[00:50:12.440]    // Pre-defined
[00:50:12.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:12.440]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:12.440]    __dp=0x00000000
[00:50:12.440]    __ap=0x00000000
[00:50:12.440]    __traceout=0x00000000      (Trace Disabled)
[00:50:12.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:12.440]    __FlashAddr=0x00000000
[00:50:12.440]    __FlashLen=0x00000000
[00:50:12.440]    __FlashArg=0x00000000
[00:50:12.440]    __FlashOp=0x00000000
[00:50:12.440]    __Result=0x00000000
[00:50:12.441]  </debugvars>
[00:50:12.441]  
[00:50:12.441]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:50:12.441]    <block atomic="false" info="">
[00:50:12.441]      __var deviceID = 0;
[00:50:12.441]        // -> [deviceID <= 0x00000000]
[00:50:12.441]      __var version = 0;
[00:50:12.441]        // -> [version <= 0x00000000]
[00:50:12.441]      __var partNum = 0;
[00:50:12.441]        // -> [partNum <= 0x00000000]
[00:50:12.441]      __var manuf = 0;
[00:50:12.441]        // -> [manuf <= 0x00000000]
[00:50:12.441]      __var isMSPM0G1X0X_G3X0X = 0;
[00:50:12.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:50:12.441]      __var isProduction = 0;
[00:50:12.441]        // -> [isProduction <= 0x00000000]
[00:50:12.441]      __var continueId = 0;
[00:50:12.443]        // -> [continueId <= 0x00000000]
[00:50:12.443]      deviceID =   Read32(0x41C40004);
[00:50:12.449]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:50:12.449]        // -> [deviceID <= 0x2BB8802F]
[00:50:12.449]      version = deviceID >> 28;
[00:50:12.449]        // -> [version <= 0x00000002]
[00:50:12.449]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:50:12.449]        // -> [partNum <= 0x0000BB88]
[00:50:12.451]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:50:12.451]        // -> [manuf <= 0x00000017]
[00:50:12.451]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:50:12.451]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:50:12.451]      isProduction = (version > 0);
[00:50:12.451]        // -> [isProduction <= 0x00000001]
[00:50:12.451]    </block>
[00:50:12.451]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:50:12.451]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:50:12.451]        // =>  FALSE
[00:50:12.451]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:50:12.451]    </control>
[00:50:12.451]    <control if="continueId == 4" while="" timeout="0" info="">
[00:50:12.452]      // if-block "continueId == 4"
[00:50:12.452]        // =>  FALSE
[00:50:12.452]      // skip if-block "continueId == 4"
[00:50:12.452]    </control>
[00:50:12.452]    <control if="!isProduction" while="" timeout="0" info="">
[00:50:12.452]      // if-block "!isProduction"
[00:50:12.452]        // =>  FALSE
[00:50:12.452]      // skip if-block "!isProduction"
[00:50:12.452]    </control>
[00:50:12.452]  </sequence>
[00:50:12.452]  
[00:51:29.046]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:51:29.046]  
[00:51:29.055]  <debugvars>
[00:51:29.055]    // Pre-defined
[00:51:29.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:29.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:29.055]    __dp=0x00000000
[00:51:29.056]    __ap=0x00000000
[00:51:29.056]    __traceout=0x00000000      (Trace Disabled)
[00:51:29.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:29.056]    __FlashAddr=0x00000000
[00:51:29.056]    __FlashLen=0x00000000
[00:51:29.056]    __FlashArg=0x00000000
[00:51:29.056]    __FlashOp=0x00000000
[00:51:29.056]    __Result=0x00000000
[00:51:29.056]  </debugvars>
[00:51:29.056]  
[00:51:29.056]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:51:29.056]    <block atomic="false" info="">
[00:51:29.056]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:51:29.056]        // -> [isSWJ <= 0x00000001]
[00:51:29.056]      __var hasDormant = __protocol & 0x00020000;
[00:51:29.056]        // -> [hasDormant <= 0x00000000]
[00:51:29.056]      __var protType   = __protocol & 0x0000FFFF;
[00:51:29.056]        // -> [protType <= 0x00000002]
[00:51:29.056]    </block>
[00:51:29.056]    <control if="protType == 1" while="" timeout="0" info="">
[00:51:29.058]      // if-block "protType == 1"
[00:51:29.058]        // =>  FALSE
[00:51:29.058]      // skip if-block "protType == 1"
[00:51:29.058]    </control>
[00:51:29.058]    <control if="protType == 2" while="" timeout="0" info="">
[00:51:29.058]      // if-block "protType == 2"
[00:51:29.058]        // =>  TRUE
[00:51:29.058]      <control if="isSWJ" while="" timeout="0" info="">
[00:51:29.058]        // if-block "isSWJ"
[00:51:29.058]          // =>  TRUE
[00:51:29.058]        <control if="hasDormant" while="" timeout="0" info="">
[00:51:29.058]          // if-block "hasDormant"
[00:51:29.058]            // =>  FALSE
[00:51:29.058]          // skip if-block "hasDormant"
[00:51:29.058]        </control>
[00:51:29.058]        <control if="!hasDormant" while="" timeout="0" info="">
[00:51:29.058]          // if-block "!hasDormant"
[00:51:29.058]            // =>  TRUE
[00:51:29.058]          <block atomic="false" info="">
[00:51:29.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:51:29.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:29.060]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:51:29.062]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:51:29.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:51:29.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:29.062]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:51:29.067]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:51:29.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:51:29.067]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:29.067]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:51:29.072]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:51:29.072]          </block>
[00:51:29.072]          // end if-block "!hasDormant"
[00:51:29.072]        </control>
[00:51:29.072]        // end if-block "isSWJ"
[00:51:29.072]      </control>
[00:51:29.072]      <control if="!isSWJ" while="" timeout="0" info="">
[00:51:29.072]        // if-block "!isSWJ"
[00:51:29.072]          // =>  FALSE
[00:51:29.072]        // skip if-block "!isSWJ"
[00:51:29.072]      </control>
[00:51:29.072]      <block atomic="false" info="">
[00:51:29.072]        ReadDP(0x0);
[00:51:29.075]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:51:29.075]      </block>
[00:51:29.075]      // end if-block "protType == 2"
[00:51:29.075]    </control>
[00:51:29.075]  </sequence>
[00:51:29.075]  
[00:51:29.081]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:51:29.081]  
[00:51:29.081]  <debugvars>
[00:51:29.081]    // Pre-defined
[00:51:29.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:29.083]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:29.083]    __dp=0x00000000
[00:51:29.083]    __ap=0x00000000
[00:51:29.083]    __traceout=0x00000000      (Trace Disabled)
[00:51:29.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:29.083]    __FlashAddr=0x00000000
[00:51:29.083]    __FlashLen=0x00000000
[00:51:29.083]    __FlashArg=0x00000000
[00:51:29.083]    __FlashOp=0x00000000
[00:51:29.083]    __Result=0x00000000
[00:51:29.083]  </debugvars>
[00:51:29.083]  
[00:51:29.083]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:51:29.083]    <block atomic="false" info="">
[00:51:29.083]      __var SW_DP_ABORT       = 0x0;
[00:51:29.083]        // -> [SW_DP_ABORT <= 0x00000000]
[00:51:29.083]      __var DP_CTRL_STAT      = 0x4;
[00:51:29.083]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:51:29.083]      __var DP_SELECT         = 0x8;
[00:51:29.083]        // -> [DP_SELECT <= 0x00000008]
[00:51:29.083]      __var powered_down      = 0;
[00:51:29.083]        // -> [powered_down <= 0x00000000]
[00:51:29.083]      WriteDP(DP_SELECT, 0x00000000);
[00:51:29.083]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:51:29.083]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:51:29.087]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:51:29.087]        // -> [powered_down <= 0x00000001]
[00:51:29.087]    </block>
[00:51:29.087]    <control if="powered_down" while="" timeout="0" info="">
[00:51:29.087]      // if-block "powered_down"
[00:51:29.087]        // =>  TRUE
[00:51:29.087]      <block atomic="false" info="">
[00:51:29.087]        Message(0, "Debug/System power-up request sent");
[00:51:29.091]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:51:29.093]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:51:29.093]      </block>
[00:51:29.093]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:51:29.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:51:29.095]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:51:29.095]        // while-condition  =>  FALSE
[00:51:29.095]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:51:29.095]      </control>
[00:51:29.095]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:51:29.095]        // if-block "(__protocol & 0xFFFF) == 1"
[00:51:29.095]          // =>  FALSE
[00:51:29.095]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:51:29.095]      </control>
[00:51:29.095]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:51:29.095]        // if-block "(__protocol & 0xFFFF) == 2"
[00:51:29.095]          // =>  TRUE
[00:51:29.097]        <block atomic="false" info="">
[00:51:29.097]          Message(0, "executing SWD power up");
[00:51:29.097]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:51:29.100]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:51:29.100]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:51:29.100]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:51:29.100]        </block>
[00:51:29.100]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:51:29.100]      </control>
[00:51:29.100]      // end if-block "powered_down"
[00:51:29.100]    </control>
[00:51:29.100]    <block atomic="false" info="">
[00:51:29.103]      __var DEBUG_PORT_VAL    = 0;
[00:51:29.103]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:51:29.103]      __var ACCESS_POINT_VAL  = 0;
[00:51:29.103]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:51:29.103]      __ap = 1; 
[00:51:29.103]        // -> [__ap <= 0x00000001]
[00:51:29.103]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:51:29.108]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:51:29.108]      __ap = 4;
[00:51:29.108]        // -> [__ap <= 0x00000004]
[00:51:29.108]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:51:29.112]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:51:29.112]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:51:29.112]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:51:29.114]    </block>
[00:51:29.114]    <block atomic="false" info="">
[00:51:29.114]      __var nReset = 0x80;
[00:51:29.114]        // -> [nReset <= 0x00000080]
[00:51:29.114]      __var canReadPins = 0;
[00:51:29.114]        // -> [canReadPins <= 0x00000000]
[00:51:29.114]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:51:29.121]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:51:29.121]        // -> [canReadPins <= 0x00000001]
[00:51:29.121]    </block>
[00:51:29.121]    <control if="" while="1" timeout="200" info="">
[00:51:29.121]      // while "1"  (timeout="200")
[00:51:29.121]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.122]      // while-condition  =>  TRUE
[00:51:29.122]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.123]      // while "1"  (timeout="200")
[00:51:29.123]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.125]      // while-condition  =>  TRUE
[00:51:29.125]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.128]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.128]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.128]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.128]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.128]      // while "1"  (timeout="200")
[00:51:29.128]      // while-condition  =>  TRUE
[00:51:29.129]      // while "1"  (timeout="200")
[00:51:29.129]      // while  =>  TIMEOUT
[00:51:29.129]      // end while "1"
[00:51:29.129]    </control>
[00:51:29.129]    <control if="canReadPins" while="" timeout="0" info="">
[00:51:29.129]      // if-block "canReadPins"
[00:51:29.129]        // =>  TRUE
[00:51:29.129]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:51:29.129]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:51:29.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:51:29.131]        // while-condition  =>  FALSE
[00:51:29.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:51:29.131]      </control>
[00:51:29.131]      // end if-block "canReadPins"
[00:51:29.131]    </control>
[00:51:29.131]    <control if="!canReadPins" while="" timeout="0" info="">
[00:51:29.131]      // if-block "!canReadPins"
[00:51:29.131]        // =>  FALSE
[00:51:29.131]      // skip if-block "!canReadPins"
[00:51:29.131]    </control>
[00:51:29.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:51:29.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:51:29.131]        // =>  TRUE
[00:51:29.131]      <block atomic="false" info="">
[00:51:29.131]        WriteAP(0x00, 0x190008);
[00:51:29.133]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:51:29.133]        WriteAP(0xF0, 0x01);
[00:51:29.137]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:51:29.138]      </block>
[00:51:29.138]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:51:29.138]    </control>
[00:51:29.138]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:51:29.138]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:51:29.138]        // =>  FALSE
[00:51:29.138]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:51:29.138]    </control>
[00:51:29.138]    <block atomic="false" info="">
[00:51:29.138]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:51:29.144]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:51:29.145]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:51:29.145]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:51:29.146]      __ap = 0; //lets make sure we reset the access point selection
[00:51:29.146]        // -> [__ap <= 0x00000000]
[00:51:29.146]    </block>
[00:51:29.146]  </sequence>
[00:51:29.146]  
[00:51:29.183]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:51:29.183]  
[00:51:29.183]  <debugvars>
[00:51:29.183]    // Pre-defined
[00:51:29.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:29.183]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:29.183]    __dp=0x00000000
[00:51:29.183]    __ap=0x00000000
[00:51:29.183]    __traceout=0x00000000      (Trace Disabled)
[00:51:29.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:29.183]    __FlashAddr=0x00000000
[00:51:29.183]    __FlashLen=0x00000000
[00:51:29.183]    __FlashArg=0x00000000
[00:51:29.183]    __FlashOp=0x00000000
[00:51:29.183]    __Result=0x00000000
[00:51:29.183]  </debugvars>
[00:51:29.183]  
[00:51:29.183]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:51:29.183]    <block atomic="false" info="">
[00:51:29.187]      __var deviceID = 0;
[00:51:29.187]        // -> [deviceID <= 0x00000000]
[00:51:29.187]      __var version = 0;
[00:51:29.187]        // -> [version <= 0x00000000]
[00:51:29.187]      __var partNum = 0;
[00:51:29.187]        // -> [partNum <= 0x00000000]
[00:51:29.187]      __var manuf = 0;
[00:51:29.187]        // -> [manuf <= 0x00000000]
[00:51:29.187]      __var isMSPM0G1X0X_G3X0X = 0;
[00:51:29.187]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:51:29.187]      __var isProduction = 0;
[00:51:29.187]        // -> [isProduction <= 0x00000000]
[00:51:29.187]      __var continueId = 0;
[00:51:29.187]        // -> [continueId <= 0x00000000]
[00:51:29.187]      deviceID =   Read32(0x41C40004);
[00:51:29.203]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:51:29.203]        // -> [deviceID <= 0x2BB8802F]
[00:51:29.203]      version = deviceID >> 28;
[00:51:29.203]        // -> [version <= 0x00000002]
[00:51:29.203]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:51:29.203]        // -> [partNum <= 0x0000BB88]
[00:51:29.203]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:51:29.203]        // -> [manuf <= 0x00000017]
[00:51:29.203]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:51:29.203]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:51:29.203]      isProduction = (version > 0);
[00:51:29.207]        // -> [isProduction <= 0x00000001]
[00:51:29.207]    </block>
[00:51:29.207]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:51:29.207]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:51:29.207]        // =>  FALSE
[00:51:29.207]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:51:29.207]    </control>
[00:51:29.207]    <control if="continueId == 4" while="" timeout="0" info="">
[00:51:29.207]      // if-block "continueId == 4"
[00:51:29.207]        // =>  FALSE
[00:51:29.207]      // skip if-block "continueId == 4"
[00:51:29.207]    </control>
[00:51:29.207]    <control if="!isProduction" while="" timeout="0" info="">
[00:51:29.207]      // if-block "!isProduction"
[00:51:29.207]        // =>  FALSE
[00:51:29.207]      // skip if-block "!isProduction"
[00:51:29.207]    </control>
[00:51:29.207]  </sequence>
[00:51:29.207]  
[00:53:18.508]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:53:18.508]  
[00:53:18.508]  <debugvars>
[00:53:18.508]    // Pre-defined
[00:53:18.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:18.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:18.508]    __dp=0x00000000
[00:53:18.508]    __ap=0x00000000
[00:53:18.508]    __traceout=0x00000000      (Trace Disabled)
[00:53:18.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:18.508]    __FlashAddr=0x00000000
[00:53:18.508]    __FlashLen=0x00000000
[00:53:18.508]    __FlashArg=0x00000000
[00:53:18.508]    __FlashOp=0x00000000
[00:53:18.508]    __Result=0x00000000
[00:53:18.510]  </debugvars>
[00:53:18.510]  
[00:53:18.513]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:53:18.513]    <block atomic="false" info="">
[00:53:18.513]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:53:18.513]        // -> [isSWJ <= 0x00000001]
[00:53:18.513]      __var hasDormant = __protocol & 0x00020000;
[00:53:18.513]        // -> [hasDormant <= 0x00000000]
[00:53:18.513]      __var protType   = __protocol & 0x0000FFFF;
[00:53:18.513]        // -> [protType <= 0x00000002]
[00:53:18.513]    </block>
[00:53:18.513]    <control if="protType == 1" while="" timeout="0" info="">
[00:53:18.513]      // if-block "protType == 1"
[00:53:18.514]        // =>  FALSE
[00:53:18.514]      // skip if-block "protType == 1"
[00:53:18.514]    </control>
[00:53:18.514]    <control if="protType == 2" while="" timeout="0" info="">
[00:53:18.514]      // if-block "protType == 2"
[00:53:18.514]        // =>  TRUE
[00:53:18.514]      <control if="isSWJ" while="" timeout="0" info="">
[00:53:18.514]        // if-block "isSWJ"
[00:53:18.514]          // =>  TRUE
[00:53:18.514]        <control if="hasDormant" while="" timeout="0" info="">
[00:53:18.514]          // if-block "hasDormant"
[00:53:18.514]            // =>  FALSE
[00:53:18.514]          // skip if-block "hasDormant"
[00:53:18.514]        </control>
[00:53:18.514]        <control if="!hasDormant" while="" timeout="0" info="">
[00:53:18.514]          // if-block "!hasDormant"
[00:53:18.514]            // =>  TRUE
[00:53:18.514]          <block atomic="false" info="">
[00:53:18.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:53:18.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:18.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:53:18.519]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:53:18.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:53:18.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:18.523]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:53:18.527]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:53:18.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:53:18.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:18.533]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:53:18.535]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:53:18.535]          </block>
[00:53:18.535]          // end if-block "!hasDormant"
[00:53:18.535]        </control>
[00:53:18.535]        // end if-block "isSWJ"
[00:53:18.535]      </control>
[00:53:18.535]      <control if="!isSWJ" while="" timeout="0" info="">
[00:53:18.535]        // if-block "!isSWJ"
[00:53:18.535]          // =>  FALSE
[00:53:18.535]        // skip if-block "!isSWJ"
[00:53:18.535]      </control>
[00:53:18.535]      <block atomic="false" info="">
[00:53:18.535]        ReadDP(0x0);
[00:53:18.551]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:53:18.553]      </block>
[00:53:18.553]      // end if-block "protType == 2"
[00:53:18.553]    </control>
[00:53:18.553]  </sequence>
[00:53:18.553]  
[00:53:18.567]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:53:18.567]  
[00:53:18.567]  <debugvars>
[00:53:18.567]    // Pre-defined
[00:53:18.567]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:18.567]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:18.567]    __dp=0x00000000
[00:53:18.567]    __ap=0x00000000
[00:53:18.567]    __traceout=0x00000000      (Trace Disabled)
[00:53:18.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:18.567]    __FlashAddr=0x00000000
[00:53:18.569]    __FlashLen=0x00000000
[00:53:18.569]    __FlashArg=0x00000000
[00:53:18.569]    __FlashOp=0x00000000
[00:53:18.569]    __Result=0x00000000
[00:53:18.569]  </debugvars>
[00:53:18.569]  
[00:53:18.569]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:53:18.569]    <block atomic="false" info="">
[00:53:18.569]      __var SW_DP_ABORT       = 0x0;
[00:53:18.569]        // -> [SW_DP_ABORT <= 0x00000000]
[00:53:18.569]      __var DP_CTRL_STAT      = 0x4;
[00:53:18.570]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:53:18.570]      __var DP_SELECT         = 0x8;
[00:53:18.570]        // -> [DP_SELECT <= 0x00000008]
[00:53:18.570]      __var powered_down      = 0;
[00:53:18.570]        // -> [powered_down <= 0x00000000]
[00:53:18.570]      WriteDP(DP_SELECT, 0x00000000);
[00:53:18.576]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:53:18.576]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:53:18.580]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:53:18.580]        // -> [powered_down <= 0x00000001]
[00:53:18.580]    </block>
[00:53:18.580]    <control if="powered_down" while="" timeout="0" info="">
[00:53:18.580]      // if-block "powered_down"
[00:53:18.580]        // =>  TRUE
[00:53:18.580]      <block atomic="false" info="">
[00:53:18.580]        Message(0, "Debug/System power-up request sent");
[00:53:18.584]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:53:18.584]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:53:18.584]      </block>
[00:53:18.588]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:53:18.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:53:18.588]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:53:18.588]        // while-condition  =>  FALSE
[00:53:18.588]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:53:18.588]      </control>
[00:53:18.588]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:53:18.588]        // if-block "(__protocol & 0xFFFF) == 1"
[00:53:18.588]          // =>  FALSE
[00:53:18.592]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:53:18.592]      </control>
[00:53:18.592]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:53:18.592]        // if-block "(__protocol & 0xFFFF) == 2"
[00:53:18.592]          // =>  TRUE
[00:53:18.592]        <block atomic="false" info="">
[00:53:18.592]          Message(0, "executing SWD power up");
[00:53:18.593]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:53:18.596]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:53:18.596]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:53:18.600]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:53:18.600]        </block>
[00:53:18.600]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:53:18.600]      </control>
[00:53:18.600]      // end if-block "powered_down"
[00:53:18.600]    </control>
[00:53:18.600]    <block atomic="false" info="">
[00:53:18.600]      __var DEBUG_PORT_VAL    = 0;
[00:53:18.600]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:53:18.600]      __var ACCESS_POINT_VAL  = 0;
[00:53:18.600]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:53:18.600]      __ap = 1; 
[00:53:18.600]        // -> [__ap <= 0x00000001]
[00:53:18.600]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:53:18.608]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:53:18.608]      __ap = 4;
[00:53:18.608]        // -> [__ap <= 0x00000004]
[00:53:18.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:18.624]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:53:18.624]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:53:18.624]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:18.624]    </block>
[00:53:18.624]    <block atomic="false" info="">
[00:53:18.624]      __var nReset = 0x80;
[00:53:18.624]        // -> [nReset <= 0x00000080]
[00:53:18.624]      __var canReadPins = 0;
[00:53:18.624]        // -> [canReadPins <= 0x00000000]
[00:53:18.624]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:53:18.628]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:53:18.628]        // -> [canReadPins <= 0x00000001]
[00:53:18.628]    </block>
[00:53:18.631]    <control if="" while="1" timeout="200" info="">
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.631]      // while "1"  (timeout="200")
[00:53:18.631]      // while-condition  =>  TRUE
[00:53:18.632]      // while "1"  (timeout="200")
[00:53:18.632]      // while-condition  =>  TRUE
[00:53:18.632]      // while "1"  (timeout="200")
[00:53:18.633]      // while-condition  =>  TRUE
[00:53:18.633]      // while "1"  (timeout="200")
[00:53:18.633]      // while-condition  =>  TRUE
[00:53:18.633]      // while "1"  (timeout="200")
[00:53:18.633]      // while-condition  =>  TRUE
[00:53:18.633]      // while "1"  (timeout="200")
[00:53:18.633]      // while-condition  =>  TRUE
[00:53:18.633]      // while "1"  (timeout="200")
[00:53:18.633]      // while-condition  =>  TRUE
[00:53:18.633]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.634]      // while-condition  =>  TRUE
[00:53:18.634]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.636]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.636]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.636]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.636]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.636]      // while "1"  (timeout="200")
[00:53:18.636]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.637]      // while-condition  =>  TRUE
[00:53:18.637]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.639]      // while-condition  =>  TRUE
[00:53:18.639]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.640]      // while "1"  (timeout="200")
[00:53:18.640]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.643]      // while-condition  =>  TRUE
[00:53:18.643]      // while "1"  (timeout="200")
[00:53:18.644]      // while-condition  =>  TRUE
[00:53:18.644]      // while "1"  (timeout="200")
[00:53:18.644]      // while  =>  TIMEOUT
[00:53:18.644]      // end while "1"
[00:53:18.644]    </control>
[00:53:18.644]    <control if="canReadPins" while="" timeout="0" info="">
[00:53:18.644]      // if-block "canReadPins"
[00:53:18.644]        // =>  TRUE
[00:53:18.644]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:53:18.646]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:53:18.653]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:53:18.653]        // while-condition  =>  FALSE
[00:53:18.657]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:53:18.657]      </control>
[00:53:18.657]      // end if-block "canReadPins"
[00:53:18.657]    </control>
[00:53:18.657]    <control if="!canReadPins" while="" timeout="0" info="">
[00:53:18.657]      // if-block "!canReadPins"
[00:53:18.657]        // =>  FALSE
[00:53:18.657]      // skip if-block "!canReadPins"
[00:53:18.657]    </control>
[00:53:18.657]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:53:18.657]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:18.657]        // =>  TRUE
[00:53:18.657]      <block atomic="false" info="">
[00:53:18.657]        WriteAP(0x00, 0x190008);
[00:53:18.673]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:18.673]        WriteAP(0xF0, 0x01);
[00:53:18.677]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:18.677]      </block>
[00:53:18.677]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:18.677]    </control>
[00:53:18.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:53:18.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:18.677]        // =>  FALSE
[00:53:18.681]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:18.681]    </control>
[00:53:18.681]    <block atomic="false" info="">
[00:53:18.681]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:18.697]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:53:18.697]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:53:18.697]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:18.697]      __ap = 0; //lets make sure we reset the access point selection
[00:53:18.697]        // -> [__ap <= 0x00000000]
[00:53:18.697]    </block>
[00:53:18.697]  </sequence>
[00:53:18.697]  
[00:53:18.743]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:53:18.743]  
[00:53:18.743]  <debugvars>
[00:53:18.743]    // Pre-defined
[00:53:18.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:18.743]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:18.743]    __dp=0x00000000
[00:53:18.743]    __ap=0x00000000
[00:53:18.743]    __traceout=0x00000000      (Trace Disabled)
[00:53:18.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:18.743]    __FlashAddr=0x00000000
[00:53:18.743]    __FlashLen=0x00000000
[00:53:18.743]    __FlashArg=0x00000000
[00:53:18.743]    __FlashOp=0x00000000
[00:53:18.743]    __Result=0x00000000
[00:53:18.743]  </debugvars>
[00:53:18.743]  
[00:53:18.743]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:53:18.743]    <block atomic="false" info="">
[00:53:18.743]      __var deviceID = 0;
[00:53:18.743]        // -> [deviceID <= 0x00000000]
[00:53:18.743]      __var version = 0;
[00:53:18.745]        // -> [version <= 0x00000000]
[00:53:18.745]      __var partNum = 0;
[00:53:18.745]        // -> [partNum <= 0x00000000]
[00:53:18.745]      __var manuf = 0;
[00:53:18.745]        // -> [manuf <= 0x00000000]
[00:53:18.745]      __var isMSPM0G1X0X_G3X0X = 0;
[00:53:18.745]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:53:18.745]      __var isProduction = 0;
[00:53:18.745]        // -> [isProduction <= 0x00000000]
[00:53:18.745]      __var continueId = 0;
[00:53:18.745]        // -> [continueId <= 0x00000000]
[00:53:18.745]      deviceID =   Read32(0x41C40004);
[00:53:18.749]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:53:18.749]        // -> [deviceID <= 0x2BB8802F]
[00:53:18.749]      version = deviceID >> 28;
[00:53:18.749]        // -> [version <= 0x00000002]
[00:53:18.749]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:53:18.749]        // -> [partNum <= 0x0000BB88]
[00:53:18.749]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:53:18.749]        // -> [manuf <= 0x00000017]
[00:53:18.749]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:53:18.749]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:53:18.749]      isProduction = (version > 0);
[00:53:18.749]        // -> [isProduction <= 0x00000001]
[00:53:18.749]    </block>
[00:53:18.749]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:53:18.749]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:53:18.749]        // =>  FALSE
[00:53:18.749]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:53:18.753]    </control>
[00:53:18.753]    <control if="continueId == 4" while="" timeout="0" info="">
[00:53:18.753]      // if-block "continueId == 4"
[00:53:18.753]        // =>  FALSE
[00:53:18.753]      // skip if-block "continueId == 4"
[00:53:18.753]    </control>
[00:53:18.753]    <control if="!isProduction" while="" timeout="0" info="">
[00:53:18.753]      // if-block "!isProduction"
[00:53:18.753]        // =>  FALSE
[00:53:18.753]      // skip if-block "!isProduction"
[00:53:18.753]    </control>
[00:53:18.753]  </sequence>
[00:53:18.753]  
[00:54:26.315]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:54:26.315]  
[00:54:26.315]  <debugvars>
[00:54:26.315]    // Pre-defined
[00:54:26.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:26.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:26.315]    __dp=0x00000000
[00:54:26.315]    __ap=0x00000000
[00:54:26.315]    __traceout=0x00000000      (Trace Disabled)
[00:54:26.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:26.315]    __FlashAddr=0x00000000
[00:54:26.315]    __FlashLen=0x00000000
[00:54:26.318]    __FlashArg=0x00000000
[00:54:26.318]    __FlashOp=0x00000000
[00:54:26.318]    __Result=0x00000000
[00:54:26.318]  </debugvars>
[00:54:26.318]  
[00:54:26.320]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:54:26.320]    <block atomic="false" info="">
[00:54:26.320]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:54:26.320]        // -> [isSWJ <= 0x00000001]
[00:54:26.320]      __var hasDormant = __protocol & 0x00020000;
[00:54:26.320]        // -> [hasDormant <= 0x00000000]
[00:54:26.320]      __var protType   = __protocol & 0x0000FFFF;
[00:54:26.320]        // -> [protType <= 0x00000002]
[00:54:26.320]    </block>
[00:54:26.320]    <control if="protType == 1" while="" timeout="0" info="">
[00:54:26.320]      // if-block "protType == 1"
[00:54:26.320]        // =>  FALSE
[00:54:26.320]      // skip if-block "protType == 1"
[00:54:26.320]    </control>
[00:54:26.320]    <control if="protType == 2" while="" timeout="0" info="">
[00:54:26.320]      // if-block "protType == 2"
[00:54:26.320]        // =>  TRUE
[00:54:26.321]      <control if="isSWJ" while="" timeout="0" info="">
[00:54:26.321]        // if-block "isSWJ"
[00:54:26.321]          // =>  TRUE
[00:54:26.321]        <control if="hasDormant" while="" timeout="0" info="">
[00:54:26.321]          // if-block "hasDormant"
[00:54:26.321]            // =>  FALSE
[00:54:26.321]          // skip if-block "hasDormant"
[00:54:26.321]        </control>
[00:54:26.321]        <control if="!hasDormant" while="" timeout="0" info="">
[00:54:26.321]          // if-block "!hasDormant"
[00:54:26.321]            // =>  TRUE
[00:54:26.321]          <block atomic="false" info="">
[00:54:26.321]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:54:26.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:26.327]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:54:26.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:54:26.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:54:26.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:26.331]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:54:26.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:54:26.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:54:26.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:26.339]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:54:26.344]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:54:26.344]          </block>
[00:54:26.344]          // end if-block "!hasDormant"
[00:54:26.344]        </control>
[00:54:26.344]        // end if-block "isSWJ"
[00:54:26.344]      </control>
[00:54:26.344]      <control if="!isSWJ" while="" timeout="0" info="">
[00:54:26.344]        // if-block "!isSWJ"
[00:54:26.344]          // =>  FALSE
[00:54:26.344]        // skip if-block "!isSWJ"
[00:54:26.344]      </control>
[00:54:26.344]      <block atomic="false" info="">
[00:54:26.344]        ReadDP(0x0);
[00:54:26.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:54:26.351]      </block>
[00:54:26.351]      // end if-block "protType == 2"
[00:54:26.351]    </control>
[00:54:26.351]  </sequence>
[00:54:26.351]  
[00:54:26.359]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:54:26.359]  
[00:54:26.359]  <debugvars>
[00:54:26.359]    // Pre-defined
[00:54:26.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:26.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:26.359]    __dp=0x00000000
[00:54:26.359]    __ap=0x00000000
[00:54:26.359]    __traceout=0x00000000      (Trace Disabled)
[00:54:26.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:26.359]    __FlashAddr=0x00000000
[00:54:26.359]    __FlashLen=0x00000000
[00:54:26.359]    __FlashArg=0x00000000
[00:54:26.359]    __FlashOp=0x00000000
[00:54:26.359]    __Result=0x00000000
[00:54:26.359]  </debugvars>
[00:54:26.359]  
[00:54:26.359]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:54:26.359]    <block atomic="false" info="">
[00:54:26.361]      __var SW_DP_ABORT       = 0x0;
[00:54:26.361]        // -> [SW_DP_ABORT <= 0x00000000]
[00:54:26.361]      __var DP_CTRL_STAT      = 0x4;
[00:54:26.361]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:54:26.361]      __var DP_SELECT         = 0x8;
[00:54:26.361]        // -> [DP_SELECT <= 0x00000008]
[00:54:26.361]      __var powered_down      = 0;
[00:54:26.362]        // -> [powered_down <= 0x00000000]
[00:54:26.362]      WriteDP(DP_SELECT, 0x00000000);
[00:54:26.369]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:54:26.369]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:54:26.370]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:54:26.371]        // -> [powered_down <= 0x00000001]
[00:54:26.371]    </block>
[00:54:26.371]    <control if="powered_down" while="" timeout="0" info="">
[00:54:26.371]      // if-block "powered_down"
[00:54:26.371]        // =>  TRUE
[00:54:26.371]      <block atomic="false" info="">
[00:54:26.371]        Message(0, "Debug/System power-up request sent");
[00:54:26.373]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:54:26.376]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:54:26.376]      </block>
[00:54:26.376]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:54:26.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:54:26.378]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:54:26.378]        // while-condition  =>  FALSE
[00:54:26.378]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:54:26.380]      </control>
[00:54:26.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:54:26.380]        // if-block "(__protocol & 0xFFFF) == 1"
[00:54:26.380]          // =>  FALSE
[00:54:26.380]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:54:26.380]      </control>
[00:54:26.381]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:54:26.381]        // if-block "(__protocol & 0xFFFF) == 2"
[00:54:26.381]          // =>  TRUE
[00:54:26.381]        <block atomic="false" info="">
[00:54:26.381]          Message(0, "executing SWD power up");
[00:54:26.382]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:54:26.386]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:54:26.388]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:54:26.397]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:54:26.397]        </block>
[00:54:26.397]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:54:26.397]      </control>
[00:54:26.397]      // end if-block "powered_down"
[00:54:26.397]    </control>
[00:54:26.397]    <block atomic="false" info="">
[00:54:26.397]      __var DEBUG_PORT_VAL    = 0;
[00:54:26.397]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:54:26.397]      __var ACCESS_POINT_VAL  = 0;
[00:54:26.397]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:54:26.397]      __ap = 1; 
[00:54:26.397]        // -> [__ap <= 0x00000001]
[00:54:26.397]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:54:26.400]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:54:26.400]      __ap = 4;
[00:54:26.400]        // -> [__ap <= 0x00000004]
[00:54:26.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:26.408]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:54:26.408]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:54:26.408]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:26.412]    </block>
[00:54:26.412]    <block atomic="false" info="">
[00:54:26.412]      __var nReset = 0x80;
[00:54:26.412]        // -> [nReset <= 0x00000080]
[00:54:26.412]      __var canReadPins = 0;
[00:54:26.412]        // -> [canReadPins <= 0x00000000]
[00:54:26.412]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:54:26.414]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:54:26.414]        // -> [canReadPins <= 0x00000001]
[00:54:26.414]    </block>
[00:54:26.414]    <control if="" while="1" timeout="200" info="">
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.414]      // while-condition  =>  TRUE
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.414]      // while-condition  =>  TRUE
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.414]      // while-condition  =>  TRUE
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.414]      // while-condition  =>  TRUE
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.414]      // while-condition  =>  TRUE
[00:54:26.414]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.416]      // while "1"  (timeout="200")
[00:54:26.416]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.417]      // while-condition  =>  TRUE
[00:54:26.417]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.421]      // while "1"  (timeout="200")
[00:54:26.421]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.424]      // while-condition  =>  TRUE
[00:54:26.424]      // while "1"  (timeout="200")
[00:54:26.428]      // while-condition  =>  TRUE
[00:54:26.428]      // while "1"  (timeout="200")
[00:54:26.428]      // while  =>  TIMEOUT
[00:54:26.428]      // end while "1"
[00:54:26.428]    </control>
[00:54:26.428]    <control if="canReadPins" while="" timeout="0" info="">
[00:54:26.428]      // if-block "canReadPins"
[00:54:26.428]        // =>  TRUE
[00:54:26.428]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:54:26.428]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:54:26.434]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:54:26.434]        // while-condition  =>  FALSE
[00:54:26.434]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:54:26.434]      </control>
[00:54:26.434]      // end if-block "canReadPins"
[00:54:26.434]    </control>
[00:54:26.434]    <control if="!canReadPins" while="" timeout="0" info="">
[00:54:26.434]      // if-block "!canReadPins"
[00:54:26.434]        // =>  FALSE
[00:54:26.436]      // skip if-block "!canReadPins"
[00:54:26.436]    </control>
[00:54:26.436]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:54:26.436]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:26.436]        // =>  TRUE
[00:54:26.436]      <block atomic="false" info="">
[00:54:26.436]        WriteAP(0x00, 0x190008);
[00:54:26.438]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:26.438]        WriteAP(0xF0, 0x01);
[00:54:26.442]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:26.442]      </block>
[00:54:26.442]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:26.442]    </control>
[00:54:26.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:54:26.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:26.442]        // =>  FALSE
[00:54:26.442]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:26.442]    </control>
[00:54:26.442]    <block atomic="false" info="">
[00:54:26.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:26.457]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:54:26.457]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:54:26.457]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:26.457]      __ap = 0; //lets make sure we reset the access point selection
[00:54:26.457]        // -> [__ap <= 0x00000000]
[00:54:26.457]    </block>
[00:54:26.457]  </sequence>
[00:54:26.457]  
[00:54:26.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:54:26.504]  
[00:54:26.504]  <debugvars>
[00:54:26.504]    // Pre-defined
[00:54:26.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:26.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:26.504]    __dp=0x00000000
[00:54:26.504]    __ap=0x00000000
[00:54:26.504]    __traceout=0x00000000      (Trace Disabled)
[00:54:26.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:26.504]    __FlashAddr=0x00000000
[00:54:26.506]    __FlashLen=0x00000000
[00:54:26.506]    __FlashArg=0x00000000
[00:54:26.506]    __FlashOp=0x00000000
[00:54:26.506]    __Result=0x00000000
[00:54:26.506]  </debugvars>
[00:54:26.506]  
[00:54:26.506]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:54:26.506]    <block atomic="false" info="">
[00:54:26.506]      __var deviceID = 0;
[00:54:26.506]        // -> [deviceID <= 0x00000000]
[00:54:26.506]      __var version = 0;
[00:54:26.506]        // -> [version <= 0x00000000]
[00:54:26.506]      __var partNum = 0;
[00:54:26.506]        // -> [partNum <= 0x00000000]
[00:54:26.506]      __var manuf = 0;
[00:54:26.506]        // -> [manuf <= 0x00000000]
[00:54:26.506]      __var isMSPM0G1X0X_G3X0X = 0;
[00:54:26.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:54:26.506]      __var isProduction = 0;
[00:54:26.506]        // -> [isProduction <= 0x00000000]
[00:54:26.506]      __var continueId = 0;
[00:54:26.506]        // -> [continueId <= 0x00000000]
[00:54:26.506]      deviceID =   Read32(0x41C40004);
[00:54:26.514]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:54:26.514]        // -> [deviceID <= 0x2BB8802F]
[00:54:26.514]      version = deviceID >> 28;
[00:54:26.514]        // -> [version <= 0x00000002]
[00:54:26.514]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:54:26.514]        // -> [partNum <= 0x0000BB88]
[00:54:26.514]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:54:26.514]        // -> [manuf <= 0x00000017]
[00:54:26.514]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:54:26.514]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:54:26.516]      isProduction = (version > 0);
[00:54:26.516]        // -> [isProduction <= 0x00000001]
[00:54:26.516]    </block>
[00:54:26.516]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:54:26.516]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:54:26.516]        // =>  FALSE
[00:54:26.516]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:54:26.516]    </control>
[00:54:26.516]    <control if="continueId == 4" while="" timeout="0" info="">
[00:54:26.516]      // if-block "continueId == 4"
[00:54:26.516]        // =>  FALSE
[00:54:26.516]      // skip if-block "continueId == 4"
[00:54:26.516]    </control>
[00:54:26.516]    <control if="!isProduction" while="" timeout="0" info="">
[00:54:26.516]      // if-block "!isProduction"
[00:54:26.516]        // =>  FALSE
[00:54:26.516]      // skip if-block "!isProduction"
[00:54:26.516]    </control>
[00:54:26.516]  </sequence>
[00:54:26.516]  
[00:55:49.546]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:55:49.546]  
[00:55:49.548]  <debugvars>
[00:55:49.548]    // Pre-defined
[00:55:49.548]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:49.548]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:49.548]    __dp=0x00000000
[00:55:49.548]    __ap=0x00000000
[00:55:49.548]    __traceout=0x00000000      (Trace Disabled)
[00:55:49.548]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:49.548]    __FlashAddr=0x00000000
[00:55:49.548]    __FlashLen=0x00000000
[00:55:49.548]    __FlashArg=0x00000000
[00:55:49.548]    __FlashOp=0x00000000
[00:55:49.548]    __Result=0x00000000
[00:55:49.548]  </debugvars>
[00:55:49.548]  
[00:55:49.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:55:49.548]    <block atomic="false" info="">
[00:55:49.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:55:49.548]        // -> [isSWJ <= 0x00000001]
[00:55:49.548]      __var hasDormant = __protocol & 0x00020000;
[00:55:49.548]        // -> [hasDormant <= 0x00000000]
[00:55:49.548]      __var protType   = __protocol & 0x0000FFFF;
[00:55:49.548]        // -> [protType <= 0x00000002]
[00:55:49.548]    </block>
[00:55:49.548]    <control if="protType == 1" while="" timeout="0" info="">
[00:55:49.548]      // if-block "protType == 1"
[00:55:49.548]        // =>  FALSE
[00:55:49.548]      // skip if-block "protType == 1"
[00:55:49.548]    </control>
[00:55:49.548]    <control if="protType == 2" while="" timeout="0" info="">
[00:55:49.548]      // if-block "protType == 2"
[00:55:49.548]        // =>  TRUE
[00:55:49.548]      <control if="isSWJ" while="" timeout="0" info="">
[00:55:49.548]        // if-block "isSWJ"
[00:55:49.548]          // =>  TRUE
[00:55:49.548]        <control if="hasDormant" while="" timeout="0" info="">
[00:55:49.552]          // if-block "hasDormant"
[00:55:49.552]            // =>  FALSE
[00:55:49.552]          // skip if-block "hasDormant"
[00:55:49.552]        </control>
[00:55:49.552]        <control if="!hasDormant" while="" timeout="0" info="">
[00:55:49.552]          // if-block "!hasDormant"
[00:55:49.552]            // =>  TRUE
[00:55:49.552]          <block atomic="false" info="">
[00:55:49.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:55:49.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:49.554]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:55:49.556]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:55:49.556]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:55:49.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:49.560]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:55:49.560]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:55:49.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:55:49.564]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:49.566]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:55:49.566]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:55:49.566]          </block>
[00:55:49.566]          // end if-block "!hasDormant"
[00:55:49.566]        </control>
[00:55:49.568]        // end if-block "isSWJ"
[00:55:49.568]      </control>
[00:55:49.568]      <control if="!isSWJ" while="" timeout="0" info="">
[00:55:49.568]        // if-block "!isSWJ"
[00:55:49.568]          // =>  FALSE
[00:55:49.568]        // skip if-block "!isSWJ"
[00:55:49.568]      </control>
[00:55:49.568]      <block atomic="false" info="">
[00:55:49.568]        ReadDP(0x0);
[00:55:49.572]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:55:49.572]      </block>
[00:55:49.572]      // end if-block "protType == 2"
[00:55:49.572]    </control>
[00:55:49.572]  </sequence>
[00:55:49.572]  
[00:55:49.580]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:55:49.580]  
[00:55:49.580]  <debugvars>
[00:55:49.580]    // Pre-defined
[00:55:49.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:49.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:49.580]    __dp=0x00000000
[00:55:49.580]    __ap=0x00000000
[00:55:49.580]    __traceout=0x00000000      (Trace Disabled)
[00:55:49.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:49.580]    __FlashAddr=0x00000000
[00:55:49.580]    __FlashLen=0x00000000
[00:55:49.580]    __FlashArg=0x00000000
[00:55:49.580]    __FlashOp=0x00000000
[00:55:49.580]    __Result=0x00000000
[00:55:49.582]  </debugvars>
[00:55:49.582]  
[00:55:49.582]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:55:49.582]    <block atomic="false" info="">
[00:55:49.582]      __var SW_DP_ABORT       = 0x0;
[00:55:49.582]        // -> [SW_DP_ABORT <= 0x00000000]
[00:55:49.582]      __var DP_CTRL_STAT      = 0x4;
[00:55:49.582]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:55:49.582]      __var DP_SELECT         = 0x8;
[00:55:49.582]        // -> [DP_SELECT <= 0x00000008]
[00:55:49.582]      __var powered_down      = 0;
[00:55:49.582]        // -> [powered_down <= 0x00000000]
[00:55:49.582]      WriteDP(DP_SELECT, 0x00000000);
[00:55:49.584]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:55:49.584]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:55:49.586]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:55:49.586]        // -> [powered_down <= 0x00000001]
[00:55:49.586]    </block>
[00:55:49.586]    <control if="powered_down" while="" timeout="0" info="">
[00:55:49.586]      // if-block "powered_down"
[00:55:49.586]        // =>  TRUE
[00:55:49.588]      <block atomic="false" info="">
[00:55:49.588]        Message(0, "Debug/System power-up request sent");
[00:55:49.588]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:55:49.588]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:55:49.588]      </block>
[00:55:49.588]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:55:49.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:55:49.593]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:55:49.593]        // while-condition  =>  FALSE
[00:55:49.593]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:55:49.593]      </control>
[00:55:49.593]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:55:49.593]        // if-block "(__protocol & 0xFFFF) == 1"
[00:55:49.593]          // =>  FALSE
[00:55:49.593]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:55:49.593]      </control>
[00:55:49.593]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:55:49.593]        // if-block "(__protocol & 0xFFFF) == 2"
[00:55:49.593]          // =>  TRUE
[00:55:49.593]        <block atomic="false" info="">
[00:55:49.595]          Message(0, "executing SWD power up");
[00:55:49.596]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:55:49.596]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:55:49.596]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:55:49.608]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:55:49.608]        </block>
[00:55:49.608]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:55:49.608]      </control>
[00:55:49.608]      // end if-block "powered_down"
[00:55:49.608]    </control>
[00:55:49.608]    <block atomic="false" info="">
[00:55:49.608]      __var DEBUG_PORT_VAL    = 0;
[00:55:49.608]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:55:49.608]      __var ACCESS_POINT_VAL  = 0;
[00:55:49.608]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:55:49.608]      __ap = 1; 
[00:55:49.608]        // -> [__ap <= 0x00000001]
[00:55:49.608]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:55:49.612]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:55:49.612]      __ap = 4;
[00:55:49.612]        // -> [__ap <= 0x00000004]
[00:55:49.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:49.616]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:55:49.616]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:55:49.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:49.616]    </block>
[00:55:49.616]    <block atomic="false" info="">
[00:55:49.616]      __var nReset = 0x80;
[00:55:49.616]        // -> [nReset <= 0x00000080]
[00:55:49.620]      __var canReadPins = 0;
[00:55:49.620]        // -> [canReadPins <= 0x00000000]
[00:55:49.620]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:55:49.621]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:55:49.621]        // -> [canReadPins <= 0x00000001]
[00:55:49.621]    </block>
[00:55:49.621]    <control if="" while="1" timeout="200" info="">
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.621]      // while-condition  =>  TRUE
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.621]      // while-condition  =>  TRUE
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.621]      // while-condition  =>  TRUE
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.621]      // while-condition  =>  TRUE
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.621]      // while-condition  =>  TRUE
[00:55:49.621]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.624]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.624]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.624]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.624]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.624]      // while "1"  (timeout="200")
[00:55:49.624]      // while-condition  =>  TRUE
[00:55:49.625]      // while "1"  (timeout="200")
[00:55:49.625]      // while-condition  =>  TRUE
[00:55:49.625]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.626]      // while-condition  =>  TRUE
[00:55:49.626]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.628]      // while "1"  (timeout="200")
[00:55:49.628]      // while-condition  =>  TRUE
[00:55:49.632]      // while "1"  (timeout="200")
[00:55:49.632]      // while  =>  TIMEOUT
[00:55:49.632]      // end while "1"
[00:55:49.632]    </control>
[00:55:49.632]    <control if="canReadPins" while="" timeout="0" info="">
[00:55:49.632]      // if-block "canReadPins"
[00:55:49.632]        // =>  TRUE
[00:55:49.632]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:55:49.632]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:55:49.636]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:55:49.636]        // while-condition  =>  FALSE
[00:55:49.636]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:55:49.636]      </control>
[00:55:49.636]      // end if-block "canReadPins"
[00:55:49.636]    </control>
[00:55:49.636]    <control if="!canReadPins" while="" timeout="0" info="">
[00:55:49.636]      // if-block "!canReadPins"
[00:55:49.636]        // =>  FALSE
[00:55:49.636]      // skip if-block "!canReadPins"
[00:55:49.636]    </control>
[00:55:49.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:55:49.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:49.636]        // =>  TRUE
[00:55:49.636]      <block atomic="false" info="">
[00:55:49.636]        WriteAP(0x00, 0x190008);
[00:55:49.641]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:49.641]        WriteAP(0xF0, 0x01);
[00:55:49.646]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:49.646]      </block>
[00:55:49.646]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:49.646]    </control>
[00:55:49.646]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:55:49.646]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:49.646]        // =>  FALSE
[00:55:49.646]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:49.646]    </control>
[00:55:49.646]    <block atomic="false" info="">
[00:55:49.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:49.658]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:55:49.658]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:55:49.660]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:49.661]      __ap = 0; //lets make sure we reset the access point selection
[00:55:49.661]        // -> [__ap <= 0x00000000]
[00:55:49.661]    </block>
[00:55:49.661]  </sequence>
[00:55:49.661]  
[00:55:49.686]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:55:49.686]  
[00:55:49.686]  <debugvars>
[00:55:49.686]    // Pre-defined
[00:55:49.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:49.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:49.686]    __dp=0x00000000
[00:55:49.686]    __ap=0x00000000
[00:55:49.686]    __traceout=0x00000000      (Trace Disabled)
[00:55:49.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:49.686]    __FlashAddr=0x00000000
[00:55:49.686]    __FlashLen=0x00000000
[00:55:49.686]    __FlashArg=0x00000000
[00:55:49.686]    __FlashOp=0x00000000
[00:55:49.686]    __Result=0x00000000
[00:55:49.686]  </debugvars>
[00:55:49.686]  
[00:55:49.686]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:55:49.686]    <block atomic="false" info="">
[00:55:49.686]      __var deviceID = 0;
[00:55:49.690]        // -> [deviceID <= 0x00000000]
[00:55:49.690]      __var version = 0;
[00:55:49.690]        // -> [version <= 0x00000000]
[00:55:49.690]      __var partNum = 0;
[00:55:49.690]        // -> [partNum <= 0x00000000]
[00:55:49.690]      __var manuf = 0;
[00:55:49.690]        // -> [manuf <= 0x00000000]
[00:55:49.690]      __var isMSPM0G1X0X_G3X0X = 0;
[00:55:49.691]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:55:49.691]      __var isProduction = 0;
[00:55:49.691]        // -> [isProduction <= 0x00000000]
[00:55:49.691]      __var continueId = 0;
[00:55:49.691]        // -> [continueId <= 0x00000000]
[00:55:49.691]      deviceID =   Read32(0x41C40004);
[00:55:49.701]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:55:49.701]        // -> [deviceID <= 0x2BB8802F]
[00:55:49.701]      version = deviceID >> 28;
[00:55:49.701]        // -> [version <= 0x00000002]
[00:55:49.701]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:55:49.701]        // -> [partNum <= 0x0000BB88]
[00:55:49.701]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:55:49.702]        // -> [manuf <= 0x00000017]
[00:55:49.702]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:55:49.702]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:55:49.702]      isProduction = (version > 0);
[00:55:49.702]        // -> [isProduction <= 0x00000001]
[00:55:49.702]    </block>
[00:55:49.702]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:55:49.702]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:55:49.702]        // =>  FALSE
[00:55:49.702]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:55:49.703]    </control>
[00:55:49.703]    <control if="continueId == 4" while="" timeout="0" info="">
[00:55:49.703]      // if-block "continueId == 4"
[00:55:49.703]        // =>  FALSE
[00:55:49.703]      // skip if-block "continueId == 4"
[00:55:49.703]    </control>
[00:55:49.703]    <control if="!isProduction" while="" timeout="0" info="">
[00:55:49.703]      // if-block "!isProduction"
[00:55:49.703]        // =>  FALSE
[00:55:49.703]      // skip if-block "!isProduction"
[00:55:49.703]    </control>
[00:55:49.703]  </sequence>
[00:55:49.703]  
[00:56:17.473]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:17.473]  
[00:56:17.483]  <debugvars>
[00:56:17.483]    // Pre-defined
[00:56:17.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:17.483]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:17.483]    __dp=0x00000000
[00:56:17.483]    __ap=0x00000000
[00:56:17.483]    __traceout=0x00000000      (Trace Disabled)
[00:56:17.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:17.483]    __FlashAddr=0x00000000
[00:56:17.483]    __FlashLen=0x00000000
[00:56:17.483]    __FlashArg=0x00000000
[00:56:17.484]    __FlashOp=0x00000000
[00:56:17.484]    __Result=0x00000000
[00:56:17.484]  </debugvars>
[00:56:17.484]  
[00:56:17.484]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:17.484]    <block atomic="false" info="">
[00:56:17.484]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:17.484]        // -> [isSWJ <= 0x00000001]
[00:56:17.484]      __var hasDormant = __protocol & 0x00020000;
[00:56:17.484]        // -> [hasDormant <= 0x00000000]
[00:56:17.484]      __var protType   = __protocol & 0x0000FFFF;
[00:56:17.484]        // -> [protType <= 0x00000002]
[00:56:17.484]    </block>
[00:56:17.484]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:17.486]      // if-block "protType == 1"
[00:56:17.486]        // =>  FALSE
[00:56:17.486]      // skip if-block "protType == 1"
[00:56:17.486]    </control>
[00:56:17.486]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:17.486]      // if-block "protType == 2"
[00:56:17.486]        // =>  TRUE
[00:56:17.486]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:17.486]        // if-block "isSWJ"
[00:56:17.486]          // =>  TRUE
[00:56:17.486]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:17.486]          // if-block "hasDormant"
[00:56:17.486]            // =>  FALSE
[00:56:17.486]          // skip if-block "hasDormant"
[00:56:17.486]        </control>
[00:56:17.486]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:17.486]          // if-block "!hasDormant"
[00:56:17.486]            // =>  TRUE
[00:56:17.486]          <block atomic="false" info="">
[00:56:17.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:17.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:17.488]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:17.492]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:17.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:17.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:17.492]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:17.492]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:17.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:17.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:17.497]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:17.498]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:17.498]          </block>
[00:56:17.498]          // end if-block "!hasDormant"
[00:56:17.498]        </control>
[00:56:17.498]        // end if-block "isSWJ"
[00:56:17.498]      </control>
[00:56:17.498]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:17.500]        // if-block "!isSWJ"
[00:56:17.500]          // =>  FALSE
[00:56:17.500]        // skip if-block "!isSWJ"
[00:56:17.500]      </control>
[00:56:17.500]      <block atomic="false" info="">
[00:56:17.500]        ReadDP(0x0);
[00:56:17.501]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:17.501]      </block>
[00:56:17.501]      // end if-block "protType == 2"
[00:56:17.501]    </control>
[00:56:17.501]  </sequence>
[00:56:17.501]  
[00:56:17.505]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:17.505]  
[00:56:17.505]  <debugvars>
[00:56:17.505]    // Pre-defined
[00:56:17.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:17.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:17.505]    __dp=0x00000000
[00:56:17.506]    __ap=0x00000000
[00:56:17.506]    __traceout=0x00000000      (Trace Disabled)
[00:56:17.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:17.506]    __FlashAddr=0x00000000
[00:56:17.506]    __FlashLen=0x00000000
[00:56:17.506]    __FlashArg=0x00000000
[00:56:17.507]    __FlashOp=0x00000000
[00:56:17.507]    __Result=0x00000000
[00:56:17.507]  </debugvars>
[00:56:17.507]  
[00:56:17.507]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:17.507]    <block atomic="false" info="">
[00:56:17.507]      __var SW_DP_ABORT       = 0x0;
[00:56:17.507]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:17.507]      __var DP_CTRL_STAT      = 0x4;
[00:56:17.507]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:17.507]      __var DP_SELECT         = 0x8;
[00:56:17.507]        // -> [DP_SELECT <= 0x00000008]
[00:56:17.507]      __var powered_down      = 0;
[00:56:17.507]        // -> [powered_down <= 0x00000000]
[00:56:17.507]      WriteDP(DP_SELECT, 0x00000000);
[00:56:17.508]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:17.508]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:17.511]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:17.511]        // -> [powered_down <= 0x00000001]
[00:56:17.511]    </block>
[00:56:17.511]    <control if="powered_down" while="" timeout="0" info="">
[00:56:17.511]      // if-block "powered_down"
[00:56:17.511]        // =>  TRUE
[00:56:17.511]      <block atomic="false" info="">
[00:56:17.511]        Message(0, "Debug/System power-up request sent");
[00:56:17.513]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:17.516]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:17.516]      </block>
[00:56:17.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:17.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:17.520]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:17.520]        // while-condition  =>  FALSE
[00:56:17.520]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:17.520]      </control>
[00:56:17.520]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:17.520]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:17.520]          // =>  FALSE
[00:56:17.520]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:17.520]      </control>
[00:56:17.520]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:17.524]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:17.524]          // =>  TRUE
[00:56:17.524]        <block atomic="false" info="">
[00:56:17.524]          Message(0, "executing SWD power up");
[00:56:17.526]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:17.528]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:17.528]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:17.529]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:17.529]        </block>
[00:56:17.531]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:17.531]      </control>
[00:56:17.531]      // end if-block "powered_down"
[00:56:17.531]    </control>
[00:56:17.531]    <block atomic="false" info="">
[00:56:17.531]      __var DEBUG_PORT_VAL    = 0;
[00:56:17.531]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:17.531]      __var ACCESS_POINT_VAL  = 0;
[00:56:17.531]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:17.531]      __ap = 1; 
[00:56:17.531]        // -> [__ap <= 0x00000001]
[00:56:17.531]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:17.533]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:17.533]      __ap = 4;
[00:56:17.533]        // -> [__ap <= 0x00000004]
[00:56:17.533]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:17.539]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:17.542]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:17.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:17.543]    </block>
[00:56:17.543]    <block atomic="false" info="">
[00:56:17.543]      __var nReset = 0x80;
[00:56:17.543]        // -> [nReset <= 0x00000080]
[00:56:17.543]      __var canReadPins = 0;
[00:56:17.543]        // -> [canReadPins <= 0x00000000]
[00:56:17.543]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:17.546]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:17.546]        // -> [canReadPins <= 0x00000001]
[00:56:17.548]    </block>
[00:56:17.548]    <control if="" while="1" timeout="200" info="">
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.548]      // while "1"  (timeout="200")
[00:56:17.548]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.549]      // while-condition  =>  TRUE
[00:56:17.549]      // while "1"  (timeout="200")
[00:56:17.552]      // while-condition  =>  TRUE
[00:56:17.552]      // while "1"  (timeout="200")
[00:56:17.552]      // while  =>  TIMEOUT
[00:56:17.552]      // end while "1"
[00:56:17.552]    </control>
[00:56:17.552]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:17.552]      // if-block "canReadPins"
[00:56:17.552]        // =>  TRUE
[00:56:17.552]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:17.552]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:17.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:17.554]        // while-condition  =>  FALSE
[00:56:17.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:17.554]      </control>
[00:56:17.554]      // end if-block "canReadPins"
[00:56:17.555]    </control>
[00:56:17.555]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:17.555]      // if-block "!canReadPins"
[00:56:17.555]        // =>  FALSE
[00:56:17.555]      // skip if-block "!canReadPins"
[00:56:17.555]    </control>
[00:56:17.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:17.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:17.555]        // =>  TRUE
[00:56:17.555]      <block atomic="false" info="">
[00:56:17.555]        WriteAP(0x00, 0x190008);
[00:56:17.556]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:17.556]        WriteAP(0xF0, 0x01);
[00:56:17.562]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:17.562]      </block>
[00:56:17.562]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:17.562]    </control>
[00:56:17.562]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:17.562]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:17.562]        // =>  FALSE
[00:56:17.562]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:17.562]    </control>
[00:56:17.562]    <block atomic="false" info="">
[00:56:17.562]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:17.574]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:17.574]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:17.574]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:17.576]      __ap = 0; //lets make sure we reset the access point selection
[00:56:17.576]        // -> [__ap <= 0x00000000]
[00:56:17.576]    </block>
[00:56:17.576]  </sequence>
[00:56:17.576]  
[00:56:17.607]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:17.607]  
[00:56:17.607]  <debugvars>
[00:56:17.607]    // Pre-defined
[00:56:17.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:17.607]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:17.607]    __dp=0x00000000
[00:56:17.607]    __ap=0x00000000
[00:56:17.607]    __traceout=0x00000000      (Trace Disabled)
[00:56:17.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:17.607]    __FlashAddr=0x00000000
[00:56:17.607]    __FlashLen=0x00000000
[00:56:17.607]    __FlashArg=0x00000000
[00:56:17.607]    __FlashOp=0x00000000
[00:56:17.607]    __Result=0x00000000
[00:56:17.607]  </debugvars>
[00:56:17.607]  
[00:56:17.607]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:17.607]    <block atomic="false" info="">
[00:56:17.607]      __var deviceID = 0;
[00:56:17.607]        // -> [deviceID <= 0x00000000]
[00:56:17.607]      __var version = 0;
[00:56:17.607]        // -> [version <= 0x00000000]
[00:56:17.607]      __var partNum = 0;
[00:56:17.607]        // -> [partNum <= 0x00000000]
[00:56:17.607]      __var manuf = 0;
[00:56:17.607]        // -> [manuf <= 0x00000000]
[00:56:17.607]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:17.607]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:17.607]      __var isProduction = 0;
[00:56:17.607]        // -> [isProduction <= 0x00000000]
[00:56:17.610]      __var continueId = 0;
[00:56:17.610]        // -> [continueId <= 0x00000000]
[00:56:17.610]      deviceID =   Read32(0x41C40004);
[00:56:17.631]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:17.631]        // -> [deviceID <= 0x2BB8802F]
[00:56:17.631]      version = deviceID >> 28;
[00:56:17.631]        // -> [version <= 0x00000002]
[00:56:17.631]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:17.631]        // -> [partNum <= 0x0000BB88]
[00:56:17.631]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:17.631]        // -> [manuf <= 0x00000017]
[00:56:17.631]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:17.631]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:17.631]      isProduction = (version > 0);
[00:56:17.635]        // -> [isProduction <= 0x00000001]
[00:56:17.635]    </block>
[00:56:17.635]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:17.635]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:17.635]        // =>  FALSE
[00:56:17.635]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:17.635]    </control>
[00:56:17.635]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:17.635]      // if-block "continueId == 4"
[00:56:17.635]        // =>  FALSE
[00:56:17.636]      // skip if-block "continueId == 4"
[00:56:17.636]    </control>
[00:56:17.636]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:17.636]      // if-block "!isProduction"
[00:56:17.636]        // =>  FALSE
[00:56:17.636]      // skip if-block "!isProduction"
[00:56:17.636]    </control>
[00:56:17.636]  </sequence>
[00:56:17.636]  
[00:56:43.207]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:43.207]  
[00:56:43.216]  <debugvars>
[00:56:43.216]    // Pre-defined
[00:56:43.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:43.216]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:43.216]    __dp=0x00000000
[00:56:43.216]    __ap=0x00000000
[00:56:43.216]    __traceout=0x00000000      (Trace Disabled)
[00:56:43.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:43.217]    __FlashAddr=0x00000000
[00:56:43.217]    __FlashLen=0x00000000
[00:56:43.217]    __FlashArg=0x00000000
[00:56:43.217]    __FlashOp=0x00000000
[00:56:43.217]    __Result=0x00000000
[00:56:43.217]  </debugvars>
[00:56:43.217]  
[00:56:43.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:43.217]    <block atomic="false" info="">
[00:56:43.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:43.217]        // -> [isSWJ <= 0x00000001]
[00:56:43.217]      __var hasDormant = __protocol & 0x00020000;
[00:56:43.217]        // -> [hasDormant <= 0x00000000]
[00:56:43.217]      __var protType   = __protocol & 0x0000FFFF;
[00:56:43.217]        // -> [protType <= 0x00000002]
[00:56:43.219]    </block>
[00:56:43.219]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:43.219]      // if-block "protType == 1"
[00:56:43.219]        // =>  FALSE
[00:56:43.219]      // skip if-block "protType == 1"
[00:56:43.219]    </control>
[00:56:43.219]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:43.219]      // if-block "protType == 2"
[00:56:43.219]        // =>  TRUE
[00:56:43.219]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:43.219]        // if-block "isSWJ"
[00:56:43.219]          // =>  TRUE
[00:56:43.219]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:43.219]          // if-block "hasDormant"
[00:56:43.219]            // =>  FALSE
[00:56:43.219]          // skip if-block "hasDormant"
[00:56:43.219]        </control>
[00:56:43.219]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:43.219]          // if-block "!hasDormant"
[00:56:43.219]            // =>  TRUE
[00:56:43.219]          <block atomic="false" info="">
[00:56:43.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:43.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:43.219]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:43.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:43.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:43.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:43.229]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:43.231]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:43.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:43.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:43.231]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:43.235]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:43.235]          </block>
[00:56:43.235]          // end if-block "!hasDormant"
[00:56:43.235]        </control>
[00:56:43.235]        // end if-block "isSWJ"
[00:56:43.235]      </control>
[00:56:43.235]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:43.235]        // if-block "!isSWJ"
[00:56:43.235]          // =>  FALSE
[00:56:43.235]        // skip if-block "!isSWJ"
[00:56:43.237]      </control>
[00:56:43.237]      <block atomic="false" info="">
[00:56:43.237]        ReadDP(0x0);
[00:56:43.237]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:43.237]      </block>
[00:56:43.237]      // end if-block "protType == 2"
[00:56:43.237]    </control>
[00:56:43.237]  </sequence>
[00:56:43.237]  
[00:56:43.242]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:43.242]  
[00:56:43.242]  <debugvars>
[00:56:43.242]    // Pre-defined
[00:56:43.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:43.242]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:43.242]    __dp=0x00000000
[00:56:43.242]    __ap=0x00000000
[00:56:43.242]    __traceout=0x00000000      (Trace Disabled)
[00:56:43.243]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:43.243]    __FlashAddr=0x00000000
[00:56:43.243]    __FlashLen=0x00000000
[00:56:43.243]    __FlashArg=0x00000000
[00:56:43.243]    __FlashOp=0x00000000
[00:56:43.243]    __Result=0x00000000
[00:56:43.243]  </debugvars>
[00:56:43.243]  
[00:56:43.243]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:43.243]    <block atomic="false" info="">
[00:56:43.244]      __var SW_DP_ABORT       = 0x0;
[00:56:43.244]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:43.244]      __var DP_CTRL_STAT      = 0x4;
[00:56:43.244]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:43.244]      __var DP_SELECT         = 0x8;
[00:56:43.244]        // -> [DP_SELECT <= 0x00000008]
[00:56:43.244]      __var powered_down      = 0;
[00:56:43.245]        // -> [powered_down <= 0x00000000]
[00:56:43.245]      WriteDP(DP_SELECT, 0x00000000);
[00:56:43.247]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:43.247]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:43.248]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:43.248]        // -> [powered_down <= 0x00000001]
[00:56:43.248]    </block>
[00:56:43.248]    <control if="powered_down" while="" timeout="0" info="">
[00:56:43.249]      // if-block "powered_down"
[00:56:43.249]        // =>  TRUE
[00:56:43.249]      <block atomic="false" info="">
[00:56:43.249]        Message(0, "Debug/System power-up request sent");
[00:56:43.250]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:43.252]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:43.252]      </block>
[00:56:43.252]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:43.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:43.255]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:43.255]        // while-condition  =>  FALSE
[00:56:43.255]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:43.255]      </control>
[00:56:43.255]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:43.255]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:43.255]          // =>  FALSE
[00:56:43.256]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:43.256]      </control>
[00:56:43.256]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:43.256]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:43.256]          // =>  TRUE
[00:56:43.256]        <block atomic="false" info="">
[00:56:43.256]          Message(0, "executing SWD power up");
[00:56:43.257]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:43.260]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:43.260]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:43.264]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:43.264]        </block>
[00:56:43.264]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:43.264]      </control>
[00:56:43.264]      // end if-block "powered_down"
[00:56:43.264]    </control>
[00:56:43.264]    <block atomic="false" info="">
[00:56:43.264]      __var DEBUG_PORT_VAL    = 0;
[00:56:43.264]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:43.264]      __var ACCESS_POINT_VAL  = 0;
[00:56:43.267]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:43.267]      __ap = 1; 
[00:56:43.267]        // -> [__ap <= 0x00000001]
[00:56:43.267]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:43.282]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:43.282]      __ap = 4;
[00:56:43.282]        // -> [__ap <= 0x00000004]
[00:56:43.282]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:43.293]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:43.297]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:43.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:43.297]    </block>
[00:56:43.297]    <block atomic="false" info="">
[00:56:43.297]      __var nReset = 0x80;
[00:56:43.297]        // -> [nReset <= 0x00000080]
[00:56:43.297]      __var canReadPins = 0;
[00:56:43.297]        // -> [canReadPins <= 0x00000000]
[00:56:43.297]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:43.305]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:43.305]        // -> [canReadPins <= 0x00000001]
[00:56:43.305]    </block>
[00:56:43.306]    <control if="" while="1" timeout="200" info="">
[00:56:43.306]      // while "1"  (timeout="200")
[00:56:43.306]      // while-condition  =>  TRUE
[00:56:43.306]      // while "1"  (timeout="200")
[00:56:43.306]      // while-condition  =>  TRUE
[00:56:43.306]      // while "1"  (timeout="200")
[00:56:43.306]      // while-condition  =>  TRUE
[00:56:43.306]      // while "1"  (timeout="200")
[00:56:43.306]      // while-condition  =>  TRUE
[00:56:43.307]      // while "1"  (timeout="200")
[00:56:43.307]      // while-condition  =>  TRUE
[00:56:43.307]      // while "1"  (timeout="200")
[00:56:43.307]      // while-condition  =>  TRUE
[00:56:43.307]      // while "1"  (timeout="200")
[00:56:43.307]      // while-condition  =>  TRUE
[00:56:43.307]      // while "1"  (timeout="200")
[00:56:43.307]      // while-condition  =>  TRUE
[00:56:43.308]      // while "1"  (timeout="200")
[00:56:43.308]      // while-condition  =>  TRUE
[00:56:43.308]      // while "1"  (timeout="200")
[00:56:43.308]      // while-condition  =>  TRUE
[00:56:43.308]      // while "1"  (timeout="200")
[00:56:43.308]      // while-condition  =>  TRUE
[00:56:43.308]      // while "1"  (timeout="200")
[00:56:43.308]      // while-condition  =>  TRUE
[00:56:43.308]      // while "1"  (timeout="200")
[00:56:43.308]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.309]      // while-condition  =>  TRUE
[00:56:43.309]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.311]      // while-condition  =>  TRUE
[00:56:43.311]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.314]      // while "1"  (timeout="200")
[00:56:43.314]      // while-condition  =>  TRUE
[00:56:43.317]      // while "1"  (timeout="200")
[00:56:43.317]      // while  =>  TIMEOUT
[00:56:43.317]      // end while "1"
[00:56:43.317]    </control>
[00:56:43.317]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:43.317]      // if-block "canReadPins"
[00:56:43.317]        // =>  TRUE
[00:56:43.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:43.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:43.327]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:43.327]        // while-condition  =>  FALSE
[00:56:43.327]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:43.327]      </control>
[00:56:43.327]      // end if-block "canReadPins"
[00:56:43.327]    </control>
[00:56:43.327]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:43.329]      // if-block "!canReadPins"
[00:56:43.329]        // =>  FALSE
[00:56:43.329]      // skip if-block "!canReadPins"
[00:56:43.329]    </control>
[00:56:43.329]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:43.329]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:43.329]        // =>  TRUE
[00:56:43.329]      <block atomic="false" info="">
[00:56:43.329]        WriteAP(0x00, 0x190008);
[00:56:43.333]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:43.333]        WriteAP(0xF0, 0x01);
[00:56:43.342]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:43.342]      </block>
[00:56:43.342]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:43.342]    </control>
[00:56:43.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:43.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:43.342]        // =>  FALSE
[00:56:43.342]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:43.342]    </control>
[00:56:43.342]    <block atomic="false" info="">
[00:56:43.342]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:43.349]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:43.349]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:43.349]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:43.349]      __ap = 0; //lets make sure we reset the access point selection
[00:56:43.349]        // -> [__ap <= 0x00000000]
[00:56:43.349]    </block>
[00:56:43.349]  </sequence>
[00:56:43.349]  
[00:56:43.377]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:43.377]  
[00:56:43.377]  <debugvars>
[00:56:43.377]    // Pre-defined
[00:56:43.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:43.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:43.381]    __dp=0x00000000
[00:56:43.381]    __ap=0x00000000
[00:56:43.381]    __traceout=0x00000000      (Trace Disabled)
[00:56:43.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:43.381]    __FlashAddr=0x00000000
[00:56:43.381]    __FlashLen=0x00000000
[00:56:43.381]    __FlashArg=0x00000000
[00:56:43.381]    __FlashOp=0x00000000
[00:56:43.381]    __Result=0x00000000
[00:56:43.381]  </debugvars>
[00:56:43.381]  
[00:56:43.381]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:43.381]    <block atomic="false" info="">
[00:56:43.381]      __var deviceID = 0;
[00:56:43.381]        // -> [deviceID <= 0x00000000]
[00:56:43.381]      __var version = 0;
[00:56:43.381]        // -> [version <= 0x00000000]
[00:56:43.381]      __var partNum = 0;
[00:56:43.381]        // -> [partNum <= 0x00000000]
[00:56:43.381]      __var manuf = 0;
[00:56:43.381]        // -> [manuf <= 0x00000000]
[00:56:43.381]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:43.381]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:43.381]      __var isProduction = 0;
[00:56:43.381]        // -> [isProduction <= 0x00000000]
[00:56:43.381]      __var continueId = 0;
[00:56:43.381]        // -> [continueId <= 0x00000000]
[00:56:43.381]      deviceID =   Read32(0x41C40004);
[00:56:43.389]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:43.389]        // -> [deviceID <= 0x2BB8802F]
[00:56:43.389]      version = deviceID >> 28;
[00:56:43.389]        // -> [version <= 0x00000002]
[00:56:43.389]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:43.389]        // -> [partNum <= 0x0000BB88]
[00:56:43.389]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:43.389]        // -> [manuf <= 0x00000017]
[00:56:43.389]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:43.389]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:43.389]      isProduction = (version > 0);
[00:56:43.389]        // -> [isProduction <= 0x00000001]
[00:56:43.389]    </block>
[00:56:43.389]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:43.389]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:43.389]        // =>  FALSE
[00:56:43.389]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:43.389]    </control>
[00:56:43.389]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:43.389]      // if-block "continueId == 4"
[00:56:43.389]        // =>  FALSE
[00:56:43.393]      // skip if-block "continueId == 4"
[00:56:43.393]    </control>
[00:56:43.393]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:43.393]      // if-block "!isProduction"
[00:56:43.393]        // =>  FALSE
[00:56:43.393]      // skip if-block "!isProduction"
[00:56:43.393]    </control>
[00:56:43.393]  </sequence>
[00:56:43.393]  
[00:57:24.032]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:57:24.032]  
[00:57:24.041]  <debugvars>
[00:57:24.041]    // Pre-defined
[00:57:24.041]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:24.041]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:24.041]    __dp=0x00000000
[00:57:24.041]    __ap=0x00000000
[00:57:24.041]    __traceout=0x00000000      (Trace Disabled)
[00:57:24.041]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:24.041]    __FlashAddr=0x00000000
[00:57:24.041]    __FlashLen=0x00000000
[00:57:24.041]    __FlashArg=0x00000000
[00:57:24.041]    __FlashOp=0x00000000
[00:57:24.041]    __Result=0x00000000
[00:57:24.041]  </debugvars>
[00:57:24.041]  
[00:57:24.041]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:57:24.041]    <block atomic="false" info="">
[00:57:24.041]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:57:24.041]        // -> [isSWJ <= 0x00000001]
[00:57:24.042]      __var hasDormant = __protocol & 0x00020000;
[00:57:24.042]        // -> [hasDormant <= 0x00000000]
[00:57:24.042]      __var protType   = __protocol & 0x0000FFFF;
[00:57:24.042]        // -> [protType <= 0x00000002]
[00:57:24.042]    </block>
[00:57:24.042]    <control if="protType == 1" while="" timeout="0" info="">
[00:57:24.042]      // if-block "protType == 1"
[00:57:24.042]        // =>  FALSE
[00:57:24.042]      // skip if-block "protType == 1"
[00:57:24.044]    </control>
[00:57:24.044]    <control if="protType == 2" while="" timeout="0" info="">
[00:57:24.044]      // if-block "protType == 2"
[00:57:24.044]        // =>  TRUE
[00:57:24.044]      <control if="isSWJ" while="" timeout="0" info="">
[00:57:24.044]        // if-block "isSWJ"
[00:57:24.044]          // =>  TRUE
[00:57:24.044]        <control if="hasDormant" while="" timeout="0" info="">
[00:57:24.044]          // if-block "hasDormant"
[00:57:24.044]            // =>  FALSE
[00:57:24.044]          // skip if-block "hasDormant"
[00:57:24.045]        </control>
[00:57:24.045]        <control if="!hasDormant" while="" timeout="0" info="">
[00:57:24.045]          // if-block "!hasDormant"
[00:57:24.045]            // =>  TRUE
[00:57:24.045]          <block atomic="false" info="">
[00:57:24.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:57:24.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:24.049]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:57:24.051]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:57:24.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:57:24.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:24.053]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:57:24.055]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:57:24.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:57:24.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:24.058]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:57:24.061]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:57:24.061]          </block>
[00:57:24.061]          // end if-block "!hasDormant"
[00:57:24.061]        </control>
[00:57:24.061]        // end if-block "isSWJ"
[00:57:24.061]      </control>
[00:57:24.061]      <control if="!isSWJ" while="" timeout="0" info="">
[00:57:24.061]        // if-block "!isSWJ"
[00:57:24.061]          // =>  FALSE
[00:57:24.061]        // skip if-block "!isSWJ"
[00:57:24.061]      </control>
[00:57:24.061]      <block atomic="false" info="">
[00:57:24.065]        ReadDP(0x0);
[00:57:24.066]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:57:24.066]      </block>
[00:57:24.066]      // end if-block "protType == 2"
[00:57:24.066]    </control>
[00:57:24.066]  </sequence>
[00:57:24.066]  
[00:57:24.071]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:57:24.071]  
[00:57:24.071]  <debugvars>
[00:57:24.071]    // Pre-defined
[00:57:24.071]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:24.071]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:24.071]    __dp=0x00000000
[00:57:24.071]    __ap=0x00000000
[00:57:24.071]    __traceout=0x00000000      (Trace Disabled)
[00:57:24.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:24.071]    __FlashAddr=0x00000000
[00:57:24.071]    __FlashLen=0x00000000
[00:57:24.071]    __FlashArg=0x00000000
[00:57:24.071]    __FlashOp=0x00000000
[00:57:24.071]    __Result=0x00000000
[00:57:24.073]  </debugvars>
[00:57:24.073]  
[00:57:24.073]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:57:24.073]    <block atomic="false" info="">
[00:57:24.073]      __var SW_DP_ABORT       = 0x0;
[00:57:24.073]        // -> [SW_DP_ABORT <= 0x00000000]
[00:57:24.073]      __var DP_CTRL_STAT      = 0x4;
[00:57:24.073]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:57:24.073]      __var DP_SELECT         = 0x8;
[00:57:24.074]        // -> [DP_SELECT <= 0x00000008]
[00:57:24.074]      __var powered_down      = 0;
[00:57:24.074]        // -> [powered_down <= 0x00000000]
[00:57:24.074]      WriteDP(DP_SELECT, 0x00000000);
[00:57:24.082]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:57:24.082]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:57:24.090]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:57:24.090]        // -> [powered_down <= 0x00000001]
[00:57:24.090]    </block>
[00:57:24.090]    <control if="powered_down" while="" timeout="0" info="">
[00:57:24.090]      // if-block "powered_down"
[00:57:24.090]        // =>  TRUE
[00:57:24.090]      <block atomic="false" info="">
[00:57:24.090]        Message(0, "Debug/System power-up request sent");
[00:57:24.091]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:57:24.098]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:57:24.098]      </block>
[00:57:24.099]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:57:24.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:57:24.100]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:57:24.100]        // while-condition  =>  FALSE
[00:57:24.100]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:57:24.100]      </control>
[00:57:24.100]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:57:24.100]        // if-block "(__protocol & 0xFFFF) == 1"
[00:57:24.100]          // =>  FALSE
[00:57:24.100]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:57:24.100]      </control>
[00:57:24.100]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:57:24.100]        // if-block "(__protocol & 0xFFFF) == 2"
[00:57:24.100]          // =>  TRUE
[00:57:24.100]        <block atomic="false" info="">
[00:57:24.102]          Message(0, "executing SWD power up");
[00:57:24.103]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:57:24.106]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:57:24.106]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:57:24.108]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:57:24.108]        </block>
[00:57:24.108]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:57:24.108]      </control>
[00:57:24.110]      // end if-block "powered_down"
[00:57:24.110]    </control>
[00:57:24.110]    <block atomic="false" info="">
[00:57:24.110]      __var DEBUG_PORT_VAL    = 0;
[00:57:24.110]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:57:24.110]      __var ACCESS_POINT_VAL  = 0;
[00:57:24.110]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:57:24.110]      __ap = 1; 
[00:57:24.110]        // -> [__ap <= 0x00000001]
[00:57:24.110]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:57:24.120]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:57:24.120]      __ap = 4;
[00:57:24.120]        // -> [__ap <= 0x00000004]
[00:57:24.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:24.124]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:57:24.124]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:57:24.124]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:24.126]    </block>
[00:57:24.126]    <block atomic="false" info="">
[00:57:24.126]      __var nReset = 0x80;
[00:57:24.126]        // -> [nReset <= 0x00000080]
[00:57:24.126]      __var canReadPins = 0;
[00:57:24.126]        // -> [canReadPins <= 0x00000000]
[00:57:24.126]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:57:24.130]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:57:24.130]        // -> [canReadPins <= 0x00000001]
[00:57:24.130]    </block>
[00:57:24.130]    <control if="" while="1" timeout="200" info="">
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.130]      // while "1"  (timeout="200")
[00:57:24.130]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.134]      // while-condition  =>  TRUE
[00:57:24.134]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.138]      // while-condition  =>  TRUE
[00:57:24.138]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.142]      // while "1"  (timeout="200")
[00:57:24.142]      // while-condition  =>  TRUE
[00:57:24.146]      // while "1"  (timeout="200")
[00:57:24.146]      // while  =>  TIMEOUT
[00:57:24.146]      // end while "1"
[00:57:24.146]    </control>
[00:57:24.146]    <control if="canReadPins" while="" timeout="0" info="">
[00:57:24.146]      // if-block "canReadPins"
[00:57:24.146]        // =>  TRUE
[00:57:24.146]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:57:24.146]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:57:24.150]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:57:24.150]        // while-condition  =>  FALSE
[00:57:24.150]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:57:24.150]      </control>
[00:57:24.150]      // end if-block "canReadPins"
[00:57:24.150]    </control>
[00:57:24.150]    <control if="!canReadPins" while="" timeout="0" info="">
[00:57:24.150]      // if-block "!canReadPins"
[00:57:24.150]        // =>  FALSE
[00:57:24.150]      // skip if-block "!canReadPins"
[00:57:24.150]    </control>
[00:57:24.150]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:57:24.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:24.150]        // =>  TRUE
[00:57:24.150]      <block atomic="false" info="">
[00:57:24.150]        WriteAP(0x00, 0x190008);
[00:57:24.160]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:24.160]        WriteAP(0xF0, 0x01);
[00:57:24.162]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:24.162]      </block>
[00:57:24.162]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:24.166]    </control>
[00:57:24.166]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:57:24.166]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:24.166]        // =>  FALSE
[00:57:24.166]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:24.166]    </control>
[00:57:24.166]    <block atomic="false" info="">
[00:57:24.166]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:24.178]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:57:24.178]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:57:24.178]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:24.180]      __ap = 0; //lets make sure we reset the access point selection
[00:57:24.180]        // -> [__ap <= 0x00000000]
[00:57:24.180]    </block>
[00:57:24.180]  </sequence>
[00:57:24.180]  
[00:57:24.220]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:57:24.220]  
[00:57:24.220]  <debugvars>
[00:57:24.220]    // Pre-defined
[00:57:24.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:24.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:24.220]    __dp=0x00000000
[00:57:24.220]    __ap=0x00000000
[00:57:24.220]    __traceout=0x00000000      (Trace Disabled)
[00:57:24.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:24.220]    __FlashAddr=0x00000000
[00:57:24.220]    __FlashLen=0x00000000
[00:57:24.220]    __FlashArg=0x00000000
[00:57:24.222]    __FlashOp=0x00000000
[00:57:24.222]    __Result=0x00000000
[00:57:24.222]  </debugvars>
[00:57:24.222]  
[00:57:24.222]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:57:24.222]    <block atomic="false" info="">
[00:57:24.222]      __var deviceID = 0;
[00:57:24.222]        // -> [deviceID <= 0x00000000]
[00:57:24.222]      __var version = 0;
[00:57:24.222]        // -> [version <= 0x00000000]
[00:57:24.222]      __var partNum = 0;
[00:57:24.222]        // -> [partNum <= 0x00000000]
[00:57:24.222]      __var manuf = 0;
[00:57:24.222]        // -> [manuf <= 0x00000000]
[00:57:24.222]      __var isMSPM0G1X0X_G3X0X = 0;
[00:57:24.224]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:57:24.224]      __var isProduction = 0;
[00:57:24.224]        // -> [isProduction <= 0x00000000]
[00:57:24.224]      __var continueId = 0;
[00:57:24.224]        // -> [continueId <= 0x00000000]
[00:57:24.224]      deviceID =   Read32(0x41C40004);
[00:57:24.228]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:57:24.228]        // -> [deviceID <= 0x2BB8802F]
[00:57:24.228]      version = deviceID >> 28;
[00:57:24.228]        // -> [version <= 0x00000002]
[00:57:24.228]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:57:24.228]        // -> [partNum <= 0x0000BB88]
[00:57:24.228]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:57:24.228]        // -> [manuf <= 0x00000017]
[00:57:24.228]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:57:24.228]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:57:24.228]      isProduction = (version > 0);
[00:57:24.228]        // -> [isProduction <= 0x00000001]
[00:57:24.231]    </block>
[00:57:24.231]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:57:24.231]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:57:24.231]        // =>  FALSE
[00:57:24.231]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:57:24.231]    </control>
[00:57:24.231]    <control if="continueId == 4" while="" timeout="0" info="">
[00:57:24.231]      // if-block "continueId == 4"
[00:57:24.231]        // =>  FALSE
[00:57:24.231]      // skip if-block "continueId == 4"
[00:57:24.231]    </control>
[00:57:24.231]    <control if="!isProduction" while="" timeout="0" info="">
[00:57:24.231]      // if-block "!isProduction"
[00:57:24.231]        // =>  FALSE
[00:57:24.231]      // skip if-block "!isProduction"
[00:57:24.231]    </control>
[00:57:24.231]  </sequence>
[00:57:24.231]  
[00:57:47.581]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:57:47.581]  
[00:57:47.590]  <debugvars>
[00:57:47.590]    // Pre-defined
[00:57:47.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:47.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:47.590]    __dp=0x00000000
[00:57:47.590]    __ap=0x00000000
[00:57:47.590]    __traceout=0x00000000      (Trace Disabled)
[00:57:47.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:47.590]    __FlashAddr=0x00000000
[00:57:47.590]    __FlashLen=0x00000000
[00:57:47.590]    __FlashArg=0x00000000
[00:57:47.590]    __FlashOp=0x00000000
[00:57:47.590]    __Result=0x00000000
[00:57:47.590]  </debugvars>
[00:57:47.590]  
[00:57:47.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:57:47.590]    <block atomic="false" info="">
[00:57:47.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:57:47.590]        // -> [isSWJ <= 0x00000001]
[00:57:47.590]      __var hasDormant = __protocol & 0x00020000;
[00:57:47.590]        // -> [hasDormant <= 0x00000000]
[00:57:47.590]      __var protType   = __protocol & 0x0000FFFF;
[00:57:47.590]        // -> [protType <= 0x00000002]
[00:57:47.590]    </block>
[00:57:47.590]    <control if="protType == 1" while="" timeout="0" info="">
[00:57:47.590]      // if-block "protType == 1"
[00:57:47.593]        // =>  FALSE
[00:57:47.593]      // skip if-block "protType == 1"
[00:57:47.593]    </control>
[00:57:47.593]    <control if="protType == 2" while="" timeout="0" info="">
[00:57:47.593]      // if-block "protType == 2"
[00:57:47.593]        // =>  TRUE
[00:57:47.593]      <control if="isSWJ" while="" timeout="0" info="">
[00:57:47.593]        // if-block "isSWJ"
[00:57:47.593]          // =>  TRUE
[00:57:47.593]        <control if="hasDormant" while="" timeout="0" info="">
[00:57:47.593]          // if-block "hasDormant"
[00:57:47.593]            // =>  FALSE
[00:57:47.593]          // skip if-block "hasDormant"
[00:57:47.593]        </control>
[00:57:47.593]        <control if="!hasDormant" while="" timeout="0" info="">
[00:57:47.593]          // if-block "!hasDormant"
[00:57:47.593]            // =>  TRUE
[00:57:47.593]          <block atomic="false" info="">
[00:57:47.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:57:47.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:47.598]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:57:47.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:57:47.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:57:47.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:47.606]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:57:47.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:57:47.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:57:47.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:47.616]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:57:47.618]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:57:47.618]          </block>
[00:57:47.618]          // end if-block "!hasDormant"
[00:57:47.621]        </control>
[00:57:47.621]        // end if-block "isSWJ"
[00:57:47.621]      </control>
[00:57:47.621]      <control if="!isSWJ" while="" timeout="0" info="">
[00:57:47.621]        // if-block "!isSWJ"
[00:57:47.621]          // =>  FALSE
[00:57:47.621]        // skip if-block "!isSWJ"
[00:57:47.621]      </control>
[00:57:47.621]      <block atomic="false" info="">
[00:57:47.621]        ReadDP(0x0);
[00:57:47.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:57:47.629]      </block>
[00:57:47.629]      // end if-block "protType == 2"
[00:57:47.629]    </control>
[00:57:47.629]  </sequence>
[00:57:47.630]  
[00:57:47.633]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:57:47.633]  
[00:57:47.634]  <debugvars>
[00:57:47.634]    // Pre-defined
[00:57:47.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:47.634]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:47.634]    __dp=0x00000000
[00:57:47.634]    __ap=0x00000000
[00:57:47.634]    __traceout=0x00000000      (Trace Disabled)
[00:57:47.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:47.634]    __FlashAddr=0x00000000
[00:57:47.634]    __FlashLen=0x00000000
[00:57:47.634]    __FlashArg=0x00000000
[00:57:47.634]    __FlashOp=0x00000000
[00:57:47.634]    __Result=0x00000000
[00:57:47.634]  </debugvars>
[00:57:47.634]  
[00:57:47.634]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:57:47.634]    <block atomic="false" info="">
[00:57:47.634]      __var SW_DP_ABORT       = 0x0;
[00:57:47.634]        // -> [SW_DP_ABORT <= 0x00000000]
[00:57:47.634]      __var DP_CTRL_STAT      = 0x4;
[00:57:47.634]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:57:47.634]      __var DP_SELECT         = 0x8;
[00:57:47.634]        // -> [DP_SELECT <= 0x00000008]
[00:57:47.634]      __var powered_down      = 0;
[00:57:47.634]        // -> [powered_down <= 0x00000000]
[00:57:47.634]      WriteDP(DP_SELECT, 0x00000000);
[00:57:47.640]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:57:47.640]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:57:47.642]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:57:47.642]        // -> [powered_down <= 0x00000001]
[00:57:47.642]    </block>
[00:57:47.642]    <control if="powered_down" while="" timeout="0" info="">
[00:57:47.642]      // if-block "powered_down"
[00:57:47.642]        // =>  TRUE
[00:57:47.642]      <block atomic="false" info="">
[00:57:47.642]        Message(0, "Debug/System power-up request sent");
[00:57:47.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:57:47.652]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:57:47.652]      </block>
[00:57:47.652]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:57:47.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:57:47.652]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:57:47.652]        // while-condition  =>  FALSE
[00:57:47.652]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:57:47.652]      </control>
[00:57:47.652]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:57:47.652]        // if-block "(__protocol & 0xFFFF) == 1"
[00:57:47.652]          // =>  FALSE
[00:57:47.652]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:57:47.655]      </control>
[00:57:47.655]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:57:47.655]        // if-block "(__protocol & 0xFFFF) == 2"
[00:57:47.655]          // =>  TRUE
[00:57:47.655]        <block atomic="false" info="">
[00:57:47.655]          Message(0, "executing SWD power up");
[00:57:47.655]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:57:47.662]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:57:47.662]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:57:47.663]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:57:47.664]        </block>
[00:57:47.664]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:57:47.664]      </control>
[00:57:47.664]      // end if-block "powered_down"
[00:57:47.664]    </control>
[00:57:47.664]    <block atomic="false" info="">
[00:57:47.664]      __var DEBUG_PORT_VAL    = 0;
[00:57:47.664]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:57:47.664]      __var ACCESS_POINT_VAL  = 0;
[00:57:47.664]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:57:47.664]      __ap = 1; 
[00:57:47.664]        // -> [__ap <= 0x00000001]
[00:57:47.664]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:57:47.670]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:57:47.670]      __ap = 4;
[00:57:47.670]        // -> [__ap <= 0x00000004]
[00:57:47.670]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:47.674]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:57:47.674]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:57:47.674]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:47.678]    </block>
[00:57:47.678]    <block atomic="false" info="">
[00:57:47.678]      __var nReset = 0x80;
[00:57:47.679]        // -> [nReset <= 0x00000080]
[00:57:47.679]      __var canReadPins = 0;
[00:57:47.679]        // -> [canReadPins <= 0x00000000]
[00:57:47.679]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:57:47.679]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:57:47.679]        // -> [canReadPins <= 0x00000001]
[00:57:47.679]    </block>
[00:57:47.679]    <control if="" while="1" timeout="200" info="">
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.682]      // while "1"  (timeout="200")
[00:57:47.682]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.686]      // while "1"  (timeout="200")
[00:57:47.686]      // while-condition  =>  TRUE
[00:57:47.688]      // while "1"  (timeout="200")
[00:57:47.688]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.689]      // while-condition  =>  TRUE
[00:57:47.689]      // while "1"  (timeout="200")
[00:57:47.691]      // while-condition  =>  TRUE
[00:57:47.691]      // while "1"  (timeout="200")
[00:57:47.691]      // while-condition  =>  TRUE
[00:57:47.691]      // while "1"  (timeout="200")
[00:57:47.691]      // while-condition  =>  TRUE
[00:57:47.691]      // while "1"  (timeout="200")
[00:57:47.691]      // while-condition  =>  TRUE
[00:57:47.691]      // while "1"  (timeout="200")
[00:57:47.691]      // while-condition  =>  TRUE
[00:57:47.691]      // while "1"  (timeout="200")
[00:57:47.692]      // while-condition  =>  TRUE
[00:57:47.692]      // while "1"  (timeout="200")
[00:57:47.692]      // while  =>  TIMEOUT
[00:57:47.692]      // end while "1"
[00:57:47.692]    </control>
[00:57:47.692]    <control if="canReadPins" while="" timeout="0" info="">
[00:57:47.692]      // if-block "canReadPins"
[00:57:47.692]        // =>  TRUE
[00:57:47.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:57:47.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:57:47.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:57:47.695]        // while-condition  =>  FALSE
[00:57:47.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:57:47.695]      </control>
[00:57:47.695]      // end if-block "canReadPins"
[00:57:47.695]    </control>
[00:57:47.695]    <control if="!canReadPins" while="" timeout="0" info="">
[00:57:47.695]      // if-block "!canReadPins"
[00:57:47.695]        // =>  FALSE
[00:57:47.695]      // skip if-block "!canReadPins"
[00:57:47.695]    </control>
[00:57:47.695]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:57:47.695]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:47.695]        // =>  TRUE
[00:57:47.695]      <block atomic="false" info="">
[00:57:47.695]        WriteAP(0x00, 0x190008);
[00:57:47.698]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:47.698]        WriteAP(0xF0, 0x01);
[00:57:47.700]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:47.700]      </block>
[00:57:47.700]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:47.700]    </control>
[00:57:47.702]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:57:47.702]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:47.702]        // =>  FALSE
[00:57:47.702]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:47.702]    </control>
[00:57:47.702]    <block atomic="false" info="">
[00:57:47.702]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:47.712]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:57:47.712]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:57:47.712]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:47.713]      __ap = 0; //lets make sure we reset the access point selection
[00:57:47.713]        // -> [__ap <= 0x00000000]
[00:57:47.713]    </block>
[00:57:47.713]  </sequence>
[00:57:47.715]  
[00:57:47.738]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:57:47.738]  
[00:57:47.738]  <debugvars>
[00:57:47.738]    // Pre-defined
[00:57:47.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:47.738]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:47.738]    __dp=0x00000000
[00:57:47.738]    __ap=0x00000000
[00:57:47.738]    __traceout=0x00000000      (Trace Disabled)
[00:57:47.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:47.738]    __FlashAddr=0x00000000
[00:57:47.738]    __FlashLen=0x00000000
[00:57:47.738]    __FlashArg=0x00000000
[00:57:47.738]    __FlashOp=0x00000000
[00:57:47.738]    __Result=0x00000000
[00:57:47.738]  </debugvars>
[00:57:47.738]  
[00:57:47.738]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:57:47.738]    <block atomic="false" info="">
[00:57:47.738]      __var deviceID = 0;
[00:57:47.738]        // -> [deviceID <= 0x00000000]
[00:57:47.738]      __var version = 0;
[00:57:47.738]        // -> [version <= 0x00000000]
[00:57:47.742]      __var partNum = 0;
[00:57:47.742]        // -> [partNum <= 0x00000000]
[00:57:47.742]      __var manuf = 0;
[00:57:47.742]        // -> [manuf <= 0x00000000]
[00:57:47.742]      __var isMSPM0G1X0X_G3X0X = 0;
[00:57:47.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:57:47.742]      __var isProduction = 0;
[00:57:47.742]        // -> [isProduction <= 0x00000000]
[00:57:47.742]      __var continueId = 0;
[00:57:47.742]        // -> [continueId <= 0x00000000]
[00:57:47.742]      deviceID =   Read32(0x41C40004);
[00:57:47.763]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:57:47.763]        // -> [deviceID <= 0x2BB8802F]
[00:57:47.763]      version = deviceID >> 28;
[00:57:47.763]        // -> [version <= 0x00000002]
[00:57:47.767]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:57:47.767]        // -> [partNum <= 0x0000BB88]
[00:57:47.767]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:57:47.767]        // -> [manuf <= 0x00000017]
[00:57:47.767]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:57:47.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:57:47.767]      isProduction = (version > 0);
[00:57:47.767]        // -> [isProduction <= 0x00000001]
[00:57:47.767]    </block>
[00:57:47.767]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:57:47.768]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:57:47.768]        // =>  FALSE
[00:57:47.768]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:57:47.768]    </control>
[00:57:47.768]    <control if="continueId == 4" while="" timeout="0" info="">
[00:57:47.768]      // if-block "continueId == 4"
[00:57:47.768]        // =>  FALSE
[00:57:47.768]      // skip if-block "continueId == 4"
[00:57:47.768]    </control>
[00:57:47.768]    <control if="!isProduction" while="" timeout="0" info="">
[00:57:47.768]      // if-block "!isProduction"
[00:57:47.768]        // =>  FALSE
[00:57:47.768]      // skip if-block "!isProduction"
[00:57:47.768]    </control>
[00:57:47.768]  </sequence>
[00:57:47.768]  
[00:59:29.002]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:59:29.002]  
[00:59:29.012]  <debugvars>
[00:59:29.012]    // Pre-defined
[00:59:29.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:29.012]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:29.012]    __dp=0x00000000
[00:59:29.012]    __ap=0x00000000
[00:59:29.012]    __traceout=0x00000000      (Trace Disabled)
[00:59:29.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:29.012]    __FlashAddr=0x00000000
[00:59:29.012]    __FlashLen=0x00000000
[00:59:29.012]    __FlashArg=0x00000000
[00:59:29.012]    __FlashOp=0x00000000
[00:59:29.012]    __Result=0x00000000
[00:59:29.012]  </debugvars>
[00:59:29.012]  
[00:59:29.012]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:59:29.012]    <block atomic="false" info="">
[00:59:29.012]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:59:29.014]        // -> [isSWJ <= 0x00000001]
[00:59:29.014]      __var hasDormant = __protocol & 0x00020000;
[00:59:29.014]        // -> [hasDormant <= 0x00000000]
[00:59:29.014]      __var protType   = __protocol & 0x0000FFFF;
[00:59:29.014]        // -> [protType <= 0x00000002]
[00:59:29.014]    </block>
[00:59:29.014]    <control if="protType == 1" while="" timeout="0" info="">
[00:59:29.014]      // if-block "protType == 1"
[00:59:29.014]        // =>  FALSE
[00:59:29.014]      // skip if-block "protType == 1"
[00:59:29.014]    </control>
[00:59:29.014]    <control if="protType == 2" while="" timeout="0" info="">
[00:59:29.016]      // if-block "protType == 2"
[00:59:29.016]        // =>  TRUE
[00:59:29.016]      <control if="isSWJ" while="" timeout="0" info="">
[00:59:29.016]        // if-block "isSWJ"
[00:59:29.016]          // =>  TRUE
[00:59:29.016]        <control if="hasDormant" while="" timeout="0" info="">
[00:59:29.016]          // if-block "hasDormant"
[00:59:29.016]            // =>  FALSE
[00:59:29.016]          // skip if-block "hasDormant"
[00:59:29.016]        </control>
[00:59:29.016]        <control if="!hasDormant" while="" timeout="0" info="">
[00:59:29.016]          // if-block "!hasDormant"
[00:59:29.016]            // =>  TRUE
[00:59:29.016]          <block atomic="false" info="">
[00:59:29.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:59:29.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:29.021]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:59:29.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:59:29.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:59:29.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:29.034]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:59:29.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:59:29.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:59:29.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:59:29.040]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:59:29.046]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:59:29.050]          </block>
[00:59:29.050]          // end if-block "!hasDormant"
[00:59:29.050]        </control>
[00:59:29.050]        // end if-block "isSWJ"
[00:59:29.050]      </control>
[00:59:29.050]      <control if="!isSWJ" while="" timeout="0" info="">
[00:59:29.050]        // if-block "!isSWJ"
[00:59:29.050]          // =>  FALSE
[00:59:29.050]        // skip if-block "!isSWJ"
[00:59:29.050]      </control>
[00:59:29.050]      <block atomic="false" info="">
[00:59:29.050]        ReadDP(0x0);
[00:59:29.050]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:59:29.050]      </block>
[00:59:29.050]      // end if-block "protType == 2"
[00:59:29.050]    </control>
[00:59:29.050]  </sequence>
[00:59:29.050]  
[00:59:29.054]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:59:29.054]  
[00:59:29.054]  <debugvars>
[00:59:29.054]    // Pre-defined
[00:59:29.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:29.054]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:29.054]    __dp=0x00000000
[00:59:29.054]    __ap=0x00000000
[00:59:29.054]    __traceout=0x00000000      (Trace Disabled)
[00:59:29.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:29.054]    __FlashAddr=0x00000000
[00:59:29.054]    __FlashLen=0x00000000
[00:59:29.054]    __FlashArg=0x00000000
[00:59:29.054]    __FlashOp=0x00000000
[00:59:29.054]    __Result=0x00000000
[00:59:29.054]  </debugvars>
[00:59:29.054]  
[00:59:29.054]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:59:29.054]    <block atomic="false" info="">
[00:59:29.054]      __var SW_DP_ABORT       = 0x0;
[00:59:29.054]        // -> [SW_DP_ABORT <= 0x00000000]
[00:59:29.054]      __var DP_CTRL_STAT      = 0x4;
[00:59:29.054]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:59:29.054]      __var DP_SELECT         = 0x8;
[00:59:29.054]        // -> [DP_SELECT <= 0x00000008]
[00:59:29.054]      __var powered_down      = 0;
[00:59:29.058]        // -> [powered_down <= 0x00000000]
[00:59:29.058]      WriteDP(DP_SELECT, 0x00000000);
[00:59:29.058]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:59:29.060]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:59:29.062]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:59:29.062]        // -> [powered_down <= 0x00000001]
[00:59:29.062]    </block>
[00:59:29.062]    <control if="powered_down" while="" timeout="0" info="">
[00:59:29.062]      // if-block "powered_down"
[00:59:29.062]        // =>  TRUE
[00:59:29.062]      <block atomic="false" info="">
[00:59:29.062]        Message(0, "Debug/System power-up request sent");
[00:59:29.066]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:59:29.071]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:59:29.071]      </block>
[00:59:29.072]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:59:29.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:59:29.073]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:59:29.073]        // while-condition  =>  FALSE
[00:59:29.073]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:59:29.073]      </control>
[00:59:29.073]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:59:29.073]        // if-block "(__protocol & 0xFFFF) == 1"
[00:59:29.073]          // =>  FALSE
[00:59:29.073]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:59:29.073]      </control>
[00:59:29.073]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:59:29.073]        // if-block "(__protocol & 0xFFFF) == 2"
[00:59:29.073]          // =>  TRUE
[00:59:29.073]        <block atomic="false" info="">
[00:59:29.073]          Message(0, "executing SWD power up");
[00:59:29.075]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:59:29.080]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:59:29.081]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:59:29.084]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:59:29.084]        </block>
[00:59:29.084]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:59:29.084]      </control>
[00:59:29.086]      // end if-block "powered_down"
[00:59:29.086]    </control>
[00:59:29.086]    <block atomic="false" info="">
[00:59:29.086]      __var DEBUG_PORT_VAL    = 0;
[00:59:29.086]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:59:29.086]      __var ACCESS_POINT_VAL  = 0;
[00:59:29.086]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:59:29.086]      __ap = 1; 
[00:59:29.086]        // -> [__ap <= 0x00000001]
[00:59:29.086]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:59:29.104]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:59:29.104]      __ap = 4;
[00:59:29.104]        // -> [__ap <= 0x00000004]
[00:59:29.104]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:59:29.108]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:59:29.108]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:59:29.108]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:59:29.110]    </block>
[00:59:29.110]    <block atomic="false" info="">
[00:59:29.110]      __var nReset = 0x80;
[00:59:29.110]        // -> [nReset <= 0x00000080]
[00:59:29.110]      __var canReadPins = 0;
[00:59:29.110]        // -> [canReadPins <= 0x00000000]
[00:59:29.110]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:59:29.118]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:59:29.118]        // -> [canReadPins <= 0x00000001]
[00:59:29.118]    </block>
[00:59:29.118]    <control if="" while="1" timeout="200" info="">
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.118]      // while-condition  =>  TRUE
[00:59:29.118]      // while "1"  (timeout="200")
[00:59:29.120]      // while-condition  =>  TRUE
[00:59:29.120]      // while "1"  (timeout="200")
[00:59:29.120]      // while-condition  =>  TRUE
[00:59:29.120]      // while "1"  (timeout="200")
[00:59:29.120]      // while-condition  =>  TRUE
[00:59:29.120]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.121]      // while-condition  =>  TRUE
[00:59:29.121]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.124]      // while-condition  =>  TRUE
[00:59:29.124]      // while "1"  (timeout="200")
[00:59:29.128]      // while-condition  =>  TRUE
[00:59:29.128]      // while "1"  (timeout="200")
[00:59:29.128]      // while  =>  TIMEOUT
[00:59:29.128]      // end while "1"
[00:59:29.128]    </control>
[00:59:29.128]    <control if="canReadPins" while="" timeout="0" info="">
[00:59:29.128]      // if-block "canReadPins"
[00:59:29.128]        // =>  TRUE
[00:59:29.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:59:29.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:59:29.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:59:29.131]        // while-condition  =>  FALSE
[00:59:29.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:59:29.131]      </control>
[00:59:29.131]      // end if-block "canReadPins"
[00:59:29.131]    </control>
[00:59:29.133]    <control if="!canReadPins" while="" timeout="0" info="">
[00:59:29.133]      // if-block "!canReadPins"
[00:59:29.133]        // =>  FALSE
[00:59:29.133]      // skip if-block "!canReadPins"
[00:59:29.133]    </control>
[00:59:29.133]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:59:29.133]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:59:29.133]        // =>  TRUE
[00:59:29.133]      <block atomic="false" info="">
[00:59:29.133]        WriteAP(0x00, 0x190008);
[00:59:29.137]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:59:29.137]        WriteAP(0xF0, 0x01);
[00:59:29.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:59:29.151]      </block>
[00:59:29.151]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:59:29.151]    </control>
[00:59:29.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:59:29.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:59:29.151]        // =>  FALSE
[00:59:29.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:59:29.151]    </control>
[00:59:29.151]    <block atomic="false" info="">
[00:59:29.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:59:29.162]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:59:29.162]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:59:29.162]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:59:29.163]      __ap = 0; //lets make sure we reset the access point selection
[00:59:29.163]        // -> [__ap <= 0x00000000]
[00:59:29.163]    </block>
[00:59:29.163]  </sequence>
[00:59:29.163]  
[00:59:29.225]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:59:29.225]  
[00:59:29.225]  <debugvars>
[00:59:29.225]    // Pre-defined
[00:59:29.225]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:59:29.225]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:59:29.225]    __dp=0x00000000
[00:59:29.225]    __ap=0x00000000
[00:59:29.225]    __traceout=0x00000000      (Trace Disabled)
[00:59:29.225]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:59:29.225]    __FlashAddr=0x00000000
[00:59:29.225]    __FlashLen=0x00000000
[00:59:29.225]    __FlashArg=0x00000000
[00:59:29.225]    __FlashOp=0x00000000
[00:59:29.225]    __Result=0x00000000
[00:59:29.225]  </debugvars>
[00:59:29.225]  
[00:59:29.225]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:59:29.225]    <block atomic="false" info="">
[00:59:29.229]      __var deviceID = 0;
[00:59:29.229]        // -> [deviceID <= 0x00000000]
[00:59:29.229]      __var version = 0;
[00:59:29.229]        // -> [version <= 0x00000000]
[00:59:29.229]      __var partNum = 0;
[00:59:29.229]        // -> [partNum <= 0x00000000]
[00:59:29.229]      __var manuf = 0;
[00:59:29.229]        // -> [manuf <= 0x00000000]
[00:59:29.229]      __var isMSPM0G1X0X_G3X0X = 0;
[00:59:29.229]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:59:29.229]      __var isProduction = 0;
[00:59:29.229]        // -> [isProduction <= 0x00000000]
[00:59:29.229]      __var continueId = 0;
[00:59:29.230]        // -> [continueId <= 0x00000000]
[00:59:29.230]      deviceID =   Read32(0x41C40004);
[00:59:29.234]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:59:29.234]        // -> [deviceID <= 0x2BB8802F]
[00:59:29.234]      version = deviceID >> 28;
[00:59:29.234]        // -> [version <= 0x00000002]
[00:59:29.234]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:59:29.234]        // -> [partNum <= 0x0000BB88]
[00:59:29.234]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:59:29.234]        // -> [manuf <= 0x00000017]
[00:59:29.234]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:59:29.234]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:59:29.234]      isProduction = (version > 0);
[00:59:29.234]        // -> [isProduction <= 0x00000001]
[00:59:29.234]    </block>
[00:59:29.234]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:59:29.234]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:59:29.234]        // =>  FALSE
[00:59:29.237]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:59:29.237]    </control>
[00:59:29.237]    <control if="continueId == 4" while="" timeout="0" info="">
[00:59:29.237]      // if-block "continueId == 4"
[00:59:29.237]        // =>  FALSE
[00:59:29.237]      // skip if-block "continueId == 4"
[00:59:29.237]    </control>
[00:59:29.237]    <control if="!isProduction" while="" timeout="0" info="">
[00:59:29.237]      // if-block "!isProduction"
[00:59:29.237]        // =>  FALSE
[00:59:29.237]      // skip if-block "!isProduction"
[00:59:29.237]    </control>
[00:59:29.237]  </sequence>
[00:59:29.237]  
[01:00:52.962]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:52.962]  
[01:00:52.972]  <debugvars>
[01:00:52.972]    // Pre-defined
[01:00:52.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:52.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:52.972]    __dp=0x00000000
[01:00:52.972]    __ap=0x00000000
[01:00:52.972]    __traceout=0x00000000      (Trace Disabled)
[01:00:52.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:52.972]    __FlashAddr=0x00000000
[01:00:52.973]    __FlashLen=0x00000000
[01:00:52.973]    __FlashArg=0x00000000
[01:00:52.973]    __FlashOp=0x00000000
[01:00:52.973]    __Result=0x00000000
[01:00:52.973]  </debugvars>
[01:00:52.973]  
[01:00:52.973]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:52.973]    <block atomic="false" info="">
[01:00:52.973]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:52.973]        // -> [isSWJ <= 0x00000001]
[01:00:52.973]      __var hasDormant = __protocol & 0x00020000;
[01:00:52.973]        // -> [hasDormant <= 0x00000000]
[01:00:52.973]      __var protType   = __protocol & 0x0000FFFF;
[01:00:52.973]        // -> [protType <= 0x00000002]
[01:00:52.973]    </block>
[01:00:52.973]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:52.973]      // if-block "protType == 1"
[01:00:52.973]        // =>  FALSE
[01:00:52.973]      // skip if-block "protType == 1"
[01:00:52.973]    </control>
[01:00:52.973]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:52.973]      // if-block "protType == 2"
[01:00:52.973]        // =>  TRUE
[01:00:52.973]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:52.973]        // if-block "isSWJ"
[01:00:52.973]          // =>  TRUE
[01:00:52.973]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:52.973]          // if-block "hasDormant"
[01:00:52.973]            // =>  FALSE
[01:00:52.973]          // skip if-block "hasDormant"
[01:00:52.973]        </control>
[01:00:52.973]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:52.973]          // if-block "!hasDormant"
[01:00:52.973]            // =>  TRUE
[01:00:52.973]          <block atomic="false" info="">
[01:00:52.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:52.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:52.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:52.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:52.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:52.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:52.985]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:52.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:52.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:52.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:52.992]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:52.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:52.993]          </block>
[01:00:52.993]          // end if-block "!hasDormant"
[01:00:52.993]        </control>
[01:00:52.993]        // end if-block "isSWJ"
[01:00:52.993]      </control>
[01:00:52.993]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:52.993]        // if-block "!isSWJ"
[01:00:52.993]          // =>  FALSE
[01:00:52.993]        // skip if-block "!isSWJ"
[01:00:52.995]      </control>
[01:00:52.995]      <block atomic="false" info="">
[01:00:52.995]        ReadDP(0x0);
[01:00:52.995]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:52.995]      </block>
[01:00:52.995]      // end if-block "protType == 2"
[01:00:52.995]    </control>
[01:00:52.995]  </sequence>
[01:00:52.997]  
[01:00:52.997]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:52.997]  
[01:00:52.997]  <debugvars>
[01:00:52.997]    // Pre-defined
[01:00:52.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:52.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:52.997]    __dp=0x00000000
[01:00:52.997]    __ap=0x00000000
[01:00:52.997]    __traceout=0x00000000      (Trace Disabled)
[01:00:52.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:52.997]    __FlashAddr=0x00000000
[01:00:52.997]    __FlashLen=0x00000000
[01:00:52.997]    __FlashArg=0x00000000
[01:00:52.997]    __FlashOp=0x00000000
[01:00:52.997]    __Result=0x00000000
[01:00:52.997]  </debugvars>
[01:00:52.997]  
[01:00:52.997]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:53.001]    <block atomic="false" info="">
[01:00:53.001]      __var SW_DP_ABORT       = 0x0;
[01:00:53.001]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:53.001]      __var DP_CTRL_STAT      = 0x4;
[01:00:53.001]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:53.001]      __var DP_SELECT         = 0x8;
[01:00:53.001]        // -> [DP_SELECT <= 0x00000008]
[01:00:53.001]      __var powered_down      = 0;
[01:00:53.001]        // -> [powered_down <= 0x00000000]
[01:00:53.001]      WriteDP(DP_SELECT, 0x00000000);
[01:00:53.002]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:53.002]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:53.005]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:53.005]        // -> [powered_down <= 0x00000001]
[01:00:53.005]    </block>
[01:00:53.005]    <control if="powered_down" while="" timeout="0" info="">
[01:00:53.005]      // if-block "powered_down"
[01:00:53.005]        // =>  TRUE
[01:00:53.005]      <block atomic="false" info="">
[01:00:53.005]        Message(0, "Debug/System power-up request sent");
[01:00:53.010]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:53.014]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:53.014]      </block>
[01:00:53.014]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:53.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:53.016]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:53.016]        // while-condition  =>  FALSE
[01:00:53.016]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:53.016]      </control>
[01:00:53.016]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:53.016]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:53.016]          // =>  FALSE
[01:00:53.016]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:53.016]      </control>
[01:00:53.016]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:53.016]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:53.016]          // =>  TRUE
[01:00:53.017]        <block atomic="false" info="">
[01:00:53.017]          Message(0, "executing SWD power up");
[01:00:53.018]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:53.019]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:53.019]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:53.022]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:53.022]        </block>
[01:00:53.022]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:53.022]      </control>
[01:00:53.022]      // end if-block "powered_down"
[01:00:53.022]    </control>
[01:00:53.022]    <block atomic="false" info="">
[01:00:53.022]      __var DEBUG_PORT_VAL    = 0;
[01:00:53.022]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:53.022]      __var ACCESS_POINT_VAL  = 0;
[01:00:53.022]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:53.022]      __ap = 1; 
[01:00:53.022]        // -> [__ap <= 0x00000001]
[01:00:53.022]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:53.030]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:53.030]      __ap = 4;
[01:00:53.032]        // -> [__ap <= 0x00000004]
[01:00:53.032]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:53.034]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:53.034]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:53.034]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:53.034]    </block>
[01:00:53.034]    <block atomic="false" info="">
[01:00:53.034]      __var nReset = 0x80;
[01:00:53.034]        // -> [nReset <= 0x00000080]
[01:00:53.034]      __var canReadPins = 0;
[01:00:53.034]        // -> [canReadPins <= 0x00000000]
[01:00:53.034]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:53.038]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:53.038]        // -> [canReadPins <= 0x00000001]
[01:00:53.038]    </block>
[01:00:53.038]    <control if="" while="1" timeout="200" info="">
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.038]      // while-condition  =>  TRUE
[01:00:53.038]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.042]      // while-condition  =>  TRUE
[01:00:53.042]      // while "1"  (timeout="200")
[01:00:53.046]      // while-condition  =>  TRUE
[01:00:53.046]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.047]      // while "1"  (timeout="200")
[01:00:53.047]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.048]      // while "1"  (timeout="200")
[01:00:53.048]      // while-condition  =>  TRUE
[01:00:53.050]      // while "1"  (timeout="200")
[01:00:53.050]      // while-condition  =>  TRUE
[01:00:53.050]      // while "1"  (timeout="200")
[01:00:53.050]      // while-condition  =>  TRUE
[01:00:53.050]      // while "1"  (timeout="200")
[01:00:53.050]      // while-condition  =>  TRUE
[01:00:53.050]      // while "1"  (timeout="200")
[01:00:53.050]      // while-condition  =>  TRUE
[01:00:53.050]      // while "1"  (timeout="200")
[01:00:53.050]      // while-condition  =>  TRUE
[01:00:53.051]      // while "1"  (timeout="200")
[01:00:53.051]      // while  =>  TIMEOUT
[01:00:53.051]      // end while "1"
[01:00:53.051]    </control>
[01:00:53.051]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:53.051]      // if-block "canReadPins"
[01:00:53.051]        // =>  TRUE
[01:00:53.051]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:53.052]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:53.052]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:53.052]        // while-condition  =>  FALSE
[01:00:53.052]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:53.052]      </control>
[01:00:53.054]      // end if-block "canReadPins"
[01:00:53.054]    </control>
[01:00:53.054]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:53.054]      // if-block "!canReadPins"
[01:00:53.054]        // =>  FALSE
[01:00:53.054]      // skip if-block "!canReadPins"
[01:00:53.054]    </control>
[01:00:53.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:53.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:53.054]        // =>  TRUE
[01:00:53.054]      <block atomic="false" info="">
[01:00:53.054]        WriteAP(0x00, 0x190008);
[01:00:53.056]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:53.056]        WriteAP(0xF0, 0x01);
[01:00:53.063]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:53.063]      </block>
[01:00:53.063]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:53.063]    </control>
[01:00:53.063]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:53.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:53.064]        // =>  FALSE
[01:00:53.064]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:53.064]    </control>
[01:00:53.064]    <block atomic="false" info="">
[01:00:53.064]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:53.069]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:53.071]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:53.071]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:53.072]      __ap = 0; //lets make sure we reset the access point selection
[01:00:53.073]        // -> [__ap <= 0x00000000]
[01:00:53.073]    </block>
[01:00:53.073]  </sequence>
[01:00:53.073]  
[01:00:53.108]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:53.108]  
[01:00:53.108]  <debugvars>
[01:00:53.108]    // Pre-defined
[01:00:53.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:53.108]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:53.108]    __dp=0x00000000
[01:00:53.108]    __ap=0x00000000
[01:00:53.108]    __traceout=0x00000000      (Trace Disabled)
[01:00:53.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:53.108]    __FlashAddr=0x00000000
[01:00:53.108]    __FlashLen=0x00000000
[01:00:53.108]    __FlashArg=0x00000000
[01:00:53.108]    __FlashOp=0x00000000
[01:00:53.108]    __Result=0x00000000
[01:00:53.108]  </debugvars>
[01:00:53.108]  
[01:00:53.108]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:53.112]    <block atomic="false" info="">
[01:00:53.112]      __var deviceID = 0;
[01:00:53.112]        // -> [deviceID <= 0x00000000]
[01:00:53.113]      __var version = 0;
[01:00:53.113]        // -> [version <= 0x00000000]
[01:00:53.113]      __var partNum = 0;
[01:00:53.113]        // -> [partNum <= 0x00000000]
[01:00:53.113]      __var manuf = 0;
[01:00:53.113]        // -> [manuf <= 0x00000000]
[01:00:53.113]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:53.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:53.113]      __var isProduction = 0;
[01:00:53.113]        // -> [isProduction <= 0x00000000]
[01:00:53.113]      __var continueId = 0;
[01:00:53.113]        // -> [continueId <= 0x00000000]
[01:00:53.113]      deviceID =   Read32(0x41C40004);
[01:00:53.118]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.118]        // -> [deviceID <= 0x2BB8802F]
[01:00:53.118]      version = deviceID >> 28;
[01:00:53.118]        // -> [version <= 0x00000002]
[01:00:53.118]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:53.118]        // -> [partNum <= 0x0000BB88]
[01:00:53.118]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:53.118]        // -> [manuf <= 0x00000017]
[01:00:53.118]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:53.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:53.118]      isProduction = (version > 0);
[01:00:53.118]        // -> [isProduction <= 0x00000001]
[01:00:53.118]    </block>
[01:00:53.118]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:53.118]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:53.118]        // =>  FALSE
[01:00:53.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:53.121]    </control>
[01:00:53.121]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:53.121]      // if-block "continueId == 4"
[01:00:53.121]        // =>  FALSE
[01:00:53.121]      // skip if-block "continueId == 4"
[01:00:53.121]    </control>
[01:00:53.121]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:53.121]      // if-block "!isProduction"
[01:00:53.121]        // =>  FALSE
[01:00:53.121]      // skip if-block "!isProduction"
[01:00:53.121]    </control>
[01:00:53.121]  </sequence>
[01:00:53.121]  
[01:03:19.459]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:03:19.459]  
[01:03:19.459]  <debugvars>
[01:03:19.459]    // Pre-defined
[01:03:19.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:19.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:19.459]    __dp=0x00000000
[01:03:19.459]    __ap=0x00000000
[01:03:19.459]    __traceout=0x00000000      (Trace Disabled)
[01:03:19.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:19.459]    __FlashAddr=0x00000000
[01:03:19.459]    __FlashLen=0x00000000
[01:03:19.459]    __FlashArg=0x00000000
[01:03:19.459]    __FlashOp=0x00000000
[01:03:19.459]    __Result=0x00000000
[01:03:19.459]  </debugvars>
[01:03:19.459]  
[01:03:19.459]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:03:19.459]    <block atomic="false" info="">
[01:03:19.459]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:03:19.459]        // -> [isSWJ <= 0x00000001]
[01:03:19.459]      __var hasDormant = __protocol & 0x00020000;
[01:03:19.459]        // -> [hasDormant <= 0x00000000]
[01:03:19.459]      __var protType   = __protocol & 0x0000FFFF;
[01:03:19.459]        // -> [protType <= 0x00000002]
[01:03:19.459]    </block>
[01:03:19.459]    <control if="protType == 1" while="" timeout="0" info="">
[01:03:19.459]      // if-block "protType == 1"
[01:03:19.459]        // =>  FALSE
[01:03:19.459]      // skip if-block "protType == 1"
[01:03:19.459]    </control>
[01:03:19.459]    <control if="protType == 2" while="" timeout="0" info="">
[01:03:19.459]      // if-block "protType == 2"
[01:03:19.459]        // =>  TRUE
[01:03:19.459]      <control if="isSWJ" while="" timeout="0" info="">
[01:03:19.459]        // if-block "isSWJ"
[01:03:19.459]          // =>  TRUE
[01:03:19.459]        <control if="hasDormant" while="" timeout="0" info="">
[01:03:19.459]          // if-block "hasDormant"
[01:03:19.459]            // =>  FALSE
[01:03:19.463]          // skip if-block "hasDormant"
[01:03:19.463]        </control>
[01:03:19.463]        <control if="!hasDormant" while="" timeout="0" info="">
[01:03:19.463]          // if-block "!hasDormant"
[01:03:19.463]            // =>  TRUE
[01:03:19.463]          <block atomic="false" info="">
[01:03:19.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:03:19.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:19.465]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:03:19.467]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:03:19.467]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:03:19.467]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:19.467]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:03:19.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:03:19.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:03:19.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:03:19.477]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:03:19.477]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:03:19.477]          </block>
[01:03:19.477]          // end if-block "!hasDormant"
[01:03:19.479]        </control>
[01:03:19.479]        // end if-block "isSWJ"
[01:03:19.479]      </control>
[01:03:19.479]      <control if="!isSWJ" while="" timeout="0" info="">
[01:03:19.479]        // if-block "!isSWJ"
[01:03:19.479]          // =>  FALSE
[01:03:19.479]        // skip if-block "!isSWJ"
[01:03:19.479]      </control>
[01:03:19.479]      <block atomic="false" info="">
[01:03:19.479]        ReadDP(0x0);
[01:03:19.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:03:19.485]      </block>
[01:03:19.485]      // end if-block "protType == 2"
[01:03:19.485]    </control>
[01:03:19.485]  </sequence>
[01:03:19.486]  
[01:03:19.489]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:03:19.489]  
[01:03:19.489]  <debugvars>
[01:03:19.489]    // Pre-defined
[01:03:19.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:19.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:19.489]    __dp=0x00000000
[01:03:19.489]    __ap=0x00000000
[01:03:19.489]    __traceout=0x00000000      (Trace Disabled)
[01:03:19.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:19.492]    __FlashAddr=0x00000000
[01:03:19.492]    __FlashLen=0x00000000
[01:03:19.492]    __FlashArg=0x00000000
[01:03:19.492]    __FlashOp=0x00000000
[01:03:19.492]    __Result=0x00000000
[01:03:19.492]  </debugvars>
[01:03:19.492]  
[01:03:19.492]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:03:19.492]    <block atomic="false" info="">
[01:03:19.492]      __var SW_DP_ABORT       = 0x0;
[01:03:19.492]        // -> [SW_DP_ABORT <= 0x00000000]
[01:03:19.492]      __var DP_CTRL_STAT      = 0x4;
[01:03:19.492]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:03:19.492]      __var DP_SELECT         = 0x8;
[01:03:19.492]        // -> [DP_SELECT <= 0x00000008]
[01:03:19.492]      __var powered_down      = 0;
[01:03:19.492]        // -> [powered_down <= 0x00000000]
[01:03:19.492]      WriteDP(DP_SELECT, 0x00000000);
[01:03:19.498]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:03:19.498]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:03:19.501]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:03:19.501]        // -> [powered_down <= 0x00000001]
[01:03:19.501]    </block>
[01:03:19.501]    <control if="powered_down" while="" timeout="0" info="">
[01:03:19.501]      // if-block "powered_down"
[01:03:19.501]        // =>  TRUE
[01:03:19.501]      <block atomic="false" info="">
[01:03:19.501]        Message(0, "Debug/System power-up request sent");
[01:03:19.503]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:03:19.505]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:03:19.505]      </block>
[01:03:19.505]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:03:19.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:03:19.505]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:03:19.507]        // while-condition  =>  FALSE
[01:03:19.507]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:03:19.507]      </control>
[01:03:19.507]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:03:19.507]        // if-block "(__protocol & 0xFFFF) == 1"
[01:03:19.507]          // =>  FALSE
[01:03:19.507]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:03:19.507]      </control>
[01:03:19.507]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:03:19.507]        // if-block "(__protocol & 0xFFFF) == 2"
[01:03:19.507]          // =>  TRUE
[01:03:19.507]        <block atomic="false" info="">
[01:03:19.508]          Message(0, "executing SWD power up");
[01:03:19.509]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:03:19.509]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:03:19.509]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:03:19.513]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:03:19.513]        </block>
[01:03:19.513]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:03:19.513]      </control>
[01:03:19.513]      // end if-block "powered_down"
[01:03:19.513]    </control>
[01:03:19.513]    <block atomic="false" info="">
[01:03:19.513]      __var DEBUG_PORT_VAL    = 0;
[01:03:19.513]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:03:19.513]      __var ACCESS_POINT_VAL  = 0;
[01:03:19.513]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:03:19.513]      __ap = 1; 
[01:03:19.513]        // -> [__ap <= 0x00000001]
[01:03:19.515]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:03:19.521]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:03:19.521]      __ap = 4;
[01:03:19.521]        // -> [__ap <= 0x00000004]
[01:03:19.521]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:03:19.529]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:03:19.529]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:03:19.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:03:19.529]    </block>
[01:03:19.529]    <block atomic="false" info="">
[01:03:19.529]      __var nReset = 0x80;
[01:03:19.529]        // -> [nReset <= 0x00000080]
[01:03:19.529]      __var canReadPins = 0;
[01:03:19.533]        // -> [canReadPins <= 0x00000000]
[01:03:19.533]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:03:19.536]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:03:19.536]        // -> [canReadPins <= 0x00000001]
[01:03:19.536]    </block>
[01:03:19.536]    <control if="" while="1" timeout="200" info="">
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.537]      // while-condition  =>  TRUE
[01:03:19.537]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.541]      // while "1"  (timeout="200")
[01:03:19.541]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.545]      // while-condition  =>  TRUE
[01:03:19.545]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.547]      // while-condition  =>  TRUE
[01:03:19.547]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.549]      // while-condition  =>  TRUE
[01:03:19.549]      // while "1"  (timeout="200")
[01:03:19.553]      // while-condition  =>  TRUE
[01:03:19.553]      // while "1"  (timeout="200")
[01:03:19.553]      // while  =>  TIMEOUT
[01:03:19.553]      // end while "1"
[01:03:19.553]    </control>
[01:03:19.553]    <control if="canReadPins" while="" timeout="0" info="">
[01:03:19.553]      // if-block "canReadPins"
[01:03:19.553]        // =>  TRUE
[01:03:19.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:03:19.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:03:19.555]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:03:19.557]        // while-condition  =>  FALSE
[01:03:19.557]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:03:19.557]      </control>
[01:03:19.557]      // end if-block "canReadPins"
[01:03:19.557]    </control>
[01:03:19.557]    <control if="!canReadPins" while="" timeout="0" info="">
[01:03:19.557]      // if-block "!canReadPins"
[01:03:19.557]        // =>  FALSE
[01:03:19.557]      // skip if-block "!canReadPins"
[01:03:19.557]    </control>
[01:03:19.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:03:19.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:03:19.557]        // =>  TRUE
[01:03:19.557]      <block atomic="false" info="">
[01:03:19.557]        WriteAP(0x00, 0x190008);
[01:03:19.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:03:19.557]        WriteAP(0xF0, 0x01);
[01:03:19.561]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:03:19.561]      </block>
[01:03:19.565]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:03:19.565]    </control>
[01:03:19.565]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:03:19.565]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:03:19.565]        // =>  FALSE
[01:03:19.565]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:03:19.565]    </control>
[01:03:19.565]    <block atomic="false" info="">
[01:03:19.565]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:03:19.569]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:03:19.569]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:03:19.569]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:03:19.569]      __ap = 0; //lets make sure we reset the access point selection
[01:03:19.569]        // -> [__ap <= 0x00000000]
[01:03:19.573]    </block>
[01:03:19.573]  </sequence>
[01:03:19.573]  
[01:03:19.595]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:03:19.595]  
[01:03:19.595]  <debugvars>
[01:03:19.595]    // Pre-defined
[01:03:19.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:19.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:03:19.595]    __dp=0x00000000
[01:03:19.595]    __ap=0x00000000
[01:03:19.597]    __traceout=0x00000000      (Trace Disabled)
[01:03:19.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:19.597]    __FlashAddr=0x00000000
[01:03:19.597]    __FlashLen=0x00000000
[01:03:19.597]    __FlashArg=0x00000000
[01:03:19.597]    __FlashOp=0x00000000
[01:03:19.597]    __Result=0x00000000
[01:03:19.597]  </debugvars>
[01:03:19.597]  
[01:03:19.597]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:03:19.597]    <block atomic="false" info="">
[01:03:19.597]      __var deviceID = 0;
[01:03:19.597]        // -> [deviceID <= 0x00000000]
[01:03:19.597]      __var version = 0;
[01:03:19.597]        // -> [version <= 0x00000000]
[01:03:19.597]      __var partNum = 0;
[01:03:19.597]        // -> [partNum <= 0x00000000]
[01:03:19.597]      __var manuf = 0;
[01:03:19.597]        // -> [manuf <= 0x00000000]
[01:03:19.597]      __var isMSPM0G1X0X_G3X0X = 0;
[01:03:19.597]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:03:19.597]      __var isProduction = 0;
[01:03:19.597]        // -> [isProduction <= 0x00000000]
[01:03:19.597]      __var continueId = 0;
[01:03:19.597]        // -> [continueId <= 0x00000000]
[01:03:19.597]      deviceID =   Read32(0x41C40004);
[01:03:19.605]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:03:19.605]        // -> [deviceID <= 0x2BB8802F]
[01:03:19.605]      version = deviceID >> 28;
[01:03:19.605]        // -> [version <= 0x00000002]
[01:03:19.605]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:03:19.605]        // -> [partNum <= 0x0000BB88]
[01:03:19.605]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:03:19.605]        // -> [manuf <= 0x00000017]
[01:03:19.605]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:03:19.605]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:03:19.605]      isProduction = (version > 0);
[01:03:19.605]        // -> [isProduction <= 0x00000001]
[01:03:19.605]    </block>
[01:03:19.605]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:03:19.605]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:03:19.605]        // =>  FALSE
[01:03:19.605]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:03:19.605]    </control>
[01:03:19.605]    <control if="continueId == 4" while="" timeout="0" info="">
[01:03:19.605]      // if-block "continueId == 4"
[01:03:19.605]        // =>  FALSE
[01:03:19.605]      // skip if-block "continueId == 4"
[01:03:19.605]    </control>
[01:03:19.605]    <control if="!isProduction" while="" timeout="0" info="">
[01:03:19.605]      // if-block "!isProduction"
[01:03:19.605]        // =>  FALSE
[01:03:19.605]      // skip if-block "!isProduction"
[01:03:19.605]    </control>
[01:03:19.605]  </sequence>
[01:03:19.609]  
[01:09:27.375]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:09:27.375]  
[01:09:27.384]  <debugvars>
[01:09:27.384]    // Pre-defined
[01:09:27.384]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:27.384]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:27.384]    __dp=0x00000000
[01:09:27.384]    __ap=0x00000000
[01:09:27.384]    __traceout=0x00000000      (Trace Disabled)
[01:09:27.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:27.384]    __FlashAddr=0x00000000
[01:09:27.384]    __FlashLen=0x00000000
[01:09:27.385]    __FlashArg=0x00000000
[01:09:27.385]    __FlashOp=0x00000000
[01:09:27.385]    __Result=0x00000000
[01:09:27.385]  </debugvars>
[01:09:27.385]  
[01:09:27.385]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:09:27.385]    <block atomic="false" info="">
[01:09:27.385]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:09:27.385]        // -> [isSWJ <= 0x00000001]
[01:09:27.385]      __var hasDormant = __protocol & 0x00020000;
[01:09:27.385]        // -> [hasDormant <= 0x00000000]
[01:09:27.385]      __var protType   = __protocol & 0x0000FFFF;
[01:09:27.385]        // -> [protType <= 0x00000002]
[01:09:27.385]    </block>
[01:09:27.385]    <control if="protType == 1" while="" timeout="0" info="">
[01:09:27.385]      // if-block "protType == 1"
[01:09:27.385]        // =>  FALSE
[01:09:27.385]      // skip if-block "protType == 1"
[01:09:27.385]    </control>
[01:09:27.387]    <control if="protType == 2" while="" timeout="0" info="">
[01:09:27.387]      // if-block "protType == 2"
[01:09:27.387]        // =>  TRUE
[01:09:27.387]      <control if="isSWJ" while="" timeout="0" info="">
[01:09:27.387]        // if-block "isSWJ"
[01:09:27.387]          // =>  TRUE
[01:09:27.387]        <control if="hasDormant" while="" timeout="0" info="">
[01:09:27.387]          // if-block "hasDormant"
[01:09:27.387]            // =>  FALSE
[01:09:27.387]          // skip if-block "hasDormant"
[01:09:27.387]        </control>
[01:09:27.387]        <control if="!hasDormant" while="" timeout="0" info="">
[01:09:27.387]          // if-block "!hasDormant"
[01:09:27.387]            // =>  TRUE
[01:09:27.387]          <block atomic="false" info="">
[01:09:27.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:09:27.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:27.393]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:09:27.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:09:27.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:09:27.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:27.401]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:09:27.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:09:27.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:09:27.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:27.405]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:09:27.405]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:09:27.405]          </block>
[01:09:27.405]          // end if-block "!hasDormant"
[01:09:27.405]        </control>
[01:09:27.405]        // end if-block "isSWJ"
[01:09:27.405]      </control>
[01:09:27.405]      <control if="!isSWJ" while="" timeout="0" info="">
[01:09:27.405]        // if-block "!isSWJ"
[01:09:27.405]          // =>  FALSE
[01:09:27.405]        // skip if-block "!isSWJ"
[01:09:27.405]      </control>
[01:09:27.405]      <block atomic="false" info="">
[01:09:27.405]        ReadDP(0x0);
[01:09:27.409]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:09:27.409]      </block>
[01:09:27.409]      // end if-block "protType == 2"
[01:09:27.409]    </control>
[01:09:27.409]  </sequence>
[01:09:27.409]  
[01:09:27.417]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:09:27.417]  
[01:09:27.417]  <debugvars>
[01:09:27.417]    // Pre-defined
[01:09:27.417]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:27.417]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:27.417]    __dp=0x00000000
[01:09:27.417]    __ap=0x00000000
[01:09:27.417]    __traceout=0x00000000      (Trace Disabled)
[01:09:27.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:27.417]    __FlashAddr=0x00000000
[01:09:27.417]    __FlashLen=0x00000000
[01:09:27.417]    __FlashArg=0x00000000
[01:09:27.417]    __FlashOp=0x00000000
[01:09:27.417]    __Result=0x00000000
[01:09:27.417]  </debugvars>
[01:09:27.417]  
[01:09:27.417]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:09:27.417]    <block atomic="false" info="">
[01:09:27.417]      __var SW_DP_ABORT       = 0x0;
[01:09:27.417]        // -> [SW_DP_ABORT <= 0x00000000]
[01:09:27.417]      __var DP_CTRL_STAT      = 0x4;
[01:09:27.417]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:09:27.417]      __var DP_SELECT         = 0x8;
[01:09:27.417]        // -> [DP_SELECT <= 0x00000008]
[01:09:27.417]      __var powered_down      = 0;
[01:09:27.417]        // -> [powered_down <= 0x00000000]
[01:09:27.417]      WriteDP(DP_SELECT, 0x00000000);
[01:09:27.423]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:09:27.423]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:09:27.427]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:09:27.427]        // -> [powered_down <= 0x00000001]
[01:09:27.427]    </block>
[01:09:27.427]    <control if="powered_down" while="" timeout="0" info="">
[01:09:27.427]      // if-block "powered_down"
[01:09:27.427]        // =>  TRUE
[01:09:27.427]      <block atomic="false" info="">
[01:09:27.427]        Message(0, "Debug/System power-up request sent");
[01:09:27.429]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:09:27.440]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:09:27.440]      </block>
[01:09:27.440]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:09:27.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:09:27.442]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:09:27.442]        // while-condition  =>  FALSE
[01:09:27.442]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:09:27.442]      </control>
[01:09:27.442]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:09:27.442]        // if-block "(__protocol & 0xFFFF) == 1"
[01:09:27.442]          // =>  FALSE
[01:09:27.444]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:09:27.444]      </control>
[01:09:27.444]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:09:27.444]        // if-block "(__protocol & 0xFFFF) == 2"
[01:09:27.444]          // =>  TRUE
[01:09:27.444]        <block atomic="false" info="">
[01:09:27.444]          Message(0, "executing SWD power up");
[01:09:27.444]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:09:27.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:09:27.457]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:09:27.461]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:09:27.461]        </block>
[01:09:27.461]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:09:27.461]      </control>
[01:09:27.461]      // end if-block "powered_down"
[01:09:27.461]    </control>
[01:09:27.461]    <block atomic="false" info="">
[01:09:27.462]      __var DEBUG_PORT_VAL    = 0;
[01:09:27.462]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:09:27.462]      __var ACCESS_POINT_VAL  = 0;
[01:09:27.462]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:09:27.462]      __ap = 1; 
[01:09:27.462]        // -> [__ap <= 0x00000001]
[01:09:27.462]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:09:27.464]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:09:27.464]      __ap = 4;
[01:09:27.464]        // -> [__ap <= 0x00000004]
[01:09:27.464]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:27.479]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:09:27.479]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:09:27.479]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:27.481]    </block>
[01:09:27.481]    <block atomic="false" info="">
[01:09:27.481]      __var nReset = 0x80;
[01:09:27.481]        // -> [nReset <= 0x00000080]
[01:09:27.481]      __var canReadPins = 0;
[01:09:27.481]        // -> [canReadPins <= 0x00000000]
[01:09:27.481]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:09:27.483]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:09:27.483]        // -> [canReadPins <= 0x00000001]
[01:09:27.483]    </block>
[01:09:27.483]    <control if="" while="1" timeout="200" info="">
[01:09:27.483]      // while "1"  (timeout="200")
[01:09:27.483]      // while-condition  =>  TRUE
[01:09:27.483]      // while "1"  (timeout="200")
[01:09:27.483]      // while-condition  =>  TRUE
[01:09:27.483]      // while "1"  (timeout="200")
[01:09:27.483]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.485]      // while-condition  =>  TRUE
[01:09:27.485]      // while "1"  (timeout="200")
[01:09:27.489]      // while-condition  =>  TRUE
[01:09:27.489]      // while "1"  (timeout="200")
[01:09:27.489]      // while  =>  TIMEOUT
[01:09:27.489]      // end while "1"
[01:09:27.489]    </control>
[01:09:27.489]    <control if="canReadPins" while="" timeout="0" info="">
[01:09:27.489]      // if-block "canReadPins"
[01:09:27.489]        // =>  TRUE
[01:09:27.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:09:27.489]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:09:27.493]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:09:27.493]        // while-condition  =>  FALSE
[01:09:27.493]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:09:27.493]      </control>
[01:09:27.493]      // end if-block "canReadPins"
[01:09:27.493]    </control>
[01:09:27.493]    <control if="!canReadPins" while="" timeout="0" info="">
[01:09:27.493]      // if-block "!canReadPins"
[01:09:27.493]        // =>  FALSE
[01:09:27.493]      // skip if-block "!canReadPins"
[01:09:27.493]    </control>
[01:09:27.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:09:27.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:27.493]        // =>  TRUE
[01:09:27.493]      <block atomic="false" info="">
[01:09:27.493]        WriteAP(0x00, 0x190008);
[01:09:27.497]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:27.497]        WriteAP(0xF0, 0x01);
[01:09:27.505]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:27.505]      </block>
[01:09:27.505]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:27.505]    </control>
[01:09:27.509]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:09:27.509]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:27.509]        // =>  FALSE
[01:09:27.509]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:27.509]    </control>
[01:09:27.509]    <block atomic="false" info="">
[01:09:27.509]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:27.512]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:09:27.512]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:09:27.512]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:27.515]      __ap = 0; //lets make sure we reset the access point selection
[01:09:27.515]        // -> [__ap <= 0x00000000]
[01:09:27.515]    </block>
[01:09:27.515]  </sequence>
[01:09:27.516]  
[01:09:27.542]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:09:27.542]  
[01:09:27.542]  <debugvars>
[01:09:27.542]    // Pre-defined
[01:09:27.542]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:27.542]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:27.542]    __dp=0x00000000
[01:09:27.542]    __ap=0x00000000
[01:09:27.542]    __traceout=0x00000000      (Trace Disabled)
[01:09:27.542]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:27.542]    __FlashAddr=0x00000000
[01:09:27.542]    __FlashLen=0x00000000
[01:09:27.542]    __FlashArg=0x00000000
[01:09:27.542]    __FlashOp=0x00000000
[01:09:27.542]    __Result=0x00000000
[01:09:27.542]  </debugvars>
[01:09:27.542]  
[01:09:27.542]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:09:27.542]    <block atomic="false" info="">
[01:09:27.542]      __var deviceID = 0;
[01:09:27.542]        // -> [deviceID <= 0x00000000]
[01:09:27.542]      __var version = 0;
[01:09:27.542]        // -> [version <= 0x00000000]
[01:09:27.542]      __var partNum = 0;
[01:09:27.542]        // -> [partNum <= 0x00000000]
[01:09:27.546]      __var manuf = 0;
[01:09:27.546]        // -> [manuf <= 0x00000000]
[01:09:27.546]      __var isMSPM0G1X0X_G3X0X = 0;
[01:09:27.546]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:09:27.546]      __var isProduction = 0;
[01:09:27.546]        // -> [isProduction <= 0x00000000]
[01:09:27.546]      __var continueId = 0;
[01:09:27.546]        // -> [continueId <= 0x00000000]
[01:09:27.546]      deviceID =   Read32(0x41C40004);
[01:09:27.555]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:09:27.555]        // -> [deviceID <= 0x2BB8802F]
[01:09:27.555]      version = deviceID >> 28;
[01:09:27.555]        // -> [version <= 0x00000002]
[01:09:27.555]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:09:27.556]        // -> [partNum <= 0x0000BB88]
[01:09:27.556]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:09:27.556]        // -> [manuf <= 0x00000017]
[01:09:27.556]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:09:27.556]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:09:27.556]      isProduction = (version > 0);
[01:09:27.556]        // -> [isProduction <= 0x00000001]
[01:09:27.556]    </block>
[01:09:27.556]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:09:27.556]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:09:27.556]        // =>  FALSE
[01:09:27.556]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:09:27.556]    </control>
[01:09:27.556]    <control if="continueId == 4" while="" timeout="0" info="">
[01:09:27.556]      // if-block "continueId == 4"
[01:09:27.556]        // =>  FALSE
[01:09:27.556]      // skip if-block "continueId == 4"
[01:09:27.556]    </control>
[01:09:27.556]    <control if="!isProduction" while="" timeout="0" info="">
[01:09:27.556]      // if-block "!isProduction"
[01:09:27.556]        // =>  FALSE
[01:09:27.556]      // skip if-block "!isProduction"
[01:09:27.556]    </control>
[01:09:27.556]  </sequence>
[01:09:27.556]  
[01:14:11.660]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:14:11.660]  
[01:14:11.669]  <debugvars>
[01:14:11.669]    // Pre-defined
[01:14:11.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:11.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:11.669]    __dp=0x00000000
[01:14:11.669]    __ap=0x00000000
[01:14:11.669]    __traceout=0x00000000      (Trace Disabled)
[01:14:11.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:11.669]    __FlashAddr=0x00000000
[01:14:11.669]    __FlashLen=0x00000000
[01:14:11.669]    __FlashArg=0x00000000
[01:14:11.669]    __FlashOp=0x00000000
[01:14:11.669]    __Result=0x00000000
[01:14:11.669]  </debugvars>
[01:14:11.669]  
[01:14:11.671]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:14:11.671]    <block atomic="false" info="">
[01:14:11.671]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:14:11.671]        // -> [isSWJ <= 0x00000001]
[01:14:11.671]      __var hasDormant = __protocol & 0x00020000;
[01:14:11.671]        // -> [hasDormant <= 0x00000000]
[01:14:11.671]      __var protType   = __protocol & 0x0000FFFF;
[01:14:11.671]        // -> [protType <= 0x00000002]
[01:14:11.671]    </block>
[01:14:11.671]    <control if="protType == 1" while="" timeout="0" info="">
[01:14:11.671]      // if-block "protType == 1"
[01:14:11.671]        // =>  FALSE
[01:14:11.671]      // skip if-block "protType == 1"
[01:14:11.671]    </control>
[01:14:11.673]    <control if="protType == 2" while="" timeout="0" info="">
[01:14:11.673]      // if-block "protType == 2"
[01:14:11.673]        // =>  TRUE
[01:14:11.673]      <control if="isSWJ" while="" timeout="0" info="">
[01:14:11.673]        // if-block "isSWJ"
[01:14:11.673]          // =>  TRUE
[01:14:11.673]        <control if="hasDormant" while="" timeout="0" info="">
[01:14:11.673]          // if-block "hasDormant"
[01:14:11.673]            // =>  FALSE
[01:14:11.673]          // skip if-block "hasDormant"
[01:14:11.673]        </control>
[01:14:11.673]        <control if="!hasDormant" while="" timeout="0" info="">
[01:14:11.673]          // if-block "!hasDormant"
[01:14:11.673]            // =>  TRUE
[01:14:11.673]          <block atomic="false" info="">
[01:14:11.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:14:11.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:11.675]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:14:11.677]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:14:11.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:14:11.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:11.678]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:14:11.681]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:14:11.681]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:14:11.683]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:11.683]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:14:11.685]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:14:11.688]          </block>
[01:14:11.688]          // end if-block "!hasDormant"
[01:14:11.688]        </control>
[01:14:11.688]        // end if-block "isSWJ"
[01:14:11.688]      </control>
[01:14:11.688]      <control if="!isSWJ" while="" timeout="0" info="">
[01:14:11.689]        // if-block "!isSWJ"
[01:14:11.690]          // =>  FALSE
[01:14:11.690]        // skip if-block "!isSWJ"
[01:14:11.690]      </control>
[01:14:11.690]      <block atomic="false" info="">
[01:14:11.690]        ReadDP(0x0);
[01:14:11.692]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:14:11.692]      </block>
[01:14:11.692]      // end if-block "protType == 2"
[01:14:11.692]    </control>
[01:14:11.692]  </sequence>
[01:14:11.692]  
[01:14:11.701]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:14:11.701]  
[01:14:11.701]  <debugvars>
[01:14:11.701]    // Pre-defined
[01:14:11.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:11.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:11.705]    __dp=0x00000000
[01:14:11.705]    __ap=0x00000000
[01:14:11.705]    __traceout=0x00000000      (Trace Disabled)
[01:14:11.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:11.705]    __FlashAddr=0x00000000
[01:14:11.705]    __FlashLen=0x00000000
[01:14:11.706]    __FlashArg=0x00000000
[01:14:11.706]    __FlashOp=0x00000000
[01:14:11.706]    __Result=0x00000000
[01:14:11.706]  </debugvars>
[01:14:11.706]  
[01:14:11.706]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:14:11.706]    <block atomic="false" info="">
[01:14:11.706]      __var SW_DP_ABORT       = 0x0;
[01:14:11.706]        // -> [SW_DP_ABORT <= 0x00000000]
[01:14:11.706]      __var DP_CTRL_STAT      = 0x4;
[01:14:11.706]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:14:11.706]      __var DP_SELECT         = 0x8;
[01:14:11.706]        // -> [DP_SELECT <= 0x00000008]
[01:14:11.706]      __var powered_down      = 0;
[01:14:11.706]        // -> [powered_down <= 0x00000000]
[01:14:11.706]      WriteDP(DP_SELECT, 0x00000000);
[01:14:11.712]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:14:11.712]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:14:11.712]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:14:11.712]        // -> [powered_down <= 0x00000001]
[01:14:11.712]    </block>
[01:14:11.712]    <control if="powered_down" while="" timeout="0" info="">
[01:14:11.712]      // if-block "powered_down"
[01:14:11.716]        // =>  TRUE
[01:14:11.716]      <block atomic="false" info="">
[01:14:11.716]        Message(0, "Debug/System power-up request sent");
[01:14:11.718]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:14:11.720]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:14:11.720]      </block>
[01:14:11.720]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:14:11.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:14:11.724]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:14:11.724]        // while-condition  =>  FALSE
[01:14:11.724]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:14:11.724]      </control>
[01:14:11.724]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:14:11.724]        // if-block "(__protocol & 0xFFFF) == 1"
[01:14:11.724]          // =>  FALSE
[01:14:11.724]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:14:11.724]      </control>
[01:14:11.724]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:14:11.724]        // if-block "(__protocol & 0xFFFF) == 2"
[01:14:11.724]          // =>  TRUE
[01:14:11.724]        <block atomic="false" info="">
[01:14:11.724]          Message(0, "executing SWD power up");
[01:14:11.728]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:14:11.729]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:14:11.729]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:14:11.732]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:14:11.732]        </block>
[01:14:11.732]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:14:11.732]      </control>
[01:14:11.732]      // end if-block "powered_down"
[01:14:11.732]    </control>
[01:14:11.732]    <block atomic="false" info="">
[01:14:11.732]      __var DEBUG_PORT_VAL    = 0;
[01:14:11.732]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:14:11.732]      __var ACCESS_POINT_VAL  = 0;
[01:14:11.732]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:14:11.732]      __ap = 1; 
[01:14:11.732]        // -> [__ap <= 0x00000001]
[01:14:11.732]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:14:11.741]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:14:11.741]      __ap = 4;
[01:14:11.741]        // -> [__ap <= 0x00000004]
[01:14:11.741]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:11.744]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:14:11.744]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:14:11.744]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:11.747]    </block>
[01:14:11.747]    <block atomic="false" info="">
[01:14:11.747]      __var nReset = 0x80;
[01:14:11.747]        // -> [nReset <= 0x00000080]
[01:14:11.747]      __var canReadPins = 0;
[01:14:11.748]        // -> [canReadPins <= 0x00000000]
[01:14:11.748]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:14:11.749]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:14:11.749]        // -> [canReadPins <= 0x00000001]
[01:14:11.749]    </block>
[01:14:11.749]    <control if="" while="1" timeout="200" info="">
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.750]      // while "1"  (timeout="200")
[01:14:11.750]      // while-condition  =>  TRUE
[01:14:11.752]      // while "1"  (timeout="200")
[01:14:11.752]      // while-condition  =>  TRUE
[01:14:11.752]      // while "1"  (timeout="200")
[01:14:11.752]      // while-condition  =>  TRUE
[01:14:11.752]      // while "1"  (timeout="200")
[01:14:11.752]      // while-condition  =>  TRUE
[01:14:11.752]      // while "1"  (timeout="200")
[01:14:11.752]      // while-condition  =>  TRUE
[01:14:11.753]      // while "1"  (timeout="200")
[01:14:11.753]      // while-condition  =>  TRUE
[01:14:11.753]      // while "1"  (timeout="200")
[01:14:11.753]      // while-condition  =>  TRUE
[01:14:11.753]      // while "1"  (timeout="200")
[01:14:11.753]      // while-condition  =>  TRUE
[01:14:11.753]      // while "1"  (timeout="200")
[01:14:11.753]      // while-condition  =>  TRUE
[01:14:11.753]      // while "1"  (timeout="200")
[01:14:11.753]      // while-condition  =>  TRUE
[01:14:11.754]      // while "1"  (timeout="200")
[01:14:11.754]      // while  =>  TIMEOUT
[01:14:11.754]      // end while "1"
[01:14:11.754]    </control>
[01:14:11.754]    <control if="canReadPins" while="" timeout="0" info="">
[01:14:11.754]      // if-block "canReadPins"
[01:14:11.754]        // =>  TRUE
[01:14:11.754]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:14:11.754]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:14:11.758]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:14:11.759]        // while-condition  =>  FALSE
[01:14:11.759]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:14:11.759]      </control>
[01:14:11.759]      // end if-block "canReadPins"
[01:14:11.759]    </control>
[01:14:11.759]    <control if="!canReadPins" while="" timeout="0" info="">
[01:14:11.759]      // if-block "!canReadPins"
[01:14:11.759]        // =>  FALSE
[01:14:11.759]      // skip if-block "!canReadPins"
[01:14:11.759]    </control>
[01:14:11.759]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:14:11.759]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:11.759]        // =>  TRUE
[01:14:11.759]      <block atomic="false" info="">
[01:14:11.759]        WriteAP(0x00, 0x190008);
[01:14:11.765]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:11.765]        WriteAP(0xF0, 0x01);
[01:14:11.768]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:11.768]      </block>
[01:14:11.768]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:11.768]    </control>
[01:14:11.768]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:14:11.768]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:11.768]        // =>  FALSE
[01:14:11.769]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:11.769]    </control>
[01:14:11.769]    <block atomic="false" info="">
[01:14:11.769]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:11.770]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:14:11.773]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:14:11.773]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:11.775]      __ap = 0; //lets make sure we reset the access point selection
[01:14:11.775]        // -> [__ap <= 0x00000000]
[01:14:11.775]    </block>
[01:14:11.775]  </sequence>
[01:14:11.775]  
[01:14:11.799]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:14:11.799]  
[01:14:11.799]  <debugvars>
[01:14:11.799]    // Pre-defined
[01:14:11.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:11.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:11.799]    __dp=0x00000000
[01:14:11.799]    __ap=0x00000000
[01:14:11.799]    __traceout=0x00000000      (Trace Disabled)
[01:14:11.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:11.799]    __FlashAddr=0x00000000
[01:14:11.799]    __FlashLen=0x00000000
[01:14:11.799]    __FlashArg=0x00000000
[01:14:11.799]    __FlashOp=0x00000000
[01:14:11.799]    __Result=0x00000000
[01:14:11.799]  </debugvars>
[01:14:11.800]  
[01:14:11.800]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:14:11.800]    <block atomic="false" info="">
[01:14:11.800]      __var deviceID = 0;
[01:14:11.800]        // -> [deviceID <= 0x00000000]
[01:14:11.800]      __var version = 0;
[01:14:11.800]        // -> [version <= 0x00000000]
[01:14:11.800]      __var partNum = 0;
[01:14:11.800]        // -> [partNum <= 0x00000000]
[01:14:11.800]      __var manuf = 0;
[01:14:11.802]        // -> [manuf <= 0x00000000]
[01:14:11.802]      __var isMSPM0G1X0X_G3X0X = 0;
[01:14:11.802]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:14:11.802]      __var isProduction = 0;
[01:14:11.802]        // -> [isProduction <= 0x00000000]
[01:14:11.802]      __var continueId = 0;
[01:14:11.802]        // -> [continueId <= 0x00000000]
[01:14:11.802]      deviceID =   Read32(0x41C40004);
[01:14:11.808]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:14:11.808]        // -> [deviceID <= 0x2BB8802F]
[01:14:11.808]      version = deviceID >> 28;
[01:14:11.808]        // -> [version <= 0x00000002]
[01:14:11.808]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:14:11.808]        // -> [partNum <= 0x0000BB88]
[01:14:11.808]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:14:11.808]        // -> [manuf <= 0x00000017]
[01:14:11.808]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:14:11.808]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:14:11.808]      isProduction = (version > 0);
[01:14:11.810]        // -> [isProduction <= 0x00000001]
[01:14:11.810]    </block>
[01:14:11.810]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:14:11.810]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:14:11.810]        // =>  FALSE
[01:14:11.810]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:14:11.810]    </control>
[01:14:11.810]    <control if="continueId == 4" while="" timeout="0" info="">
[01:14:11.810]      // if-block "continueId == 4"
[01:14:11.810]        // =>  FALSE
[01:14:11.810]      // skip if-block "continueId == 4"
[01:14:11.810]    </control>
[01:14:11.810]    <control if="!isProduction" while="" timeout="0" info="">
[01:14:11.810]      // if-block "!isProduction"
[01:14:11.810]        // =>  FALSE
[01:14:11.810]      // skip if-block "!isProduction"
[01:14:11.810]    </control>
[01:14:11.810]  </sequence>
[01:14:11.810]  
[01:16:39.168]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:39.168]  
[01:16:39.177]  <debugvars>
[01:16:39.177]    // Pre-defined
[01:16:39.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:39.177]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:39.177]    __dp=0x00000000
[01:16:39.177]    __ap=0x00000000
[01:16:39.177]    __traceout=0x00000000      (Trace Disabled)
[01:16:39.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:39.177]    __FlashAddr=0x00000000
[01:16:39.177]    __FlashLen=0x00000000
[01:16:39.177]    __FlashArg=0x00000000
[01:16:39.177]    __FlashOp=0x00000000
[01:16:39.177]    __Result=0x00000000
[01:16:39.177]  </debugvars>
[01:16:39.177]  
[01:16:39.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:39.177]    <block atomic="false" info="">
[01:16:39.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:39.177]        // -> [isSWJ <= 0x00000001]
[01:16:39.177]      __var hasDormant = __protocol & 0x00020000;
[01:16:39.179]        // -> [hasDormant <= 0x00000000]
[01:16:39.179]      __var protType   = __protocol & 0x0000FFFF;
[01:16:39.179]        // -> [protType <= 0x00000002]
[01:16:39.179]    </block>
[01:16:39.179]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:39.179]      // if-block "protType == 1"
[01:16:39.179]        // =>  FALSE
[01:16:39.179]      // skip if-block "protType == 1"
[01:16:39.179]    </control>
[01:16:39.179]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:39.179]      // if-block "protType == 2"
[01:16:39.179]        // =>  TRUE
[01:16:39.180]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:39.180]        // if-block "isSWJ"
[01:16:39.180]          // =>  TRUE
[01:16:39.180]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:39.180]          // if-block "hasDormant"
[01:16:39.180]            // =>  FALSE
[01:16:39.180]          // skip if-block "hasDormant"
[01:16:39.180]        </control>
[01:16:39.180]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:39.180]          // if-block "!hasDormant"
[01:16:39.180]            // =>  TRUE
[01:16:39.181]          <block atomic="false" info="">
[01:16:39.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:39.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:39.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:39.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:39.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:39.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:39.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:39.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:39.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:39.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:39.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:39.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:39.194]          </block>
[01:16:39.196]          // end if-block "!hasDormant"
[01:16:39.196]        </control>
[01:16:39.196]        // end if-block "isSWJ"
[01:16:39.196]      </control>
[01:16:39.196]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:39.196]        // if-block "!isSWJ"
[01:16:39.196]          // =>  FALSE
[01:16:39.196]        // skip if-block "!isSWJ"
[01:16:39.196]      </control>
[01:16:39.197]      <block atomic="false" info="">
[01:16:39.197]        ReadDP(0x0);
[01:16:39.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:39.197]      </block>
[01:16:39.197]      // end if-block "protType == 2"
[01:16:39.197]    </control>
[01:16:39.197]  </sequence>
[01:16:39.197]  
[01:16:39.201]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:39.201]  
[01:16:39.201]  <debugvars>
[01:16:39.201]    // Pre-defined
[01:16:39.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:39.201]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:39.201]    __dp=0x00000000
[01:16:39.201]    __ap=0x00000000
[01:16:39.201]    __traceout=0x00000000      (Trace Disabled)
[01:16:39.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:39.201]    __FlashAddr=0x00000000
[01:16:39.201]    __FlashLen=0x00000000
[01:16:39.201]    __FlashArg=0x00000000
[01:16:39.201]    __FlashOp=0x00000000
[01:16:39.201]    __Result=0x00000000
[01:16:39.201]  </debugvars>
[01:16:39.201]  
[01:16:39.201]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:39.201]    <block atomic="false" info="">
[01:16:39.204]      __var SW_DP_ABORT       = 0x0;
[01:16:39.204]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:39.204]      __var DP_CTRL_STAT      = 0x4;
[01:16:39.204]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:39.204]      __var DP_SELECT         = 0x8;
[01:16:39.204]        // -> [DP_SELECT <= 0x00000008]
[01:16:39.204]      __var powered_down      = 0;
[01:16:39.204]        // -> [powered_down <= 0x00000000]
[01:16:39.204]      WriteDP(DP_SELECT, 0x00000000);
[01:16:39.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:39.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:39.211]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:39.211]        // -> [powered_down <= 0x00000001]
[01:16:39.211]    </block>
[01:16:39.211]    <control if="powered_down" while="" timeout="0" info="">
[01:16:39.215]      // if-block "powered_down"
[01:16:39.215]        // =>  TRUE
[01:16:39.215]      <block atomic="false" info="">
[01:16:39.215]        Message(0, "Debug/System power-up request sent");
[01:16:39.215]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:39.228]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:39.228]      </block>
[01:16:39.228]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:39.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:39.233]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:39.233]        // while-condition  =>  FALSE
[01:16:39.233]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:39.233]      </control>
[01:16:39.233]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:39.233]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:39.233]          // =>  FALSE
[01:16:39.233]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:39.233]      </control>
[01:16:39.233]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:39.233]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:39.233]          // =>  TRUE
[01:16:39.233]        <block atomic="false" info="">
[01:16:39.233]          Message(0, "executing SWD power up");
[01:16:39.235]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:39.235]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:39.235]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:39.244]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:39.244]        </block>
[01:16:39.244]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:39.244]      </control>
[01:16:39.244]      // end if-block "powered_down"
[01:16:39.244]    </control>
[01:16:39.244]    <block atomic="false" info="">
[01:16:39.245]      __var DEBUG_PORT_VAL    = 0;
[01:16:39.245]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:39.245]      __var ACCESS_POINT_VAL  = 0;
[01:16:39.245]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:39.245]      __ap = 1; 
[01:16:39.245]        // -> [__ap <= 0x00000001]
[01:16:39.245]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:39.248]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:39.248]      __ap = 4;
[01:16:39.248]        // -> [__ap <= 0x00000004]
[01:16:39.248]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:39.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:39.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:39.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:39.252]    </block>
[01:16:39.252]    <block atomic="false" info="">
[01:16:39.252]      __var nReset = 0x80;
[01:16:39.252]        // -> [nReset <= 0x00000080]
[01:16:39.252]      __var canReadPins = 0;
[01:16:39.252]        // -> [canReadPins <= 0x00000000]
[01:16:39.252]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:39.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:39.259]        // -> [canReadPins <= 0x00000001]
[01:16:39.259]    </block>
[01:16:39.259]    <control if="" while="1" timeout="200" info="">
[01:16:39.259]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.261]      // while "1"  (timeout="200")
[01:16:39.261]      // while-condition  =>  TRUE
[01:16:39.264]      // while "1"  (timeout="200")
[01:16:39.264]      // while-condition  =>  TRUE
[01:16:39.264]      // while "1"  (timeout="200")
[01:16:39.264]      // while-condition  =>  TRUE
[01:16:39.264]      // while "1"  (timeout="200")
[01:16:39.264]      // while-condition  =>  TRUE
[01:16:39.264]      // while "1"  (timeout="200")
[01:16:39.264]      // while-condition  =>  TRUE
[01:16:39.265]      // while "1"  (timeout="200")
[01:16:39.265]      // while-condition  =>  TRUE
[01:16:39.265]      // while "1"  (timeout="200")
[01:16:39.265]      // while-condition  =>  TRUE
[01:16:39.265]      // while "1"  (timeout="200")
[01:16:39.266]      // while-condition  =>  TRUE
[01:16:39.266]      // while "1"  (timeout="200")
[01:16:39.266]      // while-condition  =>  TRUE
[01:16:39.266]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.267]      // while "1"  (timeout="200")
[01:16:39.267]      // while-condition  =>  TRUE
[01:16:39.269]      // while "1"  (timeout="200")
[01:16:39.269]      // while  =>  TIMEOUT
[01:16:39.269]      // end while "1"
[01:16:39.269]    </control>
[01:16:39.269]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:39.269]      // if-block "canReadPins"
[01:16:39.269]        // =>  TRUE
[01:16:39.269]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:39.269]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:39.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:39.271]        // while-condition  =>  FALSE
[01:16:39.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:39.271]      </control>
[01:16:39.274]      // end if-block "canReadPins"
[01:16:39.274]    </control>
[01:16:39.274]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:39.274]      // if-block "!canReadPins"
[01:16:39.274]        // =>  FALSE
[01:16:39.274]      // skip if-block "!canReadPins"
[01:16:39.274]    </control>
[01:16:39.274]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:39.274]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:39.274]        // =>  TRUE
[01:16:39.274]      <block atomic="false" info="">
[01:16:39.274]        WriteAP(0x00, 0x190008);
[01:16:39.278]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:39.278]        WriteAP(0xF0, 0x01);
[01:16:39.281]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:39.281]      </block>
[01:16:39.281]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:39.281]    </control>
[01:16:39.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:39.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:39.281]        // =>  FALSE
[01:16:39.281]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:39.281]    </control>
[01:16:39.281]    <block atomic="false" info="">
[01:16:39.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:39.291]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:39.291]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:39.291]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:39.295]      __ap = 0; //lets make sure we reset the access point selection
[01:16:39.295]        // -> [__ap <= 0x00000000]
[01:16:39.295]    </block>
[01:16:39.295]  </sequence>
[01:16:39.295]  
[01:16:39.318]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:39.318]  
[01:16:39.318]  <debugvars>
[01:16:39.318]    // Pre-defined
[01:16:39.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:39.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:39.318]    __dp=0x00000000
[01:16:39.320]    __ap=0x00000000
[01:16:39.320]    __traceout=0x00000000      (Trace Disabled)
[01:16:39.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:39.320]    __FlashAddr=0x00000000
[01:16:39.320]    __FlashLen=0x00000000
[01:16:39.320]    __FlashArg=0x00000000
[01:16:39.320]    __FlashOp=0x00000000
[01:16:39.320]    __Result=0x00000000
[01:16:39.320]  </debugvars>
[01:16:39.320]  
[01:16:39.320]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:39.320]    <block atomic="false" info="">
[01:16:39.320]      __var deviceID = 0;
[01:16:39.321]        // -> [deviceID <= 0x00000000]
[01:16:39.321]      __var version = 0;
[01:16:39.321]        // -> [version <= 0x00000000]
[01:16:39.321]      __var partNum = 0;
[01:16:39.321]        // -> [partNum <= 0x00000000]
[01:16:39.321]      __var manuf = 0;
[01:16:39.321]        // -> [manuf <= 0x00000000]
[01:16:39.321]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:39.321]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:39.321]      __var isProduction = 0;
[01:16:39.321]        // -> [isProduction <= 0x00000000]
[01:16:39.321]      __var continueId = 0;
[01:16:39.321]        // -> [continueId <= 0x00000000]
[01:16:39.321]      deviceID =   Read32(0x41C40004);
[01:16:39.328]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:39.328]        // -> [deviceID <= 0x2BB8802F]
[01:16:39.328]      version = deviceID >> 28;
[01:16:39.328]        // -> [version <= 0x00000002]
[01:16:39.328]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:39.328]        // -> [partNum <= 0x0000BB88]
[01:16:39.328]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:39.328]        // -> [manuf <= 0x00000017]
[01:16:39.328]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:39.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:39.328]      isProduction = (version > 0);
[01:16:39.328]        // -> [isProduction <= 0x00000001]
[01:16:39.328]    </block>
[01:16:39.331]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:39.331]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:39.331]        // =>  FALSE
[01:16:39.331]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:39.331]    </control>
[01:16:39.331]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:39.331]      // if-block "continueId == 4"
[01:16:39.331]        // =>  FALSE
[01:16:39.331]      // skip if-block "continueId == 4"
[01:16:39.331]    </control>
[01:16:39.331]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:39.331]      // if-block "!isProduction"
[01:16:39.331]        // =>  FALSE
[01:16:39.331]      // skip if-block "!isProduction"
[01:16:39.331]    </control>
[01:16:39.331]  </sequence>
[01:16:39.331]  
[01:18:20.284]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:18:20.284]  
[01:18:20.295]  <debugvars>
[01:18:20.295]    // Pre-defined
[01:18:20.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:20.295]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:20.295]    __dp=0x00000000
[01:18:20.295]    __ap=0x00000000
[01:18:20.295]    __traceout=0x00000000      (Trace Disabled)
[01:18:20.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:20.295]    __FlashAddr=0x00000000
[01:18:20.295]    __FlashLen=0x00000000
[01:18:20.295]    __FlashArg=0x00000000
[01:18:20.295]    __FlashOp=0x00000000
[01:18:20.295]    __Result=0x00000000
[01:18:20.295]  </debugvars>
[01:18:20.295]  
[01:18:20.295]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:18:20.295]    <block atomic="false" info="">
[01:18:20.295]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:18:20.295]        // -> [isSWJ <= 0x00000001]
[01:18:20.295]      __var hasDormant = __protocol & 0x00020000;
[01:18:20.295]        // -> [hasDormant <= 0x00000000]
[01:18:20.295]      __var protType   = __protocol & 0x0000FFFF;
[01:18:20.295]        // -> [protType <= 0x00000002]
[01:18:20.295]    </block>
[01:18:20.295]    <control if="protType == 1" while="" timeout="0" info="">
[01:18:20.295]      // if-block "protType == 1"
[01:18:20.295]        // =>  FALSE
[01:18:20.295]      // skip if-block "protType == 1"
[01:18:20.295]    </control>
[01:18:20.295]    <control if="protType == 2" while="" timeout="0" info="">
[01:18:20.295]      // if-block "protType == 2"
[01:18:20.295]        // =>  TRUE
[01:18:20.299]      <control if="isSWJ" while="" timeout="0" info="">
[01:18:20.299]        // if-block "isSWJ"
[01:18:20.299]          // =>  TRUE
[01:18:20.299]        <control if="hasDormant" while="" timeout="0" info="">
[01:18:20.299]          // if-block "hasDormant"
[01:18:20.299]            // =>  FALSE
[01:18:20.299]          // skip if-block "hasDormant"
[01:18:20.299]        </control>
[01:18:20.299]        <control if="!hasDormant" while="" timeout="0" info="">
[01:18:20.299]          // if-block "!hasDormant"
[01:18:20.299]            // =>  TRUE
[01:18:20.299]          <block atomic="false" info="">
[01:18:20.299]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:18:20.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:20.299]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:18:20.303]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:18:20.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:18:20.303]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:20.303]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:18:20.303]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:18:20.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:18:20.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:20.307]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:18:20.307]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:18:20.307]          </block>
[01:18:20.307]          // end if-block "!hasDormant"
[01:18:20.307]        </control>
[01:18:20.307]        // end if-block "isSWJ"
[01:18:20.307]      </control>
[01:18:20.307]      <control if="!isSWJ" while="" timeout="0" info="">
[01:18:20.307]        // if-block "!isSWJ"
[01:18:20.307]          // =>  FALSE
[01:18:20.307]        // skip if-block "!isSWJ"
[01:18:20.307]      </control>
[01:18:20.307]      <block atomic="false" info="">
[01:18:20.307]        ReadDP(0x0);
[01:18:20.311]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:18:20.311]      </block>
[01:18:20.311]      // end if-block "protType == 2"
[01:18:20.311]    </control>
[01:18:20.311]  </sequence>
[01:18:20.313]  
[01:18:20.316]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:18:20.316]  
[01:18:20.316]  <debugvars>
[01:18:20.316]    // Pre-defined
[01:18:20.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:20.316]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:20.316]    __dp=0x00000000
[01:18:20.316]    __ap=0x00000000
[01:18:20.316]    __traceout=0x00000000      (Trace Disabled)
[01:18:20.316]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:20.316]    __FlashAddr=0x00000000
[01:18:20.316]    __FlashLen=0x00000000
[01:18:20.316]    __FlashArg=0x00000000
[01:18:20.316]    __FlashOp=0x00000000
[01:18:20.318]    __Result=0x00000000
[01:18:20.318]  </debugvars>
[01:18:20.318]  
[01:18:20.318]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:18:20.318]    <block atomic="false" info="">
[01:18:20.318]      __var SW_DP_ABORT       = 0x0;
[01:18:20.318]        // -> [SW_DP_ABORT <= 0x00000000]
[01:18:20.318]      __var DP_CTRL_STAT      = 0x4;
[01:18:20.318]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:18:20.318]      __var DP_SELECT         = 0x8;
[01:18:20.319]        // -> [DP_SELECT <= 0x00000008]
[01:18:20.319]      __var powered_down      = 0;
[01:18:20.319]        // -> [powered_down <= 0x00000000]
[01:18:20.319]      WriteDP(DP_SELECT, 0x00000000);
[01:18:20.320]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:18:20.320]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:18:20.322]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:18:20.322]        // -> [powered_down <= 0x00000001]
[01:18:20.322]    </block>
[01:18:20.322]    <control if="powered_down" while="" timeout="0" info="">
[01:18:20.322]      // if-block "powered_down"
[01:18:20.322]        // =>  TRUE
[01:18:20.322]      <block atomic="false" info="">
[01:18:20.322]        Message(0, "Debug/System power-up request sent");
[01:18:20.325]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:18:20.328]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:18:20.328]      </block>
[01:18:20.328]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:18:20.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:18:20.328]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:18:20.328]        // while-condition  =>  FALSE
[01:18:20.328]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:18:20.328]      </control>
[01:18:20.328]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:18:20.328]        // if-block "(__protocol & 0xFFFF) == 1"
[01:18:20.328]          // =>  FALSE
[01:18:20.328]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:18:20.328]      </control>
[01:18:20.328]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:18:20.328]        // if-block "(__protocol & 0xFFFF) == 2"
[01:18:20.332]          // =>  TRUE
[01:18:20.332]        <block atomic="false" info="">
[01:18:20.332]          Message(0, "executing SWD power up");
[01:18:20.333]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:18:20.337]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:18:20.338]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:18:20.339]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:18:20.339]        </block>
[01:18:20.339]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:18:20.339]      </control>
[01:18:20.339]      // end if-block "powered_down"
[01:18:20.339]    </control>
[01:18:20.339]    <block atomic="false" info="">
[01:18:20.339]      __var DEBUG_PORT_VAL    = 0;
[01:18:20.339]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:18:20.339]      __var ACCESS_POINT_VAL  = 0;
[01:18:20.340]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:18:20.341]      __ap = 1; 
[01:18:20.341]        // -> [__ap <= 0x00000001]
[01:18:20.341]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:18:20.347]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:18:20.347]      __ap = 4;
[01:18:20.347]        // -> [__ap <= 0x00000004]
[01:18:20.347]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:20.351]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:18:20.351]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:18:20.351]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:20.353]    </block>
[01:18:20.353]    <block atomic="false" info="">
[01:18:20.353]      __var nReset = 0x80;
[01:18:20.353]        // -> [nReset <= 0x00000080]
[01:18:20.353]      __var canReadPins = 0;
[01:18:20.353]        // -> [canReadPins <= 0x00000000]
[01:18:20.353]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:18:20.357]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:18:20.357]        // -> [canReadPins <= 0x00000001]
[01:18:20.357]    </block>
[01:18:20.357]    <control if="" while="1" timeout="200" info="">
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.357]      // while "1"  (timeout="200")
[01:18:20.357]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.361]      // while "1"  (timeout="200")
[01:18:20.361]      // while-condition  =>  TRUE
[01:18:20.363]      // while "1"  (timeout="200")
[01:18:20.363]      // while  =>  TIMEOUT
[01:18:20.363]      // end while "1"
[01:18:20.363]    </control>
[01:18:20.363]    <control if="canReadPins" while="" timeout="0" info="">
[01:18:20.363]      // if-block "canReadPins"
[01:18:20.363]        // =>  TRUE
[01:18:20.363]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:18:20.363]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:18:20.365]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:18:20.365]        // while-condition  =>  FALSE
[01:18:20.365]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:18:20.365]      </control>
[01:18:20.365]      // end if-block "canReadPins"
[01:18:20.365]    </control>
[01:18:20.365]    <control if="!canReadPins" while="" timeout="0" info="">
[01:18:20.365]      // if-block "!canReadPins"
[01:18:20.365]        // =>  FALSE
[01:18:20.365]      // skip if-block "!canReadPins"
[01:18:20.365]    </control>
[01:18:20.365]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:18:20.365]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:20.365]        // =>  TRUE
[01:18:20.365]      <block atomic="false" info="">
[01:18:20.365]        WriteAP(0x00, 0x190008);
[01:18:20.369]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:20.369]        WriteAP(0xF0, 0x01);
[01:18:20.373]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:20.373]      </block>
[01:18:20.373]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:20.373]    </control>
[01:18:20.373]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:18:20.373]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:20.373]        // =>  FALSE
[01:18:20.373]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:20.373]    </control>
[01:18:20.373]    <block atomic="false" info="">
[01:18:20.373]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:20.378]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:18:20.378]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:18:20.378]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:20.383]      __ap = 0; //lets make sure we reset the access point selection
[01:18:20.383]        // -> [__ap <= 0x00000000]
[01:18:20.384]    </block>
[01:18:20.384]  </sequence>
[01:18:20.384]  
[01:18:20.406]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:18:20.406]  
[01:18:20.406]  <debugvars>
[01:18:20.406]    // Pre-defined
[01:18:20.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:20.406]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:20.406]    __dp=0x00000000
[01:18:20.406]    __ap=0x00000000
[01:18:20.406]    __traceout=0x00000000      (Trace Disabled)
[01:18:20.406]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:20.406]    __FlashAddr=0x00000000
[01:18:20.406]    __FlashLen=0x00000000
[01:18:20.406]    __FlashArg=0x00000000
[01:18:20.406]    __FlashOp=0x00000000
[01:18:20.406]    __Result=0x00000000
[01:18:20.406]  </debugvars>
[01:18:20.406]  
[01:18:20.406]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:18:20.406]    <block atomic="false" info="">
[01:18:20.406]      __var deviceID = 0;
[01:18:20.406]        // -> [deviceID <= 0x00000000]
[01:18:20.406]      __var version = 0;
[01:18:20.406]        // -> [version <= 0x00000000]
[01:18:20.406]      __var partNum = 0;
[01:18:20.406]        // -> [partNum <= 0x00000000]
[01:18:20.406]      __var manuf = 0;
[01:18:20.406]        // -> [manuf <= 0x00000000]
[01:18:20.410]      __var isMSPM0G1X0X_G3X0X = 0;
[01:18:20.410]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:18:20.410]      __var isProduction = 0;
[01:18:20.410]        // -> [isProduction <= 0x00000000]
[01:18:20.410]      __var continueId = 0;
[01:18:20.410]        // -> [continueId <= 0x00000000]
[01:18:20.410]      deviceID =   Read32(0x41C40004);
[01:18:20.419]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:18:20.419]        // -> [deviceID <= 0x2BB8802F]
[01:18:20.419]      version = deviceID >> 28;
[01:18:20.419]        // -> [version <= 0x00000002]
[01:18:20.419]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:18:20.419]        // -> [partNum <= 0x0000BB88]
[01:18:20.419]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:18:20.419]        // -> [manuf <= 0x00000017]
[01:18:20.419]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:18:20.419]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:18:20.419]      isProduction = (version > 0);
[01:18:20.419]        // -> [isProduction <= 0x00000001]
[01:18:20.419]    </block>
[01:18:20.419]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:18:20.419]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:18:20.419]        // =>  FALSE
[01:18:20.419]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:18:20.419]    </control>
[01:18:20.419]    <control if="continueId == 4" while="" timeout="0" info="">
[01:18:20.419]      // if-block "continueId == 4"
[01:18:20.419]        // =>  FALSE
[01:18:20.419]      // skip if-block "continueId == 4"
[01:18:20.419]    </control>
[01:18:20.419]    <control if="!isProduction" while="" timeout="0" info="">
[01:18:20.419]      // if-block "!isProduction"
[01:18:20.419]        // =>  FALSE
[01:18:20.423]      // skip if-block "!isProduction"
[01:18:20.423]    </control>
[01:18:20.423]  </sequence>
[01:18:20.423]  
[01:19:59.108]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:19:59.108]  
[01:19:59.108]  <debugvars>
[01:19:59.108]    // Pre-defined
[01:19:59.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:59.108]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:59.108]    __dp=0x00000000
[01:19:59.108]    __ap=0x00000000
[01:19:59.108]    __traceout=0x00000000      (Trace Disabled)
[01:19:59.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:59.108]    __FlashAddr=0x00000000
[01:19:59.108]    __FlashLen=0x00000000
[01:19:59.108]    __FlashArg=0x00000000
[01:19:59.108]    __FlashOp=0x00000000
[01:19:59.108]    __Result=0x00000000
[01:19:59.108]  </debugvars>
[01:19:59.108]  
[01:19:59.108]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:19:59.108]    <block atomic="false" info="">
[01:19:59.108]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:19:59.111]        // -> [isSWJ <= 0x00000001]
[01:19:59.111]      __var hasDormant = __protocol & 0x00020000;
[01:19:59.111]        // -> [hasDormant <= 0x00000000]
[01:19:59.111]      __var protType   = __protocol & 0x0000FFFF;
[01:19:59.111]        // -> [protType <= 0x00000002]
[01:19:59.111]    </block>
[01:19:59.111]    <control if="protType == 1" while="" timeout="0" info="">
[01:19:59.111]      // if-block "protType == 1"
[01:19:59.111]        // =>  FALSE
[01:19:59.111]      // skip if-block "protType == 1"
[01:19:59.111]    </control>
[01:19:59.111]    <control if="protType == 2" while="" timeout="0" info="">
[01:19:59.113]      // if-block "protType == 2"
[01:19:59.113]        // =>  TRUE
[01:19:59.113]      <control if="isSWJ" while="" timeout="0" info="">
[01:19:59.113]        // if-block "isSWJ"
[01:19:59.113]          // =>  TRUE
[01:19:59.113]        <control if="hasDormant" while="" timeout="0" info="">
[01:19:59.113]          // if-block "hasDormant"
[01:19:59.113]            // =>  FALSE
[01:19:59.113]          // skip if-block "hasDormant"
[01:19:59.113]        </control>
[01:19:59.113]        <control if="!hasDormant" while="" timeout="0" info="">
[01:19:59.113]          // if-block "!hasDormant"
[01:19:59.113]            // =>  TRUE
[01:19:59.114]          <block atomic="false" info="">
[01:19:59.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:19:59.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:59.116]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:19:59.118]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:19:59.118]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:19:59.131]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:59.131]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:19:59.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:19:59.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:19:59.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:59.136]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:19:59.140]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:19:59.140]          </block>
[01:19:59.140]          // end if-block "!hasDormant"
[01:19:59.140]        </control>
[01:19:59.140]        // end if-block "isSWJ"
[01:19:59.140]      </control>
[01:19:59.140]      <control if="!isSWJ" while="" timeout="0" info="">
[01:19:59.140]        // if-block "!isSWJ"
[01:19:59.140]          // =>  FALSE
[01:19:59.140]        // skip if-block "!isSWJ"
[01:19:59.140]      </control>
[01:19:59.140]      <block atomic="false" info="">
[01:19:59.140]        ReadDP(0x0);
[01:19:59.140]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:19:59.140]      </block>
[01:19:59.140]      // end if-block "protType == 2"
[01:19:59.144]    </control>
[01:19:59.144]  </sequence>
[01:19:59.144]  
[01:19:59.148]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:19:59.148]  
[01:19:59.148]  <debugvars>
[01:19:59.148]    // Pre-defined
[01:19:59.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:59.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:59.148]    __dp=0x00000000
[01:19:59.148]    __ap=0x00000000
[01:19:59.149]    __traceout=0x00000000      (Trace Disabled)
[01:19:59.149]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:59.149]    __FlashAddr=0x00000000
[01:19:59.149]    __FlashLen=0x00000000
[01:19:59.149]    __FlashArg=0x00000000
[01:19:59.149]    __FlashOp=0x00000000
[01:19:59.149]    __Result=0x00000000
[01:19:59.149]  </debugvars>
[01:19:59.149]  
[01:19:59.149]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:19:59.149]    <block atomic="false" info="">
[01:19:59.149]      __var SW_DP_ABORT       = 0x0;
[01:19:59.149]        // -> [SW_DP_ABORT <= 0x00000000]
[01:19:59.149]      __var DP_CTRL_STAT      = 0x4;
[01:19:59.150]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:19:59.150]      __var DP_SELECT         = 0x8;
[01:19:59.150]        // -> [DP_SELECT <= 0x00000008]
[01:19:59.150]      __var powered_down      = 0;
[01:19:59.150]        // -> [powered_down <= 0x00000000]
[01:19:59.150]      WriteDP(DP_SELECT, 0x00000000);
[01:19:59.156]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:19:59.156]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:19:59.156]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:19:59.156]        // -> [powered_down <= 0x00000001]
[01:19:59.156]    </block>
[01:19:59.156]    <control if="powered_down" while="" timeout="0" info="">
[01:19:59.156]      // if-block "powered_down"
[01:19:59.156]        // =>  TRUE
[01:19:59.156]      <block atomic="false" info="">
[01:19:59.156]        Message(0, "Debug/System power-up request sent");
[01:19:59.160]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:19:59.164]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:19:59.164]      </block>
[01:19:59.164]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:19:59.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:19:59.165]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:19:59.165]        // while-condition  =>  FALSE
[01:19:59.165]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:19:59.165]      </control>
[01:19:59.165]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:19:59.165]        // if-block "(__protocol & 0xFFFF) == 1"
[01:19:59.165]          // =>  FALSE
[01:19:59.165]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:19:59.167]      </control>
[01:19:59.167]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:19:59.167]        // if-block "(__protocol & 0xFFFF) == 2"
[01:19:59.167]          // =>  TRUE
[01:19:59.167]        <block atomic="false" info="">
[01:19:59.167]          Message(0, "executing SWD power up");
[01:19:59.168]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:19:59.173]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:19:59.173]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:19:59.177]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:19:59.177]        </block>
[01:19:59.177]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:19:59.177]      </control>
[01:19:59.177]      // end if-block "powered_down"
[01:19:59.177]    </control>
[01:19:59.177]    <block atomic="false" info="">
[01:19:59.177]      __var DEBUG_PORT_VAL    = 0;
[01:19:59.177]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:19:59.177]      __var ACCESS_POINT_VAL  = 0;
[01:19:59.177]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:19:59.177]      __ap = 1; 
[01:19:59.177]        // -> [__ap <= 0x00000001]
[01:19:59.177]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:19:59.181]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:19:59.181]      __ap = 4;
[01:19:59.181]        // -> [__ap <= 0x00000004]
[01:19:59.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:59.186]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:19:59.186]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:19:59.186]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:59.188]    </block>
[01:19:59.188]    <block atomic="false" info="">
[01:19:59.188]      __var nReset = 0x80;
[01:19:59.188]        // -> [nReset <= 0x00000080]
[01:19:59.188]      __var canReadPins = 0;
[01:19:59.188]        // -> [canReadPins <= 0x00000000]
[01:19:59.188]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:19:59.191]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:19:59.191]        // -> [canReadPins <= 0x00000001]
[01:19:59.191]    </block>
[01:19:59.191]    <control if="" while="1" timeout="200" info="">
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.191]      // while-condition  =>  TRUE
[01:19:59.191]      // while "1"  (timeout="200")
[01:19:59.193]      // while-condition  =>  TRUE
[01:19:59.193]      // while "1"  (timeout="200")
[01:19:59.193]      // while-condition  =>  TRUE
[01:19:59.193]      // while "1"  (timeout="200")
[01:19:59.193]      // while-condition  =>  TRUE
[01:19:59.193]      // while "1"  (timeout="200")
[01:19:59.193]      // while-condition  =>  TRUE
[01:19:59.193]      // while "1"  (timeout="200")
[01:19:59.193]      // while-condition  =>  TRUE
[01:19:59.193]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.194]      // while "1"  (timeout="200")
[01:19:59.194]      // while-condition  =>  TRUE
[01:19:59.195]      // while "1"  (timeout="200")
[01:19:59.195]      // while-condition  =>  TRUE
[01:19:59.195]      // while "1"  (timeout="200")
[01:19:59.195]      // while-condition  =>  TRUE
[01:19:59.195]      // while "1"  (timeout="200")
[01:19:59.195]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.196]      // while "1"  (timeout="200")
[01:19:59.196]      // while-condition  =>  TRUE
[01:19:59.198]      // while "1"  (timeout="200")
[01:19:59.198]      // while-condition  =>  TRUE
[01:19:59.198]      // while "1"  (timeout="200")
[01:19:59.198]      // while-condition  =>  TRUE
[01:19:59.198]      // while "1"  (timeout="200")
[01:19:59.198]      // while-condition  =>  TRUE
[01:19:59.198]      // while "1"  (timeout="200")
[01:19:59.198]      // while-condition  =>  TRUE
[01:19:59.198]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.199]      // while-condition  =>  TRUE
[01:19:59.199]      // while "1"  (timeout="200")
[01:19:59.201]      // while-condition  =>  TRUE
[01:19:59.201]      // while "1"  (timeout="200")
[01:19:59.201]      // while-condition  =>  TRUE
[01:19:59.201]      // while "1"  (timeout="200")
[01:19:59.201]      // while-condition  =>  TRUE
[01:19:59.201]      // while "1"  (timeout="200")
[01:19:59.202]      // while-condition  =>  TRUE
[01:19:59.202]      // while "1"  (timeout="200")
[01:19:59.202]      // while-condition  =>  TRUE
[01:19:59.202]      // while "1"  (timeout="200")
[01:19:59.202]      // while-condition  =>  TRUE
[01:19:59.202]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.203]      // while "1"  (timeout="200")
[01:19:59.203]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.205]      // while "1"  (timeout="200")
[01:19:59.205]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.206]      // while "1"  (timeout="200")
[01:19:59.206]      // while-condition  =>  TRUE
[01:19:59.208]      // while "1"  (timeout="200")
[01:19:59.208]      // while  =>  TIMEOUT
[01:19:59.208]      // end while "1"
[01:19:59.208]    </control>
[01:19:59.208]    <control if="canReadPins" while="" timeout="0" info="">
[01:19:59.208]      // if-block "canReadPins"
[01:19:59.208]        // =>  TRUE
[01:19:59.208]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:19:59.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:19:59.211]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:19:59.211]        // while-condition  =>  FALSE
[01:19:59.211]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:19:59.211]      </control>
[01:19:59.211]      // end if-block "canReadPins"
[01:19:59.211]    </control>
[01:19:59.211]    <control if="!canReadPins" while="" timeout="0" info="">
[01:19:59.211]      // if-block "!canReadPins"
[01:19:59.211]        // =>  FALSE
[01:19:59.211]      // skip if-block "!canReadPins"
[01:19:59.211]    </control>
[01:19:59.211]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:19:59.211]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:59.211]        // =>  TRUE
[01:19:59.211]      <block atomic="false" info="">
[01:19:59.211]        WriteAP(0x00, 0x190008);
[01:19:59.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:59.211]        WriteAP(0xF0, 0x01);
[01:19:59.217]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:59.217]      </block>
[01:19:59.217]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:59.217]    </control>
[01:19:59.219]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:19:59.219]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:59.219]        // =>  FALSE
[01:19:59.219]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:59.219]    </control>
[01:19:59.219]    <block atomic="false" info="">
[01:19:59.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:59.223]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:19:59.225]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:19:59.225]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:59.225]      __ap = 0; //lets make sure we reset the access point selection
[01:19:59.225]        // -> [__ap <= 0x00000000]
[01:19:59.225]    </block>
[01:19:59.225]  </sequence>
[01:19:59.225]  
[01:19:59.248]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:19:59.248]  
[01:19:59.248]  <debugvars>
[01:19:59.248]    // Pre-defined
[01:19:59.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:59.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:59.248]    __dp=0x00000000
[01:19:59.248]    __ap=0x00000000
[01:19:59.248]    __traceout=0x00000000      (Trace Disabled)
[01:19:59.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:59.248]    __FlashAddr=0x00000000
[01:19:59.248]    __FlashLen=0x00000000
[01:19:59.248]    __FlashArg=0x00000000
[01:19:59.248]    __FlashOp=0x00000000
[01:19:59.248]    __Result=0x00000000
[01:19:59.248]  </debugvars>
[01:19:59.252]  
[01:19:59.252]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:19:59.252]    <block atomic="false" info="">
[01:19:59.252]      __var deviceID = 0;
[01:19:59.252]        // -> [deviceID <= 0x00000000]
[01:19:59.252]      __var version = 0;
[01:19:59.252]        // -> [version <= 0x00000000]
[01:19:59.252]      __var partNum = 0;
[01:19:59.252]        // -> [partNum <= 0x00000000]
[01:19:59.252]      __var manuf = 0;
[01:19:59.252]        // -> [manuf <= 0x00000000]
[01:19:59.253]      __var isMSPM0G1X0X_G3X0X = 0;
[01:19:59.253]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:19:59.253]      __var isProduction = 0;
[01:19:59.253]        // -> [isProduction <= 0x00000000]
[01:19:59.253]      __var continueId = 0;
[01:19:59.253]        // -> [continueId <= 0x00000000]
[01:19:59.253]      deviceID =   Read32(0x41C40004);
[01:19:59.259]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:19:59.259]        // -> [deviceID <= 0x2BB8802F]
[01:19:59.259]      version = deviceID >> 28;
[01:19:59.259]        // -> [version <= 0x00000002]
[01:19:59.259]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:19:59.259]        // -> [partNum <= 0x0000BB88]
[01:19:59.259]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:19:59.259]        // -> [manuf <= 0x00000017]
[01:19:59.259]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:19:59.259]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:19:59.259]      isProduction = (version > 0);
[01:19:59.259]        // -> [isProduction <= 0x00000001]
[01:19:59.259]    </block>
[01:19:59.259]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:19:59.259]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:19:59.259]        // =>  FALSE
[01:19:59.259]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:19:59.259]    </control>
[01:19:59.259]    <control if="continueId == 4" while="" timeout="0" info="">
[01:19:59.261]      // if-block "continueId == 4"
[01:19:59.261]        // =>  FALSE
[01:19:59.261]      // skip if-block "continueId == 4"
[01:19:59.261]    </control>
[01:19:59.261]    <control if="!isProduction" while="" timeout="0" info="">
[01:19:59.261]      // if-block "!isProduction"
[01:19:59.261]        // =>  FALSE
[01:19:59.261]      // skip if-block "!isProduction"
[01:19:59.261]    </control>
[01:19:59.261]  </sequence>
[01:19:59.261]  
[01:21:58.196]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:21:58.196]  
[01:21:58.196]  <debugvars>
[01:21:58.196]    // Pre-defined
[01:21:58.196]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:58.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:58.198]    __dp=0x00000000
[01:21:58.198]    __ap=0x00000000
[01:21:58.198]    __traceout=0x00000000      (Trace Disabled)
[01:21:58.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:58.198]    __FlashAddr=0x00000000
[01:21:58.198]    __FlashLen=0x00000000
[01:21:58.198]    __FlashArg=0x00000000
[01:21:58.198]    __FlashOp=0x00000000
[01:21:58.198]    __Result=0x00000000
[01:21:58.198]  </debugvars>
[01:21:58.198]  
[01:21:58.198]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:21:58.198]    <block atomic="false" info="">
[01:21:58.198]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:21:58.198]        // -> [isSWJ <= 0x00000001]
[01:21:58.198]      __var hasDormant = __protocol & 0x00020000;
[01:21:58.198]        // -> [hasDormant <= 0x00000000]
[01:21:58.200]      __var protType   = __protocol & 0x0000FFFF;
[01:21:58.200]        // -> [protType <= 0x00000002]
[01:21:58.200]    </block>
[01:21:58.200]    <control if="protType == 1" while="" timeout="0" info="">
[01:21:58.200]      // if-block "protType == 1"
[01:21:58.200]        // =>  FALSE
[01:21:58.200]      // skip if-block "protType == 1"
[01:21:58.200]    </control>
[01:21:58.200]    <control if="protType == 2" while="" timeout="0" info="">
[01:21:58.200]      // if-block "protType == 2"
[01:21:58.200]        // =>  TRUE
[01:21:58.200]      <control if="isSWJ" while="" timeout="0" info="">
[01:21:58.200]        // if-block "isSWJ"
[01:21:58.200]          // =>  TRUE
[01:21:58.200]        <control if="hasDormant" while="" timeout="0" info="">
[01:21:58.200]          // if-block "hasDormant"
[01:21:58.200]            // =>  FALSE
[01:21:58.202]          // skip if-block "hasDormant"
[01:21:58.202]        </control>
[01:21:58.202]        <control if="!hasDormant" while="" timeout="0" info="">
[01:21:58.202]          // if-block "!hasDormant"
[01:21:58.202]            // =>  TRUE
[01:21:58.202]          <block atomic="false" info="">
[01:21:58.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:21:58.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:58.202]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:21:58.204]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:21:58.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:21:58.204]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:58.204]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:21:58.208]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:21:58.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:21:58.208]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:58.208]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:21:58.212]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:21:58.212]          </block>
[01:21:58.212]          // end if-block "!hasDormant"
[01:21:58.212]        </control>
[01:21:58.212]        // end if-block "isSWJ"
[01:21:58.212]      </control>
[01:21:58.212]      <control if="!isSWJ" while="" timeout="0" info="">
[01:21:58.212]        // if-block "!isSWJ"
[01:21:58.212]          // =>  FALSE
[01:21:58.212]        // skip if-block "!isSWJ"
[01:21:58.212]      </control>
[01:21:58.212]      <block atomic="false" info="">
[01:21:58.212]        ReadDP(0x0);
[01:21:58.212]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:21:58.212]      </block>
[01:21:58.216]      // end if-block "protType == 2"
[01:21:58.216]    </control>
[01:21:58.216]  </sequence>
[01:21:58.216]  
[01:21:58.220]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:21:58.220]  
[01:21:58.220]  <debugvars>
[01:21:58.220]    // Pre-defined
[01:21:58.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:58.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:58.220]    __dp=0x00000000
[01:21:58.220]    __ap=0x00000000
[01:21:58.220]    __traceout=0x00000000      (Trace Disabled)
[01:21:58.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:58.220]    __FlashAddr=0x00000000
[01:21:58.220]    __FlashLen=0x00000000
[01:21:58.220]    __FlashArg=0x00000000
[01:21:58.220]    __FlashOp=0x00000000
[01:21:58.220]    __Result=0x00000000
[01:21:58.220]  </debugvars>
[01:21:58.220]  
[01:21:58.220]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:21:58.220]    <block atomic="false" info="">
[01:21:58.220]      __var SW_DP_ABORT       = 0x0;
[01:21:58.220]        // -> [SW_DP_ABORT <= 0x00000000]
[01:21:58.220]      __var DP_CTRL_STAT      = 0x4;
[01:21:58.220]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:21:58.220]      __var DP_SELECT         = 0x8;
[01:21:58.220]        // -> [DP_SELECT <= 0x00000008]
[01:21:58.220]      __var powered_down      = 0;
[01:21:58.220]        // -> [powered_down <= 0x00000000]
[01:21:58.220]      WriteDP(DP_SELECT, 0x00000000);
[01:21:58.228]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:21:58.228]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:21:58.228]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:21:58.228]        // -> [powered_down <= 0x00000001]
[01:21:58.228]    </block>
[01:21:58.232]    <control if="powered_down" while="" timeout="0" info="">
[01:21:58.232]      // if-block "powered_down"
[01:21:58.232]        // =>  TRUE
[01:21:58.232]      <block atomic="false" info="">
[01:21:58.232]        Message(0, "Debug/System power-up request sent");
[01:21:58.232]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:21:58.236]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:21:58.236]      </block>
[01:21:58.236]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:21:58.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:21:58.238]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:21:58.238]        // while-condition  =>  FALSE
[01:21:58.238]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:21:58.238]      </control>
[01:21:58.238]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:21:58.238]        // if-block "(__protocol & 0xFFFF) == 1"
[01:21:58.238]          // =>  FALSE
[01:21:58.238]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:21:58.238]      </control>
[01:21:58.238]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:21:58.238]        // if-block "(__protocol & 0xFFFF) == 2"
[01:21:58.238]          // =>  TRUE
[01:21:58.238]        <block atomic="false" info="">
[01:21:58.238]          Message(0, "executing SWD power up");
[01:21:58.240]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:21:58.240]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:21:58.240]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:21:58.244]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:21:58.244]        </block>
[01:21:58.244]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:21:58.244]      </control>
[01:21:58.244]      // end if-block "powered_down"
[01:21:58.244]    </control>
[01:21:58.244]    <block atomic="false" info="">
[01:21:58.244]      __var DEBUG_PORT_VAL    = 0;
[01:21:58.244]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:21:58.244]      __var ACCESS_POINT_VAL  = 0;
[01:21:58.244]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:21:58.244]      __ap = 1; 
[01:21:58.244]        // -> [__ap <= 0x00000001]
[01:21:58.244]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:21:58.252]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:21:58.252]      __ap = 4;
[01:21:58.252]        // -> [__ap <= 0x00000004]
[01:21:58.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:21:58.259]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:21:58.259]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:21:58.259]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:21:58.260]    </block>
[01:21:58.260]    <block atomic="false" info="">
[01:21:58.260]      __var nReset = 0x80;
[01:21:58.260]        // -> [nReset <= 0x00000080]
[01:21:58.260]      __var canReadPins = 0;
[01:21:58.260]        // -> [canReadPins <= 0x00000000]
[01:21:58.260]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:21:58.262]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:21:58.263]        // -> [canReadPins <= 0x00000001]
[01:21:58.263]    </block>
[01:21:58.263]    <control if="" while="1" timeout="200" info="">
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.263]      // while "1"  (timeout="200")
[01:21:58.263]      // while-condition  =>  TRUE
[01:21:58.266]      // while "1"  (timeout="200")
[01:21:58.266]      // while-condition  =>  TRUE
[01:21:58.266]      // while "1"  (timeout="200")
[01:21:58.266]      // while-condition  =>  TRUE
[01:21:58.266]      // while "1"  (timeout="200")
[01:21:58.266]      // while-condition  =>  TRUE
[01:21:58.266]      // while "1"  (timeout="200")
[01:21:58.266]      // while-condition  =>  TRUE
[01:21:58.266]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.268]      // while "1"  (timeout="200")
[01:21:58.268]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.269]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.269]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.269]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.269]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.269]      // while-condition  =>  TRUE
[01:21:58.269]      // while "1"  (timeout="200")
[01:21:58.270]      // while-condition  =>  TRUE
[01:21:58.270]      // while "1"  (timeout="200")
[01:21:58.270]      // while  =>  TIMEOUT
[01:21:58.270]      // end while "1"
[01:21:58.270]    </control>
[01:21:58.270]    <control if="canReadPins" while="" timeout="0" info="">
[01:21:58.270]      // if-block "canReadPins"
[01:21:58.270]        // =>  TRUE
[01:21:58.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:21:58.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:21:58.272]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:21:58.272]        // while-condition  =>  FALSE
[01:21:58.272]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:21:58.272]      </control>
[01:21:58.272]      // end if-block "canReadPins"
[01:21:58.272]    </control>
[01:21:58.272]    <control if="!canReadPins" while="" timeout="0" info="">
[01:21:58.273]      // if-block "!canReadPins"
[01:21:58.273]        // =>  FALSE
[01:21:58.273]      // skip if-block "!canReadPins"
[01:21:58.273]    </control>
[01:21:58.273]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:21:58.273]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:21:58.273]        // =>  TRUE
[01:21:58.273]      <block atomic="false" info="">
[01:21:58.273]        WriteAP(0x00, 0x190008);
[01:21:58.279]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:21:58.279]        WriteAP(0xF0, 0x01);
[01:21:58.283]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:21:58.283]      </block>
[01:21:58.283]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:21:58.283]    </control>
[01:21:58.285]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:21:58.285]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:21:58.285]        // =>  FALSE
[01:21:58.285]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:21:58.285]    </control>
[01:21:58.285]    <block atomic="false" info="">
[01:21:58.285]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:21:58.289]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:21:58.289]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:21:58.289]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:21:58.290]      __ap = 0; //lets make sure we reset the access point selection
[01:21:58.290]        // -> [__ap <= 0x00000000]
[01:21:58.290]    </block>
[01:21:58.290]  </sequence>
[01:21:58.290]  
[01:21:58.317]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:21:58.317]  
[01:21:58.317]  <debugvars>
[01:21:58.317]    // Pre-defined
[01:21:58.317]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:58.317]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:58.318]    __dp=0x00000000
[01:21:58.318]    __ap=0x00000000
[01:21:58.318]    __traceout=0x00000000      (Trace Disabled)
[01:21:58.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:58.318]    __FlashAddr=0x00000000
[01:21:58.318]    __FlashLen=0x00000000
[01:21:58.318]    __FlashArg=0x00000000
[01:21:58.318]    __FlashOp=0x00000000
[01:21:58.318]    __Result=0x00000000
[01:21:58.318]  </debugvars>
[01:21:58.318]  
[01:21:58.318]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:21:58.319]    <block atomic="false" info="">
[01:21:58.319]      __var deviceID = 0;
[01:21:58.319]        // -> [deviceID <= 0x00000000]
[01:21:58.319]      __var version = 0;
[01:21:58.319]        // -> [version <= 0x00000000]
[01:21:58.319]      __var partNum = 0;
[01:21:58.319]        // -> [partNum <= 0x00000000]
[01:21:58.319]      __var manuf = 0;
[01:21:58.319]        // -> [manuf <= 0x00000000]
[01:21:58.319]      __var isMSPM0G1X0X_G3X0X = 0;
[01:21:58.319]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:21:58.319]      __var isProduction = 0;
[01:21:58.319]        // -> [isProduction <= 0x00000000]
[01:21:58.319]      __var continueId = 0;
[01:21:58.319]        // -> [continueId <= 0x00000000]
[01:21:58.319]      deviceID =   Read32(0x41C40004);
[01:21:58.325]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:21:58.325]        // -> [deviceID <= 0x2BB8802F]
[01:21:58.325]      version = deviceID >> 28;
[01:21:58.325]        // -> [version <= 0x00000002]
[01:21:58.325]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:21:58.325]        // -> [partNum <= 0x0000BB88]
[01:21:58.325]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:21:58.325]        // -> [manuf <= 0x00000017]
[01:21:58.325]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:21:58.325]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:21:58.325]      isProduction = (version > 0);
[01:21:58.325]        // -> [isProduction <= 0x00000001]
[01:21:58.325]    </block>
[01:21:58.325]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:21:58.325]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:21:58.325]        // =>  FALSE
[01:21:58.325]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:21:58.325]    </control>
[01:21:58.325]    <control if="continueId == 4" while="" timeout="0" info="">
[01:21:58.325]      // if-block "continueId == 4"
[01:21:58.325]        // =>  FALSE
[01:21:58.328]      // skip if-block "continueId == 4"
[01:21:58.328]    </control>
[01:21:58.328]    <control if="!isProduction" while="" timeout="0" info="">
[01:21:58.328]      // if-block "!isProduction"
[01:21:58.328]        // =>  FALSE
[01:21:58.328]      // skip if-block "!isProduction"
[01:21:58.328]    </control>
[01:21:58.328]  </sequence>
[01:21:58.328]  
[01:24:31.047]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:31.047]  
[01:24:31.056]  <debugvars>
[01:24:31.056]    // Pre-defined
[01:24:31.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:31.056]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:31.056]    __dp=0x00000000
[01:24:31.056]    __ap=0x00000000
[01:24:31.056]    __traceout=0x00000000      (Trace Disabled)
[01:24:31.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:31.056]    __FlashAddr=0x00000000
[01:24:31.056]    __FlashLen=0x00000000
[01:24:31.056]    __FlashArg=0x00000000
[01:24:31.057]    __FlashOp=0x00000000
[01:24:31.057]    __Result=0x00000000
[01:24:31.057]  </debugvars>
[01:24:31.057]  
[01:24:31.057]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:31.057]    <block atomic="false" info="">
[01:24:31.057]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:31.057]        // -> [isSWJ <= 0x00000001]
[01:24:31.057]      __var hasDormant = __protocol & 0x00020000;
[01:24:31.057]        // -> [hasDormant <= 0x00000000]
[01:24:31.057]      __var protType   = __protocol & 0x0000FFFF;
[01:24:31.057]        // -> [protType <= 0x00000002]
[01:24:31.057]    </block>
[01:24:31.057]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:31.057]      // if-block "protType == 1"
[01:24:31.057]        // =>  FALSE
[01:24:31.057]      // skip if-block "protType == 1"
[01:24:31.057]    </control>
[01:24:31.057]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:31.057]      // if-block "protType == 2"
[01:24:31.057]        // =>  TRUE
[01:24:31.057]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:31.057]        // if-block "isSWJ"
[01:24:31.059]          // =>  TRUE
[01:24:31.059]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:31.059]          // if-block "hasDormant"
[01:24:31.059]            // =>  FALSE
[01:24:31.059]          // skip if-block "hasDormant"
[01:24:31.059]        </control>
[01:24:31.059]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:31.059]          // if-block "!hasDormant"
[01:24:31.059]            // =>  TRUE
[01:24:31.059]          <block atomic="false" info="">
[01:24:31.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:31.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:31.061]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:31.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:31.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:31.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:31.064]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:31.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:31.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:31.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:31.070]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:31.072]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:31.072]          </block>
[01:24:31.072]          // end if-block "!hasDormant"
[01:24:31.072]        </control>
[01:24:31.072]        // end if-block "isSWJ"
[01:24:31.072]      </control>
[01:24:31.072]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:31.072]        // if-block "!isSWJ"
[01:24:31.072]          // =>  FALSE
[01:24:31.072]        // skip if-block "!isSWJ"
[01:24:31.072]      </control>
[01:24:31.072]      <block atomic="false" info="">
[01:24:31.072]        ReadDP(0x0);
[01:24:31.074]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:31.074]      </block>
[01:24:31.074]      // end if-block "protType == 2"
[01:24:31.074]    </control>
[01:24:31.074]  </sequence>
[01:24:31.074]  
[01:24:31.078]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:31.078]  
[01:24:31.078]  <debugvars>
[01:24:31.078]    // Pre-defined
[01:24:31.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:31.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:31.078]    __dp=0x00000000
[01:24:31.078]    __ap=0x00000000
[01:24:31.078]    __traceout=0x00000000      (Trace Disabled)
[01:24:31.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:31.078]    __FlashAddr=0x00000000
[01:24:31.079]    __FlashLen=0x00000000
[01:24:31.079]    __FlashArg=0x00000000
[01:24:31.079]    __FlashOp=0x00000000
[01:24:31.079]    __Result=0x00000000
[01:24:31.079]  </debugvars>
[01:24:31.079]  
[01:24:31.079]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:31.079]    <block atomic="false" info="">
[01:24:31.079]      __var SW_DP_ABORT       = 0x0;
[01:24:31.079]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:31.079]      __var DP_CTRL_STAT      = 0x4;
[01:24:31.079]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:31.079]      __var DP_SELECT         = 0x8;
[01:24:31.079]        // -> [DP_SELECT <= 0x00000008]
[01:24:31.079]      __var powered_down      = 0;
[01:24:31.079]        // -> [powered_down <= 0x00000000]
[01:24:31.081]      WriteDP(DP_SELECT, 0x00000000);
[01:24:31.081]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:31.081]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:31.083]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:31.083]        // -> [powered_down <= 0x00000001]
[01:24:31.083]    </block>
[01:24:31.083]    <control if="powered_down" while="" timeout="0" info="">
[01:24:31.083]      // if-block "powered_down"
[01:24:31.083]        // =>  TRUE
[01:24:31.083]      <block atomic="false" info="">
[01:24:31.083]        Message(0, "Debug/System power-up request sent");
[01:24:31.085]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:31.089]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:31.089]      </block>
[01:24:31.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:31.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:31.091]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:31.091]        // while-condition  =>  FALSE
[01:24:31.091]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:31.091]      </control>
[01:24:31.091]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:31.091]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:31.091]          // =>  FALSE
[01:24:31.091]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:31.091]      </control>
[01:24:31.091]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:31.091]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:31.091]          // =>  TRUE
[01:24:31.091]        <block atomic="false" info="">
[01:24:31.091]          Message(0, "executing SWD power up");
[01:24:31.094]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:31.094]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:31.094]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:31.098]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:31.098]        </block>
[01:24:31.098]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:31.098]      </control>
[01:24:31.098]      // end if-block "powered_down"
[01:24:31.098]    </control>
[01:24:31.098]    <block atomic="false" info="">
[01:24:31.098]      __var DEBUG_PORT_VAL    = 0;
[01:24:31.098]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:31.098]      __var ACCESS_POINT_VAL  = 0;
[01:24:31.098]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:31.098]      __ap = 1; 
[01:24:31.098]        // -> [__ap <= 0x00000001]
[01:24:31.098]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:31.103]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:31.103]      __ap = 4;
[01:24:31.103]        // -> [__ap <= 0x00000004]
[01:24:31.103]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:31.107]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:24:31.107]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:24:31.107]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:31.110]    </block>
[01:24:31.110]    <block atomic="false" info="">
[01:24:31.110]      __var nReset = 0x80;
[01:24:31.110]        // -> [nReset <= 0x00000080]
[01:24:31.110]      __var canReadPins = 0;
[01:24:31.110]        // -> [canReadPins <= 0x00000000]
[01:24:31.110]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:31.111]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:31.111]        // -> [canReadPins <= 0x00000001]
[01:24:31.111]    </block>
[01:24:31.111]    <control if="" while="1" timeout="200" info="">
[01:24:31.111]      // while "1"  (timeout="200")
[01:24:31.111]      // while-condition  =>  TRUE
[01:24:31.111]      // while "1"  (timeout="200")
[01:24:31.113]      // while-condition  =>  TRUE
[01:24:31.113]      // while "1"  (timeout="200")
[01:24:31.113]      // while  =>  TIMEOUT
[01:24:31.113]      // end while "1"
[01:24:31.113]    </control>
[01:24:31.113]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:31.113]      // if-block "canReadPins"
[01:24:31.113]        // =>  TRUE
[01:24:31.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:31.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:31.114]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:31.114]        // while-condition  =>  FALSE
[01:24:31.114]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:31.114]      </control>
[01:24:31.114]      // end if-block "canReadPins"
[01:24:31.114]    </control>
[01:24:31.114]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:31.114]      // if-block "!canReadPins"
[01:24:31.114]        // =>  FALSE
[01:24:31.116]      // skip if-block "!canReadPins"
[01:24:31.116]    </control>
[01:24:31.116]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:31.116]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:31.116]        // =>  TRUE
[01:24:31.116]      <block atomic="false" info="">
[01:24:31.116]        WriteAP(0x00, 0x190008);
[01:24:31.118]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:31.118]        WriteAP(0xF0, 0x01);
[01:24:31.123]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:31.123]      </block>
[01:24:31.123]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:31.123]    </control>
[01:24:31.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:31.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:31.123]        // =>  FALSE
[01:24:31.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:31.123]    </control>
[01:24:31.123]    <block atomic="false" info="">
[01:24:31.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:31.127]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:31.127]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:24:31.127]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:31.127]      __ap = 0; //lets make sure we reset the access point selection
[01:24:31.127]        // -> [__ap <= 0x00000000]
[01:24:31.127]    </block>
[01:24:31.127]  </sequence>
[01:24:31.127]  
[01:24:31.163]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:31.163]  
[01:24:31.163]  <debugvars>
[01:24:31.164]    // Pre-defined
[01:24:31.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:31.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:31.164]    __dp=0x00000000
[01:24:31.164]    __ap=0x00000000
[01:24:31.164]    __traceout=0x00000000      (Trace Disabled)
[01:24:31.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:31.164]    __FlashAddr=0x00000000
[01:24:31.164]    __FlashLen=0x00000000
[01:24:31.164]    __FlashArg=0x00000000
[01:24:31.164]    __FlashOp=0x00000000
[01:24:31.164]    __Result=0x00000000
[01:24:31.164]  </debugvars>
[01:24:31.164]  
[01:24:31.164]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:31.164]    <block atomic="false" info="">
[01:24:31.164]      __var deviceID = 0;
[01:24:31.164]        // -> [deviceID <= 0x00000000]
[01:24:31.166]      __var version = 0;
[01:24:31.166]        // -> [version <= 0x00000000]
[01:24:31.166]      __var partNum = 0;
[01:24:31.166]        // -> [partNum <= 0x00000000]
[01:24:31.166]      __var manuf = 0;
[01:24:31.166]        // -> [manuf <= 0x00000000]
[01:24:31.166]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:31.166]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:31.166]      __var isProduction = 0;
[01:24:31.166]        // -> [isProduction <= 0x00000000]
[01:24:31.167]      __var continueId = 0;
[01:24:31.167]        // -> [continueId <= 0x00000000]
[01:24:31.167]      deviceID =   Read32(0x41C40004);
[01:24:31.177]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:31.177]        // -> [deviceID <= 0x2BB8802F]
[01:24:31.178]      version = deviceID >> 28;
[01:24:31.178]        // -> [version <= 0x00000002]
[01:24:31.178]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:31.178]        // -> [partNum <= 0x0000BB88]
[01:24:31.178]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:31.178]        // -> [manuf <= 0x00000017]
[01:24:31.179]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:31.179]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:31.179]      isProduction = (version > 0);
[01:24:31.179]        // -> [isProduction <= 0x00000001]
[01:24:31.179]    </block>
[01:24:31.179]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:31.179]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:31.179]        // =>  FALSE
[01:24:31.179]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:31.179]    </control>
[01:24:31.179]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:31.179]      // if-block "continueId == 4"
[01:24:31.179]        // =>  FALSE
[01:24:31.179]      // skip if-block "continueId == 4"
[01:24:31.179]    </control>
[01:24:31.180]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:31.180]      // if-block "!isProduction"
[01:24:31.180]        // =>  FALSE
[01:24:31.180]      // skip if-block "!isProduction"
[01:24:31.180]    </control>
[01:24:31.181]  </sequence>
[01:24:31.181]  
[01:26:10.251]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:26:10.251]  
[01:26:10.251]  <debugvars>
[01:26:10.251]    // Pre-defined
[01:26:10.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:10.253]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:10.253]    __dp=0x00000000
[01:26:10.253]    __ap=0x00000000
[01:26:10.253]    __traceout=0x00000000      (Trace Disabled)
[01:26:10.253]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:10.253]    __FlashAddr=0x00000000
[01:26:10.253]    __FlashLen=0x00000000
[01:26:10.253]    __FlashArg=0x00000000
[01:26:10.253]    __FlashOp=0x00000000
[01:26:10.254]    __Result=0x00000000
[01:26:10.254]  </debugvars>
[01:26:10.254]  
[01:26:10.254]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:26:10.254]    <block atomic="false" info="">
[01:26:10.254]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:26:10.254]        // -> [isSWJ <= 0x00000001]
[01:26:10.254]      __var hasDormant = __protocol & 0x00020000;
[01:26:10.254]        // -> [hasDormant <= 0x00000000]
[01:26:10.254]      __var protType   = __protocol & 0x0000FFFF;
[01:26:10.255]        // -> [protType <= 0x00000002]
[01:26:10.255]    </block>
[01:26:10.255]    <control if="protType == 1" while="" timeout="0" info="">
[01:26:10.255]      // if-block "protType == 1"
[01:26:10.255]        // =>  FALSE
[01:26:10.255]      // skip if-block "protType == 1"
[01:26:10.255]    </control>
[01:26:10.255]    <control if="protType == 2" while="" timeout="0" info="">
[01:26:10.255]      // if-block "protType == 2"
[01:26:10.255]        // =>  TRUE
[01:26:10.255]      <control if="isSWJ" while="" timeout="0" info="">
[01:26:10.255]        // if-block "isSWJ"
[01:26:10.255]          // =>  TRUE
[01:26:10.255]        <control if="hasDormant" while="" timeout="0" info="">
[01:26:10.255]          // if-block "hasDormant"
[01:26:10.255]            // =>  FALSE
[01:26:10.255]          // skip if-block "hasDormant"
[01:26:10.255]        </control>
[01:26:10.255]        <control if="!hasDormant" while="" timeout="0" info="">
[01:26:10.255]          // if-block "!hasDormant"
[01:26:10.255]            // =>  TRUE
[01:26:10.255]          <block atomic="false" info="">
[01:26:10.255]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:26:10.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:10.259]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:26:10.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:26:10.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:26:10.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:10.259]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:26:10.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:26:10.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:26:10.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:10.263]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:26:10.267]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:26:10.267]          </block>
[01:26:10.267]          // end if-block "!hasDormant"
[01:26:10.267]        </control>
[01:26:10.267]        // end if-block "isSWJ"
[01:26:10.267]      </control>
[01:26:10.267]      <control if="!isSWJ" while="" timeout="0" info="">
[01:26:10.267]        // if-block "!isSWJ"
[01:26:10.267]          // =>  FALSE
[01:26:10.267]        // skip if-block "!isSWJ"
[01:26:10.267]      </control>
[01:26:10.267]      <block atomic="false" info="">
[01:26:10.267]        ReadDP(0x0);
[01:26:10.267]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:26:10.267]      </block>
[01:26:10.267]      // end if-block "protType == 2"
[01:26:10.267]    </control>
[01:26:10.267]  </sequence>
[01:26:10.267]  
[01:26:10.271]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:26:10.271]  
[01:26:10.271]  <debugvars>
[01:26:10.273]    // Pre-defined
[01:26:10.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:10.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:10.273]    __dp=0x00000000
[01:26:10.273]    __ap=0x00000000
[01:26:10.273]    __traceout=0x00000000      (Trace Disabled)
[01:26:10.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:10.273]    __FlashAddr=0x00000000
[01:26:10.273]    __FlashLen=0x00000000
[01:26:10.273]    __FlashArg=0x00000000
[01:26:10.273]    __FlashOp=0x00000000
[01:26:10.273]    __Result=0x00000000
[01:26:10.273]  </debugvars>
[01:26:10.273]  
[01:26:10.273]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:26:10.273]    <block atomic="false" info="">
[01:26:10.273]      __var SW_DP_ABORT       = 0x0;
[01:26:10.273]        // -> [SW_DP_ABORT <= 0x00000000]
[01:26:10.273]      __var DP_CTRL_STAT      = 0x4;
[01:26:10.273]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:26:10.275]      __var DP_SELECT         = 0x8;
[01:26:10.275]        // -> [DP_SELECT <= 0x00000008]
[01:26:10.275]      __var powered_down      = 0;
[01:26:10.275]        // -> [powered_down <= 0x00000000]
[01:26:10.275]      WriteDP(DP_SELECT, 0x00000000);
[01:26:10.275]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:26:10.275]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:26:10.279]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:26:10.279]        // -> [powered_down <= 0x00000001]
[01:26:10.279]    </block>
[01:26:10.279]    <control if="powered_down" while="" timeout="0" info="">
[01:26:10.279]      // if-block "powered_down"
[01:26:10.279]        // =>  TRUE
[01:26:10.279]      <block atomic="false" info="">
[01:26:10.279]        Message(0, "Debug/System power-up request sent");
[01:26:10.279]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:26:10.283]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:26:10.283]      </block>
[01:26:10.283]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:26:10.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:26:10.287]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:26:10.287]        // while-condition  =>  FALSE
[01:26:10.287]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:26:10.287]      </control>
[01:26:10.287]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:26:10.287]        // if-block "(__protocol & 0xFFFF) == 1"
[01:26:10.287]          // =>  FALSE
[01:26:10.287]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:26:10.287]      </control>
[01:26:10.287]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:26:10.287]        // if-block "(__protocol & 0xFFFF) == 2"
[01:26:10.287]          // =>  TRUE
[01:26:10.287]        <block atomic="false" info="">
[01:26:10.287]          Message(0, "executing SWD power up");
[01:26:10.291]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:26:10.299]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:26:10.299]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:26:10.299]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:26:10.299]        </block>
[01:26:10.299]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:26:10.299]      </control>
[01:26:10.299]      // end if-block "powered_down"
[01:26:10.299]    </control>
[01:26:10.299]    <block atomic="false" info="">
[01:26:10.299]      __var DEBUG_PORT_VAL    = 0;
[01:26:10.299]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:26:10.303]      __var ACCESS_POINT_VAL  = 0;
[01:26:10.303]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:26:10.303]      __ap = 1; 
[01:26:10.303]        // -> [__ap <= 0x00000001]
[01:26:10.303]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:26:10.307]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:26:10.307]      __ap = 4;
[01:26:10.307]        // -> [__ap <= 0x00000004]
[01:26:10.307]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:10.311]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:26:10.311]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:26:10.311]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:10.313]    </block>
[01:26:10.313]    <block atomic="false" info="">
[01:26:10.313]      __var nReset = 0x80;
[01:26:10.313]        // -> [nReset <= 0x00000080]
[01:26:10.313]      __var canReadPins = 0;
[01:26:10.313]        // -> [canReadPins <= 0x00000000]
[01:26:10.313]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:26:10.315]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:26:10.315]        // -> [canReadPins <= 0x00000001]
[01:26:10.315]    </block>
[01:26:10.315]    <control if="" while="1" timeout="200" info="">
[01:26:10.315]      // while "1"  (timeout="200")
[01:26:10.315]      // while-condition  =>  TRUE
[01:26:10.315]      // while "1"  (timeout="200")
[01:26:10.315]      // while-condition  =>  TRUE
[01:26:10.315]      // while "1"  (timeout="200")
[01:26:10.315]      // while-condition  =>  TRUE
[01:26:10.315]      // while "1"  (timeout="200")
[01:26:10.315]      // while-condition  =>  TRUE
[01:26:10.315]      // while "1"  (timeout="200")
[01:26:10.315]      // while-condition  =>  TRUE
[01:26:10.319]      // while "1"  (timeout="200")
[01:26:10.319]      // while  =>  TIMEOUT
[01:26:10.319]      // end while "1"
[01:26:10.319]    </control>
[01:26:10.319]    <control if="canReadPins" while="" timeout="0" info="">
[01:26:10.319]      // if-block "canReadPins"
[01:26:10.320]        // =>  TRUE
[01:26:10.320]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:26:10.320]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:26:10.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:26:10.320]        // while-condition  =>  FALSE
[01:26:10.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:26:10.320]      </control>
[01:26:10.320]      // end if-block "canReadPins"
[01:26:10.320]    </control>
[01:26:10.320]    <control if="!canReadPins" while="" timeout="0" info="">
[01:26:10.320]      // if-block "!canReadPins"
[01:26:10.320]        // =>  FALSE
[01:26:10.320]      // skip if-block "!canReadPins"
[01:26:10.320]    </control>
[01:26:10.323]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:26:10.323]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:10.323]        // =>  TRUE
[01:26:10.323]      <block atomic="false" info="">
[01:26:10.323]        WriteAP(0x00, 0x190008);
[01:26:10.323]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:10.323]        WriteAP(0xF0, 0x01);
[01:26:10.327]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:10.327]      </block>
[01:26:10.327]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:10.327]    </control>
[01:26:10.327]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:26:10.327]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:10.327]        // =>  FALSE
[01:26:10.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:10.327]    </control>
[01:26:10.327]    <block atomic="false" info="">
[01:26:10.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:10.333]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:26:10.333]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:26:10.333]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:10.335]      __ap = 0; //lets make sure we reset the access point selection
[01:26:10.335]        // -> [__ap <= 0x00000000]
[01:26:10.335]    </block>
[01:26:10.335]  </sequence>
[01:26:10.335]  
[01:26:10.354]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:26:10.354]  
[01:26:10.354]  <debugvars>
[01:26:10.354]    // Pre-defined
[01:26:10.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:10.354]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:10.355]    __dp=0x00000000
[01:26:10.355]    __ap=0x00000000
[01:26:10.355]    __traceout=0x00000000      (Trace Disabled)
[01:26:10.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:10.355]    __FlashAddr=0x00000000
[01:26:10.355]    __FlashLen=0x00000000
[01:26:10.355]    __FlashArg=0x00000000
[01:26:10.355]    __FlashOp=0x00000000
[01:26:10.355]    __Result=0x00000000
[01:26:10.355]  </debugvars>
[01:26:10.355]  
[01:26:10.355]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:26:10.355]    <block atomic="false" info="">
[01:26:10.355]      __var deviceID = 0;
[01:26:10.355]        // -> [deviceID <= 0x00000000]
[01:26:10.355]      __var version = 0;
[01:26:10.355]        // -> [version <= 0x00000000]
[01:26:10.355]      __var partNum = 0;
[01:26:10.355]        // -> [partNum <= 0x00000000]
[01:26:10.355]      __var manuf = 0;
[01:26:10.355]        // -> [manuf <= 0x00000000]
[01:26:10.355]      __var isMSPM0G1X0X_G3X0X = 0;
[01:26:10.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:26:10.355]      __var isProduction = 0;
[01:26:10.355]        // -> [isProduction <= 0x00000000]
[01:26:10.355]      __var continueId = 0;
[01:26:10.355]        // -> [continueId <= 0x00000000]
[01:26:10.355]      deviceID =   Read32(0x41C40004);
[01:26:10.359]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:26:10.363]        // -> [deviceID <= 0x2BB8802F]
[01:26:10.363]      version = deviceID >> 28;
[01:26:10.363]        // -> [version <= 0x00000002]
[01:26:10.363]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:26:10.363]        // -> [partNum <= 0x0000BB88]
[01:26:10.363]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:26:10.363]        // -> [manuf <= 0x00000017]
[01:26:10.363]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:26:10.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:26:10.363]      isProduction = (version > 0);
[01:26:10.363]        // -> [isProduction <= 0x00000001]
[01:26:10.363]    </block>
[01:26:10.363]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:26:10.363]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:26:10.363]        // =>  FALSE
[01:26:10.363]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:26:10.363]    </control>
[01:26:10.363]    <control if="continueId == 4" while="" timeout="0" info="">
[01:26:10.363]      // if-block "continueId == 4"
[01:26:10.363]        // =>  FALSE
[01:26:10.363]      // skip if-block "continueId == 4"
[01:26:10.363]    </control>
[01:26:10.363]    <control if="!isProduction" while="" timeout="0" info="">
[01:26:10.363]      // if-block "!isProduction"
[01:26:10.363]        // =>  FALSE
[01:26:10.363]      // skip if-block "!isProduction"
[01:26:10.363]    </control>
[01:26:10.363]  </sequence>
[01:26:10.363]  
