/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0014.log
 *  Created     : 21:06:42 (24/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[21:06:42.002]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:06:42.002]  
[21:06:42.006]  <debugvars>
[21:06:42.006]    // Pre-defined
[21:06:42.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:42.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:06:42.007]    __dp=0x00000000
[21:06:42.007]    __ap=0x00000000
[21:06:42.007]    __traceout=0x00000000      (Trace Disabled)
[21:06:42.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:42.007]    __FlashAddr=0x00000000
[21:06:42.007]    __FlashLen=0x00000000
[21:06:42.008]    __FlashArg=0x00000000
[21:06:42.008]    __FlashOp=0x00000000
[21:06:42.008]    __Result=0x00000000
[21:06:42.008]  </debugvars>
[21:06:42.008]  
[21:06:42.008]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:06:42.008]    <block atomic="false" info="">
[21:06:42.008]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:06:42.008]        // -> [isSWJ <= 0x00000001]
[21:06:42.008]      __var hasDormant = __protocol & 0x00020000;
[21:06:42.008]        // -> [hasDormant <= 0x00000000]
[21:06:42.009]      __var protType   = __protocol & 0x0000FFFF;
[21:06:42.009]        // -> [protType <= 0x00000002]
[21:06:42.009]    </block>
[21:06:42.009]    <control if="protType == 1" while="" timeout="0" info="">
[21:06:42.010]      // if-block "protType == 1"
[21:06:42.010]        // =>  FALSE
[21:06:42.010]      // skip if-block "protType == 1"
[21:06:42.010]    </control>
[21:06:42.010]    <control if="protType == 2" while="" timeout="0" info="">
[21:06:42.010]      // if-block "protType == 2"
[21:06:42.010]        // =>  TRUE
[21:06:42.010]      <control if="isSWJ" while="" timeout="0" info="">
[21:06:42.010]        // if-block "isSWJ"
[21:06:42.010]          // =>  TRUE
[21:06:42.010]        <control if="hasDormant" while="" timeout="0" info="">
[21:06:42.011]          // if-block "hasDormant"
[21:06:42.011]            // =>  FALSE
[21:06:42.011]          // skip if-block "hasDormant"
[21:06:42.011]        </control>
[21:06:42.011]        <control if="!hasDormant" while="" timeout="0" info="">
[21:06:42.011]          // if-block "!hasDormant"
[21:06:42.011]            // =>  TRUE
[21:06:42.011]          <block atomic="false" info="">
[21:06:42.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:06:42.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:42.011]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:06:42.014]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:06:42.014]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:06:42.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:42.018]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:06:42.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:06:42.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:06:42.022]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:42.022]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:06:42.023]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:06:42.023]          </block>
[21:06:42.023]          // end if-block "!hasDormant"
[21:06:42.023]        </control>
[21:06:42.023]        // end if-block "isSWJ"
[21:06:42.023]      </control>
[21:06:42.023]      <control if="!isSWJ" while="" timeout="0" info="">
[21:06:42.023]        // if-block "!isSWJ"
[21:06:42.023]          // =>  FALSE
[21:06:42.023]        // skip if-block "!isSWJ"
[21:06:42.023]      </control>
[21:06:42.023]      <block atomic="false" info="">
[21:06:42.026]        ReadDP(0x0);
[21:06:42.028]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:06:42.028]      </block>
[21:06:42.028]      // end if-block "protType == 2"
[21:06:42.028]    </control>
[21:06:42.028]  </sequence>
[21:06:42.028]  
[21:06:44.904]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:06:44.904]  
[21:06:44.904]  <debugvars>
[21:06:44.904]    // Pre-defined
[21:06:44.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:44.904]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:44.904]    __dp=0x00000000
[21:06:44.904]    __ap=0x00000000
[21:06:44.904]    __traceout=0x00000000      (Trace Disabled)
[21:06:44.904]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:44.904]    __FlashAddr=0x00000000
[21:06:44.904]    __FlashLen=0x00000000
[21:06:44.904]    __FlashArg=0x00000000
[21:06:44.904]    __FlashOp=0x00000000
[21:06:44.907]    __Result=0x00000000
[21:06:44.907]  </debugvars>
[21:06:44.907]  
[21:06:44.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:06:44.907]    <block atomic="false" info="">
[21:06:44.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:06:44.907]        // -> [isSWJ <= 0x00000001]
[21:06:44.907]      __var hasDormant = __protocol & 0x00020000;
[21:06:44.907]        // -> [hasDormant <= 0x00000000]
[21:06:44.907]      __var protType   = __protocol & 0x0000FFFF;
[21:06:44.907]        // -> [protType <= 0x00000002]
[21:06:44.907]    </block>
[21:06:44.907]    <control if="protType == 1" while="" timeout="0" info="">
[21:06:44.907]      // if-block "protType == 1"
[21:06:44.907]        // =>  FALSE
[21:06:44.907]      // skip if-block "protType == 1"
[21:06:44.909]    </control>
[21:06:44.909]    <control if="protType == 2" while="" timeout="0" info="">
[21:06:44.909]      // if-block "protType == 2"
[21:06:44.909]        // =>  TRUE
[21:06:44.909]      <control if="isSWJ" while="" timeout="0" info="">
[21:06:44.909]        // if-block "isSWJ"
[21:06:44.909]          // =>  TRUE
[21:06:44.909]        <control if="hasDormant" while="" timeout="0" info="">
[21:06:44.909]          // if-block "hasDormant"
[21:06:44.909]            // =>  FALSE
[21:06:44.909]          // skip if-block "hasDormant"
[21:06:44.909]        </control>
[21:06:44.909]        <control if="!hasDormant" while="" timeout="0" info="">
[21:06:44.909]          // if-block "!hasDormant"
[21:06:44.909]            // =>  TRUE
[21:06:44.909]          <block atomic="false" info="">
[21:06:44.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:06:44.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:44.912]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:06:44.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:06:44.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:06:44.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:44.916]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:06:44.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:06:44.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:06:44.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:44.920]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:06:44.920]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:06:44.920]          </block>
[21:06:44.920]          // end if-block "!hasDormant"
[21:06:44.920]        </control>
[21:06:44.924]        // end if-block "isSWJ"
[21:06:44.924]      </control>
[21:06:44.924]      <control if="!isSWJ" while="" timeout="0" info="">
[21:06:44.924]        // if-block "!isSWJ"
[21:06:44.924]          // =>  FALSE
[21:06:44.924]        // skip if-block "!isSWJ"
[21:06:44.925]      </control>
[21:06:44.925]      <block atomic="false" info="">
[21:06:44.925]        ReadDP(0x0);
[21:06:44.927]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:06:44.927]      </block>
[21:06:44.928]      // end if-block "protType == 2"
[21:06:44.928]    </control>
[21:06:44.928]  </sequence>
[21:06:44.928]  
[21:06:44.932]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:06:44.932]  
[21:06:44.932]  <debugvars>
[21:06:44.932]    // Pre-defined
[21:06:44.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:44.932]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:44.932]    __dp=0x00000000
[21:06:44.932]    __ap=0x00000000
[21:06:44.932]    __traceout=0x00000000      (Trace Disabled)
[21:06:44.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:44.932]    __FlashAddr=0x00000000
[21:06:44.932]    __FlashLen=0x00000000
[21:06:44.932]    __FlashArg=0x00000000
[21:06:44.932]    __FlashOp=0x00000000
[21:06:44.932]    __Result=0x00000000
[21:06:44.932]  </debugvars>
[21:06:44.932]  
[21:06:44.932]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:06:44.932]    <block atomic="false" info="">
[21:06:44.932]      __var SW_DP_ABORT       = 0x0;
[21:06:44.932]        // -> [SW_DP_ABORT <= 0x00000000]
[21:06:44.932]      __var DP_CTRL_STAT      = 0x4;
[21:06:44.935]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:06:44.935]      __var DP_SELECT         = 0x8;
[21:06:44.935]        // -> [DP_SELECT <= 0x00000008]
[21:06:44.935]      __var powered_down      = 0;
[21:06:44.935]        // -> [powered_down <= 0x00000000]
[21:06:44.935]      WriteDP(DP_SELECT, 0x00000000);
[21:06:44.937]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:06:44.937]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:06:44.940]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:06:44.940]        // -> [powered_down <= 0x00000001]
[21:06:44.940]    </block>
[21:06:44.940]    <control if="powered_down" while="" timeout="0" info="">
[21:06:44.940]      // if-block "powered_down"
[21:06:44.940]        // =>  TRUE
[21:06:44.940]      <block atomic="false" info="">
[21:06:44.940]        Message(0, "Debug/System power-up request sent");
[21:06:44.940]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:06:44.944]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:06:44.944]      </block>
[21:06:44.944]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:06:44.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:06:44.949]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:06:44.949]        // while-condition  =>  FALSE
[21:06:44.949]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:06:44.949]      </control>
[21:06:44.949]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:06:44.949]        // if-block "(__protocol & 0xFFFF) == 1"
[21:06:44.949]          // =>  FALSE
[21:06:44.949]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:06:44.949]      </control>
[21:06:44.949]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:06:44.949]        // if-block "(__protocol & 0xFFFF) == 2"
[21:06:44.949]          // =>  TRUE
[21:06:44.949]        <block atomic="false" info="">
[21:06:44.949]          Message(0, "executing SWD power up");
[21:06:44.949]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:06:44.952]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:06:44.952]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:06:44.954]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:06:44.954]        </block>
[21:06:44.954]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:06:44.954]      </control>
[21:06:44.954]      // end if-block "powered_down"
[21:06:44.954]    </control>
[21:06:44.954]    <block atomic="false" info="">
[21:06:44.954]      __var DEBUG_PORT_VAL    = 0;
[21:06:44.954]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:06:44.954]      __var ACCESS_POINT_VAL  = 0;
[21:06:44.954]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:06:44.956]      __ap = 1; 
[21:06:44.956]        // -> [__ap <= 0x00000001]
[21:06:44.956]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:06:44.958]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:06:44.958]      __ap = 4;
[21:06:44.958]        // -> [__ap <= 0x00000004]
[21:06:44.958]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:44.967]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:06:44.967]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:06:44.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:44.969]    </block>
[21:06:44.969]    <block atomic="false" info="">
[21:06:44.969]      __var nReset = 0x80;
[21:06:44.969]        // -> [nReset <= 0x00000080]
[21:06:44.969]      __var canReadPins = 0;
[21:06:44.969]        // -> [canReadPins <= 0x00000000]
[21:06:44.969]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:06:44.969]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:06:44.969]        // -> [canReadPins <= 0x00000001]
[21:06:44.969]    </block>
[21:06:44.969]    <control if="" while="1" timeout="200" info="">
[21:06:44.969]      // while "1"  (timeout="200")
[21:06:44.972]      // while-condition  =>  TRUE
[21:06:44.972]      // while "1"  (timeout="200")
[21:06:44.972]      // while  =>  TIMEOUT
[21:06:44.972]      // end while "1"
[21:06:44.972]    </control>
[21:06:44.972]    <control if="canReadPins" while="" timeout="0" info="">
[21:06:44.972]      // if-block "canReadPins"
[21:06:44.972]        // =>  TRUE
[21:06:44.972]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:06:44.972]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:06:44.978]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:06:44.978]        // while-condition  =>  FALSE
[21:06:44.978]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:06:44.978]      </control>
[21:06:44.978]      // end if-block "canReadPins"
[21:06:44.979]    </control>
[21:06:44.979]    <control if="!canReadPins" while="" timeout="0" info="">
[21:06:44.979]      // if-block "!canReadPins"
[21:06:44.979]        // =>  FALSE
[21:06:44.979]      // skip if-block "!canReadPins"
[21:06:44.979]    </control>
[21:06:44.979]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:06:44.979]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:44.979]        // =>  TRUE
[21:06:44.979]      <block atomic="false" info="">
[21:06:44.979]        WriteAP(0x00, 0x190008);
[21:06:44.980]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:44.980]        WriteAP(0xF0, 0x01);
[21:06:44.989]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:44.989]      </block>
[21:06:44.989]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:44.989]    </control>
[21:06:44.989]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:06:44.989]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:44.989]        // =>  FALSE
[21:06:44.989]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:44.989]    </control>
[21:06:44.989]    <block atomic="false" info="">
[21:06:44.989]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:44.992]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:06:44.992]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:06:44.992]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:44.992]      __ap = 0; //lets make sure we reset the access point selection
[21:06:44.992]        // -> [__ap <= 0x00000000]
[21:06:44.992]    </block>
[21:06:44.992]  </sequence>
[21:06:44.992]  
[21:06:45.032]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:06:45.032]  
[21:06:45.032]  <debugvars>
[21:06:45.032]    // Pre-defined
[21:06:45.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:45.032]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:45.032]    __dp=0x00000000
[21:06:45.032]    __ap=0x00000000
[21:06:45.032]    __traceout=0x00000000      (Trace Disabled)
[21:06:45.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:45.032]    __FlashAddr=0x00000000
[21:06:45.032]    __FlashLen=0x00000000
[21:06:45.032]    __FlashArg=0x00000000
[21:06:45.032]    __FlashOp=0x00000000
[21:06:45.032]    __Result=0x00000000
[21:06:45.032]  </debugvars>
[21:06:45.032]  
[21:06:45.032]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:06:45.032]    <block atomic="false" info="">
[21:06:45.032]      __var deviceID = 0;
[21:06:45.037]        // -> [deviceID <= 0x00000000]
[21:06:45.037]      __var version = 0;
[21:06:45.037]        // -> [version <= 0x00000000]
[21:06:45.037]      __var partNum = 0;
[21:06:45.037]        // -> [partNum <= 0x00000000]
[21:06:45.037]      __var manuf = 0;
[21:06:45.037]        // -> [manuf <= 0x00000000]
[21:06:45.037]      __var isMSPM0G1X0X_G3X0X = 0;
[21:06:45.037]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:06:45.037]      __var isProduction = 0;
[21:06:45.038]        // -> [isProduction <= 0x00000000]
[21:06:45.038]      __var continueId = 0;
[21:06:45.038]        // -> [continueId <= 0x00000000]
[21:06:45.038]      deviceID =   Read32(0x41C40004);
[21:06:45.041]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:06:45.041]        // -> [deviceID <= 0x2BB8802F]
[21:06:45.041]      version = deviceID >> 28;
[21:06:45.041]        // -> [version <= 0x00000002]
[21:06:45.041]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:06:45.041]        // -> [partNum <= 0x0000BB88]
[21:06:45.041]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:06:45.041]        // -> [manuf <= 0x00000017]
[21:06:45.041]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:06:45.041]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:06:45.041]      isProduction = (version > 0);
[21:06:45.041]        // -> [isProduction <= 0x00000001]
[21:06:45.041]    </block>
[21:06:45.041]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:06:45.041]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:06:45.041]        // =>  FALSE
[21:06:45.041]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:06:45.041]    </control>
[21:06:45.041]    <control if="continueId == 4" while="" timeout="0" info="">
[21:06:45.041]      // if-block "continueId == 4"
[21:06:45.041]        // =>  FALSE
[21:06:45.041]      // skip if-block "continueId == 4"
[21:06:45.041]    </control>
[21:06:45.041]    <control if="!isProduction" while="" timeout="0" info="">
[21:06:45.041]      // if-block "!isProduction"
[21:06:45.041]        // =>  FALSE
[21:06:45.045]      // skip if-block "!isProduction"
[21:06:45.045]    </control>
[21:06:45.045]  </sequence>
[21:06:45.045]  
[21:07:00.003]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:07:00.003]  
[21:07:00.014]  <debugvars>
[21:07:00.014]    // Pre-defined
[21:07:00.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:00.014]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:00.014]    __dp=0x00000000
[21:07:00.014]    __ap=0x00000000
[21:07:00.014]    __traceout=0x00000000      (Trace Disabled)
[21:07:00.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:00.014]    __FlashAddr=0x00000000
[21:07:00.014]    __FlashLen=0x00000000
[21:07:00.014]    __FlashArg=0x00000000
[21:07:00.014]    __FlashOp=0x00000000
[21:07:00.014]    __Result=0x00000000
[21:07:00.014]  </debugvars>
[21:07:00.014]  
[21:07:00.014]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:07:00.014]    <block atomic="false" info="">
[21:07:00.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:07:00.014]        // -> [isSWJ <= 0x00000001]
[21:07:00.014]      __var hasDormant = __protocol & 0x00020000;
[21:07:00.017]        // -> [hasDormant <= 0x00000000]
[21:07:00.017]      __var protType   = __protocol & 0x0000FFFF;
[21:07:00.017]        // -> [protType <= 0x00000002]
[21:07:00.017]    </block>
[21:07:00.017]    <control if="protType == 1" while="" timeout="0" info="">
[21:07:00.017]      // if-block "protType == 1"
[21:07:00.017]        // =>  FALSE
[21:07:00.017]      // skip if-block "protType == 1"
[21:07:00.018]    </control>
[21:07:00.018]    <control if="protType == 2" while="" timeout="0" info="">
[21:07:00.018]      // if-block "protType == 2"
[21:07:00.018]        // =>  TRUE
[21:07:00.018]      <control if="isSWJ" while="" timeout="0" info="">
[21:07:00.018]        // if-block "isSWJ"
[21:07:00.018]          // =>  TRUE
[21:07:00.018]        <control if="hasDormant" while="" timeout="0" info="">
[21:07:00.018]          // if-block "hasDormant"
[21:07:00.018]            // =>  FALSE
[21:07:00.019]          // skip if-block "hasDormant"
[21:07:00.019]        </control>
[21:07:00.019]        <control if="!hasDormant" while="" timeout="0" info="">
[21:07:00.019]          // if-block "!hasDormant"
[21:07:00.019]            // =>  TRUE
[21:07:00.019]          <block atomic="false" info="">
[21:07:00.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:07:00.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:00.019]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:07:00.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:07:00.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:07:00.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:00.040]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:07:00.048]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:07:00.048]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:07:00.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:00.062]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:07:00.063]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:07:00.063]          </block>
[21:07:00.063]          // end if-block "!hasDormant"
[21:07:00.063]        </control>
[21:07:00.063]        // end if-block "isSWJ"
[21:07:00.063]      </control>
[21:07:00.063]      <control if="!isSWJ" while="" timeout="0" info="">
[21:07:00.063]        // if-block "!isSWJ"
[21:07:00.063]          // =>  FALSE
[21:07:00.063]        // skip if-block "!isSWJ"
[21:07:00.063]      </control>
[21:07:00.063]      <block atomic="false" info="">
[21:07:00.063]        ReadDP(0x0);
[21:07:00.072]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:07:00.077]      </block>
[21:07:00.077]      // end if-block "protType == 2"
[21:07:00.077]    </control>
[21:07:00.077]  </sequence>
[21:07:00.077]  
[21:07:00.083]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:07:00.083]  
[21:07:00.083]  <debugvars>
[21:07:00.083]    // Pre-defined
[21:07:00.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:00.083]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:00.083]    __dp=0x00000000
[21:07:00.083]    __ap=0x00000000
[21:07:00.083]    __traceout=0x00000000      (Trace Disabled)
[21:07:00.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:00.083]    __FlashAddr=0x00000000
[21:07:00.083]    __FlashLen=0x00000000
[21:07:00.083]    __FlashArg=0x00000000
[21:07:00.083]    __FlashOp=0x00000000
[21:07:00.084]    __Result=0x00000000
[21:07:00.084]  </debugvars>
[21:07:00.084]  
[21:07:00.084]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:07:00.084]    <block atomic="false" info="">
[21:07:00.084]      __var SW_DP_ABORT       = 0x0;
[21:07:00.084]        // -> [SW_DP_ABORT <= 0x00000000]
[21:07:00.084]      __var DP_CTRL_STAT      = 0x4;
[21:07:00.084]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:07:00.084]      __var DP_SELECT         = 0x8;
[21:07:00.084]        // -> [DP_SELECT <= 0x00000008]
[21:07:00.086]      __var powered_down      = 0;
[21:07:00.086]        // -> [powered_down <= 0x00000000]
[21:07:00.086]      WriteDP(DP_SELECT, 0x00000000);
[21:07:00.093]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:07:00.093]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:07:00.100]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:07:00.100]        // -> [powered_down <= 0x00000001]
[21:07:00.100]    </block>
[21:07:00.101]    <control if="powered_down" while="" timeout="0" info="">
[21:07:00.101]      // if-block "powered_down"
[21:07:00.101]        // =>  TRUE
[21:07:00.101]      <block atomic="false" info="">
[21:07:00.101]        Message(0, "Debug/System power-up request sent");
[21:07:00.104]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:07:00.109]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:07:00.109]      </block>
[21:07:00.109]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:07:00.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:07:00.129]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:07:00.129]        // while-condition  =>  FALSE
[21:07:00.129]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:07:00.129]      </control>
[21:07:00.129]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:07:00.129]        // if-block "(__protocol & 0xFFFF) == 1"
[21:07:00.129]          // =>  FALSE
[21:07:00.129]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:07:00.129]      </control>
[21:07:00.129]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:07:00.129]        // if-block "(__protocol & 0xFFFF) == 2"
[21:07:00.129]          // =>  TRUE
[21:07:00.129]        <block atomic="false" info="">
[21:07:00.129]          Message(0, "executing SWD power up");
[21:07:00.132]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:07:00.138]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:07:00.138]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:07:00.141]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:07:00.142]        </block>
[21:07:00.142]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:07:00.142]      </control>
[21:07:00.142]      // end if-block "powered_down"
[21:07:00.142]    </control>
[21:07:00.142]    <block atomic="false" info="">
[21:07:00.142]      __var DEBUG_PORT_VAL    = 0;
[21:07:00.142]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:07:00.142]      __var ACCESS_POINT_VAL  = 0;
[21:07:00.142]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:07:00.142]      __ap = 1; 
[21:07:00.143]        // -> [__ap <= 0x00000001]
[21:07:00.143]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:07:00.157]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:07:00.157]      __ap = 4;
[21:07:00.157]        // -> [__ap <= 0x00000004]
[21:07:00.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:07:00.174]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:07:00.174]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:07:00.174]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:07:00.177]    </block>
[21:07:00.177]    <block atomic="false" info="">
[21:07:00.177]      __var nReset = 0x80;
[21:07:00.178]        // -> [nReset <= 0x00000080]
[21:07:00.178]      __var canReadPins = 0;
[21:07:00.178]        // -> [canReadPins <= 0x00000000]
[21:07:00.178]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:07:00.186]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:07:00.187]        // -> [canReadPins <= 0x00000001]
[21:07:00.187]    </block>
[21:07:00.187]    <control if="" while="1" timeout="200" info="">
[21:07:00.187]      // while "1"  (timeout="200")
[21:07:00.187]      // while-condition  =>  TRUE
[21:07:00.187]      // while "1"  (timeout="200")
[21:07:00.187]      // while-condition  =>  TRUE
[21:07:00.187]      // while "1"  (timeout="200")
[21:07:00.188]      // while-condition  =>  TRUE
[21:07:00.188]      // while "1"  (timeout="200")
[21:07:00.188]      // while-condition  =>  TRUE
[21:07:00.188]      // while "1"  (timeout="200")
[21:07:00.188]      // while-condition  =>  TRUE
[21:07:00.188]      // while "1"  (timeout="200")
[21:07:00.188]      // while-condition  =>  TRUE
[21:07:00.188]      // while "1"  (timeout="200")
[21:07:00.188]      // while-condition  =>  TRUE
[21:07:00.188]      // while "1"  (timeout="200")
[21:07:00.189]      // while-condition  =>  TRUE
[21:07:00.189]      // while "1"  (timeout="200")
[21:07:00.189]      // while-condition  =>  TRUE
[21:07:00.189]      // while "1"  (timeout="200")
[21:07:00.190]      // while-condition  =>  TRUE
[21:07:00.190]      // while "1"  (timeout="200")
[21:07:00.190]      // while-condition  =>  TRUE
[21:07:00.190]      // while "1"  (timeout="200")
[21:07:00.190]      // while-condition  =>  TRUE
[21:07:00.190]      // while "1"  (timeout="200")
[21:07:00.190]      // while-condition  =>  TRUE
[21:07:00.190]      // while "1"  (timeout="200")
[21:07:00.190]      // while  =>  TIMEOUT
[21:07:00.190]      // end while "1"
[21:07:00.190]    </control>
[21:07:00.191]    <control if="canReadPins" while="" timeout="0" info="">
[21:07:00.191]      // if-block "canReadPins"
[21:07:00.191]        // =>  TRUE
[21:07:00.191]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:07:00.191]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:07:00.200]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:07:00.200]        // while-condition  =>  FALSE
[21:07:00.200]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:07:00.200]      </control>
[21:07:00.200]      // end if-block "canReadPins"
[21:07:00.200]    </control>
[21:07:00.200]    <control if="!canReadPins" while="" timeout="0" info="">
[21:07:00.203]      // if-block "!canReadPins"
[21:07:00.203]        // =>  FALSE
[21:07:00.203]      // skip if-block "!canReadPins"
[21:07:00.203]    </control>
[21:07:00.203]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:07:00.203]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:07:00.203]        // =>  TRUE
[21:07:00.203]      <block atomic="false" info="">
[21:07:00.203]        WriteAP(0x00, 0x190008);
[21:07:00.210]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:07:00.210]        WriteAP(0xF0, 0x01);
[21:07:00.228]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:07:00.228]      </block>
[21:07:00.228]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:07:00.228]    </control>
[21:07:00.228]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:07:00.228]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:07:00.228]        // =>  FALSE
[21:07:00.228]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:07:00.228]    </control>
[21:07:00.228]    <block atomic="false" info="">
[21:07:00.228]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:07:00.240]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:07:00.240]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:07:00.240]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:07:00.243]      __ap = 0; //lets make sure we reset the access point selection
[21:07:00.243]        // -> [__ap <= 0x00000000]
[21:07:00.243]    </block>
[21:07:00.243]  </sequence>
[21:07:00.243]  
[21:07:00.352]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:07:00.352]  
[21:07:00.352]  <debugvars>
[21:07:00.352]    // Pre-defined
[21:07:00.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:00.352]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:00.352]    __dp=0x00000000
[21:07:00.352]    __ap=0x00000000
[21:07:00.356]    __traceout=0x00000000      (Trace Disabled)
[21:07:00.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:00.356]    __FlashAddr=0x00000000
[21:07:00.356]    __FlashLen=0x00000000
[21:07:00.356]    __FlashArg=0x00000000
[21:07:00.356]    __FlashOp=0x00000000
[21:07:00.356]    __Result=0x00000000
[21:07:00.356]  </debugvars>
[21:07:00.356]  
[21:07:00.356]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:07:00.356]    <block atomic="false" info="">
[21:07:00.356]      __var deviceID = 0;
[21:07:00.357]        // -> [deviceID <= 0x00000000]
[21:07:00.357]      __var version = 0;
[21:07:00.357]        // -> [version <= 0x00000000]
[21:07:00.358]      __var partNum = 0;
[21:07:00.358]        // -> [partNum <= 0x00000000]
[21:07:00.358]      __var manuf = 0;
[21:07:00.358]        // -> [manuf <= 0x00000000]
[21:07:00.358]      __var isMSPM0G1X0X_G3X0X = 0;
[21:07:00.358]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:07:00.358]      __var isProduction = 0;
[21:07:00.358]        // -> [isProduction <= 0x00000000]
[21:07:00.358]      __var continueId = 0;
[21:07:00.358]        // -> [continueId <= 0x00000000]
[21:07:00.358]      deviceID =   Read32(0x41C40004);
[21:07:00.372]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:07:00.372]        // -> [deviceID <= 0x2BB8802F]
[21:07:00.372]      version = deviceID >> 28;
[21:07:00.372]        // -> [version <= 0x00000002]
[21:07:00.372]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:07:00.372]        // -> [partNum <= 0x0000BB88]
[21:07:00.372]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:07:00.372]        // -> [manuf <= 0x00000017]
[21:07:00.372]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:07:00.372]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:07:00.372]      isProduction = (version > 0);
[21:07:00.372]        // -> [isProduction <= 0x00000001]
[21:07:00.372]    </block>
[21:07:00.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:07:00.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:07:00.372]        // =>  FALSE
[21:07:00.372]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:07:00.372]    </control>
[21:07:00.372]    <control if="continueId == 4" while="" timeout="0" info="">
[21:07:00.372]      // if-block "continueId == 4"
[21:07:00.372]        // =>  FALSE
[21:07:00.372]      // skip if-block "continueId == 4"
[21:07:00.372]    </control>
[21:07:00.376]    <control if="!isProduction" while="" timeout="0" info="">
[21:07:00.376]      // if-block "!isProduction"
[21:07:00.376]        // =>  FALSE
[21:07:00.376]      // skip if-block "!isProduction"
[21:07:00.376]    </control>
[21:07:00.376]  </sequence>
[21:07:00.376]  
[21:08:20.473]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:08:20.473]  
[21:08:20.473]  <debugvars>
[21:08:20.473]    // Pre-defined
[21:08:20.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:20.474]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:20.474]    __dp=0x00000000
[21:08:20.474]    __ap=0x00000000
[21:08:20.474]    __traceout=0x00000000      (Trace Disabled)
[21:08:20.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:20.474]    __FlashAddr=0x00000000
[21:08:20.474]    __FlashLen=0x00000000
[21:08:20.474]    __FlashArg=0x00000000
[21:08:20.474]    __FlashOp=0x00000000
[21:08:20.474]    __Result=0x00000000
[21:08:20.474]  </debugvars>
[21:08:20.475]  
[21:08:20.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:08:20.475]    <block atomic="false" info="">
[21:08:20.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:08:20.475]        // -> [isSWJ <= 0x00000001]
[21:08:20.475]      __var hasDormant = __protocol & 0x00020000;
[21:08:20.475]        // -> [hasDormant <= 0x00000000]
[21:08:20.475]      __var protType   = __protocol & 0x0000FFFF;
[21:08:20.475]        // -> [protType <= 0x00000002]
[21:08:20.475]    </block>
[21:08:20.475]    <control if="protType == 1" while="" timeout="0" info="">
[21:08:20.475]      // if-block "protType == 1"
[21:08:20.477]        // =>  FALSE
[21:08:20.477]      // skip if-block "protType == 1"
[21:08:20.477]    </control>
[21:08:20.477]    <control if="protType == 2" while="" timeout="0" info="">
[21:08:20.477]      // if-block "protType == 2"
[21:08:20.477]        // =>  TRUE
[21:08:20.477]      <control if="isSWJ" while="" timeout="0" info="">
[21:08:20.477]        // if-block "isSWJ"
[21:08:20.478]          // =>  TRUE
[21:08:20.478]        <control if="hasDormant" while="" timeout="0" info="">
[21:08:20.478]          // if-block "hasDormant"
[21:08:20.478]            // =>  FALSE
[21:08:20.478]          // skip if-block "hasDormant"
[21:08:20.478]        </control>
[21:08:20.478]        <control if="!hasDormant" while="" timeout="0" info="">
[21:08:20.478]          // if-block "!hasDormant"
[21:08:20.478]            // =>  TRUE
[21:08:20.478]          <block atomic="false" info="">
[21:08:20.478]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:08:20.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:20.480]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:08:20.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:08:20.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:08:20.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:20.485]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:08:20.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:08:20.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:08:20.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:08:20.493]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:08:20.493]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:08:20.493]          </block>
[21:08:20.493]          // end if-block "!hasDormant"
[21:08:20.497]        </control>
[21:08:20.497]        // end if-block "isSWJ"
[21:08:20.497]      </control>
[21:08:20.497]      <control if="!isSWJ" while="" timeout="0" info="">
[21:08:20.497]        // if-block "!isSWJ"
[21:08:20.497]          // =>  FALSE
[21:08:20.497]        // skip if-block "!isSWJ"
[21:08:20.497]      </control>
[21:08:20.497]      <block atomic="false" info="">
[21:08:20.497]        ReadDP(0x0);
[21:08:20.499]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:08:20.499]      </block>
[21:08:20.499]      // end if-block "protType == 2"
[21:08:20.499]    </control>
[21:08:20.499]  </sequence>
[21:08:20.499]  
[21:08:20.500]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:08:20.500]  
[21:08:20.500]  <debugvars>
[21:08:20.500]    // Pre-defined
[21:08:20.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:20.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:20.500]    __dp=0x00000000
[21:08:20.500]    __ap=0x00000000
[21:08:20.500]    __traceout=0x00000000      (Trace Disabled)
[21:08:20.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:20.500]    __FlashAddr=0x00000000
[21:08:20.504]    __FlashLen=0x00000000
[21:08:20.504]    __FlashArg=0x00000000
[21:08:20.504]    __FlashOp=0x00000000
[21:08:20.504]    __Result=0x00000000
[21:08:20.504]  </debugvars>
[21:08:20.504]  
[21:08:20.504]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:08:20.505]    <block atomic="false" info="">
[21:08:20.505]      __var SW_DP_ABORT       = 0x0;
[21:08:20.505]        // -> [SW_DP_ABORT <= 0x00000000]
[21:08:20.505]      __var DP_CTRL_STAT      = 0x4;
[21:08:20.505]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:08:20.505]      __var DP_SELECT         = 0x8;
[21:08:20.505]        // -> [DP_SELECT <= 0x00000008]
[21:08:20.505]      __var powered_down      = 0;
[21:08:20.505]        // -> [powered_down <= 0x00000000]
[21:08:20.505]      WriteDP(DP_SELECT, 0x00000000);
[21:08:20.513]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:08:20.513]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:08:20.522]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:08:20.525]        // -> [powered_down <= 0x00000001]
[21:08:20.525]    </block>
[21:08:20.525]    <control if="powered_down" while="" timeout="0" info="">
[21:08:20.525]      // if-block "powered_down"
[21:08:20.525]        // =>  TRUE
[21:08:20.525]      <block atomic="false" info="">
[21:08:20.526]        Message(0, "Debug/System power-up request sent");
[21:08:20.528]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:08:20.529]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:08:20.529]      </block>
[21:08:20.529]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:08:20.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:08:20.530]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:08:20.530]        // while-condition  =>  FALSE
[21:08:20.530]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:08:20.530]      </control>
[21:08:20.530]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:08:20.530]        // if-block "(__protocol & 0xFFFF) == 1"
[21:08:20.530]          // =>  FALSE
[21:08:20.530]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:08:20.530]      </control>
[21:08:20.530]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:08:20.530]        // if-block "(__protocol & 0xFFFF) == 2"
[21:08:20.530]          // =>  TRUE
[21:08:20.530]        <block atomic="false" info="">
[21:08:20.530]          Message(0, "executing SWD power up");
[21:08:20.533]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:08:20.533]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:08:20.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:08:20.538]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:08:20.538]        </block>
[21:08:20.538]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:08:20.539]      </control>
[21:08:20.539]      // end if-block "powered_down"
[21:08:20.539]    </control>
[21:08:20.539]    <block atomic="false" info="">
[21:08:20.539]      __var DEBUG_PORT_VAL    = 0;
[21:08:20.539]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:08:20.539]      __var ACCESS_POINT_VAL  = 0;
[21:08:20.539]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:08:20.539]      __ap = 1; 
[21:08:20.539]        // -> [__ap <= 0x00000001]
[21:08:20.539]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:08:20.550]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:08:20.550]      __ap = 4;
[21:08:20.550]        // -> [__ap <= 0x00000004]
[21:08:20.550]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:20.554]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:08:20.554]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:08:20.554]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:20.554]    </block>
[21:08:20.554]    <block atomic="false" info="">
[21:08:20.554]      __var nReset = 0x80;
[21:08:20.554]        // -> [nReset <= 0x00000080]
[21:08:20.554]      __var canReadPins = 0;
[21:08:20.554]        // -> [canReadPins <= 0x00000000]
[21:08:20.554]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:08:20.558]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:08:20.558]        // -> [canReadPins <= 0x00000001]
[21:08:20.558]    </block>
[21:08:20.558]    <control if="" while="1" timeout="200" info="">
[21:08:20.558]      // while "1"  (timeout="200")
[21:08:20.558]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.559]      // while "1"  (timeout="200")
[21:08:20.559]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.560]      // while-condition  =>  TRUE
[21:08:20.560]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.562]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.562]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.562]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.562]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.562]      // while "1"  (timeout="200")
[21:08:20.562]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.563]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.563]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.563]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.563]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.563]      // while-condition  =>  TRUE
[21:08:20.563]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.564]      // while-condition  =>  TRUE
[21:08:20.564]      // while "1"  (timeout="200")
[21:08:20.565]      // while-condition  =>  TRUE
[21:08:20.565]      // while "1"  (timeout="200")
[21:08:20.565]      // while  =>  TIMEOUT
[21:08:20.565]      // end while "1"
[21:08:20.565]    </control>
[21:08:20.565]    <control if="canReadPins" while="" timeout="0" info="">
[21:08:20.565]      // if-block "canReadPins"
[21:08:20.565]        // =>  TRUE
[21:08:20.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:08:20.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:08:20.573]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:08:20.573]        // while-condition  =>  FALSE
[21:08:20.573]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:08:20.573]      </control>
[21:08:20.573]      // end if-block "canReadPins"
[21:08:20.575]    </control>
[21:08:20.575]    <control if="!canReadPins" while="" timeout="0" info="">
[21:08:20.575]      // if-block "!canReadPins"
[21:08:20.575]        // =>  FALSE
[21:08:20.575]      // skip if-block "!canReadPins"
[21:08:20.575]    </control>
[21:08:20.575]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:08:20.575]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:20.575]        // =>  TRUE
[21:08:20.575]      <block atomic="false" info="">
[21:08:20.575]        WriteAP(0x00, 0x190008);
[21:08:20.577]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:20.577]        WriteAP(0xF0, 0x01);
[21:08:20.579]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:08:20.579]      </block>
[21:08:20.579]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:08:20.579]    </control>
[21:08:20.579]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:08:20.579]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:20.579]        // =>  FALSE
[21:08:20.579]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:08:20.579]    </control>
[21:08:20.579]    <block atomic="false" info="">
[21:08:20.579]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:08:20.587]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:08:20.587]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:08:20.587]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:08:20.589]      __ap = 0; //lets make sure we reset the access point selection
[21:08:20.589]        // -> [__ap <= 0x00000000]
[21:08:20.589]    </block>
[21:08:20.589]  </sequence>
[21:08:20.589]  
[21:08:20.635]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:08:20.635]  
[21:08:20.635]  <debugvars>
[21:08:20.635]    // Pre-defined
[21:08:20.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:08:20.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:08:20.636]    __dp=0x00000000
[21:08:20.636]    __ap=0x00000000
[21:08:20.636]    __traceout=0x00000000      (Trace Disabled)
[21:08:20.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:08:20.636]    __FlashAddr=0x00000000
[21:08:20.636]    __FlashLen=0x00000000
[21:08:20.636]    __FlashArg=0x00000000
[21:08:20.637]    __FlashOp=0x00000000
[21:08:20.637]    __Result=0x00000000
[21:08:20.637]  </debugvars>
[21:08:20.637]  
[21:08:20.637]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:08:20.637]    <block atomic="false" info="">
[21:08:20.637]      __var deviceID = 0;
[21:08:20.637]        // -> [deviceID <= 0x00000000]
[21:08:20.637]      __var version = 0;
[21:08:20.638]        // -> [version <= 0x00000000]
[21:08:20.638]      __var partNum = 0;
[21:08:20.638]        // -> [partNum <= 0x00000000]
[21:08:20.638]      __var manuf = 0;
[21:08:20.638]        // -> [manuf <= 0x00000000]
[21:08:20.638]      __var isMSPM0G1X0X_G3X0X = 0;
[21:08:20.638]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:08:20.638]      __var isProduction = 0;
[21:08:20.638]        // -> [isProduction <= 0x00000000]
[21:08:20.638]      __var continueId = 0;
[21:08:20.638]        // -> [continueId <= 0x00000000]
[21:08:20.638]      deviceID =   Read32(0x41C40004);
[21:08:20.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:08:20.647]        // -> [deviceID <= 0x2BB8802F]
[21:08:20.647]      version = deviceID >> 28;
[21:08:20.647]        // -> [version <= 0x00000002]
[21:08:20.647]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:08:20.647]        // -> [partNum <= 0x0000BB88]
[21:08:20.648]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:08:20.648]        // -> [manuf <= 0x00000017]
[21:08:20.648]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:08:20.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:08:20.648]      isProduction = (version > 0);
[21:08:20.648]        // -> [isProduction <= 0x00000001]
[21:08:20.648]    </block>
[21:08:20.648]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:08:20.648]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:08:20.648]        // =>  FALSE
[21:08:20.648]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:08:20.649]    </control>
[21:08:20.649]    <control if="continueId == 4" while="" timeout="0" info="">
[21:08:20.649]      // if-block "continueId == 4"
[21:08:20.649]        // =>  FALSE
[21:08:20.649]      // skip if-block "continueId == 4"
[21:08:20.649]    </control>
[21:08:20.649]    <control if="!isProduction" while="" timeout="0" info="">
[21:08:20.649]      // if-block "!isProduction"
[21:08:20.649]        // =>  FALSE
[21:08:20.649]      // skip if-block "!isProduction"
[21:08:20.649]    </control>
[21:08:20.649]  </sequence>
[21:08:20.649]  
[21:09:11.846]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:09:11.846]  
[21:09:11.856]  <debugvars>
[21:09:11.856]    // Pre-defined
[21:09:11.856]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:11.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:11.856]    __dp=0x00000000
[21:09:11.856]    __ap=0x00000000
[21:09:11.856]    __traceout=0x00000000      (Trace Disabled)
[21:09:11.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:11.856]    __FlashAddr=0x00000000
[21:09:11.856]    __FlashLen=0x00000000
[21:09:11.856]    __FlashArg=0x00000000
[21:09:11.857]    __FlashOp=0x00000000
[21:09:11.857]    __Result=0x00000000
[21:09:11.857]  </debugvars>
[21:09:11.857]  
[21:09:11.857]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:09:11.857]    <block atomic="false" info="">
[21:09:11.857]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:09:11.857]        // -> [isSWJ <= 0x00000001]
[21:09:11.857]      __var hasDormant = __protocol & 0x00020000;
[21:09:11.857]        // -> [hasDormant <= 0x00000000]
[21:09:11.857]      __var protType   = __protocol & 0x0000FFFF;
[21:09:11.857]        // -> [protType <= 0x00000002]
[21:09:11.857]    </block>
[21:09:11.857]    <control if="protType == 1" while="" timeout="0" info="">
[21:09:11.857]      // if-block "protType == 1"
[21:09:11.857]        // =>  FALSE
[21:09:11.857]      // skip if-block "protType == 1"
[21:09:11.857]    </control>
[21:09:11.857]    <control if="protType == 2" while="" timeout="0" info="">
[21:09:11.857]      // if-block "protType == 2"
[21:09:11.857]        // =>  TRUE
[21:09:11.857]      <control if="isSWJ" while="" timeout="0" info="">
[21:09:11.859]        // if-block "isSWJ"
[21:09:11.859]          // =>  TRUE
[21:09:11.859]        <control if="hasDormant" while="" timeout="0" info="">
[21:09:11.859]          // if-block "hasDormant"
[21:09:11.859]            // =>  FALSE
[21:09:11.859]          // skip if-block "hasDormant"
[21:09:11.859]        </control>
[21:09:11.859]        <control if="!hasDormant" while="" timeout="0" info="">
[21:09:11.859]          // if-block "!hasDormant"
[21:09:11.859]            // =>  TRUE
[21:09:11.859]          <block atomic="false" info="">
[21:09:11.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:09:11.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:11.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:09:11.863]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:09:11.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:09:11.866]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:11.866]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:09:11.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:09:11.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:09:11.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:09:11.870]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:09:11.877]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:09:11.877]          </block>
[21:09:11.877]          // end if-block "!hasDormant"
[21:09:11.877]        </control>
[21:09:11.877]        // end if-block "isSWJ"
[21:09:11.877]      </control>
[21:09:11.877]      <control if="!isSWJ" while="" timeout="0" info="">
[21:09:11.877]        // if-block "!isSWJ"
[21:09:11.880]          // =>  FALSE
[21:09:11.880]        // skip if-block "!isSWJ"
[21:09:11.880]      </control>
[21:09:11.880]      <block atomic="false" info="">
[21:09:11.880]        ReadDP(0x0);
[21:09:11.880]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:09:11.880]      </block>
[21:09:11.880]      // end if-block "protType == 2"
[21:09:11.880]    </control>
[21:09:11.880]  </sequence>
[21:09:11.880]  
[21:09:11.885]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:09:11.885]  
[21:09:11.885]  <debugvars>
[21:09:11.885]    // Pre-defined
[21:09:11.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:11.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:11.885]    __dp=0x00000000
[21:09:11.885]    __ap=0x00000000
[21:09:11.885]    __traceout=0x00000000      (Trace Disabled)
[21:09:11.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:11.885]    __FlashAddr=0x00000000
[21:09:11.885]    __FlashLen=0x00000000
[21:09:11.885]    __FlashArg=0x00000000
[21:09:11.885]    __FlashOp=0x00000000
[21:09:11.886]    __Result=0x00000000
[21:09:11.886]  </debugvars>
[21:09:11.886]  
[21:09:11.886]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:09:11.886]    <block atomic="false" info="">
[21:09:11.886]      __var SW_DP_ABORT       = 0x0;
[21:09:11.886]        // -> [SW_DP_ABORT <= 0x00000000]
[21:09:11.886]      __var DP_CTRL_STAT      = 0x4;
[21:09:11.886]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:09:11.886]      __var DP_SELECT         = 0x8;
[21:09:11.886]        // -> [DP_SELECT <= 0x00000008]
[21:09:11.886]      __var powered_down      = 0;
[21:09:11.887]        // -> [powered_down <= 0x00000000]
[21:09:11.887]      WriteDP(DP_SELECT, 0x00000000);
[21:09:11.890]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:09:11.890]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:09:11.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:09:11.896]        // -> [powered_down <= 0x00000001]
[21:09:11.897]    </block>
[21:09:11.897]    <control if="powered_down" while="" timeout="0" info="">
[21:09:11.897]      // if-block "powered_down"
[21:09:11.897]        // =>  TRUE
[21:09:11.897]      <block atomic="false" info="">
[21:09:11.897]        Message(0, "Debug/System power-up request sent");
[21:09:11.900]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:09:11.903]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:09:11.903]      </block>
[21:09:11.903]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:09:11.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:09:11.905]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:09:11.905]        // while-condition  =>  FALSE
[21:09:11.905]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:09:11.905]      </control>
[21:09:11.905]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:09:11.905]        // if-block "(__protocol & 0xFFFF) == 1"
[21:09:11.905]          // =>  FALSE
[21:09:11.905]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:09:11.905]      </control>
[21:09:11.905]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:09:11.905]        // if-block "(__protocol & 0xFFFF) == 2"
[21:09:11.906]          // =>  TRUE
[21:09:11.906]        <block atomic="false" info="">
[21:09:11.906]          Message(0, "executing SWD power up");
[21:09:11.909]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:09:11.909]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:09:11.909]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:09:11.913]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:09:11.913]        </block>
[21:09:11.913]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:09:11.913]      </control>
[21:09:11.913]      // end if-block "powered_down"
[21:09:11.913]    </control>
[21:09:11.913]    <block atomic="false" info="">
[21:09:11.913]      __var DEBUG_PORT_VAL    = 0;
[21:09:11.913]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:09:11.913]      __var ACCESS_POINT_VAL  = 0;
[21:09:11.913]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:09:11.913]      __ap = 1; 
[21:09:11.916]        // -> [__ap <= 0x00000001]
[21:09:11.916]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:09:11.924]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:09:11.924]      __ap = 4;
[21:09:11.924]        // -> [__ap <= 0x00000004]
[21:09:11.924]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:09:11.929]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:09:11.929]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:09:11.929]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:09:11.932]    </block>
[21:09:11.932]    <block atomic="false" info="">
[21:09:11.932]      __var nReset = 0x80;
[21:09:11.932]        // -> [nReset <= 0x00000080]
[21:09:11.932]      __var canReadPins = 0;
[21:09:11.932]        // -> [canReadPins <= 0x00000000]
[21:09:11.932]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:09:11.940]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:09:11.940]        // -> [canReadPins <= 0x00000001]
[21:09:11.940]    </block>
[21:09:11.940]    <control if="" while="1" timeout="200" info="">
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.940]      // while "1"  (timeout="200")
[21:09:11.940]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.944]      // while-condition  =>  TRUE
[21:09:11.944]      // while "1"  (timeout="200")
[21:09:11.946]      // while-condition  =>  TRUE
[21:09:11.946]      // while "1"  (timeout="200")
[21:09:11.946]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.947]      // while "1"  (timeout="200")
[21:09:11.947]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.948]      // while "1"  (timeout="200")
[21:09:11.948]      // while-condition  =>  TRUE
[21:09:11.952]      // while "1"  (timeout="200")
[21:09:11.952]      // while-condition  =>  TRUE
[21:09:11.952]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.953]      // while-condition  =>  TRUE
[21:09:11.953]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.955]      // while "1"  (timeout="200")
[21:09:11.955]      // while-condition  =>  TRUE
[21:09:11.956]      // while "1"  (timeout="200")
[21:09:11.956]      // while  =>  TIMEOUT
[21:09:11.956]      // end while "1"
[21:09:11.956]    </control>
[21:09:11.956]    <control if="canReadPins" while="" timeout="0" info="">
[21:09:11.956]      // if-block "canReadPins"
[21:09:11.956]        // =>  TRUE
[21:09:11.956]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:09:11.956]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:09:11.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:09:11.957]        // while-condition  =>  FALSE
[21:09:11.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:09:11.957]      </control>
[21:09:11.957]      // end if-block "canReadPins"
[21:09:11.957]    </control>
[21:09:11.957]    <control if="!canReadPins" while="" timeout="0" info="">
[21:09:11.957]      // if-block "!canReadPins"
[21:09:11.957]        // =>  FALSE
[21:09:11.957]      // skip if-block "!canReadPins"
[21:09:11.957]    </control>
[21:09:11.957]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:09:11.957]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:09:11.957]        // =>  TRUE
[21:09:11.957]      <block atomic="false" info="">
[21:09:11.957]        WriteAP(0x00, 0x190008);
[21:09:11.968]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:09:11.968]        WriteAP(0xF0, 0x01);
[21:09:11.976]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:09:11.977]      </block>
[21:09:11.977]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:09:11.977]    </control>
[21:09:11.977]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:09:11.977]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:09:11.977]        // =>  FALSE
[21:09:11.977]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:09:11.977]    </control>
[21:09:11.977]    <block atomic="false" info="">
[21:09:11.977]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:09:11.982]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:09:11.982]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:09:11.982]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:09:11.984]      __ap = 0; //lets make sure we reset the access point selection
[21:09:11.984]        // -> [__ap <= 0x00000000]
[21:09:11.984]    </block>
[21:09:11.984]  </sequence>
[21:09:11.984]  
[21:09:12.028]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:09:12.028]  
[21:09:12.028]  <debugvars>
[21:09:12.028]    // Pre-defined
[21:09:12.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:09:12.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:09:12.030]    __dp=0x00000000
[21:09:12.030]    __ap=0x00000000
[21:09:12.030]    __traceout=0x00000000      (Trace Disabled)
[21:09:12.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:09:12.030]    __FlashAddr=0x00000000
[21:09:12.030]    __FlashLen=0x00000000
[21:09:12.030]    __FlashArg=0x00000000
[21:09:12.030]    __FlashOp=0x00000000
[21:09:12.030]    __Result=0x00000000
[21:09:12.030]  </debugvars>
[21:09:12.030]  
[21:09:12.030]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:09:12.030]    <block atomic="false" info="">
[21:09:12.030]      __var deviceID = 0;
[21:09:12.030]        // -> [deviceID <= 0x00000000]
[21:09:12.030]      __var version = 0;
[21:09:12.030]        // -> [version <= 0x00000000]
[21:09:12.030]      __var partNum = 0;
[21:09:12.030]        // -> [partNum <= 0x00000000]
[21:09:12.030]      __var manuf = 0;
[21:09:12.030]        // -> [manuf <= 0x00000000]
[21:09:12.030]      __var isMSPM0G1X0X_G3X0X = 0;
[21:09:12.030]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:09:12.030]      __var isProduction = 0;
[21:09:12.030]        // -> [isProduction <= 0x00000000]
[21:09:12.030]      __var continueId = 0;
[21:09:12.030]        // -> [continueId <= 0x00000000]
[21:09:12.030]      deviceID =   Read32(0x41C40004);
[21:09:12.049]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:09:12.049]        // -> [deviceID <= 0x2BB8802F]
[21:09:12.049]      version = deviceID >> 28;
[21:09:12.049]        // -> [version <= 0x00000002]
[21:09:12.049]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:09:12.049]        // -> [partNum <= 0x0000BB88]
[21:09:12.049]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:09:12.049]        // -> [manuf <= 0x00000017]
[21:09:12.049]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:09:12.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:09:12.049]      isProduction = (version > 0);
[21:09:12.049]        // -> [isProduction <= 0x00000001]
[21:09:12.049]    </block>
[21:09:12.049]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:09:12.049]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:09:12.049]        // =>  FALSE
[21:09:12.049]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:09:12.049]    </control>
[21:09:12.049]    <control if="continueId == 4" while="" timeout="0" info="">
[21:09:12.049]      // if-block "continueId == 4"
[21:09:12.049]        // =>  FALSE
[21:09:12.049]      // skip if-block "continueId == 4"
[21:09:12.049]    </control>
[21:09:12.049]    <control if="!isProduction" while="" timeout="0" info="">
[21:09:12.049]      // if-block "!isProduction"
[21:09:12.049]        // =>  FALSE
[21:09:12.049]      // skip if-block "!isProduction"
[21:09:12.049]    </control>
[21:09:12.049]  </sequence>
[21:09:12.049]  
[21:14:39.141]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:14:39.141]  
[21:14:39.142]  <debugvars>
[21:14:39.142]    // Pre-defined
[21:14:39.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:39.142]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:39.142]    __dp=0x00000000
[21:14:39.143]    __ap=0x00000000
[21:14:39.143]    __traceout=0x00000000      (Trace Disabled)
[21:14:39.143]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:39.143]    __FlashAddr=0x00000000
[21:14:39.143]    __FlashLen=0x00000000
[21:14:39.143]    __FlashArg=0x00000000
[21:14:39.144]    __FlashOp=0x00000000
[21:14:39.144]    __Result=0x00000000
[21:14:39.144]  </debugvars>
[21:14:39.144]  
[21:14:39.144]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:14:39.144]    <block atomic="false" info="">
[21:14:39.144]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:14:39.144]        // -> [isSWJ <= 0x00000001]
[21:14:39.144]      __var hasDormant = __protocol & 0x00020000;
[21:14:39.145]        // -> [hasDormant <= 0x00000000]
[21:14:39.145]      __var protType   = __protocol & 0x0000FFFF;
[21:14:39.145]        // -> [protType <= 0x00000002]
[21:14:39.145]    </block>
[21:14:39.145]    <control if="protType == 1" while="" timeout="0" info="">
[21:14:39.145]      // if-block "protType == 1"
[21:14:39.145]        // =>  FALSE
[21:14:39.145]      // skip if-block "protType == 1"
[21:14:39.145]    </control>
[21:14:39.145]    <control if="protType == 2" while="" timeout="0" info="">
[21:14:39.146]      // if-block "protType == 2"
[21:14:39.146]        // =>  TRUE
[21:14:39.146]      <control if="isSWJ" while="" timeout="0" info="">
[21:14:39.146]        // if-block "isSWJ"
[21:14:39.146]          // =>  TRUE
[21:14:39.146]        <control if="hasDormant" while="" timeout="0" info="">
[21:14:39.146]          // if-block "hasDormant"
[21:14:39.146]            // =>  FALSE
[21:14:39.146]          // skip if-block "hasDormant"
[21:14:39.146]        </control>
[21:14:39.147]        <control if="!hasDormant" while="" timeout="0" info="">
[21:14:39.147]          // if-block "!hasDormant"
[21:14:39.147]            // =>  TRUE
[21:14:39.147]          <block atomic="false" info="">
[21:14:39.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:14:39.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:39.153]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:14:39.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:14:39.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:14:39.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:39.158]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:14:39.159]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:14:39.159]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:14:39.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:14:39.161]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:14:39.162]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:14:39.162]          </block>
[21:14:39.162]          // end if-block "!hasDormant"
[21:14:39.162]        </control>
[21:14:39.162]        // end if-block "isSWJ"
[21:14:39.162]      </control>
[21:14:39.162]      <control if="!isSWJ" while="" timeout="0" info="">
[21:14:39.162]        // if-block "!isSWJ"
[21:14:39.162]          // =>  FALSE
[21:14:39.162]        // skip if-block "!isSWJ"
[21:14:39.162]      </control>
[21:14:39.162]      <block atomic="false" info="">
[21:14:39.162]        ReadDP(0x0);
[21:14:39.165]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:14:39.165]      </block>
[21:14:39.165]      // end if-block "protType == 2"
[21:14:39.165]    </control>
[21:14:39.165]  </sequence>
[21:14:39.165]  
[21:14:39.170]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:14:39.170]  
[21:14:39.170]  <debugvars>
[21:14:39.170]    // Pre-defined
[21:14:39.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:39.170]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:39.170]    __dp=0x00000000
[21:14:39.170]    __ap=0x00000000
[21:14:39.170]    __traceout=0x00000000      (Trace Disabled)
[21:14:39.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:39.170]    __FlashAddr=0x00000000
[21:14:39.170]    __FlashLen=0x00000000
[21:14:39.170]    __FlashArg=0x00000000
[21:14:39.170]    __FlashOp=0x00000000
[21:14:39.170]    __Result=0x00000000
[21:14:39.170]  </debugvars>
[21:14:39.173]  
[21:14:39.173]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:14:39.173]    <block atomic="false" info="">
[21:14:39.173]      __var SW_DP_ABORT       = 0x0;
[21:14:39.173]        // -> [SW_DP_ABORT <= 0x00000000]
[21:14:39.173]      __var DP_CTRL_STAT      = 0x4;
[21:14:39.173]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:14:39.173]      __var DP_SELECT         = 0x8;
[21:14:39.173]        // -> [DP_SELECT <= 0x00000008]
[21:14:39.173]      __var powered_down      = 0;
[21:14:39.173]        // -> [powered_down <= 0x00000000]
[21:14:39.173]      WriteDP(DP_SELECT, 0x00000000);
[21:14:39.177]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:14:39.177]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:14:39.179]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:14:39.179]        // -> [powered_down <= 0x00000001]
[21:14:39.179]    </block>
[21:14:39.179]    <control if="powered_down" while="" timeout="0" info="">
[21:14:39.179]      // if-block "powered_down"
[21:14:39.179]        // =>  TRUE
[21:14:39.180]      <block atomic="false" info="">
[21:14:39.180]        Message(0, "Debug/System power-up request sent");
[21:14:39.181]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:14:39.181]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:14:39.181]      </block>
[21:14:39.181]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:14:39.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:14:39.185]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:14:39.185]        // while-condition  =>  FALSE
[21:14:39.185]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:14:39.185]      </control>
[21:14:39.185]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:14:39.185]        // if-block "(__protocol & 0xFFFF) == 1"
[21:14:39.185]          // =>  FALSE
[21:14:39.185]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:14:39.185]      </control>
[21:14:39.185]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:14:39.185]        // if-block "(__protocol & 0xFFFF) == 2"
[21:14:39.185]          // =>  TRUE
[21:14:39.185]        <block atomic="false" info="">
[21:14:39.187]          Message(0, "executing SWD power up");
[21:14:39.188]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:14:39.190]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:14:39.190]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:14:39.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:14:39.190]        </block>
[21:14:39.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:14:39.190]      </control>
[21:14:39.190]      // end if-block "powered_down"
[21:14:39.190]    </control>
[21:14:39.190]    <block atomic="false" info="">
[21:14:39.190]      __var DEBUG_PORT_VAL    = 0;
[21:14:39.193]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:14:39.193]      __var ACCESS_POINT_VAL  = 0;
[21:14:39.193]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:14:39.193]      __ap = 1; 
[21:14:39.193]        // -> [__ap <= 0x00000001]
[21:14:39.193]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:14:39.201]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:14:39.204]      __ap = 4;
[21:14:39.204]        // -> [__ap <= 0x00000004]
[21:14:39.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:39.214]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:14:39.214]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:14:39.214]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:39.216]    </block>
[21:14:39.216]    <block atomic="false" info="">
[21:14:39.216]      __var nReset = 0x80;
[21:14:39.216]        // -> [nReset <= 0x00000080]
[21:14:39.216]      __var canReadPins = 0;
[21:14:39.216]        // -> [canReadPins <= 0x00000000]
[21:14:39.216]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:14:39.218]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:14:39.218]        // -> [canReadPins <= 0x00000001]
[21:14:39.218]    </block>
[21:14:39.218]    <control if="" while="1" timeout="200" info="">
[21:14:39.218]      // while "1"  (timeout="200")
[21:14:39.219]      // while-condition  =>  TRUE
[21:14:39.219]      // while "1"  (timeout="200")
[21:14:39.219]      // while-condition  =>  TRUE
[21:14:39.219]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.220]      // while "1"  (timeout="200")
[21:14:39.220]      // while-condition  =>  TRUE
[21:14:39.222]      // while "1"  (timeout="200")
[21:14:39.222]      // while  =>  TIMEOUT
[21:14:39.222]      // end while "1"
[21:14:39.222]    </control>
[21:14:39.222]    <control if="canReadPins" while="" timeout="0" info="">
[21:14:39.222]      // if-block "canReadPins"
[21:14:39.222]        // =>  TRUE
[21:14:39.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:14:39.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:14:39.222]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:14:39.222]        // while-condition  =>  FALSE
[21:14:39.222]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:14:39.222]      </control>
[21:14:39.222]      // end if-block "canReadPins"
[21:14:39.222]    </control>
[21:14:39.222]    <control if="!canReadPins" while="" timeout="0" info="">
[21:14:39.222]      // if-block "!canReadPins"
[21:14:39.222]        // =>  FALSE
[21:14:39.222]      // skip if-block "!canReadPins"
[21:14:39.222]    </control>
[21:14:39.222]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:14:39.222]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:39.222]        // =>  TRUE
[21:14:39.222]      <block atomic="false" info="">
[21:14:39.226]        WriteAP(0x00, 0x190008);
[21:14:39.226]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:39.226]        WriteAP(0xF0, 0x01);
[21:14:39.230]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:14:39.230]      </block>
[21:14:39.230]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:14:39.230]    </control>
[21:14:39.230]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:14:39.230]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:39.230]        // =>  FALSE
[21:14:39.230]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:14:39.230]    </control>
[21:14:39.230]    <block atomic="false" info="">
[21:14:39.230]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:14:39.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:14:39.239]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:14:39.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:14:39.242]      __ap = 0; //lets make sure we reset the access point selection
[21:14:39.242]        // -> [__ap <= 0x00000000]
[21:14:39.242]    </block>
[21:14:39.242]  </sequence>
[21:14:39.242]  
[21:14:39.259]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:14:39.259]  
[21:14:39.262]  <debugvars>
[21:14:39.262]    // Pre-defined
[21:14:39.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:14:39.262]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:14:39.262]    __dp=0x00000000
[21:14:39.262]    __ap=0x00000000
[21:14:39.262]    __traceout=0x00000000      (Trace Disabled)
[21:14:39.262]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:14:39.262]    __FlashAddr=0x00000000
[21:14:39.262]    __FlashLen=0x00000000
[21:14:39.262]    __FlashArg=0x00000000
[21:14:39.262]    __FlashOp=0x00000000
[21:14:39.262]    __Result=0x00000000
[21:14:39.262]  </debugvars>
[21:14:39.262]  
[21:14:39.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:14:39.264]    <block atomic="false" info="">
[21:14:39.264]      __var deviceID = 0;
[21:14:39.264]        // -> [deviceID <= 0x00000000]
[21:14:39.264]      __var version = 0;
[21:14:39.264]        // -> [version <= 0x00000000]
[21:14:39.264]      __var partNum = 0;
[21:14:39.264]        // -> [partNum <= 0x00000000]
[21:14:39.264]      __var manuf = 0;
[21:14:39.264]        // -> [manuf <= 0x00000000]
[21:14:39.264]      __var isMSPM0G1X0X_G3X0X = 0;
[21:14:39.264]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:14:39.264]      __var isProduction = 0;
[21:14:39.264]        // -> [isProduction <= 0x00000000]
[21:14:39.264]      __var continueId = 0;
[21:14:39.264]        // -> [continueId <= 0x00000000]
[21:14:39.264]      deviceID =   Read32(0x41C40004);
[21:14:39.270]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:14:39.270]        // -> [deviceID <= 0x2BB8802F]
[21:14:39.270]      version = deviceID >> 28;
[21:14:39.270]        // -> [version <= 0x00000002]
[21:14:39.270]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:14:39.272]        // -> [partNum <= 0x0000BB88]
[21:14:39.272]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:14:39.272]        // -> [manuf <= 0x00000017]
[21:14:39.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:14:39.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:14:39.272]      isProduction = (version > 0);
[21:14:39.272]        // -> [isProduction <= 0x00000001]
[21:14:39.272]    </block>
[21:14:39.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:14:39.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:14:39.272]        // =>  FALSE
[21:14:39.272]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:14:39.272]    </control>
[21:14:39.272]    <control if="continueId == 4" while="" timeout="0" info="">
[21:14:39.272]      // if-block "continueId == 4"
[21:14:39.272]        // =>  FALSE
[21:14:39.272]      // skip if-block "continueId == 4"
[21:14:39.272]    </control>
[21:14:39.272]    <control if="!isProduction" while="" timeout="0" info="">
[21:14:39.272]      // if-block "!isProduction"
[21:14:39.272]        // =>  FALSE
[21:14:39.272]      // skip if-block "!isProduction"
[21:14:39.272]    </control>
[21:14:39.272]  </sequence>
[21:14:39.272]  
[21:15:42.989]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:15:42.989]  
[21:15:42.989]  <debugvars>
[21:15:42.989]    // Pre-defined
[21:15:42.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:42.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:42.990]    __dp=0x00000000
[21:15:42.990]    __ap=0x00000000
[21:15:42.990]    __traceout=0x00000000      (Trace Disabled)
[21:15:42.990]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:42.990]    __FlashAddr=0x00000000
[21:15:42.990]    __FlashLen=0x00000000
[21:15:42.990]    __FlashArg=0x00000000
[21:15:42.990]    __FlashOp=0x00000000
[21:15:42.990]    __Result=0x00000000
[21:15:42.990]  </debugvars>
[21:15:42.990]  
[21:15:42.990]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:15:42.990]    <block atomic="false" info="">
[21:15:42.990]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:15:42.990]        // -> [isSWJ <= 0x00000001]
[21:15:42.990]      __var hasDormant = __protocol & 0x00020000;
[21:15:42.990]        // -> [hasDormant <= 0x00000000]
[21:15:42.992]      __var protType   = __protocol & 0x0000FFFF;
[21:15:42.992]        // -> [protType <= 0x00000002]
[21:15:42.992]    </block>
[21:15:42.992]    <control if="protType == 1" while="" timeout="0" info="">
[21:15:42.992]      // if-block "protType == 1"
[21:15:42.992]        // =>  FALSE
[21:15:42.992]      // skip if-block "protType == 1"
[21:15:42.992]    </control>
[21:15:42.992]    <control if="protType == 2" while="" timeout="0" info="">
[21:15:42.992]      // if-block "protType == 2"
[21:15:42.992]        // =>  TRUE
[21:15:42.992]      <control if="isSWJ" while="" timeout="0" info="">
[21:15:42.992]        // if-block "isSWJ"
[21:15:42.992]          // =>  TRUE
[21:15:42.992]        <control if="hasDormant" while="" timeout="0" info="">
[21:15:42.992]          // if-block "hasDormant"
[21:15:42.992]            // =>  FALSE
[21:15:42.992]          // skip if-block "hasDormant"
[21:15:42.992]        </control>
[21:15:42.992]        <control if="!hasDormant" while="" timeout="0" info="">
[21:15:42.992]          // if-block "!hasDormant"
[21:15:42.992]            // =>  TRUE
[21:15:42.992]          <block atomic="false" info="">
[21:15:42.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:15:42.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:42.996]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:15:42.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:15:42.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:15:43.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:43.001]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:15:43.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:15:43.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:15:43.008]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:15:43.008]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:15:43.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:15:43.011]          </block>
[21:15:43.011]          // end if-block "!hasDormant"
[21:15:43.011]        </control>
[21:15:43.011]        // end if-block "isSWJ"
[21:15:43.011]      </control>
[21:15:43.011]      <control if="!isSWJ" while="" timeout="0" info="">
[21:15:43.011]        // if-block "!isSWJ"
[21:15:43.011]          // =>  FALSE
[21:15:43.011]        // skip if-block "!isSWJ"
[21:15:43.011]      </control>
[21:15:43.011]      <block atomic="false" info="">
[21:15:43.011]        ReadDP(0x0);
[21:15:43.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:15:43.013]      </block>
[21:15:43.013]      // end if-block "protType == 2"
[21:15:43.013]    </control>
[21:15:43.013]  </sequence>
[21:15:43.013]  
[21:15:43.013]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:15:43.013]  
[21:15:43.013]  <debugvars>
[21:15:43.013]    // Pre-defined
[21:15:43.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:43.013]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:43.017]    __dp=0x00000000
[21:15:43.017]    __ap=0x00000000
[21:15:43.017]    __traceout=0x00000000      (Trace Disabled)
[21:15:43.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:43.017]    __FlashAddr=0x00000000
[21:15:43.017]    __FlashLen=0x00000000
[21:15:43.017]    __FlashArg=0x00000000
[21:15:43.017]    __FlashOp=0x00000000
[21:15:43.018]    __Result=0x00000000
[21:15:43.018]  </debugvars>
[21:15:43.018]  
[21:15:43.018]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:15:43.018]    <block atomic="false" info="">
[21:15:43.018]      __var SW_DP_ABORT       = 0x0;
[21:15:43.019]        // -> [SW_DP_ABORT <= 0x00000000]
[21:15:43.019]      __var DP_CTRL_STAT      = 0x4;
[21:15:43.019]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:15:43.019]      __var DP_SELECT         = 0x8;
[21:15:43.019]        // -> [DP_SELECT <= 0x00000008]
[21:15:43.019]      __var powered_down      = 0;
[21:15:43.019]        // -> [powered_down <= 0x00000000]
[21:15:43.019]      WriteDP(DP_SELECT, 0x00000000);
[21:15:43.020]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:15:43.020]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:15:43.029]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:15:43.029]        // -> [powered_down <= 0x00000001]
[21:15:43.029]    </block>
[21:15:43.029]    <control if="powered_down" while="" timeout="0" info="">
[21:15:43.029]      // if-block "powered_down"
[21:15:43.029]        // =>  TRUE
[21:15:43.029]      <block atomic="false" info="">
[21:15:43.029]        Message(0, "Debug/System power-up request sent");
[21:15:43.029]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:15:43.033]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:15:43.037]      </block>
[21:15:43.038]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:15:43.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:15:43.040]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:15:43.040]        // while-condition  =>  FALSE
[21:15:43.040]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:15:43.040]      </control>
[21:15:43.040]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:15:43.040]        // if-block "(__protocol & 0xFFFF) == 1"
[21:15:43.040]          // =>  FALSE
[21:15:43.040]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:15:43.040]      </control>
[21:15:43.040]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:15:43.040]        // if-block "(__protocol & 0xFFFF) == 2"
[21:15:43.040]          // =>  TRUE
[21:15:43.040]        <block atomic="false" info="">
[21:15:43.040]          Message(0, "executing SWD power up");
[21:15:43.043]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:15:43.046]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:15:43.048]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:15:43.050]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:15:43.050]        </block>
[21:15:43.050]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:15:43.050]      </control>
[21:15:43.050]      // end if-block "powered_down"
[21:15:43.050]    </control>
[21:15:43.050]    <block atomic="false" info="">
[21:15:43.050]      __var DEBUG_PORT_VAL    = 0;
[21:15:43.050]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:15:43.050]      __var ACCESS_POINT_VAL  = 0;
[21:15:43.050]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:15:43.050]      __ap = 1; 
[21:15:43.050]        // -> [__ap <= 0x00000001]
[21:15:43.050]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:15:43.054]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:15:43.054]      __ap = 4;
[21:15:43.054]        // -> [__ap <= 0x00000004]
[21:15:43.054]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:43.060]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:15:43.060]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:15:43.060]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:43.063]    </block>
[21:15:43.063]    <block atomic="false" info="">
[21:15:43.063]      __var nReset = 0x80;
[21:15:43.063]        // -> [nReset <= 0x00000080]
[21:15:43.063]      __var canReadPins = 0;
[21:15:43.063]        // -> [canReadPins <= 0x00000000]
[21:15:43.063]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:15:43.070]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:15:43.070]        // -> [canReadPins <= 0x00000001]
[21:15:43.070]    </block>
[21:15:43.070]    <control if="" while="1" timeout="200" info="">
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.070]      // while-condition  =>  TRUE
[21:15:43.070]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.074]      // while-condition  =>  TRUE
[21:15:43.074]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.076]      // while-condition  =>  TRUE
[21:15:43.076]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.078]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.078]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.078]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.078]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.078]      // while "1"  (timeout="200")
[21:15:43.078]      // while-condition  =>  TRUE
[21:15:43.079]      // while "1"  (timeout="200")
[21:15:43.079]      // while-condition  =>  TRUE
[21:15:43.079]      // while "1"  (timeout="200")
[21:15:43.079]      // while-condition  =>  TRUE
[21:15:43.079]      // while "1"  (timeout="200")
[21:15:43.079]      // while-condition  =>  TRUE
[21:15:43.079]      // while "1"  (timeout="200")
[21:15:43.079]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.080]      // while "1"  (timeout="200")
[21:15:43.080]      // while-condition  =>  TRUE
[21:15:43.083]      // while "1"  (timeout="200")
[21:15:43.083]      // while  =>  TIMEOUT
[21:15:43.083]      // end while "1"
[21:15:43.083]    </control>
[21:15:43.083]    <control if="canReadPins" while="" timeout="0" info="">
[21:15:43.083]      // if-block "canReadPins"
[21:15:43.083]        // =>  TRUE
[21:15:43.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:15:43.083]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:15:43.095]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:15:43.095]        // while-condition  =>  FALSE
[21:15:43.095]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:15:43.095]      </control>
[21:15:43.095]      // end if-block "canReadPins"
[21:15:43.095]    </control>
[21:15:43.095]    <control if="!canReadPins" while="" timeout="0" info="">
[21:15:43.095]      // if-block "!canReadPins"
[21:15:43.095]        // =>  FALSE
[21:15:43.095]      // skip if-block "!canReadPins"
[21:15:43.095]    </control>
[21:15:43.095]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:15:43.095]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:43.095]        // =>  TRUE
[21:15:43.095]      <block atomic="false" info="">
[21:15:43.095]        WriteAP(0x00, 0x190008);
[21:15:43.098]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:43.098]        WriteAP(0xF0, 0x01);
[21:15:43.108]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:15:43.108]      </block>
[21:15:43.108]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:15:43.108]    </control>
[21:15:43.108]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:15:43.108]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:43.109]        // =>  FALSE
[21:15:43.109]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:15:43.109]    </control>
[21:15:43.109]    <block atomic="false" info="">
[21:15:43.109]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:15:43.114]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:15:43.117]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:15:43.117]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:15:43.120]      __ap = 0; //lets make sure we reset the access point selection
[21:15:43.120]        // -> [__ap <= 0x00000000]
[21:15:43.120]    </block>
[21:15:43.120]  </sequence>
[21:15:43.120]  
[21:15:43.175]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:15:43.175]  
[21:15:43.175]  <debugvars>
[21:15:43.175]    // Pre-defined
[21:15:43.175]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:15:43.175]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:15:43.175]    __dp=0x00000000
[21:15:43.175]    __ap=0x00000000
[21:15:43.175]    __traceout=0x00000000      (Trace Disabled)
[21:15:43.175]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:15:43.175]    __FlashAddr=0x00000000
[21:15:43.175]    __FlashLen=0x00000000
[21:15:43.175]    __FlashArg=0x00000000
[21:15:43.175]    __FlashOp=0x00000000
[21:15:43.175]    __Result=0x00000000
[21:15:43.175]  </debugvars>
[21:15:43.175]  
[21:15:43.175]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:15:43.175]    <block atomic="false" info="">
[21:15:43.175]      __var deviceID = 0;
[21:15:43.175]        // -> [deviceID <= 0x00000000]
[21:15:43.175]      __var version = 0;
[21:15:43.175]        // -> [version <= 0x00000000]
[21:15:43.175]      __var partNum = 0;
[21:15:43.177]        // -> [partNum <= 0x00000000]
[21:15:43.177]      __var manuf = 0;
[21:15:43.177]        // -> [manuf <= 0x00000000]
[21:15:43.178]      __var isMSPM0G1X0X_G3X0X = 0;
[21:15:43.178]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:15:43.178]      __var isProduction = 0;
[21:15:43.178]        // -> [isProduction <= 0x00000000]
[21:15:43.178]      __var continueId = 0;
[21:15:43.178]        // -> [continueId <= 0x00000000]
[21:15:43.178]      deviceID =   Read32(0x41C40004);
[21:15:43.190]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:15:43.190]        // -> [deviceID <= 0x2BB8802F]
[21:15:43.190]      version = deviceID >> 28;
[21:15:43.190]        // -> [version <= 0x00000002]
[21:15:43.190]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:15:43.190]        // -> [partNum <= 0x0000BB88]
[21:15:43.190]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:15:43.190]        // -> [manuf <= 0x00000017]
[21:15:43.190]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:15:43.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:15:43.190]      isProduction = (version > 0);
[21:15:43.190]        // -> [isProduction <= 0x00000001]
[21:15:43.190]    </block>
[21:15:43.190]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:15:43.190]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:15:43.190]        // =>  FALSE
[21:15:43.190]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:15:43.190]    </control>
[21:15:43.193]    <control if="continueId == 4" while="" timeout="0" info="">
[21:15:43.193]      // if-block "continueId == 4"
[21:15:43.193]        // =>  FALSE
[21:15:43.193]      // skip if-block "continueId == 4"
[21:15:43.193]    </control>
[21:15:43.193]    <control if="!isProduction" while="" timeout="0" info="">
[21:15:43.193]      // if-block "!isProduction"
[21:15:43.193]        // =>  FALSE
[21:15:43.193]      // skip if-block "!isProduction"
[21:15:43.193]    </control>
[21:15:43.193]  </sequence>
[21:15:43.193]  
[21:16:22.492]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:16:22.492]  
[21:16:22.500]  <debugvars>
[21:16:22.500]    // Pre-defined
[21:16:22.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:22.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:22.500]    __dp=0x00000000
[21:16:22.500]    __ap=0x00000000
[21:16:22.500]    __traceout=0x00000000      (Trace Disabled)
[21:16:22.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:22.500]    __FlashAddr=0x00000000
[21:16:22.500]    __FlashLen=0x00000000
[21:16:22.500]    __FlashArg=0x00000000
[21:16:22.500]    __FlashOp=0x00000000
[21:16:22.500]    __Result=0x00000000
[21:16:22.500]  </debugvars>
[21:16:22.500]  
[21:16:22.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:16:22.500]    <block atomic="false" info="">
[21:16:22.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:16:22.500]        // -> [isSWJ <= 0x00000001]
[21:16:22.500]      __var hasDormant = __protocol & 0x00020000;
[21:16:22.500]        // -> [hasDormant <= 0x00000000]
[21:16:22.500]      __var protType   = __protocol & 0x0000FFFF;
[21:16:22.500]        // -> [protType <= 0x00000002]
[21:16:22.500]    </block>
[21:16:22.500]    <control if="protType == 1" while="" timeout="0" info="">
[21:16:22.500]      // if-block "protType == 1"
[21:16:22.502]        // =>  FALSE
[21:16:22.502]      // skip if-block "protType == 1"
[21:16:22.502]    </control>
[21:16:22.502]    <control if="protType == 2" while="" timeout="0" info="">
[21:16:22.502]      // if-block "protType == 2"
[21:16:22.502]        // =>  TRUE
[21:16:22.502]      <control if="isSWJ" while="" timeout="0" info="">
[21:16:22.502]        // if-block "isSWJ"
[21:16:22.502]          // =>  TRUE
[21:16:22.502]        <control if="hasDormant" while="" timeout="0" info="">
[21:16:22.502]          // if-block "hasDormant"
[21:16:22.503]            // =>  FALSE
[21:16:22.503]          // skip if-block "hasDormant"
[21:16:22.503]        </control>
[21:16:22.503]        <control if="!hasDormant" while="" timeout="0" info="">
[21:16:22.503]          // if-block "!hasDormant"
[21:16:22.503]            // =>  TRUE
[21:16:22.503]          <block atomic="false" info="">
[21:16:22.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:16:22.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:22.509]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:16:22.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:16:22.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:16:22.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:22.516]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:16:22.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:16:22.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:16:22.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:16:22.524]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:16:22.531]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:16:22.531]          </block>
[21:16:22.531]          // end if-block "!hasDormant"
[21:16:22.531]        </control>
[21:16:22.531]        // end if-block "isSWJ"
[21:16:22.531]      </control>
[21:16:22.532]      <control if="!isSWJ" while="" timeout="0" info="">
[21:16:22.532]        // if-block "!isSWJ"
[21:16:22.532]          // =>  FALSE
[21:16:22.532]        // skip if-block "!isSWJ"
[21:16:22.532]      </control>
[21:16:22.532]      <block atomic="false" info="">
[21:16:22.532]        ReadDP(0x0);
[21:16:22.534]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:16:22.534]      </block>
[21:16:22.534]      // end if-block "protType == 2"
[21:16:22.534]    </control>
[21:16:22.534]  </sequence>
[21:16:22.534]  
[21:16:22.538]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:16:22.538]  
[21:16:22.539]  <debugvars>
[21:16:22.539]    // Pre-defined
[21:16:22.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:22.539]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:22.539]    __dp=0x00000000
[21:16:22.539]    __ap=0x00000000
[21:16:22.539]    __traceout=0x00000000      (Trace Disabled)
[21:16:22.539]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:22.539]    __FlashAddr=0x00000000
[21:16:22.539]    __FlashLen=0x00000000
[21:16:22.539]    __FlashArg=0x00000000
[21:16:22.539]    __FlashOp=0x00000000
[21:16:22.539]    __Result=0x00000000
[21:16:22.539]  </debugvars>
[21:16:22.539]  
[21:16:22.539]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:16:22.541]    <block atomic="false" info="">
[21:16:22.541]      __var SW_DP_ABORT       = 0x0;
[21:16:22.541]        // -> [SW_DP_ABORT <= 0x00000000]
[21:16:22.541]      __var DP_CTRL_STAT      = 0x4;
[21:16:22.541]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:16:22.541]      __var DP_SELECT         = 0x8;
[21:16:22.541]        // -> [DP_SELECT <= 0x00000008]
[21:16:22.541]      __var powered_down      = 0;
[21:16:22.541]        // -> [powered_down <= 0x00000000]
[21:16:22.541]      WriteDP(DP_SELECT, 0x00000000);
[21:16:22.549]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:16:22.549]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:16:22.550]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:16:22.550]        // -> [powered_down <= 0x00000001]
[21:16:22.550]    </block>
[21:16:22.550]    <control if="powered_down" while="" timeout="0" info="">
[21:16:22.550]      // if-block "powered_down"
[21:16:22.550]        // =>  TRUE
[21:16:22.550]      <block atomic="false" info="">
[21:16:22.550]        Message(0, "Debug/System power-up request sent");
[21:16:22.554]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:16:22.557]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:16:22.557]      </block>
[21:16:22.557]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:16:22.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:16:22.561]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:16:22.562]        // while-condition  =>  FALSE
[21:16:22.562]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:16:22.562]      </control>
[21:16:22.562]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:16:22.562]        // if-block "(__protocol & 0xFFFF) == 1"
[21:16:22.562]          // =>  FALSE
[21:16:22.562]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:16:22.562]      </control>
[21:16:22.562]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:16:22.562]        // if-block "(__protocol & 0xFFFF) == 2"
[21:16:22.562]          // =>  TRUE
[21:16:22.562]        <block atomic="false" info="">
[21:16:22.563]          Message(0, "executing SWD power up");
[21:16:22.564]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:16:22.574]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:16:22.574]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:16:22.576]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:16:22.576]        </block>
[21:16:22.577]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:16:22.577]      </control>
[21:16:22.577]      // end if-block "powered_down"
[21:16:22.577]    </control>
[21:16:22.577]    <block atomic="false" info="">
[21:16:22.577]      __var DEBUG_PORT_VAL    = 0;
[21:16:22.577]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:16:22.577]      __var ACCESS_POINT_VAL  = 0;
[21:16:22.577]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:16:22.577]      __ap = 1; 
[21:16:22.577]        // -> [__ap <= 0x00000001]
[21:16:22.578]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:16:22.580]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:16:22.580]      __ap = 4;
[21:16:22.580]        // -> [__ap <= 0x00000004]
[21:16:22.580]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:22.584]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:16:22.584]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:16:22.584]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:22.589]    </block>
[21:16:22.589]    <block atomic="false" info="">
[21:16:22.589]      __var nReset = 0x80;
[21:16:22.589]        // -> [nReset <= 0x00000080]
[21:16:22.589]      __var canReadPins = 0;
[21:16:22.589]        // -> [canReadPins <= 0x00000000]
[21:16:22.589]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:16:22.592]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:16:22.592]        // -> [canReadPins <= 0x00000001]
[21:16:22.592]    </block>
[21:16:22.592]    <control if="" while="1" timeout="200" info="">
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.592]      // while-condition  =>  TRUE
[21:16:22.592]      // while "1"  (timeout="200")
[21:16:22.596]      // while-condition  =>  TRUE
[21:16:22.596]      // while "1"  (timeout="200")
[21:16:22.596]      // while  =>  TIMEOUT
[21:16:22.596]      // end while "1"
[21:16:22.596]    </control>
[21:16:22.596]    <control if="canReadPins" while="" timeout="0" info="">
[21:16:22.596]      // if-block "canReadPins"
[21:16:22.596]        // =>  TRUE
[21:16:22.596]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:16:22.596]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:16:22.601]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:16:22.601]        // while-condition  =>  FALSE
[21:16:22.601]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:16:22.601]      </control>
[21:16:22.601]      // end if-block "canReadPins"
[21:16:22.601]    </control>
[21:16:22.601]    <control if="!canReadPins" while="" timeout="0" info="">
[21:16:22.601]      // if-block "!canReadPins"
[21:16:22.601]        // =>  FALSE
[21:16:22.601]      // skip if-block "!canReadPins"
[21:16:22.601]    </control>
[21:16:22.601]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:16:22.601]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:22.601]        // =>  TRUE
[21:16:22.601]      <block atomic="false" info="">
[21:16:22.601]        WriteAP(0x00, 0x190008);
[21:16:22.601]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:22.601]        WriteAP(0xF0, 0x01);
[21:16:22.609]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:16:22.609]      </block>
[21:16:22.609]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:16:22.609]    </control>
[21:16:22.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:16:22.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:22.609]        // =>  FALSE
[21:16:22.610]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:16:22.610]    </control>
[21:16:22.610]    <block atomic="false" info="">
[21:16:22.610]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:16:22.618]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:16:22.618]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:16:22.618]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:16:22.620]      __ap = 0; //lets make sure we reset the access point selection
[21:16:22.620]        // -> [__ap <= 0x00000000]
[21:16:22.620]    </block>
[21:16:22.620]  </sequence>
[21:16:22.620]  
[21:16:22.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:16:22.661]  
[21:16:22.661]  <debugvars>
[21:16:22.661]    // Pre-defined
[21:16:22.661]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:16:22.661]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:16:22.661]    __dp=0x00000000
[21:16:22.661]    __ap=0x00000000
[21:16:22.661]    __traceout=0x00000000      (Trace Disabled)
[21:16:22.661]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:16:22.661]    __FlashAddr=0x00000000
[21:16:22.661]    __FlashLen=0x00000000
[21:16:22.661]    __FlashArg=0x00000000
[21:16:22.661]    __FlashOp=0x00000000
[21:16:22.661]    __Result=0x00000000
[21:16:22.661]  </debugvars>
[21:16:22.661]  
[21:16:22.661]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:16:22.661]    <block atomic="false" info="">
[21:16:22.661]      __var deviceID = 0;
[21:16:22.661]        // -> [deviceID <= 0x00000000]
[21:16:22.661]      __var version = 0;
[21:16:22.661]        // -> [version <= 0x00000000]
[21:16:22.661]      __var partNum = 0;
[21:16:22.661]        // -> [partNum <= 0x00000000]
[21:16:22.661]      __var manuf = 0;
[21:16:22.661]        // -> [manuf <= 0x00000000]
[21:16:22.661]      __var isMSPM0G1X0X_G3X0X = 0;
[21:16:22.661]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:16:22.661]      __var isProduction = 0;
[21:16:22.661]        // -> [isProduction <= 0x00000000]
[21:16:22.661]      __var continueId = 0;
[21:16:22.665]        // -> [continueId <= 0x00000000]
[21:16:22.665]      deviceID =   Read32(0x41C40004);
[21:16:22.671]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:16:22.671]        // -> [deviceID <= 0x2BB8802F]
[21:16:22.671]      version = deviceID >> 28;
[21:16:22.671]        // -> [version <= 0x00000002]
[21:16:22.671]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:16:22.671]        // -> [partNum <= 0x0000BB88]
[21:16:22.671]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:16:22.671]        // -> [manuf <= 0x00000017]
[21:16:22.671]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:16:22.671]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:16:22.671]      isProduction = (version > 0);
[21:16:22.671]        // -> [isProduction <= 0x00000001]
[21:16:22.671]    </block>
[21:16:22.671]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:16:22.671]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:16:22.671]        // =>  FALSE
[21:16:22.671]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:16:22.673]    </control>
[21:16:22.673]    <control if="continueId == 4" while="" timeout="0" info="">
[21:16:22.673]      // if-block "continueId == 4"
[21:16:22.673]        // =>  FALSE
[21:16:22.673]      // skip if-block "continueId == 4"
[21:16:22.673]    </control>
[21:16:22.673]    <control if="!isProduction" while="" timeout="0" info="">
[21:16:22.673]      // if-block "!isProduction"
[21:16:22.673]        // =>  FALSE
[21:16:22.673]      // skip if-block "!isProduction"
[21:16:22.673]    </control>
[21:16:22.673]  </sequence>
[21:16:22.673]  
[21:47:05.524]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:47:05.524]  
[21:47:05.535]  <debugvars>
[21:47:05.535]    // Pre-defined
[21:47:05.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:47:05.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:47:05.535]    __dp=0x00000000
[21:47:05.535]    __ap=0x00000000
[21:47:05.535]    __traceout=0x00000000      (Trace Disabled)
[21:47:05.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:47:05.535]    __FlashAddr=0x00000000
[21:47:05.535]    __FlashLen=0x00000000
[21:47:05.535]    __FlashArg=0x00000000
[21:47:05.535]    __FlashOp=0x00000000
[21:47:05.535]    __Result=0x00000000
[21:47:05.537]  </debugvars>
[21:47:05.537]  
[21:47:05.537]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:47:05.537]    <block atomic="false" info="">
[21:47:05.537]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:47:05.537]        // -> [isSWJ <= 0x00000001]
[21:47:05.537]      __var hasDormant = __protocol & 0x00020000;
[21:47:05.537]        // -> [hasDormant <= 0x00000000]
[21:47:05.537]      __var protType   = __protocol & 0x0000FFFF;
[21:47:05.538]        // -> [protType <= 0x00000002]
[21:47:05.538]    </block>
[21:47:05.538]    <control if="protType == 1" while="" timeout="0" info="">
[21:47:05.538]      // if-block "protType == 1"
[21:47:05.538]        // =>  FALSE
[21:47:05.538]      // skip if-block "protType == 1"
[21:47:05.538]    </control>
[21:47:05.538]    <control if="protType == 2" while="" timeout="0" info="">
[21:47:05.538]      // if-block "protType == 2"
[21:47:05.538]        // =>  TRUE
[21:47:05.538]      <control if="isSWJ" while="" timeout="0" info="">
[21:47:05.538]        // if-block "isSWJ"
[21:47:05.538]          // =>  TRUE
[21:47:05.538]        <control if="hasDormant" while="" timeout="0" info="">
[21:47:05.538]          // if-block "hasDormant"
[21:47:05.538]            // =>  FALSE
[21:47:05.538]          // skip if-block "hasDormant"
[21:47:05.538]        </control>
[21:47:05.538]        <control if="!hasDormant" while="" timeout="0" info="">
[21:47:05.538]          // if-block "!hasDormant"
[21:47:05.538]            // =>  TRUE
[21:47:05.538]          <block atomic="false" info="">
[21:47:05.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:47:05.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:47:05.545]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:47:05.545]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:47:05.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:47:05.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:47:05.551]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:47:05.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:47:05.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:47:05.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:47:05.553]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:47:05.556]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:47:05.556]          </block>
[21:47:05.556]          // end if-block "!hasDormant"
[21:47:05.556]        </control>
[21:47:05.556]        // end if-block "isSWJ"
[21:47:05.556]      </control>
[21:47:05.556]      <control if="!isSWJ" while="" timeout="0" info="">
[21:47:05.556]        // if-block "!isSWJ"
[21:47:05.556]          // =>  FALSE
[21:47:05.556]        // skip if-block "!isSWJ"
[21:47:05.556]      </control>
[21:47:05.556]      <block atomic="false" info="">
[21:47:05.556]        ReadDP(0x0);
[21:47:05.556]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:47:05.556]      </block>
[21:47:05.556]      // end if-block "protType == 2"
[21:47:05.561]    </control>
[21:47:05.561]  </sequence>
[21:47:05.561]  
[21:47:05.565]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:47:05.565]  
[21:47:05.565]  <debugvars>
[21:47:05.565]    // Pre-defined
[21:47:05.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:47:05.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:47:05.565]    __dp=0x00000000
[21:47:05.565]    __ap=0x00000000
[21:47:05.565]    __traceout=0x00000000      (Trace Disabled)
[21:47:05.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:47:05.565]    __FlashAddr=0x00000000
[21:47:05.565]    __FlashLen=0x00000000
[21:47:05.565]    __FlashArg=0x00000000
[21:47:05.565]    __FlashOp=0x00000000
[21:47:05.565]    __Result=0x00000000
[21:47:05.565]  </debugvars>
[21:47:05.565]  
[21:47:05.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:47:05.565]    <block atomic="false" info="">
[21:47:05.565]      __var SW_DP_ABORT       = 0x0;
[21:47:05.565]        // -> [SW_DP_ABORT <= 0x00000000]
[21:47:05.569]      __var DP_CTRL_STAT      = 0x4;
[21:47:05.569]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:47:05.569]      __var DP_SELECT         = 0x8;
[21:47:05.569]        // -> [DP_SELECT <= 0x00000008]
[21:47:05.569]      __var powered_down      = 0;
[21:47:05.569]        // -> [powered_down <= 0x00000000]
[21:47:05.569]      WriteDP(DP_SELECT, 0x00000000);
[21:47:05.583]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:47:05.583]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:47:05.586]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:47:05.586]        // -> [powered_down <= 0x00000001]
[21:47:05.586]    </block>
[21:47:05.586]    <control if="powered_down" while="" timeout="0" info="">
[21:47:05.586]      // if-block "powered_down"
[21:47:05.586]        // =>  TRUE
[21:47:05.586]      <block atomic="false" info="">
[21:47:05.586]        Message(0, "Debug/System power-up request sent");
[21:47:05.589]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:47:05.598]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:47:05.598]      </block>
[21:47:05.598]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:47:05.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:47:05.601]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:47:05.602]        // while-condition  =>  FALSE
[21:47:05.602]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:47:05.602]      </control>
[21:47:05.602]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:47:05.602]        // if-block "(__protocol & 0xFFFF) == 1"
[21:47:05.602]          // =>  FALSE
[21:47:05.602]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:47:05.602]      </control>
[21:47:05.602]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:47:05.602]        // if-block "(__protocol & 0xFFFF) == 2"
[21:47:05.602]          // =>  TRUE
[21:47:05.602]        <block atomic="false" info="">
[21:47:05.602]          Message(0, "executing SWD power up");
[21:47:05.605]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:47:05.605]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:47:05.605]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:47:05.605]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:47:05.605]        </block>
[21:47:05.605]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:47:05.605]      </control>
[21:47:05.605]      // end if-block "powered_down"
[21:47:05.609]    </control>
[21:47:05.609]    <block atomic="false" info="">
[21:47:05.609]      __var DEBUG_PORT_VAL    = 0;
[21:47:05.609]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:47:05.609]      __var ACCESS_POINT_VAL  = 0;
[21:47:05.609]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:47:05.609]      __ap = 1; 
[21:47:05.609]        // -> [__ap <= 0x00000001]
[21:47:05.610]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:47:05.613]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:47:05.613]      __ap = 4;
[21:47:05.613]        // -> [__ap <= 0x00000004]
[21:47:05.613]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:47:05.617]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:47:05.617]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:47:05.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:47:05.622]    </block>
[21:47:05.622]    <block atomic="false" info="">
[21:47:05.623]      __var nReset = 0x80;
[21:47:05.623]        // -> [nReset <= 0x00000080]
[21:47:05.623]      __var canReadPins = 0;
[21:47:05.623]        // -> [canReadPins <= 0x00000000]
[21:47:05.623]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:47:05.624]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:47:05.624]        // -> [canReadPins <= 0x00000001]
[21:47:05.624]    </block>
[21:47:05.624]    <control if="" while="1" timeout="200" info="">
[21:47:05.624]      // while "1"  (timeout="200")
[21:47:05.624]      // while-condition  =>  TRUE
[21:47:05.624]      // while "1"  (timeout="200")
[21:47:05.624]      // while-condition  =>  TRUE
[21:47:05.624]      // while "1"  (timeout="200")
[21:47:05.624]      // while-condition  =>  TRUE
[21:47:05.624]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.626]      // while-condition  =>  TRUE
[21:47:05.626]      // while "1"  (timeout="200")
[21:47:05.627]      // while-condition  =>  TRUE
[21:47:05.627]      // while "1"  (timeout="200")
[21:47:05.627]      // while  =>  TIMEOUT
[21:47:05.627]      // end while "1"
[21:47:05.627]    </control>
[21:47:05.627]    <control if="canReadPins" while="" timeout="0" info="">
[21:47:05.627]      // if-block "canReadPins"
[21:47:05.627]        // =>  TRUE
[21:47:05.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:47:05.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:47:05.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:47:05.630]        // while-condition  =>  FALSE
[21:47:05.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:47:05.630]      </control>
[21:47:05.630]      // end if-block "canReadPins"
[21:47:05.630]    </control>
[21:47:05.630]    <control if="!canReadPins" while="" timeout="0" info="">
[21:47:05.631]      // if-block "!canReadPins"
[21:47:05.631]        // =>  FALSE
[21:47:05.631]      // skip if-block "!canReadPins"
[21:47:05.631]    </control>
[21:47:05.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:47:05.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:47:05.631]        // =>  TRUE
[21:47:05.631]      <block atomic="false" info="">
[21:47:05.631]        WriteAP(0x00, 0x190008);
[21:47:05.633]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:47:05.634]        WriteAP(0xF0, 0x01);
[21:47:05.648]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:47:05.648]      </block>
[21:47:05.648]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:47:05.649]    </control>
[21:47:05.649]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:47:05.649]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:47:05.649]        // =>  FALSE
[21:47:05.649]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:47:05.649]    </control>
[21:47:05.649]    <block atomic="false" info="">
[21:47:05.649]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:47:05.652]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:47:05.652]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:47:05.652]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:47:05.653]      __ap = 0; //lets make sure we reset the access point selection
[21:47:05.653]        // -> [__ap <= 0x00000000]
[21:47:05.653]    </block>
[21:47:05.653]  </sequence>
[21:47:05.653]  
[21:47:05.678]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:47:05.678]  
[21:47:05.678]  <debugvars>
[21:47:05.678]    // Pre-defined
[21:47:05.678]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:47:05.681]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:47:05.681]    __dp=0x00000000
[21:47:05.681]    __ap=0x00000000
[21:47:05.681]    __traceout=0x00000000      (Trace Disabled)
[21:47:05.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:47:05.681]    __FlashAddr=0x00000000
[21:47:05.681]    __FlashLen=0x00000000
[21:47:05.681]    __FlashArg=0x00000000
[21:47:05.681]    __FlashOp=0x00000000
[21:47:05.681]    __Result=0x00000000
[21:47:05.682]  </debugvars>
[21:47:05.682]  
[21:47:05.682]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:47:05.682]    <block atomic="false" info="">
[21:47:05.682]      __var deviceID = 0;
[21:47:05.682]        // -> [deviceID <= 0x00000000]
[21:47:05.682]      __var version = 0;
[21:47:05.682]        // -> [version <= 0x00000000]
[21:47:05.682]      __var partNum = 0;
[21:47:05.683]        // -> [partNum <= 0x00000000]
[21:47:05.683]      __var manuf = 0;
[21:47:05.683]        // -> [manuf <= 0x00000000]
[21:47:05.683]      __var isMSPM0G1X0X_G3X0X = 0;
[21:47:05.683]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:47:05.683]      __var isProduction = 0;
[21:47:05.683]        // -> [isProduction <= 0x00000000]
[21:47:05.683]      __var continueId = 0;
[21:47:05.683]        // -> [continueId <= 0x00000000]
[21:47:05.683]      deviceID =   Read32(0x41C40004);
[21:47:05.692]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:47:05.695]        // -> [deviceID <= 0x2BB8802F]
[21:47:05.695]      version = deviceID >> 28;
[21:47:05.695]        // -> [version <= 0x00000002]
[21:47:05.695]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:47:05.695]        // -> [partNum <= 0x0000BB88]
[21:47:05.695]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:47:05.695]        // -> [manuf <= 0x00000017]
[21:47:05.695]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:47:05.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:47:05.695]      isProduction = (version > 0);
[21:47:05.695]        // -> [isProduction <= 0x00000001]
[21:47:05.695]    </block>
[21:47:05.695]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:47:05.695]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:47:05.695]        // =>  FALSE
[21:47:05.695]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:47:05.695]    </control>
[21:47:05.695]    <control if="continueId == 4" while="" timeout="0" info="">
[21:47:05.695]      // if-block "continueId == 4"
[21:47:05.695]        // =>  FALSE
[21:47:05.695]      // skip if-block "continueId == 4"
[21:47:05.695]    </control>
[21:47:05.695]    <control if="!isProduction" while="" timeout="0" info="">
[21:47:05.695]      // if-block "!isProduction"
[21:47:05.695]        // =>  FALSE
[21:47:05.695]      // skip if-block "!isProduction"
[21:47:05.695]    </control>
[21:47:05.695]  </sequence>
[21:47:05.695]  
[21:48:06.315]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:48:06.315]  
[21:48:06.315]  <debugvars>
[21:48:06.315]    // Pre-defined
[21:48:06.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:06.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:06.315]    __dp=0x00000000
[21:48:06.315]    __ap=0x00000000
[21:48:06.315]    __traceout=0x00000000      (Trace Disabled)
[21:48:06.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:06.315]    __FlashAddr=0x00000000
[21:48:06.315]    __FlashLen=0x00000000
[21:48:06.315]    __FlashArg=0x00000000
[21:48:06.315]    __FlashOp=0x00000000
[21:48:06.315]    __Result=0x00000000
[21:48:06.315]  </debugvars>
[21:48:06.315]  
[21:48:06.315]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:48:06.315]    <block atomic="false" info="">
[21:48:06.315]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:48:06.318]        // -> [isSWJ <= 0x00000001]
[21:48:06.318]      __var hasDormant = __protocol & 0x00020000;
[21:48:06.318]        // -> [hasDormant <= 0x00000000]
[21:48:06.318]      __var protType   = __protocol & 0x0000FFFF;
[21:48:06.318]        // -> [protType <= 0x00000002]
[21:48:06.318]    </block>
[21:48:06.318]    <control if="protType == 1" while="" timeout="0" info="">
[21:48:06.318]      // if-block "protType == 1"
[21:48:06.318]        // =>  FALSE
[21:48:06.318]      // skip if-block "protType == 1"
[21:48:06.318]    </control>
[21:48:06.318]    <control if="protType == 2" while="" timeout="0" info="">
[21:48:06.318]      // if-block "protType == 2"
[21:48:06.318]        // =>  TRUE
[21:48:06.318]      <control if="isSWJ" while="" timeout="0" info="">
[21:48:06.318]        // if-block "isSWJ"
[21:48:06.318]          // =>  TRUE
[21:48:06.319]        <control if="hasDormant" while="" timeout="0" info="">
[21:48:06.319]          // if-block "hasDormant"
[21:48:06.319]            // =>  FALSE
[21:48:06.319]          // skip if-block "hasDormant"
[21:48:06.319]        </control>
[21:48:06.319]        <control if="!hasDormant" while="" timeout="0" info="">
[21:48:06.319]          // if-block "!hasDormant"
[21:48:06.319]            // =>  TRUE
[21:48:06.319]          <block atomic="false" info="">
[21:48:06.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:48:06.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:06.321]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:48:06.323]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:48:06.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:48:06.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:06.323]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:48:06.327]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:48:06.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:48:06.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:06.327]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:48:06.327]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:48:06.331]          </block>
[21:48:06.331]          // end if-block "!hasDormant"
[21:48:06.331]        </control>
[21:48:06.332]        // end if-block "isSWJ"
[21:48:06.332]      </control>
[21:48:06.332]      <control if="!isSWJ" while="" timeout="0" info="">
[21:48:06.332]        // if-block "!isSWJ"
[21:48:06.332]          // =>  FALSE
[21:48:06.332]        // skip if-block "!isSWJ"
[21:48:06.332]      </control>
[21:48:06.332]      <block atomic="false" info="">
[21:48:06.332]        ReadDP(0x0);
[21:48:06.333]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:48:06.333]      </block>
[21:48:06.333]      // end if-block "protType == 2"
[21:48:06.333]    </control>
[21:48:06.333]  </sequence>
[21:48:06.333]  
[21:48:06.336]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:48:06.336]  
[21:48:06.336]  <debugvars>
[21:48:06.336]    // Pre-defined
[21:48:06.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:06.336]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:06.336]    __dp=0x00000000
[21:48:06.336]    __ap=0x00000000
[21:48:06.336]    __traceout=0x00000000      (Trace Disabled)
[21:48:06.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:06.336]    __FlashAddr=0x00000000
[21:48:06.336]    __FlashLen=0x00000000
[21:48:06.336]    __FlashArg=0x00000000
[21:48:06.336]    __FlashOp=0x00000000
[21:48:06.336]    __Result=0x00000000
[21:48:06.336]  </debugvars>
[21:48:06.336]  
[21:48:06.336]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:48:06.336]    <block atomic="false" info="">
[21:48:06.336]      __var SW_DP_ABORT       = 0x0;
[21:48:06.336]        // -> [SW_DP_ABORT <= 0x00000000]
[21:48:06.336]      __var DP_CTRL_STAT      = 0x4;
[21:48:06.336]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:48:06.336]      __var DP_SELECT         = 0x8;
[21:48:06.336]        // -> [DP_SELECT <= 0x00000008]
[21:48:06.340]      __var powered_down      = 0;
[21:48:06.340]        // -> [powered_down <= 0x00000000]
[21:48:06.340]      WriteDP(DP_SELECT, 0x00000000);
[21:48:06.342]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:48:06.342]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:48:06.344]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:48:06.344]        // -> [powered_down <= 0x00000001]
[21:48:06.344]    </block>
[21:48:06.344]    <control if="powered_down" while="" timeout="0" info="">
[21:48:06.344]      // if-block "powered_down"
[21:48:06.344]        // =>  TRUE
[21:48:06.344]      <block atomic="false" info="">
[21:48:06.344]        Message(0, "Debug/System power-up request sent");
[21:48:06.344]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:48:06.348]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:48:06.348]      </block>
[21:48:06.348]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:48:06.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:48:06.351]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:48:06.351]        // while-condition  =>  FALSE
[21:48:06.351]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:48:06.351]      </control>
[21:48:06.351]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:48:06.351]        // if-block "(__protocol & 0xFFFF) == 1"
[21:48:06.351]          // =>  FALSE
[21:48:06.352]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:48:06.352]      </control>
[21:48:06.352]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:48:06.352]        // if-block "(__protocol & 0xFFFF) == 2"
[21:48:06.352]          // =>  TRUE
[21:48:06.352]        <block atomic="false" info="">
[21:48:06.352]          Message(0, "executing SWD power up");
[21:48:06.353]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:48:06.355]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:48:06.355]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:48:06.359]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:48:06.359]        </block>
[21:48:06.359]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:48:06.359]      </control>
[21:48:06.359]      // end if-block "powered_down"
[21:48:06.359]    </control>
[21:48:06.359]    <block atomic="false" info="">
[21:48:06.359]      __var DEBUG_PORT_VAL    = 0;
[21:48:06.359]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:48:06.359]      __var ACCESS_POINT_VAL  = 0;
[21:48:06.359]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:48:06.359]      __ap = 1; 
[21:48:06.359]        // -> [__ap <= 0x00000001]
[21:48:06.359]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:48:06.367]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:48:06.367]      __ap = 4;
[21:48:06.367]        // -> [__ap <= 0x00000004]
[21:48:06.367]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:06.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:48:06.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:48:06.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:06.376]    </block>
[21:48:06.376]    <block atomic="false" info="">
[21:48:06.376]      __var nReset = 0x80;
[21:48:06.377]        // -> [nReset <= 0x00000080]
[21:48:06.377]      __var canReadPins = 0;
[21:48:06.377]        // -> [canReadPins <= 0x00000000]
[21:48:06.377]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:48:06.381]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:48:06.381]        // -> [canReadPins <= 0x00000001]
[21:48:06.381]    </block>
[21:48:06.381]    <control if="" while="1" timeout="200" info="">
[21:48:06.381]      // while "1"  (timeout="200")
[21:48:06.381]      // while-condition  =>  TRUE
[21:48:06.381]      // while "1"  (timeout="200")
[21:48:06.381]      // while-condition  =>  TRUE
[21:48:06.381]      // while "1"  (timeout="200")
[21:48:06.382]      // while-condition  =>  TRUE
[21:48:06.382]      // while "1"  (timeout="200")
[21:48:06.382]      // while-condition  =>  TRUE
[21:48:06.382]      // while "1"  (timeout="200")
[21:48:06.382]      // while-condition  =>  TRUE
[21:48:06.382]      // while "1"  (timeout="200")
[21:48:06.382]      // while-condition  =>  TRUE
[21:48:06.382]      // while "1"  (timeout="200")
[21:48:06.382]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.383]      // while "1"  (timeout="200")
[21:48:06.383]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.384]      // while-condition  =>  TRUE
[21:48:06.384]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.386]      // while "1"  (timeout="200")
[21:48:06.386]      // while-condition  =>  TRUE
[21:48:06.387]      // while "1"  (timeout="200")
[21:48:06.387]      // while-condition  =>  TRUE
[21:48:06.387]      // while "1"  (timeout="200")
[21:48:06.387]      // while-condition  =>  TRUE
[21:48:06.387]      // while "1"  (timeout="200")
[21:48:06.387]      // while-condition  =>  TRUE
[21:48:06.387]      // while "1"  (timeout="200")
[21:48:06.387]      // while-condition  =>  TRUE
[21:48:06.387]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.389]      // while-condition  =>  TRUE
[21:48:06.389]      // while "1"  (timeout="200")
[21:48:06.391]      // while-condition  =>  TRUE
[21:48:06.391]      // while "1"  (timeout="200")
[21:48:06.391]      // while-condition  =>  TRUE
[21:48:06.391]      // while "1"  (timeout="200")
[21:48:06.391]      // while-condition  =>  TRUE
[21:48:06.391]      // while "1"  (timeout="200")
[21:48:06.392]      // while-condition  =>  TRUE
[21:48:06.392]      // while "1"  (timeout="200")
[21:48:06.392]      // while-condition  =>  TRUE
[21:48:06.392]      // while "1"  (timeout="200")
[21:48:06.393]      // while-condition  =>  TRUE
[21:48:06.393]      // while "1"  (timeout="200")
[21:48:06.393]      // while  =>  TIMEOUT
[21:48:06.393]      // end while "1"
[21:48:06.393]    </control>
[21:48:06.393]    <control if="canReadPins" while="" timeout="0" info="">
[21:48:06.394]      // if-block "canReadPins"
[21:48:06.394]        // =>  TRUE
[21:48:06.394]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:48:06.394]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:48:06.395]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:48:06.395]        // while-condition  =>  FALSE
[21:48:06.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:48:06.395]      </control>
[21:48:06.395]      // end if-block "canReadPins"
[21:48:06.395]    </control>
[21:48:06.395]    <control if="!canReadPins" while="" timeout="0" info="">
[21:48:06.395]      // if-block "!canReadPins"
[21:48:06.395]        // =>  FALSE
[21:48:06.395]      // skip if-block "!canReadPins"
[21:48:06.397]    </control>
[21:48:06.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:48:06.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:06.397]        // =>  TRUE
[21:48:06.397]      <block atomic="false" info="">
[21:48:06.397]        WriteAP(0x00, 0x190008);
[21:48:06.402]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:06.402]        WriteAP(0xF0, 0x01);
[21:48:06.411]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:06.411]      </block>
[21:48:06.411]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:06.411]    </control>
[21:48:06.411]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:48:06.411]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:06.411]        // =>  FALSE
[21:48:06.411]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:06.412]    </control>
[21:48:06.412]    <block atomic="false" info="">
[21:48:06.412]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:06.418]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:48:06.418]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:48:06.418]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:06.420]      __ap = 0; //lets make sure we reset the access point selection
[21:48:06.420]        // -> [__ap <= 0x00000000]
[21:48:06.420]    </block>
[21:48:06.420]  </sequence>
[21:48:06.420]  
[21:48:06.446]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:48:06.446]  
[21:48:06.446]  <debugvars>
[21:48:06.446]    // Pre-defined
[21:48:06.446]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:06.446]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:06.446]    __dp=0x00000000
[21:48:06.450]    __ap=0x00000000
[21:48:06.450]    __traceout=0x00000000      (Trace Disabled)
[21:48:06.450]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:06.450]    __FlashAddr=0x00000000
[21:48:06.450]    __FlashLen=0x00000000
[21:48:06.450]    __FlashArg=0x00000000
[21:48:06.450]    __FlashOp=0x00000000
[21:48:06.450]    __Result=0x00000000
[21:48:06.450]  </debugvars>
[21:48:06.450]  
[21:48:06.451]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:48:06.451]    <block atomic="false" info="">
[21:48:06.451]      __var deviceID = 0;
[21:48:06.451]        // -> [deviceID <= 0x00000000]
[21:48:06.451]      __var version = 0;
[21:48:06.451]        // -> [version <= 0x00000000]
[21:48:06.451]      __var partNum = 0;
[21:48:06.451]        // -> [partNum <= 0x00000000]
[21:48:06.451]      __var manuf = 0;
[21:48:06.451]        // -> [manuf <= 0x00000000]
[21:48:06.452]      __var isMSPM0G1X0X_G3X0X = 0;
[21:48:06.452]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:48:06.452]      __var isProduction = 0;
[21:48:06.452]        // -> [isProduction <= 0x00000000]
[21:48:06.452]      __var continueId = 0;
[21:48:06.452]        // -> [continueId <= 0x00000000]
[21:48:06.452]      deviceID =   Read32(0x41C40004);
[21:48:06.454]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:48:06.454]        // -> [deviceID <= 0x2BB8802F]
[21:48:06.454]      version = deviceID >> 28;
[21:48:06.454]        // -> [version <= 0x00000002]
[21:48:06.454]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:48:06.454]        // -> [partNum <= 0x0000BB88]
[21:48:06.458]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:48:06.458]        // -> [manuf <= 0x00000017]
[21:48:06.458]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:48:06.458]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:48:06.458]      isProduction = (version > 0);
[21:48:06.458]        // -> [isProduction <= 0x00000001]
[21:48:06.458]    </block>
[21:48:06.458]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:48:06.458]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:48:06.458]        // =>  FALSE
[21:48:06.458]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:48:06.458]    </control>
[21:48:06.458]    <control if="continueId == 4" while="" timeout="0" info="">
[21:48:06.458]      // if-block "continueId == 4"
[21:48:06.458]        // =>  FALSE
[21:48:06.458]      // skip if-block "continueId == 4"
[21:48:06.458]    </control>
[21:48:06.458]    <control if="!isProduction" while="" timeout="0" info="">
[21:48:06.458]      // if-block "!isProduction"
[21:48:06.458]        // =>  FALSE
[21:48:06.458]      // skip if-block "!isProduction"
[21:48:06.458]    </control>
[21:48:06.458]  </sequence>
[21:48:06.458]  
[21:48:57.074]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:48:57.074]  
[21:48:57.084]  <debugvars>
[21:48:57.084]    // Pre-defined
[21:48:57.084]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:57.084]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:57.084]    __dp=0x00000000
[21:48:57.084]    __ap=0x00000000
[21:48:57.084]    __traceout=0x00000000      (Trace Disabled)
[21:48:57.084]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:57.084]    __FlashAddr=0x00000000
[21:48:57.084]    __FlashLen=0x00000000
[21:48:57.084]    __FlashArg=0x00000000
[21:48:57.084]    __FlashOp=0x00000000
[21:48:57.084]    __Result=0x00000000
[21:48:57.084]  </debugvars>
[21:48:57.084]  
[21:48:57.086]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:48:57.086]    <block atomic="false" info="">
[21:48:57.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:48:57.086]        // -> [isSWJ <= 0x00000001]
[21:48:57.086]      __var hasDormant = __protocol & 0x00020000;
[21:48:57.086]        // -> [hasDormant <= 0x00000000]
[21:48:57.086]      __var protType   = __protocol & 0x0000FFFF;
[21:48:57.086]        // -> [protType <= 0x00000002]
[21:48:57.086]    </block>
[21:48:57.086]    <control if="protType == 1" while="" timeout="0" info="">
[21:48:57.086]      // if-block "protType == 1"
[21:48:57.086]        // =>  FALSE
[21:48:57.086]      // skip if-block "protType == 1"
[21:48:57.086]    </control>
[21:48:57.086]    <control if="protType == 2" while="" timeout="0" info="">
[21:48:57.086]      // if-block "protType == 2"
[21:48:57.086]        // =>  TRUE
[21:48:57.086]      <control if="isSWJ" while="" timeout="0" info="">
[21:48:57.086]        // if-block "isSWJ"
[21:48:57.086]          // =>  TRUE
[21:48:57.086]        <control if="hasDormant" while="" timeout="0" info="">
[21:48:57.086]          // if-block "hasDormant"
[21:48:57.086]            // =>  FALSE
[21:48:57.086]          // skip if-block "hasDormant"
[21:48:57.086]        </control>
[21:48:57.086]        <control if="!hasDormant" while="" timeout="0" info="">
[21:48:57.086]          // if-block "!hasDormant"
[21:48:57.086]            // =>  TRUE
[21:48:57.086]          <block atomic="false" info="">
[21:48:57.086]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:48:57.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:57.098]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:48:57.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:48:57.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:48:57.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:57.102]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:48:57.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:48:57.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:48:57.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:57.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:48:57.107]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:48:57.107]          </block>
[21:48:57.107]          // end if-block "!hasDormant"
[21:48:57.107]        </control>
[21:48:57.107]        // end if-block "isSWJ"
[21:48:57.107]      </control>
[21:48:57.107]      <control if="!isSWJ" while="" timeout="0" info="">
[21:48:57.107]        // if-block "!isSWJ"
[21:48:57.107]          // =>  FALSE
[21:48:57.107]        // skip if-block "!isSWJ"
[21:48:57.107]      </control>
[21:48:57.107]      <block atomic="false" info="">
[21:48:57.107]        ReadDP(0x0);
[21:48:57.107]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:48:57.111]      </block>
[21:48:57.111]      // end if-block "protType == 2"
[21:48:57.111]    </control>
[21:48:57.111]  </sequence>
[21:48:57.111]  
[21:48:57.115]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:48:57.115]  
[21:48:57.115]  <debugvars>
[21:48:57.115]    // Pre-defined
[21:48:57.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:57.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:57.115]    __dp=0x00000000
[21:48:57.115]    __ap=0x00000000
[21:48:57.115]    __traceout=0x00000000      (Trace Disabled)
[21:48:57.119]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:57.119]    __FlashAddr=0x00000000
[21:48:57.119]    __FlashLen=0x00000000
[21:48:57.119]    __FlashArg=0x00000000
[21:48:57.119]    __FlashOp=0x00000000
[21:48:57.119]    __Result=0x00000000
[21:48:57.119]  </debugvars>
[21:48:57.119]  
[21:48:57.119]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:48:57.119]    <block atomic="false" info="">
[21:48:57.119]      __var SW_DP_ABORT       = 0x0;
[21:48:57.119]        // -> [SW_DP_ABORT <= 0x00000000]
[21:48:57.119]      __var DP_CTRL_STAT      = 0x4;
[21:48:57.119]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:48:57.119]      __var DP_SELECT         = 0x8;
[21:48:57.119]        // -> [DP_SELECT <= 0x00000008]
[21:48:57.119]      __var powered_down      = 0;
[21:48:57.119]        // -> [powered_down <= 0x00000000]
[21:48:57.119]      WriteDP(DP_SELECT, 0x00000000);
[21:48:57.123]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:48:57.123]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:48:57.127]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:48:57.127]        // -> [powered_down <= 0x00000001]
[21:48:57.127]    </block>
[21:48:57.127]    <control if="powered_down" while="" timeout="0" info="">
[21:48:57.127]      // if-block "powered_down"
[21:48:57.127]        // =>  TRUE
[21:48:57.127]      <block atomic="false" info="">
[21:48:57.127]        Message(0, "Debug/System power-up request sent");
[21:48:57.127]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:48:57.135]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:48:57.135]      </block>
[21:48:57.135]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:48:57.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:48:57.139]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:48:57.139]        // while-condition  =>  FALSE
[21:48:57.139]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:48:57.139]      </control>
[21:48:57.139]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:48:57.139]        // if-block "(__protocol & 0xFFFF) == 1"
[21:48:57.139]          // =>  FALSE
[21:48:57.141]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:48:57.141]      </control>
[21:48:57.141]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:48:57.141]        // if-block "(__protocol & 0xFFFF) == 2"
[21:48:57.141]          // =>  TRUE
[21:48:57.141]        <block atomic="false" info="">
[21:48:57.141]          Message(0, "executing SWD power up");
[21:48:57.143]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:48:57.145]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:48:57.145]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:48:57.149]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:48:57.149]        </block>
[21:48:57.149]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:48:57.149]      </control>
[21:48:57.149]      // end if-block "powered_down"
[21:48:57.149]    </control>
[21:48:57.149]    <block atomic="false" info="">
[21:48:57.149]      __var DEBUG_PORT_VAL    = 0;
[21:48:57.149]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:48:57.149]      __var ACCESS_POINT_VAL  = 0;
[21:48:57.149]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:48:57.149]      __ap = 1; 
[21:48:57.149]        // -> [__ap <= 0x00000001]
[21:48:57.149]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:48:57.153]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:48:57.153]      __ap = 4;
[21:48:57.153]        // -> [__ap <= 0x00000004]
[21:48:57.153]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:57.156]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:48:57.156]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:48:57.156]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:57.162]    </block>
[21:48:57.162]    <block atomic="false" info="">
[21:48:57.162]      __var nReset = 0x80;
[21:48:57.162]        // -> [nReset <= 0x00000080]
[21:48:57.163]      __var canReadPins = 0;
[21:48:57.163]        // -> [canReadPins <= 0x00000000]
[21:48:57.163]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:48:57.164]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:48:57.164]        // -> [canReadPins <= 0x00000001]
[21:48:57.164]    </block>
[21:48:57.164]    <control if="" while="1" timeout="200" info="">
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.164]      // while-condition  =>  TRUE
[21:48:57.164]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.167]      // while "1"  (timeout="200")
[21:48:57.167]      // while-condition  =>  TRUE
[21:48:57.171]      // while "1"  (timeout="200")
[21:48:57.171]      // while-condition  =>  TRUE
[21:48:57.171]      // while "1"  (timeout="200")
[21:48:57.171]      // while-condition  =>  TRUE
[21:48:57.171]      // while "1"  (timeout="200")
[21:48:57.171]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.172]      // while-condition  =>  TRUE
[21:48:57.172]      // while "1"  (timeout="200")
[21:48:57.175]      // while-condition  =>  TRUE
[21:48:57.175]      // while "1"  (timeout="200")
[21:48:57.175]      // while  =>  TIMEOUT
[21:48:57.175]      // end while "1"
[21:48:57.175]    </control>
[21:48:57.175]    <control if="canReadPins" while="" timeout="0" info="">
[21:48:57.175]      // if-block "canReadPins"
[21:48:57.175]        // =>  TRUE
[21:48:57.175]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:48:57.175]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:48:57.175]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:48:57.175]        // while-condition  =>  FALSE
[21:48:57.175]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:48:57.175]      </control>
[21:48:57.175]      // end if-block "canReadPins"
[21:48:57.175]    </control>
[21:48:57.175]    <control if="!canReadPins" while="" timeout="0" info="">
[21:48:57.175]      // if-block "!canReadPins"
[21:48:57.175]        // =>  FALSE
[21:48:57.175]      // skip if-block "!canReadPins"
[21:48:57.175]    </control>
[21:48:57.175]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:48:57.175]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:57.175]        // =>  TRUE
[21:48:57.179]      <block atomic="false" info="">
[21:48:57.179]        WriteAP(0x00, 0x190008);
[21:48:57.185]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:57.185]        WriteAP(0xF0, 0x01);
[21:48:57.188]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:57.188]      </block>
[21:48:57.188]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:57.188]    </control>
[21:48:57.188]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:48:57.188]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:57.188]        // =>  FALSE
[21:48:57.188]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:57.188]    </control>
[21:48:57.188]    <block atomic="false" info="">
[21:48:57.188]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:57.194]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:48:57.194]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:48:57.194]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:57.195]      __ap = 0; //lets make sure we reset the access point selection
[21:48:57.195]        // -> [__ap <= 0x00000000]
[21:48:57.195]    </block>
[21:48:57.195]  </sequence>
[21:48:57.195]  
[21:48:57.216]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:48:57.216]  
[21:48:57.216]  <debugvars>
[21:48:57.216]    // Pre-defined
[21:48:57.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:57.216]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:57.216]    __dp=0x00000000
[21:48:57.216]    __ap=0x00000000
[21:48:57.216]    __traceout=0x00000000      (Trace Disabled)
[21:48:57.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:57.219]    __FlashAddr=0x00000000
[21:48:57.219]    __FlashLen=0x00000000
[21:48:57.219]    __FlashArg=0x00000000
[21:48:57.219]    __FlashOp=0x00000000
[21:48:57.219]    __Result=0x00000000
[21:48:57.219]  </debugvars>
[21:48:57.219]  
[21:48:57.219]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:48:57.219]    <block atomic="false" info="">
[21:48:57.219]      __var deviceID = 0;
[21:48:57.219]        // -> [deviceID <= 0x00000000]
[21:48:57.219]      __var version = 0;
[21:48:57.219]        // -> [version <= 0x00000000]
[21:48:57.219]      __var partNum = 0;
[21:48:57.219]        // -> [partNum <= 0x00000000]
[21:48:57.219]      __var manuf = 0;
[21:48:57.219]        // -> [manuf <= 0x00000000]
[21:48:57.219]      __var isMSPM0G1X0X_G3X0X = 0;
[21:48:57.219]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:48:57.219]      __var isProduction = 0;
[21:48:57.219]        // -> [isProduction <= 0x00000000]
[21:48:57.219]      __var continueId = 0;
[21:48:57.219]        // -> [continueId <= 0x00000000]
[21:48:57.221]      deviceID =   Read32(0x41C40004);
[21:48:57.231]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:48:57.231]        // -> [deviceID <= 0x2BB8802F]
[21:48:57.231]      version = deviceID >> 28;
[21:48:57.231]        // -> [version <= 0x00000002]
[21:48:57.231]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:48:57.232]        // -> [partNum <= 0x0000BB88]
[21:48:57.232]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:48:57.232]        // -> [manuf <= 0x00000017]
[21:48:57.232]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:48:57.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:48:57.232]      isProduction = (version > 0);
[21:48:57.232]        // -> [isProduction <= 0x00000001]
[21:48:57.232]    </block>
[21:48:57.232]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:48:57.232]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:48:57.232]        // =>  FALSE
[21:48:57.233]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:48:57.233]    </control>
[21:48:57.233]    <control if="continueId == 4" while="" timeout="0" info="">
[21:48:57.233]      // if-block "continueId == 4"
[21:48:57.233]        // =>  FALSE
[21:48:57.233]      // skip if-block "continueId == 4"
[21:48:57.233]    </control>
[21:48:57.233]    <control if="!isProduction" while="" timeout="0" info="">
[21:48:57.233]      // if-block "!isProduction"
[21:48:57.233]        // =>  FALSE
[21:48:57.233]      // skip if-block "!isProduction"
[21:48:57.233]    </control>
[21:48:57.234]  </sequence>
[21:48:57.234]  
[21:49:47.242]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:49:47.242]  
[21:49:47.251]  <debugvars>
[21:49:47.251]    // Pre-defined
[21:49:47.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:47.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:47.251]    __dp=0x00000000
[21:49:47.251]    __ap=0x00000000
[21:49:47.251]    __traceout=0x00000000      (Trace Disabled)
[21:49:47.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:47.251]    __FlashAddr=0x00000000
[21:49:47.251]    __FlashLen=0x00000000
[21:49:47.251]    __FlashArg=0x00000000
[21:49:47.251]    __FlashOp=0x00000000
[21:49:47.251]    __Result=0x00000000
[21:49:47.251]  </debugvars>
[21:49:47.251]  
[21:49:47.252]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:49:47.252]    <block atomic="false" info="">
[21:49:47.252]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:49:47.252]        // -> [isSWJ <= 0x00000001]
[21:49:47.252]      __var hasDormant = __protocol & 0x00020000;
[21:49:47.252]        // -> [hasDormant <= 0x00000000]
[21:49:47.252]      __var protType   = __protocol & 0x0000FFFF;
[21:49:47.252]        // -> [protType <= 0x00000002]
[21:49:47.252]    </block>
[21:49:47.253]    <control if="protType == 1" while="" timeout="0" info="">
[21:49:47.253]      // if-block "protType == 1"
[21:49:47.253]        // =>  FALSE
[21:49:47.253]      // skip if-block "protType == 1"
[21:49:47.253]    </control>
[21:49:47.253]    <control if="protType == 2" while="" timeout="0" info="">
[21:49:47.253]      // if-block "protType == 2"
[21:49:47.253]        // =>  TRUE
[21:49:47.253]      <control if="isSWJ" while="" timeout="0" info="">
[21:49:47.253]        // if-block "isSWJ"
[21:49:47.253]          // =>  TRUE
[21:49:47.253]        <control if="hasDormant" while="" timeout="0" info="">
[21:49:47.253]          // if-block "hasDormant"
[21:49:47.253]            // =>  FALSE
[21:49:47.253]          // skip if-block "hasDormant"
[21:49:47.253]        </control>
[21:49:47.253]        <control if="!hasDormant" while="" timeout="0" info="">
[21:49:47.253]          // if-block "!hasDormant"
[21:49:47.253]            // =>  TRUE
[21:49:47.253]          <block atomic="false" info="">
[21:49:47.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:49:47.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:47.257]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:49:47.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:49:47.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:49:47.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:47.265]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:49:47.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:49:47.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:49:47.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:47.269]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:49:47.269]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:49:47.269]          </block>
[21:49:47.269]          // end if-block "!hasDormant"
[21:49:47.271]        </control>
[21:49:47.271]        // end if-block "isSWJ"
[21:49:47.271]      </control>
[21:49:47.271]      <control if="!isSWJ" while="" timeout="0" info="">
[21:49:47.271]        // if-block "!isSWJ"
[21:49:47.271]          // =>  FALSE
[21:49:47.272]        // skip if-block "!isSWJ"
[21:49:47.272]      </control>
[21:49:47.272]      <block atomic="false" info="">
[21:49:47.272]        ReadDP(0x0);
[21:49:47.273]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:49:47.273]      </block>
[21:49:47.273]      // end if-block "protType == 2"
[21:49:47.273]    </control>
[21:49:47.273]  </sequence>
[21:49:47.273]  
[21:49:47.274]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:49:47.274]  
[21:49:47.274]  <debugvars>
[21:49:47.274]    // Pre-defined
[21:49:47.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:47.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:47.274]    __dp=0x00000000
[21:49:47.274]    __ap=0x00000000
[21:49:47.274]    __traceout=0x00000000      (Trace Disabled)
[21:49:47.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:47.274]    __FlashAddr=0x00000000
[21:49:47.274]    __FlashLen=0x00000000
[21:49:47.277]    __FlashArg=0x00000000
[21:49:47.277]    __FlashOp=0x00000000
[21:49:47.277]    __Result=0x00000000
[21:49:47.277]  </debugvars>
[21:49:47.277]  
[21:49:47.277]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:49:47.277]    <block atomic="false" info="">
[21:49:47.277]      __var SW_DP_ABORT       = 0x0;
[21:49:47.277]        // -> [SW_DP_ABORT <= 0x00000000]
[21:49:47.277]      __var DP_CTRL_STAT      = 0x4;
[21:49:47.277]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:49:47.277]      __var DP_SELECT         = 0x8;
[21:49:47.277]        // -> [DP_SELECT <= 0x00000008]
[21:49:47.277]      __var powered_down      = 0;
[21:49:47.277]        // -> [powered_down <= 0x00000000]
[21:49:47.277]      WriteDP(DP_SELECT, 0x00000000);
[21:49:47.283]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:49:47.283]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:49:47.283]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:49:47.283]        // -> [powered_down <= 0x00000001]
[21:49:47.283]    </block>
[21:49:47.283]    <control if="powered_down" while="" timeout="0" info="">
[21:49:47.283]      // if-block "powered_down"
[21:49:47.283]        // =>  TRUE
[21:49:47.283]      <block atomic="false" info="">
[21:49:47.283]        Message(0, "Debug/System power-up request sent");
[21:49:47.288]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:49:47.294]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:49:47.294]      </block>
[21:49:47.294]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:49:47.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:49:47.296]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:49:47.296]        // while-condition  =>  FALSE
[21:49:47.298]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:49:47.298]      </control>
[21:49:47.298]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:49:47.298]        // if-block "(__protocol & 0xFFFF) == 1"
[21:49:47.298]          // =>  FALSE
[21:49:47.298]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:49:47.298]      </control>
[21:49:47.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:49:47.298]        // if-block "(__protocol & 0xFFFF) == 2"
[21:49:47.298]          // =>  TRUE
[21:49:47.298]        <block atomic="false" info="">
[21:49:47.298]          Message(0, "executing SWD power up");
[21:49:47.300]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:49:47.302]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:49:47.302]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:49:47.304]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:49:47.304]        </block>
[21:49:47.304]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:49:47.304]      </control>
[21:49:47.304]      // end if-block "powered_down"
[21:49:47.304]    </control>
[21:49:47.304]    <block atomic="false" info="">
[21:49:47.304]      __var DEBUG_PORT_VAL    = 0;
[21:49:47.304]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:49:47.304]      __var ACCESS_POINT_VAL  = 0;
[21:49:47.304]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:49:47.304]      __ap = 1; 
[21:49:47.304]        // -> [__ap <= 0x00000001]
[21:49:47.304]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:49:47.314]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:49:47.314]      __ap = 4;
[21:49:47.314]        // -> [__ap <= 0x00000004]
[21:49:47.314]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:47.318]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:49:47.318]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:49:47.318]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:47.322]    </block>
[21:49:47.322]    <block atomic="false" info="">
[21:49:47.322]      __var nReset = 0x80;
[21:49:47.322]        // -> [nReset <= 0x00000080]
[21:49:47.322]      __var canReadPins = 0;
[21:49:47.322]        // -> [canReadPins <= 0x00000000]
[21:49:47.322]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:49:47.323]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:49:47.323]        // -> [canReadPins <= 0x00000001]
[21:49:47.323]    </block>
[21:49:47.323]    <control if="" while="1" timeout="200" info="">
[21:49:47.323]      // while "1"  (timeout="200")
[21:49:47.323]      // while-condition  =>  TRUE
[21:49:47.323]      // while "1"  (timeout="200")
[21:49:47.323]      // while-condition  =>  TRUE
[21:49:47.323]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.326]      // while-condition  =>  TRUE
[21:49:47.326]      // while "1"  (timeout="200")
[21:49:47.330]      // while-condition  =>  TRUE
[21:49:47.330]      // while "1"  (timeout="200")
[21:49:47.330]      // while-condition  =>  TRUE
[21:49:47.330]      // while "1"  (timeout="200")
[21:49:47.330]      // while-condition  =>  TRUE
[21:49:47.330]      // while "1"  (timeout="200")
[21:49:47.330]      // while-condition  =>  TRUE
[21:49:47.330]      // while "1"  (timeout="200")
[21:49:47.330]      // while-condition  =>  TRUE
[21:49:47.330]      // while "1"  (timeout="200")
[21:49:47.331]      // while-condition  =>  TRUE
[21:49:47.331]      // while "1"  (timeout="200")
[21:49:47.331]      // while  =>  TIMEOUT
[21:49:47.331]      // end while "1"
[21:49:47.331]    </control>
[21:49:47.331]    <control if="canReadPins" while="" timeout="0" info="">
[21:49:47.331]      // if-block "canReadPins"
[21:49:47.331]        // =>  TRUE
[21:49:47.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:49:47.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:49:47.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:49:47.334]        // while-condition  =>  FALSE
[21:49:47.334]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:49:47.334]      </control>
[21:49:47.334]      // end if-block "canReadPins"
[21:49:47.334]    </control>
[21:49:47.334]    <control if="!canReadPins" while="" timeout="0" info="">
[21:49:47.334]      // if-block "!canReadPins"
[21:49:47.334]        // =>  FALSE
[21:49:47.334]      // skip if-block "!canReadPins"
[21:49:47.334]    </control>
[21:49:47.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:49:47.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:47.334]        // =>  TRUE
[21:49:47.334]      <block atomic="false" info="">
[21:49:47.334]        WriteAP(0x00, 0x190008);
[21:49:47.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:47.334]        WriteAP(0xF0, 0x01);
[21:49:47.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:47.341]      </block>
[21:49:47.341]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:47.341]    </control>
[21:49:47.341]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:49:47.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:47.342]        // =>  FALSE
[21:49:47.343]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:47.343]    </control>
[21:49:47.343]    <block atomic="false" info="">
[21:49:47.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:47.345]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:49:47.345]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:49:47.345]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:47.345]      __ap = 0; //lets make sure we reset the access point selection
[21:49:47.345]        // -> [__ap <= 0x00000000]
[21:49:47.345]    </block>
[21:49:47.345]  </sequence>
[21:49:47.345]  
[21:49:47.372]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:49:47.372]  
[21:49:47.372]  <debugvars>
[21:49:47.372]    // Pre-defined
[21:49:47.372]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:47.372]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:47.372]    __dp=0x00000000
[21:49:47.372]    __ap=0x00000000
[21:49:47.372]    __traceout=0x00000000      (Trace Disabled)
[21:49:47.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:47.374]    __FlashAddr=0x00000000
[21:49:47.374]    __FlashLen=0x00000000
[21:49:47.374]    __FlashArg=0x00000000
[21:49:47.375]    __FlashOp=0x00000000
[21:49:47.375]    __Result=0x00000000
[21:49:47.375]  </debugvars>
[21:49:47.375]  
[21:49:47.375]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:49:47.375]    <block atomic="false" info="">
[21:49:47.375]      __var deviceID = 0;
[21:49:47.375]        // -> [deviceID <= 0x00000000]
[21:49:47.375]      __var version = 0;
[21:49:47.375]        // -> [version <= 0x00000000]
[21:49:47.375]      __var partNum = 0;
[21:49:47.375]        // -> [partNum <= 0x00000000]
[21:49:47.375]      __var manuf = 0;
[21:49:47.375]        // -> [manuf <= 0x00000000]
[21:49:47.375]      __var isMSPM0G1X0X_G3X0X = 0;
[21:49:47.375]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:49:47.375]      __var isProduction = 0;
[21:49:47.375]        // -> [isProduction <= 0x00000000]
[21:49:47.375]      __var continueId = 0;
[21:49:47.375]        // -> [continueId <= 0x00000000]
[21:49:47.375]      deviceID =   Read32(0x41C40004);
[21:49:47.378]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:49:47.381]        // -> [deviceID <= 0x2BB8802F]
[21:49:47.381]      version = deviceID >> 28;
[21:49:47.381]        // -> [version <= 0x00000002]
[21:49:47.382]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:49:47.382]        // -> [partNum <= 0x0000BB88]
[21:49:47.382]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:49:47.382]        // -> [manuf <= 0x00000017]
[21:49:47.382]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:49:47.382]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:49:47.382]      isProduction = (version > 0);
[21:49:47.382]        // -> [isProduction <= 0x00000001]
[21:49:47.382]    </block>
[21:49:47.382]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:49:47.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:49:47.382]        // =>  FALSE
[21:49:47.382]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:49:47.382]    </control>
[21:49:47.382]    <control if="continueId == 4" while="" timeout="0" info="">
[21:49:47.383]      // if-block "continueId == 4"
[21:49:47.383]        // =>  FALSE
[21:49:47.383]      // skip if-block "continueId == 4"
[21:49:47.383]    </control>
[21:49:47.383]    <control if="!isProduction" while="" timeout="0" info="">
[21:49:47.383]      // if-block "!isProduction"
[21:49:47.383]        // =>  FALSE
[21:49:47.383]      // skip if-block "!isProduction"
[21:49:47.383]    </control>
[21:49:47.383]  </sequence>
[21:49:47.383]  
[21:49:52.862]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:49:52.862]  
[21:49:52.871]  <debugvars>
[21:49:52.871]    // Pre-defined
[21:49:52.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:52.871]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:49:52.871]    __dp=0x00000000
[21:49:52.871]    __ap=0x00000000
[21:49:52.871]    __traceout=0x00000000      (Trace Disabled)
[21:49:52.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:52.871]    __FlashAddr=0x00000000
[21:49:52.871]    __FlashLen=0x00000000
[21:49:52.871]    __FlashArg=0x00000000
[21:49:52.871]    __FlashOp=0x00000000
[21:49:52.872]    __Result=0x00000000
[21:49:52.872]  </debugvars>
[21:49:52.872]  
[21:49:52.872]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:49:52.872]    <block atomic="false" info="">
[21:49:52.872]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:49:52.873]        // -> [isSWJ <= 0x00000001]
[21:49:52.873]      __var hasDormant = __protocol & 0x00020000;
[21:49:52.873]        // -> [hasDormant <= 0x00000000]
[21:49:52.873]      __var protType   = __protocol & 0x0000FFFF;
[21:49:52.873]        // -> [protType <= 0x00000002]
[21:49:52.873]    </block>
[21:49:52.873]    <control if="protType == 1" while="" timeout="0" info="">
[21:49:52.874]      // if-block "protType == 1"
[21:49:52.874]        // =>  FALSE
[21:49:52.874]      // skip if-block "protType == 1"
[21:49:52.874]    </control>
[21:49:52.874]    <control if="protType == 2" while="" timeout="0" info="">
[21:49:52.874]      // if-block "protType == 2"
[21:49:52.874]        // =>  TRUE
[21:49:52.874]      <control if="isSWJ" while="" timeout="0" info="">
[21:49:52.874]        // if-block "isSWJ"
[21:49:52.874]          // =>  TRUE
[21:49:52.874]        <control if="hasDormant" while="" timeout="0" info="">
[21:49:52.874]          // if-block "hasDormant"
[21:49:52.874]            // =>  FALSE
[21:49:52.874]          // skip if-block "hasDormant"
[21:49:52.874]        </control>
[21:49:52.874]        <control if="!hasDormant" while="" timeout="0" info="">
[21:49:52.874]          // if-block "!hasDormant"
[21:49:52.874]            // =>  TRUE
[21:49:52.874]          <block atomic="false" info="">
[21:49:52.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:49:52.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:52.876]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:49:52.878]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:49:52.878]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:49:52.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:52.878]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:49:52.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:49:52.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:49:52.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:52.882]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:49:52.882]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:49:52.882]          </block>
[21:49:52.882]          // end if-block "!hasDormant"
[21:49:52.882]        </control>
[21:49:52.882]        // end if-block "isSWJ"
[21:49:52.882]      </control>
[21:49:52.882]      <control if="!isSWJ" while="" timeout="0" info="">
[21:49:52.882]        // if-block "!isSWJ"
[21:49:52.882]          // =>  FALSE
[21:49:52.882]        // skip if-block "!isSWJ"
[21:49:52.882]      </control>
[21:49:52.882]      <block atomic="false" info="">
[21:49:52.885]        ReadDP(0x0);
[21:49:52.886]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:49:52.886]      </block>
[21:49:52.886]      // end if-block "protType == 2"
[21:49:52.886]    </control>
[21:49:52.886]  </sequence>
[21:49:52.886]  
[21:49:52.889]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:49:52.889]  
[21:49:52.889]  <debugvars>
[21:49:52.889]    // Pre-defined
[21:49:52.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:52.889]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:49:52.889]    __dp=0x00000000
[21:49:52.889]    __ap=0x00000000
[21:49:52.889]    __traceout=0x00000000      (Trace Disabled)
[21:49:52.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:52.890]    __FlashAddr=0x00000000
[21:49:52.890]    __FlashLen=0x00000000
[21:49:52.890]    __FlashArg=0x00000000
[21:49:52.890]    __FlashOp=0x00000000
[21:49:52.890]    __Result=0x00000000
[21:49:52.890]  </debugvars>
[21:49:52.890]  
[21:49:52.890]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:49:52.890]    <block atomic="false" info="">
[21:49:52.890]      __var SW_DP_ABORT       = 0x0;
[21:49:52.891]        // -> [SW_DP_ABORT <= 0x00000000]
[21:49:52.891]      __var DP_CTRL_STAT      = 0x4;
[21:49:52.891]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:49:52.891]      __var DP_SELECT         = 0x8;
[21:49:52.891]        // -> [DP_SELECT <= 0x00000008]
[21:49:52.891]      __var powered_down      = 0;
[21:49:52.891]        // -> [powered_down <= 0x00000000]
[21:49:52.891]      WriteDP(DP_SELECT, 0x00000000);
[21:49:52.893]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:49:52.893]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:49:52.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:49:52.896]        // -> [powered_down <= 0x00000001]
[21:49:52.896]    </block>
[21:49:52.896]    <control if="powered_down" while="" timeout="0" info="">
[21:49:52.896]      // if-block "powered_down"
[21:49:52.896]        // =>  TRUE
[21:49:52.896]      <block atomic="false" info="">
[21:49:52.896]        Message(0, "Debug/System power-up request sent");
[21:49:52.899]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:49:52.901]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:49:52.901]      </block>
[21:49:52.901]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:49:52.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:49:52.902]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:49:52.902]        // while-condition  =>  FALSE
[21:49:52.902]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:49:52.902]      </control>
[21:49:52.902]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:49:52.902]        // if-block "(__protocol & 0xFFFF) == 1"
[21:49:52.906]          // =>  FALSE
[21:49:52.906]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:49:52.906]      </control>
[21:49:52.906]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:49:52.906]        // if-block "(__protocol & 0xFFFF) == 2"
[21:49:52.906]          // =>  TRUE
[21:49:52.906]        <block atomic="false" info="">
[21:49:52.906]          Message(0, "executing SWD power up");
[21:49:52.906]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:49:52.906]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:49:52.910]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:49:52.911]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:49:52.911]        </block>
[21:49:52.912]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:49:52.912]      </control>
[21:49:52.912]      // end if-block "powered_down"
[21:49:52.912]    </control>
[21:49:52.912]    <block atomic="false" info="">
[21:49:52.912]      __var DEBUG_PORT_VAL    = 0;
[21:49:52.912]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:49:52.912]      __var ACCESS_POINT_VAL  = 0;
[21:49:52.912]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:49:52.912]      __ap = 1; 
[21:49:52.912]        // -> [__ap <= 0x00000001]
[21:49:52.913]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:49:52.918]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:49:52.918]      __ap = 4;
[21:49:52.918]        // -> [__ap <= 0x00000004]
[21:49:52.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:52.923]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:49:52.923]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:49:52.923]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:52.923]    </block>
[21:49:52.923]    <block atomic="false" info="">
[21:49:52.923]      __var nReset = 0x80;
[21:49:52.923]        // -> [nReset <= 0x00000080]
[21:49:52.923]      __var canReadPins = 0;
[21:49:52.923]        // -> [canReadPins <= 0x00000000]
[21:49:52.923]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:49:52.926]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:49:52.926]        // -> [canReadPins <= 0x00000001]
[21:49:52.926]    </block>
[21:49:52.926]    <control if="" while="1" timeout="200" info="">
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.926]      // while "1"  (timeout="200")
[21:49:52.926]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.930]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.930]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.930]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.930]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.930]      // while-condition  =>  TRUE
[21:49:52.930]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.931]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.931]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.931]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.931]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.931]      // while "1"  (timeout="200")
[21:49:52.931]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.932]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.932]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.932]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.932]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.932]      // while-condition  =>  TRUE
[21:49:52.932]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.933]      // while-condition  =>  TRUE
[21:49:52.933]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.935]      // while "1"  (timeout="200")
[21:49:52.935]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.937]      // while-condition  =>  TRUE
[21:49:52.937]      // while "1"  (timeout="200")
[21:49:52.939]      // while-condition  =>  TRUE
[21:49:52.939]      // while "1"  (timeout="200")
[21:49:52.939]      // while-condition  =>  TRUE
[21:49:52.939]      // while "1"  (timeout="200")
[21:49:52.939]      // while-condition  =>  TRUE
[21:49:52.939]      // while "1"  (timeout="200")
[21:49:52.939]      // while-condition  =>  TRUE
[21:49:52.939]      // while "1"  (timeout="200")
[21:49:52.939]      // while-condition  =>  TRUE
[21:49:52.939]      // while "1"  (timeout="200")
[21:49:52.940]      // while-condition  =>  TRUE
[21:49:52.940]      // while "1"  (timeout="200")
[21:49:52.940]      // while  =>  TIMEOUT
[21:49:52.940]      // end while "1"
[21:49:52.940]    </control>
[21:49:52.940]    <control if="canReadPins" while="" timeout="0" info="">
[21:49:52.940]      // if-block "canReadPins"
[21:49:52.940]        // =>  TRUE
[21:49:52.940]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:49:52.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:49:52.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:49:52.942]        // while-condition  =>  FALSE
[21:49:52.942]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:49:52.942]      </control>
[21:49:52.942]      // end if-block "canReadPins"
[21:49:52.943]    </control>
[21:49:52.943]    <control if="!canReadPins" while="" timeout="0" info="">
[21:49:52.943]      // if-block "!canReadPins"
[21:49:52.943]        // =>  FALSE
[21:49:52.943]      // skip if-block "!canReadPins"
[21:49:52.943]    </control>
[21:49:52.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:49:52.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:52.943]        // =>  TRUE
[21:49:52.943]      <block atomic="false" info="">
[21:49:52.944]        WriteAP(0x00, 0x190008);
[21:49:52.944]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:52.944]        WriteAP(0xF0, 0x01);
[21:49:52.953]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:52.953]      </block>
[21:49:52.954]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:52.954]    </control>
[21:49:52.954]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:49:52.954]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:52.954]        // =>  FALSE
[21:49:52.954]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:52.954]    </control>
[21:49:52.954]    <block atomic="false" info="">
[21:49:52.954]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:52.959]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:49:52.959]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:49:52.959]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:52.962]      __ap = 0; //lets make sure we reset the access point selection
[21:49:52.962]        // -> [__ap <= 0x00000000]
[21:49:52.962]    </block>
[21:49:52.962]  </sequence>
[21:49:52.962]  
[21:49:52.984]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:49:52.984]  
[21:49:52.984]  <debugvars>
[21:49:52.984]    // Pre-defined
[21:49:52.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:52.984]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:49:52.984]    __dp=0x00000000
[21:49:52.984]    __ap=0x00000000
[21:49:52.984]    __traceout=0x00000000      (Trace Disabled)
[21:49:52.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:52.984]    __FlashAddr=0x00000000
[21:49:52.984]    __FlashLen=0x00000000
[21:49:52.984]    __FlashArg=0x00000000
[21:49:52.984]    __FlashOp=0x00000000
[21:49:52.984]    __Result=0x00000000
[21:49:52.984]  </debugvars>
[21:49:52.984]  
[21:49:52.984]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:49:52.984]    <block atomic="false" info="">
[21:49:52.988]      __var deviceID = 0;
[21:49:52.988]        // -> [deviceID <= 0x00000000]
[21:49:52.988]      __var version = 0;
[21:49:52.988]        // -> [version <= 0x00000000]
[21:49:52.988]      __var partNum = 0;
[21:49:52.988]        // -> [partNum <= 0x00000000]
[21:49:52.988]      __var manuf = 0;
[21:49:52.988]        // -> [manuf <= 0x00000000]
[21:49:52.988]      __var isMSPM0G1X0X_G3X0X = 0;
[21:49:52.988]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:49:52.988]      __var isProduction = 0;
[21:49:52.988]        // -> [isProduction <= 0x00000000]
[21:49:52.988]      __var continueId = 0;
[21:49:52.988]        // -> [continueId <= 0x00000000]
[21:49:52.988]      deviceID =   Read32(0x41C40004);
[21:49:52.993]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:49:52.993]        // -> [deviceID <= 0x2BB8802F]
[21:49:52.993]      version = deviceID >> 28;
[21:49:52.993]        // -> [version <= 0x00000002]
[21:49:52.995]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:49:52.995]        // -> [partNum <= 0x0000BB88]
[21:49:52.995]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:49:52.995]        // -> [manuf <= 0x00000017]
[21:49:52.995]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:49:52.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:49:52.995]      isProduction = (version > 0);
[21:49:52.995]        // -> [isProduction <= 0x00000001]
[21:49:52.996]    </block>
[21:49:52.996]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:49:52.996]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:49:52.996]        // =>  FALSE
[21:49:52.996]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:49:52.996]    </control>
[21:49:52.996]    <control if="continueId == 4" while="" timeout="0" info="">
[21:49:52.996]      // if-block "continueId == 4"
[21:49:52.996]        // =>  FALSE
[21:49:52.996]      // skip if-block "continueId == 4"
[21:49:52.996]    </control>
[21:49:52.996]    <control if="!isProduction" while="" timeout="0" info="">
[21:49:52.996]      // if-block "!isProduction"
[21:49:52.996]        // =>  FALSE
[21:49:52.996]      // skip if-block "!isProduction"
[21:49:52.996]    </control>
[21:49:52.996]  </sequence>
[21:49:52.996]  
[21:51:45.369]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:51:45.369]  
[21:51:45.370]  <debugvars>
[21:51:45.370]    // Pre-defined
[21:51:45.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:45.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:45.370]    __dp=0x00000000
[21:51:45.370]    __ap=0x00000000
[21:51:45.370]    __traceout=0x00000000      (Trace Disabled)
[21:51:45.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:45.370]    __FlashAddr=0x00000000
[21:51:45.370]    __FlashLen=0x00000000
[21:51:45.370]    __FlashArg=0x00000000
[21:51:45.370]    __FlashOp=0x00000000
[21:51:45.370]    __Result=0x00000000
[21:51:45.370]  </debugvars>
[21:51:45.370]  
[21:51:45.372]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:51:45.372]    <block atomic="false" info="">
[21:51:45.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:51:45.372]        // -> [isSWJ <= 0x00000001]
[21:51:45.373]      __var hasDormant = __protocol & 0x00020000;
[21:51:45.373]        // -> [hasDormant <= 0x00000000]
[21:51:45.373]      __var protType   = __protocol & 0x0000FFFF;
[21:51:45.373]        // -> [protType <= 0x00000002]
[21:51:45.373]    </block>
[21:51:45.373]    <control if="protType == 1" while="" timeout="0" info="">
[21:51:45.373]      // if-block "protType == 1"
[21:51:45.373]        // =>  FALSE
[21:51:45.373]      // skip if-block "protType == 1"
[21:51:45.373]    </control>
[21:51:45.374]    <control if="protType == 2" while="" timeout="0" info="">
[21:51:45.374]      // if-block "protType == 2"
[21:51:45.374]        // =>  TRUE
[21:51:45.374]      <control if="isSWJ" while="" timeout="0" info="">
[21:51:45.374]        // if-block "isSWJ"
[21:51:45.374]          // =>  TRUE
[21:51:45.374]        <control if="hasDormant" while="" timeout="0" info="">
[21:51:45.374]          // if-block "hasDormant"
[21:51:45.374]            // =>  FALSE
[21:51:45.374]          // skip if-block "hasDormant"
[21:51:45.374]        </control>
[21:51:45.374]        <control if="!hasDormant" while="" timeout="0" info="">
[21:51:45.374]          // if-block "!hasDormant"
[21:51:45.375]            // =>  TRUE
[21:51:45.375]          <block atomic="false" info="">
[21:51:45.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:51:45.378]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:45.378]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:51:45.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:51:45.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:51:45.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:45.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:51:45.382]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:51:45.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:51:45.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:51:45.383]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:51:45.386]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:51:45.386]          </block>
[21:51:45.387]          // end if-block "!hasDormant"
[21:51:45.387]        </control>
[21:51:45.387]        // end if-block "isSWJ"
[21:51:45.387]      </control>
[21:51:45.387]      <control if="!isSWJ" while="" timeout="0" info="">
[21:51:45.387]        // if-block "!isSWJ"
[21:51:45.387]          // =>  FALSE
[21:51:45.387]        // skip if-block "!isSWJ"
[21:51:45.387]      </control>
[21:51:45.387]      <block atomic="false" info="">
[21:51:45.387]        ReadDP(0x0);
[21:51:45.388]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:51:45.390]      </block>
[21:51:45.390]      // end if-block "protType == 2"
[21:51:45.390]    </control>
[21:51:45.390]  </sequence>
[21:51:45.390]  
[21:51:45.390]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:51:45.390]  
[21:51:45.390]  <debugvars>
[21:51:45.390]    // Pre-defined
[21:51:45.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:45.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:45.390]    __dp=0x00000000
[21:51:45.390]    __ap=0x00000000
[21:51:45.390]    __traceout=0x00000000      (Trace Disabled)
[21:51:45.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:45.390]    __FlashAddr=0x00000000
[21:51:45.390]    __FlashLen=0x00000000
[21:51:45.390]    __FlashArg=0x00000000
[21:51:45.394]    __FlashOp=0x00000000
[21:51:45.394]    __Result=0x00000000
[21:51:45.394]  </debugvars>
[21:51:45.394]  
[21:51:45.394]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:51:45.394]    <block atomic="false" info="">
[21:51:45.394]      __var SW_DP_ABORT       = 0x0;
[21:51:45.394]        // -> [SW_DP_ABORT <= 0x00000000]
[21:51:45.394]      __var DP_CTRL_STAT      = 0x4;
[21:51:45.394]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:51:45.394]      __var DP_SELECT         = 0x8;
[21:51:45.394]        // -> [DP_SELECT <= 0x00000008]
[21:51:45.394]      __var powered_down      = 0;
[21:51:45.394]        // -> [powered_down <= 0x00000000]
[21:51:45.394]      WriteDP(DP_SELECT, 0x00000000);
[21:51:45.396]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:51:45.397]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:51:45.398]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:51:45.398]        // -> [powered_down <= 0x00000001]
[21:51:45.398]    </block>
[21:51:45.398]    <control if="powered_down" while="" timeout="0" info="">
[21:51:45.398]      // if-block "powered_down"
[21:51:45.398]        // =>  TRUE
[21:51:45.398]      <block atomic="false" info="">
[21:51:45.399]        Message(0, "Debug/System power-up request sent");
[21:51:45.400]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:51:45.402]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:51:45.402]      </block>
[21:51:45.402]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:51:45.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:51:45.402]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:51:45.402]        // while-condition  =>  FALSE
[21:51:45.402]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:51:45.402]      </control>
[21:51:45.402]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:51:45.405]        // if-block "(__protocol & 0xFFFF) == 1"
[21:51:45.405]          // =>  FALSE
[21:51:45.405]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:51:45.405]      </control>
[21:51:45.405]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:51:45.405]        // if-block "(__protocol & 0xFFFF) == 2"
[21:51:45.405]          // =>  TRUE
[21:51:45.405]        <block atomic="false" info="">
[21:51:45.405]          Message(0, "executing SWD power up");
[21:51:45.407]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:51:45.408]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:51:45.408]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:51:45.411]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:51:45.411]        </block>
[21:51:45.411]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:51:45.411]      </control>
[21:51:45.411]      // end if-block "powered_down"
[21:51:45.411]    </control>
[21:51:45.411]    <block atomic="false" info="">
[21:51:45.411]      __var DEBUG_PORT_VAL    = 0;
[21:51:45.411]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:51:45.411]      __var ACCESS_POINT_VAL  = 0;
[21:51:45.411]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:51:45.411]      __ap = 1; 
[21:51:45.411]        // -> [__ap <= 0x00000001]
[21:51:45.411]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:51:45.415]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:51:45.415]      __ap = 4;
[21:51:45.415]        // -> [__ap <= 0x00000004]
[21:51:45.415]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:45.427]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:51:45.427]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:51:45.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:45.428]    </block>
[21:51:45.428]    <block atomic="false" info="">
[21:51:45.428]      __var nReset = 0x80;
[21:51:45.430]        // -> [nReset <= 0x00000080]
[21:51:45.430]      __var canReadPins = 0;
[21:51:45.430]        // -> [canReadPins <= 0x00000000]
[21:51:45.430]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:51:45.431]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:51:45.431]        // -> [canReadPins <= 0x00000001]
[21:51:45.432]    </block>
[21:51:45.432]    <control if="" while="1" timeout="200" info="">
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.432]      // while-condition  =>  TRUE
[21:51:45.432]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.434]      // while "1"  (timeout="200")
[21:51:45.434]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.435]      // while-condition  =>  TRUE
[21:51:45.435]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.438]      // while-condition  =>  TRUE
[21:51:45.438]      // while "1"  (timeout="200")
[21:51:45.439]      // while-condition  =>  TRUE
[21:51:45.439]      // while "1"  (timeout="200")
[21:51:45.439]      // while-condition  =>  TRUE
[21:51:45.439]      // while "1"  (timeout="200")
[21:51:45.439]      // while-condition  =>  TRUE
[21:51:45.439]      // while "1"  (timeout="200")
[21:51:45.439]      // while-condition  =>  TRUE
[21:51:45.439]      // while "1"  (timeout="200")
[21:51:45.439]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.440]      // while-condition  =>  TRUE
[21:51:45.440]      // while "1"  (timeout="200")
[21:51:45.442]      // while-condition  =>  TRUE
[21:51:45.442]      // while "1"  (timeout="200")
[21:51:45.442]      // while  =>  TIMEOUT
[21:51:45.442]      // end while "1"
[21:51:45.442]    </control>
[21:51:45.442]    <control if="canReadPins" while="" timeout="0" info="">
[21:51:45.442]      // if-block "canReadPins"
[21:51:45.442]        // =>  TRUE
[21:51:45.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:51:45.443]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:51:45.443]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:51:45.443]        // while-condition  =>  FALSE
[21:51:45.445]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:51:45.445]      </control>
[21:51:45.445]      // end if-block "canReadPins"
[21:51:45.445]    </control>
[21:51:45.445]    <control if="!canReadPins" while="" timeout="0" info="">
[21:51:45.445]      // if-block "!canReadPins"
[21:51:45.445]        // =>  FALSE
[21:51:45.445]      // skip if-block "!canReadPins"
[21:51:45.445]    </control>
[21:51:45.445]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:51:45.445]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:45.445]        // =>  TRUE
[21:51:45.445]      <block atomic="false" info="">
[21:51:45.445]        WriteAP(0x00, 0x190008);
[21:51:45.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:45.448]        WriteAP(0xF0, 0x01);
[21:51:45.456]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:51:45.456]      </block>
[21:51:45.456]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:51:45.456]    </control>
[21:51:45.456]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:51:45.456]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:45.456]        // =>  FALSE
[21:51:45.457]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:51:45.457]    </control>
[21:51:45.457]    <block atomic="false" info="">
[21:51:45.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:51:45.460]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:51:45.460]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:51:45.460]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:51:45.462]      __ap = 0; //lets make sure we reset the access point selection
[21:51:45.463]        // -> [__ap <= 0x00000000]
[21:51:45.463]    </block>
[21:51:45.463]  </sequence>
[21:51:45.463]  
[21:51:45.485]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:51:45.485]  
[21:51:45.485]  <debugvars>
[21:51:45.485]    // Pre-defined
[21:51:45.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:51:45.486]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:51:45.486]    __dp=0x00000000
[21:51:45.486]    __ap=0x00000000
[21:51:45.486]    __traceout=0x00000000      (Trace Disabled)
[21:51:45.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:51:45.486]    __FlashAddr=0x00000000
[21:51:45.486]    __FlashLen=0x00000000
[21:51:45.486]    __FlashArg=0x00000000
[21:51:45.486]    __FlashOp=0x00000000
[21:51:45.486]    __Result=0x00000000
[21:51:45.487]  </debugvars>
[21:51:45.487]  
[21:51:45.487]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:51:45.487]    <block atomic="false" info="">
[21:51:45.487]      __var deviceID = 0;
[21:51:45.487]        // -> [deviceID <= 0x00000000]
[21:51:45.488]      __var version = 0;
[21:51:45.488]        // -> [version <= 0x00000000]
[21:51:45.488]      __var partNum = 0;
[21:51:45.488]        // -> [partNum <= 0x00000000]
[21:51:45.488]      __var manuf = 0;
[21:51:45.488]        // -> [manuf <= 0x00000000]
[21:51:45.488]      __var isMSPM0G1X0X_G3X0X = 0;
[21:51:45.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:51:45.488]      __var isProduction = 0;
[21:51:45.488]        // -> [isProduction <= 0x00000000]
[21:51:45.488]      __var continueId = 0;
[21:51:45.488]        // -> [continueId <= 0x00000000]
[21:51:45.488]      deviceID =   Read32(0x41C40004);
[21:51:45.502]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:51:45.502]        // -> [deviceID <= 0x2BB8802F]
[21:51:45.502]      version = deviceID >> 28;
[21:51:45.502]        // -> [version <= 0x00000002]
[21:51:45.502]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:51:45.502]        // -> [partNum <= 0x0000BB88]
[21:51:45.506]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:51:45.506]        // -> [manuf <= 0x00000017]
[21:51:45.506]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:51:45.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:51:45.506]      isProduction = (version > 0);
[21:51:45.506]        // -> [isProduction <= 0x00000001]
[21:51:45.506]    </block>
[21:51:45.506]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:51:45.506]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:51:45.506]        // =>  FALSE
[21:51:45.506]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:51:45.506]    </control>
[21:51:45.507]    <control if="continueId == 4" while="" timeout="0" info="">
[21:51:45.507]      // if-block "continueId == 4"
[21:51:45.507]        // =>  FALSE
[21:51:45.507]      // skip if-block "continueId == 4"
[21:51:45.507]    </control>
[21:51:45.507]    <control if="!isProduction" while="" timeout="0" info="">
[21:51:45.507]      // if-block "!isProduction"
[21:51:45.508]        // =>  FALSE
[21:51:45.508]      // skip if-block "!isProduction"
[21:51:45.508]    </control>
[21:51:45.508]  </sequence>
[21:51:45.508]  
[22:05:05.263]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:05:05.263]  
[22:05:05.263]  <debugvars>
[22:05:05.263]    // Pre-defined
[22:05:05.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:05.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:05.263]    __dp=0x00000000
[22:05:05.263]    __ap=0x00000000
[22:05:05.263]    __traceout=0x00000000      (Trace Disabled)
[22:05:05.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:05.263]    __FlashAddr=0x00000000
[22:05:05.263]    __FlashLen=0x00000000
[22:05:05.263]    __FlashArg=0x00000000
[22:05:05.263]    __FlashOp=0x00000000
[22:05:05.263]    __Result=0x00000000
[22:05:05.263]  </debugvars>
[22:05:05.263]  
[22:05:05.263]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:05:05.263]    <block atomic="false" info="">
[22:05:05.263]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:05:05.263]        // -> [isSWJ <= 0x00000001]
[22:05:05.266]      __var hasDormant = __protocol & 0x00020000;
[22:05:05.266]        // -> [hasDormant <= 0x00000000]
[22:05:05.266]      __var protType   = __protocol & 0x0000FFFF;
[22:05:05.266]        // -> [protType <= 0x00000002]
[22:05:05.266]    </block>
[22:05:05.266]    <control if="protType == 1" while="" timeout="0" info="">
[22:05:05.266]      // if-block "protType == 1"
[22:05:05.266]        // =>  FALSE
[22:05:05.266]      // skip if-block "protType == 1"
[22:05:05.266]    </control>
[22:05:05.266]    <control if="protType == 2" while="" timeout="0" info="">
[22:05:05.266]      // if-block "protType == 2"
[22:05:05.266]        // =>  TRUE
[22:05:05.266]      <control if="isSWJ" while="" timeout="0" info="">
[22:05:05.266]        // if-block "isSWJ"
[22:05:05.266]          // =>  TRUE
[22:05:05.266]        <control if="hasDormant" while="" timeout="0" info="">
[22:05:05.266]          // if-block "hasDormant"
[22:05:05.266]            // =>  FALSE
[22:05:05.266]          // skip if-block "hasDormant"
[22:05:05.266]        </control>
[22:05:05.266]        <control if="!hasDormant" while="" timeout="0" info="">
[22:05:05.266]          // if-block "!hasDormant"
[22:05:05.266]            // =>  TRUE
[22:05:05.266]          <block atomic="false" info="">
[22:05:05.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:05:05.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:05.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:05:05.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:05:05.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:05:05.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:05.274]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:05:05.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:05:05.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:05:05.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:05.274]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:05:05.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:05:05.279]          </block>
[22:05:05.279]          // end if-block "!hasDormant"
[22:05:05.279]        </control>
[22:05:05.279]        // end if-block "isSWJ"
[22:05:05.279]      </control>
[22:05:05.279]      <control if="!isSWJ" while="" timeout="0" info="">
[22:05:05.280]        // if-block "!isSWJ"
[22:05:05.280]          // =>  FALSE
[22:05:05.280]        // skip if-block "!isSWJ"
[22:05:05.280]      </control>
[22:05:05.280]      <block atomic="false" info="">
[22:05:05.280]        ReadDP(0x0);
[22:05:05.281]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:05:05.281]      </block>
[22:05:05.281]      // end if-block "protType == 2"
[22:05:05.281]    </control>
[22:05:05.281]  </sequence>
[22:05:05.281]  
[22:05:05.290]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:05:05.290]  
[22:05:05.290]  <debugvars>
[22:05:05.290]    // Pre-defined
[22:05:05.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:05.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:05.290]    __dp=0x00000000
[22:05:05.290]    __ap=0x00000000
[22:05:05.290]    __traceout=0x00000000      (Trace Disabled)
[22:05:05.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:05.290]    __FlashAddr=0x00000000
[22:05:05.290]    __FlashLen=0x00000000
[22:05:05.293]    __FlashArg=0x00000000
[22:05:05.293]    __FlashOp=0x00000000
[22:05:05.293]    __Result=0x00000000
[22:05:05.293]  </debugvars>
[22:05:05.293]  
[22:05:05.293]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:05:05.293]    <block atomic="false" info="">
[22:05:05.293]      __var SW_DP_ABORT       = 0x0;
[22:05:05.293]        // -> [SW_DP_ABORT <= 0x00000000]
[22:05:05.293]      __var DP_CTRL_STAT      = 0x4;
[22:05:05.293]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:05:05.293]      __var DP_SELECT         = 0x8;
[22:05:05.293]        // -> [DP_SELECT <= 0x00000008]
[22:05:05.293]      __var powered_down      = 0;
[22:05:05.293]        // -> [powered_down <= 0x00000000]
[22:05:05.295]      WriteDP(DP_SELECT, 0x00000000);
[22:05:05.297]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:05:05.297]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:05:05.299]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:05:05.299]        // -> [powered_down <= 0x00000001]
[22:05:05.299]    </block>
[22:05:05.299]    <control if="powered_down" while="" timeout="0" info="">
[22:05:05.299]      // if-block "powered_down"
[22:05:05.299]        // =>  TRUE
[22:05:05.299]      <block atomic="false" info="">
[22:05:05.299]        Message(0, "Debug/System power-up request sent");
[22:05:05.301]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:05:05.303]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:05:05.303]      </block>
[22:05:05.303]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:05:05.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:05:05.309]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:05:05.309]        // while-condition  =>  FALSE
[22:05:05.309]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:05:05.309]      </control>
[22:05:05.309]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:05:05.309]        // if-block "(__protocol & 0xFFFF) == 1"
[22:05:05.309]          // =>  FALSE
[22:05:05.309]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:05:05.309]      </control>
[22:05:05.309]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:05:05.309]        // if-block "(__protocol & 0xFFFF) == 2"
[22:05:05.309]          // =>  TRUE
[22:05:05.311]        <block atomic="false" info="">
[22:05:05.311]          Message(0, "executing SWD power up");
[22:05:05.312]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:05:05.318]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:05:05.318]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:05:05.320]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:05:05.320]        </block>
[22:05:05.320]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:05:05.320]      </control>
[22:05:05.320]      // end if-block "powered_down"
[22:05:05.320]    </control>
[22:05:05.320]    <block atomic="false" info="">
[22:05:05.321]      __var DEBUG_PORT_VAL    = 0;
[22:05:05.321]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:05:05.321]      __var ACCESS_POINT_VAL  = 0;
[22:05:05.321]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:05:05.321]      __ap = 1; 
[22:05:05.321]        // -> [__ap <= 0x00000001]
[22:05:05.321]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:05:05.325]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:05:05.325]      __ap = 4;
[22:05:05.325]        // -> [__ap <= 0x00000004]
[22:05:05.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:05.330]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:05:05.330]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:05:05.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:05.334]    </block>
[22:05:05.334]    <block atomic="false" info="">
[22:05:05.334]      __var nReset = 0x80;
[22:05:05.334]        // -> [nReset <= 0x00000080]
[22:05:05.334]      __var canReadPins = 0;
[22:05:05.334]        // -> [canReadPins <= 0x00000000]
[22:05:05.334]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:05:05.337]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:05:05.337]        // -> [canReadPins <= 0x00000001]
[22:05:05.337]    </block>
[22:05:05.337]    <control if="" while="1" timeout="200" info="">
[22:05:05.337]      // while "1"  (timeout="200")
[22:05:05.337]      // while-condition  =>  TRUE
[22:05:05.337]      // while "1"  (timeout="200")
[22:05:05.337]      // while-condition  =>  TRUE
[22:05:05.337]      // while "1"  (timeout="200")
[22:05:05.337]      // while-condition  =>  TRUE
[22:05:05.337]      // while "1"  (timeout="200")
[22:05:05.337]      // while-condition  =>  TRUE
[22:05:05.337]      // while "1"  (timeout="200")
[22:05:05.337]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.339]      // while "1"  (timeout="200")
[22:05:05.339]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.340]      // while "1"  (timeout="200")
[22:05:05.340]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.344]      // while "1"  (timeout="200")
[22:05:05.344]      // while-condition  =>  TRUE
[22:05:05.348]      // while "1"  (timeout="200")
[22:05:05.348]      // while  =>  TIMEOUT
[22:05:05.348]      // end while "1"
[22:05:05.348]    </control>
[22:05:05.348]    <control if="canReadPins" while="" timeout="0" info="">
[22:05:05.348]      // if-block "canReadPins"
[22:05:05.348]        // =>  TRUE
[22:05:05.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:05:05.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:05:05.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:05:05.349]        // while-condition  =>  FALSE
[22:05:05.352]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:05:05.352]      </control>
[22:05:05.352]      // end if-block "canReadPins"
[22:05:05.352]    </control>
[22:05:05.352]    <control if="!canReadPins" while="" timeout="0" info="">
[22:05:05.352]      // if-block "!canReadPins"
[22:05:05.352]        // =>  FALSE
[22:05:05.352]      // skip if-block "!canReadPins"
[22:05:05.352]    </control>
[22:05:05.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:05:05.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:05.352]        // =>  TRUE
[22:05:05.352]      <block atomic="false" info="">
[22:05:05.352]        WriteAP(0x00, 0x190008);
[22:05:05.360]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:05.360]        WriteAP(0xF0, 0x01);
[22:05:05.364]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:05.364]      </block>
[22:05:05.364]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:05.364]    </control>
[22:05:05.364]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:05:05.364]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:05.364]        // =>  FALSE
[22:05:05.364]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:05.364]    </control>
[22:05:05.364]    <block atomic="false" info="">
[22:05:05.364]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:05.368]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:05:05.369]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:05:05.369]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:05.370]      __ap = 0; //lets make sure we reset the access point selection
[22:05:05.370]        // -> [__ap <= 0x00000000]
[22:05:05.370]    </block>
[22:05:05.370]  </sequence>
[22:05:05.370]  
[22:05:05.393]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:05:05.393]  
[22:05:05.393]  <debugvars>
[22:05:05.393]    // Pre-defined
[22:05:05.393]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:05.393]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:05.397]    __dp=0x00000000
[22:05:05.397]    __ap=0x00000000
[22:05:05.397]    __traceout=0x00000000      (Trace Disabled)
[22:05:05.397]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:05.397]    __FlashAddr=0x00000000
[22:05:05.397]    __FlashLen=0x00000000
[22:05:05.397]    __FlashArg=0x00000000
[22:05:05.397]    __FlashOp=0x00000000
[22:05:05.397]    __Result=0x00000000
[22:05:05.397]  </debugvars>
[22:05:05.397]  
[22:05:05.397]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:05:05.397]    <block atomic="false" info="">
[22:05:05.399]      __var deviceID = 0;
[22:05:05.399]        // -> [deviceID <= 0x00000000]
[22:05:05.399]      __var version = 0;
[22:05:05.399]        // -> [version <= 0x00000000]
[22:05:05.399]      __var partNum = 0;
[22:05:05.399]        // -> [partNum <= 0x00000000]
[22:05:05.399]      __var manuf = 0;
[22:05:05.399]        // -> [manuf <= 0x00000000]
[22:05:05.400]      __var isMSPM0G1X0X_G3X0X = 0;
[22:05:05.400]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:05:05.400]      __var isProduction = 0;
[22:05:05.400]        // -> [isProduction <= 0x00000000]
[22:05:05.400]      __var continueId = 0;
[22:05:05.400]        // -> [continueId <= 0x00000000]
[22:05:05.400]      deviceID =   Read32(0x41C40004);
[22:05:05.410]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:05:05.410]        // -> [deviceID <= 0x2BB8802F]
[22:05:05.410]      version = deviceID >> 28;
[22:05:05.410]        // -> [version <= 0x00000002]
[22:05:05.410]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:05:05.410]        // -> [partNum <= 0x0000BB88]
[22:05:05.410]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:05:05.410]        // -> [manuf <= 0x00000017]
[22:05:05.410]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:05:05.410]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:05:05.410]      isProduction = (version > 0);
[22:05:05.410]        // -> [isProduction <= 0x00000001]
[22:05:05.410]    </block>
[22:05:05.410]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:05:05.410]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:05:05.410]        // =>  FALSE
[22:05:05.410]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:05:05.413]    </control>
[22:05:05.413]    <control if="continueId == 4" while="" timeout="0" info="">
[22:05:05.413]      // if-block "continueId == 4"
[22:05:05.413]        // =>  FALSE
[22:05:05.413]      // skip if-block "continueId == 4"
[22:05:05.413]    </control>
[22:05:05.414]    <control if="!isProduction" while="" timeout="0" info="">
[22:05:05.414]      // if-block "!isProduction"
[22:05:05.414]        // =>  FALSE
[22:05:05.414]      // skip if-block "!isProduction"
[22:05:05.414]    </control>
[22:05:05.414]  </sequence>
[22:05:05.414]  
[22:06:04.029]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:06:04.029]  
[22:06:04.030]  <debugvars>
[22:06:04.030]    // Pre-defined
[22:06:04.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:04.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:04.030]    __dp=0x00000000
[22:06:04.030]    __ap=0x00000000
[22:06:04.030]    __traceout=0x00000000      (Trace Disabled)
[22:06:04.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:04.030]    __FlashAddr=0x00000000
[22:06:04.031]    __FlashLen=0x00000000
[22:06:04.031]    __FlashArg=0x00000000
[22:06:04.032]    __FlashOp=0x00000000
[22:06:04.032]    __Result=0x00000000
[22:06:04.032]  </debugvars>
[22:06:04.032]  
[22:06:04.032]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:06:04.032]    <block atomic="false" info="">
[22:06:04.032]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:06:04.032]        // -> [isSWJ <= 0x00000001]
[22:06:04.032]      __var hasDormant = __protocol & 0x00020000;
[22:06:04.032]        // -> [hasDormant <= 0x00000000]
[22:06:04.032]      __var protType   = __protocol & 0x0000FFFF;
[22:06:04.033]        // -> [protType <= 0x00000002]
[22:06:04.033]    </block>
[22:06:04.033]    <control if="protType == 1" while="" timeout="0" info="">
[22:06:04.033]      // if-block "protType == 1"
[22:06:04.033]        // =>  FALSE
[22:06:04.033]      // skip if-block "protType == 1"
[22:06:04.033]    </control>
[22:06:04.033]    <control if="protType == 2" while="" timeout="0" info="">
[22:06:04.033]      // if-block "protType == 2"
[22:06:04.033]        // =>  TRUE
[22:06:04.033]      <control if="isSWJ" while="" timeout="0" info="">
[22:06:04.033]        // if-block "isSWJ"
[22:06:04.033]          // =>  TRUE
[22:06:04.033]        <control if="hasDormant" while="" timeout="0" info="">
[22:06:04.033]          // if-block "hasDormant"
[22:06:04.033]            // =>  FALSE
[22:06:04.033]          // skip if-block "hasDormant"
[22:06:04.034]        </control>
[22:06:04.034]        <control if="!hasDormant" while="" timeout="0" info="">
[22:06:04.034]          // if-block "!hasDormant"
[22:06:04.034]            // =>  TRUE
[22:06:04.034]          <block atomic="false" info="">
[22:06:04.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:06:04.036]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:04.036]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:06:04.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:06:04.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:06:04.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:04.039]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:06:04.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:06:04.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:06:04.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:04.049]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:06:04.050]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:06:04.050]          </block>
[22:06:04.050]          // end if-block "!hasDormant"
[22:06:04.050]        </control>
[22:06:04.050]        // end if-block "isSWJ"
[22:06:04.050]      </control>
[22:06:04.050]      <control if="!isSWJ" while="" timeout="0" info="">
[22:06:04.050]        // if-block "!isSWJ"
[22:06:04.050]          // =>  FALSE
[22:06:04.050]        // skip if-block "!isSWJ"
[22:06:04.050]      </control>
[22:06:04.050]      <block atomic="false" info="">
[22:06:04.050]        ReadDP(0x0);
[22:06:04.051]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:06:04.051]      </block>
[22:06:04.053]      // end if-block "protType == 2"
[22:06:04.053]    </control>
[22:06:04.053]  </sequence>
[22:06:04.053]  
[22:06:04.055]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:06:04.055]  
[22:06:04.055]  <debugvars>
[22:06:04.055]    // Pre-defined
[22:06:04.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:04.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:04.055]    __dp=0x00000000
[22:06:04.055]    __ap=0x00000000
[22:06:04.055]    __traceout=0x00000000      (Trace Disabled)
[22:06:04.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:04.057]    __FlashAddr=0x00000000
[22:06:04.057]    __FlashLen=0x00000000
[22:06:04.057]    __FlashArg=0x00000000
[22:06:04.057]    __FlashOp=0x00000000
[22:06:04.057]    __Result=0x00000000
[22:06:04.057]  </debugvars>
[22:06:04.057]  
[22:06:04.057]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:06:04.057]    <block atomic="false" info="">
[22:06:04.057]      __var SW_DP_ABORT       = 0x0;
[22:06:04.057]        // -> [SW_DP_ABORT <= 0x00000000]
[22:06:04.057]      __var DP_CTRL_STAT      = 0x4;
[22:06:04.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:06:04.057]      __var DP_SELECT         = 0x8;
[22:06:04.057]        // -> [DP_SELECT <= 0x00000008]
[22:06:04.057]      __var powered_down      = 0;
[22:06:04.057]        // -> [powered_down <= 0x00000000]
[22:06:04.059]      WriteDP(DP_SELECT, 0x00000000);
[22:06:04.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:06:04.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:06:04.063]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:06:04.063]        // -> [powered_down <= 0x00000001]
[22:06:04.063]    </block>
[22:06:04.063]    <control if="powered_down" while="" timeout="0" info="">
[22:06:04.063]      // if-block "powered_down"
[22:06:04.063]        // =>  TRUE
[22:06:04.063]      <block atomic="false" info="">
[22:06:04.063]        Message(0, "Debug/System power-up request sent");
[22:06:04.072]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:06:04.073]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:06:04.073]      </block>
[22:06:04.073]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:06:04.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:06:04.074]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:06:04.074]        // while-condition  =>  FALSE
[22:06:04.074]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:06:04.074]      </control>
[22:06:04.074]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:06:04.074]        // if-block "(__protocol & 0xFFFF) == 1"
[22:06:04.074]          // =>  FALSE
[22:06:04.076]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:06:04.076]      </control>
[22:06:04.076]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:06:04.076]        // if-block "(__protocol & 0xFFFF) == 2"
[22:06:04.076]          // =>  TRUE
[22:06:04.076]        <block atomic="false" info="">
[22:06:04.076]          Message(0, "executing SWD power up");
[22:06:04.077]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:06:04.080]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:06:04.080]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:06:04.086]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:06:04.086]        </block>
[22:06:04.086]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:06:04.086]      </control>
[22:06:04.086]      // end if-block "powered_down"
[22:06:04.086]    </control>
[22:06:04.086]    <block atomic="false" info="">
[22:06:04.086]      __var DEBUG_PORT_VAL    = 0;
[22:06:04.087]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:06:04.087]      __var ACCESS_POINT_VAL  = 0;
[22:06:04.087]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:06:04.087]      __ap = 1; 
[22:06:04.087]        // -> [__ap <= 0x00000001]
[22:06:04.087]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:06:04.095]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:06:04.095]      __ap = 4;
[22:06:04.095]        // -> [__ap <= 0x00000004]
[22:06:04.095]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:04.100]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:06:04.100]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:06:04.100]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:04.101]    </block>
[22:06:04.101]    <block atomic="false" info="">
[22:06:04.101]      __var nReset = 0x80;
[22:06:04.101]        // -> [nReset <= 0x00000080]
[22:06:04.101]      __var canReadPins = 0;
[22:06:04.101]        // -> [canReadPins <= 0x00000000]
[22:06:04.101]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:06:04.104]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:06:04.104]        // -> [canReadPins <= 0x00000001]
[22:06:04.104]    </block>
[22:06:04.105]    <control if="" while="1" timeout="200" info="">
[22:06:04.105]      // while "1"  (timeout="200")
[22:06:04.105]      // while-condition  =>  TRUE
[22:06:04.105]      // while "1"  (timeout="200")
[22:06:04.105]      // while-condition  =>  TRUE
[22:06:04.105]      // while "1"  (timeout="200")
[22:06:04.105]      // while-condition  =>  TRUE
[22:06:04.105]      // while "1"  (timeout="200")
[22:06:04.105]      // while-condition  =>  TRUE
[22:06:04.106]      // while "1"  (timeout="200")
[22:06:04.106]      // while-condition  =>  TRUE
[22:06:04.106]      // while "1"  (timeout="200")
[22:06:04.106]      // while-condition  =>  TRUE
[22:06:04.106]      // while "1"  (timeout="200")
[22:06:04.106]      // while-condition  =>  TRUE
[22:06:04.106]      // while "1"  (timeout="200")
[22:06:04.106]      // while-condition  =>  TRUE
[22:06:04.106]      // while "1"  (timeout="200")
[22:06:04.106]      // while-condition  =>  TRUE
[22:06:04.107]      // while "1"  (timeout="200")
[22:06:04.107]      // while-condition  =>  TRUE
[22:06:04.107]      // while "1"  (timeout="200")
[22:06:04.107]      // while-condition  =>  TRUE
[22:06:04.107]      // while "1"  (timeout="200")
[22:06:04.107]      // while-condition  =>  TRUE
[22:06:04.107]      // while "1"  (timeout="200")
[22:06:04.107]      // while-condition  =>  TRUE
[22:06:04.108]      // while "1"  (timeout="200")
[22:06:04.108]      // while-condition  =>  TRUE
[22:06:04.108]      // while "1"  (timeout="200")
[22:06:04.108]      // while-condition  =>  TRUE
[22:06:04.108]      // while "1"  (timeout="200")
[22:06:04.108]      // while-condition  =>  TRUE
[22:06:04.108]      // while "1"  (timeout="200")
[22:06:04.108]      // while-condition  =>  TRUE
[22:06:04.108]      // while "1"  (timeout="200")
[22:06:04.108]      // while-condition  =>  TRUE
[22:06:04.109]      // while "1"  (timeout="200")
[22:06:04.109]      // while-condition  =>  TRUE
[22:06:04.109]      // while "1"  (timeout="200")
[22:06:04.109]      // while-condition  =>  TRUE
[22:06:04.109]      // while "1"  (timeout="200")
[22:06:04.109]      // while-condition  =>  TRUE
[22:06:04.109]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.111]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.111]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.111]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.111]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.111]      // while "1"  (timeout="200")
[22:06:04.111]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.112]      // while "1"  (timeout="200")
[22:06:04.112]      // while-condition  =>  TRUE
[22:06:04.114]      // while "1"  (timeout="200")
[22:06:04.114]      // while  =>  TIMEOUT
[22:06:04.114]      // end while "1"
[22:06:04.114]    </control>
[22:06:04.114]    <control if="canReadPins" while="" timeout="0" info="">
[22:06:04.114]      // if-block "canReadPins"
[22:06:04.114]        // =>  TRUE
[22:06:04.114]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:06:04.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:06:04.116]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:06:04.116]        // while-condition  =>  FALSE
[22:06:04.116]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:06:04.116]      </control>
[22:06:04.116]      // end if-block "canReadPins"
[22:06:04.116]    </control>
[22:06:04.116]    <control if="!canReadPins" while="" timeout="0" info="">
[22:06:04.116]      // if-block "!canReadPins"
[22:06:04.116]        // =>  FALSE
[22:06:04.116]      // skip if-block "!canReadPins"
[22:06:04.117]    </control>
[22:06:04.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:06:04.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:04.117]        // =>  TRUE
[22:06:04.117]      <block atomic="false" info="">
[22:06:04.117]        WriteAP(0x00, 0x190008);
[22:06:04.120]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:04.120]        WriteAP(0xF0, 0x01);
[22:06:04.123]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:04.124]      </block>
[22:06:04.124]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:04.124]    </control>
[22:06:04.124]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:06:04.124]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:04.124]        // =>  FALSE
[22:06:04.124]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:04.124]    </control>
[22:06:04.124]    <block atomic="false" info="">
[22:06:04.124]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:04.131]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:06:04.131]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:06:04.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:04.134]      __ap = 0; //lets make sure we reset the access point selection
[22:06:04.134]        // -> [__ap <= 0x00000000]
[22:06:04.134]    </block>
[22:06:04.134]  </sequence>
[22:06:04.134]  
[22:06:04.165]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:06:04.165]  
[22:06:04.165]  <debugvars>
[22:06:04.169]    // Pre-defined
[22:06:04.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:04.169]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:04.169]    __dp=0x00000000
[22:06:04.169]    __ap=0x00000000
[22:06:04.170]    __traceout=0x00000000      (Trace Disabled)
[22:06:04.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:04.170]    __FlashAddr=0x00000000
[22:06:04.170]    __FlashLen=0x00000000
[22:06:04.170]    __FlashArg=0x00000000
[22:06:04.170]    __FlashOp=0x00000000
[22:06:04.170]    __Result=0x00000000
[22:06:04.170]  </debugvars>
[22:06:04.170]  
[22:06:04.170]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:06:04.170]    <block atomic="false" info="">
[22:06:04.170]      __var deviceID = 0;
[22:06:04.170]        // -> [deviceID <= 0x00000000]
[22:06:04.171]      __var version = 0;
[22:06:04.171]        // -> [version <= 0x00000000]
[22:06:04.171]      __var partNum = 0;
[22:06:04.171]        // -> [partNum <= 0x00000000]
[22:06:04.171]      __var manuf = 0;
[22:06:04.171]        // -> [manuf <= 0x00000000]
[22:06:04.171]      __var isMSPM0G1X0X_G3X0X = 0;
[22:06:04.171]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:06:04.171]      __var isProduction = 0;
[22:06:04.171]        // -> [isProduction <= 0x00000000]
[22:06:04.171]      __var continueId = 0;
[22:06:04.171]        // -> [continueId <= 0x00000000]
[22:06:04.172]      deviceID =   Read32(0x41C40004);
[22:06:04.177]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:06:04.177]        // -> [deviceID <= 0x2BB8802F]
[22:06:04.177]      version = deviceID >> 28;
[22:06:04.177]        // -> [version <= 0x00000002]
[22:06:04.177]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:06:04.177]        // -> [partNum <= 0x0000BB88]
[22:06:04.178]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:06:04.178]        // -> [manuf <= 0x00000017]
[22:06:04.178]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:06:04.178]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:06:04.178]      isProduction = (version > 0);
[22:06:04.178]        // -> [isProduction <= 0x00000001]
[22:06:04.178]    </block>
[22:06:04.178]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:06:04.178]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:06:04.178]        // =>  FALSE
[22:06:04.178]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:06:04.178]    </control>
[22:06:04.180]    <control if="continueId == 4" while="" timeout="0" info="">
[22:06:04.180]      // if-block "continueId == 4"
[22:06:04.180]        // =>  FALSE
[22:06:04.180]      // skip if-block "continueId == 4"
[22:06:04.180]    </control>
[22:06:04.180]    <control if="!isProduction" while="" timeout="0" info="">
[22:06:04.180]      // if-block "!isProduction"
[22:06:04.180]        // =>  FALSE
[22:06:04.180]      // skip if-block "!isProduction"
[22:06:04.180]    </control>
[22:06:04.180]  </sequence>
[22:06:04.180]  
[22:07:40.659]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:40.659]  
[22:07:40.659]  <debugvars>
[22:07:40.660]    // Pre-defined
[22:07:40.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:40.660]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:40.660]    __dp=0x00000000
[22:07:40.660]    __ap=0x00000000
[22:07:40.660]    __traceout=0x00000000      (Trace Disabled)
[22:07:40.660]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:40.661]    __FlashAddr=0x00000000
[22:07:40.661]    __FlashLen=0x00000000
[22:07:40.661]    __FlashArg=0x00000000
[22:07:40.661]    __FlashOp=0x00000000
[22:07:40.661]    __Result=0x00000000
[22:07:40.661]  </debugvars>
[22:07:40.661]  
[22:07:40.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:40.661]    <block atomic="false" info="">
[22:07:40.661]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:40.661]        // -> [isSWJ <= 0x00000001]
[22:07:40.661]      __var hasDormant = __protocol & 0x00020000;
[22:07:40.661]        // -> [hasDormant <= 0x00000000]
[22:07:40.661]      __var protType   = __protocol & 0x0000FFFF;
[22:07:40.661]        // -> [protType <= 0x00000002]
[22:07:40.661]    </block>
[22:07:40.661]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:40.661]      // if-block "protType == 1"
[22:07:40.661]        // =>  FALSE
[22:07:40.661]      // skip if-block "protType == 1"
[22:07:40.661]    </control>
[22:07:40.661]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:40.664]      // if-block "protType == 2"
[22:07:40.664]        // =>  TRUE
[22:07:40.664]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:40.664]        // if-block "isSWJ"
[22:07:40.664]          // =>  TRUE
[22:07:40.664]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:40.664]          // if-block "hasDormant"
[22:07:40.664]            // =>  FALSE
[22:07:40.664]          // skip if-block "hasDormant"
[22:07:40.664]        </control>
[22:07:40.664]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:40.664]          // if-block "!hasDormant"
[22:07:40.664]            // =>  TRUE
[22:07:40.664]          <block atomic="false" info="">
[22:07:40.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:40.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:40.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:40.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:40.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:40.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:40.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:40.672]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:40.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:40.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:40.673]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:40.677]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:40.677]          </block>
[22:07:40.677]          // end if-block "!hasDormant"
[22:07:40.677]        </control>
[22:07:40.677]        // end if-block "isSWJ"
[22:07:40.678]      </control>
[22:07:40.678]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:40.678]        // if-block "!isSWJ"
[22:07:40.678]          // =>  FALSE
[22:07:40.678]        // skip if-block "!isSWJ"
[22:07:40.678]      </control>
[22:07:40.678]      <block atomic="false" info="">
[22:07:40.678]        ReadDP(0x0);
[22:07:40.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:40.684]      </block>
[22:07:40.684]      // end if-block "protType == 2"
[22:07:40.684]    </control>
[22:07:40.684]  </sequence>
[22:07:40.684]  
[22:07:40.686]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:40.686]  
[22:07:40.686]  <debugvars>
[22:07:40.686]    // Pre-defined
[22:07:40.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:40.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:40.686]    __dp=0x00000000
[22:07:40.686]    __ap=0x00000000
[22:07:40.687]    __traceout=0x00000000      (Trace Disabled)
[22:07:40.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:40.687]    __FlashAddr=0x00000000
[22:07:40.688]    __FlashLen=0x00000000
[22:07:40.688]    __FlashArg=0x00000000
[22:07:40.688]    __FlashOp=0x00000000
[22:07:40.688]    __Result=0x00000000
[22:07:40.688]  </debugvars>
[22:07:40.688]  
[22:07:40.689]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:40.689]    <block atomic="false" info="">
[22:07:40.689]      __var SW_DP_ABORT       = 0x0;
[22:07:40.689]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:40.689]      __var DP_CTRL_STAT      = 0x4;
[22:07:40.689]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:40.689]      __var DP_SELECT         = 0x8;
[22:07:40.689]        // -> [DP_SELECT <= 0x00000008]
[22:07:40.689]      __var powered_down      = 0;
[22:07:40.689]        // -> [powered_down <= 0x00000000]
[22:07:40.689]      WriteDP(DP_SELECT, 0x00000000);
[22:07:40.691]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:40.691]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:07:40.696]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:07:40.696]        // -> [powered_down <= 0x00000001]
[22:07:40.696]    </block>
[22:07:40.697]    <control if="powered_down" while="" timeout="0" info="">
[22:07:40.697]      // if-block "powered_down"
[22:07:40.697]        // =>  TRUE
[22:07:40.697]      <block atomic="false" info="">
[22:07:40.697]        Message(0, "Debug/System power-up request sent");
[22:07:40.698]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:07:40.700]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:07:40.700]      </block>
[22:07:40.700]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:07:40.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:07:40.702]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:07:40.702]        // while-condition  =>  FALSE
[22:07:40.702]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:07:40.702]      </control>
[22:07:40.702]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:07:40.702]        // if-block "(__protocol & 0xFFFF) == 1"
[22:07:40.702]          // =>  FALSE
[22:07:40.702]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:07:40.702]      </control>
[22:07:40.702]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:07:40.702]        // if-block "(__protocol & 0xFFFF) == 2"
[22:07:40.702]          // =>  TRUE
[22:07:40.702]        <block atomic="false" info="">
[22:07:40.702]          Message(0, "executing SWD power up");
[22:07:40.704]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:07:40.710]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:07:40.710]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:07:40.711]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:07:40.711]        </block>
[22:07:40.711]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:07:40.711]      </control>
[22:07:40.711]      // end if-block "powered_down"
[22:07:40.711]    </control>
[22:07:40.711]    <block atomic="false" info="">
[22:07:40.711]      __var DEBUG_PORT_VAL    = 0;
[22:07:40.711]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:07:40.711]      __var ACCESS_POINT_VAL  = 0;
[22:07:40.711]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:07:40.711]      __ap = 1; 
[22:07:40.713]        // -> [__ap <= 0x00000001]
[22:07:40.713]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:07:40.717]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:07:40.717]      __ap = 4;
[22:07:40.717]        // -> [__ap <= 0x00000004]
[22:07:40.717]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:40.720]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:07:40.720]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:07:40.720]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:40.720]    </block>
[22:07:40.720]    <block atomic="false" info="">
[22:07:40.720]      __var nReset = 0x80;
[22:07:40.720]        // -> [nReset <= 0x00000080]
[22:07:40.720]      __var canReadPins = 0;
[22:07:40.720]        // -> [canReadPins <= 0x00000000]
[22:07:40.720]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:07:40.726]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:07:40.726]        // -> [canReadPins <= 0x00000001]
[22:07:40.726]    </block>
[22:07:40.726]    <control if="" while="1" timeout="200" info="">
[22:07:40.726]      // while "1"  (timeout="200")
[22:07:40.726]      // while-condition  =>  TRUE
[22:07:40.726]      // while "1"  (timeout="200")
[22:07:40.727]      // while-condition  =>  TRUE
[22:07:40.727]      // while "1"  (timeout="200")
[22:07:40.727]      // while-condition  =>  TRUE
[22:07:40.727]      // while "1"  (timeout="200")
[22:07:40.727]      // while-condition  =>  TRUE
[22:07:40.727]      // while "1"  (timeout="200")
[22:07:40.727]      // while-condition  =>  TRUE
[22:07:40.727]      // while "1"  (timeout="200")
[22:07:40.727]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.728]      // while-condition  =>  TRUE
[22:07:40.728]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.732]      // while "1"  (timeout="200")
[22:07:40.732]      // while-condition  =>  TRUE
[22:07:40.736]      // while "1"  (timeout="200")
[22:07:40.736]      // while-condition  =>  TRUE
[22:07:40.736]      // while "1"  (timeout="200")
[22:07:40.736]      // while-condition  =>  TRUE
[22:07:40.736]      // while "1"  (timeout="200")
[22:07:40.737]      // while-condition  =>  TRUE
[22:07:40.737]      // while "1"  (timeout="200")
[22:07:40.737]      // while  =>  TIMEOUT
[22:07:40.737]      // end while "1"
[22:07:40.737]    </control>
[22:07:40.737]    <control if="canReadPins" while="" timeout="0" info="">
[22:07:40.737]      // if-block "canReadPins"
[22:07:40.738]        // =>  TRUE
[22:07:40.738]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:07:40.738]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:07:40.738]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:07:40.740]        // while-condition  =>  FALSE
[22:07:40.740]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:07:40.741]      </control>
[22:07:40.741]      // end if-block "canReadPins"
[22:07:40.741]    </control>
[22:07:40.741]    <control if="!canReadPins" while="" timeout="0" info="">
[22:07:40.741]      // if-block "!canReadPins"
[22:07:40.741]        // =>  FALSE
[22:07:40.741]      // skip if-block "!canReadPins"
[22:07:40.741]    </control>
[22:07:40.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:07:40.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:40.741]        // =>  TRUE
[22:07:40.741]      <block atomic="false" info="">
[22:07:40.741]        WriteAP(0x00, 0x190008);
[22:07:40.746]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:40.746]        WriteAP(0xF0, 0x01);
[22:07:40.749]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:40.749]      </block>
[22:07:40.749]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:40.749]    </control>
[22:07:40.749]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:07:40.749]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:40.749]        // =>  FALSE
[22:07:40.749]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:40.749]    </control>
[22:07:40.749]    <block atomic="false" info="">
[22:07:40.749]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:40.770]  
[22:07:40.770]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[22:07:40.770]  
[22:07:40.774]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:07:40.774]    </block>
[22:07:40.774]  </sequence>
[22:07:40.774]  
[22:07:52.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:52.279]  
[22:07:52.287]  <debugvars>
[22:07:52.287]    // Pre-defined
[22:07:52.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:52.287]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:07:52.287]    __dp=0x00000000
[22:07:52.287]    __ap=0x00000000
[22:07:52.287]    __traceout=0x00000000      (Trace Disabled)
[22:07:52.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:52.287]    __FlashAddr=0x00000000
[22:07:52.287]    __FlashLen=0x00000000
[22:07:52.287]    __FlashArg=0x00000000
[22:07:52.287]    __FlashOp=0x00000000
[22:07:52.287]    __Result=0x00000000
[22:07:52.287]  </debugvars>
[22:07:52.287]  
[22:07:52.287]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:52.287]    <block atomic="false" info="">
[22:07:52.287]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:52.290]        // -> [isSWJ <= 0x00000001]
[22:07:52.290]      __var hasDormant = __protocol & 0x00020000;
[22:07:52.290]        // -> [hasDormant <= 0x00000000]
[22:07:52.290]      __var protType   = __protocol & 0x0000FFFF;
[22:07:52.290]        // -> [protType <= 0x00000002]
[22:07:52.290]    </block>
[22:07:52.290]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:52.291]      // if-block "protType == 1"
[22:07:52.291]        // =>  FALSE
[22:07:52.291]      // skip if-block "protType == 1"
[22:07:52.291]    </control>
[22:07:52.291]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:52.291]      // if-block "protType == 2"
[22:07:52.291]        // =>  TRUE
[22:07:52.291]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:52.291]        // if-block "isSWJ"
[22:07:52.291]          // =>  TRUE
[22:07:52.291]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:52.291]          // if-block "hasDormant"
[22:07:52.291]            // =>  FALSE
[22:07:52.291]          // skip if-block "hasDormant"
[22:07:52.291]        </control>
[22:07:52.291]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:52.291]          // if-block "!hasDormant"
[22:07:52.291]            // =>  TRUE
[22:07:52.291]          <block atomic="false" info="">
[22:07:52.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:52.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:52.291]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:52.295]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:52.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:52.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:52.297]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:52.299]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:52.299]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:52.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:52.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:52.301]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:52.301]          </block>
[22:07:52.301]          // end if-block "!hasDormant"
[22:07:52.301]        </control>
[22:07:52.302]        // end if-block "isSWJ"
[22:07:52.302]      </control>
[22:07:52.302]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:52.302]        // if-block "!isSWJ"
[22:07:52.302]          // =>  FALSE
[22:07:52.302]        // skip if-block "!isSWJ"
[22:07:52.302]      </control>
[22:07:52.302]      <block atomic="false" info="">
[22:07:52.302]        ReadDP(0x0);
[22:07:52.311]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:52.311]      </block>
[22:07:52.311]      // end if-block "protType == 2"
[22:07:52.311]    </control>
[22:07:52.311]  </sequence>
[22:07:52.311]  
[22:07:56.291]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:56.291]  
[22:07:56.301]  <debugvars>
[22:07:56.301]    // Pre-defined
[22:07:56.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:56.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:56.301]    __dp=0x00000000
[22:07:56.301]    __ap=0x00000000
[22:07:56.301]    __traceout=0x00000000      (Trace Disabled)
[22:07:56.301]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:56.301]    __FlashAddr=0x00000000
[22:07:56.302]    __FlashLen=0x00000000
[22:07:56.302]    __FlashArg=0x00000000
[22:07:56.302]    __FlashOp=0x00000000
[22:07:56.302]    __Result=0x00000000
[22:07:56.302]  </debugvars>
[22:07:56.302]  
[22:07:56.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:56.302]    <block atomic="false" info="">
[22:07:56.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:56.302]        // -> [isSWJ <= 0x00000001]
[22:07:56.302]      __var hasDormant = __protocol & 0x00020000;
[22:07:56.302]        // -> [hasDormant <= 0x00000000]
[22:07:56.302]      __var protType   = __protocol & 0x0000FFFF;
[22:07:56.302]        // -> [protType <= 0x00000002]
[22:07:56.302]    </block>
[22:07:56.303]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:56.303]      // if-block "protType == 1"
[22:07:56.303]        // =>  FALSE
[22:07:56.303]      // skip if-block "protType == 1"
[22:07:56.303]    </control>
[22:07:56.303]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:56.303]      // if-block "protType == 2"
[22:07:56.303]        // =>  TRUE
[22:07:56.303]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:56.303]        // if-block "isSWJ"
[22:07:56.303]          // =>  TRUE
[22:07:56.303]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:56.305]          // if-block "hasDormant"
[22:07:56.305]            // =>  FALSE
[22:07:56.305]          // skip if-block "hasDormant"
[22:07:56.305]        </control>
[22:07:56.305]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:56.305]          // if-block "!hasDormant"
[22:07:56.305]            // =>  TRUE
[22:07:56.305]          <block atomic="false" info="">
[22:07:56.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:56.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:56.307]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:56.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:56.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:56.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:56.310]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:56.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:56.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:56.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:56.313]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:56.315]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:56.315]          </block>
[22:07:56.315]          // end if-block "!hasDormant"
[22:07:56.315]        </control>
[22:07:56.316]        // end if-block "isSWJ"
[22:07:56.316]      </control>
[22:07:56.316]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:56.316]        // if-block "!isSWJ"
[22:07:56.316]          // =>  FALSE
[22:07:56.316]        // skip if-block "!isSWJ"
[22:07:56.316]      </control>
[22:07:56.316]      <block atomic="false" info="">
[22:07:56.316]        ReadDP(0x0);
[22:07:56.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:56.317]      </block>
[22:07:56.317]      // end if-block "protType == 2"
[22:07:56.318]    </control>
[22:07:56.318]  </sequence>
[22:07:56.318]  
[22:07:56.321]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:56.321]  
[22:07:56.321]  <debugvars>
[22:07:56.321]    // Pre-defined
[22:07:56.321]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:56.321]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:56.321]    __dp=0x00000000
[22:07:56.321]    __ap=0x00000000
[22:07:56.321]    __traceout=0x00000000      (Trace Disabled)
[22:07:56.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:56.321]    __FlashAddr=0x00000000
[22:07:56.321]    __FlashLen=0x00000000
[22:07:56.321]    __FlashArg=0x00000000
[22:07:56.321]    __FlashOp=0x00000000
[22:07:56.321]    __Result=0x00000000
[22:07:56.321]  </debugvars>
[22:07:56.323]  
[22:07:56.323]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:56.323]    <block atomic="false" info="">
[22:07:56.323]      __var SW_DP_ABORT       = 0x0;
[22:07:56.323]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:56.323]      __var DP_CTRL_STAT      = 0x4;
[22:07:56.323]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:56.323]      __var DP_SELECT         = 0x8;
[22:07:56.323]        // -> [DP_SELECT <= 0x00000008]
[22:07:56.323]      __var powered_down      = 0;
[22:07:56.323]        // -> [powered_down <= 0x00000000]
[22:07:56.324]      WriteDP(DP_SELECT, 0x00000000);
[22:07:56.347]  
[22:07:56.347]  !!! E310 : Debug access failed - cannot write value 0x00000000 to DP register 0x08
[22:07:56.347]  
[22:07:56.348]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:56.348]    </block>
[22:07:56.349]  </sequence>
[22:07:56.349]  
[22:08:14.514]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:08:14.514]  
[22:08:14.514]  <debugvars>
[22:08:14.514]    // Pre-defined
[22:08:14.514]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:14.514]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:14.514]    __dp=0x00000000
[22:08:14.514]    __ap=0x00000000
[22:08:14.514]    __traceout=0x00000000      (Trace Disabled)
[22:08:14.514]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:14.514]    __FlashAddr=0x00000000
[22:08:14.516]    __FlashLen=0x00000000
[22:08:14.516]    __FlashArg=0x00000000
[22:08:14.516]    __FlashOp=0x00000000
[22:08:14.516]    __Result=0x00000000
[22:08:14.516]  </debugvars>
[22:08:14.516]  
[22:08:14.516]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:08:14.516]    <block atomic="false" info="">
[22:08:14.517]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:08:14.517]        // -> [isSWJ <= 0x00000001]
[22:08:14.517]      __var hasDormant = __protocol & 0x00020000;
[22:08:14.517]        // -> [hasDormant <= 0x00000000]
[22:08:14.517]      __var protType   = __protocol & 0x0000FFFF;
[22:08:14.517]        // -> [protType <= 0x00000002]
[22:08:14.517]    </block>
[22:08:14.517]    <control if="protType == 1" while="" timeout="0" info="">
[22:08:14.517]      // if-block "protType == 1"
[22:08:14.517]        // =>  FALSE
[22:08:14.517]      // skip if-block "protType == 1"
[22:08:14.518]    </control>
[22:08:14.518]    <control if="protType == 2" while="" timeout="0" info="">
[22:08:14.518]      // if-block "protType == 2"
[22:08:14.518]        // =>  TRUE
[22:08:14.518]      <control if="isSWJ" while="" timeout="0" info="">
[22:08:14.518]        // if-block "isSWJ"
[22:08:14.518]          // =>  TRUE
[22:08:14.518]        <control if="hasDormant" while="" timeout="0" info="">
[22:08:14.518]          // if-block "hasDormant"
[22:08:14.518]            // =>  FALSE
[22:08:14.518]          // skip if-block "hasDormant"
[22:08:14.518]        </control>
[22:08:14.518]        <control if="!hasDormant" while="" timeout="0" info="">
[22:08:14.518]          // if-block "!hasDormant"
[22:08:14.518]            // =>  TRUE
[22:08:14.518]          <block atomic="false" info="">
[22:08:14.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:08:14.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:14.522]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:08:14.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:08:14.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:08:14.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:14.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:08:14.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:08:14.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:08:14.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:14.531]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:08:14.539]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:08:14.539]          </block>
[22:08:14.539]          // end if-block "!hasDormant"
[22:08:14.539]        </control>
[22:08:14.539]        // end if-block "isSWJ"
[22:08:14.539]      </control>
[22:08:14.539]      <control if="!isSWJ" while="" timeout="0" info="">
[22:08:14.539]        // if-block "!isSWJ"
[22:08:14.539]          // =>  FALSE
[22:08:14.539]        // skip if-block "!isSWJ"
[22:08:14.539]      </control>
[22:08:14.539]      <block atomic="false" info="">
[22:08:14.539]        ReadDP(0x0);
[22:08:14.539]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:08:14.539]      </block>
[22:08:14.539]      // end if-block "protType == 2"
[22:08:14.539]    </control>
[22:08:14.539]  </sequence>
[22:08:14.539]  
[22:08:14.543]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:08:14.543]  
[22:08:14.543]  <debugvars>
[22:08:14.543]    // Pre-defined
[22:08:14.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:14.543]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:14.543]    __dp=0x00000000
[22:08:14.543]    __ap=0x00000000
[22:08:14.546]    __traceout=0x00000000      (Trace Disabled)
[22:08:14.546]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:14.546]    __FlashAddr=0x00000000
[22:08:14.546]    __FlashLen=0x00000000
[22:08:14.546]    __FlashArg=0x00000000
[22:08:14.546]    __FlashOp=0x00000000
[22:08:14.546]    __Result=0x00000000
[22:08:14.546]  </debugvars>
[22:08:14.547]  
[22:08:14.547]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:08:14.547]    <block atomic="false" info="">
[22:08:14.547]      __var SW_DP_ABORT       = 0x0;
[22:08:14.547]        // -> [SW_DP_ABORT <= 0x00000000]
[22:08:14.547]      __var DP_CTRL_STAT      = 0x4;
[22:08:14.547]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:08:14.547]      __var DP_SELECT         = 0x8;
[22:08:14.547]        // -> [DP_SELECT <= 0x00000008]
[22:08:14.547]      __var powered_down      = 0;
[22:08:14.547]        // -> [powered_down <= 0x00000000]
[22:08:14.547]      WriteDP(DP_SELECT, 0x00000000);
[22:08:14.550]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:08:14.550]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:08:14.550]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:08:14.550]        // -> [powered_down <= 0x00000001]
[22:08:14.550]    </block>
[22:08:14.550]    <control if="powered_down" while="" timeout="0" info="">
[22:08:14.550]      // if-block "powered_down"
[22:08:14.550]        // =>  TRUE
[22:08:14.550]      <block atomic="false" info="">
[22:08:14.550]        Message(0, "Debug/System power-up request sent");
[22:08:14.554]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:08:14.554]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:08:14.556]      </block>
[22:08:14.556]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:08:14.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:08:14.557]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:08:14.557]        // while-condition  =>  FALSE
[22:08:14.557]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:08:14.557]      </control>
[22:08:14.558]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:08:14.559]        // if-block "(__protocol & 0xFFFF) == 1"
[22:08:14.559]          // =>  FALSE
[22:08:14.559]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:08:14.559]      </control>
[22:08:14.559]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:08:14.559]        // if-block "(__protocol & 0xFFFF) == 2"
[22:08:14.559]          // =>  TRUE
[22:08:14.559]        <block atomic="false" info="">
[22:08:14.559]          Message(0, "executing SWD power up");
[22:08:14.559]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:08:14.562]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:08:14.562]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:08:14.562]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:08:14.562]        </block>
[22:08:14.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:08:14.562]      </control>
[22:08:14.562]      // end if-block "powered_down"
[22:08:14.562]    </control>
[22:08:14.562]    <block atomic="false" info="">
[22:08:14.562]      __var DEBUG_PORT_VAL    = 0;
[22:08:14.562]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:08:14.562]      __var ACCESS_POINT_VAL  = 0;
[22:08:14.562]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:08:14.562]      __ap = 1; 
[22:08:14.566]        // -> [__ap <= 0x00000001]
[22:08:14.566]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:08:14.571]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:08:14.571]      __ap = 4;
[22:08:14.571]        // -> [__ap <= 0x00000004]
[22:08:14.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:14.575]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:08:14.575]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:08:14.575]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:14.577]    </block>
[22:08:14.577]    <block atomic="false" info="">
[22:08:14.577]      __var nReset = 0x80;
[22:08:14.577]        // -> [nReset <= 0x00000080]
[22:08:14.577]      __var canReadPins = 0;
[22:08:14.577]        // -> [canReadPins <= 0x00000000]
[22:08:14.577]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:08:14.578]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:08:14.578]        // -> [canReadPins <= 0x00000001]
[22:08:14.578]    </block>
[22:08:14.578]    <control if="" while="1" timeout="200" info="">
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.578]      // while-condition  =>  TRUE
[22:08:14.578]      // while "1"  (timeout="200")
[22:08:14.582]      // while-condition  =>  TRUE
[22:08:14.582]      // while "1"  (timeout="200")
[22:08:14.582]      // while  =>  TIMEOUT
[22:08:14.582]      // end while "1"
[22:08:14.582]    </control>
[22:08:14.582]    <control if="canReadPins" while="" timeout="0" info="">
[22:08:14.582]      // if-block "canReadPins"
[22:08:14.582]        // =>  TRUE
[22:08:14.582]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:08:14.582]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:08:14.588]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:08:14.588]        // while-condition  =>  FALSE
[22:08:14.588]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:08:14.588]      </control>
[22:08:14.588]      // end if-block "canReadPins"
[22:08:14.588]    </control>
[22:08:14.588]    <control if="!canReadPins" while="" timeout="0" info="">
[22:08:14.588]      // if-block "!canReadPins"
[22:08:14.588]        // =>  FALSE
[22:08:14.588]      // skip if-block "!canReadPins"
[22:08:14.588]    </control>
[22:08:14.588]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:08:14.591]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:14.591]        // =>  TRUE
[22:08:14.591]      <block atomic="false" info="">
[22:08:14.591]        WriteAP(0x00, 0x190008);
[22:08:14.595]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:14.595]        WriteAP(0xF0, 0x01);
[22:08:14.597]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:14.597]      </block>
[22:08:14.598]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:14.598]    </control>
[22:08:14.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:08:14.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:14.598]        // =>  FALSE
[22:08:14.598]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:14.598]    </control>
[22:08:14.598]    <block atomic="false" info="">
[22:08:14.598]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:14.607]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:08:14.607]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:08:14.607]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:14.607]      __ap = 0; //lets make sure we reset the access point selection
[22:08:14.607]        // -> [__ap <= 0x00000000]
[22:08:14.607]    </block>
[22:08:14.607]  </sequence>
[22:08:14.610]  
[22:08:14.638]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:08:14.638]  
[22:08:14.638]  <debugvars>
[22:08:14.638]    // Pre-defined
[22:08:14.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:14.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:14.638]    __dp=0x00000000
[22:08:14.638]    __ap=0x00000000
[22:08:14.638]    __traceout=0x00000000      (Trace Disabled)
[22:08:14.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:14.638]    __FlashAddr=0x00000000
[22:08:14.638]    __FlashLen=0x00000000
[22:08:14.638]    __FlashArg=0x00000000
[22:08:14.638]    __FlashOp=0x00000000
[22:08:14.638]    __Result=0x00000000
[22:08:14.638]  </debugvars>
[22:08:14.638]  
[22:08:14.638]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:08:14.638]    <block atomic="false" info="">
[22:08:14.638]      __var deviceID = 0;
[22:08:14.638]        // -> [deviceID <= 0x00000000]
[22:08:14.638]      __var version = 0;
[22:08:14.638]        // -> [version <= 0x00000000]
[22:08:14.638]      __var partNum = 0;
[22:08:14.638]        // -> [partNum <= 0x00000000]
[22:08:14.642]      __var manuf = 0;
[22:08:14.642]        // -> [manuf <= 0x00000000]
[22:08:14.642]      __var isMSPM0G1X0X_G3X0X = 0;
[22:08:14.642]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:08:14.642]      __var isProduction = 0;
[22:08:14.642]        // -> [isProduction <= 0x00000000]
[22:08:14.642]      __var continueId = 0;
[22:08:14.642]        // -> [continueId <= 0x00000000]
[22:08:14.642]      deviceID =   Read32(0x41C40004);
[22:08:14.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:08:14.647]        // -> [deviceID <= 0x2BB8802F]
[22:08:14.647]      version = deviceID >> 28;
[22:08:14.647]        // -> [version <= 0x00000002]
[22:08:14.647]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:08:14.647]        // -> [partNum <= 0x0000BB88]
[22:08:14.647]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:08:14.647]        // -> [manuf <= 0x00000017]
[22:08:14.647]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:08:14.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:08:14.647]      isProduction = (version > 0);
[22:08:14.647]        // -> [isProduction <= 0x00000001]
[22:08:14.647]    </block>
[22:08:14.647]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:08:14.647]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:08:14.647]        // =>  FALSE
[22:08:14.647]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:08:14.647]    </control>
[22:08:14.647]    <control if="continueId == 4" while="" timeout="0" info="">
[22:08:14.651]      // if-block "continueId == 4"
[22:08:14.651]        // =>  FALSE
[22:08:14.651]      // skip if-block "continueId == 4"
[22:08:14.651]    </control>
[22:08:14.651]    <control if="!isProduction" while="" timeout="0" info="">
[22:08:14.651]      // if-block "!isProduction"
[22:08:14.651]        // =>  FALSE
[22:08:14.651]      // skip if-block "!isProduction"
[22:08:14.651]    </control>
[22:08:14.651]  </sequence>
[22:08:14.651]  
[22:13:44.771]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:13:44.771]  
[22:13:44.771]  <debugvars>
[22:13:44.774]    // Pre-defined
[22:13:44.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:44.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:44.774]    __dp=0x00000000
[22:13:44.774]    __ap=0x00000000
[22:13:44.774]    __traceout=0x00000000      (Trace Disabled)
[22:13:44.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:44.774]    __FlashAddr=0x00000000
[22:13:44.774]    __FlashLen=0x00000000
[22:13:44.774]    __FlashArg=0x00000000
[22:13:44.774]    __FlashOp=0x00000000
[22:13:44.774]    __Result=0x00000000
[22:13:44.774]  </debugvars>
[22:13:44.774]  
[22:13:44.774]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:13:44.774]    <block atomic="false" info="">
[22:13:44.775]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:13:44.775]        // -> [isSWJ <= 0x00000001]
[22:13:44.775]      __var hasDormant = __protocol & 0x00020000;
[22:13:44.775]        // -> [hasDormant <= 0x00000000]
[22:13:44.775]      __var protType   = __protocol & 0x0000FFFF;
[22:13:44.775]        // -> [protType <= 0x00000002]
[22:13:44.775]    </block>
[22:13:44.775]    <control if="protType == 1" while="" timeout="0" info="">
[22:13:44.775]      // if-block "protType == 1"
[22:13:44.775]        // =>  FALSE
[22:13:44.775]      // skip if-block "protType == 1"
[22:13:44.775]    </control>
[22:13:44.775]    <control if="protType == 2" while="" timeout="0" info="">
[22:13:44.775]      // if-block "protType == 2"
[22:13:44.775]        // =>  TRUE
[22:13:44.777]      <control if="isSWJ" while="" timeout="0" info="">
[22:13:44.777]        // if-block "isSWJ"
[22:13:44.777]          // =>  TRUE
[22:13:44.777]        <control if="hasDormant" while="" timeout="0" info="">
[22:13:44.777]          // if-block "hasDormant"
[22:13:44.777]            // =>  FALSE
[22:13:44.777]          // skip if-block "hasDormant"
[22:13:44.777]        </control>
[22:13:44.777]        <control if="!hasDormant" while="" timeout="0" info="">
[22:13:44.777]          // if-block "!hasDormant"
[22:13:44.777]            // =>  TRUE
[22:13:44.778]          <block atomic="false" info="">
[22:13:44.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:13:44.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.783]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:13:44.783]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:13:44.783]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:13:44.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.783]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:13:44.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:13:44.788]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:13:44.790]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.790]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:13:44.790]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:13:44.790]          </block>
[22:13:44.790]          // end if-block "!hasDormant"
[22:13:44.790]        </control>
[22:13:44.790]        // end if-block "isSWJ"
[22:13:44.790]      </control>
[22:13:44.790]      <control if="!isSWJ" while="" timeout="0" info="">
[22:13:44.790]        // if-block "!isSWJ"
[22:13:44.790]          // =>  FALSE
[22:13:44.792]        // skip if-block "!isSWJ"
[22:13:44.792]      </control>
[22:13:44.792]      <block atomic="false" info="">
[22:13:44.792]        ReadDP(0x0);
[22:13:44.793]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:13:44.793]      </block>
[22:13:44.793]      // end if-block "protType == 2"
[22:13:44.793]    </control>
[22:13:44.793]  </sequence>
[22:13:44.793]  
[22:13:44.798]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:13:44.798]  
[22:13:44.798]  <debugvars>
[22:13:44.798]    // Pre-defined
[22:13:44.798]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:44.798]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:44.798]    __dp=0x00000000
[22:13:44.798]    __ap=0x00000000
[22:13:44.798]    __traceout=0x00000000      (Trace Disabled)
[22:13:44.798]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:44.798]    __FlashAddr=0x00000000
[22:13:44.798]    __FlashLen=0x00000000
[22:13:44.798]    __FlashArg=0x00000000
[22:13:44.799]    __FlashOp=0x00000000
[22:13:44.799]    __Result=0x00000000
[22:13:44.799]  </debugvars>
[22:13:44.799]  
[22:13:44.799]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:13:44.799]    <block atomic="false" info="">
[22:13:44.799]      __var SW_DP_ABORT       = 0x0;
[22:13:44.799]        // -> [SW_DP_ABORT <= 0x00000000]
[22:13:44.799]      __var DP_CTRL_STAT      = 0x4;
[22:13:44.799]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:13:44.799]      __var DP_SELECT         = 0x8;
[22:13:44.800]        // -> [DP_SELECT <= 0x00000008]
[22:13:44.800]      __var powered_down      = 0;
[22:13:44.800]        // -> [powered_down <= 0x00000000]
[22:13:44.800]      WriteDP(DP_SELECT, 0x00000000);
[22:13:44.801]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:13:44.801]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:13:44.804]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:13:44.804]        // -> [powered_down <= 0x00000001]
[22:13:44.804]    </block>
[22:13:44.804]    <control if="powered_down" while="" timeout="0" info="">
[22:13:44.804]      // if-block "powered_down"
[22:13:44.804]        // =>  TRUE
[22:13:44.804]      <block atomic="false" info="">
[22:13:44.804]        Message(0, "Debug/System power-up request sent");
[22:13:44.806]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:13:44.808]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:13:44.808]      </block>
[22:13:44.808]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:13:44.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.809]        // while-condition  =>  TRUE
[22:13:44.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.812]        // while-condition  =>  TRUE
[22:13:44.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.812]        // while-condition  =>  TRUE
[22:13:44.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.812]        // while-condition  =>  TRUE
[22:13:44.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.818]        // while-condition  =>  TRUE
[22:13:44.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.820]        // while-condition  =>  TRUE
[22:13:44.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.820]        // while-condition  =>  TRUE
[22:13:44.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.824]        // while-condition  =>  TRUE
[22:13:44.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.828]        // while-condition  =>  TRUE
[22:13:44.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.828]        // while-condition  =>  TRUE
[22:13:44.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.828]        // while-condition  =>  TRUE
[22:13:44.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.836]        // while-condition  =>  TRUE
[22:13:44.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.838]        // while-condition  =>  TRUE
[22:13:44.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.839]        // while-condition  =>  TRUE
[22:13:44.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.841]        // while-condition  =>  TRUE
[22:13:44.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.844]        // while-condition  =>  TRUE
[22:13:44.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.851]        // while-condition  =>  TRUE
[22:13:44.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.856]        // while-condition  =>  TRUE
[22:13:44.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.859]        // while-condition  =>  TRUE
[22:13:44.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.859]        // while-condition  =>  TRUE
[22:13:44.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.863]        // while-condition  =>  TRUE
[22:13:44.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.866]        // while-condition  =>  TRUE
[22:13:44.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.867]        // while-condition  =>  TRUE
[22:13:44.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.871]        // while-condition  =>  TRUE
[22:13:44.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.879]        // while-condition  =>  TRUE
[22:13:44.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.879]        // while-condition  =>  TRUE
[22:13:44.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.884]        // while-condition  =>  TRUE
[22:13:44.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.886]        // while-condition  =>  TRUE
[22:13:44.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.888]        // while-condition  =>  TRUE
[22:13:44.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.889]        // while-condition  =>  TRUE
[22:13:44.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.893]        // while-condition  =>  TRUE
[22:13:44.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.896]        // while-condition  =>  TRUE
[22:13:44.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.902]        // while-condition  =>  TRUE
[22:13:44.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.904]        // while-condition  =>  TRUE
[22:13:44.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.907]        // while-condition  =>  TRUE
[22:13:44.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.909]        // while-condition  =>  TRUE
[22:13:44.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.911]        // while-condition  =>  TRUE
[22:13:44.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.912]        // while-condition  =>  TRUE
[22:13:44.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.912]        // while-condition  =>  TRUE
[22:13:44.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.916]        // while-condition  =>  TRUE
[22:13:44.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.918]        // while-condition  =>  TRUE
[22:13:44.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.921]        // while-condition  =>  TRUE
[22:13:44.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.921]        // while-condition  =>  TRUE
[22:13:44.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.925]        // while-condition  =>  TRUE
[22:13:44.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.926]        // while-condition  =>  TRUE
[22:13:44.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.928]        // while-condition  =>  TRUE
[22:13:44.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.930]        // while-condition  =>  TRUE
[22:13:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.930]        // while-condition  =>  TRUE
[22:13:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.937]        // while-condition  =>  TRUE
[22:13:44.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.940]        // while-condition  =>  TRUE
[22:13:44.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.942]        // while-condition  =>  TRUE
[22:13:44.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.942]        // while-condition  =>  TRUE
[22:13:44.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.945]        // while-condition  =>  TRUE
[22:13:44.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.948]        // while-condition  =>  TRUE
[22:13:44.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.950]        // while-condition  =>  TRUE
[22:13:44.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.950]        // while-condition  =>  TRUE
[22:13:44.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.954]        // while-condition  =>  TRUE
[22:13:44.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.958]        // while-condition  =>  TRUE
[22:13:44.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.961]        // while-condition  =>  TRUE
[22:13:44.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.961]        // while-condition  =>  TRUE
[22:13:44.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.965]        // while-condition  =>  TRUE
[22:13:44.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.968]        // while-condition  =>  TRUE
[22:13:44.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.970]        // while-condition  =>  TRUE
[22:13:44.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.978]        // while-condition  =>  TRUE
[22:13:44.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.982]        // while-condition  =>  TRUE
[22:13:44.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.983]        // while-condition  =>  TRUE
[22:13:44.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.987]        // while-condition  =>  TRUE
[22:13:44.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.989]        // while-condition  =>  TRUE
[22:13:44.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.990]        // while-condition  =>  TRUE
[22:13:44.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.990]        // while-condition  =>  TRUE
[22:13:44.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.995]        // while-condition  =>  TRUE
[22:13:44.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.997]        // while-condition  =>  TRUE
[22:13:44.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.998]        // while-condition  =>  TRUE
[22:13:44.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:44.998]        // while-condition  =>  TRUE
[22:13:44.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.003]        // while-condition  =>  TRUE
[22:13:45.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.008]        // while-condition  =>  TRUE
[22:13:45.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.009]        // while-condition  =>  TRUE
[22:13:45.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.012]        // while-condition  =>  TRUE
[22:13:45.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.014]        // while-condition  =>  TRUE
[22:13:45.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.017]        // while-condition  =>  TRUE
[22:13:45.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.019]        // while-condition  =>  TRUE
[22:13:45.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.021]        // while-condition  =>  TRUE
[22:13:45.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.022]        // while-condition  =>  TRUE
[22:13:45.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.027]        // while-condition  =>  TRUE
[22:13:45.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.029]        // while-condition  =>  TRUE
[22:13:45.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.036]        // while-condition  =>  TRUE
[22:13:45.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.038]        // while-condition  =>  TRUE
[22:13:45.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.041]        // while-condition  =>  TRUE
[22:13:45.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.042]        // while-condition  =>  TRUE
[22:13:45.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.045]        // while-condition  =>  TRUE
[22:13:45.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.049]        // while-condition  =>  TRUE
[22:13:45.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.053]        // while-condition  =>  TRUE
[22:13:45.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.055]        // while-condition  =>  TRUE
[22:13:45.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.056]        // while-condition  =>  TRUE
[22:13:45.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.058]        // while-condition  =>  TRUE
[22:13:45.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.060]        // while-condition  =>  TRUE
[22:13:45.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.061]        // while-condition  =>  TRUE
[22:13:45.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.062]        // while-condition  =>  TRUE
[22:13:45.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.068]        // while-condition  =>  TRUE
[22:13:45.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.070]        // while-condition  =>  TRUE
[22:13:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.072]        // while-condition  =>  TRUE
[22:13:45.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.074]        // while-condition  =>  TRUE
[22:13:45.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.077]        // while-condition  =>  TRUE
[22:13:45.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.079]        // while-condition  =>  TRUE
[22:13:45.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.084]        // while-condition  =>  TRUE
[22:13:45.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.085]        // while-condition  =>  TRUE
[22:13:45.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.088]        // while-condition  =>  TRUE
[22:13:45.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.089]        // while-condition  =>  TRUE
[22:13:45.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.092]        // while-condition  =>  TRUE
[22:13:45.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.093]        // while-condition  =>  TRUE
[22:13:45.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.095]        // while-condition  =>  TRUE
[22:13:45.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.097]        // while-condition  =>  TRUE
[22:13:45.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.099]        // while-condition  =>  TRUE
[22:13:45.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.101]        // while-condition  =>  TRUE
[22:13:45.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.105]        // while-condition  =>  TRUE
[22:13:45.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.108]        // while-condition  =>  TRUE
[22:13:45.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.112]        // while-condition  =>  TRUE
[22:13:45.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.115]        // while-condition  =>  TRUE
[22:13:45.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.116]        // while-condition  =>  TRUE
[22:13:45.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.120]        // while-condition  =>  TRUE
[22:13:45.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.122]        // while-condition  =>  TRUE
[22:13:45.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.124]        // while-condition  =>  TRUE
[22:13:45.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.128]        // while-condition  =>  TRUE
[22:13:45.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.132]        // while-condition  =>  TRUE
[22:13:45.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.133]        // while-condition  =>  TRUE
[22:13:45.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.135]        // while-condition  =>  TRUE
[22:13:45.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.137]        // while-condition  =>  TRUE
[22:13:45.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.139]        // while-condition  =>  TRUE
[22:13:45.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.141]        // while-condition  =>  TRUE
[22:13:45.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.145]        // while-condition  =>  TRUE
[22:13:45.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.147]        // while-condition  =>  TRUE
[22:13:45.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.148]        // while-condition  =>  TRUE
[22:13:45.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.149]        // while-condition  =>  TRUE
[22:13:45.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.151]        // while-condition  =>  TRUE
[22:13:45.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.151]        // while-condition  =>  TRUE
[22:13:45.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.156]        // while-condition  =>  TRUE
[22:13:45.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.158]        // while-condition  =>  TRUE
[22:13:45.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.163]        // while-condition  =>  TRUE
[22:13:45.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.167]        // while-condition  =>  TRUE
[22:13:45.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.171]        // while-condition  =>  TRUE
[22:13:45.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.175]        // while-condition  =>  TRUE
[22:13:45.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.177]        // while-condition  =>  TRUE
[22:13:45.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.182]        // while-condition  =>  TRUE
[22:13:45.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.184]        // while-condition  =>  TRUE
[22:13:45.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.184]        // while-condition  =>  TRUE
[22:13:45.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.194]        // while-condition  =>  TRUE
[22:13:45.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.198]        // while-condition  =>  TRUE
[22:13:45.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.200]        // while-condition  =>  TRUE
[22:13:45.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.200]        // while-condition  =>  TRUE
[22:13:45.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.203]        // while-condition  =>  TRUE
[22:13:45.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.207]        // while-condition  =>  TRUE
[22:13:45.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.208]        // while-condition  =>  TRUE
[22:13:45.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.209]        // while-condition  =>  TRUE
[22:13:45.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.212]        // while-condition  =>  TRUE
[22:13:45.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.212]        // while-condition  =>  TRUE
[22:13:45.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.217]        // while-condition  =>  TRUE
[22:13:45.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.220]        // while-condition  =>  TRUE
[22:13:45.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.224]        // while-condition  =>  TRUE
[22:13:45.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.224]        // while-condition  =>  TRUE
[22:13:45.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.230]        // while-condition  =>  TRUE
[22:13:45.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.230]        // while-condition  =>  TRUE
[22:13:45.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.233]        // while-condition  =>  TRUE
[22:13:45.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.233]        // while-condition  =>  TRUE
[22:13:45.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.237]        // while-condition  =>  TRUE
[22:13:45.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.238]        // while-condition  =>  TRUE
[22:13:45.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.238]        // while-condition  =>  TRUE
[22:13:45.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.243]        // while-condition  =>  TRUE
[22:13:45.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.244]        // while-condition  =>  TRUE
[22:13:45.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.248]        // while-condition  =>  TRUE
[22:13:45.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.249]        // while-condition  =>  TRUE
[22:13:45.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.251]        // while-condition  =>  TRUE
[22:13:45.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.253]        // while-condition  =>  TRUE
[22:13:45.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.253]        // while-condition  =>  TRUE
[22:13:45.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.258]        // while-condition  =>  TRUE
[22:13:45.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.261]        // while-condition  =>  TRUE
[22:13:45.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.263]        // while-condition  =>  TRUE
[22:13:45.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.265]        // while-condition  =>  TRUE
[22:13:45.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.268]        // while-condition  =>  TRUE
[22:13:45.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.270]        // while-condition  =>  TRUE
[22:13:45.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.275]        // while-condition  =>  TRUE
[22:13:45.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.275]        // while-condition  =>  TRUE
[22:13:45.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.277]        // while-condition  =>  TRUE
[22:13:45.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.280]        // while-condition  =>  TRUE
[22:13:45.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.282]        // while-condition  =>  TRUE
[22:13:45.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.284]        // while-condition  =>  TRUE
[22:13:45.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.285]        // while-condition  =>  TRUE
[22:13:45.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.290]        // while-condition  =>  TRUE
[22:13:45.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.298]        // while-condition  =>  TRUE
[22:13:45.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.299]        // while-condition  =>  TRUE
[22:13:45.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.299]        // while-condition  =>  TRUE
[22:13:45.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.304]        // while-condition  =>  TRUE
[22:13:45.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.306]        // while-condition  =>  TRUE
[22:13:45.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.308]        // while-condition  =>  TRUE
[22:13:45.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.309]        // while-condition  =>  TRUE
[22:13:45.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.313]        // while-condition  =>  TRUE
[22:13:45.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.313]        // while-condition  =>  TRUE
[22:13:45.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.318]        // while-condition  =>  TRUE
[22:13:45.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.318]        // while-condition  =>  TRUE
[22:13:45.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.322]        // while-condition  =>  TRUE
[22:13:45.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.325]        // while-condition  =>  TRUE
[22:13:45.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.326]        // while-condition  =>  TRUE
[22:13:45.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.328]        // while-condition  =>  TRUE
[22:13:45.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.332]        // while-condition  =>  TRUE
[22:13:45.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.334]        // while-condition  =>  TRUE
[22:13:45.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.337]        // while-condition  =>  TRUE
[22:13:45.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.338]        // while-condition  =>  TRUE
[22:13:45.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.341]        // while-condition  =>  TRUE
[22:13:45.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.342]        // while-condition  =>  TRUE
[22:13:45.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.342]        // while-condition  =>  TRUE
[22:13:45.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.345]        // while-condition  =>  TRUE
[22:13:45.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.349]        // while-condition  =>  TRUE
[22:13:45.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.353]        // while-condition  =>  TRUE
[22:13:45.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.353]        // while-condition  =>  TRUE
[22:13:45.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.357]        // while-condition  =>  TRUE
[22:13:45.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.359]        // while-condition  =>  TRUE
[22:13:45.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.362]        // while-condition  =>  TRUE
[22:13:45.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.366]        // while-condition  =>  TRUE
[22:13:45.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.367]        // while-condition  =>  TRUE
[22:13:45.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.370]        // while-condition  =>  TRUE
[22:13:45.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.370]        // while-condition  =>  TRUE
[22:13:45.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.374]        // while-condition  =>  TRUE
[22:13:45.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.377]        // while-condition  =>  TRUE
[22:13:45.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.378]        // while-condition  =>  TRUE
[22:13:45.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.379]        // while-condition  =>  TRUE
[22:13:45.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.385]        // while-condition  =>  TRUE
[22:13:45.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.390]        // while-condition  =>  TRUE
[22:13:45.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.390]        // while-condition  =>  TRUE
[22:13:45.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.390]        // while-condition  =>  TRUE
[22:13:45.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.394]        // while-condition  =>  TRUE
[22:13:45.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.394]        // while-condition  =>  TRUE
[22:13:45.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.398]        // while-condition  =>  TRUE
[22:13:45.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.399]        // while-condition  =>  TRUE
[22:13:45.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.401]        // while-condition  =>  TRUE
[22:13:45.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.404]        // while-condition  =>  TRUE
[22:13:45.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.410]        // while-condition  =>  TRUE
[22:13:45.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.414]        // while-condition  =>  TRUE
[22:13:45.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.414]        // while-condition  =>  TRUE
[22:13:45.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.414]        // while-condition  =>  TRUE
[22:13:45.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.418]        // while-condition  =>  TRUE
[22:13:45.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.422]        // while-condition  =>  TRUE
[22:13:45.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.427]        // while-condition  =>  TRUE
[22:13:45.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.428]        // while-condition  =>  TRUE
[22:13:45.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.430]        // while-condition  =>  TRUE
[22:13:45.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.434]        // while-condition  =>  TRUE
[22:13:45.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.440]        // while-condition  =>  TRUE
[22:13:45.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.442]        // while-condition  =>  TRUE
[22:13:45.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.442]        // while-condition  =>  TRUE
[22:13:45.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.446]        // while-condition  =>  TRUE
[22:13:45.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.448]        // while-condition  =>  TRUE
[22:13:45.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.450]        // while-condition  =>  TRUE
[22:13:45.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.454]        // while-condition  =>  TRUE
[22:13:45.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.454]        // while-condition  =>  TRUE
[22:13:45.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.457]        // while-condition  =>  TRUE
[22:13:45.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.459]        // while-condition  =>  TRUE
[22:13:45.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.459]        // while-condition  =>  TRUE
[22:13:45.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.464]        // while-condition  =>  TRUE
[22:13:45.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.464]        // while-condition  =>  TRUE
[22:13:45.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.467]        // while-condition  =>  TRUE
[22:13:45.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.468]        // while-condition  =>  TRUE
[22:13:45.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.471]        // while-condition  =>  TRUE
[22:13:45.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.471]        // while-condition  =>  TRUE
[22:13:45.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.474]        // while-condition  =>  TRUE
[22:13:45.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.474]        // while-condition  =>  TRUE
[22:13:45.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.477]        // while-condition  =>  TRUE
[22:13:45.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.479]        // while-condition  =>  TRUE
[22:13:45.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.481]        // while-condition  =>  TRUE
[22:13:45.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.481]        // while-condition  =>  TRUE
[22:13:45.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.481]        // while-condition  =>  TRUE
[22:13:45.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.485]        // while-condition  =>  TRUE
[22:13:45.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.493]        // while-condition  =>  TRUE
[22:13:45.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.494]        // while-condition  =>  TRUE
[22:13:45.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.499]        // while-condition  =>  TRUE
[22:13:45.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.502]        // while-condition  =>  TRUE
[22:13:45.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.508]        // while-condition  =>  TRUE
[22:13:45.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.511]        // while-condition  =>  TRUE
[22:13:45.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.511]        // while-condition  =>  TRUE
[22:13:45.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.515]        // while-condition  =>  TRUE
[22:13:45.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.517]        // while-condition  =>  TRUE
[22:13:45.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.518]        // while-condition  =>  TRUE
[22:13:45.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.518]        // while-condition  =>  TRUE
[22:13:45.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.522]        // while-condition  =>  TRUE
[22:13:45.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.522]        // while-condition  =>  TRUE
[22:13:45.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.527]        // while-condition  =>  TRUE
[22:13:45.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.534]        // while-condition  =>  TRUE
[22:13:45.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.538]        // while-condition  =>  TRUE
[22:13:45.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.538]        // while-condition  =>  TRUE
[22:13:45.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.543]        // while-condition  =>  TRUE
[22:13:45.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.543]        // while-condition  =>  TRUE
[22:13:45.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.547]        // while-condition  =>  TRUE
[22:13:45.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.549]        // while-condition  =>  TRUE
[22:13:45.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.551]        // while-condition  =>  TRUE
[22:13:45.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.555]        // while-condition  =>  TRUE
[22:13:45.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.559]        // while-condition  =>  TRUE
[22:13:45.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.559]        // while-condition  =>  TRUE
[22:13:45.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.559]        // while-condition  =>  TRUE
[22:13:45.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.563]        // while-condition  =>  TRUE
[22:13:45.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.563]        // while-condition  =>  TRUE
[22:13:45.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.572]        // while-condition  =>  TRUE
[22:13:45.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.576]        // while-condition  =>  TRUE
[22:13:45.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.577]        // while-condition  =>  TRUE
[22:13:45.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.578]        // while-condition  =>  TRUE
[22:13:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.580]        // while-condition  =>  TRUE
[22:13:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.587]        // while-condition  =>  TRUE
[22:13:45.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.589]        // while-condition  =>  TRUE
[22:13:45.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.591]        // while-condition  =>  TRUE
[22:13:45.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.593]        // while-condition  =>  TRUE
[22:13:45.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.595]        // while-condition  =>  TRUE
[22:13:45.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.598]        // while-condition  =>  TRUE
[22:13:45.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.599]        // while-condition  =>  TRUE
[22:13:45.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.599]        // while-condition  =>  TRUE
[22:13:45.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.604]        // while-condition  =>  TRUE
[22:13:45.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.608]        // while-condition  =>  TRUE
[22:13:45.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.609]        // while-condition  =>  TRUE
[22:13:45.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.609]        // while-condition  =>  TRUE
[22:13:45.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.612]        // while-condition  =>  TRUE
[22:13:45.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.617]        // while-condition  =>  TRUE
[22:13:45.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.618]        // while-condition  =>  TRUE
[22:13:45.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.620]        // while-condition  =>  TRUE
[22:13:45.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.624]        // while-condition  =>  TRUE
[22:13:45.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.624]        // while-condition  =>  TRUE
[22:13:45.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.627]        // while-condition  =>  TRUE
[22:13:45.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.629]        // while-condition  =>  TRUE
[22:13:45.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.631]        // while-condition  =>  TRUE
[22:13:45.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.631]        // while-condition  =>  TRUE
[22:13:45.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.640]        // while-condition  =>  TRUE
[22:13:45.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.645]        // while-condition  =>  TRUE
[22:13:45.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.648]        // while-condition  =>  TRUE
[22:13:45.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.649]        // while-condition  =>  TRUE
[22:13:45.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.651]        // while-condition  =>  TRUE
[22:13:45.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.654]        // while-condition  =>  TRUE
[22:13:45.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.657]        // while-condition  =>  TRUE
[22:13:45.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.660]        // while-condition  =>  TRUE
[22:13:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.660]        // while-condition  =>  TRUE
[22:13:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.660]        // while-condition  =>  TRUE
[22:13:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.664]        // while-condition  =>  TRUE
[22:13:45.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.667]        // while-condition  =>  TRUE
[22:13:45.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.668]        // while-condition  =>  TRUE
[22:13:45.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.671]        // while-condition  =>  TRUE
[22:13:45.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.671]        // while-condition  =>  TRUE
[22:13:45.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.675]        // while-condition  =>  TRUE
[22:13:45.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.678]        // while-condition  =>  TRUE
[22:13:45.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.688]        // while-condition  =>  TRUE
[22:13:45.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.691]        // while-condition  =>  TRUE
[22:13:45.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.693]        // while-condition  =>  TRUE
[22:13:45.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.699]        // while-condition  =>  TRUE
[22:13:45.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.699]        // while-condition  =>  TRUE
[22:13:45.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.704]        // while-condition  =>  TRUE
[22:13:45.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.708]        // while-condition  =>  TRUE
[22:13:45.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.708]        // while-condition  =>  TRUE
[22:13:45.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.711]        // while-condition  =>  TRUE
[22:13:45.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.714]        // while-condition  =>  TRUE
[22:13:45.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.716]        // while-condition  =>  TRUE
[22:13:45.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.718]        // while-condition  =>  TRUE
[22:13:45.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.720]        // while-condition  =>  TRUE
[22:13:45.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.720]        // while-condition  =>  TRUE
[22:13:45.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.724]        // while-condition  =>  TRUE
[22:13:45.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.724]        // while-condition  =>  TRUE
[22:13:45.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.728]        // while-condition  =>  TRUE
[22:13:45.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.730]        // while-condition  =>  TRUE
[22:13:45.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.732]        // while-condition  =>  TRUE
[22:13:45.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.737]        // while-condition  =>  TRUE
[22:13:45.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.739]        // while-condition  =>  TRUE
[22:13:45.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.746]        // while-condition  =>  TRUE
[22:13:45.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.748]        // while-condition  =>  TRUE
[22:13:45.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.750]        // while-condition  =>  TRUE
[22:13:45.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.753]        // while-condition  =>  TRUE
[22:13:45.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.759]        // while-condition  =>  TRUE
[22:13:45.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.767]        // while-condition  =>  TRUE
[22:13:45.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.769]        // while-condition  =>  TRUE
[22:13:45.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.771]        // while-condition  =>  TRUE
[22:13:45.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.772]        // while-condition  =>  TRUE
[22:13:45.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.774]        // while-condition  =>  TRUE
[22:13:45.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.774]        // while-condition  =>  TRUE
[22:13:45.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.778]        // while-condition  =>  TRUE
[22:13:45.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.780]        // while-condition  =>  TRUE
[22:13:45.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.782]        // while-condition  =>  TRUE
[22:13:45.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.785]        // while-condition  =>  TRUE
[22:13:45.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.787]        // while-condition  =>  TRUE
[22:13:45.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.788]        // while-condition  =>  TRUE
[22:13:45.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.788]        // while-condition  =>  TRUE
[22:13:45.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.797]        // while-condition  =>  TRUE
[22:13:45.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.798]        // while-condition  =>  TRUE
[22:13:45.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:13:45.800]        // while-condition  =>  TRUE
[22:13:45.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:45.800]        // while  =>  TIMEOUT
[22:13:45.800]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:13:45.800]      </control>
[22:13:45.800]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:13:45.800]        // if-block "(__protocol & 0xFFFF) == 1"
[22:13:45.800]          // =>  FALSE
[22:13:45.800]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:13:45.800]      </control>
[22:13:45.800]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:13:45.800]        // if-block "(__protocol & 0xFFFF) == 2"
[22:13:45.800]          // =>  TRUE
[22:13:45.800]        <block atomic="false" info="">
[22:13:45.800]          Message(0, "executing SWD power up");
[22:13:45.802]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:13:45.804]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:13:45.804]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:13:45.807]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:13:45.807]        </block>
[22:13:45.807]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:13:45.807]      </control>
[22:13:45.807]      // end if-block "powered_down"
[22:13:45.807]    </control>
[22:13:45.808]    <block atomic="false" info="">
[22:13:45.808]      __var DEBUG_PORT_VAL    = 0;
[22:13:45.808]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:13:45.808]      __var ACCESS_POINT_VAL  = 0;
[22:13:45.808]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:13:45.808]      __ap = 1; 
[22:13:45.808]        // -> [__ap <= 0x00000001]
[22:13:45.808]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:13:45.825]  
[22:13:45.825]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:13:45.825]  
[22:13:45.827]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:13:45.827]    </block>
[22:13:45.827]  </sequence>
[22:13:45.827]  
[22:13:59.930]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:13:59.930]  
[22:13:59.938]  <debugvars>
[22:13:59.938]    // Pre-defined
[22:13:59.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:59.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:59.938]    __dp=0x00000000
[22:13:59.938]    __ap=0x00000000
[22:13:59.938]    __traceout=0x00000000      (Trace Disabled)
[22:13:59.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:59.938]    __FlashAddr=0x00000000
[22:13:59.939]    __FlashLen=0x00000000
[22:13:59.939]    __FlashArg=0x00000000
[22:13:59.939]    __FlashOp=0x00000000
[22:13:59.939]    __Result=0x00000000
[22:13:59.939]  </debugvars>
[22:13:59.939]  
[22:13:59.939]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:13:59.939]    <block atomic="false" info="">
[22:13:59.939]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:13:59.940]        // -> [isSWJ <= 0x00000001]
[22:13:59.940]      __var hasDormant = __protocol & 0x00020000;
[22:13:59.940]        // -> [hasDormant <= 0x00000000]
[22:13:59.940]      __var protType   = __protocol & 0x0000FFFF;
[22:13:59.940]        // -> [protType <= 0x00000002]
[22:13:59.940]    </block>
[22:13:59.940]    <control if="protType == 1" while="" timeout="0" info="">
[22:13:59.940]      // if-block "protType == 1"
[22:13:59.940]        // =>  FALSE
[22:13:59.940]      // skip if-block "protType == 1"
[22:13:59.940]    </control>
[22:13:59.940]    <control if="protType == 2" while="" timeout="0" info="">
[22:13:59.940]      // if-block "protType == 2"
[22:13:59.940]        // =>  TRUE
[22:13:59.940]      <control if="isSWJ" while="" timeout="0" info="">
[22:13:59.940]        // if-block "isSWJ"
[22:13:59.940]          // =>  TRUE
[22:13:59.940]        <control if="hasDormant" while="" timeout="0" info="">
[22:13:59.942]          // if-block "hasDormant"
[22:13:59.942]            // =>  FALSE
[22:13:59.942]          // skip if-block "hasDormant"
[22:13:59.942]        </control>
[22:13:59.942]        <control if="!hasDormant" while="" timeout="0" info="">
[22:13:59.942]          // if-block "!hasDormant"
[22:13:59.942]            // =>  TRUE
[22:13:59.942]          <block atomic="false" info="">
[22:13:59.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:13:59.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:59.942]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:13:59.942]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:13:59.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:13:59.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:59.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:13:59.948]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:13:59.948]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:13:59.950]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:59.950]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:13:59.955]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:13:59.955]          </block>
[22:13:59.955]          // end if-block "!hasDormant"
[22:13:59.955]        </control>
[22:13:59.955]        // end if-block "isSWJ"
[22:13:59.955]      </control>
[22:13:59.955]      <control if="!isSWJ" while="" timeout="0" info="">
[22:13:59.955]        // if-block "!isSWJ"
[22:13:59.955]          // =>  FALSE
[22:13:59.955]        // skip if-block "!isSWJ"
[22:13:59.955]      </control>
[22:13:59.955]      <block atomic="false" info="">
[22:13:59.955]        ReadDP(0x0);
[22:13:59.958]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:13:59.958]      </block>
[22:13:59.958]      // end if-block "protType == 2"
[22:13:59.958]    </control>
[22:13:59.958]  </sequence>
[22:13:59.958]  
[22:13:59.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:13:59.962]  
[22:13:59.962]  <debugvars>
[22:13:59.962]    // Pre-defined
[22:13:59.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:59.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:59.962]    __dp=0x00000000
[22:13:59.962]    __ap=0x00000000
[22:13:59.962]    __traceout=0x00000000      (Trace Disabled)
[22:13:59.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:59.962]    __FlashAddr=0x00000000
[22:13:59.962]    __FlashLen=0x00000000
[22:13:59.962]    __FlashArg=0x00000000
[22:13:59.962]    __FlashOp=0x00000000
[22:13:59.962]    __Result=0x00000000
[22:13:59.962]  </debugvars>
[22:13:59.962]  
[22:13:59.962]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:13:59.962]    <block atomic="false" info="">
[22:13:59.962]      __var SW_DP_ABORT       = 0x0;
[22:13:59.962]        // -> [SW_DP_ABORT <= 0x00000000]
[22:13:59.962]      __var DP_CTRL_STAT      = 0x4;
[22:13:59.962]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:13:59.962]      __var DP_SELECT         = 0x8;
[22:13:59.962]        // -> [DP_SELECT <= 0x00000008]
[22:13:59.962]      __var powered_down      = 0;
[22:13:59.962]        // -> [powered_down <= 0x00000000]
[22:13:59.962]      WriteDP(DP_SELECT, 0x00000000);
[22:13:59.966]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:13:59.966]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:13:59.968]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:13:59.968]        // -> [powered_down <= 0x00000001]
[22:13:59.968]    </block>
[22:13:59.968]    <control if="powered_down" while="" timeout="0" info="">
[22:13:59.969]      // if-block "powered_down"
[22:13:59.969]        // =>  TRUE
[22:13:59.969]      <block atomic="false" info="">
[22:13:59.969]        Message(0, "Debug/System power-up request sent");
[22:13:59.970]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:13:59.970]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:13:59.970]      </block>
[22:13:59.970]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:13:59.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:59.975]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:13:59.975]        // while-condition  =>  FALSE
[22:13:59.975]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:13:59.976]      </control>
[22:13:59.976]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:13:59.976]        // if-block "(__protocol & 0xFFFF) == 1"
[22:13:59.976]          // =>  FALSE
[22:13:59.976]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:13:59.976]      </control>
[22:13:59.976]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:13:59.976]        // if-block "(__protocol & 0xFFFF) == 2"
[22:13:59.976]          // =>  TRUE
[22:13:59.976]        <block atomic="false" info="">
[22:13:59.976]          Message(0, "executing SWD power up");
[22:13:59.978]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:13:59.978]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:13:59.978]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:13:59.982]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:13:59.982]        </block>
[22:13:59.982]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:13:59.982]      </control>
[22:13:59.982]      // end if-block "powered_down"
[22:13:59.982]    </control>
[22:13:59.982]    <block atomic="false" info="">
[22:13:59.982]      __var DEBUG_PORT_VAL    = 0;
[22:13:59.982]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:13:59.982]      __var ACCESS_POINT_VAL  = 0;
[22:13:59.982]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:13:59.982]      __ap = 1; 
[22:13:59.982]        // -> [__ap <= 0x00000001]
[22:13:59.982]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:13:59.987]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:13:59.988]      __ap = 4;
[22:13:59.988]        // -> [__ap <= 0x00000004]
[22:13:59.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:13:59.990]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:13:59.990]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:13:59.990]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:13:59.994]    </block>
[22:13:59.994]    <block atomic="false" info="">
[22:13:59.994]      __var nReset = 0x80;
[22:13:59.994]        // -> [nReset <= 0x00000080]
[22:13:59.994]      __var canReadPins = 0;
[22:13:59.994]        // -> [canReadPins <= 0x00000000]
[22:13:59.994]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:13:59.995]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:13:59.995]        // -> [canReadPins <= 0x00000001]
[22:13:59.995]    </block>
[22:13:59.995]    <control if="" while="1" timeout="200" info="">
[22:13:59.995]      // while "1"  (timeout="200")
[22:13:59.995]      // while-condition  =>  TRUE
[22:13:59.995]      // while "1"  (timeout="200")
[22:13:59.997]      // while-condition  =>  TRUE
[22:13:59.997]      // while "1"  (timeout="200")
[22:13:59.997]      // while-condition  =>  TRUE
[22:13:59.997]      // while "1"  (timeout="200")
[22:13:59.997]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.998]      // while "1"  (timeout="200")
[22:13:59.998]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:13:59.999]      // while-condition  =>  TRUE
[22:13:59.999]      // while "1"  (timeout="200")
[22:14:00.002]      // while-condition  =>  TRUE
[22:14:00.002]      // while "1"  (timeout="200")
[22:14:00.002]      // while-condition  =>  TRUE
[22:14:00.002]      // while "1"  (timeout="200")
[22:14:00.002]      // while-condition  =>  TRUE
[22:14:00.002]      // while "1"  (timeout="200")
[22:14:00.002]      // while-condition  =>  TRUE
[22:14:00.002]      // while "1"  (timeout="200")
[22:14:00.003]      // while-condition  =>  TRUE
[22:14:00.003]      // while "1"  (timeout="200")
[22:14:00.003]      // while  =>  TIMEOUT
[22:14:00.003]      // end while "1"
[22:14:00.003]    </control>
[22:14:00.003]    <control if="canReadPins" while="" timeout="0" info="">
[22:14:00.003]      // if-block "canReadPins"
[22:14:00.003]        // =>  TRUE
[22:14:00.003]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:14:00.003]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:14:00.004]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:14:00.006]        // while-condition  =>  FALSE
[22:14:00.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:14:00.006]      </control>
[22:14:00.006]      // end if-block "canReadPins"
[22:14:00.006]    </control>
[22:14:00.006]    <control if="!canReadPins" while="" timeout="0" info="">
[22:14:00.006]      // if-block "!canReadPins"
[22:14:00.006]        // =>  FALSE
[22:14:00.006]      // skip if-block "!canReadPins"
[22:14:00.007]    </control>
[22:14:00.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:14:00.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:00.007]        // =>  TRUE
[22:14:00.007]      <block atomic="false" info="">
[22:14:00.007]        WriteAP(0x00, 0x190008);
[22:14:00.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:00.010]        WriteAP(0xF0, 0x01);
[22:14:00.018]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:00.018]      </block>
[22:14:00.018]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:00.018]    </control>
[22:14:00.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:14:00.018]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:00.018]        // =>  FALSE
[22:14:00.018]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:00.018]    </control>
[22:14:00.018]    <block atomic="false" info="">
[22:14:00.018]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:00.022]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:14:00.022]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:14:00.022]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:00.026]      __ap = 0; //lets make sure we reset the access point selection
[22:14:00.027]        // -> [__ap <= 0x00000000]
[22:14:00.027]    </block>
[22:14:00.027]  </sequence>
[22:14:00.027]  
[22:14:00.047]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:14:00.047]  
[22:14:00.047]  <debugvars>
[22:14:00.047]    // Pre-defined
[22:14:00.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:00.047]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:00.047]    __dp=0x00000000
[22:14:00.047]    __ap=0x00000000
[22:14:00.047]    __traceout=0x00000000      (Trace Disabled)
[22:14:00.048]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:00.048]    __FlashAddr=0x00000000
[22:14:00.048]    __FlashLen=0x00000000
[22:14:00.048]    __FlashArg=0x00000000
[22:14:00.048]    __FlashOp=0x00000000
[22:14:00.048]    __Result=0x00000000
[22:14:00.048]  </debugvars>
[22:14:00.048]  
[22:14:00.048]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:14:00.048]    <block atomic="false" info="">
[22:14:00.048]      __var deviceID = 0;
[22:14:00.048]        // -> [deviceID <= 0x00000000]
[22:14:00.049]      __var version = 0;
[22:14:00.049]        // -> [version <= 0x00000000]
[22:14:00.049]      __var partNum = 0;
[22:14:00.049]        // -> [partNum <= 0x00000000]
[22:14:00.049]      __var manuf = 0;
[22:14:00.049]        // -> [manuf <= 0x00000000]
[22:14:00.049]      __var isMSPM0G1X0X_G3X0X = 0;
[22:14:00.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:14:00.049]      __var isProduction = 0;
[22:14:00.049]        // -> [isProduction <= 0x00000000]
[22:14:00.049]      __var continueId = 0;
[22:14:00.049]        // -> [continueId <= 0x00000000]
[22:14:00.049]      deviceID =   Read32(0x41C40004);
[22:14:00.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:14:00.058]        // -> [deviceID <= 0x2BB8802F]
[22:14:00.058]      version = deviceID >> 28;
[22:14:00.058]        // -> [version <= 0x00000002]
[22:14:00.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:14:00.058]        // -> [partNum <= 0x0000BB88]
[22:14:00.058]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:14:00.058]        // -> [manuf <= 0x00000017]
[22:14:00.058]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:14:00.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:14:00.058]      isProduction = (version > 0);
[22:14:00.058]        // -> [isProduction <= 0x00000001]
[22:14:00.058]    </block>
[22:14:00.058]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:14:00.058]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:14:00.058]        // =>  FALSE
[22:14:00.058]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:14:00.058]    </control>
[22:14:00.058]    <control if="continueId == 4" while="" timeout="0" info="">
[22:14:00.058]      // if-block "continueId == 4"
[22:14:00.058]        // =>  FALSE
[22:14:00.058]      // skip if-block "continueId == 4"
[22:14:00.058]    </control>
[22:14:00.058]    <control if="!isProduction" while="" timeout="0" info="">
[22:14:00.058]      // if-block "!isProduction"
[22:14:00.061]        // =>  FALSE
[22:14:00.061]      // skip if-block "!isProduction"
[22:14:00.061]    </control>
[22:14:00.061]  </sequence>
[22:14:00.061]  
[22:21:13.257]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:21:13.257]  
[22:21:13.258]  <debugvars>
[22:21:13.258]    // Pre-defined
[22:21:13.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:13.258]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:13.258]    __dp=0x00000000
[22:21:13.258]    __ap=0x00000000
[22:21:13.258]    __traceout=0x00000000      (Trace Disabled)
[22:21:13.258]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:13.258]    __FlashAddr=0x00000000
[22:21:13.258]    __FlashLen=0x00000000
[22:21:13.258]    __FlashArg=0x00000000
[22:21:13.258]    __FlashOp=0x00000000
[22:21:13.258]    __Result=0x00000000
[22:21:13.258]  </debugvars>
[22:21:13.258]  
[22:21:13.258]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:21:13.258]    <block atomic="false" info="">
[22:21:13.260]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:21:13.260]        // -> [isSWJ <= 0x00000001]
[22:21:13.260]      __var hasDormant = __protocol & 0x00020000;
[22:21:13.260]        // -> [hasDormant <= 0x00000000]
[22:21:13.260]      __var protType   = __protocol & 0x0000FFFF;
[22:21:13.260]        // -> [protType <= 0x00000002]
[22:21:13.260]    </block>
[22:21:13.260]    <control if="protType == 1" while="" timeout="0" info="">
[22:21:13.260]      // if-block "protType == 1"
[22:21:13.260]        // =>  FALSE
[22:21:13.260]      // skip if-block "protType == 1"
[22:21:13.260]    </control>
[22:21:13.261]    <control if="protType == 2" while="" timeout="0" info="">
[22:21:13.261]      // if-block "protType == 2"
[22:21:13.261]        // =>  TRUE
[22:21:13.261]      <control if="isSWJ" while="" timeout="0" info="">
[22:21:13.261]        // if-block "isSWJ"
[22:21:13.261]          // =>  TRUE
[22:21:13.262]        <control if="hasDormant" while="" timeout="0" info="">
[22:21:13.262]          // if-block "hasDormant"
[22:21:13.262]            // =>  FALSE
[22:21:13.262]          // skip if-block "hasDormant"
[22:21:13.262]        </control>
[22:21:13.262]        <control if="!hasDormant" while="" timeout="0" info="">
[22:21:13.262]          // if-block "!hasDormant"
[22:21:13.262]            // =>  TRUE
[22:21:13.262]          <block atomic="false" info="">
[22:21:13.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:21:13.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:13.262]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:21:13.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:21:13.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:21:13.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:13.267]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:21:13.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:21:13.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:21:13.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:13.271]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:21:13.275]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:21:13.275]          </block>
[22:21:13.275]          // end if-block "!hasDormant"
[22:21:13.275]        </control>
[22:21:13.275]        // end if-block "isSWJ"
[22:21:13.275]      </control>
[22:21:13.275]      <control if="!isSWJ" while="" timeout="0" info="">
[22:21:13.275]        // if-block "!isSWJ"
[22:21:13.275]          // =>  FALSE
[22:21:13.275]        // skip if-block "!isSWJ"
[22:21:13.275]      </control>
[22:21:13.275]      <block atomic="false" info="">
[22:21:13.275]        ReadDP(0x0);
[22:21:13.277]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:21:13.277]      </block>
[22:21:13.277]      // end if-block "protType == 2"
[22:21:13.277]    </control>
[22:21:13.277]  </sequence>
[22:21:13.277]  
[22:21:13.287]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:21:13.287]  
[22:21:13.287]  <debugvars>
[22:21:13.287]    // Pre-defined
[22:21:13.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:13.287]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:13.287]    __dp=0x00000000
[22:21:13.287]    __ap=0x00000000
[22:21:13.287]    __traceout=0x00000000      (Trace Disabled)
[22:21:13.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:13.287]    __FlashAddr=0x00000000
[22:21:13.287]    __FlashLen=0x00000000
[22:21:13.287]    __FlashArg=0x00000000
[22:21:13.291]    __FlashOp=0x00000000
[22:21:13.291]    __Result=0x00000000
[22:21:13.291]  </debugvars>
[22:21:13.291]  
[22:21:13.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:21:13.291]    <block atomic="false" info="">
[22:21:13.291]      __var SW_DP_ABORT       = 0x0;
[22:21:13.291]        // -> [SW_DP_ABORT <= 0x00000000]
[22:21:13.291]      __var DP_CTRL_STAT      = 0x4;
[22:21:13.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:21:13.291]      __var DP_SELECT         = 0x8;
[22:21:13.291]        // -> [DP_SELECT <= 0x00000008]
[22:21:13.291]      __var powered_down      = 0;
[22:21:13.291]        // -> [powered_down <= 0x00000000]
[22:21:13.291]      WriteDP(DP_SELECT, 0x00000000);
[22:21:13.295]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:21:13.295]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:21:13.297]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:21:13.297]        // -> [powered_down <= 0x00000001]
[22:21:13.297]    </block>
[22:21:13.297]    <control if="powered_down" while="" timeout="0" info="">
[22:21:13.297]      // if-block "powered_down"
[22:21:13.297]        // =>  TRUE
[22:21:13.297]      <block atomic="false" info="">
[22:21:13.298]        Message(0, "Debug/System power-up request sent");
[22:21:13.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:21:13.300]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:21:13.300]      </block>
[22:21:13.300]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:21:13.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:21:13.303]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:21:13.303]        // while-condition  =>  FALSE
[22:21:13.303]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:21:13.305]      </control>
[22:21:13.305]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:21:13.305]        // if-block "(__protocol & 0xFFFF) == 1"
[22:21:13.305]          // =>  FALSE
[22:21:13.305]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:21:13.305]      </control>
[22:21:13.305]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:21:13.305]        // if-block "(__protocol & 0xFFFF) == 2"
[22:21:13.305]          // =>  TRUE
[22:21:13.305]        <block atomic="false" info="">
[22:21:13.305]          Message(0, "executing SWD power up");
[22:21:13.307]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:21:13.308]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:21:13.308]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:21:13.311]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:21:13.311]        </block>
[22:21:13.311]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:21:13.311]      </control>
[22:21:13.311]      // end if-block "powered_down"
[22:21:13.312]    </control>
[22:21:13.312]    <block atomic="false" info="">
[22:21:13.312]      __var DEBUG_PORT_VAL    = 0;
[22:21:13.312]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:21:13.312]      __var ACCESS_POINT_VAL  = 0;
[22:21:13.312]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:21:13.312]      __ap = 1; 
[22:21:13.312]        // -> [__ap <= 0x00000001]
[22:21:13.312]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:21:13.315]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:21:13.315]      __ap = 4;
[22:21:13.315]        // -> [__ap <= 0x00000004]
[22:21:13.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:21:13.319]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:21:13.319]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:21:13.319]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:21:13.321]    </block>
[22:21:13.321]    <block atomic="false" info="">
[22:21:13.321]      __var nReset = 0x80;
[22:21:13.321]        // -> [nReset <= 0x00000080]
[22:21:13.321]      __var canReadPins = 0;
[22:21:13.321]        // -> [canReadPins <= 0x00000000]
[22:21:13.321]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:21:13.327]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:21:13.327]        // -> [canReadPins <= 0x00000001]
[22:21:13.327]    </block>
[22:21:13.327]    <control if="" while="1" timeout="200" info="">
[22:21:13.328]      // while "1"  (timeout="200")
[22:21:13.328]      // while-condition  =>  TRUE
[22:21:13.328]      // while "1"  (timeout="200")
[22:21:13.328]      // while-condition  =>  TRUE
[22:21:13.328]      // while "1"  (timeout="200")
[22:21:13.328]      // while-condition  =>  TRUE
[22:21:13.328]      // while "1"  (timeout="200")
[22:21:13.328]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.329]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.329]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.329]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.329]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.329]      // while-condition  =>  TRUE
[22:21:13.329]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.330]      // while "1"  (timeout="200")
[22:21:13.330]      // while-condition  =>  TRUE
[22:21:13.331]      // while "1"  (timeout="200")
[22:21:13.331]      // while  =>  TIMEOUT
[22:21:13.331]      // end while "1"
[22:21:13.331]    </control>
[22:21:13.331]    <control if="canReadPins" while="" timeout="0" info="">
[22:21:13.331]      // if-block "canReadPins"
[22:21:13.331]        // =>  TRUE
[22:21:13.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:21:13.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:21:13.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:21:13.332]        // while-condition  =>  FALSE
[22:21:13.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:21:13.332]      </control>
[22:21:13.332]      // end if-block "canReadPins"
[22:21:13.332]    </control>
[22:21:13.332]    <control if="!canReadPins" while="" timeout="0" info="">
[22:21:13.332]      // if-block "!canReadPins"
[22:21:13.332]        // =>  FALSE
[22:21:13.332]      // skip if-block "!canReadPins"
[22:21:13.332]    </control>
[22:21:13.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:21:13.332]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:21:13.332]        // =>  TRUE
[22:21:13.332]      <block atomic="false" info="">
[22:21:13.336]        WriteAP(0x00, 0x190008);
[22:21:13.338]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:21:13.338]        WriteAP(0xF0, 0x01);
[22:21:13.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:21:13.345]      </block>
[22:21:13.345]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:21:13.345]    </control>
[22:21:13.345]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:21:13.345]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:21:13.345]        // =>  FALSE
[22:21:13.345]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:21:13.345]    </control>
[22:21:13.345]    <block atomic="false" info="">
[22:21:13.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:21:13.350]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:21:13.350]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:21:13.350]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:21:13.352]      __ap = 0; //lets make sure we reset the access point selection
[22:21:13.352]        // -> [__ap <= 0x00000000]
[22:21:13.352]    </block>
[22:21:13.352]  </sequence>
[22:21:13.352]  
[22:21:13.381]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:21:13.381]  
[22:21:13.381]  <debugvars>
[22:21:13.381]    // Pre-defined
[22:21:13.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:13.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:13.382]    __dp=0x00000000
[22:21:13.382]    __ap=0x00000000
[22:21:13.382]    __traceout=0x00000000      (Trace Disabled)
[22:21:13.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:13.382]    __FlashAddr=0x00000000
[22:21:13.382]    __FlashLen=0x00000000
[22:21:13.382]    __FlashArg=0x00000000
[22:21:13.382]    __FlashOp=0x00000000
[22:21:13.382]    __Result=0x00000000
[22:21:13.382]  </debugvars>
[22:21:13.382]  
[22:21:13.382]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:21:13.382]    <block atomic="false" info="">
[22:21:13.382]      __var deviceID = 0;
[22:21:13.382]        // -> [deviceID <= 0x00000000]
[22:21:13.382]      __var version = 0;
[22:21:13.382]        // -> [version <= 0x00000000]
[22:21:13.382]      __var partNum = 0;
[22:21:13.382]        // -> [partNum <= 0x00000000]
[22:21:13.382]      __var manuf = 0;
[22:21:13.382]        // -> [manuf <= 0x00000000]
[22:21:13.385]      __var isMSPM0G1X0X_G3X0X = 0;
[22:21:13.385]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:21:13.385]      __var isProduction = 0;
[22:21:13.385]        // -> [isProduction <= 0x00000000]
[22:21:13.385]      __var continueId = 0;
[22:21:13.385]        // -> [continueId <= 0x00000000]
[22:21:13.385]      deviceID =   Read32(0x41C40004);
[22:21:13.388]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:21:13.388]        // -> [deviceID <= 0x2BB8802F]
[22:21:13.388]      version = deviceID >> 28;
[22:21:13.390]        // -> [version <= 0x00000002]
[22:21:13.390]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:21:13.390]        // -> [partNum <= 0x0000BB88]
[22:21:13.390]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:21:13.390]        // -> [manuf <= 0x00000017]
[22:21:13.390]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:21:13.390]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:21:13.390]      isProduction = (version > 0);
[22:21:13.390]        // -> [isProduction <= 0x00000001]
[22:21:13.390]    </block>
[22:21:13.390]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:21:13.390]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:21:13.390]        // =>  FALSE
[22:21:13.390]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:21:13.390]    </control>
[22:21:13.390]    <control if="continueId == 4" while="" timeout="0" info="">
[22:21:13.390]      // if-block "continueId == 4"
[22:21:13.390]        // =>  FALSE
[22:21:13.392]      // skip if-block "continueId == 4"
[22:21:13.392]    </control>
[22:21:13.392]    <control if="!isProduction" while="" timeout="0" info="">
[22:21:13.392]      // if-block "!isProduction"
[22:21:13.392]        // =>  FALSE
[22:21:13.392]      // skip if-block "!isProduction"
[22:21:13.392]    </control>
[22:21:13.392]  </sequence>
[22:21:13.392]  
[22:27:15.182]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:27:15.182]  
[22:27:15.182]  <debugvars>
[22:27:15.182]    // Pre-defined
[22:27:15.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:15.182]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:27:15.182]    __dp=0x00000000
[22:27:15.182]    __ap=0x00000000
[22:27:15.182]    __traceout=0x00000000      (Trace Disabled)
[22:27:15.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:15.184]    __FlashAddr=0x00000000
[22:27:15.184]    __FlashLen=0x00000000
[22:27:15.184]    __FlashArg=0x00000000
[22:27:15.184]    __FlashOp=0x00000000
[22:27:15.184]    __Result=0x00000000
[22:27:15.184]  </debugvars>
[22:27:15.184]  
[22:27:15.185]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:27:15.186]    <block atomic="false" info="">
[22:27:15.186]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:27:15.186]        // -> [isSWJ <= 0x00000001]
[22:27:15.186]      __var hasDormant = __protocol & 0x00020000;
[22:27:15.186]        // -> [hasDormant <= 0x00000000]
[22:27:15.186]      __var protType   = __protocol & 0x0000FFFF;
[22:27:15.186]        // -> [protType <= 0x00000002]
[22:27:15.186]    </block>
[22:27:15.186]    <control if="protType == 1" while="" timeout="0" info="">
[22:27:15.186]      // if-block "protType == 1"
[22:27:15.186]        // =>  FALSE
[22:27:15.187]      // skip if-block "protType == 1"
[22:27:15.187]    </control>
[22:27:15.187]    <control if="protType == 2" while="" timeout="0" info="">
[22:27:15.187]      // if-block "protType == 2"
[22:27:15.188]        // =>  TRUE
[22:27:15.188]      <control if="isSWJ" while="" timeout="0" info="">
[22:27:15.188]        // if-block "isSWJ"
[22:27:15.188]          // =>  TRUE
[22:27:15.188]        <control if="hasDormant" while="" timeout="0" info="">
[22:27:15.188]          // if-block "hasDormant"
[22:27:15.188]            // =>  FALSE
[22:27:15.188]          // skip if-block "hasDormant"
[22:27:15.188]        </control>
[22:27:15.188]        <control if="!hasDormant" while="" timeout="0" info="">
[22:27:15.188]          // if-block "!hasDormant"
[22:27:15.188]            // =>  TRUE
[22:27:15.190]          <block atomic="false" info="">
[22:27:15.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:27:15.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:15.190]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:27:15.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:27:15.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:27:15.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:15.199]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:27:15.205]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:27:15.205]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:27:15.206]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:27:15.206]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:27:15.207]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:27:15.207]          </block>
[22:27:15.207]          // end if-block "!hasDormant"
[22:27:15.207]        </control>
[22:27:15.207]        // end if-block "isSWJ"
[22:27:15.207]      </control>
[22:27:15.209]      <control if="!isSWJ" while="" timeout="0" info="">
[22:27:15.209]        // if-block "!isSWJ"
[22:27:15.209]          // =>  FALSE
[22:27:15.209]        // skip if-block "!isSWJ"
[22:27:15.209]      </control>
[22:27:15.209]      <block atomic="false" info="">
[22:27:15.209]        ReadDP(0x0);
[22:27:15.211]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:27:15.211]      </block>
[22:27:15.211]      // end if-block "protType == 2"
[22:27:15.211]    </control>
[22:27:15.211]  </sequence>
[22:27:15.211]  
[22:27:15.216]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:27:15.216]  
[22:27:15.216]  <debugvars>
[22:27:15.216]    // Pre-defined
[22:27:15.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:15.216]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:27:15.216]    __dp=0x00000000
[22:27:15.216]    __ap=0x00000000
[22:27:15.216]    __traceout=0x00000000      (Trace Disabled)
[22:27:15.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:15.216]    __FlashAddr=0x00000000
[22:27:15.217]    __FlashLen=0x00000000
[22:27:15.217]    __FlashArg=0x00000000
[22:27:15.217]    __FlashOp=0x00000000
[22:27:15.217]    __Result=0x00000000
[22:27:15.217]  </debugvars>
[22:27:15.217]  
[22:27:15.217]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:27:15.217]    <block atomic="false" info="">
[22:27:15.217]      __var SW_DP_ABORT       = 0x0;
[22:27:15.217]        // -> [SW_DP_ABORT <= 0x00000000]
[22:27:15.217]      __var DP_CTRL_STAT      = 0x4;
[22:27:15.217]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:27:15.218]      __var DP_SELECT         = 0x8;
[22:27:15.218]        // -> [DP_SELECT <= 0x00000008]
[22:27:15.218]      __var powered_down      = 0;
[22:27:15.218]        // -> [powered_down <= 0x00000000]
[22:27:15.218]      WriteDP(DP_SELECT, 0x00000000);
[22:27:15.220]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:27:15.220]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:27:15.221]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:27:15.221]        // -> [powered_down <= 0x00000001]
[22:27:15.221]    </block>
[22:27:15.221]    <control if="powered_down" while="" timeout="0" info="">
[22:27:15.221]      // if-block "powered_down"
[22:27:15.221]        // =>  TRUE
[22:27:15.221]      <block atomic="false" info="">
[22:27:15.223]        Message(0, "Debug/System power-up request sent");
[22:27:15.227]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:27:15.229]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:27:15.229]      </block>
[22:27:15.229]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:27:15.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:27:15.235]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:27:15.235]        // while-condition  =>  FALSE
[22:27:15.237]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:27:15.237]      </control>
[22:27:15.237]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:27:15.237]        // if-block "(__protocol & 0xFFFF) == 1"
[22:27:15.237]          // =>  FALSE
[22:27:15.237]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:27:15.237]      </control>
[22:27:15.237]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:27:15.237]        // if-block "(__protocol & 0xFFFF) == 2"
[22:27:15.237]          // =>  TRUE
[22:27:15.238]        <block atomic="false" info="">
[22:27:15.238]          Message(0, "executing SWD power up");
[22:27:15.239]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:27:15.240]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:27:15.240]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:27:15.240]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:27:15.240]        </block>
[22:27:15.240]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:27:15.240]      </control>
[22:27:15.243]      // end if-block "powered_down"
[22:27:15.243]    </control>
[22:27:15.243]    <block atomic="false" info="">
[22:27:15.243]      __var DEBUG_PORT_VAL    = 0;
[22:27:15.243]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:27:15.243]      __var ACCESS_POINT_VAL  = 0;
[22:27:15.243]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:27:15.244]      __ap = 1; 
[22:27:15.244]        // -> [__ap <= 0x00000001]
[22:27:15.244]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:27:15.248]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:27:15.252]      __ap = 4;
[22:27:15.252]        // -> [__ap <= 0x00000004]
[22:27:15.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:27:15.255]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:27:15.255]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:27:15.255]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:27:15.257]    </block>
[22:27:15.257]    <block atomic="false" info="">
[22:27:15.257]      __var nReset = 0x80;
[22:27:15.257]        // -> [nReset <= 0x00000080]
[22:27:15.257]      __var canReadPins = 0;
[22:27:15.257]        // -> [canReadPins <= 0x00000000]
[22:27:15.257]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:27:15.260]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:27:15.260]        // -> [canReadPins <= 0x00000001]
[22:27:15.260]    </block>
[22:27:15.260]    <control if="" while="1" timeout="200" info="">
[22:27:15.260]      // while "1"  (timeout="200")
[22:27:15.260]      // while-condition  =>  TRUE
[22:27:15.260]      // while "1"  (timeout="200")
[22:27:15.260]      // while-condition  =>  TRUE
[22:27:15.260]      // while "1"  (timeout="200")
[22:27:15.260]      // while-condition  =>  TRUE
[22:27:15.260]      // while "1"  (timeout="200")
[22:27:15.260]      // while-condition  =>  TRUE
[22:27:15.260]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.262]      // while-condition  =>  TRUE
[22:27:15.262]      // while "1"  (timeout="200")
[22:27:15.264]      // while-condition  =>  TRUE
[22:27:15.264]      // while "1"  (timeout="200")
[22:27:15.264]      // while-condition  =>  TRUE
[22:27:15.264]      // while "1"  (timeout="200")
[22:27:15.264]      // while-condition  =>  TRUE
[22:27:15.264]      // while "1"  (timeout="200")
[22:27:15.264]      // while-condition  =>  TRUE
[22:27:15.264]      // while "1"  (timeout="200")
[22:27:15.265]      // while-condition  =>  TRUE
[22:27:15.265]      // while "1"  (timeout="200")
[22:27:15.265]      // while-condition  =>  TRUE
[22:27:15.265]      // while "1"  (timeout="200")
[22:27:15.265]      // while-condition  =>  TRUE
[22:27:15.265]      // while "1"  (timeout="200")
[22:27:15.265]      // while-condition  =>  TRUE
[22:27:15.265]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.266]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.266]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.266]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.266]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.266]      // while "1"  (timeout="200")
[22:27:15.266]      // while-condition  =>  TRUE
[22:27:15.268]      // while "1"  (timeout="200")
[22:27:15.268]      // while-condition  =>  TRUE
[22:27:15.268]      // while "1"  (timeout="200")
[22:27:15.268]      // while-condition  =>  TRUE
[22:27:15.268]      // while "1"  (timeout="200")
[22:27:15.268]      // while-condition  =>  TRUE
[22:27:15.268]      // while "1"  (timeout="200")
[22:27:15.268]      // while-condition  =>  TRUE
[22:27:15.268]      // while "1"  (timeout="200")
[22:27:15.268]      // while-condition  =>  TRUE
[22:27:15.269]      // while "1"  (timeout="200")
[22:27:15.269]      // while  =>  TIMEOUT
[22:27:15.269]      // end while "1"
[22:27:15.269]    </control>
[22:27:15.269]    <control if="canReadPins" while="" timeout="0" info="">
[22:27:15.269]      // if-block "canReadPins"
[22:27:15.269]        // =>  TRUE
[22:27:15.269]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:27:15.269]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:27:15.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:27:15.271]        // while-condition  =>  FALSE
[22:27:15.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:27:15.271]      </control>
[22:27:15.271]      // end if-block "canReadPins"
[22:27:15.271]    </control>
[22:27:15.271]    <control if="!canReadPins" while="" timeout="0" info="">
[22:27:15.271]      // if-block "!canReadPins"
[22:27:15.271]        // =>  FALSE
[22:27:15.273]      // skip if-block "!canReadPins"
[22:27:15.273]    </control>
[22:27:15.273]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:27:15.273]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:27:15.273]        // =>  TRUE
[22:27:15.273]      <block atomic="false" info="">
[22:27:15.273]        WriteAP(0x00, 0x190008);
[22:27:15.275]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:27:15.275]        WriteAP(0xF0, 0x01);
[22:27:15.281]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:27:15.281]      </block>
[22:27:15.281]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:27:15.281]    </control>
[22:27:15.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:27:15.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:27:15.281]        // =>  FALSE
[22:27:15.281]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:27:15.281]    </control>
[22:27:15.281]    <block atomic="false" info="">
[22:27:15.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:27:15.284]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:27:15.284]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:27:15.284]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:27:15.286]      __ap = 0; //lets make sure we reset the access point selection
[22:27:15.286]        // -> [__ap <= 0x00000000]
[22:27:15.286]    </block>
[22:27:15.286]  </sequence>
[22:27:15.286]  
[22:27:15.305]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:27:15.305]  
[22:27:15.307]  <debugvars>
[22:27:15.307]    // Pre-defined
[22:27:15.307]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:27:15.307]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:27:15.307]    __dp=0x00000000
[22:27:15.307]    __ap=0x00000000
[22:27:15.308]    __traceout=0x00000000      (Trace Disabled)
[22:27:15.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:27:15.308]    __FlashAddr=0x00000000
[22:27:15.308]    __FlashLen=0x00000000
[22:27:15.308]    __FlashArg=0x00000000
[22:27:15.308]    __FlashOp=0x00000000
[22:27:15.308]    __Result=0x00000000
[22:27:15.308]  </debugvars>
[22:27:15.308]  
[22:27:15.309]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:27:15.309]    <block atomic="false" info="">
[22:27:15.309]      __var deviceID = 0;
[22:27:15.309]        // -> [deviceID <= 0x00000000]
[22:27:15.309]      __var version = 0;
[22:27:15.309]        // -> [version <= 0x00000000]
[22:27:15.309]      __var partNum = 0;
[22:27:15.309]        // -> [partNum <= 0x00000000]
[22:27:15.309]      __var manuf = 0;
[22:27:15.309]        // -> [manuf <= 0x00000000]
[22:27:15.309]      __var isMSPM0G1X0X_G3X0X = 0;
[22:27:15.309]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:27:15.311]      __var isProduction = 0;
[22:27:15.311]        // -> [isProduction <= 0x00000000]
[22:27:15.311]      __var continueId = 0;
[22:27:15.311]        // -> [continueId <= 0x00000000]
[22:27:15.311]      deviceID =   Read32(0x41C40004);
[22:27:15.317]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:27:15.317]        // -> [deviceID <= 0x2BB8802F]
[22:27:15.317]      version = deviceID >> 28;
[22:27:15.317]        // -> [version <= 0x00000002]
[22:27:15.317]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:27:15.317]        // -> [partNum <= 0x0000BB88]
[22:27:15.317]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:27:15.317]        // -> [manuf <= 0x00000017]
[22:27:15.317]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:27:15.317]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:27:15.317]      isProduction = (version > 0);
[22:27:15.317]        // -> [isProduction <= 0x00000001]
[22:27:15.317]    </block>
[22:27:15.317]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:27:15.317]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:27:15.317]        // =>  FALSE
[22:27:15.319]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:27:15.319]    </control>
[22:27:15.319]    <control if="continueId == 4" while="" timeout="0" info="">
[22:27:15.319]      // if-block "continueId == 4"
[22:27:15.319]        // =>  FALSE
[22:27:15.319]      // skip if-block "continueId == 4"
[22:27:15.319]    </control>
[22:27:15.319]    <control if="!isProduction" while="" timeout="0" info="">
[22:27:15.319]      // if-block "!isProduction"
[22:27:15.319]        // =>  FALSE
[22:27:15.319]      // skip if-block "!isProduction"
[22:27:15.319]    </control>
[22:27:15.319]  </sequence>
[22:27:15.319]  
[22:28:10.941]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:28:10.941]  
[22:28:10.942]  <debugvars>
[22:28:10.942]    // Pre-defined
[22:28:10.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:28:10.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:28:10.942]    __dp=0x00000000
[22:28:10.942]    __ap=0x00000000
[22:28:10.943]    __traceout=0x00000000      (Trace Disabled)
[22:28:10.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:28:10.943]    __FlashAddr=0x00000000
[22:28:10.943]    __FlashLen=0x00000000
[22:28:10.943]    __FlashArg=0x00000000
[22:28:10.943]    __FlashOp=0x00000000
[22:28:10.943]    __Result=0x00000000
[22:28:10.943]  </debugvars>
[22:28:10.943]  
[22:28:10.943]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:28:10.943]    <block atomic="false" info="">
[22:28:10.943]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:28:10.943]        // -> [isSWJ <= 0x00000001]
[22:28:10.943]      __var hasDormant = __protocol & 0x00020000;
[22:28:10.943]        // -> [hasDormant <= 0x00000000]
[22:28:10.943]      __var protType   = __protocol & 0x0000FFFF;
[22:28:10.943]        // -> [protType <= 0x00000002]
[22:28:10.943]    </block>
[22:28:10.943]    <control if="protType == 1" while="" timeout="0" info="">
[22:28:10.943]      // if-block "protType == 1"
[22:28:10.943]        // =>  FALSE
[22:28:10.943]      // skip if-block "protType == 1"
[22:28:10.945]    </control>
[22:28:10.945]    <control if="protType == 2" while="" timeout="0" info="">
[22:28:10.945]      // if-block "protType == 2"
[22:28:10.945]        // =>  TRUE
[22:28:10.945]      <control if="isSWJ" while="" timeout="0" info="">
[22:28:10.945]        // if-block "isSWJ"
[22:28:10.945]          // =>  TRUE
[22:28:10.945]        <control if="hasDormant" while="" timeout="0" info="">
[22:28:10.945]          // if-block "hasDormant"
[22:28:10.945]            // =>  FALSE
[22:28:10.945]          // skip if-block "hasDormant"
[22:28:10.945]        </control>
[22:28:10.945]        <control if="!hasDormant" while="" timeout="0" info="">
[22:28:10.945]          // if-block "!hasDormant"
[22:28:10.945]            // =>  TRUE
[22:28:10.945]          <block atomic="false" info="">
[22:28:10.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:28:10.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:28:10.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:28:10.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:28:10.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:28:10.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:28:10.949]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:28:10.954]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:28:10.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:28:10.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:28:10.954]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:28:10.954]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:28:10.954]          </block>
[22:28:10.957]          // end if-block "!hasDormant"
[22:28:10.957]        </control>
[22:28:10.957]        // end if-block "isSWJ"
[22:28:10.957]      </control>
[22:28:10.957]      <control if="!isSWJ" while="" timeout="0" info="">
[22:28:10.957]        // if-block "!isSWJ"
[22:28:10.957]          // =>  FALSE
[22:28:10.957]        // skip if-block "!isSWJ"
[22:28:10.957]      </control>
[22:28:10.957]      <block atomic="false" info="">
[22:28:10.957]        ReadDP(0x0);
[22:28:10.957]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:28:10.957]      </block>
[22:28:10.957]      // end if-block "protType == 2"
[22:28:10.957]    </control>
[22:28:10.957]  </sequence>
[22:28:10.957]  
[22:28:10.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:28:10.962]  
[22:28:10.962]  <debugvars>
[22:28:10.963]    // Pre-defined
[22:28:10.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:28:10.963]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:28:10.963]    __dp=0x00000000
[22:28:10.963]    __ap=0x00000000
[22:28:10.963]    __traceout=0x00000000      (Trace Disabled)
[22:28:10.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:28:10.963]    __FlashAddr=0x00000000
[22:28:10.963]    __FlashLen=0x00000000
[22:28:10.963]    __FlashArg=0x00000000
[22:28:10.963]    __FlashOp=0x00000000
[22:28:10.963]    __Result=0x00000000
[22:28:10.963]  </debugvars>
[22:28:10.963]  
[22:28:10.963]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:28:10.963]    <block atomic="false" info="">
[22:28:10.963]      __var SW_DP_ABORT       = 0x0;
[22:28:10.963]        // -> [SW_DP_ABORT <= 0x00000000]
[22:28:10.963]      __var DP_CTRL_STAT      = 0x4;
[22:28:10.963]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:28:10.963]      __var DP_SELECT         = 0x8;
[22:28:10.963]        // -> [DP_SELECT <= 0x00000008]
[22:28:10.963]      __var powered_down      = 0;
[22:28:10.963]        // -> [powered_down <= 0x00000000]
[22:28:10.963]      WriteDP(DP_SELECT, 0x00000000);
[22:28:10.967]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:28:10.967]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:28:10.972]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:28:10.972]        // -> [powered_down <= 0x00000001]
[22:28:10.972]    </block>
[22:28:10.972]    <control if="powered_down" while="" timeout="0" info="">
[22:28:10.972]      // if-block "powered_down"
[22:28:10.972]        // =>  TRUE
[22:28:10.972]      <block atomic="false" info="">
[22:28:10.973]        Message(0, "Debug/System power-up request sent");
[22:28:10.974]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:28:10.974]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:28:10.974]      </block>
[22:28:10.978]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:28:10.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:28:10.980]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:28:10.980]        // while-condition  =>  FALSE
[22:28:10.980]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:28:10.980]      </control>
[22:28:10.980]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:28:10.980]        // if-block "(__protocol & 0xFFFF) == 1"
[22:28:10.980]          // =>  FALSE
[22:28:10.980]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:28:10.980]      </control>
[22:28:10.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:28:10.980]        // if-block "(__protocol & 0xFFFF) == 2"
[22:28:10.980]          // =>  TRUE
[22:28:10.980]        <block atomic="false" info="">
[22:28:10.980]          Message(0, "executing SWD power up");
[22:28:10.982]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:28:10.983]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:28:10.983]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:28:10.990]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:28:10.990]        </block>
[22:28:10.990]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:28:10.990]      </control>
[22:28:10.990]      // end if-block "powered_down"
[22:28:10.990]    </control>
[22:28:10.990]    <block atomic="false" info="">
[22:28:10.990]      __var DEBUG_PORT_VAL    = 0;
[22:28:10.990]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:28:10.990]      __var ACCESS_POINT_VAL  = 0;
[22:28:10.991]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:28:10.991]      __ap = 1; 
[22:28:10.991]        // -> [__ap <= 0x00000001]
[22:28:10.991]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:28:10.995]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:28:10.995]      __ap = 4;
[22:28:10.996]        // -> [__ap <= 0x00000004]
[22:28:10.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:28:10.999]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:28:10.999]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:28:10.999]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:28:11.000]    </block>
[22:28:11.000]    <block atomic="false" info="">
[22:28:11.000]      __var nReset = 0x80;
[22:28:11.000]        // -> [nReset <= 0x00000080]
[22:28:11.000]      __var canReadPins = 0;
[22:28:11.000]        // -> [canReadPins <= 0x00000000]
[22:28:11.000]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:28:11.005]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:28:11.005]        // -> [canReadPins <= 0x00000001]
[22:28:11.005]    </block>
[22:28:11.005]    <control if="" while="1" timeout="200" info="">
[22:28:11.005]      // while "1"  (timeout="200")
[22:28:11.005]      // while-condition  =>  TRUE
[22:28:11.006]      // while "1"  (timeout="200")
[22:28:11.006]      // while-condition  =>  TRUE
[22:28:11.006]      // while "1"  (timeout="200")
[22:28:11.006]      // while-condition  =>  TRUE
[22:28:11.006]      // while "1"  (timeout="200")
[22:28:11.006]      // while-condition  =>  TRUE
[22:28:11.006]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.007]      // while-condition  =>  TRUE
[22:28:11.007]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.010]      // while "1"  (timeout="200")
[22:28:11.010]      // while-condition  =>  TRUE
[22:28:11.012]      // while "1"  (timeout="200")
[22:28:11.012]      // while-condition  =>  TRUE
[22:28:11.012]      // while "1"  (timeout="200")
[22:28:11.012]      // while-condition  =>  TRUE
[22:28:11.012]      // while "1"  (timeout="200")
[22:28:11.012]      // while-condition  =>  TRUE
[22:28:11.012]      // while "1"  (timeout="200")
[22:28:11.012]      // while-condition  =>  TRUE
[22:28:11.012]      // while "1"  (timeout="200")
[22:28:11.013]      // while-condition  =>  TRUE
[22:28:11.013]      // while "1"  (timeout="200")
[22:28:11.013]      // while-condition  =>  TRUE
[22:28:11.013]      // while "1"  (timeout="200")
[22:28:11.013]      // while-condition  =>  TRUE
[22:28:11.013]      // while "1"  (timeout="200")
[22:28:11.014]      // while-condition  =>  TRUE
[22:28:11.014]      // while "1"  (timeout="200")
[22:28:11.014]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.015]      // while-condition  =>  TRUE
[22:28:11.015]      // while "1"  (timeout="200")
[22:28:11.018]      // while-condition  =>  TRUE
[22:28:11.018]      // while "1"  (timeout="200")
[22:28:11.018]      // while  =>  TIMEOUT
[22:28:11.018]      // end while "1"
[22:28:11.018]    </control>
[22:28:11.018]    <control if="canReadPins" while="" timeout="0" info="">
[22:28:11.018]      // if-block "canReadPins"
[22:28:11.018]        // =>  TRUE
[22:28:11.018]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:28:11.018]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:28:11.018]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:28:11.018]        // while-condition  =>  FALSE
[22:28:11.023]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:28:11.023]      </control>
[22:28:11.023]      // end if-block "canReadPins"
[22:28:11.023]    </control>
[22:28:11.023]    <control if="!canReadPins" while="" timeout="0" info="">
[22:28:11.023]      // if-block "!canReadPins"
[22:28:11.023]        // =>  FALSE
[22:28:11.023]      // skip if-block "!canReadPins"
[22:28:11.023]    </control>
[22:28:11.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:28:11.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:28:11.023]        // =>  TRUE
[22:28:11.023]      <block atomic="false" info="">
[22:28:11.023]        WriteAP(0x00, 0x190008);
[22:28:11.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:28:11.023]        WriteAP(0xF0, 0x01);
[22:28:11.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:28:11.028]      </block>
[22:28:11.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:28:11.028]    </control>
[22:28:11.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:28:11.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:28:11.028]        // =>  FALSE
[22:28:11.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:28:11.028]    </control>
[22:28:11.028]    <block atomic="false" info="">
[22:28:11.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:28:11.034]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:28:11.035]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:28:11.035]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:28:11.036]      __ap = 0; //lets make sure we reset the access point selection
[22:28:11.036]        // -> [__ap <= 0x00000000]
[22:28:11.036]    </block>
[22:28:11.036]  </sequence>
[22:28:11.036]  
[22:28:11.073]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:28:11.073]  
[22:28:11.073]  <debugvars>
[22:28:11.073]    // Pre-defined
[22:28:11.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:28:11.073]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:28:11.073]    __dp=0x00000000
[22:28:11.073]    __ap=0x00000000
[22:28:11.073]    __traceout=0x00000000      (Trace Disabled)
[22:28:11.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:28:11.074]    __FlashAddr=0x00000000
[22:28:11.074]    __FlashLen=0x00000000
[22:28:11.074]    __FlashArg=0x00000000
[22:28:11.074]    __FlashOp=0x00000000
[22:28:11.074]    __Result=0x00000000
[22:28:11.074]  </debugvars>
[22:28:11.074]  
[22:28:11.074]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:28:11.074]    <block atomic="false" info="">
[22:28:11.074]      __var deviceID = 0;
[22:28:11.074]        // -> [deviceID <= 0x00000000]
[22:28:11.074]      __var version = 0;
[22:28:11.074]        // -> [version <= 0x00000000]
[22:28:11.074]      __var partNum = 0;
[22:28:11.074]        // -> [partNum <= 0x00000000]
[22:28:11.074]      __var manuf = 0;
[22:28:11.074]        // -> [manuf <= 0x00000000]
[22:28:11.074]      __var isMSPM0G1X0X_G3X0X = 0;
[22:28:11.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:28:11.074]      __var isProduction = 0;
[22:28:11.074]        // -> [isProduction <= 0x00000000]
[22:28:11.074]      __var continueId = 0;
[22:28:11.074]        // -> [continueId <= 0x00000000]
[22:28:11.074]      deviceID =   Read32(0x41C40004);
[22:28:11.086]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:28:11.086]        // -> [deviceID <= 0x2BB8802F]
[22:28:11.086]      version = deviceID >> 28;
[22:28:11.086]        // -> [version <= 0x00000002]
[22:28:11.086]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:28:11.086]        // -> [partNum <= 0x0000BB88]
[22:28:11.086]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:28:11.086]        // -> [manuf <= 0x00000017]
[22:28:11.086]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:28:11.086]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:28:11.086]      isProduction = (version > 0);
[22:28:11.086]        // -> [isProduction <= 0x00000001]
[22:28:11.086]    </block>
[22:28:11.086]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:28:11.086]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:28:11.086]        // =>  FALSE
[22:28:11.086]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:28:11.090]    </control>
[22:28:11.090]    <control if="continueId == 4" while="" timeout="0" info="">
[22:28:11.090]      // if-block "continueId == 4"
[22:28:11.090]        // =>  FALSE
[22:28:11.090]      // skip if-block "continueId == 4"
[22:28:11.090]    </control>
[22:28:11.090]    <control if="!isProduction" while="" timeout="0" info="">
[22:28:11.090]      // if-block "!isProduction"
[22:28:11.090]        // =>  FALSE
[22:28:11.090]      // skip if-block "!isProduction"
[22:28:11.090]    </control>
[22:28:11.090]  </sequence>
[22:28:11.090]  
[22:29:25.849]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:25.849]  
[22:29:25.859]  <debugvars>
[22:29:25.859]    // Pre-defined
[22:29:25.859]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:25.859]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:25.859]    __dp=0x00000000
[22:29:25.859]    __ap=0x00000000
[22:29:25.859]    __traceout=0x00000000      (Trace Disabled)
[22:29:25.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:25.859]    __FlashAddr=0x00000000
[22:29:25.859]    __FlashLen=0x00000000
[22:29:25.859]    __FlashArg=0x00000000
[22:29:25.859]    __FlashOp=0x00000000
[22:29:25.859]    __Result=0x00000000
[22:29:25.859]  </debugvars>
[22:29:25.859]  
[22:29:25.859]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:25.861]    <block atomic="false" info="">
[22:29:25.861]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:25.861]        // -> [isSWJ <= 0x00000001]
[22:29:25.861]      __var hasDormant = __protocol & 0x00020000;
[22:29:25.861]        // -> [hasDormant <= 0x00000000]
[22:29:25.861]      __var protType   = __protocol & 0x0000FFFF;
[22:29:25.861]        // -> [protType <= 0x00000002]
[22:29:25.861]    </block>
[22:29:25.861]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:25.861]      // if-block "protType == 1"
[22:29:25.861]        // =>  FALSE
[22:29:25.861]      // skip if-block "protType == 1"
[22:29:25.861]    </control>
[22:29:25.862]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:25.862]      // if-block "protType == 2"
[22:29:25.862]        // =>  TRUE
[22:29:25.862]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:25.862]        // if-block "isSWJ"
[22:29:25.862]          // =>  TRUE
[22:29:25.863]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:25.863]          // if-block "hasDormant"
[22:29:25.863]            // =>  FALSE
[22:29:25.863]          // skip if-block "hasDormant"
[22:29:25.863]        </control>
[22:29:25.863]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:25.863]          // if-block "!hasDormant"
[22:29:25.863]            // =>  TRUE
[22:29:25.863]          <block atomic="false" info="">
[22:29:25.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:25.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:25.865]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:25.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:25.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:25.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:25.869]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:25.869]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:25.869]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:25.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:25.873]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:25.874]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:25.874]          </block>
[22:29:25.874]          // end if-block "!hasDormant"
[22:29:25.874]        </control>
[22:29:25.874]        // end if-block "isSWJ"
[22:29:25.874]      </control>
[22:29:25.874]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:25.874]        // if-block "!isSWJ"
[22:29:25.874]          // =>  FALSE
[22:29:25.874]        // skip if-block "!isSWJ"
[22:29:25.874]      </control>
[22:29:25.874]      <block atomic="false" info="">
[22:29:25.874]        ReadDP(0x0);
[22:29:25.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:25.883]      </block>
[22:29:25.883]      // end if-block "protType == 2"
[22:29:25.883]    </control>
[22:29:25.883]  </sequence>
[22:29:25.883]  
[22:29:25.885]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:29:25.885]  
[22:29:25.885]  <debugvars>
[22:29:25.885]    // Pre-defined
[22:29:25.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:25.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:25.885]    __dp=0x00000000
[22:29:25.885]    __ap=0x00000000
[22:29:25.885]    __traceout=0x00000000      (Trace Disabled)
[22:29:25.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:25.885]    __FlashAddr=0x00000000
[22:29:25.885]    __FlashLen=0x00000000
[22:29:25.885]    __FlashArg=0x00000000
[22:29:25.885]    __FlashOp=0x00000000
[22:29:25.885]    __Result=0x00000000
[22:29:25.885]  </debugvars>
[22:29:25.885]  
[22:29:25.885]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:29:25.889]    <block atomic="false" info="">
[22:29:25.889]      __var SW_DP_ABORT       = 0x0;
[22:29:25.889]        // -> [SW_DP_ABORT <= 0x00000000]
[22:29:25.889]      __var DP_CTRL_STAT      = 0x4;
[22:29:25.889]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:29:25.889]      __var DP_SELECT         = 0x8;
[22:29:25.889]        // -> [DP_SELECT <= 0x00000008]
[22:29:25.889]      __var powered_down      = 0;
[22:29:25.889]        // -> [powered_down <= 0x00000000]
[22:29:25.889]      WriteDP(DP_SELECT, 0x00000000);
[22:29:25.895]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:29:25.897]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:29:25.902]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:29:25.903]        // -> [powered_down <= 0x00000001]
[22:29:25.903]    </block>
[22:29:25.903]    <control if="powered_down" while="" timeout="0" info="">
[22:29:25.903]      // if-block "powered_down"
[22:29:25.903]        // =>  TRUE
[22:29:25.903]      <block atomic="false" info="">
[22:29:25.903]        Message(0, "Debug/System power-up request sent");
[22:29:25.905]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:29:25.917]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:29:25.917]      </block>
[22:29:25.917]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:29:25.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:29:25.917]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:29:25.921]        // while-condition  =>  FALSE
[22:29:25.921]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:29:25.921]      </control>
[22:29:25.921]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:29:25.921]        // if-block "(__protocol & 0xFFFF) == 1"
[22:29:25.921]          // =>  FALSE
[22:29:25.921]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:29:25.921]      </control>
[22:29:25.921]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:29:25.921]        // if-block "(__protocol & 0xFFFF) == 2"
[22:29:25.921]          // =>  TRUE
[22:29:25.921]        <block atomic="false" info="">
[22:29:25.921]          Message(0, "executing SWD power up");
[22:29:25.923]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:29:25.925]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:29:25.925]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:29:25.941]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:29:25.941]        </block>
[22:29:25.941]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:29:25.941]      </control>
[22:29:25.941]      // end if-block "powered_down"
[22:29:25.941]    </control>
[22:29:25.941]    <block atomic="false" info="">
[22:29:25.941]      __var DEBUG_PORT_VAL    = 0;
[22:29:25.941]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:29:25.941]      __var ACCESS_POINT_VAL  = 0;
[22:29:25.941]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:29:25.941]      __ap = 1; 
[22:29:25.941]        // -> [__ap <= 0x00000001]
[22:29:25.941]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:29:25.954]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:29:25.954]      __ap = 4;
[22:29:25.954]        // -> [__ap <= 0x00000004]
[22:29:25.954]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:25.969]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:29:25.969]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:29:25.969]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:25.969]    </block>
[22:29:25.969]    <block atomic="false" info="">
[22:29:25.969]      __var nReset = 0x80;
[22:29:25.969]        // -> [nReset <= 0x00000080]
[22:29:25.969]      __var canReadPins = 0;
[22:29:25.969]        // -> [canReadPins <= 0x00000000]
[22:29:25.969]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:29:25.974]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:29:25.974]        // -> [canReadPins <= 0x00000001]
[22:29:25.974]    </block>
[22:29:25.974]    <control if="" while="1" timeout="200" info="">
[22:29:25.974]      // while "1"  (timeout="200")
[22:29:25.974]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.975]      // while "1"  (timeout="200")
[22:29:25.975]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.977]      // while "1"  (timeout="200")
[22:29:25.977]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.981]      // while-condition  =>  TRUE
[22:29:25.981]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.982]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.982]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.982]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.982]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.982]      // while "1"  (timeout="200")
[22:29:25.982]      // while-condition  =>  TRUE
[22:29:25.983]      // while "1"  (timeout="200")
[22:29:25.983]      // while-condition  =>  TRUE
[22:29:25.983]      // while "1"  (timeout="200")
[22:29:25.983]      // while-condition  =>  TRUE
[22:29:25.983]      // while "1"  (timeout="200")
[22:29:25.983]      // while-condition  =>  TRUE
[22:29:25.983]      // while "1"  (timeout="200")
[22:29:25.983]      // while-condition  =>  TRUE
[22:29:25.983]      // while "1"  (timeout="200")
[22:29:25.983]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.985]      // while "1"  (timeout="200")
[22:29:25.985]      // while-condition  =>  TRUE
[22:29:25.989]      // while "1"  (timeout="200")
[22:29:25.989]      // while  =>  TIMEOUT
[22:29:25.989]      // end while "1"
[22:29:25.989]    </control>
[22:29:25.989]    <control if="canReadPins" while="" timeout="0" info="">
[22:29:25.989]      // if-block "canReadPins"
[22:29:25.989]        // =>  TRUE
[22:29:25.989]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:29:25.989]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:29:25.995]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:29:25.995]        // while-condition  =>  FALSE
[22:29:25.995]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:29:25.995]      </control>
[22:29:25.995]      // end if-block "canReadPins"
[22:29:25.995]    </control>
[22:29:25.995]    <control if="!canReadPins" while="" timeout="0" info="">
[22:29:25.995]      // if-block "!canReadPins"
[22:29:25.995]        // =>  FALSE
[22:29:25.995]      // skip if-block "!canReadPins"
[22:29:25.995]    </control>
[22:29:25.997]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:29:25.997]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:25.997]        // =>  TRUE
[22:29:25.997]      <block atomic="false" info="">
[22:29:25.997]        WriteAP(0x00, 0x190008);
[22:29:25.997]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:25.997]        WriteAP(0xF0, 0x01);
[22:29:26.008]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:26.008]      </block>
[22:29:26.008]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:26.008]    </control>
[22:29:26.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:29:26.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:26.008]        // =>  FALSE
[22:29:26.008]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:26.008]    </control>
[22:29:26.008]    <block atomic="false" info="">
[22:29:26.008]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:26.025]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:29:26.025]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:29:26.025]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:26.025]      __ap = 0; //lets make sure we reset the access point selection
[22:29:26.025]        // -> [__ap <= 0x00000000]
[22:29:26.025]    </block>
[22:29:26.025]  </sequence>
[22:29:26.025]  
[22:29:26.059]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:29:26.059]  
[22:29:26.059]  <debugvars>
[22:29:26.059]    // Pre-defined
[22:29:26.059]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:26.059]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:26.059]    __dp=0x00000000
[22:29:26.062]    __ap=0x00000000
[22:29:26.062]    __traceout=0x00000000      (Trace Disabled)
[22:29:26.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:26.062]    __FlashAddr=0x00000000
[22:29:26.062]    __FlashLen=0x00000000
[22:29:26.062]    __FlashArg=0x00000000
[22:29:26.062]    __FlashOp=0x00000000
[22:29:26.062]    __Result=0x00000000
[22:29:26.062]  </debugvars>
[22:29:26.062]  
[22:29:26.062]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:29:26.063]    <block atomic="false" info="">
[22:29:26.063]      __var deviceID = 0;
[22:29:26.063]        // -> [deviceID <= 0x00000000]
[22:29:26.063]      __var version = 0;
[22:29:26.063]        // -> [version <= 0x00000000]
[22:29:26.063]      __var partNum = 0;
[22:29:26.063]        // -> [partNum <= 0x00000000]
[22:29:26.063]      __var manuf = 0;
[22:29:26.064]        // -> [manuf <= 0x00000000]
[22:29:26.064]      __var isMSPM0G1X0X_G3X0X = 0;
[22:29:26.064]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:29:26.064]      __var isProduction = 0;
[22:29:26.064]        // -> [isProduction <= 0x00000000]
[22:29:26.064]      __var continueId = 0;
[22:29:26.064]        // -> [continueId <= 0x00000000]
[22:29:26.064]      deviceID =   Read32(0x41C40004);
[22:29:26.079]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:29:26.079]        // -> [deviceID <= 0x2BB8802F]
[22:29:26.079]      version = deviceID >> 28;
[22:29:26.079]        // -> [version <= 0x00000002]
[22:29:26.079]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:29:26.079]        // -> [partNum <= 0x0000BB88]
[22:29:26.079]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:29:26.079]        // -> [manuf <= 0x00000017]
[22:29:26.079]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:29:26.079]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:29:26.079]      isProduction = (version > 0);
[22:29:26.079]        // -> [isProduction <= 0x00000001]
[22:29:26.079]    </block>
[22:29:26.079]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:29:26.079]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:29:26.079]        // =>  FALSE
[22:29:26.079]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:29:26.079]    </control>
[22:29:26.082]    <control if="continueId == 4" while="" timeout="0" info="">
[22:29:26.082]      // if-block "continueId == 4"
[22:29:26.082]        // =>  FALSE
[22:29:26.082]      // skip if-block "continueId == 4"
[22:29:26.082]    </control>
[22:29:26.082]    <control if="!isProduction" while="" timeout="0" info="">
[22:29:26.082]      // if-block "!isProduction"
[22:29:26.082]        // =>  FALSE
[22:29:26.082]      // skip if-block "!isProduction"
[22:29:26.082]    </control>
[22:29:26.083]  </sequence>
[22:29:26.083]  
[22:31:20.344]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:31:20.344]  
[22:31:20.352]  <debugvars>
[22:31:20.352]    // Pre-defined
[22:31:20.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:20.352]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:20.352]    __dp=0x00000000
[22:31:20.352]    __ap=0x00000000
[22:31:20.352]    __traceout=0x00000000      (Trace Disabled)
[22:31:20.352]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:20.352]    __FlashAddr=0x00000000
[22:31:20.352]    __FlashLen=0x00000000
[22:31:20.354]    __FlashArg=0x00000000
[22:31:20.354]    __FlashOp=0x00000000
[22:31:20.354]    __Result=0x00000000
[22:31:20.354]  </debugvars>
[22:31:20.354]  
[22:31:20.354]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:31:20.354]    <block atomic="false" info="">
[22:31:20.354]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:31:20.354]        // -> [isSWJ <= 0x00000001]
[22:31:20.354]      __var hasDormant = __protocol & 0x00020000;
[22:31:20.354]        // -> [hasDormant <= 0x00000000]
[22:31:20.355]      __var protType   = __protocol & 0x0000FFFF;
[22:31:20.355]        // -> [protType <= 0x00000002]
[22:31:20.355]    </block>
[22:31:20.355]    <control if="protType == 1" while="" timeout="0" info="">
[22:31:20.355]      // if-block "protType == 1"
[22:31:20.355]        // =>  FALSE
[22:31:20.355]      // skip if-block "protType == 1"
[22:31:20.355]    </control>
[22:31:20.355]    <control if="protType == 2" while="" timeout="0" info="">
[22:31:20.355]      // if-block "protType == 2"
[22:31:20.355]        // =>  TRUE
[22:31:20.356]      <control if="isSWJ" while="" timeout="0" info="">
[22:31:20.356]        // if-block "isSWJ"
[22:31:20.356]          // =>  TRUE
[22:31:20.356]        <control if="hasDormant" while="" timeout="0" info="">
[22:31:20.356]          // if-block "hasDormant"
[22:31:20.356]            // =>  FALSE
[22:31:20.356]          // skip if-block "hasDormant"
[22:31:20.356]        </control>
[22:31:20.356]        <control if="!hasDormant" while="" timeout="0" info="">
[22:31:20.356]          // if-block "!hasDormant"
[22:31:20.356]            // =>  TRUE
[22:31:20.356]          <block atomic="false" info="">
[22:31:20.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:31:20.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:20.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:31:20.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:31:20.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:31:20.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:20.362]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:31:20.364]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:31:20.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:31:20.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:20.365]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:31:20.366]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:31:20.366]          </block>
[22:31:20.366]          // end if-block "!hasDormant"
[22:31:20.366]        </control>
[22:31:20.366]        // end if-block "isSWJ"
[22:31:20.366]      </control>
[22:31:20.366]      <control if="!isSWJ" while="" timeout="0" info="">
[22:31:20.366]        // if-block "!isSWJ"
[22:31:20.366]          // =>  FALSE
[22:31:20.366]        // skip if-block "!isSWJ"
[22:31:20.366]      </control>
[22:31:20.366]      <block atomic="false" info="">
[22:31:20.366]        ReadDP(0x0);
[22:31:20.369]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:31:20.369]      </block>
[22:31:20.369]      // end if-block "protType == 2"
[22:31:20.369]    </control>
[22:31:20.371]  </sequence>
[22:31:20.371]  
[22:31:20.371]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:31:20.371]  
[22:31:20.371]  <debugvars>
[22:31:20.371]    // Pre-defined
[22:31:20.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:20.371]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:20.371]    __dp=0x00000000
[22:31:20.371]    __ap=0x00000000
[22:31:20.374]    __traceout=0x00000000      (Trace Disabled)
[22:31:20.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:20.374]    __FlashAddr=0x00000000
[22:31:20.374]    __FlashLen=0x00000000
[22:31:20.374]    __FlashArg=0x00000000
[22:31:20.374]    __FlashOp=0x00000000
[22:31:20.374]    __Result=0x00000000
[22:31:20.374]  </debugvars>
[22:31:20.374]  
[22:31:20.374]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:31:20.374]    <block atomic="false" info="">
[22:31:20.375]      __var SW_DP_ABORT       = 0x0;
[22:31:20.375]        // -> [SW_DP_ABORT <= 0x00000000]
[22:31:20.375]      __var DP_CTRL_STAT      = 0x4;
[22:31:20.375]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:31:20.375]      __var DP_SELECT         = 0x8;
[22:31:20.375]        // -> [DP_SELECT <= 0x00000008]
[22:31:20.375]      __var powered_down      = 0;
[22:31:20.375]        // -> [powered_down <= 0x00000000]
[22:31:20.375]      WriteDP(DP_SELECT, 0x00000000);
[22:31:20.375]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:31:20.375]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:31:20.378]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:31:20.378]        // -> [powered_down <= 0x00000001]
[22:31:20.378]    </block>
[22:31:20.378]    <control if="powered_down" while="" timeout="0" info="">
[22:31:20.378]      // if-block "powered_down"
[22:31:20.378]        // =>  TRUE
[22:31:20.378]      <block atomic="false" info="">
[22:31:20.378]        Message(0, "Debug/System power-up request sent");
[22:31:20.384]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:31:20.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:31:20.385]      </block>
[22:31:20.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:31:20.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:31:20.388]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:31:20.388]        // while-condition  =>  FALSE
[22:31:20.389]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:31:20.389]      </control>
[22:31:20.389]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:31:20.389]        // if-block "(__protocol & 0xFFFF) == 1"
[22:31:20.389]          // =>  FALSE
[22:31:20.389]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:31:20.389]      </control>
[22:31:20.389]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:31:20.389]        // if-block "(__protocol & 0xFFFF) == 2"
[22:31:20.389]          // =>  TRUE
[22:31:20.389]        <block atomic="false" info="">
[22:31:20.389]          Message(0, "executing SWD power up");
[22:31:20.391]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:31:20.391]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:31:20.394]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:31:20.395]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:31:20.395]        </block>
[22:31:20.395]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:31:20.396]      </control>
[22:31:20.396]      // end if-block "powered_down"
[22:31:20.396]    </control>
[22:31:20.396]    <block atomic="false" info="">
[22:31:20.396]      __var DEBUG_PORT_VAL    = 0;
[22:31:20.396]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:31:20.396]      __var ACCESS_POINT_VAL  = 0;
[22:31:20.396]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:31:20.396]      __ap = 1; 
[22:31:20.396]        // -> [__ap <= 0x00000001]
[22:31:20.396]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:31:20.399]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:31:20.399]      __ap = 4;
[22:31:20.399]        // -> [__ap <= 0x00000004]
[22:31:20.399]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:20.406]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:31:20.406]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:31:20.406]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:20.406]    </block>
[22:31:20.406]    <block atomic="false" info="">
[22:31:20.406]      __var nReset = 0x80;
[22:31:20.406]        // -> [nReset <= 0x00000080]
[22:31:20.406]      __var canReadPins = 0;
[22:31:20.406]        // -> [canReadPins <= 0x00000000]
[22:31:20.406]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:31:20.410]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:31:20.410]        // -> [canReadPins <= 0x00000001]
[22:31:20.410]    </block>
[22:31:20.410]    <control if="" while="1" timeout="200" info="">
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.410]      // while "1"  (timeout="200")
[22:31:20.410]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.414]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.414]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.414]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.414]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.414]      // while-condition  =>  TRUE
[22:31:20.414]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.415]      // while "1"  (timeout="200")
[22:31:20.415]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.418]      // while-condition  =>  TRUE
[22:31:20.418]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.422]      // while-condition  =>  TRUE
[22:31:20.422]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.424]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.424]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.424]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.424]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.424]      // while "1"  (timeout="200")
[22:31:20.424]      // while-condition  =>  TRUE
[22:31:20.425]      // while "1"  (timeout="200")
[22:31:20.425]      // while  =>  TIMEOUT
[22:31:20.425]      // end while "1"
[22:31:20.425]    </control>
[22:31:20.425]    <control if="canReadPins" while="" timeout="0" info="">
[22:31:20.425]      // if-block "canReadPins"
[22:31:20.425]        // =>  TRUE
[22:31:20.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:31:20.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:31:20.426]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:31:20.426]        // while-condition  =>  FALSE
[22:31:20.426]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:31:20.426]      </control>
[22:31:20.426]      // end if-block "canReadPins"
[22:31:20.426]    </control>
[22:31:20.426]    <control if="!canReadPins" while="" timeout="0" info="">
[22:31:20.426]      // if-block "!canReadPins"
[22:31:20.426]        // =>  FALSE
[22:31:20.426]      // skip if-block "!canReadPins"
[22:31:20.426]    </control>
[22:31:20.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:31:20.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:20.426]        // =>  TRUE
[22:31:20.426]      <block atomic="false" info="">
[22:31:20.426]        WriteAP(0x00, 0x190008);
[22:31:20.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:20.430]        WriteAP(0xF0, 0x01);
[22:31:20.435]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:20.435]      </block>
[22:31:20.435]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:20.435]    </control>
[22:31:20.435]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:31:20.435]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:20.436]        // =>  FALSE
[22:31:20.436]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:20.436]    </control>
[22:31:20.436]    <block atomic="false" info="">
[22:31:20.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:20.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:31:20.441]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:31:20.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:20.442]      __ap = 0; //lets make sure we reset the access point selection
[22:31:20.442]        // -> [__ap <= 0x00000000]
[22:31:20.442]    </block>
[22:31:20.442]  </sequence>
[22:31:20.442]  
[22:31:20.467]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:31:20.467]  
[22:31:20.467]  <debugvars>
[22:31:20.467]    // Pre-defined
[22:31:20.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:20.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:31:20.467]    __dp=0x00000000
[22:31:20.467]    __ap=0x00000000
[22:31:20.467]    __traceout=0x00000000      (Trace Disabled)
[22:31:20.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:20.467]    __FlashAddr=0x00000000
[22:31:20.467]    __FlashLen=0x00000000
[22:31:20.467]    __FlashArg=0x00000000
[22:31:20.467]    __FlashOp=0x00000000
[22:31:20.467]    __Result=0x00000000
[22:31:20.467]  </debugvars>
[22:31:20.467]  
[22:31:20.467]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:31:20.467]    <block atomic="false" info="">
[22:31:20.467]      __var deviceID = 0;
[22:31:20.467]        // -> [deviceID <= 0x00000000]
[22:31:20.467]      __var version = 0;
[22:31:20.467]        // -> [version <= 0x00000000]
[22:31:20.470]      __var partNum = 0;
[22:31:20.470]        // -> [partNum <= 0x00000000]
[22:31:20.470]      __var manuf = 0;
[22:31:20.470]        // -> [manuf <= 0x00000000]
[22:31:20.470]      __var isMSPM0G1X0X_G3X0X = 0;
[22:31:20.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:31:20.470]      __var isProduction = 0;
[22:31:20.470]        // -> [isProduction <= 0x00000000]
[22:31:20.470]      __var continueId = 0;
[22:31:20.470]        // -> [continueId <= 0x00000000]
[22:31:20.470]      deviceID =   Read32(0x41C40004);
[22:31:20.478]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:31:20.478]        // -> [deviceID <= 0x2BB8802F]
[22:31:20.478]      version = deviceID >> 28;
[22:31:20.478]        // -> [version <= 0x00000002]
[22:31:20.478]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:31:20.478]        // -> [partNum <= 0x0000BB88]
[22:31:20.478]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:31:20.478]        // -> [manuf <= 0x00000017]
[22:31:20.478]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:31:20.478]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:31:20.478]      isProduction = (version > 0);
[22:31:20.478]        // -> [isProduction <= 0x00000001]
[22:31:20.478]    </block>
[22:31:20.478]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:31:20.478]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:31:20.478]        // =>  FALSE
[22:31:20.478]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:31:20.478]    </control>
[22:31:20.478]    <control if="continueId == 4" while="" timeout="0" info="">
[22:31:20.482]      // if-block "continueId == 4"
[22:31:20.482]        // =>  FALSE
[22:31:20.482]      // skip if-block "continueId == 4"
[22:31:20.482]    </control>
[22:31:20.482]    <control if="!isProduction" while="" timeout="0" info="">
[22:31:20.482]      // if-block "!isProduction"
[22:31:20.482]        // =>  FALSE
[22:31:20.482]      // skip if-block "!isProduction"
[22:31:20.482]    </control>
[22:31:20.482]  </sequence>
[22:31:20.482]  
[22:31:44.825]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:31:44.825]  
[22:31:44.825]  <debugvars>
[22:31:44.826]    // Pre-defined
[22:31:44.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:44.826]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:31:44.826]    __dp=0x00000000
[22:31:44.826]    __ap=0x00000000
[22:31:44.826]    __traceout=0x00000000      (Trace Disabled)
[22:31:44.826]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:44.827]    __FlashAddr=0x00000000
[22:31:44.827]    __FlashLen=0x00000000
[22:31:44.827]    __FlashArg=0x00000000
[22:31:44.827]    __FlashOp=0x00000000
[22:31:44.827]    __Result=0x00000000
[22:31:44.827]  </debugvars>
[22:31:44.827]  
[22:31:44.827]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:31:44.828]    <block atomic="false" info="">
[22:31:44.828]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:31:44.828]        // -> [isSWJ <= 0x00000001]
[22:31:44.828]      __var hasDormant = __protocol & 0x00020000;
[22:31:44.828]        // -> [hasDormant <= 0x00000000]
[22:31:44.828]      __var protType   = __protocol & 0x0000FFFF;
[22:31:44.828]        // -> [protType <= 0x00000002]
[22:31:44.828]    </block>
[22:31:44.828]    <control if="protType == 1" while="" timeout="0" info="">
[22:31:44.828]      // if-block "protType == 1"
[22:31:44.828]        // =>  FALSE
[22:31:44.828]      // skip if-block "protType == 1"
[22:31:44.828]    </control>
[22:31:44.828]    <control if="protType == 2" while="" timeout="0" info="">
[22:31:44.828]      // if-block "protType == 2"
[22:31:44.828]        // =>  TRUE
[22:31:44.828]      <control if="isSWJ" while="" timeout="0" info="">
[22:31:44.828]        // if-block "isSWJ"
[22:31:44.828]          // =>  TRUE
[22:31:44.830]        <control if="hasDormant" while="" timeout="0" info="">
[22:31:44.830]          // if-block "hasDormant"
[22:31:44.830]            // =>  FALSE
[22:31:44.830]          // skip if-block "hasDormant"
[22:31:44.830]        </control>
[22:31:44.830]        <control if="!hasDormant" while="" timeout="0" info="">
[22:31:44.830]          // if-block "!hasDormant"
[22:31:44.830]            // =>  TRUE
[22:31:44.830]          <block atomic="false" info="">
[22:31:44.830]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:31:44.833]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:44.833]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:31:44.835]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:31:44.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:31:44.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:44.836]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:31:44.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:31:44.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:31:44.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:31:44.844]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:31:44.846]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:31:44.846]          </block>
[22:31:44.846]          // end if-block "!hasDormant"
[22:31:44.846]        </control>
[22:31:44.846]        // end if-block "isSWJ"
[22:31:44.846]      </control>
[22:31:44.846]      <control if="!isSWJ" while="" timeout="0" info="">
[22:31:44.846]        // if-block "!isSWJ"
[22:31:44.846]          // =>  FALSE
[22:31:44.846]        // skip if-block "!isSWJ"
[22:31:44.846]      </control>
[22:31:44.847]      <block atomic="false" info="">
[22:31:44.847]        ReadDP(0x0);
[22:31:44.848]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:31:44.848]      </block>
[22:31:44.848]      // end if-block "protType == 2"
[22:31:44.848]    </control>
[22:31:44.848]  </sequence>
[22:31:44.848]  
[22:31:44.851]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:31:44.851]  
[22:31:44.851]  <debugvars>
[22:31:44.851]    // Pre-defined
[22:31:44.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:44.851]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:31:44.851]    __dp=0x00000000
[22:31:44.851]    __ap=0x00000000
[22:31:44.851]    __traceout=0x00000000      (Trace Disabled)
[22:31:44.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:44.851]    __FlashAddr=0x00000000
[22:31:44.851]    __FlashLen=0x00000000
[22:31:44.851]    __FlashArg=0x00000000
[22:31:44.851]    __FlashOp=0x00000000
[22:31:44.851]    __Result=0x00000000
[22:31:44.851]  </debugvars>
[22:31:44.851]  
[22:31:44.851]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:31:44.851]    <block atomic="false" info="">
[22:31:44.851]      __var SW_DP_ABORT       = 0x0;
[22:31:44.851]        // -> [SW_DP_ABORT <= 0x00000000]
[22:31:44.851]      __var DP_CTRL_STAT      = 0x4;
[22:31:44.851]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:31:44.851]      __var DP_SELECT         = 0x8;
[22:31:44.851]        // -> [DP_SELECT <= 0x00000008]
[22:31:44.854]      __var powered_down      = 0;
[22:31:44.854]        // -> [powered_down <= 0x00000000]
[22:31:44.854]      WriteDP(DP_SELECT, 0x00000000);
[22:31:44.856]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:31:44.856]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:31:44.858]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:31:44.858]        // -> [powered_down <= 0x00000001]
[22:31:44.858]    </block>
[22:31:44.858]    <control if="powered_down" while="" timeout="0" info="">
[22:31:44.858]      // if-block "powered_down"
[22:31:44.858]        // =>  TRUE
[22:31:44.858]      <block atomic="false" info="">
[22:31:44.858]        Message(0, "Debug/System power-up request sent");
[22:31:44.858]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:31:44.863]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:31:44.863]      </block>
[22:31:44.863]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:31:44.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:31:44.864]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:31:44.864]        // while-condition  =>  FALSE
[22:31:44.865]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:31:44.865]      </control>
[22:31:44.865]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:31:44.865]        // if-block "(__protocol & 0xFFFF) == 1"
[22:31:44.865]          // =>  FALSE
[22:31:44.865]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:31:44.865]      </control>
[22:31:44.865]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:31:44.865]        // if-block "(__protocol & 0xFFFF) == 2"
[22:31:44.865]          // =>  TRUE
[22:31:44.865]        <block atomic="false" info="">
[22:31:44.865]          Message(0, "executing SWD power up");
[22:31:44.868]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:31:44.869]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:31:44.869]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:31:44.873]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:31:44.873]        </block>
[22:31:44.873]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:31:44.873]      </control>
[22:31:44.874]      // end if-block "powered_down"
[22:31:44.874]    </control>
[22:31:44.874]    <block atomic="false" info="">
[22:31:44.874]      __var DEBUG_PORT_VAL    = 0;
[22:31:44.874]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:31:44.874]      __var ACCESS_POINT_VAL  = 0;
[22:31:44.874]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:31:44.874]      __ap = 1; 
[22:31:44.874]        // -> [__ap <= 0x00000001]
[22:31:44.874]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:31:44.879]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:31:44.879]      __ap = 4;
[22:31:44.879]        // -> [__ap <= 0x00000004]
[22:31:44.879]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:44.888]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:31:44.888]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:31:44.888]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:44.891]    </block>
[22:31:44.891]    <block atomic="false" info="">
[22:31:44.891]      __var nReset = 0x80;
[22:31:44.891]        // -> [nReset <= 0x00000080]
[22:31:44.891]      __var canReadPins = 0;
[22:31:44.891]        // -> [canReadPins <= 0x00000000]
[22:31:44.891]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:31:44.893]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:31:44.893]        // -> [canReadPins <= 0x00000001]
[22:31:44.893]    </block>
[22:31:44.893]    <control if="" while="1" timeout="200" info="">
[22:31:44.893]      // while "1"  (timeout="200")
[22:31:44.894]      // while-condition  =>  TRUE
[22:31:44.894]      // while "1"  (timeout="200")
[22:31:44.894]      // while-condition  =>  TRUE
[22:31:44.894]      // while "1"  (timeout="200")
[22:31:44.894]      // while-condition  =>  TRUE
[22:31:44.894]      // while "1"  (timeout="200")
[22:31:44.894]      // while-condition  =>  TRUE
[22:31:44.894]      // while "1"  (timeout="200")
[22:31:44.895]      // while-condition  =>  TRUE
[22:31:44.895]      // while "1"  (timeout="200")
[22:31:44.895]      // while-condition  =>  TRUE
[22:31:44.895]      // while "1"  (timeout="200")
[22:31:44.895]      // while-condition  =>  TRUE
[22:31:44.895]      // while "1"  (timeout="200")
[22:31:44.895]      // while-condition  =>  TRUE
[22:31:44.895]      // while "1"  (timeout="200")
[22:31:44.896]      // while-condition  =>  TRUE
[22:31:44.896]      // while "1"  (timeout="200")
[22:31:44.896]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.897]      // while-condition  =>  TRUE
[22:31:44.897]      // while "1"  (timeout="200")
[22:31:44.899]      // while-condition  =>  TRUE
[22:31:44.899]      // while "1"  (timeout="200")
[22:31:44.899]      // while-condition  =>  TRUE
[22:31:44.899]      // while "1"  (timeout="200")
[22:31:44.899]      // while-condition  =>  TRUE
[22:31:44.899]      // while "1"  (timeout="200")
[22:31:44.899]      // while-condition  =>  TRUE
[22:31:44.899]      // while "1"  (timeout="200")
[22:31:44.899]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.900]      // while-condition  =>  TRUE
[22:31:44.900]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.903]      // while-condition  =>  TRUE
[22:31:44.903]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.904]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.904]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.904]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.904]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.904]      // while "1"  (timeout="200")
[22:31:44.904]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.905]      // while-condition  =>  TRUE
[22:31:44.905]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.907]      // while-condition  =>  TRUE
[22:31:44.907]      // while "1"  (timeout="200")
[22:31:44.911]      // while-condition  =>  TRUE
[22:31:44.911]      // while "1"  (timeout="200")
[22:31:44.911]      // while  =>  TIMEOUT
[22:31:44.911]      // end while "1"
[22:31:44.911]    </control>
[22:31:44.911]    <control if="canReadPins" while="" timeout="0" info="">
[22:31:44.912]      // if-block "canReadPins"
[22:31:44.913]        // =>  TRUE
[22:31:44.913]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:31:44.913]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:31:44.914]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:31:44.914]        // while-condition  =>  FALSE
[22:31:44.914]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:31:44.914]      </control>
[22:31:44.915]      // end if-block "canReadPins"
[22:31:44.915]    </control>
[22:31:44.915]    <control if="!canReadPins" while="" timeout="0" info="">
[22:31:44.915]      // if-block "!canReadPins"
[22:31:44.915]        // =>  FALSE
[22:31:44.915]      // skip if-block "!canReadPins"
[22:31:44.915]    </control>
[22:31:44.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:31:44.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:44.916]        // =>  TRUE
[22:31:44.916]      <block atomic="false" info="">
[22:31:44.916]        WriteAP(0x00, 0x190008);
[22:31:44.917]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:44.917]        WriteAP(0xF0, 0x01);
[22:31:44.923]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:31:44.923]      </block>
[22:31:44.923]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:31:44.923]    </control>
[22:31:44.923]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:31:44.923]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:44.925]        // =>  FALSE
[22:31:44.925]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:31:44.925]    </control>
[22:31:44.925]    <block atomic="false" info="">
[22:31:44.925]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:31:44.928]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:31:44.928]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:31:44.928]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:31:44.931]      __ap = 0; //lets make sure we reset the access point selection
[22:31:44.931]        // -> [__ap <= 0x00000000]
[22:31:44.932]    </block>
[22:31:44.932]  </sequence>
[22:31:44.932]  
[22:31:44.954]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:31:44.954]  
[22:31:44.954]  <debugvars>
[22:31:44.954]    // Pre-defined
[22:31:44.954]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:31:44.955]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:31:44.955]    __dp=0x00000000
[22:31:44.955]    __ap=0x00000000
[22:31:44.955]    __traceout=0x00000000      (Trace Disabled)
[22:31:44.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:31:44.955]    __FlashAddr=0x00000000
[22:31:44.955]    __FlashLen=0x00000000
[22:31:44.955]    __FlashArg=0x00000000
[22:31:44.955]    __FlashOp=0x00000000
[22:31:44.955]    __Result=0x00000000
[22:31:44.955]  </debugvars>
[22:31:44.956]  
[22:31:44.956]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:31:44.956]    <block atomic="false" info="">
[22:31:44.956]      __var deviceID = 0;
[22:31:44.956]        // -> [deviceID <= 0x00000000]
[22:31:44.956]      __var version = 0;
[22:31:44.956]        // -> [version <= 0x00000000]
[22:31:44.956]      __var partNum = 0;
[22:31:44.956]        // -> [partNum <= 0x00000000]
[22:31:44.956]      __var manuf = 0;
[22:31:44.956]        // -> [manuf <= 0x00000000]
[22:31:44.956]      __var isMSPM0G1X0X_G3X0X = 0;
[22:31:44.956]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:31:44.956]      __var isProduction = 0;
[22:31:44.956]        // -> [isProduction <= 0x00000000]
[22:31:44.956]      __var continueId = 0;
[22:31:44.956]        // -> [continueId <= 0x00000000]
[22:31:44.956]      deviceID =   Read32(0x41C40004);
[22:31:44.965]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:31:44.966]        // -> [deviceID <= 0x2BB8802F]
[22:31:44.966]      version = deviceID >> 28;
[22:31:44.966]        // -> [version <= 0x00000002]
[22:31:44.966]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:31:44.966]        // -> [partNum <= 0x0000BB88]
[22:31:44.966]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:31:44.966]        // -> [manuf <= 0x00000017]
[22:31:44.966]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:31:44.966]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:31:44.966]      isProduction = (version > 0);
[22:31:44.966]        // -> [isProduction <= 0x00000001]
[22:31:44.966]    </block>
[22:31:44.966]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:31:44.966]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:31:44.966]        // =>  FALSE
[22:31:44.966]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:31:44.966]    </control>
[22:31:44.968]    <control if="continueId == 4" while="" timeout="0" info="">
[22:31:44.968]      // if-block "continueId == 4"
[22:31:44.968]        // =>  FALSE
[22:31:44.968]      // skip if-block "continueId == 4"
[22:31:44.968]    </control>
[22:31:44.968]    <control if="!isProduction" while="" timeout="0" info="">
[22:31:44.968]      // if-block "!isProduction"
[22:31:44.968]        // =>  FALSE
[22:31:44.968]      // skip if-block "!isProduction"
[22:31:44.968]    </control>
[22:31:44.968]  </sequence>
[22:31:44.968]  
[22:32:15.334]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:32:15.334]  
[22:32:15.344]  <debugvars>
[22:32:15.344]    // Pre-defined
[22:32:15.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:15.344]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:32:15.344]    __dp=0x00000000
[22:32:15.345]    __ap=0x00000000
[22:32:15.345]    __traceout=0x00000000      (Trace Disabled)
[22:32:15.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:15.345]    __FlashAddr=0x00000000
[22:32:15.345]    __FlashLen=0x00000000
[22:32:15.345]    __FlashArg=0x00000000
[22:32:15.345]    __FlashOp=0x00000000
[22:32:15.345]    __Result=0x00000000
[22:32:15.345]  </debugvars>
[22:32:15.345]  
[22:32:15.345]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:32:15.346]    <block atomic="false" info="">
[22:32:15.346]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:32:15.346]        // -> [isSWJ <= 0x00000001]
[22:32:15.346]      __var hasDormant = __protocol & 0x00020000;
[22:32:15.346]        // -> [hasDormant <= 0x00000000]
[22:32:15.346]      __var protType   = __protocol & 0x0000FFFF;
[22:32:15.346]        // -> [protType <= 0x00000002]
[22:32:15.346]    </block>
[22:32:15.346]    <control if="protType == 1" while="" timeout="0" info="">
[22:32:15.346]      // if-block "protType == 1"
[22:32:15.346]        // =>  FALSE
[22:32:15.346]      // skip if-block "protType == 1"
[22:32:15.346]    </control>
[22:32:15.346]    <control if="protType == 2" while="" timeout="0" info="">
[22:32:15.346]      // if-block "protType == 2"
[22:32:15.346]        // =>  TRUE
[22:32:15.346]      <control if="isSWJ" while="" timeout="0" info="">
[22:32:15.346]        // if-block "isSWJ"
[22:32:15.346]          // =>  TRUE
[22:32:15.346]        <control if="hasDormant" while="" timeout="0" info="">
[22:32:15.346]          // if-block "hasDormant"
[22:32:15.346]            // =>  FALSE
[22:32:15.346]          // skip if-block "hasDormant"
[22:32:15.348]        </control>
[22:32:15.348]        <control if="!hasDormant" while="" timeout="0" info="">
[22:32:15.348]          // if-block "!hasDormant"
[22:32:15.348]            // =>  TRUE
[22:32:15.348]          <block atomic="false" info="">
[22:32:15.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:32:15.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:15.348]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:32:15.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:32:15.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:32:15.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:15.360]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:32:15.360]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:32:15.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:32:15.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:15.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:32:15.365]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:32:15.365]          </block>
[22:32:15.365]          // end if-block "!hasDormant"
[22:32:15.365]        </control>
[22:32:15.365]        // end if-block "isSWJ"
[22:32:15.365]      </control>
[22:32:15.366]      <control if="!isSWJ" while="" timeout="0" info="">
[22:32:15.366]        // if-block "!isSWJ"
[22:32:15.366]          // =>  FALSE
[22:32:15.366]        // skip if-block "!isSWJ"
[22:32:15.366]      </control>
[22:32:15.366]      <block atomic="false" info="">
[22:32:15.366]        ReadDP(0x0);
[22:32:15.366]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:32:15.366]      </block>
[22:32:15.366]      // end if-block "protType == 2"
[22:32:15.366]    </control>
[22:32:15.368]  </sequence>
[22:32:15.368]  
[22:32:15.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:32:15.381]  
[22:32:15.381]  <debugvars>
[22:32:15.381]    // Pre-defined
[22:32:15.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:15.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:32:15.381]    __dp=0x00000000
[22:32:15.381]    __ap=0x00000000
[22:32:15.381]    __traceout=0x00000000      (Trace Disabled)
[22:32:15.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:15.381]    __FlashAddr=0x00000000
[22:32:15.381]    __FlashLen=0x00000000
[22:32:15.381]    __FlashArg=0x00000000
[22:32:15.381]    __FlashOp=0x00000000
[22:32:15.381]    __Result=0x00000000
[22:32:15.381]  </debugvars>
[22:32:15.381]  
[22:32:15.381]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:32:15.381]    <block atomic="false" info="">
[22:32:15.381]      __var SW_DP_ABORT       = 0x0;
[22:32:15.381]        // -> [SW_DP_ABORT <= 0x00000000]
[22:32:15.381]      __var DP_CTRL_STAT      = 0x4;
[22:32:15.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:32:15.384]      __var DP_SELECT         = 0x8;
[22:32:15.384]        // -> [DP_SELECT <= 0x00000008]
[22:32:15.384]      __var powered_down      = 0;
[22:32:15.384]        // -> [powered_down <= 0x00000000]
[22:32:15.384]      WriteDP(DP_SELECT, 0x00000000);
[22:32:15.388]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:32:15.388]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:32:15.396]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:32:15.396]        // -> [powered_down <= 0x00000001]
[22:32:15.396]    </block>
[22:32:15.396]    <control if="powered_down" while="" timeout="0" info="">
[22:32:15.396]      // if-block "powered_down"
[22:32:15.396]        // =>  TRUE
[22:32:15.396]      <block atomic="false" info="">
[22:32:15.396]        Message(0, "Debug/System power-up request sent");
[22:32:15.396]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:32:15.400]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:32:15.400]      </block>
[22:32:15.400]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:32:15.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:32:15.405]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:32:15.405]        // while-condition  =>  FALSE
[22:32:15.405]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:32:15.405]      </control>
[22:32:15.405]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:32:15.406]        // if-block "(__protocol & 0xFFFF) == 1"
[22:32:15.406]          // =>  FALSE
[22:32:15.406]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:32:15.406]      </control>
[22:32:15.406]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:32:15.406]        // if-block "(__protocol & 0xFFFF) == 2"
[22:32:15.406]          // =>  TRUE
[22:32:15.406]        <block atomic="false" info="">
[22:32:15.406]          Message(0, "executing SWD power up");
[22:32:15.409]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:32:15.413]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:32:15.413]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:32:15.414]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:32:15.414]        </block>
[22:32:15.414]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:32:15.414]      </control>
[22:32:15.415]      // end if-block "powered_down"
[22:32:15.415]    </control>
[22:32:15.415]    <block atomic="false" info="">
[22:32:15.415]      __var DEBUG_PORT_VAL    = 0;
[22:32:15.415]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:32:15.415]      __var ACCESS_POINT_VAL  = 0;
[22:32:15.415]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:32:15.415]      __ap = 1; 
[22:32:15.415]        // -> [__ap <= 0x00000001]
[22:32:15.415]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:32:15.417]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:32:15.417]      __ap = 4;
[22:32:15.417]        // -> [__ap <= 0x00000004]
[22:32:15.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:32:15.421]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:32:15.421]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:32:15.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:32:15.425]    </block>
[22:32:15.425]    <block atomic="false" info="">
[22:32:15.426]      __var nReset = 0x80;
[22:32:15.426]        // -> [nReset <= 0x00000080]
[22:32:15.426]      __var canReadPins = 0;
[22:32:15.426]        // -> [canReadPins <= 0x00000000]
[22:32:15.426]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:32:15.426]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:32:15.426]        // -> [canReadPins <= 0x00000001]
[22:32:15.428]    </block>
[22:32:15.428]    <control if="" while="1" timeout="200" info="">
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.428]      // while "1"  (timeout="200")
[22:32:15.428]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.432]      // while-condition  =>  TRUE
[22:32:15.432]      // while "1"  (timeout="200")
[22:32:15.434]      // while-condition  =>  TRUE
[22:32:15.434]      // while "1"  (timeout="200")
[22:32:15.434]      // while-condition  =>  TRUE
[22:32:15.434]      // while "1"  (timeout="200")
[22:32:15.434]      // while-condition  =>  TRUE
[22:32:15.434]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.435]      // while-condition  =>  TRUE
[22:32:15.435]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.436]      // while "1"  (timeout="200")
[22:32:15.436]      // while-condition  =>  TRUE
[22:32:15.440]      // while "1"  (timeout="200")
[22:32:15.440]      // while  =>  TIMEOUT
[22:32:15.440]      // end while "1"
[22:32:15.440]    </control>
[22:32:15.440]    <control if="canReadPins" while="" timeout="0" info="">
[22:32:15.440]      // if-block "canReadPins"
[22:32:15.440]        // =>  TRUE
[22:32:15.440]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:32:15.440]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:32:15.445]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:32:15.446]        // while-condition  =>  FALSE
[22:32:15.446]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:32:15.446]      </control>
[22:32:15.446]      // end if-block "canReadPins"
[22:32:15.446]    </control>
[22:32:15.446]    <control if="!canReadPins" while="" timeout="0" info="">
[22:32:15.446]      // if-block "!canReadPins"
[22:32:15.446]        // =>  FALSE
[22:32:15.446]      // skip if-block "!canReadPins"
[22:32:15.446]    </control>
[22:32:15.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:32:15.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:32:15.446]        // =>  TRUE
[22:32:15.446]      <block atomic="false" info="">
[22:32:15.446]        WriteAP(0x00, 0x190008);
[22:32:15.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:32:15.448]        WriteAP(0xF0, 0x01);
[22:32:15.452]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:32:15.452]      </block>
[22:32:15.452]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:32:15.452]    </control>
[22:32:15.452]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:32:15.452]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:32:15.452]        // =>  FALSE
[22:32:15.452]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:32:15.452]    </control>
[22:32:15.452]    <block atomic="false" info="">
[22:32:15.452]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:32:15.456]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:32:15.456]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:32:15.456]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:32:15.456]      __ap = 0; //lets make sure we reset the access point selection
[22:32:15.456]        // -> [__ap <= 0x00000000]
[22:32:15.456]    </block>
[22:32:15.456]  </sequence>
[22:32:15.460]  
[22:32:15.485]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:32:15.485]  
[22:32:15.485]  <debugvars>
[22:32:15.485]    // Pre-defined
[22:32:15.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:15.485]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:32:15.485]    __dp=0x00000000
[22:32:15.485]    __ap=0x00000000
[22:32:15.485]    __traceout=0x00000000      (Trace Disabled)
[22:32:15.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:15.485]    __FlashAddr=0x00000000
[22:32:15.488]    __FlashLen=0x00000000
[22:32:15.488]    __FlashArg=0x00000000
[22:32:15.488]    __FlashOp=0x00000000
[22:32:15.488]    __Result=0x00000000
[22:32:15.488]  </debugvars>
[22:32:15.488]  
[22:32:15.488]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:32:15.488]    <block atomic="false" info="">
[22:32:15.488]      __var deviceID = 0;
[22:32:15.488]        // -> [deviceID <= 0x00000000]
[22:32:15.488]      __var version = 0;
[22:32:15.488]        // -> [version <= 0x00000000]
[22:32:15.488]      __var partNum = 0;
[22:32:15.488]        // -> [partNum <= 0x00000000]
[22:32:15.488]      __var manuf = 0;
[22:32:15.488]        // -> [manuf <= 0x00000000]
[22:32:15.488]      __var isMSPM0G1X0X_G3X0X = 0;
[22:32:15.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:32:15.488]      __var isProduction = 0;
[22:32:15.488]        // -> [isProduction <= 0x00000000]
[22:32:15.488]      __var continueId = 0;
[22:32:15.488]        // -> [continueId <= 0x00000000]
[22:32:15.488]      deviceID =   Read32(0x41C40004);
[22:32:15.496]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:32:15.496]        // -> [deviceID <= 0x2BB8802F]
[22:32:15.496]      version = deviceID >> 28;
[22:32:15.496]        // -> [version <= 0x00000002]
[22:32:15.496]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:32:15.496]        // -> [partNum <= 0x0000BB88]
[22:32:15.496]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:32:15.496]        // -> [manuf <= 0x00000017]
[22:32:15.496]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:32:15.496]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:32:15.496]      isProduction = (version > 0);
[22:32:15.496]        // -> [isProduction <= 0x00000001]
[22:32:15.496]    </block>
[22:32:15.496]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:32:15.496]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:32:15.500]        // =>  FALSE
[22:32:15.500]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:32:15.500]    </control>
[22:32:15.500]    <control if="continueId == 4" while="" timeout="0" info="">
[22:32:15.500]      // if-block "continueId == 4"
[22:32:15.500]        // =>  FALSE
[22:32:15.500]      // skip if-block "continueId == 4"
[22:32:15.500]    </control>
[22:32:15.500]    <control if="!isProduction" while="" timeout="0" info="">
[22:32:15.500]      // if-block "!isProduction"
[22:32:15.500]        // =>  FALSE
[22:32:15.500]      // skip if-block "!isProduction"
[22:32:15.500]    </control>
[22:32:15.500]  </sequence>
[22:32:15.500]  
[22:32:20.973]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:32:20.973]  
[22:32:20.973]  <debugvars>
[22:32:20.973]    // Pre-defined
[22:32:20.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:20.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:32:20.974]    __dp=0x00000000
[22:32:20.974]    __ap=0x00000000
[22:32:20.974]    __traceout=0x00000000      (Trace Disabled)
[22:32:20.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:20.975]    __FlashAddr=0x00000000
[22:32:20.975]    __FlashLen=0x00000000
[22:32:20.975]    __FlashArg=0x00000000
[22:32:20.975]    __FlashOp=0x00000000
[22:32:20.975]    __Result=0x00000000
[22:32:20.975]  </debugvars>
[22:32:20.975]  
[22:32:20.975]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:32:20.975]    <block atomic="false" info="">
[22:32:20.975]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:32:20.976]        // -> [isSWJ <= 0x00000001]
[22:32:20.976]      __var hasDormant = __protocol & 0x00020000;
[22:32:20.976]        // -> [hasDormant <= 0x00000000]
[22:32:20.976]      __var protType   = __protocol & 0x0000FFFF;
[22:32:20.976]        // -> [protType <= 0x00000002]
[22:32:20.976]    </block>
[22:32:20.976]    <control if="protType == 1" while="" timeout="0" info="">
[22:32:20.976]      // if-block "protType == 1"
[22:32:20.976]        // =>  FALSE
[22:32:20.976]      // skip if-block "protType == 1"
[22:32:20.976]    </control>
[22:32:20.976]    <control if="protType == 2" while="" timeout="0" info="">
[22:32:20.978]      // if-block "protType == 2"
[22:32:20.978]        // =>  TRUE
[22:32:20.978]      <control if="isSWJ" while="" timeout="0" info="">
[22:32:20.978]        // if-block "isSWJ"
[22:32:20.978]          // =>  TRUE
[22:32:20.978]        <control if="hasDormant" while="" timeout="0" info="">
[22:32:20.978]          // if-block "hasDormant"
[22:32:20.978]            // =>  FALSE
[22:32:20.978]          // skip if-block "hasDormant"
[22:32:20.978]        </control>
[22:32:20.978]        <control if="!hasDormant" while="" timeout="0" info="">
[22:32:20.978]          // if-block "!hasDormant"
[22:32:20.978]            // =>  TRUE
[22:32:20.978]          <block atomic="false" info="">
[22:32:20.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:32:20.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:20.980]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:32:20.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:32:20.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:32:20.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:20.984]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:32:20.987]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:32:20.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:32:20.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:32:20.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:32:20.989]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:32:20.989]          </block>
[22:32:20.989]          // end if-block "!hasDormant"
[22:32:20.989]        </control>
[22:32:20.989]        // end if-block "isSWJ"
[22:32:20.989]      </control>
[22:32:20.989]      <control if="!isSWJ" while="" timeout="0" info="">
[22:32:20.989]        // if-block "!isSWJ"
[22:32:20.989]          // =>  FALSE
[22:32:20.989]        // skip if-block "!isSWJ"
[22:32:20.989]      </control>
[22:32:20.989]      <block atomic="false" info="">
[22:32:20.989]        ReadDP(0x0);
[22:32:20.992]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:32:20.992]      </block>
[22:32:20.992]      // end if-block "protType == 2"
[22:32:20.992]    </control>
[22:32:20.992]  </sequence>
[22:32:20.992]  
[22:32:20.995]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:32:20.995]  
[22:32:20.995]  <debugvars>
[22:32:20.995]    // Pre-defined
[22:32:20.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:20.995]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:32:20.996]    __dp=0x00000000
[22:32:20.996]    __ap=0x00000000
[22:32:20.997]    __traceout=0x00000000      (Trace Disabled)
[22:32:20.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:20.997]    __FlashAddr=0x00000000
[22:32:20.997]    __FlashLen=0x00000000
[22:32:20.997]    __FlashArg=0x00000000
[22:32:20.997]    __FlashOp=0x00000000
[22:32:20.997]    __Result=0x00000000
[22:32:20.997]  </debugvars>
[22:32:20.998]  
[22:32:20.998]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:32:20.998]    <block atomic="false" info="">
[22:32:20.998]      __var SW_DP_ABORT       = 0x0;
[22:32:20.998]        // -> [SW_DP_ABORT <= 0x00000000]
[22:32:20.998]      __var DP_CTRL_STAT      = 0x4;
[22:32:20.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:32:20.998]      __var DP_SELECT         = 0x8;
[22:32:20.999]        // -> [DP_SELECT <= 0x00000008]
[22:32:20.999]      __var powered_down      = 0;
[22:32:20.999]        // -> [powered_down <= 0x00000000]
[22:32:20.999]      WriteDP(DP_SELECT, 0x00000000);
[22:32:21.000]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:32:21.000]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:32:21.004]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:32:21.004]        // -> [powered_down <= 0x00000001]
[22:32:21.004]    </block>
[22:32:21.004]    <control if="powered_down" while="" timeout="0" info="">
[22:32:21.005]      // if-block "powered_down"
[22:32:21.005]        // =>  TRUE
[22:32:21.005]      <block atomic="false" info="">
[22:32:21.005]        Message(0, "Debug/System power-up request sent");
[22:32:21.007]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:32:21.008]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:32:21.008]      </block>
[22:32:21.008]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:32:21.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:32:21.019]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:32:21.019]        // while-condition  =>  FALSE
[22:32:21.019]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:32:21.019]      </control>
[22:32:21.019]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:32:21.019]        // if-block "(__protocol & 0xFFFF) == 1"
[22:32:21.019]          // =>  FALSE
[22:32:21.019]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:32:21.019]      </control>
[22:32:21.019]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:32:21.019]        // if-block "(__protocol & 0xFFFF) == 2"
[22:32:21.019]          // =>  TRUE
[22:32:21.019]        <block atomic="false" info="">
[22:32:21.019]          Message(0, "executing SWD power up");
[22:32:21.021]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:32:21.025]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:32:21.025]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:32:21.032]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:32:21.032]        </block>
[22:32:21.032]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:32:21.032]      </control>
[22:32:21.032]      // end if-block "powered_down"
[22:32:21.032]    </control>
[22:32:21.033]    <block atomic="false" info="">
[22:32:21.033]      __var DEBUG_PORT_VAL    = 0;
[22:32:21.033]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:32:21.033]      __var ACCESS_POINT_VAL  = 0;
[22:32:21.033]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:32:21.034]      __ap = 1; 
[22:32:21.034]        // -> [__ap <= 0x00000001]
[22:32:21.034]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:32:21.038]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:32:21.038]      __ap = 4;
[22:32:21.038]        // -> [__ap <= 0x00000004]
[22:32:21.038]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:32:21.040]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:32:21.040]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:32:21.040]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:32:21.045]    </block>
[22:32:21.045]    <block atomic="false" info="">
[22:32:21.045]      __var nReset = 0x80;
[22:32:21.045]        // -> [nReset <= 0x00000080]
[22:32:21.045]      __var canReadPins = 0;
[22:32:21.045]        // -> [canReadPins <= 0x00000000]
[22:32:21.045]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:32:21.045]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:32:21.045]        // -> [canReadPins <= 0x00000001]
[22:32:21.045]    </block>
[22:32:21.045]    <control if="" while="1" timeout="200" info="">
[22:32:21.045]      // while "1"  (timeout="200")
[22:32:21.045]      // while-condition  =>  TRUE
[22:32:21.045]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.048]      // while-condition  =>  TRUE
[22:32:21.048]      // while "1"  (timeout="200")
[22:32:21.053]      // while-condition  =>  TRUE
[22:32:21.053]      // while "1"  (timeout="200")
[22:32:21.053]      // while  =>  TIMEOUT
[22:32:21.053]      // end while "1"
[22:32:21.053]    </control>
[22:32:21.053]    <control if="canReadPins" while="" timeout="0" info="">
[22:32:21.053]      // if-block "canReadPins"
[22:32:21.053]        // =>  TRUE
[22:32:21.053]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:32:21.053]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:32:21.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:32:21.055]        // while-condition  =>  FALSE
[22:32:21.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:32:21.055]      </control>
[22:32:21.055]      // end if-block "canReadPins"
[22:32:21.055]    </control>
[22:32:21.056]    <control if="!canReadPins" while="" timeout="0" info="">
[22:32:21.056]      // if-block "!canReadPins"
[22:32:21.057]        // =>  FALSE
[22:32:21.057]      // skip if-block "!canReadPins"
[22:32:21.057]    </control>
[22:32:21.057]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:32:21.057]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:32:21.057]        // =>  TRUE
[22:32:21.057]      <block atomic="false" info="">
[22:32:21.057]        WriteAP(0x00, 0x190008);
[22:32:21.060]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:32:21.060]        WriteAP(0xF0, 0x01);
[22:32:21.065]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:32:21.065]      </block>
[22:32:21.065]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:32:21.065]    </control>
[22:32:21.065]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:32:21.065]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:32:21.065]        // =>  FALSE
[22:32:21.065]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:32:21.065]    </control>
[22:32:21.065]    <block atomic="false" info="">
[22:32:21.065]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:32:21.069]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:32:21.069]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:32:21.069]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:32:21.069]      __ap = 0; //lets make sure we reset the access point selection
[22:32:21.069]        // -> [__ap <= 0x00000000]
[22:32:21.069]    </block>
[22:32:21.069]  </sequence>
[22:32:21.069]  
[22:32:21.089]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:32:21.089]  
[22:32:21.093]  <debugvars>
[22:32:21.093]    // Pre-defined
[22:32:21.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:32:21.093]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:32:21.093]    __dp=0x00000000
[22:32:21.093]    __ap=0x00000000
[22:32:21.093]    __traceout=0x00000000      (Trace Disabled)
[22:32:21.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:32:21.093]    __FlashAddr=0x00000000
[22:32:21.093]    __FlashLen=0x00000000
[22:32:21.093]    __FlashArg=0x00000000
[22:32:21.093]    __FlashOp=0x00000000
[22:32:21.093]    __Result=0x00000000
[22:32:21.093]  </debugvars>
[22:32:21.094]  
[22:32:21.094]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:32:21.094]    <block atomic="false" info="">
[22:32:21.094]      __var deviceID = 0;
[22:32:21.094]        // -> [deviceID <= 0x00000000]
[22:32:21.094]      __var version = 0;
[22:32:21.095]        // -> [version <= 0x00000000]
[22:32:21.095]      __var partNum = 0;
[22:32:21.095]        // -> [partNum <= 0x00000000]
[22:32:21.095]      __var manuf = 0;
[22:32:21.095]        // -> [manuf <= 0x00000000]
[22:32:21.095]      __var isMSPM0G1X0X_G3X0X = 0;
[22:32:21.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:32:21.095]      __var isProduction = 0;
[22:32:21.095]        // -> [isProduction <= 0x00000000]
[22:32:21.096]      __var continueId = 0;
[22:32:21.096]        // -> [continueId <= 0x00000000]
[22:32:21.096]      deviceID =   Read32(0x41C40004);
[22:32:21.102]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:32:21.102]        // -> [deviceID <= 0x2BB8802F]
[22:32:21.102]      version = deviceID >> 28;
[22:32:21.102]        // -> [version <= 0x00000002]
[22:32:21.102]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:32:21.102]        // -> [partNum <= 0x0000BB88]
[22:32:21.102]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:32:21.102]        // -> [manuf <= 0x00000017]
[22:32:21.102]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:32:21.102]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:32:21.102]      isProduction = (version > 0);
[22:32:21.102]        // -> [isProduction <= 0x00000001]
[22:32:21.103]    </block>
[22:32:21.103]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:32:21.103]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:32:21.103]        // =>  FALSE
[22:32:21.103]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:32:21.103]    </control>
[22:32:21.103]    <control if="continueId == 4" while="" timeout="0" info="">
[22:32:21.103]      // if-block "continueId == 4"
[22:32:21.103]        // =>  FALSE
[22:32:21.103]      // skip if-block "continueId == 4"
[22:32:21.103]    </control>
[22:32:21.104]    <control if="!isProduction" while="" timeout="0" info="">
[22:32:21.104]      // if-block "!isProduction"
[22:32:21.104]        // =>  FALSE
[22:32:21.104]      // skip if-block "!isProduction"
[22:32:21.104]    </control>
[22:32:21.104]  </sequence>
[22:32:21.105]  
[22:41:29.156]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:41:29.156]  
[22:41:29.156]  <debugvars>
[22:41:29.156]    // Pre-defined
[22:41:29.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:29.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:29.156]    __dp=0x00000000
[22:41:29.156]    __ap=0x00000000
[22:41:29.156]    __traceout=0x00000000      (Trace Disabled)
[22:41:29.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:29.156]    __FlashAddr=0x00000000
[22:41:29.156]    __FlashLen=0x00000000
[22:41:29.156]    __FlashArg=0x00000000
[22:41:29.156]    __FlashOp=0x00000000
[22:41:29.156]    __Result=0x00000000
[22:41:29.156]  </debugvars>
[22:41:29.160]  
[22:41:29.160]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:41:29.160]    <block atomic="false" info="">
[22:41:29.160]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:41:29.160]        // -> [isSWJ <= 0x00000001]
[22:41:29.160]      __var hasDormant = __protocol & 0x00020000;
[22:41:29.160]        // -> [hasDormant <= 0x00000000]
[22:41:29.160]      __var protType   = __protocol & 0x0000FFFF;
[22:41:29.160]        // -> [protType <= 0x00000002]
[22:41:29.160]    </block>
[22:41:29.160]    <control if="protType == 1" while="" timeout="0" info="">
[22:41:29.160]      // if-block "protType == 1"
[22:41:29.160]        // =>  FALSE
[22:41:29.160]      // skip if-block "protType == 1"
[22:41:29.160]    </control>
[22:41:29.160]    <control if="protType == 2" while="" timeout="0" info="">
[22:41:29.160]      // if-block "protType == 2"
[22:41:29.160]        // =>  TRUE
[22:41:29.160]      <control if="isSWJ" while="" timeout="0" info="">
[22:41:29.160]        // if-block "isSWJ"
[22:41:29.160]          // =>  TRUE
[22:41:29.160]        <control if="hasDormant" while="" timeout="0" info="">
[22:41:29.160]          // if-block "hasDormant"
[22:41:29.160]            // =>  FALSE
[22:41:29.160]          // skip if-block "hasDormant"
[22:41:29.160]        </control>
[22:41:29.160]        <control if="!hasDormant" while="" timeout="0" info="">
[22:41:29.160]          // if-block "!hasDormant"
[22:41:29.160]            // =>  TRUE
[22:41:29.160]          <block atomic="false" info="">
[22:41:29.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:41:29.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:29.164]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:41:29.165]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:41:29.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:41:29.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:29.167]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:41:29.168]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:41:29.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:41:29.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:41:29.168]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:41:29.168]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:41:29.168]          </block>
[22:41:29.168]          // end if-block "!hasDormant"
[22:41:29.168]        </control>
[22:41:29.168]        // end if-block "isSWJ"
[22:41:29.172]      </control>
[22:41:29.172]      <control if="!isSWJ" while="" timeout="0" info="">
[22:41:29.172]        // if-block "!isSWJ"
[22:41:29.172]          // =>  FALSE
[22:41:29.172]        // skip if-block "!isSWJ"
[22:41:29.172]      </control>
[22:41:29.172]      <block atomic="false" info="">
[22:41:29.172]        ReadDP(0x0);
[22:41:29.172]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:41:29.172]      </block>
[22:41:29.172]      // end if-block "protType == 2"
[22:41:29.172]    </control>
[22:41:29.172]  </sequence>
[22:41:29.172]  
[22:41:29.176]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:41:29.176]  
[22:41:29.176]  <debugvars>
[22:41:29.176]    // Pre-defined
[22:41:29.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:29.176]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:29.176]    __dp=0x00000000
[22:41:29.176]    __ap=0x00000000
[22:41:29.176]    __traceout=0x00000000      (Trace Disabled)
[22:41:29.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:29.176]    __FlashAddr=0x00000000
[22:41:29.176]    __FlashLen=0x00000000
[22:41:29.176]    __FlashArg=0x00000000
[22:41:29.176]    __FlashOp=0x00000000
[22:41:29.176]    __Result=0x00000000
[22:41:29.176]  </debugvars>
[22:41:29.176]  
[22:41:29.176]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:41:29.176]    <block atomic="false" info="">
[22:41:29.176]      __var SW_DP_ABORT       = 0x0;
[22:41:29.176]        // -> [SW_DP_ABORT <= 0x00000000]
[22:41:29.176]      __var DP_CTRL_STAT      = 0x4;
[22:41:29.176]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:41:29.176]      __var DP_SELECT         = 0x8;
[22:41:29.176]        // -> [DP_SELECT <= 0x00000008]
[22:41:29.176]      __var powered_down      = 0;
[22:41:29.176]        // -> [powered_down <= 0x00000000]
[22:41:29.176]      WriteDP(DP_SELECT, 0x00000000);
[22:41:29.180]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:41:29.180]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:41:29.180]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:41:29.180]        // -> [powered_down <= 0x00000001]
[22:41:29.180]    </block>
[22:41:29.180]    <control if="powered_down" while="" timeout="0" info="">
[22:41:29.180]      // if-block "powered_down"
[22:41:29.180]        // =>  TRUE
[22:41:29.180]      <block atomic="false" info="">
[22:41:29.184]        Message(0, "Debug/System power-up request sent");
[22:41:29.185]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:41:29.188]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:41:29.188]      </block>
[22:41:29.188]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:41:29.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:41:29.188]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:41:29.188]        // while-condition  =>  FALSE
[22:41:29.188]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:41:29.188]      </control>
[22:41:29.192]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:41:29.192]        // if-block "(__protocol & 0xFFFF) == 1"
[22:41:29.192]          // =>  FALSE
[22:41:29.192]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:41:29.192]      </control>
[22:41:29.192]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:41:29.192]        // if-block "(__protocol & 0xFFFF) == 2"
[22:41:29.192]          // =>  TRUE
[22:41:29.192]        <block atomic="false" info="">
[22:41:29.192]          Message(0, "executing SWD power up");
[22:41:29.192]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:41:29.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:41:29.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:41:29.197]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:41:29.197]        </block>
[22:41:29.197]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:41:29.197]      </control>
[22:41:29.197]      // end if-block "powered_down"
[22:41:29.197]    </control>
[22:41:29.197]    <block atomic="false" info="">
[22:41:29.197]      __var DEBUG_PORT_VAL    = 0;
[22:41:29.197]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:41:29.197]      __var ACCESS_POINT_VAL  = 0;
[22:41:29.197]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:41:29.197]      __ap = 1; 
[22:41:29.197]        // -> [__ap <= 0x00000001]
[22:41:29.197]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:41:29.205]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:41:29.205]      __ap = 4;
[22:41:29.205]        // -> [__ap <= 0x00000004]
[22:41:29.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:41:29.209]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:41:29.209]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:41:29.209]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:41:29.209]    </block>
[22:41:29.209]    <block atomic="false" info="">
[22:41:29.209]      __var nReset = 0x80;
[22:41:29.209]        // -> [nReset <= 0x00000080]
[22:41:29.209]      __var canReadPins = 0;
[22:41:29.209]        // -> [canReadPins <= 0x00000000]
[22:41:29.209]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:41:29.213]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:41:29.213]        // -> [canReadPins <= 0x00000001]
[22:41:29.213]    </block>
[22:41:29.213]    <control if="" while="1" timeout="200" info="">
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.213]      // while-condition  =>  TRUE
[22:41:29.213]      // while "1"  (timeout="200")
[22:41:29.215]      // while-condition  =>  TRUE
[22:41:29.215]      // while "1"  (timeout="200")
[22:41:29.215]      // while-condition  =>  TRUE
[22:41:29.215]      // while "1"  (timeout="200")
[22:41:29.215]      // while-condition  =>  TRUE
[22:41:29.215]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.216]      // while "1"  (timeout="200")
[22:41:29.216]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.220]      // while "1"  (timeout="200")
[22:41:29.220]      // while-condition  =>  TRUE
[22:41:29.224]      // while "1"  (timeout="200")
[22:41:29.224]      // while  =>  TIMEOUT
[22:41:29.224]      // end while "1"
[22:41:29.224]    </control>
[22:41:29.224]    <control if="canReadPins" while="" timeout="0" info="">
[22:41:29.224]      // if-block "canReadPins"
[22:41:29.224]        // =>  TRUE
[22:41:29.224]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:41:29.224]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:41:29.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:41:29.226]        // while-condition  =>  FALSE
[22:41:29.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:41:29.226]      </control>
[22:41:29.226]      // end if-block "canReadPins"
[22:41:29.226]    </control>
[22:41:29.228]    <control if="!canReadPins" while="" timeout="0" info="">
[22:41:29.228]      // if-block "!canReadPins"
[22:41:29.228]        // =>  FALSE
[22:41:29.228]      // skip if-block "!canReadPins"
[22:41:29.228]    </control>
[22:41:29.228]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:41:29.228]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:41:29.228]        // =>  TRUE
[22:41:29.228]      <block atomic="false" info="">
[22:41:29.228]        WriteAP(0x00, 0x190008);
[22:41:29.229]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:41:29.229]        WriteAP(0xF0, 0x01);
[22:41:29.233]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:41:29.233]      </block>
[22:41:29.233]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:41:29.233]    </control>
[22:41:29.233]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:41:29.233]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:41:29.233]        // =>  FALSE
[22:41:29.233]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:41:29.233]    </control>
[22:41:29.233]    <block atomic="false" info="">
[22:41:29.233]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:41:29.236]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:41:29.236]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:41:29.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:41:29.236]      __ap = 0; //lets make sure we reset the access point selection
[22:41:29.236]        // -> [__ap <= 0x00000000]
[22:41:29.236]    </block>
[22:41:29.236]  </sequence>
[22:41:29.240]  
[22:41:29.266]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:41:29.266]  
[22:41:29.266]  <debugvars>
[22:41:29.266]    // Pre-defined
[22:41:29.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:41:29.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:41:29.266]    __dp=0x00000000
[22:41:29.266]    __ap=0x00000000
[22:41:29.266]    __traceout=0x00000000      (Trace Disabled)
[22:41:29.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:41:29.266]    __FlashAddr=0x00000000
[22:41:29.266]    __FlashLen=0x00000000
[22:41:29.266]    __FlashArg=0x00000000
[22:41:29.266]    __FlashOp=0x00000000
[22:41:29.266]    __Result=0x00000000
[22:41:29.266]  </debugvars>
[22:41:29.266]  
[22:41:29.266]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:41:29.266]    <block atomic="false" info="">
[22:41:29.266]      __var deviceID = 0;
[22:41:29.266]        // -> [deviceID <= 0x00000000]
[22:41:29.266]      __var version = 0;
[22:41:29.268]        // -> [version <= 0x00000000]
[22:41:29.268]      __var partNum = 0;
[22:41:29.268]        // -> [partNum <= 0x00000000]
[22:41:29.268]      __var manuf = 0;
[22:41:29.268]        // -> [manuf <= 0x00000000]
[22:41:29.268]      __var isMSPM0G1X0X_G3X0X = 0;
[22:41:29.268]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:41:29.268]      __var isProduction = 0;
[22:41:29.268]        // -> [isProduction <= 0x00000000]
[22:41:29.268]      __var continueId = 0;
[22:41:29.268]        // -> [continueId <= 0x00000000]
[22:41:29.268]      deviceID =   Read32(0x41C40004);
[22:41:29.272]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:41:29.272]        // -> [deviceID <= 0x2BB8802F]
[22:41:29.272]      version = deviceID >> 28;
[22:41:29.272]        // -> [version <= 0x00000002]
[22:41:29.272]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:41:29.272]        // -> [partNum <= 0x0000BB88]
[22:41:29.272]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:41:29.272]        // -> [manuf <= 0x00000017]
[22:41:29.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:41:29.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:41:29.272]      isProduction = (version > 0);
[22:41:29.272]        // -> [isProduction <= 0x00000001]
[22:41:29.272]    </block>
[22:41:29.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:41:29.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:41:29.272]        // =>  FALSE
[22:41:29.275]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:41:29.275]    </control>
[22:41:29.275]    <control if="continueId == 4" while="" timeout="0" info="">
[22:41:29.275]      // if-block "continueId == 4"
[22:41:29.275]        // =>  FALSE
[22:41:29.275]      // skip if-block "continueId == 4"
[22:41:29.276]    </control>
[22:41:29.276]    <control if="!isProduction" while="" timeout="0" info="">
[22:41:29.276]      // if-block "!isProduction"
[22:41:29.276]        // =>  FALSE
[22:41:29.276]      // skip if-block "!isProduction"
[22:41:29.276]    </control>
[22:41:29.276]  </sequence>
[22:41:29.276]  
[22:43:44.020]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:43:44.020]  
[22:43:44.020]  <debugvars>
[22:43:44.020]    // Pre-defined
[22:43:44.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:44.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:44.020]    __dp=0x00000000
[22:43:44.020]    __ap=0x00000000
[22:43:44.020]    __traceout=0x00000000      (Trace Disabled)
[22:43:44.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:44.020]    __FlashAddr=0x00000000
[22:43:44.020]    __FlashLen=0x00000000
[22:43:44.020]    __FlashArg=0x00000000
[22:43:44.020]    __FlashOp=0x00000000
[22:43:44.020]    __Result=0x00000000
[22:43:44.020]  </debugvars>
[22:43:44.020]  
[22:43:44.020]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:43:44.020]    <block atomic="false" info="">
[22:43:44.020]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:43:44.020]        // -> [isSWJ <= 0x00000001]
[22:43:44.020]      __var hasDormant = __protocol & 0x00020000;
[22:43:44.020]        // -> [hasDormant <= 0x00000000]
[22:43:44.020]      __var protType   = __protocol & 0x0000FFFF;
[22:43:44.020]        // -> [protType <= 0x00000002]
[22:43:44.023]    </block>
[22:43:44.023]    <control if="protType == 1" while="" timeout="0" info="">
[22:43:44.024]      // if-block "protType == 1"
[22:43:44.024]        // =>  FALSE
[22:43:44.024]      // skip if-block "protType == 1"
[22:43:44.024]    </control>
[22:43:44.024]    <control if="protType == 2" while="" timeout="0" info="">
[22:43:44.024]      // if-block "protType == 2"
[22:43:44.024]        // =>  TRUE
[22:43:44.024]      <control if="isSWJ" while="" timeout="0" info="">
[22:43:44.024]        // if-block "isSWJ"
[22:43:44.024]          // =>  TRUE
[22:43:44.024]        <control if="hasDormant" while="" timeout="0" info="">
[22:43:44.024]          // if-block "hasDormant"
[22:43:44.024]            // =>  FALSE
[22:43:44.024]          // skip if-block "hasDormant"
[22:43:44.024]        </control>
[22:43:44.024]        <control if="!hasDormant" while="" timeout="0" info="">
[22:43:44.024]          // if-block "!hasDormant"
[22:43:44.024]            // =>  TRUE
[22:43:44.024]          <block atomic="false" info="">
[22:43:44.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:43:44.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:44.027]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:43:44.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:43:44.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:43:44.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:44.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:43:44.032]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:43:44.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:43:44.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:43:44.032]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:43:44.035]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:43:44.035]          </block>
[22:43:44.035]          // end if-block "!hasDormant"
[22:43:44.035]        </control>
[22:43:44.035]        // end if-block "isSWJ"
[22:43:44.035]      </control>
[22:43:44.035]      <control if="!isSWJ" while="" timeout="0" info="">
[22:43:44.035]        // if-block "!isSWJ"
[22:43:44.035]          // =>  FALSE
[22:43:44.035]        // skip if-block "!isSWJ"
[22:43:44.035]      </control>
[22:43:44.035]      <block atomic="false" info="">
[22:43:44.035]        ReadDP(0x0);
[22:43:44.039]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:43:44.039]      </block>
[22:43:44.039]      // end if-block "protType == 2"
[22:43:44.040]    </control>
[22:43:44.040]  </sequence>
[22:43:44.040]  
[22:43:44.043]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:43:44.043]  
[22:43:44.043]  <debugvars>
[22:43:44.043]    // Pre-defined
[22:43:44.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:44.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:44.043]    __dp=0x00000000
[22:43:44.043]    __ap=0x00000000
[22:43:44.043]    __traceout=0x00000000      (Trace Disabled)
[22:43:44.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:44.043]    __FlashAddr=0x00000000
[22:43:44.043]    __FlashLen=0x00000000
[22:43:44.043]    __FlashArg=0x00000000
[22:43:44.043]    __FlashOp=0x00000000
[22:43:44.043]    __Result=0x00000000
[22:43:44.043]  </debugvars>
[22:43:44.043]  
[22:43:44.043]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:43:44.043]    <block atomic="false" info="">
[22:43:44.043]      __var SW_DP_ABORT       = 0x0;
[22:43:44.043]        // -> [SW_DP_ABORT <= 0x00000000]
[22:43:44.043]      __var DP_CTRL_STAT      = 0x4;
[22:43:44.043]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:43:44.043]      __var DP_SELECT         = 0x8;
[22:43:44.043]        // -> [DP_SELECT <= 0x00000008]
[22:43:44.043]      __var powered_down      = 0;
[22:43:44.043]        // -> [powered_down <= 0x00000000]
[22:43:44.043]      WriteDP(DP_SELECT, 0x00000000);
[22:43:44.047]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:43:44.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:43:44.049]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:43:44.049]        // -> [powered_down <= 0x00000001]
[22:43:44.049]    </block>
[22:43:44.049]    <control if="powered_down" while="" timeout="0" info="">
[22:43:44.049]      // if-block "powered_down"
[22:43:44.050]        // =>  TRUE
[22:43:44.050]      <block atomic="false" info="">
[22:43:44.050]        Message(0, "Debug/System power-up request sent");
[22:43:44.052]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:43:44.052]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:43:44.052]      </block>
[22:43:44.052]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:43:44.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:43:44.056]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:43:44.056]        // while-condition  =>  FALSE
[22:43:44.056]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:43:44.056]      </control>
[22:43:44.056]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:43:44.056]        // if-block "(__protocol & 0xFFFF) == 1"
[22:43:44.057]          // =>  FALSE
[22:43:44.057]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:43:44.057]      </control>
[22:43:44.057]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:43:44.057]        // if-block "(__protocol & 0xFFFF) == 2"
[22:43:44.057]          // =>  TRUE
[22:43:44.057]        <block atomic="false" info="">
[22:43:44.057]          Message(0, "executing SWD power up");
[22:43:44.057]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:43:44.061]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:43:44.061]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:43:44.062]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:43:44.062]        </block>
[22:43:44.063]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:43:44.063]      </control>
[22:43:44.063]      // end if-block "powered_down"
[22:43:44.063]    </control>
[22:43:44.063]    <block atomic="false" info="">
[22:43:44.063]      __var DEBUG_PORT_VAL    = 0;
[22:43:44.063]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:43:44.063]      __var ACCESS_POINT_VAL  = 0;
[22:43:44.063]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:43:44.063]      __ap = 1; 
[22:43:44.063]        // -> [__ap <= 0x00000001]
[22:43:44.063]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:43:44.076]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:43:44.079]      __ap = 4;
[22:43:44.079]        // -> [__ap <= 0x00000004]
[22:43:44.079]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:44.084]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:43:44.084]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:43:44.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:44.088]    </block>
[22:43:44.088]    <block atomic="false" info="">
[22:43:44.088]      __var nReset = 0x80;
[22:43:44.088]        // -> [nReset <= 0x00000080]
[22:43:44.088]      __var canReadPins = 0;
[22:43:44.088]        // -> [canReadPins <= 0x00000000]
[22:43:44.088]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:43:44.093]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:43:44.093]        // -> [canReadPins <= 0x00000001]
[22:43:44.093]    </block>
[22:43:44.093]    <control if="" while="1" timeout="200" info="">
[22:43:44.093]      // while "1"  (timeout="200")
[22:43:44.093]      // while-condition  =>  TRUE
[22:43:44.093]      // while "1"  (timeout="200")
[22:43:44.093]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.096]      // while "1"  (timeout="200")
[22:43:44.096]      // while-condition  =>  TRUE
[22:43:44.097]      // while "1"  (timeout="200")
[22:43:44.097]      // while  =>  TIMEOUT
[22:43:44.097]      // end while "1"
[22:43:44.097]    </control>
[22:43:44.097]    <control if="canReadPins" while="" timeout="0" info="">
[22:43:44.097]      // if-block "canReadPins"
[22:43:44.097]        // =>  TRUE
[22:43:44.097]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:43:44.097]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:43:44.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:43:44.099]        // while-condition  =>  FALSE
[22:43:44.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:43:44.100]      </control>
[22:43:44.100]      // end if-block "canReadPins"
[22:43:44.100]    </control>
[22:43:44.100]    <control if="!canReadPins" while="" timeout="0" info="">
[22:43:44.100]      // if-block "!canReadPins"
[22:43:44.100]        // =>  FALSE
[22:43:44.100]      // skip if-block "!canReadPins"
[22:43:44.100]    </control>
[22:43:44.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:43:44.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:44.100]        // =>  TRUE
[22:43:44.101]      <block atomic="false" info="">
[22:43:44.101]        WriteAP(0x00, 0x190008);
[22:43:44.104]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:44.104]        WriteAP(0xF0, 0x01);
[22:43:44.109]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:43:44.110]      </block>
[22:43:44.110]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:43:44.110]    </control>
[22:43:44.110]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:43:44.110]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:44.110]        // =>  FALSE
[22:43:44.110]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:43:44.110]    </control>
[22:43:44.110]    <block atomic="false" info="">
[22:43:44.110]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:43:44.116]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:43:44.116]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:43:44.116]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:43:44.118]      __ap = 0; //lets make sure we reset the access point selection
[22:43:44.118]        // -> [__ap <= 0x00000000]
[22:43:44.118]    </block>
[22:43:44.119]  </sequence>
[22:43:44.119]  
[22:43:44.153]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:43:44.153]  
[22:43:44.153]  <debugvars>
[22:43:44.153]    // Pre-defined
[22:43:44.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:43:44.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:43:44.153]    __dp=0x00000000
[22:43:44.153]    __ap=0x00000000
[22:43:44.153]    __traceout=0x00000000      (Trace Disabled)
[22:43:44.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:43:44.153]    __FlashAddr=0x00000000
[22:43:44.153]    __FlashLen=0x00000000
[22:43:44.153]    __FlashArg=0x00000000
[22:43:44.153]    __FlashOp=0x00000000
[22:43:44.153]    __Result=0x00000000
[22:43:44.153]  </debugvars>
[22:43:44.153]  
[22:43:44.153]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:43:44.153]    <block atomic="false" info="">
[22:43:44.153]      __var deviceID = 0;
[22:43:44.153]        // -> [deviceID <= 0x00000000]
[22:43:44.153]      __var version = 0;
[22:43:44.153]        // -> [version <= 0x00000000]
[22:43:44.153]      __var partNum = 0;
[22:43:44.157]        // -> [partNum <= 0x00000000]
[22:43:44.157]      __var manuf = 0;
[22:43:44.157]        // -> [manuf <= 0x00000000]
[22:43:44.157]      __var isMSPM0G1X0X_G3X0X = 0;
[22:43:44.157]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:43:44.157]      __var isProduction = 0;
[22:43:44.157]        // -> [isProduction <= 0x00000000]
[22:43:44.157]      __var continueId = 0;
[22:43:44.157]        // -> [continueId <= 0x00000000]
[22:43:44.158]      deviceID =   Read32(0x41C40004);
[22:43:44.172]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:43:44.172]        // -> [deviceID <= 0x2BB8802F]
[22:43:44.172]      version = deviceID >> 28;
[22:43:44.172]        // -> [version <= 0x00000002]
[22:43:44.172]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:43:44.173]        // -> [partNum <= 0x0000BB88]
[22:43:44.173]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:43:44.173]        // -> [manuf <= 0x00000017]
[22:43:44.173]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:43:44.173]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:43:44.173]      isProduction = (version > 0);
[22:43:44.173]        // -> [isProduction <= 0x00000001]
[22:43:44.173]    </block>
[22:43:44.173]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:43:44.173]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:43:44.173]        // =>  FALSE
[22:43:44.173]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:43:44.173]    </control>
[22:43:44.173]    <control if="continueId == 4" while="" timeout="0" info="">
[22:43:44.173]      // if-block "continueId == 4"
[22:43:44.173]        // =>  FALSE
[22:43:44.173]      // skip if-block "continueId == 4"
[22:43:44.173]    </control>
[22:43:44.173]    <control if="!isProduction" while="" timeout="0" info="">
[22:43:44.173]      // if-block "!isProduction"
[22:43:44.173]        // =>  FALSE
[22:43:44.173]      // skip if-block "!isProduction"
[22:43:44.173]    </control>
[22:43:44.173]  </sequence>
[22:43:44.173]  
[23:23:20.572]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:23:20.572]  
[23:23:20.572]  <debugvars>
[23:23:20.572]    // Pre-defined
[23:23:20.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:20.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:20.572]    __dp=0x00000000
[23:23:20.572]    __ap=0x00000000
[23:23:20.572]    __traceout=0x00000000      (Trace Disabled)
[23:23:20.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:20.572]    __FlashAddr=0x00000000
[23:23:20.572]    __FlashLen=0x00000000
[23:23:20.572]    __FlashArg=0x00000000
[23:23:20.572]    __FlashOp=0x00000000
[23:23:20.572]    __Result=0x00000000
[23:23:20.572]  </debugvars>
[23:23:20.572]  
[23:23:20.572]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:23:20.572]    <block atomic="false" info="">
[23:23:20.572]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:23:20.572]        // -> [isSWJ <= 0x00000001]
[23:23:20.572]      __var hasDormant = __protocol & 0x00020000;
[23:23:20.572]        // -> [hasDormant <= 0x00000000]
[23:23:20.572]      __var protType   = __protocol & 0x0000FFFF;
[23:23:20.572]        // -> [protType <= 0x00000002]
[23:23:20.572]    </block>
[23:23:20.572]    <control if="protType == 1" while="" timeout="0" info="">
[23:23:20.572]      // if-block "protType == 1"
[23:23:20.572]        // =>  FALSE
[23:23:20.572]      // skip if-block "protType == 1"
[23:23:20.572]    </control>
[23:23:20.572]    <control if="protType == 2" while="" timeout="0" info="">
[23:23:20.572]      // if-block "protType == 2"
[23:23:20.572]        // =>  TRUE
[23:23:20.572]      <control if="isSWJ" while="" timeout="0" info="">
[23:23:20.572]        // if-block "isSWJ"
[23:23:20.572]          // =>  TRUE
[23:23:20.572]        <control if="hasDormant" while="" timeout="0" info="">
[23:23:20.572]          // if-block "hasDormant"
[23:23:20.572]            // =>  FALSE
[23:23:20.572]          // skip if-block "hasDormant"
[23:23:20.572]        </control>
[23:23:20.572]        <control if="!hasDormant" while="" timeout="0" info="">
[23:23:20.572]          // if-block "!hasDormant"
[23:23:20.572]            // =>  TRUE
[23:23:20.572]          <block atomic="false" info="">
[23:23:20.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:23:20.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:20.581]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:23:20.581]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:23:20.581]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:23:20.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:20.581]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:23:20.581]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:23:20.581]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:23:20.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:20.581]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:23:20.590]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:23:20.590]          </block>
[23:23:20.590]          // end if-block "!hasDormant"
[23:23:20.590]        </control>
[23:23:20.590]        // end if-block "isSWJ"
[23:23:20.590]      </control>
[23:23:20.590]      <control if="!isSWJ" while="" timeout="0" info="">
[23:23:20.590]        // if-block "!isSWJ"
[23:23:20.590]          // =>  FALSE
[23:23:20.590]        // skip if-block "!isSWJ"
[23:23:20.591]      </control>
[23:23:20.591]      <block atomic="false" info="">
[23:23:20.591]        ReadDP(0x0);
[23:23:20.593]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:23:20.593]      </block>
[23:23:20.593]      // end if-block "protType == 2"
[23:23:20.593]    </control>
[23:23:20.593]  </sequence>
[23:23:20.593]  
[23:23:20.598]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:23:20.598]  
[23:23:20.598]  <debugvars>
[23:23:20.598]    // Pre-defined
[23:23:20.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:20.598]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:20.598]    __dp=0x00000000
[23:23:20.598]    __ap=0x00000000
[23:23:20.598]    __traceout=0x00000000      (Trace Disabled)
[23:23:20.598]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:20.600]    __FlashAddr=0x00000000
[23:23:20.600]    __FlashLen=0x00000000
[23:23:20.600]    __FlashArg=0x00000000
[23:23:20.600]    __FlashOp=0x00000000
[23:23:20.600]    __Result=0x00000000
[23:23:20.600]  </debugvars>
[23:23:20.600]  
[23:23:20.600]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:23:20.600]    <block atomic="false" info="">
[23:23:20.600]      __var SW_DP_ABORT       = 0x0;
[23:23:20.600]        // -> [SW_DP_ABORT <= 0x00000000]
[23:23:20.600]      __var DP_CTRL_STAT      = 0x4;
[23:23:20.601]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:23:20.601]      __var DP_SELECT         = 0x8;
[23:23:20.601]        // -> [DP_SELECT <= 0x00000008]
[23:23:20.601]      __var powered_down      = 0;
[23:23:20.601]        // -> [powered_down <= 0x00000000]
[23:23:20.601]      WriteDP(DP_SELECT, 0x00000000);
[23:23:20.601]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:23:20.601]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:23:20.601]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:23:20.601]        // -> [powered_down <= 0x00000001]
[23:23:20.601]    </block>
[23:23:20.601]    <control if="powered_down" while="" timeout="0" info="">
[23:23:20.601]      // if-block "powered_down"
[23:23:20.601]        // =>  TRUE
[23:23:20.601]      <block atomic="false" info="">
[23:23:20.601]        Message(0, "Debug/System power-up request sent");
[23:23:20.610]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:23:20.611]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:23:20.611]      </block>
[23:23:20.611]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:23:20.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:23:20.612]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:23:20.612]        // while-condition  =>  FALSE
[23:23:20.612]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:23:20.612]      </control>
[23:23:20.612]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:23:20.612]        // if-block "(__protocol & 0xFFFF) == 1"
[23:23:20.612]          // =>  FALSE
[23:23:20.612]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:23:20.612]      </control>
[23:23:20.612]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:23:20.612]        // if-block "(__protocol & 0xFFFF) == 2"
[23:23:20.612]          // =>  TRUE
[23:23:20.612]        <block atomic="false" info="">
[23:23:20.612]          Message(0, "executing SWD power up");
[23:23:20.612]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:23:20.612]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:23:20.612]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:23:20.621]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:23:20.621]        </block>
[23:23:20.621]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:23:20.621]      </control>
[23:23:20.621]      // end if-block "powered_down"
[23:23:20.621]    </control>
[23:23:20.621]    <block atomic="false" info="">
[23:23:20.621]      __var DEBUG_PORT_VAL    = 0;
[23:23:20.621]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:23:20.621]      __var ACCESS_POINT_VAL  = 0;
[23:23:20.621]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:23:20.621]      __ap = 1; 
[23:23:20.621]        // -> [__ap <= 0x00000001]
[23:23:20.621]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:23:20.630]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:23:20.630]      __ap = 4;
[23:23:20.630]        // -> [__ap <= 0x00000004]
[23:23:20.631]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:20.632]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:23:20.632]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:23:20.632]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:20.632]    </block>
[23:23:20.632]    <block atomic="false" info="">
[23:23:20.632]      __var nReset = 0x80;
[23:23:20.632]        // -> [nReset <= 0x00000080]
[23:23:20.632]      __var canReadPins = 0;
[23:23:20.632]        // -> [canReadPins <= 0x00000000]
[23:23:20.632]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:23:20.632]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:23:20.632]        // -> [canReadPins <= 0x00000001]
[23:23:20.632]    </block>
[23:23:20.632]    <control if="" while="1" timeout="200" info="">
[23:23:20.632]      // while "1"  (timeout="200")
[23:23:20.632]      // while-condition  =>  TRUE
[23:23:20.632]      // while "1"  (timeout="200")
[23:23:20.632]      // while-condition  =>  TRUE
[23:23:20.632]      // while "1"  (timeout="200")
[23:23:20.632]      // while-condition  =>  TRUE
[23:23:20.632]      // while "1"  (timeout="200")
[23:23:20.640]      // while-condition  =>  TRUE
[23:23:20.640]      // while "1"  (timeout="200")
[23:23:20.640]      // while-condition  =>  TRUE
[23:23:20.640]      // while "1"  (timeout="200")
[23:23:20.640]      // while-condition  =>  TRUE
[23:23:20.640]      // while "1"  (timeout="200")
[23:23:20.640]      // while-condition  =>  TRUE
[23:23:20.640]      // while "1"  (timeout="200")
[23:23:20.640]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.641]      // while "1"  (timeout="200")
[23:23:20.641]      // while-condition  =>  TRUE
[23:23:20.651]      // while "1"  (timeout="200")
[23:23:20.651]      // while  =>  TIMEOUT
[23:23:20.651]      // end while "1"
[23:23:20.651]    </control>
[23:23:20.651]    <control if="canReadPins" while="" timeout="0" info="">
[23:23:20.651]      // if-block "canReadPins"
[23:23:20.651]        // =>  TRUE
[23:23:20.651]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:23:20.651]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:23:20.651]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:23:20.651]        // while-condition  =>  FALSE
[23:23:20.651]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:23:20.651]      </control>
[23:23:20.651]      // end if-block "canReadPins"
[23:23:20.651]    </control>
[23:23:20.651]    <control if="!canReadPins" while="" timeout="0" info="">
[23:23:20.651]      // if-block "!canReadPins"
[23:23:20.651]        // =>  FALSE
[23:23:20.651]      // skip if-block "!canReadPins"
[23:23:20.651]    </control>
[23:23:20.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:23:20.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:20.651]        // =>  TRUE
[23:23:20.651]      <block atomic="false" info="">
[23:23:20.651]        WriteAP(0x00, 0x190008);
[23:23:20.661]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:20.661]        WriteAP(0xF0, 0x01);
[23:23:20.663]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:20.663]      </block>
[23:23:20.663]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:20.663]    </control>
[23:23:20.663]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:23:20.663]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:20.663]        // =>  FALSE
[23:23:20.663]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:20.663]    </control>
[23:23:20.663]    <block atomic="false" info="">
[23:23:20.663]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:20.663]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:23:20.670]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:23:20.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:20.671]      __ap = 0; //lets make sure we reset the access point selection
[23:23:20.671]        // -> [__ap <= 0x00000000]
[23:23:20.671]    </block>
[23:23:20.671]  </sequence>
[23:23:20.671]  
[23:23:20.691]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:23:20.691]  
[23:23:20.691]  <debugvars>
[23:23:20.691]    // Pre-defined
[23:23:20.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:20.691]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:20.691]    __dp=0x00000000
[23:23:20.691]    __ap=0x00000000
[23:23:20.691]    __traceout=0x00000000      (Trace Disabled)
[23:23:20.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:20.691]    __FlashAddr=0x00000000
[23:23:20.691]    __FlashLen=0x00000000
[23:23:20.691]    __FlashArg=0x00000000
[23:23:20.691]    __FlashOp=0x00000000
[23:23:20.691]    __Result=0x00000000
[23:23:20.691]  </debugvars>
[23:23:20.691]  
[23:23:20.691]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:23:20.691]    <block atomic="false" info="">
[23:23:20.691]      __var deviceID = 0;
[23:23:20.698]        // -> [deviceID <= 0x00000000]
[23:23:20.698]      __var version = 0;
[23:23:20.698]        // -> [version <= 0x00000000]
[23:23:20.698]      __var partNum = 0;
[23:23:20.698]        // -> [partNum <= 0x00000000]
[23:23:20.698]      __var manuf = 0;
[23:23:20.698]        // -> [manuf <= 0x00000000]
[23:23:20.698]      __var isMSPM0G1X0X_G3X0X = 0;
[23:23:20.698]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:23:20.698]      __var isProduction = 0;
[23:23:20.698]        // -> [isProduction <= 0x00000000]
[23:23:20.698]      __var continueId = 0;
[23:23:20.698]        // -> [continueId <= 0x00000000]
[23:23:20.698]      deviceID =   Read32(0x41C40004);
[23:23:20.702]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:23:20.710]        // -> [deviceID <= 0x2BB8802F]
[23:23:20.710]      version = deviceID >> 28;
[23:23:20.710]        // -> [version <= 0x00000002]
[23:23:20.710]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:23:20.710]        // -> [partNum <= 0x0000BB88]
[23:23:20.710]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:23:20.710]        // -> [manuf <= 0x00000017]
[23:23:20.711]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:23:20.711]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:23:20.711]      isProduction = (version > 0);
[23:23:20.711]        // -> [isProduction <= 0x00000001]
[23:23:20.711]    </block>
[23:23:20.711]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:23:20.711]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:23:20.711]        // =>  FALSE
[23:23:20.711]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:23:20.711]    </control>
[23:23:20.711]    <control if="continueId == 4" while="" timeout="0" info="">
[23:23:20.711]      // if-block "continueId == 4"
[23:23:20.711]        // =>  FALSE
[23:23:20.711]      // skip if-block "continueId == 4"
[23:23:20.711]    </control>
[23:23:20.711]    <control if="!isProduction" while="" timeout="0" info="">
[23:23:20.711]      // if-block "!isProduction"
[23:23:20.711]        // =>  FALSE
[23:23:20.711]      // skip if-block "!isProduction"
[23:23:20.711]    </control>
[23:23:20.711]  </sequence>
[23:23:20.714]  
[23:23:46.132]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:23:46.132]  
[23:23:46.132]  <debugvars>
[23:23:46.132]    // Pre-defined
[23:23:46.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:46.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:46.132]    __dp=0x00000000
[23:23:46.132]    __ap=0x00000000
[23:23:46.132]    __traceout=0x00000000      (Trace Disabled)
[23:23:46.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:46.132]    __FlashAddr=0x00000000
[23:23:46.132]    __FlashLen=0x00000000
[23:23:46.132]    __FlashArg=0x00000000
[23:23:46.132]    __FlashOp=0x00000000
[23:23:46.132]    __Result=0x00000000
[23:23:46.132]  </debugvars>
[23:23:46.132]  
[23:23:46.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:23:46.132]    <block atomic="false" info="">
[23:23:46.132]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:23:46.132]        // -> [isSWJ <= 0x00000001]
[23:23:46.132]      __var hasDormant = __protocol & 0x00020000;
[23:23:46.132]        // -> [hasDormant <= 0x00000000]
[23:23:46.132]      __var protType   = __protocol & 0x0000FFFF;
[23:23:46.132]        // -> [protType <= 0x00000002]
[23:23:46.132]    </block>
[23:23:46.132]    <control if="protType == 1" while="" timeout="0" info="">
[23:23:46.132]      // if-block "protType == 1"
[23:23:46.132]        // =>  FALSE
[23:23:46.132]      // skip if-block "protType == 1"
[23:23:46.132]    </control>
[23:23:46.132]    <control if="protType == 2" while="" timeout="0" info="">
[23:23:46.132]      // if-block "protType == 2"
[23:23:46.132]        // =>  TRUE
[23:23:46.132]      <control if="isSWJ" while="" timeout="0" info="">
[23:23:46.132]        // if-block "isSWJ"
[23:23:46.132]          // =>  TRUE
[23:23:46.132]        <control if="hasDormant" while="" timeout="0" info="">
[23:23:46.132]          // if-block "hasDormant"
[23:23:46.132]            // =>  FALSE
[23:23:46.132]          // skip if-block "hasDormant"
[23:23:46.132]        </control>
[23:23:46.132]        <control if="!hasDormant" while="" timeout="0" info="">
[23:23:46.132]          // if-block "!hasDormant"
[23:23:46.132]            // =>  TRUE
[23:23:46.132]          <block atomic="false" info="">
[23:23:46.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:23:46.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:46.141]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:23:46.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:23:46.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:23:46.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:46.143]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:23:46.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:23:46.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:23:46.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:23:46.143]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:23:46.143]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:23:46.143]          </block>
[23:23:46.143]          // end if-block "!hasDormant"
[23:23:46.143]        </control>
[23:23:46.143]        // end if-block "isSWJ"
[23:23:46.143]      </control>
[23:23:46.143]      <control if="!isSWJ" while="" timeout="0" info="">
[23:23:46.143]        // if-block "!isSWJ"
[23:23:46.143]          // =>  FALSE
[23:23:46.143]        // skip if-block "!isSWJ"
[23:23:46.143]      </control>
[23:23:46.143]      <block atomic="false" info="">
[23:23:46.143]        ReadDP(0x0);
[23:23:46.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:23:46.151]      </block>
[23:23:46.151]      // end if-block "protType == 2"
[23:23:46.151]    </control>
[23:23:46.151]  </sequence>
[23:23:46.151]  
[23:23:46.153]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:23:46.153]  
[23:23:46.153]  <debugvars>
[23:23:46.153]    // Pre-defined
[23:23:46.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:46.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:46.153]    __dp=0x00000000
[23:23:46.153]    __ap=0x00000000
[23:23:46.153]    __traceout=0x00000000      (Trace Disabled)
[23:23:46.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:46.153]    __FlashAddr=0x00000000
[23:23:46.153]    __FlashLen=0x00000000
[23:23:46.153]    __FlashArg=0x00000000
[23:23:46.153]    __FlashOp=0x00000000
[23:23:46.153]    __Result=0x00000000
[23:23:46.153]  </debugvars>
[23:23:46.153]  
[23:23:46.153]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:23:46.153]    <block atomic="false" info="">
[23:23:46.160]      __var SW_DP_ABORT       = 0x0;
[23:23:46.160]        // -> [SW_DP_ABORT <= 0x00000000]
[23:23:46.160]      __var DP_CTRL_STAT      = 0x4;
[23:23:46.160]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:23:46.160]      __var DP_SELECT         = 0x8;
[23:23:46.161]        // -> [DP_SELECT <= 0x00000008]
[23:23:46.161]      __var powered_down      = 0;
[23:23:46.161]        // -> [powered_down <= 0x00000000]
[23:23:46.161]      WriteDP(DP_SELECT, 0x00000000);
[23:23:46.163]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:23:46.163]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:23:46.165]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:23:46.165]        // -> [powered_down <= 0x00000001]
[23:23:46.165]    </block>
[23:23:46.165]    <control if="powered_down" while="" timeout="0" info="">
[23:23:46.165]      // if-block "powered_down"
[23:23:46.165]        // =>  TRUE
[23:23:46.165]      <block atomic="false" info="">
[23:23:46.165]        Message(0, "Debug/System power-up request sent");
[23:23:46.165]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:23:46.165]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:23:46.165]      </block>
[23:23:46.165]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:23:46.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:23:46.171]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:23:46.172]        // while-condition  =>  FALSE
[23:23:46.172]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:23:46.172]      </control>
[23:23:46.172]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:23:46.172]        // if-block "(__protocol & 0xFFFF) == 1"
[23:23:46.172]          // =>  FALSE
[23:23:46.172]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:23:46.172]      </control>
[23:23:46.172]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:23:46.172]        // if-block "(__protocol & 0xFFFF) == 2"
[23:23:46.173]          // =>  TRUE
[23:23:46.173]        <block atomic="false" info="">
[23:23:46.173]          Message(0, "executing SWD power up");
[23:23:46.173]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:23:46.173]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:23:46.173]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:23:46.179]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:23:46.179]        </block>
[23:23:46.179]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:23:46.179]      </control>
[23:23:46.179]      // end if-block "powered_down"
[23:23:46.179]    </control>
[23:23:46.179]    <block atomic="false" info="">
[23:23:46.179]      __var DEBUG_PORT_VAL    = 0;
[23:23:46.179]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:23:46.179]      __var ACCESS_POINT_VAL  = 0;
[23:23:46.180]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:23:46.180]      __ap = 1; 
[23:23:46.180]        // -> [__ap <= 0x00000001]
[23:23:46.180]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:23:46.183]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:23:46.183]      __ap = 4;
[23:23:46.183]        // -> [__ap <= 0x00000004]
[23:23:46.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:46.183]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:23:46.183]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:23:46.183]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:46.190]    </block>
[23:23:46.190]    <block atomic="false" info="">
[23:23:46.190]      __var nReset = 0x80;
[23:23:46.190]        // -> [nReset <= 0x00000080]
[23:23:46.190]      __var canReadPins = 0;
[23:23:46.190]        // -> [canReadPins <= 0x00000000]
[23:23:46.191]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:23:46.192]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:23:46.192]        // -> [canReadPins <= 0x00000001]
[23:23:46.192]    </block>
[23:23:46.192]    <control if="" while="1" timeout="200" info="">
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.193]      // while "1"  (timeout="200")
[23:23:46.193]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.200]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.200]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.200]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.200]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.200]      // while-condition  =>  TRUE
[23:23:46.200]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.201]      // while-condition  =>  TRUE
[23:23:46.201]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.204]      // while-condition  =>  TRUE
[23:23:46.204]      // while "1"  (timeout="200")
[23:23:46.210]      // while-condition  =>  TRUE
[23:23:46.210]      // while "1"  (timeout="200")
[23:23:46.210]      // while  =>  TIMEOUT
[23:23:46.210]      // end while "1"
[23:23:46.210]    </control>
[23:23:46.210]    <control if="canReadPins" while="" timeout="0" info="">
[23:23:46.210]      // if-block "canReadPins"
[23:23:46.210]        // =>  TRUE
[23:23:46.210]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:23:46.210]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:23:46.212]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:23:46.212]        // while-condition  =>  FALSE
[23:23:46.212]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:23:46.212]      </control>
[23:23:46.212]      // end if-block "canReadPins"
[23:23:46.212]    </control>
[23:23:46.212]    <control if="!canReadPins" while="" timeout="0" info="">
[23:23:46.212]      // if-block "!canReadPins"
[23:23:46.212]        // =>  FALSE
[23:23:46.212]      // skip if-block "!canReadPins"
[23:23:46.214]    </control>
[23:23:46.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:23:46.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:46.214]        // =>  TRUE
[23:23:46.214]      <block atomic="false" info="">
[23:23:46.214]        WriteAP(0x00, 0x190008);
[23:23:46.214]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:46.214]        WriteAP(0xF0, 0x01);
[23:23:46.214]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:23:46.214]      </block>
[23:23:46.214]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:23:46.214]    </control>
[23:23:46.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:23:46.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:46.214]        // =>  FALSE
[23:23:46.221]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:23:46.221]    </control>
[23:23:46.221]    <block atomic="false" info="">
[23:23:46.221]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:23:46.224]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:23:46.224]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:23:46.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:23:46.226]      __ap = 0; //lets make sure we reset the access point selection
[23:23:46.226]        // -> [__ap <= 0x00000000]
[23:23:46.226]    </block>
[23:23:46.226]  </sequence>
[23:23:46.226]  
[23:23:46.251]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:23:46.251]  
[23:23:46.251]  <debugvars>
[23:23:46.251]    // Pre-defined
[23:23:46.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:23:46.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:23:46.252]    __dp=0x00000000
[23:23:46.252]    __ap=0x00000000
[23:23:46.252]    __traceout=0x00000000      (Trace Disabled)
[23:23:46.252]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:23:46.252]    __FlashAddr=0x00000000
[23:23:46.252]    __FlashLen=0x00000000
[23:23:46.252]    __FlashArg=0x00000000
[23:23:46.252]    __FlashOp=0x00000000
[23:23:46.252]    __Result=0x00000000
[23:23:46.252]  </debugvars>
[23:23:46.252]  
[23:23:46.252]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:23:46.252]    <block atomic="false" info="">
[23:23:46.252]      __var deviceID = 0;
[23:23:46.252]        // -> [deviceID <= 0x00000000]
[23:23:46.252]      __var version = 0;
[23:23:46.252]        // -> [version <= 0x00000000]
[23:23:46.252]      __var partNum = 0;
[23:23:46.252]        // -> [partNum <= 0x00000000]
[23:23:46.252]      __var manuf = 0;
[23:23:46.252]        // -> [manuf <= 0x00000000]
[23:23:46.252]      __var isMSPM0G1X0X_G3X0X = 0;
[23:23:46.252]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:23:46.252]      __var isProduction = 0;
[23:23:46.252]        // -> [isProduction <= 0x00000000]
[23:23:46.252]      __var continueId = 0;
[23:23:46.252]        // -> [continueId <= 0x00000000]
[23:23:46.252]      deviceID =   Read32(0x41C40004);
[23:23:46.261]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:23:46.261]        // -> [deviceID <= 0x2BB8802F]
[23:23:46.262]      version = deviceID >> 28;
[23:23:46.262]        // -> [version <= 0x00000002]
[23:23:46.262]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:23:46.262]        // -> [partNum <= 0x0000BB88]
[23:23:46.262]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:23:46.262]        // -> [manuf <= 0x00000017]
[23:23:46.262]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:23:46.262]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:23:46.262]      isProduction = (version > 0);
[23:23:46.262]        // -> [isProduction <= 0x00000001]
[23:23:46.262]    </block>
[23:23:46.262]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:23:46.262]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:23:46.262]        // =>  FALSE
[23:23:46.262]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:23:46.262]    </control>
[23:23:46.262]    <control if="continueId == 4" while="" timeout="0" info="">
[23:23:46.262]      // if-block "continueId == 4"
[23:23:46.262]        // =>  FALSE
[23:23:46.262]      // skip if-block "continueId == 4"
[23:23:46.262]    </control>
[23:23:46.262]    <control if="!isProduction" while="" timeout="0" info="">
[23:23:46.262]      // if-block "!isProduction"
[23:23:46.262]        // =>  FALSE
[23:23:46.262]      // skip if-block "!isProduction"
[23:23:46.262]    </control>
[23:23:46.262]  </sequence>
[23:23:46.262]  
[23:24:21.512]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:24:21.512]  
[23:24:21.512]  <debugvars>
[23:24:21.512]    // Pre-defined
[23:24:21.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:21.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:21.520]    __dp=0x00000000
[23:24:21.520]    __ap=0x00000000
[23:24:21.520]    __traceout=0x00000000      (Trace Disabled)
[23:24:21.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:21.520]    __FlashAddr=0x00000000
[23:24:21.521]    __FlashLen=0x00000000
[23:24:21.521]    __FlashArg=0x00000000
[23:24:21.521]    __FlashOp=0x00000000
[23:24:21.521]    __Result=0x00000000
[23:24:21.521]  </debugvars>
[23:24:21.521]  
[23:24:21.521]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:24:21.522]    <block atomic="false" info="">
[23:24:21.522]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:24:21.522]        // -> [isSWJ <= 0x00000001]
[23:24:21.522]      __var hasDormant = __protocol & 0x00020000;
[23:24:21.522]        // -> [hasDormant <= 0x00000000]
[23:24:21.523]      __var protType   = __protocol & 0x0000FFFF;
[23:24:21.523]        // -> [protType <= 0x00000002]
[23:24:21.523]    </block>
[23:24:21.523]    <control if="protType == 1" while="" timeout="0" info="">
[23:24:21.523]      // if-block "protType == 1"
[23:24:21.523]        // =>  FALSE
[23:24:21.523]      // skip if-block "protType == 1"
[23:24:21.523]    </control>
[23:24:21.523]    <control if="protType == 2" while="" timeout="0" info="">
[23:24:21.523]      // if-block "protType == 2"
[23:24:21.523]        // =>  TRUE
[23:24:21.523]      <control if="isSWJ" while="" timeout="0" info="">
[23:24:21.523]        // if-block "isSWJ"
[23:24:21.523]          // =>  TRUE
[23:24:21.523]        <control if="hasDormant" while="" timeout="0" info="">
[23:24:21.523]          // if-block "hasDormant"
[23:24:21.523]            // =>  FALSE
[23:24:21.523]          // skip if-block "hasDormant"
[23:24:21.523]        </control>
[23:24:21.524]        <control if="!hasDormant" while="" timeout="0" info="">
[23:24:21.524]          // if-block "!hasDormant"
[23:24:21.524]            // =>  TRUE
[23:24:21.524]          <block atomic="false" info="">
[23:24:21.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:24:21.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:21.524]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:24:21.532]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:24:21.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:24:21.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:21.533]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:24:21.533]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:24:21.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:24:21.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:21.542]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:24:21.544]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:24:21.544]          </block>
[23:24:21.544]          // end if-block "!hasDormant"
[23:24:21.544]        </control>
[23:24:21.544]        // end if-block "isSWJ"
[23:24:21.544]      </control>
[23:24:21.544]      <control if="!isSWJ" while="" timeout="0" info="">
[23:24:21.544]        // if-block "!isSWJ"
[23:24:21.544]          // =>  FALSE
[23:24:21.544]        // skip if-block "!isSWJ"
[23:24:21.544]      </control>
[23:24:21.544]      <block atomic="false" info="">
[23:24:21.544]        ReadDP(0x0);
[23:24:21.544]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:24:21.544]      </block>
[23:24:21.544]      // end if-block "protType == 2"
[23:24:21.544]    </control>
[23:24:21.544]  </sequence>
[23:24:21.544]  
[23:24:21.553]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:24:21.553]  
[23:24:21.553]  <debugvars>
[23:24:21.553]    // Pre-defined
[23:24:21.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:21.553]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:21.553]    __dp=0x00000000
[23:24:21.553]    __ap=0x00000000
[23:24:21.553]    __traceout=0x00000000      (Trace Disabled)
[23:24:21.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:21.553]    __FlashAddr=0x00000000
[23:24:21.553]    __FlashLen=0x00000000
[23:24:21.553]    __FlashArg=0x00000000
[23:24:21.553]    __FlashOp=0x00000000
[23:24:21.553]    __Result=0x00000000
[23:24:21.553]  </debugvars>
[23:24:21.553]  
[23:24:21.553]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:24:21.553]    <block atomic="false" info="">
[23:24:21.553]      __var SW_DP_ABORT       = 0x0;
[23:24:21.553]        // -> [SW_DP_ABORT <= 0x00000000]
[23:24:21.553]      __var DP_CTRL_STAT      = 0x4;
[23:24:21.553]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:24:21.553]      __var DP_SELECT         = 0x8;
[23:24:21.553]        // -> [DP_SELECT <= 0x00000008]
[23:24:21.553]      __var powered_down      = 0;
[23:24:21.553]        // -> [powered_down <= 0x00000000]
[23:24:21.553]      WriteDP(DP_SELECT, 0x00000000);
[23:24:21.553]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:24:21.553]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:24:21.561]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:24:21.561]        // -> [powered_down <= 0x00000001]
[23:24:21.561]    </block>
[23:24:21.561]    <control if="powered_down" while="" timeout="0" info="">
[23:24:21.561]      // if-block "powered_down"
[23:24:21.561]        // =>  TRUE
[23:24:21.562]      <block atomic="false" info="">
[23:24:21.562]        Message(0, "Debug/System power-up request sent");
[23:24:21.562]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:24:21.562]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:24:21.562]      </block>
[23:24:21.562]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:24:21.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:24:21.562]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:24:21.562]        // while-condition  =>  FALSE
[23:24:21.562]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:24:21.562]      </control>
[23:24:21.562]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:24:21.562]        // if-block "(__protocol & 0xFFFF) == 1"
[23:24:21.562]          // =>  FALSE
[23:24:21.562]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:24:21.562]      </control>
[23:24:21.562]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:24:21.562]        // if-block "(__protocol & 0xFFFF) == 2"
[23:24:21.562]          // =>  TRUE
[23:24:21.562]        <block atomic="false" info="">
[23:24:21.562]          Message(0, "executing SWD power up");
[23:24:21.562]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:24:21.562]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:24:21.562]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:24:21.571]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:24:21.571]        </block>
[23:24:21.571]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:24:21.571]      </control>
[23:24:21.571]      // end if-block "powered_down"
[23:24:21.571]    </control>
[23:24:21.571]    <block atomic="false" info="">
[23:24:21.571]      __var DEBUG_PORT_VAL    = 0;
[23:24:21.571]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:24:21.571]      __var ACCESS_POINT_VAL  = 0;
[23:24:21.571]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:24:21.571]      __ap = 1; 
[23:24:21.571]        // -> [__ap <= 0x00000001]
[23:24:21.571]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:24:21.573]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:24:21.573]      __ap = 4;
[23:24:21.573]        // -> [__ap <= 0x00000004]
[23:24:21.573]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:24:21.582]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:24:21.582]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:24:21.582]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:24:21.582]    </block>
[23:24:21.582]    <block atomic="false" info="">
[23:24:21.582]      __var nReset = 0x80;
[23:24:21.582]        // -> [nReset <= 0x00000080]
[23:24:21.582]      __var canReadPins = 0;
[23:24:21.582]        // -> [canReadPins <= 0x00000000]
[23:24:21.582]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:24:21.582]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:24:21.582]        // -> [canReadPins <= 0x00000001]
[23:24:21.582]    </block>
[23:24:21.582]    <control if="" while="1" timeout="200" info="">
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.582]      // while "1"  (timeout="200")
[23:24:21.582]      // while-condition  =>  TRUE
[23:24:21.590]      // while "1"  (timeout="200")
[23:24:21.590]      // while-condition  =>  TRUE
[23:24:21.590]      // while "1"  (timeout="200")
[23:24:21.590]      // while-condition  =>  TRUE
[23:24:21.590]      // while "1"  (timeout="200")
[23:24:21.590]      // while-condition  =>  TRUE
[23:24:21.590]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.591]      // while-condition  =>  TRUE
[23:24:21.591]      // while "1"  (timeout="200")
[23:24:21.600]      // while-condition  =>  TRUE
[23:24:21.600]      // while "1"  (timeout="200")
[23:24:21.600]      // while  =>  TIMEOUT
[23:24:21.601]      // end while "1"
[23:24:21.601]    </control>
[23:24:21.601]    <control if="canReadPins" while="" timeout="0" info="">
[23:24:21.601]      // if-block "canReadPins"
[23:24:21.601]        // =>  TRUE
[23:24:21.601]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:24:21.601]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:24:21.602]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:24:21.602]        // while-condition  =>  FALSE
[23:24:21.602]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:24:21.602]      </control>
[23:24:21.602]      // end if-block "canReadPins"
[23:24:21.602]    </control>
[23:24:21.602]    <control if="!canReadPins" while="" timeout="0" info="">
[23:24:21.602]      // if-block "!canReadPins"
[23:24:21.602]        // =>  FALSE
[23:24:21.602]      // skip if-block "!canReadPins"
[23:24:21.602]    </control>
[23:24:21.602]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:24:21.602]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:24:21.602]        // =>  TRUE
[23:24:21.602]      <block atomic="false" info="">
[23:24:21.602]        WriteAP(0x00, 0x190008);
[23:24:21.602]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:24:21.602]        WriteAP(0xF0, 0x01);
[23:24:21.610]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:24:21.610]      </block>
[23:24:21.610]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:24:21.610]    </control>
[23:24:21.610]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:24:21.611]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:24:21.611]        // =>  FALSE
[23:24:21.611]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:24:21.611]    </control>
[23:24:21.611]    <block atomic="false" info="">
[23:24:21.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:24:21.612]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:24:21.612]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:24:21.612]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:24:21.612]      __ap = 0; //lets make sure we reset the access point selection
[23:24:21.612]        // -> [__ap <= 0x00000000]
[23:24:21.612]    </block>
[23:24:21.612]  </sequence>
[23:24:21.612]  
[23:24:21.651]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:24:21.651]  
[23:24:21.651]  <debugvars>
[23:24:21.651]    // Pre-defined
[23:24:21.651]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:21.651]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:21.651]    __dp=0x00000000
[23:24:21.651]    __ap=0x00000000
[23:24:21.651]    __traceout=0x00000000      (Trace Disabled)
[23:24:21.652]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:21.652]    __FlashAddr=0x00000000
[23:24:21.652]    __FlashLen=0x00000000
[23:24:21.652]    __FlashArg=0x00000000
[23:24:21.652]    __FlashOp=0x00000000
[23:24:21.652]    __Result=0x00000000
[23:24:21.652]  </debugvars>
[23:24:21.652]  
[23:24:21.652]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:24:21.652]    <block atomic="false" info="">
[23:24:21.652]      __var deviceID = 0;
[23:24:21.652]        // -> [deviceID <= 0x00000000]
[23:24:21.652]      __var version = 0;
[23:24:21.652]        // -> [version <= 0x00000000]
[23:24:21.652]      __var partNum = 0;
[23:24:21.652]        // -> [partNum <= 0x00000000]
[23:24:21.652]      __var manuf = 0;
[23:24:21.652]        // -> [manuf <= 0x00000000]
[23:24:21.652]      __var isMSPM0G1X0X_G3X0X = 0;
[23:24:21.652]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:24:21.652]      __var isProduction = 0;
[23:24:21.652]        // -> [isProduction <= 0x00000000]
[23:24:21.652]      __var continueId = 0;
[23:24:21.652]        // -> [continueId <= 0x00000000]
[23:24:21.652]      deviceID =   Read32(0x41C40004);
[23:24:21.662]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:24:21.663]        // -> [deviceID <= 0x2BB8802F]
[23:24:21.663]      version = deviceID >> 28;
[23:24:21.663]        // -> [version <= 0x00000002]
[23:24:21.663]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:24:21.663]        // -> [partNum <= 0x0000BB88]
[23:24:21.663]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:24:21.663]        // -> [manuf <= 0x00000017]
[23:24:21.663]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:24:21.663]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:24:21.663]      isProduction = (version > 0);
[23:24:21.664]        // -> [isProduction <= 0x00000001]
[23:24:21.664]    </block>
[23:24:21.664]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:24:21.664]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:24:21.664]        // =>  FALSE
[23:24:21.664]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:24:21.664]    </control>
[23:24:21.664]    <control if="continueId == 4" while="" timeout="0" info="">
[23:24:21.664]      // if-block "continueId == 4"
[23:24:21.664]        // =>  FALSE
[23:24:21.664]      // skip if-block "continueId == 4"
[23:24:21.665]    </control>
[23:24:21.665]    <control if="!isProduction" while="" timeout="0" info="">
[23:24:21.665]      // if-block "!isProduction"
[23:24:21.665]        // =>  FALSE
[23:24:21.665]      // skip if-block "!isProduction"
[23:24:21.665]    </control>
[23:24:21.665]  </sequence>
[23:24:21.665]  
[23:25:48.353]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:25:48.353]  
[23:25:48.353]  <debugvars>
[23:25:48.353]    // Pre-defined
[23:25:48.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:48.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:48.353]    __dp=0x00000000
[23:25:48.353]    __ap=0x00000000
[23:25:48.353]    __traceout=0x00000000      (Trace Disabled)
[23:25:48.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:48.353]    __FlashAddr=0x00000000
[23:25:48.353]    __FlashLen=0x00000000
[23:25:48.353]    __FlashArg=0x00000000
[23:25:48.353]    __FlashOp=0x00000000
[23:25:48.353]    __Result=0x00000000
[23:25:48.353]  </debugvars>
[23:25:48.353]  
[23:25:48.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:25:48.359]    <block atomic="false" info="">
[23:25:48.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:25:48.359]        // -> [isSWJ <= 0x00000001]
[23:25:48.359]      __var hasDormant = __protocol & 0x00020000;
[23:25:48.359]        // -> [hasDormant <= 0x00000000]
[23:25:48.359]      __var protType   = __protocol & 0x0000FFFF;
[23:25:48.359]        // -> [protType <= 0x00000002]
[23:25:48.359]    </block>
[23:25:48.359]    <control if="protType == 1" while="" timeout="0" info="">
[23:25:48.359]      // if-block "protType == 1"
[23:25:48.360]        // =>  FALSE
[23:25:48.360]      // skip if-block "protType == 1"
[23:25:48.360]    </control>
[23:25:48.360]    <control if="protType == 2" while="" timeout="0" info="">
[23:25:48.360]      // if-block "protType == 2"
[23:25:48.360]        // =>  TRUE
[23:25:48.360]      <control if="isSWJ" while="" timeout="0" info="">
[23:25:48.360]        // if-block "isSWJ"
[23:25:48.360]          // =>  TRUE
[23:25:48.361]        <control if="hasDormant" while="" timeout="0" info="">
[23:25:48.361]          // if-block "hasDormant"
[23:25:48.361]            // =>  FALSE
[23:25:48.361]          // skip if-block "hasDormant"
[23:25:48.361]        </control>
[23:25:48.361]        <control if="!hasDormant" while="" timeout="0" info="">
[23:25:48.362]          // if-block "!hasDormant"
[23:25:48.362]            // =>  TRUE
[23:25:48.362]          <block atomic="false" info="">
[23:25:48.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:25:48.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:48.363]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:25:48.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:25:48.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:25:48.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:48.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:25:48.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:25:48.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:25:48.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:25:48.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:25:48.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:25:48.372]          </block>
[23:25:48.372]          // end if-block "!hasDormant"
[23:25:48.372]        </control>
[23:25:48.372]        // end if-block "isSWJ"
[23:25:48.372]      </control>
[23:25:48.372]      <control if="!isSWJ" while="" timeout="0" info="">
[23:25:48.372]        // if-block "!isSWJ"
[23:25:48.372]          // =>  FALSE
[23:25:48.372]        // skip if-block "!isSWJ"
[23:25:48.372]      </control>
[23:25:48.372]      <block atomic="false" info="">
[23:25:48.372]        ReadDP(0x0);
[23:25:48.380]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:25:48.380]      </block>
[23:25:48.380]      // end if-block "protType == 2"
[23:25:48.380]    </control>
[23:25:48.380]  </sequence>
[23:25:48.380]  
[23:25:48.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:25:48.383]  
[23:25:48.383]  <debugvars>
[23:25:48.383]    // Pre-defined
[23:25:48.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:48.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:48.383]    __dp=0x00000000
[23:25:48.383]    __ap=0x00000000
[23:25:48.383]    __traceout=0x00000000      (Trace Disabled)
[23:25:48.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:48.383]    __FlashAddr=0x00000000
[23:25:48.383]    __FlashLen=0x00000000
[23:25:48.383]    __FlashArg=0x00000000
[23:25:48.383]    __FlashOp=0x00000000
[23:25:48.383]    __Result=0x00000000
[23:25:48.383]  </debugvars>
[23:25:48.383]  
[23:25:48.383]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:25:48.383]    <block atomic="false" info="">
[23:25:48.383]      __var SW_DP_ABORT       = 0x0;
[23:25:48.383]        // -> [SW_DP_ABORT <= 0x00000000]
[23:25:48.383]      __var DP_CTRL_STAT      = 0x4;
[23:25:48.383]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:25:48.383]      __var DP_SELECT         = 0x8;
[23:25:48.383]        // -> [DP_SELECT <= 0x00000008]
[23:25:48.383]      __var powered_down      = 0;
[23:25:48.383]        // -> [powered_down <= 0x00000000]
[23:25:48.383]      WriteDP(DP_SELECT, 0x00000000);
[23:25:48.383]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:25:48.383]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:25:48.390]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:25:48.390]        // -> [powered_down <= 0x00000001]
[23:25:48.390]    </block>
[23:25:48.390]    <control if="powered_down" while="" timeout="0" info="">
[23:25:48.390]      // if-block "powered_down"
[23:25:48.390]        // =>  TRUE
[23:25:48.390]      <block atomic="false" info="">
[23:25:48.390]        Message(0, "Debug/System power-up request sent");
[23:25:48.393]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:25:48.393]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:25:48.393]      </block>
[23:25:48.393]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:25:48.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:25:48.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:25:48.393]        // while-condition  =>  FALSE
[23:25:48.393]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:25:48.393]      </control>
[23:25:48.393]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:25:48.393]        // if-block "(__protocol & 0xFFFF) == 1"
[23:25:48.393]          // =>  FALSE
[23:25:48.393]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:25:48.393]      </control>
[23:25:48.393]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:25:48.393]        // if-block "(__protocol & 0xFFFF) == 2"
[23:25:48.393]          // =>  TRUE
[23:25:48.393]        <block atomic="false" info="">
[23:25:48.393]          Message(0, "executing SWD power up");
[23:25:48.399]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:25:48.404]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:25:48.404]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:25:48.404]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:25:48.404]        </block>
[23:25:48.404]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:25:48.404]      </control>
[23:25:48.404]      // end if-block "powered_down"
[23:25:48.404]    </control>
[23:25:48.404]    <block atomic="false" info="">
[23:25:48.404]      __var DEBUG_PORT_VAL    = 0;
[23:25:48.404]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:25:48.404]      __var ACCESS_POINT_VAL  = 0;
[23:25:48.404]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:25:48.404]      __ap = 1; 
[23:25:48.404]        // -> [__ap <= 0x00000001]
[23:25:48.404]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:25:48.412]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:25:48.412]      __ap = 4;
[23:25:48.412]        // -> [__ap <= 0x00000004]
[23:25:48.412]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:25:48.420]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:25:48.420]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:25:48.420]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:25:48.423]    </block>
[23:25:48.423]    <block atomic="false" info="">
[23:25:48.423]      __var nReset = 0x80;
[23:25:48.423]        // -> [nReset <= 0x00000080]
[23:25:48.423]      __var canReadPins = 0;
[23:25:48.423]        // -> [canReadPins <= 0x00000000]
[23:25:48.423]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:25:48.423]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:25:48.423]        // -> [canReadPins <= 0x00000001]
[23:25:48.423]    </block>
[23:25:48.423]    <control if="" while="1" timeout="200" info="">
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.423]      // while-condition  =>  TRUE
[23:25:48.423]      // while "1"  (timeout="200")
[23:25:48.429]      // while-condition  =>  TRUE
[23:25:48.429]      // while "1"  (timeout="200")
[23:25:48.429]      // while  =>  TIMEOUT
[23:25:48.429]      // end while "1"
[23:25:48.429]    </control>
[23:25:48.429]    <control if="canReadPins" while="" timeout="0" info="">
[23:25:48.429]      // if-block "canReadPins"
[23:25:48.430]        // =>  TRUE
[23:25:48.430]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:25:48.430]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:25:48.431]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:25:48.431]        // while-condition  =>  FALSE
[23:25:48.431]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:25:48.431]      </control>
[23:25:48.431]      // end if-block "canReadPins"
[23:25:48.431]    </control>
[23:25:48.431]    <control if="!canReadPins" while="" timeout="0" info="">
[23:25:48.431]      // if-block "!canReadPins"
[23:25:48.431]        // =>  FALSE
[23:25:48.431]      // skip if-block "!canReadPins"
[23:25:48.433]    </control>
[23:25:48.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:25:48.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:25:48.433]        // =>  TRUE
[23:25:48.433]      <block atomic="false" info="">
[23:25:48.433]        WriteAP(0x00, 0x190008);
[23:25:48.433]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:25:48.433]        WriteAP(0xF0, 0x01);
[23:25:48.440]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:25:48.440]      </block>
[23:25:48.440]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:25:48.440]    </control>
[23:25:48.440]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:25:48.440]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:25:48.440]        // =>  FALSE
[23:25:48.440]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:25:48.440]    </control>
[23:25:48.440]    <block atomic="false" info="">
[23:25:48.440]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:25:48.450]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:25:48.450]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:25:48.450]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:25:48.451]      __ap = 0; //lets make sure we reset the access point selection
[23:25:48.451]        // -> [__ap <= 0x00000000]
[23:25:48.451]    </block>
[23:25:48.451]  </sequence>
[23:25:48.453]  
[23:25:48.484]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:25:48.484]  
[23:25:48.484]  <debugvars>
[23:25:48.484]    // Pre-defined
[23:25:48.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:25:48.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:25:48.484]    __dp=0x00000000
[23:25:48.484]    __ap=0x00000000
[23:25:48.484]    __traceout=0x00000000      (Trace Disabled)
[23:25:48.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:25:48.484]    __FlashAddr=0x00000000
[23:25:48.484]    __FlashLen=0x00000000
[23:25:48.484]    __FlashArg=0x00000000
[23:25:48.484]    __FlashOp=0x00000000
[23:25:48.484]    __Result=0x00000000
[23:25:48.484]  </debugvars>
[23:25:48.484]  
[23:25:48.484]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:25:48.484]    <block atomic="false" info="">
[23:25:48.484]      __var deviceID = 0;
[23:25:48.484]        // -> [deviceID <= 0x00000000]
[23:25:48.484]      __var version = 0;
[23:25:48.484]        // -> [version <= 0x00000000]
[23:25:48.484]      __var partNum = 0;
[23:25:48.484]        // -> [partNum <= 0x00000000]
[23:25:48.484]      __var manuf = 0;
[23:25:48.484]        // -> [manuf <= 0x00000000]
[23:25:48.484]      __var isMSPM0G1X0X_G3X0X = 0;
[23:25:48.484]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:25:48.484]      __var isProduction = 0;
[23:25:48.484]        // -> [isProduction <= 0x00000000]
[23:25:48.484]      __var continueId = 0;
[23:25:48.484]        // -> [continueId <= 0x00000000]
[23:25:48.484]      deviceID =   Read32(0x41C40004);
[23:25:48.494]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:25:48.494]        // -> [deviceID <= 0x2BB8802F]
[23:25:48.494]      version = deviceID >> 28;
[23:25:48.494]        // -> [version <= 0x00000002]
[23:25:48.494]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:25:48.494]        // -> [partNum <= 0x0000BB88]
[23:25:48.494]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:25:48.494]        // -> [manuf <= 0x00000017]
[23:25:48.494]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:25:48.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:25:48.494]      isProduction = (version > 0);
[23:25:48.494]        // -> [isProduction <= 0x00000001]
[23:25:48.494]    </block>
[23:25:48.494]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:25:48.494]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:25:48.494]        // =>  FALSE
[23:25:48.494]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:25:48.494]    </control>
[23:25:48.494]    <control if="continueId == 4" while="" timeout="0" info="">
[23:25:48.496]      // if-block "continueId == 4"
[23:25:48.496]        // =>  FALSE
[23:25:48.496]      // skip if-block "continueId == 4"
[23:25:48.496]    </control>
[23:25:48.496]    <control if="!isProduction" while="" timeout="0" info="">
[23:25:48.496]      // if-block "!isProduction"
[23:25:48.496]        // =>  FALSE
[23:25:48.496]      // skip if-block "!isProduction"
[23:25:48.496]    </control>
[23:25:48.496]  </sequence>
[23:25:48.496]  
[23:26:54.711]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:26:54.711]  
[23:26:54.714]  <debugvars>
[23:26:54.714]    // Pre-defined
[23:26:54.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:26:54.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:26:54.714]    __dp=0x00000000
[23:26:54.714]    __ap=0x00000000
[23:26:54.714]    __traceout=0x00000000      (Trace Disabled)
[23:26:54.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:26:54.714]    __FlashAddr=0x00000000
[23:26:54.714]    __FlashLen=0x00000000
[23:26:54.714]    __FlashArg=0x00000000
[23:26:54.714]    __FlashOp=0x00000000
[23:26:54.714]    __Result=0x00000000
[23:26:54.714]  </debugvars>
[23:26:54.714]  
[23:26:54.714]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:26:54.714]    <block atomic="false" info="">
[23:26:54.714]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:26:54.716]        // -> [isSWJ <= 0x00000001]
[23:26:54.716]      __var hasDormant = __protocol & 0x00020000;
[23:26:54.716]        // -> [hasDormant <= 0x00000000]
[23:26:54.716]      __var protType   = __protocol & 0x0000FFFF;
[23:26:54.716]        // -> [protType <= 0x00000002]
[23:26:54.716]    </block>
[23:26:54.716]    <control if="protType == 1" while="" timeout="0" info="">
[23:26:54.716]      // if-block "protType == 1"
[23:26:54.716]        // =>  FALSE
[23:26:54.716]      // skip if-block "protType == 1"
[23:26:54.716]    </control>
[23:26:54.716]    <control if="protType == 2" while="" timeout="0" info="">
[23:26:54.716]      // if-block "protType == 2"
[23:26:54.716]        // =>  TRUE
[23:26:54.716]      <control if="isSWJ" while="" timeout="0" info="">
[23:26:54.719]        // if-block "isSWJ"
[23:26:54.719]          // =>  TRUE
[23:26:54.719]        <control if="hasDormant" while="" timeout="0" info="">
[23:26:54.719]          // if-block "hasDormant"
[23:26:54.719]            // =>  FALSE
[23:26:54.719]          // skip if-block "hasDormant"
[23:26:54.719]        </control>
[23:26:54.719]        <control if="!hasDormant" while="" timeout="0" info="">
[23:26:54.719]          // if-block "!hasDormant"
[23:26:54.719]            // =>  TRUE
[23:26:54.719]          <block atomic="false" info="">
[23:26:54.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:26:54.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:26:54.722]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:26:54.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:26:54.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:26:54.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:26:54.722]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:26:54.726]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:26:54.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:26:54.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:26:54.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:26:54.731]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:26:54.731]          </block>
[23:26:54.731]          // end if-block "!hasDormant"
[23:26:54.731]        </control>
[23:26:54.731]        // end if-block "isSWJ"
[23:26:54.731]      </control>
[23:26:54.731]      <control if="!isSWJ" while="" timeout="0" info="">
[23:26:54.731]        // if-block "!isSWJ"
[23:26:54.731]          // =>  FALSE
[23:26:54.731]        // skip if-block "!isSWJ"
[23:26:54.731]      </control>
[23:26:54.731]      <block atomic="false" info="">
[23:26:54.731]        ReadDP(0x0);
[23:26:54.731]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:26:54.731]      </block>
[23:26:54.731]      // end if-block "protType == 2"
[23:26:54.731]    </control>
[23:26:54.731]  </sequence>
[23:26:54.731]  
[23:26:54.739]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:26:54.739]  
[23:26:54.739]  <debugvars>
[23:26:54.740]    // Pre-defined
[23:26:54.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:26:54.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:26:54.740]    __dp=0x00000000
[23:26:54.740]    __ap=0x00000000
[23:26:54.740]    __traceout=0x00000000      (Trace Disabled)
[23:26:54.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:26:54.740]    __FlashAddr=0x00000000
[23:26:54.740]    __FlashLen=0x00000000
[23:26:54.740]    __FlashArg=0x00000000
[23:26:54.741]    __FlashOp=0x00000000
[23:26:54.741]    __Result=0x00000000
[23:26:54.741]  </debugvars>
[23:26:54.741]  
[23:26:54.741]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:26:54.741]    <block atomic="false" info="">
[23:26:54.741]      __var SW_DP_ABORT       = 0x0;
[23:26:54.741]        // -> [SW_DP_ABORT <= 0x00000000]
[23:26:54.741]      __var DP_CTRL_STAT      = 0x4;
[23:26:54.741]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:26:54.741]      __var DP_SELECT         = 0x8;
[23:26:54.741]        // -> [DP_SELECT <= 0x00000008]
[23:26:54.741]      __var powered_down      = 0;
[23:26:54.741]        // -> [powered_down <= 0x00000000]
[23:26:54.741]      WriteDP(DP_SELECT, 0x00000000);
[23:26:54.749]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:26:54.749]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:26:54.750]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:26:54.751]        // -> [powered_down <= 0x00000001]
[23:26:54.751]    </block>
[23:26:54.751]    <control if="powered_down" while="" timeout="0" info="">
[23:26:54.751]      // if-block "powered_down"
[23:26:54.751]        // =>  TRUE
[23:26:54.751]      <block atomic="false" info="">
[23:26:54.751]        Message(0, "Debug/System power-up request sent");
[23:26:54.754]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:26:54.754]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:26:54.754]      </block>
[23:26:54.754]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:26:54.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:26:54.758]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:26:54.758]        // while-condition  =>  FALSE
[23:26:54.758]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:26:54.758]      </control>
[23:26:54.758]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:26:54.758]        // if-block "(__protocol & 0xFFFF) == 1"
[23:26:54.758]          // =>  FALSE
[23:26:54.759]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:26:54.759]      </control>
[23:26:54.759]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:26:54.759]        // if-block "(__protocol & 0xFFFF) == 2"
[23:26:54.759]          // =>  TRUE
[23:26:54.759]        <block atomic="false" info="">
[23:26:54.759]          Message(0, "executing SWD power up");
[23:26:54.761]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:26:54.761]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:26:54.761]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:26:54.761]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:26:54.765]        </block>
[23:26:54.765]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:26:54.765]      </control>
[23:26:54.765]      // end if-block "powered_down"
[23:26:54.765]    </control>
[23:26:54.765]    <block atomic="false" info="">
[23:26:54.765]      __var DEBUG_PORT_VAL    = 0;
[23:26:54.765]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:26:54.765]      __var ACCESS_POINT_VAL  = 0;
[23:26:54.765]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:26:54.765]      __ap = 1; 
[23:26:54.766]        // -> [__ap <= 0x00000001]
[23:26:54.766]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:26:54.769]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:26:54.769]      __ap = 4;
[23:26:54.769]        // -> [__ap <= 0x00000004]
[23:26:54.770]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:26:54.770]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:26:54.770]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:26:54.774]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:26:54.774]    </block>
[23:26:54.774]    <block atomic="false" info="">
[23:26:54.774]      __var nReset = 0x80;
[23:26:54.774]        // -> [nReset <= 0x00000080]
[23:26:54.774]      __var canReadPins = 0;
[23:26:54.774]        // -> [canReadPins <= 0x00000000]
[23:26:54.774]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:26:54.781]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:26:54.781]        // -> [canReadPins <= 0x00000001]
[23:26:54.781]    </block>
[23:26:54.781]    <control if="" while="1" timeout="200" info="">
[23:26:54.781]      // while "1"  (timeout="200")
[23:26:54.781]      // while-condition  =>  TRUE
[23:26:54.781]      // while "1"  (timeout="200")
[23:26:54.781]      // while-condition  =>  TRUE
[23:26:54.781]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.783]      // while-condition  =>  TRUE
[23:26:54.783]      // while "1"  (timeout="200")
[23:26:54.788]      // while-condition  =>  TRUE
[23:26:54.788]      // while "1"  (timeout="200")
[23:26:54.788]      // while  =>  TIMEOUT
[23:26:54.788]      // end while "1"
[23:26:54.788]    </control>
[23:26:54.788]    <control if="canReadPins" while="" timeout="0" info="">
[23:26:54.788]      // if-block "canReadPins"
[23:26:54.789]        // =>  TRUE
[23:26:54.789]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:26:54.789]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:26:54.791]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:26:54.791]        // while-condition  =>  FALSE
[23:26:54.791]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:26:54.791]      </control>
[23:26:54.791]      // end if-block "canReadPins"
[23:26:54.791]    </control>
[23:26:54.791]    <control if="!canReadPins" while="" timeout="0" info="">
[23:26:54.791]      // if-block "!canReadPins"
[23:26:54.791]        // =>  FALSE
[23:26:54.791]      // skip if-block "!canReadPins"
[23:26:54.791]    </control>
[23:26:54.791]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:26:54.791]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:26:54.791]        // =>  TRUE
[23:26:54.791]      <block atomic="false" info="">
[23:26:54.791]        WriteAP(0x00, 0x190008);
[23:26:54.799]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:26:54.800]        WriteAP(0xF0, 0x01);
[23:26:54.801]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:26:54.801]      </block>
[23:26:54.808]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:26:54.808]    </control>
[23:26:54.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:26:54.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:26:54.809]        // =>  FALSE
[23:26:54.809]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:26:54.809]    </control>
[23:26:54.809]    <block atomic="false" info="">
[23:26:54.809]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:26:54.812]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:26:54.812]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:26:54.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:26:54.815]      __ap = 0; //lets make sure we reset the access point selection
[23:26:54.815]        // -> [__ap <= 0x00000000]
[23:26:54.815]    </block>
[23:26:54.815]  </sequence>
[23:26:54.815]  
[23:26:54.837]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:26:54.837]  
[23:26:54.838]  <debugvars>
[23:26:54.838]    // Pre-defined
[23:26:54.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:26:54.838]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:26:54.838]    __dp=0x00000000
[23:26:54.838]    __ap=0x00000000
[23:26:54.838]    __traceout=0x00000000      (Trace Disabled)
[23:26:54.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:26:54.838]    __FlashAddr=0x00000000
[23:26:54.839]    __FlashLen=0x00000000
[23:26:54.839]    __FlashArg=0x00000000
[23:26:54.839]    __FlashOp=0x00000000
[23:26:54.839]    __Result=0x00000000
[23:26:54.839]  </debugvars>
[23:26:54.839]  
[23:26:54.840]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:26:54.840]    <block atomic="false" info="">
[23:26:54.840]      __var deviceID = 0;
[23:26:54.840]        // -> [deviceID <= 0x00000000]
[23:26:54.841]      __var version = 0;
[23:26:54.841]        // -> [version <= 0x00000000]
[23:26:54.841]      __var partNum = 0;
[23:26:54.841]        // -> [partNum <= 0x00000000]
[23:26:54.841]      __var manuf = 0;
[23:26:54.841]        // -> [manuf <= 0x00000000]
[23:26:54.841]      __var isMSPM0G1X0X_G3X0X = 0;
[23:26:54.841]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:26:54.841]      __var isProduction = 0;
[23:26:54.841]        // -> [isProduction <= 0x00000000]
[23:26:54.842]      __var continueId = 0;
[23:26:54.842]        // -> [continueId <= 0x00000000]
[23:26:54.842]      deviceID =   Read32(0x41C40004);
[23:26:54.846]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:26:54.847]        // -> [deviceID <= 0x2BB8802F]
[23:26:54.847]      version = deviceID >> 28;
[23:26:54.847]        // -> [version <= 0x00000002]
[23:26:54.847]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:26:54.847]        // -> [partNum <= 0x0000BB88]
[23:26:54.847]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:26:54.847]        // -> [manuf <= 0x00000017]
[23:26:54.847]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:26:54.848]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:26:54.848]      isProduction = (version > 0);
[23:26:54.848]        // -> [isProduction <= 0x00000001]
[23:26:54.848]    </block>
[23:26:54.848]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:26:54.848]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:26:54.848]        // =>  FALSE
[23:26:54.848]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:26:54.849]    </control>
[23:26:54.849]    <control if="continueId == 4" while="" timeout="0" info="">
[23:26:54.849]      // if-block "continueId == 4"
[23:26:54.849]        // =>  FALSE
[23:26:54.849]      // skip if-block "continueId == 4"
[23:26:54.850]    </control>
[23:26:54.850]    <control if="!isProduction" while="" timeout="0" info="">
[23:26:54.850]      // if-block "!isProduction"
[23:26:54.850]        // =>  FALSE
[23:26:54.850]      // skip if-block "!isProduction"
[23:26:54.850]    </control>
[23:26:54.850]  </sequence>
[23:26:54.851]  
[23:29:46.229]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:46.229]  
[23:29:46.229]  <debugvars>
[23:29:46.229]    // Pre-defined
[23:29:46.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:46.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:46.230]    __dp=0x00000000
[23:29:46.230]    __ap=0x00000000
[23:29:46.230]    __traceout=0x00000000      (Trace Disabled)
[23:29:46.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:46.230]    __FlashAddr=0x00000000
[23:29:46.230]    __FlashLen=0x00000000
[23:29:46.230]    __FlashArg=0x00000000
[23:29:46.231]    __FlashOp=0x00000000
[23:29:46.231]    __Result=0x00000000
[23:29:46.231]  </debugvars>
[23:29:46.231]  
[23:29:46.231]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:46.231]    <block atomic="false" info="">
[23:29:46.231]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:46.231]        // -> [isSWJ <= 0x00000001]
[23:29:46.231]      __var hasDormant = __protocol & 0x00020000;
[23:29:46.231]        // -> [hasDormant <= 0x00000000]
[23:29:46.231]      __var protType   = __protocol & 0x0000FFFF;
[23:29:46.231]        // -> [protType <= 0x00000002]
[23:29:46.231]    </block>
[23:29:46.231]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:46.231]      // if-block "protType == 1"
[23:29:46.231]        // =>  FALSE
[23:29:46.231]      // skip if-block "protType == 1"
[23:29:46.231]    </control>
[23:29:46.231]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:46.231]      // if-block "protType == 2"
[23:29:46.231]        // =>  TRUE
[23:29:46.231]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:46.231]        // if-block "isSWJ"
[23:29:46.231]          // =>  TRUE
[23:29:46.231]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:46.231]          // if-block "hasDormant"
[23:29:46.231]            // =>  FALSE
[23:29:46.231]          // skip if-block "hasDormant"
[23:29:46.231]        </control>
[23:29:46.231]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:46.231]          // if-block "!hasDormant"
[23:29:46.231]            // =>  TRUE
[23:29:46.231]          <block atomic="false" info="">
[23:29:46.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:46.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:46.236]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:46.240]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:46.240]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:46.240]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:46.240]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:46.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:46.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:46.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:46.246]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:46.249]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:46.249]          </block>
[23:29:46.250]          // end if-block "!hasDormant"
[23:29:46.250]        </control>
[23:29:46.250]        // end if-block "isSWJ"
[23:29:46.250]      </control>
[23:29:46.250]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:46.250]        // if-block "!isSWJ"
[23:29:46.250]          // =>  FALSE
[23:29:46.250]        // skip if-block "!isSWJ"
[23:29:46.250]      </control>
[23:29:46.250]      <block atomic="false" info="">
[23:29:46.251]        ReadDP(0x0);
[23:29:46.264]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:46.264]      </block>
[23:29:46.264]      // end if-block "protType == 2"
[23:29:46.264]    </control>
[23:29:46.264]  </sequence>
[23:29:46.264]  
[23:29:46.266]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:46.266]  
[23:29:46.266]  <debugvars>
[23:29:46.266]    // Pre-defined
[23:29:46.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:46.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:46.266]    __dp=0x00000000
[23:29:46.266]    __ap=0x00000000
[23:29:46.269]    __traceout=0x00000000      (Trace Disabled)
[23:29:46.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:46.269]    __FlashAddr=0x00000000
[23:29:46.269]    __FlashLen=0x00000000
[23:29:46.269]    __FlashArg=0x00000000
[23:29:46.269]    __FlashOp=0x00000000
[23:29:46.269]    __Result=0x00000000
[23:29:46.269]  </debugvars>
[23:29:46.269]  
[23:29:46.269]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:46.269]    <block atomic="false" info="">
[23:29:46.270]      __var SW_DP_ABORT       = 0x0;
[23:29:46.270]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:46.270]      __var DP_CTRL_STAT      = 0x4;
[23:29:46.270]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:46.270]      __var DP_SELECT         = 0x8;
[23:29:46.270]        // -> [DP_SELECT <= 0x00000008]
[23:29:46.270]      __var powered_down      = 0;
[23:29:46.270]        // -> [powered_down <= 0x00000000]
[23:29:46.270]      WriteDP(DP_SELECT, 0x00000000);
[23:29:46.276]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:46.279]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:46.282]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:46.282]        // -> [powered_down <= 0x00000001]
[23:29:46.283]    </block>
[23:29:46.283]    <control if="powered_down" while="" timeout="0" info="">
[23:29:46.283]      // if-block "powered_down"
[23:29:46.283]        // =>  TRUE
[23:29:46.283]      <block atomic="false" info="">
[23:29:46.283]        Message(0, "Debug/System power-up request sent");
[23:29:46.285]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:46.287]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:46.287]      </block>
[23:29:46.287]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:46.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.292]        // while-condition  =>  TRUE
[23:29:46.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.296]        // while-condition  =>  TRUE
[23:29:46.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.297]        // while-condition  =>  TRUE
[23:29:46.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.299]        // while-condition  =>  TRUE
[23:29:46.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.301]        // while-condition  =>  TRUE
[23:29:46.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.315]        // while-condition  =>  TRUE
[23:29:46.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.316]        // while-condition  =>  TRUE
[23:29:46.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.320]        // while-condition  =>  TRUE
[23:29:46.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.321]        // while-condition  =>  TRUE
[23:29:46.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.321]        // while-condition  =>  TRUE
[23:29:46.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.329]        // while-condition  =>  TRUE
[23:29:46.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.330]        // while-condition  =>  TRUE
[23:29:46.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.336]        // while-condition  =>  TRUE
[23:29:46.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.336]        // while-condition  =>  TRUE
[23:29:46.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.341]        // while-condition  =>  TRUE
[23:29:46.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.346]        // while-condition  =>  TRUE
[23:29:46.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.349]        // while-condition  =>  TRUE
[23:29:46.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.350]        // while-condition  =>  TRUE
[23:29:46.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.350]        // while-condition  =>  TRUE
[23:29:46.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.361]        // while-condition  =>  TRUE
[23:29:46.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.361]        // while-condition  =>  TRUE
[23:29:46.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.370]        // while-condition  =>  TRUE
[23:29:46.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.370]        // while-condition  =>  TRUE
[23:29:46.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.370]        // while-condition  =>  TRUE
[23:29:46.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.377]        // while-condition  =>  TRUE
[23:29:46.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.380]        // while-condition  =>  TRUE
[23:29:46.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.381]        // while-condition  =>  TRUE
[23:29:46.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.381]        // while-condition  =>  TRUE
[23:29:46.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.381]        // while-condition  =>  TRUE
[23:29:46.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.390]        // while-condition  =>  TRUE
[23:29:46.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.390]        // while-condition  =>  TRUE
[23:29:46.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.390]        // while-condition  =>  TRUE
[23:29:46.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.390]        // while-condition  =>  TRUE
[23:29:46.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.400]        // while-condition  =>  TRUE
[23:29:46.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.401]        // while-condition  =>  TRUE
[23:29:46.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.405]        // while-condition  =>  TRUE
[23:29:46.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.408]        // while-condition  =>  TRUE
[23:29:46.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.410]        // while-condition  =>  TRUE
[23:29:46.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.410]        // while-condition  =>  TRUE
[23:29:46.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.410]        // while-condition  =>  TRUE
[23:29:46.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.410]        // while-condition  =>  TRUE
[23:29:46.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.421]        // while-condition  =>  TRUE
[23:29:46.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.429]        // while-condition  =>  TRUE
[23:29:46.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.431]        // while-condition  =>  TRUE
[23:29:46.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.431]        // while-condition  =>  TRUE
[23:29:46.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.441]        // while-condition  =>  TRUE
[23:29:46.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.441]        // while-condition  =>  TRUE
[23:29:46.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.441]        // while-condition  =>  TRUE
[23:29:46.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.441]        // while-condition  =>  TRUE
[23:29:46.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.450]        // while-condition  =>  TRUE
[23:29:46.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.455]        // while-condition  =>  TRUE
[23:29:46.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.455]        // while-condition  =>  TRUE
[23:29:46.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.460]        // while-condition  =>  TRUE
[23:29:46.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.461]        // while-condition  =>  TRUE
[23:29:46.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.461]        // while-condition  =>  TRUE
[23:29:46.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.461]        // while-condition  =>  TRUE
[23:29:46.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.470]        // while-condition  =>  TRUE
[23:29:46.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.471]        // while-condition  =>  TRUE
[23:29:46.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.471]        // while-condition  =>  TRUE
[23:29:46.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.480]        // while-condition  =>  TRUE
[23:29:46.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.480]        // while-condition  =>  TRUE
[23:29:46.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.480]        // while-condition  =>  TRUE
[23:29:46.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.480]        // while-condition  =>  TRUE
[23:29:46.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.480]        // while-condition  =>  TRUE
[23:29:46.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.489]        // while-condition  =>  TRUE
[23:29:46.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.491]        // while-condition  =>  TRUE
[23:29:46.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.500]        // while-condition  =>  TRUE
[23:29:46.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.505]        // while-condition  =>  TRUE
[23:29:46.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.505]        // while-condition  =>  TRUE
[23:29:46.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.510]        // while-condition  =>  TRUE
[23:29:46.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.511]        // while-condition  =>  TRUE
[23:29:46.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.511]        // while-condition  =>  TRUE
[23:29:46.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.520]        // while-condition  =>  TRUE
[23:29:46.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.521]        // while-condition  =>  TRUE
[23:29:46.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.521]        // while-condition  =>  TRUE
[23:29:46.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.531]        // while-condition  =>  TRUE
[23:29:46.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.531]        // while-condition  =>  TRUE
[23:29:46.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.531]        // while-condition  =>  TRUE
[23:29:46.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.540]        // while-condition  =>  TRUE
[23:29:46.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.540]        // while-condition  =>  TRUE
[23:29:46.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.540]        // while-condition  =>  TRUE
[23:29:46.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.551]        // while-condition  =>  TRUE
[23:29:46.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.551]        // while-condition  =>  TRUE
[23:29:46.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.560]        // while-condition  =>  TRUE
[23:29:46.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.570]        // while-condition  =>  TRUE
[23:29:46.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.571]        // while-condition  =>  TRUE
[23:29:46.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.571]        // while-condition  =>  TRUE
[23:29:46.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.571]        // while-condition  =>  TRUE
[23:29:46.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.579]        // while-condition  =>  TRUE
[23:29:46.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.580]        // while-condition  =>  TRUE
[23:29:46.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.591]        // while-condition  =>  TRUE
[23:29:46.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.600]        // while-condition  =>  TRUE
[23:29:46.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.600]        // while-condition  =>  TRUE
[23:29:46.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.610]        // while-condition  =>  TRUE
[23:29:46.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.610]        // while-condition  =>  TRUE
[23:29:46.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.610]        // while-condition  =>  TRUE
[23:29:46.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.610]        // while-condition  =>  TRUE
[23:29:46.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.621]        // while-condition  =>  TRUE
[23:29:46.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.621]        // while-condition  =>  TRUE
[23:29:46.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.629]        // while-condition  =>  TRUE
[23:29:46.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.632]        // while-condition  =>  TRUE
[23:29:46.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.632]        // while-condition  =>  TRUE
[23:29:46.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.632]        // while-condition  =>  TRUE
[23:29:46.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.641]        // while-condition  =>  TRUE
[23:29:46.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.651]        // while-condition  =>  TRUE
[23:29:46.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.652]        // while-condition  =>  TRUE
[23:29:46.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.661]        // while-condition  =>  TRUE
[23:29:46.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.661]        // while-condition  =>  TRUE
[23:29:46.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.674]        // while-condition  =>  TRUE
[23:29:46.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.674]        // while-condition  =>  TRUE
[23:29:46.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.681]        // while-condition  =>  TRUE
[23:29:46.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.681]        // while-condition  =>  TRUE
[23:29:46.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.689]        // while-condition  =>  TRUE
[23:29:46.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.690]        // while-condition  =>  TRUE
[23:29:46.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.699]        // while-condition  =>  TRUE
[23:29:46.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.701]        // while-condition  =>  TRUE
[23:29:46.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.705]        // while-condition  =>  TRUE
[23:29:46.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.710]        // while-condition  =>  TRUE
[23:29:46.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.721]        // while-condition  =>  TRUE
[23:29:46.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.730]        // while-condition  =>  TRUE
[23:29:46.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.730]        // while-condition  =>  TRUE
[23:29:46.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.730]        // while-condition  =>  TRUE
[23:29:46.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.741]        // while-condition  =>  TRUE
[23:29:46.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.743]        // while-condition  =>  TRUE
[23:29:46.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.745]        // while-condition  =>  TRUE
[23:29:46.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.748]        // while-condition  =>  TRUE
[23:29:46.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.757]        // while-condition  =>  TRUE
[23:29:46.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.769]        // while-condition  =>  TRUE
[23:29:46.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.770]        // while-condition  =>  TRUE
[23:29:46.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.774]        // while-condition  =>  TRUE
[23:29:46.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.780]        // while-condition  =>  TRUE
[23:29:46.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.791]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.791]        // while-condition  =>  TRUE
[23:29:46.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.791]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.791]        // while-condition  =>  TRUE
[23:29:46.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.805]        // while-condition  =>  TRUE
[23:29:46.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.805]        // while-condition  =>  TRUE
[23:29:46.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.810]        // while-condition  =>  TRUE
[23:29:46.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.812]        // while-condition  =>  TRUE
[23:29:46.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.814]        // while-condition  =>  TRUE
[23:29:46.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.820]        // while-condition  =>  TRUE
[23:29:46.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.822]        // while-condition  =>  TRUE
[23:29:46.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.822]        // while-condition  =>  TRUE
[23:29:46.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.830]        // while-condition  =>  TRUE
[23:29:46.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.832]        // while-condition  =>  TRUE
[23:29:46.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.832]        // while-condition  =>  TRUE
[23:29:46.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.840]        // while-condition  =>  TRUE
[23:29:46.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.843]        // while-condition  =>  TRUE
[23:29:46.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.843]        // while-condition  =>  TRUE
[23:29:46.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.843]        // while-condition  =>  TRUE
[23:29:46.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.843]        // while-condition  =>  TRUE
[23:29:46.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.851]        // while-condition  =>  TRUE
[23:29:46.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.853]        // while-condition  =>  TRUE
[23:29:46.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.856]        // while-condition  =>  TRUE
[23:29:46.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.856]        // while-condition  =>  TRUE
[23:29:46.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.859]        // while-condition  =>  TRUE
[23:29:46.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.860]        // while-condition  =>  TRUE
[23:29:46.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.863]        // while-condition  =>  TRUE
[23:29:46.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.869]        // while-condition  =>  TRUE
[23:29:46.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.871]        // while-condition  =>  TRUE
[23:29:46.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.880]        // while-condition  =>  TRUE
[23:29:46.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.883]        // while-condition  =>  TRUE
[23:29:46.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.885]        // while-condition  =>  TRUE
[23:29:46.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.885]        // while-condition  =>  TRUE
[23:29:46.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.890]        // while-condition  =>  TRUE
[23:29:46.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.891]        // while-condition  =>  TRUE
[23:29:46.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.894]        // while-condition  =>  TRUE
[23:29:46.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.894]        // while-condition  =>  TRUE
[23:29:46.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.894]        // while-condition  =>  TRUE
[23:29:46.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.900]        // while-condition  =>  TRUE
[23:29:46.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.905]        // while-condition  =>  TRUE
[23:29:46.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.910]        // while-condition  =>  TRUE
[23:29:46.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.911]        // while-condition  =>  TRUE
[23:29:46.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.916]        // while-condition  =>  TRUE
[23:29:46.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.924]        // while-condition  =>  TRUE
[23:29:46.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.927]        // while-condition  =>  TRUE
[23:29:46.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.930]        // while-condition  =>  TRUE
[23:29:46.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.931]        // while-condition  =>  TRUE
[23:29:46.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.934]        // while-condition  =>  TRUE
[23:29:46.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.937]        // while-condition  =>  TRUE
[23:29:46.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.946]        // while-condition  =>  TRUE
[23:29:46.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.949]        // while-condition  =>  TRUE
[23:29:46.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.951]        // while-condition  =>  TRUE
[23:29:46.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.952]        // while-condition  =>  TRUE
[23:29:46.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.955]        // while-condition  =>  TRUE
[23:29:46.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.957]        // while-condition  =>  TRUE
[23:29:46.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.958]        // while-condition  =>  TRUE
[23:29:46.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.964]        // while-condition  =>  TRUE
[23:29:46.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.966]        // while-condition  =>  TRUE
[23:29:46.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.968]        // while-condition  =>  TRUE
[23:29:46.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.970]        // while-condition  =>  TRUE
[23:29:46.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.971]        // while-condition  =>  TRUE
[23:29:46.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.975]        // while-condition  =>  TRUE
[23:29:46.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.975]        // while-condition  =>  TRUE
[23:29:46.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.980]        // while-condition  =>  TRUE
[23:29:46.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.984]        // while-condition  =>  TRUE
[23:29:46.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.984]        // while-condition  =>  TRUE
[23:29:46.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.989]        // while-condition  =>  TRUE
[23:29:46.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.996]        // while-condition  =>  TRUE
[23:29:46.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:46.996]        // while-condition  =>  TRUE
[23:29:46.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:46.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.000]        // while-condition  =>  TRUE
[23:29:47.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.001]        // while-condition  =>  TRUE
[23:29:47.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.006]        // while-condition  =>  TRUE
[23:29:47.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.006]        // while-condition  =>  TRUE
[23:29:47.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.010]        // while-condition  =>  TRUE
[23:29:47.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.010]        // while-condition  =>  TRUE
[23:29:47.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.015]        // while-condition  =>  TRUE
[23:29:47.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.020]        // while-condition  =>  TRUE
[23:29:47.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.021]        // while-condition  =>  TRUE
[23:29:47.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.025]        // while-condition  =>  TRUE
[23:29:47.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.030]        // while-condition  =>  TRUE
[23:29:47.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.030]        // while-condition  =>  TRUE
[23:29:47.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.036]        // while-condition  =>  TRUE
[23:29:47.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.037]        // while-condition  =>  TRUE
[23:29:47.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.040]        // while-condition  =>  TRUE
[23:29:47.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.041]        // while-condition  =>  TRUE
[23:29:47.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.045]        // while-condition  =>  TRUE
[23:29:47.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.050]        // while-condition  =>  TRUE
[23:29:47.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.050]        // while-condition  =>  TRUE
[23:29:47.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.057]        // while-condition  =>  TRUE
[23:29:47.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.060]        // while-condition  =>  TRUE
[23:29:47.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.061]        // while-condition  =>  TRUE
[23:29:47.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.066]        // while-condition  =>  TRUE
[23:29:47.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.070]        // while-condition  =>  TRUE
[23:29:47.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.071]        // while-condition  =>  TRUE
[23:29:47.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.076]        // while-condition  =>  TRUE
[23:29:47.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.081]        // while-condition  =>  TRUE
[23:29:47.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.081]        // while-condition  =>  TRUE
[23:29:47.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.081]        // while-condition  =>  TRUE
[23:29:47.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.090]        // while-condition  =>  TRUE
[23:29:47.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.092]        // while-condition  =>  TRUE
[23:29:47.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.092]        // while-condition  =>  TRUE
[23:29:47.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.100]        // while-condition  =>  TRUE
[23:29:47.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.100]        // while-condition  =>  TRUE
[23:29:47.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.105]        // while-condition  =>  TRUE
[23:29:47.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.107]        // while-condition  =>  TRUE
[23:29:47.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.107]        // while-condition  =>  TRUE
[23:29:47.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.110]        // while-condition  =>  TRUE
[23:29:47.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.111]        // while-condition  =>  TRUE
[23:29:47.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.117]        // while-condition  =>  TRUE
[23:29:47.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.120]        // while-condition  =>  TRUE
[23:29:47.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.128]        // while-condition  =>  TRUE
[23:29:47.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.131]        // while-condition  =>  TRUE
[23:29:47.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.140]        // while-condition  =>  TRUE
[23:29:47.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.142]        // while-condition  =>  TRUE
[23:29:47.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.142]        // while-condition  =>  TRUE
[23:29:47.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.151]        // while-condition  =>  TRUE
[23:29:47.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.151]        // while-condition  =>  TRUE
[23:29:47.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.158]        // while-condition  =>  TRUE
[23:29:47.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.160]        // while-condition  =>  TRUE
[23:29:47.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.160]        // while-condition  =>  TRUE
[23:29:47.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.160]        // while-condition  =>  TRUE
[23:29:47.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.160]        // while-condition  =>  TRUE
[23:29:47.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.160]        // while-condition  =>  TRUE
[23:29:47.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.171]        // while-condition  =>  TRUE
[23:29:47.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.171]        // while-condition  =>  TRUE
[23:29:47.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.171]        // while-condition  =>  TRUE
[23:29:47.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.181]        // while-condition  =>  TRUE
[23:29:47.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.181]        // while-condition  =>  TRUE
[23:29:47.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.181]        // while-condition  =>  TRUE
[23:29:47.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.181]        // while-condition  =>  TRUE
[23:29:47.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.181]        // while-condition  =>  TRUE
[23:29:47.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.190]        // while-condition  =>  TRUE
[23:29:47.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.191]        // while-condition  =>  TRUE
[23:29:47.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.191]        // while-condition  =>  TRUE
[23:29:47.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.200]        // while-condition  =>  TRUE
[23:29:47.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.205]        // while-condition  =>  TRUE
[23:29:47.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.205]        // while-condition  =>  TRUE
[23:29:47.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.210]        // while-condition  =>  TRUE
[23:29:47.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.211]        // while-condition  =>  TRUE
[23:29:47.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.220]        // while-condition  =>  TRUE
[23:29:47.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.220]        // while-condition  =>  TRUE
[23:29:47.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.220]        // while-condition  =>  TRUE
[23:29:47.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.220]        // while-condition  =>  TRUE
[23:29:47.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.230]        // while-condition  =>  TRUE
[23:29:47.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.231]        // while-condition  =>  TRUE
[23:29:47.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.231]        // while-condition  =>  TRUE
[23:29:47.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.241]        // while-condition  =>  TRUE
[23:29:47.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.241]        // while-condition  =>  TRUE
[23:29:47.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.250]        // while-condition  =>  TRUE
[23:29:47.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.250]        // while-condition  =>  TRUE
[23:29:47.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.250]        // while-condition  =>  TRUE
[23:29:47.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.261]        // while-condition  =>  TRUE
[23:29:47.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.270]        // while-condition  =>  TRUE
[23:29:47.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.281]        // while-condition  =>  TRUE
[23:29:47.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.281]        // while-condition  =>  TRUE
[23:29:47.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:47.290]        // while-condition  =>  TRUE
[23:29:47.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:47.290]        // while  =>  TIMEOUT
[23:29:47.290]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:47.290]      </control>
[23:29:47.290]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:47.290]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:47.290]          // =>  FALSE
[23:29:47.292]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:47.292]      </control>
[23:29:47.292]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:47.292]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:47.292]          // =>  TRUE
[23:29:47.292]        <block atomic="false" info="">
[23:29:47.292]          Message(0, "executing SWD power up");
[23:29:47.292]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:47.297]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:47.297]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:47.300]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:47.300]        </block>
[23:29:47.300]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:47.300]      </control>
[23:29:47.301]      // end if-block "powered_down"
[23:29:47.301]    </control>
[23:29:47.301]    <block atomic="false" info="">
[23:29:47.301]      __var DEBUG_PORT_VAL    = 0;
[23:29:47.301]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:47.301]      __var ACCESS_POINT_VAL  = 0;
[23:29:47.301]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:47.301]      __ap = 1; 
[23:29:47.301]        // -> [__ap <= 0x00000001]
[23:29:47.301]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:47.311]  
[23:29:47.311]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[23:29:47.311]  
[23:29:47.311]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:47.311]    </block>
[23:29:47.311]  </sequence>
[23:29:47.311]  
[23:29:53.229]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:53.229]  
[23:29:53.237]  <debugvars>
[23:29:53.237]    // Pre-defined
[23:29:53.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:53.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:53.238]    __dp=0x00000000
[23:29:53.238]    __ap=0x00000000
[23:29:53.238]    __traceout=0x00000000      (Trace Disabled)
[23:29:53.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:53.238]    __FlashAddr=0x00000000
[23:29:53.238]    __FlashLen=0x00000000
[23:29:53.238]    __FlashArg=0x00000000
[23:29:53.239]    __FlashOp=0x00000000
[23:29:53.239]    __Result=0x00000000
[23:29:53.239]  </debugvars>
[23:29:53.239]  
[23:29:53.239]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:53.239]    <block atomic="false" info="">
[23:29:53.239]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:53.239]        // -> [isSWJ <= 0x00000001]
[23:29:53.240]      __var hasDormant = __protocol & 0x00020000;
[23:29:53.240]        // -> [hasDormant <= 0x00000000]
[23:29:53.240]      __var protType   = __protocol & 0x0000FFFF;
[23:29:53.240]        // -> [protType <= 0x00000002]
[23:29:53.240]    </block>
[23:29:53.240]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:53.240]      // if-block "protType == 1"
[23:29:53.240]        // =>  FALSE
[23:29:53.240]      // skip if-block "protType == 1"
[23:29:53.240]    </control>
[23:29:53.240]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:53.240]      // if-block "protType == 2"
[23:29:53.240]        // =>  TRUE
[23:29:53.240]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:53.240]        // if-block "isSWJ"
[23:29:53.240]          // =>  TRUE
[23:29:53.240]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:53.240]          // if-block "hasDormant"
[23:29:53.240]            // =>  FALSE
[23:29:53.240]          // skip if-block "hasDormant"
[23:29:53.240]        </control>
[23:29:53.240]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:53.240]          // if-block "!hasDormant"
[23:29:53.240]            // =>  TRUE
[23:29:53.240]          <block atomic="false" info="">
[23:29:53.240]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:53.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:53.249]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:53.251]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:53.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:53.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:53.251]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:53.260]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:53.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:53.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:53.260]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:53.260]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:53.260]          </block>
[23:29:53.260]          // end if-block "!hasDormant"
[23:29:53.260]        </control>
[23:29:53.260]        // end if-block "isSWJ"
[23:29:53.260]      </control>
[23:29:53.269]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:53.269]        // if-block "!isSWJ"
[23:29:53.269]          // =>  FALSE
[23:29:53.270]        // skip if-block "!isSWJ"
[23:29:53.270]      </control>
[23:29:53.270]      <block atomic="false" info="">
[23:29:53.270]        ReadDP(0x0);
[23:29:53.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:53.271]      </block>
[23:29:53.271]      // end if-block "protType == 2"
[23:29:53.271]    </control>
[23:29:53.271]  </sequence>
[23:29:53.271]  
[23:29:53.280]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:53.280]  
[23:29:53.280]  <debugvars>
[23:29:53.280]    // Pre-defined
[23:29:53.280]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:53.280]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:53.280]    __dp=0x00000000
[23:29:53.280]    __ap=0x00000000
[23:29:53.280]    __traceout=0x00000000      (Trace Disabled)
[23:29:53.280]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:53.280]    __FlashAddr=0x00000000
[23:29:53.280]    __FlashLen=0x00000000
[23:29:53.280]    __FlashArg=0x00000000
[23:29:53.280]    __FlashOp=0x00000000
[23:29:53.280]    __Result=0x00000000
[23:29:53.280]  </debugvars>
[23:29:53.280]  
[23:29:53.280]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:53.280]    <block atomic="false" info="">
[23:29:53.280]      __var SW_DP_ABORT       = 0x0;
[23:29:53.280]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:53.280]      __var DP_CTRL_STAT      = 0x4;
[23:29:53.280]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:53.280]      __var DP_SELECT         = 0x8;
[23:29:53.280]        // -> [DP_SELECT <= 0x00000008]
[23:29:53.280]      __var powered_down      = 0;
[23:29:53.280]        // -> [powered_down <= 0x00000000]
[23:29:53.280]      WriteDP(DP_SELECT, 0x00000000);
[23:29:53.280]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:53.280]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:53.290]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:53.290]        // -> [powered_down <= 0x00000001]
[23:29:53.290]    </block>
[23:29:53.290]    <control if="powered_down" while="" timeout="0" info="">
[23:29:53.290]      // if-block "powered_down"
[23:29:53.290]        // =>  TRUE
[23:29:53.290]      <block atomic="false" info="">
[23:29:53.290]        Message(0, "Debug/System power-up request sent");
[23:29:53.291]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:53.291]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:53.291]      </block>
[23:29:53.291]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:53.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.291]        // while-condition  =>  TRUE
[23:29:53.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.300]        // while-condition  =>  TRUE
[23:29:53.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.300]        // while-condition  =>  TRUE
[23:29:53.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.300]        // while-condition  =>  TRUE
[23:29:53.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.300]        // while-condition  =>  TRUE
[23:29:53.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.310]        // while-condition  =>  TRUE
[23:29:53.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.312]        // while-condition  =>  TRUE
[23:29:53.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.312]        // while-condition  =>  TRUE
[23:29:53.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.320]        // while-condition  =>  TRUE
[23:29:53.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.323]        // while-condition  =>  TRUE
[23:29:53.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.331]        // while-condition  =>  TRUE
[23:29:53.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.331]        // while-condition  =>  TRUE
[23:29:53.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.340]        // while-condition  =>  TRUE
[23:29:53.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.341]        // while-condition  =>  TRUE
[23:29:53.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.341]        // while-condition  =>  TRUE
[23:29:53.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.341]        // while-condition  =>  TRUE
[23:29:53.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.359]        // while-condition  =>  TRUE
[23:29:53.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.363]        // while-condition  =>  TRUE
[23:29:53.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.370]        // while-condition  =>  TRUE
[23:29:53.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.371]        // while-condition  =>  TRUE
[23:29:53.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.371]        // while-condition  =>  TRUE
[23:29:53.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.371]        // while-condition  =>  TRUE
[23:29:53.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.380]        // while-condition  =>  TRUE
[23:29:53.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.382]        // while-condition  =>  TRUE
[23:29:53.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.382]        // while-condition  =>  TRUE
[23:29:53.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.390]        // while-condition  =>  TRUE
[23:29:53.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.390]        // while-condition  =>  TRUE
[23:29:53.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.390]        // while-condition  =>  TRUE
[23:29:53.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.409]        // while-condition  =>  TRUE
[23:29:53.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.411]        // while-condition  =>  TRUE
[23:29:53.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.411]        // while-condition  =>  TRUE
[23:29:53.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.411]        // while-condition  =>  TRUE
[23:29:53.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.421]        // while-condition  =>  TRUE
[23:29:53.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.421]        // while-condition  =>  TRUE
[23:29:53.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.441]        // while-condition  =>  TRUE
[23:29:53.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.441]        // while-condition  =>  TRUE
[23:29:53.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.450]        // while-condition  =>  TRUE
[23:29:53.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.450]        // while-condition  =>  TRUE
[23:29:53.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.450]        // while-condition  =>  TRUE
[23:29:53.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.460]        // while-condition  =>  TRUE
[23:29:53.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.461]        // while-condition  =>  TRUE
[23:29:53.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.461]        // while-condition  =>  TRUE
[23:29:53.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.461]        // while-condition  =>  TRUE
[23:29:53.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.461]        // while-condition  =>  TRUE
[23:29:53.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.470]        // while-condition  =>  TRUE
[23:29:53.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.471]        // while-condition  =>  TRUE
[23:29:53.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.471]        // while-condition  =>  TRUE
[23:29:53.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.471]        // while-condition  =>  TRUE
[23:29:53.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.471]        // while-condition  =>  TRUE
[23:29:53.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.471]        // while-condition  =>  TRUE
[23:29:53.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.480]        // while-condition  =>  TRUE
[23:29:53.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.481]        // while-condition  =>  TRUE
[23:29:53.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.481]        // while-condition  =>  TRUE
[23:29:53.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.481]        // while-condition  =>  TRUE
[23:29:53.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.490]        // while-condition  =>  TRUE
[23:29:53.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.500]        // while-condition  =>  TRUE
[23:29:53.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.500]        // while-condition  =>  TRUE
[23:29:53.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.500]        // while-condition  =>  TRUE
[23:29:53.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.500]        // while-condition  =>  TRUE
[23:29:53.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.511]        // while-condition  =>  TRUE
[23:29:53.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.511]        // while-condition  =>  TRUE
[23:29:53.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.520]        // while-condition  =>  TRUE
[23:29:53.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.520]        // while-condition  =>  TRUE
[23:29:53.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.520]        // while-condition  =>  TRUE
[23:29:53.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.520]        // while-condition  =>  TRUE
[23:29:53.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.531]        // while-condition  =>  TRUE
[23:29:53.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.531]        // while-condition  =>  TRUE
[23:29:53.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.539]        // while-condition  =>  TRUE
[23:29:53.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.541]        // while-condition  =>  TRUE
[23:29:53.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.541]        // while-condition  =>  TRUE
[23:29:53.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.541]        // while-condition  =>  TRUE
[23:29:53.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.541]        // while-condition  =>  TRUE
[23:29:53.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.551]        // while-condition  =>  TRUE
[23:29:53.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.551]        // while-condition  =>  TRUE
[23:29:53.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.561]        // while-condition  =>  TRUE
[23:29:53.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.561]        // while-condition  =>  TRUE
[23:29:53.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.561]        // while-condition  =>  TRUE
[23:29:53.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.561]        // while-condition  =>  TRUE
[23:29:53.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.571]        // while-condition  =>  TRUE
[23:29:53.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.571]        // while-condition  =>  TRUE
[23:29:53.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.580]        // while-condition  =>  TRUE
[23:29:53.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.580]        // while-condition  =>  TRUE
[23:29:53.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.580]        // while-condition  =>  TRUE
[23:29:53.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.589]        // while-condition  =>  TRUE
[23:29:53.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.591]        // while-condition  =>  TRUE
[23:29:53.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.591]        // while-condition  =>  TRUE
[23:29:53.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.600]        // while-condition  =>  TRUE
[23:29:53.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.600]        // while-condition  =>  TRUE
[23:29:53.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.610]        // while-condition  =>  TRUE
[23:29:53.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.611]        // while-condition  =>  TRUE
[23:29:53.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.611]        // while-condition  =>  TRUE
[23:29:53.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.620]        // while-condition  =>  TRUE
[23:29:53.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.620]        // while-condition  =>  TRUE
[23:29:53.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.620]        // while-condition  =>  TRUE
[23:29:53.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.631]        // while-condition  =>  TRUE
[23:29:53.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.631]        // while-condition  =>  TRUE
[23:29:53.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.631]        // while-condition  =>  TRUE
[23:29:53.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.631]        // while-condition  =>  TRUE
[23:29:53.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.640]        // while-condition  =>  TRUE
[23:29:53.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.640]        // while-condition  =>  TRUE
[23:29:53.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.640]        // while-condition  =>  TRUE
[23:29:53.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.640]        // while-condition  =>  TRUE
[23:29:53.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.651]        // while-condition  =>  TRUE
[23:29:53.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.661]        // while-condition  =>  TRUE
[23:29:53.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.661]        // while-condition  =>  TRUE
[23:29:53.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.661]        // while-condition  =>  TRUE
[23:29:53.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.661]        // while-condition  =>  TRUE
[23:29:53.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.661]        // while-condition  =>  TRUE
[23:29:53.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.670]        // while-condition  =>  TRUE
[23:29:53.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.671]        // while-condition  =>  TRUE
[23:29:53.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.671]        // while-condition  =>  TRUE
[23:29:53.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.680]        // while-condition  =>  TRUE
[23:29:53.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.681]        // while-condition  =>  TRUE
[23:29:53.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.689]        // while-condition  =>  TRUE
[23:29:53.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.690]        // while-condition  =>  TRUE
[23:29:53.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.690]        // while-condition  =>  TRUE
[23:29:53.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.690]        // while-condition  =>  TRUE
[23:29:53.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.700]        // while-condition  =>  TRUE
[23:29:53.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.701]        // while-condition  =>  TRUE
[23:29:53.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.709]        // while-condition  =>  TRUE
[23:29:53.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.710]        // while-condition  =>  TRUE
[23:29:53.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.710]        // while-condition  =>  TRUE
[23:29:53.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.710]        // while-condition  =>  TRUE
[23:29:53.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.720]        // while-condition  =>  TRUE
[23:29:53.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.721]        // while-condition  =>  TRUE
[23:29:53.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.730]        // while-condition  =>  TRUE
[23:29:53.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.730]        // while-condition  =>  TRUE
[23:29:53.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.730]        // while-condition  =>  TRUE
[23:29:53.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.730]        // while-condition  =>  TRUE
[23:29:53.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.730]        // while-condition  =>  TRUE
[23:29:53.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.740]        // while-condition  =>  TRUE
[23:29:53.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.741]        // while-condition  =>  TRUE
[23:29:53.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.741]        // while-condition  =>  TRUE
[23:29:53.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.750]        // while-condition  =>  TRUE
[23:29:53.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.750]        // while-condition  =>  TRUE
[23:29:53.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.750]        // while-condition  =>  TRUE
[23:29:53.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.750]        // while-condition  =>  TRUE
[23:29:53.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.760]        // while-condition  =>  TRUE
[23:29:53.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.761]        // while-condition  =>  TRUE
[23:29:53.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.770]        // while-condition  =>  TRUE
[23:29:53.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.771]        // while-condition  =>  TRUE
[23:29:53.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.771]        // while-condition  =>  TRUE
[23:29:53.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.780]        // while-condition  =>  TRUE
[23:29:53.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.781]        // while-condition  =>  TRUE
[23:29:53.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.792]        // while-condition  =>  TRUE
[23:29:53.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.792]        // while-condition  =>  TRUE
[23:29:53.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.792]        // while-condition  =>  TRUE
[23:29:53.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.800]        // while-condition  =>  TRUE
[23:29:53.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.801]        // while-condition  =>  TRUE
[23:29:53.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.801]        // while-condition  =>  TRUE
[23:29:53.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.809]        // while-condition  =>  TRUE
[23:29:53.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.811]        // while-condition  =>  TRUE
[23:29:53.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.813]        // while-condition  =>  TRUE
[23:29:53.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.815]        // while-condition  =>  TRUE
[23:29:53.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.818]        // while-condition  =>  TRUE
[23:29:53.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.820]        // while-condition  =>  TRUE
[23:29:53.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.822]        // while-condition  =>  TRUE
[23:29:53.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.824]        // while-condition  =>  TRUE
[23:29:53.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.825]        // while-condition  =>  TRUE
[23:29:53.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.829]        // while-condition  =>  TRUE
[23:29:53.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.836]        // while-condition  =>  TRUE
[23:29:53.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.838]        // while-condition  =>  TRUE
[23:29:53.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.839]        // while-condition  =>  TRUE
[23:29:53.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.840]        // while-condition  =>  TRUE
[23:29:53.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.846]        // while-condition  =>  TRUE
[23:29:53.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.851]        // while-condition  =>  TRUE
[23:29:53.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.855]        // while-condition  =>  TRUE
[23:29:53.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.859]        // while-condition  =>  TRUE
[23:29:53.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.861]        // while-condition  =>  TRUE
[23:29:53.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.867]        // while-condition  =>  TRUE
[23:29:53.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.868]        // while-condition  =>  TRUE
[23:29:53.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.870]        // while-condition  =>  TRUE
[23:29:53.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.871]        // while-condition  =>  TRUE
[23:29:53.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.878]        // while-condition  =>  TRUE
[23:29:53.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.880]        // while-condition  =>  TRUE
[23:29:53.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.882]        // while-condition  =>  TRUE
[23:29:53.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.885]        // while-condition  =>  TRUE
[23:29:53.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.891]        // while-condition  =>  TRUE
[23:29:53.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.891]        // while-condition  =>  TRUE
[23:29:53.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.898]        // while-condition  =>  TRUE
[23:29:53.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.904]        // while-condition  =>  TRUE
[23:29:53.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.907]        // while-condition  =>  TRUE
[23:29:53.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.909]        // while-condition  =>  TRUE
[23:29:53.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.911]        // while-condition  =>  TRUE
[23:29:53.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.917]        // while-condition  =>  TRUE
[23:29:53.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.920]        // while-condition  =>  TRUE
[23:29:53.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.921]        // while-condition  =>  TRUE
[23:29:53.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.923]        // while-condition  =>  TRUE
[23:29:53.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.925]        // while-condition  =>  TRUE
[23:29:53.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.927]        // while-condition  =>  TRUE
[23:29:53.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.928]        // while-condition  =>  TRUE
[23:29:53.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.931]        // while-condition  =>  TRUE
[23:29:53.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.940]        // while-condition  =>  TRUE
[23:29:53.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.943]        // while-condition  =>  TRUE
[23:29:53.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.946]        // while-condition  =>  TRUE
[23:29:53.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.951]        // while-condition  =>  TRUE
[23:29:53.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.961]        // while-condition  =>  TRUE
[23:29:53.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.962]        // while-condition  =>  TRUE
[23:29:53.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.966]        // while-condition  =>  TRUE
[23:29:53.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.968]        // while-condition  =>  TRUE
[23:29:53.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.970]        // while-condition  =>  TRUE
[23:29:53.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.972]        // while-condition  =>  TRUE
[23:29:53.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.974]        // while-condition  =>  TRUE
[23:29:53.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.977]        // while-condition  =>  TRUE
[23:29:53.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.981]        // while-condition  =>  TRUE
[23:29:53.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.989]        // while-condition  =>  TRUE
[23:29:53.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.992]        // while-condition  =>  TRUE
[23:29:53.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.995]        // while-condition  =>  TRUE
[23:29:53.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:53.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:53.999]        // while-condition  =>  TRUE
[23:29:54.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.001]        // while-condition  =>  TRUE
[23:29:54.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.004]        // while-condition  =>  TRUE
[23:29:54.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.010]        // while-condition  =>  TRUE
[23:29:54.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.013]        // while-condition  =>  TRUE
[23:29:54.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.020]        // while-condition  =>  TRUE
[23:29:54.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.022]        // while-condition  =>  TRUE
[23:29:54.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.027]        // while-condition  =>  TRUE
[23:29:54.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.029]        // while-condition  =>  TRUE
[23:29:54.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.030]        // while-condition  =>  TRUE
[23:29:54.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.036]        // while-condition  =>  TRUE
[23:29:54.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.038]        // while-condition  =>  TRUE
[23:29:54.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.040]        // while-condition  =>  TRUE
[23:29:54.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.041]        // while-condition  =>  TRUE
[23:29:54.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.041]        // while-condition  =>  TRUE
[23:29:54.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.046]        // while-condition  =>  TRUE
[23:29:54.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.048]        // while-condition  =>  TRUE
[23:29:54.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.050]        // while-condition  =>  TRUE
[23:29:54.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.051]        // while-condition  =>  TRUE
[23:29:54.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.056]        // while-condition  =>  TRUE
[23:29:54.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.058]        // while-condition  =>  TRUE
[23:29:54.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.061]        // while-condition  =>  TRUE
[23:29:54.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.063]        // while-condition  =>  TRUE
[23:29:54.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.063]        // while-condition  =>  TRUE
[23:29:54.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.070]        // while-condition  =>  TRUE
[23:29:54.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.079]        // while-condition  =>  TRUE
[23:29:54.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.081]        // while-condition  =>  TRUE
[23:29:54.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.085]        // while-condition  =>  TRUE
[23:29:54.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.090]        // while-condition  =>  TRUE
[23:29:54.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.095]        // while-condition  =>  TRUE
[23:29:54.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.095]        // while-condition  =>  TRUE
[23:29:54.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.100]        // while-condition  =>  TRUE
[23:29:54.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.102]        // while-condition  =>  TRUE
[23:29:54.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.103]        // while-condition  =>  TRUE
[23:29:54.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.110]        // while-condition  =>  TRUE
[23:29:54.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.114]        // while-condition  =>  TRUE
[23:29:54.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.116]        // while-condition  =>  TRUE
[23:29:54.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.119]        // while-condition  =>  TRUE
[23:29:54.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.121]        // while-condition  =>  TRUE
[23:29:54.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.121]        // while-condition  =>  TRUE
[23:29:54.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.128]        // while-condition  =>  TRUE
[23:29:54.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.130]        // while-condition  =>  TRUE
[23:29:54.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.130]        // while-condition  =>  TRUE
[23:29:54.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.134]        // while-condition  =>  TRUE
[23:29:54.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.140]        // while-condition  =>  TRUE
[23:29:54.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.140]        // while-condition  =>  TRUE
[23:29:54.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.144]        // while-condition  =>  TRUE
[23:29:54.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.144]        // while-condition  =>  TRUE
[23:29:54.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.151]        // while-condition  =>  TRUE
[23:29:54.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.151]        // while-condition  =>  TRUE
[23:29:54.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.156]        // while-condition  =>  TRUE
[23:29:54.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.157]        // while-condition  =>  TRUE
[23:29:54.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.160]        // while-condition  =>  TRUE
[23:29:54.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.162]        // while-condition  =>  TRUE
[23:29:54.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.164]        // while-condition  =>  TRUE
[23:29:54.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.165]        // while-condition  =>  TRUE
[23:29:54.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.167]        // while-condition  =>  TRUE
[23:29:54.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.171]        // while-condition  =>  TRUE
[23:29:54.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.172]        // while-condition  =>  TRUE
[23:29:54.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.182]        // while-condition  =>  TRUE
[23:29:54.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.185]        // while-condition  =>  TRUE
[23:29:54.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.191]        // while-condition  =>  TRUE
[23:29:54.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.191]        // while-condition  =>  TRUE
[23:29:54.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.195]        // while-condition  =>  TRUE
[23:29:54.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.200]        // while-condition  =>  TRUE
[23:29:54.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.211]        // while-condition  =>  TRUE
[23:29:54.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.214]        // while-condition  =>  TRUE
[23:29:54.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.217]        // while-condition  =>  TRUE
[23:29:54.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.218]        // while-condition  =>  TRUE
[23:29:54.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.225]        // while-condition  =>  TRUE
[23:29:54.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.230]        // while-condition  =>  TRUE
[23:29:54.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.231]        // while-condition  =>  TRUE
[23:29:54.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.239]        // while-condition  =>  TRUE
[23:29:54.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.242]        // while-condition  =>  TRUE
[23:29:54.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.242]        // while-condition  =>  TRUE
[23:29:54.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.249]        // while-condition  =>  TRUE
[23:29:54.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.251]        // while-condition  =>  TRUE
[23:29:54.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.260]        // while-condition  =>  TRUE
[23:29:54.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.260]        // while-condition  =>  TRUE
[23:29:54.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.265]        // while-condition  =>  TRUE
[23:29:54.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.270]        // while-condition  =>  TRUE
[23:29:54.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.280]        // while-condition  =>  TRUE
[23:29:54.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.283]        // while-condition  =>  TRUE
[23:29:54.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:54.289]        // while-condition  =>  TRUE
[23:29:54.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:54.289]        // while  =>  TIMEOUT
[23:29:54.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:54.289]      </control>
[23:29:54.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:54.290]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:54.290]          // =>  FALSE
[23:29:54.290]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:54.290]      </control>
[23:29:54.290]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:54.290]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:54.290]          // =>  TRUE
[23:29:54.290]        <block atomic="false" info="">
[23:29:54.291]          Message(0, "executing SWD power up");
[23:29:54.293]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:54.300]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:54.301]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:54.307]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:54.308]        </block>
[23:29:54.308]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:54.308]      </control>
[23:29:54.308]      // end if-block "powered_down"
[23:29:54.308]    </control>
[23:29:54.308]    <block atomic="false" info="">
[23:29:54.308]      __var DEBUG_PORT_VAL    = 0;
[23:29:54.308]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:54.309]      __var ACCESS_POINT_VAL  = 0;
[23:29:54.309]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:54.309]      __ap = 1; 
[23:29:54.309]        // -> [__ap <= 0x00000001]
[23:29:54.309]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:54.333]  
[23:29:54.333]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[23:29:54.333]  
[23:29:54.335]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:54.335]    </block>
[23:29:54.335]  </sequence>
[23:29:54.335]  
[23:30:05.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:30:05.964]  
[23:30:05.964]  <debugvars>
[23:30:05.964]    // Pre-defined
[23:30:05.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:05.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:05.971]    __dp=0x00000000
[23:30:05.971]    __ap=0x00000000
[23:30:05.971]    __traceout=0x00000000      (Trace Disabled)
[23:30:05.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:05.971]    __FlashAddr=0x00000000
[23:30:05.971]    __FlashLen=0x00000000
[23:30:05.971]    __FlashArg=0x00000000
[23:30:05.971]    __FlashOp=0x00000000
[23:30:05.972]    __Result=0x00000000
[23:30:05.972]  </debugvars>
[23:30:05.972]  
[23:30:05.972]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:30:05.972]    <block atomic="false" info="">
[23:30:05.972]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:30:05.972]        // -> [isSWJ <= 0x00000001]
[23:30:05.972]      __var hasDormant = __protocol & 0x00020000;
[23:30:05.973]        // -> [hasDormant <= 0x00000000]
[23:30:05.973]      __var protType   = __protocol & 0x0000FFFF;
[23:30:05.973]        // -> [protType <= 0x00000002]
[23:30:05.973]    </block>
[23:30:05.973]    <control if="protType == 1" while="" timeout="0" info="">
[23:30:05.973]      // if-block "protType == 1"
[23:30:05.973]        // =>  FALSE
[23:30:05.973]      // skip if-block "protType == 1"
[23:30:05.974]    </control>
[23:30:05.974]    <control if="protType == 2" while="" timeout="0" info="">
[23:30:05.974]      // if-block "protType == 2"
[23:30:05.974]        // =>  TRUE
[23:30:05.974]      <control if="isSWJ" while="" timeout="0" info="">
[23:30:05.974]        // if-block "isSWJ"
[23:30:05.974]          // =>  TRUE
[23:30:05.974]        <control if="hasDormant" while="" timeout="0" info="">
[23:30:05.974]          // if-block "hasDormant"
[23:30:05.974]            // =>  FALSE
[23:30:05.974]          // skip if-block "hasDormant"
[23:30:05.974]        </control>
[23:30:05.974]        <control if="!hasDormant" while="" timeout="0" info="">
[23:30:05.974]          // if-block "!hasDormant"
[23:30:05.974]            // =>  TRUE
[23:30:05.974]          <block atomic="false" info="">
[23:30:05.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:30:05.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:05.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:30:05.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:30:05.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:30:05.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:05.983]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:30:05.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:30:05.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:30:05.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:05.992]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:30:05.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:30:05.993]          </block>
[23:30:05.993]          // end if-block "!hasDormant"
[23:30:05.993]        </control>
[23:30:05.993]        // end if-block "isSWJ"
[23:30:05.993]      </control>
[23:30:05.993]      <control if="!isSWJ" while="" timeout="0" info="">
[23:30:05.993]        // if-block "!isSWJ"
[23:30:05.993]          // =>  FALSE
[23:30:05.993]        // skip if-block "!isSWJ"
[23:30:05.996]      </control>
[23:30:05.996]      <block atomic="false" info="">
[23:30:05.996]        ReadDP(0x0);
[23:30:05.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:30:05.997]      </block>
[23:30:05.997]      // end if-block "protType == 2"
[23:30:05.997]    </control>
[23:30:05.997]  </sequence>
[23:30:05.997]  
[23:30:06.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:30:06.006]  
[23:30:06.006]  <debugvars>
[23:30:06.006]    // Pre-defined
[23:30:06.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:06.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:06.006]    __dp=0x00000000
[23:30:06.006]    __ap=0x00000000
[23:30:06.006]    __traceout=0x00000000      (Trace Disabled)
[23:30:06.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:06.006]    __FlashAddr=0x00000000
[23:30:06.006]    __FlashLen=0x00000000
[23:30:06.006]    __FlashArg=0x00000000
[23:30:06.006]    __FlashOp=0x00000000
[23:30:06.006]    __Result=0x00000000
[23:30:06.006]  </debugvars>
[23:30:06.006]  
[23:30:06.006]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:30:06.006]    <block atomic="false" info="">
[23:30:06.006]      __var SW_DP_ABORT       = 0x0;
[23:30:06.006]        // -> [SW_DP_ABORT <= 0x00000000]
[23:30:06.006]      __var DP_CTRL_STAT      = 0x4;
[23:30:06.006]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:30:06.006]      __var DP_SELECT         = 0x8;
[23:30:06.006]        // -> [DP_SELECT <= 0x00000008]
[23:30:06.006]      __var powered_down      = 0;
[23:30:06.006]        // -> [powered_down <= 0x00000000]
[23:30:06.006]      WriteDP(DP_SELECT, 0x00000000);
[23:30:06.012]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:30:06.012]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:30:06.014]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:30:06.014]        // -> [powered_down <= 0x00000001]
[23:30:06.014]    </block>
[23:30:06.014]    <control if="powered_down" while="" timeout="0" info="">
[23:30:06.014]      // if-block "powered_down"
[23:30:06.014]        // =>  TRUE
[23:30:06.014]      <block atomic="false" info="">
[23:30:06.014]        Message(0, "Debug/System power-up request sent");
[23:30:06.017]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:30:06.018]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:30:06.018]      </block>
[23:30:06.018]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:30:06.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:30:06.018]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:30:06.018]        // while-condition  =>  FALSE
[23:30:06.018]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:30:06.018]      </control>
[23:30:06.021]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:30:06.021]        // if-block "(__protocol & 0xFFFF) == 1"
[23:30:06.021]          // =>  FALSE
[23:30:06.021]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:30:06.021]      </control>
[23:30:06.021]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:30:06.021]        // if-block "(__protocol & 0xFFFF) == 2"
[23:30:06.021]          // =>  TRUE
[23:30:06.021]        <block atomic="false" info="">
[23:30:06.021]          Message(0, "executing SWD power up");
[23:30:06.023]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:30:06.024]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:30:06.024]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:30:06.026]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:30:06.026]        </block>
[23:30:06.026]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:30:06.026]      </control>
[23:30:06.026]      // end if-block "powered_down"
[23:30:06.026]    </control>
[23:30:06.026]    <block atomic="false" info="">
[23:30:06.026]      __var DEBUG_PORT_VAL    = 0;
[23:30:06.026]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:30:06.026]      __var ACCESS_POINT_VAL  = 0;
[23:30:06.026]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:30:06.026]      __ap = 1; 
[23:30:06.026]        // -> [__ap <= 0x00000001]
[23:30:06.026]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:30:06.032]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:30:06.032]      __ap = 4;
[23:30:06.032]        // -> [__ap <= 0x00000004]
[23:30:06.032]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:06.039]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:30:06.039]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:30:06.039]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:06.042]    </block>
[23:30:06.042]    <block atomic="false" info="">
[23:30:06.042]      __var nReset = 0x80;
[23:30:06.042]        // -> [nReset <= 0x00000080]
[23:30:06.042]      __var canReadPins = 0;
[23:30:06.042]        // -> [canReadPins <= 0x00000000]
[23:30:06.042]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:30:06.042]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:30:06.044]        // -> [canReadPins <= 0x00000001]
[23:30:06.044]    </block>
[23:30:06.044]    <control if="" while="1" timeout="200" info="">
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.044]      // while "1"  (timeout="200")
[23:30:06.044]      // while-condition  =>  TRUE
[23:30:06.051]      // while "1"  (timeout="200")
[23:30:06.051]      // while  =>  TIMEOUT
[23:30:06.051]      // end while "1"
[23:30:06.051]    </control>
[23:30:06.051]    <control if="canReadPins" while="" timeout="0" info="">
[23:30:06.051]      // if-block "canReadPins"
[23:30:06.051]        // =>  TRUE
[23:30:06.051]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:30:06.051]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:30:06.053]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:30:06.053]        // while-condition  =>  FALSE
[23:30:06.053]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:30:06.053]      </control>
[23:30:06.053]      // end if-block "canReadPins"
[23:30:06.053]    </control>
[23:30:06.053]    <control if="!canReadPins" while="" timeout="0" info="">
[23:30:06.053]      // if-block "!canReadPins"
[23:30:06.053]        // =>  FALSE
[23:30:06.053]      // skip if-block "!canReadPins"
[23:30:06.053]    </control>
[23:30:06.053]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:30:06.053]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:06.053]        // =>  TRUE
[23:30:06.053]      <block atomic="false" info="">
[23:30:06.053]        WriteAP(0x00, 0x190008);
[23:30:06.056]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:06.058]        WriteAP(0xF0, 0x01);
[23:30:06.062]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:06.062]      </block>
[23:30:06.062]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:06.062]    </control>
[23:30:06.062]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:30:06.062]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:06.062]        // =>  FALSE
[23:30:06.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:06.063]    </control>
[23:30:06.063]    <block atomic="false" info="">
[23:30:06.063]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:06.066]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:30:06.066]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:30:06.066]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:06.067]      __ap = 0; //lets make sure we reset the access point selection
[23:30:06.068]        // -> [__ap <= 0x00000000]
[23:30:06.068]    </block>
[23:30:06.068]  </sequence>
[23:30:06.068]  
[23:30:06.097]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:30:06.097]  
[23:30:06.097]  <debugvars>
[23:30:06.097]    // Pre-defined
[23:30:06.097]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:06.097]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:06.097]    __dp=0x00000000
[23:30:06.097]    __ap=0x00000000
[23:30:06.097]    __traceout=0x00000000      (Trace Disabled)
[23:30:06.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:06.097]    __FlashAddr=0x00000000
[23:30:06.097]    __FlashLen=0x00000000
[23:30:06.097]    __FlashArg=0x00000000
[23:30:06.097]    __FlashOp=0x00000000
[23:30:06.097]    __Result=0x00000000
[23:30:06.097]  </debugvars>
[23:30:06.097]  
[23:30:06.097]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:30:06.097]    <block atomic="false" info="">
[23:30:06.097]      __var deviceID = 0;
[23:30:06.101]        // -> [deviceID <= 0x00000000]
[23:30:06.101]      __var version = 0;
[23:30:06.101]        // -> [version <= 0x00000000]
[23:30:06.102]      __var partNum = 0;
[23:30:06.102]        // -> [partNum <= 0x00000000]
[23:30:06.102]      __var manuf = 0;
[23:30:06.102]        // -> [manuf <= 0x00000000]
[23:30:06.102]      __var isMSPM0G1X0X_G3X0X = 0;
[23:30:06.102]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:30:06.102]      __var isProduction = 0;
[23:30:06.102]        // -> [isProduction <= 0x00000000]
[23:30:06.102]      __var continueId = 0;
[23:30:06.102]        // -> [continueId <= 0x00000000]
[23:30:06.102]      deviceID =   Read32(0x41C40004);
[23:30:06.107]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:30:06.107]        // -> [deviceID <= 0x2BB8802F]
[23:30:06.107]      version = deviceID >> 28;
[23:30:06.107]        // -> [version <= 0x00000002]
[23:30:06.107]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:30:06.107]        // -> [partNum <= 0x0000BB88]
[23:30:06.107]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:30:06.107]        // -> [manuf <= 0x00000017]
[23:30:06.107]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:30:06.107]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:30:06.107]      isProduction = (version > 0);
[23:30:06.107]        // -> [isProduction <= 0x00000001]
[23:30:06.107]    </block>
[23:30:06.107]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:30:06.107]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:30:06.107]        // =>  FALSE
[23:30:06.107]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:30:06.107]    </control>
[23:30:06.107]    <control if="continueId == 4" while="" timeout="0" info="">
[23:30:06.110]      // if-block "continueId == 4"
[23:30:06.110]        // =>  FALSE
[23:30:06.110]      // skip if-block "continueId == 4"
[23:30:06.110]    </control>
[23:30:06.110]    <control if="!isProduction" while="" timeout="0" info="">
[23:30:06.110]      // if-block "!isProduction"
[23:30:06.111]        // =>  FALSE
[23:30:06.111]      // skip if-block "!isProduction"
[23:30:06.111]    </control>
[23:30:06.112]  </sequence>
[23:30:06.112]  
[23:32:14.262]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:32:14.262]  
[23:32:14.262]  <debugvars>
[23:32:14.262]    // Pre-defined
[23:32:14.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:14.262]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:14.262]    __dp=0x00000000
[23:32:14.262]    __ap=0x00000000
[23:32:14.262]    __traceout=0x00000000      (Trace Disabled)
[23:32:14.262]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:14.262]    __FlashAddr=0x00000000
[23:32:14.262]    __FlashLen=0x00000000
[23:32:14.262]    __FlashArg=0x00000000
[23:32:14.262]    __FlashOp=0x00000000
[23:32:14.262]    __Result=0x00000000
[23:32:14.262]  </debugvars>
[23:32:14.262]  
[23:32:14.262]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:32:14.262]    <block atomic="false" info="">
[23:32:14.262]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:32:14.262]        // -> [isSWJ <= 0x00000001]
[23:32:14.262]      __var hasDormant = __protocol & 0x00020000;
[23:32:14.262]        // -> [hasDormant <= 0x00000000]
[23:32:14.262]      __var protType   = __protocol & 0x0000FFFF;
[23:32:14.262]        // -> [protType <= 0x00000002]
[23:32:14.262]    </block>
[23:32:14.262]    <control if="protType == 1" while="" timeout="0" info="">
[23:32:14.262]      // if-block "protType == 1"
[23:32:14.262]        // =>  FALSE
[23:32:14.262]      // skip if-block "protType == 1"
[23:32:14.262]    </control>
[23:32:14.262]    <control if="protType == 2" while="" timeout="0" info="">
[23:32:14.262]      // if-block "protType == 2"
[23:32:14.262]        // =>  TRUE
[23:32:14.262]      <control if="isSWJ" while="" timeout="0" info="">
[23:32:14.262]        // if-block "isSWJ"
[23:32:14.262]          // =>  TRUE
[23:32:14.262]        <control if="hasDormant" while="" timeout="0" info="">
[23:32:14.262]          // if-block "hasDormant"
[23:32:14.262]            // =>  FALSE
[23:32:14.262]          // skip if-block "hasDormant"
[23:32:14.262]        </control>
[23:32:14.262]        <control if="!hasDormant" while="" timeout="0" info="">
[23:32:14.262]          // if-block "!hasDormant"
[23:32:14.262]            // =>  TRUE
[23:32:14.262]          <block atomic="false" info="">
[23:32:14.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:32:14.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:14.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:32:14.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:32:14.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:32:14.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:14.273]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:32:14.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:32:14.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:32:14.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:32:14.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:32:14.282]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:32:14.282]          </block>
[23:32:14.282]          // end if-block "!hasDormant"
[23:32:14.282]        </control>
[23:32:14.282]        // end if-block "isSWJ"
[23:32:14.282]      </control>
[23:32:14.282]      <control if="!isSWJ" while="" timeout="0" info="">
[23:32:14.282]        // if-block "!isSWJ"
[23:32:14.282]          // =>  FALSE
[23:32:14.282]        // skip if-block "!isSWJ"
[23:32:14.282]      </control>
[23:32:14.282]      <block atomic="false" info="">
[23:32:14.282]        ReadDP(0x0);
[23:32:14.282]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:32:14.282]      </block>
[23:32:14.282]      // end if-block "protType == 2"
[23:32:14.282]    </control>
[23:32:14.282]  </sequence>
[23:32:14.282]  
[23:32:14.282]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:32:14.282]  
[23:32:14.282]  <debugvars>
[23:32:14.289]    // Pre-defined
[23:32:14.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:14.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:14.289]    __dp=0x00000000
[23:32:14.289]    __ap=0x00000000
[23:32:14.289]    __traceout=0x00000000      (Trace Disabled)
[23:32:14.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:14.289]    __FlashAddr=0x00000000
[23:32:14.289]    __FlashLen=0x00000000
[23:32:14.289]    __FlashArg=0x00000000
[23:32:14.289]    __FlashOp=0x00000000
[23:32:14.289]    __Result=0x00000000
[23:32:14.291]  </debugvars>
[23:32:14.291]  
[23:32:14.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:32:14.291]    <block atomic="false" info="">
[23:32:14.291]      __var SW_DP_ABORT       = 0x0;
[23:32:14.291]        // -> [SW_DP_ABORT <= 0x00000000]
[23:32:14.291]      __var DP_CTRL_STAT      = 0x4;
[23:32:14.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:32:14.291]      __var DP_SELECT         = 0x8;
[23:32:14.291]        // -> [DP_SELECT <= 0x00000008]
[23:32:14.291]      __var powered_down      = 0;
[23:32:14.292]        // -> [powered_down <= 0x00000000]
[23:32:14.292]      WriteDP(DP_SELECT, 0x00000000);
[23:32:14.293]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:32:14.293]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:32:14.293]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:32:14.293]        // -> [powered_down <= 0x00000001]
[23:32:14.293]    </block>
[23:32:14.293]    <control if="powered_down" while="" timeout="0" info="">
[23:32:14.293]      // if-block "powered_down"
[23:32:14.293]        // =>  TRUE
[23:32:14.293]      <block atomic="false" info="">
[23:32:14.293]        Message(0, "Debug/System power-up request sent");
[23:32:14.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:32:14.300]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:32:14.300]      </block>
[23:32:14.300]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:32:14.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:32:14.302]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:32:14.302]        // while-condition  =>  FALSE
[23:32:14.302]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:32:14.302]      </control>
[23:32:14.302]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:32:14.302]        // if-block "(__protocol & 0xFFFF) == 1"
[23:32:14.302]          // =>  FALSE
[23:32:14.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:32:14.302]      </control>
[23:32:14.302]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:32:14.302]        // if-block "(__protocol & 0xFFFF) == 2"
[23:32:14.302]          // =>  TRUE
[23:32:14.302]        <block atomic="false" info="">
[23:32:14.302]          Message(0, "executing SWD power up");
[23:32:14.302]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:32:14.313]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:32:14.313]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:32:14.313]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:32:14.313]        </block>
[23:32:14.313]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:32:14.313]      </control>
[23:32:14.313]      // end if-block "powered_down"
[23:32:14.313]    </control>
[23:32:14.313]    <block atomic="false" info="">
[23:32:14.313]      __var DEBUG_PORT_VAL    = 0;
[23:32:14.313]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:32:14.313]      __var ACCESS_POINT_VAL  = 0;
[23:32:14.313]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:32:14.313]      __ap = 1; 
[23:32:14.313]        // -> [__ap <= 0x00000001]
[23:32:14.313]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:32:14.322]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:32:14.322]      __ap = 4;
[23:32:14.322]        // -> [__ap <= 0x00000004]
[23:32:14.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:14.322]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:32:14.322]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:32:14.322]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:14.322]    </block>
[23:32:14.322]    <block atomic="false" info="">
[23:32:14.322]      __var nReset = 0x80;
[23:32:14.322]        // -> [nReset <= 0x00000080]
[23:32:14.322]      __var canReadPins = 0;
[23:32:14.322]        // -> [canReadPins <= 0x00000000]
[23:32:14.322]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:32:14.322]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:32:14.322]        // -> [canReadPins <= 0x00000001]
[23:32:14.322]    </block>
[23:32:14.331]    <control if="" while="1" timeout="200" info="">
[23:32:14.331]      // while "1"  (timeout="200")
[23:32:14.331]      // while-condition  =>  TRUE
[23:32:14.331]      // while "1"  (timeout="200")
[23:32:14.331]      // while-condition  =>  TRUE
[23:32:14.331]      // while "1"  (timeout="200")
[23:32:14.332]      // while-condition  =>  TRUE
[23:32:14.332]      // while "1"  (timeout="200")
[23:32:14.332]      // while-condition  =>  TRUE
[23:32:14.332]      // while "1"  (timeout="200")
[23:32:14.332]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.333]      // while-condition  =>  TRUE
[23:32:14.333]      // while "1"  (timeout="200")
[23:32:14.335]      // while-condition  =>  TRUE
[23:32:14.335]      // while "1"  (timeout="200")
[23:32:14.335]      // while-condition  =>  TRUE
[23:32:14.335]      // while "1"  (timeout="200")
[23:32:14.335]      // while-condition  =>  TRUE
[23:32:14.335]      // while "1"  (timeout="200")
[23:32:14.335]      // while-condition  =>  TRUE
[23:32:14.335]      // while "1"  (timeout="200")
[23:32:14.335]      // while-condition  =>  TRUE
[23:32:14.335]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.337]      // while "1"  (timeout="200")
[23:32:14.337]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.339]      // while "1"  (timeout="200")
[23:32:14.339]      // while-condition  =>  TRUE
[23:32:14.341]      // while "1"  (timeout="200")
[23:32:14.341]      // while-condition  =>  TRUE
[23:32:14.341]      // while "1"  (timeout="200")
[23:32:14.341]      // while-condition  =>  TRUE
[23:32:14.341]      // while "1"  (timeout="200")
[23:32:14.341]      // while-condition  =>  TRUE
[23:32:14.341]      // while "1"  (timeout="200")
[23:32:14.341]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.342]      // while "1"  (timeout="200")
[23:32:14.342]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.344]      // while "1"  (timeout="200")
[23:32:14.344]      // while-condition  =>  TRUE
[23:32:14.345]      // while "1"  (timeout="200")
[23:32:14.345]      // while-condition  =>  TRUE
[23:32:14.345]      // while "1"  (timeout="200")
[23:32:14.345]      // while-condition  =>  TRUE
[23:32:14.345]      // while "1"  (timeout="200")
[23:32:14.345]      // while-condition  =>  TRUE
[23:32:14.345]      // while "1"  (timeout="200")
[23:32:14.345]      // while-condition  =>  TRUE
[23:32:14.345]      // while "1"  (timeout="200")
[23:32:14.345]      // while-condition  =>  TRUE
[23:32:14.347]      // while "1"  (timeout="200")
[23:32:14.347]      // while  =>  TIMEOUT
[23:32:14.347]      // end while "1"
[23:32:14.347]    </control>
[23:32:14.347]    <control if="canReadPins" while="" timeout="0" info="">
[23:32:14.347]      // if-block "canReadPins"
[23:32:14.347]        // =>  TRUE
[23:32:14.347]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:32:14.347]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:32:14.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:32:14.349]        // while-condition  =>  FALSE
[23:32:14.349]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:32:14.349]      </control>
[23:32:14.349]      // end if-block "canReadPins"
[23:32:14.349]    </control>
[23:32:14.351]    <control if="!canReadPins" while="" timeout="0" info="">
[23:32:14.351]      // if-block "!canReadPins"
[23:32:14.351]        // =>  FALSE
[23:32:14.351]      // skip if-block "!canReadPins"
[23:32:14.351]    </control>
[23:32:14.351]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:32:14.351]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:14.351]        // =>  TRUE
[23:32:14.351]      <block atomic="false" info="">
[23:32:14.351]        WriteAP(0x00, 0x190008);
[23:32:14.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:14.353]        WriteAP(0xF0, 0x01);
[23:32:14.362]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:32:14.362]      </block>
[23:32:14.362]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:32:14.362]    </control>
[23:32:14.362]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:32:14.362]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:14.362]        // =>  FALSE
[23:32:14.362]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:32:14.362]    </control>
[23:32:14.362]    <block atomic="false" info="">
[23:32:14.363]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:32:14.364]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:32:14.364]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:32:14.364]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:32:14.367]      __ap = 0; //lets make sure we reset the access point selection
[23:32:14.367]        // -> [__ap <= 0x00000000]
[23:32:14.367]    </block>
[23:32:14.367]  </sequence>
[23:32:14.367]  
[23:32:14.382]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:32:14.382]  
[23:32:14.382]  <debugvars>
[23:32:14.382]    // Pre-defined
[23:32:14.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:32:14.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:32:14.390]    __dp=0x00000000
[23:32:14.390]    __ap=0x00000000
[23:32:14.390]    __traceout=0x00000000      (Trace Disabled)
[23:32:14.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:32:14.390]    __FlashAddr=0x00000000
[23:32:14.390]    __FlashLen=0x00000000
[23:32:14.390]    __FlashArg=0x00000000
[23:32:14.390]    __FlashOp=0x00000000
[23:32:14.391]    __Result=0x00000000
[23:32:14.391]  </debugvars>
[23:32:14.391]  
[23:32:14.391]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:32:14.391]    <block atomic="false" info="">
[23:32:14.391]      __var deviceID = 0;
[23:32:14.392]        // -> [deviceID <= 0x00000000]
[23:32:14.392]      __var version = 0;
[23:32:14.392]        // -> [version <= 0x00000000]
[23:32:14.392]      __var partNum = 0;
[23:32:14.392]        // -> [partNum <= 0x00000000]
[23:32:14.392]      __var manuf = 0;
[23:32:14.392]        // -> [manuf <= 0x00000000]
[23:32:14.392]      __var isMSPM0G1X0X_G3X0X = 0;
[23:32:14.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:32:14.392]      __var isProduction = 0;
[23:32:14.393]        // -> [isProduction <= 0x00000000]
[23:32:14.393]      __var continueId = 0;
[23:32:14.393]        // -> [continueId <= 0x00000000]
[23:32:14.393]      deviceID =   Read32(0x41C40004);
[23:32:14.402]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:32:14.402]        // -> [deviceID <= 0x2BB8802F]
[23:32:14.402]      version = deviceID >> 28;
[23:32:14.402]        // -> [version <= 0x00000002]
[23:32:14.402]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:32:14.402]        // -> [partNum <= 0x0000BB88]
[23:32:14.402]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:32:14.403]        // -> [manuf <= 0x00000017]
[23:32:14.403]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:32:14.403]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:32:14.403]      isProduction = (version > 0);
[23:32:14.403]        // -> [isProduction <= 0x00000001]
[23:32:14.403]    </block>
[23:32:14.403]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:32:14.403]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:32:14.403]        // =>  FALSE
[23:32:14.403]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:32:14.403]    </control>
[23:32:14.403]    <control if="continueId == 4" while="" timeout="0" info="">
[23:32:14.403]      // if-block "continueId == 4"
[23:32:14.403]        // =>  FALSE
[23:32:14.403]      // skip if-block "continueId == 4"
[23:32:14.403]    </control>
[23:32:14.403]    <control if="!isProduction" while="" timeout="0" info="">
[23:32:14.403]      // if-block "!isProduction"
[23:32:14.403]        // =>  FALSE
[23:32:14.403]      // skip if-block "!isProduction"
[23:32:14.403]    </control>
[23:32:14.403]  </sequence>
[23:32:14.403]  
