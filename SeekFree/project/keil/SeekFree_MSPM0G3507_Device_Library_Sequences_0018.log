/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0018.log
 *  Created     : 20:41:20 (01/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:41:20.947]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:41:20.947]  
[20:41:20.947]  <debugvars>
[20:41:20.947]    // Pre-defined
[20:41:20.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:20.947]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:41:20.947]    __dp=0x00000000
[20:41:20.947]    __ap=0x00000000
[20:41:20.947]    __traceout=0x00000000      (Trace Disabled)
[20:41:20.947]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:20.947]    __FlashAddr=0x00000000
[20:41:20.947]    __FlashLen=0x00000000
[20:41:20.947]    __FlashArg=0x00000000
[20:41:20.947]    __FlashOp=0x00000000
[20:41:20.950]    __Result=0x00000000
[20:41:20.950]  </debugvars>
[20:41:20.950]  
[20:41:20.950]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:41:20.950]    <block atomic="false" info="">
[20:41:20.950]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:41:20.951]        // -> [isSWJ <= 0x00000001]
[20:41:20.951]      __var hasDormant = __protocol & 0x00020000;
[20:41:20.951]        // -> [hasDormant <= 0x00000000]
[20:41:20.951]      __var protType   = __protocol & 0x0000FFFF;
[20:41:20.951]        // -> [protType <= 0x00000002]
[20:41:20.951]    </block>
[20:41:20.951]    <control if="protType == 1" while="" timeout="0" info="">
[20:41:20.951]      // if-block "protType == 1"
[20:41:20.951]        // =>  FALSE
[20:41:20.951]      // skip if-block "protType == 1"
[20:41:20.951]    </control>
[20:41:20.951]    <control if="protType == 2" while="" timeout="0" info="">
[20:41:20.951]      // if-block "protType == 2"
[20:41:20.951]        // =>  TRUE
[20:41:20.952]      <control if="isSWJ" while="" timeout="0" info="">
[20:41:20.952]        // if-block "isSWJ"
[20:41:20.952]          // =>  TRUE
[20:41:20.952]        <control if="hasDormant" while="" timeout="0" info="">
[20:41:20.952]          // if-block "hasDormant"
[20:41:20.952]            // =>  FALSE
[20:41:20.952]          // skip if-block "hasDormant"
[20:41:20.952]        </control>
[20:41:20.952]        <control if="!hasDormant" while="" timeout="0" info="">
[20:41:20.952]          // if-block "!hasDormant"
[20:41:20.953]            // =>  TRUE
[20:41:20.953]          <block atomic="false" info="">
[20:41:20.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:41:20.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:20.955]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:41:20.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:41:20.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:41:20.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:20.962]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:41:20.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:41:20.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:41:20.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:20.966]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:41:20.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:41:20.966]          </block>
[20:41:20.966]          // end if-block "!hasDormant"
[20:41:20.966]        </control>
[20:41:20.966]        // end if-block "isSWJ"
[20:41:20.966]      </control>
[20:41:20.966]      <control if="!isSWJ" while="" timeout="0" info="">
[20:41:20.966]        // if-block "!isSWJ"
[20:41:20.966]          // =>  FALSE
[20:41:20.966]        // skip if-block "!isSWJ"
[20:41:20.969]      </control>
[20:41:20.969]      <block atomic="false" info="">
[20:41:20.969]        ReadDP(0x0);
[20:41:20.974]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:41:20.974]      </block>
[20:41:20.974]      // end if-block "protType == 2"
[20:41:20.974]    </control>
[20:41:20.975]  </sequence>
[20:41:20.975]  
[20:41:20.983]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:41:20.983]  
[20:41:20.983]  <debugvars>
[20:41:20.983]    // Pre-defined
[20:41:20.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:20.986]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:41:20.986]    __dp=0x00000000
[20:41:20.987]    __ap=0x00000000
[20:41:20.987]    __traceout=0x00000000      (Trace Disabled)
[20:41:20.987]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:20.987]    __FlashAddr=0x00000000
[20:41:20.987]    __FlashLen=0x00000000
[20:41:20.987]    __FlashArg=0x00000000
[20:41:20.987]    __FlashOp=0x00000000
[20:41:20.987]    __Result=0x00000000
[20:41:20.987]  </debugvars>
[20:41:20.987]  
[20:41:20.987]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:41:20.987]    <block atomic="false" info="">
[20:41:20.987]      __var SW_DP_ABORT       = 0x0;
[20:41:20.987]        // -> [SW_DP_ABORT <= 0x00000000]
[20:41:20.987]      __var DP_CTRL_STAT      = 0x4;
[20:41:20.987]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:41:20.987]      __var DP_SELECT         = 0x8;
[20:41:20.987]        // -> [DP_SELECT <= 0x00000008]
[20:41:20.987]      __var powered_down      = 0;
[20:41:20.987]        // -> [powered_down <= 0x00000000]
[20:41:20.987]      WriteDP(DP_SELECT, 0x00000000);
[20:41:20.991]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:41:20.992]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:41:20.996]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:41:20.996]        // -> [powered_down <= 0x00000001]
[20:41:20.996]    </block>
[20:41:20.996]    <control if="powered_down" while="" timeout="0" info="">
[20:41:20.996]      // if-block "powered_down"
[20:41:20.996]        // =>  TRUE
[20:41:20.996]      <block atomic="false" info="">
[20:41:20.996]        Message(0, "Debug/System power-up request sent");
[20:41:20.998]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:41:21.000]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:41:21.000]      </block>
[20:41:21.000]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:41:21.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:41:21.001]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:41:21.001]        // while-condition  =>  FALSE
[20:41:21.001]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:41:21.001]      </control>
[20:41:21.001]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:41:21.001]        // if-block "(__protocol & 0xFFFF) == 1"
[20:41:21.001]          // =>  FALSE
[20:41:21.001]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:41:21.001]      </control>
[20:41:21.001]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:41:21.001]        // if-block "(__protocol & 0xFFFF) == 2"
[20:41:21.001]          // =>  TRUE
[20:41:21.004]        <block atomic="false" info="">
[20:41:21.004]          Message(0, "executing SWD power up");
[20:41:21.005]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:41:21.010]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:41:21.010]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:41:21.010]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:41:21.010]        </block>
[20:41:21.010]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:41:21.010]      </control>
[20:41:21.013]      // end if-block "powered_down"
[20:41:21.013]    </control>
[20:41:21.013]    <block atomic="false" info="">
[20:41:21.013]      __var DEBUG_PORT_VAL    = 0;
[20:41:21.013]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:41:21.013]      __var ACCESS_POINT_VAL  = 0;
[20:41:21.013]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:41:21.013]      __ap = 1; 
[20:41:21.013]        // -> [__ap <= 0x00000001]
[20:41:21.013]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:41:21.020]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:41:21.020]      __ap = 4;
[20:41:21.020]        // -> [__ap <= 0x00000004]
[20:41:21.020]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:41:21.022]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:41:21.026]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:41:21.026]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:41:21.026]    </block>
[20:41:21.026]    <block atomic="false" info="">
[20:41:21.026]      __var nReset = 0x80;
[20:41:21.029]        // -> [nReset <= 0x00000080]
[20:41:21.029]      __var canReadPins = 0;
[20:41:21.029]        // -> [canReadPins <= 0x00000000]
[20:41:21.029]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:41:21.030]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:41:21.030]        // -> [canReadPins <= 0x00000001]
[20:41:21.030]    </block>
[20:41:21.030]    <control if="" while="1" timeout="200" info="">
[20:41:21.030]      // while "1"  (timeout="200")
[20:41:21.030]      // while-condition  =>  TRUE
[20:41:21.030]      // while "1"  (timeout="200")
[20:41:21.030]      // while-condition  =>  TRUE
[20:41:21.030]      // while "1"  (timeout="200")
[20:41:21.035]      // while-condition  =>  TRUE
[20:41:21.035]      // while "1"  (timeout="200")
[20:41:21.035]      // while  =>  TIMEOUT
[20:41:21.035]      // end while "1"
[20:41:21.035]    </control>
[20:41:21.035]    <control if="canReadPins" while="" timeout="0" info="">
[20:41:21.035]      // if-block "canReadPins"
[20:41:21.035]        // =>  TRUE
[20:41:21.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:41:21.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:41:21.038]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:41:21.038]        // while-condition  =>  FALSE
[20:41:21.038]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:41:21.038]      </control>
[20:41:21.038]      // end if-block "canReadPins"
[20:41:21.038]    </control>
[20:41:21.038]    <control if="!canReadPins" while="" timeout="0" info="">
[20:41:21.038]      // if-block "!canReadPins"
[20:41:21.039]        // =>  FALSE
[20:41:21.039]      // skip if-block "!canReadPins"
[20:41:21.039]    </control>
[20:41:21.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:41:21.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:41:21.039]        // =>  TRUE
[20:41:21.039]      <block atomic="false" info="">
[20:41:21.039]        WriteAP(0x00, 0x190008);
[20:41:21.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:41:21.041]        WriteAP(0xF0, 0x01);
[20:41:21.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:41:21.044]      </block>
[20:41:21.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:41:21.044]    </control>
[20:41:21.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:41:21.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:41:21.044]        // =>  FALSE
[20:41:21.044]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:41:21.044]    </control>
[20:41:21.044]    <block atomic="false" info="">
[20:41:21.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:41:21.050]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:41:21.050]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:41:21.050]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:41:21.052]      __ap = 0; //lets make sure we reset the access point selection
[20:41:21.052]        // -> [__ap <= 0x00000000]
[20:41:21.052]    </block>
[20:41:21.052]  </sequence>
[20:41:21.052]  
[20:41:21.080]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:41:21.080]  
[20:41:21.080]  <debugvars>
[20:41:21.080]    // Pre-defined
[20:41:21.080]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:21.080]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:41:21.080]    __dp=0x00000000
[20:41:21.080]    __ap=0x00000000
[20:41:21.080]    __traceout=0x00000000      (Trace Disabled)
[20:41:21.080]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:21.080]    __FlashAddr=0x00000000
[20:41:21.080]    __FlashLen=0x00000000
[20:41:21.080]    __FlashArg=0x00000000
[20:41:21.080]    __FlashOp=0x00000000
[20:41:21.080]    __Result=0x00000000
[20:41:21.080]  </debugvars>
[20:41:21.080]  
[20:41:21.080]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:41:21.080]    <block atomic="false" info="">
[20:41:21.080]      __var deviceID = 0;
[20:41:21.080]        // -> [deviceID <= 0x00000000]
[20:41:21.080]      __var version = 0;
[20:41:21.080]        // -> [version <= 0x00000000]
[20:41:21.080]      __var partNum = 0;
[20:41:21.080]        // -> [partNum <= 0x00000000]
[20:41:21.080]      __var manuf = 0;
[20:41:21.080]        // -> [manuf <= 0x00000000]
[20:41:21.080]      __var isMSPM0G1X0X_G3X0X = 0;
[20:41:21.080]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:41:21.080]      __var isProduction = 0;
[20:41:21.080]        // -> [isProduction <= 0x00000000]
[20:41:21.080]      __var continueId = 0;
[20:41:21.080]        // -> [continueId <= 0x00000000]
[20:41:21.080]      deviceID =   Read32(0x41C40004);
[20:41:21.088]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:41:21.088]        // -> [deviceID <= 0x2BB8802F]
[20:41:21.088]      version = deviceID >> 28;
[20:41:21.088]        // -> [version <= 0x00000002]
[20:41:21.088]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:41:21.088]        // -> [partNum <= 0x0000BB88]
[20:41:21.088]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:41:21.088]        // -> [manuf <= 0x00000017]
[20:41:21.088]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:41:21.088]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:41:21.090]      isProduction = (version > 0);
[20:41:21.090]        // -> [isProduction <= 0x00000001]
[20:41:21.090]    </block>
[20:41:21.090]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:41:21.090]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:41:21.090]        // =>  FALSE
[20:41:21.090]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:41:21.090]    </control>
[20:41:21.090]    <control if="continueId == 4" while="" timeout="0" info="">
[20:41:21.090]      // if-block "continueId == 4"
[20:41:21.090]        // =>  FALSE
[20:41:21.090]      // skip if-block "continueId == 4"
[20:41:21.090]    </control>
[20:41:21.090]    <control if="!isProduction" while="" timeout="0" info="">
[20:41:21.090]      // if-block "!isProduction"
[20:41:21.090]        // =>  FALSE
[20:41:21.090]      // skip if-block "!isProduction"
[20:41:21.090]    </control>
[20:41:21.090]  </sequence>
[20:41:21.090]  
[20:43:54.873]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:43:54.873]  
[20:43:54.881]  <debugvars>
[20:43:54.881]    // Pre-defined
[20:43:54.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:54.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:54.881]    __dp=0x00000000
[20:43:54.881]    __ap=0x00000000
[20:43:54.881]    __traceout=0x00000000      (Trace Disabled)
[20:43:54.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:54.881]    __FlashAddr=0x00000000
[20:43:54.881]    __FlashLen=0x00000000
[20:43:54.881]    __FlashArg=0x00000000
[20:43:54.881]    __FlashOp=0x00000000
[20:43:54.881]    __Result=0x00000000
[20:43:54.883]  </debugvars>
[20:43:54.883]  
[20:43:54.883]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:43:54.883]    <block atomic="false" info="">
[20:43:54.883]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:43:54.883]        // -> [isSWJ <= 0x00000001]
[20:43:54.883]      __var hasDormant = __protocol & 0x00020000;
[20:43:54.883]        // -> [hasDormant <= 0x00000000]
[20:43:54.883]      __var protType   = __protocol & 0x0000FFFF;
[20:43:54.883]        // -> [protType <= 0x00000002]
[20:43:54.883]    </block>
[20:43:54.883]    <control if="protType == 1" while="" timeout="0" info="">
[20:43:54.883]      // if-block "protType == 1"
[20:43:54.883]        // =>  FALSE
[20:43:54.883]      // skip if-block "protType == 1"
[20:43:54.883]    </control>
[20:43:54.883]    <control if="protType == 2" while="" timeout="0" info="">
[20:43:54.883]      // if-block "protType == 2"
[20:43:54.883]        // =>  TRUE
[20:43:54.883]      <control if="isSWJ" while="" timeout="0" info="">
[20:43:54.883]        // if-block "isSWJ"
[20:43:54.883]          // =>  TRUE
[20:43:54.883]        <control if="hasDormant" while="" timeout="0" info="">
[20:43:54.883]          // if-block "hasDormant"
[20:43:54.883]            // =>  FALSE
[20:43:54.883]          // skip if-block "hasDormant"
[20:43:54.883]        </control>
[20:43:54.883]        <control if="!hasDormant" while="" timeout="0" info="">
[20:43:54.883]          // if-block "!hasDormant"
[20:43:54.883]            // =>  TRUE
[20:43:54.883]          <block atomic="false" info="">
[20:43:54.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:43:54.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:54.887]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:43:54.891]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:43:54.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:43:54.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:54.895]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:43:54.895]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:43:54.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:43:54.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:43:54.895]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:43:54.899]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:43:54.899]          </block>
[20:43:54.899]          // end if-block "!hasDormant"
[20:43:54.899]        </control>
[20:43:54.899]        // end if-block "isSWJ"
[20:43:54.899]      </control>
[20:43:54.899]      <control if="!isSWJ" while="" timeout="0" info="">
[20:43:54.899]        // if-block "!isSWJ"
[20:43:54.899]          // =>  FALSE
[20:43:54.899]        // skip if-block "!isSWJ"
[20:43:54.899]      </control>
[20:43:54.899]      <block atomic="false" info="">
[20:43:54.899]        ReadDP(0x0);
[20:43:54.903]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:43:54.903]      </block>
[20:43:54.903]      // end if-block "protType == 2"
[20:43:54.903]    </control>
[20:43:54.903]  </sequence>
[20:43:54.903]  
[20:43:54.907]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:43:54.907]  
[20:43:54.907]  <debugvars>
[20:43:54.907]    // Pre-defined
[20:43:54.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:54.907]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:54.907]    __dp=0x00000000
[20:43:54.907]    __ap=0x00000000
[20:43:54.907]    __traceout=0x00000000      (Trace Disabled)
[20:43:54.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:54.907]    __FlashAddr=0x00000000
[20:43:54.907]    __FlashLen=0x00000000
[20:43:54.907]    __FlashArg=0x00000000
[20:43:54.907]    __FlashOp=0x00000000
[20:43:54.907]    __Result=0x00000000
[20:43:54.909]  </debugvars>
[20:43:54.909]  
[20:43:54.909]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:43:54.909]    <block atomic="false" info="">
[20:43:54.909]      __var SW_DP_ABORT       = 0x0;
[20:43:54.909]        // -> [SW_DP_ABORT <= 0x00000000]
[20:43:54.909]      __var DP_CTRL_STAT      = 0x4;
[20:43:54.909]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:43:54.909]      __var DP_SELECT         = 0x8;
[20:43:54.909]        // -> [DP_SELECT <= 0x00000008]
[20:43:54.909]      __var powered_down      = 0;
[20:43:54.909]        // -> [powered_down <= 0x00000000]
[20:43:54.909]      WriteDP(DP_SELECT, 0x00000000);
[20:43:54.909]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:43:54.912]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:43:54.916]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:43:54.916]        // -> [powered_down <= 0x00000001]
[20:43:54.916]    </block>
[20:43:54.916]    <control if="powered_down" while="" timeout="0" info="">
[20:43:54.916]      // if-block "powered_down"
[20:43:54.916]        // =>  TRUE
[20:43:54.916]      <block atomic="false" info="">
[20:43:54.916]        Message(0, "Debug/System power-up request sent");
[20:43:54.916]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:43:54.923]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:43:54.923]      </block>
[20:43:54.923]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:43:54.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:43:54.924]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:43:54.924]        // while-condition  =>  FALSE
[20:43:54.924]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:43:54.924]      </control>
[20:43:54.924]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:43:54.924]        // if-block "(__protocol & 0xFFFF) == 1"
[20:43:54.924]          // =>  FALSE
[20:43:54.924]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:43:54.924]      </control>
[20:43:54.924]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:43:54.924]        // if-block "(__protocol & 0xFFFF) == 2"
[20:43:54.926]          // =>  TRUE
[20:43:54.926]        <block atomic="false" info="">
[20:43:54.926]          Message(0, "executing SWD power up");
[20:43:54.926]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:43:54.929]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:43:54.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:43:54.930]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:43:54.930]        </block>
[20:43:54.930]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:43:54.930]      </control>
[20:43:54.930]      // end if-block "powered_down"
[20:43:54.930]    </control>
[20:43:54.930]    <block atomic="false" info="">
[20:43:54.930]      __var DEBUG_PORT_VAL    = 0;
[20:43:54.930]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:43:54.930]      __var ACCESS_POINT_VAL  = 0;
[20:43:54.933]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:43:54.933]      __ap = 1; 
[20:43:54.933]        // -> [__ap <= 0x00000001]
[20:43:54.933]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:43:54.933]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:43:54.933]      __ap = 4;
[20:43:54.937]        // -> [__ap <= 0x00000004]
[20:43:54.937]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:43:54.943]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:43:54.943]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:43:54.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:43:54.946]    </block>
[20:43:54.946]    <block atomic="false" info="">
[20:43:54.946]      __var nReset = 0x80;
[20:43:54.946]        // -> [nReset <= 0x00000080]
[20:43:54.946]      __var canReadPins = 0;
[20:43:54.946]        // -> [canReadPins <= 0x00000000]
[20:43:54.946]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:43:54.950]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:43:54.950]        // -> [canReadPins <= 0x00000001]
[20:43:54.950]    </block>
[20:43:54.950]    <control if="" while="1" timeout="200" info="">
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.950]      // while "1"  (timeout="200")
[20:43:54.950]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.952]      // while "1"  (timeout="200")
[20:43:54.952]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.953]      // while "1"  (timeout="200")
[20:43:54.953]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.954]      // while-condition  =>  TRUE
[20:43:54.954]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.956]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.956]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.956]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.956]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.956]      // while "1"  (timeout="200")
[20:43:54.956]      // while-condition  =>  TRUE
[20:43:54.957]      // while "1"  (timeout="200")
[20:43:54.957]      // while  =>  TIMEOUT
[20:43:54.957]      // end while "1"
[20:43:54.957]    </control>
[20:43:54.957]    <control if="canReadPins" while="" timeout="0" info="">
[20:43:54.957]      // if-block "canReadPins"
[20:43:54.957]        // =>  TRUE
[20:43:54.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:43:54.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:43:54.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:43:54.958]        // while-condition  =>  FALSE
[20:43:54.958]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:43:54.958]      </control>
[20:43:54.958]      // end if-block "canReadPins"
[20:43:54.958]    </control>
[20:43:54.958]    <control if="!canReadPins" while="" timeout="0" info="">
[20:43:54.958]      // if-block "!canReadPins"
[20:43:54.958]        // =>  FALSE
[20:43:54.958]      // skip if-block "!canReadPins"
[20:43:54.958]    </control>
[20:43:54.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:43:54.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:43:54.961]        // =>  TRUE
[20:43:54.961]      <block atomic="false" info="">
[20:43:54.961]        WriteAP(0x00, 0x190008);
[20:43:54.963]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:43:54.963]        WriteAP(0xF0, 0x01);
[20:43:54.969]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:43:54.969]      </block>
[20:43:54.969]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:43:54.969]    </control>
[20:43:54.969]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:43:54.969]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:43:54.969]        // =>  FALSE
[20:43:54.969]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:43:54.969]    </control>
[20:43:54.973]    <block atomic="false" info="">
[20:43:54.973]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:43:54.985]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:43:54.985]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:43:54.985]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:43:54.988]      __ap = 0; //lets make sure we reset the access point selection
[20:43:54.988]        // -> [__ap <= 0x00000000]
[20:43:54.988]    </block>
[20:43:54.988]  </sequence>
[20:43:54.988]  
[20:43:55.023]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:43:55.023]  
[20:43:55.025]  <debugvars>
[20:43:55.025]    // Pre-defined
[20:43:55.025]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:43:55.025]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:43:55.025]    __dp=0x00000000
[20:43:55.025]    __ap=0x00000000
[20:43:55.025]    __traceout=0x00000000      (Trace Disabled)
[20:43:55.025]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:43:55.025]    __FlashAddr=0x00000000
[20:43:55.025]    __FlashLen=0x00000000
[20:43:55.025]    __FlashArg=0x00000000
[20:43:55.025]    __FlashOp=0x00000000
[20:43:55.025]    __Result=0x00000000
[20:43:55.025]  </debugvars>
[20:43:55.025]  
[20:43:55.025]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:43:55.025]    <block atomic="false" info="">
[20:43:55.026]      __var deviceID = 0;
[20:43:55.026]        // -> [deviceID <= 0x00000000]
[20:43:55.026]      __var version = 0;
[20:43:55.026]        // -> [version <= 0x00000000]
[20:43:55.026]      __var partNum = 0;
[20:43:55.026]        // -> [partNum <= 0x00000000]
[20:43:55.026]      __var manuf = 0;
[20:43:55.026]        // -> [manuf <= 0x00000000]
[20:43:55.026]      __var isMSPM0G1X0X_G3X0X = 0;
[20:43:55.026]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:43:55.026]      __var isProduction = 0;
[20:43:55.026]        // -> [isProduction <= 0x00000000]
[20:43:55.026]      __var continueId = 0;
[20:43:55.026]        // -> [continueId <= 0x00000000]
[20:43:55.026]      deviceID =   Read32(0x41C40004);
[20:43:55.030]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:43:55.030]        // -> [deviceID <= 0x2BB8802F]
[20:43:55.030]      version = deviceID >> 28;
[20:43:55.030]        // -> [version <= 0x00000002]
[20:43:55.030]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:43:55.030]        // -> [partNum <= 0x0000BB88]
[20:43:55.033]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:43:55.033]        // -> [manuf <= 0x00000017]
[20:43:55.033]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:43:55.033]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:43:55.033]      isProduction = (version > 0);
[20:43:55.033]        // -> [isProduction <= 0x00000001]
[20:43:55.033]    </block>
[20:43:55.033]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:43:55.033]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:43:55.033]        // =>  FALSE
[20:43:55.033]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:43:55.033]    </control>
[20:43:55.033]    <control if="continueId == 4" while="" timeout="0" info="">
[20:43:55.033]      // if-block "continueId == 4"
[20:43:55.034]        // =>  FALSE
[20:43:55.034]      // skip if-block "continueId == 4"
[20:43:55.034]    </control>
[20:43:55.034]    <control if="!isProduction" while="" timeout="0" info="">
[20:43:55.034]      // if-block "!isProduction"
[20:43:55.034]        // =>  FALSE
[20:43:55.035]      // skip if-block "!isProduction"
[20:43:55.035]    </control>
[20:43:55.035]  </sequence>
[20:43:55.035]  
[20:45:51.007]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:45:51.007]  
[20:45:51.017]  <debugvars>
[20:45:51.017]    // Pre-defined
[20:45:51.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:51.017]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:51.017]    __dp=0x00000000
[20:45:51.017]    __ap=0x00000000
[20:45:51.017]    __traceout=0x00000000      (Trace Disabled)
[20:45:51.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:51.017]    __FlashAddr=0x00000000
[20:45:51.017]    __FlashLen=0x00000000
[20:45:51.017]    __FlashArg=0x00000000
[20:45:51.017]    __FlashOp=0x00000000
[20:45:51.017]    __Result=0x00000000
[20:45:51.019]  </debugvars>
[20:45:51.019]  
[20:45:51.019]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:45:51.019]    <block atomic="false" info="">
[20:45:51.019]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:45:51.019]        // -> [isSWJ <= 0x00000001]
[20:45:51.019]      __var hasDormant = __protocol & 0x00020000;
[20:45:51.019]        // -> [hasDormant <= 0x00000000]
[20:45:51.019]      __var protType   = __protocol & 0x0000FFFF;
[20:45:51.019]        // -> [protType <= 0x00000002]
[20:45:51.019]    </block>
[20:45:51.019]    <control if="protType == 1" while="" timeout="0" info="">
[20:45:51.020]      // if-block "protType == 1"
[20:45:51.020]        // =>  FALSE
[20:45:51.020]      // skip if-block "protType == 1"
[20:45:51.020]    </control>
[20:45:51.020]    <control if="protType == 2" while="" timeout="0" info="">
[20:45:51.020]      // if-block "protType == 2"
[20:45:51.020]        // =>  TRUE
[20:45:51.020]      <control if="isSWJ" while="" timeout="0" info="">
[20:45:51.021]        // if-block "isSWJ"
[20:45:51.021]          // =>  TRUE
[20:45:51.021]        <control if="hasDormant" while="" timeout="0" info="">
[20:45:51.021]          // if-block "hasDormant"
[20:45:51.021]            // =>  FALSE
[20:45:51.021]          // skip if-block "hasDormant"
[20:45:51.021]        </control>
[20:45:51.021]        <control if="!hasDormant" while="" timeout="0" info="">
[20:45:51.021]          // if-block "!hasDormant"
[20:45:51.021]            // =>  TRUE
[20:45:51.021]          <block atomic="false" info="">
[20:45:51.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:45:51.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:51.023]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:45:51.025]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:45:51.025]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:45:51.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:51.029]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:45:51.032]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:45:51.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:45:51.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:51.037]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:45:51.037]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:45:51.037]          </block>
[20:45:51.037]          // end if-block "!hasDormant"
[20:45:51.037]        </control>
[20:45:51.037]        // end if-block "isSWJ"
[20:45:51.037]      </control>
[20:45:51.037]      <control if="!isSWJ" while="" timeout="0" info="">
[20:45:51.040]        // if-block "!isSWJ"
[20:45:51.040]          // =>  FALSE
[20:45:51.040]        // skip if-block "!isSWJ"
[20:45:51.040]      </control>
[20:45:51.040]      <block atomic="false" info="">
[20:45:51.040]        ReadDP(0x0);
[20:45:51.046]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:45:51.046]      </block>
[20:45:51.046]      // end if-block "protType == 2"
[20:45:51.046]    </control>
[20:45:51.046]  </sequence>
[20:45:51.046]  
[20:45:51.050]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:45:51.050]  
[20:45:51.050]  <debugvars>
[20:45:51.050]    // Pre-defined
[20:45:51.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:51.050]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:51.050]    __dp=0x00000000
[20:45:51.050]    __ap=0x00000000
[20:45:51.050]    __traceout=0x00000000      (Trace Disabled)
[20:45:51.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:51.050]    __FlashAddr=0x00000000
[20:45:51.050]    __FlashLen=0x00000000
[20:45:51.050]    __FlashArg=0x00000000
[20:45:51.052]    __FlashOp=0x00000000
[20:45:51.052]    __Result=0x00000000
[20:45:51.052]  </debugvars>
[20:45:51.052]  
[20:45:51.052]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:45:51.052]    <block atomic="false" info="">
[20:45:51.052]      __var SW_DP_ABORT       = 0x0;
[20:45:51.052]        // -> [SW_DP_ABORT <= 0x00000000]
[20:45:51.052]      __var DP_CTRL_STAT      = 0x4;
[20:45:51.052]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:45:51.052]      __var DP_SELECT         = 0x8;
[20:45:51.052]        // -> [DP_SELECT <= 0x00000008]
[20:45:51.053]      __var powered_down      = 0;
[20:45:51.053]        // -> [powered_down <= 0x00000000]
[20:45:51.053]      WriteDP(DP_SELECT, 0x00000000);
[20:45:51.054]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:45:51.054]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:45:51.055]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:45:51.055]        // -> [powered_down <= 0x00000001]
[20:45:51.055]    </block>
[20:45:51.055]    <control if="powered_down" while="" timeout="0" info="">
[20:45:51.055]      // if-block "powered_down"
[20:45:51.055]        // =>  TRUE
[20:45:51.057]      <block atomic="false" info="">
[20:45:51.057]        Message(0, "Debug/System power-up request sent");
[20:45:51.059]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:45:51.059]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:45:51.059]      </block>
[20:45:51.059]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:45:51.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:45:51.065]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:45:51.065]        // while-condition  =>  FALSE
[20:45:51.065]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:45:51.065]      </control>
[20:45:51.065]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:45:51.065]        // if-block "(__protocol & 0xFFFF) == 1"
[20:45:51.065]          // =>  FALSE
[20:45:51.065]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:45:51.065]      </control>
[20:45:51.065]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:45:51.067]        // if-block "(__protocol & 0xFFFF) == 2"
[20:45:51.067]          // =>  TRUE
[20:45:51.067]        <block atomic="false" info="">
[20:45:51.067]          Message(0, "executing SWD power up");
[20:45:51.068]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:45:51.072]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:45:51.072]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:45:51.075]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:45:51.075]        </block>
[20:45:51.075]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:45:51.075]      </control>
[20:45:51.075]      // end if-block "powered_down"
[20:45:51.075]    </control>
[20:45:51.075]    <block atomic="false" info="">
[20:45:51.075]      __var DEBUG_PORT_VAL    = 0;
[20:45:51.075]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:45:51.075]      __var ACCESS_POINT_VAL  = 0;
[20:45:51.077]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:45:51.077]      __ap = 1; 
[20:45:51.077]        // -> [__ap <= 0x00000001]
[20:45:51.077]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:45:51.080]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:45:51.080]      __ap = 4;
[20:45:51.080]        // -> [__ap <= 0x00000004]
[20:45:51.080]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:51.083]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:45:51.083]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:45:51.083]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:51.086]    </block>
[20:45:51.086]    <block atomic="false" info="">
[20:45:51.086]      __var nReset = 0x80;
[20:45:51.086]        // -> [nReset <= 0x00000080]
[20:45:51.086]      __var canReadPins = 0;
[20:45:51.086]        // -> [canReadPins <= 0x00000000]
[20:45:51.086]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:45:51.088]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:45:51.088]        // -> [canReadPins <= 0x00000001]
[20:45:51.088]    </block>
[20:45:51.088]    <control if="" while="1" timeout="200" info="">
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.088]      // while-condition  =>  TRUE
[20:45:51.088]      // while "1"  (timeout="200")
[20:45:51.091]      // while-condition  =>  TRUE
[20:45:51.091]      // while "1"  (timeout="200")
[20:45:51.091]      // while-condition  =>  TRUE
[20:45:51.091]      // while "1"  (timeout="200")
[20:45:51.091]      // while-condition  =>  TRUE
[20:45:51.091]      // while "1"  (timeout="200")
[20:45:51.091]      // while-condition  =>  TRUE
[20:45:51.091]      // while "1"  (timeout="200")
[20:45:51.091]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.092]      // while "1"  (timeout="200")
[20:45:51.092]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.093]      // while "1"  (timeout="200")
[20:45:51.093]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.095]      // while "1"  (timeout="200")
[20:45:51.095]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.096]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.096]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.096]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.096]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.096]      // while-condition  =>  TRUE
[20:45:51.096]      // while "1"  (timeout="200")
[20:45:51.098]      // while-condition  =>  TRUE
[20:45:51.098]      // while "1"  (timeout="200")
[20:45:51.098]      // while  =>  TIMEOUT
[20:45:51.098]      // end while "1"
[20:45:51.098]    </control>
[20:45:51.098]    <control if="canReadPins" while="" timeout="0" info="">
[20:45:51.098]      // if-block "canReadPins"
[20:45:51.098]        // =>  TRUE
[20:45:51.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:45:51.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:45:51.108]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:45:51.108]        // while-condition  =>  FALSE
[20:45:51.108]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:45:51.108]      </control>
[20:45:51.108]      // end if-block "canReadPins"
[20:45:51.108]    </control>
[20:45:51.108]    <control if="!canReadPins" while="" timeout="0" info="">
[20:45:51.108]      // if-block "!canReadPins"
[20:45:51.108]        // =>  FALSE
[20:45:51.108]      // skip if-block "!canReadPins"
[20:45:51.108]    </control>
[20:45:51.108]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:45:51.108]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:51.108]        // =>  TRUE
[20:45:51.108]      <block atomic="false" info="">
[20:45:51.108]        WriteAP(0x00, 0x190008);
[20:45:51.111]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:51.111]        WriteAP(0xF0, 0x01);
[20:45:51.117]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:51.117]      </block>
[20:45:51.117]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:51.117]    </control>
[20:45:51.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:45:51.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:51.117]        // =>  FALSE
[20:45:51.117]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:51.117]    </control>
[20:45:51.117]    <block atomic="false" info="">
[20:45:51.117]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:51.125]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:45:51.125]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:45:51.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:51.127]      __ap = 0; //lets make sure we reset the access point selection
[20:45:51.127]        // -> [__ap <= 0x00000000]
[20:45:51.127]    </block>
[20:45:51.127]  </sequence>
[20:45:51.127]  
[20:45:51.159]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:45:51.159]  
[20:45:51.159]  <debugvars>
[20:45:51.159]    // Pre-defined
[20:45:51.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:51.159]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:51.159]    __dp=0x00000000
[20:45:51.159]    __ap=0x00000000
[20:45:51.159]    __traceout=0x00000000      (Trace Disabled)
[20:45:51.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:51.159]    __FlashAddr=0x00000000
[20:45:51.159]    __FlashLen=0x00000000
[20:45:51.159]    __FlashArg=0x00000000
[20:45:51.159]    __FlashOp=0x00000000
[20:45:51.159]    __Result=0x00000000
[20:45:51.159]  </debugvars>
[20:45:51.159]  
[20:45:51.159]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:45:51.159]    <block atomic="false" info="">
[20:45:51.159]      __var deviceID = 0;
[20:45:51.159]        // -> [deviceID <= 0x00000000]
[20:45:51.159]      __var version = 0;
[20:45:51.159]        // -> [version <= 0x00000000]
[20:45:51.159]      __var partNum = 0;
[20:45:51.159]        // -> [partNum <= 0x00000000]
[20:45:51.159]      __var manuf = 0;
[20:45:51.159]        // -> [manuf <= 0x00000000]
[20:45:51.159]      __var isMSPM0G1X0X_G3X0X = 0;
[20:45:51.159]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:45:51.162]      __var isProduction = 0;
[20:45:51.162]        // -> [isProduction <= 0x00000000]
[20:45:51.162]      __var continueId = 0;
[20:45:51.162]        // -> [continueId <= 0x00000000]
[20:45:51.162]      deviceID =   Read32(0x41C40004);
[20:45:51.167]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:45:51.167]        // -> [deviceID <= 0x2BB8802F]
[20:45:51.167]      version = deviceID >> 28;
[20:45:51.167]        // -> [version <= 0x00000002]
[20:45:51.167]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:45:51.167]        // -> [partNum <= 0x0000BB88]
[20:45:51.167]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:45:51.167]        // -> [manuf <= 0x00000017]
[20:45:51.167]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:45:51.167]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:45:51.167]      isProduction = (version > 0);
[20:45:51.167]        // -> [isProduction <= 0x00000001]
[20:45:51.167]    </block>
[20:45:51.167]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:45:51.167]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:45:51.167]        // =>  FALSE
[20:45:51.169]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:45:51.169]    </control>
[20:45:51.169]    <control if="continueId == 4" while="" timeout="0" info="">
[20:45:51.169]      // if-block "continueId == 4"
[20:45:51.169]        // =>  FALSE
[20:45:51.169]      // skip if-block "continueId == 4"
[20:45:51.169]    </control>
[20:45:51.169]    <control if="!isProduction" while="" timeout="0" info="">
[20:45:51.169]      // if-block "!isProduction"
[20:45:51.169]        // =>  FALSE
[20:45:51.169]      // skip if-block "!isProduction"
[20:45:51.170]    </control>
[20:45:51.170]  </sequence>
[20:45:51.170]  
[20:46:04.202]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:46:04.202]  
[20:46:04.202]  <debugvars>
[20:46:04.202]    // Pre-defined
[20:46:04.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:04.202]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:04.202]    __dp=0x00000000
[20:46:04.202]    __ap=0x00000000
[20:46:04.202]    __traceout=0x00000000      (Trace Disabled)
[20:46:04.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:04.202]    __FlashAddr=0x00000000
[20:46:04.202]    __FlashLen=0x00000000
[20:46:04.202]    __FlashArg=0x00000000
[20:46:04.202]    __FlashOp=0x00000000
[20:46:04.206]    __Result=0x00000000
[20:46:04.206]  </debugvars>
[20:46:04.206]  
[20:46:04.206]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:46:04.206]    <block atomic="false" info="">
[20:46:04.206]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:46:04.206]        // -> [isSWJ <= 0x00000001]
[20:46:04.206]      __var hasDormant = __protocol & 0x00020000;
[20:46:04.206]        // -> [hasDormant <= 0x00000000]
[20:46:04.206]      __var protType   = __protocol & 0x0000FFFF;
[20:46:04.206]        // -> [protType <= 0x00000002]
[20:46:04.206]    </block>
[20:46:04.206]    <control if="protType == 1" while="" timeout="0" info="">
[20:46:04.206]      // if-block "protType == 1"
[20:46:04.206]        // =>  FALSE
[20:46:04.206]      // skip if-block "protType == 1"
[20:46:04.206]    </control>
[20:46:04.206]    <control if="protType == 2" while="" timeout="0" info="">
[20:46:04.206]      // if-block "protType == 2"
[20:46:04.206]        // =>  TRUE
[20:46:04.206]      <control if="isSWJ" while="" timeout="0" info="">
[20:46:04.206]        // if-block "isSWJ"
[20:46:04.206]          // =>  TRUE
[20:46:04.206]        <control if="hasDormant" while="" timeout="0" info="">
[20:46:04.206]          // if-block "hasDormant"
[20:46:04.206]            // =>  FALSE
[20:46:04.206]          // skip if-block "hasDormant"
[20:46:04.206]        </control>
[20:46:04.206]        <control if="!hasDormant" while="" timeout="0" info="">
[20:46:04.206]          // if-block "!hasDormant"
[20:46:04.206]            // =>  TRUE
[20:46:04.206]          <block atomic="false" info="">
[20:46:04.206]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:46:04.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:04.210]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:46:04.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:46:04.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:46:04.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:04.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:46:04.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:46:04.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:46:04.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:04.218]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:46:04.222]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:46:04.222]          </block>
[20:46:04.222]          // end if-block "!hasDormant"
[20:46:04.222]        </control>
[20:46:04.222]        // end if-block "isSWJ"
[20:46:04.222]      </control>
[20:46:04.222]      <control if="!isSWJ" while="" timeout="0" info="">
[20:46:04.222]        // if-block "!isSWJ"
[20:46:04.222]          // =>  FALSE
[20:46:04.222]        // skip if-block "!isSWJ"
[20:46:04.222]      </control>
[20:46:04.222]      <block atomic="false" info="">
[20:46:04.222]        ReadDP(0x0);
[20:46:04.222]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:46:04.222]      </block>
[20:46:04.222]      // end if-block "protType == 2"
[20:46:04.225]    </control>
[20:46:04.225]  </sequence>
[20:46:04.225]  
[20:46:04.236]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:46:04.236]  
[20:46:04.236]  <debugvars>
[20:46:04.236]    // Pre-defined
[20:46:04.236]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:04.236]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:04.236]    __dp=0x00000000
[20:46:04.236]    __ap=0x00000000
[20:46:04.236]    __traceout=0x00000000      (Trace Disabled)
[20:46:04.236]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:04.236]    __FlashAddr=0x00000000
[20:46:04.236]    __FlashLen=0x00000000
[20:46:04.236]    __FlashArg=0x00000000
[20:46:04.236]    __FlashOp=0x00000000
[20:46:04.236]    __Result=0x00000000
[20:46:04.236]  </debugvars>
[20:46:04.238]  
[20:46:04.238]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:46:04.238]    <block atomic="false" info="">
[20:46:04.238]      __var SW_DP_ABORT       = 0x0;
[20:46:04.238]        // -> [SW_DP_ABORT <= 0x00000000]
[20:46:04.238]      __var DP_CTRL_STAT      = 0x4;
[20:46:04.238]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:46:04.238]      __var DP_SELECT         = 0x8;
[20:46:04.238]        // -> [DP_SELECT <= 0x00000008]
[20:46:04.238]      __var powered_down      = 0;
[20:46:04.238]        // -> [powered_down <= 0x00000000]
[20:46:04.238]      WriteDP(DP_SELECT, 0x00000000);
[20:46:04.238]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:46:04.238]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:46:04.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:46:04.242]        // -> [powered_down <= 0x00000001]
[20:46:04.242]    </block>
[20:46:04.242]    <control if="powered_down" while="" timeout="0" info="">
[20:46:04.242]      // if-block "powered_down"
[20:46:04.242]        // =>  TRUE
[20:46:04.242]      <block atomic="false" info="">
[20:46:04.242]        Message(0, "Debug/System power-up request sent");
[20:46:04.246]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:46:04.254]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:46:04.254]      </block>
[20:46:04.254]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:46:04.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:46:04.256]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:46:04.256]        // while-condition  =>  FALSE
[20:46:04.256]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:46:04.256]      </control>
[20:46:04.256]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:46:04.256]        // if-block "(__protocol & 0xFFFF) == 1"
[20:46:04.256]          // =>  FALSE
[20:46:04.256]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:46:04.256]      </control>
[20:46:04.256]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:46:04.256]        // if-block "(__protocol & 0xFFFF) == 2"
[20:46:04.256]          // =>  TRUE
[20:46:04.257]        <block atomic="false" info="">
[20:46:04.257]          Message(0, "executing SWD power up");
[20:46:04.257]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:46:04.257]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:46:04.257]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:46:04.263]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:46:04.263]        </block>
[20:46:04.263]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:46:04.263]      </control>
[20:46:04.263]      // end if-block "powered_down"
[20:46:04.263]    </control>
[20:46:04.263]    <block atomic="false" info="">
[20:46:04.263]      __var DEBUG_PORT_VAL    = 0;
[20:46:04.263]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:46:04.263]      __var ACCESS_POINT_VAL  = 0;
[20:46:04.263]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:46:04.263]      __ap = 1; 
[20:46:04.263]        // -> [__ap <= 0x00000001]
[20:46:04.263]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:46:04.274]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:46:04.274]      __ap = 4;
[20:46:04.274]        // -> [__ap <= 0x00000004]
[20:46:04.274]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:04.278]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[20:46:04.278]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[20:46:04.278]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:04.278]    </block>
[20:46:04.282]    <block atomic="false" info="">
[20:46:04.282]      __var nReset = 0x80;
[20:46:04.282]        // -> [nReset <= 0x00000080]
[20:46:04.282]      __var canReadPins = 0;
[20:46:04.282]        // -> [canReadPins <= 0x00000000]
[20:46:04.282]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:46:04.285]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:46:04.285]        // -> [canReadPins <= 0x00000001]
[20:46:04.285]    </block>
[20:46:04.285]    <control if="" while="1" timeout="200" info="">
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.289]      // while "1"  (timeout="200")
[20:46:04.289]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.290]      // while "1"  (timeout="200")
[20:46:04.290]      // while-condition  =>  TRUE
[20:46:04.291]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.292]      // while-condition  =>  TRUE
[20:46:04.292]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.293]      // while-condition  =>  TRUE
[20:46:04.293]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.294]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.294]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.294]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.294]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.294]      // while "1"  (timeout="200")
[20:46:04.294]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.295]      // while-condition  =>  TRUE
[20:46:04.295]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.297]      // while-condition  =>  TRUE
[20:46:04.297]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.300]      // while-condition  =>  TRUE
[20:46:04.300]      // while "1"  (timeout="200")
[20:46:04.302]      // while-condition  =>  TRUE
[20:46:04.302]      // while "1"  (timeout="200")
[20:46:04.302]      // while  =>  TIMEOUT
[20:46:04.302]      // end while "1"
[20:46:04.302]    </control>
[20:46:04.302]    <control if="canReadPins" while="" timeout="0" info="">
[20:46:04.302]      // if-block "canReadPins"
[20:46:04.302]        // =>  TRUE
[20:46:04.302]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:46:04.302]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:46:04.306]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:46:04.306]        // while-condition  =>  FALSE
[20:46:04.306]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:46:04.306]      </control>
[20:46:04.306]      // end if-block "canReadPins"
[20:46:04.306]    </control>
[20:46:04.306]    <control if="!canReadPins" while="" timeout="0" info="">
[20:46:04.306]      // if-block "!canReadPins"
[20:46:04.306]        // =>  FALSE
[20:46:04.306]      // skip if-block "!canReadPins"
[20:46:04.306]    </control>
[20:46:04.306]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:46:04.306]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:04.306]        // =>  TRUE
[20:46:04.306]      <block atomic="false" info="">
[20:46:04.306]        WriteAP(0x00, 0x190008);
[20:46:04.310]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:04.310]        WriteAP(0xF0, 0x01);
[20:46:04.326]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:04.326]      </block>
[20:46:04.326]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:04.327]    </control>
[20:46:04.327]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:46:04.327]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:04.327]        // =>  FALSE
[20:46:04.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:04.327]    </control>
[20:46:04.327]    <block atomic="false" info="">
[20:46:04.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:04.329]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[20:46:04.331]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[20:46:04.331]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:04.331]      __ap = 0; //lets make sure we reset the access point selection
[20:46:04.331]        // -> [__ap <= 0x00000000]
[20:46:04.331]    </block>
[20:46:04.331]  </sequence>
[20:46:04.331]  
[20:46:04.364]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:46:04.364]  
[20:46:04.364]  <debugvars>
[20:46:04.364]    // Pre-defined
[20:46:04.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:04.364]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:04.364]    __dp=0x00000000
[20:46:04.364]    __ap=0x00000000
[20:46:04.365]    __traceout=0x00000000      (Trace Disabled)
[20:46:04.365]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:04.365]    __FlashAddr=0x00000000
[20:46:04.365]    __FlashLen=0x00000000
[20:46:04.365]    __FlashArg=0x00000000
[20:46:04.365]    __FlashOp=0x00000000
[20:46:04.366]    __Result=0x00000000
[20:46:04.366]  </debugvars>
[20:46:04.366]  
[20:46:04.366]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:46:04.366]    <block atomic="false" info="">
[20:46:04.366]      __var deviceID = 0;
[20:46:04.366]        // -> [deviceID <= 0x00000000]
[20:46:04.367]      __var version = 0;
[20:46:04.367]        // -> [version <= 0x00000000]
[20:46:04.367]      __var partNum = 0;
[20:46:04.367]        // -> [partNum <= 0x00000000]
[20:46:04.367]      __var manuf = 0;
[20:46:04.367]        // -> [manuf <= 0x00000000]
[20:46:04.367]      __var isMSPM0G1X0X_G3X0X = 0;
[20:46:04.367]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:46:04.367]      __var isProduction = 0;
[20:46:04.367]        // -> [isProduction <= 0x00000000]
[20:46:04.367]      __var continueId = 0;
[20:46:04.367]        // -> [continueId <= 0x00000000]
[20:46:04.367]      deviceID =   Read32(0x41C40004);
[20:46:04.387]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:46:04.388]        // -> [deviceID <= 0x2BB8802F]
[20:46:04.388]      version = deviceID >> 28;
[20:46:04.388]        // -> [version <= 0x00000002]
[20:46:04.388]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:46:04.388]        // -> [partNum <= 0x0000BB88]
[20:46:04.388]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:46:04.388]        // -> [manuf <= 0x00000017]
[20:46:04.388]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:46:04.388]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:46:04.388]      isProduction = (version > 0);
[20:46:04.388]        // -> [isProduction <= 0x00000001]
[20:46:04.388]    </block>
[20:46:04.388]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:46:04.388]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:46:04.388]        // =>  FALSE
[20:46:04.388]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:46:04.388]    </control>
[20:46:04.388]    <control if="continueId == 4" while="" timeout="0" info="">
[20:46:04.388]      // if-block "continueId == 4"
[20:46:04.388]        // =>  FALSE
[20:46:04.390]      // skip if-block "continueId == 4"
[20:46:04.390]    </control>
[20:46:04.390]    <control if="!isProduction" while="" timeout="0" info="">
[20:46:04.390]      // if-block "!isProduction"
[20:46:04.390]        // =>  FALSE
[20:46:04.390]      // skip if-block "!isProduction"
[20:46:04.390]    </control>
[20:46:04.390]  </sequence>
[20:46:04.390]  
[21:02:00.632]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:02:00.632]  
[21:02:00.643]  <debugvars>
[21:02:00.643]    // Pre-defined
[21:02:00.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:00.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:00.643]    __dp=0x00000000
[21:02:00.643]    __ap=0x00000000
[21:02:00.643]    __traceout=0x00000000      (Trace Disabled)
[21:02:00.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:00.644]    __FlashAddr=0x00000000
[21:02:00.644]    __FlashLen=0x00000000
[21:02:00.645]    __FlashArg=0x00000000
[21:02:00.645]    __FlashOp=0x00000000
[21:02:00.645]    __Result=0x00000000
[21:02:00.645]  </debugvars>
[21:02:00.645]  
[21:02:00.645]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:02:00.645]    <block atomic="false" info="">
[21:02:00.645]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:02:00.645]        // -> [isSWJ <= 0x00000001]
[21:02:00.645]      __var hasDormant = __protocol & 0x00020000;
[21:02:00.645]        // -> [hasDormant <= 0x00000000]
[21:02:00.645]      __var protType   = __protocol & 0x0000FFFF;
[21:02:00.645]        // -> [protType <= 0x00000002]
[21:02:00.645]    </block>
[21:02:00.645]    <control if="protType == 1" while="" timeout="0" info="">
[21:02:00.645]      // if-block "protType == 1"
[21:02:00.645]        // =>  FALSE
[21:02:00.645]      // skip if-block "protType == 1"
[21:02:00.645]    </control>
[21:02:00.645]    <control if="protType == 2" while="" timeout="0" info="">
[21:02:00.645]      // if-block "protType == 2"
[21:02:00.647]        // =>  TRUE
[21:02:00.647]      <control if="isSWJ" while="" timeout="0" info="">
[21:02:00.647]        // if-block "isSWJ"
[21:02:00.647]          // =>  TRUE
[21:02:00.647]        <control if="hasDormant" while="" timeout="0" info="">
[21:02:00.647]          // if-block "hasDormant"
[21:02:00.647]            // =>  FALSE
[21:02:00.647]          // skip if-block "hasDormant"
[21:02:00.647]        </control>
[21:02:00.647]        <control if="!hasDormant" while="" timeout="0" info="">
[21:02:00.647]          // if-block "!hasDormant"
[21:02:00.647]            // =>  TRUE
[21:02:00.647]          <block atomic="false" info="">
[21:02:00.647]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:02:00.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:00.648]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:02:00.651]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:02:00.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:02:00.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:00.653]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:02:00.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:02:00.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:02:00.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:00.653]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:02:00.661]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:02:00.661]          </block>
[21:02:00.661]          // end if-block "!hasDormant"
[21:02:00.662]        </control>
[21:02:00.662]        // end if-block "isSWJ"
[21:02:00.662]      </control>
[21:02:00.662]      <control if="!isSWJ" while="" timeout="0" info="">
[21:02:00.662]        // if-block "!isSWJ"
[21:02:00.662]          // =>  FALSE
[21:02:00.662]        // skip if-block "!isSWJ"
[21:02:00.662]      </control>
[21:02:00.662]      <block atomic="false" info="">
[21:02:00.662]        ReadDP(0x0);
[21:02:00.670]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:02:00.670]      </block>
[21:02:00.670]      // end if-block "protType == 2"
[21:02:00.671]    </control>
[21:02:00.671]  </sequence>
[21:02:00.671]  
[21:02:00.674]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:02:00.674]  
[21:02:00.674]  <debugvars>
[21:02:00.674]    // Pre-defined
[21:02:00.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:00.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:00.674]    __dp=0x00000000
[21:02:00.674]    __ap=0x00000000
[21:02:00.674]    __traceout=0x00000000      (Trace Disabled)
[21:02:00.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:00.674]    __FlashAddr=0x00000000
[21:02:00.674]    __FlashLen=0x00000000
[21:02:00.674]    __FlashArg=0x00000000
[21:02:00.674]    __FlashOp=0x00000000
[21:02:00.674]    __Result=0x00000000
[21:02:00.674]  </debugvars>
[21:02:00.674]  
[21:02:00.674]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:02:00.674]    <block atomic="false" info="">
[21:02:00.674]      __var SW_DP_ABORT       = 0x0;
[21:02:00.674]        // -> [SW_DP_ABORT <= 0x00000000]
[21:02:00.674]      __var DP_CTRL_STAT      = 0x4;
[21:02:00.674]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:02:00.674]      __var DP_SELECT         = 0x8;
[21:02:00.674]        // -> [DP_SELECT <= 0x00000008]
[21:02:00.676]      __var powered_down      = 0;
[21:02:00.676]        // -> [powered_down <= 0x00000000]
[21:02:00.676]      WriteDP(DP_SELECT, 0x00000000);
[21:02:00.680]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:02:00.680]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:02:00.682]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:02:00.682]        // -> [powered_down <= 0x00000001]
[21:02:00.682]    </block>
[21:02:00.682]    <control if="powered_down" while="" timeout="0" info="">
[21:02:00.682]      // if-block "powered_down"
[21:02:00.682]        // =>  TRUE
[21:02:00.682]      <block atomic="false" info="">
[21:02:00.682]        Message(0, "Debug/System power-up request sent");
[21:02:00.682]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:02:00.686]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:02:00.686]      </block>
[21:02:00.686]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:02:00.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:02:00.686]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:02:00.686]        // while-condition  =>  FALSE
[21:02:00.686]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:02:00.686]      </control>
[21:02:00.686]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:02:00.686]        // if-block "(__protocol & 0xFFFF) == 1"
[21:02:00.690]          // =>  FALSE
[21:02:00.690]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:02:00.690]      </control>
[21:02:00.690]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:02:00.690]        // if-block "(__protocol & 0xFFFF) == 2"
[21:02:00.690]          // =>  TRUE
[21:02:00.690]        <block atomic="false" info="">
[21:02:00.690]          Message(0, "executing SWD power up");
[21:02:00.690]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:02:00.690]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:02:00.690]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:02:00.695]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:02:00.696]        </block>
[21:02:00.696]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:02:00.696]      </control>
[21:02:00.696]      // end if-block "powered_down"
[21:02:00.696]    </control>
[21:02:00.696]    <block atomic="false" info="">
[21:02:00.696]      __var DEBUG_PORT_VAL    = 0;
[21:02:00.696]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:02:00.696]      __var ACCESS_POINT_VAL  = 0;
[21:02:00.696]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:02:00.696]      __ap = 1; 
[21:02:00.696]        // -> [__ap <= 0x00000001]
[21:02:00.698]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:02:00.700]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:02:00.700]      __ap = 4;
[21:02:00.700]        // -> [__ap <= 0x00000004]
[21:02:00.700]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:00.708]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:02:00.708]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:02:00.710]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:00.711]    </block>
[21:02:00.711]    <block atomic="false" info="">
[21:02:00.711]      __var nReset = 0x80;
[21:02:00.711]        // -> [nReset <= 0x00000080]
[21:02:00.711]      __var canReadPins = 0;
[21:02:00.711]        // -> [canReadPins <= 0x00000000]
[21:02:00.711]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:02:00.713]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:02:00.713]        // -> [canReadPins <= 0x00000001]
[21:02:00.713]    </block>
[21:02:00.713]    <control if="" while="1" timeout="200" info="">
[21:02:00.713]      // while "1"  (timeout="200")
[21:02:00.713]      // while-condition  =>  TRUE
[21:02:00.713]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.715]      // while-condition  =>  TRUE
[21:02:00.715]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.717]      // while-condition  =>  TRUE
[21:02:00.717]      // while "1"  (timeout="200")
[21:02:00.718]      // while-condition  =>  TRUE
[21:02:00.718]      // while "1"  (timeout="200")
[21:02:00.718]      // while-condition  =>  TRUE
[21:02:00.718]      // while "1"  (timeout="200")
[21:02:00.718]      // while-condition  =>  TRUE
[21:02:00.718]      // while "1"  (timeout="200")
[21:02:00.718]      // while-condition  =>  TRUE
[21:02:00.718]      // while "1"  (timeout="200")
[21:02:00.718]      // while-condition  =>  TRUE
[21:02:00.718]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.720]      // while "1"  (timeout="200")
[21:02:00.720]      // while-condition  =>  TRUE
[21:02:00.722]      // while "1"  (timeout="200")
[21:02:00.722]      // while-condition  =>  TRUE
[21:02:00.722]      // while "1"  (timeout="200")
[21:02:00.722]      // while-condition  =>  TRUE
[21:02:00.722]      // while "1"  (timeout="200")
[21:02:00.722]      // while-condition  =>  TRUE
[21:02:00.722]      // while "1"  (timeout="200")
[21:02:00.722]      // while-condition  =>  TRUE
[21:02:00.722]      // while "1"  (timeout="200")
[21:02:00.722]      // while-condition  =>  TRUE
[21:02:00.723]      // while "1"  (timeout="200")
[21:02:00.723]      // while  =>  TIMEOUT
[21:02:00.723]      // end while "1"
[21:02:00.723]    </control>
[21:02:00.723]    <control if="canReadPins" while="" timeout="0" info="">
[21:02:00.723]      // if-block "canReadPins"
[21:02:00.723]        // =>  TRUE
[21:02:00.723]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:02:00.723]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:02:00.724]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:02:00.724]        // while-condition  =>  FALSE
[21:02:00.725]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:02:00.725]      </control>
[21:02:00.725]      // end if-block "canReadPins"
[21:02:00.725]    </control>
[21:02:00.725]    <control if="!canReadPins" while="" timeout="0" info="">
[21:02:00.725]      // if-block "!canReadPins"
[21:02:00.725]        // =>  FALSE
[21:02:00.725]      // skip if-block "!canReadPins"
[21:02:00.725]    </control>
[21:02:00.725]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:02:00.725]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:00.725]        // =>  TRUE
[21:02:00.725]      <block atomic="false" info="">
[21:02:00.725]        WriteAP(0x00, 0x190008);
[21:02:00.728]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:00.728]        WriteAP(0xF0, 0x01);
[21:02:00.732]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:00.732]      </block>
[21:02:00.732]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:00.732]    </control>
[21:02:00.732]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:02:00.732]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:00.732]        // =>  FALSE
[21:02:00.732]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:00.732]    </control>
[21:02:00.736]    <block atomic="false" info="">
[21:02:00.736]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:00.737]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:02:00.737]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:02:00.737]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:00.740]      __ap = 0; //lets make sure we reset the access point selection
[21:02:00.740]        // -> [__ap <= 0x00000000]
[21:02:00.740]    </block>
[21:02:00.740]  </sequence>
[21:02:00.740]  
[21:02:00.771]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:02:00.771]  
[21:02:00.771]  <debugvars>
[21:02:00.771]    // Pre-defined
[21:02:00.771]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:00.771]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:00.771]    __dp=0x00000000
[21:02:00.771]    __ap=0x00000000
[21:02:00.771]    __traceout=0x00000000      (Trace Disabled)
[21:02:00.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:00.772]    __FlashAddr=0x00000000
[21:02:00.772]    __FlashLen=0x00000000
[21:02:00.772]    __FlashArg=0x00000000
[21:02:00.772]    __FlashOp=0x00000000
[21:02:00.772]    __Result=0x00000000
[21:02:00.772]  </debugvars>
[21:02:00.772]  
[21:02:00.773]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:02:00.773]    <block atomic="false" info="">
[21:02:00.773]      __var deviceID = 0;
[21:02:00.773]        // -> [deviceID <= 0x00000000]
[21:02:00.773]      __var version = 0;
[21:02:00.773]        // -> [version <= 0x00000000]
[21:02:00.773]      __var partNum = 0;
[21:02:00.773]        // -> [partNum <= 0x00000000]
[21:02:00.773]      __var manuf = 0;
[21:02:00.773]        // -> [manuf <= 0x00000000]
[21:02:00.774]      __var isMSPM0G1X0X_G3X0X = 0;
[21:02:00.774]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:02:00.774]      __var isProduction = 0;
[21:02:00.774]        // -> [isProduction <= 0x00000000]
[21:02:00.774]      __var continueId = 0;
[21:02:00.774]        // -> [continueId <= 0x00000000]
[21:02:00.774]      deviceID =   Read32(0x41C40004);
[21:02:00.780]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:02:00.780]        // -> [deviceID <= 0x2BB8802F]
[21:02:00.780]      version = deviceID >> 28;
[21:02:00.780]        // -> [version <= 0x00000002]
[21:02:00.780]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:02:00.780]        // -> [partNum <= 0x0000BB88]
[21:02:00.780]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:02:00.781]        // -> [manuf <= 0x00000017]
[21:02:00.781]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:02:00.781]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:02:00.781]      isProduction = (version > 0);
[21:02:00.781]        // -> [isProduction <= 0x00000001]
[21:02:00.781]    </block>
[21:02:00.781]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:02:00.781]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:02:00.781]        // =>  FALSE
[21:02:00.781]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:02:00.782]    </control>
[21:02:00.782]    <control if="continueId == 4" while="" timeout="0" info="">
[21:02:00.782]      // if-block "continueId == 4"
[21:02:00.782]        // =>  FALSE
[21:02:00.782]      // skip if-block "continueId == 4"
[21:02:00.782]    </control>
[21:02:00.782]    <control if="!isProduction" while="" timeout="0" info="">
[21:02:00.782]      // if-block "!isProduction"
[21:02:00.782]        // =>  FALSE
[21:02:00.782]      // skip if-block "!isProduction"
[21:02:00.782]    </control>
[21:02:00.782]  </sequence>
[21:02:00.782]  
[21:02:33.291]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:02:33.291]  
[21:02:33.301]  <debugvars>
[21:02:33.301]    // Pre-defined
[21:02:33.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:33.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:33.301]    __dp=0x00000000
[21:02:33.301]    __ap=0x00000000
[21:02:33.301]    __traceout=0x00000000      (Trace Disabled)
[21:02:33.301]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:33.301]    __FlashAddr=0x00000000
[21:02:33.301]    __FlashLen=0x00000000
[21:02:33.301]    __FlashArg=0x00000000
[21:02:33.301]    __FlashOp=0x00000000
[21:02:33.301]    __Result=0x00000000
[21:02:33.301]  </debugvars>
[21:02:33.301]  
[21:02:33.301]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:02:33.301]    <block atomic="false" info="">
[21:02:33.301]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:02:33.303]        // -> [isSWJ <= 0x00000001]
[21:02:33.303]      __var hasDormant = __protocol & 0x00020000;
[21:02:33.303]        // -> [hasDormant <= 0x00000000]
[21:02:33.303]      __var protType   = __protocol & 0x0000FFFF;
[21:02:33.303]        // -> [protType <= 0x00000002]
[21:02:33.303]    </block>
[21:02:33.303]    <control if="protType == 1" while="" timeout="0" info="">
[21:02:33.303]      // if-block "protType == 1"
[21:02:33.303]        // =>  FALSE
[21:02:33.303]      // skip if-block "protType == 1"
[21:02:33.303]    </control>
[21:02:33.303]    <control if="protType == 2" while="" timeout="0" info="">
[21:02:33.303]      // if-block "protType == 2"
[21:02:33.303]        // =>  TRUE
[21:02:33.303]      <control if="isSWJ" while="" timeout="0" info="">
[21:02:33.303]        // if-block "isSWJ"
[21:02:33.303]          // =>  TRUE
[21:02:33.303]        <control if="hasDormant" while="" timeout="0" info="">
[21:02:33.303]          // if-block "hasDormant"
[21:02:33.303]            // =>  FALSE
[21:02:33.305]          // skip if-block "hasDormant"
[21:02:33.305]        </control>
[21:02:33.305]        <control if="!hasDormant" while="" timeout="0" info="">
[21:02:33.305]          // if-block "!hasDormant"
[21:02:33.305]            // =>  TRUE
[21:02:33.305]          <block atomic="false" info="">
[21:02:33.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:02:33.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:33.305]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:02:33.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:02:33.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:02:33.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:33.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:02:33.311]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:02:33.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:02:33.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:33.313]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:02:33.313]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:02:33.313]          </block>
[21:02:33.318]          // end if-block "!hasDormant"
[21:02:33.318]        </control>
[21:02:33.318]        // end if-block "isSWJ"
[21:02:33.318]      </control>
[21:02:33.318]      <control if="!isSWJ" while="" timeout="0" info="">
[21:02:33.318]        // if-block "!isSWJ"
[21:02:33.318]          // =>  FALSE
[21:02:33.318]        // skip if-block "!isSWJ"
[21:02:33.318]      </control>
[21:02:33.318]      <block atomic="false" info="">
[21:02:33.318]        ReadDP(0x0);
[21:02:33.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:02:33.318]      </block>
[21:02:33.318]      // end if-block "protType == 2"
[21:02:33.321]    </control>
[21:02:33.321]  </sequence>
[21:02:33.321]  
[21:02:33.322]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:02:33.322]  
[21:02:33.322]  <debugvars>
[21:02:33.322]    // Pre-defined
[21:02:33.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:33.322]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:33.322]    __dp=0x00000000
[21:02:33.326]    __ap=0x00000000
[21:02:33.326]    __traceout=0x00000000      (Trace Disabled)
[21:02:33.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:33.326]    __FlashAddr=0x00000000
[21:02:33.326]    __FlashLen=0x00000000
[21:02:33.326]    __FlashArg=0x00000000
[21:02:33.326]    __FlashOp=0x00000000
[21:02:33.326]    __Result=0x00000000
[21:02:33.326]  </debugvars>
[21:02:33.326]  
[21:02:33.326]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:02:33.326]    <block atomic="false" info="">
[21:02:33.326]      __var SW_DP_ABORT       = 0x0;
[21:02:33.326]        // -> [SW_DP_ABORT <= 0x00000000]
[21:02:33.326]      __var DP_CTRL_STAT      = 0x4;
[21:02:33.326]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:02:33.326]      __var DP_SELECT         = 0x8;
[21:02:33.326]        // -> [DP_SELECT <= 0x00000008]
[21:02:33.326]      __var powered_down      = 0;
[21:02:33.326]        // -> [powered_down <= 0x00000000]
[21:02:33.326]      WriteDP(DP_SELECT, 0x00000000);
[21:02:33.330]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:02:33.330]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:02:33.331]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:02:33.331]        // -> [powered_down <= 0x00000001]
[21:02:33.331]    </block>
[21:02:33.331]    <control if="powered_down" while="" timeout="0" info="">
[21:02:33.331]      // if-block "powered_down"
[21:02:33.331]        // =>  TRUE
[21:02:33.331]      <block atomic="false" info="">
[21:02:33.331]        Message(0, "Debug/System power-up request sent");
[21:02:33.335]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:02:33.341]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:02:33.341]      </block>
[21:02:33.341]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:02:33.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:02:33.342]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:02:33.342]        // while-condition  =>  FALSE
[21:02:33.342]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:02:33.342]      </control>
[21:02:33.342]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:02:33.342]        // if-block "(__protocol & 0xFFFF) == 1"
[21:02:33.342]          // =>  FALSE
[21:02:33.342]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:02:33.342]      </control>
[21:02:33.342]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:02:33.342]        // if-block "(__protocol & 0xFFFF) == 2"
[21:02:33.342]          // =>  TRUE
[21:02:33.342]        <block atomic="false" info="">
[21:02:33.342]          Message(0, "executing SWD power up");
[21:02:33.346]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:02:33.346]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:02:33.346]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:02:33.351]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:02:33.351]        </block>
[21:02:33.351]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:02:33.351]      </control>
[21:02:33.351]      // end if-block "powered_down"
[21:02:33.351]    </control>
[21:02:33.351]    <block atomic="false" info="">
[21:02:33.351]      __var DEBUG_PORT_VAL    = 0;
[21:02:33.351]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:02:33.351]      __var ACCESS_POINT_VAL  = 0;
[21:02:33.351]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:02:33.351]      __ap = 1; 
[21:02:33.351]        // -> [__ap <= 0x00000001]
[21:02:33.351]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:02:33.365]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:02:33.365]      __ap = 4;
[21:02:33.365]        // -> [__ap <= 0x00000004]
[21:02:33.365]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:33.371]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:02:33.371]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:02:33.371]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:33.371]    </block>
[21:02:33.371]    <block atomic="false" info="">
[21:02:33.371]      __var nReset = 0x80;
[21:02:33.371]        // -> [nReset <= 0x00000080]
[21:02:33.371]      __var canReadPins = 0;
[21:02:33.371]        // -> [canReadPins <= 0x00000000]
[21:02:33.371]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:02:33.378]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:02:33.378]        // -> [canReadPins <= 0x00000001]
[21:02:33.379]    </block>
[21:02:33.379]    <control if="" while="1" timeout="200" info="">
[21:02:33.379]      // while "1"  (timeout="200")
[21:02:33.379]      // while-condition  =>  TRUE
[21:02:33.379]      // while "1"  (timeout="200")
[21:02:33.379]      // while-condition  =>  TRUE
[21:02:33.379]      // while "1"  (timeout="200")
[21:02:33.379]      // while-condition  =>  TRUE
[21:02:33.379]      // while "1"  (timeout="200")
[21:02:33.379]      // while-condition  =>  TRUE
[21:02:33.379]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.381]      // while-condition  =>  TRUE
[21:02:33.381]      // while "1"  (timeout="200")
[21:02:33.383]      // while-condition  =>  TRUE
[21:02:33.383]      // while "1"  (timeout="200")
[21:02:33.383]      // while-condition  =>  TRUE
[21:02:33.383]      // while "1"  (timeout="200")
[21:02:33.383]      // while-condition  =>  TRUE
[21:02:33.383]      // while "1"  (timeout="200")
[21:02:33.383]      // while-condition  =>  TRUE
[21:02:33.383]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.384]      // while "1"  (timeout="200")
[21:02:33.384]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.387]      // while-condition  =>  TRUE
[21:02:33.387]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.391]      // while "1"  (timeout="200")
[21:02:33.391]      // while-condition  =>  TRUE
[21:02:33.395]      // while "1"  (timeout="200")
[21:02:33.395]      // while  =>  TIMEOUT
[21:02:33.395]      // end while "1"
[21:02:33.395]    </control>
[21:02:33.395]    <control if="canReadPins" while="" timeout="0" info="">
[21:02:33.395]      // if-block "canReadPins"
[21:02:33.395]        // =>  TRUE
[21:02:33.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:02:33.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:02:33.399]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:02:33.399]        // while-condition  =>  FALSE
[21:02:33.399]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:02:33.399]      </control>
[21:02:33.399]      // end if-block "canReadPins"
[21:02:33.401]    </control>
[21:02:33.401]    <control if="!canReadPins" while="" timeout="0" info="">
[21:02:33.401]      // if-block "!canReadPins"
[21:02:33.401]        // =>  FALSE
[21:02:33.401]      // skip if-block "!canReadPins"
[21:02:33.401]    </control>
[21:02:33.401]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:02:33.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:33.401]        // =>  TRUE
[21:02:33.401]      <block atomic="false" info="">
[21:02:33.401]        WriteAP(0x00, 0x190008);
[21:02:33.411]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:33.411]        WriteAP(0xF0, 0x01);
[21:02:33.423]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:33.423]      </block>
[21:02:33.423]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:33.423]    </control>
[21:02:33.423]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:02:33.423]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:33.423]        // =>  FALSE
[21:02:33.423]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:33.423]    </control>
[21:02:33.423]    <block atomic="false" info="">
[21:02:33.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:33.437]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:02:33.437]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:02:33.437]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:33.439]      __ap = 0; //lets make sure we reset the access point selection
[21:02:33.439]        // -> [__ap <= 0x00000000]
[21:02:33.439]    </block>
[21:02:33.439]  </sequence>
[21:02:33.439]  
[21:02:33.475]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:02:33.475]  
[21:02:33.475]  <debugvars>
[21:02:33.475]    // Pre-defined
[21:02:33.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:33.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:33.475]    __dp=0x00000000
[21:02:33.475]    __ap=0x00000000
[21:02:33.475]    __traceout=0x00000000      (Trace Disabled)
[21:02:33.475]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:33.475]    __FlashAddr=0x00000000
[21:02:33.475]    __FlashLen=0x00000000
[21:02:33.475]    __FlashArg=0x00000000
[21:02:33.475]    __FlashOp=0x00000000
[21:02:33.475]    __Result=0x00000000
[21:02:33.475]  </debugvars>
[21:02:33.475]  
[21:02:33.475]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:02:33.475]    <block atomic="false" info="">
[21:02:33.475]      __var deviceID = 0;
[21:02:33.475]        // -> [deviceID <= 0x00000000]
[21:02:33.475]      __var version = 0;
[21:02:33.475]        // -> [version <= 0x00000000]
[21:02:33.475]      __var partNum = 0;
[21:02:33.475]        // -> [partNum <= 0x00000000]
[21:02:33.475]      __var manuf = 0;
[21:02:33.475]        // -> [manuf <= 0x00000000]
[21:02:33.475]      __var isMSPM0G1X0X_G3X0X = 0;
[21:02:33.475]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:02:33.475]      __var isProduction = 0;
[21:02:33.479]        // -> [isProduction <= 0x00000000]
[21:02:33.479]      __var continueId = 0;
[21:02:33.479]        // -> [continueId <= 0x00000000]
[21:02:33.479]      deviceID =   Read32(0x41C40004);
[21:02:33.483]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:02:33.483]        // -> [deviceID <= 0x2BB8802F]
[21:02:33.483]      version = deviceID >> 28;
[21:02:33.483]        // -> [version <= 0x00000002]
[21:02:33.483]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:02:33.483]        // -> [partNum <= 0x0000BB88]
[21:02:33.483]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:02:33.483]        // -> [manuf <= 0x00000017]
[21:02:33.483]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:02:33.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:02:33.483]      isProduction = (version > 0);
[21:02:33.483]        // -> [isProduction <= 0x00000001]
[21:02:33.483]    </block>
[21:02:33.483]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:02:33.483]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:02:33.483]        // =>  FALSE
[21:02:33.483]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:02:33.483]    </control>
[21:02:33.487]    <control if="continueId == 4" while="" timeout="0" info="">
[21:02:33.487]      // if-block "continueId == 4"
[21:02:33.487]        // =>  FALSE
[21:02:33.487]      // skip if-block "continueId == 4"
[21:02:33.487]    </control>
[21:02:33.487]    <control if="!isProduction" while="" timeout="0" info="">
[21:02:33.487]      // if-block "!isProduction"
[21:02:33.487]        // =>  FALSE
[21:02:33.487]      // skip if-block "!isProduction"
[21:02:33.487]    </control>
[21:02:33.487]  </sequence>
[21:02:33.487]  
