/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0018.log
 *  Created     : 15:20:37 (26/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:20:37.090]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:20:37.090]  
[15:20:37.091]  <debugvars>
[15:20:37.091]    // Pre-defined
[15:20:37.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:37.091]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:20:37.092]    __dp=0x00000000
[15:20:37.092]    __ap=0x00000000
[15:20:37.092]    __traceout=0x00000000      (Trace Disabled)
[15:20:37.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:37.092]    __FlashAddr=0x00000000
[15:20:37.092]    __FlashLen=0x00000000
[15:20:37.093]    __FlashArg=0x00000000
[15:20:37.093]    __FlashOp=0x00000000
[15:20:37.093]    __Result=0x00000000
[15:20:37.093]  </debugvars>
[15:20:37.093]  
[15:20:37.093]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:20:37.093]    <block atomic="false" info="">
[15:20:37.093]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:20:37.093]        // -> [isSWJ <= 0x00000001]
[15:20:37.093]      __var hasDormant = __protocol & 0x00020000;
[15:20:37.093]        // -> [hasDormant <= 0x00000000]
[15:20:37.093]      __var protType   = __protocol & 0x0000FFFF;
[15:20:37.094]        // -> [protType <= 0x00000002]
[15:20:37.094]    </block>
[15:20:37.094]    <control if="protType == 1" while="" timeout="0" info="">
[15:20:37.094]      // if-block "protType == 1"
[15:20:37.094]        // =>  FALSE
[15:20:37.094]      // skip if-block "protType == 1"
[15:20:37.094]    </control>
[15:20:37.094]    <control if="protType == 2" while="" timeout="0" info="">
[15:20:37.094]      // if-block "protType == 2"
[15:20:37.094]        // =>  TRUE
[15:20:37.094]      <control if="isSWJ" while="" timeout="0" info="">
[15:20:37.094]        // if-block "isSWJ"
[15:20:37.095]          // =>  TRUE
[15:20:37.095]        <control if="hasDormant" while="" timeout="0" info="">
[15:20:37.095]          // if-block "hasDormant"
[15:20:37.095]            // =>  FALSE
[15:20:37.095]          // skip if-block "hasDormant"
[15:20:37.095]        </control>
[15:20:37.095]        <control if="!hasDormant" while="" timeout="0" info="">
[15:20:37.095]          // if-block "!hasDormant"
[15:20:37.095]            // =>  TRUE
[15:20:37.095]          <block atomic="false" info="">
[15:20:37.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:20:37.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:37.098]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:20:37.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:20:37.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:20:37.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:37.098]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:20:37.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:20:37.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:20:37.107]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:37.107]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:20:37.107]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:20:37.107]          </block>
[15:20:37.107]          // end if-block "!hasDormant"
[15:20:37.107]        </control>
[15:20:37.107]        // end if-block "isSWJ"
[15:20:37.107]      </control>
[15:20:37.107]      <control if="!isSWJ" while="" timeout="0" info="">
[15:20:37.107]        // if-block "!isSWJ"
[15:20:37.107]          // =>  FALSE
[15:20:37.107]        // skip if-block "!isSWJ"
[15:20:37.107]      </control>
[15:20:37.107]      <block atomic="false" info="">
[15:20:37.107]        ReadDP(0x0);
[15:20:37.112]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:20:37.113]      </block>
[15:20:37.113]      // end if-block "protType == 2"
[15:20:37.113]    </control>
[15:20:37.113]  </sequence>
[15:20:37.113]  
[15:20:37.113]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:20:37.113]  
[15:20:37.113]  <debugvars>
[15:20:37.113]    // Pre-defined
[15:20:37.113]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:37.113]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:20:37.113]    __dp=0x00000000
[15:20:37.113]    __ap=0x00000000
[15:20:37.113]    __traceout=0x00000000      (Trace Disabled)
[15:20:37.113]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:37.113]    __FlashAddr=0x00000000
[15:20:37.113]    __FlashLen=0x00000000
[15:20:37.117]    __FlashArg=0x00000000
[15:20:37.117]    __FlashOp=0x00000000
[15:20:37.117]    __Result=0x00000000
[15:20:37.117]  </debugvars>
[15:20:37.117]  
[15:20:37.118]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:20:37.118]    <block atomic="false" info="">
[15:20:37.118]      __var SW_DP_ABORT       = 0x0;
[15:20:37.118]        // -> [SW_DP_ABORT <= 0x00000000]
[15:20:37.118]      __var DP_CTRL_STAT      = 0x4;
[15:20:37.118]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:20:37.118]      __var DP_SELECT         = 0x8;
[15:20:37.118]        // -> [DP_SELECT <= 0x00000008]
[15:20:37.118]      __var powered_down      = 0;
[15:20:37.118]        // -> [powered_down <= 0x00000000]
[15:20:37.118]      WriteDP(DP_SELECT, 0x00000000);
[15:20:37.119]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:20:37.119]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:20:37.122]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:20:37.122]        // -> [powered_down <= 0x00000001]
[15:20:37.122]    </block>
[15:20:37.122]    <control if="powered_down" while="" timeout="0" info="">
[15:20:37.122]      // if-block "powered_down"
[15:20:37.122]        // =>  TRUE
[15:20:37.122]      <block atomic="false" info="">
[15:20:37.122]        Message(0, "Debug/System power-up request sent");
[15:20:37.124]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:20:37.124]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:20:37.124]      </block>
[15:20:37.124]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:20:37.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:20:37.127]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:20:37.127]        // while-condition  =>  FALSE
[15:20:37.127]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:20:37.127]      </control>
[15:20:37.127]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:20:37.127]        // if-block "(__protocol & 0xFFFF) == 1"
[15:20:37.127]          // =>  FALSE
[15:20:37.127]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:20:37.127]      </control>
[15:20:37.127]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:20:37.127]        // if-block "(__protocol & 0xFFFF) == 2"
[15:20:37.127]          // =>  TRUE
[15:20:37.127]        <block atomic="false" info="">
[15:20:37.127]          Message(0, "executing SWD power up");
[15:20:37.127]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:20:37.134]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:20:37.134]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:20:37.138]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:20:37.138]        </block>
[15:20:37.138]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:20:37.138]      </control>
[15:20:37.138]      // end if-block "powered_down"
[15:20:37.138]    </control>
[15:20:37.138]    <block atomic="false" info="">
[15:20:37.138]      __var DEBUG_PORT_VAL    = 0;
[15:20:37.138]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:20:37.138]      __var ACCESS_POINT_VAL  = 0;
[15:20:37.138]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:20:37.138]      __ap = 1; 
[15:20:37.138]        // -> [__ap <= 0x00000001]
[15:20:37.138]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:20:37.138]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:20:37.148]      __ap = 4;
[15:20:37.148]        // -> [__ap <= 0x00000004]
[15:20:37.148]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:20:37.148]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:20:37.148]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:20:37.148]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:20:37.148]    </block>
[15:20:37.148]    <block atomic="false" info="">
[15:20:37.148]      __var nReset = 0x80;
[15:20:37.148]        // -> [nReset <= 0x00000080]
[15:20:37.148]      __var canReadPins = 0;
[15:20:37.148]        // -> [canReadPins <= 0x00000000]
[15:20:37.148]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:20:37.148]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:20:37.148]        // -> [canReadPins <= 0x00000001]
[15:20:37.148]    </block>
[15:20:37.148]    <control if="" while="1" timeout="200" info="">
[15:20:37.148]      // while "1"  (timeout="200")
[15:20:37.148]      // while-condition  =>  TRUE
[15:20:37.148]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.158]      // while "1"  (timeout="200")
[15:20:37.158]      // while-condition  =>  TRUE
[15:20:37.168]      // while "1"  (timeout="200")
[15:20:37.168]      // while  =>  TIMEOUT
[15:20:37.168]      // end while "1"
[15:20:37.168]    </control>
[15:20:37.168]    <control if="canReadPins" while="" timeout="0" info="">
[15:20:37.168]      // if-block "canReadPins"
[15:20:37.168]        // =>  TRUE
[15:20:37.168]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:20:37.168]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:20:37.168]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:20:37.168]        // while-condition  =>  FALSE
[15:20:37.168]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:20:37.168]      </control>
[15:20:37.168]      // end if-block "canReadPins"
[15:20:37.168]    </control>
[15:20:37.168]    <control if="!canReadPins" while="" timeout="0" info="">
[15:20:37.168]      // if-block "!canReadPins"
[15:20:37.168]        // =>  FALSE
[15:20:37.168]      // skip if-block "!canReadPins"
[15:20:37.168]    </control>
[15:20:37.168]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:20:37.168]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:20:37.168]        // =>  TRUE
[15:20:37.168]      <block atomic="false" info="">
[15:20:37.168]        WriteAP(0x00, 0x190008);
[15:20:37.168]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:20:37.168]        WriteAP(0xF0, 0x01);
[15:20:37.179]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:20:37.179]      </block>
[15:20:37.179]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:20:37.179]    </control>
[15:20:37.179]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:20:37.179]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:20:37.179]        // =>  FALSE
[15:20:37.179]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:20:37.179]    </control>
[15:20:37.179]    <block atomic="false" info="">
[15:20:37.179]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:20:37.179]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:20:37.179]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:20:37.179]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:20:37.185]      __ap = 0; //lets make sure we reset the access point selection
[15:20:37.185]        // -> [__ap <= 0x00000000]
[15:20:37.185]    </block>
[15:20:37.185]  </sequence>
[15:20:37.185]  
[15:20:37.219]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:20:37.219]  
[15:20:37.219]  <debugvars>
[15:20:37.219]    // Pre-defined
[15:20:37.219]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:37.219]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:20:37.219]    __dp=0x00000000
[15:20:37.219]    __ap=0x00000000
[15:20:37.229]    __traceout=0x00000000      (Trace Disabled)
[15:20:37.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:37.229]    __FlashAddr=0x00000000
[15:20:37.229]    __FlashLen=0x00000000
[15:20:37.229]    __FlashArg=0x00000000
[15:20:37.229]    __FlashOp=0x00000000
[15:20:37.229]    __Result=0x00000000
[15:20:37.229]  </debugvars>
[15:20:37.229]  
[15:20:37.230]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:20:37.230]    <block atomic="false" info="">
[15:20:37.230]      __var deviceID = 0;
[15:20:37.230]        // -> [deviceID <= 0x00000000]
[15:20:37.230]      __var version = 0;
[15:20:37.230]        // -> [version <= 0x00000000]
[15:20:37.230]      __var partNum = 0;
[15:20:37.230]        // -> [partNum <= 0x00000000]
[15:20:37.230]      __var manuf = 0;
[15:20:37.230]        // -> [manuf <= 0x00000000]
[15:20:37.230]      __var isMSPM0G1X0X_G3X0X = 0;
[15:20:37.230]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:20:37.230]      __var isProduction = 0;
[15:20:37.231]        // -> [isProduction <= 0x00000000]
[15:20:37.231]      __var continueId = 0;
[15:20:37.231]        // -> [continueId <= 0x00000000]
[15:20:37.231]      deviceID =   Read32(0x41C40004);
[15:20:37.238]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:20:37.238]        // -> [deviceID <= 0x2BB8802F]
[15:20:37.238]      version = deviceID >> 28;
[15:20:37.238]        // -> [version <= 0x00000002]
[15:20:37.238]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:20:37.238]        // -> [partNum <= 0x0000BB88]
[15:20:37.238]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:20:37.238]        // -> [manuf <= 0x00000017]
[15:20:37.238]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:20:37.238]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:20:37.238]      isProduction = (version > 0);
[15:20:37.241]        // -> [isProduction <= 0x00000001]
[15:20:37.241]    </block>
[15:20:37.241]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:20:37.241]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:20:37.241]        // =>  FALSE
[15:20:37.241]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:20:37.241]    </control>
[15:20:37.241]    <control if="continueId == 4" while="" timeout="0" info="">
[15:20:37.241]      // if-block "continueId == 4"
[15:20:37.241]        // =>  FALSE
[15:20:37.241]      // skip if-block "continueId == 4"
[15:20:37.241]    </control>
[15:20:37.242]    <control if="!isProduction" while="" timeout="0" info="">
[15:20:37.242]      // if-block "!isProduction"
[15:20:37.242]        // =>  FALSE
[15:20:37.242]      // skip if-block "!isProduction"
[15:20:37.242]    </control>
[15:20:37.242]  </sequence>
[15:20:37.242]  
[16:09:29.776]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:09:29.776]  
[16:09:29.776]  <debugvars>
[16:09:29.776]    // Pre-defined
[16:09:29.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:29.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:29.776]    __dp=0x00000000
[16:09:29.776]    __ap=0x00000000
[16:09:29.776]    __traceout=0x00000000      (Trace Disabled)
[16:09:29.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:29.776]    __FlashAddr=0x00000000
[16:09:29.776]    __FlashLen=0x00000000
[16:09:29.776]    __FlashArg=0x00000000
[16:09:29.776]    __FlashOp=0x00000000
[16:09:29.776]    __Result=0x00000000
[16:09:29.776]  </debugvars>
[16:09:29.776]  
[16:09:29.776]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:09:29.776]    <block atomic="false" info="">
[16:09:29.776]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:09:29.776]        // -> [isSWJ <= 0x00000001]
[16:09:29.776]      __var hasDormant = __protocol & 0x00020000;
[16:09:29.776]        // -> [hasDormant <= 0x00000000]
[16:09:29.776]      __var protType   = __protocol & 0x0000FFFF;
[16:09:29.779]        // -> [protType <= 0x00000002]
[16:09:29.779]    </block>
[16:09:29.779]    <control if="protType == 1" while="" timeout="0" info="">
[16:09:29.779]      // if-block "protType == 1"
[16:09:29.779]        // =>  FALSE
[16:09:29.779]      // skip if-block "protType == 1"
[16:09:29.779]    </control>
[16:09:29.779]    <control if="protType == 2" while="" timeout="0" info="">
[16:09:29.779]      // if-block "protType == 2"
[16:09:29.779]        // =>  TRUE
[16:09:29.779]      <control if="isSWJ" while="" timeout="0" info="">
[16:09:29.779]        // if-block "isSWJ"
[16:09:29.779]          // =>  TRUE
[16:09:29.779]        <control if="hasDormant" while="" timeout="0" info="">
[16:09:29.779]          // if-block "hasDormant"
[16:09:29.779]            // =>  FALSE
[16:09:29.779]          // skip if-block "hasDormant"
[16:09:29.779]        </control>
[16:09:29.779]        <control if="!hasDormant" while="" timeout="0" info="">
[16:09:29.779]          // if-block "!hasDormant"
[16:09:29.779]            // =>  TRUE
[16:09:29.779]          <block atomic="false" info="">
[16:09:29.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:09:29.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:29.779]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:09:29.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:09:29.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:09:29.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:29.789]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:09:29.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:09:29.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:09:29.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:29.789]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:09:29.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:09:29.796]          </block>
[16:09:29.796]          // end if-block "!hasDormant"
[16:09:29.796]        </control>
[16:09:29.796]        // end if-block "isSWJ"
[16:09:29.796]      </control>
[16:09:29.796]      <control if="!isSWJ" while="" timeout="0" info="">
[16:09:29.796]        // if-block "!isSWJ"
[16:09:29.796]          // =>  FALSE
[16:09:29.796]        // skip if-block "!isSWJ"
[16:09:29.796]      </control>
[16:09:29.796]      <block atomic="false" info="">
[16:09:29.796]        ReadDP(0x0);
[16:09:29.799]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:09:29.799]      </block>
[16:09:29.799]      // end if-block "protType == 2"
[16:09:29.799]    </control>
[16:09:29.799]  </sequence>
[16:09:29.799]  
[16:09:29.806]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:09:29.806]  
[16:09:29.806]  <debugvars>
[16:09:29.806]    // Pre-defined
[16:09:29.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:29.806]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:29.806]    __dp=0x00000000
[16:09:29.806]    __ap=0x00000000
[16:09:29.806]    __traceout=0x00000000      (Trace Disabled)
[16:09:29.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:29.806]    __FlashAddr=0x00000000
[16:09:29.806]    __FlashLen=0x00000000
[16:09:29.806]    __FlashArg=0x00000000
[16:09:29.806]    __FlashOp=0x00000000
[16:09:29.806]    __Result=0x00000000
[16:09:29.806]  </debugvars>
[16:09:29.809]  
[16:09:29.809]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:09:29.809]    <block atomic="false" info="">
[16:09:29.809]      __var SW_DP_ABORT       = 0x0;
[16:09:29.809]        // -> [SW_DP_ABORT <= 0x00000000]
[16:09:29.809]      __var DP_CTRL_STAT      = 0x4;
[16:09:29.809]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:09:29.809]      __var DP_SELECT         = 0x8;
[16:09:29.809]        // -> [DP_SELECT <= 0x00000008]
[16:09:29.809]      __var powered_down      = 0;
[16:09:29.809]        // -> [powered_down <= 0x00000000]
[16:09:29.809]      WriteDP(DP_SELECT, 0x00000000);
[16:09:29.809]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:09:29.809]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:09:29.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:09:29.809]        // -> [powered_down <= 0x00000001]
[16:09:29.809]    </block>
[16:09:29.809]    <control if="powered_down" while="" timeout="0" info="">
[16:09:29.809]      // if-block "powered_down"
[16:09:29.809]        // =>  TRUE
[16:09:29.809]      <block atomic="false" info="">
[16:09:29.809]        Message(0, "Debug/System power-up request sent");
[16:09:29.816]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:09:29.816]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:09:29.819]      </block>
[16:09:29.819]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:09:29.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:09:29.819]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:09:29.819]        // while-condition  =>  FALSE
[16:09:29.819]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:09:29.819]      </control>
[16:09:29.819]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:09:29.819]        // if-block "(__protocol & 0xFFFF) == 1"
[16:09:29.819]          // =>  FALSE
[16:09:29.819]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:09:29.819]      </control>
[16:09:29.819]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:09:29.819]        // if-block "(__protocol & 0xFFFF) == 2"
[16:09:29.819]          // =>  TRUE
[16:09:29.819]        <block atomic="false" info="">
[16:09:29.819]          Message(0, "executing SWD power up");
[16:09:29.819]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:09:29.826]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:09:29.826]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:09:29.830]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:09:29.830]        </block>
[16:09:29.830]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:09:29.830]      </control>
[16:09:29.830]      // end if-block "powered_down"
[16:09:29.830]    </control>
[16:09:29.830]    <block atomic="false" info="">
[16:09:29.830]      __var DEBUG_PORT_VAL    = 0;
[16:09:29.830]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:09:29.830]      __var ACCESS_POINT_VAL  = 0;
[16:09:29.830]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:09:29.830]      __ap = 1; 
[16:09:29.830]        // -> [__ap <= 0x00000001]
[16:09:29.830]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:09:29.836]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:09:29.836]      __ap = 4;
[16:09:29.836]        // -> [__ap <= 0x00000004]
[16:09:29.836]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:09:29.836]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:09:29.836]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:09:29.840]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:09:29.840]    </block>
[16:09:29.840]    <block atomic="false" info="">
[16:09:29.840]      __var nReset = 0x80;
[16:09:29.840]        // -> [nReset <= 0x00000080]
[16:09:29.840]      __var canReadPins = 0;
[16:09:29.840]        // -> [canReadPins <= 0x00000000]
[16:09:29.840]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:09:29.846]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:09:29.846]        // -> [canReadPins <= 0x00000001]
[16:09:29.846]    </block>
[16:09:29.846]    <control if="" while="1" timeout="200" info="">
[16:09:29.846]      // while "1"  (timeout="200")
[16:09:29.846]      // while-condition  =>  TRUE
[16:09:29.846]      // while "1"  (timeout="200")
[16:09:29.846]      // while-condition  =>  TRUE
[16:09:29.846]      // while "1"  (timeout="200")
[16:09:29.846]      // while-condition  =>  TRUE
[16:09:29.846]      // while "1"  (timeout="200")
[16:09:29.850]      // while-condition  =>  TRUE
[16:09:29.850]      // while "1"  (timeout="200")
[16:09:29.850]      // while  =>  TIMEOUT
[16:09:29.850]      // end while "1"
[16:09:29.850]    </control>
[16:09:29.850]    <control if="canReadPins" while="" timeout="0" info="">
[16:09:29.850]      // if-block "canReadPins"
[16:09:29.850]        // =>  TRUE
[16:09:29.850]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:09:29.850]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:09:29.850]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:09:29.850]        // while-condition  =>  FALSE
[16:09:29.850]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:09:29.850]      </control>
[16:09:29.850]      // end if-block "canReadPins"
[16:09:29.850]    </control>
[16:09:29.850]    <control if="!canReadPins" while="" timeout="0" info="">
[16:09:29.850]      // if-block "!canReadPins"
[16:09:29.850]        // =>  FALSE
[16:09:29.850]      // skip if-block "!canReadPins"
[16:09:29.850]    </control>
[16:09:29.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:09:29.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:09:29.850]        // =>  TRUE
[16:09:29.850]      <block atomic="false" info="">
[16:09:29.850]        WriteAP(0x00, 0x190008);
[16:09:29.850]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:09:29.850]        WriteAP(0xF0, 0x01);
[16:09:29.856]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:09:29.856]      </block>
[16:09:29.856]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:09:29.856]    </control>
[16:09:29.856]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:09:29.856]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:09:29.856]        // =>  FALSE
[16:09:29.856]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:09:29.856]    </control>
[16:09:29.856]    <block atomic="false" info="">
[16:09:29.860]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:09:29.860]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:09:29.860]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:09:29.860]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:09:29.860]      __ap = 0; //lets make sure we reset the access point selection
[16:09:29.860]        // -> [__ap <= 0x00000000]
[16:09:29.860]    </block>
[16:09:29.860]  </sequence>
[16:09:29.860]  
[16:09:29.896]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:09:29.896]  
[16:09:29.896]  <debugvars>
[16:09:29.896]    // Pre-defined
[16:09:29.896]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:29.896]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:29.896]    __dp=0x00000000
[16:09:29.896]    __ap=0x00000000
[16:09:29.896]    __traceout=0x00000000      (Trace Disabled)
[16:09:29.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:29.896]    __FlashAddr=0x00000000
[16:09:29.896]    __FlashLen=0x00000000
[16:09:29.896]    __FlashArg=0x00000000
[16:09:29.896]    __FlashOp=0x00000000
[16:09:29.896]    __Result=0x00000000
[16:09:29.896]  </debugvars>
[16:09:29.896]  
[16:09:29.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:09:29.896]    <block atomic="false" info="">
[16:09:29.896]      __var deviceID = 0;
[16:09:29.896]        // -> [deviceID <= 0x00000000]
[16:09:29.896]      __var version = 0;
[16:09:29.896]        // -> [version <= 0x00000000]
[16:09:29.896]      __var partNum = 0;
[16:09:29.896]        // -> [partNum <= 0x00000000]
[16:09:29.900]      __var manuf = 0;
[16:09:29.900]        // -> [manuf <= 0x00000000]
[16:09:29.900]      __var isMSPM0G1X0X_G3X0X = 0;
[16:09:29.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:09:29.900]      __var isProduction = 0;
[16:09:29.900]        // -> [isProduction <= 0x00000000]
[16:09:29.900]      __var continueId = 0;
[16:09:29.900]        // -> [continueId <= 0x00000000]
[16:09:29.900]      deviceID =   Read32(0x41C40004);
[16:09:29.900]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:09:29.900]        // -> [deviceID <= 0x2BB8802F]
[16:09:29.900]      version = deviceID >> 28;
[16:09:29.900]        // -> [version <= 0x00000002]
[16:09:29.900]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:09:29.900]        // -> [partNum <= 0x0000BB88]
[16:09:29.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:09:29.900]        // -> [manuf <= 0x00000017]
[16:09:29.906]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:09:29.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:09:29.906]      isProduction = (version > 0);
[16:09:29.906]        // -> [isProduction <= 0x00000001]
[16:09:29.906]    </block>
[16:09:29.906]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:09:29.906]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:09:29.906]        // =>  FALSE
[16:09:29.906]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:09:29.906]    </control>
[16:09:29.906]    <control if="continueId == 4" while="" timeout="0" info="">
[16:09:29.906]      // if-block "continueId == 4"
[16:09:29.906]        // =>  FALSE
[16:09:29.906]      // skip if-block "continueId == 4"
[16:09:29.906]    </control>
[16:09:29.906]    <control if="!isProduction" while="" timeout="0" info="">
[16:09:29.906]      // if-block "!isProduction"
[16:09:29.906]        // =>  FALSE
[16:09:29.906]      // skip if-block "!isProduction"
[16:09:29.906]    </control>
[16:09:29.906]  </sequence>
[16:09:29.906]  
[16:10:29.935]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:10:29.935]  
[16:10:29.948]  <debugvars>
[16:10:29.948]    // Pre-defined
[16:10:29.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:29.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:29.948]    __dp=0x00000000
[16:10:29.948]    __ap=0x00000000
[16:10:29.948]    __traceout=0x00000000      (Trace Disabled)
[16:10:29.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:29.948]    __FlashAddr=0x00000000
[16:10:29.948]    __FlashLen=0x00000000
[16:10:29.948]    __FlashArg=0x00000000
[16:10:29.948]    __FlashOp=0x00000000
[16:10:29.948]    __Result=0x00000000
[16:10:29.948]  </debugvars>
[16:10:29.948]  
[16:10:29.948]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:10:29.948]    <block atomic="false" info="">
[16:10:29.948]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:10:29.948]        // -> [isSWJ <= 0x00000001]
[16:10:29.948]      __var hasDormant = __protocol & 0x00020000;
[16:10:29.948]        // -> [hasDormant <= 0x00000000]
[16:10:29.948]      __var protType   = __protocol & 0x0000FFFF;
[16:10:29.948]        // -> [protType <= 0x00000002]
[16:10:29.948]    </block>
[16:10:29.948]    <control if="protType == 1" while="" timeout="0" info="">
[16:10:29.948]      // if-block "protType == 1"
[16:10:29.948]        // =>  FALSE
[16:10:29.948]      // skip if-block "protType == 1"
[16:10:29.948]    </control>
[16:10:29.948]    <control if="protType == 2" while="" timeout="0" info="">
[16:10:29.948]      // if-block "protType == 2"
[16:10:29.948]        // =>  TRUE
[16:10:29.948]      <control if="isSWJ" while="" timeout="0" info="">
[16:10:29.948]        // if-block "isSWJ"
[16:10:29.948]          // =>  TRUE
[16:10:29.948]        <control if="hasDormant" while="" timeout="0" info="">
[16:10:29.948]          // if-block "hasDormant"
[16:10:29.948]            // =>  FALSE
[16:10:29.948]          // skip if-block "hasDormant"
[16:10:29.948]        </control>
[16:10:29.948]        <control if="!hasDormant" while="" timeout="0" info="">
[16:10:29.948]          // if-block "!hasDormant"
[16:10:29.948]            // =>  TRUE
[16:10:29.948]          <block atomic="false" info="">
[16:10:29.948]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:10:29.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:29.955]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:10:29.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:10:29.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:10:29.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:29.955]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:10:29.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:10:29.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:10:29.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:29.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:10:29.965]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:10:29.965]          </block>
[16:10:29.965]          // end if-block "!hasDormant"
[16:10:29.965]        </control>
[16:10:29.965]        // end if-block "isSWJ"
[16:10:29.965]      </control>
[16:10:29.965]      <control if="!isSWJ" while="" timeout="0" info="">
[16:10:29.965]        // if-block "!isSWJ"
[16:10:29.965]          // =>  FALSE
[16:10:29.965]        // skip if-block "!isSWJ"
[16:10:29.965]      </control>
[16:10:29.965]      <block atomic="false" info="">
[16:10:29.965]        ReadDP(0x0);
[16:10:29.965]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:10:29.965]      </block>
[16:10:29.965]      // end if-block "protType == 2"
[16:10:29.965]    </control>
[16:10:29.965]  </sequence>
[16:10:29.965]  
[16:10:29.965]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:10:29.965]  
[16:10:29.965]  <debugvars>
[16:10:29.965]    // Pre-defined
[16:10:29.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:29.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:29.965]    __dp=0x00000000
[16:10:29.965]    __ap=0x00000000
[16:10:29.965]    __traceout=0x00000000      (Trace Disabled)
[16:10:29.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:29.965]    __FlashAddr=0x00000000
[16:10:29.965]    __FlashLen=0x00000000
[16:10:29.965]    __FlashArg=0x00000000
[16:10:29.965]    __FlashOp=0x00000000
[16:10:29.965]    __Result=0x00000000
[16:10:29.965]  </debugvars>
[16:10:29.965]  
[16:10:29.965]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:10:29.965]    <block atomic="false" info="">
[16:10:29.965]      __var SW_DP_ABORT       = 0x0;
[16:10:29.965]        // -> [SW_DP_ABORT <= 0x00000000]
[16:10:29.965]      __var DP_CTRL_STAT      = 0x4;
[16:10:29.965]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:10:29.965]      __var DP_SELECT         = 0x8;
[16:10:29.975]        // -> [DP_SELECT <= 0x00000008]
[16:10:29.975]      __var powered_down      = 0;
[16:10:29.975]        // -> [powered_down <= 0x00000000]
[16:10:29.975]      WriteDP(DP_SELECT, 0x00000000);
[16:10:29.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:10:29.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:10:29.975]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:10:29.975]        // -> [powered_down <= 0x00000001]
[16:10:29.975]    </block>
[16:10:29.975]    <control if="powered_down" while="" timeout="0" info="">
[16:10:29.975]      // if-block "powered_down"
[16:10:29.975]        // =>  TRUE
[16:10:29.975]      <block atomic="false" info="">
[16:10:29.975]        Message(0, "Debug/System power-up request sent");
[16:10:29.981]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:10:29.983]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:10:29.983]      </block>
[16:10:29.983]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:10:29.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:10:29.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:10:29.985]        // while-condition  =>  FALSE
[16:10:29.985]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:10:29.985]      </control>
[16:10:29.985]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:10:29.985]        // if-block "(__protocol & 0xFFFF) == 1"
[16:10:29.985]          // =>  FALSE
[16:10:29.985]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:10:29.985]      </control>
[16:10:29.985]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:10:29.985]        // if-block "(__protocol & 0xFFFF) == 2"
[16:10:29.985]          // =>  TRUE
[16:10:29.985]        <block atomic="false" info="">
[16:10:29.985]          Message(0, "executing SWD power up");
[16:10:29.985]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:10:29.990]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:10:29.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:10:29.991]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:10:29.991]        </block>
[16:10:29.991]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:10:29.991]      </control>
[16:10:29.991]      // end if-block "powered_down"
[16:10:29.991]    </control>
[16:10:29.991]    <block atomic="false" info="">
[16:10:29.991]      __var DEBUG_PORT_VAL    = 0;
[16:10:29.991]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:10:29.991]      __var ACCESS_POINT_VAL  = 0;
[16:10:29.991]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:10:29.991]      __ap = 1; 
[16:10:29.991]        // -> [__ap <= 0x00000001]
[16:10:29.991]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:10:29.996]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:10:29.996]      __ap = 4;
[16:10:29.996]        // -> [__ap <= 0x00000004]
[16:10:29.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:10:30.004]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:10:30.004]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:10:30.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:10:30.006]    </block>
[16:10:30.006]    <block atomic="false" info="">
[16:10:30.006]      __var nReset = 0x80;
[16:10:30.006]        // -> [nReset <= 0x00000080]
[16:10:30.006]      __var canReadPins = 0;
[16:10:30.006]        // -> [canReadPins <= 0x00000000]
[16:10:30.006]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:10:30.009]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:10:30.009]        // -> [canReadPins <= 0x00000001]
[16:10:30.009]    </block>
[16:10:30.009]    <control if="" while="1" timeout="200" info="">
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.009]      // while-condition  =>  TRUE
[16:10:30.009]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.016]      // while "1"  (timeout="200")
[16:10:30.016]      // while-condition  =>  TRUE
[16:10:30.026]      // while "1"  (timeout="200")
[16:10:30.026]      // while  =>  TIMEOUT
[16:10:30.026]      // end while "1"
[16:10:30.026]    </control>
[16:10:30.026]    <control if="canReadPins" while="" timeout="0" info="">
[16:10:30.026]      // if-block "canReadPins"
[16:10:30.026]        // =>  TRUE
[16:10:30.026]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:10:30.026]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:10:30.026]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:10:30.026]        // while-condition  =>  FALSE
[16:10:30.026]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:10:30.026]      </control>
[16:10:30.026]      // end if-block "canReadPins"
[16:10:30.026]    </control>
[16:10:30.026]    <control if="!canReadPins" while="" timeout="0" info="">
[16:10:30.026]      // if-block "!canReadPins"
[16:10:30.026]        // =>  FALSE
[16:10:30.026]      // skip if-block "!canReadPins"
[16:10:30.026]    </control>
[16:10:30.026]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:10:30.026]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:10:30.026]        // =>  TRUE
[16:10:30.026]      <block atomic="false" info="">
[16:10:30.026]        WriteAP(0x00, 0x190008);
[16:10:30.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:10:30.026]        WriteAP(0xF0, 0x01);
[16:10:30.036]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:10:30.036]      </block>
[16:10:30.036]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:10:30.036]    </control>
[16:10:30.036]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:10:30.036]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:10:30.036]        // =>  FALSE
[16:10:30.036]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:10:30.036]    </control>
[16:10:30.036]    <block atomic="false" info="">
[16:10:30.036]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:10:30.046]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:10:30.046]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:10:30.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:10:30.046]      __ap = 0; //lets make sure we reset the access point selection
[16:10:30.046]        // -> [__ap <= 0x00000000]
[16:10:30.046]    </block>
[16:10:30.046]  </sequence>
[16:10:30.046]  
[16:10:30.068]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:10:30.068]  
[16:10:30.068]  <debugvars>
[16:10:30.068]    // Pre-defined
[16:10:30.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:30.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:30.077]    __dp=0x00000000
[16:10:30.077]    __ap=0x00000000
[16:10:30.077]    __traceout=0x00000000      (Trace Disabled)
[16:10:30.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:30.077]    __FlashAddr=0x00000000
[16:10:30.077]    __FlashLen=0x00000000
[16:10:30.077]    __FlashArg=0x00000000
[16:10:30.077]    __FlashOp=0x00000000
[16:10:30.077]    __Result=0x00000000
[16:10:30.077]  </debugvars>
[16:10:30.077]  
[16:10:30.077]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:10:30.077]    <block atomic="false" info="">
[16:10:30.077]      __var deviceID = 0;
[16:10:30.077]        // -> [deviceID <= 0x00000000]
[16:10:30.077]      __var version = 0;
[16:10:30.077]        // -> [version <= 0x00000000]
[16:10:30.077]      __var partNum = 0;
[16:10:30.077]        // -> [partNum <= 0x00000000]
[16:10:30.077]      __var manuf = 0;
[16:10:30.077]        // -> [manuf <= 0x00000000]
[16:10:30.077]      __var isMSPM0G1X0X_G3X0X = 0;
[16:10:30.077]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:10:30.077]      __var isProduction = 0;
[16:10:30.077]        // -> [isProduction <= 0x00000000]
[16:10:30.077]      __var continueId = 0;
[16:10:30.077]        // -> [continueId <= 0x00000000]
[16:10:30.077]      deviceID =   Read32(0x41C40004);
[16:10:30.077]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:10:30.077]        // -> [deviceID <= 0x2BB8802F]
[16:10:30.077]      version = deviceID >> 28;
[16:10:30.077]        // -> [version <= 0x00000002]
[16:10:30.077]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:10:30.077]        // -> [partNum <= 0x0000BB88]
[16:10:30.077]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:10:30.077]        // -> [manuf <= 0x00000017]
[16:10:30.077]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:10:30.077]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:10:30.077]      isProduction = (version > 0);
[16:10:30.077]        // -> [isProduction <= 0x00000001]
[16:10:30.087]    </block>
[16:10:30.087]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:10:30.087]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:10:30.087]        // =>  FALSE
[16:10:30.087]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:10:30.087]    </control>
[16:10:30.087]    <control if="continueId == 4" while="" timeout="0" info="">
[16:10:30.087]      // if-block "continueId == 4"
[16:10:30.087]        // =>  FALSE
[16:10:30.088]      // skip if-block "continueId == 4"
[16:10:30.088]    </control>
[16:10:30.088]    <control if="!isProduction" while="" timeout="0" info="">
[16:10:30.088]      // if-block "!isProduction"
[16:10:30.088]        // =>  FALSE
[16:10:30.088]      // skip if-block "!isProduction"
[16:10:30.088]    </control>
[16:10:30.088]  </sequence>
[16:10:30.088]  
[16:12:02.868]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:12:02.868]  
[16:12:02.882]  <debugvars>
[16:12:02.882]    // Pre-defined
[16:12:02.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:02.882]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:02.882]    __dp=0x00000000
[16:12:02.882]    __ap=0x00000000
[16:12:02.882]    __traceout=0x00000000      (Trace Disabled)
[16:12:02.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:02.882]    __FlashAddr=0x00000000
[16:12:02.882]    __FlashLen=0x00000000
[16:12:02.882]    __FlashArg=0x00000000
[16:12:02.882]    __FlashOp=0x00000000
[16:12:02.882]    __Result=0x00000000
[16:12:02.882]  </debugvars>
[16:12:02.882]  
[16:12:02.882]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:12:02.882]    <block atomic="false" info="">
[16:12:02.882]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:12:02.882]        // -> [isSWJ <= 0x00000001]
[16:12:02.882]      __var hasDormant = __protocol & 0x00020000;
[16:12:02.882]        // -> [hasDormant <= 0x00000000]
[16:12:02.882]      __var protType   = __protocol & 0x0000FFFF;
[16:12:02.882]        // -> [protType <= 0x00000002]
[16:12:02.882]    </block>
[16:12:02.882]    <control if="protType == 1" while="" timeout="0" info="">
[16:12:02.882]      // if-block "protType == 1"
[16:12:02.882]        // =>  FALSE
[16:12:02.882]      // skip if-block "protType == 1"
[16:12:02.882]    </control>
[16:12:02.882]    <control if="protType == 2" while="" timeout="0" info="">
[16:12:02.882]      // if-block "protType == 2"
[16:12:02.882]        // =>  TRUE
[16:12:02.882]      <control if="isSWJ" while="" timeout="0" info="">
[16:12:02.882]        // if-block "isSWJ"
[16:12:02.882]          // =>  TRUE
[16:12:02.882]        <control if="hasDormant" while="" timeout="0" info="">
[16:12:02.882]          // if-block "hasDormant"
[16:12:02.882]            // =>  FALSE
[16:12:02.882]          // skip if-block "hasDormant"
[16:12:02.882]        </control>
[16:12:02.882]        <control if="!hasDormant" while="" timeout="0" info="">
[16:12:02.882]          // if-block "!hasDormant"
[16:12:02.882]            // =>  TRUE
[16:12:02.882]          <block atomic="false" info="">
[16:12:02.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:12:02.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:02.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:12:02.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:12:02.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:12:02.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:02.889]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:12:02.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:12:02.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:12:02.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:02.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:12:02.899]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:12:02.899]          </block>
[16:12:02.899]          // end if-block "!hasDormant"
[16:12:02.899]        </control>
[16:12:02.899]        // end if-block "isSWJ"
[16:12:02.899]      </control>
[16:12:02.899]      <control if="!isSWJ" while="" timeout="0" info="">
[16:12:02.899]        // if-block "!isSWJ"
[16:12:02.899]          // =>  FALSE
[16:12:02.899]        // skip if-block "!isSWJ"
[16:12:02.899]      </control>
[16:12:02.899]      <block atomic="false" info="">
[16:12:02.899]        ReadDP(0x0);
[16:12:02.899]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:12:02.899]      </block>
[16:12:02.899]      // end if-block "protType == 2"
[16:12:02.899]    </control>
[16:12:02.899]  </sequence>
[16:12:02.899]  
[16:12:02.899]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:12:02.899]  
[16:12:02.899]  <debugvars>
[16:12:02.899]    // Pre-defined
[16:12:02.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:02.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:02.899]    __dp=0x00000000
[16:12:02.899]    __ap=0x00000000
[16:12:02.899]    __traceout=0x00000000      (Trace Disabled)
[16:12:02.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:02.899]    __FlashAddr=0x00000000
[16:12:02.899]    __FlashLen=0x00000000
[16:12:02.899]    __FlashArg=0x00000000
[16:12:02.899]    __FlashOp=0x00000000
[16:12:02.899]    __Result=0x00000000
[16:12:02.899]  </debugvars>
[16:12:02.899]  
[16:12:02.899]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:12:02.899]    <block atomic="false" info="">
[16:12:02.899]      __var SW_DP_ABORT       = 0x0;
[16:12:02.899]        // -> [SW_DP_ABORT <= 0x00000000]
[16:12:02.899]      __var DP_CTRL_STAT      = 0x4;
[16:12:02.899]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:12:02.899]      __var DP_SELECT         = 0x8;
[16:12:02.899]        // -> [DP_SELECT <= 0x00000008]
[16:12:02.899]      __var powered_down      = 0;
[16:12:02.899]        // -> [powered_down <= 0x00000000]
[16:12:02.899]      WriteDP(DP_SELECT, 0x00000000);
[16:12:02.909]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:12:02.909]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:12:02.909]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:12:02.909]        // -> [powered_down <= 0x00000001]
[16:12:02.909]    </block>
[16:12:02.909]    <control if="powered_down" while="" timeout="0" info="">
[16:12:02.909]      // if-block "powered_down"
[16:12:02.909]        // =>  TRUE
[16:12:02.909]      <block atomic="false" info="">
[16:12:02.909]        Message(0, "Debug/System power-up request sent");
[16:12:02.909]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:12:02.919]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:12:02.919]      </block>
[16:12:02.919]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:12:02.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:12:02.919]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:12:02.919]        // while-condition  =>  FALSE
[16:12:02.919]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:12:02.919]      </control>
[16:12:02.919]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:12:02.919]        // if-block "(__protocol & 0xFFFF) == 1"
[16:12:02.919]          // =>  FALSE
[16:12:02.919]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:12:02.919]      </control>
[16:12:02.919]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:12:02.919]        // if-block "(__protocol & 0xFFFF) == 2"
[16:12:02.919]          // =>  TRUE
[16:12:02.919]        <block atomic="false" info="">
[16:12:02.919]          Message(0, "executing SWD power up");
[16:12:02.919]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:12:02.919]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:12:02.919]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:12:02.919]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:12:02.919]        </block>
[16:12:02.919]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:12:02.919]      </control>
[16:12:02.919]      // end if-block "powered_down"
[16:12:02.929]    </control>
[16:12:02.929]    <block atomic="false" info="">
[16:12:02.929]      __var DEBUG_PORT_VAL    = 0;
[16:12:02.929]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:12:02.929]      __var ACCESS_POINT_VAL  = 0;
[16:12:02.929]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:12:02.929]      __ap = 1; 
[16:12:02.929]        // -> [__ap <= 0x00000001]
[16:12:02.929]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:12:02.929]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:12:02.929]      __ap = 4;
[16:12:02.929]        // -> [__ap <= 0x00000004]
[16:12:02.929]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:12:02.929]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:12:02.929]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:12:02.929]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:12:02.939]    </block>
[16:12:02.939]    <block atomic="false" info="">
[16:12:02.939]      __var nReset = 0x80;
[16:12:02.939]        // -> [nReset <= 0x00000080]
[16:12:02.939]      __var canReadPins = 0;
[16:12:02.939]        // -> [canReadPins <= 0x00000000]
[16:12:02.939]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:12:02.939]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:12:02.939]        // -> [canReadPins <= 0x00000001]
[16:12:02.939]    </block>
[16:12:02.939]    <control if="" while="1" timeout="200" info="">
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.939]      // while "1"  (timeout="200")
[16:12:02.939]      // while-condition  =>  TRUE
[16:12:02.949]      // while "1"  (timeout="200")
[16:12:02.949]      // while  =>  TIMEOUT
[16:12:02.949]      // end while "1"
[16:12:02.949]    </control>
[16:12:02.949]    <control if="canReadPins" while="" timeout="0" info="">
[16:12:02.949]      // if-block "canReadPins"
[16:12:02.949]        // =>  TRUE
[16:12:02.949]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:12:02.949]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:12:02.949]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:12:02.949]        // while-condition  =>  FALSE
[16:12:02.949]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:12:02.949]      </control>
[16:12:02.949]      // end if-block "canReadPins"
[16:12:02.949]    </control>
[16:12:02.949]    <control if="!canReadPins" while="" timeout="0" info="">
[16:12:02.949]      // if-block "!canReadPins"
[16:12:02.949]        // =>  FALSE
[16:12:02.949]      // skip if-block "!canReadPins"
[16:12:02.949]    </control>
[16:12:02.949]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:12:02.949]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:12:02.949]        // =>  TRUE
[16:12:02.949]      <block atomic="false" info="">
[16:12:02.949]        WriteAP(0x00, 0x190008);
[16:12:02.949]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:12:02.949]        WriteAP(0xF0, 0x01);
[16:12:02.959]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:12:02.959]      </block>
[16:12:02.959]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:12:02.959]    </control>
[16:12:02.959]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:12:02.959]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:12:02.959]        // =>  FALSE
[16:12:02.959]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:12:02.959]    </control>
[16:12:02.959]    <block atomic="false" info="">
[16:12:02.959]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:12:02.959]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:12:02.959]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:12:02.959]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:12:02.959]      __ap = 0; //lets make sure we reset the access point selection
[16:12:02.959]        // -> [__ap <= 0x00000000]
[16:12:02.959]    </block>
[16:12:02.959]  </sequence>
[16:12:02.959]  
[16:12:02.979]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:12:02.979]  
[16:12:02.989]  <debugvars>
[16:12:02.989]    // Pre-defined
[16:12:02.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:02.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:02.989]    __dp=0x00000000
[16:12:02.989]    __ap=0x00000000
[16:12:02.989]    __traceout=0x00000000      (Trace Disabled)
[16:12:02.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:02.989]    __FlashAddr=0x00000000
[16:12:02.989]    __FlashLen=0x00000000
[16:12:02.989]    __FlashArg=0x00000000
[16:12:02.989]    __FlashOp=0x00000000
[16:12:02.989]    __Result=0x00000000
[16:12:02.989]  </debugvars>
[16:12:02.989]  
[16:12:02.989]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:12:02.989]    <block atomic="false" info="">
[16:12:02.989]      __var deviceID = 0;
[16:12:02.989]        // -> [deviceID <= 0x00000000]
[16:12:02.989]      __var version = 0;
[16:12:02.989]        // -> [version <= 0x00000000]
[16:12:02.989]      __var partNum = 0;
[16:12:02.989]        // -> [partNum <= 0x00000000]
[16:12:02.989]      __var manuf = 0;
[16:12:02.989]        // -> [manuf <= 0x00000000]
[16:12:02.989]      __var isMSPM0G1X0X_G3X0X = 0;
[16:12:02.989]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:12:02.989]      __var isProduction = 0;
[16:12:02.989]        // -> [isProduction <= 0x00000000]
[16:12:02.989]      __var continueId = 0;
[16:12:02.989]        // -> [continueId <= 0x00000000]
[16:12:02.989]      deviceID =   Read32(0x41C40004);
[16:12:02.989]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:12:02.989]        // -> [deviceID <= 0x2BB8802F]
[16:12:02.989]      version = deviceID >> 28;
[16:12:02.989]        // -> [version <= 0x00000002]
[16:12:02.989]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:12:02.989]        // -> [partNum <= 0x0000BB88]
[16:12:02.989]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:12:02.989]        // -> [manuf <= 0x00000017]
[16:12:02.989]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:12:02.989]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:12:02.989]      isProduction = (version > 0);
[16:12:02.989]        // -> [isProduction <= 0x00000001]
[16:12:02.989]    </block>
[16:12:02.989]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:12:02.989]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:12:02.989]        // =>  FALSE
[16:12:02.989]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:12:02.989]    </control>
[16:12:02.989]    <control if="continueId == 4" while="" timeout="0" info="">
[16:12:02.999]      // if-block "continueId == 4"
[16:12:02.999]        // =>  FALSE
[16:12:02.999]      // skip if-block "continueId == 4"
[16:12:02.999]    </control>
[16:12:02.999]    <control if="!isProduction" while="" timeout="0" info="">
[16:12:02.999]      // if-block "!isProduction"
[16:12:02.999]        // =>  FALSE
[16:12:02.999]      // skip if-block "!isProduction"
[16:12:02.999]    </control>
[16:12:02.999]  </sequence>
[16:12:02.999]  
[16:18:50.635]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:18:50.635]  
[16:18:50.646]  <debugvars>
[16:18:50.646]    // Pre-defined
[16:18:50.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:50.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:50.647]    __dp=0x00000000
[16:18:50.647]    __ap=0x00000000
[16:18:50.647]    __traceout=0x00000000      (Trace Disabled)
[16:18:50.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:50.647]    __FlashAddr=0x00000000
[16:18:50.647]    __FlashLen=0x00000000
[16:18:50.647]    __FlashArg=0x00000000
[16:18:50.647]    __FlashOp=0x00000000
[16:18:50.647]    __Result=0x00000000
[16:18:50.647]  </debugvars>
[16:18:50.647]  
[16:18:50.647]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:18:50.647]    <block atomic="false" info="">
[16:18:50.647]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:18:50.647]        // -> [isSWJ <= 0x00000001]
[16:18:50.647]      __var hasDormant = __protocol & 0x00020000;
[16:18:50.647]        // -> [hasDormant <= 0x00000000]
[16:18:50.647]      __var protType   = __protocol & 0x0000FFFF;
[16:18:50.647]        // -> [protType <= 0x00000002]
[16:18:50.647]    </block>
[16:18:50.647]    <control if="protType == 1" while="" timeout="0" info="">
[16:18:50.647]      // if-block "protType == 1"
[16:18:50.647]        // =>  FALSE
[16:18:50.647]      // skip if-block "protType == 1"
[16:18:50.647]    </control>
[16:18:50.647]    <control if="protType == 2" while="" timeout="0" info="">
[16:18:50.647]      // if-block "protType == 2"
[16:18:50.647]        // =>  TRUE
[16:18:50.647]      <control if="isSWJ" while="" timeout="0" info="">
[16:18:50.647]        // if-block "isSWJ"
[16:18:50.647]          // =>  TRUE
[16:18:50.647]        <control if="hasDormant" while="" timeout="0" info="">
[16:18:50.647]          // if-block "hasDormant"
[16:18:50.647]            // =>  FALSE
[16:18:50.647]          // skip if-block "hasDormant"
[16:18:50.647]        </control>
[16:18:50.647]        <control if="!hasDormant" while="" timeout="0" info="">
[16:18:50.647]          // if-block "!hasDormant"
[16:18:50.647]            // =>  TRUE
[16:18:50.647]          <block atomic="false" info="">
[16:18:50.647]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:18:50.647]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:50.647]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:18:50.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:18:50.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:18:50.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:50.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:18:50.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:18:50.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:18:50.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:50.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:18:50.655]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:18:50.655]          </block>
[16:18:50.655]          // end if-block "!hasDormant"
[16:18:50.655]        </control>
[16:18:50.655]        // end if-block "isSWJ"
[16:18:50.655]      </control>
[16:18:50.655]      <control if="!isSWJ" while="" timeout="0" info="">
[16:18:50.655]        // if-block "!isSWJ"
[16:18:50.655]          // =>  FALSE
[16:18:50.655]        // skip if-block "!isSWJ"
[16:18:50.655]      </control>
[16:18:50.655]      <block atomic="false" info="">
[16:18:50.655]        ReadDP(0x0);
[16:18:50.655]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:18:50.655]      </block>
[16:18:50.655]      // end if-block "protType == 2"
[16:18:50.655]    </control>
[16:18:50.655]  </sequence>
[16:18:50.655]  
[16:18:50.667]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:18:50.667]  
[16:18:50.667]  <debugvars>
[16:18:50.667]    // Pre-defined
[16:18:50.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:50.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:50.667]    __dp=0x00000000
[16:18:50.667]    __ap=0x00000000
[16:18:50.667]    __traceout=0x00000000      (Trace Disabled)
[16:18:50.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:50.667]    __FlashAddr=0x00000000
[16:18:50.667]    __FlashLen=0x00000000
[16:18:50.667]    __FlashArg=0x00000000
[16:18:50.667]    __FlashOp=0x00000000
[16:18:50.667]    __Result=0x00000000
[16:18:50.667]  </debugvars>
[16:18:50.667]  
[16:18:50.667]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:18:50.667]    <block atomic="false" info="">
[16:18:50.667]      __var SW_DP_ABORT       = 0x0;
[16:18:50.667]        // -> [SW_DP_ABORT <= 0x00000000]
[16:18:50.667]      __var DP_CTRL_STAT      = 0x4;
[16:18:50.667]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:18:50.667]      __var DP_SELECT         = 0x8;
[16:18:50.667]        // -> [DP_SELECT <= 0x00000008]
[16:18:50.667]      __var powered_down      = 0;
[16:18:50.667]        // -> [powered_down <= 0x00000000]
[16:18:50.667]      WriteDP(DP_SELECT, 0x00000000);
[16:18:50.676]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:18:50.676]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:18:50.676]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:18:50.676]        // -> [powered_down <= 0x00000001]
[16:18:50.676]    </block>
[16:18:50.676]    <control if="powered_down" while="" timeout="0" info="">
[16:18:50.676]      // if-block "powered_down"
[16:18:50.676]        // =>  TRUE
[16:18:50.676]      <block atomic="false" info="">
[16:18:50.676]        Message(0, "Debug/System power-up request sent");
[16:18:50.681]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:18:50.681]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:18:50.681]      </block>
[16:18:50.681]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:18:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:18:50.684]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:18:50.684]        // while-condition  =>  FALSE
[16:18:50.684]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:18:50.685]      </control>
[16:18:50.685]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:18:50.685]        // if-block "(__protocol & 0xFFFF) == 1"
[16:18:50.685]          // =>  FALSE
[16:18:50.685]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:18:50.685]      </control>
[16:18:50.685]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:18:50.685]        // if-block "(__protocol & 0xFFFF) == 2"
[16:18:50.685]          // =>  TRUE
[16:18:50.685]        <block atomic="false" info="">
[16:18:50.685]          Message(0, "executing SWD power up");
[16:18:50.688]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:18:50.691]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:18:50.691]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:18:50.696]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:18:50.696]        </block>
[16:18:50.696]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:18:50.696]      </control>
[16:18:50.696]      // end if-block "powered_down"
[16:18:50.696]    </control>
[16:18:50.696]    <block atomic="false" info="">
[16:18:50.696]      __var DEBUG_PORT_VAL    = 0;
[16:18:50.696]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:18:50.696]      __var ACCESS_POINT_VAL  = 0;
[16:18:50.696]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:18:50.696]      __ap = 1; 
[16:18:50.696]        // -> [__ap <= 0x00000001]
[16:18:50.696]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:18:50.696]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:18:50.696]      __ap = 4;
[16:18:50.696]        // -> [__ap <= 0x00000004]
[16:18:50.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:50.706]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:18:50.706]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:18:50.706]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:50.706]    </block>
[16:18:50.706]    <block atomic="false" info="">
[16:18:50.706]      __var nReset = 0x80;
[16:18:50.706]        // -> [nReset <= 0x00000080]
[16:18:50.706]      __var canReadPins = 0;
[16:18:50.706]        // -> [canReadPins <= 0x00000000]
[16:18:50.706]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:18:50.706]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:18:50.706]        // -> [canReadPins <= 0x00000001]
[16:18:50.706]    </block>
[16:18:50.706]    <control if="" while="1" timeout="200" info="">
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.706]      // while "1"  (timeout="200")
[16:18:50.706]      // while-condition  =>  TRUE
[16:18:50.716]      // while "1"  (timeout="200")
[16:18:50.716]      // while  =>  TIMEOUT
[16:18:50.716]      // end while "1"
[16:18:50.716]    </control>
[16:18:50.716]    <control if="canReadPins" while="" timeout="0" info="">
[16:18:50.716]      // if-block "canReadPins"
[16:18:50.716]        // =>  TRUE
[16:18:50.716]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:18:50.716]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:18:50.718]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:18:50.718]        // while-condition  =>  FALSE
[16:18:50.718]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:18:50.718]      </control>
[16:18:50.718]      // end if-block "canReadPins"
[16:18:50.718]    </control>
[16:18:50.718]    <control if="!canReadPins" while="" timeout="0" info="">
[16:18:50.718]      // if-block "!canReadPins"
[16:18:50.718]        // =>  FALSE
[16:18:50.718]      // skip if-block "!canReadPins"
[16:18:50.718]    </control>
[16:18:50.718]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:18:50.718]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:50.718]        // =>  TRUE
[16:18:50.718]      <block atomic="false" info="">
[16:18:50.718]        WriteAP(0x00, 0x190008);
[16:18:50.718]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:50.718]        WriteAP(0xF0, 0x01);
[16:18:50.718]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:50.718]      </block>
[16:18:50.718]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:50.718]    </control>
[16:18:50.718]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:18:50.718]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:50.718]        // =>  FALSE
[16:18:50.718]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:50.718]    </control>
[16:18:50.726]    <block atomic="false" info="">
[16:18:50.726]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:50.726]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:18:50.726]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:18:50.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:50.726]      __ap = 0; //lets make sure we reset the access point selection
[16:18:50.726]        // -> [__ap <= 0x00000000]
[16:18:50.726]    </block>
[16:18:50.726]  </sequence>
[16:18:50.726]  
[16:18:50.746]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:18:50.746]  
[16:18:50.746]  <debugvars>
[16:18:50.746]    // Pre-defined
[16:18:50.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:50.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:18:50.746]    __dp=0x00000000
[16:18:50.746]    __ap=0x00000000
[16:18:50.746]    __traceout=0x00000000      (Trace Disabled)
[16:18:50.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:50.746]    __FlashAddr=0x00000000
[16:18:50.746]    __FlashLen=0x00000000
[16:18:50.746]    __FlashArg=0x00000000
[16:18:50.746]    __FlashOp=0x00000000
[16:18:50.746]    __Result=0x00000000
[16:18:50.746]  </debugvars>
[16:18:50.746]  
[16:18:50.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:18:50.756]    <block atomic="false" info="">
[16:18:50.756]      __var deviceID = 0;
[16:18:50.756]        // -> [deviceID <= 0x00000000]
[16:18:50.756]      __var version = 0;
[16:18:50.756]        // -> [version <= 0x00000000]
[16:18:50.756]      __var partNum = 0;
[16:18:50.756]        // -> [partNum <= 0x00000000]
[16:18:50.756]      __var manuf = 0;
[16:18:50.757]        // -> [manuf <= 0x00000000]
[16:18:50.757]      __var isMSPM0G1X0X_G3X0X = 0;
[16:18:50.757]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:18:50.757]      __var isProduction = 0;
[16:18:50.757]        // -> [isProduction <= 0x00000000]
[16:18:50.758]      __var continueId = 0;
[16:18:50.758]        // -> [continueId <= 0x00000000]
[16:18:50.758]      deviceID =   Read32(0x41C40004);
[16:18:50.758]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:18:50.758]        // -> [deviceID <= 0x2BB8802F]
[16:18:50.758]      version = deviceID >> 28;
[16:18:50.758]        // -> [version <= 0x00000002]
[16:18:50.758]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:18:50.758]        // -> [partNum <= 0x0000BB88]
[16:18:50.758]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:18:50.758]        // -> [manuf <= 0x00000017]
[16:18:50.758]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:18:50.758]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:18:50.758]      isProduction = (version > 0);
[16:18:50.758]        // -> [isProduction <= 0x00000001]
[16:18:50.758]    </block>
[16:18:50.758]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:18:50.758]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:18:50.758]        // =>  FALSE
[16:18:50.758]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:18:50.758]    </control>
[16:18:50.758]    <control if="continueId == 4" while="" timeout="0" info="">
[16:18:50.758]      // if-block "continueId == 4"
[16:18:50.758]        // =>  FALSE
[16:18:50.758]      // skip if-block "continueId == 4"
[16:18:50.758]    </control>
[16:18:50.758]    <control if="!isProduction" while="" timeout="0" info="">
[16:18:50.758]      // if-block "!isProduction"
[16:18:50.758]        // =>  FALSE
[16:18:50.758]      // skip if-block "!isProduction"
[16:18:50.758]    </control>
[16:18:50.758]  </sequence>
[16:18:50.758]  
[16:24:51.090]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:24:51.090]  
[16:24:51.104]  <debugvars>
[16:24:51.104]    // Pre-defined
[16:24:51.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:51.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:51.104]    __dp=0x00000000
[16:24:51.104]    __ap=0x00000000
[16:24:51.104]    __traceout=0x00000000      (Trace Disabled)
[16:24:51.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:51.104]    __FlashAddr=0x00000000
[16:24:51.104]    __FlashLen=0x00000000
[16:24:51.104]    __FlashArg=0x00000000
[16:24:51.104]    __FlashOp=0x00000000
[16:24:51.104]    __Result=0x00000000
[16:24:51.104]  </debugvars>
[16:24:51.104]  
[16:24:51.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:24:51.104]    <block atomic="false" info="">
[16:24:51.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:24:51.104]        // -> [isSWJ <= 0x00000001]
[16:24:51.104]      __var hasDormant = __protocol & 0x00020000;
[16:24:51.104]        // -> [hasDormant <= 0x00000000]
[16:24:51.104]      __var protType   = __protocol & 0x0000FFFF;
[16:24:51.104]        // -> [protType <= 0x00000002]
[16:24:51.104]    </block>
[16:24:51.104]    <control if="protType == 1" while="" timeout="0" info="">
[16:24:51.104]      // if-block "protType == 1"
[16:24:51.104]        // =>  FALSE
[16:24:51.104]      // skip if-block "protType == 1"
[16:24:51.104]    </control>
[16:24:51.104]    <control if="protType == 2" while="" timeout="0" info="">
[16:24:51.104]      // if-block "protType == 2"
[16:24:51.104]        // =>  TRUE
[16:24:51.104]      <control if="isSWJ" while="" timeout="0" info="">
[16:24:51.104]        // if-block "isSWJ"
[16:24:51.104]          // =>  TRUE
[16:24:51.104]        <control if="hasDormant" while="" timeout="0" info="">
[16:24:51.109]          // if-block "hasDormant"
[16:24:51.109]            // =>  FALSE
[16:24:51.109]          // skip if-block "hasDormant"
[16:24:51.109]        </control>
[16:24:51.109]        <control if="!hasDormant" while="" timeout="0" info="">
[16:24:51.110]          // if-block "!hasDormant"
[16:24:51.110]            // =>  TRUE
[16:24:51.110]          <block atomic="false" info="">
[16:24:51.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:24:51.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:51.110]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:24:51.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:24:51.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:24:51.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:51.110]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:24:51.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:24:51.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:24:51.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:51.119]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:24:51.120]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:24:51.120]          </block>
[16:24:51.120]          // end if-block "!hasDormant"
[16:24:51.120]        </control>
[16:24:51.120]        // end if-block "isSWJ"
[16:24:51.120]      </control>
[16:24:51.120]      <control if="!isSWJ" while="" timeout="0" info="">
[16:24:51.120]        // if-block "!isSWJ"
[16:24:51.120]          // =>  FALSE
[16:24:51.120]        // skip if-block "!isSWJ"
[16:24:51.120]      </control>
[16:24:51.120]      <block atomic="false" info="">
[16:24:51.120]        ReadDP(0x0);
[16:24:51.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:24:51.123]      </block>
[16:24:51.123]      // end if-block "protType == 2"
[16:24:51.123]    </control>
[16:24:51.123]  </sequence>
[16:24:51.123]  
[16:24:51.123]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:24:51.123]  
[16:24:51.123]  <debugvars>
[16:24:51.123]    // Pre-defined
[16:24:51.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:51.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:51.129]    __dp=0x00000000
[16:24:51.129]    __ap=0x00000000
[16:24:51.129]    __traceout=0x00000000      (Trace Disabled)
[16:24:51.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:51.129]    __FlashAddr=0x00000000
[16:24:51.129]    __FlashLen=0x00000000
[16:24:51.129]    __FlashArg=0x00000000
[16:24:51.131]    __FlashOp=0x00000000
[16:24:51.131]    __Result=0x00000000
[16:24:51.131]  </debugvars>
[16:24:51.131]  
[16:24:51.131]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:24:51.131]    <block atomic="false" info="">
[16:24:51.131]      __var SW_DP_ABORT       = 0x0;
[16:24:51.131]        // -> [SW_DP_ABORT <= 0x00000000]
[16:24:51.131]      __var DP_CTRL_STAT      = 0x4;
[16:24:51.131]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:24:51.131]      __var DP_SELECT         = 0x8;
[16:24:51.131]        // -> [DP_SELECT <= 0x00000008]
[16:24:51.131]      __var powered_down      = 0;
[16:24:51.131]        // -> [powered_down <= 0x00000000]
[16:24:51.131]      WriteDP(DP_SELECT, 0x00000000);
[16:24:51.131]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:24:51.131]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:24:51.131]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:24:51.131]        // -> [powered_down <= 0x00000001]
[16:24:51.131]    </block>
[16:24:51.131]    <control if="powered_down" while="" timeout="0" info="">
[16:24:51.131]      // if-block "powered_down"
[16:24:51.131]        // =>  TRUE
[16:24:51.131]      <block atomic="false" info="">
[16:24:51.131]        Message(0, "Debug/System power-up request sent");
[16:24:51.140]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:24:51.142]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:24:51.142]      </block>
[16:24:51.142]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:24:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:24:51.144]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:24:51.144]        // while-condition  =>  FALSE
[16:24:51.144]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:24:51.144]      </control>
[16:24:51.145]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:24:51.145]        // if-block "(__protocol & 0xFFFF) == 1"
[16:24:51.145]          // =>  FALSE
[16:24:51.145]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:24:51.145]      </control>
[16:24:51.145]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:24:51.145]        // if-block "(__protocol & 0xFFFF) == 2"
[16:24:51.145]          // =>  TRUE
[16:24:51.145]        <block atomic="false" info="">
[16:24:51.145]          Message(0, "executing SWD power up");
[16:24:51.148]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:24:51.151]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:24:51.151]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:24:51.153]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:24:51.153]        </block>
[16:24:51.153]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:24:51.153]      </control>
[16:24:51.153]      // end if-block "powered_down"
[16:24:51.153]    </control>
[16:24:51.153]    <block atomic="false" info="">
[16:24:51.153]      __var DEBUG_PORT_VAL    = 0;
[16:24:51.154]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:24:51.154]      __var ACCESS_POINT_VAL  = 0;
[16:24:51.154]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:24:51.154]      __ap = 1; 
[16:24:51.154]        // -> [__ap <= 0x00000001]
[16:24:51.154]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:24:51.154]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:24:51.154]      __ap = 4;
[16:24:51.154]        // -> [__ap <= 0x00000004]
[16:24:51.154]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:24:51.161]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:24:51.161]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:24:51.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:24:51.161]    </block>
[16:24:51.161]    <block atomic="false" info="">
[16:24:51.161]      __var nReset = 0x80;
[16:24:51.161]        // -> [nReset <= 0x00000080]
[16:24:51.161]      __var canReadPins = 0;
[16:24:51.161]        // -> [canReadPins <= 0x00000000]
[16:24:51.161]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:24:51.161]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:24:51.161]        // -> [canReadPins <= 0x00000001]
[16:24:51.161]    </block>
[16:24:51.161]    <control if="" while="1" timeout="200" info="">
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.161]      // while-condition  =>  TRUE
[16:24:51.161]      // while "1"  (timeout="200")
[16:24:51.170]      // while-condition  =>  TRUE
[16:24:51.170]      // while "1"  (timeout="200")
[16:24:51.170]      // while-condition  =>  TRUE
[16:24:51.170]      // while "1"  (timeout="200")
[16:24:51.170]      // while-condition  =>  TRUE
[16:24:51.170]      // while "1"  (timeout="200")
[16:24:51.170]      // while-condition  =>  TRUE
[16:24:51.170]      // while "1"  (timeout="200")
[16:24:51.170]      // while-condition  =>  TRUE
[16:24:51.171]      // while "1"  (timeout="200")
[16:24:51.171]      // while-condition  =>  TRUE
[16:24:51.171]      // while "1"  (timeout="200")
[16:24:51.171]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.172]      // while "1"  (timeout="200")
[16:24:51.172]      // while-condition  =>  TRUE
[16:24:51.180]      // while "1"  (timeout="200")
[16:24:51.180]      // while  =>  TIMEOUT
[16:24:51.180]      // end while "1"
[16:24:51.180]    </control>
[16:24:51.180]    <control if="canReadPins" while="" timeout="0" info="">
[16:24:51.180]      // if-block "canReadPins"
[16:24:51.180]        // =>  TRUE
[16:24:51.180]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:24:51.180]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:24:51.180]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:24:51.180]        // while-condition  =>  FALSE
[16:24:51.180]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:24:51.180]      </control>
[16:24:51.180]      // end if-block "canReadPins"
[16:24:51.180]    </control>
[16:24:51.180]    <control if="!canReadPins" while="" timeout="0" info="">
[16:24:51.180]      // if-block "!canReadPins"
[16:24:51.180]        // =>  FALSE
[16:24:51.180]      // skip if-block "!canReadPins"
[16:24:51.180]    </control>
[16:24:51.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:24:51.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:24:51.180]        // =>  TRUE
[16:24:51.180]      <block atomic="false" info="">
[16:24:51.180]        WriteAP(0x00, 0x190008);
[16:24:51.180]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:24:51.180]        WriteAP(0xF0, 0x01);
[16:24:51.180]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:24:51.180]      </block>
[16:24:51.180]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:24:51.180]    </control>
[16:24:51.190]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:24:51.190]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:24:51.190]        // =>  FALSE
[16:24:51.190]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:24:51.190]    </control>
[16:24:51.190]    <block atomic="false" info="">
[16:24:51.190]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:24:51.190]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:24:51.190]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:24:51.190]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:24:51.190]      __ap = 0; //lets make sure we reset the access point selection
[16:24:51.190]        // -> [__ap <= 0x00000000]
[16:24:51.190]    </block>
[16:24:51.190]  </sequence>
[16:24:51.190]  
[16:24:51.212]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:24:51.212]  
[16:24:51.212]  <debugvars>
[16:24:51.212]    // Pre-defined
[16:24:51.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:51.212]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:51.212]    __dp=0x00000000
[16:24:51.212]    __ap=0x00000000
[16:24:51.212]    __traceout=0x00000000      (Trace Disabled)
[16:24:51.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:51.212]    __FlashAddr=0x00000000
[16:24:51.212]    __FlashLen=0x00000000
[16:24:51.212]    __FlashArg=0x00000000
[16:24:51.212]    __FlashOp=0x00000000
[16:24:51.212]    __Result=0x00000000
[16:24:51.212]  </debugvars>
[16:24:51.212]  
[16:24:51.212]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:24:51.212]    <block atomic="false" info="">
[16:24:51.212]      __var deviceID = 0;
[16:24:51.212]        // -> [deviceID <= 0x00000000]
[16:24:51.212]      __var version = 0;
[16:24:51.212]        // -> [version <= 0x00000000]
[16:24:51.212]      __var partNum = 0;
[16:24:51.212]        // -> [partNum <= 0x00000000]
[16:24:51.212]      __var manuf = 0;
[16:24:51.212]        // -> [manuf <= 0x00000000]
[16:24:51.221]      __var isMSPM0G1X0X_G3X0X = 0;
[16:24:51.221]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:24:51.221]      __var isProduction = 0;
[16:24:51.221]        // -> [isProduction <= 0x00000000]
[16:24:51.221]      __var continueId = 0;
[16:24:51.221]        // -> [continueId <= 0x00000000]
[16:24:51.221]      deviceID =   Read32(0x41C40004);
[16:24:51.221]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:24:51.221]        // -> [deviceID <= 0x2BB8802F]
[16:24:51.221]      version = deviceID >> 28;
[16:24:51.221]        // -> [version <= 0x00000002]
[16:24:51.221]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:24:51.221]        // -> [partNum <= 0x0000BB88]
[16:24:51.221]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:24:51.221]        // -> [manuf <= 0x00000017]
[16:24:51.221]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:24:51.221]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:24:51.221]      isProduction = (version > 0);
[16:24:51.221]        // -> [isProduction <= 0x00000001]
[16:24:51.221]    </block>
[16:24:51.221]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:24:51.221]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:24:51.221]        // =>  FALSE
[16:24:51.221]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:24:51.221]    </control>
[16:24:51.221]    <control if="continueId == 4" while="" timeout="0" info="">
[16:24:51.221]      // if-block "continueId == 4"
[16:24:51.221]        // =>  FALSE
[16:24:51.221]      // skip if-block "continueId == 4"
[16:24:51.221]    </control>
[16:24:51.221]    <control if="!isProduction" while="" timeout="0" info="">
[16:24:51.221]      // if-block "!isProduction"
[16:24:51.221]        // =>  FALSE
[16:24:51.221]      // skip if-block "!isProduction"
[16:24:51.221]    </control>
[16:24:51.221]  </sequence>
[16:24:51.221]  
[16:26:24.732]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:26:24.732]  
[16:26:24.747]  <debugvars>
[16:26:24.747]    // Pre-defined
[16:26:24.747]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:24.747]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:24.747]    __dp=0x00000000
[16:26:24.747]    __ap=0x00000000
[16:26:24.747]    __traceout=0x00000000      (Trace Disabled)
[16:26:24.747]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:24.747]    __FlashAddr=0x00000000
[16:26:24.747]    __FlashLen=0x00000000
[16:26:24.747]    __FlashArg=0x00000000
[16:26:24.747]    __FlashOp=0x00000000
[16:26:24.747]    __Result=0x00000000
[16:26:24.747]  </debugvars>
[16:26:24.747]  
[16:26:24.747]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:26:24.747]    <block atomic="false" info="">
[16:26:24.747]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:26:24.747]        // -> [isSWJ <= 0x00000001]
[16:26:24.747]      __var hasDormant = __protocol & 0x00020000;
[16:26:24.747]        // -> [hasDormant <= 0x00000000]
[16:26:24.747]      __var protType   = __protocol & 0x0000FFFF;
[16:26:24.747]        // -> [protType <= 0x00000002]
[16:26:24.747]    </block>
[16:26:24.747]    <control if="protType == 1" while="" timeout="0" info="">
[16:26:24.747]      // if-block "protType == 1"
[16:26:24.747]        // =>  FALSE
[16:26:24.747]      // skip if-block "protType == 1"
[16:26:24.747]    </control>
[16:26:24.747]    <control if="protType == 2" while="" timeout="0" info="">
[16:26:24.747]      // if-block "protType == 2"
[16:26:24.747]        // =>  TRUE
[16:26:24.747]      <control if="isSWJ" while="" timeout="0" info="">
[16:26:24.747]        // if-block "isSWJ"
[16:26:24.747]          // =>  TRUE
[16:26:24.747]        <control if="hasDormant" while="" timeout="0" info="">
[16:26:24.747]          // if-block "hasDormant"
[16:26:24.747]            // =>  FALSE
[16:26:24.747]          // skip if-block "hasDormant"
[16:26:24.747]        </control>
[16:26:24.747]        <control if="!hasDormant" while="" timeout="0" info="">
[16:26:24.747]          // if-block "!hasDormant"
[16:26:24.747]            // =>  TRUE
[16:26:24.747]          <block atomic="false" info="">
[16:26:24.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:26:24.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:24.753]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:26:24.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:26:24.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:26:24.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:24.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:26:24.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:26:24.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:26:24.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:24.762]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:26:24.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:26:24.763]          </block>
[16:26:24.763]          // end if-block "!hasDormant"
[16:26:24.763]        </control>
[16:26:24.763]        // end if-block "isSWJ"
[16:26:24.763]      </control>
[16:26:24.763]      <control if="!isSWJ" while="" timeout="0" info="">
[16:26:24.763]        // if-block "!isSWJ"
[16:26:24.763]          // =>  FALSE
[16:26:24.763]        // skip if-block "!isSWJ"
[16:26:24.763]      </control>
[16:26:24.763]      <block atomic="false" info="">
[16:26:24.763]        ReadDP(0x0);
[16:26:24.763]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:26:24.763]      </block>
[16:26:24.763]      // end if-block "protType == 2"
[16:26:24.763]    </control>
[16:26:24.763]  </sequence>
[16:26:24.763]  
[16:26:24.772]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:26:24.772]  
[16:26:24.772]  <debugvars>
[16:26:24.772]    // Pre-defined
[16:26:24.772]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:24.772]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:24.772]    __dp=0x00000000
[16:26:24.772]    __ap=0x00000000
[16:26:24.772]    __traceout=0x00000000      (Trace Disabled)
[16:26:24.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:24.772]    __FlashAddr=0x00000000
[16:26:24.772]    __FlashLen=0x00000000
[16:26:24.772]    __FlashArg=0x00000000
[16:26:24.772]    __FlashOp=0x00000000
[16:26:24.772]    __Result=0x00000000
[16:26:24.772]  </debugvars>
[16:26:24.772]  
[16:26:24.772]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:26:24.772]    <block atomic="false" info="">
[16:26:24.772]      __var SW_DP_ABORT       = 0x0;
[16:26:24.772]        // -> [SW_DP_ABORT <= 0x00000000]
[16:26:24.772]      __var DP_CTRL_STAT      = 0x4;
[16:26:24.772]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:26:24.772]      __var DP_SELECT         = 0x8;
[16:26:24.772]        // -> [DP_SELECT <= 0x00000008]
[16:26:24.772]      __var powered_down      = 0;
[16:26:24.772]        // -> [powered_down <= 0x00000000]
[16:26:24.772]      WriteDP(DP_SELECT, 0x00000000);
[16:26:24.772]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:26:24.772]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:26:24.772]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:26:24.772]        // -> [powered_down <= 0x00000001]
[16:26:24.772]    </block>
[16:26:24.772]    <control if="powered_down" while="" timeout="0" info="">
[16:26:24.772]      // if-block "powered_down"
[16:26:24.772]        // =>  TRUE
[16:26:24.772]      <block atomic="false" info="">
[16:26:24.772]        Message(0, "Debug/System power-up request sent");
[16:26:24.772]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:26:24.782]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:26:24.784]      </block>
[16:26:24.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:26:24.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:26:24.784]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:26:24.784]        // while-condition  =>  FALSE
[16:26:24.784]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:26:24.784]      </control>
[16:26:24.784]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:26:24.784]        // if-block "(__protocol & 0xFFFF) == 1"
[16:26:24.784]          // =>  FALSE
[16:26:24.784]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:26:24.784]      </control>
[16:26:24.784]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:26:24.784]        // if-block "(__protocol & 0xFFFF) == 2"
[16:26:24.784]          // =>  TRUE
[16:26:24.784]        <block atomic="false" info="">
[16:26:24.784]          Message(0, "executing SWD power up");
[16:26:24.784]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:26:24.784]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:26:24.784]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:26:24.792]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:26:24.792]        </block>
[16:26:24.792]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:26:24.793]      </control>
[16:26:24.793]      // end if-block "powered_down"
[16:26:24.793]    </control>
[16:26:24.793]    <block atomic="false" info="">
[16:26:24.793]      __var DEBUG_PORT_VAL    = 0;
[16:26:24.793]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:26:24.793]      __var ACCESS_POINT_VAL  = 0;
[16:26:24.793]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:26:24.793]      __ap = 1; 
[16:26:24.793]        // -> [__ap <= 0x00000001]
[16:26:24.793]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:26:24.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:26:24.798]      __ap = 4;
[16:26:24.798]        // -> [__ap <= 0x00000004]
[16:26:24.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:24.801]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:26:24.801]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:26:24.801]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:24.804]    </block>
[16:26:24.804]    <block atomic="false" info="">
[16:26:24.804]      __var nReset = 0x80;
[16:26:24.804]        // -> [nReset <= 0x00000080]
[16:26:24.804]      __var canReadPins = 0;
[16:26:24.804]        // -> [canReadPins <= 0x00000000]
[16:26:24.804]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:26:24.806]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:26:24.806]        // -> [canReadPins <= 0x00000001]
[16:26:24.806]    </block>
[16:26:24.806]    <control if="" while="1" timeout="200" info="">
[16:26:24.806]      // while "1"  (timeout="200")
[16:26:24.806]      // while-condition  =>  TRUE
[16:26:24.806]      // while "1"  (timeout="200")
[16:26:24.806]      // while-condition  =>  TRUE
[16:26:24.808]      // while "1"  (timeout="200")
[16:26:24.808]      // while-condition  =>  TRUE
[16:26:24.808]      // while "1"  (timeout="200")
[16:26:24.808]      // while-condition  =>  TRUE
[16:26:24.808]      // while "1"  (timeout="200")
[16:26:24.808]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.809]      // while "1"  (timeout="200")
[16:26:24.809]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.811]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.811]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.811]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.811]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.811]      // while-condition  =>  TRUE
[16:26:24.811]      // while "1"  (timeout="200")
[16:26:24.812]      // while-condition  =>  TRUE
[16:26:24.812]      // while "1"  (timeout="200")
[16:26:24.812]      // while-condition  =>  TRUE
[16:26:24.812]      // while "1"  (timeout="200")
[16:26:24.812]      // while-condition  =>  TRUE
[16:26:24.812]      // while "1"  (timeout="200")
[16:26:24.812]      // while-condition  =>  TRUE
[16:26:24.812]      // while "1"  (timeout="200")
[16:26:24.812]      // while-condition  =>  TRUE
[16:26:24.812]      // while "1"  (timeout="200")
[16:26:24.813]      // while-condition  =>  TRUE
[16:26:24.813]      // while "1"  (timeout="200")
[16:26:24.813]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.814]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.814]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.814]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.814]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.814]      // while-condition  =>  TRUE
[16:26:24.814]      // while "1"  (timeout="200")
[16:26:24.815]      // while-condition  =>  TRUE
[16:26:24.815]      // while "1"  (timeout="200")
[16:26:24.815]      // while-condition  =>  TRUE
[16:26:24.815]      // while "1"  (timeout="200")
[16:26:24.815]      // while-condition  =>  TRUE
[16:26:24.815]      // while "1"  (timeout="200")
[16:26:24.815]      // while-condition  =>  TRUE
[16:26:24.815]      // while "1"  (timeout="200")
[16:26:24.816]      // while-condition  =>  TRUE
[16:26:24.816]      // while "1"  (timeout="200")
[16:26:24.816]      // while  =>  TIMEOUT
[16:26:24.816]      // end while "1"
[16:26:24.816]    </control>
[16:26:24.816]    <control if="canReadPins" while="" timeout="0" info="">
[16:26:24.816]      // if-block "canReadPins"
[16:26:24.816]        // =>  TRUE
[16:26:24.816]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:26:24.816]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:26:24.818]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:26:24.818]        // while-condition  =>  FALSE
[16:26:24.818]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:26:24.818]      </control>
[16:26:24.818]      // end if-block "canReadPins"
[16:26:24.818]    </control>
[16:26:24.818]    <control if="!canReadPins" while="" timeout="0" info="">
[16:26:24.820]      // if-block "!canReadPins"
[16:26:24.820]        // =>  FALSE
[16:26:24.820]      // skip if-block "!canReadPins"
[16:26:24.820]    </control>
[16:26:24.820]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:26:24.820]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:24.820]        // =>  TRUE
[16:26:24.820]      <block atomic="false" info="">
[16:26:24.820]        WriteAP(0x00, 0x190008);
[16:26:24.821]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:24.821]        WriteAP(0xF0, 0x01);
[16:26:24.826]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:24.826]      </block>
[16:26:24.826]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:24.826]    </control>
[16:26:24.826]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:26:24.826]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:24.826]        // =>  FALSE
[16:26:24.826]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:24.826]    </control>
[16:26:24.826]    <block atomic="false" info="">
[16:26:24.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:24.827]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:26:24.827]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:26:24.827]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:24.832]      __ap = 0; //lets make sure we reset the access point selection
[16:26:24.832]        // -> [__ap <= 0x00000000]
[16:26:24.832]    </block>
[16:26:24.834]  </sequence>
[16:26:24.834]  
[16:26:24.854]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:26:24.854]  
[16:26:24.854]  <debugvars>
[16:26:24.854]    // Pre-defined
[16:26:24.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:24.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:24.855]    __dp=0x00000000
[16:26:24.855]    __ap=0x00000000
[16:26:24.855]    __traceout=0x00000000      (Trace Disabled)
[16:26:24.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:24.855]    __FlashAddr=0x00000000
[16:26:24.855]    __FlashLen=0x00000000
[16:26:24.855]    __FlashArg=0x00000000
[16:26:24.855]    __FlashOp=0x00000000
[16:26:24.855]    __Result=0x00000000
[16:26:24.855]  </debugvars>
[16:26:24.856]  
[16:26:24.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:26:24.856]    <block atomic="false" info="">
[16:26:24.856]      __var deviceID = 0;
[16:26:24.856]        // -> [deviceID <= 0x00000000]
[16:26:24.856]      __var version = 0;
[16:26:24.856]        // -> [version <= 0x00000000]
[16:26:24.856]      __var partNum = 0;
[16:26:24.856]        // -> [partNum <= 0x00000000]
[16:26:24.856]      __var manuf = 0;
[16:26:24.856]        // -> [manuf <= 0x00000000]
[16:26:24.857]      __var isMSPM0G1X0X_G3X0X = 0;
[16:26:24.857]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:26:24.857]      __var isProduction = 0;
[16:26:24.857]        // -> [isProduction <= 0x00000000]
[16:26:24.857]      __var continueId = 0;
[16:26:24.857]        // -> [continueId <= 0x00000000]
[16:26:24.857]      deviceID =   Read32(0x41C40004);
[16:26:24.863]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:26:24.863]        // -> [deviceID <= 0x2BB8802F]
[16:26:24.863]      version = deviceID >> 28;
[16:26:24.863]        // -> [version <= 0x00000002]
[16:26:24.863]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:26:24.863]        // -> [partNum <= 0x0000BB88]
[16:26:24.863]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:26:24.863]        // -> [manuf <= 0x00000017]
[16:26:24.863]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:26:24.863]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:26:24.863]      isProduction = (version > 0);
[16:26:24.864]        // -> [isProduction <= 0x00000001]
[16:26:24.864]    </block>
[16:26:24.864]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:26:24.864]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:26:24.864]        // =>  FALSE
[16:26:24.864]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:26:24.864]    </control>
[16:26:24.864]    <control if="continueId == 4" while="" timeout="0" info="">
[16:26:24.864]      // if-block "continueId == 4"
[16:26:24.864]        // =>  FALSE
[16:26:24.864]      // skip if-block "continueId == 4"
[16:26:24.864]    </control>
[16:26:24.864]    <control if="!isProduction" while="" timeout="0" info="">
[16:26:24.864]      // if-block "!isProduction"
[16:26:24.864]        // =>  FALSE
[16:26:24.864]      // skip if-block "!isProduction"
[16:26:24.866]    </control>
[16:26:24.866]  </sequence>
[16:26:24.866]  
[16:26:58.551]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:26:58.551]  
[16:26:58.565]  <debugvars>
[16:26:58.565]    // Pre-defined
[16:26:58.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:58.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:58.565]    __dp=0x00000000
[16:26:58.565]    __ap=0x00000000
[16:26:58.565]    __traceout=0x00000000      (Trace Disabled)
[16:26:58.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:58.565]    __FlashAddr=0x00000000
[16:26:58.565]    __FlashLen=0x00000000
[16:26:58.565]    __FlashArg=0x00000000
[16:26:58.565]    __FlashOp=0x00000000
[16:26:58.565]    __Result=0x00000000
[16:26:58.565]  </debugvars>
[16:26:58.565]  
[16:26:58.565]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:26:58.565]    <block atomic="false" info="">
[16:26:58.565]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:26:58.565]        // -> [isSWJ <= 0x00000001]
[16:26:58.565]      __var hasDormant = __protocol & 0x00020000;
[16:26:58.565]        // -> [hasDormant <= 0x00000000]
[16:26:58.565]      __var protType   = __protocol & 0x0000FFFF;
[16:26:58.565]        // -> [protType <= 0x00000002]
[16:26:58.567]    </block>
[16:26:58.567]    <control if="protType == 1" while="" timeout="0" info="">
[16:26:58.567]      // if-block "protType == 1"
[16:26:58.567]        // =>  FALSE
[16:26:58.567]      // skip if-block "protType == 1"
[16:26:58.567]    </control>
[16:26:58.567]    <control if="protType == 2" while="" timeout="0" info="">
[16:26:58.567]      // if-block "protType == 2"
[16:26:58.567]        // =>  TRUE
[16:26:58.567]      <control if="isSWJ" while="" timeout="0" info="">
[16:26:58.567]        // if-block "isSWJ"
[16:26:58.567]          // =>  TRUE
[16:26:58.567]        <control if="hasDormant" while="" timeout="0" info="">
[16:26:58.569]          // if-block "hasDormant"
[16:26:58.569]            // =>  FALSE
[16:26:58.569]          // skip if-block "hasDormant"
[16:26:58.569]        </control>
[16:26:58.569]        <control if="!hasDormant" while="" timeout="0" info="">
[16:26:58.569]          // if-block "!hasDormant"
[16:26:58.569]            // =>  TRUE
[16:26:58.569]          <block atomic="false" info="">
[16:26:58.569]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:26:58.571]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:58.571]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:26:58.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:26:58.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:26:58.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:58.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:26:58.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:26:58.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:26:58.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:58.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:26:58.572]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:26:58.572]          </block>
[16:26:58.572]          // end if-block "!hasDormant"
[16:26:58.572]        </control>
[16:26:58.572]        // end if-block "isSWJ"
[16:26:58.572]      </control>
[16:26:58.572]      <control if="!isSWJ" while="" timeout="0" info="">
[16:26:58.572]        // if-block "!isSWJ"
[16:26:58.581]          // =>  FALSE
[16:26:58.581]        // skip if-block "!isSWJ"
[16:26:58.581]      </control>
[16:26:58.581]      <block atomic="false" info="">
[16:26:58.581]        ReadDP(0x0);
[16:26:58.581]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:26:58.581]      </block>
[16:26:58.581]      // end if-block "protType == 2"
[16:26:58.581]    </control>
[16:26:58.581]  </sequence>
[16:26:58.581]  
[16:26:58.581]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:26:58.581]  
[16:26:58.581]  <debugvars>
[16:26:58.581]    // Pre-defined
[16:26:58.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:58.581]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:58.581]    __dp=0x00000000
[16:26:58.581]    __ap=0x00000000
[16:26:58.581]    __traceout=0x00000000      (Trace Disabled)
[16:26:58.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:58.581]    __FlashAddr=0x00000000
[16:26:58.581]    __FlashLen=0x00000000
[16:26:58.581]    __FlashArg=0x00000000
[16:26:58.581]    __FlashOp=0x00000000
[16:26:58.581]    __Result=0x00000000
[16:26:58.581]  </debugvars>
[16:26:58.581]  
[16:26:58.581]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:26:58.581]    <block atomic="false" info="">
[16:26:58.581]      __var SW_DP_ABORT       = 0x0;
[16:26:58.581]        // -> [SW_DP_ABORT <= 0x00000000]
[16:26:58.581]      __var DP_CTRL_STAT      = 0x4;
[16:26:58.581]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:26:58.581]      __var DP_SELECT         = 0x8;
[16:26:58.581]        // -> [DP_SELECT <= 0x00000008]
[16:26:58.581]      __var powered_down      = 0;
[16:26:58.581]        // -> [powered_down <= 0x00000000]
[16:26:58.591]      WriteDP(DP_SELECT, 0x00000000);
[16:26:58.592]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:26:58.592]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:26:58.592]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:26:58.592]        // -> [powered_down <= 0x00000001]
[16:26:58.592]    </block>
[16:26:58.592]    <control if="powered_down" while="" timeout="0" info="">
[16:26:58.592]      // if-block "powered_down"
[16:26:58.592]        // =>  TRUE
[16:26:58.592]      <block atomic="false" info="">
[16:26:58.592]        Message(0, "Debug/System power-up request sent");
[16:26:58.600]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:26:58.601]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:26:58.601]      </block>
[16:26:58.601]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:26:58.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:26:58.601]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:26:58.601]        // while-condition  =>  FALSE
[16:26:58.601]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:26:58.601]      </control>
[16:26:58.601]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:26:58.601]        // if-block "(__protocol & 0xFFFF) == 1"
[16:26:58.601]          // =>  FALSE
[16:26:58.601]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:26:58.605]      </control>
[16:26:58.605]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:26:58.605]        // if-block "(__protocol & 0xFFFF) == 2"
[16:26:58.605]          // =>  TRUE
[16:26:58.605]        <block atomic="false" info="">
[16:26:58.605]          Message(0, "executing SWD power up");
[16:26:58.606]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:26:58.606]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:26:58.606]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:26:58.610]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:26:58.610]        </block>
[16:26:58.610]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:26:58.610]      </control>
[16:26:58.610]      // end if-block "powered_down"
[16:26:58.610]    </control>
[16:26:58.610]    <block atomic="false" info="">
[16:26:58.610]      __var DEBUG_PORT_VAL    = 0;
[16:26:58.611]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:26:58.611]      __var ACCESS_POINT_VAL  = 0;
[16:26:58.611]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:26:58.611]      __ap = 1; 
[16:26:58.611]        // -> [__ap <= 0x00000001]
[16:26:58.611]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:26:58.611]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:26:58.611]      __ap = 4;
[16:26:58.611]        // -> [__ap <= 0x00000004]
[16:26:58.611]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:58.619]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:26:58.619]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:26:58.619]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:58.622]    </block>
[16:26:58.622]    <block atomic="false" info="">
[16:26:58.622]      __var nReset = 0x80;
[16:26:58.623]        // -> [nReset <= 0x00000080]
[16:26:58.623]      __var canReadPins = 0;
[16:26:58.623]        // -> [canReadPins <= 0x00000000]
[16:26:58.623]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:26:58.623]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:26:58.623]        // -> [canReadPins <= 0x00000001]
[16:26:58.623]    </block>
[16:26:58.623]    <control if="" while="1" timeout="200" info="">
[16:26:58.623]      // while "1"  (timeout="200")
[16:26:58.623]      // while-condition  =>  TRUE
[16:26:58.623]      // while "1"  (timeout="200")
[16:26:58.623]      // while-condition  =>  TRUE
[16:26:58.623]      // while "1"  (timeout="200")
[16:26:58.625]      // while-condition  =>  TRUE
[16:26:58.625]      // while "1"  (timeout="200")
[16:26:58.625]      // while-condition  =>  TRUE
[16:26:58.625]      // while "1"  (timeout="200")
[16:26:58.625]      // while-condition  =>  TRUE
[16:26:58.625]      // while "1"  (timeout="200")
[16:26:58.625]      // while-condition  =>  TRUE
[16:26:58.625]      // while "1"  (timeout="200")
[16:26:58.625]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.626]      // while "1"  (timeout="200")
[16:26:58.626]      // while-condition  =>  TRUE
[16:26:58.628]      // while "1"  (timeout="200")
[16:26:58.628]      // while  =>  TIMEOUT
[16:26:58.628]      // end while "1"
[16:26:58.628]    </control>
[16:26:58.628]    <control if="canReadPins" while="" timeout="0" info="">
[16:26:58.628]      // if-block "canReadPins"
[16:26:58.628]        // =>  TRUE
[16:26:58.628]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:26:58.628]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:26:58.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:26:58.630]        // while-condition  =>  FALSE
[16:26:58.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:26:58.630]      </control>
[16:26:58.630]      // end if-block "canReadPins"
[16:26:58.630]    </control>
[16:26:58.632]    <control if="!canReadPins" while="" timeout="0" info="">
[16:26:58.632]      // if-block "!canReadPins"
[16:26:58.632]        // =>  FALSE
[16:26:58.632]      // skip if-block "!canReadPins"
[16:26:58.632]    </control>
[16:26:58.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:26:58.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:58.632]        // =>  TRUE
[16:26:58.632]      <block atomic="false" info="">
[16:26:58.632]        WriteAP(0x00, 0x190008);
[16:26:58.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:58.634]        WriteAP(0xF0, 0x01);
[16:26:58.643]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:58.643]      </block>
[16:26:58.643]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:58.643]    </control>
[16:26:58.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:26:58.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:58.643]        // =>  FALSE
[16:26:58.643]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:58.643]    </control>
[16:26:58.643]    <block atomic="false" info="">
[16:26:58.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:58.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:26:58.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:26:58.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:58.646]      __ap = 0; //lets make sure we reset the access point selection
[16:26:58.646]        // -> [__ap <= 0x00000000]
[16:26:58.646]    </block>
[16:26:58.646]  </sequence>
[16:26:58.646]  
[16:26:58.683]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:26:58.683]  
[16:26:58.683]  <debugvars>
[16:26:58.683]    // Pre-defined
[16:26:58.683]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:58.683]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:26:58.683]    __dp=0x00000000
[16:26:58.683]    __ap=0x00000000
[16:26:58.683]    __traceout=0x00000000      (Trace Disabled)
[16:26:58.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:58.683]    __FlashAddr=0x00000000
[16:26:58.683]    __FlashLen=0x00000000
[16:26:58.683]    __FlashArg=0x00000000
[16:26:58.683]    __FlashOp=0x00000000
[16:26:58.683]    __Result=0x00000000
[16:26:58.683]  </debugvars>
[16:26:58.683]  
[16:26:58.683]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:26:58.683]    <block atomic="false" info="">
[16:26:58.683]      __var deviceID = 0;
[16:26:58.683]        // -> [deviceID <= 0x00000000]
[16:26:58.683]      __var version = 0;
[16:26:58.683]        // -> [version <= 0x00000000]
[16:26:58.683]      __var partNum = 0;
[16:26:58.683]        // -> [partNum <= 0x00000000]
[16:26:58.683]      __var manuf = 0;
[16:26:58.683]        // -> [manuf <= 0x00000000]
[16:26:58.683]      __var isMSPM0G1X0X_G3X0X = 0;
[16:26:58.683]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:26:58.683]      __var isProduction = 0;
[16:26:58.683]        // -> [isProduction <= 0x00000000]
[16:26:58.683]      __var continueId = 0;
[16:26:58.683]        // -> [continueId <= 0x00000000]
[16:26:58.683]      deviceID =   Read32(0x41C40004);
[16:26:58.694]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:26:58.694]        // -> [deviceID <= 0x2BB8802F]
[16:26:58.694]      version = deviceID >> 28;
[16:26:58.694]        // -> [version <= 0x00000002]
[16:26:58.695]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:26:58.695]        // -> [partNum <= 0x0000BB88]
[16:26:58.695]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:26:58.695]        // -> [manuf <= 0x00000017]
[16:26:58.695]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:26:58.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:26:58.695]      isProduction = (version > 0);
[16:26:58.695]        // -> [isProduction <= 0x00000001]
[16:26:58.695]    </block>
[16:26:58.695]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:26:58.695]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:26:58.695]        // =>  FALSE
[16:26:58.695]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:26:58.695]    </control>
[16:26:58.695]    <control if="continueId == 4" while="" timeout="0" info="">
[16:26:58.695]      // if-block "continueId == 4"
[16:26:58.695]        // =>  FALSE
[16:26:58.695]      // skip if-block "continueId == 4"
[16:26:58.695]    </control>
[16:26:58.695]    <control if="!isProduction" while="" timeout="0" info="">
[16:26:58.695]      // if-block "!isProduction"
[16:26:58.695]        // =>  FALSE
[16:26:58.695]      // skip if-block "!isProduction"
[16:26:58.695]    </control>
[16:26:58.695]  </sequence>
[16:26:58.695]  
[16:29:15.059]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:29:15.059]  
[16:29:15.072]  <debugvars>
[16:29:15.072]    // Pre-defined
[16:29:15.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:15.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:15.072]    __dp=0x00000000
[16:29:15.072]    __ap=0x00000000
[16:29:15.072]    __traceout=0x00000000      (Trace Disabled)
[16:29:15.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:15.072]    __FlashAddr=0x00000000
[16:29:15.072]    __FlashLen=0x00000000
[16:29:15.072]    __FlashArg=0x00000000
[16:29:15.072]    __FlashOp=0x00000000
[16:29:15.072]    __Result=0x00000000
[16:29:15.072]  </debugvars>
[16:29:15.072]  
[16:29:15.072]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:29:15.072]    <block atomic="false" info="">
[16:29:15.072]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:29:15.072]        // -> [isSWJ <= 0x00000001]
[16:29:15.072]      __var hasDormant = __protocol & 0x00020000;
[16:29:15.072]        // -> [hasDormant <= 0x00000000]
[16:29:15.072]      __var protType   = __protocol & 0x0000FFFF;
[16:29:15.072]        // -> [protType <= 0x00000002]
[16:29:15.072]    </block>
[16:29:15.072]    <control if="protType == 1" while="" timeout="0" info="">
[16:29:15.072]      // if-block "protType == 1"
[16:29:15.072]        // =>  FALSE
[16:29:15.072]      // skip if-block "protType == 1"
[16:29:15.072]    </control>
[16:29:15.072]    <control if="protType == 2" while="" timeout="0" info="">
[16:29:15.072]      // if-block "protType == 2"
[16:29:15.072]        // =>  TRUE
[16:29:15.072]      <control if="isSWJ" while="" timeout="0" info="">
[16:29:15.072]        // if-block "isSWJ"
[16:29:15.072]          // =>  TRUE
[16:29:15.072]        <control if="hasDormant" while="" timeout="0" info="">
[16:29:15.072]          // if-block "hasDormant"
[16:29:15.072]            // =>  FALSE
[16:29:15.072]          // skip if-block "hasDormant"
[16:29:15.072]        </control>
[16:29:15.072]        <control if="!hasDormant" while="" timeout="0" info="">
[16:29:15.072]          // if-block "!hasDormant"
[16:29:15.072]            // =>  TRUE
[16:29:15.072]          <block atomic="false" info="">
[16:29:15.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:29:15.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:15.072]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:29:15.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:29:15.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:29:15.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:15.080]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:29:15.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:29:15.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:29:15.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:15.080]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:29:15.080]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:29:15.080]          </block>
[16:29:15.080]          // end if-block "!hasDormant"
[16:29:15.080]        </control>
[16:29:15.080]        // end if-block "isSWJ"
[16:29:15.080]      </control>
[16:29:15.080]      <control if="!isSWJ" while="" timeout="0" info="">
[16:29:15.080]        // if-block "!isSWJ"
[16:29:15.080]          // =>  FALSE
[16:29:15.080]        // skip if-block "!isSWJ"
[16:29:15.080]      </control>
[16:29:15.080]      <block atomic="false" info="">
[16:29:15.080]        ReadDP(0x0);
[16:29:15.080]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:29:15.080]      </block>
[16:29:15.080]      // end if-block "protType == 2"
[16:29:15.080]    </control>
[16:29:15.090]  </sequence>
[16:29:15.090]  
[16:29:15.092]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:29:15.092]  
[16:29:15.092]  <debugvars>
[16:29:15.092]    // Pre-defined
[16:29:15.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:15.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:15.092]    __dp=0x00000000
[16:29:15.092]    __ap=0x00000000
[16:29:15.092]    __traceout=0x00000000      (Trace Disabled)
[16:29:15.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:15.092]    __FlashAddr=0x00000000
[16:29:15.092]    __FlashLen=0x00000000
[16:29:15.092]    __FlashArg=0x00000000
[16:29:15.092]    __FlashOp=0x00000000
[16:29:15.092]    __Result=0x00000000
[16:29:15.092]  </debugvars>
[16:29:15.092]  
[16:29:15.092]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:29:15.092]    <block atomic="false" info="">
[16:29:15.092]      __var SW_DP_ABORT       = 0x0;
[16:29:15.092]        // -> [SW_DP_ABORT <= 0x00000000]
[16:29:15.092]      __var DP_CTRL_STAT      = 0x4;
[16:29:15.092]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:29:15.092]      __var DP_SELECT         = 0x8;
[16:29:15.092]        // -> [DP_SELECT <= 0x00000008]
[16:29:15.092]      __var powered_down      = 0;
[16:29:15.092]        // -> [powered_down <= 0x00000000]
[16:29:15.092]      WriteDP(DP_SELECT, 0x00000000);
[16:29:15.092]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:29:15.092]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:29:15.092]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:29:15.092]        // -> [powered_down <= 0x00000001]
[16:29:15.092]    </block>
[16:29:15.092]    <control if="powered_down" while="" timeout="0" info="">
[16:29:15.100]      // if-block "powered_down"
[16:29:15.100]        // =>  TRUE
[16:29:15.100]      <block atomic="false" info="">
[16:29:15.100]        Message(0, "Debug/System power-up request sent");
[16:29:15.100]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:29:15.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:29:15.100]      </block>
[16:29:15.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:29:15.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:29:15.105]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:29:15.105]        // while-condition  =>  FALSE
[16:29:15.105]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:29:15.105]      </control>
[16:29:15.105]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:29:15.105]        // if-block "(__protocol & 0xFFFF) == 1"
[16:29:15.105]          // =>  FALSE
[16:29:15.105]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:29:15.105]      </control>
[16:29:15.105]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:29:15.105]        // if-block "(__protocol & 0xFFFF) == 2"
[16:29:15.105]          // =>  TRUE
[16:29:15.105]        <block atomic="false" info="">
[16:29:15.105]          Message(0, "executing SWD power up");
[16:29:15.110]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:29:15.110]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:29:15.110]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:29:15.110]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:29:15.110]        </block>
[16:29:15.110]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:29:15.110]      </control>
[16:29:15.120]      // end if-block "powered_down"
[16:29:15.120]    </control>
[16:29:15.120]    <block atomic="false" info="">
[16:29:15.120]      __var DEBUG_PORT_VAL    = 0;
[16:29:15.120]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:29:15.120]      __var ACCESS_POINT_VAL  = 0;
[16:29:15.120]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:29:15.120]      __ap = 1; 
[16:29:15.120]        // -> [__ap <= 0x00000001]
[16:29:15.120]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:29:15.120]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:29:15.120]      __ap = 4;
[16:29:15.120]        // -> [__ap <= 0x00000004]
[16:29:15.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:15.120]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:29:15.120]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:29:15.120]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:15.130]    </block>
[16:29:15.130]    <block atomic="false" info="">
[16:29:15.130]      __var nReset = 0x80;
[16:29:15.130]        // -> [nReset <= 0x00000080]
[16:29:15.130]      __var canReadPins = 0;
[16:29:15.130]        // -> [canReadPins <= 0x00000000]
[16:29:15.130]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:29:15.132]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:29:15.132]        // -> [canReadPins <= 0x00000001]
[16:29:15.132]    </block>
[16:29:15.132]    <control if="" while="1" timeout="200" info="">
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.132]      // while-condition  =>  TRUE
[16:29:15.132]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.140]      // while "1"  (timeout="200")
[16:29:15.140]      // while-condition  =>  TRUE
[16:29:15.150]      // while "1"  (timeout="200")
[16:29:15.150]      // while  =>  TIMEOUT
[16:29:15.150]      // end while "1"
[16:29:15.150]    </control>
[16:29:15.150]    <control if="canReadPins" while="" timeout="0" info="">
[16:29:15.150]      // if-block "canReadPins"
[16:29:15.150]        // =>  TRUE
[16:29:15.150]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:29:15.150]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:29:15.150]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:29:15.150]        // while-condition  =>  FALSE
[16:29:15.150]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:29:15.150]      </control>
[16:29:15.150]      // end if-block "canReadPins"
[16:29:15.150]    </control>
[16:29:15.150]    <control if="!canReadPins" while="" timeout="0" info="">
[16:29:15.150]      // if-block "!canReadPins"
[16:29:15.150]        // =>  FALSE
[16:29:15.150]      // skip if-block "!canReadPins"
[16:29:15.150]    </control>
[16:29:15.150]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:29:15.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:15.150]        // =>  TRUE
[16:29:15.150]      <block atomic="false" info="">
[16:29:15.150]        WriteAP(0x00, 0x190008);
[16:29:15.150]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:15.150]        WriteAP(0xF0, 0x01);
[16:29:15.160]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:15.160]      </block>
[16:29:15.160]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:15.160]    </control>
[16:29:15.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:29:15.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:15.160]        // =>  FALSE
[16:29:15.160]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:15.160]    </control>
[16:29:15.160]    <block atomic="false" info="">
[16:29:15.160]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:15.160]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:29:15.160]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:29:15.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:15.160]      __ap = 0; //lets make sure we reset the access point selection
[16:29:15.160]        // -> [__ap <= 0x00000000]
[16:29:15.160]    </block>
[16:29:15.160]  </sequence>
[16:29:15.160]  
[16:29:15.181]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:29:15.181]  
[16:29:15.181]  <debugvars>
[16:29:15.181]    // Pre-defined
[16:29:15.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:15.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:15.181]    __dp=0x00000000
[16:29:15.181]    __ap=0x00000000
[16:29:15.181]    __traceout=0x00000000      (Trace Disabled)
[16:29:15.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:15.181]    __FlashAddr=0x00000000
[16:29:15.181]    __FlashLen=0x00000000
[16:29:15.181]    __FlashArg=0x00000000
[16:29:15.181]    __FlashOp=0x00000000
[16:29:15.181]    __Result=0x00000000
[16:29:15.181]  </debugvars>
[16:29:15.181]  
[16:29:15.181]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:29:15.181]    <block atomic="false" info="">
[16:29:15.181]      __var deviceID = 0;
[16:29:15.181]        // -> [deviceID <= 0x00000000]
[16:29:15.181]      __var version = 0;
[16:29:15.181]        // -> [version <= 0x00000000]
[16:29:15.181]      __var partNum = 0;
[16:29:15.181]        // -> [partNum <= 0x00000000]
[16:29:15.181]      __var manuf = 0;
[16:29:15.181]        // -> [manuf <= 0x00000000]
[16:29:15.181]      __var isMSPM0G1X0X_G3X0X = 0;
[16:29:15.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:29:15.191]      __var isProduction = 0;
[16:29:15.191]        // -> [isProduction <= 0x00000000]
[16:29:15.191]      __var continueId = 0;
[16:29:15.191]        // -> [continueId <= 0x00000000]
[16:29:15.191]      deviceID =   Read32(0x41C40004);
[16:29:15.191]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:29:15.191]        // -> [deviceID <= 0x2BB8802F]
[16:29:15.191]      version = deviceID >> 28;
[16:29:15.191]        // -> [version <= 0x00000002]
[16:29:15.191]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:29:15.191]        // -> [partNum <= 0x0000BB88]
[16:29:15.191]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:29:15.191]        // -> [manuf <= 0x00000017]
[16:29:15.191]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:29:15.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:29:15.191]      isProduction = (version > 0);
[16:29:15.191]        // -> [isProduction <= 0x00000001]
[16:29:15.191]    </block>
[16:29:15.191]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:29:15.191]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:29:15.191]        // =>  FALSE
[16:29:15.191]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:29:15.191]    </control>
[16:29:15.191]    <control if="continueId == 4" while="" timeout="0" info="">
[16:29:15.191]      // if-block "continueId == 4"
[16:29:15.191]        // =>  FALSE
[16:29:15.191]      // skip if-block "continueId == 4"
[16:29:15.191]    </control>
[16:29:15.191]    <control if="!isProduction" while="" timeout="0" info="">
[16:29:15.191]      // if-block "!isProduction"
[16:29:15.191]        // =>  FALSE
[16:29:15.191]      // skip if-block "!isProduction"
[16:29:15.191]    </control>
[16:29:15.191]  </sequence>
[16:29:15.191]  
