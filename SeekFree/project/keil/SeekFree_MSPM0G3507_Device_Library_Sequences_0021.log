/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0021.log
 *  Created     : 20:59:45 (26/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:59:45.636]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:59:45.636]  
[20:59:45.636]  <debugvars>
[20:59:45.636]    // Pre-defined
[20:59:45.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:45.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:45.636]    __dp=0x00000000
[20:59:45.636]    __ap=0x00000000
[20:59:45.636]    __traceout=0x00000000      (Trace Disabled)
[20:59:45.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:45.636]    __FlashAddr=0x00000000
[20:59:45.636]    __FlashLen=0x00000000
[20:59:45.636]    __FlashArg=0x00000000
[20:59:45.636]    __FlashOp=0x00000000
[20:59:45.636]    __Result=0x00000000
[20:59:45.636]  </debugvars>
[20:59:45.636]  
[20:59:45.636]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:59:45.636]    <block atomic="false" info="">
[20:59:45.636]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:59:45.636]        // -> [isSWJ <= 0x00000001]
[20:59:45.636]      __var hasDormant = __protocol & 0x00020000;
[20:59:45.636]        // -> [hasDormant <= 0x00000000]
[20:59:45.636]      __var protType   = __protocol & 0x0000FFFF;
[20:59:45.636]        // -> [protType <= 0x00000002]
[20:59:45.636]    </block>
[20:59:45.636]    <control if="protType == 1" while="" timeout="0" info="">
[20:59:45.636]      // if-block "protType == 1"
[20:59:45.636]        // =>  FALSE
[20:59:45.636]      // skip if-block "protType == 1"
[20:59:45.636]    </control>
[20:59:45.636]    <control if="protType == 2" while="" timeout="0" info="">
[20:59:45.636]      // if-block "protType == 2"
[20:59:45.636]        // =>  TRUE
[20:59:45.636]      <control if="isSWJ" while="" timeout="0" info="">
[20:59:45.636]        // if-block "isSWJ"
[20:59:45.636]          // =>  TRUE
[20:59:45.636]        <control if="hasDormant" while="" timeout="0" info="">
[20:59:45.636]          // if-block "hasDormant"
[20:59:45.636]            // =>  FALSE
[20:59:45.636]          // skip if-block "hasDormant"
[20:59:45.636]        </control>
[20:59:45.636]        <control if="!hasDormant" while="" timeout="0" info="">
[20:59:45.636]          // if-block "!hasDormant"
[20:59:45.636]            // =>  TRUE
[20:59:45.636]          <block atomic="false" info="">
[20:59:45.636]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:59:45.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:45.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:59:45.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:59:45.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:59:45.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:45.644]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:59:45.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:59:45.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:59:45.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:59:45.654]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:59:45.654]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:59:45.654]          </block>
[20:59:45.654]          // end if-block "!hasDormant"
[20:59:45.654]        </control>
[20:59:45.654]        // end if-block "isSWJ"
[20:59:45.654]      </control>
[20:59:45.654]      <control if="!isSWJ" while="" timeout="0" info="">
[20:59:45.654]        // if-block "!isSWJ"
[20:59:45.654]          // =>  FALSE
[20:59:45.654]        // skip if-block "!isSWJ"
[20:59:45.654]      </control>
[20:59:45.654]      <block atomic="false" info="">
[20:59:45.654]        ReadDP(0x0);
[20:59:45.664]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:59:45.664]      </block>
[20:59:45.664]      // end if-block "protType == 2"
[20:59:45.664]    </control>
[20:59:45.664]  </sequence>
[20:59:45.664]  
[20:59:45.664]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:59:45.664]  
[20:59:45.664]  <debugvars>
[20:59:45.664]    // Pre-defined
[20:59:45.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:45.664]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:45.664]    __dp=0x00000000
[20:59:45.664]    __ap=0x00000000
[20:59:45.664]    __traceout=0x00000000      (Trace Disabled)
[20:59:45.664]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:45.664]    __FlashAddr=0x00000000
[20:59:45.664]    __FlashLen=0x00000000
[20:59:45.664]    __FlashArg=0x00000000
[20:59:45.674]    __FlashOp=0x00000000
[20:59:45.674]    __Result=0x00000000
[20:59:45.674]  </debugvars>
[20:59:45.675]  
[20:59:45.675]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:59:45.675]    <block atomic="false" info="">
[20:59:45.675]      __var SW_DP_ABORT       = 0x0;
[20:59:45.675]        // -> [SW_DP_ABORT <= 0x00000000]
[20:59:45.675]      __var DP_CTRL_STAT      = 0x4;
[20:59:45.675]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:59:45.675]      __var DP_SELECT         = 0x8;
[20:59:45.675]        // -> [DP_SELECT <= 0x00000008]
[20:59:45.676]      __var powered_down      = 0;
[20:59:45.676]        // -> [powered_down <= 0x00000000]
[20:59:45.676]      WriteDP(DP_SELECT, 0x00000000);
[20:59:45.676]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:59:45.676]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:59:45.676]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:59:45.676]        // -> [powered_down <= 0x00000001]
[20:59:45.676]    </block>
[20:59:45.676]    <control if="powered_down" while="" timeout="0" info="">
[20:59:45.676]      // if-block "powered_down"
[20:59:45.676]        // =>  TRUE
[20:59:45.676]      <block atomic="false" info="">
[20:59:45.676]        Message(0, "Debug/System power-up request sent");
[20:59:45.676]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:59:45.676]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:59:45.676]      </block>
[20:59:45.676]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:59:45.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:59:45.684]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:59:45.684]        // while-condition  =>  FALSE
[20:59:45.686]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:59:45.686]      </control>
[20:59:45.686]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:59:45.686]        // if-block "(__protocol & 0xFFFF) == 1"
[20:59:45.686]          // =>  FALSE
[20:59:45.686]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:59:45.686]      </control>
[20:59:45.686]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:59:45.686]        // if-block "(__protocol & 0xFFFF) == 2"
[20:59:45.686]          // =>  TRUE
[20:59:45.686]        <block atomic="false" info="">
[20:59:45.686]          Message(0, "executing SWD power up");
[20:59:45.686]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:59:45.686]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:59:45.686]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:59:45.686]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:59:45.686]        </block>
[20:59:45.686]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:59:45.686]      </control>
[20:59:45.686]      // end if-block "powered_down"
[20:59:45.686]    </control>
[20:59:45.686]    <block atomic="false" info="">
[20:59:45.686]      __var DEBUG_PORT_VAL    = 0;
[20:59:45.686]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:59:45.686]      __var ACCESS_POINT_VAL  = 0;
[20:59:45.686]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:59:45.686]      __ap = 1; 
[20:59:45.686]        // -> [__ap <= 0x00000001]
[20:59:45.686]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:59:45.697]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:59:45.697]      __ap = 4;
[20:59:45.697]        // -> [__ap <= 0x00000004]
[20:59:45.697]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:45.697]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:59:45.697]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:59:45.697]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:45.705]    </block>
[20:59:45.705]    <block atomic="false" info="">
[20:59:45.705]      __var nReset = 0x80;
[20:59:45.705]        // -> [nReset <= 0x00000080]
[20:59:45.705]      __var canReadPins = 0;
[20:59:45.705]        // -> [canReadPins <= 0x00000000]
[20:59:45.705]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:59:45.705]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:59:45.705]        // -> [canReadPins <= 0x00000001]
[20:59:45.705]    </block>
[20:59:45.705]    <control if="" while="1" timeout="200" info="">
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.705]      // while "1"  (timeout="200")
[20:59:45.705]      // while-condition  =>  TRUE
[20:59:45.715]      // while "1"  (timeout="200")
[20:59:45.715]      // while  =>  TIMEOUT
[20:59:45.715]      // end while "1"
[20:59:45.715]    </control>
[20:59:45.715]    <control if="canReadPins" while="" timeout="0" info="">
[20:59:45.715]      // if-block "canReadPins"
[20:59:45.715]        // =>  TRUE
[20:59:45.715]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:59:45.715]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:59:45.716]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:59:45.716]        // while-condition  =>  FALSE
[20:59:45.716]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:59:45.716]      </control>
[20:59:45.716]      // end if-block "canReadPins"
[20:59:45.716]    </control>
[20:59:45.716]    <control if="!canReadPins" while="" timeout="0" info="">
[20:59:45.716]      // if-block "!canReadPins"
[20:59:45.716]        // =>  FALSE
[20:59:45.716]      // skip if-block "!canReadPins"
[20:59:45.716]    </control>
[20:59:45.716]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:59:45.716]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:45.716]        // =>  TRUE
[20:59:45.716]      <block atomic="false" info="">
[20:59:45.716]        WriteAP(0x00, 0x190008);
[20:59:45.721]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:45.721]        WriteAP(0xF0, 0x01);
[20:59:45.728]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:59:45.728]      </block>
[20:59:45.728]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:59:45.728]    </control>
[20:59:45.728]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:59:45.728]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:45.728]        // =>  FALSE
[20:59:45.728]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:59:45.728]    </control>
[20:59:45.728]    <block atomic="false" info="">
[20:59:45.728]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:59:45.736]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:59:45.736]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:59:45.736]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:59:45.738]      __ap = 0; //lets make sure we reset the access point selection
[20:59:45.739]        // -> [__ap <= 0x00000000]
[20:59:45.739]    </block>
[20:59:45.739]  </sequence>
[20:59:45.739]  
[20:59:45.784]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:59:45.784]  
[20:59:45.784]  <debugvars>
[20:59:45.784]    // Pre-defined
[20:59:45.784]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:59:45.784]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:59:45.784]    __dp=0x00000000
[20:59:45.784]    __ap=0x00000000
[20:59:45.784]    __traceout=0x00000000      (Trace Disabled)
[20:59:45.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:59:45.784]    __FlashAddr=0x00000000
[20:59:45.784]    __FlashLen=0x00000000
[20:59:45.784]    __FlashArg=0x00000000
[20:59:45.784]    __FlashOp=0x00000000
[20:59:45.784]    __Result=0x00000000
[20:59:45.784]  </debugvars>
[20:59:45.784]  
[20:59:45.784]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:59:45.784]    <block atomic="false" info="">
[20:59:45.784]      __var deviceID = 0;
[20:59:45.784]        // -> [deviceID <= 0x00000000]
[20:59:45.784]      __var version = 0;
[20:59:45.784]        // -> [version <= 0x00000000]
[20:59:45.784]      __var partNum = 0;
[20:59:45.784]        // -> [partNum <= 0x00000000]
[20:59:45.784]      __var manuf = 0;
[20:59:45.784]        // -> [manuf <= 0x00000000]
[20:59:45.784]      __var isMSPM0G1X0X_G3X0X = 0;
[20:59:45.784]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:59:45.784]      __var isProduction = 0;
[20:59:45.784]        // -> [isProduction <= 0x00000000]
[20:59:45.784]      __var continueId = 0;
[20:59:45.784]        // -> [continueId <= 0x00000000]
[20:59:45.784]      deviceID =   Read32(0x41C40004);
[20:59:45.798]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:59:45.798]        // -> [deviceID <= 0x2BB8802F]
[20:59:45.798]      version = deviceID >> 28;
[20:59:45.798]        // -> [version <= 0x00000002]
[20:59:45.798]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:59:45.798]        // -> [partNum <= 0x0000BB88]
[20:59:45.798]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:59:45.798]        // -> [manuf <= 0x00000017]
[20:59:45.798]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:59:45.798]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:59:45.798]      isProduction = (version > 0);
[20:59:45.798]        // -> [isProduction <= 0x00000001]
[20:59:45.798]    </block>
[20:59:45.798]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:59:45.798]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:59:45.798]        // =>  FALSE
[20:59:45.798]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:59:45.798]    </control>
[20:59:45.798]    <control if="continueId == 4" while="" timeout="0" info="">
[20:59:45.798]      // if-block "continueId == 4"
[20:59:45.798]        // =>  FALSE
[20:59:45.798]      // skip if-block "continueId == 4"
[20:59:45.798]    </control>
[20:59:45.798]    <control if="!isProduction" while="" timeout="0" info="">
[20:59:45.798]      // if-block "!isProduction"
[20:59:45.798]        // =>  FALSE
[20:59:45.798]      // skip if-block "!isProduction"
[20:59:45.798]    </control>
[20:59:45.798]  </sequence>
[20:59:45.798]  
[21:00:30.742]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:00:30.742]  
[21:00:30.743]  <debugvars>
[21:00:30.743]    // Pre-defined
[21:00:30.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:30.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:30.744]    __dp=0x00000000
[21:00:30.744]    __ap=0x00000000
[21:00:30.744]    __traceout=0x00000000      (Trace Disabled)
[21:00:30.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:30.744]    __FlashAddr=0x00000000
[21:00:30.744]    __FlashLen=0x00000000
[21:00:30.744]    __FlashArg=0x00000000
[21:00:30.744]    __FlashOp=0x00000000
[21:00:30.744]    __Result=0x00000000
[21:00:30.745]  </debugvars>
[21:00:30.745]  
[21:00:30.745]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:00:30.745]    <block atomic="false" info="">
[21:00:30.746]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:00:30.746]        // -> [isSWJ <= 0x00000001]
[21:00:30.746]      __var hasDormant = __protocol & 0x00020000;
[21:00:30.746]        // -> [hasDormant <= 0x00000000]
[21:00:30.746]      __var protType   = __protocol & 0x0000FFFF;
[21:00:30.746]        // -> [protType <= 0x00000002]
[21:00:30.746]    </block>
[21:00:30.746]    <control if="protType == 1" while="" timeout="0" info="">
[21:00:30.746]      // if-block "protType == 1"
[21:00:30.746]        // =>  FALSE
[21:00:30.746]      // skip if-block "protType == 1"
[21:00:30.746]    </control>
[21:00:30.746]    <control if="protType == 2" while="" timeout="0" info="">
[21:00:30.747]      // if-block "protType == 2"
[21:00:30.747]        // =>  TRUE
[21:00:30.747]      <control if="isSWJ" while="" timeout="0" info="">
[21:00:30.747]        // if-block "isSWJ"
[21:00:30.747]          // =>  TRUE
[21:00:30.747]        <control if="hasDormant" while="" timeout="0" info="">
[21:00:30.747]          // if-block "hasDormant"
[21:00:30.747]            // =>  FALSE
[21:00:30.747]          // skip if-block "hasDormant"
[21:00:30.747]        </control>
[21:00:30.747]        <control if="!hasDormant" while="" timeout="0" info="">
[21:00:30.747]          // if-block "!hasDormant"
[21:00:30.747]            // =>  TRUE
[21:00:30.747]          <block atomic="false" info="">
[21:00:30.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:00:30.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:30.750]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:00:30.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:00:30.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:00:30.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:30.763]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:00:30.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:00:30.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:00:30.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:30.766]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:00:30.768]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:00:30.768]          </block>
[21:00:30.768]          // end if-block "!hasDormant"
[21:00:30.768]        </control>
[21:00:30.768]        // end if-block "isSWJ"
[21:00:30.768]      </control>
[21:00:30.768]      <control if="!isSWJ" while="" timeout="0" info="">
[21:00:30.768]        // if-block "!isSWJ"
[21:00:30.768]          // =>  FALSE
[21:00:30.768]        // skip if-block "!isSWJ"
[21:00:30.768]      </control>
[21:00:30.770]      <block atomic="false" info="">
[21:00:30.770]        ReadDP(0x0);
[21:00:30.771]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:00:30.771]      </block>
[21:00:30.771]      // end if-block "protType == 2"
[21:00:30.774]    </control>
[21:00:30.774]  </sequence>
[21:00:30.774]  
[21:00:30.786]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:00:30.786]  
[21:00:30.786]  <debugvars>
[21:00:30.786]    // Pre-defined
[21:00:30.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:30.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:30.786]    __dp=0x00000000
[21:00:30.786]    __ap=0x00000000
[21:00:30.786]    __traceout=0x00000000      (Trace Disabled)
[21:00:30.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:30.786]    __FlashAddr=0x00000000
[21:00:30.786]    __FlashLen=0x00000000
[21:00:30.788]    __FlashArg=0x00000000
[21:00:30.788]    __FlashOp=0x00000000
[21:00:30.788]    __Result=0x00000000
[21:00:30.788]  </debugvars>
[21:00:30.788]  
[21:00:30.789]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:00:30.789]    <block atomic="false" info="">
[21:00:30.789]      __var SW_DP_ABORT       = 0x0;
[21:00:30.789]        // -> [SW_DP_ABORT <= 0x00000000]
[21:00:30.789]      __var DP_CTRL_STAT      = 0x4;
[21:00:30.789]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:00:30.789]      __var DP_SELECT         = 0x8;
[21:00:30.789]        // -> [DP_SELECT <= 0x00000008]
[21:00:30.789]      __var powered_down      = 0;
[21:00:30.789]        // -> [powered_down <= 0x00000000]
[21:00:30.789]      WriteDP(DP_SELECT, 0x00000000);
[21:00:30.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:00:30.793]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:00:30.794]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:00:30.794]        // -> [powered_down <= 0x00000001]
[21:00:30.794]    </block>
[21:00:30.794]    <control if="powered_down" while="" timeout="0" info="">
[21:00:30.794]      // if-block "powered_down"
[21:00:30.794]        // =>  TRUE
[21:00:30.794]      <block atomic="false" info="">
[21:00:30.794]        Message(0, "Debug/System power-up request sent");
[21:00:30.798]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:00:30.801]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:00:30.801]      </block>
[21:00:30.801]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:00:30.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:00:30.804]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:00:30.804]        // while-condition  =>  FALSE
[21:00:30.804]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:00:30.804]      </control>
[21:00:30.804]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:00:30.804]        // if-block "(__protocol & 0xFFFF) == 1"
[21:00:30.804]          // =>  FALSE
[21:00:30.804]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:00:30.804]      </control>
[21:00:30.804]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:00:30.804]        // if-block "(__protocol & 0xFFFF) == 2"
[21:00:30.804]          // =>  TRUE
[21:00:30.805]        <block atomic="false" info="">
[21:00:30.805]          Message(0, "executing SWD power up");
[21:00:30.806]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:00:30.811]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:00:30.811]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:00:30.812]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:00:30.812]        </block>
[21:00:30.812]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:00:30.812]      </control>
[21:00:30.812]      // end if-block "powered_down"
[21:00:30.812]    </control>
[21:00:30.812]    <block atomic="false" info="">
[21:00:30.812]      __var DEBUG_PORT_VAL    = 0;
[21:00:30.814]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:00:30.814]      __var ACCESS_POINT_VAL  = 0;
[21:00:30.814]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:00:30.814]      __ap = 1; 
[21:00:30.814]        // -> [__ap <= 0x00000001]
[21:00:30.814]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:00:30.819]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:00:30.819]      __ap = 4;
[21:00:30.819]        // -> [__ap <= 0x00000004]
[21:00:30.819]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:30.826]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:00:30.826]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:00:30.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:30.826]    </block>
[21:00:30.826]    <block atomic="false" info="">
[21:00:30.826]      __var nReset = 0x80;
[21:00:30.826]        // -> [nReset <= 0x00000080]
[21:00:30.826]      __var canReadPins = 0;
[21:00:30.828]        // -> [canReadPins <= 0x00000000]
[21:00:30.828]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:00:30.828]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:00:30.828]        // -> [canReadPins <= 0x00000001]
[21:00:30.828]    </block>
[21:00:30.828]    <control if="" while="1" timeout="200" info="">
[21:00:30.828]      // while "1"  (timeout="200")
[21:00:30.828]      // while-condition  =>  TRUE
[21:00:30.828]      // while "1"  (timeout="200")
[21:00:30.828]      // while-condition  =>  TRUE
[21:00:30.828]      // while "1"  (timeout="200")
[21:00:30.828]      // while-condition  =>  TRUE
[21:00:30.828]      // while "1"  (timeout="200")
[21:00:30.832]      // while-condition  =>  TRUE
[21:00:30.832]      // while "1"  (timeout="200")
[21:00:30.832]      // while  =>  TIMEOUT
[21:00:30.832]      // end while "1"
[21:00:30.832]    </control>
[21:00:30.832]    <control if="canReadPins" while="" timeout="0" info="">
[21:00:30.833]      // if-block "canReadPins"
[21:00:30.833]        // =>  TRUE
[21:00:30.833]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:00:30.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:00:30.840]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:00:30.840]        // while-condition  =>  FALSE
[21:00:30.840]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:00:30.841]      </control>
[21:00:30.841]      // end if-block "canReadPins"
[21:00:30.841]    </control>
[21:00:30.841]    <control if="!canReadPins" while="" timeout="0" info="">
[21:00:30.841]      // if-block "!canReadPins"
[21:00:30.841]        // =>  FALSE
[21:00:30.841]      // skip if-block "!canReadPins"
[21:00:30.841]    </control>
[21:00:30.841]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:00:30.841]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:30.841]        // =>  TRUE
[21:00:30.842]      <block atomic="false" info="">
[21:00:30.842]        WriteAP(0x00, 0x190008);
[21:00:30.844]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:30.844]        WriteAP(0xF0, 0x01);
[21:00:30.847]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:30.847]      </block>
[21:00:30.847]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:30.847]    </control>
[21:00:30.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:00:30.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:30.847]        // =>  FALSE
[21:00:30.847]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:30.847]    </control>
[21:00:30.847]    <block atomic="false" info="">
[21:00:30.847]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:30.854]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:00:30.854]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:00:30.854]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:30.856]      __ap = 0; //lets make sure we reset the access point selection
[21:00:30.856]        // -> [__ap <= 0x00000000]
[21:00:30.856]    </block>
[21:00:30.856]  </sequence>
[21:00:30.856]  
[21:00:30.885]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:00:30.885]  
[21:00:30.888]  <debugvars>
[21:00:30.888]    // Pre-defined
[21:00:30.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:30.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:30.888]    __dp=0x00000000
[21:00:30.889]    __ap=0x00000000
[21:00:30.889]    __traceout=0x00000000      (Trace Disabled)
[21:00:30.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:30.889]    __FlashAddr=0x00000000
[21:00:30.889]    __FlashLen=0x00000000
[21:00:30.889]    __FlashArg=0x00000000
[21:00:30.889]    __FlashOp=0x00000000
[21:00:30.889]    __Result=0x00000000
[21:00:30.889]  </debugvars>
[21:00:30.889]  
[21:00:30.889]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:00:30.889]    <block atomic="false" info="">
[21:00:30.889]      __var deviceID = 0;
[21:00:30.889]        // -> [deviceID <= 0x00000000]
[21:00:30.889]      __var version = 0;
[21:00:30.889]        // -> [version <= 0x00000000]
[21:00:30.889]      __var partNum = 0;
[21:00:30.889]        // -> [partNum <= 0x00000000]
[21:00:30.889]      __var manuf = 0;
[21:00:30.889]        // -> [manuf <= 0x00000000]
[21:00:30.889]      __var isMSPM0G1X0X_G3X0X = 0;
[21:00:30.889]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:00:30.889]      __var isProduction = 0;
[21:00:30.889]        // -> [isProduction <= 0x00000000]
[21:00:30.889]      __var continueId = 0;
[21:00:30.889]        // -> [continueId <= 0x00000000]
[21:00:30.889]      deviceID =   Read32(0x41C40004);
[21:00:30.897]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:00:30.897]        // -> [deviceID <= 0x2BB8802F]
[21:00:30.897]      version = deviceID >> 28;
[21:00:30.897]        // -> [version <= 0x00000002]
[21:00:30.897]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:00:30.897]        // -> [partNum <= 0x0000BB88]
[21:00:30.897]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:00:30.897]        // -> [manuf <= 0x00000017]
[21:00:30.897]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:00:30.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:00:30.897]      isProduction = (version > 0);
[21:00:30.897]        // -> [isProduction <= 0x00000001]
[21:00:30.897]    </block>
[21:00:30.897]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:00:30.897]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:00:30.897]        // =>  FALSE
[21:00:30.897]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:00:30.897]    </control>
[21:00:30.897]    <control if="continueId == 4" while="" timeout="0" info="">
[21:00:30.897]      // if-block "continueId == 4"
[21:00:30.897]        // =>  FALSE
[21:00:30.897]      // skip if-block "continueId == 4"
[21:00:30.897]    </control>
[21:00:30.897]    <control if="!isProduction" while="" timeout="0" info="">
[21:00:30.897]      // if-block "!isProduction"
[21:00:30.897]        // =>  FALSE
[21:00:30.897]      // skip if-block "!isProduction"
[21:00:30.897]    </control>
[21:00:30.897]  </sequence>
[21:00:30.897]  
[21:02:08.442]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:02:08.442]  
[21:02:08.456]  <debugvars>
[21:02:08.456]    // Pre-defined
[21:02:08.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:08.456]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:08.456]    __dp=0x00000000
[21:02:08.456]    __ap=0x00000000
[21:02:08.456]    __traceout=0x00000000      (Trace Disabled)
[21:02:08.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:08.456]    __FlashAddr=0x00000000
[21:02:08.456]    __FlashLen=0x00000000
[21:02:08.456]    __FlashArg=0x00000000
[21:02:08.456]    __FlashOp=0x00000000
[21:02:08.456]    __Result=0x00000000
[21:02:08.456]  </debugvars>
[21:02:08.456]  
[21:02:08.456]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:02:08.456]    <block atomic="false" info="">
[21:02:08.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:02:08.456]        // -> [isSWJ <= 0x00000001]
[21:02:08.456]      __var hasDormant = __protocol & 0x00020000;
[21:02:08.456]        // -> [hasDormant <= 0x00000000]
[21:02:08.456]      __var protType   = __protocol & 0x0000FFFF;
[21:02:08.456]        // -> [protType <= 0x00000002]
[21:02:08.456]    </block>
[21:02:08.456]    <control if="protType == 1" while="" timeout="0" info="">
[21:02:08.456]      // if-block "protType == 1"
[21:02:08.459]        // =>  FALSE
[21:02:08.459]      // skip if-block "protType == 1"
[21:02:08.459]    </control>
[21:02:08.459]    <control if="protType == 2" while="" timeout="0" info="">
[21:02:08.459]      // if-block "protType == 2"
[21:02:08.459]        // =>  TRUE
[21:02:08.459]      <control if="isSWJ" while="" timeout="0" info="">
[21:02:08.459]        // if-block "isSWJ"
[21:02:08.459]          // =>  TRUE
[21:02:08.459]        <control if="hasDormant" while="" timeout="0" info="">
[21:02:08.459]          // if-block "hasDormant"
[21:02:08.459]            // =>  FALSE
[21:02:08.459]          // skip if-block "hasDormant"
[21:02:08.459]        </control>
[21:02:08.459]        <control if="!hasDormant" while="" timeout="0" info="">
[21:02:08.459]          // if-block "!hasDormant"
[21:02:08.459]            // =>  TRUE
[21:02:08.460]          <block atomic="false" info="">
[21:02:08.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:02:08.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:08.462]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:02:08.462]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:02:08.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:02:08.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:08.462]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:02:08.462]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:02:08.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:02:08.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:08.462]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:02:08.469]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:02:08.469]          </block>
[21:02:08.469]          // end if-block "!hasDormant"
[21:02:08.469]        </control>
[21:02:08.470]        // end if-block "isSWJ"
[21:02:08.470]      </control>
[21:02:08.470]      <control if="!isSWJ" while="" timeout="0" info="">
[21:02:08.470]        // if-block "!isSWJ"
[21:02:08.470]          // =>  FALSE
[21:02:08.470]        // skip if-block "!isSWJ"
[21:02:08.470]      </control>
[21:02:08.470]      <block atomic="false" info="">
[21:02:08.470]        ReadDP(0x0);
[21:02:08.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:02:08.473]      </block>
[21:02:08.473]      // end if-block "protType == 2"
[21:02:08.473]    </control>
[21:02:08.473]  </sequence>
[21:02:08.473]  
[21:02:08.473]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:02:08.473]  
[21:02:08.473]  <debugvars>
[21:02:08.473]    // Pre-defined
[21:02:08.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:08.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:08.473]    __dp=0x00000000
[21:02:08.480]    __ap=0x00000000
[21:02:08.480]    __traceout=0x00000000      (Trace Disabled)
[21:02:08.480]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:08.480]    __FlashAddr=0x00000000
[21:02:08.481]    __FlashLen=0x00000000
[21:02:08.481]    __FlashArg=0x00000000
[21:02:08.481]    __FlashOp=0x00000000
[21:02:08.481]    __Result=0x00000000
[21:02:08.481]  </debugvars>
[21:02:08.481]  
[21:02:08.481]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:02:08.481]    <block atomic="false" info="">
[21:02:08.481]      __var SW_DP_ABORT       = 0x0;
[21:02:08.481]        // -> [SW_DP_ABORT <= 0x00000000]
[21:02:08.481]      __var DP_CTRL_STAT      = 0x4;
[21:02:08.481]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:02:08.481]      __var DP_SELECT         = 0x8;
[21:02:08.481]        // -> [DP_SELECT <= 0x00000008]
[21:02:08.481]      __var powered_down      = 0;
[21:02:08.481]        // -> [powered_down <= 0x00000000]
[21:02:08.482]      WriteDP(DP_SELECT, 0x00000000);
[21:02:08.484]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:02:08.484]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:02:08.484]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:02:08.484]        // -> [powered_down <= 0x00000001]
[21:02:08.484]    </block>
[21:02:08.484]    <control if="powered_down" while="" timeout="0" info="">
[21:02:08.484]      // if-block "powered_down"
[21:02:08.484]        // =>  TRUE
[21:02:08.484]      <block atomic="false" info="">
[21:02:08.484]        Message(0, "Debug/System power-up request sent");
[21:02:08.484]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:02:08.491]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:02:08.491]      </block>
[21:02:08.491]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:02:08.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:02:08.493]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:02:08.493]        // while-condition  =>  FALSE
[21:02:08.493]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:02:08.493]      </control>
[21:02:08.493]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:02:08.493]        // if-block "(__protocol & 0xFFFF) == 1"
[21:02:08.493]          // =>  FALSE
[21:02:08.493]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:02:08.493]      </control>
[21:02:08.493]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:02:08.493]        // if-block "(__protocol & 0xFFFF) == 2"
[21:02:08.493]          // =>  TRUE
[21:02:08.493]        <block atomic="false" info="">
[21:02:08.493]          Message(0, "executing SWD power up");
[21:02:08.501]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:02:08.501]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:02:08.501]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:02:08.501]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:02:08.501]        </block>
[21:02:08.501]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:02:08.501]      </control>
[21:02:08.501]      // end if-block "powered_down"
[21:02:08.501]    </control>
[21:02:08.501]    <block atomic="false" info="">
[21:02:08.501]      __var DEBUG_PORT_VAL    = 0;
[21:02:08.501]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:02:08.501]      __var ACCESS_POINT_VAL  = 0;
[21:02:08.501]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:02:08.501]      __ap = 1; 
[21:02:08.501]        // -> [__ap <= 0x00000001]
[21:02:08.501]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:02:08.512]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:02:08.512]      __ap = 4;
[21:02:08.512]        // -> [__ap <= 0x00000004]
[21:02:08.512]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:08.512]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:02:08.521]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:02:08.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:08.523]    </block>
[21:02:08.523]    <block atomic="false" info="">
[21:02:08.523]      __var nReset = 0x80;
[21:02:08.523]        // -> [nReset <= 0x00000080]
[21:02:08.523]      __var canReadPins = 0;
[21:02:08.523]        // -> [canReadPins <= 0x00000000]
[21:02:08.523]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:02:08.523]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:02:08.523]        // -> [canReadPins <= 0x00000001]
[21:02:08.523]    </block>
[21:02:08.523]    <control if="" while="1" timeout="200" info="">
[21:02:08.523]      // while "1"  (timeout="200")
[21:02:08.523]      // while-condition  =>  TRUE
[21:02:08.523]      // while "1"  (timeout="200")
[21:02:08.523]      // while-condition  =>  TRUE
[21:02:08.531]      // while "1"  (timeout="200")
[21:02:08.531]      // while-condition  =>  TRUE
[21:02:08.531]      // while "1"  (timeout="200")
[21:02:08.532]      // while-condition  =>  TRUE
[21:02:08.532]      // while "1"  (timeout="200")
[21:02:08.532]      // while-condition  =>  TRUE
[21:02:08.532]      // while "1"  (timeout="200")
[21:02:08.532]      // while-condition  =>  TRUE
[21:02:08.532]      // while "1"  (timeout="200")
[21:02:08.532]      // while-condition  =>  TRUE
[21:02:08.532]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.533]      // while "1"  (timeout="200")
[21:02:08.533]      // while-condition  =>  TRUE
[21:02:08.541]      // while "1"  (timeout="200")
[21:02:08.541]      // while  =>  TIMEOUT
[21:02:08.541]      // end while "1"
[21:02:08.541]    </control>
[21:02:08.541]    <control if="canReadPins" while="" timeout="0" info="">
[21:02:08.541]      // if-block "canReadPins"
[21:02:08.541]        // =>  TRUE
[21:02:08.541]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:02:08.541]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:02:08.543]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:02:08.543]        // while-condition  =>  FALSE
[21:02:08.543]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:02:08.543]      </control>
[21:02:08.543]      // end if-block "canReadPins"
[21:02:08.543]    </control>
[21:02:08.543]    <control if="!canReadPins" while="" timeout="0" info="">
[21:02:08.543]      // if-block "!canReadPins"
[21:02:08.543]        // =>  FALSE
[21:02:08.543]      // skip if-block "!canReadPins"
[21:02:08.543]    </control>
[21:02:08.543]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:02:08.543]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:08.543]        // =>  TRUE
[21:02:08.543]      <block atomic="false" info="">
[21:02:08.543]        WriteAP(0x00, 0x190008);
[21:02:08.551]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:08.551]        WriteAP(0xF0, 0x01);
[21:02:08.551]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:08.551]      </block>
[21:02:08.551]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:08.551]    </control>
[21:02:08.551]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:02:08.551]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:08.551]        // =>  FALSE
[21:02:08.551]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:08.551]    </control>
[21:02:08.551]    <block atomic="false" info="">
[21:02:08.551]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:08.561]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:02:08.561]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:02:08.571]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:08.573]      __ap = 0; //lets make sure we reset the access point selection
[21:02:08.573]        // -> [__ap <= 0x00000000]
[21:02:08.573]    </block>
[21:02:08.573]  </sequence>
[21:02:08.573]  
[21:02:08.612]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:02:08.612]  
[21:02:08.612]  <debugvars>
[21:02:08.612]    // Pre-defined
[21:02:08.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:08.612]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:08.612]    __dp=0x00000000
[21:02:08.612]    __ap=0x00000000
[21:02:08.612]    __traceout=0x00000000      (Trace Disabled)
[21:02:08.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:08.612]    __FlashAddr=0x00000000
[21:02:08.612]    __FlashLen=0x00000000
[21:02:08.612]    __FlashArg=0x00000000
[21:02:08.612]    __FlashOp=0x00000000
[21:02:08.612]    __Result=0x00000000
[21:02:08.612]  </debugvars>
[21:02:08.612]  
[21:02:08.612]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:02:08.612]    <block atomic="false" info="">
[21:02:08.612]      __var deviceID = 0;
[21:02:08.612]        // -> [deviceID <= 0x00000000]
[21:02:08.612]      __var version = 0;
[21:02:08.612]        // -> [version <= 0x00000000]
[21:02:08.612]      __var partNum = 0;
[21:02:08.612]        // -> [partNum <= 0x00000000]
[21:02:08.612]      __var manuf = 0;
[21:02:08.612]        // -> [manuf <= 0x00000000]
[21:02:08.612]      __var isMSPM0G1X0X_G3X0X = 0;
[21:02:08.612]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:02:08.612]      __var isProduction = 0;
[21:02:08.612]        // -> [isProduction <= 0x00000000]
[21:02:08.612]      __var continueId = 0;
[21:02:08.612]        // -> [continueId <= 0x00000000]
[21:02:08.612]      deviceID =   Read32(0x41C40004);
[21:02:08.622]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:02:08.622]        // -> [deviceID <= 0x2BB8802F]
[21:02:08.622]      version = deviceID >> 28;
[21:02:08.622]        // -> [version <= 0x00000002]
[21:02:08.622]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:02:08.622]        // -> [partNum <= 0x0000BB88]
[21:02:08.622]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:02:08.632]        // -> [manuf <= 0x00000017]
[21:02:08.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:02:08.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:02:08.632]      isProduction = (version > 0);
[21:02:08.632]        // -> [isProduction <= 0x00000001]
[21:02:08.632]    </block>
[21:02:08.632]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:02:08.632]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:02:08.632]        // =>  FALSE
[21:02:08.632]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:02:08.633]    </control>
[21:02:08.633]    <control if="continueId == 4" while="" timeout="0" info="">
[21:02:08.633]      // if-block "continueId == 4"
[21:02:08.633]        // =>  FALSE
[21:02:08.633]      // skip if-block "continueId == 4"
[21:02:08.633]    </control>
[21:02:08.633]    <control if="!isProduction" while="" timeout="0" info="">
[21:02:08.633]      // if-block "!isProduction"
[21:02:08.633]        // =>  FALSE
[21:02:08.633]      // skip if-block "!isProduction"
[21:02:08.633]    </control>
[21:02:08.633]  </sequence>
[21:02:08.633]  
[21:02:36.845]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:02:36.845]  
[21:02:36.857]  <debugvars>
[21:02:36.857]    // Pre-defined
[21:02:36.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:36.857]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:36.857]    __dp=0x00000000
[21:02:36.857]    __ap=0x00000000
[21:02:36.857]    __traceout=0x00000000      (Trace Disabled)
[21:02:36.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:36.857]    __FlashAddr=0x00000000
[21:02:36.857]    __FlashLen=0x00000000
[21:02:36.857]    __FlashArg=0x00000000
[21:02:36.857]    __FlashOp=0x00000000
[21:02:36.857]    __Result=0x00000000
[21:02:36.857]  </debugvars>
[21:02:36.857]  
[21:02:36.857]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:02:36.857]    <block atomic="false" info="">
[21:02:36.857]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:02:36.857]        // -> [isSWJ <= 0x00000001]
[21:02:36.857]      __var hasDormant = __protocol & 0x00020000;
[21:02:36.857]        // -> [hasDormant <= 0x00000000]
[21:02:36.857]      __var protType   = __protocol & 0x0000FFFF;
[21:02:36.857]        // -> [protType <= 0x00000002]
[21:02:36.857]    </block>
[21:02:36.857]    <control if="protType == 1" while="" timeout="0" info="">
[21:02:36.857]      // if-block "protType == 1"
[21:02:36.857]        // =>  FALSE
[21:02:36.857]      // skip if-block "protType == 1"
[21:02:36.857]    </control>
[21:02:36.857]    <control if="protType == 2" while="" timeout="0" info="">
[21:02:36.857]      // if-block "protType == 2"
[21:02:36.857]        // =>  TRUE
[21:02:36.857]      <control if="isSWJ" while="" timeout="0" info="">
[21:02:36.857]        // if-block "isSWJ"
[21:02:36.857]          // =>  TRUE
[21:02:36.857]        <control if="hasDormant" while="" timeout="0" info="">
[21:02:36.857]          // if-block "hasDormant"
[21:02:36.857]            // =>  FALSE
[21:02:36.857]          // skip if-block "hasDormant"
[21:02:36.857]        </control>
[21:02:36.857]        <control if="!hasDormant" while="" timeout="0" info="">
[21:02:36.857]          // if-block "!hasDormant"
[21:02:36.857]            // =>  TRUE
[21:02:36.857]          <block atomic="false" info="">
[21:02:36.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:02:36.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:36.857]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:02:36.857]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:02:36.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:02:36.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:36.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:02:36.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:02:36.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:02:36.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:02:36.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:02:36.865]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:02:36.865]          </block>
[21:02:36.865]          // end if-block "!hasDormant"
[21:02:36.865]        </control>
[21:02:36.865]        // end if-block "isSWJ"
[21:02:36.865]      </control>
[21:02:36.865]      <control if="!isSWJ" while="" timeout="0" info="">
[21:02:36.865]        // if-block "!isSWJ"
[21:02:36.865]          // =>  FALSE
[21:02:36.865]        // skip if-block "!isSWJ"
[21:02:36.865]      </control>
[21:02:36.865]      <block atomic="false" info="">
[21:02:36.865]        ReadDP(0x0);
[21:02:36.865]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:02:36.865]      </block>
[21:02:36.865]      // end if-block "protType == 2"
[21:02:36.865]    </control>
[21:02:36.865]  </sequence>
[21:02:36.865]  
[21:02:36.875]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:02:36.875]  
[21:02:36.878]  <debugvars>
[21:02:36.878]    // Pre-defined
[21:02:36.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:36.878]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:36.878]    __dp=0x00000000
[21:02:36.878]    __ap=0x00000000
[21:02:36.878]    __traceout=0x00000000      (Trace Disabled)
[21:02:36.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:36.878]    __FlashAddr=0x00000000
[21:02:36.878]    __FlashLen=0x00000000
[21:02:36.878]    __FlashArg=0x00000000
[21:02:36.878]    __FlashOp=0x00000000
[21:02:36.878]    __Result=0x00000000
[21:02:36.878]  </debugvars>
[21:02:36.878]  
[21:02:36.878]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:02:36.878]    <block atomic="false" info="">
[21:02:36.878]      __var SW_DP_ABORT       = 0x0;
[21:02:36.878]        // -> [SW_DP_ABORT <= 0x00000000]
[21:02:36.878]      __var DP_CTRL_STAT      = 0x4;
[21:02:36.878]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:02:36.878]      __var DP_SELECT         = 0x8;
[21:02:36.878]        // -> [DP_SELECT <= 0x00000008]
[21:02:36.878]      __var powered_down      = 0;
[21:02:36.878]        // -> [powered_down <= 0x00000000]
[21:02:36.878]      WriteDP(DP_SELECT, 0x00000000);
[21:02:36.878]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:02:36.878]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:02:36.888]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:02:36.888]        // -> [powered_down <= 0x00000001]
[21:02:36.888]    </block>
[21:02:36.888]    <control if="powered_down" while="" timeout="0" info="">
[21:02:36.888]      // if-block "powered_down"
[21:02:36.888]        // =>  TRUE
[21:02:36.888]      <block atomic="false" info="">
[21:02:36.888]        Message(0, "Debug/System power-up request sent");
[21:02:36.891]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:02:36.891]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:02:36.891]      </block>
[21:02:36.891]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:02:36.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:02:36.894]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:02:36.894]        // while-condition  =>  FALSE
[21:02:36.894]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:02:36.894]      </control>
[21:02:36.894]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:02:36.894]        // if-block "(__protocol & 0xFFFF) == 1"
[21:02:36.894]          // =>  FALSE
[21:02:36.894]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:02:36.896]      </control>
[21:02:36.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:02:36.896]        // if-block "(__protocol & 0xFFFF) == 2"
[21:02:36.896]          // =>  TRUE
[21:02:36.896]        <block atomic="false" info="">
[21:02:36.896]          Message(0, "executing SWD power up");
[21:02:36.896]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:02:36.896]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:02:36.896]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:02:36.903]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:02:36.903]        </block>
[21:02:36.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:02:36.903]      </control>
[21:02:36.903]      // end if-block "powered_down"
[21:02:36.903]    </control>
[21:02:36.903]    <block atomic="false" info="">
[21:02:36.903]      __var DEBUG_PORT_VAL    = 0;
[21:02:36.903]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:02:36.903]      __var ACCESS_POINT_VAL  = 0;
[21:02:36.903]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:02:36.903]      __ap = 1; 
[21:02:36.903]        // -> [__ap <= 0x00000001]
[21:02:36.903]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:02:36.907]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:02:36.907]      __ap = 4;
[21:02:36.907]        // -> [__ap <= 0x00000004]
[21:02:36.907]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:36.907]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:02:36.907]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:02:36.907]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:36.907]    </block>
[21:02:36.907]    <block atomic="false" info="">
[21:02:36.907]      __var nReset = 0x80;
[21:02:36.907]        // -> [nReset <= 0x00000080]
[21:02:36.907]      __var canReadPins = 0;
[21:02:36.907]        // -> [canReadPins <= 0x00000000]
[21:02:36.907]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:02:36.916]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:02:36.916]        // -> [canReadPins <= 0x00000001]
[21:02:36.916]    </block>
[21:02:36.916]    <control if="" while="1" timeout="200" info="">
[21:02:36.916]      // while "1"  (timeout="200")
[21:02:36.916]      // while-condition  =>  TRUE
[21:02:36.916]      // while "1"  (timeout="200")
[21:02:36.916]      // while-condition  =>  TRUE
[21:02:36.916]      // while "1"  (timeout="200")
[21:02:36.916]      // while-condition  =>  TRUE
[21:02:36.916]      // while "1"  (timeout="200")
[21:02:36.916]      // while-condition  =>  TRUE
[21:02:36.916]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.918]      // while-condition  =>  TRUE
[21:02:36.918]      // while "1"  (timeout="200")
[21:02:36.927]      // while-condition  =>  TRUE
[21:02:36.927]      // while "1"  (timeout="200")
[21:02:36.927]      // while  =>  TIMEOUT
[21:02:36.927]      // end while "1"
[21:02:36.927]    </control>
[21:02:36.927]    <control if="canReadPins" while="" timeout="0" info="">
[21:02:36.927]      // if-block "canReadPins"
[21:02:36.927]        // =>  TRUE
[21:02:36.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:02:36.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:02:36.927]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:02:36.927]        // while-condition  =>  FALSE
[21:02:36.927]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:02:36.927]      </control>
[21:02:36.927]      // end if-block "canReadPins"
[21:02:36.927]    </control>
[21:02:36.927]    <control if="!canReadPins" while="" timeout="0" info="">
[21:02:36.927]      // if-block "!canReadPins"
[21:02:36.927]        // =>  FALSE
[21:02:36.927]      // skip if-block "!canReadPins"
[21:02:36.927]    </control>
[21:02:36.927]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:02:36.927]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:36.927]        // =>  TRUE
[21:02:36.927]      <block atomic="false" info="">
[21:02:36.927]        WriteAP(0x00, 0x190008);
[21:02:36.927]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:36.927]        WriteAP(0xF0, 0x01);
[21:02:36.927]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:02:36.927]      </block>
[21:02:36.927]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:02:36.927]    </control>
[21:02:36.927]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:02:36.927]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:36.937]        // =>  FALSE
[21:02:36.937]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:02:36.937]    </control>
[21:02:36.937]    <block atomic="false" info="">
[21:02:36.937]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:02:36.937]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:02:36.937]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:02:36.937]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:02:36.937]      __ap = 0; //lets make sure we reset the access point selection
[21:02:36.937]        // -> [__ap <= 0x00000000]
[21:02:36.937]    </block>
[21:02:36.937]  </sequence>
[21:02:36.937]  
[21:02:36.957]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:02:36.957]  
[21:02:36.957]  <debugvars>
[21:02:36.957]    // Pre-defined
[21:02:36.957]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:02:36.957]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:02:36.957]    __dp=0x00000000
[21:02:36.957]    __ap=0x00000000
[21:02:36.957]    __traceout=0x00000000      (Trace Disabled)
[21:02:36.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:02:36.957]    __FlashAddr=0x00000000
[21:02:36.957]    __FlashLen=0x00000000
[21:02:36.957]    __FlashArg=0x00000000
[21:02:36.957]    __FlashOp=0x00000000
[21:02:36.957]    __Result=0x00000000
[21:02:36.957]  </debugvars>
[21:02:36.957]  
[21:02:36.957]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:02:36.957]    <block atomic="false" info="">
[21:02:36.957]      __var deviceID = 0;
[21:02:36.957]        // -> [deviceID <= 0x00000000]
[21:02:36.957]      __var version = 0;
[21:02:36.957]        // -> [version <= 0x00000000]
[21:02:36.957]      __var partNum = 0;
[21:02:36.957]        // -> [partNum <= 0x00000000]
[21:02:36.957]      __var manuf = 0;
[21:02:36.957]        // -> [manuf <= 0x00000000]
[21:02:36.957]      __var isMSPM0G1X0X_G3X0X = 0;
[21:02:36.957]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:02:36.957]      __var isProduction = 0;
[21:02:36.957]        // -> [isProduction <= 0x00000000]
[21:02:36.957]      __var continueId = 0;
[21:02:36.957]        // -> [continueId <= 0x00000000]
[21:02:36.957]      deviceID =   Read32(0x41C40004);
[21:02:36.967]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:02:36.967]        // -> [deviceID <= 0x2BB8802F]
[21:02:36.967]      version = deviceID >> 28;
[21:02:36.967]        // -> [version <= 0x00000002]
[21:02:36.967]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:02:36.967]        // -> [partNum <= 0x0000BB88]
[21:02:36.967]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:02:36.967]        // -> [manuf <= 0x00000017]
[21:02:36.967]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:02:36.967]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:02:36.967]      isProduction = (version > 0);
[21:02:36.967]        // -> [isProduction <= 0x00000001]
[21:02:36.967]    </block>
[21:02:36.967]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:02:36.967]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:02:36.967]        // =>  FALSE
[21:02:36.967]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:02:36.967]    </control>
[21:02:36.967]    <control if="continueId == 4" while="" timeout="0" info="">
[21:02:36.967]      // if-block "continueId == 4"
[21:02:36.967]        // =>  FALSE
[21:02:36.967]      // skip if-block "continueId == 4"
[21:02:36.967]    </control>
[21:02:36.967]    <control if="!isProduction" while="" timeout="0" info="">
[21:02:36.967]      // if-block "!isProduction"
[21:02:36.967]        // =>  FALSE
[21:02:36.967]      // skip if-block "!isProduction"
[21:02:36.967]    </control>
[21:02:36.967]  </sequence>
[21:02:36.967]  
[21:04:46.582]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:04:46.582]  
[21:04:46.591]  <debugvars>
[21:04:46.591]    // Pre-defined
[21:04:46.591]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:46.591]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:46.591]    __dp=0x00000000
[21:04:46.591]    __ap=0x00000000
[21:04:46.591]    __traceout=0x00000000      (Trace Disabled)
[21:04:46.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:46.591]    __FlashAddr=0x00000000
[21:04:46.591]    __FlashLen=0x00000000
[21:04:46.591]    __FlashArg=0x00000000
[21:04:46.591]    __FlashOp=0x00000000
[21:04:46.591]    __Result=0x00000000
[21:04:46.591]  </debugvars>
[21:04:46.591]  
[21:04:46.591]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:04:46.591]    <block atomic="false" info="">
[21:04:46.591]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:04:46.591]        // -> [isSWJ <= 0x00000001]
[21:04:46.591]      __var hasDormant = __protocol & 0x00020000;
[21:04:46.591]        // -> [hasDormant <= 0x00000000]
[21:04:46.591]      __var protType   = __protocol & 0x0000FFFF;
[21:04:46.591]        // -> [protType <= 0x00000002]
[21:04:46.591]    </block>
[21:04:46.591]    <control if="protType == 1" while="" timeout="0" info="">
[21:04:46.591]      // if-block "protType == 1"
[21:04:46.591]        // =>  FALSE
[21:04:46.591]      // skip if-block "protType == 1"
[21:04:46.591]    </control>
[21:04:46.591]    <control if="protType == 2" while="" timeout="0" info="">
[21:04:46.591]      // if-block "protType == 2"
[21:04:46.591]        // =>  TRUE
[21:04:46.591]      <control if="isSWJ" while="" timeout="0" info="">
[21:04:46.591]        // if-block "isSWJ"
[21:04:46.591]          // =>  TRUE
[21:04:46.591]        <control if="hasDormant" while="" timeout="0" info="">
[21:04:46.591]          // if-block "hasDormant"
[21:04:46.591]            // =>  FALSE
[21:04:46.591]          // skip if-block "hasDormant"
[21:04:46.591]        </control>
[21:04:46.591]        <control if="!hasDormant" while="" timeout="0" info="">
[21:04:46.591]          // if-block "!hasDormant"
[21:04:46.591]            // =>  TRUE
[21:04:46.591]          <block atomic="false" info="">
[21:04:46.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:04:46.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:46.601]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:04:46.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:04:46.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:04:46.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:46.611]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:04:46.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:04:46.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:04:46.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:46.621]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:04:46.621]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:04:46.621]          </block>
[21:04:46.621]          // end if-block "!hasDormant"
[21:04:46.621]        </control>
[21:04:46.621]        // end if-block "isSWJ"
[21:04:46.621]      </control>
[21:04:46.621]      <control if="!isSWJ" while="" timeout="0" info="">
[21:04:46.621]        // if-block "!isSWJ"
[21:04:46.621]          // =>  FALSE
[21:04:46.621]        // skip if-block "!isSWJ"
[21:04:46.621]      </control>
[21:04:46.621]      <block atomic="false" info="">
[21:04:46.621]        ReadDP(0x0);
[21:04:46.621]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:04:46.621]      </block>
[21:04:46.621]      // end if-block "protType == 2"
[21:04:46.621]    </control>
[21:04:46.621]  </sequence>
[21:04:46.621]  
[21:04:46.631]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:04:46.631]  
[21:04:46.631]  <debugvars>
[21:04:46.631]    // Pre-defined
[21:04:46.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:46.631]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:46.631]    __dp=0x00000000
[21:04:46.631]    __ap=0x00000000
[21:04:46.631]    __traceout=0x00000000      (Trace Disabled)
[21:04:46.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:46.631]    __FlashAddr=0x00000000
[21:04:46.631]    __FlashLen=0x00000000
[21:04:46.631]    __FlashArg=0x00000000
[21:04:46.631]    __FlashOp=0x00000000
[21:04:46.631]    __Result=0x00000000
[21:04:46.631]  </debugvars>
[21:04:46.631]  
[21:04:46.631]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:04:46.631]    <block atomic="false" info="">
[21:04:46.631]      __var SW_DP_ABORT       = 0x0;
[21:04:46.631]        // -> [SW_DP_ABORT <= 0x00000000]
[21:04:46.631]      __var DP_CTRL_STAT      = 0x4;
[21:04:46.631]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:04:46.631]      __var DP_SELECT         = 0x8;
[21:04:46.631]        // -> [DP_SELECT <= 0x00000008]
[21:04:46.631]      __var powered_down      = 0;
[21:04:46.631]        // -> [powered_down <= 0x00000000]
[21:04:46.631]      WriteDP(DP_SELECT, 0x00000000);
[21:04:46.641]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:04:46.641]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:04:46.644]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:04:46.644]        // -> [powered_down <= 0x00000001]
[21:04:46.644]    </block>
[21:04:46.644]    <control if="powered_down" while="" timeout="0" info="">
[21:04:46.644]      // if-block "powered_down"
[21:04:46.644]        // =>  TRUE
[21:04:46.644]      <block atomic="false" info="">
[21:04:46.644]        Message(0, "Debug/System power-up request sent");
[21:04:46.644]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:04:46.652]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:04:46.652]      </block>
[21:04:46.652]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:04:46.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:04:46.655]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:04:46.655]        // while-condition  =>  FALSE
[21:04:46.655]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:04:46.655]      </control>
[21:04:46.655]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:04:46.655]        // if-block "(__protocol & 0xFFFF) == 1"
[21:04:46.655]          // =>  FALSE
[21:04:46.655]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:04:46.655]      </control>
[21:04:46.655]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:04:46.655]        // if-block "(__protocol & 0xFFFF) == 2"
[21:04:46.655]          // =>  TRUE
[21:04:46.655]        <block atomic="false" info="">
[21:04:46.655]          Message(0, "executing SWD power up");
[21:04:46.655]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:04:46.662]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:04:46.662]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:04:46.667]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:04:46.667]        </block>
[21:04:46.667]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:04:46.667]      </control>
[21:04:46.667]      // end if-block "powered_down"
[21:04:46.667]    </control>
[21:04:46.667]    <block atomic="false" info="">
[21:04:46.667]      __var DEBUG_PORT_VAL    = 0;
[21:04:46.667]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:04:46.667]      __var ACCESS_POINT_VAL  = 0;
[21:04:46.667]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:04:46.667]      __ap = 1; 
[21:04:46.667]        // -> [__ap <= 0x00000001]
[21:04:46.667]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:04:46.672]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:04:46.672]      __ap = 4;
[21:04:46.672]        // -> [__ap <= 0x00000004]
[21:04:46.672]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:46.672]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:04:46.672]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:04:46.672]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:46.682]    </block>
[21:04:46.682]    <block atomic="false" info="">
[21:04:46.682]      __var nReset = 0x80;
[21:04:46.682]        // -> [nReset <= 0x00000080]
[21:04:46.682]      __var canReadPins = 0;
[21:04:46.682]        // -> [canReadPins <= 0x00000000]
[21:04:46.682]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:04:46.685]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:04:46.685]        // -> [canReadPins <= 0x00000001]
[21:04:46.685]    </block>
[21:04:46.685]    <control if="" while="1" timeout="200" info="">
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.685]      // while "1"  (timeout="200")
[21:04:46.685]      // while-condition  =>  TRUE
[21:04:46.693]      // while "1"  (timeout="200")
[21:04:46.693]      // while  =>  TIMEOUT
[21:04:46.693]      // end while "1"
[21:04:46.693]    </control>
[21:04:46.693]    <control if="canReadPins" while="" timeout="0" info="">
[21:04:46.693]      // if-block "canReadPins"
[21:04:46.693]        // =>  TRUE
[21:04:46.693]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:04:46.693]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:04:46.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:04:46.695]        // while-condition  =>  FALSE
[21:04:46.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:04:46.695]      </control>
[21:04:46.695]      // end if-block "canReadPins"
[21:04:46.695]    </control>
[21:04:46.695]    <control if="!canReadPins" while="" timeout="0" info="">
[21:04:46.695]      // if-block "!canReadPins"
[21:04:46.695]        // =>  FALSE
[21:04:46.695]      // skip if-block "!canReadPins"
[21:04:46.695]    </control>
[21:04:46.695]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:04:46.695]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:46.695]        // =>  TRUE
[21:04:46.695]      <block atomic="false" info="">
[21:04:46.695]        WriteAP(0x00, 0x190008);
[21:04:46.695]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:46.695]        WriteAP(0xF0, 0x01);
[21:04:46.703]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:46.703]      </block>
[21:04:46.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:46.703]    </control>
[21:04:46.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:04:46.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:46.703]        // =>  FALSE
[21:04:46.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:46.703]    </control>
[21:04:46.703]    <block atomic="false" info="">
[21:04:46.703]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:46.714]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:04:46.714]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:04:46.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:46.714]      __ap = 0; //lets make sure we reset the access point selection
[21:04:46.714]        // -> [__ap <= 0x00000000]
[21:04:46.714]    </block>
[21:04:46.714]  </sequence>
[21:04:46.714]  
[21:04:46.760]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:04:46.760]  
[21:04:46.761]  <debugvars>
[21:04:46.761]    // Pre-defined
[21:04:46.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:46.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:46.761]    __dp=0x00000000
[21:04:46.761]    __ap=0x00000000
[21:04:46.762]    __traceout=0x00000000      (Trace Disabled)
[21:04:46.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:46.762]    __FlashAddr=0x00000000
[21:04:46.762]    __FlashLen=0x00000000
[21:04:46.763]    __FlashArg=0x00000000
[21:04:46.763]    __FlashOp=0x00000000
[21:04:46.763]    __Result=0x00000000
[21:04:46.763]  </debugvars>
[21:04:46.763]  
[21:04:46.763]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:04:46.763]    <block atomic="false" info="">
[21:04:46.763]      __var deviceID = 0;
[21:04:46.763]        // -> [deviceID <= 0x00000000]
[21:04:46.763]      __var version = 0;
[21:04:46.764]        // -> [version <= 0x00000000]
[21:04:46.764]      __var partNum = 0;
[21:04:46.764]        // -> [partNum <= 0x00000000]
[21:04:46.764]      __var manuf = 0;
[21:04:46.764]        // -> [manuf <= 0x00000000]
[21:04:46.764]      __var isMSPM0G1X0X_G3X0X = 0;
[21:04:46.764]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:04:46.764]      __var isProduction = 0;
[21:04:46.764]        // -> [isProduction <= 0x00000000]
[21:04:46.765]      __var continueId = 0;
[21:04:46.765]        // -> [continueId <= 0x00000000]
[21:04:46.765]      deviceID =   Read32(0x41C40004);
[21:04:46.775]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:04:46.776]        // -> [deviceID <= 0x2BB8802F]
[21:04:46.776]      version = deviceID >> 28;
[21:04:46.776]        // -> [version <= 0x00000002]
[21:04:46.776]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:04:46.776]        // -> [partNum <= 0x0000BB88]
[21:04:46.776]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:04:46.777]        // -> [manuf <= 0x00000017]
[21:04:46.777]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:04:46.777]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:04:46.777]      isProduction = (version > 0);
[21:04:46.777]        // -> [isProduction <= 0x00000001]
[21:04:46.777]    </block>
[21:04:46.777]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:04:46.777]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:04:46.777]        // =>  FALSE
[21:04:46.778]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:04:46.778]    </control>
[21:04:46.778]    <control if="continueId == 4" while="" timeout="0" info="">
[21:04:46.778]      // if-block "continueId == 4"
[21:04:46.778]        // =>  FALSE
[21:04:46.778]      // skip if-block "continueId == 4"
[21:04:46.778]    </control>
[21:04:46.778]    <control if="!isProduction" while="" timeout="0" info="">
[21:04:46.778]      // if-block "!isProduction"
[21:04:46.779]        // =>  FALSE
[21:04:46.779]      // skip if-block "!isProduction"
[21:04:46.779]    </control>
[21:04:46.779]  </sequence>
[21:04:46.779]  
[21:05:37.719]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:05:37.719]  
[21:05:37.728]  <debugvars>
[21:05:37.728]    // Pre-defined
[21:05:37.728]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:05:37.728]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:05:37.728]    __dp=0x00000000
[21:05:37.728]    __ap=0x00000000
[21:05:37.728]    __traceout=0x00000000      (Trace Disabled)
[21:05:37.728]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:05:37.729]    __FlashAddr=0x00000000
[21:05:37.729]    __FlashLen=0x00000000
[21:05:37.729]    __FlashArg=0x00000000
[21:05:37.729]    __FlashOp=0x00000000
[21:05:37.729]    __Result=0x00000000
[21:05:37.729]  </debugvars>
[21:05:37.729]  
[21:05:37.729]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:05:37.729]    <block atomic="false" info="">
[21:05:37.729]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:05:37.729]        // -> [isSWJ <= 0x00000001]
[21:05:37.729]      __var hasDormant = __protocol & 0x00020000;
[21:05:37.729]        // -> [hasDormant <= 0x00000000]
[21:05:37.729]      __var protType   = __protocol & 0x0000FFFF;
[21:05:37.729]        // -> [protType <= 0x00000002]
[21:05:37.729]    </block>
[21:05:37.729]    <control if="protType == 1" while="" timeout="0" info="">
[21:05:37.729]      // if-block "protType == 1"
[21:05:37.729]        // =>  FALSE
[21:05:37.729]      // skip if-block "protType == 1"
[21:05:37.729]    </control>
[21:05:37.729]    <control if="protType == 2" while="" timeout="0" info="">
[21:05:37.729]      // if-block "protType == 2"
[21:05:37.729]        // =>  TRUE
[21:05:37.729]      <control if="isSWJ" while="" timeout="0" info="">
[21:05:37.729]        // if-block "isSWJ"
[21:05:37.729]          // =>  TRUE
[21:05:37.729]        <control if="hasDormant" while="" timeout="0" info="">
[21:05:37.729]          // if-block "hasDormant"
[21:05:37.729]            // =>  FALSE
[21:05:37.729]          // skip if-block "hasDormant"
[21:05:37.729]        </control>
[21:05:37.729]        <control if="!hasDormant" while="" timeout="0" info="">
[21:05:37.729]          // if-block "!hasDormant"
[21:05:37.729]            // =>  TRUE
[21:05:37.729]          <block atomic="false" info="">
[21:05:37.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:05:37.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:05:37.729]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:05:37.729]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:05:37.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:05:37.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:05:37.737]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:05:37.737]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:05:37.737]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:05:37.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:05:37.737]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:05:37.737]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:05:37.737]          </block>
[21:05:37.737]          // end if-block "!hasDormant"
[21:05:37.737]        </control>
[21:05:37.737]        // end if-block "isSWJ"
[21:05:37.737]      </control>
[21:05:37.747]      <control if="!isSWJ" while="" timeout="0" info="">
[21:05:37.747]        // if-block "!isSWJ"
[21:05:37.747]          // =>  FALSE
[21:05:37.747]        // skip if-block "!isSWJ"
[21:05:37.747]      </control>
[21:05:37.747]      <block atomic="false" info="">
[21:05:37.747]        ReadDP(0x0);
[21:05:37.747]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:05:37.747]      </block>
[21:05:37.747]      // end if-block "protType == 2"
[21:05:37.747]    </control>
[21:05:37.747]  </sequence>
[21:05:37.747]  
[21:05:37.747]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:05:37.747]  
[21:05:37.747]  <debugvars>
[21:05:37.747]    // Pre-defined
[21:05:37.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:05:37.757]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:05:37.757]    __dp=0x00000000
[21:05:37.757]    __ap=0x00000000
[21:05:37.757]    __traceout=0x00000000      (Trace Disabled)
[21:05:37.757]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:05:37.757]    __FlashAddr=0x00000000
[21:05:37.757]    __FlashLen=0x00000000
[21:05:37.759]    __FlashArg=0x00000000
[21:05:37.759]    __FlashOp=0x00000000
[21:05:37.759]    __Result=0x00000000
[21:05:37.759]  </debugvars>
[21:05:37.759]  
[21:05:37.759]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:05:37.759]    <block atomic="false" info="">
[21:05:37.759]      __var SW_DP_ABORT       = 0x0;
[21:05:37.759]        // -> [SW_DP_ABORT <= 0x00000000]
[21:05:37.759]      __var DP_CTRL_STAT      = 0x4;
[21:05:37.759]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:05:37.759]      __var DP_SELECT         = 0x8;
[21:05:37.759]        // -> [DP_SELECT <= 0x00000008]
[21:05:37.759]      __var powered_down      = 0;
[21:05:37.759]        // -> [powered_down <= 0x00000000]
[21:05:37.759]      WriteDP(DP_SELECT, 0x00000000);
[21:05:37.759]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:05:37.759]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:05:37.759]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:05:37.759]        // -> [powered_down <= 0x00000001]
[21:05:37.759]    </block>
[21:05:37.759]    <control if="powered_down" while="" timeout="0" info="">
[21:05:37.759]      // if-block "powered_down"
[21:05:37.759]        // =>  TRUE
[21:05:37.759]      <block atomic="false" info="">
[21:05:37.759]        Message(0, "Debug/System power-up request sent");
[21:05:37.759]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:05:37.770]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:05:37.776]      </block>
[21:05:37.776]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:05:37.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:05:37.778]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:05:37.778]        // while-condition  =>  FALSE
[21:05:37.778]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:05:37.778]      </control>
[21:05:37.778]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:05:37.778]        // if-block "(__protocol & 0xFFFF) == 1"
[21:05:37.780]          // =>  FALSE
[21:05:37.780]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:05:37.780]      </control>
[21:05:37.780]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:05:37.780]        // if-block "(__protocol & 0xFFFF) == 2"
[21:05:37.780]          // =>  TRUE
[21:05:37.780]        <block atomic="false" info="">
[21:05:37.780]          Message(0, "executing SWD power up");
[21:05:37.780]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:05:37.794]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:05:37.794]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:05:37.798]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:05:37.798]        </block>
[21:05:37.798]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:05:37.798]      </control>
[21:05:37.798]      // end if-block "powered_down"
[21:05:37.798]    </control>
[21:05:37.798]    <block atomic="false" info="">
[21:05:37.798]      __var DEBUG_PORT_VAL    = 0;
[21:05:37.798]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:05:37.798]      __var ACCESS_POINT_VAL  = 0;
[21:05:37.798]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:05:37.798]      __ap = 1; 
[21:05:37.798]        // -> [__ap <= 0x00000001]
[21:05:37.798]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:05:37.804]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:05:37.805]      __ap = 4;
[21:05:37.805]        // -> [__ap <= 0x00000004]
[21:05:37.805]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:05:37.813]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:05:37.813]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:05:37.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:05:37.821]    </block>
[21:05:37.821]    <block atomic="false" info="">
[21:05:37.821]      __var nReset = 0x80;
[21:05:37.821]        // -> [nReset <= 0x00000080]
[21:05:37.821]      __var canReadPins = 0;
[21:05:37.821]        // -> [canReadPins <= 0x00000000]
[21:05:37.821]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:05:37.821]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:05:37.821]        // -> [canReadPins <= 0x00000001]
[21:05:37.821]    </block>
[21:05:37.821]    <control if="" while="1" timeout="200" info="">
[21:05:37.821]      // while "1"  (timeout="200")
[21:05:37.821]      // while-condition  =>  TRUE
[21:05:37.821]      // while "1"  (timeout="200")
[21:05:37.821]      // while-condition  =>  TRUE
[21:05:37.821]      // while "1"  (timeout="200")
[21:05:37.821]      // while-condition  =>  TRUE
[21:05:37.826]      // while "1"  (timeout="200")
[21:05:37.826]      // while-condition  =>  TRUE
[21:05:37.826]      // while "1"  (timeout="200")
[21:05:37.826]      // while-condition  =>  TRUE
[21:05:37.826]      // while "1"  (timeout="200")
[21:05:37.826]      // while-condition  =>  TRUE
[21:05:37.826]      // while "1"  (timeout="200")
[21:05:37.826]      // while-condition  =>  TRUE
[21:05:37.826]      // while "1"  (timeout="200")
[21:05:37.826]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.827]      // while-condition  =>  TRUE
[21:05:37.827]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.829]      // while "1"  (timeout="200")
[21:05:37.829]      // while-condition  =>  TRUE
[21:05:37.831]      // while "1"  (timeout="200")
[21:05:37.831]      // while-condition  =>  TRUE
[21:05:37.831]      // while "1"  (timeout="200")
[21:05:37.831]      // while-condition  =>  TRUE
[21:05:37.831]      // while "1"  (timeout="200")
[21:05:37.831]      // while  =>  TIMEOUT
[21:05:37.831]      // end while "1"
[21:05:37.831]    </control>
[21:05:37.831]    <control if="canReadPins" while="" timeout="0" info="">
[21:05:37.831]      // if-block "canReadPins"
[21:05:37.831]        // =>  TRUE
[21:05:37.831]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:05:37.831]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:05:37.832]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:05:37.832]        // while-condition  =>  FALSE
[21:05:37.832]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:05:37.832]      </control>
[21:05:37.832]      // end if-block "canReadPins"
[21:05:37.832]    </control>
[21:05:37.832]    <control if="!canReadPins" while="" timeout="0" info="">
[21:05:37.832]      // if-block "!canReadPins"
[21:05:37.832]        // =>  FALSE
[21:05:37.832]      // skip if-block "!canReadPins"
[21:05:37.832]    </control>
[21:05:37.832]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:05:37.832]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:05:37.832]        // =>  TRUE
[21:05:37.832]      <block atomic="false" info="">
[21:05:37.832]        WriteAP(0x00, 0x190008);
[21:05:37.832]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:05:37.832]        WriteAP(0xF0, 0x01);
[21:05:37.839]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:05:37.839]      </block>
[21:05:37.839]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:05:37.841]    </control>
[21:05:37.841]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:05:37.841]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:05:37.841]        // =>  FALSE
[21:05:37.841]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:05:37.841]    </control>
[21:05:37.841]    <block atomic="false" info="">
[21:05:37.841]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:05:37.841]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:05:37.841]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:05:37.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:05:37.849]      __ap = 0; //lets make sure we reset the access point selection
[21:05:37.849]        // -> [__ap <= 0x00000000]
[21:05:37.849]    </block>
[21:05:37.849]  </sequence>
[21:05:37.849]  
[21:05:37.899]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:05:37.899]  
[21:05:37.899]  <debugvars>
[21:05:37.899]    // Pre-defined
[21:05:37.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:05:37.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:05:37.899]    __dp=0x00000000
[21:05:37.901]    __ap=0x00000000
[21:05:37.901]    __traceout=0x00000000      (Trace Disabled)
[21:05:37.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:05:37.901]    __FlashAddr=0x00000000
[21:05:37.901]    __FlashLen=0x00000000
[21:05:37.901]    __FlashArg=0x00000000
[21:05:37.901]    __FlashOp=0x00000000
[21:05:37.901]    __Result=0x00000000
[21:05:37.901]  </debugvars>
[21:05:37.901]  
[21:05:37.901]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:05:37.901]    <block atomic="false" info="">
[21:05:37.901]      __var deviceID = 0;
[21:05:37.901]        // -> [deviceID <= 0x00000000]
[21:05:37.901]      __var version = 0;
[21:05:37.901]        // -> [version <= 0x00000000]
[21:05:37.901]      __var partNum = 0;
[21:05:37.902]        // -> [partNum <= 0x00000000]
[21:05:37.902]      __var manuf = 0;
[21:05:37.902]        // -> [manuf <= 0x00000000]
[21:05:37.902]      __var isMSPM0G1X0X_G3X0X = 0;
[21:05:37.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:05:37.902]      __var isProduction = 0;
[21:05:37.902]        // -> [isProduction <= 0x00000000]
[21:05:37.902]      __var continueId = 0;
[21:05:37.902]        // -> [continueId <= 0x00000000]
[21:05:37.902]      deviceID =   Read32(0x41C40004);
[21:05:37.912]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:05:37.912]        // -> [deviceID <= 0x2BB8802F]
[21:05:37.912]      version = deviceID >> 28;
[21:05:37.912]        // -> [version <= 0x00000002]
[21:05:37.912]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:05:37.912]        // -> [partNum <= 0x0000BB88]
[21:05:37.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:05:37.912]        // -> [manuf <= 0x00000017]
[21:05:37.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:05:37.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:05:37.912]      isProduction = (version > 0);
[21:05:37.912]        // -> [isProduction <= 0x00000001]
[21:05:37.912]    </block>
[21:05:37.912]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:05:37.912]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:05:37.912]        // =>  FALSE
[21:05:37.915]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:05:37.915]    </control>
[21:05:37.915]    <control if="continueId == 4" while="" timeout="0" info="">
[21:05:37.915]      // if-block "continueId == 4"
[21:05:37.915]        // =>  FALSE
[21:05:37.915]      // skip if-block "continueId == 4"
[21:05:37.915]    </control>
[21:05:37.915]    <control if="!isProduction" while="" timeout="0" info="">
[21:05:37.915]      // if-block "!isProduction"
[21:05:37.915]        // =>  FALSE
[21:05:37.915]      // skip if-block "!isProduction"
[21:05:37.916]    </control>
[21:05:37.916]  </sequence>
[21:05:37.916]  
[21:06:51.532]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:06:51.532]  
[21:06:51.549]  <debugvars>
[21:06:51.549]    // Pre-defined
[21:06:51.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:51.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:51.549]    __dp=0x00000000
[21:06:51.549]    __ap=0x00000000
[21:06:51.549]    __traceout=0x00000000      (Trace Disabled)
[21:06:51.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:51.550]    __FlashAddr=0x00000000
[21:06:51.550]    __FlashLen=0x00000000
[21:06:51.550]    __FlashArg=0x00000000
[21:06:51.550]    __FlashOp=0x00000000
[21:06:51.550]    __Result=0x00000000
[21:06:51.550]  </debugvars>
[21:06:51.550]  
[21:06:51.550]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:06:51.550]    <block atomic="false" info="">
[21:06:51.550]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:06:51.550]        // -> [isSWJ <= 0x00000001]
[21:06:51.550]      __var hasDormant = __protocol & 0x00020000;
[21:06:51.550]        // -> [hasDormant <= 0x00000000]
[21:06:51.550]      __var protType   = __protocol & 0x0000FFFF;
[21:06:51.550]        // -> [protType <= 0x00000002]
[21:06:51.550]    </block>
[21:06:51.551]    <control if="protType == 1" while="" timeout="0" info="">
[21:06:51.551]      // if-block "protType == 1"
[21:06:51.551]        // =>  FALSE
[21:06:51.551]      // skip if-block "protType == 1"
[21:06:51.551]    </control>
[21:06:51.551]    <control if="protType == 2" while="" timeout="0" info="">
[21:06:51.551]      // if-block "protType == 2"
[21:06:51.551]        // =>  TRUE
[21:06:51.551]      <control if="isSWJ" while="" timeout="0" info="">
[21:06:51.553]        // if-block "isSWJ"
[21:06:51.553]          // =>  TRUE
[21:06:51.553]        <control if="hasDormant" while="" timeout="0" info="">
[21:06:51.553]          // if-block "hasDormant"
[21:06:51.553]            // =>  FALSE
[21:06:51.553]          // skip if-block "hasDormant"
[21:06:51.553]        </control>
[21:06:51.553]        <control if="!hasDormant" while="" timeout="0" info="">
[21:06:51.553]          // if-block "!hasDormant"
[21:06:51.553]            // =>  TRUE
[21:06:51.553]          <block atomic="false" info="">
[21:06:51.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:06:51.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:51.553]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:06:51.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:06:51.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:06:51.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:51.559]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:06:51.568]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:06:51.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:06:51.570]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:51.570]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:06:51.570]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:06:51.570]          </block>
[21:06:51.570]          // end if-block "!hasDormant"
[21:06:51.570]        </control>
[21:06:51.570]        // end if-block "isSWJ"
[21:06:51.570]      </control>
[21:06:51.570]      <control if="!isSWJ" while="" timeout="0" info="">
[21:06:51.570]        // if-block "!isSWJ"
[21:06:51.570]          // =>  FALSE
[21:06:51.570]        // skip if-block "!isSWJ"
[21:06:51.570]      </control>
[21:06:51.570]      <block atomic="false" info="">
[21:06:51.570]        ReadDP(0x0);
[21:06:51.570]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:06:51.570]      </block>
[21:06:51.570]      // end if-block "protType == 2"
[21:06:51.570]    </control>
[21:06:51.570]  </sequence>
[21:06:51.570]  
[21:06:51.580]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:06:51.580]  
[21:06:51.580]  <debugvars>
[21:06:51.580]    // Pre-defined
[21:06:51.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:51.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:51.580]    __dp=0x00000000
[21:06:51.580]    __ap=0x00000000
[21:06:51.581]    __traceout=0x00000000      (Trace Disabled)
[21:06:51.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:51.581]    __FlashAddr=0x00000000
[21:06:51.581]    __FlashLen=0x00000000
[21:06:51.581]    __FlashArg=0x00000000
[21:06:51.581]    __FlashOp=0x00000000
[21:06:51.581]    __Result=0x00000000
[21:06:51.582]  </debugvars>
[21:06:51.582]  
[21:06:51.582]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:06:51.582]    <block atomic="false" info="">
[21:06:51.582]      __var SW_DP_ABORT       = 0x0;
[21:06:51.582]        // -> [SW_DP_ABORT <= 0x00000000]
[21:06:51.582]      __var DP_CTRL_STAT      = 0x4;
[21:06:51.582]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:06:51.582]      __var DP_SELECT         = 0x8;
[21:06:51.582]        // -> [DP_SELECT <= 0x00000008]
[21:06:51.582]      __var powered_down      = 0;
[21:06:51.582]        // -> [powered_down <= 0x00000000]
[21:06:51.582]      WriteDP(DP_SELECT, 0x00000000);
[21:06:51.582]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:06:51.582]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:06:51.588]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:06:51.588]        // -> [powered_down <= 0x00000001]
[21:06:51.588]    </block>
[21:06:51.588]    <control if="powered_down" while="" timeout="0" info="">
[21:06:51.588]      // if-block "powered_down"
[21:06:51.588]        // =>  TRUE
[21:06:51.590]      <block atomic="false" info="">
[21:06:51.590]        Message(0, "Debug/System power-up request sent");
[21:06:51.590]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:06:51.590]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:06:51.590]      </block>
[21:06:51.590]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:06:51.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:06:51.598]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:06:51.598]        // while-condition  =>  FALSE
[21:06:51.598]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:06:51.598]      </control>
[21:06:51.598]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:06:51.598]        // if-block "(__protocol & 0xFFFF) == 1"
[21:06:51.598]          // =>  FALSE
[21:06:51.598]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:06:51.598]      </control>
[21:06:51.598]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:06:51.600]        // if-block "(__protocol & 0xFFFF) == 2"
[21:06:51.600]          // =>  TRUE
[21:06:51.600]        <block atomic="false" info="">
[21:06:51.600]          Message(0, "executing SWD power up");
[21:06:51.602]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:06:51.604]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:06:51.604]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:06:51.604]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:06:51.604]        </block>
[21:06:51.604]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:06:51.604]      </control>
[21:06:51.604]      // end if-block "powered_down"
[21:06:51.604]    </control>
[21:06:51.604]    <block atomic="false" info="">
[21:06:51.604]      __var DEBUG_PORT_VAL    = 0;
[21:06:51.608]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:06:51.608]      __var ACCESS_POINT_VAL  = 0;
[21:06:51.608]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:06:51.608]      __ap = 1; 
[21:06:51.608]        // -> [__ap <= 0x00000001]
[21:06:51.608]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:06:51.620]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:06:51.620]      __ap = 4;
[21:06:51.620]        // -> [__ap <= 0x00000004]
[21:06:51.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:51.624]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:06:51.624]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:06:51.624]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:51.627]    </block>
[21:06:51.627]    <block atomic="false" info="">
[21:06:51.627]      __var nReset = 0x80;
[21:06:51.627]        // -> [nReset <= 0x00000080]
[21:06:51.627]      __var canReadPins = 0;
[21:06:51.627]        // -> [canReadPins <= 0x00000000]
[21:06:51.627]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:06:51.629]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:06:51.629]        // -> [canReadPins <= 0x00000001]
[21:06:51.629]    </block>
[21:06:51.629]    <control if="" while="1" timeout="200" info="">
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.630]      // while-condition  =>  TRUE
[21:06:51.630]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.634]      // while-condition  =>  TRUE
[21:06:51.634]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.635]      // while-condition  =>  TRUE
[21:06:51.635]      // while "1"  (timeout="200")
[21:06:51.637]      // while-condition  =>  TRUE
[21:06:51.637]      // while "1"  (timeout="200")
[21:06:51.637]      // while-condition  =>  TRUE
[21:06:51.637]      // while "1"  (timeout="200")
[21:06:51.637]      // while-condition  =>  TRUE
[21:06:51.637]      // while "1"  (timeout="200")
[21:06:51.637]      // while-condition  =>  TRUE
[21:06:51.637]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.638]      // while-condition  =>  TRUE
[21:06:51.638]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.641]      // while "1"  (timeout="200")
[21:06:51.641]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.643]      // while-condition  =>  TRUE
[21:06:51.643]      // while "1"  (timeout="200")
[21:06:51.651]      // while-condition  =>  TRUE
[21:06:51.651]      // while "1"  (timeout="200")
[21:06:51.651]      // while  =>  TIMEOUT
[21:06:51.651]      // end while "1"
[21:06:51.651]    </control>
[21:06:51.651]    <control if="canReadPins" while="" timeout="0" info="">
[21:06:51.651]      // if-block "canReadPins"
[21:06:51.651]        // =>  TRUE
[21:06:51.651]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:06:51.651]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:06:51.651]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:06:51.651]        // while-condition  =>  FALSE
[21:06:51.651]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:06:51.651]      </control>
[21:06:51.651]      // end if-block "canReadPins"
[21:06:51.651]    </control>
[21:06:51.651]    <control if="!canReadPins" while="" timeout="0" info="">
[21:06:51.651]      // if-block "!canReadPins"
[21:06:51.651]        // =>  FALSE
[21:06:51.651]      // skip if-block "!canReadPins"
[21:06:51.651]    </control>
[21:06:51.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:06:51.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:51.651]        // =>  TRUE
[21:06:51.651]      <block atomic="false" info="">
[21:06:51.651]        WriteAP(0x00, 0x190008);
[21:06:51.651]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:51.651]        WriteAP(0xF0, 0x01);
[21:06:51.661]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:51.661]      </block>
[21:06:51.661]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:51.661]    </control>
[21:06:51.661]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:06:51.661]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:51.661]        // =>  FALSE
[21:06:51.661]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:51.661]    </control>
[21:06:51.661]    <block atomic="false" info="">
[21:06:51.661]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:51.665]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:06:51.665]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:06:51.665]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:51.666]      __ap = 0; //lets make sure we reset the access point selection
[21:06:51.666]        // -> [__ap <= 0x00000000]
[21:06:51.666]    </block>
[21:06:51.666]  </sequence>
[21:06:51.666]  
[21:06:51.693]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:06:51.693]  
[21:06:51.693]  <debugvars>
[21:06:51.693]    // Pre-defined
[21:06:51.693]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:51.693]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:51.693]    __dp=0x00000000
[21:06:51.693]    __ap=0x00000000
[21:06:51.693]    __traceout=0x00000000      (Trace Disabled)
[21:06:51.693]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:51.694]    __FlashAddr=0x00000000
[21:06:51.694]    __FlashLen=0x00000000
[21:06:51.694]    __FlashArg=0x00000000
[21:06:51.694]    __FlashOp=0x00000000
[21:06:51.694]    __Result=0x00000000
[21:06:51.694]  </debugvars>
[21:06:51.694]  
[21:06:51.694]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:06:51.694]    <block atomic="false" info="">
[21:06:51.694]      __var deviceID = 0;
[21:06:51.695]        // -> [deviceID <= 0x00000000]
[21:06:51.695]      __var version = 0;
[21:06:51.695]        // -> [version <= 0x00000000]
[21:06:51.695]      __var partNum = 0;
[21:06:51.695]        // -> [partNum <= 0x00000000]
[21:06:51.695]      __var manuf = 0;
[21:06:51.696]        // -> [manuf <= 0x00000000]
[21:06:51.696]      __var isMSPM0G1X0X_G3X0X = 0;
[21:06:51.696]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:06:51.696]      __var isProduction = 0;
[21:06:51.696]        // -> [isProduction <= 0x00000000]
[21:06:51.696]      __var continueId = 0;
[21:06:51.696]        // -> [continueId <= 0x00000000]
[21:06:51.696]      deviceID =   Read32(0x41C40004);
[21:06:51.703]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:06:51.703]        // -> [deviceID <= 0x2BB8802F]
[21:06:51.703]      version = deviceID >> 28;
[21:06:51.703]        // -> [version <= 0x00000002]
[21:06:51.704]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:06:51.704]        // -> [partNum <= 0x0000BB88]
[21:06:51.704]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:06:51.704]        // -> [manuf <= 0x00000017]
[21:06:51.704]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:06:51.704]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:06:51.704]      isProduction = (version > 0);
[21:06:51.704]        // -> [isProduction <= 0x00000001]
[21:06:51.705]    </block>
[21:06:51.705]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:06:51.705]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:06:51.705]        // =>  FALSE
[21:06:51.705]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:06:51.705]    </control>
[21:06:51.705]    <control if="continueId == 4" while="" timeout="0" info="">
[21:06:51.705]      // if-block "continueId == 4"
[21:06:51.705]        // =>  FALSE
[21:06:51.705]      // skip if-block "continueId == 4"
[21:06:51.705]    </control>
[21:06:51.706]    <control if="!isProduction" while="" timeout="0" info="">
[21:06:51.706]      // if-block "!isProduction"
[21:06:51.706]        // =>  FALSE
[21:06:51.706]      // skip if-block "!isProduction"
[21:06:51.706]    </control>
[21:06:51.706]  </sequence>
[21:06:51.706]  
[21:07:32.140]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:07:32.140]  
[21:07:32.152]  <debugvars>
[21:07:32.152]    // Pre-defined
[21:07:32.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:32.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:32.152]    __dp=0x00000000
[21:07:32.152]    __ap=0x00000000
[21:07:32.152]    __traceout=0x00000000      (Trace Disabled)
[21:07:32.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:32.152]    __FlashAddr=0x00000000
[21:07:32.152]    __FlashLen=0x00000000
[21:07:32.152]    __FlashArg=0x00000000
[21:07:32.152]    __FlashOp=0x00000000
[21:07:32.152]    __Result=0x00000000
[21:07:32.152]  </debugvars>
[21:07:32.152]  
[21:07:32.152]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:07:32.152]    <block atomic="false" info="">
[21:07:32.152]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:07:32.152]        // -> [isSWJ <= 0x00000001]
[21:07:32.152]      __var hasDormant = __protocol & 0x00020000;
[21:07:32.152]        // -> [hasDormant <= 0x00000000]
[21:07:32.152]      __var protType   = __protocol & 0x0000FFFF;
[21:07:32.152]        // -> [protType <= 0x00000002]
[21:07:32.152]    </block>
[21:07:32.152]    <control if="protType == 1" while="" timeout="0" info="">
[21:07:32.152]      // if-block "protType == 1"
[21:07:32.152]        // =>  FALSE
[21:07:32.152]      // skip if-block "protType == 1"
[21:07:32.152]    </control>
[21:07:32.152]    <control if="protType == 2" while="" timeout="0" info="">
[21:07:32.152]      // if-block "protType == 2"
[21:07:32.152]        // =>  TRUE
[21:07:32.152]      <control if="isSWJ" while="" timeout="0" info="">
[21:07:32.152]        // if-block "isSWJ"
[21:07:32.152]          // =>  TRUE
[21:07:32.152]        <control if="hasDormant" while="" timeout="0" info="">
[21:07:32.152]          // if-block "hasDormant"
[21:07:32.152]            // =>  FALSE
[21:07:32.152]          // skip if-block "hasDormant"
[21:07:32.152]        </control>
[21:07:32.152]        <control if="!hasDormant" while="" timeout="0" info="">
[21:07:32.152]          // if-block "!hasDormant"
[21:07:32.152]            // =>  TRUE
[21:07:32.152]          <block atomic="false" info="">
[21:07:32.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:07:32.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:32.152]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:07:32.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:07:32.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:07:32.160]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:32.160]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:07:32.160]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:07:32.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:07:32.160]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:07:32.160]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:07:32.160]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:07:32.160]          </block>
[21:07:32.160]          // end if-block "!hasDormant"
[21:07:32.160]        </control>
[21:07:32.160]        // end if-block "isSWJ"
[21:07:32.160]      </control>
[21:07:32.160]      <control if="!isSWJ" while="" timeout="0" info="">
[21:07:32.160]        // if-block "!isSWJ"
[21:07:32.160]          // =>  FALSE
[21:07:32.160]        // skip if-block "!isSWJ"
[21:07:32.160]      </control>
[21:07:32.170]      <block atomic="false" info="">
[21:07:32.170]        ReadDP(0x0);
[21:07:32.170]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:07:32.170]      </block>
[21:07:32.170]      // end if-block "protType == 2"
[21:07:32.170]    </control>
[21:07:32.170]  </sequence>
[21:07:32.170]  
[21:07:32.170]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:07:32.170]  
[21:07:32.170]  <debugvars>
[21:07:32.170]    // Pre-defined
[21:07:32.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:32.170]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:32.170]    __dp=0x00000000
[21:07:32.170]    __ap=0x00000000
[21:07:32.170]    __traceout=0x00000000      (Trace Disabled)
[21:07:32.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:32.170]    __FlashAddr=0x00000000
[21:07:32.170]    __FlashLen=0x00000000
[21:07:32.170]    __FlashArg=0x00000000
[21:07:32.170]    __FlashOp=0x00000000
[21:07:32.170]    __Result=0x00000000
[21:07:32.170]  </debugvars>
[21:07:32.170]  
[21:07:32.170]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:07:32.170]    <block atomic="false" info="">
[21:07:32.170]      __var SW_DP_ABORT       = 0x0;
[21:07:32.170]        // -> [SW_DP_ABORT <= 0x00000000]
[21:07:32.170]      __var DP_CTRL_STAT      = 0x4;
[21:07:32.170]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:07:32.170]      __var DP_SELECT         = 0x8;
[21:07:32.170]        // -> [DP_SELECT <= 0x00000008]
[21:07:32.170]      __var powered_down      = 0;
[21:07:32.170]        // -> [powered_down <= 0x00000000]
[21:07:32.170]      WriteDP(DP_SELECT, 0x00000000);
[21:07:32.181]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:07:32.181]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:07:32.181]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:07:32.181]        // -> [powered_down <= 0x00000001]
[21:07:32.181]    </block>
[21:07:32.181]    <control if="powered_down" while="" timeout="0" info="">
[21:07:32.181]      // if-block "powered_down"
[21:07:32.181]        // =>  TRUE
[21:07:32.181]      <block atomic="false" info="">
[21:07:32.181]        Message(0, "Debug/System power-up request sent");
[21:07:32.181]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:07:32.181]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:07:32.181]      </block>
[21:07:32.181]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:07:32.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:07:32.190]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:07:32.190]        // while-condition  =>  FALSE
[21:07:32.190]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:07:32.190]      </control>
[21:07:32.190]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:07:32.190]        // if-block "(__protocol & 0xFFFF) == 1"
[21:07:32.190]          // =>  FALSE
[21:07:32.190]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:07:32.190]      </control>
[21:07:32.190]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:07:32.190]        // if-block "(__protocol & 0xFFFF) == 2"
[21:07:32.190]          // =>  TRUE
[21:07:32.190]        <block atomic="false" info="">
[21:07:32.190]          Message(0, "executing SWD power up");
[21:07:32.190]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:07:32.190]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:07:32.190]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:07:32.200]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:07:32.200]        </block>
[21:07:32.200]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:07:32.200]      </control>
[21:07:32.200]      // end if-block "powered_down"
[21:07:32.200]    </control>
[21:07:32.200]    <block atomic="false" info="">
[21:07:32.200]      __var DEBUG_PORT_VAL    = 0;
[21:07:32.200]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:07:32.200]      __var ACCESS_POINT_VAL  = 0;
[21:07:32.200]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:07:32.200]      __ap = 1; 
[21:07:32.200]        // -> [__ap <= 0x00000001]
[21:07:32.200]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:07:32.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:07:32.200]      __ap = 4;
[21:07:32.200]        // -> [__ap <= 0x00000004]
[21:07:32.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:07:32.210]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:07:32.210]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:07:32.210]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:07:32.210]    </block>
[21:07:32.210]    <block atomic="false" info="">
[21:07:32.210]      __var nReset = 0x80;
[21:07:32.210]        // -> [nReset <= 0x00000080]
[21:07:32.210]      __var canReadPins = 0;
[21:07:32.210]        // -> [canReadPins <= 0x00000000]
[21:07:32.210]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:07:32.210]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:07:32.210]        // -> [canReadPins <= 0x00000001]
[21:07:32.210]    </block>
[21:07:32.210]    <control if="" while="1" timeout="200" info="">
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.210]      // while-condition  =>  TRUE
[21:07:32.210]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.220]      // while-condition  =>  TRUE
[21:07:32.220]      // while "1"  (timeout="200")
[21:07:32.230]      // while-condition  =>  TRUE
[21:07:32.230]      // while "1"  (timeout="200")
[21:07:32.230]      // while  =>  TIMEOUT
[21:07:32.230]      // end while "1"
[21:07:32.230]    </control>
[21:07:32.230]    <control if="canReadPins" while="" timeout="0" info="">
[21:07:32.230]      // if-block "canReadPins"
[21:07:32.230]        // =>  TRUE
[21:07:32.230]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:07:32.230]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:07:32.230]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:07:32.230]        // while-condition  =>  FALSE
[21:07:32.230]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:07:32.230]      </control>
[21:07:32.230]      // end if-block "canReadPins"
[21:07:32.230]    </control>
[21:07:32.230]    <control if="!canReadPins" while="" timeout="0" info="">
[21:07:32.230]      // if-block "!canReadPins"
[21:07:32.230]        // =>  FALSE
[21:07:32.230]      // skip if-block "!canReadPins"
[21:07:32.230]    </control>
[21:07:32.230]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:07:32.230]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:07:32.230]        // =>  TRUE
[21:07:32.230]      <block atomic="false" info="">
[21:07:32.230]        WriteAP(0x00, 0x190008);
[21:07:32.230]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:07:32.230]        WriteAP(0xF0, 0x01);
[21:07:32.240]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:07:32.240]      </block>
[21:07:32.240]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:07:32.240]    </control>
[21:07:32.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:07:32.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:07:32.240]        // =>  FALSE
[21:07:32.240]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:07:32.240]    </control>
[21:07:32.240]    <block atomic="false" info="">
[21:07:32.240]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:07:32.240]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:07:32.240]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:07:32.240]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:07:32.240]      __ap = 0; //lets make sure we reset the access point selection
[21:07:32.240]        // -> [__ap <= 0x00000000]
[21:07:32.240]    </block>
[21:07:32.240]  </sequence>
[21:07:32.240]  
[21:07:32.261]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:07:32.261]  
[21:07:32.271]  <debugvars>
[21:07:32.271]    // Pre-defined
[21:07:32.271]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:07:32.271]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:07:32.271]    __dp=0x00000000
[21:07:32.271]    __ap=0x00000000
[21:07:32.271]    __traceout=0x00000000      (Trace Disabled)
[21:07:32.271]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:07:32.271]    __FlashAddr=0x00000000
[21:07:32.271]    __FlashLen=0x00000000
[21:07:32.271]    __FlashArg=0x00000000
[21:07:32.271]    __FlashOp=0x00000000
[21:07:32.271]    __Result=0x00000000
[21:07:32.271]  </debugvars>
[21:07:32.271]  
[21:07:32.271]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:07:32.271]    <block atomic="false" info="">
[21:07:32.271]      __var deviceID = 0;
[21:07:32.271]        // -> [deviceID <= 0x00000000]
[21:07:32.271]      __var version = 0;
[21:07:32.271]        // -> [version <= 0x00000000]
[21:07:32.271]      __var partNum = 0;
[21:07:32.271]        // -> [partNum <= 0x00000000]
[21:07:32.271]      __var manuf = 0;
[21:07:32.271]        // -> [manuf <= 0x00000000]
[21:07:32.271]      __var isMSPM0G1X0X_G3X0X = 0;
[21:07:32.271]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:07:32.271]      __var isProduction = 0;
[21:07:32.271]        // -> [isProduction <= 0x00000000]
[21:07:32.271]      __var continueId = 0;
[21:07:32.271]        // -> [continueId <= 0x00000000]
[21:07:32.271]      deviceID =   Read32(0x41C40004);
[21:07:32.271]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:07:32.271]        // -> [deviceID <= 0x2BB8802F]
[21:07:32.281]      version = deviceID >> 28;
[21:07:32.281]        // -> [version <= 0x00000002]
[21:07:32.281]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:07:32.281]        // -> [partNum <= 0x0000BB88]
[21:07:32.281]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:07:32.281]        // -> [manuf <= 0x00000017]
[21:07:32.281]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:07:32.281]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:07:32.281]      isProduction = (version > 0);
[21:07:32.281]        // -> [isProduction <= 0x00000001]
[21:07:32.281]    </block>
[21:07:32.281]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:07:32.281]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:07:32.281]        // =>  FALSE
[21:07:32.281]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:07:32.281]    </control>
[21:07:32.281]    <control if="continueId == 4" while="" timeout="0" info="">
[21:07:32.281]      // if-block "continueId == 4"
[21:07:32.281]        // =>  FALSE
[21:07:32.281]      // skip if-block "continueId == 4"
[21:07:32.281]    </control>
[21:07:32.281]    <control if="!isProduction" while="" timeout="0" info="">
[21:07:32.281]      // if-block "!isProduction"
[21:07:32.281]        // =>  FALSE
[21:07:32.281]      // skip if-block "!isProduction"
[21:07:32.281]    </control>
[21:07:32.281]  </sequence>
[21:07:32.281]  
[21:21:11.396]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:21:11.396]  
[21:21:11.398]  <debugvars>
[21:21:11.398]    // Pre-defined
[21:21:11.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:11.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:11.398]    __dp=0x00000000
[21:21:11.398]    __ap=0x00000000
[21:21:11.398]    __traceout=0x00000000      (Trace Disabled)
[21:21:11.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:11.398]    __FlashAddr=0x00000000
[21:21:11.398]    __FlashLen=0x00000000
[21:21:11.398]    __FlashArg=0x00000000
[21:21:11.398]    __FlashOp=0x00000000
[21:21:11.398]    __Result=0x00000000
[21:21:11.398]  </debugvars>
[21:21:11.398]  
[21:21:11.398]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:21:11.398]    <block atomic="false" info="">
[21:21:11.400]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:21:11.400]        // -> [isSWJ <= 0x00000001]
[21:21:11.400]      __var hasDormant = __protocol & 0x00020000;
[21:21:11.400]        // -> [hasDormant <= 0x00000000]
[21:21:11.400]      __var protType   = __protocol & 0x0000FFFF;
[21:21:11.400]        // -> [protType <= 0x00000002]
[21:21:11.400]    </block>
[21:21:11.400]    <control if="protType == 1" while="" timeout="0" info="">
[21:21:11.400]      // if-block "protType == 1"
[21:21:11.400]        // =>  FALSE
[21:21:11.400]      // skip if-block "protType == 1"
[21:21:11.400]    </control>
[21:21:11.400]    <control if="protType == 2" while="" timeout="0" info="">
[21:21:11.400]      // if-block "protType == 2"
[21:21:11.400]        // =>  TRUE
[21:21:11.400]      <control if="isSWJ" while="" timeout="0" info="">
[21:21:11.400]        // if-block "isSWJ"
[21:21:11.400]          // =>  TRUE
[21:21:11.400]        <control if="hasDormant" while="" timeout="0" info="">
[21:21:11.402]          // if-block "hasDormant"
[21:21:11.402]            // =>  FALSE
[21:21:11.402]          // skip if-block "hasDormant"
[21:21:11.402]        </control>
[21:21:11.402]        <control if="!hasDormant" while="" timeout="0" info="">
[21:21:11.402]          // if-block "!hasDormant"
[21:21:11.402]            // =>  TRUE
[21:21:11.402]          <block atomic="false" info="">
[21:21:11.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:21:11.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:11.403]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:21:11.406]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:21:11.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:21:11.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:11.406]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:21:11.406]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:21:11.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:21:11.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:11.406]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:21:11.406]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:21:11.406]          </block>
[21:21:11.406]          // end if-block "!hasDormant"
[21:21:11.406]        </control>
[21:21:11.406]        // end if-block "isSWJ"
[21:21:11.406]      </control>
[21:21:11.406]      <control if="!isSWJ" while="" timeout="0" info="">
[21:21:11.406]        // if-block "!isSWJ"
[21:21:11.406]          // =>  FALSE
[21:21:11.406]        // skip if-block "!isSWJ"
[21:21:11.406]      </control>
[21:21:11.406]      <block atomic="false" info="">
[21:21:11.406]        ReadDP(0x0);
[21:21:11.406]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:21:11.406]      </block>
[21:21:11.406]      // end if-block "protType == 2"
[21:21:11.406]    </control>
[21:21:11.406]  </sequence>
[21:21:11.406]  
[21:21:11.416]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:21:11.416]  
[21:21:11.416]  <debugvars>
[21:21:11.416]    // Pre-defined
[21:21:11.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:11.416]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:11.416]    __dp=0x00000000
[21:21:11.416]    __ap=0x00000000
[21:21:11.416]    __traceout=0x00000000      (Trace Disabled)
[21:21:11.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:11.416]    __FlashAddr=0x00000000
[21:21:11.416]    __FlashLen=0x00000000
[21:21:11.416]    __FlashArg=0x00000000
[21:21:11.416]    __FlashOp=0x00000000
[21:21:11.416]    __Result=0x00000000
[21:21:11.416]  </debugvars>
[21:21:11.416]  
[21:21:11.416]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:21:11.416]    <block atomic="false" info="">
[21:21:11.416]      __var SW_DP_ABORT       = 0x0;
[21:21:11.416]        // -> [SW_DP_ABORT <= 0x00000000]
[21:21:11.416]      __var DP_CTRL_STAT      = 0x4;
[21:21:11.416]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:21:11.416]      __var DP_SELECT         = 0x8;
[21:21:11.416]        // -> [DP_SELECT <= 0x00000008]
[21:21:11.422]      __var powered_down      = 0;
[21:21:11.422]        // -> [powered_down <= 0x00000000]
[21:21:11.422]      WriteDP(DP_SELECT, 0x00000000);
[21:21:11.422]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:21:11.422]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:21:11.429]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:21:11.429]        // -> [powered_down <= 0x00000001]
[21:21:11.429]    </block>
[21:21:11.429]    <control if="powered_down" while="" timeout="0" info="">
[21:21:11.429]      // if-block "powered_down"
[21:21:11.429]        // =>  TRUE
[21:21:11.429]      <block atomic="false" info="">
[21:21:11.429]        Message(0, "Debug/System power-up request sent");
[21:21:11.431]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:21:11.434]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:21:11.434]      </block>
[21:21:11.434]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:21:11.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:21:11.436]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:21:11.436]        // while-condition  =>  FALSE
[21:21:11.436]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:21:11.436]      </control>
[21:21:11.436]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:21:11.438]        // if-block "(__protocol & 0xFFFF) == 1"
[21:21:11.438]          // =>  FALSE
[21:21:11.438]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:21:11.438]      </control>
[21:21:11.438]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:21:11.438]        // if-block "(__protocol & 0xFFFF) == 2"
[21:21:11.438]          // =>  TRUE
[21:21:11.438]        <block atomic="false" info="">
[21:21:11.438]          Message(0, "executing SWD power up");
[21:21:11.440]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:21:11.444]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:21:11.444]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:21:11.444]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:21:11.446]        </block>
[21:21:11.446]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:21:11.446]      </control>
[21:21:11.446]      // end if-block "powered_down"
[21:21:11.446]    </control>
[21:21:11.446]    <block atomic="false" info="">
[21:21:11.446]      __var DEBUG_PORT_VAL    = 0;
[21:21:11.446]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:21:11.446]      __var ACCESS_POINT_VAL  = 0;
[21:21:11.446]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:21:11.446]      __ap = 1; 
[21:21:11.446]        // -> [__ap <= 0x00000001]
[21:21:11.446]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:21:11.456]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:21:11.456]      __ap = 4;
[21:21:11.456]        // -> [__ap <= 0x00000004]
[21:21:11.456]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:11.459]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:21:11.459]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:21:11.459]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:11.459]    </block>
[21:21:11.459]    <block atomic="false" info="">
[21:21:11.459]      __var nReset = 0x80;
[21:21:11.459]        // -> [nReset <= 0x00000080]
[21:21:11.459]      __var canReadPins = 0;
[21:21:11.459]        // -> [canReadPins <= 0x00000000]
[21:21:11.459]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:21:11.466]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:21:11.466]        // -> [canReadPins <= 0x00000001]
[21:21:11.466]    </block>
[21:21:11.466]    <control if="" while="1" timeout="200" info="">
[21:21:11.466]      // while "1"  (timeout="200")
[21:21:11.466]      // while-condition  =>  TRUE
[21:21:11.466]      // while "1"  (timeout="200")
[21:21:11.466]      // while-condition  =>  TRUE
[21:21:11.466]      // while "1"  (timeout="200")
[21:21:11.466]      // while-condition  =>  TRUE
[21:21:11.466]      // while "1"  (timeout="200")
[21:21:11.468]      // while-condition  =>  TRUE
[21:21:11.468]      // while "1"  (timeout="200")
[21:21:11.468]      // while-condition  =>  TRUE
[21:21:11.468]      // while "1"  (timeout="200")
[21:21:11.468]      // while-condition  =>  TRUE
[21:21:11.468]      // while "1"  (timeout="200")
[21:21:11.468]      // while-condition  =>  TRUE
[21:21:11.468]      // while "1"  (timeout="200")
[21:21:11.468]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.470]      // while "1"  (timeout="200")
[21:21:11.470]      // while-condition  =>  TRUE
[21:21:11.472]      // while "1"  (timeout="200")
[21:21:11.472]      // while  =>  TIMEOUT
[21:21:11.472]      // end while "1"
[21:21:11.472]    </control>
[21:21:11.472]    <control if="canReadPins" while="" timeout="0" info="">
[21:21:11.472]      // if-block "canReadPins"
[21:21:11.472]        // =>  TRUE
[21:21:11.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:21:11.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:21:11.472]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:21:11.472]        // while-condition  =>  FALSE
[21:21:11.472]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:21:11.472]      </control>
[21:21:11.472]      // end if-block "canReadPins"
[21:21:11.472]    </control>
[21:21:11.472]    <control if="!canReadPins" while="" timeout="0" info="">
[21:21:11.472]      // if-block "!canReadPins"
[21:21:11.472]        // =>  FALSE
[21:21:11.472]      // skip if-block "!canReadPins"
[21:21:11.472]    </control>
[21:21:11.472]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:21:11.472]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:11.472]        // =>  TRUE
[21:21:11.472]      <block atomic="false" info="">
[21:21:11.472]        WriteAP(0x00, 0x190008);
[21:21:11.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:11.476]        WriteAP(0xF0, 0x01);
[21:21:11.481]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:11.481]      </block>
[21:21:11.481]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:11.481]    </control>
[21:21:11.481]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:21:11.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:11.481]        // =>  FALSE
[21:21:11.481]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:11.481]    </control>
[21:21:11.481]    <block atomic="false" info="">
[21:21:11.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:11.487]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:21:11.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:21:11.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:11.491]      __ap = 0; //lets make sure we reset the access point selection
[21:21:11.491]        // -> [__ap <= 0x00000000]
[21:21:11.491]    </block>
[21:21:11.491]  </sequence>
[21:21:11.491]  
[21:21:11.508]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:21:11.508]  
[21:21:11.508]  <debugvars>
[21:21:11.508]    // Pre-defined
[21:21:11.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:11.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:11.508]    __dp=0x00000000
[21:21:11.508]    __ap=0x00000000
[21:21:11.517]    __traceout=0x00000000      (Trace Disabled)
[21:21:11.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:11.517]    __FlashAddr=0x00000000
[21:21:11.517]    __FlashLen=0x00000000
[21:21:11.517]    __FlashArg=0x00000000
[21:21:11.517]    __FlashOp=0x00000000
[21:21:11.517]    __Result=0x00000000
[21:21:11.517]  </debugvars>
[21:21:11.517]  
[21:21:11.517]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:21:11.517]    <block atomic="false" info="">
[21:21:11.517]      __var deviceID = 0;
[21:21:11.517]        // -> [deviceID <= 0x00000000]
[21:21:11.517]      __var version = 0;
[21:21:11.517]        // -> [version <= 0x00000000]
[21:21:11.517]      __var partNum = 0;
[21:21:11.517]        // -> [partNum <= 0x00000000]
[21:21:11.517]      __var manuf = 0;
[21:21:11.517]        // -> [manuf <= 0x00000000]
[21:21:11.517]      __var isMSPM0G1X0X_G3X0X = 0;
[21:21:11.517]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:21:11.519]      __var isProduction = 0;
[21:21:11.519]        // -> [isProduction <= 0x00000000]
[21:21:11.519]      __var continueId = 0;
[21:21:11.519]        // -> [continueId <= 0x00000000]
[21:21:11.519]      deviceID =   Read32(0x41C40004);
[21:21:11.522]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:21:11.522]        // -> [deviceID <= 0x2BB8802F]
[21:21:11.522]      version = deviceID >> 28;
[21:21:11.522]        // -> [version <= 0x00000002]
[21:21:11.522]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:21:11.522]        // -> [partNum <= 0x0000BB88]
[21:21:11.522]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:21:11.522]        // -> [manuf <= 0x00000017]
[21:21:11.522]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:21:11.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:21:11.522]      isProduction = (version > 0);
[21:21:11.522]        // -> [isProduction <= 0x00000001]
[21:21:11.522]    </block>
[21:21:11.522]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:21:11.522]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:21:11.522]        // =>  FALSE
[21:21:11.527]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:21:11.527]    </control>
[21:21:11.527]    <control if="continueId == 4" while="" timeout="0" info="">
[21:21:11.527]      // if-block "continueId == 4"
[21:21:11.527]        // =>  FALSE
[21:21:11.527]      // skip if-block "continueId == 4"
[21:21:11.527]    </control>
[21:21:11.527]    <control if="!isProduction" while="" timeout="0" info="">
[21:21:11.527]      // if-block "!isProduction"
[21:21:11.527]        // =>  FALSE
[21:21:11.527]      // skip if-block "!isProduction"
[21:21:11.527]    </control>
[21:21:11.527]  </sequence>
[21:21:11.527]  
[21:29:26.995]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:29:26.995]  
[21:29:27.009]  <debugvars>
[21:29:27.009]    // Pre-defined
[21:29:27.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:27.009]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:27.009]    __dp=0x00000000
[21:29:27.009]    __ap=0x00000000
[21:29:27.009]    __traceout=0x00000000      (Trace Disabled)
[21:29:27.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:27.009]    __FlashAddr=0x00000000
[21:29:27.009]    __FlashLen=0x00000000
[21:29:27.009]    __FlashArg=0x00000000
[21:29:27.009]    __FlashOp=0x00000000
[21:29:27.009]    __Result=0x00000000
[21:29:27.009]  </debugvars>
[21:29:27.009]  
[21:29:27.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:29:27.009]    <block atomic="false" info="">
[21:29:27.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:29:27.009]        // -> [isSWJ <= 0x00000001]
[21:29:27.009]      __var hasDormant = __protocol & 0x00020000;
[21:29:27.009]        // -> [hasDormant <= 0x00000000]
[21:29:27.009]      __var protType   = __protocol & 0x0000FFFF;
[21:29:27.009]        // -> [protType <= 0x00000002]
[21:29:27.009]    </block>
[21:29:27.009]    <control if="protType == 1" while="" timeout="0" info="">
[21:29:27.009]      // if-block "protType == 1"
[21:29:27.012]        // =>  FALSE
[21:29:27.012]      // skip if-block "protType == 1"
[21:29:27.012]    </control>
[21:29:27.012]    <control if="protType == 2" while="" timeout="0" info="">
[21:29:27.012]      // if-block "protType == 2"
[21:29:27.012]        // =>  TRUE
[21:29:27.012]      <control if="isSWJ" while="" timeout="0" info="">
[21:29:27.012]        // if-block "isSWJ"
[21:29:27.012]          // =>  TRUE
[21:29:27.012]        <control if="hasDormant" while="" timeout="0" info="">
[21:29:27.012]          // if-block "hasDormant"
[21:29:27.013]            // =>  FALSE
[21:29:27.013]          // skip if-block "hasDormant"
[21:29:27.013]        </control>
[21:29:27.013]        <control if="!hasDormant" while="" timeout="0" info="">
[21:29:27.013]          // if-block "!hasDormant"
[21:29:27.013]            // =>  TRUE
[21:29:27.013]          <block atomic="false" info="">
[21:29:27.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:29:27.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:27.016]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:29:27.016]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:29:27.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:29:27.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:27.016]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:29:27.016]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:29:27.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:29:27.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:27.016]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:29:27.025]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:29:27.025]          </block>
[21:29:27.025]          // end if-block "!hasDormant"
[21:29:27.025]        </control>
[21:29:27.025]        // end if-block "isSWJ"
[21:29:27.025]      </control>
[21:29:27.025]      <control if="!isSWJ" while="" timeout="0" info="">
[21:29:27.025]        // if-block "!isSWJ"
[21:29:27.025]          // =>  FALSE
[21:29:27.025]        // skip if-block "!isSWJ"
[21:29:27.025]      </control>
[21:29:27.025]      <block atomic="false" info="">
[21:29:27.025]        ReadDP(0x0);
[21:29:27.025]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:29:27.025]      </block>
[21:29:27.025]      // end if-block "protType == 2"
[21:29:27.025]    </control>
[21:29:27.025]  </sequence>
[21:29:27.025]  
[21:29:27.029]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:29:27.029]  
[21:29:27.029]  <debugvars>
[21:29:27.029]    // Pre-defined
[21:29:27.029]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:27.029]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:27.029]    __dp=0x00000000
[21:29:27.029]    __ap=0x00000000
[21:29:27.029]    __traceout=0x00000000      (Trace Disabled)
[21:29:27.029]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:27.029]    __FlashAddr=0x00000000
[21:29:27.029]    __FlashLen=0x00000000
[21:29:27.029]    __FlashArg=0x00000000
[21:29:27.029]    __FlashOp=0x00000000
[21:29:27.029]    __Result=0x00000000
[21:29:27.029]  </debugvars>
[21:29:27.029]  
[21:29:27.029]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:29:27.029]    <block atomic="false" info="">
[21:29:27.029]      __var SW_DP_ABORT       = 0x0;
[21:29:27.029]        // -> [SW_DP_ABORT <= 0x00000000]
[21:29:27.029]      __var DP_CTRL_STAT      = 0x4;
[21:29:27.029]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:29:27.029]      __var DP_SELECT         = 0x8;
[21:29:27.029]        // -> [DP_SELECT <= 0x00000008]
[21:29:27.029]      __var powered_down      = 0;
[21:29:27.029]        // -> [powered_down <= 0x00000000]
[21:29:27.029]      WriteDP(DP_SELECT, 0x00000000);
[21:29:27.035]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:29:27.035]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:29:27.036]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:29:27.036]        // -> [powered_down <= 0x00000001]
[21:29:27.036]    </block>
[21:29:27.036]    <control if="powered_down" while="" timeout="0" info="">
[21:29:27.036]      // if-block "powered_down"
[21:29:27.036]        // =>  TRUE
[21:29:27.036]      <block atomic="false" info="">
[21:29:27.036]        Message(0, "Debug/System power-up request sent");
[21:29:27.038]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:29:27.041]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:29:27.041]      </block>
[21:29:27.041]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:29:27.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:29:27.045]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:29:27.045]        // while-condition  =>  FALSE
[21:29:27.045]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:29:27.045]      </control>
[21:29:27.045]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:29:27.045]        // if-block "(__protocol & 0xFFFF) == 1"
[21:29:27.045]          // =>  FALSE
[21:29:27.045]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:29:27.045]      </control>
[21:29:27.045]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:29:27.045]        // if-block "(__protocol & 0xFFFF) == 2"
[21:29:27.045]          // =>  TRUE
[21:29:27.045]        <block atomic="false" info="">
[21:29:27.045]          Message(0, "executing SWD power up");
[21:29:27.049]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:29:27.049]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:29:27.049]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:29:27.052]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:29:27.052]        </block>
[21:29:27.052]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:29:27.052]      </control>
[21:29:27.052]      // end if-block "powered_down"
[21:29:27.052]    </control>
[21:29:27.052]    <block atomic="false" info="">
[21:29:27.052]      __var DEBUG_PORT_VAL    = 0;
[21:29:27.052]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:29:27.052]      __var ACCESS_POINT_VAL  = 0;
[21:29:27.052]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:29:27.052]      __ap = 1; 
[21:29:27.052]        // -> [__ap <= 0x00000001]
[21:29:27.052]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:29:27.057]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:29:27.058]      __ap = 4;
[21:29:27.058]        // -> [__ap <= 0x00000004]
[21:29:27.058]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:29:27.060]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:29:27.060]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:29:27.061]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:29:27.063]    </block>
[21:29:27.063]    <block atomic="false" info="">
[21:29:27.063]      __var nReset = 0x80;
[21:29:27.063]        // -> [nReset <= 0x00000080]
[21:29:27.063]      __var canReadPins = 0;
[21:29:27.063]        // -> [canReadPins <= 0x00000000]
[21:29:27.063]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:29:27.063]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:29:27.063]        // -> [canReadPins <= 0x00000001]
[21:29:27.063]    </block>
[21:29:27.063]    <control if="" while="1" timeout="200" info="">
[21:29:27.063]      // while "1"  (timeout="200")
[21:29:27.063]      // while-condition  =>  TRUE
[21:29:27.063]      // while "1"  (timeout="200")
[21:29:27.066]      // while-condition  =>  TRUE
[21:29:27.066]      // while "1"  (timeout="200")
[21:29:27.066]      // while  =>  TIMEOUT
[21:29:27.066]      // end while "1"
[21:29:27.066]    </control>
[21:29:27.066]    <control if="canReadPins" while="" timeout="0" info="">
[21:29:27.066]      // if-block "canReadPins"
[21:29:27.066]        // =>  TRUE
[21:29:27.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:29:27.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:29:27.066]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:29:27.066]        // while-condition  =>  FALSE
[21:29:27.066]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:29:27.066]      </control>
[21:29:27.066]      // end if-block "canReadPins"
[21:29:27.066]    </control>
[21:29:27.066]    <control if="!canReadPins" while="" timeout="0" info="">
[21:29:27.066]      // if-block "!canReadPins"
[21:29:27.066]        // =>  FALSE
[21:29:27.066]      // skip if-block "!canReadPins"
[21:29:27.066]    </control>
[21:29:27.066]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:29:27.066]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:29:27.074]        // =>  TRUE
[21:29:27.074]      <block atomic="false" info="">
[21:29:27.074]        WriteAP(0x00, 0x190008);
[21:29:27.077]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:29:27.077]        WriteAP(0xF0, 0x01);
[21:29:27.078]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:29:27.078]      </block>
[21:29:27.078]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:29:27.078]    </control>
[21:29:27.078]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:29:27.078]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:29:27.078]        // =>  FALSE
[21:29:27.078]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:29:27.078]    </control>
[21:29:27.078]    <block atomic="false" info="">
[21:29:27.082]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:29:27.084]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:29:27.084]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:29:27.085]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:29:27.088]      __ap = 0; //lets make sure we reset the access point selection
[21:29:27.088]        // -> [__ap <= 0x00000000]
[21:29:27.088]    </block>
[21:29:27.089]  </sequence>
[21:29:27.089]  
[21:29:27.110]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:29:27.110]  
[21:29:27.110]  <debugvars>
[21:29:27.110]    // Pre-defined
[21:29:27.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:27.110]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:27.110]    __dp=0x00000000
[21:29:27.110]    __ap=0x00000000
[21:29:27.110]    __traceout=0x00000000      (Trace Disabled)
[21:29:27.110]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:27.110]    __FlashAddr=0x00000000
[21:29:27.110]    __FlashLen=0x00000000
[21:29:27.110]    __FlashArg=0x00000000
[21:29:27.110]    __FlashOp=0x00000000
[21:29:27.110]    __Result=0x00000000
[21:29:27.110]  </debugvars>
[21:29:27.110]  
[21:29:27.110]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:29:27.110]    <block atomic="false" info="">
[21:29:27.110]      __var deviceID = 0;
[21:29:27.112]        // -> [deviceID <= 0x00000000]
[21:29:27.112]      __var version = 0;
[21:29:27.112]        // -> [version <= 0x00000000]
[21:29:27.112]      __var partNum = 0;
[21:29:27.112]        // -> [partNum <= 0x00000000]
[21:29:27.112]      __var manuf = 0;
[21:29:27.112]        // -> [manuf <= 0x00000000]
[21:29:27.112]      __var isMSPM0G1X0X_G3X0X = 0;
[21:29:27.112]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:29:27.112]      __var isProduction = 0;
[21:29:27.112]        // -> [isProduction <= 0x00000000]
[21:29:27.112]      __var continueId = 0;
[21:29:27.112]        // -> [continueId <= 0x00000000]
[21:29:27.112]      deviceID =   Read32(0x41C40004);
[21:29:27.117]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:29:27.117]        // -> [deviceID <= 0x2BB8802F]
[21:29:27.117]      version = deviceID >> 28;
[21:29:27.117]        // -> [version <= 0x00000002]
[21:29:27.117]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:29:27.117]        // -> [partNum <= 0x0000BB88]
[21:29:27.117]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:29:27.117]        // -> [manuf <= 0x00000017]
[21:29:27.117]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:29:27.117]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:29:27.124]      isProduction = (version > 0);
[21:29:27.124]        // -> [isProduction <= 0x00000001]
[21:29:27.124]    </block>
[21:29:27.124]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:29:27.124]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:29:27.124]        // =>  FALSE
[21:29:27.124]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:29:27.124]    </control>
[21:29:27.124]    <control if="continueId == 4" while="" timeout="0" info="">
[21:29:27.124]      // if-block "continueId == 4"
[21:29:27.124]        // =>  FALSE
[21:29:27.124]      // skip if-block "continueId == 4"
[21:29:27.124]    </control>
[21:29:27.124]    <control if="!isProduction" while="" timeout="0" info="">
[21:29:27.125]      // if-block "!isProduction"
[21:29:27.125]        // =>  FALSE
[21:29:27.125]      // skip if-block "!isProduction"
[21:29:27.125]    </control>
[21:29:27.125]  </sequence>
[21:29:27.125]  
[21:31:21.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:31:21.346]  
[21:31:21.346]  <debugvars>
[21:31:21.346]    // Pre-defined
[21:31:21.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:31:21.346]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:31:21.346]    __dp=0x00000000
[21:31:21.346]    __ap=0x00000000
[21:31:21.346]    __traceout=0x00000000      (Trace Disabled)
[21:31:21.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:31:21.346]    __FlashAddr=0x00000000
[21:31:21.346]    __FlashLen=0x00000000
[21:31:21.346]    __FlashArg=0x00000000
[21:31:21.346]    __FlashOp=0x00000000
[21:31:21.346]    __Result=0x00000000
[21:31:21.346]  </debugvars>
[21:31:21.352]  
[21:31:21.352]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:31:21.352]    <block atomic="false" info="">
[21:31:21.352]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:31:21.352]        // -> [isSWJ <= 0x00000001]
[21:31:21.352]      __var hasDormant = __protocol & 0x00020000;
[21:31:21.352]        // -> [hasDormant <= 0x00000000]
[21:31:21.352]      __var protType   = __protocol & 0x0000FFFF;
[21:31:21.352]        // -> [protType <= 0x00000002]
[21:31:21.352]    </block>
[21:31:21.352]    <control if="protType == 1" while="" timeout="0" info="">
[21:31:21.352]      // if-block "protType == 1"
[21:31:21.352]        // =>  FALSE
[21:31:21.352]      // skip if-block "protType == 1"
[21:31:21.352]    </control>
[21:31:21.352]    <control if="protType == 2" while="" timeout="0" info="">
[21:31:21.353]      // if-block "protType == 2"
[21:31:21.353]        // =>  TRUE
[21:31:21.353]      <control if="isSWJ" while="" timeout="0" info="">
[21:31:21.353]        // if-block "isSWJ"
[21:31:21.353]          // =>  TRUE
[21:31:21.353]        <control if="hasDormant" while="" timeout="0" info="">
[21:31:21.353]          // if-block "hasDormant"
[21:31:21.353]            // =>  FALSE
[21:31:21.353]          // skip if-block "hasDormant"
[21:31:21.353]        </control>
[21:31:21.353]        <control if="!hasDormant" while="" timeout="0" info="">
[21:31:21.353]          // if-block "!hasDormant"
[21:31:21.353]            // =>  TRUE
[21:31:21.353]          <block atomic="false" info="">
[21:31:21.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:31:21.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:31:21.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:31:21.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:31:21.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:31:21.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:31:21.353]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:31:21.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:31:21.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:31:21.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:31:21.362]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:31:21.363]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:31:21.363]          </block>
[21:31:21.363]          // end if-block "!hasDormant"
[21:31:21.363]        </control>
[21:31:21.363]        // end if-block "isSWJ"
[21:31:21.363]      </control>
[21:31:21.363]      <control if="!isSWJ" while="" timeout="0" info="">
[21:31:21.363]        // if-block "!isSWJ"
[21:31:21.363]          // =>  FALSE
[21:31:21.363]        // skip if-block "!isSWJ"
[21:31:21.363]      </control>
[21:31:21.363]      <block atomic="false" info="">
[21:31:21.363]        ReadDP(0x0);
[21:31:21.363]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:31:21.363]      </block>
[21:31:21.363]      // end if-block "protType == 2"
[21:31:21.363]    </control>
[21:31:21.363]  </sequence>
[21:31:21.363]  
[21:31:21.367]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:31:21.367]  
[21:31:21.367]  <debugvars>
[21:31:21.367]    // Pre-defined
[21:31:21.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:31:21.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:31:21.367]    __dp=0x00000000
[21:31:21.367]    __ap=0x00000000
[21:31:21.367]    __traceout=0x00000000      (Trace Disabled)
[21:31:21.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:31:21.367]    __FlashAddr=0x00000000
[21:31:21.367]    __FlashLen=0x00000000
[21:31:21.367]    __FlashArg=0x00000000
[21:31:21.367]    __FlashOp=0x00000000
[21:31:21.367]    __Result=0x00000000
[21:31:21.367]  </debugvars>
[21:31:21.367]  
[21:31:21.367]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:31:21.367]    <block atomic="false" info="">
[21:31:21.367]      __var SW_DP_ABORT       = 0x0;
[21:31:21.367]        // -> [SW_DP_ABORT <= 0x00000000]
[21:31:21.367]      __var DP_CTRL_STAT      = 0x4;
[21:31:21.367]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:31:21.367]      __var DP_SELECT         = 0x8;
[21:31:21.367]        // -> [DP_SELECT <= 0x00000008]
[21:31:21.367]      __var powered_down      = 0;
[21:31:21.367]        // -> [powered_down <= 0x00000000]
[21:31:21.367]      WriteDP(DP_SELECT, 0x00000000);
[21:31:21.372]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:31:21.372]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:31:21.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:31:21.373]        // -> [powered_down <= 0x00000001]
[21:31:21.373]    </block>
[21:31:21.373]    <control if="powered_down" while="" timeout="0" info="">
[21:31:21.373]      // if-block "powered_down"
[21:31:21.373]        // =>  TRUE
[21:31:21.373]      <block atomic="false" info="">
[21:31:21.373]        Message(0, "Debug/System power-up request sent");
[21:31:21.376]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:31:21.377]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:31:21.377]      </block>
[21:31:21.377]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:31:21.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:31:21.380]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:31:21.380]        // while-condition  =>  FALSE
[21:31:21.380]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:31:21.380]      </control>
[21:31:21.381]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:31:21.381]        // if-block "(__protocol & 0xFFFF) == 1"
[21:31:21.381]          // =>  FALSE
[21:31:21.381]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:31:21.381]      </control>
[21:31:21.381]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:31:21.381]        // if-block "(__protocol & 0xFFFF) == 2"
[21:31:21.381]          // =>  TRUE
[21:31:21.381]        <block atomic="false" info="">
[21:31:21.381]          Message(0, "executing SWD power up");
[21:31:21.383]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:31:21.383]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:31:21.383]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:31:21.383]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:31:21.383]        </block>
[21:31:21.383]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:31:21.383]      </control>
[21:31:21.383]      // end if-block "powered_down"
[21:31:21.383]    </control>
[21:31:21.383]    <block atomic="false" info="">
[21:31:21.383]      __var DEBUG_PORT_VAL    = 0;
[21:31:21.383]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:31:21.383]      __var ACCESS_POINT_VAL  = 0;
[21:31:21.383]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:31:21.383]      __ap = 1; 
[21:31:21.383]        // -> [__ap <= 0x00000001]
[21:31:21.383]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:31:21.383]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:31:21.383]      __ap = 4;
[21:31:21.393]        // -> [__ap <= 0x00000004]
[21:31:21.393]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:31:21.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:31:21.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:31:21.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:31:21.394]    </block>
[21:31:21.394]    <block atomic="false" info="">
[21:31:21.394]      __var nReset = 0x80;
[21:31:21.394]        // -> [nReset <= 0x00000080]
[21:31:21.394]      __var canReadPins = 0;
[21:31:21.394]        // -> [canReadPins <= 0x00000000]
[21:31:21.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:31:21.394]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:31:21.394]        // -> [canReadPins <= 0x00000001]
[21:31:21.394]    </block>
[21:31:21.394]    <control if="" while="1" timeout="200" info="">
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.394]      // while-condition  =>  TRUE
[21:31:21.394]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.403]      // while "1"  (timeout="200")
[21:31:21.403]      // while-condition  =>  TRUE
[21:31:21.410]      // while "1"  (timeout="200")
[21:31:21.410]      // while  =>  TIMEOUT
[21:31:21.410]      // end while "1"
[21:31:21.410]    </control>
[21:31:21.410]    <control if="canReadPins" while="" timeout="0" info="">
[21:31:21.410]      // if-block "canReadPins"
[21:31:21.410]        // =>  TRUE
[21:31:21.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:31:21.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:31:21.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:31:21.410]        // while-condition  =>  FALSE
[21:31:21.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:31:21.410]      </control>
[21:31:21.413]      // end if-block "canReadPins"
[21:31:21.413]    </control>
[21:31:21.413]    <control if="!canReadPins" while="" timeout="0" info="">
[21:31:21.413]      // if-block "!canReadPins"
[21:31:21.413]        // =>  FALSE
[21:31:21.413]      // skip if-block "!canReadPins"
[21:31:21.413]    </control>
[21:31:21.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:31:21.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:31:21.413]        // =>  TRUE
[21:31:21.413]      <block atomic="false" info="">
[21:31:21.413]        WriteAP(0x00, 0x190008);
[21:31:21.415]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:31:21.415]        WriteAP(0xF0, 0x01);
[21:31:21.415]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:31:21.415]      </block>
[21:31:21.415]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:31:21.415]    </control>
[21:31:21.415]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:31:21.415]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:31:21.415]        // =>  FALSE
[21:31:21.415]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:31:21.415]    </control>
[21:31:21.415]    <block atomic="false" info="">
[21:31:21.415]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:31:21.423]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:31:21.424]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:31:21.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:31:21.424]      __ap = 0; //lets make sure we reset the access point selection
[21:31:21.424]        // -> [__ap <= 0x00000000]
[21:31:21.424]    </block>
[21:31:21.424]  </sequence>
[21:31:21.424]  
[21:31:21.443]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:31:21.443]  
[21:31:21.443]  <debugvars>
[21:31:21.443]    // Pre-defined
[21:31:21.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:31:21.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:31:21.443]    __dp=0x00000000
[21:31:21.443]    __ap=0x00000000
[21:31:21.443]    __traceout=0x00000000      (Trace Disabled)
[21:31:21.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:31:21.443]    __FlashAddr=0x00000000
[21:31:21.443]    __FlashLen=0x00000000
[21:31:21.443]    __FlashArg=0x00000000
[21:31:21.443]    __FlashOp=0x00000000
[21:31:21.443]    __Result=0x00000000
[21:31:21.443]  </debugvars>
[21:31:21.443]  
[21:31:21.443]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:31:21.443]    <block atomic="false" info="">
[21:31:21.443]      __var deviceID = 0;
[21:31:21.443]        // -> [deviceID <= 0x00000000]
[21:31:21.443]      __var version = 0;
[21:31:21.443]        // -> [version <= 0x00000000]
[21:31:21.443]      __var partNum = 0;
[21:31:21.443]        // -> [partNum <= 0x00000000]
[21:31:21.443]      __var manuf = 0;
[21:31:21.443]        // -> [manuf <= 0x00000000]
[21:31:21.443]      __var isMSPM0G1X0X_G3X0X = 0;
[21:31:21.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:31:21.443]      __var isProduction = 0;
[21:31:21.443]        // -> [isProduction <= 0x00000000]
[21:31:21.443]      __var continueId = 0;
[21:31:21.443]        // -> [continueId <= 0x00000000]
[21:31:21.443]      deviceID =   Read32(0x41C40004);
[21:31:21.453]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:31:21.453]        // -> [deviceID <= 0x2BB8802F]
[21:31:21.453]      version = deviceID >> 28;
[21:31:21.453]        // -> [version <= 0x00000002]
[21:31:21.453]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:31:21.453]        // -> [partNum <= 0x0000BB88]
[21:31:21.453]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:31:21.453]        // -> [manuf <= 0x00000017]
[21:31:21.453]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:31:21.453]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:31:21.453]      isProduction = (version > 0);
[21:31:21.453]        // -> [isProduction <= 0x00000001]
[21:31:21.453]    </block>
[21:31:21.453]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:31:21.453]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:31:21.453]        // =>  FALSE
[21:31:21.453]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:31:21.453]    </control>
[21:31:21.453]    <control if="continueId == 4" while="" timeout="0" info="">
[21:31:21.453]      // if-block "continueId == 4"
[21:31:21.453]        // =>  FALSE
[21:31:21.453]      // skip if-block "continueId == 4"
[21:31:21.453]    </control>
[21:31:21.453]    <control if="!isProduction" while="" timeout="0" info="">
[21:31:21.453]      // if-block "!isProduction"
[21:31:21.453]        // =>  FALSE
[21:31:21.453]      // skip if-block "!isProduction"
[21:31:21.453]    </control>
[21:31:21.453]  </sequence>
[21:31:21.453]  
[21:32:01.007]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:32:01.007]  
[21:32:01.007]  <debugvars>
[21:32:01.007]    // Pre-defined
[21:32:01.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:01.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:01.007]    __dp=0x00000000
[21:32:01.007]    __ap=0x00000000
[21:32:01.008]    __traceout=0x00000000      (Trace Disabled)
[21:32:01.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:01.008]    __FlashAddr=0x00000000
[21:32:01.008]    __FlashLen=0x00000000
[21:32:01.008]    __FlashArg=0x00000000
[21:32:01.008]    __FlashOp=0x00000000
[21:32:01.008]    __Result=0x00000000
[21:32:01.008]  </debugvars>
[21:32:01.008]  
[21:32:01.008]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:32:01.008]    <block atomic="false" info="">
[21:32:01.008]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:32:01.009]        // -> [isSWJ <= 0x00000001]
[21:32:01.009]      __var hasDormant = __protocol & 0x00020000;
[21:32:01.009]        // -> [hasDormant <= 0x00000000]
[21:32:01.009]      __var protType   = __protocol & 0x0000FFFF;
[21:32:01.009]        // -> [protType <= 0x00000002]
[21:32:01.009]    </block>
[21:32:01.009]    <control if="protType == 1" while="" timeout="0" info="">
[21:32:01.009]      // if-block "protType == 1"
[21:32:01.009]        // =>  FALSE
[21:32:01.009]      // skip if-block "protType == 1"
[21:32:01.009]    </control>
[21:32:01.009]    <control if="protType == 2" while="" timeout="0" info="">
[21:32:01.009]      // if-block "protType == 2"
[21:32:01.011]        // =>  TRUE
[21:32:01.011]      <control if="isSWJ" while="" timeout="0" info="">
[21:32:01.011]        // if-block "isSWJ"
[21:32:01.011]          // =>  TRUE
[21:32:01.011]        <control if="hasDormant" while="" timeout="0" info="">
[21:32:01.011]          // if-block "hasDormant"
[21:32:01.011]            // =>  FALSE
[21:32:01.011]          // skip if-block "hasDormant"
[21:32:01.011]        </control>
[21:32:01.011]        <control if="!hasDormant" while="" timeout="0" info="">
[21:32:01.011]          // if-block "!hasDormant"
[21:32:01.011]            // =>  TRUE
[21:32:01.011]          <block atomic="false" info="">
[21:32:01.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:32:01.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:01.015]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:32:01.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:32:01.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:32:01.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:01.017]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:32:01.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:32:01.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:32:01.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:01.019]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:32:01.019]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:32:01.019]          </block>
[21:32:01.019]          // end if-block "!hasDormant"
[21:32:01.019]        </control>
[21:32:01.019]        // end if-block "isSWJ"
[21:32:01.019]      </control>
[21:32:01.019]      <control if="!isSWJ" while="" timeout="0" info="">
[21:32:01.019]        // if-block "!isSWJ"
[21:32:01.019]          // =>  FALSE
[21:32:01.019]        // skip if-block "!isSWJ"
[21:32:01.019]      </control>
[21:32:01.019]      <block atomic="false" info="">
[21:32:01.019]        ReadDP(0x0);
[21:32:01.027]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:32:01.027]      </block>
[21:32:01.027]      // end if-block "protType == 2"
[21:32:01.027]    </control>
[21:32:01.027]  </sequence>
[21:32:01.027]  
[21:32:01.027]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:32:01.027]  
[21:32:01.027]  <debugvars>
[21:32:01.027]    // Pre-defined
[21:32:01.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:01.027]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:01.027]    __dp=0x00000000
[21:32:01.027]    __ap=0x00000000
[21:32:01.027]    __traceout=0x00000000      (Trace Disabled)
[21:32:01.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:01.027]    __FlashAddr=0x00000000
[21:32:01.027]    __FlashLen=0x00000000
[21:32:01.027]    __FlashArg=0x00000000
[21:32:01.027]    __FlashOp=0x00000000
[21:32:01.027]    __Result=0x00000000
[21:32:01.027]  </debugvars>
[21:32:01.027]  
[21:32:01.027]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:32:01.027]    <block atomic="false" info="">
[21:32:01.027]      __var SW_DP_ABORT       = 0x0;
[21:32:01.027]        // -> [SW_DP_ABORT <= 0x00000000]
[21:32:01.027]      __var DP_CTRL_STAT      = 0x4;
[21:32:01.027]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:32:01.027]      __var DP_SELECT         = 0x8;
[21:32:01.027]        // -> [DP_SELECT <= 0x00000008]
[21:32:01.027]      __var powered_down      = 0;
[21:32:01.027]        // -> [powered_down <= 0x00000000]
[21:32:01.027]      WriteDP(DP_SELECT, 0x00000000);
[21:32:01.035]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:32:01.035]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:32:01.035]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:32:01.037]        // -> [powered_down <= 0x00000001]
[21:32:01.037]    </block>
[21:32:01.037]    <control if="powered_down" while="" timeout="0" info="">
[21:32:01.037]      // if-block "powered_down"
[21:32:01.037]        // =>  TRUE
[21:32:01.037]      <block atomic="false" info="">
[21:32:01.037]        Message(0, "Debug/System power-up request sent");
[21:32:01.037]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:32:01.045]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:32:01.045]      </block>
[21:32:01.047]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:32:01.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:32:01.048]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:32:01.048]        // while-condition  =>  FALSE
[21:32:01.048]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:32:01.049]      </control>
[21:32:01.049]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:32:01.049]        // if-block "(__protocol & 0xFFFF) == 1"
[21:32:01.049]          // =>  FALSE
[21:32:01.049]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:32:01.049]      </control>
[21:32:01.049]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:32:01.049]        // if-block "(__protocol & 0xFFFF) == 2"
[21:32:01.049]          // =>  TRUE
[21:32:01.049]        <block atomic="false" info="">
[21:32:01.050]          Message(0, "executing SWD power up");
[21:32:01.052]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:32:01.052]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:32:01.052]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:32:01.056]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:32:01.056]        </block>
[21:32:01.056]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:32:01.057]      </control>
[21:32:01.057]      // end if-block "powered_down"
[21:32:01.057]    </control>
[21:32:01.057]    <block atomic="false" info="">
[21:32:01.057]      __var DEBUG_PORT_VAL    = 0;
[21:32:01.057]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:32:01.057]      __var ACCESS_POINT_VAL  = 0;
[21:32:01.057]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:32:01.058]      __ap = 1; 
[21:32:01.058]        // -> [__ap <= 0x00000001]
[21:32:01.058]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:32:01.060]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:32:01.060]      __ap = 4;
[21:32:01.060]        // -> [__ap <= 0x00000004]
[21:32:01.060]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:01.060]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:32:01.060]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:32:01.060]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:01.060]    </block>
[21:32:01.060]    <block atomic="false" info="">
[21:32:01.060]      __var nReset = 0x80;
[21:32:01.060]        // -> [nReset <= 0x00000080]
[21:32:01.060]      __var canReadPins = 0;
[21:32:01.067]        // -> [canReadPins <= 0x00000000]
[21:32:01.067]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:32:01.068]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:32:01.068]        // -> [canReadPins <= 0x00000001]
[21:32:01.068]    </block>
[21:32:01.068]    <control if="" while="1" timeout="200" info="">
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.068]      // while "1"  (timeout="200")
[21:32:01.068]      // while-condition  =>  TRUE
[21:32:01.075]      // while "1"  (timeout="200")
[21:32:01.075]      // while-condition  =>  TRUE
[21:32:01.075]      // while "1"  (timeout="200")
[21:32:01.075]      // while-condition  =>  TRUE
[21:32:01.075]      // while "1"  (timeout="200")
[21:32:01.075]      // while-condition  =>  TRUE
[21:32:01.075]      // while "1"  (timeout="200")
[21:32:01.075]      // while-condition  =>  TRUE
[21:32:01.075]      // while "1"  (timeout="200")
[21:32:01.076]      // while-condition  =>  TRUE
[21:32:01.076]      // while "1"  (timeout="200")
[21:32:01.076]      // while-condition  =>  TRUE
[21:32:01.076]      // while "1"  (timeout="200")
[21:32:01.076]      // while-condition  =>  TRUE
[21:32:01.076]      // while "1"  (timeout="200")
[21:32:01.076]      // while-condition  =>  TRUE
[21:32:01.076]      // while "1"  (timeout="200")
[21:32:01.076]      // while-condition  =>  TRUE
[21:32:01.076]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.077]      // while-condition  =>  TRUE
[21:32:01.077]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.079]      // while "1"  (timeout="200")
[21:32:01.079]      // while-condition  =>  TRUE
[21:32:01.081]      // while "1"  (timeout="200")
[21:32:01.081]      // while  =>  TIMEOUT
[21:32:01.081]      // end while "1"
[21:32:01.081]    </control>
[21:32:01.081]    <control if="canReadPins" while="" timeout="0" info="">
[21:32:01.081]      // if-block "canReadPins"
[21:32:01.081]        // =>  TRUE
[21:32:01.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:32:01.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:32:01.082]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:32:01.082]        // while-condition  =>  FALSE
[21:32:01.082]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:32:01.082]      </control>
[21:32:01.082]      // end if-block "canReadPins"
[21:32:01.082]    </control>
[21:32:01.082]    <control if="!canReadPins" while="" timeout="0" info="">
[21:32:01.085]      // if-block "!canReadPins"
[21:32:01.085]        // =>  FALSE
[21:32:01.085]      // skip if-block "!canReadPins"
[21:32:01.085]    </control>
[21:32:01.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:32:01.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:01.085]        // =>  TRUE
[21:32:01.085]      <block atomic="false" info="">
[21:32:01.085]        WriteAP(0x00, 0x190008);
[21:32:01.087]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:01.087]        WriteAP(0xF0, 0x01);
[21:32:01.090]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:01.091]      </block>
[21:32:01.091]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:01.091]    </control>
[21:32:01.091]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:32:01.091]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:01.091]        // =>  FALSE
[21:32:01.091]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:01.091]    </control>
[21:32:01.091]    <block atomic="false" info="">
[21:32:01.091]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:01.095]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:32:01.095]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:32:01.095]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:01.097]      __ap = 0; //lets make sure we reset the access point selection
[21:32:01.097]        // -> [__ap <= 0x00000000]
[21:32:01.097]    </block>
[21:32:01.097]  </sequence>
[21:32:01.097]  
[21:32:01.122]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:32:01.122]  
[21:32:01.122]  <debugvars>
[21:32:01.122]    // Pre-defined
[21:32:01.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:01.122]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:01.122]    __dp=0x00000000
[21:32:01.122]    __ap=0x00000000
[21:32:01.122]    __traceout=0x00000000      (Trace Disabled)
[21:32:01.122]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:01.122]    __FlashAddr=0x00000000
[21:32:01.122]    __FlashLen=0x00000000
[21:32:01.122]    __FlashArg=0x00000000
[21:32:01.123]    __FlashOp=0x00000000
[21:32:01.123]    __Result=0x00000000
[21:32:01.123]  </debugvars>
[21:32:01.123]  
[21:32:01.123]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:32:01.123]    <block atomic="false" info="">
[21:32:01.123]      __var deviceID = 0;
[21:32:01.123]        // -> [deviceID <= 0x00000000]
[21:32:01.123]      __var version = 0;
[21:32:01.123]        // -> [version <= 0x00000000]
[21:32:01.123]      __var partNum = 0;
[21:32:01.123]        // -> [partNum <= 0x00000000]
[21:32:01.124]      __var manuf = 0;
[21:32:01.124]        // -> [manuf <= 0x00000000]
[21:32:01.124]      __var isMSPM0G1X0X_G3X0X = 0;
[21:32:01.124]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:32:01.124]      __var isProduction = 0;
[21:32:01.124]        // -> [isProduction <= 0x00000000]
[21:32:01.124]      __var continueId = 0;
[21:32:01.124]        // -> [continueId <= 0x00000000]
[21:32:01.124]      deviceID =   Read32(0x41C40004);
[21:32:01.128]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:32:01.128]        // -> [deviceID <= 0x2BB8802F]
[21:32:01.128]      version = deviceID >> 28;
[21:32:01.128]        // -> [version <= 0x00000002]
[21:32:01.128]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:32:01.131]        // -> [partNum <= 0x0000BB88]
[21:32:01.131]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:32:01.131]        // -> [manuf <= 0x00000017]
[21:32:01.131]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:32:01.131]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:32:01.131]      isProduction = (version > 0);
[21:32:01.131]        // -> [isProduction <= 0x00000001]
[21:32:01.131]    </block>
[21:32:01.131]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:32:01.131]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:32:01.131]        // =>  FALSE
[21:32:01.131]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:32:01.131]    </control>
[21:32:01.131]    <control if="continueId == 4" while="" timeout="0" info="">
[21:32:01.131]      // if-block "continueId == 4"
[21:32:01.132]        // =>  FALSE
[21:32:01.132]      // skip if-block "continueId == 4"
[21:32:01.132]    </control>
[21:32:01.132]    <control if="!isProduction" while="" timeout="0" info="">
[21:32:01.132]      // if-block "!isProduction"
[21:32:01.132]        // =>  FALSE
[21:32:01.132]      // skip if-block "!isProduction"
[21:32:01.132]    </control>
[21:32:01.132]  </sequence>
[21:32:01.132]  
[21:34:26.059]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:34:26.059]  
[21:34:26.076]  <debugvars>
[21:34:26.076]    // Pre-defined
[21:34:26.076]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:34:26.076]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:34:26.076]    __dp=0x00000000
[21:34:26.076]    __ap=0x00000000
[21:34:26.076]    __traceout=0x00000000      (Trace Disabled)
[21:34:26.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:34:26.076]    __FlashAddr=0x00000000
[21:34:26.076]    __FlashLen=0x00000000
[21:34:26.076]    __FlashArg=0x00000000
[21:34:26.076]    __FlashOp=0x00000000
[21:34:26.076]    __Result=0x00000000
[21:34:26.076]  </debugvars>
[21:34:26.076]  
[21:34:26.076]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:34:26.076]    <block atomic="false" info="">
[21:34:26.076]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:34:26.076]        // -> [isSWJ <= 0x00000001]
[21:34:26.076]      __var hasDormant = __protocol & 0x00020000;
[21:34:26.076]        // -> [hasDormant <= 0x00000000]
[21:34:26.076]      __var protType   = __protocol & 0x0000FFFF;
[21:34:26.076]        // -> [protType <= 0x00000002]
[21:34:26.076]    </block>
[21:34:26.076]    <control if="protType == 1" while="" timeout="0" info="">
[21:34:26.076]      // if-block "protType == 1"
[21:34:26.076]        // =>  FALSE
[21:34:26.076]      // skip if-block "protType == 1"
[21:34:26.076]    </control>
[21:34:26.076]    <control if="protType == 2" while="" timeout="0" info="">
[21:34:26.076]      // if-block "protType == 2"
[21:34:26.076]        // =>  TRUE
[21:34:26.076]      <control if="isSWJ" while="" timeout="0" info="">
[21:34:26.080]        // if-block "isSWJ"
[21:34:26.080]          // =>  TRUE
[21:34:26.080]        <control if="hasDormant" while="" timeout="0" info="">
[21:34:26.080]          // if-block "hasDormant"
[21:34:26.080]            // =>  FALSE
[21:34:26.080]          // skip if-block "hasDormant"
[21:34:26.080]        </control>
[21:34:26.080]        <control if="!hasDormant" while="" timeout="0" info="">
[21:34:26.080]          // if-block "!hasDormant"
[21:34:26.080]            // =>  TRUE
[21:34:26.080]          <block atomic="false" info="">
[21:34:26.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:34:26.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:34:26.080]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:34:26.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:34:26.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:34:26.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:34:26.080]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:34:26.090]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:34:26.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:34:26.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:34:26.090]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:34:26.090]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:34:26.090]          </block>
[21:34:26.090]          // end if-block "!hasDormant"
[21:34:26.090]        </control>
[21:34:26.090]        // end if-block "isSWJ"
[21:34:26.090]      </control>
[21:34:26.090]      <control if="!isSWJ" while="" timeout="0" info="">
[21:34:26.090]        // if-block "!isSWJ"
[21:34:26.090]          // =>  FALSE
[21:34:26.090]        // skip if-block "!isSWJ"
[21:34:26.090]      </control>
[21:34:26.090]      <block atomic="false" info="">
[21:34:26.090]        ReadDP(0x0);
[21:34:26.100]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:34:26.100]      </block>
[21:34:26.100]      // end if-block "protType == 2"
[21:34:26.100]    </control>
[21:34:26.102]  </sequence>
[21:34:26.102]  
[21:34:26.104]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:34:26.104]  
[21:34:26.104]  <debugvars>
[21:34:26.104]    // Pre-defined
[21:34:26.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:34:26.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:34:26.104]    __dp=0x00000000
[21:34:26.104]    __ap=0x00000000
[21:34:26.104]    __traceout=0x00000000      (Trace Disabled)
[21:34:26.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:34:26.104]    __FlashAddr=0x00000000
[21:34:26.104]    __FlashLen=0x00000000
[21:34:26.105]    __FlashArg=0x00000000
[21:34:26.105]    __FlashOp=0x00000000
[21:34:26.105]    __Result=0x00000000
[21:34:26.105]  </debugvars>
[21:34:26.105]  
[21:34:26.105]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:34:26.105]    <block atomic="false" info="">
[21:34:26.105]      __var SW_DP_ABORT       = 0x0;
[21:34:26.105]        // -> [SW_DP_ABORT <= 0x00000000]
[21:34:26.105]      __var DP_CTRL_STAT      = 0x4;
[21:34:26.106]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:34:26.106]      __var DP_SELECT         = 0x8;
[21:34:26.106]        // -> [DP_SELECT <= 0x00000008]
[21:34:26.106]      __var powered_down      = 0;
[21:34:26.106]        // -> [powered_down <= 0x00000000]
[21:34:26.106]      WriteDP(DP_SELECT, 0x00000000);
[21:34:26.108]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:34:26.108]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:34:26.111]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:34:26.111]        // -> [powered_down <= 0x00000001]
[21:34:26.111]    </block>
[21:34:26.112]    <control if="powered_down" while="" timeout="0" info="">
[21:34:26.112]      // if-block "powered_down"
[21:34:26.112]        // =>  TRUE
[21:34:26.112]      <block atomic="false" info="">
[21:34:26.112]        Message(0, "Debug/System power-up request sent");
[21:34:26.114]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:34:26.117]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:34:26.117]      </block>
[21:34:26.117]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:34:26.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:34:26.118]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:34:26.118]        // while-condition  =>  FALSE
[21:34:26.118]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:34:26.118]      </control>
[21:34:26.118]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:34:26.118]        // if-block "(__protocol & 0xFFFF) == 1"
[21:34:26.118]          // =>  FALSE
[21:34:26.118]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:34:26.118]      </control>
[21:34:26.118]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:34:26.118]        // if-block "(__protocol & 0xFFFF) == 2"
[21:34:26.120]          // =>  TRUE
[21:34:26.120]        <block atomic="false" info="">
[21:34:26.120]          Message(0, "executing SWD power up");
[21:34:26.120]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:34:26.120]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:34:26.120]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:34:26.127]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:34:26.127]        </block>
[21:34:26.127]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:34:26.127]      </control>
[21:34:26.127]      // end if-block "powered_down"
[21:34:26.127]    </control>
[21:34:26.127]    <block atomic="false" info="">
[21:34:26.129]      __var DEBUG_PORT_VAL    = 0;
[21:34:26.129]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:34:26.129]      __var ACCESS_POINT_VAL  = 0;
[21:34:26.129]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:34:26.129]      __ap = 1; 
[21:34:26.129]        // -> [__ap <= 0x00000001]
[21:34:26.129]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:34:26.133]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:34:26.133]      __ap = 4;
[21:34:26.133]        // -> [__ap <= 0x00000004]
[21:34:26.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:34:26.133]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:34:26.133]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:34:26.133]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:34:26.133]    </block>
[21:34:26.133]    <block atomic="false" info="">
[21:34:26.133]      __var nReset = 0x80;
[21:34:26.133]        // -> [nReset <= 0x00000080]
[21:34:26.133]      __var canReadPins = 0;
[21:34:26.133]        // -> [canReadPins <= 0x00000000]
[21:34:26.141]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:34:26.142]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:34:26.142]        // -> [canReadPins <= 0x00000001]
[21:34:26.142]    </block>
[21:34:26.142]    <control if="" while="1" timeout="200" info="">
[21:34:26.142]      // while "1"  (timeout="200")
[21:34:26.142]      // while-condition  =>  TRUE
[21:34:26.143]      // while "1"  (timeout="200")
[21:34:26.143]      // while-condition  =>  TRUE
[21:34:26.143]      // while "1"  (timeout="200")
[21:34:26.143]      // while-condition  =>  TRUE
[21:34:26.143]      // while "1"  (timeout="200")
[21:34:26.144]      // while-condition  =>  TRUE
[21:34:26.144]      // while "1"  (timeout="200")
[21:34:26.144]      // while  =>  TIMEOUT
[21:34:26.144]      // end while "1"
[21:34:26.144]    </control>
[21:34:26.144]    <control if="canReadPins" while="" timeout="0" info="">
[21:34:26.144]      // if-block "canReadPins"
[21:34:26.144]        // =>  TRUE
[21:34:26.144]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:34:26.144]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:34:26.144]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:34:26.144]        // while-condition  =>  FALSE
[21:34:26.144]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:34:26.144]      </control>
[21:34:26.144]      // end if-block "canReadPins"
[21:34:26.144]    </control>
[21:34:26.144]    <control if="!canReadPins" while="" timeout="0" info="">
[21:34:26.144]      // if-block "!canReadPins"
[21:34:26.144]        // =>  FALSE
[21:34:26.144]      // skip if-block "!canReadPins"
[21:34:26.144]    </control>
[21:34:26.144]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:34:26.144]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:34:26.144]        // =>  TRUE
[21:34:26.144]      <block atomic="false" info="">
[21:34:26.144]        WriteAP(0x00, 0x190008);
[21:34:26.151]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:34:26.151]        WriteAP(0xF0, 0x01);
[21:34:26.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:34:26.151]      </block>
[21:34:26.151]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:34:26.151]    </control>
[21:34:26.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:34:26.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:34:26.151]        // =>  FALSE
[21:34:26.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:34:26.151]    </control>
[21:34:26.151]    <block atomic="false" info="">
[21:34:26.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:34:26.161]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:34:26.161]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:34:26.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:34:26.161]      __ap = 0; //lets make sure we reset the access point selection
[21:34:26.161]        // -> [__ap <= 0x00000000]
[21:34:26.161]    </block>
[21:34:26.161]  </sequence>
[21:34:26.161]  
[21:34:26.184]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:34:26.184]  
[21:34:26.184]  <debugvars>
[21:34:26.184]    // Pre-defined
[21:34:26.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:34:26.184]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:34:26.184]    __dp=0x00000000
[21:34:26.184]    __ap=0x00000000
[21:34:26.184]    __traceout=0x00000000      (Trace Disabled)
[21:34:26.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:34:26.184]    __FlashAddr=0x00000000
[21:34:26.184]    __FlashLen=0x00000000
[21:34:26.184]    __FlashArg=0x00000000
[21:34:26.184]    __FlashOp=0x00000000
[21:34:26.184]    __Result=0x00000000
[21:34:26.184]  </debugvars>
[21:34:26.184]  
[21:34:26.184]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:34:26.184]    <block atomic="false" info="">
[21:34:26.184]      __var deviceID = 0;
[21:34:26.184]        // -> [deviceID <= 0x00000000]
[21:34:26.184]      __var version = 0;
[21:34:26.184]        // -> [version <= 0x00000000]
[21:34:26.184]      __var partNum = 0;
[21:34:26.184]        // -> [partNum <= 0x00000000]
[21:34:26.184]      __var manuf = 0;
[21:34:26.184]        // -> [manuf <= 0x00000000]
[21:34:26.184]      __var isMSPM0G1X0X_G3X0X = 0;
[21:34:26.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:34:26.191]      __var isProduction = 0;
[21:34:26.191]        // -> [isProduction <= 0x00000000]
[21:34:26.191]      __var continueId = 0;
[21:34:26.191]        // -> [continueId <= 0x00000000]
[21:34:26.191]      deviceID =   Read32(0x41C40004);
[21:34:26.191]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:34:26.191]        // -> [deviceID <= 0x2BB8802F]
[21:34:26.191]      version = deviceID >> 28;
[21:34:26.191]        // -> [version <= 0x00000002]
[21:34:26.191]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:34:26.191]        // -> [partNum <= 0x0000BB88]
[21:34:26.191]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:34:26.191]        // -> [manuf <= 0x00000017]
[21:34:26.191]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:34:26.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:34:26.191]      isProduction = (version > 0);
[21:34:26.191]        // -> [isProduction <= 0x00000001]
[21:34:26.191]    </block>
[21:34:26.191]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:34:26.191]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:34:26.191]        // =>  FALSE
[21:34:26.191]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:34:26.191]    </control>
[21:34:26.191]    <control if="continueId == 4" while="" timeout="0" info="">
[21:34:26.191]      // if-block "continueId == 4"
[21:34:26.191]        // =>  FALSE
[21:34:26.191]      // skip if-block "continueId == 4"
[21:34:26.191]    </control>
[21:34:26.191]    <control if="!isProduction" while="" timeout="0" info="">
[21:34:26.191]      // if-block "!isProduction"
[21:34:26.191]        // =>  FALSE
[21:34:26.191]      // skip if-block "!isProduction"
[21:34:26.191]    </control>
[21:34:26.191]  </sequence>
[21:34:26.191]  
[21:35:49.683]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:35:49.683]  
[21:35:49.695]  <debugvars>
[21:35:49.695]    // Pre-defined
[21:35:49.695]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:49.695]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:49.695]    __dp=0x00000000
[21:35:49.695]    __ap=0x00000000
[21:35:49.695]    __traceout=0x00000000      (Trace Disabled)
[21:35:49.695]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:49.695]    __FlashAddr=0x00000000
[21:35:49.695]    __FlashLen=0x00000000
[21:35:49.695]    __FlashArg=0x00000000
[21:35:49.695]    __FlashOp=0x00000000
[21:35:49.695]    __Result=0x00000000
[21:35:49.695]  </debugvars>
[21:35:49.695]  
[21:35:49.695]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:35:49.695]    <block atomic="false" info="">
[21:35:49.695]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:35:49.695]        // -> [isSWJ <= 0x00000001]
[21:35:49.695]      __var hasDormant = __protocol & 0x00020000;
[21:35:49.695]        // -> [hasDormant <= 0x00000000]
[21:35:49.695]      __var protType   = __protocol & 0x0000FFFF;
[21:35:49.695]        // -> [protType <= 0x00000002]
[21:35:49.695]    </block>
[21:35:49.695]    <control if="protType == 1" while="" timeout="0" info="">
[21:35:49.695]      // if-block "protType == 1"
[21:35:49.695]        // =>  FALSE
[21:35:49.695]      // skip if-block "protType == 1"
[21:35:49.695]    </control>
[21:35:49.695]    <control if="protType == 2" while="" timeout="0" info="">
[21:35:49.695]      // if-block "protType == 2"
[21:35:49.695]        // =>  TRUE
[21:35:49.695]      <control if="isSWJ" while="" timeout="0" info="">
[21:35:49.695]        // if-block "isSWJ"
[21:35:49.695]          // =>  TRUE
[21:35:49.695]        <control if="hasDormant" while="" timeout="0" info="">
[21:35:49.695]          // if-block "hasDormant"
[21:35:49.695]            // =>  FALSE
[21:35:49.695]          // skip if-block "hasDormant"
[21:35:49.695]        </control>
[21:35:49.695]        <control if="!hasDormant" while="" timeout="0" info="">
[21:35:49.695]          // if-block "!hasDormant"
[21:35:49.695]            // =>  TRUE
[21:35:49.695]          <block atomic="false" info="">
[21:35:49.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:35:49.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:49.701]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:35:49.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:35:49.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:35:49.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:49.704]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:35:49.704]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:35:49.704]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:35:49.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:35:49.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:35:49.704]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:35:49.704]          </block>
[21:35:49.704]          // end if-block "!hasDormant"
[21:35:49.704]        </control>
[21:35:49.704]        // end if-block "isSWJ"
[21:35:49.704]      </control>
[21:35:49.704]      <control if="!isSWJ" while="" timeout="0" info="">
[21:35:49.704]        // if-block "!isSWJ"
[21:35:49.704]          // =>  FALSE
[21:35:49.704]        // skip if-block "!isSWJ"
[21:35:49.704]      </control>
[21:35:49.704]      <block atomic="false" info="">
[21:35:49.704]        ReadDP(0x0);
[21:35:49.711]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:35:49.711]      </block>
[21:35:49.711]      // end if-block "protType == 2"
[21:35:49.711]    </control>
[21:35:49.711]  </sequence>
[21:35:49.711]  
[21:35:49.713]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:35:49.713]  
[21:35:49.713]  <debugvars>
[21:35:49.713]    // Pre-defined
[21:35:49.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:49.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:49.713]    __dp=0x00000000
[21:35:49.713]    __ap=0x00000000
[21:35:49.713]    __traceout=0x00000000      (Trace Disabled)
[21:35:49.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:49.713]    __FlashAddr=0x00000000
[21:35:49.713]    __FlashLen=0x00000000
[21:35:49.713]    __FlashArg=0x00000000
[21:35:49.713]    __FlashOp=0x00000000
[21:35:49.713]    __Result=0x00000000
[21:35:49.713]  </debugvars>
[21:35:49.713]  
[21:35:49.713]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:35:49.713]    <block atomic="false" info="">
[21:35:49.713]      __var SW_DP_ABORT       = 0x0;
[21:35:49.713]        // -> [SW_DP_ABORT <= 0x00000000]
[21:35:49.713]      __var DP_CTRL_STAT      = 0x4;
[21:35:49.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:35:49.713]      __var DP_SELECT         = 0x8;
[21:35:49.713]        // -> [DP_SELECT <= 0x00000008]
[21:35:49.713]      __var powered_down      = 0;
[21:35:49.713]        // -> [powered_down <= 0x00000000]
[21:35:49.713]      WriteDP(DP_SELECT, 0x00000000);
[21:35:49.713]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:35:49.713]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:35:49.722]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:35:49.722]        // -> [powered_down <= 0x00000001]
[21:35:49.722]    </block>
[21:35:49.722]    <control if="powered_down" while="" timeout="0" info="">
[21:35:49.723]      // if-block "powered_down"
[21:35:49.723]        // =>  TRUE
[21:35:49.723]      <block atomic="false" info="">
[21:35:49.723]        Message(0, "Debug/System power-up request sent");
[21:35:49.723]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:35:49.723]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:35:49.723]      </block>
[21:35:49.723]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:35:49.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:35:49.723]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:35:49.723]        // while-condition  =>  FALSE
[21:35:49.723]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:35:49.723]      </control>
[21:35:49.723]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:35:49.723]        // if-block "(__protocol & 0xFFFF) == 1"
[21:35:49.723]          // =>  FALSE
[21:35:49.723]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:35:49.723]      </control>
[21:35:49.723]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:35:49.723]        // if-block "(__protocol & 0xFFFF) == 2"
[21:35:49.723]          // =>  TRUE
[21:35:49.723]        <block atomic="false" info="">
[21:35:49.723]          Message(0, "executing SWD power up");
[21:35:49.723]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:35:49.732]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:35:49.733]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:35:49.733]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:35:49.733]        </block>
[21:35:49.733]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:35:49.733]      </control>
[21:35:49.733]      // end if-block "powered_down"
[21:35:49.733]    </control>
[21:35:49.733]    <block atomic="false" info="">
[21:35:49.733]      __var DEBUG_PORT_VAL    = 0;
[21:35:49.733]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:35:49.733]      __var ACCESS_POINT_VAL  = 0;
[21:35:49.733]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:35:49.733]      __ap = 1; 
[21:35:49.733]        // -> [__ap <= 0x00000001]
[21:35:49.733]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:35:49.733]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:35:49.733]      __ap = 4;
[21:35:49.733]        // -> [__ap <= 0x00000004]
[21:35:49.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:35:49.743]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:35:49.743]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:35:49.743]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:35:49.743]    </block>
[21:35:49.743]    <block atomic="false" info="">
[21:35:49.743]      __var nReset = 0x80;
[21:35:49.743]        // -> [nReset <= 0x00000080]
[21:35:49.743]      __var canReadPins = 0;
[21:35:49.743]        // -> [canReadPins <= 0x00000000]
[21:35:49.743]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:35:49.743]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:35:49.743]        // -> [canReadPins <= 0x00000001]
[21:35:49.743]    </block>
[21:35:49.743]    <control if="" while="1" timeout="200" info="">
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.743]      // while "1"  (timeout="200")
[21:35:49.743]      // while-condition  =>  TRUE
[21:35:49.752]      // while "1"  (timeout="200")
[21:35:49.752]      // while-condition  =>  TRUE
[21:35:49.752]      // while "1"  (timeout="200")
[21:35:49.752]      // while-condition  =>  TRUE
[21:35:49.753]      // while "1"  (timeout="200")
[21:35:49.753]      // while  =>  TIMEOUT
[21:35:49.753]      // end while "1"
[21:35:49.753]    </control>
[21:35:49.753]    <control if="canReadPins" while="" timeout="0" info="">
[21:35:49.753]      // if-block "canReadPins"
[21:35:49.753]        // =>  TRUE
[21:35:49.753]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:35:49.753]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:35:49.753]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:35:49.753]        // while-condition  =>  FALSE
[21:35:49.753]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:35:49.753]      </control>
[21:35:49.753]      // end if-block "canReadPins"
[21:35:49.753]    </control>
[21:35:49.753]    <control if="!canReadPins" while="" timeout="0" info="">
[21:35:49.753]      // if-block "!canReadPins"
[21:35:49.753]        // =>  FALSE
[21:35:49.753]      // skip if-block "!canReadPins"
[21:35:49.753]    </control>
[21:35:49.753]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:35:49.753]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:35:49.753]        // =>  TRUE
[21:35:49.753]      <block atomic="false" info="">
[21:35:49.753]        WriteAP(0x00, 0x190008);
[21:35:49.753]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:35:49.753]        WriteAP(0xF0, 0x01);
[21:35:49.753]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:35:49.753]      </block>
[21:35:49.753]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:35:49.753]    </control>
[21:35:49.763]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:35:49.763]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:35:49.763]        // =>  FALSE
[21:35:49.763]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:35:49.763]    </control>
[21:35:49.763]    <block atomic="false" info="">
[21:35:49.763]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:35:49.765]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:35:49.765]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:35:49.765]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:35:49.765]      __ap = 0; //lets make sure we reset the access point selection
[21:35:49.765]        // -> [__ap <= 0x00000000]
[21:35:49.765]    </block>
[21:35:49.765]  </sequence>
[21:35:49.765]  
[21:35:49.783]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:35:49.783]  
[21:35:49.783]  <debugvars>
[21:35:49.783]    // Pre-defined
[21:35:49.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:35:49.783]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:35:49.783]    __dp=0x00000000
[21:35:49.783]    __ap=0x00000000
[21:35:49.783]    __traceout=0x00000000      (Trace Disabled)
[21:35:49.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:35:49.783]    __FlashAddr=0x00000000
[21:35:49.783]    __FlashLen=0x00000000
[21:35:49.783]    __FlashArg=0x00000000
[21:35:49.783]    __FlashOp=0x00000000
[21:35:49.783]    __Result=0x00000000
[21:35:49.783]  </debugvars>
[21:35:49.783]  
[21:35:49.783]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:35:49.783]    <block atomic="false" info="">
[21:35:49.783]      __var deviceID = 0;
[21:35:49.783]        // -> [deviceID <= 0x00000000]
[21:35:49.783]      __var version = 0;
[21:35:49.783]        // -> [version <= 0x00000000]
[21:35:49.783]      __var partNum = 0;
[21:35:49.783]        // -> [partNum <= 0x00000000]
[21:35:49.783]      __var manuf = 0;
[21:35:49.783]        // -> [manuf <= 0x00000000]
[21:35:49.783]      __var isMSPM0G1X0X_G3X0X = 0;
[21:35:49.783]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:35:49.783]      __var isProduction = 0;
[21:35:49.783]        // -> [isProduction <= 0x00000000]
[21:35:49.783]      __var continueId = 0;
[21:35:49.793]        // -> [continueId <= 0x00000000]
[21:35:49.793]      deviceID =   Read32(0x41C40004);
[21:35:49.794]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:35:49.794]        // -> [deviceID <= 0x2BB8802F]
[21:35:49.794]      version = deviceID >> 28;
[21:35:49.794]        // -> [version <= 0x00000002]
[21:35:49.794]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:35:49.794]        // -> [partNum <= 0x0000BB88]
[21:35:49.794]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:35:49.794]        // -> [manuf <= 0x00000017]
[21:35:49.794]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:35:49.794]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:35:49.794]      isProduction = (version > 0);
[21:35:49.794]        // -> [isProduction <= 0x00000001]
[21:35:49.794]    </block>
[21:35:49.794]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:35:49.794]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:35:49.794]        // =>  FALSE
[21:35:49.803]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:35:49.803]    </control>
[21:35:49.803]    <control if="continueId == 4" while="" timeout="0" info="">
[21:35:49.803]      // if-block "continueId == 4"
[21:35:49.803]        // =>  FALSE
[21:35:49.803]      // skip if-block "continueId == 4"
[21:35:49.803]    </control>
[21:35:49.803]    <control if="!isProduction" while="" timeout="0" info="">
[21:35:49.803]      // if-block "!isProduction"
[21:35:49.803]        // =>  FALSE
[21:35:49.803]      // skip if-block "!isProduction"
[21:35:49.803]    </control>
[21:35:49.803]  </sequence>
[21:35:49.803]  
[21:39:41.476]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:39:41.476]  
[21:39:41.477]  <debugvars>
[21:39:41.477]    // Pre-defined
[21:39:41.477]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:41.477]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:41.477]    __dp=0x00000000
[21:39:41.477]    __ap=0x00000000
[21:39:41.477]    __traceout=0x00000000      (Trace Disabled)
[21:39:41.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:41.477]    __FlashAddr=0x00000000
[21:39:41.477]    __FlashLen=0x00000000
[21:39:41.477]    __FlashArg=0x00000000
[21:39:41.477]    __FlashOp=0x00000000
[21:39:41.477]    __Result=0x00000000
[21:39:41.477]  </debugvars>
[21:39:41.477]  
[21:39:41.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:39:41.477]    <block atomic="false" info="">
[21:39:41.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:39:41.477]        // -> [isSWJ <= 0x00000001]
[21:39:41.477]      __var hasDormant = __protocol & 0x00020000;
[21:39:41.477]        // -> [hasDormant <= 0x00000000]
[21:39:41.480]      __var protType   = __protocol & 0x0000FFFF;
[21:39:41.480]        // -> [protType <= 0x00000002]
[21:39:41.480]    </block>
[21:39:41.480]    <control if="protType == 1" while="" timeout="0" info="">
[21:39:41.480]      // if-block "protType == 1"
[21:39:41.480]        // =>  FALSE
[21:39:41.480]      // skip if-block "protType == 1"
[21:39:41.480]    </control>
[21:39:41.480]    <control if="protType == 2" while="" timeout="0" info="">
[21:39:41.481]      // if-block "protType == 2"
[21:39:41.481]        // =>  TRUE
[21:39:41.481]      <control if="isSWJ" while="" timeout="0" info="">
[21:39:41.481]        // if-block "isSWJ"
[21:39:41.481]          // =>  TRUE
[21:39:41.481]        <control if="hasDormant" while="" timeout="0" info="">
[21:39:41.481]          // if-block "hasDormant"
[21:39:41.481]            // =>  FALSE
[21:39:41.481]          // skip if-block "hasDormant"
[21:39:41.481]        </control>
[21:39:41.481]        <control if="!hasDormant" while="" timeout="0" info="">
[21:39:41.481]          // if-block "!hasDormant"
[21:39:41.481]            // =>  TRUE
[21:39:41.483]          <block atomic="false" info="">
[21:39:41.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:39:41.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:41.484]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:39:41.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:39:41.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:39:41.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:41.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:39:41.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:39:41.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:39:41.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:41.492]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:39:41.492]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:39:41.492]          </block>
[21:39:41.492]          // end if-block "!hasDormant"
[21:39:41.492]        </control>
[21:39:41.492]        // end if-block "isSWJ"
[21:39:41.492]      </control>
[21:39:41.492]      <control if="!isSWJ" while="" timeout="0" info="">
[21:39:41.492]        // if-block "!isSWJ"
[21:39:41.492]          // =>  FALSE
[21:39:41.492]        // skip if-block "!isSWJ"
[21:39:41.492]      </control>
[21:39:41.492]      <block atomic="false" info="">
[21:39:41.492]        ReadDP(0x0);
[21:39:41.496]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:39:41.496]      </block>
[21:39:41.496]      // end if-block "protType == 2"
[21:39:41.496]    </control>
[21:39:41.496]  </sequence>
[21:39:41.496]  
[21:39:41.500]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:39:41.500]  
[21:39:41.500]  <debugvars>
[21:39:41.500]    // Pre-defined
[21:39:41.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:41.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:41.505]    __dp=0x00000000
[21:39:41.505]    __ap=0x00000000
[21:39:41.505]    __traceout=0x00000000      (Trace Disabled)
[21:39:41.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:41.505]    __FlashAddr=0x00000000
[21:39:41.505]    __FlashLen=0x00000000
[21:39:41.505]    __FlashArg=0x00000000
[21:39:41.505]    __FlashOp=0x00000000
[21:39:41.505]    __Result=0x00000000
[21:39:41.505]  </debugvars>
[21:39:41.505]  
[21:39:41.505]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:39:41.505]    <block atomic="false" info="">
[21:39:41.505]      __var SW_DP_ABORT       = 0x0;
[21:39:41.505]        // -> [SW_DP_ABORT <= 0x00000000]
[21:39:41.505]      __var DP_CTRL_STAT      = 0x4;
[21:39:41.505]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:39:41.505]      __var DP_SELECT         = 0x8;
[21:39:41.505]        // -> [DP_SELECT <= 0x00000008]
[21:39:41.505]      __var powered_down      = 0;
[21:39:41.505]        // -> [powered_down <= 0x00000000]
[21:39:41.505]      WriteDP(DP_SELECT, 0x00000000);
[21:39:41.509]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:39:41.509]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:39:41.509]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:39:41.509]        // -> [powered_down <= 0x00000001]
[21:39:41.509]    </block>
[21:39:41.509]    <control if="powered_down" while="" timeout="0" info="">
[21:39:41.509]      // if-block "powered_down"
[21:39:41.509]        // =>  TRUE
[21:39:41.509]      <block atomic="false" info="">
[21:39:41.509]        Message(0, "Debug/System power-up request sent");
[21:39:41.513]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:39:41.517]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:39:41.517]      </block>
[21:39:41.517]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:39:41.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:41.517]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:39:41.517]        // while-condition  =>  FALSE
[21:39:41.517]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:39:41.517]      </control>
[21:39:41.517]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:39:41.517]        // if-block "(__protocol & 0xFFFF) == 1"
[21:39:41.517]          // =>  FALSE
[21:39:41.517]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:39:41.517]      </control>
[21:39:41.517]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:39:41.517]        // if-block "(__protocol & 0xFFFF) == 2"
[21:39:41.517]          // =>  TRUE
[21:39:41.517]        <block atomic="false" info="">
[21:39:41.517]          Message(0, "executing SWD power up");
[21:39:41.522]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:39:41.525]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:39:41.525]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:39:41.530]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:39:41.530]        </block>
[21:39:41.530]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:39:41.530]      </control>
[21:39:41.530]      // end if-block "powered_down"
[21:39:41.530]    </control>
[21:39:41.530]    <block atomic="false" info="">
[21:39:41.530]      __var DEBUG_PORT_VAL    = 0;
[21:39:41.530]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:39:41.530]      __var ACCESS_POINT_VAL  = 0;
[21:39:41.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:39:41.530]      __ap = 1; 
[21:39:41.530]        // -> [__ap <= 0x00000001]
[21:39:41.530]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:39:41.534]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:39:41.534]      __ap = 4;
[21:39:41.538]        // -> [__ap <= 0x00000004]
[21:39:41.538]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:41.540]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:39:41.540]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:39:41.540]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:41.542]    </block>
[21:39:41.542]    <block atomic="false" info="">
[21:39:41.542]      __var nReset = 0x80;
[21:39:41.542]        // -> [nReset <= 0x00000080]
[21:39:41.542]      __var canReadPins = 0;
[21:39:41.542]        // -> [canReadPins <= 0x00000000]
[21:39:41.542]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:39:41.542]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:39:41.542]        // -> [canReadPins <= 0x00000001]
[21:39:41.542]    </block>
[21:39:41.542]    <control if="" while="1" timeout="200" info="">
[21:39:41.542]      // while "1"  (timeout="200")
[21:39:41.542]      // while-condition  =>  TRUE
[21:39:41.542]      // while "1"  (timeout="200")
[21:39:41.542]      // while-condition  =>  TRUE
[21:39:41.542]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.546]      // while "1"  (timeout="200")
[21:39:41.546]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.548]      // while "1"  (timeout="200")
[21:39:41.548]      // while-condition  =>  TRUE
[21:39:41.550]      // while "1"  (timeout="200")
[21:39:41.550]      // while  =>  TIMEOUT
[21:39:41.550]      // end while "1"
[21:39:41.550]    </control>
[21:39:41.550]    <control if="canReadPins" while="" timeout="0" info="">
[21:39:41.550]      // if-block "canReadPins"
[21:39:41.550]        // =>  TRUE
[21:39:41.550]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:39:41.550]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:39:41.550]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:39:41.554]        // while-condition  =>  FALSE
[21:39:41.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:39:41.554]      </control>
[21:39:41.554]      // end if-block "canReadPins"
[21:39:41.554]    </control>
[21:39:41.554]    <control if="!canReadPins" while="" timeout="0" info="">
[21:39:41.554]      // if-block "!canReadPins"
[21:39:41.554]        // =>  FALSE
[21:39:41.554]      // skip if-block "!canReadPins"
[21:39:41.554]    </control>
[21:39:41.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:39:41.554]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:41.554]        // =>  TRUE
[21:39:41.554]      <block atomic="false" info="">
[21:39:41.554]        WriteAP(0x00, 0x190008);
[21:39:41.558]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:41.558]        WriteAP(0xF0, 0x01);
[21:39:41.558]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:39:41.558]      </block>
[21:39:41.558]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:39:41.558]    </control>
[21:39:41.562]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:39:41.562]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:41.562]        // =>  FALSE
[21:39:41.562]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:39:41.562]    </control>
[21:39:41.562]    <block atomic="false" info="">
[21:39:41.562]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:39:41.562]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:39:41.567]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:39:41.567]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:39:41.567]      __ap = 0; //lets make sure we reset the access point selection
[21:39:41.568]        // -> [__ap <= 0x00000000]
[21:39:41.569]    </block>
[21:39:41.569]  </sequence>
[21:39:41.569]  
[21:39:41.589]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:39:41.589]  
[21:39:41.591]  <debugvars>
[21:39:41.591]    // Pre-defined
[21:39:41.591]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:41.591]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:41.591]    __dp=0x00000000
[21:39:41.591]    __ap=0x00000000
[21:39:41.591]    __traceout=0x00000000      (Trace Disabled)
[21:39:41.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:41.591]    __FlashAddr=0x00000000
[21:39:41.591]    __FlashLen=0x00000000
[21:39:41.591]    __FlashArg=0x00000000
[21:39:41.591]    __FlashOp=0x00000000
[21:39:41.591]    __Result=0x00000000
[21:39:41.591]  </debugvars>
[21:39:41.591]  
[21:39:41.591]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:39:41.591]    <block atomic="false" info="">
[21:39:41.591]      __var deviceID = 0;
[21:39:41.591]        // -> [deviceID <= 0x00000000]
[21:39:41.591]      __var version = 0;
[21:39:41.591]        // -> [version <= 0x00000000]
[21:39:41.591]      __var partNum = 0;
[21:39:41.591]        // -> [partNum <= 0x00000000]
[21:39:41.591]      __var manuf = 0;
[21:39:41.591]        // -> [manuf <= 0x00000000]
[21:39:41.591]      __var isMSPM0G1X0X_G3X0X = 0;
[21:39:41.591]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:39:41.591]      __var isProduction = 0;
[21:39:41.591]        // -> [isProduction <= 0x00000000]
[21:39:41.591]      __var continueId = 0;
[21:39:41.591]        // -> [continueId <= 0x00000000]
[21:39:41.591]      deviceID =   Read32(0x41C40004);
[21:39:41.599]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:39:41.599]        // -> [deviceID <= 0x2BB8802F]
[21:39:41.600]      version = deviceID >> 28;
[21:39:41.600]        // -> [version <= 0x00000002]
[21:39:41.600]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:39:41.600]        // -> [partNum <= 0x0000BB88]
[21:39:41.600]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:39:41.600]        // -> [manuf <= 0x00000017]
[21:39:41.600]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:39:41.600]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:39:41.600]      isProduction = (version > 0);
[21:39:41.600]        // -> [isProduction <= 0x00000001]
[21:39:41.600]    </block>
[21:39:41.600]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:39:41.600]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:39:41.600]        // =>  FALSE
[21:39:41.600]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:39:41.600]    </control>
[21:39:41.600]    <control if="continueId == 4" while="" timeout="0" info="">
[21:39:41.600]      // if-block "continueId == 4"
[21:39:41.600]        // =>  FALSE
[21:39:41.600]      // skip if-block "continueId == 4"
[21:39:41.600]    </control>
[21:39:41.600]    <control if="!isProduction" while="" timeout="0" info="">
[21:39:41.600]      // if-block "!isProduction"
[21:39:41.600]        // =>  FALSE
[21:39:41.600]      // skip if-block "!isProduction"
[21:39:41.600]    </control>
[21:39:41.600]  </sequence>
[21:39:41.600]  
[21:42:07.660]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:42:07.660]  
[21:42:07.669]  <debugvars>
[21:42:07.669]    // Pre-defined
[21:42:07.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:07.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:07.669]    __dp=0x00000000
[21:42:07.669]    __ap=0x00000000
[21:42:07.669]    __traceout=0x00000000      (Trace Disabled)
[21:42:07.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:07.669]    __FlashAddr=0x00000000
[21:42:07.669]    __FlashLen=0x00000000
[21:42:07.669]    __FlashArg=0x00000000
[21:42:07.669]    __FlashOp=0x00000000
[21:42:07.669]    __Result=0x00000000
[21:42:07.669]  </debugvars>
[21:42:07.669]  
[21:42:07.669]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:42:07.669]    <block atomic="false" info="">
[21:42:07.669]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:42:07.669]        // -> [isSWJ <= 0x00000001]
[21:42:07.669]      __var hasDormant = __protocol & 0x00020000;
[21:42:07.669]        // -> [hasDormant <= 0x00000000]
[21:42:07.669]      __var protType   = __protocol & 0x0000FFFF;
[21:42:07.669]        // -> [protType <= 0x00000002]
[21:42:07.669]    </block>
[21:42:07.669]    <control if="protType == 1" while="" timeout="0" info="">
[21:42:07.669]      // if-block "protType == 1"
[21:42:07.669]        // =>  FALSE
[21:42:07.673]      // skip if-block "protType == 1"
[21:42:07.673]    </control>
[21:42:07.673]    <control if="protType == 2" while="" timeout="0" info="">
[21:42:07.673]      // if-block "protType == 2"
[21:42:07.673]        // =>  TRUE
[21:42:07.673]      <control if="isSWJ" while="" timeout="0" info="">
[21:42:07.673]        // if-block "isSWJ"
[21:42:07.673]          // =>  TRUE
[21:42:07.673]        <control if="hasDormant" while="" timeout="0" info="">
[21:42:07.673]          // if-block "hasDormant"
[21:42:07.673]            // =>  FALSE
[21:42:07.673]          // skip if-block "hasDormant"
[21:42:07.673]        </control>
[21:42:07.673]        <control if="!hasDormant" while="" timeout="0" info="">
[21:42:07.673]          // if-block "!hasDormant"
[21:42:07.673]            // =>  TRUE
[21:42:07.673]          <block atomic="false" info="">
[21:42:07.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:42:07.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:07.681]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:42:07.685]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:42:07.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:42:07.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:07.691]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:42:07.692]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:42:07.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:42:07.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:42:07.698]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:42:07.698]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:42:07.698]          </block>
[21:42:07.698]          // end if-block "!hasDormant"
[21:42:07.698]        </control>
[21:42:07.698]        // end if-block "isSWJ"
[21:42:07.698]      </control>
[21:42:07.698]      <control if="!isSWJ" while="" timeout="0" info="">
[21:42:07.698]        // if-block "!isSWJ"
[21:42:07.698]          // =>  FALSE
[21:42:07.698]        // skip if-block "!isSWJ"
[21:42:07.698]      </control>
[21:42:07.698]      <block atomic="false" info="">
[21:42:07.698]        ReadDP(0x0);
[21:42:07.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:42:07.702]      </block>
[21:42:07.702]      // end if-block "protType == 2"
[21:42:07.702]    </control>
[21:42:07.702]  </sequence>
[21:42:07.702]  
[21:42:07.706]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:42:07.706]  
[21:42:07.706]  <debugvars>
[21:42:07.706]    // Pre-defined
[21:42:07.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:07.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:07.706]    __dp=0x00000000
[21:42:07.706]    __ap=0x00000000
[21:42:07.706]    __traceout=0x00000000      (Trace Disabled)
[21:42:07.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:07.706]    __FlashAddr=0x00000000
[21:42:07.706]    __FlashLen=0x00000000
[21:42:07.706]    __FlashArg=0x00000000
[21:42:07.706]    __FlashOp=0x00000000
[21:42:07.706]    __Result=0x00000000
[21:42:07.706]  </debugvars>
[21:42:07.706]  
[21:42:07.706]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:42:07.710]    <block atomic="false" info="">
[21:42:07.710]      __var SW_DP_ABORT       = 0x0;
[21:42:07.710]        // -> [SW_DP_ABORT <= 0x00000000]
[21:42:07.710]      __var DP_CTRL_STAT      = 0x4;
[21:42:07.710]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:42:07.710]      __var DP_SELECT         = 0x8;
[21:42:07.710]        // -> [DP_SELECT <= 0x00000008]
[21:42:07.710]      __var powered_down      = 0;
[21:42:07.710]        // -> [powered_down <= 0x00000000]
[21:42:07.710]      WriteDP(DP_SELECT, 0x00000000);
[21:42:07.714]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:42:07.714]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:42:07.724]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:42:07.724]        // -> [powered_down <= 0x00000001]
[21:42:07.724]    </block>
[21:42:07.724]    <control if="powered_down" while="" timeout="0" info="">
[21:42:07.724]      // if-block "powered_down"
[21:42:07.724]        // =>  TRUE
[21:42:07.724]      <block atomic="false" info="">
[21:42:07.724]        Message(0, "Debug/System power-up request sent");
[21:42:07.732]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:42:07.732]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:42:07.732]      </block>
[21:42:07.732]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:42:07.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:42:07.736]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:42:07.736]        // while-condition  =>  FALSE
[21:42:07.736]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:42:07.736]      </control>
[21:42:07.736]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:42:07.736]        // if-block "(__protocol & 0xFFFF) == 1"
[21:42:07.736]          // =>  FALSE
[21:42:07.736]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:42:07.736]      </control>
[21:42:07.736]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:42:07.736]        // if-block "(__protocol & 0xFFFF) == 2"
[21:42:07.736]          // =>  TRUE
[21:42:07.736]        <block atomic="false" info="">
[21:42:07.736]          Message(0, "executing SWD power up");
[21:42:07.740]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:42:07.744]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:42:07.744]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:42:07.748]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:42:07.748]        </block>
[21:42:07.748]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:42:07.748]      </control>
[21:42:07.748]      // end if-block "powered_down"
[21:42:07.748]    </control>
[21:42:07.748]    <block atomic="false" info="">
[21:42:07.748]      __var DEBUG_PORT_VAL    = 0;
[21:42:07.748]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:42:07.748]      __var ACCESS_POINT_VAL  = 0;
[21:42:07.748]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:42:07.748]      __ap = 1; 
[21:42:07.748]        // -> [__ap <= 0x00000001]
[21:42:07.748]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:42:07.759]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:42:07.760]      __ap = 4;
[21:42:07.760]        // -> [__ap <= 0x00000004]
[21:42:07.760]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:07.769]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:42:07.769]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:42:07.769]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:07.769]    </block>
[21:42:07.769]    <block atomic="false" info="">
[21:42:07.773]      __var nReset = 0x80;
[21:42:07.773]        // -> [nReset <= 0x00000080]
[21:42:07.773]      __var canReadPins = 0;
[21:42:07.773]        // -> [canReadPins <= 0x00000000]
[21:42:07.773]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:42:07.779]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:42:07.779]        // -> [canReadPins <= 0x00000001]
[21:42:07.779]    </block>
[21:42:07.779]    <control if="" while="1" timeout="200" info="">
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.779]      // while "1"  (timeout="200")
[21:42:07.779]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.781]      // while-condition  =>  TRUE
[21:42:07.781]      // while "1"  (timeout="200")
[21:42:07.785]      // while-condition  =>  TRUE
[21:42:07.785]      // while "1"  (timeout="200")
[21:42:07.785]      // while  =>  TIMEOUT
[21:42:07.785]      // end while "1"
[21:42:07.785]    </control>
[21:42:07.785]    <control if="canReadPins" while="" timeout="0" info="">
[21:42:07.785]      // if-block "canReadPins"
[21:42:07.785]        // =>  TRUE
[21:42:07.785]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:42:07.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:42:07.789]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:42:07.789]        // while-condition  =>  FALSE
[21:42:07.789]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:42:07.789]      </control>
[21:42:07.789]      // end if-block "canReadPins"
[21:42:07.789]    </control>
[21:42:07.789]    <control if="!canReadPins" while="" timeout="0" info="">
[21:42:07.789]      // if-block "!canReadPins"
[21:42:07.789]        // =>  FALSE
[21:42:07.789]      // skip if-block "!canReadPins"
[21:42:07.789]    </control>
[21:42:07.789]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:42:07.789]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:07.789]        // =>  TRUE
[21:42:07.789]      <block atomic="false" info="">
[21:42:07.789]        WriteAP(0x00, 0x190008);
[21:42:07.789]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:07.789]        WriteAP(0xF0, 0x01);
[21:42:07.797]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:42:07.801]      </block>
[21:42:07.801]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:42:07.801]    </control>
[21:42:07.801]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:42:07.801]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:07.801]        // =>  FALSE
[21:42:07.801]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:42:07.801]    </control>
[21:42:07.801]    <block atomic="false" info="">
[21:42:07.801]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:42:07.810]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:42:07.810]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:42:07.810]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:42:07.814]      __ap = 0; //lets make sure we reset the access point selection
[21:42:07.814]        // -> [__ap <= 0x00000000]
[21:42:07.814]    </block>
[21:42:07.814]  </sequence>
[21:42:07.814]  
[21:42:07.855]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:42:07.855]  
[21:42:07.855]  <debugvars>
[21:42:07.855]    // Pre-defined
[21:42:07.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:42:07.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:42:07.855]    __dp=0x00000000
[21:42:07.855]    __ap=0x00000000
[21:42:07.855]    __traceout=0x00000000      (Trace Disabled)
[21:42:07.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:42:07.855]    __FlashAddr=0x00000000
[21:42:07.855]    __FlashLen=0x00000000
[21:42:07.855]    __FlashArg=0x00000000
[21:42:07.855]    __FlashOp=0x00000000
[21:42:07.855]    __Result=0x00000000
[21:42:07.855]  </debugvars>
[21:42:07.855]  
[21:42:07.855]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:42:07.855]    <block atomic="false" info="">
[21:42:07.855]      __var deviceID = 0;
[21:42:07.855]        // -> [deviceID <= 0x00000000]
[21:42:07.855]      __var version = 0;
[21:42:07.855]        // -> [version <= 0x00000000]
[21:42:07.855]      __var partNum = 0;
[21:42:07.855]        // -> [partNum <= 0x00000000]
[21:42:07.855]      __var manuf = 0;
[21:42:07.855]        // -> [manuf <= 0x00000000]
[21:42:07.855]      __var isMSPM0G1X0X_G3X0X = 0;
[21:42:07.855]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:42:07.855]      __var isProduction = 0;
[21:42:07.859]        // -> [isProduction <= 0x00000000]
[21:42:07.859]      __var continueId = 0;
[21:42:07.859]        // -> [continueId <= 0x00000000]
[21:42:07.859]      deviceID =   Read32(0x41C40004);
[21:42:07.867]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:42:07.871]        // -> [deviceID <= 0x2BB8802F]
[21:42:07.871]      version = deviceID >> 28;
[21:42:07.871]        // -> [version <= 0x00000002]
[21:42:07.871]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:42:07.871]        // -> [partNum <= 0x0000BB88]
[21:42:07.871]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:42:07.871]        // -> [manuf <= 0x00000017]
[21:42:07.871]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:42:07.871]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:42:07.871]      isProduction = (version > 0);
[21:42:07.871]        // -> [isProduction <= 0x00000001]
[21:42:07.871]    </block>
[21:42:07.871]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:42:07.871]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:42:07.871]        // =>  FALSE
[21:42:07.871]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:42:07.871]    </control>
[21:42:07.871]    <control if="continueId == 4" while="" timeout="0" info="">
[21:42:07.871]      // if-block "continueId == 4"
[21:42:07.871]        // =>  FALSE
[21:42:07.871]      // skip if-block "continueId == 4"
[21:42:07.871]    </control>
[21:42:07.871]    <control if="!isProduction" while="" timeout="0" info="">
[21:42:07.871]      // if-block "!isProduction"
[21:42:07.871]        // =>  FALSE
[21:42:07.871]      // skip if-block "!isProduction"
[21:42:07.871]    </control>
[21:42:07.871]  </sequence>
[21:42:07.871]  
[21:50:12.748]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:50:12.748]  
[21:50:12.748]  <debugvars>
[21:50:12.748]    // Pre-defined
[21:50:12.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:12.748]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:12.748]    __dp=0x00000000
[21:50:12.748]    __ap=0x00000000
[21:50:12.748]    __traceout=0x00000000      (Trace Disabled)
[21:50:12.748]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:12.752]    __FlashAddr=0x00000000
[21:50:12.752]    __FlashLen=0x00000000
[21:50:12.752]    __FlashArg=0x00000000
[21:50:12.752]    __FlashOp=0x00000000
[21:50:12.752]    __Result=0x00000000
[21:50:12.752]  </debugvars>
[21:50:12.752]  
[21:50:12.752]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:50:12.752]    <block atomic="false" info="">
[21:50:12.752]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:50:12.752]        // -> [isSWJ <= 0x00000001]
[21:50:12.752]      __var hasDormant = __protocol & 0x00020000;
[21:50:12.752]        // -> [hasDormant <= 0x00000000]
[21:50:12.752]      __var protType   = __protocol & 0x0000FFFF;
[21:50:12.752]        // -> [protType <= 0x00000002]
[21:50:12.752]    </block>
[21:50:12.752]    <control if="protType == 1" while="" timeout="0" info="">
[21:50:12.752]      // if-block "protType == 1"
[21:50:12.752]        // =>  FALSE
[21:50:12.752]      // skip if-block "protType == 1"
[21:50:12.752]    </control>
[21:50:12.752]    <control if="protType == 2" while="" timeout="0" info="">
[21:50:12.752]      // if-block "protType == 2"
[21:50:12.752]        // =>  TRUE
[21:50:12.752]      <control if="isSWJ" while="" timeout="0" info="">
[21:50:12.752]        // if-block "isSWJ"
[21:50:12.752]          // =>  TRUE
[21:50:12.752]        <control if="hasDormant" while="" timeout="0" info="">
[21:50:12.752]          // if-block "hasDormant"
[21:50:12.752]            // =>  FALSE
[21:50:12.752]          // skip if-block "hasDormant"
[21:50:12.756]        </control>
[21:50:12.756]        <control if="!hasDormant" while="" timeout="0" info="">
[21:50:12.756]          // if-block "!hasDormant"
[21:50:12.756]            // =>  TRUE
[21:50:12.756]          <block atomic="false" info="">
[21:50:12.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:50:12.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:12.760]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:50:12.760]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:50:12.760]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:50:12.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:12.760]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:50:12.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:50:12.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:50:12.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:12.764]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:50:12.768]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:50:12.768]          </block>
[21:50:12.768]          // end if-block "!hasDormant"
[21:50:12.768]        </control>
[21:50:12.768]        // end if-block "isSWJ"
[21:50:12.768]      </control>
[21:50:12.768]      <control if="!isSWJ" while="" timeout="0" info="">
[21:50:12.768]        // if-block "!isSWJ"
[21:50:12.768]          // =>  FALSE
[21:50:12.768]        // skip if-block "!isSWJ"
[21:50:12.768]      </control>
[21:50:12.768]      <block atomic="false" info="">
[21:50:12.768]        ReadDP(0x0);
[21:50:12.770]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:50:12.770]      </block>
[21:50:12.770]      // end if-block "protType == 2"
[21:50:12.770]    </control>
[21:50:12.770]  </sequence>
[21:50:12.770]  
[21:50:12.773]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:50:12.773]  
[21:50:12.773]  <debugvars>
[21:50:12.773]    // Pre-defined
[21:50:12.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:12.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:12.773]    __dp=0x00000000
[21:50:12.773]    __ap=0x00000000
[21:50:12.773]    __traceout=0x00000000      (Trace Disabled)
[21:50:12.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:12.773]    __FlashAddr=0x00000000
[21:50:12.773]    __FlashLen=0x00000000
[21:50:12.773]    __FlashArg=0x00000000
[21:50:12.773]    __FlashOp=0x00000000
[21:50:12.773]    __Result=0x00000000
[21:50:12.773]  </debugvars>
[21:50:12.773]  
[21:50:12.773]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:50:12.776]    <block atomic="false" info="">
[21:50:12.776]      __var SW_DP_ABORT       = 0x0;
[21:50:12.776]        // -> [SW_DP_ABORT <= 0x00000000]
[21:50:12.776]      __var DP_CTRL_STAT      = 0x4;
[21:50:12.776]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:50:12.776]      __var DP_SELECT         = 0x8;
[21:50:12.776]        // -> [DP_SELECT <= 0x00000008]
[21:50:12.776]      __var powered_down      = 0;
[21:50:12.776]        // -> [powered_down <= 0x00000000]
[21:50:12.776]      WriteDP(DP_SELECT, 0x00000000);
[21:50:12.778]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:50:12.780]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:50:12.780]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:50:12.780]        // -> [powered_down <= 0x00000001]
[21:50:12.780]    </block>
[21:50:12.780]    <control if="powered_down" while="" timeout="0" info="">
[21:50:12.780]      // if-block "powered_down"
[21:50:12.780]        // =>  TRUE
[21:50:12.780]      <block atomic="false" info="">
[21:50:12.780]        Message(0, "Debug/System power-up request sent");
[21:50:12.784]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:50:12.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:50:12.784]      </block>
[21:50:12.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:50:12.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:50:12.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:50:12.788]        // while-condition  =>  FALSE
[21:50:12.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:50:12.788]      </control>
[21:50:12.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:50:12.788]        // if-block "(__protocol & 0xFFFF) == 1"
[21:50:12.788]          // =>  FALSE
[21:50:12.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:50:12.788]      </control>
[21:50:12.788]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:50:12.788]        // if-block "(__protocol & 0xFFFF) == 2"
[21:50:12.788]          // =>  TRUE
[21:50:12.788]        <block atomic="false" info="">
[21:50:12.788]          Message(0, "executing SWD power up");
[21:50:12.791]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:50:12.793]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:50:12.793]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:50:12.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:50:12.795]        </block>
[21:50:12.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:50:12.795]      </control>
[21:50:12.795]      // end if-block "powered_down"
[21:50:12.795]    </control>
[21:50:12.795]    <block atomic="false" info="">
[21:50:12.795]      __var DEBUG_PORT_VAL    = 0;
[21:50:12.795]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:50:12.795]      __var ACCESS_POINT_VAL  = 0;
[21:50:12.795]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:50:12.795]      __ap = 1; 
[21:50:12.795]        // -> [__ap <= 0x00000001]
[21:50:12.795]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:50:12.797]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:50:12.800]      __ap = 4;
[21:50:12.800]        // -> [__ap <= 0x00000004]
[21:50:12.800]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:12.802]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:50:12.803]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:50:12.803]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:12.805]    </block>
[21:50:12.805]    <block atomic="false" info="">
[21:50:12.805]      __var nReset = 0x80;
[21:50:12.805]        // -> [nReset <= 0x00000080]
[21:50:12.805]      __var canReadPins = 0;
[21:50:12.807]        // -> [canReadPins <= 0x00000000]
[21:50:12.807]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:50:12.807]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:50:12.807]        // -> [canReadPins <= 0x00000001]
[21:50:12.808]    </block>
[21:50:12.808]    <control if="" while="1" timeout="200" info="">
[21:50:12.808]      // while "1"  (timeout="200")
[21:50:12.808]      // while-condition  =>  TRUE
[21:50:12.808]      // while "1"  (timeout="200")
[21:50:12.808]      // while-condition  =>  TRUE
[21:50:12.808]      // while "1"  (timeout="200")
[21:50:12.808]      // while-condition  =>  TRUE
[21:50:12.808]      // while "1"  (timeout="200")
[21:50:12.808]      // while-condition  =>  TRUE
[21:50:12.808]      // while "1"  (timeout="200")
[21:50:12.808]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.810]      // while "1"  (timeout="200")
[21:50:12.810]      // while-condition  =>  TRUE
[21:50:12.812]      // while "1"  (timeout="200")
[21:50:12.812]      // while-condition  =>  TRUE
[21:50:12.812]      // while "1"  (timeout="200")
[21:50:12.812]      // while-condition  =>  TRUE
[21:50:12.812]      // while "1"  (timeout="200")
[21:50:12.812]      // while-condition  =>  TRUE
[21:50:12.812]      // while "1"  (timeout="200")
[21:50:12.813]      // while-condition  =>  TRUE
[21:50:12.813]      // while "1"  (timeout="200")
[21:50:12.813]      // while-condition  =>  TRUE
[21:50:12.813]      // while "1"  (timeout="200")
[21:50:12.813]      // while-condition  =>  TRUE
[21:50:12.813]      // while "1"  (timeout="200")
[21:50:12.813]      // while-condition  =>  TRUE
[21:50:12.814]      // while "1"  (timeout="200")
[21:50:12.814]      // while-condition  =>  TRUE
[21:50:12.814]      // while "1"  (timeout="200")
[21:50:12.814]      // while-condition  =>  TRUE
[21:50:12.815]      // while "1"  (timeout="200")
[21:50:12.815]      // while-condition  =>  TRUE
[21:50:12.815]      // while "1"  (timeout="200")
[21:50:12.815]      // while  =>  TIMEOUT
[21:50:12.815]      // end while "1"
[21:50:12.815]    </control>
[21:50:12.815]    <control if="canReadPins" while="" timeout="0" info="">
[21:50:12.816]      // if-block "canReadPins"
[21:50:12.816]        // =>  TRUE
[21:50:12.816]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:50:12.816]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:50:12.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:50:12.816]        // while-condition  =>  FALSE
[21:50:12.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:50:12.816]      </control>
[21:50:12.816]      // end if-block "canReadPins"
[21:50:12.816]    </control>
[21:50:12.818]    <control if="!canReadPins" while="" timeout="0" info="">
[21:50:12.818]      // if-block "!canReadPins"
[21:50:12.818]        // =>  FALSE
[21:50:12.818]      // skip if-block "!canReadPins"
[21:50:12.818]    </control>
[21:50:12.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:50:12.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:12.818]        // =>  TRUE
[21:50:12.818]      <block atomic="false" info="">
[21:50:12.818]        WriteAP(0x00, 0x190008);
[21:50:12.818]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:12.818]        WriteAP(0xF0, 0x01);
[21:50:12.822]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:12.822]      </block>
[21:50:12.822]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:12.822]    </control>
[21:50:12.822]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:50:12.822]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:12.822]        // =>  FALSE
[21:50:12.822]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:12.822]    </control>
[21:50:12.822]    <block atomic="false" info="">
[21:50:12.822]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:12.826]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:50:12.826]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:50:12.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:12.830]      __ap = 0; //lets make sure we reset the access point selection
[21:50:12.830]        // -> [__ap <= 0x00000000]
[21:50:12.830]    </block>
[21:50:12.830]  </sequence>
[21:50:12.830]  
[21:50:12.850]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:50:12.850]  
[21:50:12.850]  <debugvars>
[21:50:12.850]    // Pre-defined
[21:50:12.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:12.850]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:12.850]    __dp=0x00000000
[21:50:12.850]    __ap=0x00000000
[21:50:12.850]    __traceout=0x00000000      (Trace Disabled)
[21:50:12.850]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:12.850]    __FlashAddr=0x00000000
[21:50:12.850]    __FlashLen=0x00000000
[21:50:12.850]    __FlashArg=0x00000000
[21:50:12.850]    __FlashOp=0x00000000
[21:50:12.850]    __Result=0x00000000
[21:50:12.850]  </debugvars>
[21:50:12.850]  
[21:50:12.850]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:50:12.850]    <block atomic="false" info="">
[21:50:12.850]      __var deviceID = 0;
[21:50:12.850]        // -> [deviceID <= 0x00000000]
[21:50:12.850]      __var version = 0;
[21:50:12.850]        // -> [version <= 0x00000000]
[21:50:12.850]      __var partNum = 0;
[21:50:12.850]        // -> [partNum <= 0x00000000]
[21:50:12.850]      __var manuf = 0;
[21:50:12.854]        // -> [manuf <= 0x00000000]
[21:50:12.854]      __var isMSPM0G1X0X_G3X0X = 0;
[21:50:12.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:50:12.854]      __var isProduction = 0;
[21:50:12.854]        // -> [isProduction <= 0x00000000]
[21:50:12.854]      __var continueId = 0;
[21:50:12.854]        // -> [continueId <= 0x00000000]
[21:50:12.854]      deviceID =   Read32(0x41C40004);
[21:50:12.858]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:50:12.858]        // -> [deviceID <= 0x2BB8802F]
[21:50:12.858]      version = deviceID >> 28;
[21:50:12.858]        // -> [version <= 0x00000002]
[21:50:12.858]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:50:12.858]        // -> [partNum <= 0x0000BB88]
[21:50:12.858]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:50:12.858]        // -> [manuf <= 0x00000017]
[21:50:12.858]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:50:12.858]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:50:12.858]      isProduction = (version > 0);
[21:50:12.858]        // -> [isProduction <= 0x00000001]
[21:50:12.862]    </block>
[21:50:12.862]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:50:12.862]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:50:12.862]        // =>  FALSE
[21:50:12.862]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:50:12.862]    </control>
[21:50:12.862]    <control if="continueId == 4" while="" timeout="0" info="">
[21:50:12.862]      // if-block "continueId == 4"
[21:50:12.862]        // =>  FALSE
[21:50:12.862]      // skip if-block "continueId == 4"
[21:50:12.862]    </control>
[21:50:12.862]    <control if="!isProduction" while="" timeout="0" info="">
[21:50:12.862]      // if-block "!isProduction"
[21:50:12.862]        // =>  FALSE
[21:50:12.862]      // skip if-block "!isProduction"
[21:50:12.862]    </control>
[21:50:12.862]  </sequence>
[21:50:12.862]  
[21:52:22.035]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:52:22.035]  
[21:52:22.044]  <debugvars>
[21:52:22.044]    // Pre-defined
[21:52:22.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:52:22.044]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:52:22.044]    __dp=0x00000000
[21:52:22.044]    __ap=0x00000000
[21:52:22.044]    __traceout=0x00000000      (Trace Disabled)
[21:52:22.044]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:52:22.044]    __FlashAddr=0x00000000
[21:52:22.044]    __FlashLen=0x00000000
[21:52:22.044]    __FlashArg=0x00000000
[21:52:22.044]    __FlashOp=0x00000000
[21:52:22.044]    __Result=0x00000000
[21:52:22.044]  </debugvars>
[21:52:22.044]  
[21:52:22.044]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:52:22.044]    <block atomic="false" info="">
[21:52:22.044]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:52:22.044]        // -> [isSWJ <= 0x00000001]
[21:52:22.044]      __var hasDormant = __protocol & 0x00020000;
[21:52:22.044]        // -> [hasDormant <= 0x00000000]
[21:52:22.046]      __var protType   = __protocol & 0x0000FFFF;
[21:52:22.046]        // -> [protType <= 0x00000002]
[21:52:22.046]    </block>
[21:52:22.046]    <control if="protType == 1" while="" timeout="0" info="">
[21:52:22.046]      // if-block "protType == 1"
[21:52:22.046]        // =>  FALSE
[21:52:22.046]      // skip if-block "protType == 1"
[21:52:22.046]    </control>
[21:52:22.046]    <control if="protType == 2" while="" timeout="0" info="">
[21:52:22.046]      // if-block "protType == 2"
[21:52:22.046]        // =>  TRUE
[21:52:22.046]      <control if="isSWJ" while="" timeout="0" info="">
[21:52:22.046]        // if-block "isSWJ"
[21:52:22.046]          // =>  TRUE
[21:52:22.046]        <control if="hasDormant" while="" timeout="0" info="">
[21:52:22.046]          // if-block "hasDormant"
[21:52:22.046]            // =>  FALSE
[21:52:22.046]          // skip if-block "hasDormant"
[21:52:22.046]        </control>
[21:52:22.046]        <control if="!hasDormant" while="" timeout="0" info="">
[21:52:22.046]          // if-block "!hasDormant"
[21:52:22.046]            // =>  TRUE
[21:52:22.046]          <block atomic="false" info="">
[21:52:22.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:52:22.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:52:22.048]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:52:22.050]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:52:22.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:52:22.054]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:52:22.055]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:52:22.055]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:52:22.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:52:22.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:52:22.055]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:52:22.058]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:52:22.058]          </block>
[21:52:22.058]          // end if-block "!hasDormant"
[21:52:22.058]        </control>
[21:52:22.058]        // end if-block "isSWJ"
[21:52:22.058]      </control>
[21:52:22.058]      <control if="!isSWJ" while="" timeout="0" info="">
[21:52:22.058]        // if-block "!isSWJ"
[21:52:22.058]          // =>  FALSE
[21:52:22.058]        // skip if-block "!isSWJ"
[21:52:22.058]      </control>
[21:52:22.058]      <block atomic="false" info="">
[21:52:22.058]        ReadDP(0x0);
[21:52:22.058]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:52:22.058]      </block>
[21:52:22.058]      // end if-block "protType == 2"
[21:52:22.058]    </control>
[21:52:22.058]  </sequence>
[21:52:22.058]  
[21:52:22.062]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:52:22.062]  
[21:52:22.062]  <debugvars>
[21:52:22.062]    // Pre-defined
[21:52:22.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:52:22.062]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:52:22.062]    __dp=0x00000000
[21:52:22.062]    __ap=0x00000000
[21:52:22.062]    __traceout=0x00000000      (Trace Disabled)
[21:52:22.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:52:22.062]    __FlashAddr=0x00000000
[21:52:22.062]    __FlashLen=0x00000000
[21:52:22.062]    __FlashArg=0x00000000
[21:52:22.062]    __FlashOp=0x00000000
[21:52:22.062]    __Result=0x00000000
[21:52:22.062]  </debugvars>
[21:52:22.062]  
[21:52:22.062]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:52:22.062]    <block atomic="false" info="">
[21:52:22.062]      __var SW_DP_ABORT       = 0x0;
[21:52:22.062]        // -> [SW_DP_ABORT <= 0x00000000]
[21:52:22.062]      __var DP_CTRL_STAT      = 0x4;
[21:52:22.066]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:52:22.066]      __var DP_SELECT         = 0x8;
[21:52:22.066]        // -> [DP_SELECT <= 0x00000008]
[21:52:22.066]      __var powered_down      = 0;
[21:52:22.066]        // -> [powered_down <= 0x00000000]
[21:52:22.066]      WriteDP(DP_SELECT, 0x00000000);
[21:52:22.068]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:52:22.068]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:52:22.070]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:52:22.070]        // -> [powered_down <= 0x00000001]
[21:52:22.070]    </block>
[21:52:22.070]    <control if="powered_down" while="" timeout="0" info="">
[21:52:22.070]      // if-block "powered_down"
[21:52:22.070]        // =>  TRUE
[21:52:22.070]      <block atomic="false" info="">
[21:52:22.070]        Message(0, "Debug/System power-up request sent");
[21:52:22.070]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:52:22.074]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:52:22.074]      </block>
[21:52:22.074]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:52:22.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:52:22.074]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:52:22.074]        // while-condition  =>  FALSE
[21:52:22.074]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:52:22.074]      </control>
[21:52:22.074]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:52:22.074]        // if-block "(__protocol & 0xFFFF) == 1"
[21:52:22.074]          // =>  FALSE
[21:52:22.078]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:52:22.078]      </control>
[21:52:22.078]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:52:22.078]        // if-block "(__protocol & 0xFFFF) == 2"
[21:52:22.079]          // =>  TRUE
[21:52:22.079]        <block atomic="false" info="">
[21:52:22.079]          Message(0, "executing SWD power up");
[21:52:22.079]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:52:22.079]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:52:22.079]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:52:22.082]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:52:22.082]        </block>
[21:52:22.082]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:52:22.082]      </control>
[21:52:22.082]      // end if-block "powered_down"
[21:52:22.082]    </control>
[21:52:22.082]    <block atomic="false" info="">
[21:52:22.082]      __var DEBUG_PORT_VAL    = 0;
[21:52:22.082]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:52:22.082]      __var ACCESS_POINT_VAL  = 0;
[21:52:22.082]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:52:22.082]      __ap = 1; 
[21:52:22.082]        // -> [__ap <= 0x00000001]
[21:52:22.082]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:52:22.088]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:52:22.088]      __ap = 4;
[21:52:22.088]        // -> [__ap <= 0x00000004]
[21:52:22.088]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:52:22.090]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:52:22.090]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:52:22.090]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:52:22.090]    </block>
[21:52:22.094]    <block atomic="false" info="">
[21:52:22.094]      __var nReset = 0x80;
[21:52:22.094]        // -> [nReset <= 0x00000080]
[21:52:22.094]      __var canReadPins = 0;
[21:52:22.094]        // -> [canReadPins <= 0x00000000]
[21:52:22.094]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:52:22.094]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:52:22.094]        // -> [canReadPins <= 0x00000001]
[21:52:22.094]    </block>
[21:52:22.094]    <control if="" while="1" timeout="200" info="">
[21:52:22.094]      // while "1"  (timeout="200")
[21:52:22.094]      // while-condition  =>  TRUE
[21:52:22.094]      // while "1"  (timeout="200")
[21:52:22.094]      // while-condition  =>  TRUE
[21:52:22.094]      // while "1"  (timeout="200")
[21:52:22.094]      // while-condition  =>  TRUE
[21:52:22.094]      // while "1"  (timeout="200")
[21:52:22.094]      // while-condition  =>  TRUE
[21:52:22.098]      // while "1"  (timeout="200")
[21:52:22.098]      // while  =>  TIMEOUT
[21:52:22.098]      // end while "1"
[21:52:22.098]    </control>
[21:52:22.098]    <control if="canReadPins" while="" timeout="0" info="">
[21:52:22.098]      // if-block "canReadPins"
[21:52:22.098]        // =>  TRUE
[21:52:22.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:52:22.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:52:22.102]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:52:22.102]        // while-condition  =>  FALSE
[21:52:22.102]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:52:22.102]      </control>
[21:52:22.102]      // end if-block "canReadPins"
[21:52:22.102]    </control>
[21:52:22.102]    <control if="!canReadPins" while="" timeout="0" info="">
[21:52:22.102]      // if-block "!canReadPins"
[21:52:22.102]        // =>  FALSE
[21:52:22.102]      // skip if-block "!canReadPins"
[21:52:22.102]    </control>
[21:52:22.102]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:52:22.102]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:52:22.102]        // =>  TRUE
[21:52:22.102]      <block atomic="false" info="">
[21:52:22.102]        WriteAP(0x00, 0x190008);
[21:52:22.106]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:52:22.106]        WriteAP(0xF0, 0x01);
[21:52:22.110]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:52:22.110]      </block>
[21:52:22.110]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:52:22.110]    </control>
[21:52:22.110]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:52:22.110]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:52:22.110]        // =>  FALSE
[21:52:22.110]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:52:22.110]    </control>
[21:52:22.110]    <block atomic="false" info="">
[21:52:22.110]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:52:22.114]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:52:22.114]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:52:22.114]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:52:22.114]      __ap = 0; //lets make sure we reset the access point selection
[21:52:22.114]        // -> [__ap <= 0x00000000]
[21:52:22.114]    </block>
[21:52:22.114]  </sequence>
[21:52:22.114]  
[21:52:22.135]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:52:22.135]  
[21:52:22.135]  <debugvars>
[21:52:22.135]    // Pre-defined
[21:52:22.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:52:22.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:52:22.135]    __dp=0x00000000
[21:52:22.135]    __ap=0x00000000
[21:52:22.135]    __traceout=0x00000000      (Trace Disabled)
[21:52:22.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:52:22.135]    __FlashAddr=0x00000000
[21:52:22.135]    __FlashLen=0x00000000
[21:52:22.135]    __FlashArg=0x00000000
[21:52:22.135]    __FlashOp=0x00000000
[21:52:22.135]    __Result=0x00000000
[21:52:22.135]  </debugvars>
[21:52:22.135]  
[21:52:22.135]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:52:22.135]    <block atomic="false" info="">
[21:52:22.135]      __var deviceID = 0;
[21:52:22.135]        // -> [deviceID <= 0x00000000]
[21:52:22.135]      __var version = 0;
[21:52:22.135]        // -> [version <= 0x00000000]
[21:52:22.135]      __var partNum = 0;
[21:52:22.135]        // -> [partNum <= 0x00000000]
[21:52:22.135]      __var manuf = 0;
[21:52:22.135]        // -> [manuf <= 0x00000000]
[21:52:22.138]      __var isMSPM0G1X0X_G3X0X = 0;
[21:52:22.138]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:52:22.138]      __var isProduction = 0;
[21:52:22.138]        // -> [isProduction <= 0x00000000]
[21:52:22.138]      __var continueId = 0;
[21:52:22.138]        // -> [continueId <= 0x00000000]
[21:52:22.138]      deviceID =   Read32(0x41C40004);
[21:52:22.142]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:52:22.142]        // -> [deviceID <= 0x2BB8802F]
[21:52:22.142]      version = deviceID >> 28;
[21:52:22.142]        // -> [version <= 0x00000002]
[21:52:22.142]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:52:22.142]        // -> [partNum <= 0x0000BB88]
[21:52:22.142]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:52:22.142]        // -> [manuf <= 0x00000017]
[21:52:22.142]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:52:22.142]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:52:22.142]      isProduction = (version > 0);
[21:52:22.142]        // -> [isProduction <= 0x00000001]
[21:52:22.142]    </block>
[21:52:22.142]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:52:22.142]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:52:22.142]        // =>  FALSE
[21:52:22.142]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:52:22.142]    </control>
[21:52:22.142]    <control if="continueId == 4" while="" timeout="0" info="">
[21:52:22.142]      // if-block "continueId == 4"
[21:52:22.142]        // =>  FALSE
[21:52:22.142]      // skip if-block "continueId == 4"
[21:52:22.146]    </control>
[21:52:22.146]    <control if="!isProduction" while="" timeout="0" info="">
[21:52:22.146]      // if-block "!isProduction"
[21:52:22.146]        // =>  FALSE
[21:52:22.146]      // skip if-block "!isProduction"
[21:52:22.146]    </control>
[21:52:22.146]  </sequence>
[21:52:22.146]  
[21:53:29.658]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:53:29.658]  
[21:53:29.658]  <debugvars>
[21:53:29.658]    // Pre-defined
[21:53:29.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:29.658]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:29.658]    __dp=0x00000000
[21:53:29.658]    __ap=0x00000000
[21:53:29.658]    __traceout=0x00000000      (Trace Disabled)
[21:53:29.658]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:29.658]    __FlashAddr=0x00000000
[21:53:29.658]    __FlashLen=0x00000000
[21:53:29.658]    __FlashArg=0x00000000
[21:53:29.658]    __FlashOp=0x00000000
[21:53:29.658]    __Result=0x00000000
[21:53:29.658]  </debugvars>
[21:53:29.658]  
[21:53:29.658]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:53:29.658]    <block atomic="false" info="">
[21:53:29.658]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:53:29.658]        // -> [isSWJ <= 0x00000001]
[21:53:29.658]      __var hasDormant = __protocol & 0x00020000;
[21:53:29.658]        // -> [hasDormant <= 0x00000000]
[21:53:29.658]      __var protType   = __protocol & 0x0000FFFF;
[21:53:29.658]        // -> [protType <= 0x00000002]
[21:53:29.658]    </block>
[21:53:29.662]    <control if="protType == 1" while="" timeout="0" info="">
[21:53:29.662]      // if-block "protType == 1"
[21:53:29.662]        // =>  FALSE
[21:53:29.662]      // skip if-block "protType == 1"
[21:53:29.662]    </control>
[21:53:29.662]    <control if="protType == 2" while="" timeout="0" info="">
[21:53:29.662]      // if-block "protType == 2"
[21:53:29.662]        // =>  TRUE
[21:53:29.662]      <control if="isSWJ" while="" timeout="0" info="">
[21:53:29.662]        // if-block "isSWJ"
[21:53:29.662]          // =>  TRUE
[21:53:29.662]        <control if="hasDormant" while="" timeout="0" info="">
[21:53:29.662]          // if-block "hasDormant"
[21:53:29.662]            // =>  FALSE
[21:53:29.662]          // skip if-block "hasDormant"
[21:53:29.662]        </control>
[21:53:29.662]        <control if="!hasDormant" while="" timeout="0" info="">
[21:53:29.662]          // if-block "!hasDormant"
[21:53:29.662]            // =>  TRUE
[21:53:29.662]          <block atomic="false" info="">
[21:53:29.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:53:29.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:29.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:53:29.666]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:53:29.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:53:29.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:29.670]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:53:29.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:53:29.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:53:29.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:29.674]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:53:29.674]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:53:29.678]          </block>
[21:53:29.678]          // end if-block "!hasDormant"
[21:53:29.678]        </control>
[21:53:29.678]        // end if-block "isSWJ"
[21:53:29.678]      </control>
[21:53:29.678]      <control if="!isSWJ" while="" timeout="0" info="">
[21:53:29.678]        // if-block "!isSWJ"
[21:53:29.678]          // =>  FALSE
[21:53:29.678]        // skip if-block "!isSWJ"
[21:53:29.678]      </control>
[21:53:29.678]      <block atomic="false" info="">
[21:53:29.678]        ReadDP(0x0);
[21:53:29.678]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:53:29.678]      </block>
[21:53:29.678]      // end if-block "protType == 2"
[21:53:29.678]    </control>
[21:53:29.678]  </sequence>
[21:53:29.678]  
[21:53:29.686]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:53:29.686]  
[21:53:29.686]  <debugvars>
[21:53:29.686]    // Pre-defined
[21:53:29.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:29.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:29.686]    __dp=0x00000000
[21:53:29.686]    __ap=0x00000000
[21:53:29.686]    __traceout=0x00000000      (Trace Disabled)
[21:53:29.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:29.686]    __FlashAddr=0x00000000
[21:53:29.686]    __FlashLen=0x00000000
[21:53:29.686]    __FlashArg=0x00000000
[21:53:29.686]    __FlashOp=0x00000000
[21:53:29.686]    __Result=0x00000000
[21:53:29.686]  </debugvars>
[21:53:29.686]  
[21:53:29.686]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:53:29.686]    <block atomic="false" info="">
[21:53:29.686]      __var SW_DP_ABORT       = 0x0;
[21:53:29.686]        // -> [SW_DP_ABORT <= 0x00000000]
[21:53:29.686]      __var DP_CTRL_STAT      = 0x4;
[21:53:29.686]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:53:29.686]      __var DP_SELECT         = 0x8;
[21:53:29.686]        // -> [DP_SELECT <= 0x00000008]
[21:53:29.686]      __var powered_down      = 0;
[21:53:29.686]        // -> [powered_down <= 0x00000000]
[21:53:29.686]      WriteDP(DP_SELECT, 0x00000000);
[21:53:29.690]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:53:29.690]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:53:29.690]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:53:29.690]        // -> [powered_down <= 0x00000001]
[21:53:29.694]    </block>
[21:53:29.695]    <control if="powered_down" while="" timeout="0" info="">
[21:53:29.695]      // if-block "powered_down"
[21:53:29.695]        // =>  TRUE
[21:53:29.695]      <block atomic="false" info="">
[21:53:29.695]        Message(0, "Debug/System power-up request sent");
[21:53:29.703]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:53:29.703]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:53:29.707]      </block>
[21:53:29.707]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:53:29.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.707]        // while-condition  =>  TRUE
[21:53:29.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.707]        // while-condition  =>  TRUE
[21:53:29.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.711]        // while-condition  =>  TRUE
[21:53:29.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.711]        // while-condition  =>  TRUE
[21:53:29.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.715]        // while-condition  =>  TRUE
[21:53:29.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.715]        // while-condition  =>  TRUE
[21:53:29.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.723]        // while-condition  =>  TRUE
[21:53:29.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.725]        // while-condition  =>  TRUE
[21:53:29.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.727]        // while-condition  =>  TRUE
[21:53:29.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.728]        // while-condition  =>  TRUE
[21:53:29.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.731]        // while-condition  =>  TRUE
[21:53:29.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.732]        // while-condition  =>  TRUE
[21:53:29.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.734]        // while-condition  =>  TRUE
[21:53:29.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.735]        // while-condition  =>  TRUE
[21:53:29.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.737]        // while-condition  =>  TRUE
[21:53:29.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.739]        // while-condition  =>  TRUE
[21:53:29.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.740]        // while-condition  =>  TRUE
[21:53:29.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.742]        // while-condition  =>  TRUE
[21:53:29.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.743]        // while-condition  =>  TRUE
[21:53:29.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.746]        // while-condition  =>  TRUE
[21:53:29.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.747]        // while-condition  =>  TRUE
[21:53:29.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.749]        // while-condition  =>  TRUE
[21:53:29.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.750]        // while-condition  =>  TRUE
[21:53:29.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.753]        // while-condition  =>  TRUE
[21:53:29.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.755]        // while-condition  =>  TRUE
[21:53:29.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.756]        // while-condition  =>  TRUE
[21:53:29.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.758]        // while-condition  =>  TRUE
[21:53:29.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.760]        // while-condition  =>  TRUE
[21:53:29.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.765]        // while-condition  =>  TRUE
[21:53:29.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.766]        // while-condition  =>  TRUE
[21:53:29.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.768]        // while-condition  =>  TRUE
[21:53:29.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.769]        // while-condition  =>  TRUE
[21:53:29.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.772]        // while-condition  =>  TRUE
[21:53:29.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.772]        // while-condition  =>  TRUE
[21:53:29.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.776]        // while-condition  =>  TRUE
[21:53:29.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.778]        // while-condition  =>  TRUE
[21:53:29.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.778]        // while-condition  =>  TRUE
[21:53:29.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.781]        // while-condition  =>  TRUE
[21:53:29.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.781]        // while-condition  =>  TRUE
[21:53:29.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.785]        // while-condition  =>  TRUE
[21:53:29.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.785]        // while-condition  =>  TRUE
[21:53:29.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.789]        // while-condition  =>  TRUE
[21:53:29.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.789]        // while-condition  =>  TRUE
[21:53:29.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.793]        // while-condition  =>  TRUE
[21:53:29.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.797]        // while-condition  =>  TRUE
[21:53:29.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.797]        // while-condition  =>  TRUE
[21:53:29.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.797]        // while-condition  =>  TRUE
[21:53:29.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.801]        // while-condition  =>  TRUE
[21:53:29.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.801]        // while-condition  =>  TRUE
[21:53:29.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.805]        // while-condition  =>  TRUE
[21:53:29.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.809]        // while-condition  =>  TRUE
[21:53:29.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.809]        // while-condition  =>  TRUE
[21:53:29.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.813]        // while-condition  =>  TRUE
[21:53:29.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.813]        // while-condition  =>  TRUE
[21:53:29.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.817]        // while-condition  =>  TRUE
[21:53:29.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.817]        // while-condition  =>  TRUE
[21:53:29.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.821]        // while-condition  =>  TRUE
[21:53:29.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.821]        // while-condition  =>  TRUE
[21:53:29.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.825]        // while-condition  =>  TRUE
[21:53:29.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.825]        // while-condition  =>  TRUE
[21:53:29.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.829]        // while-condition  =>  TRUE
[21:53:29.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.829]        // while-condition  =>  TRUE
[21:53:29.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.829]        // while-condition  =>  TRUE
[21:53:29.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.833]        // while-condition  =>  TRUE
[21:53:29.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.833]        // while-condition  =>  TRUE
[21:53:29.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.837]        // while-condition  =>  TRUE
[21:53:29.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.839]        // while-condition  =>  TRUE
[21:53:29.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.842]        // while-condition  =>  TRUE
[21:53:29.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.844]        // while-condition  =>  TRUE
[21:53:29.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.845]        // while-condition  =>  TRUE
[21:53:29.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.847]        // while-condition  =>  TRUE
[21:53:29.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.849]        // while-condition  =>  TRUE
[21:53:29.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.851]        // while-condition  =>  TRUE
[21:53:29.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.853]        // while-condition  =>  TRUE
[21:53:29.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.855]        // while-condition  =>  TRUE
[21:53:29.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.858]        // while-condition  =>  TRUE
[21:53:29.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.860]        // while-condition  =>  TRUE
[21:53:29.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.861]        // while-condition  =>  TRUE
[21:53:29.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.863]        // while-condition  =>  TRUE
[21:53:29.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.865]        // while-condition  =>  TRUE
[21:53:29.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.868]        // while-condition  =>  TRUE
[21:53:29.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.870]        // while-condition  =>  TRUE
[21:53:29.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.874]        // while-condition  =>  TRUE
[21:53:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.874]        // while-condition  =>  TRUE
[21:53:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.877]        // while-condition  =>  TRUE
[21:53:29.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.878]        // while-condition  =>  TRUE
[21:53:29.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.880]        // while-condition  =>  TRUE
[21:53:29.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.883]        // while-condition  =>  TRUE
[21:53:29.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.885]        // while-condition  =>  TRUE
[21:53:29.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.889]        // while-condition  =>  TRUE
[21:53:29.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.891]        // while-condition  =>  TRUE
[21:53:29.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.892]        // while-condition  =>  TRUE
[21:53:29.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.892]        // while-condition  =>  TRUE
[21:53:29.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.895]        // while-condition  =>  TRUE
[21:53:29.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.898]        // while-condition  =>  TRUE
[21:53:29.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.899]        // while-condition  =>  TRUE
[21:53:29.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.901]        // while-condition  =>  TRUE
[21:53:29.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.904]        // while-condition  =>  TRUE
[21:53:29.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.906]        // while-condition  =>  TRUE
[21:53:29.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.910]        // while-condition  =>  TRUE
[21:53:29.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.911]        // while-condition  =>  TRUE
[21:53:29.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.912]        // while-condition  =>  TRUE
[21:53:29.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.913]        // while-condition  =>  TRUE
[21:53:29.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.916]        // while-condition  =>  TRUE
[21:53:29.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.918]        // while-condition  =>  TRUE
[21:53:29.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.920]        // while-condition  =>  TRUE
[21:53:29.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.922]        // while-condition  =>  TRUE
[21:53:29.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.924]        // while-condition  =>  TRUE
[21:53:29.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.926]        // while-condition  =>  TRUE
[21:53:29.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.927]        // while-condition  =>  TRUE
[21:53:29.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.927]        // while-condition  =>  TRUE
[21:53:29.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.931]        // while-condition  =>  TRUE
[21:53:29.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.931]        // while-condition  =>  TRUE
[21:53:29.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.935]        // while-condition  =>  TRUE
[21:53:29.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.935]        // while-condition  =>  TRUE
[21:53:29.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.939]        // while-condition  =>  TRUE
[21:53:29.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.939]        // while-condition  =>  TRUE
[21:53:29.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.943]        // while-condition  =>  TRUE
[21:53:29.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.943]        // while-condition  =>  TRUE
[21:53:29.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.949]        // while-condition  =>  TRUE
[21:53:29.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.950]        // while-condition  =>  TRUE
[21:53:29.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.952]        // while-condition  =>  TRUE
[21:53:29.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.954]        // while-condition  =>  TRUE
[21:53:29.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.956]        // while-condition  =>  TRUE
[21:53:29.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.958]        // while-condition  =>  TRUE
[21:53:29.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.960]        // while-condition  =>  TRUE
[21:53:29.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.962]        // while-condition  =>  TRUE
[21:53:29.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.964]        // while-condition  =>  TRUE
[21:53:29.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.966]        // while-condition  =>  TRUE
[21:53:29.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.970]        // while-condition  =>  TRUE
[21:53:29.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.971]        // while-condition  =>  TRUE
[21:53:29.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.973]        // while-condition  =>  TRUE
[21:53:29.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.975]        // while-condition  =>  TRUE
[21:53:29.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.977]        // while-condition  =>  TRUE
[21:53:29.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.979]        // while-condition  =>  TRUE
[21:53:29.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.981]        // while-condition  =>  TRUE
[21:53:29.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.983]        // while-condition  =>  TRUE
[21:53:29.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.984]        // while-condition  =>  TRUE
[21:53:29.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.984]        // while-condition  =>  TRUE
[21:53:29.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.988]        // while-condition  =>  TRUE
[21:53:29.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.988]        // while-condition  =>  TRUE
[21:53:29.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.993]        // while-condition  =>  TRUE
[21:53:29.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.995]        // while-condition  =>  TRUE
[21:53:29.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:29.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:29.996]        // while-condition  =>  TRUE
[21:53:29.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.001]        // while-condition  =>  TRUE
[21:53:30.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.005]        // while-condition  =>  TRUE
[21:53:30.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.005]        // while-condition  =>  TRUE
[21:53:30.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.009]        // while-condition  =>  TRUE
[21:53:30.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.010]        // while-condition  =>  TRUE
[21:53:30.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.013]        // while-condition  =>  TRUE
[21:53:30.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.013]        // while-condition  =>  TRUE
[21:53:30.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.017]        // while-condition  =>  TRUE
[21:53:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.018]        // while-condition  =>  TRUE
[21:53:30.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.020]        // while-condition  =>  TRUE
[21:53:30.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.021]        // while-condition  =>  TRUE
[21:53:30.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.024]        // while-condition  =>  TRUE
[21:53:30.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.025]        // while-condition  =>  TRUE
[21:53:30.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.028]        // while-condition  =>  TRUE
[21:53:30.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.029]        // while-condition  =>  TRUE
[21:53:30.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.032]        // while-condition  =>  TRUE
[21:53:30.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.033]        // while-condition  =>  TRUE
[21:53:30.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.035]        // while-condition  =>  TRUE
[21:53:30.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.036]        // while-condition  =>  TRUE
[21:53:30.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.038]        // while-condition  =>  TRUE
[21:53:30.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.042]        // while-condition  =>  TRUE
[21:53:30.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.042]        // while-condition  =>  TRUE
[21:53:30.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.046]        // while-condition  =>  TRUE
[21:53:30.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.047]        // while-condition  =>  TRUE
[21:53:30.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.050]        // while-condition  =>  TRUE
[21:53:30.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.050]        // while-condition  =>  TRUE
[21:53:30.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.056]        // while-condition  =>  TRUE
[21:53:30.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.059]        // while-condition  =>  TRUE
[21:53:30.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.061]        // while-condition  =>  TRUE
[21:53:30.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.063]        // while-condition  =>  TRUE
[21:53:30.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.063]        // while-condition  =>  TRUE
[21:53:30.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.067]        // while-condition  =>  TRUE
[21:53:30.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.069]        // while-condition  =>  TRUE
[21:53:30.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.071]        // while-condition  =>  TRUE
[21:53:30.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.075]        // while-condition  =>  TRUE
[21:53:30.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.077]        // while-condition  =>  TRUE
[21:53:30.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.077]        // while-condition  =>  TRUE
[21:53:30.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.081]        // while-condition  =>  TRUE
[21:53:30.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.084]        // while-condition  =>  TRUE
[21:53:30.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.085]        // while-condition  =>  TRUE
[21:53:30.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.087]        // while-condition  =>  TRUE
[21:53:30.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.089]        // while-condition  =>  TRUE
[21:53:30.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.091]        // while-condition  =>  TRUE
[21:53:30.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.094]        // while-condition  =>  TRUE
[21:53:30.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.096]        // while-condition  =>  TRUE
[21:53:30.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.099]        // while-condition  =>  TRUE
[21:53:30.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.101]        // while-condition  =>  TRUE
[21:53:30.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.101]        // while-condition  =>  TRUE
[21:53:30.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.104]        // while-condition  =>  TRUE
[21:53:30.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.106]        // while-condition  =>  TRUE
[21:53:30.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.108]        // while-condition  =>  TRUE
[21:53:30.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.109]        // while-condition  =>  TRUE
[21:53:30.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.111]        // while-condition  =>  TRUE
[21:53:30.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.112]        // while-condition  =>  TRUE
[21:53:30.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.116]        // while-condition  =>  TRUE
[21:53:30.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.117]        // while-condition  =>  TRUE
[21:53:30.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.118]        // while-condition  =>  TRUE
[21:53:30.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.121]        // while-condition  =>  TRUE
[21:53:30.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.123]        // while-condition  =>  TRUE
[21:53:30.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.125]        // while-condition  =>  TRUE
[21:53:30.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.128]        // while-condition  =>  TRUE
[21:53:30.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.129]        // while-condition  =>  TRUE
[21:53:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.131]        // while-condition  =>  TRUE
[21:53:30.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.131]        // while-condition  =>  TRUE
[21:53:30.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.134]        // while-condition  =>  TRUE
[21:53:30.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.136]        // while-condition  =>  TRUE
[21:53:30.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.138]        // while-condition  =>  TRUE
[21:53:30.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.140]        // while-condition  =>  TRUE
[21:53:30.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.143]        // while-condition  =>  TRUE
[21:53:30.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.145]        // while-condition  =>  TRUE
[21:53:30.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.146]        // while-condition  =>  TRUE
[21:53:30.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.147]        // while-condition  =>  TRUE
[21:53:30.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.150]        // while-condition  =>  TRUE
[21:53:30.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.151]        // while-condition  =>  TRUE
[21:53:30.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.155]        // while-condition  =>  TRUE
[21:53:30.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.156]        // while-condition  =>  TRUE
[21:53:30.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.159]        // while-condition  =>  TRUE
[21:53:30.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.159]        // while-condition  =>  TRUE
[21:53:30.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.164]        // while-condition  =>  TRUE
[21:53:30.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.165]        // while-condition  =>  TRUE
[21:53:30.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.167]        // while-condition  =>  TRUE
[21:53:30.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.169]        // while-condition  =>  TRUE
[21:53:30.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.169]        // while-condition  =>  TRUE
[21:53:30.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.175]        // while-condition  =>  TRUE
[21:53:30.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.180]        // while-condition  =>  TRUE
[21:53:30.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.181]        // while-condition  =>  TRUE
[21:53:30.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.181]        // while-condition  =>  TRUE
[21:53:30.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.184]        // while-condition  =>  TRUE
[21:53:30.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.184]        // while-condition  =>  TRUE
[21:53:30.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.188]        // while-condition  =>  TRUE
[21:53:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.188]        // while-condition  =>  TRUE
[21:53:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.192]        // while-condition  =>  TRUE
[21:53:30.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.194]        // while-condition  =>  TRUE
[21:53:30.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.197]        // while-condition  =>  TRUE
[21:53:30.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.197]        // while-condition  =>  TRUE
[21:53:30.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.200]        // while-condition  =>  TRUE
[21:53:30.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.200]        // while-condition  =>  TRUE
[21:53:30.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.204]        // while-condition  =>  TRUE
[21:53:30.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.205]        // while-condition  =>  TRUE
[21:53:30.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.209]        // while-condition  =>  TRUE
[21:53:30.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.210]        // while-condition  =>  TRUE
[21:53:30.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.212]        // while-condition  =>  TRUE
[21:53:30.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.216]        // while-condition  =>  TRUE
[21:53:30.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.217]        // while-condition  =>  TRUE
[21:53:30.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.219]        // while-condition  =>  TRUE
[21:53:30.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.221]        // while-condition  =>  TRUE
[21:53:30.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.221]        // while-condition  =>  TRUE
[21:53:30.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.225]        // while-condition  =>  TRUE
[21:53:30.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.227]        // while-condition  =>  TRUE
[21:53:30.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.229]        // while-condition  =>  TRUE
[21:53:30.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.232]        // while-condition  =>  TRUE
[21:53:30.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.234]        // while-condition  =>  TRUE
[21:53:30.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.234]        // while-condition  =>  TRUE
[21:53:30.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.237]        // while-condition  =>  TRUE
[21:53:30.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.239]        // while-condition  =>  TRUE
[21:53:30.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.241]        // while-condition  =>  TRUE
[21:53:30.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.243]        // while-condition  =>  TRUE
[21:53:30.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.245]        // while-condition  =>  TRUE
[21:53:30.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.246]        // while-condition  =>  TRUE
[21:53:30.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.249]        // while-condition  =>  TRUE
[21:53:30.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.251]        // while-condition  =>  TRUE
[21:53:30.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.253]        // while-condition  =>  TRUE
[21:53:30.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.254]        // while-condition  =>  TRUE
[21:53:30.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.256]        // while-condition  =>  TRUE
[21:53:30.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.258]        // while-condition  =>  TRUE
[21:53:30.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.259]        // while-condition  =>  TRUE
[21:53:30.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.262]        // while-condition  =>  TRUE
[21:53:30.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.264]        // while-condition  =>  TRUE
[21:53:30.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.267]        // while-condition  =>  TRUE
[21:53:30.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.267]        // while-condition  =>  TRUE
[21:53:30.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.270]        // while-condition  =>  TRUE
[21:53:30.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.272]        // while-condition  =>  TRUE
[21:53:30.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.274]        // while-condition  =>  TRUE
[21:53:30.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.275]        // while-condition  =>  TRUE
[21:53:30.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.278]        // while-condition  =>  TRUE
[21:53:30.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.281]        // while-condition  =>  TRUE
[21:53:30.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.281]        // while-condition  =>  TRUE
[21:53:30.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.284]        // while-condition  =>  TRUE
[21:53:30.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.287]        // while-condition  =>  TRUE
[21:53:30.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.289]        // while-condition  =>  TRUE
[21:53:30.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.291]        // while-condition  =>  TRUE
[21:53:30.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.292]        // while-condition  =>  TRUE
[21:53:30.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.294]        // while-condition  =>  TRUE
[21:53:30.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.296]        // while-condition  =>  TRUE
[21:53:30.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.298]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.298]        // while-condition  =>  TRUE
[21:53:30.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.301]        // while-condition  =>  TRUE
[21:53:30.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.304]        // while-condition  =>  TRUE
[21:53:30.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.307]        // while-condition  =>  TRUE
[21:53:30.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.309]        // while-condition  =>  TRUE
[21:53:30.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.309]        // while-condition  =>  TRUE
[21:53:30.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.312]        // while-condition  =>  TRUE
[21:53:30.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.312]        // while-condition  =>  TRUE
[21:53:30.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.316]        // while-condition  =>  TRUE
[21:53:30.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.320]        // while-condition  =>  TRUE
[21:53:30.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.321]        // while-condition  =>  TRUE
[21:53:30.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.321]        // while-condition  =>  TRUE
[21:53:30.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.325]        // while-condition  =>  TRUE
[21:53:30.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.325]        // while-condition  =>  TRUE
[21:53:30.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.329]        // while-condition  =>  TRUE
[21:53:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.329]        // while-condition  =>  TRUE
[21:53:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.333]        // while-condition  =>  TRUE
[21:53:30.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.333]        // while-condition  =>  TRUE
[21:53:30.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.338]        // while-condition  =>  TRUE
[21:53:30.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.338]        // while-condition  =>  TRUE
[21:53:30.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.341]        // while-condition  =>  TRUE
[21:53:30.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.343]        // while-condition  =>  TRUE
[21:53:30.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.343]        // while-condition  =>  TRUE
[21:53:30.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.345]        // while-condition  =>  TRUE
[21:53:30.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.345]        // while-condition  =>  TRUE
[21:53:30.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.349]        // while-condition  =>  TRUE
[21:53:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.349]        // while-condition  =>  TRUE
[21:53:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.353]        // while-condition  =>  TRUE
[21:53:30.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.353]        // while-condition  =>  TRUE
[21:53:30.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.357]        // while-condition  =>  TRUE
[21:53:30.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.357]        // while-condition  =>  TRUE
[21:53:30.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.361]        // while-condition  =>  TRUE
[21:53:30.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.361]        // while-condition  =>  TRUE
[21:53:30.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.365]        // while-condition  =>  TRUE
[21:53:30.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.365]        // while-condition  =>  TRUE
[21:53:30.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.369]        // while-condition  =>  TRUE
[21:53:30.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.369]        // while-condition  =>  TRUE
[21:53:30.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.373]        // while-condition  =>  TRUE
[21:53:30.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.373]        // while-condition  =>  TRUE
[21:53:30.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.377]        // while-condition  =>  TRUE
[21:53:30.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.381]        // while-condition  =>  TRUE
[21:53:30.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.381]        // while-condition  =>  TRUE
[21:53:30.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.381]        // while-condition  =>  TRUE
[21:53:30.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.385]        // while-condition  =>  TRUE
[21:53:30.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.385]        // while-condition  =>  TRUE
[21:53:30.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.389]        // while-condition  =>  TRUE
[21:53:30.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.392]        // while-condition  =>  TRUE
[21:53:30.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.394]        // while-condition  =>  TRUE
[21:53:30.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.394]        // while-condition  =>  TRUE
[21:53:30.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.398]        // while-condition  =>  TRUE
[21:53:30.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.402]        // while-condition  =>  TRUE
[21:53:30.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.402]        // while-condition  =>  TRUE
[21:53:30.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.406]        // while-condition  =>  TRUE
[21:53:30.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.406]        // while-condition  =>  TRUE
[21:53:30.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.410]        // while-condition  =>  TRUE
[21:53:30.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.410]        // while-condition  =>  TRUE
[21:53:30.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.414]        // while-condition  =>  TRUE
[21:53:30.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.414]        // while-condition  =>  TRUE
[21:53:30.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.418]        // while-condition  =>  TRUE
[21:53:30.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.419]        // while-condition  =>  TRUE
[21:53:30.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.422]        // while-condition  =>  TRUE
[21:53:30.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.422]        // while-condition  =>  TRUE
[21:53:30.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.426]        // while-condition  =>  TRUE
[21:53:30.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.426]        // while-condition  =>  TRUE
[21:53:30.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.430]        // while-condition  =>  TRUE
[21:53:30.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.430]        // while-condition  =>  TRUE
[21:53:30.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.434]        // while-condition  =>  TRUE
[21:53:30.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.434]        // while-condition  =>  TRUE
[21:53:30.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.438]        // while-condition  =>  TRUE
[21:53:30.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.442]        // while-condition  =>  TRUE
[21:53:30.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.446]        // while-condition  =>  TRUE
[21:53:30.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.448]        // while-condition  =>  TRUE
[21:53:30.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.450]        // while-condition  =>  TRUE
[21:53:30.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.450]        // while-condition  =>  TRUE
[21:53:30.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.450]        // while-condition  =>  TRUE
[21:53:30.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.454]        // while-condition  =>  TRUE
[21:53:30.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.458]        // while-condition  =>  TRUE
[21:53:30.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.458]        // while-condition  =>  TRUE
[21:53:30.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.462]        // while-condition  =>  TRUE
[21:53:30.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.464]        // while-condition  =>  TRUE
[21:53:30.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.464]        // while-condition  =>  TRUE
[21:53:30.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.466]        // while-condition  =>  TRUE
[21:53:30.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.466]        // while-condition  =>  TRUE
[21:53:30.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.470]        // while-condition  =>  TRUE
[21:53:30.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.470]        // while-condition  =>  TRUE
[21:53:30.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.474]        // while-condition  =>  TRUE
[21:53:30.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.476]        // while-condition  =>  TRUE
[21:53:30.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.476]        // while-condition  =>  TRUE
[21:53:30.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.480]        // while-condition  =>  TRUE
[21:53:30.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.483]        // while-condition  =>  TRUE
[21:53:30.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.484]        // while-condition  =>  TRUE
[21:53:30.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.487]        // while-condition  =>  TRUE
[21:53:30.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.489]        // while-condition  =>  TRUE
[21:53:30.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.491]        // while-condition  =>  TRUE
[21:53:30.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.493]        // while-condition  =>  TRUE
[21:53:30.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.495]        // while-condition  =>  TRUE
[21:53:30.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.495]        // while-condition  =>  TRUE
[21:53:30.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.499]        // while-condition  =>  TRUE
[21:53:30.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.499]        // while-condition  =>  TRUE
[21:53:30.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.504]        // while-condition  =>  TRUE
[21:53:30.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.505]        // while-condition  =>  TRUE
[21:53:30.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.507]        // while-condition  =>  TRUE
[21:53:30.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.508]        // while-condition  =>  TRUE
[21:53:30.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.508]        // while-condition  =>  TRUE
[21:53:30.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.511]        // while-condition  =>  TRUE
[21:53:30.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.513]        // while-condition  =>  TRUE
[21:53:30.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.516]        // while-condition  =>  TRUE
[21:53:30.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.517]        // while-condition  =>  TRUE
[21:53:30.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.520]        // while-condition  =>  TRUE
[21:53:30.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.522]        // while-condition  =>  TRUE
[21:53:30.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.524]        // while-condition  =>  TRUE
[21:53:30.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.529]        // while-condition  =>  TRUE
[21:53:30.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.530]        // while-condition  =>  TRUE
[21:53:30.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.532]        // while-condition  =>  TRUE
[21:53:30.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.532]        // while-condition  =>  TRUE
[21:53:30.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.536]        // while-condition  =>  TRUE
[21:53:30.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.538]        // while-condition  =>  TRUE
[21:53:30.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.538]        // while-condition  =>  TRUE
[21:53:30.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.540]        // while-condition  =>  TRUE
[21:53:30.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.543]        // while-condition  =>  TRUE
[21:53:30.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.546]        // while-condition  =>  TRUE
[21:53:30.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.546]        // while-condition  =>  TRUE
[21:53:30.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.549]        // while-condition  =>  TRUE
[21:53:30.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.551]        // while-condition  =>  TRUE
[21:53:30.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.553]        // while-condition  =>  TRUE
[21:53:30.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.553]        // while-condition  =>  TRUE
[21:53:30.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.558]        // while-condition  =>  TRUE
[21:53:30.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.561]        // while-condition  =>  TRUE
[21:53:30.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.562]        // while-condition  =>  TRUE
[21:53:30.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.564]        // while-condition  =>  TRUE
[21:53:30.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.566]        // while-condition  =>  TRUE
[21:53:30.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.566]        // while-condition  =>  TRUE
[21:53:30.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.570]        // while-condition  =>  TRUE
[21:53:30.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.570]        // while-condition  =>  TRUE
[21:53:30.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.574]        // while-condition  =>  TRUE
[21:53:30.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.574]        // while-condition  =>  TRUE
[21:53:30.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.578]        // while-condition  =>  TRUE
[21:53:30.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.578]        // while-condition  =>  TRUE
[21:53:30.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.582]        // while-condition  =>  TRUE
[21:53:30.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.582]        // while-condition  =>  TRUE
[21:53:30.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.586]        // while-condition  =>  TRUE
[21:53:30.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.586]        // while-condition  =>  TRUE
[21:53:30.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.590]        // while-condition  =>  TRUE
[21:53:30.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.594]        // while-condition  =>  TRUE
[21:53:30.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.598]        // while-condition  =>  TRUE
[21:53:30.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.598]        // while-condition  =>  TRUE
[21:53:30.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.602]        // while-condition  =>  TRUE
[21:53:30.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.610]        // while-condition  =>  TRUE
[21:53:30.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.610]        // while-condition  =>  TRUE
[21:53:30.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.614]        // while-condition  =>  TRUE
[21:53:30.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.614]        // while-condition  =>  TRUE
[21:53:30.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.618]        // while-condition  =>  TRUE
[21:53:30.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.618]        // while-condition  =>  TRUE
[21:53:30.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.618]        // while-condition  =>  TRUE
[21:53:30.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.623]        // while-condition  =>  TRUE
[21:53:30.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.626]        // while-condition  =>  TRUE
[21:53:30.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.626]        // while-condition  =>  TRUE
[21:53:30.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.630]        // while-condition  =>  TRUE
[21:53:30.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.630]        // while-condition  =>  TRUE
[21:53:30.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.634]        // while-condition  =>  TRUE
[21:53:30.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.634]        // while-condition  =>  TRUE
[21:53:30.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.639]        // while-condition  =>  TRUE
[21:53:30.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.640]        // while-condition  =>  TRUE
[21:53:30.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.642]        // while-condition  =>  TRUE
[21:53:30.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.644]        // while-condition  =>  TRUE
[21:53:30.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.646]        // while-condition  =>  TRUE
[21:53:30.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.647]        // while-condition  =>  TRUE
[21:53:30.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.649]        // while-condition  =>  TRUE
[21:53:30.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.650]        // while-condition  =>  TRUE
[21:53:30.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.653]        // while-condition  =>  TRUE
[21:53:30.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.655]        // while-condition  =>  TRUE
[21:53:30.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.657]        // while-condition  =>  TRUE
[21:53:30.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.658]        // while-condition  =>  TRUE
[21:53:30.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.658]        // while-condition  =>  TRUE
[21:53:30.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.662]        // while-condition  =>  TRUE
[21:53:30.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.664]        // while-condition  =>  TRUE
[21:53:30.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.667]        // while-condition  =>  TRUE
[21:53:30.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.667]        // while-condition  =>  TRUE
[21:53:30.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.671]        // while-condition  =>  TRUE
[21:53:30.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.672]        // while-condition  =>  TRUE
[21:53:30.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.674]        // while-condition  =>  TRUE
[21:53:30.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.675]        // while-condition  =>  TRUE
[21:53:30.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.679]        // while-condition  =>  TRUE
[21:53:30.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.680]        // while-condition  =>  TRUE
[21:53:30.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.683]        // while-condition  =>  TRUE
[21:53:30.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.687]        // while-condition  =>  TRUE
[21:53:30.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.689]        // while-condition  =>  TRUE
[21:53:30.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.691]        // while-condition  =>  TRUE
[21:53:30.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.692]        // while-condition  =>  TRUE
[21:53:30.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.694]        // while-condition  =>  TRUE
[21:53:30.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.696]        // while-condition  =>  TRUE
[21:53:30.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.698]        // while-condition  =>  TRUE
[21:53:30.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.700]        // while-condition  =>  TRUE
[21:53:30.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.703]        // while-condition  =>  TRUE
[21:53:30.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.704]        // while-condition  =>  TRUE
[21:53:30.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:30.706]        // while-condition  =>  TRUE
[21:53:30.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:30.706]        // while  =>  TIMEOUT
[21:53:30.706]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:53:30.706]      </control>
[21:53:30.706]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:53:30.706]        // if-block "(__protocol & 0xFFFF) == 1"
[21:53:30.706]          // =>  FALSE
[21:53:30.706]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:53:30.710]      </control>
[21:53:30.710]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:53:30.710]        // if-block "(__protocol & 0xFFFF) == 2"
[21:53:30.710]          // =>  TRUE
[21:53:30.710]        <block atomic="false" info="">
[21:53:30.710]          Message(0, "executing SWD power up");
[21:53:30.710]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:53:30.715]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:53:30.715]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:53:30.716]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:53:30.716]        </block>
[21:53:30.716]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:53:30.716]      </control>
[21:53:30.716]      // end if-block "powered_down"
[21:53:30.716]    </control>
[21:53:30.716]    <block atomic="false" info="">
[21:53:30.716]      __var DEBUG_PORT_VAL    = 0;
[21:53:30.716]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:53:30.716]      __var ACCESS_POINT_VAL  = 0;
[21:53:30.716]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:53:30.716]      __ap = 1; 
[21:53:30.716]        // -> [__ap <= 0x00000001]
[21:53:30.716]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:53:30.734]  
[21:53:30.734]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[21:53:30.734]  
[21:53:30.734]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:53:30.734]    </block>
[21:53:30.734]  </sequence>
[21:53:30.734]  
[21:53:34.605]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:53:34.605]  
[21:53:34.614]  <debugvars>
[21:53:34.614]    // Pre-defined
[21:53:34.614]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:34.614]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:34.614]    __dp=0x00000000
[21:53:34.614]    __ap=0x00000000
[21:53:34.614]    __traceout=0x00000000      (Trace Disabled)
[21:53:34.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:34.614]    __FlashAddr=0x00000000
[21:53:34.614]    __FlashLen=0x00000000
[21:53:34.614]    __FlashArg=0x00000000
[21:53:34.614]    __FlashOp=0x00000000
[21:53:34.614]    __Result=0x00000000
[21:53:34.614]  </debugvars>
[21:53:34.614]  
[21:53:34.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:53:34.614]    <block atomic="false" info="">
[21:53:34.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:53:34.614]        // -> [isSWJ <= 0x00000001]
[21:53:34.614]      __var hasDormant = __protocol & 0x00020000;
[21:53:34.616]        // -> [hasDormant <= 0x00000000]
[21:53:34.616]      __var protType   = __protocol & 0x0000FFFF;
[21:53:34.616]        // -> [protType <= 0x00000002]
[21:53:34.616]    </block>
[21:53:34.616]    <control if="protType == 1" while="" timeout="0" info="">
[21:53:34.616]      // if-block "protType == 1"
[21:53:34.616]        // =>  FALSE
[21:53:34.616]      // skip if-block "protType == 1"
[21:53:34.616]    </control>
[21:53:34.616]    <control if="protType == 2" while="" timeout="0" info="">
[21:53:34.616]      // if-block "protType == 2"
[21:53:34.617]        // =>  TRUE
[21:53:34.617]      <control if="isSWJ" while="" timeout="0" info="">
[21:53:34.617]        // if-block "isSWJ"
[21:53:34.617]          // =>  TRUE
[21:53:34.617]        <control if="hasDormant" while="" timeout="0" info="">
[21:53:34.617]          // if-block "hasDormant"
[21:53:34.617]            // =>  FALSE
[21:53:34.617]          // skip if-block "hasDormant"
[21:53:34.617]        </control>
[21:53:34.618]        <control if="!hasDormant" while="" timeout="0" info="">
[21:53:34.618]          // if-block "!hasDormant"
[21:53:34.618]            // =>  TRUE
[21:53:34.618]          <block atomic="false" info="">
[21:53:34.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:53:34.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:34.618]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:53:34.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:53:34.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:53:34.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:34.623]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:53:34.626]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:53:34.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:53:34.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:34.626]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:53:34.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:53:34.630]          </block>
[21:53:34.630]          // end if-block "!hasDormant"
[21:53:34.630]        </control>
[21:53:34.630]        // end if-block "isSWJ"
[21:53:34.630]      </control>
[21:53:34.630]      <control if="!isSWJ" while="" timeout="0" info="">
[21:53:34.630]        // if-block "!isSWJ"
[21:53:34.630]          // =>  FALSE
[21:53:34.630]        // skip if-block "!isSWJ"
[21:53:34.630]      </control>
[21:53:34.630]      <block atomic="false" info="">
[21:53:34.630]        ReadDP(0x0);
[21:53:34.630]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:53:34.630]      </block>
[21:53:34.630]      // end if-block "protType == 2"
[21:53:34.630]    </control>
[21:53:34.630]  </sequence>
[21:53:34.630]  
[21:53:34.635]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:53:34.635]  
[21:53:34.635]  <debugvars>
[21:53:34.635]    // Pre-defined
[21:53:34.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:34.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:34.636]    __dp=0x00000000
[21:53:34.636]    __ap=0x00000000
[21:53:34.636]    __traceout=0x00000000      (Trace Disabled)
[21:53:34.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:34.636]    __FlashAddr=0x00000000
[21:53:34.636]    __FlashLen=0x00000000
[21:53:34.636]    __FlashArg=0x00000000
[21:53:34.636]    __FlashOp=0x00000000
[21:53:34.636]    __Result=0x00000000
[21:53:34.636]  </debugvars>
[21:53:34.636]  
[21:53:34.636]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:53:34.636]    <block atomic="false" info="">
[21:53:34.636]      __var SW_DP_ABORT       = 0x0;
[21:53:34.636]        // -> [SW_DP_ABORT <= 0x00000000]
[21:53:34.636]      __var DP_CTRL_STAT      = 0x4;
[21:53:34.636]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:53:34.636]      __var DP_SELECT         = 0x8;
[21:53:34.636]        // -> [DP_SELECT <= 0x00000008]
[21:53:34.636]      __var powered_down      = 0;
[21:53:34.638]        // -> [powered_down <= 0x00000000]
[21:53:34.638]      WriteDP(DP_SELECT, 0x00000000);
[21:53:34.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:53:34.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:53:34.639]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:53:34.639]        // -> [powered_down <= 0x00000001]
[21:53:34.639]    </block>
[21:53:34.639]    <control if="powered_down" while="" timeout="0" info="">
[21:53:34.639]      // if-block "powered_down"
[21:53:34.639]        // =>  TRUE
[21:53:34.639]      <block atomic="false" info="">
[21:53:34.639]        Message(0, "Debug/System power-up request sent");
[21:53:34.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:53:34.642]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:53:34.642]      </block>
[21:53:34.642]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:53:34.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.646]        // while-condition  =>  TRUE
[21:53:34.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.649]        // while-condition  =>  TRUE
[21:53:34.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.651]        // while-condition  =>  TRUE
[21:53:34.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.651]        // while-condition  =>  TRUE
[21:53:34.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.651]        // while-condition  =>  TRUE
[21:53:34.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.655]        // while-condition  =>  TRUE
[21:53:34.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.657]        // while-condition  =>  TRUE
[21:53:34.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.659]        // while-condition  =>  TRUE
[21:53:34.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.660]        // while-condition  =>  TRUE
[21:53:34.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.660]        // while-condition  =>  TRUE
[21:53:34.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.663]        // while-condition  =>  TRUE
[21:53:34.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.666]        // while-condition  =>  TRUE
[21:53:34.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.668]        // while-condition  =>  TRUE
[21:53:34.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.668]        // while-condition  =>  TRUE
[21:53:34.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.672]        // while-condition  =>  TRUE
[21:53:34.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.673]        // while-condition  =>  TRUE
[21:53:34.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.673]        // while-condition  =>  TRUE
[21:53:34.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.676]        // while-condition  =>  TRUE
[21:53:34.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.676]        // while-condition  =>  TRUE
[21:53:34.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.680]        // while-condition  =>  TRUE
[21:53:34.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.680]        // while-condition  =>  TRUE
[21:53:34.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.684]        // while-condition  =>  TRUE
[21:53:34.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.686]        // while-condition  =>  TRUE
[21:53:34.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.688]        // while-condition  =>  TRUE
[21:53:34.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.688]        // while-condition  =>  TRUE
[21:53:34.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.688]        // while-condition  =>  TRUE
[21:53:34.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.692]        // while-condition  =>  TRUE
[21:53:34.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.692]        // while-condition  =>  TRUE
[21:53:34.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.696]        // while-condition  =>  TRUE
[21:53:34.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.696]        // while-condition  =>  TRUE
[21:53:34.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.696]        // while-condition  =>  TRUE
[21:53:34.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.700]        // while-condition  =>  TRUE
[21:53:34.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.704]        // while-condition  =>  TRUE
[21:53:34.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.704]        // while-condition  =>  TRUE
[21:53:34.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.708]        // while-condition  =>  TRUE
[21:53:34.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.710]        // while-condition  =>  TRUE
[21:53:34.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.712]        // while-condition  =>  TRUE
[21:53:34.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.713]        // while-condition  =>  TRUE
[21:53:34.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.717]        // while-condition  =>  TRUE
[21:53:34.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.721]        // while-condition  =>  TRUE
[21:53:34.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.723]        // while-condition  =>  TRUE
[21:53:34.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.725]        // while-condition  =>  TRUE
[21:53:34.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.729]        // while-condition  =>  TRUE
[21:53:34.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.729]        // while-condition  =>  TRUE
[21:53:34.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.737]        // while-condition  =>  TRUE
[21:53:34.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.741]        // while-condition  =>  TRUE
[21:53:34.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.741]        // while-condition  =>  TRUE
[21:53:34.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.745]        // while-condition  =>  TRUE
[21:53:34.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.746]        // while-condition  =>  TRUE
[21:53:34.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.748]        // while-condition  =>  TRUE
[21:53:34.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.750]        // while-condition  =>  TRUE
[21:53:34.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.750]        // while-condition  =>  TRUE
[21:53:34.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.753]        // while-condition  =>  TRUE
[21:53:34.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.753]        // while-condition  =>  TRUE
[21:53:34.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.753]        // while-condition  =>  TRUE
[21:53:34.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.759]        // while-condition  =>  TRUE
[21:53:34.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.761]        // while-condition  =>  TRUE
[21:53:34.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.762]        // while-condition  =>  TRUE
[21:53:34.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.762]        // while-condition  =>  TRUE
[21:53:34.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.767]        // while-condition  =>  TRUE
[21:53:34.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.767]        // while-condition  =>  TRUE
[21:53:34.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.770]        // while-condition  =>  TRUE
[21:53:34.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.770]        // while-condition  =>  TRUE
[21:53:34.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.774]        // while-condition  =>  TRUE
[21:53:34.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.774]        // while-condition  =>  TRUE
[21:53:34.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.774]        // while-condition  =>  TRUE
[21:53:34.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.779]        // while-condition  =>  TRUE
[21:53:34.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.779]        // while-condition  =>  TRUE
[21:53:34.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.783]        // while-condition  =>  TRUE
[21:53:34.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.786]        // while-condition  =>  TRUE
[21:53:34.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.786]        // while-condition  =>  TRUE
[21:53:34.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.786]        // while-condition  =>  TRUE
[21:53:34.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.790]        // while-condition  =>  TRUE
[21:53:34.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.790]        // while-condition  =>  TRUE
[21:53:34.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.794]        // while-condition  =>  TRUE
[21:53:34.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.796]        // while-condition  =>  TRUE
[21:53:34.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.798]        // while-condition  =>  TRUE
[21:53:34.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.798]        // while-condition  =>  TRUE
[21:53:34.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.798]        // while-condition  =>  TRUE
[21:53:34.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.803]        // while-condition  =>  TRUE
[21:53:34.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.807]        // while-condition  =>  TRUE
[21:53:34.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.807]        // while-condition  =>  TRUE
[21:53:34.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.811]        // while-condition  =>  TRUE
[21:53:34.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.811]        // while-condition  =>  TRUE
[21:53:34.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.811]        // while-condition  =>  TRUE
[21:53:34.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.815]        // while-condition  =>  TRUE
[21:53:34.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.816]        // while-condition  =>  TRUE
[21:53:34.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.819]        // while-condition  =>  TRUE
[21:53:34.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.821]        // while-condition  =>  TRUE
[21:53:34.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.823]        // while-condition  =>  TRUE
[21:53:34.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.827]        // while-condition  =>  TRUE
[21:53:34.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.827]        // while-condition  =>  TRUE
[21:53:34.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.827]        // while-condition  =>  TRUE
[21:53:34.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.832]        // while-condition  =>  TRUE
[21:53:34.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.832]        // while-condition  =>  TRUE
[21:53:34.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.835]        // while-condition  =>  TRUE
[21:53:34.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.837]        // while-condition  =>  TRUE
[21:53:34.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.839]        // while-condition  =>  TRUE
[21:53:34.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.839]        // while-condition  =>  TRUE
[21:53:34.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.839]        // while-condition  =>  TRUE
[21:53:34.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.843]        // while-condition  =>  TRUE
[21:53:34.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.846]        // while-condition  =>  TRUE
[21:53:34.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.848]        // while-condition  =>  TRUE
[21:53:34.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.848]        // while-condition  =>  TRUE
[21:53:34.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.852]        // while-condition  =>  TRUE
[21:53:34.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.852]        // while-condition  =>  TRUE
[21:53:34.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.856]        // while-condition  =>  TRUE
[21:53:34.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.856]        // while-condition  =>  TRUE
[21:53:34.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.856]        // while-condition  =>  TRUE
[21:53:34.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.860]        // while-condition  =>  TRUE
[21:53:34.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.860]        // while-condition  =>  TRUE
[21:53:34.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.864]        // while-condition  =>  TRUE
[21:53:34.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.864]        // while-condition  =>  TRUE
[21:53:34.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.868]        // while-condition  =>  TRUE
[21:53:34.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.868]        // while-condition  =>  TRUE
[21:53:34.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.868]        // while-condition  =>  TRUE
[21:53:34.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.872]        // while-condition  =>  TRUE
[21:53:34.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.876]        // while-condition  =>  TRUE
[21:53:34.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.876]        // while-condition  =>  TRUE
[21:53:34.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.880]        // while-condition  =>  TRUE
[21:53:34.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.880]        // while-condition  =>  TRUE
[21:53:34.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.884]        // while-condition  =>  TRUE
[21:53:34.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.884]        // while-condition  =>  TRUE
[21:53:34.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.888]        // while-condition  =>  TRUE
[21:53:34.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.888]        // while-condition  =>  TRUE
[21:53:34.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.892]        // while-condition  =>  TRUE
[21:53:34.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.892]        // while-condition  =>  TRUE
[21:53:34.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.892]        // while-condition  =>  TRUE
[21:53:34.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.897]        // while-condition  =>  TRUE
[21:53:34.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.899]        // while-condition  =>  TRUE
[21:53:34.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.901]        // while-condition  =>  TRUE
[21:53:34.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.902]        // while-condition  =>  TRUE
[21:53:34.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.904]        // while-condition  =>  TRUE
[21:53:34.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.908]        // while-condition  =>  TRUE
[21:53:34.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.908]        // while-condition  =>  TRUE
[21:53:34.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.908]        // while-condition  =>  TRUE
[21:53:34.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.912]        // while-condition  =>  TRUE
[21:53:34.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.912]        // while-condition  =>  TRUE
[21:53:34.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.916]        // while-condition  =>  TRUE
[21:53:34.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.919]        // while-condition  =>  TRUE
[21:53:34.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.919]        // while-condition  =>  TRUE
[21:53:34.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.921]        // while-condition  =>  TRUE
[21:53:34.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.921]        // while-condition  =>  TRUE
[21:53:34.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.925]        // while-condition  =>  TRUE
[21:53:34.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.929]        // while-condition  =>  TRUE
[21:53:34.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.931]        // while-condition  =>  TRUE
[21:53:34.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.931]        // while-condition  =>  TRUE
[21:53:34.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.933]        // while-condition  =>  TRUE
[21:53:34.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.937]        // while-condition  =>  TRUE
[21:53:34.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.938]        // while-condition  =>  TRUE
[21:53:34.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.939]        // while-condition  =>  TRUE
[21:53:34.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.941]        // while-condition  =>  TRUE
[21:53:34.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.941]        // while-condition  =>  TRUE
[21:53:34.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.945]        // while-condition  =>  TRUE
[21:53:34.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.945]        // while-condition  =>  TRUE
[21:53:34.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.945]        // while-condition  =>  TRUE
[21:53:34.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.949]        // while-condition  =>  TRUE
[21:53:34.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.949]        // while-condition  =>  TRUE
[21:53:34.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.953]        // while-condition  =>  TRUE
[21:53:34.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.956]        // while-condition  =>  TRUE
[21:53:34.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.956]        // while-condition  =>  TRUE
[21:53:34.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.959]        // while-condition  =>  TRUE
[21:53:34.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.959]        // while-condition  =>  TRUE
[21:53:34.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.962]        // while-condition  =>  TRUE
[21:53:34.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.966]        // while-condition  =>  TRUE
[21:53:34.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.966]        // while-condition  =>  TRUE
[21:53:34.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.968]        // while-condition  =>  TRUE
[21:53:34.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.970]        // while-condition  =>  TRUE
[21:53:34.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.970]        // while-condition  =>  TRUE
[21:53:34.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.974]        // while-condition  =>  TRUE
[21:53:34.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.974]        // while-condition  =>  TRUE
[21:53:34.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.978]        // while-condition  =>  TRUE
[21:53:34.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.980]        // while-condition  =>  TRUE
[21:53:34.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.982]        // while-condition  =>  TRUE
[21:53:34.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.983]        // while-condition  =>  TRUE
[21:53:34.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.986]        // while-condition  =>  TRUE
[21:53:34.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.988]        // while-condition  =>  TRUE
[21:53:34.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.990]        // while-condition  =>  TRUE
[21:53:34.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.991]        // while-condition  =>  TRUE
[21:53:34.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.994]        // while-condition  =>  TRUE
[21:53:34.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.995]        // while-condition  =>  TRUE
[21:53:34.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.998]        // while-condition  =>  TRUE
[21:53:34.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:34.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:34.999]        // while-condition  =>  TRUE
[21:53:34.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.000]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.000]        // while-condition  =>  TRUE
[21:53:35.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.002]        // while-condition  =>  TRUE
[21:53:35.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.004]        // while-condition  =>  TRUE
[21:53:35.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.006]        // while-condition  =>  TRUE
[21:53:35.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.007]        // while-condition  =>  TRUE
[21:53:35.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.010]        // while-condition  =>  TRUE
[21:53:35.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.010]        // while-condition  =>  TRUE
[21:53:35.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.014]        // while-condition  =>  TRUE
[21:53:35.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.015]        // while-condition  =>  TRUE
[21:53:35.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.018]        // while-condition  =>  TRUE
[21:53:35.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.019]        // while-condition  =>  TRUE
[21:53:35.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.021]        // while-condition  =>  TRUE
[21:53:35.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.022]        // while-condition  =>  TRUE
[21:53:35.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.024]        // while-condition  =>  TRUE
[21:53:35.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.026]        // while-condition  =>  TRUE
[21:53:35.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.027]        // while-condition  =>  TRUE
[21:53:35.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.030]        // while-condition  =>  TRUE
[21:53:35.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.032]        // while-condition  =>  TRUE
[21:53:35.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.034]        // while-condition  =>  TRUE
[21:53:35.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.035]        // while-condition  =>  TRUE
[21:53:35.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.037]        // while-condition  =>  TRUE
[21:53:35.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.038]        // while-condition  =>  TRUE
[21:53:35.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.038]        // while-condition  =>  TRUE
[21:53:35.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.042]        // while-condition  =>  TRUE
[21:53:35.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.042]        // while-condition  =>  TRUE
[21:53:35.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.046]        // while-condition  =>  TRUE
[21:53:35.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.046]        // while-condition  =>  TRUE
[21:53:35.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.050]        // while-condition  =>  TRUE
[21:53:35.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.051]        // while-condition  =>  TRUE
[21:53:35.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.051]        // while-condition  =>  TRUE
[21:53:35.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.055]        // while-condition  =>  TRUE
[21:53:35.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.056]        // while-condition  =>  TRUE
[21:53:35.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.056]        // while-condition  =>  TRUE
[21:53:35.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.059]        // while-condition  =>  TRUE
[21:53:35.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.059]        // while-condition  =>  TRUE
[21:53:35.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.063]        // while-condition  =>  TRUE
[21:53:35.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.063]        // while-condition  =>  TRUE
[21:53:35.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.063]        // while-condition  =>  TRUE
[21:53:35.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.067]        // while-condition  =>  TRUE
[21:53:35.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.070]        // while-condition  =>  TRUE
[21:53:35.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.071]        // while-condition  =>  TRUE
[21:53:35.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.073]        // while-condition  =>  TRUE
[21:53:35.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.073]        // while-condition  =>  TRUE
[21:53:35.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.075]        // while-condition  =>  TRUE
[21:53:35.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.075]        // while-condition  =>  TRUE
[21:53:35.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.081]        // while-condition  =>  TRUE
[21:53:35.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.081]        // while-condition  =>  TRUE
[21:53:35.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.084]        // while-condition  =>  TRUE
[21:53:35.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.086]        // while-condition  =>  TRUE
[21:53:35.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.088]        // while-condition  =>  TRUE
[21:53:35.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.088]        // while-condition  =>  TRUE
[21:53:35.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.092]        // while-condition  =>  TRUE
[21:53:35.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.093]        // while-condition  =>  TRUE
[21:53:35.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.096]        // while-condition  =>  TRUE
[21:53:35.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.098]        // while-condition  =>  TRUE
[21:53:35.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.099]        // while-condition  =>  TRUE
[21:53:35.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.101]        // while-condition  =>  TRUE
[21:53:35.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.101]        // while-condition  =>  TRUE
[21:53:35.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.105]        // while-condition  =>  TRUE
[21:53:35.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.107]        // while-condition  =>  TRUE
[21:53:35.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.109]        // while-condition  =>  TRUE
[21:53:35.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.112]        // while-condition  =>  TRUE
[21:53:35.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.114]        // while-condition  =>  TRUE
[21:53:35.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.114]        // while-condition  =>  TRUE
[21:53:35.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.117]        // while-condition  =>  TRUE
[21:53:35.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.117]        // while-condition  =>  TRUE
[21:53:35.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.121]        // while-condition  =>  TRUE
[21:53:35.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.121]        // while-condition  =>  TRUE
[21:53:35.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.125]        // while-condition  =>  TRUE
[21:53:35.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.125]        // while-condition  =>  TRUE
[21:53:35.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.128]        // while-condition  =>  TRUE
[21:53:35.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.130]        // while-condition  =>  TRUE
[21:53:35.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.133]        // while-condition  =>  TRUE
[21:53:35.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.134]        // while-condition  =>  TRUE
[21:53:35.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.134]        // while-condition  =>  TRUE
[21:53:35.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.137]        // while-condition  =>  TRUE
[21:53:35.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.137]        // while-condition  =>  TRUE
[21:53:35.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.141]        // while-condition  =>  TRUE
[21:53:35.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.141]        // while-condition  =>  TRUE
[21:53:35.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.141]        // while-condition  =>  TRUE
[21:53:35.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.145]        // while-condition  =>  TRUE
[21:53:35.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.148]        // while-condition  =>  TRUE
[21:53:35.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.149]        // while-condition  =>  TRUE
[21:53:35.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.149]        // while-condition  =>  TRUE
[21:53:35.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.153]        // while-condition  =>  TRUE
[21:53:35.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.153]        // while-condition  =>  TRUE
[21:53:35.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.157]        // while-condition  =>  TRUE
[21:53:35.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.160]        // while-condition  =>  TRUE
[21:53:35.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.162]        // while-condition  =>  TRUE
[21:53:35.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.162]        // while-condition  =>  TRUE
[21:53:35.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.162]        // while-condition  =>  TRUE
[21:53:35.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.166]        // while-condition  =>  TRUE
[21:53:35.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.166]        // while-condition  =>  TRUE
[21:53:35.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.170]        // while-condition  =>  TRUE
[21:53:35.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.170]        // while-condition  =>  TRUE
[21:53:35.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.174]        // while-condition  =>  TRUE
[21:53:35.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.174]        // while-condition  =>  TRUE
[21:53:35.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.178]        // while-condition  =>  TRUE
[21:53:35.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.178]        // while-condition  =>  TRUE
[21:53:35.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.178]        // while-condition  =>  TRUE
[21:53:35.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.182]        // while-condition  =>  TRUE
[21:53:35.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.182]        // while-condition  =>  TRUE
[21:53:35.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.186]        // while-condition  =>  TRUE
[21:53:35.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.186]        // while-condition  =>  TRUE
[21:53:35.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.190]        // while-condition  =>  TRUE
[21:53:35.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.194]        // while-condition  =>  TRUE
[21:53:35.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.195]        // while-condition  =>  TRUE
[21:53:35.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.197]        // while-condition  =>  TRUE
[21:53:35.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.198]        // while-condition  =>  TRUE
[21:53:35.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.198]        // while-condition  =>  TRUE
[21:53:35.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.202]        // while-condition  =>  TRUE
[21:53:35.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.202]        // while-condition  =>  TRUE
[21:53:35.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.202]        // while-condition  =>  TRUE
[21:53:35.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.206]        // while-condition  =>  TRUE
[21:53:35.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.214]        // while-condition  =>  TRUE
[21:53:35.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.214]        // while-condition  =>  TRUE
[21:53:35.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.214]        // while-condition  =>  TRUE
[21:53:35.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.220]        // while-condition  =>  TRUE
[21:53:35.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.220]        // while-condition  =>  TRUE
[21:53:35.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.223]        // while-condition  =>  TRUE
[21:53:35.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.223]        // while-condition  =>  TRUE
[21:53:35.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.227]        // while-condition  =>  TRUE
[21:53:35.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.227]        // while-condition  =>  TRUE
[21:53:35.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.231]        // while-condition  =>  TRUE
[21:53:35.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.231]        // while-condition  =>  TRUE
[21:53:35.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.235]        // while-condition  =>  TRUE
[21:53:35.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.235]        // while-condition  =>  TRUE
[21:53:35.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.239]        // while-condition  =>  TRUE
[21:53:35.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.239]        // while-condition  =>  TRUE
[21:53:35.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.243]        // while-condition  =>  TRUE
[21:53:35.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.243]        // while-condition  =>  TRUE
[21:53:35.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.247]        // while-condition  =>  TRUE
[21:53:35.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.247]        // while-condition  =>  TRUE
[21:53:35.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.251]        // while-condition  =>  TRUE
[21:53:35.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.251]        // while-condition  =>  TRUE
[21:53:35.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.255]        // while-condition  =>  TRUE
[21:53:35.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.255]        // while-condition  =>  TRUE
[21:53:35.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.255]        // while-condition  =>  TRUE
[21:53:35.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.259]        // while-condition  =>  TRUE
[21:53:35.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.259]        // while-condition  =>  TRUE
[21:53:35.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.263]        // while-condition  =>  TRUE
[21:53:35.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.269]        // while-condition  =>  TRUE
[21:53:35.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.271]        // while-condition  =>  TRUE
[21:53:35.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.271]        // while-condition  =>  TRUE
[21:53:35.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.271]        // while-condition  =>  TRUE
[21:53:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.275]        // while-condition  =>  TRUE
[21:53:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.275]        // while-condition  =>  TRUE
[21:53:35.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.280]        // while-condition  =>  TRUE
[21:53:35.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.280]        // while-condition  =>  TRUE
[21:53:35.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.283]        // while-condition  =>  TRUE
[21:53:35.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.283]        // while-condition  =>  TRUE
[21:53:35.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.287]        // while-condition  =>  TRUE
[21:53:35.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.287]        // while-condition  =>  TRUE
[21:53:35.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.287]        // while-condition  =>  TRUE
[21:53:35.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.291]        // while-condition  =>  TRUE
[21:53:35.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.293]        // while-condition  =>  TRUE
[21:53:35.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.295]        // while-condition  =>  TRUE
[21:53:35.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.295]        // while-condition  =>  TRUE
[21:53:35.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.299]        // while-condition  =>  TRUE
[21:53:35.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.299]        // while-condition  =>  TRUE
[21:53:35.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.303]        // while-condition  =>  TRUE
[21:53:35.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.303]        // while-condition  =>  TRUE
[21:53:35.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.303]        // while-condition  =>  TRUE
[21:53:35.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.307]        // while-condition  =>  TRUE
[21:53:35.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.307]        // while-condition  =>  TRUE
[21:53:35.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.311]        // while-condition  =>  TRUE
[21:53:35.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.311]        // while-condition  =>  TRUE
[21:53:35.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.315]        // while-condition  =>  TRUE
[21:53:35.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.319]        // while-condition  =>  TRUE
[21:53:35.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.319]        // while-condition  =>  TRUE
[21:53:35.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.319]        // while-condition  =>  TRUE
[21:53:35.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.323]        // while-condition  =>  TRUE
[21:53:35.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.323]        // while-condition  =>  TRUE
[21:53:35.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.327]        // while-condition  =>  TRUE
[21:53:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.327]        // while-condition  =>  TRUE
[21:53:35.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.331]        // while-condition  =>  TRUE
[21:53:35.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.331]        // while-condition  =>  TRUE
[21:53:35.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.335]        // while-condition  =>  TRUE
[21:53:35.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.335]        // while-condition  =>  TRUE
[21:53:35.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.339]        // while-condition  =>  TRUE
[21:53:35.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.339]        // while-condition  =>  TRUE
[21:53:35.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.343]        // while-condition  =>  TRUE
[21:53:35.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.343]        // while-condition  =>  TRUE
[21:53:35.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.347]        // while-condition  =>  TRUE
[21:53:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.347]        // while-condition  =>  TRUE
[21:53:35.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.351]        // while-condition  =>  TRUE
[21:53:35.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.351]        // while-condition  =>  TRUE
[21:53:35.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.355]        // while-condition  =>  TRUE
[21:53:35.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.355]        // while-condition  =>  TRUE
[21:53:35.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.359]        // while-condition  =>  TRUE
[21:53:35.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.359]        // while-condition  =>  TRUE
[21:53:35.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.363]        // while-condition  =>  TRUE
[21:53:35.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.365]        // while-condition  =>  TRUE
[21:53:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.367]        // while-condition  =>  TRUE
[21:53:35.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.368]        // while-condition  =>  TRUE
[21:53:35.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.368]        // while-condition  =>  TRUE
[21:53:35.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.372]        // while-condition  =>  TRUE
[21:53:35.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.372]        // while-condition  =>  TRUE
[21:53:35.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.376]        // while-condition  =>  TRUE
[21:53:35.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.379]        // while-condition  =>  TRUE
[21:53:35.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.381]        // while-condition  =>  TRUE
[21:53:35.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.381]        // while-condition  =>  TRUE
[21:53:35.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.385]        // while-condition  =>  TRUE
[21:53:35.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.389]        // while-condition  =>  TRUE
[21:53:35.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.389]        // while-condition  =>  TRUE
[21:53:35.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.393]        // while-condition  =>  TRUE
[21:53:35.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.393]        // while-condition  =>  TRUE
[21:53:35.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.397]        // while-condition  =>  TRUE
[21:53:35.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.397]        // while-condition  =>  TRUE
[21:53:35.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.401]        // while-condition  =>  TRUE
[21:53:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.404]        // while-condition  =>  TRUE
[21:53:35.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.405]        // while-condition  =>  TRUE
[21:53:35.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.407]        // while-condition  =>  TRUE
[21:53:35.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.407]        // while-condition  =>  TRUE
[21:53:35.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.409]        // while-condition  =>  TRUE
[21:53:35.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.409]        // while-condition  =>  TRUE
[21:53:35.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.413]        // while-condition  =>  TRUE
[21:53:35.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.413]        // while-condition  =>  TRUE
[21:53:35.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.417]        // while-condition  =>  TRUE
[21:53:35.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.421]        // while-condition  =>  TRUE
[21:53:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.421]        // while-condition  =>  TRUE
[21:53:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.425]        // while-condition  =>  TRUE
[21:53:35.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.425]        // while-condition  =>  TRUE
[21:53:35.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.428]        // while-condition  =>  TRUE
[21:53:35.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.430]        // while-condition  =>  TRUE
[21:53:35.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.430]        // while-condition  =>  TRUE
[21:53:35.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.430]        // while-condition  =>  TRUE
[21:53:35.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.434]        // while-condition  =>  TRUE
[21:53:35.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.434]        // while-condition  =>  TRUE
[21:53:35.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.439]        // while-condition  =>  TRUE
[21:53:35.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.440]        // while-condition  =>  TRUE
[21:53:35.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.442]        // while-condition  =>  TRUE
[21:53:35.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.444]        // while-condition  =>  TRUE
[21:53:35.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.445]        // while-condition  =>  TRUE
[21:53:35.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.445]        // while-condition  =>  TRUE
[21:53:35.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.445]        // while-condition  =>  TRUE
[21:53:35.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.450]        // while-condition  =>  TRUE
[21:53:35.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.452]        // while-condition  =>  TRUE
[21:53:35.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.454]        // while-condition  =>  TRUE
[21:53:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.454]        // while-condition  =>  TRUE
[21:53:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.454]        // while-condition  =>  TRUE
[21:53:35.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.459]        // while-condition  =>  TRUE
[21:53:35.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.459]        // while-condition  =>  TRUE
[21:53:35.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.462]        // while-condition  =>  TRUE
[21:53:35.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.462]        // while-condition  =>  TRUE
[21:53:35.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.469]        // while-condition  =>  TRUE
[21:53:35.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.471]        // while-condition  =>  TRUE
[21:53:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.471]        // while-condition  =>  TRUE
[21:53:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.474]        // while-condition  =>  TRUE
[21:53:35.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.476]        // while-condition  =>  TRUE
[21:53:35.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.479]        // while-condition  =>  TRUE
[21:53:35.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.481]        // while-condition  =>  TRUE
[21:53:35.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.482]        // while-condition  =>  TRUE
[21:53:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.484]        // while-condition  =>  TRUE
[21:53:35.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.484]        // while-condition  =>  TRUE
[21:53:35.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.487]        // while-condition  =>  TRUE
[21:53:35.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.487]        // while-condition  =>  TRUE
[21:53:35.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.487]        // while-condition  =>  TRUE
[21:53:35.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.491]        // while-condition  =>  TRUE
[21:53:35.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.491]        // while-condition  =>  TRUE
[21:53:35.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.495]        // while-condition  =>  TRUE
[21:53:35.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.499]        // while-condition  =>  TRUE
[21:53:35.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.499]        // while-condition  =>  TRUE
[21:53:35.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.499]        // while-condition  =>  TRUE
[21:53:35.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.503]        // while-condition  =>  TRUE
[21:53:35.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.506]        // while-condition  =>  TRUE
[21:53:35.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.508]        // while-condition  =>  TRUE
[21:53:35.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.508]        // while-condition  =>  TRUE
[21:53:35.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.508]        // while-condition  =>  TRUE
[21:53:35.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.512]        // while-condition  =>  TRUE
[21:53:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.512]        // while-condition  =>  TRUE
[21:53:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.516]        // while-condition  =>  TRUE
[21:53:35.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.516]        // while-condition  =>  TRUE
[21:53:35.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.520]        // while-condition  =>  TRUE
[21:53:35.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.520]        // while-condition  =>  TRUE
[21:53:35.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.524]        // while-condition  =>  TRUE
[21:53:35.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.524]        // while-condition  =>  TRUE
[21:53:35.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.528]        // while-condition  =>  TRUE
[21:53:35.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.532]        // while-condition  =>  TRUE
[21:53:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.532]        // while-condition  =>  TRUE
[21:53:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.532]        // while-condition  =>  TRUE
[21:53:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.536]        // while-condition  =>  TRUE
[21:53:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.536]        // while-condition  =>  TRUE
[21:53:35.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.540]        // while-condition  =>  TRUE
[21:53:35.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.542]        // while-condition  =>  TRUE
[21:53:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.544]        // while-condition  =>  TRUE
[21:53:35.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.544]        // while-condition  =>  TRUE
[21:53:35.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.548]        // while-condition  =>  TRUE
[21:53:35.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.552]        // while-condition  =>  TRUE
[21:53:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.556]        // while-condition  =>  TRUE
[21:53:35.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.556]        // while-condition  =>  TRUE
[21:53:35.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.560]        // while-condition  =>  TRUE
[21:53:35.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.560]        // while-condition  =>  TRUE
[21:53:35.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.560]        // while-condition  =>  TRUE
[21:53:35.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.564]        // while-condition  =>  TRUE
[21:53:35.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.564]        // while-condition  =>  TRUE
[21:53:35.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.570]        // while-condition  =>  TRUE
[21:53:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.570]        // while-condition  =>  TRUE
[21:53:35.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.573]        // while-condition  =>  TRUE
[21:53:35.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.573]        // while-condition  =>  TRUE
[21:53:35.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.577]        // while-condition  =>  TRUE
[21:53:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.577]        // while-condition  =>  TRUE
[21:53:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.577]        // while-condition  =>  TRUE
[21:53:35.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.581]        // while-condition  =>  TRUE
[21:53:35.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.581]        // while-condition  =>  TRUE
[21:53:35.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.585]        // while-condition  =>  TRUE
[21:53:35.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.585]        // while-condition  =>  TRUE
[21:53:35.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.589]        // while-condition  =>  TRUE
[21:53:35.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.591]        // while-condition  =>  TRUE
[21:53:35.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.591]        // while-condition  =>  TRUE
[21:53:35.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.593]        // while-condition  =>  TRUE
[21:53:35.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.593]        // while-condition  =>  TRUE
[21:53:35.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.597]        // while-condition  =>  TRUE
[21:53:35.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.601]        // while-condition  =>  TRUE
[21:53:35.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.601]        // while-condition  =>  TRUE
[21:53:35.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.601]        // while-condition  =>  TRUE
[21:53:35.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.605]        // while-condition  =>  TRUE
[21:53:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.605]        // while-condition  =>  TRUE
[21:53:35.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.609]        // while-condition  =>  TRUE
[21:53:35.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.609]        // while-condition  =>  TRUE
[21:53:35.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.609]        // while-condition  =>  TRUE
[21:53:35.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.613]        // while-condition  =>  TRUE
[21:53:35.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.617]        // while-condition  =>  TRUE
[21:53:35.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.619]        // while-condition  =>  TRUE
[21:53:35.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.619]        // while-condition  =>  TRUE
[21:53:35.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.621]        // while-condition  =>  TRUE
[21:53:35.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.625]        // while-condition  =>  TRUE
[21:53:35.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.625]        // while-condition  =>  TRUE
[21:53:35.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.625]        // while-condition  =>  TRUE
[21:53:35.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:53:35.629]        // while-condition  =>  TRUE
[21:53:35.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:35.629]        // while  =>  TIMEOUT
[21:53:35.629]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:53:35.629]      </control>
[21:53:35.629]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:53:35.629]        // if-block "(__protocol & 0xFFFF) == 1"
[21:53:35.629]          // =>  FALSE
[21:53:35.629]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:53:35.629]      </control>
[21:53:35.629]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:53:35.629]        // if-block "(__protocol & 0xFFFF) == 2"
[21:53:35.629]          // =>  TRUE
[21:53:35.629]        <block atomic="false" info="">
[21:53:35.629]          Message(0, "executing SWD power up");
[21:53:35.633]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:53:35.633]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:53:35.633]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:53:35.637]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:53:35.637]        </block>
[21:53:35.637]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:53:35.637]      </control>
[21:53:35.637]      // end if-block "powered_down"
[21:53:35.637]    </control>
[21:53:35.637]    <block atomic="false" info="">
[21:53:35.637]      __var DEBUG_PORT_VAL    = 0;
[21:53:35.637]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:53:35.637]      __var ACCESS_POINT_VAL  = 0;
[21:53:35.637]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:53:35.637]      __ap = 1; 
[21:53:35.640]        // -> [__ap <= 0x00000001]
[21:53:35.640]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:53:35.654]  
[21:53:35.654]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[21:53:35.654]  
[21:53:35.658]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:53:35.658]    </block>
[21:53:35.658]  </sequence>
[21:53:35.658]  
[21:53:42.727]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:53:42.727]  
[21:53:42.727]  <debugvars>
[21:53:42.727]    // Pre-defined
[21:53:42.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:42.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:42.727]    __dp=0x00000000
[21:53:42.727]    __ap=0x00000000
[21:53:42.727]    __traceout=0x00000000      (Trace Disabled)
[21:53:42.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:42.727]    __FlashAddr=0x00000000
[21:53:42.727]    __FlashLen=0x00000000
[21:53:42.727]    __FlashArg=0x00000000
[21:53:42.727]    __FlashOp=0x00000000
[21:53:42.727]    __Result=0x00000000
[21:53:42.727]  </debugvars>
[21:53:42.727]  
[21:53:42.727]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:53:42.727]    <block atomic="false" info="">
[21:53:42.727]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:53:42.727]        // -> [isSWJ <= 0x00000001]
[21:53:42.727]      __var hasDormant = __protocol & 0x00020000;
[21:53:42.727]        // -> [hasDormant <= 0x00000000]
[21:53:42.727]      __var protType   = __protocol & 0x0000FFFF;
[21:53:42.727]        // -> [protType <= 0x00000002]
[21:53:42.727]    </block>
[21:53:42.727]    <control if="protType == 1" while="" timeout="0" info="">
[21:53:42.727]      // if-block "protType == 1"
[21:53:42.727]        // =>  FALSE
[21:53:42.727]      // skip if-block "protType == 1"
[21:53:42.731]    </control>
[21:53:42.731]    <control if="protType == 2" while="" timeout="0" info="">
[21:53:42.731]      // if-block "protType == 2"
[21:53:42.731]        // =>  TRUE
[21:53:42.731]      <control if="isSWJ" while="" timeout="0" info="">
[21:53:42.731]        // if-block "isSWJ"
[21:53:42.731]          // =>  TRUE
[21:53:42.731]        <control if="hasDormant" while="" timeout="0" info="">
[21:53:42.731]          // if-block "hasDormant"
[21:53:42.731]            // =>  FALSE
[21:53:42.731]          // skip if-block "hasDormant"
[21:53:42.731]        </control>
[21:53:42.731]        <control if="!hasDormant" while="" timeout="0" info="">
[21:53:42.731]          // if-block "!hasDormant"
[21:53:42.731]            // =>  TRUE
[21:53:42.731]          <block atomic="false" info="">
[21:53:42.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:53:42.731]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:42.731]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:53:42.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:53:42.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:53:42.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:42.736]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:53:42.743]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:53:42.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:53:42.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:42.743]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:53:42.749]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:53:42.749]          </block>
[21:53:42.749]          // end if-block "!hasDormant"
[21:53:42.749]        </control>
[21:53:42.749]        // end if-block "isSWJ"
[21:53:42.749]      </control>
[21:53:42.749]      <control if="!isSWJ" while="" timeout="0" info="">
[21:53:42.749]        // if-block "!isSWJ"
[21:53:42.749]          // =>  FALSE
[21:53:42.749]        // skip if-block "!isSWJ"
[21:53:42.749]      </control>
[21:53:42.749]      <block atomic="false" info="">
[21:53:42.749]        ReadDP(0x0);
[21:53:42.749]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:53:42.749]      </block>
[21:53:42.752]      // end if-block "protType == 2"
[21:53:42.752]    </control>
[21:53:42.752]  </sequence>
[21:53:42.752]  
[21:53:42.752]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:53:42.752]  
[21:53:42.752]  <debugvars>
[21:53:42.752]    // Pre-defined
[21:53:42.752]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:42.752]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:42.752]    __dp=0x00000000
[21:53:42.752]    __ap=0x00000000
[21:53:42.752]    __traceout=0x00000000      (Trace Disabled)
[21:53:42.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:42.752]    __FlashAddr=0x00000000
[21:53:42.756]    __FlashLen=0x00000000
[21:53:42.756]    __FlashArg=0x00000000
[21:53:42.756]    __FlashOp=0x00000000
[21:53:42.756]    __Result=0x00000000
[21:53:42.756]  </debugvars>
[21:53:42.756]  
[21:53:42.756]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:53:42.756]    <block atomic="false" info="">
[21:53:42.756]      __var SW_DP_ABORT       = 0x0;
[21:53:42.756]        // -> [SW_DP_ABORT <= 0x00000000]
[21:53:42.756]      __var DP_CTRL_STAT      = 0x4;
[21:53:42.756]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:53:42.756]      __var DP_SELECT         = 0x8;
[21:53:42.756]        // -> [DP_SELECT <= 0x00000008]
[21:53:42.756]      __var powered_down      = 0;
[21:53:42.756]        // -> [powered_down <= 0x00000000]
[21:53:42.756]      WriteDP(DP_SELECT, 0x00000000);
[21:53:42.760]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:53:42.760]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:53:42.760]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:53:42.760]        // -> [powered_down <= 0x00000001]
[21:53:42.762]    </block>
[21:53:42.762]    <control if="powered_down" while="" timeout="0" info="">
[21:53:42.762]      // if-block "powered_down"
[21:53:42.762]        // =>  TRUE
[21:53:42.762]      <block atomic="false" info="">
[21:53:42.762]        Message(0, "Debug/System power-up request sent");
[21:53:42.764]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:53:42.764]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:53:42.764]      </block>
[21:53:42.764]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:53:42.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:42.768]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:53:42.768]        // while-condition  =>  FALSE
[21:53:42.768]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:53:42.768]      </control>
[21:53:42.768]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:53:42.768]        // if-block "(__protocol & 0xFFFF) == 1"
[21:53:42.768]          // =>  FALSE
[21:53:42.768]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:53:42.768]      </control>
[21:53:42.768]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:53:42.768]        // if-block "(__protocol & 0xFFFF) == 2"
[21:53:42.768]          // =>  TRUE
[21:53:42.768]        <block atomic="false" info="">
[21:53:42.768]          Message(0, "executing SWD power up");
[21:53:42.772]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:53:42.775]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:53:42.775]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:53:42.776]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:53:42.776]        </block>
[21:53:42.776]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:53:42.776]      </control>
[21:53:42.777]      // end if-block "powered_down"
[21:53:42.777]    </control>
[21:53:42.777]    <block atomic="false" info="">
[21:53:42.777]      __var DEBUG_PORT_VAL    = 0;
[21:53:42.777]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:53:42.778]      __var ACCESS_POINT_VAL  = 0;
[21:53:42.778]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:53:42.778]      __ap = 1; 
[21:53:42.778]        // -> [__ap <= 0x00000001]
[21:53:42.778]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:53:42.780]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:53:42.780]      __ap = 4;
[21:53:42.780]        // -> [__ap <= 0x00000004]
[21:53:42.780]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:53:42.786]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:53:42.786]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:53:42.786]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:53:42.790]    </block>
[21:53:42.790]    <block atomic="false" info="">
[21:53:42.790]      __var nReset = 0x80;
[21:53:42.790]        // -> [nReset <= 0x00000080]
[21:53:42.790]      __var canReadPins = 0;
[21:53:42.790]        // -> [canReadPins <= 0x00000000]
[21:53:42.790]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:53:42.793]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:53:42.793]        // -> [canReadPins <= 0x00000001]
[21:53:42.793]    </block>
[21:53:42.793]    <control if="" while="1" timeout="200" info="">
[21:53:42.793]      // while "1"  (timeout="200")
[21:53:42.793]      // while-condition  =>  TRUE
[21:53:42.793]      // while "1"  (timeout="200")
[21:53:42.793]      // while-condition  =>  TRUE
[21:53:42.793]      // while "1"  (timeout="200")
[21:53:42.793]      // while-condition  =>  TRUE
[21:53:42.793]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.794]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.794]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.794]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.794]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.794]      // while "1"  (timeout="200")
[21:53:42.794]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.796]      // while-condition  =>  TRUE
[21:53:42.796]      // while "1"  (timeout="200")
[21:53:42.797]      // while-condition  =>  TRUE
[21:53:42.797]      // while "1"  (timeout="200")
[21:53:42.797]      // while-condition  =>  TRUE
[21:53:42.797]      // while "1"  (timeout="200")
[21:53:42.797]      // while-condition  =>  TRUE
[21:53:42.798]      // while "1"  (timeout="200")
[21:53:42.798]      // while-condition  =>  TRUE
[21:53:42.798]      // while "1"  (timeout="200")
[21:53:42.798]      // while-condition  =>  TRUE
[21:53:42.798]      // while "1"  (timeout="200")
[21:53:42.798]      // while-condition  =>  TRUE
[21:53:42.798]      // while "1"  (timeout="200")
[21:53:42.798]      // while-condition  =>  TRUE
[21:53:42.799]      // while "1"  (timeout="200")
[21:53:42.799]      // while-condition  =>  TRUE
[21:53:42.799]      // while "1"  (timeout="200")
[21:53:42.799]      // while-condition  =>  TRUE
[21:53:42.799]      // while "1"  (timeout="200")
[21:53:42.799]      // while-condition  =>  TRUE
[21:53:42.799]      // while "1"  (timeout="200")
[21:53:42.801]      // while-condition  =>  TRUE
[21:53:42.801]      // while "1"  (timeout="200")
[21:53:42.801]      // while  =>  TIMEOUT
[21:53:42.801]      // end while "1"
[21:53:42.801]    </control>
[21:53:42.801]    <control if="canReadPins" while="" timeout="0" info="">
[21:53:42.801]      // if-block "canReadPins"
[21:53:42.801]        // =>  TRUE
[21:53:42.801]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:53:42.801]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:53:42.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:53:42.803]        // while-condition  =>  FALSE
[21:53:42.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:53:42.803]      </control>
[21:53:42.803]      // end if-block "canReadPins"
[21:53:42.803]    </control>
[21:53:42.806]    <control if="!canReadPins" while="" timeout="0" info="">
[21:53:42.806]      // if-block "!canReadPins"
[21:53:42.806]        // =>  FALSE
[21:53:42.806]      // skip if-block "!canReadPins"
[21:53:42.806]    </control>
[21:53:42.806]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:53:42.806]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:53:42.807]        // =>  TRUE
[21:53:42.807]      <block atomic="false" info="">
[21:53:42.807]        WriteAP(0x00, 0x190008);
[21:53:42.809]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:53:42.809]        WriteAP(0xF0, 0x01);
[21:53:42.814]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:53:42.814]      </block>
[21:53:42.814]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:53:42.814]    </control>
[21:53:42.814]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:53:42.814]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:53:42.814]        // =>  FALSE
[21:53:42.814]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:53:42.814]    </control>
[21:53:42.814]    <block atomic="false" info="">
[21:53:42.814]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:53:42.818]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:53:42.818]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:53:42.818]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:53:42.818]      __ap = 0; //lets make sure we reset the access point selection
[21:53:42.818]        // -> [__ap <= 0x00000000]
[21:53:42.818]    </block>
[21:53:42.818]  </sequence>
[21:53:42.818]  
[21:53:42.838]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:53:42.838]  
[21:53:42.838]  <debugvars>
[21:53:42.838]    // Pre-defined
[21:53:42.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:42.838]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:42.838]    __dp=0x00000000
[21:53:42.838]    __ap=0x00000000
[21:53:42.838]    __traceout=0x00000000      (Trace Disabled)
[21:53:42.843]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:42.843]    __FlashAddr=0x00000000
[21:53:42.843]    __FlashLen=0x00000000
[21:53:42.843]    __FlashArg=0x00000000
[21:53:42.843]    __FlashOp=0x00000000
[21:53:42.843]    __Result=0x00000000
[21:53:42.843]  </debugvars>
[21:53:42.843]  
[21:53:42.843]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:53:42.843]    <block atomic="false" info="">
[21:53:42.843]      __var deviceID = 0;
[21:53:42.843]        // -> [deviceID <= 0x00000000]
[21:53:42.843]      __var version = 0;
[21:53:42.843]        // -> [version <= 0x00000000]
[21:53:42.843]      __var partNum = 0;
[21:53:42.843]        // -> [partNum <= 0x00000000]
[21:53:42.843]      __var manuf = 0;
[21:53:42.843]        // -> [manuf <= 0x00000000]
[21:53:42.843]      __var isMSPM0G1X0X_G3X0X = 0;
[21:53:42.843]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:53:42.843]      __var isProduction = 0;
[21:53:42.843]        // -> [isProduction <= 0x00000000]
[21:53:42.843]      __var continueId = 0;
[21:53:42.843]        // -> [continueId <= 0x00000000]
[21:53:42.843]      deviceID =   Read32(0x41C40004);
[21:53:42.850]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:53:42.850]        // -> [deviceID <= 0x2BB8802F]
[21:53:42.850]      version = deviceID >> 28;
[21:53:42.850]        // -> [version <= 0x00000002]
[21:53:42.850]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:53:42.851]        // -> [partNum <= 0x0000BB88]
[21:53:42.851]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:53:42.851]        // -> [manuf <= 0x00000017]
[21:53:42.851]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:53:42.851]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:53:42.851]      isProduction = (version > 0);
[21:53:42.851]        // -> [isProduction <= 0x00000001]
[21:53:42.851]    </block>
[21:53:42.851]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:53:42.851]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:53:42.851]        // =>  FALSE
[21:53:42.851]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:53:42.851]    </control>
[21:53:42.851]    <control if="continueId == 4" while="" timeout="0" info="">
[21:53:42.851]      // if-block "continueId == 4"
[21:53:42.851]        // =>  FALSE
[21:53:42.851]      // skip if-block "continueId == 4"
[21:53:42.851]    </control>
[21:53:42.851]    <control if="!isProduction" while="" timeout="0" info="">
[21:53:42.851]      // if-block "!isProduction"
[21:53:42.851]        // =>  FALSE
[21:53:42.851]      // skip if-block "!isProduction"
[21:53:42.851]    </control>
[21:53:42.851]  </sequence>
[21:53:42.851]  
[21:56:20.028]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:56:20.028]  
[21:56:20.028]  <debugvars>
[21:56:20.028]    // Pre-defined
[21:56:20.028]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:20.028]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:20.030]    __dp=0x00000000
[21:56:20.030]    __ap=0x00000000
[21:56:20.030]    __traceout=0x00000000      (Trace Disabled)
[21:56:20.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:20.030]    __FlashAddr=0x00000000
[21:56:20.030]    __FlashLen=0x00000000
[21:56:20.030]    __FlashArg=0x00000000
[21:56:20.030]    __FlashOp=0x00000000
[21:56:20.030]    __Result=0x00000000
[21:56:20.030]  </debugvars>
[21:56:20.031]  
[21:56:20.031]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:56:20.031]    <block atomic="false" info="">
[21:56:20.031]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:56:20.031]        // -> [isSWJ <= 0x00000001]
[21:56:20.031]      __var hasDormant = __protocol & 0x00020000;
[21:56:20.032]        // -> [hasDormant <= 0x00000000]
[21:56:20.032]      __var protType   = __protocol & 0x0000FFFF;
[21:56:20.032]        // -> [protType <= 0x00000002]
[21:56:20.032]    </block>
[21:56:20.032]    <control if="protType == 1" while="" timeout="0" info="">
[21:56:20.032]      // if-block "protType == 1"
[21:56:20.032]        // =>  FALSE
[21:56:20.032]      // skip if-block "protType == 1"
[21:56:20.032]    </control>
[21:56:20.032]    <control if="protType == 2" while="" timeout="0" info="">
[21:56:20.032]      // if-block "protType == 2"
[21:56:20.032]        // =>  TRUE
[21:56:20.032]      <control if="isSWJ" while="" timeout="0" info="">
[21:56:20.032]        // if-block "isSWJ"
[21:56:20.032]          // =>  TRUE
[21:56:20.032]        <control if="hasDormant" while="" timeout="0" info="">
[21:56:20.032]          // if-block "hasDormant"
[21:56:20.032]            // =>  FALSE
[21:56:20.032]          // skip if-block "hasDormant"
[21:56:20.032]        </control>
[21:56:20.032]        <control if="!hasDormant" while="" timeout="0" info="">
[21:56:20.032]          // if-block "!hasDormant"
[21:56:20.032]            // =>  TRUE
[21:56:20.032]          <block atomic="false" info="">
[21:56:20.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:56:20.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:20.035]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:56:20.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:56:20.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:56:20.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:20.038]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:56:20.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:56:20.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:56:20.038]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:56:20.042]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:56:20.042]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:56:20.042]          </block>
[21:56:20.042]          // end if-block "!hasDormant"
[21:56:20.042]        </control>
[21:56:20.042]        // end if-block "isSWJ"
[21:56:20.042]      </control>
[21:56:20.042]      <control if="!isSWJ" while="" timeout="0" info="">
[21:56:20.042]        // if-block "!isSWJ"
[21:56:20.042]          // =>  FALSE
[21:56:20.042]        // skip if-block "!isSWJ"
[21:56:20.042]      </control>
[21:56:20.042]      <block atomic="false" info="">
[21:56:20.042]        ReadDP(0x0);
[21:56:20.050]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:56:20.050]      </block>
[21:56:20.050]      // end if-block "protType == 2"
[21:56:20.050]    </control>
[21:56:20.050]  </sequence>
[21:56:20.050]  
[21:56:20.050]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:56:20.050]  
[21:56:20.050]  <debugvars>
[21:56:20.050]    // Pre-defined
[21:56:20.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:20.050]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:20.050]    __dp=0x00000000
[21:56:20.050]    __ap=0x00000000
[21:56:20.054]    __traceout=0x00000000      (Trace Disabled)
[21:56:20.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:20.054]    __FlashAddr=0x00000000
[21:56:20.054]    __FlashLen=0x00000000
[21:56:20.054]    __FlashArg=0x00000000
[21:56:20.054]    __FlashOp=0x00000000
[21:56:20.054]    __Result=0x00000000
[21:56:20.054]  </debugvars>
[21:56:20.054]  
[21:56:20.054]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:56:20.054]    <block atomic="false" info="">
[21:56:20.054]      __var SW_DP_ABORT       = 0x0;
[21:56:20.054]        // -> [SW_DP_ABORT <= 0x00000000]
[21:56:20.054]      __var DP_CTRL_STAT      = 0x4;
[21:56:20.054]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:56:20.054]      __var DP_SELECT         = 0x8;
[21:56:20.054]        // -> [DP_SELECT <= 0x00000008]
[21:56:20.054]      __var powered_down      = 0;
[21:56:20.054]        // -> [powered_down <= 0x00000000]
[21:56:20.054]      WriteDP(DP_SELECT, 0x00000000);
[21:56:20.057]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:56:20.057]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:56:20.058]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:56:20.058]        // -> [powered_down <= 0x00000001]
[21:56:20.058]    </block>
[21:56:20.058]    <control if="powered_down" while="" timeout="0" info="">
[21:56:20.058]      // if-block "powered_down"
[21:56:20.058]        // =>  TRUE
[21:56:20.058]      <block atomic="false" info="">
[21:56:20.058]        Message(0, "Debug/System power-up request sent");
[21:56:20.062]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:56:20.062]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:56:20.062]      </block>
[21:56:20.062]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:56:20.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:56:20.062]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:56:20.062]        // while-condition  =>  FALSE
[21:56:20.062]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:56:20.062]      </control>
[21:56:20.066]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:56:20.066]        // if-block "(__protocol & 0xFFFF) == 1"
[21:56:20.066]          // =>  FALSE
[21:56:20.066]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:56:20.066]      </control>
[21:56:20.066]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:56:20.066]        // if-block "(__protocol & 0xFFFF) == 2"
[21:56:20.066]          // =>  TRUE
[21:56:20.066]        <block atomic="false" info="">
[21:56:20.066]          Message(0, "executing SWD power up");
[21:56:20.068]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:56:20.068]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:56:20.068]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:56:20.070]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:56:20.070]        </block>
[21:56:20.070]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:56:20.070]      </control>
[21:56:20.070]      // end if-block "powered_down"
[21:56:20.070]    </control>
[21:56:20.070]    <block atomic="false" info="">
[21:56:20.070]      __var DEBUG_PORT_VAL    = 0;
[21:56:20.070]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:56:20.070]      __var ACCESS_POINT_VAL  = 0;
[21:56:20.070]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:56:20.070]      __ap = 1; 
[21:56:20.070]        // -> [__ap <= 0x00000001]
[21:56:20.070]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:56:20.074]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:56:20.074]      __ap = 4;
[21:56:20.074]        // -> [__ap <= 0x00000004]
[21:56:20.074]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:56:20.078]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:56:20.078]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:56:20.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:56:20.078]    </block>
[21:56:20.078]    <block atomic="false" info="">
[21:56:20.078]      __var nReset = 0x80;
[21:56:20.082]        // -> [nReset <= 0x00000080]
[21:56:20.082]      __var canReadPins = 0;
[21:56:20.082]        // -> [canReadPins <= 0x00000000]
[21:56:20.082]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:56:20.082]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:56:20.082]        // -> [canReadPins <= 0x00000001]
[21:56:20.082]    </block>
[21:56:20.082]    <control if="" while="1" timeout="200" info="">
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.082]      // while "1"  (timeout="200")
[21:56:20.082]      // while-condition  =>  TRUE
[21:56:20.086]      // while "1"  (timeout="200")
[21:56:20.086]      // while-condition  =>  TRUE
[21:56:20.086]      // while "1"  (timeout="200")
[21:56:20.086]      // while-condition  =>  TRUE
[21:56:20.086]      // while "1"  (timeout="200")
[21:56:20.086]      // while-condition  =>  TRUE
[21:56:20.086]      // while "1"  (timeout="200")
[21:56:20.086]      // while-condition  =>  TRUE
[21:56:20.086]      // while "1"  (timeout="200")
[21:56:20.086]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.088]      // while-condition  =>  TRUE
[21:56:20.088]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.090]      // while-condition  =>  TRUE
[21:56:20.090]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.094]      // while-condition  =>  TRUE
[21:56:20.094]      // while "1"  (timeout="200")
[21:56:20.098]      // while-condition  =>  TRUE
[21:56:20.098]      // while "1"  (timeout="200")
[21:56:20.098]      // while  =>  TIMEOUT
[21:56:20.098]      // end while "1"
[21:56:20.098]    </control>
[21:56:20.098]    <control if="canReadPins" while="" timeout="0" info="">
[21:56:20.098]      // if-block "canReadPins"
[21:56:20.098]        // =>  TRUE
[21:56:20.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:56:20.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:56:20.100]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:56:20.100]        // while-condition  =>  FALSE
[21:56:20.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:56:20.100]      </control>
[21:56:20.102]      // end if-block "canReadPins"
[21:56:20.102]    </control>
[21:56:20.102]    <control if="!canReadPins" while="" timeout="0" info="">
[21:56:20.102]      // if-block "!canReadPins"
[21:56:20.102]        // =>  FALSE
[21:56:20.102]      // skip if-block "!canReadPins"
[21:56:20.102]    </control>
[21:56:20.102]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:56:20.102]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:56:20.102]        // =>  TRUE
[21:56:20.102]      <block atomic="false" info="">
[21:56:20.102]        WriteAP(0x00, 0x190008);
[21:56:20.102]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:56:20.102]        WriteAP(0xF0, 0x01);
[21:56:20.108]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:56:20.108]      </block>
[21:56:20.108]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:56:20.108]    </control>
[21:56:20.108]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:56:20.108]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:56:20.108]        // =>  FALSE
[21:56:20.108]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:56:20.108]    </control>
[21:56:20.108]    <block atomic="false" info="">
[21:56:20.108]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:56:20.112]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:56:20.112]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:56:20.112]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:56:20.112]      __ap = 0; //lets make sure we reset the access point selection
[21:56:20.112]        // -> [__ap <= 0x00000000]
[21:56:20.112]    </block>
[21:56:20.114]  </sequence>
[21:56:20.114]  
[21:56:20.131]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:56:20.131]  
[21:56:20.131]  <debugvars>
[21:56:20.131]    // Pre-defined
[21:56:20.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:56:20.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:56:20.131]    __dp=0x00000000
[21:56:20.131]    __ap=0x00000000
[21:56:20.131]    __traceout=0x00000000      (Trace Disabled)
[21:56:20.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:56:20.131]    __FlashAddr=0x00000000
[21:56:20.131]    __FlashLen=0x00000000
[21:56:20.131]    __FlashArg=0x00000000
[21:56:20.131]    __FlashOp=0x00000000
[21:56:20.131]    __Result=0x00000000
[21:56:20.131]  </debugvars>
[21:56:20.131]  
[21:56:20.131]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:56:20.131]    <block atomic="false" info="">
[21:56:20.131]      __var deviceID = 0;
[21:56:20.131]        // -> [deviceID <= 0x00000000]
[21:56:20.131]      __var version = 0;
[21:56:20.134]        // -> [version <= 0x00000000]
[21:56:20.134]      __var partNum = 0;
[21:56:20.134]        // -> [partNum <= 0x00000000]
[21:56:20.134]      __var manuf = 0;
[21:56:20.134]        // -> [manuf <= 0x00000000]
[21:56:20.134]      __var isMSPM0G1X0X_G3X0X = 0;
[21:56:20.134]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:56:20.134]      __var isProduction = 0;
[21:56:20.134]        // -> [isProduction <= 0x00000000]
[21:56:20.134]      __var continueId = 0;
[21:56:20.134]        // -> [continueId <= 0x00000000]
[21:56:20.134]      deviceID =   Read32(0x41C40004);
[21:56:20.140]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:56:20.140]        // -> [deviceID <= 0x2BB8802F]
[21:56:20.140]      version = deviceID >> 28;
[21:56:20.140]        // -> [version <= 0x00000002]
[21:56:20.140]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:56:20.140]        // -> [partNum <= 0x0000BB88]
[21:56:20.140]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:56:20.140]        // -> [manuf <= 0x00000017]
[21:56:20.140]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:56:20.140]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:56:20.140]      isProduction = (version > 0);
[21:56:20.140]        // -> [isProduction <= 0x00000001]
[21:56:20.140]    </block>
[21:56:20.140]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:56:20.140]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:56:20.140]        // =>  FALSE
[21:56:20.140]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:56:20.140]    </control>
[21:56:20.140]    <control if="continueId == 4" while="" timeout="0" info="">
[21:56:20.140]      // if-block "continueId == 4"
[21:56:20.140]        // =>  FALSE
[21:56:20.143]      // skip if-block "continueId == 4"
[21:56:20.143]    </control>
[21:56:20.143]    <control if="!isProduction" while="" timeout="0" info="">
[21:56:20.143]      // if-block "!isProduction"
[21:56:20.143]        // =>  FALSE
[21:56:20.143]      // skip if-block "!isProduction"
[21:56:20.143]    </control>
[21:56:20.143]  </sequence>
[21:56:20.143]  
[21:57:08.560]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:57:08.560]  
[21:57:08.560]  <debugvars>
[21:57:08.560]    // Pre-defined
[21:57:08.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:08.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:08.560]    __dp=0x00000000
[21:57:08.560]    __ap=0x00000000
[21:57:08.560]    __traceout=0x00000000      (Trace Disabled)
[21:57:08.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:08.560]    __FlashAddr=0x00000000
[21:57:08.560]    __FlashLen=0x00000000
[21:57:08.560]    __FlashArg=0x00000000
[21:57:08.560]    __FlashOp=0x00000000
[21:57:08.560]    __Result=0x00000000
[21:57:08.560]  </debugvars>
[21:57:08.560]  
[21:57:08.560]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:57:08.560]    <block atomic="false" info="">
[21:57:08.560]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:57:08.562]        // -> [isSWJ <= 0x00000001]
[21:57:08.562]      __var hasDormant = __protocol & 0x00020000;
[21:57:08.562]        // -> [hasDormant <= 0x00000000]
[21:57:08.562]      __var protType   = __protocol & 0x0000FFFF;
[21:57:08.562]        // -> [protType <= 0x00000002]
[21:57:08.562]    </block>
[21:57:08.562]    <control if="protType == 1" while="" timeout="0" info="">
[21:57:08.562]      // if-block "protType == 1"
[21:57:08.562]        // =>  FALSE
[21:57:08.562]      // skip if-block "protType == 1"
[21:57:08.562]    </control>
[21:57:08.562]    <control if="protType == 2" while="" timeout="0" info="">
[21:57:08.562]      // if-block "protType == 2"
[21:57:08.562]        // =>  TRUE
[21:57:08.562]      <control if="isSWJ" while="" timeout="0" info="">
[21:57:08.562]        // if-block "isSWJ"
[21:57:08.562]          // =>  TRUE
[21:57:08.562]        <control if="hasDormant" while="" timeout="0" info="">
[21:57:08.562]          // if-block "hasDormant"
[21:57:08.562]            // =>  FALSE
[21:57:08.562]          // skip if-block "hasDormant"
[21:57:08.562]        </control>
[21:57:08.562]        <control if="!hasDormant" while="" timeout="0" info="">
[21:57:08.562]          // if-block "!hasDormant"
[21:57:08.562]            // =>  TRUE
[21:57:08.562]          <block atomic="false" info="">
[21:57:08.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:57:08.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:08.566]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:57:08.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:57:08.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:57:08.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:08.566]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:57:08.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:57:08.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:57:08.570]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:08.570]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:57:08.574]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:57:08.574]          </block>
[21:57:08.574]          // end if-block "!hasDormant"
[21:57:08.574]        </control>
[21:57:08.574]        // end if-block "isSWJ"
[21:57:08.574]      </control>
[21:57:08.578]      <control if="!isSWJ" while="" timeout="0" info="">
[21:57:08.578]        // if-block "!isSWJ"
[21:57:08.578]          // =>  FALSE
[21:57:08.578]        // skip if-block "!isSWJ"
[21:57:08.578]      </control>
[21:57:08.578]      <block atomic="false" info="">
[21:57:08.578]        ReadDP(0x0);
[21:57:08.578]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:57:08.578]      </block>
[21:57:08.578]      // end if-block "protType == 2"
[21:57:08.578]    </control>
[21:57:08.578]  </sequence>
[21:57:08.578]  
[21:57:08.582]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:57:08.582]  
[21:57:08.582]  <debugvars>
[21:57:08.582]    // Pre-defined
[21:57:08.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:08.582]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:08.582]    __dp=0x00000000
[21:57:08.582]    __ap=0x00000000
[21:57:08.582]    __traceout=0x00000000      (Trace Disabled)
[21:57:08.582]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:08.582]    __FlashAddr=0x00000000
[21:57:08.582]    __FlashLen=0x00000000
[21:57:08.582]    __FlashArg=0x00000000
[21:57:08.582]    __FlashOp=0x00000000
[21:57:08.582]    __Result=0x00000000
[21:57:08.582]  </debugvars>
[21:57:08.582]  
[21:57:08.582]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:57:08.582]    <block atomic="false" info="">
[21:57:08.582]      __var SW_DP_ABORT       = 0x0;
[21:57:08.582]        // -> [SW_DP_ABORT <= 0x00000000]
[21:57:08.582]      __var DP_CTRL_STAT      = 0x4;
[21:57:08.582]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:57:08.582]      __var DP_SELECT         = 0x8;
[21:57:08.586]        // -> [DP_SELECT <= 0x00000008]
[21:57:08.586]      __var powered_down      = 0;
[21:57:08.586]        // -> [powered_down <= 0x00000000]
[21:57:08.586]      WriteDP(DP_SELECT, 0x00000000);
[21:57:08.586]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:57:08.586]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:57:08.590]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:57:08.590]        // -> [powered_down <= 0x00000001]
[21:57:08.590]    </block>
[21:57:08.590]    <control if="powered_down" while="" timeout="0" info="">
[21:57:08.590]      // if-block "powered_down"
[21:57:08.590]        // =>  TRUE
[21:57:08.590]      <block atomic="false" info="">
[21:57:08.590]        Message(0, "Debug/System power-up request sent");
[21:57:08.594]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:57:08.599]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:57:08.599]      </block>
[21:57:08.599]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:57:08.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:57:08.601]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:57:08.601]        // while-condition  =>  FALSE
[21:57:08.601]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:57:08.601]      </control>
[21:57:08.601]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:57:08.601]        // if-block "(__protocol & 0xFFFF) == 1"
[21:57:08.601]          // =>  FALSE
[21:57:08.601]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:57:08.601]      </control>
[21:57:08.601]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:57:08.601]        // if-block "(__protocol & 0xFFFF) == 2"
[21:57:08.601]          // =>  TRUE
[21:57:08.601]        <block atomic="false" info="">
[21:57:08.601]          Message(0, "executing SWD power up");
[21:57:08.604]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:57:08.604]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:57:08.604]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:57:08.608]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:57:08.608]        </block>
[21:57:08.608]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:57:08.608]      </control>
[21:57:08.608]      // end if-block "powered_down"
[21:57:08.608]    </control>
[21:57:08.608]    <block atomic="false" info="">
[21:57:08.608]      __var DEBUG_PORT_VAL    = 0;
[21:57:08.608]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:57:08.608]      __var ACCESS_POINT_VAL  = 0;
[21:57:08.608]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:57:08.608]      __ap = 1; 
[21:57:08.608]        // -> [__ap <= 0x00000001]
[21:57:08.608]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:57:08.613]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:57:08.613]      __ap = 4;
[21:57:08.613]        // -> [__ap <= 0x00000004]
[21:57:08.613]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:57:08.615]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:57:08.615]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:57:08.615]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:57:08.617]    </block>
[21:57:08.617]    <block atomic="false" info="">
[21:57:08.619]      __var nReset = 0x80;
[21:57:08.619]        // -> [nReset <= 0x00000080]
[21:57:08.619]      __var canReadPins = 0;
[21:57:08.619]        // -> [canReadPins <= 0x00000000]
[21:57:08.619]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:57:08.622]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:57:08.622]        // -> [canReadPins <= 0x00000001]
[21:57:08.622]    </block>
[21:57:08.622]    <control if="" while="1" timeout="200" info="">
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.622]      // while-condition  =>  TRUE
[21:57:08.622]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.626]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.626]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.626]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.626]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.626]      // while "1"  (timeout="200")
[21:57:08.626]      // while-condition  =>  TRUE
[21:57:08.628]      // while "1"  (timeout="200")
[21:57:08.628]      // while  =>  TIMEOUT
[21:57:08.628]      // end while "1"
[21:57:08.628]    </control>
[21:57:08.628]    <control if="canReadPins" while="" timeout="0" info="">
[21:57:08.628]      // if-block "canReadPins"
[21:57:08.628]        // =>  TRUE
[21:57:08.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:57:08.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:57:08.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:57:08.630]        // while-condition  =>  FALSE
[21:57:08.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:57:08.630]      </control>
[21:57:08.630]      // end if-block "canReadPins"
[21:57:08.630]    </control>
[21:57:08.630]    <control if="!canReadPins" while="" timeout="0" info="">
[21:57:08.630]      // if-block "!canReadPins"
[21:57:08.630]        // =>  FALSE
[21:57:08.630]      // skip if-block "!canReadPins"
[21:57:08.630]    </control>
[21:57:08.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:57:08.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:57:08.632]        // =>  TRUE
[21:57:08.632]      <block atomic="false" info="">
[21:57:08.632]        WriteAP(0x00, 0x190008);
[21:57:08.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:57:08.634]        WriteAP(0xF0, 0x01);
[21:57:08.638]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:57:08.638]      </block>
[21:57:08.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:57:08.638]    </control>
[21:57:08.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:57:08.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:57:08.638]        // =>  FALSE
[21:57:08.638]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:57:08.638]    </control>
[21:57:08.638]    <block atomic="false" info="">
[21:57:08.638]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:57:08.644]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:57:08.644]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:57:08.644]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:57:08.645]      __ap = 0; //lets make sure we reset the access point selection
[21:57:08.645]        // -> [__ap <= 0x00000000]
[21:57:08.646]    </block>
[21:57:08.646]  </sequence>
[21:57:08.646]  
[21:57:08.667]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:57:08.667]  
[21:57:08.667]  <debugvars>
[21:57:08.667]    // Pre-defined
[21:57:08.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:08.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:08.667]    __dp=0x00000000
[21:57:08.667]    __ap=0x00000000
[21:57:08.667]    __traceout=0x00000000      (Trace Disabled)
[21:57:08.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:08.667]    __FlashAddr=0x00000000
[21:57:08.667]    __FlashLen=0x00000000
[21:57:08.667]    __FlashArg=0x00000000
[21:57:08.667]    __FlashOp=0x00000000
[21:57:08.667]    __Result=0x00000000
[21:57:08.667]  </debugvars>
[21:57:08.667]  
[21:57:08.667]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:57:08.671]    <block atomic="false" info="">
[21:57:08.671]      __var deviceID = 0;
[21:57:08.671]        // -> [deviceID <= 0x00000000]
[21:57:08.671]      __var version = 0;
[21:57:08.671]        // -> [version <= 0x00000000]
[21:57:08.671]      __var partNum = 0;
[21:57:08.671]        // -> [partNum <= 0x00000000]
[21:57:08.671]      __var manuf = 0;
[21:57:08.671]        // -> [manuf <= 0x00000000]
[21:57:08.671]      __var isMSPM0G1X0X_G3X0X = 0;
[21:57:08.671]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:57:08.671]      __var isProduction = 0;
[21:57:08.671]        // -> [isProduction <= 0x00000000]
[21:57:08.671]      __var continueId = 0;
[21:57:08.671]        // -> [continueId <= 0x00000000]
[21:57:08.671]      deviceID =   Read32(0x41C40004);
[21:57:08.679]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:57:08.679]        // -> [deviceID <= 0x2BB8802F]
[21:57:08.679]      version = deviceID >> 28;
[21:57:08.679]        // -> [version <= 0x00000002]
[21:57:08.679]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:57:08.679]        // -> [partNum <= 0x0000BB88]
[21:57:08.679]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:57:08.679]        // -> [manuf <= 0x00000017]
[21:57:08.679]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:57:08.679]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:57:08.679]      isProduction = (version > 0);
[21:57:08.679]        // -> [isProduction <= 0x00000001]
[21:57:08.679]    </block>
[21:57:08.679]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:57:08.679]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:57:08.679]        // =>  FALSE
[21:57:08.679]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:57:08.679]    </control>
[21:57:08.679]    <control if="continueId == 4" while="" timeout="0" info="">
[21:57:08.679]      // if-block "continueId == 4"
[21:57:08.679]        // =>  FALSE
[21:57:08.679]      // skip if-block "continueId == 4"
[21:57:08.679]    </control>
[21:57:08.679]    <control if="!isProduction" while="" timeout="0" info="">
[21:57:08.679]      // if-block "!isProduction"
[21:57:08.679]        // =>  FALSE
[21:57:08.679]      // skip if-block "!isProduction"
[21:57:08.679]    </control>
[21:57:08.679]  </sequence>
[21:57:08.679]  
[21:57:43.844]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:57:43.844]  
[21:57:43.855]  <debugvars>
[21:57:43.855]    // Pre-defined
[21:57:43.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:43.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:43.855]    __dp=0x00000000
[21:57:43.855]    __ap=0x00000000
[21:57:43.855]    __traceout=0x00000000      (Trace Disabled)
[21:57:43.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:43.855]    __FlashAddr=0x00000000
[21:57:43.855]    __FlashLen=0x00000000
[21:57:43.855]    __FlashArg=0x00000000
[21:57:43.855]    __FlashOp=0x00000000
[21:57:43.855]    __Result=0x00000000
[21:57:43.855]  </debugvars>
[21:57:43.855]  
[21:57:43.855]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:57:43.855]    <block atomic="false" info="">
[21:57:43.855]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:57:43.855]        // -> [isSWJ <= 0x00000001]
[21:57:43.855]      __var hasDormant = __protocol & 0x00020000;
[21:57:43.857]        // -> [hasDormant <= 0x00000000]
[21:57:43.857]      __var protType   = __protocol & 0x0000FFFF;
[21:57:43.857]        // -> [protType <= 0x00000002]
[21:57:43.858]    </block>
[21:57:43.858]    <control if="protType == 1" while="" timeout="0" info="">
[21:57:43.858]      // if-block "protType == 1"
[21:57:43.858]        // =>  FALSE
[21:57:43.858]      // skip if-block "protType == 1"
[21:57:43.858]    </control>
[21:57:43.858]    <control if="protType == 2" while="" timeout="0" info="">
[21:57:43.858]      // if-block "protType == 2"
[21:57:43.858]        // =>  TRUE
[21:57:43.858]      <control if="isSWJ" while="" timeout="0" info="">
[21:57:43.858]        // if-block "isSWJ"
[21:57:43.858]          // =>  TRUE
[21:57:43.858]        <control if="hasDormant" while="" timeout="0" info="">
[21:57:43.858]          // if-block "hasDormant"
[21:57:43.858]            // =>  FALSE
[21:57:43.858]          // skip if-block "hasDormant"
[21:57:43.859]        </control>
[21:57:43.859]        <control if="!hasDormant" while="" timeout="0" info="">
[21:57:43.859]          // if-block "!hasDormant"
[21:57:43.859]            // =>  TRUE
[21:57:43.859]          <block atomic="false" info="">
[21:57:43.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:57:43.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:43.862]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:57:43.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:57:43.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:57:43.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:43.864]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:57:43.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:57:43.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:57:43.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:57:43.871]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:57:43.872]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:57:43.872]          </block>
[21:57:43.872]          // end if-block "!hasDormant"
[21:57:43.872]        </control>
[21:57:43.872]        // end if-block "isSWJ"
[21:57:43.872]      </control>
[21:57:43.873]      <control if="!isSWJ" while="" timeout="0" info="">
[21:57:43.873]        // if-block "!isSWJ"
[21:57:43.873]          // =>  FALSE
[21:57:43.873]        // skip if-block "!isSWJ"
[21:57:43.873]      </control>
[21:57:43.873]      <block atomic="false" info="">
[21:57:43.873]        ReadDP(0x0);
[21:57:43.874]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:57:43.874]      </block>
[21:57:43.874]      // end if-block "protType == 2"
[21:57:43.874]    </control>
[21:57:43.874]  </sequence>
[21:57:43.874]  
[21:57:43.884]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:57:43.884]  
[21:57:43.884]  <debugvars>
[21:57:43.884]    // Pre-defined
[21:57:43.884]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:43.884]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:43.884]    __dp=0x00000000
[21:57:43.884]    __ap=0x00000000
[21:57:43.884]    __traceout=0x00000000      (Trace Disabled)
[21:57:43.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:43.884]    __FlashAddr=0x00000000
[21:57:43.887]    __FlashLen=0x00000000
[21:57:43.887]    __FlashArg=0x00000000
[21:57:43.887]    __FlashOp=0x00000000
[21:57:43.887]    __Result=0x00000000
[21:57:43.887]  </debugvars>
[21:57:43.887]  
[21:57:43.887]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:57:43.887]    <block atomic="false" info="">
[21:57:43.888]      __var SW_DP_ABORT       = 0x0;
[21:57:43.888]        // -> [SW_DP_ABORT <= 0x00000000]
[21:57:43.888]      __var DP_CTRL_STAT      = 0x4;
[21:57:43.888]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:57:43.888]      __var DP_SELECT         = 0x8;
[21:57:43.888]        // -> [DP_SELECT <= 0x00000008]
[21:57:43.888]      __var powered_down      = 0;
[21:57:43.888]        // -> [powered_down <= 0x00000000]
[21:57:43.888]      WriteDP(DP_SELECT, 0x00000000);
[21:57:43.890]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:57:43.890]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:57:43.892]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:57:43.892]        // -> [powered_down <= 0x00000001]
[21:57:43.892]    </block>
[21:57:43.892]    <control if="powered_down" while="" timeout="0" info="">
[21:57:43.892]      // if-block "powered_down"
[21:57:43.892]        // =>  TRUE
[21:57:43.892]      <block atomic="false" info="">
[21:57:43.892]        Message(0, "Debug/System power-up request sent");
[21:57:43.894]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:57:43.900]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:57:43.900]      </block>
[21:57:43.900]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:57:43.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:57:43.902]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:57:43.902]        // while-condition  =>  FALSE
[21:57:43.902]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:57:43.902]      </control>
[21:57:43.902]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:57:43.902]        // if-block "(__protocol & 0xFFFF) == 1"
[21:57:43.902]          // =>  FALSE
[21:57:43.902]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:57:43.902]      </control>
[21:57:43.902]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:57:43.902]        // if-block "(__protocol & 0xFFFF) == 2"
[21:57:43.902]          // =>  TRUE
[21:57:43.902]        <block atomic="false" info="">
[21:57:43.902]          Message(0, "executing SWD power up");
[21:57:43.902]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:57:43.906]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:57:43.906]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:57:43.908]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:57:43.908]        </block>
[21:57:43.908]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:57:43.908]      </control>
[21:57:43.910]      // end if-block "powered_down"
[21:57:43.910]    </control>
[21:57:43.910]    <block atomic="false" info="">
[21:57:43.910]      __var DEBUG_PORT_VAL    = 0;
[21:57:43.910]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:57:43.910]      __var ACCESS_POINT_VAL  = 0;
[21:57:43.911]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:57:43.911]      __ap = 1; 
[21:57:43.911]        // -> [__ap <= 0x00000001]
[21:57:43.911]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:57:43.914]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:57:43.914]      __ap = 4;
[21:57:43.914]        // -> [__ap <= 0x00000004]
[21:57:43.914]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:57:43.922]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:57:43.922]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:57:43.922]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:57:43.926]    </block>
[21:57:43.926]    <block atomic="false" info="">
[21:57:43.926]      __var nReset = 0x80;
[21:57:43.926]        // -> [nReset <= 0x00000080]
[21:57:43.926]      __var canReadPins = 0;
[21:57:43.926]        // -> [canReadPins <= 0x00000000]
[21:57:43.926]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:57:43.930]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:57:43.930]        // -> [canReadPins <= 0x00000001]
[21:57:43.930]    </block>
[21:57:43.930]    <control if="" while="1" timeout="200" info="">
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.930]      // while-condition  =>  TRUE
[21:57:43.930]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.934]      // while-condition  =>  TRUE
[21:57:43.934]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.935]      // while "1"  (timeout="200")
[21:57:43.935]      // while-condition  =>  TRUE
[21:57:43.936]      // while "1"  (timeout="200")
[21:57:43.936]      // while-condition  =>  TRUE
[21:57:43.936]      // while "1"  (timeout="200")
[21:57:43.936]      // while-condition  =>  TRUE
[21:57:43.936]      // while "1"  (timeout="200")
[21:57:43.936]      // while-condition  =>  TRUE
[21:57:43.936]      // while "1"  (timeout="200")
[21:57:43.936]      // while-condition  =>  TRUE
[21:57:43.937]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.938]      // while "1"  (timeout="200")
[21:57:43.938]      // while-condition  =>  TRUE
[21:57:43.942]      // while "1"  (timeout="200")
[21:57:43.942]      // while  =>  TIMEOUT
[21:57:43.942]      // end while "1"
[21:57:43.942]    </control>
[21:57:43.942]    <control if="canReadPins" while="" timeout="0" info="">
[21:57:43.942]      // if-block "canReadPins"
[21:57:43.942]        // =>  TRUE
[21:57:43.942]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:57:43.942]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:57:43.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:57:43.942]        // while-condition  =>  FALSE
[21:57:43.942]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:57:43.942]      </control>
[21:57:43.942]      // end if-block "canReadPins"
[21:57:43.942]    </control>
[21:57:43.942]    <control if="!canReadPins" while="" timeout="0" info="">
[21:57:43.942]      // if-block "!canReadPins"
[21:57:43.942]        // =>  FALSE
[21:57:43.942]      // skip if-block "!canReadPins"
[21:57:43.942]    </control>
[21:57:43.946]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:57:43.946]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:57:43.946]        // =>  TRUE
[21:57:43.946]      <block atomic="false" info="">
[21:57:43.946]        WriteAP(0x00, 0x190008);
[21:57:43.950]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:57:43.950]        WriteAP(0xF0, 0x01);
[21:57:43.959]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:57:43.959]      </block>
[21:57:43.959]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:57:43.959]    </control>
[21:57:43.959]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:57:43.959]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:57:43.959]        // =>  FALSE
[21:57:43.959]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:57:43.959]    </control>
[21:57:43.959]    <block atomic="false" info="">
[21:57:43.959]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:57:43.967]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:57:43.967]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:57:43.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:57:43.971]      __ap = 0; //lets make sure we reset the access point selection
[21:57:43.971]        // -> [__ap <= 0x00000000]
[21:57:43.971]    </block>
[21:57:43.971]  </sequence>
[21:57:43.971]  
[21:57:43.990]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:57:43.990]  
[21:57:43.990]  <debugvars>
[21:57:43.990]    // Pre-defined
[21:57:43.990]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:57:43.990]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:57:43.990]    __dp=0x00000000
[21:57:43.990]    __ap=0x00000000
[21:57:43.990]    __traceout=0x00000000      (Trace Disabled)
[21:57:43.990]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:57:43.990]    __FlashAddr=0x00000000
[21:57:43.990]    __FlashLen=0x00000000
[21:57:43.990]    __FlashArg=0x00000000
[21:57:43.990]    __FlashOp=0x00000000
[21:57:43.990]    __Result=0x00000000
[21:57:43.990]  </debugvars>
[21:57:43.990]  
[21:57:43.990]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:57:43.990]    <block atomic="false" info="">
[21:57:43.990]      __var deviceID = 0;
[21:57:43.990]        // -> [deviceID <= 0x00000000]
[21:57:43.990]      __var version = 0;
[21:57:43.990]        // -> [version <= 0x00000000]
[21:57:43.990]      __var partNum = 0;
[21:57:43.990]        // -> [partNum <= 0x00000000]
[21:57:43.990]      __var manuf = 0;
[21:57:43.990]        // -> [manuf <= 0x00000000]
[21:57:43.990]      __var isMSPM0G1X0X_G3X0X = 0;
[21:57:43.990]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:57:43.990]      __var isProduction = 0;
[21:57:43.990]        // -> [isProduction <= 0x00000000]
[21:57:43.990]      __var continueId = 0;
[21:57:43.990]        // -> [continueId <= 0x00000000]
[21:57:43.990]      deviceID =   Read32(0x41C40004);
[21:57:43.998]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:57:43.998]        // -> [deviceID <= 0x2BB8802F]
[21:57:43.998]      version = deviceID >> 28;
[21:57:43.998]        // -> [version <= 0x00000002]
[21:57:43.998]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:57:43.998]        // -> [partNum <= 0x0000BB88]
[21:57:43.998]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:57:43.998]        // -> [manuf <= 0x00000017]
[21:57:43.998]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:57:43.998]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:57:44.002]      isProduction = (version > 0);
[21:57:44.002]        // -> [isProduction <= 0x00000001]
[21:57:44.002]    </block>
[21:57:44.002]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:57:44.002]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:57:44.002]        // =>  FALSE
[21:57:44.002]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:57:44.002]    </control>
[21:57:44.002]    <control if="continueId == 4" while="" timeout="0" info="">
[21:57:44.002]      // if-block "continueId == 4"
[21:57:44.002]        // =>  FALSE
[21:57:44.002]      // skip if-block "continueId == 4"
[21:57:44.002]    </control>
[21:57:44.002]    <control if="!isProduction" while="" timeout="0" info="">
[21:57:44.002]      // if-block "!isProduction"
[21:57:44.002]        // =>  FALSE
[21:57:44.002]      // skip if-block "!isProduction"
[21:57:44.002]    </control>
[21:57:44.002]  </sequence>
[21:57:44.002]  
[21:58:16.947]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:58:16.947]  
[21:58:16.959]  <debugvars>
[21:58:16.959]    // Pre-defined
[21:58:16.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:16.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:16.959]    __dp=0x00000000
[21:58:16.959]    __ap=0x00000000
[21:58:16.959]    __traceout=0x00000000      (Trace Disabled)
[21:58:16.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:16.959]    __FlashAddr=0x00000000
[21:58:16.959]    __FlashLen=0x00000000
[21:58:16.960]    __FlashArg=0x00000000
[21:58:16.960]    __FlashOp=0x00000000
[21:58:16.960]    __Result=0x00000000
[21:58:16.960]  </debugvars>
[21:58:16.960]  
[21:58:16.960]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:58:16.960]    <block atomic="false" info="">
[21:58:16.960]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:58:16.960]        // -> [isSWJ <= 0x00000001]
[21:58:16.960]      __var hasDormant = __protocol & 0x00020000;
[21:58:16.960]        // -> [hasDormant <= 0x00000000]
[21:58:16.960]      __var protType   = __protocol & 0x0000FFFF;
[21:58:16.960]        // -> [protType <= 0x00000002]
[21:58:16.960]    </block>
[21:58:16.960]    <control if="protType == 1" while="" timeout="0" info="">
[21:58:16.960]      // if-block "protType == 1"
[21:58:16.960]        // =>  FALSE
[21:58:16.960]      // skip if-block "protType == 1"
[21:58:16.960]    </control>
[21:58:16.960]    <control if="protType == 2" while="" timeout="0" info="">
[21:58:16.960]      // if-block "protType == 2"
[21:58:16.960]        // =>  TRUE
[21:58:16.960]      <control if="isSWJ" while="" timeout="0" info="">
[21:58:16.960]        // if-block "isSWJ"
[21:58:16.960]          // =>  TRUE
[21:58:16.960]        <control if="hasDormant" while="" timeout="0" info="">
[21:58:16.960]          // if-block "hasDormant"
[21:58:16.960]            // =>  FALSE
[21:58:16.960]          // skip if-block "hasDormant"
[21:58:16.960]        </control>
[21:58:16.964]        <control if="!hasDormant" while="" timeout="0" info="">
[21:58:16.964]          // if-block "!hasDormant"
[21:58:16.964]            // =>  TRUE
[21:58:16.964]          <block atomic="false" info="">
[21:58:16.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:58:16.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:16.966]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:58:16.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:58:16.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:58:16.968]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:16.968]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:58:16.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:58:16.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:58:16.972]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:16.972]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:58:16.972]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:58:16.972]          </block>
[21:58:16.972]          // end if-block "!hasDormant"
[21:58:16.972]        </control>
[21:58:16.972]        // end if-block "isSWJ"
[21:58:16.972]      </control>
[21:58:16.972]      <control if="!isSWJ" while="" timeout="0" info="">
[21:58:16.972]        // if-block "!isSWJ"
[21:58:16.972]          // =>  FALSE
[21:58:16.972]        // skip if-block "!isSWJ"
[21:58:16.972]      </control>
[21:58:16.972]      <block atomic="false" info="">
[21:58:16.972]        ReadDP(0x0);
[21:58:16.976]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:58:16.976]      </block>
[21:58:16.976]      // end if-block "protType == 2"
[21:58:16.976]    </control>
[21:58:16.976]  </sequence>
[21:58:16.976]  
[21:58:16.976]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:58:16.976]  
[21:58:16.976]  <debugvars>
[21:58:16.976]    // Pre-defined
[21:58:16.976]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:16.980]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:16.980]    __dp=0x00000000
[21:58:16.980]    __ap=0x00000000
[21:58:16.980]    __traceout=0x00000000      (Trace Disabled)
[21:58:16.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:16.980]    __FlashAddr=0x00000000
[21:58:16.980]    __FlashLen=0x00000000
[21:58:16.980]    __FlashArg=0x00000000
[21:58:16.980]    __FlashOp=0x00000000
[21:58:16.980]    __Result=0x00000000
[21:58:16.980]  </debugvars>
[21:58:16.980]  
[21:58:16.980]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:58:16.980]    <block atomic="false" info="">
[21:58:16.980]      __var SW_DP_ABORT       = 0x0;
[21:58:16.980]        // -> [SW_DP_ABORT <= 0x00000000]
[21:58:16.980]      __var DP_CTRL_STAT      = 0x4;
[21:58:16.980]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:58:16.982]      __var DP_SELECT         = 0x8;
[21:58:16.982]        // -> [DP_SELECT <= 0x00000008]
[21:58:16.982]      __var powered_down      = 0;
[21:58:16.982]        // -> [powered_down <= 0x00000000]
[21:58:16.982]      WriteDP(DP_SELECT, 0x00000000);
[21:58:16.982]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:58:16.984]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:58:16.984]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:58:16.984]        // -> [powered_down <= 0x00000001]
[21:58:16.984]    </block>
[21:58:16.984]    <control if="powered_down" while="" timeout="0" info="">
[21:58:16.984]      // if-block "powered_down"
[21:58:16.984]        // =>  TRUE
[21:58:16.984]      <block atomic="false" info="">
[21:58:16.984]        Message(0, "Debug/System power-up request sent");
[21:58:16.988]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:58:16.992]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:58:16.992]      </block>
[21:58:16.992]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:58:16.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:58:16.995]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:58:16.995]        // while-condition  =>  FALSE
[21:58:16.995]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:58:16.995]      </control>
[21:58:16.995]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:58:16.995]        // if-block "(__protocol & 0xFFFF) == 1"
[21:58:16.995]          // =>  FALSE
[21:58:16.995]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:58:16.995]      </control>
[21:58:16.995]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:58:16.995]        // if-block "(__protocol & 0xFFFF) == 2"
[21:58:16.995]          // =>  TRUE
[21:58:16.995]        <block atomic="false" info="">
[21:58:16.995]          Message(0, "executing SWD power up");
[21:58:16.998]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:58:16.998]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:58:16.998]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:58:17.002]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:58:17.002]        </block>
[21:58:17.002]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:58:17.002]      </control>
[21:58:17.002]      // end if-block "powered_down"
[21:58:17.002]    </control>
[21:58:17.002]    <block atomic="false" info="">
[21:58:17.002]      __var DEBUG_PORT_VAL    = 0;
[21:58:17.002]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:58:17.002]      __var ACCESS_POINT_VAL  = 0;
[21:58:17.002]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:58:17.002]      __ap = 1; 
[21:58:17.005]        // -> [__ap <= 0x00000001]
[21:58:17.005]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:58:17.005]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:58:17.005]      __ap = 4;
[21:58:17.005]        // -> [__ap <= 0x00000004]
[21:58:17.005]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:58:17.009]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:58:17.009]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:58:17.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:58:17.013]    </block>
[21:58:17.013]    <block atomic="false" info="">
[21:58:17.013]      __var nReset = 0x80;
[21:58:17.014]        // -> [nReset <= 0x00000080]
[21:58:17.014]      __var canReadPins = 0;
[21:58:17.014]        // -> [canReadPins <= 0x00000000]
[21:58:17.014]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:58:17.015]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:58:17.015]        // -> [canReadPins <= 0x00000001]
[21:58:17.015]    </block>
[21:58:17.015]    <control if="" while="1" timeout="200" info="">
[21:58:17.015]      // while "1"  (timeout="200")
[21:58:17.015]      // while-condition  =>  TRUE
[21:58:17.015]      // while "1"  (timeout="200")
[21:58:17.015]      // while-condition  =>  TRUE
[21:58:17.015]      // while "1"  (timeout="200")
[21:58:17.015]      // while-condition  =>  TRUE
[21:58:17.015]      // while "1"  (timeout="200")
[21:58:17.017]      // while-condition  =>  TRUE
[21:58:17.017]      // while "1"  (timeout="200")
[21:58:17.017]      // while-condition  =>  TRUE
[21:58:17.017]      // while "1"  (timeout="200")
[21:58:17.017]      // while-condition  =>  TRUE
[21:58:17.017]      // while "1"  (timeout="200")
[21:58:17.018]      // while-condition  =>  TRUE
[21:58:17.018]      // while "1"  (timeout="200")
[21:58:17.018]      // while-condition  =>  TRUE
[21:58:17.018]      // while "1"  (timeout="200")
[21:58:17.019]      // while-condition  =>  TRUE
[21:58:17.019]      // while "1"  (timeout="200")
[21:58:17.019]      // while  =>  TIMEOUT
[21:58:17.019]      // end while "1"
[21:58:17.019]    </control>
[21:58:17.019]    <control if="canReadPins" while="" timeout="0" info="">
[21:58:17.019]      // if-block "canReadPins"
[21:58:17.019]        // =>  TRUE
[21:58:17.019]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:58:17.019]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:58:17.019]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:58:17.021]        // while-condition  =>  FALSE
[21:58:17.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:58:17.021]      </control>
[21:58:17.021]      // end if-block "canReadPins"
[21:58:17.021]    </control>
[21:58:17.021]    <control if="!canReadPins" while="" timeout="0" info="">
[21:58:17.021]      // if-block "!canReadPins"
[21:58:17.021]        // =>  FALSE
[21:58:17.021]      // skip if-block "!canReadPins"
[21:58:17.021]    </control>
[21:58:17.021]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:58:17.021]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:58:17.021]        // =>  TRUE
[21:58:17.021]      <block atomic="false" info="">
[21:58:17.021]        WriteAP(0x00, 0x190008);
[21:58:17.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:58:17.023]        WriteAP(0xF0, 0x01);
[21:58:17.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:58:17.028]      </block>
[21:58:17.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:58:17.028]    </control>
[21:58:17.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:58:17.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:58:17.028]        // =>  FALSE
[21:58:17.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:58:17.030]    </control>
[21:58:17.030]    <block atomic="false" info="">
[21:58:17.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:58:17.033]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:58:17.033]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:58:17.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:58:17.034]      __ap = 0; //lets make sure we reset the access point selection
[21:58:17.034]        // -> [__ap <= 0x00000000]
[21:58:17.034]    </block>
[21:58:17.034]  </sequence>
[21:58:17.034]  
[21:58:17.055]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:58:17.055]  
[21:58:17.055]  <debugvars>
[21:58:17.055]    // Pre-defined
[21:58:17.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:17.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:17.055]    __dp=0x00000000
[21:58:17.055]    __ap=0x00000000
[21:58:17.055]    __traceout=0x00000000      (Trace Disabled)
[21:58:17.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:17.055]    __FlashAddr=0x00000000
[21:58:17.055]    __FlashLen=0x00000000
[21:58:17.055]    __FlashArg=0x00000000
[21:58:17.055]    __FlashOp=0x00000000
[21:58:17.055]    __Result=0x00000000
[21:58:17.055]  </debugvars>
[21:58:17.055]  
[21:58:17.057]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:58:17.057]    <block atomic="false" info="">
[21:58:17.057]      __var deviceID = 0;
[21:58:17.057]        // -> [deviceID <= 0x00000000]
[21:58:17.057]      __var version = 0;
[21:58:17.057]        // -> [version <= 0x00000000]
[21:58:17.057]      __var partNum = 0;
[21:58:17.057]        // -> [partNum <= 0x00000000]
[21:58:17.057]      __var manuf = 0;
[21:58:17.057]        // -> [manuf <= 0x00000000]
[21:58:17.057]      __var isMSPM0G1X0X_G3X0X = 0;
[21:58:17.057]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:58:17.057]      __var isProduction = 0;
[21:58:17.057]        // -> [isProduction <= 0x00000000]
[21:58:17.057]      __var continueId = 0;
[21:58:17.057]        // -> [continueId <= 0x00000000]
[21:58:17.057]      deviceID =   Read32(0x41C40004);
[21:58:17.063]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:58:17.063]        // -> [deviceID <= 0x2BB8802F]
[21:58:17.063]      version = deviceID >> 28;
[21:58:17.063]        // -> [version <= 0x00000002]
[21:58:17.063]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:58:17.063]        // -> [partNum <= 0x0000BB88]
[21:58:17.063]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:58:17.063]        // -> [manuf <= 0x00000017]
[21:58:17.063]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:58:17.063]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:58:17.063]      isProduction = (version > 0);
[21:58:17.063]        // -> [isProduction <= 0x00000001]
[21:58:17.063]    </block>
[21:58:17.063]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:58:17.063]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:58:17.063]        // =>  FALSE
[21:58:17.063]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:58:17.063]    </control>
[21:58:17.063]    <control if="continueId == 4" while="" timeout="0" info="">
[21:58:17.063]      // if-block "continueId == 4"
[21:58:17.067]        // =>  FALSE
[21:58:17.067]      // skip if-block "continueId == 4"
[21:58:17.067]    </control>
[21:58:17.067]    <control if="!isProduction" while="" timeout="0" info="">
[21:58:17.067]      // if-block "!isProduction"
[21:58:17.067]        // =>  FALSE
[21:58:17.067]      // skip if-block "!isProduction"
[21:58:17.067]    </control>
[21:58:17.067]  </sequence>
[21:58:17.067]  
[21:58:44.114]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:58:44.114]  
[21:58:44.125]  <debugvars>
[21:58:44.125]    // Pre-defined
[21:58:44.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:44.125]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:44.125]    __dp=0x00000000
[21:58:44.125]    __ap=0x00000000
[21:58:44.125]    __traceout=0x00000000      (Trace Disabled)
[21:58:44.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:44.125]    __FlashAddr=0x00000000
[21:58:44.125]    __FlashLen=0x00000000
[21:58:44.126]    __FlashArg=0x00000000
[21:58:44.126]    __FlashOp=0x00000000
[21:58:44.126]    __Result=0x00000000
[21:58:44.126]  </debugvars>
[21:58:44.126]  
[21:58:44.126]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:58:44.126]    <block atomic="false" info="">
[21:58:44.126]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:58:44.126]        // -> [isSWJ <= 0x00000001]
[21:58:44.126]      __var hasDormant = __protocol & 0x00020000;
[21:58:44.126]        // -> [hasDormant <= 0x00000000]
[21:58:44.126]      __var protType   = __protocol & 0x0000FFFF;
[21:58:44.126]        // -> [protType <= 0x00000002]
[21:58:44.126]    </block>
[21:58:44.126]    <control if="protType == 1" while="" timeout="0" info="">
[21:58:44.126]      // if-block "protType == 1"
[21:58:44.126]        // =>  FALSE
[21:58:44.126]      // skip if-block "protType == 1"
[21:58:44.126]    </control>
[21:58:44.128]    <control if="protType == 2" while="" timeout="0" info="">
[21:58:44.128]      // if-block "protType == 2"
[21:58:44.128]        // =>  TRUE
[21:58:44.128]      <control if="isSWJ" while="" timeout="0" info="">
[21:58:44.128]        // if-block "isSWJ"
[21:58:44.128]          // =>  TRUE
[21:58:44.128]        <control if="hasDormant" while="" timeout="0" info="">
[21:58:44.128]          // if-block "hasDormant"
[21:58:44.128]            // =>  FALSE
[21:58:44.128]          // skip if-block "hasDormant"
[21:58:44.128]        </control>
[21:58:44.128]        <control if="!hasDormant" while="" timeout="0" info="">
[21:58:44.128]          // if-block "!hasDormant"
[21:58:44.128]            // =>  TRUE
[21:58:44.128]          <block atomic="false" info="">
[21:58:44.128]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:58:44.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:44.130]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:58:44.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:58:44.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:58:44.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:44.134]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:58:44.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:58:44.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:58:44.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:58:44.139]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:58:44.139]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:58:44.139]          </block>
[21:58:44.139]          // end if-block "!hasDormant"
[21:58:44.139]        </control>
[21:58:44.139]        // end if-block "isSWJ"
[21:58:44.142]      </control>
[21:58:44.142]      <control if="!isSWJ" while="" timeout="0" info="">
[21:58:44.142]        // if-block "!isSWJ"
[21:58:44.142]          // =>  FALSE
[21:58:44.142]        // skip if-block "!isSWJ"
[21:58:44.142]      </control>
[21:58:44.142]      <block atomic="false" info="">
[21:58:44.142]        ReadDP(0x0);
[21:58:44.142]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:58:44.142]      </block>
[21:58:44.142]      // end if-block "protType == 2"
[21:58:44.142]    </control>
[21:58:44.142]  </sequence>
[21:58:44.142]  
[21:58:44.151]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:58:44.151]  
[21:58:44.151]  <debugvars>
[21:58:44.151]    // Pre-defined
[21:58:44.151]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:44.151]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:44.151]    __dp=0x00000000
[21:58:44.151]    __ap=0x00000000
[21:58:44.151]    __traceout=0x00000000      (Trace Disabled)
[21:58:44.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:44.151]    __FlashAddr=0x00000000
[21:58:44.151]    __FlashLen=0x00000000
[21:58:44.151]    __FlashArg=0x00000000
[21:58:44.151]    __FlashOp=0x00000000
[21:58:44.151]    __Result=0x00000000
[21:58:44.151]  </debugvars>
[21:58:44.154]  
[21:58:44.154]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:58:44.154]    <block atomic="false" info="">
[21:58:44.154]      __var SW_DP_ABORT       = 0x0;
[21:58:44.154]        // -> [SW_DP_ABORT <= 0x00000000]
[21:58:44.154]      __var DP_CTRL_STAT      = 0x4;
[21:58:44.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:58:44.154]      __var DP_SELECT         = 0x8;
[21:58:44.154]        // -> [DP_SELECT <= 0x00000008]
[21:58:44.154]      __var powered_down      = 0;
[21:58:44.154]        // -> [powered_down <= 0x00000000]
[21:58:44.154]      WriteDP(DP_SELECT, 0x00000000);
[21:58:44.154]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:58:44.154]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:58:44.158]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:58:44.158]        // -> [powered_down <= 0x00000001]
[21:58:44.158]    </block>
[21:58:44.158]    <control if="powered_down" while="" timeout="0" info="">
[21:58:44.158]      // if-block "powered_down"
[21:58:44.158]        // =>  TRUE
[21:58:44.158]      <block atomic="false" info="">
[21:58:44.158]        Message(0, "Debug/System power-up request sent");
[21:58:44.162]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:58:44.163]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:58:44.163]      </block>
[21:58:44.163]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:58:44.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:58:44.165]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:58:44.165]        // while-condition  =>  FALSE
[21:58:44.165]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:58:44.165]      </control>
[21:58:44.166]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:58:44.166]        // if-block "(__protocol & 0xFFFF) == 1"
[21:58:44.166]          // =>  FALSE
[21:58:44.166]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:58:44.166]      </control>
[21:58:44.166]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:58:44.166]        // if-block "(__protocol & 0xFFFF) == 2"
[21:58:44.166]          // =>  TRUE
[21:58:44.166]        <block atomic="false" info="">
[21:58:44.166]          Message(0, "executing SWD power up");
[21:58:44.168]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:58:44.170]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:58:44.170]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:58:44.174]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:58:44.174]        </block>
[21:58:44.174]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:58:44.174]      </control>
[21:58:44.174]      // end if-block "powered_down"
[21:58:44.174]    </control>
[21:58:44.174]    <block atomic="false" info="">
[21:58:44.174]      __var DEBUG_PORT_VAL    = 0;
[21:58:44.174]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:58:44.174]      __var ACCESS_POINT_VAL  = 0;
[21:58:44.174]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:58:44.174]      __ap = 1; 
[21:58:44.174]        // -> [__ap <= 0x00000001]
[21:58:44.174]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:58:44.182]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:58:44.182]      __ap = 4;
[21:58:44.182]        // -> [__ap <= 0x00000004]
[21:58:44.182]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:58:44.186]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:58:44.186]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:58:44.186]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:58:44.188]    </block>
[21:58:44.188]    <block atomic="false" info="">
[21:58:44.188]      __var nReset = 0x80;
[21:58:44.188]        // -> [nReset <= 0x00000080]
[21:58:44.188]      __var canReadPins = 0;
[21:58:44.188]        // -> [canReadPins <= 0x00000000]
[21:58:44.188]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:58:44.190]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:58:44.190]        // -> [canReadPins <= 0x00000001]
[21:58:44.190]    </block>
[21:58:44.190]    <control if="" while="1" timeout="200" info="">
[21:58:44.190]      // while "1"  (timeout="200")
[21:58:44.190]      // while-condition  =>  TRUE
[21:58:44.190]      // while "1"  (timeout="200")
[21:58:44.190]      // while-condition  =>  TRUE
[21:58:44.190]      // while "1"  (timeout="200")
[21:58:44.190]      // while-condition  =>  TRUE
[21:58:44.191]      // while "1"  (timeout="200")
[21:58:44.191]      // while  =>  TIMEOUT
[21:58:44.191]      // end while "1"
[21:58:44.191]    </control>
[21:58:44.191]    <control if="canReadPins" while="" timeout="0" info="">
[21:58:44.191]      // if-block "canReadPins"
[21:58:44.191]        // =>  TRUE
[21:58:44.191]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:58:44.191]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:58:44.191]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:58:44.191]        // while-condition  =>  FALSE
[21:58:44.194]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:58:44.194]      </control>
[21:58:44.194]      // end if-block "canReadPins"
[21:58:44.194]    </control>
[21:58:44.194]    <control if="!canReadPins" while="" timeout="0" info="">
[21:58:44.194]      // if-block "!canReadPins"
[21:58:44.194]        // =>  FALSE
[21:58:44.194]      // skip if-block "!canReadPins"
[21:58:44.194]    </control>
[21:58:44.194]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:58:44.194]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:58:44.194]        // =>  TRUE
[21:58:44.194]      <block atomic="false" info="">
[21:58:44.194]        WriteAP(0x00, 0x190008);
[21:58:44.194]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:58:44.194]        WriteAP(0xF0, 0x01);
[21:58:44.198]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:58:44.198]      </block>
[21:58:44.198]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:58:44.198]    </control>
[21:58:44.198]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:58:44.198]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:58:44.198]        // =>  FALSE
[21:58:44.198]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:58:44.198]    </control>
[21:58:44.202]    <block atomic="false" info="">
[21:58:44.202]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:58:44.202]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:58:44.202]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:58:44.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:58:44.206]      __ap = 0; //lets make sure we reset the access point selection
[21:58:44.206]        // -> [__ap <= 0x00000000]
[21:58:44.206]    </block>
[21:58:44.206]  </sequence>
[21:58:44.208]  
[21:58:44.230]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:58:44.230]  
[21:58:44.230]  <debugvars>
[21:58:44.230]    // Pre-defined
[21:58:44.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:58:44.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:58:44.230]    __dp=0x00000000
[21:58:44.230]    __ap=0x00000000
[21:58:44.230]    __traceout=0x00000000      (Trace Disabled)
[21:58:44.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:58:44.230]    __FlashAddr=0x00000000
[21:58:44.230]    __FlashLen=0x00000000
[21:58:44.230]    __FlashArg=0x00000000
[21:58:44.234]    __FlashOp=0x00000000
[21:58:44.234]    __Result=0x00000000
[21:58:44.234]  </debugvars>
[21:58:44.234]  
[21:58:44.234]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:58:44.234]    <block atomic="false" info="">
[21:58:44.234]      __var deviceID = 0;
[21:58:44.234]        // -> [deviceID <= 0x00000000]
[21:58:44.234]      __var version = 0;
[21:58:44.234]        // -> [version <= 0x00000000]
[21:58:44.234]      __var partNum = 0;
[21:58:44.234]        // -> [partNum <= 0x00000000]
[21:58:44.234]      __var manuf = 0;
[21:58:44.234]        // -> [manuf <= 0x00000000]
[21:58:44.234]      __var isMSPM0G1X0X_G3X0X = 0;
[21:58:44.234]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:58:44.234]      __var isProduction = 0;
[21:58:44.234]        // -> [isProduction <= 0x00000000]
[21:58:44.234]      __var continueId = 0;
[21:58:44.234]        // -> [continueId <= 0x00000000]
[21:58:44.234]      deviceID =   Read32(0x41C40004);
[21:58:44.242]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:58:44.242]        // -> [deviceID <= 0x2BB8802F]
[21:58:44.242]      version = deviceID >> 28;
[21:58:44.242]        // -> [version <= 0x00000002]
[21:58:44.242]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:58:44.242]        // -> [partNum <= 0x0000BB88]
[21:58:44.242]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:58:44.242]        // -> [manuf <= 0x00000017]
[21:58:44.242]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:58:44.242]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:58:44.242]      isProduction = (version > 0);
[21:58:44.242]        // -> [isProduction <= 0x00000001]
[21:58:44.242]    </block>
[21:58:44.242]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:58:44.242]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:58:44.242]        // =>  FALSE
[21:58:44.242]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:58:44.242]    </control>
[21:58:44.242]    <control if="continueId == 4" while="" timeout="0" info="">
[21:58:44.242]      // if-block "continueId == 4"
[21:58:44.242]        // =>  FALSE
[21:58:44.242]      // skip if-block "continueId == 4"
[21:58:44.242]    </control>
[21:58:44.242]    <control if="!isProduction" while="" timeout="0" info="">
[21:58:44.242]      // if-block "!isProduction"
[21:58:44.242]        // =>  FALSE
[21:58:44.242]      // skip if-block "!isProduction"
[21:58:44.242]    </control>
[21:58:44.242]  </sequence>
[21:58:44.242]  
[21:59:12.070]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:59:12.070]  
[21:59:12.079]  <debugvars>
[21:59:12.079]    // Pre-defined
[21:59:12.079]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:12.079]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:12.079]    __dp=0x00000000
[21:59:12.079]    __ap=0x00000000
[21:59:12.079]    __traceout=0x00000000      (Trace Disabled)
[21:59:12.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:12.079]    __FlashAddr=0x00000000
[21:59:12.079]    __FlashLen=0x00000000
[21:59:12.079]    __FlashArg=0x00000000
[21:59:12.079]    __FlashOp=0x00000000
[21:59:12.079]    __Result=0x00000000
[21:59:12.079]  </debugvars>
[21:59:12.079]  
[21:59:12.079]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:59:12.079]    <block atomic="false" info="">
[21:59:12.079]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:59:12.079]        // -> [isSWJ <= 0x00000001]
[21:59:12.079]      __var hasDormant = __protocol & 0x00020000;
[21:59:12.079]        // -> [hasDormant <= 0x00000000]
[21:59:12.079]      __var protType   = __protocol & 0x0000FFFF;
[21:59:12.079]        // -> [protType <= 0x00000002]
[21:59:12.079]    </block>
[21:59:12.079]    <control if="protType == 1" while="" timeout="0" info="">
[21:59:12.079]      // if-block "protType == 1"
[21:59:12.079]        // =>  FALSE
[21:59:12.079]      // skip if-block "protType == 1"
[21:59:12.082]    </control>
[21:59:12.082]    <control if="protType == 2" while="" timeout="0" info="">
[21:59:12.082]      // if-block "protType == 2"
[21:59:12.082]        // =>  TRUE
[21:59:12.082]      <control if="isSWJ" while="" timeout="0" info="">
[21:59:12.082]        // if-block "isSWJ"
[21:59:12.082]          // =>  TRUE
[21:59:12.082]        <control if="hasDormant" while="" timeout="0" info="">
[21:59:12.082]          // if-block "hasDormant"
[21:59:12.082]            // =>  FALSE
[21:59:12.082]          // skip if-block "hasDormant"
[21:59:12.082]        </control>
[21:59:12.082]        <control if="!hasDormant" while="" timeout="0" info="">
[21:59:12.082]          // if-block "!hasDormant"
[21:59:12.082]            // =>  TRUE
[21:59:12.082]          <block atomic="false" info="">
[21:59:12.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:59:12.084]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:12.084]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:59:12.086]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:59:12.086]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:59:12.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:12.086]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:59:12.086]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:59:12.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:59:12.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:12.089]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:59:12.089]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:59:12.089]          </block>
[21:59:12.089]          // end if-block "!hasDormant"
[21:59:12.089]        </control>
[21:59:12.089]        // end if-block "isSWJ"
[21:59:12.089]      </control>
[21:59:12.089]      <control if="!isSWJ" while="" timeout="0" info="">
[21:59:12.089]        // if-block "!isSWJ"
[21:59:12.089]          // =>  FALSE
[21:59:12.093]        // skip if-block "!isSWJ"
[21:59:12.093]      </control>
[21:59:12.093]      <block atomic="false" info="">
[21:59:12.093]        ReadDP(0x0);
[21:59:12.094]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:59:12.094]      </block>
[21:59:12.094]      // end if-block "protType == 2"
[21:59:12.094]    </control>
[21:59:12.094]  </sequence>
[21:59:12.094]  
[21:59:12.098]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:59:12.098]  
[21:59:12.098]  <debugvars>
[21:59:12.098]    // Pre-defined
[21:59:12.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:12.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:12.100]    __dp=0x00000000
[21:59:12.100]    __ap=0x00000000
[21:59:12.100]    __traceout=0x00000000      (Trace Disabled)
[21:59:12.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:12.100]    __FlashAddr=0x00000000
[21:59:12.100]    __FlashLen=0x00000000
[21:59:12.100]    __FlashArg=0x00000000
[21:59:12.100]    __FlashOp=0x00000000
[21:59:12.100]    __Result=0x00000000
[21:59:12.100]  </debugvars>
[21:59:12.100]  
[21:59:12.100]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:59:12.100]    <block atomic="false" info="">
[21:59:12.100]      __var SW_DP_ABORT       = 0x0;
[21:59:12.100]        // -> [SW_DP_ABORT <= 0x00000000]
[21:59:12.100]      __var DP_CTRL_STAT      = 0x4;
[21:59:12.100]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:59:12.102]      __var DP_SELECT         = 0x8;
[21:59:12.102]        // -> [DP_SELECT <= 0x00000008]
[21:59:12.102]      __var powered_down      = 0;
[21:59:12.102]        // -> [powered_down <= 0x00000000]
[21:59:12.102]      WriteDP(DP_SELECT, 0x00000000);
[21:59:12.102]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:59:12.102]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:59:12.104]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:59:12.104]        // -> [powered_down <= 0x00000001]
[21:59:12.104]    </block>
[21:59:12.106]    <control if="powered_down" while="" timeout="0" info="">
[21:59:12.106]      // if-block "powered_down"
[21:59:12.106]        // =>  TRUE
[21:59:12.106]      <block atomic="false" info="">
[21:59:12.106]        Message(0, "Debug/System power-up request sent");
[21:59:12.106]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:59:12.110]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:59:12.110]      </block>
[21:59:12.110]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:59:12.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:59:12.110]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:59:12.110]        // while-condition  =>  FALSE
[21:59:12.110]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:59:12.110]      </control>
[21:59:12.110]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:59:12.110]        // if-block "(__protocol & 0xFFFF) == 1"
[21:59:12.110]          // =>  FALSE
[21:59:12.110]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:59:12.110]      </control>
[21:59:12.110]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:59:12.110]        // if-block "(__protocol & 0xFFFF) == 2"
[21:59:12.110]          // =>  TRUE
[21:59:12.110]        <block atomic="false" info="">
[21:59:12.110]          Message(0, "executing SWD power up");
[21:59:12.114]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:59:12.118]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:59:12.118]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:59:12.118]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:59:12.118]        </block>
[21:59:12.118]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:59:12.118]      </control>
[21:59:12.118]      // end if-block "powered_down"
[21:59:12.118]    </control>
[21:59:12.118]    <block atomic="false" info="">
[21:59:12.118]      __var DEBUG_PORT_VAL    = 0;
[21:59:12.118]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:59:12.118]      __var ACCESS_POINT_VAL  = 0;
[21:59:12.118]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:59:12.118]      __ap = 1; 
[21:59:12.118]        // -> [__ap <= 0x00000001]
[21:59:12.118]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:59:12.125]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:59:12.125]      __ap = 4;
[21:59:12.125]        // -> [__ap <= 0x00000004]
[21:59:12.125]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:12.129]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:59:12.129]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:59:12.129]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:12.131]    </block>
[21:59:12.131]    <block atomic="false" info="">
[21:59:12.131]      __var nReset = 0x80;
[21:59:12.131]        // -> [nReset <= 0x00000080]
[21:59:12.131]      __var canReadPins = 0;
[21:59:12.131]        // -> [canReadPins <= 0x00000000]
[21:59:12.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:59:12.131]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:59:12.131]        // -> [canReadPins <= 0x00000001]
[21:59:12.131]    </block>
[21:59:12.131]    <control if="" while="1" timeout="200" info="">
[21:59:12.131]      // while "1"  (timeout="200")
[21:59:12.131]      // while-condition  =>  TRUE
[21:59:12.131]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.134]      // while-condition  =>  TRUE
[21:59:12.134]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.136]      // while "1"  (timeout="200")
[21:59:12.136]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.137]      // while-condition  =>  TRUE
[21:59:12.137]      // while "1"  (timeout="200")
[21:59:12.139]      // while-condition  =>  TRUE
[21:59:12.139]      // while "1"  (timeout="200")
[21:59:12.139]      // while-condition  =>  TRUE
[21:59:12.139]      // while "1"  (timeout="200")
[21:59:12.139]      // while-condition  =>  TRUE
[21:59:12.139]      // while "1"  (timeout="200")
[21:59:12.139]      // while-condition  =>  TRUE
[21:59:12.139]      // while "1"  (timeout="200")
[21:59:12.139]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.140]      // while-condition  =>  TRUE
[21:59:12.140]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.142]      // while "1"  (timeout="200")
[21:59:12.142]      // while-condition  =>  TRUE
[21:59:12.144]      // while "1"  (timeout="200")
[21:59:12.144]      // while  =>  TIMEOUT
[21:59:12.144]      // end while "1"
[21:59:12.144]    </control>
[21:59:12.144]    <control if="canReadPins" while="" timeout="0" info="">
[21:59:12.144]      // if-block "canReadPins"
[21:59:12.144]        // =>  TRUE
[21:59:12.144]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:59:12.144]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:59:12.147]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:59:12.147]        // while-condition  =>  FALSE
[21:59:12.147]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:59:12.147]      </control>
[21:59:12.147]      // end if-block "canReadPins"
[21:59:12.147]    </control>
[21:59:12.147]    <control if="!canReadPins" while="" timeout="0" info="">
[21:59:12.147]      // if-block "!canReadPins"
[21:59:12.147]        // =>  FALSE
[21:59:12.147]      // skip if-block "!canReadPins"
[21:59:12.147]    </control>
[21:59:12.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:59:12.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:12.150]        // =>  TRUE
[21:59:12.150]      <block atomic="false" info="">
[21:59:12.150]        WriteAP(0x00, 0x190008);
[21:59:12.151]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:12.151]        WriteAP(0xF0, 0x01);
[21:59:12.155]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:12.155]      </block>
[21:59:12.155]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:12.155]    </control>
[21:59:12.155]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:59:12.155]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:12.155]        // =>  FALSE
[21:59:12.155]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:12.155]    </control>
[21:59:12.155]    <block atomic="false" info="">
[21:59:12.155]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:12.159]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:59:12.159]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:59:12.159]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:12.159]      __ap = 0; //lets make sure we reset the access point selection
[21:59:12.159]        // -> [__ap <= 0x00000000]
[21:59:12.159]    </block>
[21:59:12.159]  </sequence>
[21:59:12.159]  
[21:59:12.178]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:59:12.178]  
[21:59:12.178]  <debugvars>
[21:59:12.178]    // Pre-defined
[21:59:12.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:12.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:12.178]    __dp=0x00000000
[21:59:12.178]    __ap=0x00000000
[21:59:12.178]    __traceout=0x00000000      (Trace Disabled)
[21:59:12.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:12.178]    __FlashAddr=0x00000000
[21:59:12.178]    __FlashLen=0x00000000
[21:59:12.178]    __FlashArg=0x00000000
[21:59:12.178]    __FlashOp=0x00000000
[21:59:12.182]    __Result=0x00000000
[21:59:12.182]  </debugvars>
[21:59:12.182]  
[21:59:12.182]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:59:12.182]    <block atomic="false" info="">
[21:59:12.182]      __var deviceID = 0;
[21:59:12.182]        // -> [deviceID <= 0x00000000]
[21:59:12.182]      __var version = 0;
[21:59:12.184]        // -> [version <= 0x00000000]
[21:59:12.184]      __var partNum = 0;
[21:59:12.184]        // -> [partNum <= 0x00000000]
[21:59:12.184]      __var manuf = 0;
[21:59:12.184]        // -> [manuf <= 0x00000000]
[21:59:12.184]      __var isMSPM0G1X0X_G3X0X = 0;
[21:59:12.184]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:59:12.185]      __var isProduction = 0;
[21:59:12.185]        // -> [isProduction <= 0x00000000]
[21:59:12.185]      __var continueId = 0;
[21:59:12.185]        // -> [continueId <= 0x00000000]
[21:59:12.185]      deviceID =   Read32(0x41C40004);
[21:59:12.188]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:59:12.188]        // -> [deviceID <= 0x2BB8802F]
[21:59:12.188]      version = deviceID >> 28;
[21:59:12.188]        // -> [version <= 0x00000002]
[21:59:12.188]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:59:12.188]        // -> [partNum <= 0x0000BB88]
[21:59:12.188]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:59:12.188]        // -> [manuf <= 0x00000017]
[21:59:12.188]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:59:12.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:59:12.188]      isProduction = (version > 0);
[21:59:12.188]        // -> [isProduction <= 0x00000001]
[21:59:12.188]    </block>
[21:59:12.188]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:59:12.191]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:59:12.191]        // =>  FALSE
[21:59:12.191]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:59:12.191]    </control>
[21:59:12.191]    <control if="continueId == 4" while="" timeout="0" info="">
[21:59:12.191]      // if-block "continueId == 4"
[21:59:12.191]        // =>  FALSE
[21:59:12.191]      // skip if-block "continueId == 4"
[21:59:12.191]    </control>
[21:59:12.191]    <control if="!isProduction" while="" timeout="0" info="">
[21:59:12.191]      // if-block "!isProduction"
[21:59:12.191]        // =>  FALSE
[21:59:12.191]      // skip if-block "!isProduction"
[21:59:12.191]    </control>
[21:59:12.191]  </sequence>
[21:59:12.191]  
[21:59:38.385]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:59:38.385]  
[21:59:38.385]  <debugvars>
[21:59:38.385]    // Pre-defined
[21:59:38.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:38.385]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:38.385]    __dp=0x00000000
[21:59:38.389]    __ap=0x00000000
[21:59:38.389]    __traceout=0x00000000      (Trace Disabled)
[21:59:38.389]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:38.389]    __FlashAddr=0x00000000
[21:59:38.389]    __FlashLen=0x00000000
[21:59:38.389]    __FlashArg=0x00000000
[21:59:38.389]    __FlashOp=0x00000000
[21:59:38.389]    __Result=0x00000000
[21:59:38.389]  </debugvars>
[21:59:38.389]  
[21:59:38.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:59:38.389]    <block atomic="false" info="">
[21:59:38.391]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:59:38.391]        // -> [isSWJ <= 0x00000001]
[21:59:38.391]      __var hasDormant = __protocol & 0x00020000;
[21:59:38.391]        // -> [hasDormant <= 0x00000000]
[21:59:38.391]      __var protType   = __protocol & 0x0000FFFF;
[21:59:38.391]        // -> [protType <= 0x00000002]
[21:59:38.391]    </block>
[21:59:38.391]    <control if="protType == 1" while="" timeout="0" info="">
[21:59:38.391]      // if-block "protType == 1"
[21:59:38.391]        // =>  FALSE
[21:59:38.391]      // skip if-block "protType == 1"
[21:59:38.391]    </control>
[21:59:38.391]    <control if="protType == 2" while="" timeout="0" info="">
[21:59:38.391]      // if-block "protType == 2"
[21:59:38.392]        // =>  TRUE
[21:59:38.392]      <control if="isSWJ" while="" timeout="0" info="">
[21:59:38.392]        // if-block "isSWJ"
[21:59:38.392]          // =>  TRUE
[21:59:38.392]        <control if="hasDormant" while="" timeout="0" info="">
[21:59:38.392]          // if-block "hasDormant"
[21:59:38.392]            // =>  FALSE
[21:59:38.392]          // skip if-block "hasDormant"
[21:59:38.392]        </control>
[21:59:38.392]        <control if="!hasDormant" while="" timeout="0" info="">
[21:59:38.392]          // if-block "!hasDormant"
[21:59:38.392]            // =>  TRUE
[21:59:38.393]          <block atomic="false" info="">
[21:59:38.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:59:38.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:38.397]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:59:38.397]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:59:38.397]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:59:38.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:38.397]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:59:38.401]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:59:38.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:59:38.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:38.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:59:38.404]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:59:38.404]          </block>
[21:59:38.404]          // end if-block "!hasDormant"
[21:59:38.404]        </control>
[21:59:38.404]        // end if-block "isSWJ"
[21:59:38.404]      </control>
[21:59:38.404]      <control if="!isSWJ" while="" timeout="0" info="">
[21:59:38.405]        // if-block "!isSWJ"
[21:59:38.405]          // =>  FALSE
[21:59:38.405]        // skip if-block "!isSWJ"
[21:59:38.405]      </control>
[21:59:38.405]      <block atomic="false" info="">
[21:59:38.405]        ReadDP(0x0);
[21:59:38.405]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:59:38.405]      </block>
[21:59:38.405]      // end if-block "protType == 2"
[21:59:38.405]    </control>
[21:59:38.405]  </sequence>
[21:59:38.405]  
[21:59:38.411]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:59:38.411]  
[21:59:38.411]  <debugvars>
[21:59:38.411]    // Pre-defined
[21:59:38.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:38.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:38.411]    __dp=0x00000000
[21:59:38.411]    __ap=0x00000000
[21:59:38.411]    __traceout=0x00000000      (Trace Disabled)
[21:59:38.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:38.413]    __FlashAddr=0x00000000
[21:59:38.413]    __FlashLen=0x00000000
[21:59:38.413]    __FlashArg=0x00000000
[21:59:38.413]    __FlashOp=0x00000000
[21:59:38.413]    __Result=0x00000000
[21:59:38.413]  </debugvars>
[21:59:38.413]  
[21:59:38.413]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:59:38.413]    <block atomic="false" info="">
[21:59:38.413]      __var SW_DP_ABORT       = 0x0;
[21:59:38.413]        // -> [SW_DP_ABORT <= 0x00000000]
[21:59:38.413]      __var DP_CTRL_STAT      = 0x4;
[21:59:38.413]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:59:38.413]      __var DP_SELECT         = 0x8;
[21:59:38.413]        // -> [DP_SELECT <= 0x00000008]
[21:59:38.413]      __var powered_down      = 0;
[21:59:38.413]        // -> [powered_down <= 0x00000000]
[21:59:38.413]      WriteDP(DP_SELECT, 0x00000000);
[21:59:38.416]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:59:38.416]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:59:38.419]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:59:38.419]        // -> [powered_down <= 0x00000001]
[21:59:38.419]    </block>
[21:59:38.419]    <control if="powered_down" while="" timeout="0" info="">
[21:59:38.419]      // if-block "powered_down"
[21:59:38.419]        // =>  TRUE
[21:59:38.419]      <block atomic="false" info="">
[21:59:38.419]        Message(0, "Debug/System power-up request sent");
[21:59:38.422]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:59:38.422]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:59:38.422]      </block>
[21:59:38.422]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:59:38.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:59:38.422]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:59:38.422]        // while-condition  =>  FALSE
[21:59:38.422]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:59:38.422]      </control>
[21:59:38.422]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:59:38.426]        // if-block "(__protocol & 0xFFFF) == 1"
[21:59:38.426]          // =>  FALSE
[21:59:38.426]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:59:38.426]      </control>
[21:59:38.426]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:59:38.426]        // if-block "(__protocol & 0xFFFF) == 2"
[21:59:38.426]          // =>  TRUE
[21:59:38.426]        <block atomic="false" info="">
[21:59:38.426]          Message(0, "executing SWD power up");
[21:59:38.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:59:38.430]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:59:38.430]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:59:38.431]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:59:38.431]        </block>
[21:59:38.431]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:59:38.431]      </control>
[21:59:38.431]      // end if-block "powered_down"
[21:59:38.431]    </control>
[21:59:38.431]    <block atomic="false" info="">
[21:59:38.431]      __var DEBUG_PORT_VAL    = 0;
[21:59:38.431]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:59:38.431]      __var ACCESS_POINT_VAL  = 0;
[21:59:38.431]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:59:38.431]      __ap = 1; 
[21:59:38.431]        // -> [__ap <= 0x00000001]
[21:59:38.431]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:59:38.434]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:59:38.434]      __ap = 4;
[21:59:38.434]        // -> [__ap <= 0x00000004]
[21:59:38.434]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:38.440]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:59:38.440]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:59:38.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:38.442]    </block>
[21:59:38.442]    <block atomic="false" info="">
[21:59:38.442]      __var nReset = 0x80;
[21:59:38.442]        // -> [nReset <= 0x00000080]
[21:59:38.442]      __var canReadPins = 0;
[21:59:38.442]        // -> [canReadPins <= 0x00000000]
[21:59:38.442]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:59:38.444]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:59:38.444]        // -> [canReadPins <= 0x00000001]
[21:59:38.444]    </block>
[21:59:38.444]    <control if="" while="1" timeout="200" info="">
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.444]      // while-condition  =>  TRUE
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.444]      // while-condition  =>  TRUE
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.444]      // while-condition  =>  TRUE
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.444]      // while-condition  =>  TRUE
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.444]      // while-condition  =>  TRUE
[21:59:38.444]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.446]      // while "1"  (timeout="200")
[21:59:38.446]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.447]      // while-condition  =>  TRUE
[21:59:38.447]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.449]      // while "1"  (timeout="200")
[21:59:38.449]      // while-condition  =>  TRUE
[21:59:38.451]      // while "1"  (timeout="200")
[21:59:38.451]      // while-condition  =>  TRUE
[21:59:38.451]      // while "1"  (timeout="200")
[21:59:38.451]      // while-condition  =>  TRUE
[21:59:38.451]      // while "1"  (timeout="200")
[21:59:38.451]      // while-condition  =>  TRUE
[21:59:38.451]      // while "1"  (timeout="200")
[21:59:38.451]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.452]      // while "1"  (timeout="200")
[21:59:38.452]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.454]      // while "1"  (timeout="200")
[21:59:38.454]      // while-condition  =>  TRUE
[21:59:38.458]      // while "1"  (timeout="200")
[21:59:38.458]      // while  =>  TIMEOUT
[21:59:38.458]      // end while "1"
[21:59:38.458]    </control>
[21:59:38.458]    <control if="canReadPins" while="" timeout="0" info="">
[21:59:38.458]      // if-block "canReadPins"
[21:59:38.458]        // =>  TRUE
[21:59:38.458]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:59:38.458]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:59:38.458]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:59:38.458]        // while-condition  =>  FALSE
[21:59:38.461]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:59:38.461]      </control>
[21:59:38.461]      // end if-block "canReadPins"
[21:59:38.461]    </control>
[21:59:38.461]    <control if="!canReadPins" while="" timeout="0" info="">
[21:59:38.461]      // if-block "!canReadPins"
[21:59:38.461]        // =>  FALSE
[21:59:38.461]      // skip if-block "!canReadPins"
[21:59:38.462]    </control>
[21:59:38.462]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:59:38.462]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:38.462]        // =>  TRUE
[21:59:38.462]      <block atomic="false" info="">
[21:59:38.462]        WriteAP(0x00, 0x190008);
[21:59:38.462]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:38.462]        WriteAP(0xF0, 0x01);
[21:59:38.468]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:38.468]      </block>
[21:59:38.468]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:38.468]    </control>
[21:59:38.468]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:59:38.468]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:38.468]        // =>  FALSE
[21:59:38.468]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:38.468]    </control>
[21:59:38.468]    <block atomic="false" info="">
[21:59:38.468]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:38.487]  
[21:59:38.487]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[21:59:38.487]  
[21:59:38.488]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:59:38.488]    </block>
[21:59:38.488]  </sequence>
[21:59:38.488]  
[21:59:46.122]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:59:46.122]  
[21:59:46.134]  <debugvars>
[21:59:46.134]    // Pre-defined
[21:59:46.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:46.134]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:46.134]    __dp=0x00000000
[21:59:46.134]    __ap=0x00000000
[21:59:46.134]    __traceout=0x00000000      (Trace Disabled)
[21:59:46.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:46.134]    __FlashAddr=0x00000000
[21:59:46.134]    __FlashLen=0x00000000
[21:59:46.134]    __FlashArg=0x00000000
[21:59:46.135]    __FlashOp=0x00000000
[21:59:46.135]    __Result=0x00000000
[21:59:46.135]  </debugvars>
[21:59:46.135]  
[21:59:46.135]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:59:46.135]    <block atomic="false" info="">
[21:59:46.135]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:59:46.135]        // -> [isSWJ <= 0x00000001]
[21:59:46.135]      __var hasDormant = __protocol & 0x00020000;
[21:59:46.135]        // -> [hasDormant <= 0x00000000]
[21:59:46.135]      __var protType   = __protocol & 0x0000FFFF;
[21:59:46.135]        // -> [protType <= 0x00000002]
[21:59:46.135]    </block>
[21:59:46.135]    <control if="protType == 1" while="" timeout="0" info="">
[21:59:46.135]      // if-block "protType == 1"
[21:59:46.135]        // =>  FALSE
[21:59:46.135]      // skip if-block "protType == 1"
[21:59:46.135]    </control>
[21:59:46.135]    <control if="protType == 2" while="" timeout="0" info="">
[21:59:46.135]      // if-block "protType == 2"
[21:59:46.135]        // =>  TRUE
[21:59:46.135]      <control if="isSWJ" while="" timeout="0" info="">
[21:59:46.135]        // if-block "isSWJ"
[21:59:46.135]          // =>  TRUE
[21:59:46.135]        <control if="hasDormant" while="" timeout="0" info="">
[21:59:46.135]          // if-block "hasDormant"
[21:59:46.135]            // =>  FALSE
[21:59:46.135]          // skip if-block "hasDormant"
[21:59:46.135]        </control>
[21:59:46.135]        <control if="!hasDormant" while="" timeout="0" info="">
[21:59:46.135]          // if-block "!hasDormant"
[21:59:46.135]            // =>  TRUE
[21:59:46.135]          <block atomic="false" info="">
[21:59:46.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:59:46.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:46.139]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:59:46.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:59:46.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:59:46.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:46.143]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:59:46.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:59:46.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:59:46.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:59:46.147]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:59:46.147]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:59:46.151]          </block>
[21:59:46.151]          // end if-block "!hasDormant"
[21:59:46.151]        </control>
[21:59:46.151]        // end if-block "isSWJ"
[21:59:46.151]      </control>
[21:59:46.151]      <control if="!isSWJ" while="" timeout="0" info="">
[21:59:46.151]        // if-block "!isSWJ"
[21:59:46.151]          // =>  FALSE
[21:59:46.151]        // skip if-block "!isSWJ"
[21:59:46.151]      </control>
[21:59:46.151]      <block atomic="false" info="">
[21:59:46.151]        ReadDP(0x0);
[21:59:46.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:59:46.151]      </block>
[21:59:46.151]      // end if-block "protType == 2"
[21:59:46.151]    </control>
[21:59:46.151]  </sequence>
[21:59:46.151]  
[21:59:46.155]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:59:46.155]  
[21:59:46.155]  <debugvars>
[21:59:46.155]    // Pre-defined
[21:59:46.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:46.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:46.155]    __dp=0x00000000
[21:59:46.155]    __ap=0x00000000
[21:59:46.155]    __traceout=0x00000000      (Trace Disabled)
[21:59:46.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:46.155]    __FlashAddr=0x00000000
[21:59:46.155]    __FlashLen=0x00000000
[21:59:46.159]    __FlashArg=0x00000000
[21:59:46.159]    __FlashOp=0x00000000
[21:59:46.159]    __Result=0x00000000
[21:59:46.159]  </debugvars>
[21:59:46.159]  
[21:59:46.159]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:59:46.159]    <block atomic="false" info="">
[21:59:46.159]      __var SW_DP_ABORT       = 0x0;
[21:59:46.159]        // -> [SW_DP_ABORT <= 0x00000000]
[21:59:46.159]      __var DP_CTRL_STAT      = 0x4;
[21:59:46.159]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:59:46.159]      __var DP_SELECT         = 0x8;
[21:59:46.159]        // -> [DP_SELECT <= 0x00000008]
[21:59:46.159]      __var powered_down      = 0;
[21:59:46.159]        // -> [powered_down <= 0x00000000]
[21:59:46.159]      WriteDP(DP_SELECT, 0x00000000);
[21:59:46.159]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:59:46.159]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:59:46.163]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:59:46.163]        // -> [powered_down <= 0x00000001]
[21:59:46.163]    </block>
[21:59:46.163]    <control if="powered_down" while="" timeout="0" info="">
[21:59:46.163]      // if-block "powered_down"
[21:59:46.163]        // =>  TRUE
[21:59:46.163]      <block atomic="false" info="">
[21:59:46.163]        Message(0, "Debug/System power-up request sent");
[21:59:46.163]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:59:46.168]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:59:46.169]      </block>
[21:59:46.169]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:59:46.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:59:46.170]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:59:46.170]        // while-condition  =>  FALSE
[21:59:46.170]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:59:46.170]      </control>
[21:59:46.172]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:59:46.172]        // if-block "(__protocol & 0xFFFF) == 1"
[21:59:46.172]          // =>  FALSE
[21:59:46.172]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:59:46.172]      </control>
[21:59:46.172]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:59:46.172]        // if-block "(__protocol & 0xFFFF) == 2"
[21:59:46.173]          // =>  TRUE
[21:59:46.173]        <block atomic="false" info="">
[21:59:46.173]          Message(0, "executing SWD power up");
[21:59:46.174]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:59:46.176]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:59:46.176]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:59:46.180]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:59:46.180]        </block>
[21:59:46.180]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:59:46.180]      </control>
[21:59:46.180]      // end if-block "powered_down"
[21:59:46.180]    </control>
[21:59:46.180]    <block atomic="false" info="">
[21:59:46.180]      __var DEBUG_PORT_VAL    = 0;
[21:59:46.180]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:59:46.180]      __var ACCESS_POINT_VAL  = 0;
[21:59:46.180]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:59:46.180]      __ap = 1; 
[21:59:46.180]        // -> [__ap <= 0x00000001]
[21:59:46.180]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:59:46.185]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:59:46.185]      __ap = 4;
[21:59:46.185]        // -> [__ap <= 0x00000004]
[21:59:46.185]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:46.189]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:59:46.189]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:59:46.189]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:46.190]    </block>
[21:59:46.190]    <block atomic="false" info="">
[21:59:46.190]      __var nReset = 0x80;
[21:59:46.190]        // -> [nReset <= 0x00000080]
[21:59:46.190]      __var canReadPins = 0;
[21:59:46.190]        // -> [canReadPins <= 0x00000000]
[21:59:46.190]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:59:46.192]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:59:46.192]        // -> [canReadPins <= 0x00000001]
[21:59:46.192]    </block>
[21:59:46.192]    <control if="" while="1" timeout="200" info="">
[21:59:46.192]      // while "1"  (timeout="200")
[21:59:46.192]      // while-condition  =>  TRUE
[21:59:46.192]      // while "1"  (timeout="200")
[21:59:46.192]      // while-condition  =>  TRUE
[21:59:46.192]      // while "1"  (timeout="200")
[21:59:46.192]      // while-condition  =>  TRUE
[21:59:46.192]      // while "1"  (timeout="200")
[21:59:46.192]      // while-condition  =>  TRUE
[21:59:46.192]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.196]      // while-condition  =>  TRUE
[21:59:46.196]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.200]      // while "1"  (timeout="200")
[21:59:46.200]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.203]      // while-condition  =>  TRUE
[21:59:46.203]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.205]      // while-condition  =>  TRUE
[21:59:46.205]      // while "1"  (timeout="200")
[21:59:46.209]      // while-condition  =>  TRUE
[21:59:46.209]      // while "1"  (timeout="200")
[21:59:46.209]      // while  =>  TIMEOUT
[21:59:46.209]      // end while "1"
[21:59:46.209]    </control>
[21:59:46.209]    <control if="canReadPins" while="" timeout="0" info="">
[21:59:46.209]      // if-block "canReadPins"
[21:59:46.209]        // =>  TRUE
[21:59:46.209]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:59:46.209]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:59:46.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:59:46.209]        // while-condition  =>  FALSE
[21:59:46.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:59:46.209]      </control>
[21:59:46.209]      // end if-block "canReadPins"
[21:59:46.209]    </control>
[21:59:46.209]    <control if="!canReadPins" while="" timeout="0" info="">
[21:59:46.209]      // if-block "!canReadPins"
[21:59:46.209]        // =>  FALSE
[21:59:46.213]      // skip if-block "!canReadPins"
[21:59:46.213]    </control>
[21:59:46.213]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:59:46.213]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:46.213]        // =>  TRUE
[21:59:46.213]      <block atomic="false" info="">
[21:59:46.213]        WriteAP(0x00, 0x190008);
[21:59:46.215]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:46.215]        WriteAP(0xF0, 0x01);
[21:59:46.219]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:59:46.219]      </block>
[21:59:46.219]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:59:46.219]    </control>
[21:59:46.219]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:59:46.219]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:46.219]        // =>  FALSE
[21:59:46.220]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:59:46.220]    </control>
[21:59:46.220]    <block atomic="false" info="">
[21:59:46.220]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:59:46.224]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:59:46.224]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:59:46.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:59:46.224]      __ap = 0; //lets make sure we reset the access point selection
[21:59:46.224]        // -> [__ap <= 0x00000000]
[21:59:46.226]    </block>
[21:59:46.226]  </sequence>
[21:59:46.226]  
[21:59:46.249]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:59:46.249]  
[21:59:46.249]  <debugvars>
[21:59:46.249]    // Pre-defined
[21:59:46.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:59:46.250]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:59:46.250]    __dp=0x00000000
[21:59:46.250]    __ap=0x00000000
[21:59:46.250]    __traceout=0x00000000      (Trace Disabled)
[21:59:46.250]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:59:46.250]    __FlashAddr=0x00000000
[21:59:46.250]    __FlashLen=0x00000000
[21:59:46.250]    __FlashArg=0x00000000
[21:59:46.250]    __FlashOp=0x00000000
[21:59:46.251]    __Result=0x00000000
[21:59:46.251]  </debugvars>
[21:59:46.251]  
[21:59:46.251]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:59:46.251]    <block atomic="false" info="">
[21:59:46.251]      __var deviceID = 0;
[21:59:46.251]        // -> [deviceID <= 0x00000000]
[21:59:46.251]      __var version = 0;
[21:59:46.251]        // -> [version <= 0x00000000]
[21:59:46.251]      __var partNum = 0;
[21:59:46.251]        // -> [partNum <= 0x00000000]
[21:59:46.251]      __var manuf = 0;
[21:59:46.252]        // -> [manuf <= 0x00000000]
[21:59:46.252]      __var isMSPM0G1X0X_G3X0X = 0;
[21:59:46.252]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:59:46.252]      __var isProduction = 0;
[21:59:46.252]        // -> [isProduction <= 0x00000000]
[21:59:46.252]      __var continueId = 0;
[21:59:46.252]        // -> [continueId <= 0x00000000]
[21:59:46.252]      deviceID =   Read32(0x41C40004);
[21:59:46.258]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:59:46.258]        // -> [deviceID <= 0x2BB8802F]
[21:59:46.258]      version = deviceID >> 28;
[21:59:46.258]        // -> [version <= 0x00000002]
[21:59:46.258]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:59:46.258]        // -> [partNum <= 0x0000BB88]
[21:59:46.258]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:59:46.259]        // -> [manuf <= 0x00000017]
[21:59:46.259]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:59:46.259]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:59:46.259]      isProduction = (version > 0);
[21:59:46.259]        // -> [isProduction <= 0x00000001]
[21:59:46.259]    </block>
[21:59:46.259]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:59:46.259]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:59:46.259]        // =>  FALSE
[21:59:46.259]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:59:46.259]    </control>
[21:59:46.259]    <control if="continueId == 4" while="" timeout="0" info="">
[21:59:46.260]      // if-block "continueId == 4"
[21:59:46.260]        // =>  FALSE
[21:59:46.260]      // skip if-block "continueId == 4"
[21:59:46.260]    </control>
[21:59:46.260]    <control if="!isProduction" while="" timeout="0" info="">
[21:59:46.260]      // if-block "!isProduction"
[21:59:46.260]        // =>  FALSE
[21:59:46.260]      // skip if-block "!isProduction"
[21:59:46.260]    </control>
[21:59:46.260]  </sequence>
[21:59:46.260]  
[22:00:07.606]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:00:07.606]  
[22:00:07.606]  <debugvars>
[22:00:07.606]    // Pre-defined
[22:00:07.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:07.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:07.606]    __dp=0x00000000
[22:00:07.606]    __ap=0x00000000
[22:00:07.606]    __traceout=0x00000000      (Trace Disabled)
[22:00:07.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:07.606]    __FlashAddr=0x00000000
[22:00:07.606]    __FlashLen=0x00000000
[22:00:07.606]    __FlashArg=0x00000000
[22:00:07.606]    __FlashOp=0x00000000
[22:00:07.606]    __Result=0x00000000
[22:00:07.606]  </debugvars>
[22:00:07.606]  
[22:00:07.606]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:00:07.606]    <block atomic="false" info="">
[22:00:07.606]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:00:07.606]        // -> [isSWJ <= 0x00000001]
[22:00:07.606]      __var hasDormant = __protocol & 0x00020000;
[22:00:07.606]        // -> [hasDormant <= 0x00000000]
[22:00:07.610]      __var protType   = __protocol & 0x0000FFFF;
[22:00:07.610]        // -> [protType <= 0x00000002]
[22:00:07.610]    </block>
[22:00:07.610]    <control if="protType == 1" while="" timeout="0" info="">
[22:00:07.610]      // if-block "protType == 1"
[22:00:07.610]        // =>  FALSE
[22:00:07.610]      // skip if-block "protType == 1"
[22:00:07.610]    </control>
[22:00:07.610]    <control if="protType == 2" while="" timeout="0" info="">
[22:00:07.610]      // if-block "protType == 2"
[22:00:07.610]        // =>  TRUE
[22:00:07.610]      <control if="isSWJ" while="" timeout="0" info="">
[22:00:07.610]        // if-block "isSWJ"
[22:00:07.610]          // =>  TRUE
[22:00:07.610]        <control if="hasDormant" while="" timeout="0" info="">
[22:00:07.610]          // if-block "hasDormant"
[22:00:07.610]            // =>  FALSE
[22:00:07.610]          // skip if-block "hasDormant"
[22:00:07.610]        </control>
[22:00:07.610]        <control if="!hasDormant" while="" timeout="0" info="">
[22:00:07.610]          // if-block "!hasDormant"
[22:00:07.610]            // =>  TRUE
[22:00:07.610]          <block atomic="false" info="">
[22:00:07.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:00:07.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:07.610]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:00:07.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:00:07.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:00:07.615]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:07.615]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:00:07.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:00:07.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:00:07.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:07.622]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:00:07.622]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:00:07.622]          </block>
[22:00:07.622]          // end if-block "!hasDormant"
[22:00:07.622]        </control>
[22:00:07.622]        // end if-block "isSWJ"
[22:00:07.622]      </control>
[22:00:07.622]      <control if="!isSWJ" while="" timeout="0" info="">
[22:00:07.622]        // if-block "!isSWJ"
[22:00:07.622]          // =>  FALSE
[22:00:07.622]        // skip if-block "!isSWJ"
[22:00:07.622]      </control>
[22:00:07.622]      <block atomic="false" info="">
[22:00:07.622]        ReadDP(0x0);
[22:00:07.626]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:00:07.627]      </block>
[22:00:07.627]      // end if-block "protType == 2"
[22:00:07.627]    </control>
[22:00:07.627]  </sequence>
[22:00:07.627]  
[22:00:07.630]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:00:07.630]  
[22:00:07.630]  <debugvars>
[22:00:07.630]    // Pre-defined
[22:00:07.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:07.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:07.630]    __dp=0x00000000
[22:00:07.630]    __ap=0x00000000
[22:00:07.630]    __traceout=0x00000000      (Trace Disabled)
[22:00:07.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:07.630]    __FlashAddr=0x00000000
[22:00:07.630]    __FlashLen=0x00000000
[22:00:07.630]    __FlashArg=0x00000000
[22:00:07.630]    __FlashOp=0x00000000
[22:00:07.630]    __Result=0x00000000
[22:00:07.630]  </debugvars>
[22:00:07.630]  
[22:00:07.630]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:00:07.630]    <block atomic="false" info="">
[22:00:07.630]      __var SW_DP_ABORT       = 0x0;
[22:00:07.630]        // -> [SW_DP_ABORT <= 0x00000000]
[22:00:07.630]      __var DP_CTRL_STAT      = 0x4;
[22:00:07.630]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:00:07.630]      __var DP_SELECT         = 0x8;
[22:00:07.634]        // -> [DP_SELECT <= 0x00000008]
[22:00:07.634]      __var powered_down      = 0;
[22:00:07.634]        // -> [powered_down <= 0x00000000]
[22:00:07.634]      WriteDP(DP_SELECT, 0x00000000);
[22:00:07.634]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:00:07.634]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:00:07.640]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:00:07.640]        // -> [powered_down <= 0x00000001]
[22:00:07.640]    </block>
[22:00:07.640]    <control if="powered_down" while="" timeout="0" info="">
[22:00:07.640]      // if-block "powered_down"
[22:00:07.640]        // =>  TRUE
[22:00:07.640]      <block atomic="false" info="">
[22:00:07.640]        Message(0, "Debug/System power-up request sent");
[22:00:07.643]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:00:07.644]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:00:07.644]      </block>
[22:00:07.644]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:00:07.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:00:07.646]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:00:07.646]        // while-condition  =>  FALSE
[22:00:07.646]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:00:07.646]      </control>
[22:00:07.646]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:00:07.646]        // if-block "(__protocol & 0xFFFF) == 1"
[22:00:07.646]          // =>  FALSE
[22:00:07.648]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:00:07.648]      </control>
[22:00:07.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:00:07.648]        // if-block "(__protocol & 0xFFFF) == 2"
[22:00:07.648]          // =>  TRUE
[22:00:07.648]        <block atomic="false" info="">
[22:00:07.648]          Message(0, "executing SWD power up");
[22:00:07.648]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:00:07.652]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:00:07.652]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:00:07.653]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:00:07.653]        </block>
[22:00:07.653]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:00:07.653]      </control>
[22:00:07.653]      // end if-block "powered_down"
[22:00:07.653]    </control>
[22:00:07.653]    <block atomic="false" info="">
[22:00:07.655]      __var DEBUG_PORT_VAL    = 0;
[22:00:07.655]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:00:07.655]      __var ACCESS_POINT_VAL  = 0;
[22:00:07.655]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:00:07.655]      __ap = 1; 
[22:00:07.655]        // -> [__ap <= 0x00000001]
[22:00:07.655]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:00:07.657]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:00:07.660]      __ap = 4;
[22:00:07.660]        // -> [__ap <= 0x00000004]
[22:00:07.660]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:07.663]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:00:07.663]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:00:07.663]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:07.665]    </block>
[22:00:07.665]    <block atomic="false" info="">
[22:00:07.665]      __var nReset = 0x80;
[22:00:07.665]        // -> [nReset <= 0x00000080]
[22:00:07.665]      __var canReadPins = 0;
[22:00:07.665]        // -> [canReadPins <= 0x00000000]
[22:00:07.665]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:00:07.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:00:07.668]        // -> [canReadPins <= 0x00000001]
[22:00:07.668]    </block>
[22:00:07.668]    <control if="" while="1" timeout="200" info="">
[22:00:07.668]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.669]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.669]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.669]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.669]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.669]      // while "1"  (timeout="200")
[22:00:07.669]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.670]      // while "1"  (timeout="200")
[22:00:07.670]      // while-condition  =>  TRUE
[22:00:07.671]      // while "1"  (timeout="200")
[22:00:07.671]      // while-condition  =>  TRUE
[22:00:07.671]      // while "1"  (timeout="200")
[22:00:07.671]      // while-condition  =>  TRUE
[22:00:07.671]      // while "1"  (timeout="200")
[22:00:07.671]      // while-condition  =>  TRUE
[22:00:07.671]      // while "1"  (timeout="200")
[22:00:07.671]      // while-condition  =>  TRUE
[22:00:07.672]      // while "1"  (timeout="200")
[22:00:07.672]      // while-condition  =>  TRUE
[22:00:07.672]      // while "1"  (timeout="200")
[22:00:07.672]      // while-condition  =>  TRUE
[22:00:07.672]      // while "1"  (timeout="200")
[22:00:07.672]      // while-condition  =>  TRUE
[22:00:07.672]      // while "1"  (timeout="200")
[22:00:07.672]      // while-condition  =>  TRUE
[22:00:07.672]      // while "1"  (timeout="200")
[22:00:07.672]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.673]      // while "1"  (timeout="200")
[22:00:07.673]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.674]      // while "1"  (timeout="200")
[22:00:07.674]      // while-condition  =>  TRUE
[22:00:07.675]      // while "1"  (timeout="200")
[22:00:07.675]      // while  =>  TIMEOUT
[22:00:07.675]      // end while "1"
[22:00:07.675]    </control>
[22:00:07.675]    <control if="canReadPins" while="" timeout="0" info="">
[22:00:07.675]      // if-block "canReadPins"
[22:00:07.675]        // =>  TRUE
[22:00:07.675]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:00:07.675]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:00:07.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:00:07.678]        // while-condition  =>  FALSE
[22:00:07.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:00:07.678]      </control>
[22:00:07.678]      // end if-block "canReadPins"
[22:00:07.678]    </control>
[22:00:07.678]    <control if="!canReadPins" while="" timeout="0" info="">
[22:00:07.678]      // if-block "!canReadPins"
[22:00:07.678]        // =>  FALSE
[22:00:07.678]      // skip if-block "!canReadPins"
[22:00:07.678]    </control>
[22:00:07.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:00:07.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:07.679]        // =>  TRUE
[22:00:07.679]      <block atomic="false" info="">
[22:00:07.679]        WriteAP(0x00, 0x190008);
[22:00:07.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:07.681]        WriteAP(0xF0, 0x01);
[22:00:07.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:07.686]      </block>
[22:00:07.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:07.686]    </control>
[22:00:07.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:00:07.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:07.686]        // =>  FALSE
[22:00:07.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:07.686]    </control>
[22:00:07.686]    <block atomic="false" info="">
[22:00:07.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:07.692]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:00:07.692]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:00:07.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:07.693]      __ap = 0; //lets make sure we reset the access point selection
[22:00:07.693]        // -> [__ap <= 0x00000000]
[22:00:07.693]    </block>
[22:00:07.693]  </sequence>
[22:00:07.693]  
[22:00:07.717]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:00:07.717]  
[22:00:07.717]  <debugvars>
[22:00:07.717]    // Pre-defined
[22:00:07.717]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:07.717]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:07.717]    __dp=0x00000000
[22:00:07.717]    __ap=0x00000000
[22:00:07.717]    __traceout=0x00000000      (Trace Disabled)
[22:00:07.717]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:07.717]    __FlashAddr=0x00000000
[22:00:07.717]    __FlashLen=0x00000000
[22:00:07.717]    __FlashArg=0x00000000
[22:00:07.717]    __FlashOp=0x00000000
[22:00:07.717]    __Result=0x00000000
[22:00:07.717]  </debugvars>
[22:00:07.717]  
[22:00:07.717]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:00:07.717]    <block atomic="false" info="">
[22:00:07.717]      __var deviceID = 0;
[22:00:07.717]        // -> [deviceID <= 0x00000000]
[22:00:07.717]      __var version = 0;
[22:00:07.717]        // -> [version <= 0x00000000]
[22:00:07.717]      __var partNum = 0;
[22:00:07.717]        // -> [partNum <= 0x00000000]
[22:00:07.717]      __var manuf = 0;
[22:00:07.717]        // -> [manuf <= 0x00000000]
[22:00:07.717]      __var isMSPM0G1X0X_G3X0X = 0;
[22:00:07.717]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:00:07.721]      __var isProduction = 0;
[22:00:07.721]        // -> [isProduction <= 0x00000000]
[22:00:07.721]      __var continueId = 0;
[22:00:07.721]        // -> [continueId <= 0x00000000]
[22:00:07.721]      deviceID =   Read32(0x41C40004);
[22:00:07.725]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:00:07.725]        // -> [deviceID <= 0x2BB8802F]
[22:00:07.725]      version = deviceID >> 28;
[22:00:07.725]        // -> [version <= 0x00000002]
[22:00:07.725]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:00:07.725]        // -> [partNum <= 0x0000BB88]
[22:00:07.725]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:00:07.725]        // -> [manuf <= 0x00000017]
[22:00:07.725]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:00:07.725]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:00:07.725]      isProduction = (version > 0);
[22:00:07.725]        // -> [isProduction <= 0x00000001]
[22:00:07.725]    </block>
[22:00:07.725]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:00:07.725]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:00:07.725]        // =>  FALSE
[22:00:07.725]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:00:07.725]    </control>
[22:00:07.725]    <control if="continueId == 4" while="" timeout="0" info="">
[22:00:07.725]      // if-block "continueId == 4"
[22:00:07.725]        // =>  FALSE
[22:00:07.725]      // skip if-block "continueId == 4"
[22:00:07.725]    </control>
[22:00:07.728]    <control if="!isProduction" while="" timeout="0" info="">
[22:00:07.728]      // if-block "!isProduction"
[22:00:07.728]        // =>  FALSE
[22:00:07.728]      // skip if-block "!isProduction"
[22:00:07.728]    </control>
[22:00:07.728]  </sequence>
[22:00:07.728]  
[22:00:26.136]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:00:26.136]  
[22:00:26.144]  <debugvars>
[22:00:26.144]    // Pre-defined
[22:00:26.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:26.144]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:26.144]    __dp=0x00000000
[22:00:26.144]    __ap=0x00000000
[22:00:26.145]    __traceout=0x00000000      (Trace Disabled)
[22:00:26.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:26.145]    __FlashAddr=0x00000000
[22:00:26.145]    __FlashLen=0x00000000
[22:00:26.145]    __FlashArg=0x00000000
[22:00:26.145]    __FlashOp=0x00000000
[22:00:26.145]    __Result=0x00000000
[22:00:26.145]  </debugvars>
[22:00:26.145]  
[22:00:26.145]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:00:26.145]    <block atomic="false" info="">
[22:00:26.145]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:00:26.146]        // -> [isSWJ <= 0x00000001]
[22:00:26.146]      __var hasDormant = __protocol & 0x00020000;
[22:00:26.146]        // -> [hasDormant <= 0x00000000]
[22:00:26.146]      __var protType   = __protocol & 0x0000FFFF;
[22:00:26.146]        // -> [protType <= 0x00000002]
[22:00:26.146]    </block>
[22:00:26.146]    <control if="protType == 1" while="" timeout="0" info="">
[22:00:26.146]      // if-block "protType == 1"
[22:00:26.146]        // =>  FALSE
[22:00:26.146]      // skip if-block "protType == 1"
[22:00:26.146]    </control>
[22:00:26.146]    <control if="protType == 2" while="" timeout="0" info="">
[22:00:26.147]      // if-block "protType == 2"
[22:00:26.147]        // =>  TRUE
[22:00:26.148]      <control if="isSWJ" while="" timeout="0" info="">
[22:00:26.148]        // if-block "isSWJ"
[22:00:26.148]          // =>  TRUE
[22:00:26.148]        <control if="hasDormant" while="" timeout="0" info="">
[22:00:26.148]          // if-block "hasDormant"
[22:00:26.148]            // =>  FALSE
[22:00:26.148]          // skip if-block "hasDormant"
[22:00:26.148]        </control>
[22:00:26.148]        <control if="!hasDormant" while="" timeout="0" info="">
[22:00:26.148]          // if-block "!hasDormant"
[22:00:26.149]            // =>  TRUE
[22:00:26.149]          <block atomic="false" info="">
[22:00:26.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:00:26.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:26.149]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:00:26.154]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:00:26.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:00:26.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:26.154]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:00:26.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:00:26.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:00:26.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:26.156]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:00:26.160]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:00:26.160]          </block>
[22:00:26.160]          // end if-block "!hasDormant"
[22:00:26.160]        </control>
[22:00:26.160]        // end if-block "isSWJ"
[22:00:26.160]      </control>
[22:00:26.160]      <control if="!isSWJ" while="" timeout="0" info="">
[22:00:26.160]        // if-block "!isSWJ"
[22:00:26.160]          // =>  FALSE
[22:00:26.160]        // skip if-block "!isSWJ"
[22:00:26.160]      </control>
[22:00:26.160]      <block atomic="false" info="">
[22:00:26.160]        ReadDP(0x0);
[22:00:26.162]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:00:26.162]      </block>
[22:00:26.162]      // end if-block "protType == 2"
[22:00:26.162]    </control>
[22:00:26.162]  </sequence>
[22:00:26.162]  
[22:00:26.165]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:00:26.165]  
[22:00:26.165]  <debugvars>
[22:00:26.165]    // Pre-defined
[22:00:26.165]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:26.165]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:26.165]    __dp=0x00000000
[22:00:26.165]    __ap=0x00000000
[22:00:26.165]    __traceout=0x00000000      (Trace Disabled)
[22:00:26.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:26.165]    __FlashAddr=0x00000000
[22:00:26.165]    __FlashLen=0x00000000
[22:00:26.165]    __FlashArg=0x00000000
[22:00:26.165]    __FlashOp=0x00000000
[22:00:26.165]    __Result=0x00000000
[22:00:26.165]  </debugvars>
[22:00:26.165]  
[22:00:26.165]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:00:26.165]    <block atomic="false" info="">
[22:00:26.165]      __var SW_DP_ABORT       = 0x0;
[22:00:26.169]        // -> [SW_DP_ABORT <= 0x00000000]
[22:00:26.169]      __var DP_CTRL_STAT      = 0x4;
[22:00:26.169]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:00:26.169]      __var DP_SELECT         = 0x8;
[22:00:26.169]        // -> [DP_SELECT <= 0x00000008]
[22:00:26.169]      __var powered_down      = 0;
[22:00:26.169]        // -> [powered_down <= 0x00000000]
[22:00:26.169]      WriteDP(DP_SELECT, 0x00000000);
[22:00:26.170]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:00:26.173]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:00:26.173]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:00:26.173]        // -> [powered_down <= 0x00000001]
[22:00:26.173]    </block>
[22:00:26.173]    <control if="powered_down" while="" timeout="0" info="">
[22:00:26.173]      // if-block "powered_down"
[22:00:26.173]        // =>  TRUE
[22:00:26.173]      <block atomic="false" info="">
[22:00:26.173]        Message(0, "Debug/System power-up request sent");
[22:00:26.177]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:00:26.179]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:00:26.179]      </block>
[22:00:26.179]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:00:26.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:00:26.180]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:00:26.180]        // while-condition  =>  FALSE
[22:00:26.180]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:00:26.180]      </control>
[22:00:26.180]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:00:26.180]        // if-block "(__protocol & 0xFFFF) == 1"
[22:00:26.180]          // =>  FALSE
[22:00:26.180]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:00:26.180]      </control>
[22:00:26.180]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:00:26.180]        // if-block "(__protocol & 0xFFFF) == 2"
[22:00:26.180]          // =>  TRUE
[22:00:26.180]        <block atomic="false" info="">
[22:00:26.180]          Message(0, "executing SWD power up");
[22:00:26.180]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:00:26.184]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:00:26.184]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:00:26.184]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:00:26.184]        </block>
[22:00:26.184]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:00:26.184]      </control>
[22:00:26.184]      // end if-block "powered_down"
[22:00:26.184]    </control>
[22:00:26.184]    <block atomic="false" info="">
[22:00:26.184]      __var DEBUG_PORT_VAL    = 0;
[22:00:26.184]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:00:26.184]      __var ACCESS_POINT_VAL  = 0;
[22:00:26.189]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:00:26.189]      __ap = 1; 
[22:00:26.189]        // -> [__ap <= 0x00000001]
[22:00:26.189]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:00:26.190]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:00:26.193]      __ap = 4;
[22:00:26.193]        // -> [__ap <= 0x00000004]
[22:00:26.193]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:26.196]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:00:26.196]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:00:26.196]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:26.199]    </block>
[22:00:26.199]    <block atomic="false" info="">
[22:00:26.199]      __var nReset = 0x80;
[22:00:26.199]        // -> [nReset <= 0x00000080]
[22:00:26.199]      __var canReadPins = 0;
[22:00:26.199]        // -> [canReadPins <= 0x00000000]
[22:00:26.199]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:00:26.201]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:00:26.201]        // -> [canReadPins <= 0x00000001]
[22:00:26.201]    </block>
[22:00:26.201]    <control if="" while="1" timeout="200" info="">
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.201]      // while-condition  =>  TRUE
[22:00:26.201]      // while "1"  (timeout="200")
[22:00:26.206]      // while-condition  =>  TRUE
[22:00:26.206]      // while "1"  (timeout="200")
[22:00:26.206]      // while-condition  =>  TRUE
[22:00:26.206]      // while "1"  (timeout="200")
[22:00:26.206]      // while-condition  =>  TRUE
[22:00:26.206]      // while "1"  (timeout="200")
[22:00:26.206]      // while  =>  TIMEOUT
[22:00:26.206]      // end while "1"
[22:00:26.206]    </control>
[22:00:26.206]    <control if="canReadPins" while="" timeout="0" info="">
[22:00:26.206]      // if-block "canReadPins"
[22:00:26.206]        // =>  TRUE
[22:00:26.206]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:00:26.206]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:00:26.208]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:00:26.208]        // while-condition  =>  FALSE
[22:00:26.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:00:26.208]      </control>
[22:00:26.208]      // end if-block "canReadPins"
[22:00:26.208]    </control>
[22:00:26.208]    <control if="!canReadPins" while="" timeout="0" info="">
[22:00:26.208]      // if-block "!canReadPins"
[22:00:26.208]        // =>  FALSE
[22:00:26.208]      // skip if-block "!canReadPins"
[22:00:26.208]    </control>
[22:00:26.208]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:00:26.208]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:26.208]        // =>  TRUE
[22:00:26.208]      <block atomic="false" info="">
[22:00:26.208]        WriteAP(0x00, 0x190008);
[22:00:26.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:26.211]        WriteAP(0xF0, 0x01);
[22:00:26.214]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:26.214]      </block>
[22:00:26.214]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:26.214]    </control>
[22:00:26.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:00:26.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:26.214]        // =>  FALSE
[22:00:26.214]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:26.214]    </control>
[22:00:26.214]    <block atomic="false" info="">
[22:00:26.214]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:26.218]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:00:26.218]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:00:26.218]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:26.218]      __ap = 0; //lets make sure we reset the access point selection
[22:00:26.218]        // -> [__ap <= 0x00000000]
[22:00:26.218]    </block>
[22:00:26.218]  </sequence>
[22:00:26.218]  
[22:00:26.244]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:00:26.244]  
[22:00:26.244]  <debugvars>
[22:00:26.244]    // Pre-defined
[22:00:26.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:26.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:26.244]    __dp=0x00000000
[22:00:26.244]    __ap=0x00000000
[22:00:26.244]    __traceout=0x00000000      (Trace Disabled)
[22:00:26.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:26.244]    __FlashAddr=0x00000000
[22:00:26.244]    __FlashLen=0x00000000
[22:00:26.244]    __FlashArg=0x00000000
[22:00:26.244]    __FlashOp=0x00000000
[22:00:26.244]    __Result=0x00000000
[22:00:26.244]  </debugvars>
[22:00:26.244]  
[22:00:26.244]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:00:26.244]    <block atomic="false" info="">
[22:00:26.244]      __var deviceID = 0;
[22:00:26.244]        // -> [deviceID <= 0x00000000]
[22:00:26.244]      __var version = 0;
[22:00:26.244]        // -> [version <= 0x00000000]
[22:00:26.244]      __var partNum = 0;
[22:00:26.244]        // -> [partNum <= 0x00000000]
[22:00:26.244]      __var manuf = 0;
[22:00:26.244]        // -> [manuf <= 0x00000000]
[22:00:26.244]      __var isMSPM0G1X0X_G3X0X = 0;
[22:00:26.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:00:26.244]      __var isProduction = 0;
[22:00:26.244]        // -> [isProduction <= 0x00000000]
[22:00:26.244]      __var continueId = 0;
[22:00:26.244]        // -> [continueId <= 0x00000000]
[22:00:26.244]      deviceID =   Read32(0x41C40004);
[22:00:26.256]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:00:26.256]        // -> [deviceID <= 0x2BB8802F]
[22:00:26.256]      version = deviceID >> 28;
[22:00:26.256]        // -> [version <= 0x00000002]
[22:00:26.256]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:00:26.256]        // -> [partNum <= 0x0000BB88]
[22:00:26.256]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:00:26.256]        // -> [manuf <= 0x00000017]
[22:00:26.256]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:00:26.256]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:00:26.256]      isProduction = (version > 0);
[22:00:26.256]        // -> [isProduction <= 0x00000001]
[22:00:26.256]    </block>
[22:00:26.256]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:00:26.256]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:00:26.256]        // =>  FALSE
[22:00:26.256]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:00:26.256]    </control>
[22:00:26.256]    <control if="continueId == 4" while="" timeout="0" info="">
[22:00:26.256]      // if-block "continueId == 4"
[22:00:26.256]        // =>  FALSE
[22:00:26.256]      // skip if-block "continueId == 4"
[22:00:26.256]    </control>
[22:00:26.256]    <control if="!isProduction" while="" timeout="0" info="">
[22:00:26.256]      // if-block "!isProduction"
[22:00:26.256]        // =>  FALSE
[22:00:26.260]      // skip if-block "!isProduction"
[22:00:26.260]    </control>
[22:00:26.260]  </sequence>
[22:00:26.260]  
[22:00:56.349]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:00:56.349]  
[22:00:56.359]  <debugvars>
[22:00:56.359]    // Pre-defined
[22:00:56.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:56.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:56.359]    __dp=0x00000000
[22:00:56.359]    __ap=0x00000000
[22:00:56.359]    __traceout=0x00000000      (Trace Disabled)
[22:00:56.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:56.359]    __FlashAddr=0x00000000
[22:00:56.359]    __FlashLen=0x00000000
[22:00:56.359]    __FlashArg=0x00000000
[22:00:56.359]    __FlashOp=0x00000000
[22:00:56.359]    __Result=0x00000000
[22:00:56.359]  </debugvars>
[22:00:56.359]  
[22:00:56.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:00:56.359]    <block atomic="false" info="">
[22:00:56.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:00:56.359]        // -> [isSWJ <= 0x00000001]
[22:00:56.362]      __var hasDormant = __protocol & 0x00020000;
[22:00:56.362]        // -> [hasDormant <= 0x00000000]
[22:00:56.362]      __var protType   = __protocol & 0x0000FFFF;
[22:00:56.362]        // -> [protType <= 0x00000002]
[22:00:56.362]    </block>
[22:00:56.362]    <control if="protType == 1" while="" timeout="0" info="">
[22:00:56.362]      // if-block "protType == 1"
[22:00:56.362]        // =>  FALSE
[22:00:56.362]      // skip if-block "protType == 1"
[22:00:56.362]    </control>
[22:00:56.362]    <control if="protType == 2" while="" timeout="0" info="">
[22:00:56.362]      // if-block "protType == 2"
[22:00:56.362]        // =>  TRUE
[22:00:56.362]      <control if="isSWJ" while="" timeout="0" info="">
[22:00:56.362]        // if-block "isSWJ"
[22:00:56.362]          // =>  TRUE
[22:00:56.362]        <control if="hasDormant" while="" timeout="0" info="">
[22:00:56.362]          // if-block "hasDormant"
[22:00:56.362]            // =>  FALSE
[22:00:56.362]          // skip if-block "hasDormant"
[22:00:56.362]        </control>
[22:00:56.364]        <control if="!hasDormant" while="" timeout="0" info="">
[22:00:56.364]          // if-block "!hasDormant"
[22:00:56.364]            // =>  TRUE
[22:00:56.364]          <block atomic="false" info="">
[22:00:56.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:00:56.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:56.366]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:00:56.366]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:00:56.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:00:56.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:56.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:00:56.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:00:56.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:00:56.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:00:56.374]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:00:56.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:00:56.375]          </block>
[22:00:56.375]          // end if-block "!hasDormant"
[22:00:56.375]        </control>
[22:00:56.375]        // end if-block "isSWJ"
[22:00:56.375]      </control>
[22:00:56.375]      <control if="!isSWJ" while="" timeout="0" info="">
[22:00:56.375]        // if-block "!isSWJ"
[22:00:56.375]          // =>  FALSE
[22:00:56.375]        // skip if-block "!isSWJ"
[22:00:56.375]      </control>
[22:00:56.375]      <block atomic="false" info="">
[22:00:56.375]        ReadDP(0x0);
[22:00:56.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:00:56.378]      </block>
[22:00:56.378]      // end if-block "protType == 2"
[22:00:56.378]    </control>
[22:00:56.378]  </sequence>
[22:00:56.378]  
[22:00:56.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:00:56.381]  
[22:00:56.381]  <debugvars>
[22:00:56.381]    // Pre-defined
[22:00:56.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:56.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:56.381]    __dp=0x00000000
[22:00:56.381]    __ap=0x00000000
[22:00:56.381]    __traceout=0x00000000      (Trace Disabled)
[22:00:56.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:56.381]    __FlashAddr=0x00000000
[22:00:56.381]    __FlashLen=0x00000000
[22:00:56.381]    __FlashArg=0x00000000
[22:00:56.381]    __FlashOp=0x00000000
[22:00:56.381]    __Result=0x00000000
[22:00:56.381]  </debugvars>
[22:00:56.381]  
[22:00:56.381]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:00:56.381]    <block atomic="false" info="">
[22:00:56.381]      __var SW_DP_ABORT       = 0x0;
[22:00:56.381]        // -> [SW_DP_ABORT <= 0x00000000]
[22:00:56.381]      __var DP_CTRL_STAT      = 0x4;
[22:00:56.381]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:00:56.381]      __var DP_SELECT         = 0x8;
[22:00:56.381]        // -> [DP_SELECT <= 0x00000008]
[22:00:56.381]      __var powered_down      = 0;
[22:00:56.381]        // -> [powered_down <= 0x00000000]
[22:00:56.381]      WriteDP(DP_SELECT, 0x00000000);
[22:00:56.385]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:00:56.385]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:00:56.385]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:00:56.385]        // -> [powered_down <= 0x00000001]
[22:00:56.385]    </block>
[22:00:56.385]    <control if="powered_down" while="" timeout="0" info="">
[22:00:56.385]      // if-block "powered_down"
[22:00:56.385]        // =>  TRUE
[22:00:56.385]      <block atomic="false" info="">
[22:00:56.385]        Message(0, "Debug/System power-up request sent");
[22:00:56.391]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:00:56.393]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:00:56.393]      </block>
[22:00:56.393]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:00:56.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:00:56.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:00:56.397]        // while-condition  =>  FALSE
[22:00:56.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:00:56.397]      </control>
[22:00:56.397]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:00:56.397]        // if-block "(__protocol & 0xFFFF) == 1"
[22:00:56.397]          // =>  FALSE
[22:00:56.397]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:00:56.397]      </control>
[22:00:56.397]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:00:56.397]        // if-block "(__protocol & 0xFFFF) == 2"
[22:00:56.399]          // =>  TRUE
[22:00:56.399]        <block atomic="false" info="">
[22:00:56.399]          Message(0, "executing SWD power up");
[22:00:56.400]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:00:56.401]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:00:56.401]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:00:56.405]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:00:56.405]        </block>
[22:00:56.405]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:00:56.405]      </control>
[22:00:56.405]      // end if-block "powered_down"
[22:00:56.405]    </control>
[22:00:56.405]    <block atomic="false" info="">
[22:00:56.405]      __var DEBUG_PORT_VAL    = 0;
[22:00:56.405]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:00:56.405]      __var ACCESS_POINT_VAL  = 0;
[22:00:56.405]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:00:56.405]      __ap = 1; 
[22:00:56.405]        // -> [__ap <= 0x00000001]
[22:00:56.405]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:00:56.411]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:00:56.411]      __ap = 4;
[22:00:56.411]        // -> [__ap <= 0x00000004]
[22:00:56.411]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:56.413]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:00:56.413]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:00:56.413]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:56.417]    </block>
[22:00:56.417]    <block atomic="false" info="">
[22:00:56.417]      __var nReset = 0x80;
[22:00:56.417]        // -> [nReset <= 0x00000080]
[22:00:56.417]      __var canReadPins = 0;
[22:00:56.417]        // -> [canReadPins <= 0x00000000]
[22:00:56.417]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:00:56.417]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:00:56.417]        // -> [canReadPins <= 0x00000001]
[22:00:56.417]    </block>
[22:00:56.417]    <control if="" while="1" timeout="200" info="">
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.417]      // while "1"  (timeout="200")
[22:00:56.417]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.421]      // while "1"  (timeout="200")
[22:00:56.421]      // while-condition  =>  TRUE
[22:00:56.425]      // while "1"  (timeout="200")
[22:00:56.425]      // while  =>  TIMEOUT
[22:00:56.425]      // end while "1"
[22:00:56.425]    </control>
[22:00:56.425]    <control if="canReadPins" while="" timeout="0" info="">
[22:00:56.425]      // if-block "canReadPins"
[22:00:56.425]        // =>  TRUE
[22:00:56.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:00:56.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:00:56.425]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:00:56.425]        // while-condition  =>  FALSE
[22:00:56.425]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:00:56.425]      </control>
[22:00:56.425]      // end if-block "canReadPins"
[22:00:56.425]    </control>
[22:00:56.425]    <control if="!canReadPins" while="" timeout="0" info="">
[22:00:56.425]      // if-block "!canReadPins"
[22:00:56.425]        // =>  FALSE
[22:00:56.425]      // skip if-block "!canReadPins"
[22:00:56.425]    </control>
[22:00:56.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:00:56.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:56.429]        // =>  TRUE
[22:00:56.429]      <block atomic="false" info="">
[22:00:56.429]        WriteAP(0x00, 0x190008);
[22:00:56.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:56.431]        WriteAP(0xF0, 0x01);
[22:00:56.433]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:00:56.433]      </block>
[22:00:56.433]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:00:56.433]    </control>
[22:00:56.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:00:56.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:56.433]        // =>  FALSE
[22:00:56.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:00:56.433]    </control>
[22:00:56.433]    <block atomic="false" info="">
[22:00:56.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:00:56.439]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:00:56.439]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:00:56.439]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:00:56.440]      __ap = 0; //lets make sure we reset the access point selection
[22:00:56.440]        // -> [__ap <= 0x00000000]
[22:00:56.440]    </block>
[22:00:56.440]  </sequence>
[22:00:56.440]  
[22:00:56.461]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:00:56.461]  
[22:00:56.461]  <debugvars>
[22:00:56.461]    // Pre-defined
[22:00:56.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:00:56.463]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:00:56.463]    __dp=0x00000000
[22:00:56.463]    __ap=0x00000000
[22:00:56.463]    __traceout=0x00000000      (Trace Disabled)
[22:00:56.463]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:00:56.463]    __FlashAddr=0x00000000
[22:00:56.463]    __FlashLen=0x00000000
[22:00:56.463]    __FlashArg=0x00000000
[22:00:56.463]    __FlashOp=0x00000000
[22:00:56.463]    __Result=0x00000000
[22:00:56.463]  </debugvars>
[22:00:56.463]  
[22:00:56.463]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:00:56.463]    <block atomic="false" info="">
[22:00:56.463]      __var deviceID = 0;
[22:00:56.463]        // -> [deviceID <= 0x00000000]
[22:00:56.463]      __var version = 0;
[22:00:56.463]        // -> [version <= 0x00000000]
[22:00:56.463]      __var partNum = 0;
[22:00:56.463]        // -> [partNum <= 0x00000000]
[22:00:56.463]      __var manuf = 0;
[22:00:56.463]        // -> [manuf <= 0x00000000]
[22:00:56.463]      __var isMSPM0G1X0X_G3X0X = 0;
[22:00:56.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:00:56.463]      __var isProduction = 0;
[22:00:56.463]        // -> [isProduction <= 0x00000000]
[22:00:56.463]      __var continueId = 0;
[22:00:56.463]        // -> [continueId <= 0x00000000]
[22:00:56.463]      deviceID =   Read32(0x41C40004);
[22:00:56.471]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:00:56.471]        // -> [deviceID <= 0x2BB8802F]
[22:00:56.471]      version = deviceID >> 28;
[22:00:56.471]        // -> [version <= 0x00000002]
[22:00:56.471]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:00:56.471]        // -> [partNum <= 0x0000BB88]
[22:00:56.471]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:00:56.471]        // -> [manuf <= 0x00000017]
[22:00:56.471]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:00:56.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:00:56.471]      isProduction = (version > 0);
[22:00:56.471]        // -> [isProduction <= 0x00000001]
[22:00:56.471]    </block>
[22:00:56.471]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:00:56.471]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:00:56.471]        // =>  FALSE
[22:00:56.471]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:00:56.471]    </control>
[22:00:56.471]    <control if="continueId == 4" while="" timeout="0" info="">
[22:00:56.474]      // if-block "continueId == 4"
[22:00:56.474]        // =>  FALSE
[22:00:56.474]      // skip if-block "continueId == 4"
[22:00:56.474]    </control>
[22:00:56.474]    <control if="!isProduction" while="" timeout="0" info="">
[22:00:56.474]      // if-block "!isProduction"
[22:00:56.474]        // =>  FALSE
[22:00:56.474]      // skip if-block "!isProduction"
[22:00:56.474]    </control>
[22:00:56.474]  </sequence>
[22:00:56.474]  
[22:01:20.802]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:01:20.802]  
[22:01:20.813]  <debugvars>
[22:01:20.813]    // Pre-defined
[22:01:20.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:01:20.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:01:20.813]    __dp=0x00000000
[22:01:20.813]    __ap=0x00000000
[22:01:20.813]    __traceout=0x00000000      (Trace Disabled)
[22:01:20.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:01:20.814]    __FlashAddr=0x00000000
[22:01:20.814]    __FlashLen=0x00000000
[22:01:20.814]    __FlashArg=0x00000000
[22:01:20.814]    __FlashOp=0x00000000
[22:01:20.814]    __Result=0x00000000
[22:01:20.814]  </debugvars>
[22:01:20.814]  
[22:01:20.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:01:20.814]    <block atomic="false" info="">
[22:01:20.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:01:20.814]        // -> [isSWJ <= 0x00000001]
[22:01:20.814]      __var hasDormant = __protocol & 0x00020000;
[22:01:20.814]        // -> [hasDormant <= 0x00000000]
[22:01:20.814]      __var protType   = __protocol & 0x0000FFFF;
[22:01:20.814]        // -> [protType <= 0x00000002]
[22:01:20.814]    </block>
[22:01:20.814]    <control if="protType == 1" while="" timeout="0" info="">
[22:01:20.814]      // if-block "protType == 1"
[22:01:20.814]        // =>  FALSE
[22:01:20.814]      // skip if-block "protType == 1"
[22:01:20.814]    </control>
[22:01:20.814]    <control if="protType == 2" while="" timeout="0" info="">
[22:01:20.814]      // if-block "protType == 2"
[22:01:20.814]        // =>  TRUE
[22:01:20.814]      <control if="isSWJ" while="" timeout="0" info="">
[22:01:20.814]        // if-block "isSWJ"
[22:01:20.814]          // =>  TRUE
[22:01:20.814]        <control if="hasDormant" while="" timeout="0" info="">
[22:01:20.814]          // if-block "hasDormant"
[22:01:20.814]            // =>  FALSE
[22:01:20.814]          // skip if-block "hasDormant"
[22:01:20.814]        </control>
[22:01:20.818]        <control if="!hasDormant" while="" timeout="0" info="">
[22:01:20.818]          // if-block "!hasDormant"
[22:01:20.818]            // =>  TRUE
[22:01:20.818]          <block atomic="false" info="">
[22:01:20.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:01:20.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:01:20.820]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:01:20.820]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:01:20.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:01:20.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:01:20.826]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:01:20.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:01:20.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:01:20.828]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:01:20.829]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:01:20.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:01:20.831]          </block>
[22:01:20.831]          // end if-block "!hasDormant"
[22:01:20.831]        </control>
[22:01:20.832]        // end if-block "isSWJ"
[22:01:20.832]      </control>
[22:01:20.832]      <control if="!isSWJ" while="" timeout="0" info="">
[22:01:20.832]        // if-block "!isSWJ"
[22:01:20.832]          // =>  FALSE
[22:01:20.832]        // skip if-block "!isSWJ"
[22:01:20.832]      </control>
[22:01:20.832]      <block atomic="false" info="">
[22:01:20.832]        ReadDP(0x0);
[22:01:20.838]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:01:20.838]      </block>
[22:01:20.838]      // end if-block "protType == 2"
[22:01:20.838]    </control>
[22:01:20.838]  </sequence>
[22:01:20.839]  
[22:01:20.840]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:01:20.840]  
[22:01:20.840]  <debugvars>
[22:01:20.840]    // Pre-defined
[22:01:20.840]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:01:20.840]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:01:20.840]    __dp=0x00000000
[22:01:20.840]    __ap=0x00000000
[22:01:20.840]    __traceout=0x00000000      (Trace Disabled)
[22:01:20.840]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:01:20.840]    __FlashAddr=0x00000000
[22:01:20.843]    __FlashLen=0x00000000
[22:01:20.843]    __FlashArg=0x00000000
[22:01:20.843]    __FlashOp=0x00000000
[22:01:20.843]    __Result=0x00000000
[22:01:20.843]  </debugvars>
[22:01:20.843]  
[22:01:20.843]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:01:20.843]    <block atomic="false" info="">
[22:01:20.843]      __var SW_DP_ABORT       = 0x0;
[22:01:20.843]        // -> [SW_DP_ABORT <= 0x00000000]
[22:01:20.843]      __var DP_CTRL_STAT      = 0x4;
[22:01:20.843]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:01:20.843]      __var DP_SELECT         = 0x8;
[22:01:20.843]        // -> [DP_SELECT <= 0x00000008]
[22:01:20.843]      __var powered_down      = 0;
[22:01:20.843]        // -> [powered_down <= 0x00000000]
[22:01:20.843]      WriteDP(DP_SELECT, 0x00000000);
[22:01:20.843]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:01:20.843]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:01:20.847]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:01:20.847]        // -> [powered_down <= 0x00000001]
[22:01:20.847]    </block>
[22:01:20.847]    <control if="powered_down" while="" timeout="0" info="">
[22:01:20.847]      // if-block "powered_down"
[22:01:20.847]        // =>  TRUE
[22:01:20.847]      <block atomic="false" info="">
[22:01:20.847]        Message(0, "Debug/System power-up request sent");
[22:01:20.852]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:01:20.855]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:01:20.855]      </block>
[22:01:20.855]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:01:20.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:01:20.856]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:01:20.857]        // while-condition  =>  FALSE
[22:01:20.857]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:01:20.857]      </control>
[22:01:20.857]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:01:20.857]        // if-block "(__protocol & 0xFFFF) == 1"
[22:01:20.857]          // =>  FALSE
[22:01:20.857]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:01:20.857]      </control>
[22:01:20.857]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:01:20.857]        // if-block "(__protocol & 0xFFFF) == 2"
[22:01:20.857]          // =>  TRUE
[22:01:20.858]        <block atomic="false" info="">
[22:01:20.858]          Message(0, "executing SWD power up");
[22:01:20.860]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:01:20.860]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:01:20.860]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:01:20.864]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:01:20.864]        </block>
[22:01:20.864]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:01:20.864]      </control>
[22:01:20.864]      // end if-block "powered_down"
[22:01:20.864]    </control>
[22:01:20.864]    <block atomic="false" info="">
[22:01:20.864]      __var DEBUG_PORT_VAL    = 0;
[22:01:20.864]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:01:20.864]      __var ACCESS_POINT_VAL  = 0;
[22:01:20.864]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:01:20.864]      __ap = 1; 
[22:01:20.864]        // -> [__ap <= 0x00000001]
[22:01:20.864]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:01:20.868]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:01:20.868]      __ap = 4;
[22:01:20.868]        // -> [__ap <= 0x00000004]
[22:01:20.868]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:01:20.870]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:01:20.870]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:01:20.872]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:01:20.872]    </block>
[22:01:20.872]    <block atomic="false" info="">
[22:01:20.872]      __var nReset = 0x80;
[22:01:20.872]        // -> [nReset <= 0x00000080]
[22:01:20.872]      __var canReadPins = 0;
[22:01:20.872]        // -> [canReadPins <= 0x00000000]
[22:01:20.872]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:01:20.876]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:01:20.876]        // -> [canReadPins <= 0x00000001]
[22:01:20.876]    </block>
[22:01:20.876]    <control if="" while="1" timeout="200" info="">
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.876]      // while-condition  =>  TRUE
[22:01:20.876]      // while "1"  (timeout="200")
[22:01:20.879]      // while-condition  =>  TRUE
[22:01:20.879]      // while "1"  (timeout="200")
[22:01:20.880]      // while  =>  TIMEOUT
[22:01:20.880]      // end while "1"
[22:01:20.880]    </control>
[22:01:20.880]    <control if="canReadPins" while="" timeout="0" info="">
[22:01:20.880]      // if-block "canReadPins"
[22:01:20.880]        // =>  TRUE
[22:01:20.880]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:01:20.880]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:01:20.882]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:01:20.882]        // while-condition  =>  FALSE
[22:01:20.883]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:01:20.883]      </control>
[22:01:20.883]      // end if-block "canReadPins"
[22:01:20.883]    </control>
[22:01:20.883]    <control if="!canReadPins" while="" timeout="0" info="">
[22:01:20.883]      // if-block "!canReadPins"
[22:01:20.883]        // =>  FALSE
[22:01:20.883]      // skip if-block "!canReadPins"
[22:01:20.883]    </control>
[22:01:20.883]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:01:20.883]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:01:20.884]        // =>  TRUE
[22:01:20.884]      <block atomic="false" info="">
[22:01:20.884]        WriteAP(0x00, 0x190008);
[22:01:20.885]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:01:20.886]        WriteAP(0xF0, 0x01);
[22:01:20.889]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:01:20.889]      </block>
[22:01:20.889]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:01:20.889]    </control>
[22:01:20.889]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:01:20.889]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:01:20.889]        // =>  FALSE
[22:01:20.890]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:01:20.890]    </control>
[22:01:20.890]    <block atomic="false" info="">
[22:01:20.890]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:01:20.893]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:01:20.893]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:01:20.894]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:01:20.895]      __ap = 0; //lets make sure we reset the access point selection
[22:01:20.895]        // -> [__ap <= 0x00000000]
[22:01:20.895]    </block>
[22:01:20.895]  </sequence>
[22:01:20.896]  
[22:01:20.914]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:01:20.914]  
[22:01:20.914]  <debugvars>
[22:01:20.915]    // Pre-defined
[22:01:20.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:01:20.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:01:20.915]    __dp=0x00000000
[22:01:20.915]    __ap=0x00000000
[22:01:20.915]    __traceout=0x00000000      (Trace Disabled)
[22:01:20.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:01:20.915]    __FlashAddr=0x00000000
[22:01:20.915]    __FlashLen=0x00000000
[22:01:20.916]    __FlashArg=0x00000000
[22:01:20.916]    __FlashOp=0x00000000
[22:01:20.916]    __Result=0x00000000
[22:01:20.916]  </debugvars>
[22:01:20.916]  
[22:01:20.916]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:01:20.916]    <block atomic="false" info="">
[22:01:20.916]      __var deviceID = 0;
[22:01:20.916]        // -> [deviceID <= 0x00000000]
[22:01:20.916]      __var version = 0;
[22:01:20.916]        // -> [version <= 0x00000000]
[22:01:20.916]      __var partNum = 0;
[22:01:20.917]        // -> [partNum <= 0x00000000]
[22:01:20.917]      __var manuf = 0;
[22:01:20.917]        // -> [manuf <= 0x00000000]
[22:01:20.917]      __var isMSPM0G1X0X_G3X0X = 0;
[22:01:20.917]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:01:20.917]      __var isProduction = 0;
[22:01:20.917]        // -> [isProduction <= 0x00000000]
[22:01:20.917]      __var continueId = 0;
[22:01:20.917]        // -> [continueId <= 0x00000000]
[22:01:20.918]      deviceID =   Read32(0x41C40004);
[22:01:20.922]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:01:20.923]        // -> [deviceID <= 0x2BB8802F]
[22:01:20.923]      version = deviceID >> 28;
[22:01:20.923]        // -> [version <= 0x00000002]
[22:01:20.923]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:01:20.923]        // -> [partNum <= 0x0000BB88]
[22:01:20.923]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:01:20.924]        // -> [manuf <= 0x00000017]
[22:01:20.924]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:01:20.924]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:01:20.924]      isProduction = (version > 0);
[22:01:20.924]        // -> [isProduction <= 0x00000001]
[22:01:20.924]    </block>
[22:01:20.924]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:01:20.924]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:01:20.924]        // =>  FALSE
[22:01:20.925]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:01:20.925]    </control>
[22:01:20.925]    <control if="continueId == 4" while="" timeout="0" info="">
[22:01:20.925]      // if-block "continueId == 4"
[22:01:20.925]        // =>  FALSE
[22:01:20.925]      // skip if-block "continueId == 4"
[22:01:20.925]    </control>
[22:01:20.925]    <control if="!isProduction" while="" timeout="0" info="">
[22:01:20.926]      // if-block "!isProduction"
[22:01:20.926]        // =>  FALSE
[22:01:20.926]      // skip if-block "!isProduction"
[22:01:20.926]    </control>
[22:01:20.926]  </sequence>
[22:01:20.926]  
[22:03:09.073]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:03:09.073]  
[22:03:09.074]  <debugvars>
[22:03:09.074]    // Pre-defined
[22:03:09.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:09.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:09.074]    __dp=0x00000000
[22:03:09.074]    __ap=0x00000000
[22:03:09.074]    __traceout=0x00000000      (Trace Disabled)
[22:03:09.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:09.074]    __FlashAddr=0x00000000
[22:03:09.074]    __FlashLen=0x00000000
[22:03:09.074]    __FlashArg=0x00000000
[22:03:09.074]    __FlashOp=0x00000000
[22:03:09.075]    __Result=0x00000000
[22:03:09.075]  </debugvars>
[22:03:09.075]  
[22:03:09.075]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:03:09.075]    <block atomic="false" info="">
[22:03:09.075]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:03:09.075]        // -> [isSWJ <= 0x00000001]
[22:03:09.075]      __var hasDormant = __protocol & 0x00020000;
[22:03:09.075]        // -> [hasDormant <= 0x00000000]
[22:03:09.075]      __var protType   = __protocol & 0x0000FFFF;
[22:03:09.075]        // -> [protType <= 0x00000002]
[22:03:09.075]    </block>
[22:03:09.076]    <control if="protType == 1" while="" timeout="0" info="">
[22:03:09.076]      // if-block "protType == 1"
[22:03:09.076]        // =>  FALSE
[22:03:09.076]      // skip if-block "protType == 1"
[22:03:09.076]    </control>
[22:03:09.076]    <control if="protType == 2" while="" timeout="0" info="">
[22:03:09.076]      // if-block "protType == 2"
[22:03:09.076]        // =>  TRUE
[22:03:09.076]      <control if="isSWJ" while="" timeout="0" info="">
[22:03:09.076]        // if-block "isSWJ"
[22:03:09.077]          // =>  TRUE
[22:03:09.077]        <control if="hasDormant" while="" timeout="0" info="">
[22:03:09.077]          // if-block "hasDormant"
[22:03:09.077]            // =>  FALSE
[22:03:09.077]          // skip if-block "hasDormant"
[22:03:09.077]        </control>
[22:03:09.077]        <control if="!hasDormant" while="" timeout="0" info="">
[22:03:09.077]          // if-block "!hasDormant"
[22:03:09.077]            // =>  TRUE
[22:03:09.077]          <block atomic="false" info="">
[22:03:09.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:03:09.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:09.078]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:03:09.081]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:03:09.081]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:03:09.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:09.081]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:03:09.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:03:09.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:03:09.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:09.086]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:03:09.086]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:03:09.086]          </block>
[22:03:09.086]          // end if-block "!hasDormant"
[22:03:09.086]        </control>
[22:03:09.086]        // end if-block "isSWJ"
[22:03:09.088]      </control>
[22:03:09.088]      <control if="!isSWJ" while="" timeout="0" info="">
[22:03:09.088]        // if-block "!isSWJ"
[22:03:09.088]          // =>  FALSE
[22:03:09.088]        // skip if-block "!isSWJ"
[22:03:09.088]      </control>
[22:03:09.088]      <block atomic="false" info="">
[22:03:09.088]        ReadDP(0x0);
[22:03:09.091]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:03:09.091]      </block>
[22:03:09.091]      // end if-block "protType == 2"
[22:03:09.091]    </control>
[22:03:09.091]  </sequence>
[22:03:09.091]  
[22:03:09.094]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:03:09.094]  
[22:03:09.094]  <debugvars>
[22:03:09.094]    // Pre-defined
[22:03:09.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:09.094]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:09.094]    __dp=0x00000000
[22:03:09.097]    __ap=0x00000000
[22:03:09.097]    __traceout=0x00000000      (Trace Disabled)
[22:03:09.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:09.097]    __FlashAddr=0x00000000
[22:03:09.098]    __FlashLen=0x00000000
[22:03:09.098]    __FlashArg=0x00000000
[22:03:09.098]    __FlashOp=0x00000000
[22:03:09.098]    __Result=0x00000000
[22:03:09.098]  </debugvars>
[22:03:09.098]  
[22:03:09.098]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:03:09.098]    <block atomic="false" info="">
[22:03:09.098]      __var SW_DP_ABORT       = 0x0;
[22:03:09.098]        // -> [SW_DP_ABORT <= 0x00000000]
[22:03:09.098]      __var DP_CTRL_STAT      = 0x4;
[22:03:09.098]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:03:09.098]      __var DP_SELECT         = 0x8;
[22:03:09.098]        // -> [DP_SELECT <= 0x00000008]
[22:03:09.098]      __var powered_down      = 0;
[22:03:09.098]        // -> [powered_down <= 0x00000000]
[22:03:09.099]      WriteDP(DP_SELECT, 0x00000000);
[22:03:09.100]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:03:09.100]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:03:09.102]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:03:09.102]        // -> [powered_down <= 0x00000001]
[22:03:09.102]    </block>
[22:03:09.102]    <control if="powered_down" while="" timeout="0" info="">
[22:03:09.102]      // if-block "powered_down"
[22:03:09.102]        // =>  TRUE
[22:03:09.102]      <block atomic="false" info="">
[22:03:09.102]        Message(0, "Debug/System power-up request sent");
[22:03:09.105]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:03:09.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:03:09.107]      </block>
[22:03:09.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:03:09.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:03:09.110]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:03:09.110]        // while-condition  =>  FALSE
[22:03:09.110]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:03:09.110]      </control>
[22:03:09.110]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:03:09.110]        // if-block "(__protocol & 0xFFFF) == 1"
[22:03:09.112]          // =>  FALSE
[22:03:09.112]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:03:09.112]      </control>
[22:03:09.112]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:03:09.112]        // if-block "(__protocol & 0xFFFF) == 2"
[22:03:09.112]          // =>  TRUE
[22:03:09.112]        <block atomic="false" info="">
[22:03:09.112]          Message(0, "executing SWD power up");
[22:03:09.114]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:03:09.115]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:03:09.115]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:03:09.116]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:03:09.116]        </block>
[22:03:09.118]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:03:09.118]      </control>
[22:03:09.118]      // end if-block "powered_down"
[22:03:09.118]    </control>
[22:03:09.118]    <block atomic="false" info="">
[22:03:09.118]      __var DEBUG_PORT_VAL    = 0;
[22:03:09.118]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:03:09.118]      __var ACCESS_POINT_VAL  = 0;
[22:03:09.118]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:03:09.118]      __ap = 1; 
[22:03:09.120]        // -> [__ap <= 0x00000001]
[22:03:09.120]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:03:09.123]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:03:09.123]      __ap = 4;
[22:03:09.123]        // -> [__ap <= 0x00000004]
[22:03:09.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:09.126]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:03:09.126]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:03:09.126]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:09.126]    </block>
[22:03:09.126]    <block atomic="false" info="">
[22:03:09.126]      __var nReset = 0x80;
[22:03:09.126]        // -> [nReset <= 0x00000080]
[22:03:09.126]      __var canReadPins = 0;
[22:03:09.126]        // -> [canReadPins <= 0x00000000]
[22:03:09.126]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:03:09.130]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:03:09.130]        // -> [canReadPins <= 0x00000001]
[22:03:09.130]    </block>
[22:03:09.130]    <control if="" while="1" timeout="200" info="">
[22:03:09.130]      // while "1"  (timeout="200")
[22:03:09.130]      // while-condition  =>  TRUE
[22:03:09.130]      // while "1"  (timeout="200")
[22:03:09.130]      // while-condition  =>  TRUE
[22:03:09.130]      // while "1"  (timeout="200")
[22:03:09.130]      // while-condition  =>  TRUE
[22:03:09.130]      // while "1"  (timeout="200")
[22:03:09.130]      // while-condition  =>  TRUE
[22:03:09.130]      // while "1"  (timeout="200")
[22:03:09.133]      // while-condition  =>  TRUE
[22:03:09.133]      // while "1"  (timeout="200")
[22:03:09.133]      // while-condition  =>  TRUE
[22:03:09.133]      // while "1"  (timeout="200")
[22:03:09.133]      // while-condition  =>  TRUE
[22:03:09.133]      // while "1"  (timeout="200")
[22:03:09.133]      // while-condition  =>  TRUE
[22:03:09.133]      // while "1"  (timeout="200")
[22:03:09.134]      // while-condition  =>  TRUE
[22:03:09.134]      // while "1"  (timeout="200")
[22:03:09.134]      // while-condition  =>  TRUE
[22:03:09.134]      // while "1"  (timeout="200")
[22:03:09.134]      // while-condition  =>  TRUE
[22:03:09.134]      // while "1"  (timeout="200")
[22:03:09.134]      // while-condition  =>  TRUE
[22:03:09.134]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.135]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.135]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.135]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.135]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.135]      // while "1"  (timeout="200")
[22:03:09.135]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.136]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.136]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.136]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.136]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.136]      // while-condition  =>  TRUE
[22:03:09.136]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.137]      // while "1"  (timeout="200")
[22:03:09.137]      // while-condition  =>  TRUE
[22:03:09.138]      // while "1"  (timeout="200")
[22:03:09.139]      // while-condition  =>  TRUE
[22:03:09.139]      // while "1"  (timeout="200")
[22:03:09.139]      // while-condition  =>  TRUE
[22:03:09.139]      // while "1"  (timeout="200")
[22:03:09.139]      // while-condition  =>  TRUE
[22:03:09.139]      // while "1"  (timeout="200")
[22:03:09.139]      // while-condition  =>  TRUE
[22:03:09.139]      // while "1"  (timeout="200")
[22:03:09.139]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.140]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.140]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.140]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.140]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.140]      // while-condition  =>  TRUE
[22:03:09.140]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.141]      // while-condition  =>  TRUE
[22:03:09.141]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.143]      // while "1"  (timeout="200")
[22:03:09.143]      // while-condition  =>  TRUE
[22:03:09.144]      // while "1"  (timeout="200")
[22:03:09.144]      // while  =>  TIMEOUT
[22:03:09.144]      // end while "1"
[22:03:09.144]    </control>
[22:03:09.144]    <control if="canReadPins" while="" timeout="0" info="">
[22:03:09.144]      // if-block "canReadPins"
[22:03:09.144]        // =>  TRUE
[22:03:09.144]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:03:09.144]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:03:09.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:03:09.146]        // while-condition  =>  FALSE
[22:03:09.146]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:03:09.146]      </control>
[22:03:09.146]      // end if-block "canReadPins"
[22:03:09.147]    </control>
[22:03:09.147]    <control if="!canReadPins" while="" timeout="0" info="">
[22:03:09.147]      // if-block "!canReadPins"
[22:03:09.147]        // =>  FALSE
[22:03:09.147]      // skip if-block "!canReadPins"
[22:03:09.147]    </control>
[22:03:09.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:03:09.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:09.147]        // =>  TRUE
[22:03:09.147]      <block atomic="false" info="">
[22:03:09.147]        WriteAP(0x00, 0x190008);
[22:03:09.149]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:09.149]        WriteAP(0xF0, 0x01);
[22:03:09.155]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:09.155]      </block>
[22:03:09.155]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:09.155]    </control>
[22:03:09.155]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:03:09.155]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:09.155]        // =>  FALSE
[22:03:09.155]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:09.155]    </control>
[22:03:09.155]    <block atomic="false" info="">
[22:03:09.155]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:09.161]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:03:09.161]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:03:09.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:09.163]      __ap = 0; //lets make sure we reset the access point selection
[22:03:09.163]        // -> [__ap <= 0x00000000]
[22:03:09.163]    </block>
[22:03:09.163]  </sequence>
[22:03:09.163]  
[22:03:09.184]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:03:09.184]  
[22:03:09.188]  <debugvars>
[22:03:09.188]    // Pre-defined
[22:03:09.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:09.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:09.188]    __dp=0x00000000
[22:03:09.188]    __ap=0x00000000
[22:03:09.188]    __traceout=0x00000000      (Trace Disabled)
[22:03:09.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:09.188]    __FlashAddr=0x00000000
[22:03:09.188]    __FlashLen=0x00000000
[22:03:09.188]    __FlashArg=0x00000000
[22:03:09.188]    __FlashOp=0x00000000
[22:03:09.188]    __Result=0x00000000
[22:03:09.188]  </debugvars>
[22:03:09.188]  
[22:03:09.188]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:03:09.188]    <block atomic="false" info="">
[22:03:09.190]      __var deviceID = 0;
[22:03:09.190]        // -> [deviceID <= 0x00000000]
[22:03:09.190]      __var version = 0;
[22:03:09.190]        // -> [version <= 0x00000000]
[22:03:09.190]      __var partNum = 0;
[22:03:09.190]        // -> [partNum <= 0x00000000]
[22:03:09.190]      __var manuf = 0;
[22:03:09.190]        // -> [manuf <= 0x00000000]
[22:03:09.190]      __var isMSPM0G1X0X_G3X0X = 0;
[22:03:09.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:03:09.190]      __var isProduction = 0;
[22:03:09.190]        // -> [isProduction <= 0x00000000]
[22:03:09.190]      __var continueId = 0;
[22:03:09.190]        // -> [continueId <= 0x00000000]
[22:03:09.190]      deviceID =   Read32(0x41C40004);
[22:03:09.197]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:03:09.197]        // -> [deviceID <= 0x2BB8802F]
[22:03:09.197]      version = deviceID >> 28;
[22:03:09.197]        // -> [version <= 0x00000002]
[22:03:09.197]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:03:09.197]        // -> [partNum <= 0x0000BB88]
[22:03:09.197]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:03:09.197]        // -> [manuf <= 0x00000017]
[22:03:09.197]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:03:09.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:03:09.197]      isProduction = (version > 0);
[22:03:09.197]        // -> [isProduction <= 0x00000001]
[22:03:09.197]    </block>
[22:03:09.197]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:03:09.197]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:03:09.197]        // =>  FALSE
[22:03:09.197]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:03:09.197]    </control>
[22:03:09.197]    <control if="continueId == 4" while="" timeout="0" info="">
[22:03:09.197]      // if-block "continueId == 4"
[22:03:09.197]        // =>  FALSE
[22:03:09.197]      // skip if-block "continueId == 4"
[22:03:09.197]    </control>
[22:03:09.200]    <control if="!isProduction" while="" timeout="0" info="">
[22:03:09.200]      // if-block "!isProduction"
[22:03:09.200]        // =>  FALSE
[22:03:09.200]      // skip if-block "!isProduction"
[22:03:09.200]    </control>
[22:03:09.200]  </sequence>
[22:03:09.200]  
[22:03:34.007]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:03:34.007]  
[22:03:34.007]  <debugvars>
[22:03:34.007]    // Pre-defined
[22:03:34.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:34.012]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:34.012]    __dp=0x00000000
[22:03:34.012]    __ap=0x00000000
[22:03:34.012]    __traceout=0x00000000      (Trace Disabled)
[22:03:34.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:34.013]    __FlashAddr=0x00000000
[22:03:34.013]    __FlashLen=0x00000000
[22:03:34.013]    __FlashArg=0x00000000
[22:03:34.013]    __FlashOp=0x00000000
[22:03:34.013]    __Result=0x00000000
[22:03:34.013]  </debugvars>
[22:03:34.013]  
[22:03:34.013]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:03:34.014]    <block atomic="false" info="">
[22:03:34.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:03:34.014]        // -> [isSWJ <= 0x00000001]
[22:03:34.014]      __var hasDormant = __protocol & 0x00020000;
[22:03:34.014]        // -> [hasDormant <= 0x00000000]
[22:03:34.014]      __var protType   = __protocol & 0x0000FFFF;
[22:03:34.014]        // -> [protType <= 0x00000002]
[22:03:34.014]    </block>
[22:03:34.014]    <control if="protType == 1" while="" timeout="0" info="">
[22:03:34.014]      // if-block "protType == 1"
[22:03:34.014]        // =>  FALSE
[22:03:34.014]      // skip if-block "protType == 1"
[22:03:34.014]    </control>
[22:03:34.014]    <control if="protType == 2" while="" timeout="0" info="">
[22:03:34.014]      // if-block "protType == 2"
[22:03:34.014]        // =>  TRUE
[22:03:34.014]      <control if="isSWJ" while="" timeout="0" info="">
[22:03:34.015]        // if-block "isSWJ"
[22:03:34.015]          // =>  TRUE
[22:03:34.015]        <control if="hasDormant" while="" timeout="0" info="">
[22:03:34.015]          // if-block "hasDormant"
[22:03:34.015]            // =>  FALSE
[22:03:34.015]          // skip if-block "hasDormant"
[22:03:34.015]        </control>
[22:03:34.015]        <control if="!hasDormant" while="" timeout="0" info="">
[22:03:34.017]          // if-block "!hasDormant"
[22:03:34.017]            // =>  TRUE
[22:03:34.017]          <block atomic="false" info="">
[22:03:34.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:03:34.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:34.017]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:03:34.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:03:34.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:03:34.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:34.020]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:03:34.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:03:34.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:03:34.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:34.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:03:34.026]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:03:34.026]          </block>
[22:03:34.026]          // end if-block "!hasDormant"
[22:03:34.026]        </control>
[22:03:34.026]        // end if-block "isSWJ"
[22:03:34.026]      </control>
[22:03:34.026]      <control if="!isSWJ" while="" timeout="0" info="">
[22:03:34.026]        // if-block "!isSWJ"
[22:03:34.026]          // =>  FALSE
[22:03:34.026]        // skip if-block "!isSWJ"
[22:03:34.026]      </control>
[22:03:34.026]      <block atomic="false" info="">
[22:03:34.026]        ReadDP(0x0);
[22:03:34.028]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:03:34.028]      </block>
[22:03:34.028]      // end if-block "protType == 2"
[22:03:34.028]    </control>
[22:03:34.028]  </sequence>
[22:03:34.028]  
[22:03:34.032]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:03:34.032]  
[22:03:34.032]  <debugvars>
[22:03:34.032]    // Pre-defined
[22:03:34.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:34.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:34.033]    __dp=0x00000000
[22:03:34.033]    __ap=0x00000000
[22:03:34.033]    __traceout=0x00000000      (Trace Disabled)
[22:03:34.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:34.033]    __FlashAddr=0x00000000
[22:03:34.033]    __FlashLen=0x00000000
[22:03:34.033]    __FlashArg=0x00000000
[22:03:34.033]    __FlashOp=0x00000000
[22:03:34.033]    __Result=0x00000000
[22:03:34.033]  </debugvars>
[22:03:34.033]  
[22:03:34.033]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:03:34.034]    <block atomic="false" info="">
[22:03:34.034]      __var SW_DP_ABORT       = 0x0;
[22:03:34.034]        // -> [SW_DP_ABORT <= 0x00000000]
[22:03:34.034]      __var DP_CTRL_STAT      = 0x4;
[22:03:34.034]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:03:34.034]      __var DP_SELECT         = 0x8;
[22:03:34.034]        // -> [DP_SELECT <= 0x00000008]
[22:03:34.034]      __var powered_down      = 0;
[22:03:34.034]        // -> [powered_down <= 0x00000000]
[22:03:34.034]      WriteDP(DP_SELECT, 0x00000000);
[22:03:34.036]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:03:34.036]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:03:34.036]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:03:34.036]        // -> [powered_down <= 0x00000001]
[22:03:34.036]    </block>
[22:03:34.036]    <control if="powered_down" while="" timeout="0" info="">
[22:03:34.040]      // if-block "powered_down"
[22:03:34.040]        // =>  TRUE
[22:03:34.040]      <block atomic="false" info="">
[22:03:34.040]        Message(0, "Debug/System power-up request sent");
[22:03:34.042]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:03:34.045]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:03:34.045]      </block>
[22:03:34.045]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:03:34.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:03:34.045]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:03:34.045]        // while-condition  =>  FALSE
[22:03:34.045]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:03:34.045]      </control>
[22:03:34.048]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:03:34.048]        // if-block "(__protocol & 0xFFFF) == 1"
[22:03:34.048]          // =>  FALSE
[22:03:34.048]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:03:34.048]      </control>
[22:03:34.048]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:03:34.048]        // if-block "(__protocol & 0xFFFF) == 2"
[22:03:34.048]          // =>  TRUE
[22:03:34.048]        <block atomic="false" info="">
[22:03:34.048]          Message(0, "executing SWD power up");
[22:03:34.048]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:03:34.052]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:03:34.052]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:03:34.052]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:03:34.052]        </block>
[22:03:34.052]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:03:34.052]      </control>
[22:03:34.052]      // end if-block "powered_down"
[22:03:34.052]    </control>
[22:03:34.052]    <block atomic="false" info="">
[22:03:34.052]      __var DEBUG_PORT_VAL    = 0;
[22:03:34.056]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:03:34.056]      __var ACCESS_POINT_VAL  = 0;
[22:03:34.056]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:03:34.056]      __ap = 1; 
[22:03:34.056]        // -> [__ap <= 0x00000001]
[22:03:34.056]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:03:34.060]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:03:34.060]      __ap = 4;
[22:03:34.060]        // -> [__ap <= 0x00000004]
[22:03:34.062]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:34.065]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:03:34.065]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:03:34.065]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:34.065]    </block>
[22:03:34.065]    <block atomic="false" info="">
[22:03:34.065]      __var nReset = 0x80;
[22:03:34.065]        // -> [nReset <= 0x00000080]
[22:03:34.065]      __var canReadPins = 0;
[22:03:34.068]        // -> [canReadPins <= 0x00000000]
[22:03:34.068]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:03:34.069]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:03:34.069]        // -> [canReadPins <= 0x00000001]
[22:03:34.069]    </block>
[22:03:34.069]    <control if="" while="1" timeout="200" info="">
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.069]      // while-condition  =>  TRUE
[22:03:34.069]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.072]      // while-condition  =>  TRUE
[22:03:34.072]      // while "1"  (timeout="200")
[22:03:34.076]      // while-condition  =>  TRUE
[22:03:34.076]      // while "1"  (timeout="200")
[22:03:34.076]      // while-condition  =>  TRUE
[22:03:34.076]      // while "1"  (timeout="200")
[22:03:34.076]      // while-condition  =>  TRUE
[22:03:34.076]      // while "1"  (timeout="200")
[22:03:34.076]      // while-condition  =>  TRUE
[22:03:34.076]      // while "1"  (timeout="200")
[22:03:34.076]      // while-condition  =>  TRUE
[22:03:34.076]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.077]      // while-condition  =>  TRUE
[22:03:34.077]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.080]      // while-condition  =>  TRUE
[22:03:34.080]      // while "1"  (timeout="200")
[22:03:34.082]      // while-condition  =>  TRUE
[22:03:34.082]      // while "1"  (timeout="200")
[22:03:34.082]      // while  =>  TIMEOUT
[22:03:34.082]      // end while "1"
[22:03:34.082]    </control>
[22:03:34.082]    <control if="canReadPins" while="" timeout="0" info="">
[22:03:34.082]      // if-block "canReadPins"
[22:03:34.082]        // =>  TRUE
[22:03:34.082]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:03:34.082]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:03:34.084]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:03:34.084]        // while-condition  =>  FALSE
[22:03:34.084]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:03:34.084]      </control>
[22:03:34.084]      // end if-block "canReadPins"
[22:03:34.084]    </control>
[22:03:34.084]    <control if="!canReadPins" while="" timeout="0" info="">
[22:03:34.084]      // if-block "!canReadPins"
[22:03:34.088]        // =>  FALSE
[22:03:34.088]      // skip if-block "!canReadPins"
[22:03:34.088]    </control>
[22:03:34.088]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:03:34.088]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:34.088]        // =>  TRUE
[22:03:34.088]      <block atomic="false" info="">
[22:03:34.088]        WriteAP(0x00, 0x190008);
[22:03:34.091]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:34.091]        WriteAP(0xF0, 0x01);
[22:03:34.096]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:34.096]      </block>
[22:03:34.096]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:34.096]    </control>
[22:03:34.096]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:03:34.096]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:34.097]        // =>  FALSE
[22:03:34.097]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:34.097]    </control>
[22:03:34.097]    <block atomic="false" info="">
[22:03:34.097]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:34.100]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:03:34.100]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:03:34.100]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:34.102]      __ap = 0; //lets make sure we reset the access point selection
[22:03:34.102]        // -> [__ap <= 0x00000000]
[22:03:34.102]    </block>
[22:03:34.103]  </sequence>
[22:03:34.103]  
[22:03:34.121]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:03:34.121]  
[22:03:34.122]  <debugvars>
[22:03:34.122]    // Pre-defined
[22:03:34.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:34.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:34.123]    __dp=0x00000000
[22:03:34.123]    __ap=0x00000000
[22:03:34.123]    __traceout=0x00000000      (Trace Disabled)
[22:03:34.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:34.123]    __FlashAddr=0x00000000
[22:03:34.123]    __FlashLen=0x00000000
[22:03:34.123]    __FlashArg=0x00000000
[22:03:34.123]    __FlashOp=0x00000000
[22:03:34.123]    __Result=0x00000000
[22:03:34.123]  </debugvars>
[22:03:34.123]  
[22:03:34.123]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:03:34.123]    <block atomic="false" info="">
[22:03:34.123]      __var deviceID = 0;
[22:03:34.123]        // -> [deviceID <= 0x00000000]
[22:03:34.123]      __var version = 0;
[22:03:34.123]        // -> [version <= 0x00000000]
[22:03:34.123]      __var partNum = 0;
[22:03:34.123]        // -> [partNum <= 0x00000000]
[22:03:34.123]      __var manuf = 0;
[22:03:34.123]        // -> [manuf <= 0x00000000]
[22:03:34.123]      __var isMSPM0G1X0X_G3X0X = 0;
[22:03:34.123]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:03:34.123]      __var isProduction = 0;
[22:03:34.123]        // -> [isProduction <= 0x00000000]
[22:03:34.123]      __var continueId = 0;
[22:03:34.126]        // -> [continueId <= 0x00000000]
[22:03:34.126]      deviceID =   Read32(0x41C40004);
[22:03:34.131]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:03:34.131]        // -> [deviceID <= 0x2BB8802F]
[22:03:34.131]      version = deviceID >> 28;
[22:03:34.131]        // -> [version <= 0x00000002]
[22:03:34.131]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:03:34.131]        // -> [partNum <= 0x0000BB88]
[22:03:34.131]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:03:34.131]        // -> [manuf <= 0x00000017]
[22:03:34.131]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:03:34.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:03:34.132]      isProduction = (version > 0);
[22:03:34.132]        // -> [isProduction <= 0x00000001]
[22:03:34.132]    </block>
[22:03:34.132]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:03:34.132]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:03:34.132]        // =>  FALSE
[22:03:34.132]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:03:34.132]    </control>
[22:03:34.132]    <control if="continueId == 4" while="" timeout="0" info="">
[22:03:34.132]      // if-block "continueId == 4"
[22:03:34.132]        // =>  FALSE
[22:03:34.132]      // skip if-block "continueId == 4"
[22:03:34.132]    </control>
[22:03:34.132]    <control if="!isProduction" while="" timeout="0" info="">
[22:03:34.134]      // if-block "!isProduction"
[22:03:34.134]        // =>  FALSE
[22:03:34.134]      // skip if-block "!isProduction"
[22:03:34.134]    </control>
[22:03:34.134]  </sequence>
[22:03:34.134]  
[22:04:03.378]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:04:03.378]  
[22:04:03.378]  <debugvars>
[22:04:03.378]    // Pre-defined
[22:04:03.378]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:03.378]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:03.378]    __dp=0x00000000
[22:04:03.378]    __ap=0x00000000
[22:04:03.378]    __traceout=0x00000000      (Trace Disabled)
[22:04:03.378]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:03.378]    __FlashAddr=0x00000000
[22:04:03.378]    __FlashLen=0x00000000
[22:04:03.378]    __FlashArg=0x00000000
[22:04:03.378]    __FlashOp=0x00000000
[22:04:03.378]    __Result=0x00000000
[22:04:03.378]  </debugvars>
[22:04:03.378]  
[22:04:03.378]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:04:03.378]    <block atomic="false" info="">
[22:04:03.378]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:04:03.378]        // -> [isSWJ <= 0x00000001]
[22:04:03.378]      __var hasDormant = __protocol & 0x00020000;
[22:04:03.378]        // -> [hasDormant <= 0x00000000]
[22:04:03.378]      __var protType   = __protocol & 0x0000FFFF;
[22:04:03.378]        // -> [protType <= 0x00000002]
[22:04:03.378]    </block>
[22:04:03.378]    <control if="protType == 1" while="" timeout="0" info="">
[22:04:03.378]      // if-block "protType == 1"
[22:04:03.378]        // =>  FALSE
[22:04:03.378]      // skip if-block "protType == 1"
[22:04:03.382]    </control>
[22:04:03.382]    <control if="protType == 2" while="" timeout="0" info="">
[22:04:03.382]      // if-block "protType == 2"
[22:04:03.382]        // =>  TRUE
[22:04:03.382]      <control if="isSWJ" while="" timeout="0" info="">
[22:04:03.382]        // if-block "isSWJ"
[22:04:03.382]          // =>  TRUE
[22:04:03.382]        <control if="hasDormant" while="" timeout="0" info="">
[22:04:03.382]          // if-block "hasDormant"
[22:04:03.382]            // =>  FALSE
[22:04:03.382]          // skip if-block "hasDormant"
[22:04:03.382]        </control>
[22:04:03.382]        <control if="!hasDormant" while="" timeout="0" info="">
[22:04:03.382]          // if-block "!hasDormant"
[22:04:03.382]            // =>  TRUE
[22:04:03.382]          <block atomic="false" info="">
[22:04:03.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:04:03.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:03.382]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:04:03.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:04:03.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:04:03.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:03.388]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:04:03.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:04:03.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:04:03.390]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:03.390]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:04:03.390]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:04:03.390]          </block>
[22:04:03.390]          // end if-block "!hasDormant"
[22:04:03.390]        </control>
[22:04:03.390]        // end if-block "isSWJ"
[22:04:03.390]      </control>
[22:04:03.390]      <control if="!isSWJ" while="" timeout="0" info="">
[22:04:03.390]        // if-block "!isSWJ"
[22:04:03.390]          // =>  FALSE
[22:04:03.390]        // skip if-block "!isSWJ"
[22:04:03.390]      </control>
[22:04:03.390]      <block atomic="false" info="">
[22:04:03.390]        ReadDP(0x0);
[22:04:03.394]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:04:03.394]      </block>
[22:04:03.394]      // end if-block "protType == 2"
[22:04:03.394]    </control>
[22:04:03.394]  </sequence>
[22:04:03.394]  
[22:04:03.398]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:04:03.398]  
[22:04:03.398]  <debugvars>
[22:04:03.398]    // Pre-defined
[22:04:03.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:03.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:03.398]    __dp=0x00000000
[22:04:03.398]    __ap=0x00000000
[22:04:03.398]    __traceout=0x00000000      (Trace Disabled)
[22:04:03.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:03.398]    __FlashAddr=0x00000000
[22:04:03.398]    __FlashLen=0x00000000
[22:04:03.398]    __FlashArg=0x00000000
[22:04:03.398]    __FlashOp=0x00000000
[22:04:03.398]    __Result=0x00000000
[22:04:03.398]  </debugvars>
[22:04:03.398]  
[22:04:03.398]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:04:03.398]    <block atomic="false" info="">
[22:04:03.398]      __var SW_DP_ABORT       = 0x0;
[22:04:03.398]        // -> [SW_DP_ABORT <= 0x00000000]
[22:04:03.398]      __var DP_CTRL_STAT      = 0x4;
[22:04:03.398]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:04:03.402]      __var DP_SELECT         = 0x8;
[22:04:03.402]        // -> [DP_SELECT <= 0x00000008]
[22:04:03.402]      __var powered_down      = 0;
[22:04:03.402]        // -> [powered_down <= 0x00000000]
[22:04:03.402]      WriteDP(DP_SELECT, 0x00000000);
[22:04:03.404]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:04:03.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:04:03.404]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:04:03.404]        // -> [powered_down <= 0x00000001]
[22:04:03.404]    </block>
[22:04:03.404]    <control if="powered_down" while="" timeout="0" info="">
[22:04:03.404]      // if-block "powered_down"
[22:04:03.406]        // =>  TRUE
[22:04:03.406]      <block atomic="false" info="">
[22:04:03.406]        Message(0, "Debug/System power-up request sent");
[22:04:03.408]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:04:03.410]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:04:03.410]      </block>
[22:04:03.410]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:04:03.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:04:03.410]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:04:03.410]        // while-condition  =>  FALSE
[22:04:03.410]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:04:03.410]      </control>
[22:04:03.410]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:04:03.410]        // if-block "(__protocol & 0xFFFF) == 1"
[22:04:03.410]          // =>  FALSE
[22:04:03.414]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:04:03.414]      </control>
[22:04:03.414]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:04:03.414]        // if-block "(__protocol & 0xFFFF) == 2"
[22:04:03.414]          // =>  TRUE
[22:04:03.414]        <block atomic="false" info="">
[22:04:03.414]          Message(0, "executing SWD power up");
[22:04:03.416]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:04:03.419]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:04:03.419]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:04:03.419]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:04:03.419]        </block>
[22:04:03.419]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:04:03.419]      </control>
[22:04:03.419]      // end if-block "powered_down"
[22:04:03.419]    </control>
[22:04:03.419]    <block atomic="false" info="">
[22:04:03.419]      __var DEBUG_PORT_VAL    = 0;
[22:04:03.419]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:04:03.419]      __var ACCESS_POINT_VAL  = 0;
[22:04:03.419]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:04:03.419]      __ap = 1; 
[22:04:03.419]        // -> [__ap <= 0x00000001]
[22:04:03.419]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:04:03.423]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:04:03.423]      __ap = 4;
[22:04:03.423]        // -> [__ap <= 0x00000004]
[22:04:03.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:03.431]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:04:03.431]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:04:03.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:03.431]    </block>
[22:04:03.431]    <block atomic="false" info="">
[22:04:03.431]      __var nReset = 0x80;
[22:04:03.431]        // -> [nReset <= 0x00000080]
[22:04:03.431]      __var canReadPins = 0;
[22:04:03.431]        // -> [canReadPins <= 0x00000000]
[22:04:03.431]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:04:03.431]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:04:03.435]        // -> [canReadPins <= 0x00000001]
[22:04:03.435]    </block>
[22:04:03.435]    <control if="" while="1" timeout="200" info="">
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.435]      // while-condition  =>  TRUE
[22:04:03.435]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.438]      // while "1"  (timeout="200")
[22:04:03.438]      // while-condition  =>  TRUE
[22:04:03.442]      // while "1"  (timeout="200")
[22:04:03.442]      // while  =>  TIMEOUT
[22:04:03.442]      // end while "1"
[22:04:03.442]    </control>
[22:04:03.442]    <control if="canReadPins" while="" timeout="0" info="">
[22:04:03.442]      // if-block "canReadPins"
[22:04:03.442]        // =>  TRUE
[22:04:03.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:04:03.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:04:03.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:04:03.442]        // while-condition  =>  FALSE
[22:04:03.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:04:03.442]      </control>
[22:04:03.442]      // end if-block "canReadPins"
[22:04:03.442]    </control>
[22:04:03.442]    <control if="!canReadPins" while="" timeout="0" info="">
[22:04:03.442]      // if-block "!canReadPins"
[22:04:03.442]        // =>  FALSE
[22:04:03.442]      // skip if-block "!canReadPins"
[22:04:03.442]    </control>
[22:04:03.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:04:03.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:03.442]        // =>  TRUE
[22:04:03.442]      <block atomic="false" info="">
[22:04:03.442]        WriteAP(0x00, 0x190008);
[22:04:03.446]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:03.446]        WriteAP(0xF0, 0x01);
[22:04:03.450]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:03.450]      </block>
[22:04:03.450]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:03.450]    </control>
[22:04:03.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:04:03.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:03.450]        // =>  FALSE
[22:04:03.450]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:03.454]    </control>
[22:04:03.454]    <block atomic="false" info="">
[22:04:03.454]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:03.454]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:04:03.454]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:04:03.454]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:03.459]      __ap = 0; //lets make sure we reset the access point selection
[22:04:03.459]        // -> [__ap <= 0x00000000]
[22:04:03.459]    </block>
[22:04:03.459]  </sequence>
[22:04:03.459]  
[22:04:03.478]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:04:03.478]  
[22:04:03.478]  <debugvars>
[22:04:03.479]    // Pre-defined
[22:04:03.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:03.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:03.479]    __dp=0x00000000
[22:04:03.479]    __ap=0x00000000
[22:04:03.479]    __traceout=0x00000000      (Trace Disabled)
[22:04:03.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:03.479]    __FlashAddr=0x00000000
[22:04:03.479]    __FlashLen=0x00000000
[22:04:03.479]    __FlashArg=0x00000000
[22:04:03.480]    __FlashOp=0x00000000
[22:04:03.480]    __Result=0x00000000
[22:04:03.480]  </debugvars>
[22:04:03.480]  
[22:04:03.480]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:04:03.480]    <block atomic="false" info="">
[22:04:03.480]      __var deviceID = 0;
[22:04:03.480]        // -> [deviceID <= 0x00000000]
[22:04:03.480]      __var version = 0;
[22:04:03.480]        // -> [version <= 0x00000000]
[22:04:03.480]      __var partNum = 0;
[22:04:03.480]        // -> [partNum <= 0x00000000]
[22:04:03.480]      __var manuf = 0;
[22:04:03.480]        // -> [manuf <= 0x00000000]
[22:04:03.480]      __var isMSPM0G1X0X_G3X0X = 0;
[22:04:03.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:04:03.480]      __var isProduction = 0;
[22:04:03.480]        // -> [isProduction <= 0x00000000]
[22:04:03.480]      __var continueId = 0;
[22:04:03.480]        // -> [continueId <= 0x00000000]
[22:04:03.480]      deviceID =   Read32(0x41C40004);
[22:04:03.486]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:04:03.486]        // -> [deviceID <= 0x2BB8802F]
[22:04:03.486]      version = deviceID >> 28;
[22:04:03.486]        // -> [version <= 0x00000002]
[22:04:03.486]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:04:03.486]        // -> [partNum <= 0x0000BB88]
[22:04:03.486]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:04:03.486]        // -> [manuf <= 0x00000017]
[22:04:03.488]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:04:03.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:04:03.488]      isProduction = (version > 0);
[22:04:03.488]        // -> [isProduction <= 0x00000001]
[22:04:03.488]    </block>
[22:04:03.488]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:04:03.488]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:04:03.488]        // =>  FALSE
[22:04:03.488]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:04:03.488]    </control>
[22:04:03.488]    <control if="continueId == 4" while="" timeout="0" info="">
[22:04:03.488]      // if-block "continueId == 4"
[22:04:03.488]        // =>  FALSE
[22:04:03.488]      // skip if-block "continueId == 4"
[22:04:03.488]    </control>
[22:04:03.488]    <control if="!isProduction" while="" timeout="0" info="">
[22:04:03.488]      // if-block "!isProduction"
[22:04:03.488]        // =>  FALSE
[22:04:03.490]      // skip if-block "!isProduction"
[22:04:03.490]    </control>
[22:04:03.490]  </sequence>
[22:04:03.490]  
[22:04:30.126]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:04:30.126]  
[22:04:30.126]  <debugvars>
[22:04:30.126]    // Pre-defined
[22:04:30.126]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:30.126]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:30.126]    __dp=0x00000000
[22:04:30.126]    __ap=0x00000000
[22:04:30.126]    __traceout=0x00000000      (Trace Disabled)
[22:04:30.126]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:30.126]    __FlashAddr=0x00000000
[22:04:30.126]    __FlashLen=0x00000000
[22:04:30.126]    __FlashArg=0x00000000
[22:04:30.126]    __FlashOp=0x00000000
[22:04:30.126]    __Result=0x00000000
[22:04:30.126]  </debugvars>
[22:04:30.126]  
[22:04:30.126]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:04:30.126]    <block atomic="false" info="">
[22:04:30.126]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:04:30.126]        // -> [isSWJ <= 0x00000001]
[22:04:30.129]      __var hasDormant = __protocol & 0x00020000;
[22:04:30.129]        // -> [hasDormant <= 0x00000000]
[22:04:30.129]      __var protType   = __protocol & 0x0000FFFF;
[22:04:30.129]        // -> [protType <= 0x00000002]
[22:04:30.129]    </block>
[22:04:30.129]    <control if="protType == 1" while="" timeout="0" info="">
[22:04:30.129]      // if-block "protType == 1"
[22:04:30.129]        // =>  FALSE
[22:04:30.129]      // skip if-block "protType == 1"
[22:04:30.129]    </control>
[22:04:30.129]    <control if="protType == 2" while="" timeout="0" info="">
[22:04:30.129]      // if-block "protType == 2"
[22:04:30.129]        // =>  TRUE
[22:04:30.129]      <control if="isSWJ" while="" timeout="0" info="">
[22:04:30.129]        // if-block "isSWJ"
[22:04:30.129]          // =>  TRUE
[22:04:30.129]        <control if="hasDormant" while="" timeout="0" info="">
[22:04:30.129]          // if-block "hasDormant"
[22:04:30.129]            // =>  FALSE
[22:04:30.129]          // skip if-block "hasDormant"
[22:04:30.129]        </control>
[22:04:30.129]        <control if="!hasDormant" while="" timeout="0" info="">
[22:04:30.129]          // if-block "!hasDormant"
[22:04:30.129]            // =>  TRUE
[22:04:30.129]          <block atomic="false" info="">
[22:04:30.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:04:30.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:30.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:04:30.132]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:04:30.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:04:30.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:30.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:04:30.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:04:30.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:04:30.138]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:30.139]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:04:30.140]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:04:30.140]          </block>
[22:04:30.140]          // end if-block "!hasDormant"
[22:04:30.140]        </control>
[22:04:30.140]        // end if-block "isSWJ"
[22:04:30.140]      </control>
[22:04:30.140]      <control if="!isSWJ" while="" timeout="0" info="">
[22:04:30.140]        // if-block "!isSWJ"
[22:04:30.140]          // =>  FALSE
[22:04:30.140]        // skip if-block "!isSWJ"
[22:04:30.140]      </control>
[22:04:30.140]      <block atomic="false" info="">
[22:04:30.142]        ReadDP(0x0);
[22:04:30.142]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:04:30.143]      </block>
[22:04:30.143]      // end if-block "protType == 2"
[22:04:30.143]    </control>
[22:04:30.143]  </sequence>
[22:04:30.143]  
[22:04:30.146]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:04:30.146]  
[22:04:30.146]  <debugvars>
[22:04:30.146]    // Pre-defined
[22:04:30.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:30.146]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:30.146]    __dp=0x00000000
[22:04:30.146]    __ap=0x00000000
[22:04:30.146]    __traceout=0x00000000      (Trace Disabled)
[22:04:30.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:30.146]    __FlashAddr=0x00000000
[22:04:30.146]    __FlashLen=0x00000000
[22:04:30.146]    __FlashArg=0x00000000
[22:04:30.147]    __FlashOp=0x00000000
[22:04:30.147]    __Result=0x00000000
[22:04:30.147]  </debugvars>
[22:04:30.147]  
[22:04:30.147]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:04:30.147]    <block atomic="false" info="">
[22:04:30.147]      __var SW_DP_ABORT       = 0x0;
[22:04:30.147]        // -> [SW_DP_ABORT <= 0x00000000]
[22:04:30.147]      __var DP_CTRL_STAT      = 0x4;
[22:04:30.147]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:04:30.147]      __var DP_SELECT         = 0x8;
[22:04:30.147]        // -> [DP_SELECT <= 0x00000008]
[22:04:30.147]      __var powered_down      = 0;
[22:04:30.149]        // -> [powered_down <= 0x00000000]
[22:04:30.149]      WriteDP(DP_SELECT, 0x00000000);
[22:04:30.150]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:04:30.150]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:04:30.151]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:04:30.151]        // -> [powered_down <= 0x00000001]
[22:04:30.151]    </block>
[22:04:30.151]    <control if="powered_down" while="" timeout="0" info="">
[22:04:30.151]      // if-block "powered_down"
[22:04:30.151]        // =>  TRUE
[22:04:30.151]      <block atomic="false" info="">
[22:04:30.151]        Message(0, "Debug/System power-up request sent");
[22:04:30.155]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:04:30.157]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:04:30.157]      </block>
[22:04:30.157]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:04:30.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:04:30.158]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:04:30.158]        // while-condition  =>  FALSE
[22:04:30.158]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:04:30.158]      </control>
[22:04:30.159]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:04:30.159]        // if-block "(__protocol & 0xFFFF) == 1"
[22:04:30.159]          // =>  FALSE
[22:04:30.159]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:04:30.159]      </control>
[22:04:30.159]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:04:30.159]        // if-block "(__protocol & 0xFFFF) == 2"
[22:04:30.159]          // =>  TRUE
[22:04:30.159]        <block atomic="false" info="">
[22:04:30.159]          Message(0, "executing SWD power up");
[22:04:30.161]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:04:30.161]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:04:30.161]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:04:30.161]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:04:30.165]        </block>
[22:04:30.165]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:04:30.165]      </control>
[22:04:30.165]      // end if-block "powered_down"
[22:04:30.165]    </control>
[22:04:30.165]    <block atomic="false" info="">
[22:04:30.165]      __var DEBUG_PORT_VAL    = 0;
[22:04:30.165]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:04:30.165]      __var ACCESS_POINT_VAL  = 0;
[22:04:30.165]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:04:30.165]      __ap = 1; 
[22:04:30.165]        // -> [__ap <= 0x00000001]
[22:04:30.165]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:04:30.171]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:04:30.171]      __ap = 4;
[22:04:30.171]        // -> [__ap <= 0x00000004]
[22:04:30.171]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:30.173]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:04:30.173]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:04:30.173]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:30.177]    </block>
[22:04:30.177]    <block atomic="false" info="">
[22:04:30.177]      __var nReset = 0x80;
[22:04:30.177]        // -> [nReset <= 0x00000080]
[22:04:30.177]      __var canReadPins = 0;
[22:04:30.177]        // -> [canReadPins <= 0x00000000]
[22:04:30.177]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:04:30.181]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:04:30.181]        // -> [canReadPins <= 0x00000001]
[22:04:30.181]    </block>
[22:04:30.183]    <control if="" while="1" timeout="200" info="">
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.183]      // while-condition  =>  TRUE
[22:04:30.183]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.185]      // while-condition  =>  TRUE
[22:04:30.185]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.188]      // while-condition  =>  TRUE
[22:04:30.188]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.190]      // while-condition  =>  TRUE
[22:04:30.190]      // while "1"  (timeout="200")
[22:04:30.191]      // while-condition  =>  TRUE
[22:04:30.191]      // while "1"  (timeout="200")
[22:04:30.191]      // while  =>  TIMEOUT
[22:04:30.191]      // end while "1"
[22:04:30.191]    </control>
[22:04:30.191]    <control if="canReadPins" while="" timeout="0" info="">
[22:04:30.191]      // if-block "canReadPins"
[22:04:30.191]        // =>  TRUE
[22:04:30.191]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:04:30.191]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:04:30.195]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:04:30.195]        // while-condition  =>  FALSE
[22:04:30.195]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:04:30.195]      </control>
[22:04:30.195]      // end if-block "canReadPins"
[22:04:30.195]    </control>
[22:04:30.195]    <control if="!canReadPins" while="" timeout="0" info="">
[22:04:30.195]      // if-block "!canReadPins"
[22:04:30.195]        // =>  FALSE
[22:04:30.195]      // skip if-block "!canReadPins"
[22:04:30.195]    </control>
[22:04:30.195]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:04:30.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:30.195]        // =>  TRUE
[22:04:30.195]      <block atomic="false" info="">
[22:04:30.195]        WriteAP(0x00, 0x190008);
[22:04:30.198]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:30.198]        WriteAP(0xF0, 0x01);
[22:04:30.204]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:30.204]      </block>
[22:04:30.204]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:30.204]    </control>
[22:04:30.204]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:04:30.204]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:30.204]        // =>  FALSE
[22:04:30.204]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:30.204]    </control>
[22:04:30.204]    <block atomic="false" info="">
[22:04:30.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:30.206]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:04:30.206]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:04:30.206]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:30.211]      __ap = 0; //lets make sure we reset the access point selection
[22:04:30.211]        // -> [__ap <= 0x00000000]
[22:04:30.211]    </block>
[22:04:30.211]  </sequence>
[22:04:30.211]  
[22:04:30.233]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:04:30.233]  
[22:04:30.233]  <debugvars>
[22:04:30.233]    // Pre-defined
[22:04:30.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:30.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:30.233]    __dp=0x00000000
[22:04:30.233]    __ap=0x00000000
[22:04:30.233]    __traceout=0x00000000      (Trace Disabled)
[22:04:30.233]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:30.233]    __FlashAddr=0x00000000
[22:04:30.233]    __FlashLen=0x00000000
[22:04:30.233]    __FlashArg=0x00000000
[22:04:30.233]    __FlashOp=0x00000000
[22:04:30.233]    __Result=0x00000000
[22:04:30.233]  </debugvars>
[22:04:30.233]  
[22:04:30.233]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:04:30.233]    <block atomic="false" info="">
[22:04:30.233]      __var deviceID = 0;
[22:04:30.233]        // -> [deviceID <= 0x00000000]
[22:04:30.233]      __var version = 0;
[22:04:30.233]        // -> [version <= 0x00000000]
[22:04:30.233]      __var partNum = 0;
[22:04:30.233]        // -> [partNum <= 0x00000000]
[22:04:30.233]      __var manuf = 0;
[22:04:30.233]        // -> [manuf <= 0x00000000]
[22:04:30.233]      __var isMSPM0G1X0X_G3X0X = 0;
[22:04:30.233]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:04:30.233]      __var isProduction = 0;
[22:04:30.233]        // -> [isProduction <= 0x00000000]
[22:04:30.233]      __var continueId = 0;
[22:04:30.233]        // -> [continueId <= 0x00000000]
[22:04:30.237]      deviceID =   Read32(0x41C40004);
[22:04:30.241]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:04:30.241]        // -> [deviceID <= 0x2BB8802F]
[22:04:30.241]      version = deviceID >> 28;
[22:04:30.241]        // -> [version <= 0x00000002]
[22:04:30.241]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:04:30.241]        // -> [partNum <= 0x0000BB88]
[22:04:30.241]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:04:30.243]        // -> [manuf <= 0x00000017]
[22:04:30.243]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:04:30.243]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:04:30.243]      isProduction = (version > 0);
[22:04:30.243]        // -> [isProduction <= 0x00000001]
[22:04:30.243]    </block>
[22:04:30.243]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:04:30.243]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:04:30.243]        // =>  FALSE
[22:04:30.243]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:04:30.243]    </control>
[22:04:30.243]    <control if="continueId == 4" while="" timeout="0" info="">
[22:04:30.243]      // if-block "continueId == 4"
[22:04:30.243]        // =>  FALSE
[22:04:30.243]      // skip if-block "continueId == 4"
[22:04:30.243]    </control>
[22:04:30.243]    <control if="!isProduction" while="" timeout="0" info="">
[22:04:30.243]      // if-block "!isProduction"
[22:04:30.243]        // =>  FALSE
[22:04:30.243]      // skip if-block "!isProduction"
[22:04:30.243]    </control>
[22:04:30.243]  </sequence>
[22:04:30.245]  
[22:04:57.665]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:04:57.665]  
[22:04:57.665]  <debugvars>
[22:04:57.665]    // Pre-defined
[22:04:57.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:57.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:57.667]    __dp=0x00000000
[22:04:57.667]    __ap=0x00000000
[22:04:57.667]    __traceout=0x00000000      (Trace Disabled)
[22:04:57.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:57.667]    __FlashAddr=0x00000000
[22:04:57.667]    __FlashLen=0x00000000
[22:04:57.667]    __FlashArg=0x00000000
[22:04:57.667]    __FlashOp=0x00000000
[22:04:57.667]    __Result=0x00000000
[22:04:57.667]  </debugvars>
[22:04:57.667]  
[22:04:57.667]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:04:57.667]    <block atomic="false" info="">
[22:04:57.669]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:04:57.669]        // -> [isSWJ <= 0x00000001]
[22:04:57.669]      __var hasDormant = __protocol & 0x00020000;
[22:04:57.669]        // -> [hasDormant <= 0x00000000]
[22:04:57.669]      __var protType   = __protocol & 0x0000FFFF;
[22:04:57.669]        // -> [protType <= 0x00000002]
[22:04:57.669]    </block>
[22:04:57.669]    <control if="protType == 1" while="" timeout="0" info="">
[22:04:57.669]      // if-block "protType == 1"
[22:04:57.670]        // =>  FALSE
[22:04:57.670]      // skip if-block "protType == 1"
[22:04:57.670]    </control>
[22:04:57.670]    <control if="protType == 2" while="" timeout="0" info="">
[22:04:57.670]      // if-block "protType == 2"
[22:04:57.670]        // =>  TRUE
[22:04:57.670]      <control if="isSWJ" while="" timeout="0" info="">
[22:04:57.671]        // if-block "isSWJ"
[22:04:57.671]          // =>  TRUE
[22:04:57.671]        <control if="hasDormant" while="" timeout="0" info="">
[22:04:57.671]          // if-block "hasDormant"
[22:04:57.671]            // =>  FALSE
[22:04:57.671]          // skip if-block "hasDormant"
[22:04:57.671]        </control>
[22:04:57.671]        <control if="!hasDormant" while="" timeout="0" info="">
[22:04:57.671]          // if-block "!hasDormant"
[22:04:57.671]            // =>  TRUE
[22:04:57.671]          <block atomic="false" info="">
[22:04:57.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:04:57.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:57.673]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:04:57.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:04:57.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:04:57.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:57.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:04:57.679]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:04:57.679]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:04:57.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:04:57.681]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:04:57.683]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:04:57.683]          </block>
[22:04:57.683]          // end if-block "!hasDormant"
[22:04:57.683]        </control>
[22:04:57.683]        // end if-block "isSWJ"
[22:04:57.683]      </control>
[22:04:57.684]      <control if="!isSWJ" while="" timeout="0" info="">
[22:04:57.684]        // if-block "!isSWJ"
[22:04:57.684]          // =>  FALSE
[22:04:57.684]        // skip if-block "!isSWJ"
[22:04:57.684]      </control>
[22:04:57.684]      <block atomic="false" info="">
[22:04:57.684]        ReadDP(0x0);
[22:04:57.685]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:04:57.685]      </block>
[22:04:57.685]      // end if-block "protType == 2"
[22:04:57.685]    </control>
[22:04:57.685]  </sequence>
[22:04:57.685]  
[22:04:57.688]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:04:57.688]  
[22:04:57.688]  <debugvars>
[22:04:57.688]    // Pre-defined
[22:04:57.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:57.688]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:57.688]    __dp=0x00000000
[22:04:57.688]    __ap=0x00000000
[22:04:57.688]    __traceout=0x00000000      (Trace Disabled)
[22:04:57.688]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:57.688]    __FlashAddr=0x00000000
[22:04:57.688]    __FlashLen=0x00000000
[22:04:57.688]    __FlashArg=0x00000000
[22:04:57.688]    __FlashOp=0x00000000
[22:04:57.688]    __Result=0x00000000
[22:04:57.688]  </debugvars>
[22:04:57.688]  
[22:04:57.688]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:04:57.688]    <block atomic="false" info="">
[22:04:57.692]      __var SW_DP_ABORT       = 0x0;
[22:04:57.692]        // -> [SW_DP_ABORT <= 0x00000000]
[22:04:57.692]      __var DP_CTRL_STAT      = 0x4;
[22:04:57.692]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:04:57.692]      __var DP_SELECT         = 0x8;
[22:04:57.692]        // -> [DP_SELECT <= 0x00000008]
[22:04:57.692]      __var powered_down      = 0;
[22:04:57.692]        // -> [powered_down <= 0x00000000]
[22:04:57.692]      WriteDP(DP_SELECT, 0x00000000);
[22:04:57.692]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:04:57.692]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:04:57.698]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:04:57.698]        // -> [powered_down <= 0x00000001]
[22:04:57.698]    </block>
[22:04:57.698]    <control if="powered_down" while="" timeout="0" info="">
[22:04:57.698]      // if-block "powered_down"
[22:04:57.698]        // =>  TRUE
[22:04:57.698]      <block atomic="false" info="">
[22:04:57.698]        Message(0, "Debug/System power-up request sent");
[22:04:57.700]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:04:57.704]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:04:57.704]      </block>
[22:04:57.704]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:04:57.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:04:57.704]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:04:57.704]        // while-condition  =>  FALSE
[22:04:57.704]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:04:57.704]      </control>
[22:04:57.704]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:04:57.704]        // if-block "(__protocol & 0xFFFF) == 1"
[22:04:57.704]          // =>  FALSE
[22:04:57.704]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:04:57.704]      </control>
[22:04:57.704]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:04:57.707]        // if-block "(__protocol & 0xFFFF) == 2"
[22:04:57.707]          // =>  TRUE
[22:04:57.707]        <block atomic="false" info="">
[22:04:57.707]          Message(0, "executing SWD power up");
[22:04:57.707]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:04:57.711]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:04:57.711]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:04:57.715]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:04:57.715]        </block>
[22:04:57.715]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:04:57.715]      </control>
[22:04:57.715]      // end if-block "powered_down"
[22:04:57.715]    </control>
[22:04:57.715]    <block atomic="false" info="">
[22:04:57.715]      __var DEBUG_PORT_VAL    = 0;
[22:04:57.715]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:04:57.715]      __var ACCESS_POINT_VAL  = 0;
[22:04:57.715]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:04:57.715]      __ap = 1; 
[22:04:57.715]        // -> [__ap <= 0x00000001]
[22:04:57.715]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:04:57.719]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:04:57.719]      __ap = 4;
[22:04:57.719]        // -> [__ap <= 0x00000004]
[22:04:57.719]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:57.723]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:04:57.723]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:04:57.723]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:57.725]    </block>
[22:04:57.725]    <block atomic="false" info="">
[22:04:57.725]      __var nReset = 0x80;
[22:04:57.725]        // -> [nReset <= 0x00000080]
[22:04:57.725]      __var canReadPins = 0;
[22:04:57.725]        // -> [canReadPins <= 0x00000000]
[22:04:57.725]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:04:57.728]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:04:57.728]        // -> [canReadPins <= 0x00000001]
[22:04:57.728]    </block>
[22:04:57.728]    <control if="" while="1" timeout="200" info="">
[22:04:57.728]      // while "1"  (timeout="200")
[22:04:57.728]      // while-condition  =>  TRUE
[22:04:57.728]      // while "1"  (timeout="200")
[22:04:57.728]      // while-condition  =>  TRUE
[22:04:57.728]      // while "1"  (timeout="200")
[22:04:57.728]      // while-condition  =>  TRUE
[22:04:57.728]      // while "1"  (timeout="200")
[22:04:57.728]      // while-condition  =>  TRUE
[22:04:57.728]      // while "1"  (timeout="200")
[22:04:57.728]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.729]      // while "1"  (timeout="200")
[22:04:57.729]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.731]      // while-condition  =>  TRUE
[22:04:57.731]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.732]      // while "1"  (timeout="200")
[22:04:57.732]      // while-condition  =>  TRUE
[22:04:57.735]      // while "1"  (timeout="200")
[22:04:57.735]      // while-condition  =>  TRUE
[22:04:57.735]      // while "1"  (timeout="200")
[22:04:57.735]      // while-condition  =>  TRUE
[22:04:57.735]      // while "1"  (timeout="200")
[22:04:57.735]      // while-condition  =>  TRUE
[22:04:57.735]      // while "1"  (timeout="200")
[22:04:57.735]      // while-condition  =>  TRUE
[22:04:57.735]      // while "1"  (timeout="200")
[22:04:57.735]      // while-condition  =>  TRUE
[22:04:57.736]      // while "1"  (timeout="200")
[22:04:57.736]      // while-condition  =>  TRUE
[22:04:57.736]      // while "1"  (timeout="200")
[22:04:57.736]      // while-condition  =>  TRUE
[22:04:57.736]      // while "1"  (timeout="200")
[22:04:57.736]      // while-condition  =>  TRUE
[22:04:57.736]      // while "1"  (timeout="200")
[22:04:57.736]      // while-condition  =>  TRUE
[22:04:57.736]      // while "1"  (timeout="200")
[22:04:57.737]      // while-condition  =>  TRUE
[22:04:57.737]      // while "1"  (timeout="200")
[22:04:57.737]      // while  =>  TIMEOUT
[22:04:57.737]      // end while "1"
[22:04:57.737]    </control>
[22:04:57.737]    <control if="canReadPins" while="" timeout="0" info="">
[22:04:57.737]      // if-block "canReadPins"
[22:04:57.737]        // =>  TRUE
[22:04:57.737]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:04:57.737]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:04:57.738]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:04:57.738]        // while-condition  =>  FALSE
[22:04:57.738]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:04:57.738]      </control>
[22:04:57.740]      // end if-block "canReadPins"
[22:04:57.740]    </control>
[22:04:57.740]    <control if="!canReadPins" while="" timeout="0" info="">
[22:04:57.740]      // if-block "!canReadPins"
[22:04:57.740]        // =>  FALSE
[22:04:57.740]      // skip if-block "!canReadPins"
[22:04:57.740]    </control>
[22:04:57.740]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:04:57.740]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:57.740]        // =>  TRUE
[22:04:57.740]      <block atomic="false" info="">
[22:04:57.740]        WriteAP(0x00, 0x190008);
[22:04:57.740]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:57.740]        WriteAP(0xF0, 0x01);
[22:04:57.746]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:04:57.746]      </block>
[22:04:57.746]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:04:57.746]    </control>
[22:04:57.746]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:04:57.746]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:57.746]        // =>  FALSE
[22:04:57.747]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:04:57.747]    </control>
[22:04:57.747]    <block atomic="false" info="">
[22:04:57.747]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:04:57.749]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:04:57.749]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:04:57.749]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:04:57.753]      __ap = 0; //lets make sure we reset the access point selection
[22:04:57.753]        // -> [__ap <= 0x00000000]
[22:04:57.753]    </block>
[22:04:57.753]  </sequence>
[22:04:57.753]  
[22:04:57.774]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:04:57.774]  
[22:04:57.774]  <debugvars>
[22:04:57.774]    // Pre-defined
[22:04:57.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:04:57.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:04:57.777]    __dp=0x00000000
[22:04:57.777]    __ap=0x00000000
[22:04:57.777]    __traceout=0x00000000      (Trace Disabled)
[22:04:57.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:04:57.777]    __FlashAddr=0x00000000
[22:04:57.777]    __FlashLen=0x00000000
[22:04:57.777]    __FlashArg=0x00000000
[22:04:57.777]    __FlashOp=0x00000000
[22:04:57.777]    __Result=0x00000000
[22:04:57.777]  </debugvars>
[22:04:57.777]  
[22:04:57.777]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:04:57.777]    <block atomic="false" info="">
[22:04:57.777]      __var deviceID = 0;
[22:04:57.777]        // -> [deviceID <= 0x00000000]
[22:04:57.777]      __var version = 0;
[22:04:57.777]        // -> [version <= 0x00000000]
[22:04:57.777]      __var partNum = 0;
[22:04:57.779]        // -> [partNum <= 0x00000000]
[22:04:57.779]      __var manuf = 0;
[22:04:57.779]        // -> [manuf <= 0x00000000]
[22:04:57.779]      __var isMSPM0G1X0X_G3X0X = 0;
[22:04:57.779]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:04:57.779]      __var isProduction = 0;
[22:04:57.779]        // -> [isProduction <= 0x00000000]
[22:04:57.779]      __var continueId = 0;
[22:04:57.779]        // -> [continueId <= 0x00000000]
[22:04:57.779]      deviceID =   Read32(0x41C40004);
[22:04:57.783]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:04:57.783]        // -> [deviceID <= 0x2BB8802F]
[22:04:57.783]      version = deviceID >> 28;
[22:04:57.783]        // -> [version <= 0x00000002]
[22:04:57.783]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:04:57.783]        // -> [partNum <= 0x0000BB88]
[22:04:57.783]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:04:57.783]        // -> [manuf <= 0x00000017]
[22:04:57.783]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:04:57.783]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:04:57.783]      isProduction = (version > 0);
[22:04:57.783]        // -> [isProduction <= 0x00000001]
[22:04:57.783]    </block>
[22:04:57.785]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:04:57.785]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:04:57.785]        // =>  FALSE
[22:04:57.785]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:04:57.785]    </control>
[22:04:57.785]    <control if="continueId == 4" while="" timeout="0" info="">
[22:04:57.785]      // if-block "continueId == 4"
[22:04:57.785]        // =>  FALSE
[22:04:57.785]      // skip if-block "continueId == 4"
[22:04:57.785]    </control>
[22:04:57.785]    <control if="!isProduction" while="" timeout="0" info="">
[22:04:57.785]      // if-block "!isProduction"
[22:04:57.785]        // =>  FALSE
[22:04:57.785]      // skip if-block "!isProduction"
[22:04:57.785]    </control>
[22:04:57.785]  </sequence>
[22:04:57.785]  
[22:05:20.995]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:05:20.995]  
[22:05:21.002]  <debugvars>
[22:05:21.002]    // Pre-defined
[22:05:21.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:21.002]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:21.002]    __dp=0x00000000
[22:05:21.002]    __ap=0x00000000
[22:05:21.002]    __traceout=0x00000000      (Trace Disabled)
[22:05:21.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:21.002]    __FlashAddr=0x00000000
[22:05:21.003]    __FlashLen=0x00000000
[22:05:21.003]    __FlashArg=0x00000000
[22:05:21.003]    __FlashOp=0x00000000
[22:05:21.003]    __Result=0x00000000
[22:05:21.003]  </debugvars>
[22:05:21.003]  
[22:05:21.004]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:05:21.004]    <block atomic="false" info="">
[22:05:21.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:05:21.004]        // -> [isSWJ <= 0x00000001]
[22:05:21.004]      __var hasDormant = __protocol & 0x00020000;
[22:05:21.004]        // -> [hasDormant <= 0x00000000]
[22:05:21.004]      __var protType   = __protocol & 0x0000FFFF;
[22:05:21.004]        // -> [protType <= 0x00000002]
[22:05:21.004]    </block>
[22:05:21.004]    <control if="protType == 1" while="" timeout="0" info="">
[22:05:21.004]      // if-block "protType == 1"
[22:05:21.004]        // =>  FALSE
[22:05:21.004]      // skip if-block "protType == 1"
[22:05:21.004]    </control>
[22:05:21.004]    <control if="protType == 2" while="" timeout="0" info="">
[22:05:21.004]      // if-block "protType == 2"
[22:05:21.004]        // =>  TRUE
[22:05:21.004]      <control if="isSWJ" while="" timeout="0" info="">
[22:05:21.004]        // if-block "isSWJ"
[22:05:21.004]          // =>  TRUE
[22:05:21.004]        <control if="hasDormant" while="" timeout="0" info="">
[22:05:21.004]          // if-block "hasDormant"
[22:05:21.004]            // =>  FALSE
[22:05:21.004]          // skip if-block "hasDormant"
[22:05:21.004]        </control>
[22:05:21.004]        <control if="!hasDormant" while="" timeout="0" info="">
[22:05:21.004]          // if-block "!hasDormant"
[22:05:21.006]            // =>  TRUE
[22:05:21.006]          <block atomic="false" info="">
[22:05:21.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:05:21.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:21.006]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:05:21.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:05:21.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:05:21.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:21.010]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:05:21.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:05:21.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:05:21.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:21.010]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:05:21.014]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:05:21.014]          </block>
[22:05:21.014]          // end if-block "!hasDormant"
[22:05:21.014]        </control>
[22:05:21.014]        // end if-block "isSWJ"
[22:05:21.014]      </control>
[22:05:21.014]      <control if="!isSWJ" while="" timeout="0" info="">
[22:05:21.014]        // if-block "!isSWJ"
[22:05:21.014]          // =>  FALSE
[22:05:21.014]        // skip if-block "!isSWJ"
[22:05:21.014]      </control>
[22:05:21.014]      <block atomic="false" info="">
[22:05:21.014]        ReadDP(0x0);
[22:05:21.017]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:05:21.017]      </block>
[22:05:21.017]      // end if-block "protType == 2"
[22:05:21.017]    </control>
[22:05:21.017]  </sequence>
[22:05:21.017]  
[22:05:21.019]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:05:21.019]  
[22:05:21.019]  <debugvars>
[22:05:21.019]    // Pre-defined
[22:05:21.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:21.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:21.019]    __dp=0x00000000
[22:05:21.019]    __ap=0x00000000
[22:05:21.019]    __traceout=0x00000000      (Trace Disabled)
[22:05:21.019]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:21.019]    __FlashAddr=0x00000000
[22:05:21.019]    __FlashLen=0x00000000
[22:05:21.019]    __FlashArg=0x00000000
[22:05:21.019]    __FlashOp=0x00000000
[22:05:21.019]    __Result=0x00000000
[22:05:21.019]  </debugvars>
[22:05:21.019]  
[22:05:21.019]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:05:21.019]    <block atomic="false" info="">
[22:05:21.019]      __var SW_DP_ABORT       = 0x0;
[22:05:21.019]        // -> [SW_DP_ABORT <= 0x00000000]
[22:05:21.019]      __var DP_CTRL_STAT      = 0x4;
[22:05:21.019]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:05:21.019]      __var DP_SELECT         = 0x8;
[22:05:21.019]        // -> [DP_SELECT <= 0x00000008]
[22:05:21.023]      __var powered_down      = 0;
[22:05:21.023]        // -> [powered_down <= 0x00000000]
[22:05:21.023]      WriteDP(DP_SELECT, 0x00000000);
[22:05:21.024]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:05:21.024]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:05:21.026]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:05:21.026]        // -> [powered_down <= 0x00000001]
[22:05:21.026]    </block>
[22:05:21.026]    <control if="powered_down" while="" timeout="0" info="">
[22:05:21.026]      // if-block "powered_down"
[22:05:21.026]        // =>  TRUE
[22:05:21.026]      <block atomic="false" info="">
[22:05:21.026]        Message(0, "Debug/System power-up request sent");
[22:05:21.031]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:05:21.031]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:05:21.031]      </block>
[22:05:21.031]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:05:21.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:05:21.034]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:05:21.034]        // while-condition  =>  FALSE
[22:05:21.034]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:05:21.034]      </control>
[22:05:21.034]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:05:21.034]        // if-block "(__protocol & 0xFFFF) == 1"
[22:05:21.034]          // =>  FALSE
[22:05:21.034]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:05:21.034]      </control>
[22:05:21.034]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:05:21.034]        // if-block "(__protocol & 0xFFFF) == 2"
[22:05:21.034]          // =>  TRUE
[22:05:21.034]        <block atomic="false" info="">
[22:05:21.036]          Message(0, "executing SWD power up");
[22:05:21.037]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:05:21.039]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:05:21.039]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:05:21.041]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:05:21.041]        </block>
[22:05:21.041]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:05:21.041]      </control>
[22:05:21.041]      // end if-block "powered_down"
[22:05:21.041]    </control>
[22:05:21.041]    <block atomic="false" info="">
[22:05:21.041]      __var DEBUG_PORT_VAL    = 0;
[22:05:21.041]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:05:21.041]      __var ACCESS_POINT_VAL  = 0;
[22:05:21.041]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:05:21.041]      __ap = 1; 
[22:05:21.041]        // -> [__ap <= 0x00000001]
[22:05:21.041]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:05:21.046]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:05:21.046]      __ap = 4;
[22:05:21.046]        // -> [__ap <= 0x00000004]
[22:05:21.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:21.050]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:05:21.050]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:05:21.051]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:21.051]    </block>
[22:05:21.051]    <block atomic="false" info="">
[22:05:21.051]      __var nReset = 0x80;
[22:05:21.051]        // -> [nReset <= 0x00000080]
[22:05:21.051]      __var canReadPins = 0;
[22:05:21.051]        // -> [canReadPins <= 0x00000000]
[22:05:21.051]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:05:21.055]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:05:21.055]        // -> [canReadPins <= 0x00000001]
[22:05:21.056]    </block>
[22:05:21.056]    <control if="" while="1" timeout="200" info="">
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.056]      // while-condition  =>  TRUE
[22:05:21.056]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.059]      // while-condition  =>  TRUE
[22:05:21.059]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.061]      // while "1"  (timeout="200")
[22:05:21.061]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.063]      // while "1"  (timeout="200")
[22:05:21.063]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.064]      // while-condition  =>  TRUE
[22:05:21.064]      // while "1"  (timeout="200")
[22:05:21.068]      // while-condition  =>  TRUE
[22:05:21.068]      // while "1"  (timeout="200")
[22:05:21.068]      // while  =>  TIMEOUT
[22:05:21.068]      // end while "1"
[22:05:21.068]    </control>
[22:05:21.068]    <control if="canReadPins" while="" timeout="0" info="">
[22:05:21.068]      // if-block "canReadPins"
[22:05:21.068]        // =>  TRUE
[22:05:21.068]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:05:21.069]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:05:21.070]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:05:21.072]        // while-condition  =>  FALSE
[22:05:21.072]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:05:21.072]      </control>
[22:05:21.072]      // end if-block "canReadPins"
[22:05:21.072]    </control>
[22:05:21.072]    <control if="!canReadPins" while="" timeout="0" info="">
[22:05:21.072]      // if-block "!canReadPins"
[22:05:21.073]        // =>  FALSE
[22:05:21.073]      // skip if-block "!canReadPins"
[22:05:21.073]    </control>
[22:05:21.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:05:21.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:21.073]        // =>  TRUE
[22:05:21.074]      <block atomic="false" info="">
[22:05:21.074]        WriteAP(0x00, 0x190008);
[22:05:21.075]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:21.075]        WriteAP(0xF0, 0x01);
[22:05:21.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:21.076]      </block>
[22:05:21.076]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:21.076]    </control>
[22:05:21.076]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:05:21.076]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:21.076]        // =>  FALSE
[22:05:21.076]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:21.076]    </control>
[22:05:21.076]    <block atomic="false" info="">
[22:05:21.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:21.082]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:05:21.082]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:05:21.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:21.085]      __ap = 0; //lets make sure we reset the access point selection
[22:05:21.085]        // -> [__ap <= 0x00000000]
[22:05:21.085]    </block>
[22:05:21.085]  </sequence>
[22:05:21.085]  
[22:05:21.105]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:05:21.105]  
[22:05:21.105]  <debugvars>
[22:05:21.105]    // Pre-defined
[22:05:21.105]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:21.105]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:21.105]    __dp=0x00000000
[22:05:21.105]    __ap=0x00000000
[22:05:21.105]    __traceout=0x00000000      (Trace Disabled)
[22:05:21.105]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:21.105]    __FlashAddr=0x00000000
[22:05:21.105]    __FlashLen=0x00000000
[22:05:21.109]    __FlashArg=0x00000000
[22:05:21.109]    __FlashOp=0x00000000
[22:05:21.109]    __Result=0x00000000
[22:05:21.109]  </debugvars>
[22:05:21.109]  
[22:05:21.109]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:05:21.109]    <block atomic="false" info="">
[22:05:21.109]      __var deviceID = 0;
[22:05:21.109]        // -> [deviceID <= 0x00000000]
[22:05:21.109]      __var version = 0;
[22:05:21.109]        // -> [version <= 0x00000000]
[22:05:21.109]      __var partNum = 0;
[22:05:21.109]        // -> [partNum <= 0x00000000]
[22:05:21.109]      __var manuf = 0;
[22:05:21.109]        // -> [manuf <= 0x00000000]
[22:05:21.109]      __var isMSPM0G1X0X_G3X0X = 0;
[22:05:21.109]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:05:21.109]      __var isProduction = 0;
[22:05:21.109]        // -> [isProduction <= 0x00000000]
[22:05:21.109]      __var continueId = 0;
[22:05:21.109]        // -> [continueId <= 0x00000000]
[22:05:21.109]      deviceID =   Read32(0x41C40004);
[22:05:21.115]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:05:21.115]        // -> [deviceID <= 0x2BB8802F]
[22:05:21.115]      version = deviceID >> 28;
[22:05:21.115]        // -> [version <= 0x00000002]
[22:05:21.115]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:05:21.115]        // -> [partNum <= 0x0000BB88]
[22:05:21.115]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:05:21.115]        // -> [manuf <= 0x00000017]
[22:05:21.115]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:05:21.115]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:05:21.115]      isProduction = (version > 0);
[22:05:21.115]        // -> [isProduction <= 0x00000001]
[22:05:21.115]    </block>
[22:05:21.115]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:05:21.115]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:05:21.117]        // =>  FALSE
[22:05:21.117]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:05:21.117]    </control>
[22:05:21.117]    <control if="continueId == 4" while="" timeout="0" info="">
[22:05:21.117]      // if-block "continueId == 4"
[22:05:21.117]        // =>  FALSE
[22:05:21.117]      // skip if-block "continueId == 4"
[22:05:21.117]    </control>
[22:05:21.118]    <control if="!isProduction" while="" timeout="0" info="">
[22:05:21.118]      // if-block "!isProduction"
[22:05:21.118]        // =>  FALSE
[22:05:21.118]      // skip if-block "!isProduction"
[22:05:21.118]    </control>
[22:05:21.118]  </sequence>
[22:05:21.118]  
[22:05:45.245]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:05:45.245]  
[22:05:45.254]  <debugvars>
[22:05:45.254]    // Pre-defined
[22:05:45.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:45.254]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:45.254]    __dp=0x00000000
[22:05:45.254]    __ap=0x00000000
[22:05:45.255]    __traceout=0x00000000      (Trace Disabled)
[22:05:45.255]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:45.255]    __FlashAddr=0x00000000
[22:05:45.255]    __FlashLen=0x00000000
[22:05:45.255]    __FlashArg=0x00000000
[22:05:45.255]    __FlashOp=0x00000000
[22:05:45.255]    __Result=0x00000000
[22:05:45.255]  </debugvars>
[22:05:45.255]  
[22:05:45.255]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:05:45.255]    <block atomic="false" info="">
[22:05:45.255]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:05:45.255]        // -> [isSWJ <= 0x00000001]
[22:05:45.255]      __var hasDormant = __protocol & 0x00020000;
[22:05:45.255]        // -> [hasDormant <= 0x00000000]
[22:05:45.257]      __var protType   = __protocol & 0x0000FFFF;
[22:05:45.257]        // -> [protType <= 0x00000002]
[22:05:45.257]    </block>
[22:05:45.257]    <control if="protType == 1" while="" timeout="0" info="">
[22:05:45.257]      // if-block "protType == 1"
[22:05:45.257]        // =>  FALSE
[22:05:45.257]      // skip if-block "protType == 1"
[22:05:45.257]    </control>
[22:05:45.257]    <control if="protType == 2" while="" timeout="0" info="">
[22:05:45.257]      // if-block "protType == 2"
[22:05:45.257]        // =>  TRUE
[22:05:45.257]      <control if="isSWJ" while="" timeout="0" info="">
[22:05:45.257]        // if-block "isSWJ"
[22:05:45.257]          // =>  TRUE
[22:05:45.257]        <control if="hasDormant" while="" timeout="0" info="">
[22:05:45.257]          // if-block "hasDormant"
[22:05:45.257]            // =>  FALSE
[22:05:45.257]          // skip if-block "hasDormant"
[22:05:45.257]        </control>
[22:05:45.257]        <control if="!hasDormant" while="" timeout="0" info="">
[22:05:45.257]          // if-block "!hasDormant"
[22:05:45.257]            // =>  TRUE
[22:05:45.257]          <block atomic="false" info="">
[22:05:45.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:05:45.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:45.257]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:05:45.261]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:05:45.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:05:45.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:45.261]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:05:45.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:05:45.266]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:05:45.266]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:05:45.266]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:05:45.266]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:05:45.266]          </block>
[22:05:45.266]          // end if-block "!hasDormant"
[22:05:45.269]        </control>
[22:05:45.269]        // end if-block "isSWJ"
[22:05:45.269]      </control>
[22:05:45.269]      <control if="!isSWJ" while="" timeout="0" info="">
[22:05:45.269]        // if-block "!isSWJ"
[22:05:45.269]          // =>  FALSE
[22:05:45.269]        // skip if-block "!isSWJ"
[22:05:45.269]      </control>
[22:05:45.269]      <block atomic="false" info="">
[22:05:45.269]        ReadDP(0x0);
[22:05:45.269]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:05:45.269]      </block>
[22:05:45.269]      // end if-block "protType == 2"
[22:05:45.269]    </control>
[22:05:45.269]  </sequence>
[22:05:45.269]  
[22:05:45.273]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:05:45.273]  
[22:05:45.273]  <debugvars>
[22:05:45.273]    // Pre-defined
[22:05:45.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:45.275]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:45.275]    __dp=0x00000000
[22:05:45.275]    __ap=0x00000000
[22:05:45.275]    __traceout=0x00000000      (Trace Disabled)
[22:05:45.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:45.275]    __FlashAddr=0x00000000
[22:05:45.275]    __FlashLen=0x00000000
[22:05:45.275]    __FlashArg=0x00000000
[22:05:45.275]    __FlashOp=0x00000000
[22:05:45.275]    __Result=0x00000000
[22:05:45.275]  </debugvars>
[22:05:45.275]  
[22:05:45.275]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:05:45.277]    <block atomic="false" info="">
[22:05:45.277]      __var SW_DP_ABORT       = 0x0;
[22:05:45.277]        // -> [SW_DP_ABORT <= 0x00000000]
[22:05:45.277]      __var DP_CTRL_STAT      = 0x4;
[22:05:45.277]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:05:45.277]      __var DP_SELECT         = 0x8;
[22:05:45.277]        // -> [DP_SELECT <= 0x00000008]
[22:05:45.277]      __var powered_down      = 0;
[22:05:45.277]        // -> [powered_down <= 0x00000000]
[22:05:45.277]      WriteDP(DP_SELECT, 0x00000000);
[22:05:45.280]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:05:45.280]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:05:45.280]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:05:45.280]        // -> [powered_down <= 0x00000001]
[22:05:45.282]    </block>
[22:05:45.282]    <control if="powered_down" while="" timeout="0" info="">
[22:05:45.282]      // if-block "powered_down"
[22:05:45.282]        // =>  TRUE
[22:05:45.282]      <block atomic="false" info="">
[22:05:45.282]        Message(0, "Debug/System power-up request sent");
[22:05:45.284]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:05:45.285]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:05:45.285]      </block>
[22:05:45.285]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:05:45.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:05:45.290]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:05:45.290]        // while-condition  =>  FALSE
[22:05:45.290]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:05:45.290]      </control>
[22:05:45.290]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:05:45.290]        // if-block "(__protocol & 0xFFFF) == 1"
[22:05:45.290]          // =>  FALSE
[22:05:45.290]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:05:45.290]      </control>
[22:05:45.290]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:05:45.290]        // if-block "(__protocol & 0xFFFF) == 2"
[22:05:45.290]          // =>  TRUE
[22:05:45.290]        <block atomic="false" info="">
[22:05:45.290]          Message(0, "executing SWD power up");
[22:05:45.292]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:05:45.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:05:45.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:05:45.298]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:05:45.298]        </block>
[22:05:45.298]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:05:45.298]      </control>
[22:05:45.298]      // end if-block "powered_down"
[22:05:45.298]    </control>
[22:05:45.298]    <block atomic="false" info="">
[22:05:45.298]      __var DEBUG_PORT_VAL    = 0;
[22:05:45.298]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:05:45.298]      __var ACCESS_POINT_VAL  = 0;
[22:05:45.298]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:05:45.298]      __ap = 1; 
[22:05:45.298]        // -> [__ap <= 0x00000001]
[22:05:45.298]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:05:45.307]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:05:45.307]      __ap = 4;
[22:05:45.307]        // -> [__ap <= 0x00000004]
[22:05:45.307]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:45.311]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:05:45.311]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:05:45.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:45.313]    </block>
[22:05:45.313]    <block atomic="false" info="">
[22:05:45.313]      __var nReset = 0x80;
[22:05:45.313]        // -> [nReset <= 0x00000080]
[22:05:45.313]      __var canReadPins = 0;
[22:05:45.313]        // -> [canReadPins <= 0x00000000]
[22:05:45.315]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:05:45.315]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:05:45.315]        // -> [canReadPins <= 0x00000001]
[22:05:45.315]    </block>
[22:05:45.315]    <control if="" while="1" timeout="200" info="">
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.315]      // while "1"  (timeout="200")
[22:05:45.315]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.319]      // while-condition  =>  TRUE
[22:05:45.319]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.323]      // while-condition  =>  TRUE
[22:05:45.323]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.325]      // while-condition  =>  TRUE
[22:05:45.325]      // while "1"  (timeout="200")
[22:05:45.327]      // while-condition  =>  TRUE
[22:05:45.327]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.328]      // while-condition  =>  TRUE
[22:05:45.328]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.329]      // while "1"  (timeout="200")
[22:05:45.329]      // while-condition  =>  TRUE
[22:05:45.332]      // while "1"  (timeout="200")
[22:05:45.332]      // while  =>  TIMEOUT
[22:05:45.332]      // end while "1"
[22:05:45.332]    </control>
[22:05:45.332]    <control if="canReadPins" while="" timeout="0" info="">
[22:05:45.332]      // if-block "canReadPins"
[22:05:45.332]        // =>  TRUE
[22:05:45.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:05:45.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:05:45.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:05:45.333]        // while-condition  =>  FALSE
[22:05:45.333]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:05:45.333]      </control>
[22:05:45.333]      // end if-block "canReadPins"
[22:05:45.333]    </control>
[22:05:45.333]    <control if="!canReadPins" while="" timeout="0" info="">
[22:05:45.333]      // if-block "!canReadPins"
[22:05:45.333]        // =>  FALSE
[22:05:45.333]      // skip if-block "!canReadPins"
[22:05:45.333]    </control>
[22:05:45.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:05:45.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:45.333]        // =>  TRUE
[22:05:45.335]      <block atomic="false" info="">
[22:05:45.335]        WriteAP(0x00, 0x190008);
[22:05:45.335]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:45.335]        WriteAP(0xF0, 0x01);
[22:05:45.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:05:45.339]      </block>
[22:05:45.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:05:45.339]    </control>
[22:05:45.339]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:05:45.339]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:45.339]        // =>  FALSE
[22:05:45.339]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:05:45.339]    </control>
[22:05:45.339]    <block atomic="false" info="">
[22:05:45.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:05:45.345]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:05:45.345]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:05:45.345]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:05:45.347]      __ap = 0; //lets make sure we reset the access point selection
[22:05:45.349]        // -> [__ap <= 0x00000000]
[22:05:45.349]    </block>
[22:05:45.349]  </sequence>
[22:05:45.349]  
[22:05:45.369]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:05:45.369]  
[22:05:45.369]  <debugvars>
[22:05:45.369]    // Pre-defined
[22:05:45.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:05:45.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:05:45.369]    __dp=0x00000000
[22:05:45.369]    __ap=0x00000000
[22:05:45.369]    __traceout=0x00000000      (Trace Disabled)
[22:05:45.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:05:45.369]    __FlashAddr=0x00000000
[22:05:45.369]    __FlashLen=0x00000000
[22:05:45.369]    __FlashArg=0x00000000
[22:05:45.369]    __FlashOp=0x00000000
[22:05:45.371]    __Result=0x00000000
[22:05:45.371]  </debugvars>
[22:05:45.371]  
[22:05:45.371]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:05:45.371]    <block atomic="false" info="">
[22:05:45.371]      __var deviceID = 0;
[22:05:45.371]        // -> [deviceID <= 0x00000000]
[22:05:45.371]      __var version = 0;
[22:05:45.371]        // -> [version <= 0x00000000]
[22:05:45.371]      __var partNum = 0;
[22:05:45.371]        // -> [partNum <= 0x00000000]
[22:05:45.371]      __var manuf = 0;
[22:05:45.371]        // -> [manuf <= 0x00000000]
[22:05:45.371]      __var isMSPM0G1X0X_G3X0X = 0;
[22:05:45.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:05:45.371]      __var isProduction = 0;
[22:05:45.371]        // -> [isProduction <= 0x00000000]
[22:05:45.371]      __var continueId = 0;
[22:05:45.371]        // -> [continueId <= 0x00000000]
[22:05:45.371]      deviceID =   Read32(0x41C40004);
[22:05:45.379]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:05:45.379]        // -> [deviceID <= 0x2BB8802F]
[22:05:45.379]      version = deviceID >> 28;
[22:05:45.379]        // -> [version <= 0x00000002]
[22:05:45.379]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:05:45.379]        // -> [partNum <= 0x0000BB88]
[22:05:45.379]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:05:45.379]        // -> [manuf <= 0x00000017]
[22:05:45.379]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:05:45.379]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:05:45.379]      isProduction = (version > 0);
[22:05:45.379]        // -> [isProduction <= 0x00000001]
[22:05:45.379]    </block>
[22:05:45.382]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:05:45.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:05:45.382]        // =>  FALSE
[22:05:45.382]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:05:45.382]    </control>
[22:05:45.382]    <control if="continueId == 4" while="" timeout="0" info="">
[22:05:45.382]      // if-block "continueId == 4"
[22:05:45.382]        // =>  FALSE
[22:05:45.382]      // skip if-block "continueId == 4"
[22:05:45.382]    </control>
[22:05:45.382]    <control if="!isProduction" while="" timeout="0" info="">
[22:05:45.382]      // if-block "!isProduction"
[22:05:45.382]        // =>  FALSE
[22:05:45.382]      // skip if-block "!isProduction"
[22:05:45.382]    </control>
[22:05:45.382]  </sequence>
[22:05:45.382]  
[22:06:07.580]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:06:07.580]  
[22:06:07.580]  <debugvars>
[22:06:07.580]    // Pre-defined
[22:06:07.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:07.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:07.580]    __dp=0x00000000
[22:06:07.580]    __ap=0x00000000
[22:06:07.580]    __traceout=0x00000000      (Trace Disabled)
[22:06:07.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:07.580]    __FlashAddr=0x00000000
[22:06:07.580]    __FlashLen=0x00000000
[22:06:07.580]    __FlashArg=0x00000000
[22:06:07.580]    __FlashOp=0x00000000
[22:06:07.580]    __Result=0x00000000
[22:06:07.580]  </debugvars>
[22:06:07.580]  
[22:06:07.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:06:07.580]    <block atomic="false" info="">
[22:06:07.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:06:07.580]        // -> [isSWJ <= 0x00000001]
[22:06:07.580]      __var hasDormant = __protocol & 0x00020000;
[22:06:07.580]        // -> [hasDormant <= 0x00000000]
[22:06:07.580]      __var protType   = __protocol & 0x0000FFFF;
[22:06:07.583]        // -> [protType <= 0x00000002]
[22:06:07.583]    </block>
[22:06:07.583]    <control if="protType == 1" while="" timeout="0" info="">
[22:06:07.583]      // if-block "protType == 1"
[22:06:07.583]        // =>  FALSE
[22:06:07.583]      // skip if-block "protType == 1"
[22:06:07.583]    </control>
[22:06:07.583]    <control if="protType == 2" while="" timeout="0" info="">
[22:06:07.583]      // if-block "protType == 2"
[22:06:07.583]        // =>  TRUE
[22:06:07.583]      <control if="isSWJ" while="" timeout="0" info="">
[22:06:07.583]        // if-block "isSWJ"
[22:06:07.583]          // =>  TRUE
[22:06:07.583]        <control if="hasDormant" while="" timeout="0" info="">
[22:06:07.583]          // if-block "hasDormant"
[22:06:07.583]            // =>  FALSE
[22:06:07.583]          // skip if-block "hasDormant"
[22:06:07.584]        </control>
[22:06:07.584]        <control if="!hasDormant" while="" timeout="0" info="">
[22:06:07.584]          // if-block "!hasDormant"
[22:06:07.584]            // =>  TRUE
[22:06:07.584]          <block atomic="false" info="">
[22:06:07.584]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:06:07.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:07.586]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:06:07.587]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:06:07.587]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:06:07.589]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:07.589]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:06:07.590]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:06:07.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:06:07.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:07.590]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:06:07.593]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:06:07.593]          </block>
[22:06:07.593]          // end if-block "!hasDormant"
[22:06:07.593]        </control>
[22:06:07.593]        // end if-block "isSWJ"
[22:06:07.593]      </control>
[22:06:07.593]      <control if="!isSWJ" while="" timeout="0" info="">
[22:06:07.593]        // if-block "!isSWJ"
[22:06:07.593]          // =>  FALSE
[22:06:07.593]        // skip if-block "!isSWJ"
[22:06:07.593]      </control>
[22:06:07.593]      <block atomic="false" info="">
[22:06:07.593]        ReadDP(0x0);
[22:06:07.595]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:06:07.595]      </block>
[22:06:07.597]      // end if-block "protType == 2"
[22:06:07.597]    </control>
[22:06:07.597]  </sequence>
[22:06:07.597]  
[22:06:07.597]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:06:07.597]  
[22:06:07.597]  <debugvars>
[22:06:07.597]    // Pre-defined
[22:06:07.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:07.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:07.597]    __dp=0x00000000
[22:06:07.601]    __ap=0x00000000
[22:06:07.601]    __traceout=0x00000000      (Trace Disabled)
[22:06:07.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:07.601]    __FlashAddr=0x00000000
[22:06:07.601]    __FlashLen=0x00000000
[22:06:07.601]    __FlashArg=0x00000000
[22:06:07.601]    __FlashOp=0x00000000
[22:06:07.601]    __Result=0x00000000
[22:06:07.601]  </debugvars>
[22:06:07.601]  
[22:06:07.601]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:06:07.601]    <block atomic="false" info="">
[22:06:07.601]      __var SW_DP_ABORT       = 0x0;
[22:06:07.601]        // -> [SW_DP_ABORT <= 0x00000000]
[22:06:07.601]      __var DP_CTRL_STAT      = 0x4;
[22:06:07.601]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:06:07.601]      __var DP_SELECT         = 0x8;
[22:06:07.601]        // -> [DP_SELECT <= 0x00000008]
[22:06:07.601]      __var powered_down      = 0;
[22:06:07.601]        // -> [powered_down <= 0x00000000]
[22:06:07.601]      WriteDP(DP_SELECT, 0x00000000);
[22:06:07.601]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:06:07.601]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:06:07.605]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:06:07.605]        // -> [powered_down <= 0x00000001]
[22:06:07.605]    </block>
[22:06:07.605]    <control if="powered_down" while="" timeout="0" info="">
[22:06:07.605]      // if-block "powered_down"
[22:06:07.607]        // =>  TRUE
[22:06:07.607]      <block atomic="false" info="">
[22:06:07.607]        Message(0, "Debug/System power-up request sent");
[22:06:07.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:06:07.611]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:06:07.611]      </block>
[22:06:07.611]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:06:07.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:06:07.614]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:06:07.614]        // while-condition  =>  FALSE
[22:06:07.614]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:06:07.614]      </control>
[22:06:07.614]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:06:07.614]        // if-block "(__protocol & 0xFFFF) == 1"
[22:06:07.614]          // =>  FALSE
[22:06:07.614]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:06:07.614]      </control>
[22:06:07.615]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:06:07.615]        // if-block "(__protocol & 0xFFFF) == 2"
[22:06:07.615]          // =>  TRUE
[22:06:07.615]        <block atomic="false" info="">
[22:06:07.615]          Message(0, "executing SWD power up");
[22:06:07.616]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:06:07.621]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:06:07.621]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:06:07.622]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:06:07.622]        </block>
[22:06:07.622]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:06:07.622]      </control>
[22:06:07.622]      // end if-block "powered_down"
[22:06:07.622]    </control>
[22:06:07.622]    <block atomic="false" info="">
[22:06:07.622]      __var DEBUG_PORT_VAL    = 0;
[22:06:07.622]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:06:07.622]      __var ACCESS_POINT_VAL  = 0;
[22:06:07.622]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:06:07.622]      __ap = 1; 
[22:06:07.622]        // -> [__ap <= 0x00000001]
[22:06:07.625]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:06:07.628]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:06:07.628]      __ap = 4;
[22:06:07.628]        // -> [__ap <= 0x00000004]
[22:06:07.628]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:07.631]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:06:07.631]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:06:07.631]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:07.633]    </block>
[22:06:07.633]    <block atomic="false" info="">
[22:06:07.633]      __var nReset = 0x80;
[22:06:07.633]        // -> [nReset <= 0x00000080]
[22:06:07.633]      __var canReadPins = 0;
[22:06:07.633]        // -> [canReadPins <= 0x00000000]
[22:06:07.633]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:06:07.635]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:06:07.636]        // -> [canReadPins <= 0x00000001]
[22:06:07.636]    </block>
[22:06:07.636]    <control if="" while="1" timeout="200" info="">
[22:06:07.636]      // while "1"  (timeout="200")
[22:06:07.636]      // while-condition  =>  TRUE
[22:06:07.636]      // while "1"  (timeout="200")
[22:06:07.636]      // while-condition  =>  TRUE
[22:06:07.636]      // while "1"  (timeout="200")
[22:06:07.636]      // while-condition  =>  TRUE
[22:06:07.636]      // while "1"  (timeout="200")
[22:06:07.636]      // while-condition  =>  TRUE
[22:06:07.636]      // while "1"  (timeout="200")
[22:06:07.637]      // while-condition  =>  TRUE
[22:06:07.637]      // while "1"  (timeout="200")
[22:06:07.637]      // while-condition  =>  TRUE
[22:06:07.637]      // while "1"  (timeout="200")
[22:06:07.637]      // while-condition  =>  TRUE
[22:06:07.637]      // while "1"  (timeout="200")
[22:06:07.637]      // while-condition  =>  TRUE
[22:06:07.637]      // while "1"  (timeout="200")
[22:06:07.637]      // while-condition  =>  TRUE
[22:06:07.637]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.638]      // while-condition  =>  TRUE
[22:06:07.638]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.640]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.640]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.640]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.640]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.640]      // while "1"  (timeout="200")
[22:06:07.640]      // while-condition  =>  TRUE
[22:06:07.641]      // while "1"  (timeout="200")
[22:06:07.641]      // while-condition  =>  TRUE
[22:06:07.641]      // while "1"  (timeout="200")
[22:06:07.641]      // while-condition  =>  TRUE
[22:06:07.641]      // while "1"  (timeout="200")
[22:06:07.641]      // while-condition  =>  TRUE
[22:06:07.641]      // while "1"  (timeout="200")
[22:06:07.641]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.642]      // while-condition  =>  TRUE
[22:06:07.642]      // while "1"  (timeout="200")
[22:06:07.644]      // while-condition  =>  TRUE
[22:06:07.644]      // while "1"  (timeout="200")
[22:06:07.644]      // while  =>  TIMEOUT
[22:06:07.644]      // end while "1"
[22:06:07.644]    </control>
[22:06:07.644]    <control if="canReadPins" while="" timeout="0" info="">
[22:06:07.644]      // if-block "canReadPins"
[22:06:07.644]        // =>  TRUE
[22:06:07.644]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:06:07.644]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:06:07.646]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:06:07.646]        // while-condition  =>  FALSE
[22:06:07.646]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:06:07.646]      </control>
[22:06:07.646]      // end if-block "canReadPins"
[22:06:07.646]    </control>
[22:06:07.646]    <control if="!canReadPins" while="" timeout="0" info="">
[22:06:07.646]      // if-block "!canReadPins"
[22:06:07.646]        // =>  FALSE
[22:06:07.646]      // skip if-block "!canReadPins"
[22:06:07.646]    </control>
[22:06:07.646]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:06:07.646]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:07.646]        // =>  TRUE
[22:06:07.646]      <block atomic="false" info="">
[22:06:07.646]        WriteAP(0x00, 0x190008);
[22:06:07.648]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:07.648]        WriteAP(0xF0, 0x01);
[22:06:07.651]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:07.651]      </block>
[22:06:07.651]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:07.651]    </control>
[22:06:07.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:06:07.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:07.651]        // =>  FALSE
[22:06:07.651]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:07.651]    </control>
[22:06:07.651]    <block atomic="false" info="">
[22:06:07.654]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:07.655]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:06:07.658]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:06:07.658]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:07.658]      __ap = 0; //lets make sure we reset the access point selection
[22:06:07.658]        // -> [__ap <= 0x00000000]
[22:06:07.658]    </block>
[22:06:07.658]  </sequence>
[22:06:07.658]  
[22:06:07.691]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:06:07.691]  
[22:06:07.691]  <debugvars>
[22:06:07.691]    // Pre-defined
[22:06:07.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:07.691]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:07.691]    __dp=0x00000000
[22:06:07.691]    __ap=0x00000000
[22:06:07.691]    __traceout=0x00000000      (Trace Disabled)
[22:06:07.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:07.691]    __FlashAddr=0x00000000
[22:06:07.691]    __FlashLen=0x00000000
[22:06:07.691]    __FlashArg=0x00000000
[22:06:07.691]    __FlashOp=0x00000000
[22:06:07.691]    __Result=0x00000000
[22:06:07.691]  </debugvars>
[22:06:07.691]  
[22:06:07.691]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:06:07.691]    <block atomic="false" info="">
[22:06:07.691]      __var deviceID = 0;
[22:06:07.691]        // -> [deviceID <= 0x00000000]
[22:06:07.691]      __var version = 0;
[22:06:07.691]        // -> [version <= 0x00000000]
[22:06:07.691]      __var partNum = 0;
[22:06:07.691]        // -> [partNum <= 0x00000000]
[22:06:07.691]      __var manuf = 0;
[22:06:07.691]        // -> [manuf <= 0x00000000]
[22:06:07.691]      __var isMSPM0G1X0X_G3X0X = 0;
[22:06:07.691]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:06:07.691]      __var isProduction = 0;
[22:06:07.691]        // -> [isProduction <= 0x00000000]
[22:06:07.691]      __var continueId = 0;
[22:06:07.691]        // -> [continueId <= 0x00000000]
[22:06:07.695]      deviceID =   Read32(0x41C40004);
[22:06:07.699]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:06:07.699]        // -> [deviceID <= 0x2BB8802F]
[22:06:07.699]      version = deviceID >> 28;
[22:06:07.699]        // -> [version <= 0x00000002]
[22:06:07.699]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:06:07.699]        // -> [partNum <= 0x0000BB88]
[22:06:07.699]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:06:07.699]        // -> [manuf <= 0x00000017]
[22:06:07.699]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:06:07.699]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:06:07.699]      isProduction = (version > 0);
[22:06:07.699]        // -> [isProduction <= 0x00000001]
[22:06:07.699]    </block>
[22:06:07.701]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:06:07.701]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:06:07.701]        // =>  FALSE
[22:06:07.701]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:06:07.701]    </control>
[22:06:07.701]    <control if="continueId == 4" while="" timeout="0" info="">
[22:06:07.701]      // if-block "continueId == 4"
[22:06:07.701]        // =>  FALSE
[22:06:07.701]      // skip if-block "continueId == 4"
[22:06:07.701]    </control>
[22:06:07.701]    <control if="!isProduction" while="" timeout="0" info="">
[22:06:07.701]      // if-block "!isProduction"
[22:06:07.701]        // =>  FALSE
[22:06:07.701]      // skip if-block "!isProduction"
[22:06:07.701]    </control>
[22:06:07.702]  </sequence>
[22:06:07.702]  
[22:06:44.763]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:06:44.763]  
[22:06:44.772]  <debugvars>
[22:06:44.772]    // Pre-defined
[22:06:44.772]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:44.772]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:44.772]    __dp=0x00000000
[22:06:44.772]    __ap=0x00000000
[22:06:44.772]    __traceout=0x00000000      (Trace Disabled)
[22:06:44.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:44.773]    __FlashAddr=0x00000000
[22:06:44.773]    __FlashLen=0x00000000
[22:06:44.773]    __FlashArg=0x00000000
[22:06:44.773]    __FlashOp=0x00000000
[22:06:44.773]    __Result=0x00000000
[22:06:44.773]  </debugvars>
[22:06:44.773]  
[22:06:44.773]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:06:44.773]    <block atomic="false" info="">
[22:06:44.774]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:06:44.774]        // -> [isSWJ <= 0x00000001]
[22:06:44.774]      __var hasDormant = __protocol & 0x00020000;
[22:06:44.774]        // -> [hasDormant <= 0x00000000]
[22:06:44.774]      __var protType   = __protocol & 0x0000FFFF;
[22:06:44.774]        // -> [protType <= 0x00000002]
[22:06:44.774]    </block>
[22:06:44.774]    <control if="protType == 1" while="" timeout="0" info="">
[22:06:44.774]      // if-block "protType == 1"
[22:06:44.774]        // =>  FALSE
[22:06:44.774]      // skip if-block "protType == 1"
[22:06:44.775]    </control>
[22:06:44.775]    <control if="protType == 2" while="" timeout="0" info="">
[22:06:44.775]      // if-block "protType == 2"
[22:06:44.775]        // =>  TRUE
[22:06:44.775]      <control if="isSWJ" while="" timeout="0" info="">
[22:06:44.775]        // if-block "isSWJ"
[22:06:44.775]          // =>  TRUE
[22:06:44.775]        <control if="hasDormant" while="" timeout="0" info="">
[22:06:44.775]          // if-block "hasDormant"
[22:06:44.776]            // =>  FALSE
[22:06:44.776]          // skip if-block "hasDormant"
[22:06:44.776]        </control>
[22:06:44.776]        <control if="!hasDormant" while="" timeout="0" info="">
[22:06:44.776]          // if-block "!hasDormant"
[22:06:44.776]            // =>  TRUE
[22:06:44.776]          <block atomic="false" info="">
[22:06:44.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:06:44.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:44.778]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:06:44.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:06:44.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:06:44.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:44.781]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:06:44.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:06:44.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:06:44.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:06:44.784]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:06:44.790]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:06:44.791]          </block>
[22:06:44.791]          // end if-block "!hasDormant"
[22:06:44.791]        </control>
[22:06:44.791]        // end if-block "isSWJ"
[22:06:44.791]      </control>
[22:06:44.791]      <control if="!isSWJ" while="" timeout="0" info="">
[22:06:44.791]        // if-block "!isSWJ"
[22:06:44.791]          // =>  FALSE
[22:06:44.792]        // skip if-block "!isSWJ"
[22:06:44.792]      </control>
[22:06:44.792]      <block atomic="false" info="">
[22:06:44.792]        ReadDP(0x0);
[22:06:44.793]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:06:44.793]      </block>
[22:06:44.793]      // end if-block "protType == 2"
[22:06:44.793]    </control>
[22:06:44.794]  </sequence>
[22:06:44.794]  
[22:06:44.796]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:06:44.796]  
[22:06:44.797]  <debugvars>
[22:06:44.797]    // Pre-defined
[22:06:44.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:44.797]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:44.797]    __dp=0x00000000
[22:06:44.797]    __ap=0x00000000
[22:06:44.797]    __traceout=0x00000000      (Trace Disabled)
[22:06:44.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:44.798]    __FlashAddr=0x00000000
[22:06:44.798]    __FlashLen=0x00000000
[22:06:44.798]    __FlashArg=0x00000000
[22:06:44.798]    __FlashOp=0x00000000
[22:06:44.798]    __Result=0x00000000
[22:06:44.798]  </debugvars>
[22:06:44.798]  
[22:06:44.798]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:06:44.798]    <block atomic="false" info="">
[22:06:44.798]      __var SW_DP_ABORT       = 0x0;
[22:06:44.798]        // -> [SW_DP_ABORT <= 0x00000000]
[22:06:44.798]      __var DP_CTRL_STAT      = 0x4;
[22:06:44.798]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:06:44.798]      __var DP_SELECT         = 0x8;
[22:06:44.798]        // -> [DP_SELECT <= 0x00000008]
[22:06:44.798]      __var powered_down      = 0;
[22:06:44.798]        // -> [powered_down <= 0x00000000]
[22:06:44.798]      WriteDP(DP_SELECT, 0x00000000);
[22:06:44.801]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:06:44.801]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:06:44.801]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:06:44.801]        // -> [powered_down <= 0x00000001]
[22:06:44.801]    </block>
[22:06:44.801]    <control if="powered_down" while="" timeout="0" info="">
[22:06:44.801]      // if-block "powered_down"
[22:06:44.803]        // =>  TRUE
[22:06:44.803]      <block atomic="false" info="">
[22:06:44.803]        Message(0, "Debug/System power-up request sent");
[22:06:44.804]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:06:44.804]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:06:44.809]      </block>
[22:06:44.809]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:06:44.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:06:44.810]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:06:44.810]        // while-condition  =>  FALSE
[22:06:44.811]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:06:44.811]      </control>
[22:06:44.811]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:06:44.811]        // if-block "(__protocol & 0xFFFF) == 1"
[22:06:44.811]          // =>  FALSE
[22:06:44.811]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:06:44.811]      </control>
[22:06:44.811]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:06:44.811]        // if-block "(__protocol & 0xFFFF) == 2"
[22:06:44.811]          // =>  TRUE
[22:06:44.811]        <block atomic="false" info="">
[22:06:44.811]          Message(0, "executing SWD power up");
[22:06:44.813]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:06:44.815]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:06:44.815]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:06:44.817]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:06:44.817]        </block>
[22:06:44.817]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:06:44.817]      </control>
[22:06:44.817]      // end if-block "powered_down"
[22:06:44.817]    </control>
[22:06:44.817]    <block atomic="false" info="">
[22:06:44.817]      __var DEBUG_PORT_VAL    = 0;
[22:06:44.817]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:06:44.817]      __var ACCESS_POINT_VAL  = 0;
[22:06:44.817]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:06:44.817]      __ap = 1; 
[22:06:44.817]        // -> [__ap <= 0x00000001]
[22:06:44.817]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:06:44.825]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:06:44.825]      __ap = 4;
[22:06:44.825]        // -> [__ap <= 0x00000004]
[22:06:44.825]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:44.829]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:06:44.829]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:06:44.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:44.831]    </block>
[22:06:44.831]    <block atomic="false" info="">
[22:06:44.831]      __var nReset = 0x80;
[22:06:44.831]        // -> [nReset <= 0x00000080]
[22:06:44.831]      __var canReadPins = 0;
[22:06:44.831]        // -> [canReadPins <= 0x00000000]
[22:06:44.831]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:06:44.833]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:06:44.833]        // -> [canReadPins <= 0x00000001]
[22:06:44.833]    </block>
[22:06:44.833]    <control if="" while="1" timeout="200" info="">
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.833]      // while "1"  (timeout="200")
[22:06:44.833]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.836]      // while "1"  (timeout="200")
[22:06:44.836]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.838]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.838]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.838]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.838]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.838]      // while-condition  =>  TRUE
[22:06:44.838]      // while "1"  (timeout="200")
[22:06:44.839]      // while-condition  =>  TRUE
[22:06:44.839]      // while "1"  (timeout="200")
[22:06:44.839]      // while-condition  =>  TRUE
[22:06:44.839]      // while "1"  (timeout="200")
[22:06:44.839]      // while-condition  =>  TRUE
[22:06:44.839]      // while "1"  (timeout="200")
[22:06:44.839]      // while-condition  =>  TRUE
[22:06:44.839]      // while "1"  (timeout="200")
[22:06:44.839]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.840]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.840]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.840]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.840]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.840]      // while-condition  =>  TRUE
[22:06:44.840]      // while "1"  (timeout="200")
[22:06:44.841]      // while-condition  =>  TRUE
[22:06:44.841]      // while "1"  (timeout="200")
[22:06:44.841]      // while-condition  =>  TRUE
[22:06:44.841]      // while "1"  (timeout="200")
[22:06:44.841]      // while-condition  =>  TRUE
[22:06:44.841]      // while "1"  (timeout="200")
[22:06:44.841]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.842]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.842]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.842]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.842]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.842]      // while-condition  =>  TRUE
[22:06:44.842]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.843]      // while "1"  (timeout="200")
[22:06:44.843]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.845]      // while "1"  (timeout="200")
[22:06:44.845]      // while-condition  =>  TRUE
[22:06:44.848]      // while "1"  (timeout="200")
[22:06:44.848]      // while  =>  TIMEOUT
[22:06:44.848]      // end while "1"
[22:06:44.848]    </control>
[22:06:44.848]    <control if="canReadPins" while="" timeout="0" info="">
[22:06:44.848]      // if-block "canReadPins"
[22:06:44.848]        // =>  TRUE
[22:06:44.848]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:06:44.848]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:06:44.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:06:44.849]        // while-condition  =>  FALSE
[22:06:44.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:06:44.851]      </control>
[22:06:44.851]      // end if-block "canReadPins"
[22:06:44.851]    </control>
[22:06:44.851]    <control if="!canReadPins" while="" timeout="0" info="">
[22:06:44.851]      // if-block "!canReadPins"
[22:06:44.851]        // =>  FALSE
[22:06:44.851]      // skip if-block "!canReadPins"
[22:06:44.851]    </control>
[22:06:44.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:06:44.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:44.851]        // =>  TRUE
[22:06:44.851]      <block atomic="false" info="">
[22:06:44.851]        WriteAP(0x00, 0x190008);
[22:06:44.854]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:44.854]        WriteAP(0xF0, 0x01);
[22:06:44.858]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:06:44.858]      </block>
[22:06:44.858]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:06:44.858]    </control>
[22:06:44.858]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:06:44.858]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:44.858]        // =>  FALSE
[22:06:44.858]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:06:44.858]    </control>
[22:06:44.858]    <block atomic="false" info="">
[22:06:44.858]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:06:44.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:06:44.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:06:44.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:06:44.861]      __ap = 0; //lets make sure we reset the access point selection
[22:06:44.861]        // -> [__ap <= 0x00000000]
[22:06:44.861]    </block>
[22:06:44.861]  </sequence>
[22:06:44.861]  
[22:06:44.887]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:06:44.887]  
[22:06:44.887]  <debugvars>
[22:06:44.887]    // Pre-defined
[22:06:44.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:06:44.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:06:44.887]    __dp=0x00000000
[22:06:44.887]    __ap=0x00000000
[22:06:44.887]    __traceout=0x00000000      (Trace Disabled)
[22:06:44.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:06:44.887]    __FlashAddr=0x00000000
[22:06:44.887]    __FlashLen=0x00000000
[22:06:44.887]    __FlashArg=0x00000000
[22:06:44.887]    __FlashOp=0x00000000
[22:06:44.887]    __Result=0x00000000
[22:06:44.887]  </debugvars>
[22:06:44.887]  
[22:06:44.890]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:06:44.890]    <block atomic="false" info="">
[22:06:44.890]      __var deviceID = 0;
[22:06:44.890]        // -> [deviceID <= 0x00000000]
[22:06:44.890]      __var version = 0;
[22:06:44.890]        // -> [version <= 0x00000000]
[22:06:44.890]      __var partNum = 0;
[22:06:44.890]        // -> [partNum <= 0x00000000]
[22:06:44.890]      __var manuf = 0;
[22:06:44.890]        // -> [manuf <= 0x00000000]
[22:06:44.890]      __var isMSPM0G1X0X_G3X0X = 0;
[22:06:44.890]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:06:44.891]      __var isProduction = 0;
[22:06:44.891]        // -> [isProduction <= 0x00000000]
[22:06:44.891]      __var continueId = 0;
[22:06:44.891]        // -> [continueId <= 0x00000000]
[22:06:44.891]      deviceID =   Read32(0x41C40004);
[22:06:44.895]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:06:44.895]        // -> [deviceID <= 0x2BB8802F]
[22:06:44.895]      version = deviceID >> 28;
[22:06:44.896]        // -> [version <= 0x00000002]
[22:06:44.896]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:06:44.896]        // -> [partNum <= 0x0000BB88]
[22:06:44.896]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:06:44.896]        // -> [manuf <= 0x00000017]
[22:06:44.896]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:06:44.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:06:44.896]      isProduction = (version > 0);
[22:06:44.896]        // -> [isProduction <= 0x00000001]
[22:06:44.896]    </block>
[22:06:44.896]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:06:44.897]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:06:44.897]        // =>  FALSE
[22:06:44.897]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:06:44.897]    </control>
[22:06:44.897]    <control if="continueId == 4" while="" timeout="0" info="">
[22:06:44.897]      // if-block "continueId == 4"
[22:06:44.897]        // =>  FALSE
[22:06:44.897]      // skip if-block "continueId == 4"
[22:06:44.897]    </control>
[22:06:44.897]    <control if="!isProduction" while="" timeout="0" info="">
[22:06:44.897]      // if-block "!isProduction"
[22:06:44.897]        // =>  FALSE
[22:06:44.898]      // skip if-block "!isProduction"
[22:06:44.898]    </control>
[22:06:44.898]  </sequence>
[22:06:44.898]  
[22:07:05.675]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:05.675]  
[22:07:05.684]  <debugvars>
[22:07:05.684]    // Pre-defined
[22:07:05.684]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:05.684]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:05.684]    __dp=0x00000000
[22:07:05.684]    __ap=0x00000000
[22:07:05.684]    __traceout=0x00000000      (Trace Disabled)
[22:07:05.684]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:05.684]    __FlashAddr=0x00000000
[22:07:05.684]    __FlashLen=0x00000000
[22:07:05.684]    __FlashArg=0x00000000
[22:07:05.684]    __FlashOp=0x00000000
[22:07:05.684]    __Result=0x00000000
[22:07:05.684]  </debugvars>
[22:07:05.684]  
[22:07:05.684]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:05.684]    <block atomic="false" info="">
[22:07:05.684]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:05.684]        // -> [isSWJ <= 0x00000001]
[22:07:05.684]      __var hasDormant = __protocol & 0x00020000;
[22:07:05.684]        // -> [hasDormant <= 0x00000000]
[22:07:05.684]      __var protType   = __protocol & 0x0000FFFF;
[22:07:05.684]        // -> [protType <= 0x00000002]
[22:07:05.684]    </block>
[22:07:05.684]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:05.684]      // if-block "protType == 1"
[22:07:05.684]        // =>  FALSE
[22:07:05.684]      // skip if-block "protType == 1"
[22:07:05.684]    </control>
[22:07:05.684]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:05.684]      // if-block "protType == 2"
[22:07:05.684]        // =>  TRUE
[22:07:05.684]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:05.684]        // if-block "isSWJ"
[22:07:05.684]          // =>  TRUE
[22:07:05.688]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:05.688]          // if-block "hasDormant"
[22:07:05.688]            // =>  FALSE
[22:07:05.688]          // skip if-block "hasDormant"
[22:07:05.688]        </control>
[22:07:05.688]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:05.688]          // if-block "!hasDormant"
[22:07:05.688]            // =>  TRUE
[22:07:05.688]          <block atomic="false" info="">
[22:07:05.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:05.688]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:05.688]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:05.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:05.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:05.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:05.691]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:05.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:05.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:05.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:05.695]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:05.695]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:05.695]          </block>
[22:07:05.695]          // end if-block "!hasDormant"
[22:07:05.695]        </control>
[22:07:05.695]        // end if-block "isSWJ"
[22:07:05.695]      </control>
[22:07:05.695]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:05.695]        // if-block "!isSWJ"
[22:07:05.695]          // =>  FALSE
[22:07:05.695]        // skip if-block "!isSWJ"
[22:07:05.695]      </control>
[22:07:05.695]      <block atomic="false" info="">
[22:07:05.699]        ReadDP(0x0);
[22:07:05.703]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:05.703]      </block>
[22:07:05.703]      // end if-block "protType == 2"
[22:07:05.703]    </control>
[22:07:05.703]  </sequence>
[22:07:05.703]  
[22:07:05.707]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:05.707]  
[22:07:05.707]  <debugvars>
[22:07:05.707]    // Pre-defined
[22:07:05.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:05.707]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:05.707]    __dp=0x00000000
[22:07:05.707]    __ap=0x00000000
[22:07:05.707]    __traceout=0x00000000      (Trace Disabled)
[22:07:05.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:05.707]    __FlashAddr=0x00000000
[22:07:05.707]    __FlashLen=0x00000000
[22:07:05.707]    __FlashArg=0x00000000
[22:07:05.707]    __FlashOp=0x00000000
[22:07:05.707]    __Result=0x00000000
[22:07:05.707]  </debugvars>
[22:07:05.707]  
[22:07:05.707]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:05.707]    <block atomic="false" info="">
[22:07:05.707]      __var SW_DP_ABORT       = 0x0;
[22:07:05.707]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:05.707]      __var DP_CTRL_STAT      = 0x4;
[22:07:05.707]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:05.707]      __var DP_SELECT         = 0x8;
[22:07:05.707]        // -> [DP_SELECT <= 0x00000008]
[22:07:05.707]      __var powered_down      = 0;
[22:07:05.707]        // -> [powered_down <= 0x00000000]
[22:07:05.707]      WriteDP(DP_SELECT, 0x00000000);
[22:07:05.712]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:05.712]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:07:05.714]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:07:05.714]        // -> [powered_down <= 0x00000001]
[22:07:05.714]    </block>
[22:07:05.714]    <control if="powered_down" while="" timeout="0" info="">
[22:07:05.714]      // if-block "powered_down"
[22:07:05.714]        // =>  TRUE
[22:07:05.714]      <block atomic="false" info="">
[22:07:05.714]        Message(0, "Debug/System power-up request sent");
[22:07:05.715]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:07:05.719]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:07:05.719]      </block>
[22:07:05.719]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:07:05.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:07:05.721]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:07:05.721]        // while-condition  =>  FALSE
[22:07:05.721]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:07:05.721]      </control>
[22:07:05.721]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:07:05.721]        // if-block "(__protocol & 0xFFFF) == 1"
[22:07:05.721]          // =>  FALSE
[22:07:05.721]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:07:05.721]      </control>
[22:07:05.721]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:07:05.721]        // if-block "(__protocol & 0xFFFF) == 2"
[22:07:05.721]          // =>  TRUE
[22:07:05.721]        <block atomic="false" info="">
[22:07:05.721]          Message(0, "executing SWD power up");
[22:07:05.725]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:07:05.727]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:07:05.727]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:07:05.727]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:07:05.727]        </block>
[22:07:05.727]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:07:05.727]      </control>
[22:07:05.727]      // end if-block "powered_down"
[22:07:05.727]    </control>
[22:07:05.727]    <block atomic="false" info="">
[22:07:05.727]      __var DEBUG_PORT_VAL    = 0;
[22:07:05.727]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:07:05.727]      __var ACCESS_POINT_VAL  = 0;
[22:07:05.727]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:07:05.727]      __ap = 1; 
[22:07:05.727]        // -> [__ap <= 0x00000001]
[22:07:05.727]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:07:05.735]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:07:05.737]      __ap = 4;
[22:07:05.737]        // -> [__ap <= 0x00000004]
[22:07:05.737]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:05.740]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:07:05.740]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:07:05.740]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:05.741]    </block>
[22:07:05.741]    <block atomic="false" info="">
[22:07:05.741]      __var nReset = 0x80;
[22:07:05.741]        // -> [nReset <= 0x00000080]
[22:07:05.741]      __var canReadPins = 0;
[22:07:05.741]        // -> [canReadPins <= 0x00000000]
[22:07:05.741]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:07:05.744]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:07:05.744]        // -> [canReadPins <= 0x00000001]
[22:07:05.744]    </block>
[22:07:05.744]    <control if="" while="1" timeout="200" info="">
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.744]      // while-condition  =>  TRUE
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.744]      // while-condition  =>  TRUE
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.744]      // while-condition  =>  TRUE
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.744]      // while-condition  =>  TRUE
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.744]      // while-condition  =>  TRUE
[22:07:05.744]      // while "1"  (timeout="200")
[22:07:05.746]      // while-condition  =>  TRUE
[22:07:05.746]      // while "1"  (timeout="200")
[22:07:05.746]      // while-condition  =>  TRUE
[22:07:05.746]      // while "1"  (timeout="200")
[22:07:05.746]      // while-condition  =>  TRUE
[22:07:05.746]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.747]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.747]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.747]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.747]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.747]      // while "1"  (timeout="200")
[22:07:05.747]      // while-condition  =>  TRUE
[22:07:05.748]      // while "1"  (timeout="200")
[22:07:05.748]      // while-condition  =>  TRUE
[22:07:05.748]      // while "1"  (timeout="200")
[22:07:05.748]      // while-condition  =>  TRUE
[22:07:05.748]      // while "1"  (timeout="200")
[22:07:05.748]      // while-condition  =>  TRUE
[22:07:05.748]      // while "1"  (timeout="200")
[22:07:05.748]      // while-condition  =>  TRUE
[22:07:05.748]      // while "1"  (timeout="200")
[22:07:05.748]      // while-condition  =>  TRUE
[22:07:05.749]      // while "1"  (timeout="200")
[22:07:05.749]      // while-condition  =>  TRUE
[22:07:05.749]      // while "1"  (timeout="200")
[22:07:05.749]      // while-condition  =>  TRUE
[22:07:05.749]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.750]      // while "1"  (timeout="200")
[22:07:05.750]      // while-condition  =>  TRUE
[22:07:05.751]      // while "1"  (timeout="200")
[22:07:05.751]      // while-condition  =>  TRUE
[22:07:05.751]      // while "1"  (timeout="200")
[22:07:05.751]      // while-condition  =>  TRUE
[22:07:05.751]      // while "1"  (timeout="200")
[22:07:05.751]      // while-condition  =>  TRUE
[22:07:05.751]      // while "1"  (timeout="200")
[22:07:05.751]      // while-condition  =>  TRUE
[22:07:05.751]      // while "1"  (timeout="200")
[22:07:05.751]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.752]      // while "1"  (timeout="200")
[22:07:05.752]      // while-condition  =>  TRUE
[22:07:05.756]      // while "1"  (timeout="200")
[22:07:05.756]      // while  =>  TIMEOUT
[22:07:05.756]      // end while "1"
[22:07:05.756]    </control>
[22:07:05.756]    <control if="canReadPins" while="" timeout="0" info="">
[22:07:05.756]      // if-block "canReadPins"
[22:07:05.756]        // =>  TRUE
[22:07:05.756]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:07:05.756]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:07:05.756]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:07:05.756]        // while-condition  =>  FALSE
[22:07:05.756]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:07:05.756]      </control>
[22:07:05.756]      // end if-block "canReadPins"
[22:07:05.756]    </control>
[22:07:05.756]    <control if="!canReadPins" while="" timeout="0" info="">
[22:07:05.756]      // if-block "!canReadPins"
[22:07:05.756]        // =>  FALSE
[22:07:05.760]      // skip if-block "!canReadPins"
[22:07:05.760]    </control>
[22:07:05.760]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:07:05.760]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:05.760]        // =>  TRUE
[22:07:05.760]      <block atomic="false" info="">
[22:07:05.761]        WriteAP(0x00, 0x190008);
[22:07:05.761]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:05.761]        WriteAP(0xF0, 0x01);
[22:07:05.764]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:05.764]      </block>
[22:07:05.764]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:05.764]    </control>
[22:07:05.764]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:07:05.764]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:05.764]        // =>  FALSE
[22:07:05.764]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:05.764]    </control>
[22:07:05.764]    <block atomic="false" info="">
[22:07:05.764]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:05.771]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:07:05.771]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:07:05.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:05.773]      __ap = 0; //lets make sure we reset the access point selection
[22:07:05.773]        // -> [__ap <= 0x00000000]
[22:07:05.773]    </block>
[22:07:05.773]  </sequence>
[22:07:05.773]  
[22:07:05.793]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:07:05.793]  
[22:07:05.793]  <debugvars>
[22:07:05.793]    // Pre-defined
[22:07:05.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:05.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:05.794]    __dp=0x00000000
[22:07:05.794]    __ap=0x00000000
[22:07:05.794]    __traceout=0x00000000      (Trace Disabled)
[22:07:05.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:05.794]    __FlashAddr=0x00000000
[22:07:05.794]    __FlashLen=0x00000000
[22:07:05.794]    __FlashArg=0x00000000
[22:07:05.794]    __FlashOp=0x00000000
[22:07:05.794]    __Result=0x00000000
[22:07:05.794]  </debugvars>
[22:07:05.795]  
[22:07:05.795]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:07:05.795]    <block atomic="false" info="">
[22:07:05.795]      __var deviceID = 0;
[22:07:05.795]        // -> [deviceID <= 0x00000000]
[22:07:05.795]      __var version = 0;
[22:07:05.795]        // -> [version <= 0x00000000]
[22:07:05.795]      __var partNum = 0;
[22:07:05.795]        // -> [partNum <= 0x00000000]
[22:07:05.795]      __var manuf = 0;
[22:07:05.795]        // -> [manuf <= 0x00000000]
[22:07:05.796]      __var isMSPM0G1X0X_G3X0X = 0;
[22:07:05.796]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:07:05.796]      __var isProduction = 0;
[22:07:05.796]        // -> [isProduction <= 0x00000000]
[22:07:05.796]      __var continueId = 0;
[22:07:05.796]        // -> [continueId <= 0x00000000]
[22:07:05.796]      deviceID =   Read32(0x41C40004);
[22:07:05.805]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:07:05.805]        // -> [deviceID <= 0x2BB8802F]
[22:07:05.805]      version = deviceID >> 28;
[22:07:05.809]        // -> [version <= 0x00000002]
[22:07:05.809]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:07:05.809]        // -> [partNum <= 0x0000BB88]
[22:07:05.809]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:07:05.809]        // -> [manuf <= 0x00000017]
[22:07:05.809]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:07:05.809]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:07:05.809]      isProduction = (version > 0);
[22:07:05.809]        // -> [isProduction <= 0x00000001]
[22:07:05.809]    </block>
[22:07:05.809]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:07:05.809]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:07:05.809]        // =>  FALSE
[22:07:05.809]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:07:05.809]    </control>
[22:07:05.811]    <control if="continueId == 4" while="" timeout="0" info="">
[22:07:05.811]      // if-block "continueId == 4"
[22:07:05.811]        // =>  FALSE
[22:07:05.811]      // skip if-block "continueId == 4"
[22:07:05.811]    </control>
[22:07:05.811]    <control if="!isProduction" while="" timeout="0" info="">
[22:07:05.811]      // if-block "!isProduction"
[22:07:05.811]        // =>  FALSE
[22:07:05.811]      // skip if-block "!isProduction"
[22:07:05.811]    </control>
[22:07:05.811]  </sequence>
[22:07:05.811]  
[22:07:34.976]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:34.976]  
[22:07:34.985]  <debugvars>
[22:07:34.985]    // Pre-defined
[22:07:34.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:34.985]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:34.985]    __dp=0x00000000
[22:07:34.985]    __ap=0x00000000
[22:07:34.986]    __traceout=0x00000000      (Trace Disabled)
[22:07:34.986]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:34.986]    __FlashAddr=0x00000000
[22:07:34.986]    __FlashLen=0x00000000
[22:07:34.986]    __FlashArg=0x00000000
[22:07:34.986]    __FlashOp=0x00000000
[22:07:34.986]    __Result=0x00000000
[22:07:34.986]  </debugvars>
[22:07:34.986]  
[22:07:34.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:34.986]    <block atomic="false" info="">
[22:07:34.987]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:34.987]        // -> [isSWJ <= 0x00000001]
[22:07:34.987]      __var hasDormant = __protocol & 0x00020000;
[22:07:34.987]        // -> [hasDormant <= 0x00000000]
[22:07:34.987]      __var protType   = __protocol & 0x0000FFFF;
[22:07:34.987]        // -> [protType <= 0x00000002]
[22:07:34.987]    </block>
[22:07:34.987]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:34.987]      // if-block "protType == 1"
[22:07:34.987]        // =>  FALSE
[22:07:34.987]      // skip if-block "protType == 1"
[22:07:34.987]    </control>
[22:07:34.989]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:34.989]      // if-block "protType == 2"
[22:07:34.989]        // =>  TRUE
[22:07:34.989]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:34.989]        // if-block "isSWJ"
[22:07:34.989]          // =>  TRUE
[22:07:34.989]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:34.989]          // if-block "hasDormant"
[22:07:34.989]            // =>  FALSE
[22:07:34.989]          // skip if-block "hasDormant"
[22:07:34.989]        </control>
[22:07:34.989]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:34.989]          // if-block "!hasDormant"
[22:07:34.989]            // =>  TRUE
[22:07:34.989]          <block atomic="false" info="">
[22:07:34.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:34.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:34.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:34.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:34.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:34.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:34.993]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:34.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:34.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:34.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:34.997]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:34.997]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:34.997]          </block>
[22:07:34.997]          // end if-block "!hasDormant"
[22:07:34.997]        </control>
[22:07:34.997]        // end if-block "isSWJ"
[22:07:34.997]      </control>
[22:07:34.997]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:34.997]        // if-block "!isSWJ"
[22:07:34.997]          // =>  FALSE
[22:07:34.997]        // skip if-block "!isSWJ"
[22:07:34.997]      </control>
[22:07:34.997]      <block atomic="false" info="">
[22:07:35.002]        ReadDP(0x0);
[22:07:35.002]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:35.002]      </block>
[22:07:35.002]      // end if-block "protType == 2"
[22:07:35.002]    </control>
[22:07:35.002]  </sequence>
[22:07:35.002]  
[22:07:35.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:35.006]  
[22:07:35.006]  <debugvars>
[22:07:35.006]    // Pre-defined
[22:07:35.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:35.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:35.006]    __dp=0x00000000
[22:07:35.006]    __ap=0x00000000
[22:07:35.006]    __traceout=0x00000000      (Trace Disabled)
[22:07:35.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:35.006]    __FlashAddr=0x00000000
[22:07:35.006]    __FlashLen=0x00000000
[22:07:35.006]    __FlashArg=0x00000000
[22:07:35.006]    __FlashOp=0x00000000
[22:07:35.006]    __Result=0x00000000
[22:07:35.006]  </debugvars>
[22:07:35.007]  
[22:07:35.007]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:35.007]    <block atomic="false" info="">
[22:07:35.007]      __var SW_DP_ABORT       = 0x0;
[22:07:35.008]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:35.008]      __var DP_CTRL_STAT      = 0x4;
[22:07:35.008]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:35.008]      __var DP_SELECT         = 0x8;
[22:07:35.008]        // -> [DP_SELECT <= 0x00000008]
[22:07:35.008]      __var powered_down      = 0;
[22:07:35.008]        // -> [powered_down <= 0x00000000]
[22:07:35.008]      WriteDP(DP_SELECT, 0x00000000);
[22:07:35.010]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:35.010]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:07:35.010]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:07:35.010]        // -> [powered_down <= 0x00000001]
[22:07:35.010]    </block>
[22:07:35.010]    <control if="powered_down" while="" timeout="0" info="">
[22:07:35.010]      // if-block "powered_down"
[22:07:35.010]        // =>  TRUE
[22:07:35.010]      <block atomic="false" info="">
[22:07:35.010]        Message(0, "Debug/System power-up request sent");
[22:07:35.014]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:07:35.016]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:07:35.016]      </block>
[22:07:35.017]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:07:35.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:07:35.017]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:07:35.017]        // while-condition  =>  FALSE
[22:07:35.017]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:07:35.017]      </control>
[22:07:35.019]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:07:35.019]        // if-block "(__protocol & 0xFFFF) == 1"
[22:07:35.019]          // =>  FALSE
[22:07:35.019]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:07:35.019]      </control>
[22:07:35.019]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:07:35.019]        // if-block "(__protocol & 0xFFFF) == 2"
[22:07:35.019]          // =>  TRUE
[22:07:35.019]        <block atomic="false" info="">
[22:07:35.019]          Message(0, "executing SWD power up");
[22:07:35.022]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:07:35.023]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:07:35.023]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:07:35.025]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:07:35.025]        </block>
[22:07:35.025]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:07:35.025]      </control>
[22:07:35.025]      // end if-block "powered_down"
[22:07:35.025]    </control>
[22:07:35.026]    <block atomic="false" info="">
[22:07:35.026]      __var DEBUG_PORT_VAL    = 0;
[22:07:35.026]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:07:35.026]      __var ACCESS_POINT_VAL  = 0;
[22:07:35.026]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:07:35.026]      __ap = 1; 
[22:07:35.026]        // -> [__ap <= 0x00000001]
[22:07:35.026]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:07:35.029]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:07:35.029]      __ap = 4;
[22:07:35.029]        // -> [__ap <= 0x00000004]
[22:07:35.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:35.034]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:07:35.034]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:07:35.034]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:35.036]    </block>
[22:07:35.036]    <block atomic="false" info="">
[22:07:35.036]      __var nReset = 0x80;
[22:07:35.036]        // -> [nReset <= 0x00000080]
[22:07:35.036]      __var canReadPins = 0;
[22:07:35.036]        // -> [canReadPins <= 0x00000000]
[22:07:35.036]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:07:35.038]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:07:35.038]        // -> [canReadPins <= 0x00000001]
[22:07:35.039]    </block>
[22:07:35.039]    <control if="" while="1" timeout="200" info="">
[22:07:35.039]      // while "1"  (timeout="200")
[22:07:35.039]      // while-condition  =>  TRUE
[22:07:35.039]      // while "1"  (timeout="200")
[22:07:35.039]      // while-condition  =>  TRUE
[22:07:35.039]      // while "1"  (timeout="200")
[22:07:35.039]      // while-condition  =>  TRUE
[22:07:35.039]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.040]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.040]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.040]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.040]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.040]      // while "1"  (timeout="200")
[22:07:35.040]      // while-condition  =>  TRUE
[22:07:35.041]      // while "1"  (timeout="200")
[22:07:35.041]      // while-condition  =>  TRUE
[22:07:35.041]      // while "1"  (timeout="200")
[22:07:35.041]      // while-condition  =>  TRUE
[22:07:35.041]      // while "1"  (timeout="200")
[22:07:35.041]      // while-condition  =>  TRUE
[22:07:35.041]      // while "1"  (timeout="200")
[22:07:35.042]      // while-condition  =>  TRUE
[22:07:35.042]      // while "1"  (timeout="200")
[22:07:35.042]      // while-condition  =>  TRUE
[22:07:35.042]      // while "1"  (timeout="200")
[22:07:35.042]      // while-condition  =>  TRUE
[22:07:35.042]      // while "1"  (timeout="200")
[22:07:35.042]      // while-condition  =>  TRUE
[22:07:35.042]      // while "1"  (timeout="200")
[22:07:35.043]      // while-condition  =>  TRUE
[22:07:35.043]      // while "1"  (timeout="200")
[22:07:35.043]      // while-condition  =>  TRUE
[22:07:35.043]      // while "1"  (timeout="200")
[22:07:35.043]      // while-condition  =>  TRUE
[22:07:35.043]      // while "1"  (timeout="200")
[22:07:35.043]      // while-condition  =>  TRUE
[22:07:35.043]      // while "1"  (timeout="200")
[22:07:35.044]      // while-condition  =>  TRUE
[22:07:35.044]      // while "1"  (timeout="200")
[22:07:35.044]      // while-condition  =>  TRUE
[22:07:35.044]      // while "1"  (timeout="200")
[22:07:35.044]      // while-condition  =>  TRUE
[22:07:35.044]      // while "1"  (timeout="200")
[22:07:35.044]      // while-condition  =>  TRUE
[22:07:35.044]      // while "1"  (timeout="200")
[22:07:35.045]      // while-condition  =>  TRUE
[22:07:35.045]      // while "1"  (timeout="200")
[22:07:35.045]      // while-condition  =>  TRUE
[22:07:35.045]      // while "1"  (timeout="200")
[22:07:35.045]      // while-condition  =>  TRUE
[22:07:35.045]      // while "1"  (timeout="200")
[22:07:35.045]      // while-condition  =>  TRUE
[22:07:35.045]      // while "1"  (timeout="200")
[22:07:35.045]      // while-condition  =>  TRUE
[22:07:35.045]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.046]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.046]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.046]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.046]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.046]      // while "1"  (timeout="200")
[22:07:35.046]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.047]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.047]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.047]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.047]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.047]      // while-condition  =>  TRUE
[22:07:35.047]      // while "1"  (timeout="200")
[22:07:35.048]      // while-condition  =>  TRUE
[22:07:35.048]      // while "1"  (timeout="200")
[22:07:35.048]      // while-condition  =>  TRUE
[22:07:35.048]      // while "1"  (timeout="200")
[22:07:35.048]      // while-condition  =>  TRUE
[22:07:35.048]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.049]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.049]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.049]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.049]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.049]      // while "1"  (timeout="200")
[22:07:35.049]      // while-condition  =>  TRUE
[22:07:35.050]      // while "1"  (timeout="200")
[22:07:35.050]      // while  =>  TIMEOUT
[22:07:35.050]      // end while "1"
[22:07:35.050]    </control>
[22:07:35.050]    <control if="canReadPins" while="" timeout="0" info="">
[22:07:35.050]      // if-block "canReadPins"
[22:07:35.050]        // =>  TRUE
[22:07:35.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:07:35.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:07:35.053]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:07:35.053]        // while-condition  =>  FALSE
[22:07:35.054]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:07:35.054]      </control>
[22:07:35.054]      // end if-block "canReadPins"
[22:07:35.054]    </control>
[22:07:35.054]    <control if="!canReadPins" while="" timeout="0" info="">
[22:07:35.054]      // if-block "!canReadPins"
[22:07:35.054]        // =>  FALSE
[22:07:35.054]      // skip if-block "!canReadPins"
[22:07:35.054]    </control>
[22:07:35.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:07:35.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:35.055]        // =>  TRUE
[22:07:35.055]      <block atomic="false" info="">
[22:07:35.055]        WriteAP(0x00, 0x190008);
[22:07:35.056]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:35.056]        WriteAP(0xF0, 0x01);
[22:07:35.060]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:35.060]      </block>
[22:07:35.060]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:35.060]    </control>
[22:07:35.060]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:07:35.060]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:35.061]        // =>  FALSE
[22:07:35.061]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:35.061]    </control>
[22:07:35.061]    <block atomic="false" info="">
[22:07:35.061]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:35.064]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:07:35.064]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:07:35.064]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:35.066]      __ap = 0; //lets make sure we reset the access point selection
[22:07:35.066]        // -> [__ap <= 0x00000000]
[22:07:35.066]    </block>
[22:07:35.066]  </sequence>
[22:07:35.066]  
[22:07:35.087]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:07:35.087]  
[22:07:35.087]  <debugvars>
[22:07:35.087]    // Pre-defined
[22:07:35.087]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:35.087]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:35.087]    __dp=0x00000000
[22:07:35.089]    __ap=0x00000000
[22:07:35.089]    __traceout=0x00000000      (Trace Disabled)
[22:07:35.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:35.089]    __FlashAddr=0x00000000
[22:07:35.089]    __FlashLen=0x00000000
[22:07:35.089]    __FlashArg=0x00000000
[22:07:35.089]    __FlashOp=0x00000000
[22:07:35.089]    __Result=0x00000000
[22:07:35.089]  </debugvars>
[22:07:35.089]  
[22:07:35.089]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:07:35.089]    <block atomic="false" info="">
[22:07:35.089]      __var deviceID = 0;
[22:07:35.089]        // -> [deviceID <= 0x00000000]
[22:07:35.089]      __var version = 0;
[22:07:35.089]        // -> [version <= 0x00000000]
[22:07:35.089]      __var partNum = 0;
[22:07:35.089]        // -> [partNum <= 0x00000000]
[22:07:35.089]      __var manuf = 0;
[22:07:35.091]        // -> [manuf <= 0x00000000]
[22:07:35.091]      __var isMSPM0G1X0X_G3X0X = 0;
[22:07:35.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:07:35.091]      __var isProduction = 0;
[22:07:35.091]        // -> [isProduction <= 0x00000000]
[22:07:35.091]      __var continueId = 0;
[22:07:35.091]        // -> [continueId <= 0x00000000]
[22:07:35.091]      deviceID =   Read32(0x41C40004);
[22:07:35.096]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:07:35.096]        // -> [deviceID <= 0x2BB8802F]
[22:07:35.096]      version = deviceID >> 28;
[22:07:35.096]        // -> [version <= 0x00000002]
[22:07:35.096]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:07:35.096]        // -> [partNum <= 0x0000BB88]
[22:07:35.096]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:07:35.096]        // -> [manuf <= 0x00000017]
[22:07:35.096]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:07:35.096]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:07:35.096]      isProduction = (version > 0);
[22:07:35.096]        // -> [isProduction <= 0x00000001]
[22:07:35.096]    </block>
[22:07:35.096]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:07:35.096]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:07:35.096]        // =>  FALSE
[22:07:35.096]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:07:35.096]    </control>
[22:07:35.096]    <control if="continueId == 4" while="" timeout="0" info="">
[22:07:35.096]      // if-block "continueId == 4"
[22:07:35.096]        // =>  FALSE
[22:07:35.096]      // skip if-block "continueId == 4"
[22:07:35.100]    </control>
[22:07:35.100]    <control if="!isProduction" while="" timeout="0" info="">
[22:07:35.100]      // if-block "!isProduction"
[22:07:35.100]        // =>  FALSE
[22:07:35.100]      // skip if-block "!isProduction"
[22:07:35.100]    </control>
[22:07:35.100]  </sequence>
[22:07:35.100]  
[22:07:57.610]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:07:57.610]  
[22:07:57.610]  <debugvars>
[22:07:57.610]    // Pre-defined
[22:07:57.610]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:57.610]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:57.610]    __dp=0x00000000
[22:07:57.610]    __ap=0x00000000
[22:07:57.610]    __traceout=0x00000000      (Trace Disabled)
[22:07:57.610]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:57.610]    __FlashAddr=0x00000000
[22:07:57.610]    __FlashLen=0x00000000
[22:07:57.610]    __FlashArg=0x00000000
[22:07:57.610]    __FlashOp=0x00000000
[22:07:57.610]    __Result=0x00000000
[22:07:57.610]  </debugvars>
[22:07:57.610]  
[22:07:57.613]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:07:57.613]    <block atomic="false" info="">
[22:07:57.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:07:57.613]        // -> [isSWJ <= 0x00000001]
[22:07:57.613]      __var hasDormant = __protocol & 0x00020000;
[22:07:57.613]        // -> [hasDormant <= 0x00000000]
[22:07:57.613]      __var protType   = __protocol & 0x0000FFFF;
[22:07:57.613]        // -> [protType <= 0x00000002]
[22:07:57.613]    </block>
[22:07:57.613]    <control if="protType == 1" while="" timeout="0" info="">
[22:07:57.613]      // if-block "protType == 1"
[22:07:57.613]        // =>  FALSE
[22:07:57.613]      // skip if-block "protType == 1"
[22:07:57.613]    </control>
[22:07:57.613]    <control if="protType == 2" while="" timeout="0" info="">
[22:07:57.613]      // if-block "protType == 2"
[22:07:57.613]        // =>  TRUE
[22:07:57.613]      <control if="isSWJ" while="" timeout="0" info="">
[22:07:57.613]        // if-block "isSWJ"
[22:07:57.615]          // =>  TRUE
[22:07:57.615]        <control if="hasDormant" while="" timeout="0" info="">
[22:07:57.615]          // if-block "hasDormant"
[22:07:57.615]            // =>  FALSE
[22:07:57.615]          // skip if-block "hasDormant"
[22:07:57.615]        </control>
[22:07:57.615]        <control if="!hasDormant" while="" timeout="0" info="">
[22:07:57.615]          // if-block "!hasDormant"
[22:07:57.615]            // =>  TRUE
[22:07:57.615]          <block atomic="false" info="">
[22:07:57.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:07:57.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:57.618]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:07:57.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:07:57.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:07:57.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:57.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:07:57.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:07:57.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:07:57.624]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:07:57.624]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:07:57.627]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:07:57.627]          </block>
[22:07:57.627]          // end if-block "!hasDormant"
[22:07:57.627]        </control>
[22:07:57.627]        // end if-block "isSWJ"
[22:07:57.627]      </control>
[22:07:57.627]      <control if="!isSWJ" while="" timeout="0" info="">
[22:07:57.627]        // if-block "!isSWJ"
[22:07:57.627]          // =>  FALSE
[22:07:57.627]        // skip if-block "!isSWJ"
[22:07:57.627]      </control>
[22:07:57.627]      <block atomic="false" info="">
[22:07:57.628]        ReadDP(0x0);
[22:07:57.630]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:07:57.630]      </block>
[22:07:57.630]      // end if-block "protType == 2"
[22:07:57.630]    </control>
[22:07:57.630]  </sequence>
[22:07:57.630]  
[22:07:57.633]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:07:57.633]  
[22:07:57.633]  <debugvars>
[22:07:57.633]    // Pre-defined
[22:07:57.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:57.633]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:57.633]    __dp=0x00000000
[22:07:57.633]    __ap=0x00000000
[22:07:57.634]    __traceout=0x00000000      (Trace Disabled)
[22:07:57.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:57.635]    __FlashAddr=0x00000000
[22:07:57.635]    __FlashLen=0x00000000
[22:07:57.635]    __FlashArg=0x00000000
[22:07:57.635]    __FlashOp=0x00000000
[22:07:57.635]    __Result=0x00000000
[22:07:57.635]  </debugvars>
[22:07:57.635]  
[22:07:57.635]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:07:57.635]    <block atomic="false" info="">
[22:07:57.635]      __var SW_DP_ABORT       = 0x0;
[22:07:57.635]        // -> [SW_DP_ABORT <= 0x00000000]
[22:07:57.635]      __var DP_CTRL_STAT      = 0x4;
[22:07:57.635]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:07:57.635]      __var DP_SELECT         = 0x8;
[22:07:57.635]        // -> [DP_SELECT <= 0x00000008]
[22:07:57.635]      __var powered_down      = 0;
[22:07:57.635]        // -> [powered_down <= 0x00000000]
[22:07:57.635]      WriteDP(DP_SELECT, 0x00000000);
[22:07:57.636]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:07:57.636]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:07:57.639]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:07:57.639]        // -> [powered_down <= 0x00000001]
[22:07:57.639]    </block>
[22:07:57.639]    <control if="powered_down" while="" timeout="0" info="">
[22:07:57.639]      // if-block "powered_down"
[22:07:57.640]        // =>  TRUE
[22:07:57.640]      <block atomic="false" info="">
[22:07:57.640]        Message(0, "Debug/System power-up request sent");
[22:07:57.643]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:07:57.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:07:57.645]      </block>
[22:07:57.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:07:57.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:07:57.647]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:07:57.647]        // while-condition  =>  FALSE
[22:07:57.647]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:07:57.647]      </control>
[22:07:57.647]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:07:57.647]        // if-block "(__protocol & 0xFFFF) == 1"
[22:07:57.648]          // =>  FALSE
[22:07:57.648]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:07:57.648]      </control>
[22:07:57.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:07:57.648]        // if-block "(__protocol & 0xFFFF) == 2"
[22:07:57.648]          // =>  TRUE
[22:07:57.648]        <block atomic="false" info="">
[22:07:57.648]          Message(0, "executing SWD power up");
[22:07:57.650]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:07:57.653]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:07:57.653]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:07:57.654]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:07:57.654]        </block>
[22:07:57.655]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:07:57.655]      </control>
[22:07:57.655]      // end if-block "powered_down"
[22:07:57.655]    </control>
[22:07:57.655]    <block atomic="false" info="">
[22:07:57.655]      __var DEBUG_PORT_VAL    = 0;
[22:07:57.655]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:07:57.655]      __var ACCESS_POINT_VAL  = 0;
[22:07:57.655]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:07:57.655]      __ap = 1; 
[22:07:57.655]        // -> [__ap <= 0x00000001]
[22:07:57.655]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:07:57.659]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:07:57.659]      __ap = 4;
[22:07:57.659]        // -> [__ap <= 0x00000004]
[22:07:57.659]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:57.663]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:07:57.663]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:07:57.663]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:57.665]    </block>
[22:07:57.665]    <block atomic="false" info="">
[22:07:57.665]      __var nReset = 0x80;
[22:07:57.665]        // -> [nReset <= 0x00000080]
[22:07:57.665]      __var canReadPins = 0;
[22:07:57.665]        // -> [canReadPins <= 0x00000000]
[22:07:57.665]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:07:57.666]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:07:57.666]        // -> [canReadPins <= 0x00000001]
[22:07:57.667]    </block>
[22:07:57.667]    <control if="" while="1" timeout="200" info="">
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.667]      // while-condition  =>  TRUE
[22:07:57.667]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.671]      // while-condition  =>  TRUE
[22:07:57.671]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.672]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.672]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.672]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.672]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.672]      // while "1"  (timeout="200")
[22:07:57.672]      // while-condition  =>  TRUE
[22:07:57.673]      // while "1"  (timeout="200")
[22:07:57.673]      // while-condition  =>  TRUE
[22:07:57.673]      // while "1"  (timeout="200")
[22:07:57.673]      // while-condition  =>  TRUE
[22:07:57.673]      // while "1"  (timeout="200")
[22:07:57.673]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.674]      // while "1"  (timeout="200")
[22:07:57.674]      // while-condition  =>  TRUE
[22:07:57.675]      // while "1"  (timeout="200")
[22:07:57.675]      // while  =>  TIMEOUT
[22:07:57.675]      // end while "1"
[22:07:57.675]    </control>
[22:07:57.675]    <control if="canReadPins" while="" timeout="0" info="">
[22:07:57.675]      // if-block "canReadPins"
[22:07:57.675]        // =>  TRUE
[22:07:57.675]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:07:57.675]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:07:57.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:07:57.677]        // while-condition  =>  FALSE
[22:07:57.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:07:57.677]      </control>
[22:07:57.677]      // end if-block "canReadPins"
[22:07:57.677]    </control>
[22:07:57.677]    <control if="!canReadPins" while="" timeout="0" info="">
[22:07:57.677]      // if-block "!canReadPins"
[22:07:57.677]        // =>  FALSE
[22:07:57.677]      // skip if-block "!canReadPins"
[22:07:57.677]    </control>
[22:07:57.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:07:57.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:57.678]        // =>  TRUE
[22:07:57.678]      <block atomic="false" info="">
[22:07:57.678]        WriteAP(0x00, 0x190008);
[22:07:57.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:57.680]        WriteAP(0xF0, 0x01);
[22:07:57.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:07:57.683]      </block>
[22:07:57.683]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:07:57.684]    </control>
[22:07:57.685]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:07:57.685]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:57.685]        // =>  FALSE
[22:07:57.685]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:07:57.685]    </control>
[22:07:57.685]    <block atomic="false" info="">
[22:07:57.685]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:07:57.688]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:07:57.688]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:07:57.688]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:07:57.690]      __ap = 0; //lets make sure we reset the access point selection
[22:07:57.690]        // -> [__ap <= 0x00000000]
[22:07:57.690]    </block>
[22:07:57.690]  </sequence>
[22:07:57.690]  
[22:07:57.709]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:07:57.709]  
[22:07:57.709]  <debugvars>
[22:07:57.709]    // Pre-defined
[22:07:57.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:07:57.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:07:57.709]    __dp=0x00000000
[22:07:57.709]    __ap=0x00000000
[22:07:57.709]    __traceout=0x00000000      (Trace Disabled)
[22:07:57.710]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:07:57.710]    __FlashAddr=0x00000000
[22:07:57.710]    __FlashLen=0x00000000
[22:07:57.710]    __FlashArg=0x00000000
[22:07:57.710]    __FlashOp=0x00000000
[22:07:57.710]    __Result=0x00000000
[22:07:57.710]  </debugvars>
[22:07:57.710]  
[22:07:57.710]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:07:57.710]    <block atomic="false" info="">
[22:07:57.710]      __var deviceID = 0;
[22:07:57.710]        // -> [deviceID <= 0x00000000]
[22:07:57.710]      __var version = 0;
[22:07:57.711]        // -> [version <= 0x00000000]
[22:07:57.711]      __var partNum = 0;
[22:07:57.711]        // -> [partNum <= 0x00000000]
[22:07:57.711]      __var manuf = 0;
[22:07:57.711]        // -> [manuf <= 0x00000000]
[22:07:57.711]      __var isMSPM0G1X0X_G3X0X = 0;
[22:07:57.711]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:07:57.711]      __var isProduction = 0;
[22:07:57.711]        // -> [isProduction <= 0x00000000]
[22:07:57.711]      __var continueId = 0;
[22:07:57.711]        // -> [continueId <= 0x00000000]
[22:07:57.711]      deviceID =   Read32(0x41C40004);
[22:07:57.717]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:07:57.717]        // -> [deviceID <= 0x2BB8802F]
[22:07:57.717]      version = deviceID >> 28;
[22:07:57.717]        // -> [version <= 0x00000002]
[22:07:57.717]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:07:57.717]        // -> [partNum <= 0x0000BB88]
[22:07:57.717]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:07:57.717]        // -> [manuf <= 0x00000017]
[22:07:57.717]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:07:57.717]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:07:57.717]      isProduction = (version > 0);
[22:07:57.717]        // -> [isProduction <= 0x00000001]
[22:07:57.717]    </block>
[22:07:57.717]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:07:57.717]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:07:57.717]        // =>  FALSE
[22:07:57.717]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:07:57.717]    </control>
[22:07:57.717]    <control if="continueId == 4" while="" timeout="0" info="">
[22:07:57.717]      // if-block "continueId == 4"
[22:07:57.717]        // =>  FALSE
[22:07:57.717]      // skip if-block "continueId == 4"
[22:07:57.717]    </control>
[22:07:57.717]    <control if="!isProduction" while="" timeout="0" info="">
[22:07:57.717]      // if-block "!isProduction"
[22:07:57.717]        // =>  FALSE
[22:07:57.717]      // skip if-block "!isProduction"
[22:07:57.717]    </control>
[22:07:57.717]  </sequence>
[22:07:57.717]  
[22:08:57.229]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:08:57.229]  
[22:08:57.239]  <debugvars>
[22:08:57.239]    // Pre-defined
[22:08:57.239]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:57.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:57.239]    __dp=0x00000000
[22:08:57.239]    __ap=0x00000000
[22:08:57.239]    __traceout=0x00000000      (Trace Disabled)
[22:08:57.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:57.239]    __FlashAddr=0x00000000
[22:08:57.239]    __FlashLen=0x00000000
[22:08:57.239]    __FlashArg=0x00000000
[22:08:57.239]    __FlashOp=0x00000000
[22:08:57.239]    __Result=0x00000000
[22:08:57.239]  </debugvars>
[22:08:57.239]  
[22:08:57.239]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:08:57.239]    <block atomic="false" info="">
[22:08:57.239]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:08:57.239]        // -> [isSWJ <= 0x00000001]
[22:08:57.239]      __var hasDormant = __protocol & 0x00020000;
[22:08:57.239]        // -> [hasDormant <= 0x00000000]
[22:08:57.239]      __var protType   = __protocol & 0x0000FFFF;
[22:08:57.239]        // -> [protType <= 0x00000002]
[22:08:57.239]    </block>
[22:08:57.239]    <control if="protType == 1" while="" timeout="0" info="">
[22:08:57.239]      // if-block "protType == 1"
[22:08:57.239]        // =>  FALSE
[22:08:57.239]      // skip if-block "protType == 1"
[22:08:57.239]    </control>
[22:08:57.239]    <control if="protType == 2" while="" timeout="0" info="">
[22:08:57.242]      // if-block "protType == 2"
[22:08:57.242]        // =>  TRUE
[22:08:57.242]      <control if="isSWJ" while="" timeout="0" info="">
[22:08:57.242]        // if-block "isSWJ"
[22:08:57.242]          // =>  TRUE
[22:08:57.242]        <control if="hasDormant" while="" timeout="0" info="">
[22:08:57.242]          // if-block "hasDormant"
[22:08:57.242]            // =>  FALSE
[22:08:57.242]          // skip if-block "hasDormant"
[22:08:57.242]        </control>
[22:08:57.242]        <control if="!hasDormant" while="" timeout="0" info="">
[22:08:57.242]          // if-block "!hasDormant"
[22:08:57.242]            // =>  TRUE
[22:08:57.242]          <block atomic="false" info="">
[22:08:57.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:08:57.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:57.242]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:08:57.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:08:57.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:08:57.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:57.245]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:08:57.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:08:57.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:08:57.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:08:57.249]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:08:57.249]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:08:57.249]          </block>
[22:08:57.249]          // end if-block "!hasDormant"
[22:08:57.249]        </control>
[22:08:57.249]        // end if-block "isSWJ"
[22:08:57.249]      </control>
[22:08:57.249]      <control if="!isSWJ" while="" timeout="0" info="">
[22:08:57.249]        // if-block "!isSWJ"
[22:08:57.249]          // =>  FALSE
[22:08:57.249]        // skip if-block "!isSWJ"
[22:08:57.249]      </control>
[22:08:57.249]      <block atomic="false" info="">
[22:08:57.249]        ReadDP(0x0);
[22:08:57.253]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:08:57.253]      </block>
[22:08:57.253]      // end if-block "protType == 2"
[22:08:57.253]    </control>
[22:08:57.253]  </sequence>
[22:08:57.253]  
[22:08:57.257]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:08:57.257]  
[22:08:57.257]  <debugvars>
[22:08:57.257]    // Pre-defined
[22:08:57.257]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:57.257]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:57.257]    __dp=0x00000000
[22:08:57.257]    __ap=0x00000000
[22:08:57.257]    __traceout=0x00000000      (Trace Disabled)
[22:08:57.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:57.257]    __FlashAddr=0x00000000
[22:08:57.257]    __FlashLen=0x00000000
[22:08:57.257]    __FlashArg=0x00000000
[22:08:57.257]    __FlashOp=0x00000000
[22:08:57.257]    __Result=0x00000000
[22:08:57.257]  </debugvars>
[22:08:57.257]  
[22:08:57.257]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:08:57.257]    <block atomic="false" info="">
[22:08:57.257]      __var SW_DP_ABORT       = 0x0;
[22:08:57.257]        // -> [SW_DP_ABORT <= 0x00000000]
[22:08:57.257]      __var DP_CTRL_STAT      = 0x4;
[22:08:57.257]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:08:57.257]      __var DP_SELECT         = 0x8;
[22:08:57.257]        // -> [DP_SELECT <= 0x00000008]
[22:08:57.257]      __var powered_down      = 0;
[22:08:57.257]        // -> [powered_down <= 0x00000000]
[22:08:57.257]      WriteDP(DP_SELECT, 0x00000000);
[22:08:57.261]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:08:57.261]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:08:57.265]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:08:57.265]        // -> [powered_down <= 0x00000001]
[22:08:57.265]    </block>
[22:08:57.265]    <control if="powered_down" while="" timeout="0" info="">
[22:08:57.265]      // if-block "powered_down"
[22:08:57.265]        // =>  TRUE
[22:08:57.265]      <block atomic="false" info="">
[22:08:57.265]        Message(0, "Debug/System power-up request sent");
[22:08:57.269]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:08:57.269]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:08:57.269]      </block>
[22:08:57.269]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:08:57.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:08:57.269]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:08:57.269]        // while-condition  =>  FALSE
[22:08:57.269]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:08:57.269]      </control>
[22:08:57.269]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:08:57.269]        // if-block "(__protocol & 0xFFFF) == 1"
[22:08:57.269]          // =>  FALSE
[22:08:57.273]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:08:57.273]      </control>
[22:08:57.273]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:08:57.273]        // if-block "(__protocol & 0xFFFF) == 2"
[22:08:57.273]          // =>  TRUE
[22:08:57.273]        <block atomic="false" info="">
[22:08:57.273]          Message(0, "executing SWD power up");
[22:08:57.275]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:08:57.277]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:08:57.277]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:08:57.277]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:08:57.277]        </block>
[22:08:57.277]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:08:57.277]      </control>
[22:08:57.277]      // end if-block "powered_down"
[22:08:57.277]    </control>
[22:08:57.277]    <block atomic="false" info="">
[22:08:57.277]      __var DEBUG_PORT_VAL    = 0;
[22:08:57.277]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:08:57.277]      __var ACCESS_POINT_VAL  = 0;
[22:08:57.277]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:08:57.277]      __ap = 1; 
[22:08:57.277]        // -> [__ap <= 0x00000001]
[22:08:57.277]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:08:57.283]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:08:57.283]      __ap = 4;
[22:08:57.283]        // -> [__ap <= 0x00000004]
[22:08:57.283]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:57.289]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:08:57.289]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:08:57.289]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:57.289]    </block>
[22:08:57.289]    <block atomic="false" info="">
[22:08:57.289]      __var nReset = 0x80;
[22:08:57.289]        // -> [nReset <= 0x00000080]
[22:08:57.289]      __var canReadPins = 0;
[22:08:57.289]        // -> [canReadPins <= 0x00000000]
[22:08:57.289]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:08:57.293]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:08:57.293]        // -> [canReadPins <= 0x00000001]
[22:08:57.293]    </block>
[22:08:57.293]    <control if="" while="1" timeout="200" info="">
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.293]      // while-condition  =>  TRUE
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.293]      // while-condition  =>  TRUE
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.293]      // while-condition  =>  TRUE
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.293]      // while-condition  =>  TRUE
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.293]      // while-condition  =>  TRUE
[22:08:57.293]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.295]      // while "1"  (timeout="200")
[22:08:57.295]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.297]      // while "1"  (timeout="200")
[22:08:57.297]      // while-condition  =>  TRUE
[22:08:57.301]      // while "1"  (timeout="200")
[22:08:57.301]      // while  =>  TIMEOUT
[22:08:57.301]      // end while "1"
[22:08:57.301]    </control>
[22:08:57.301]    <control if="canReadPins" while="" timeout="0" info="">
[22:08:57.301]      // if-block "canReadPins"
[22:08:57.301]        // =>  TRUE
[22:08:57.301]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:08:57.301]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:08:57.301]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:08:57.301]        // while-condition  =>  FALSE
[22:08:57.301]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:08:57.301]      </control>
[22:08:57.301]      // end if-block "canReadPins"
[22:08:57.301]    </control>
[22:08:57.301]    <control if="!canReadPins" while="" timeout="0" info="">
[22:08:57.301]      // if-block "!canReadPins"
[22:08:57.301]        // =>  FALSE
[22:08:57.301]      // skip if-block "!canReadPins"
[22:08:57.301]    </control>
[22:08:57.301]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:08:57.301]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:57.301]        // =>  TRUE
[22:08:57.301]      <block atomic="false" info="">
[22:08:57.305]        WriteAP(0x00, 0x190008);
[22:08:57.305]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:57.305]        WriteAP(0xF0, 0x01);
[22:08:57.309]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:08:57.309]      </block>
[22:08:57.309]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:08:57.309]    </control>
[22:08:57.309]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:08:57.309]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:57.309]        // =>  FALSE
[22:08:57.309]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:08:57.309]    </control>
[22:08:57.309]    <block atomic="false" info="">
[22:08:57.309]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:08:57.313]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:08:57.313]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:08:57.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:08:57.315]      __ap = 0; //lets make sure we reset the access point selection
[22:08:57.315]        // -> [__ap <= 0x00000000]
[22:08:57.315]    </block>
[22:08:57.315]  </sequence>
[22:08:57.315]  
[22:08:57.337]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:08:57.337]  
[22:08:57.337]  <debugvars>
[22:08:57.341]    // Pre-defined
[22:08:57.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:08:57.341]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:08:57.341]    __dp=0x00000000
[22:08:57.341]    __ap=0x00000000
[22:08:57.341]    __traceout=0x00000000      (Trace Disabled)
[22:08:57.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:08:57.341]    __FlashAddr=0x00000000
[22:08:57.341]    __FlashLen=0x00000000
[22:08:57.341]    __FlashArg=0x00000000
[22:08:57.341]    __FlashOp=0x00000000
[22:08:57.341]    __Result=0x00000000
[22:08:57.341]  </debugvars>
[22:08:57.341]  
[22:08:57.341]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:08:57.341]    <block atomic="false" info="">
[22:08:57.341]      __var deviceID = 0;
[22:08:57.341]        // -> [deviceID <= 0x00000000]
[22:08:57.341]      __var version = 0;
[22:08:57.341]        // -> [version <= 0x00000000]
[22:08:57.341]      __var partNum = 0;
[22:08:57.341]        // -> [partNum <= 0x00000000]
[22:08:57.341]      __var manuf = 0;
[22:08:57.341]        // -> [manuf <= 0x00000000]
[22:08:57.341]      __var isMSPM0G1X0X_G3X0X = 0;
[22:08:57.341]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:08:57.341]      __var isProduction = 0;
[22:08:57.341]        // -> [isProduction <= 0x00000000]
[22:08:57.341]      __var continueId = 0;
[22:08:57.341]        // -> [continueId <= 0x00000000]
[22:08:57.341]      deviceID =   Read32(0x41C40004);
[22:08:57.350]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:08:57.350]        // -> [deviceID <= 0x2BB8802F]
[22:08:57.350]      version = deviceID >> 28;
[22:08:57.350]        // -> [version <= 0x00000002]
[22:08:57.350]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:08:57.350]        // -> [partNum <= 0x0000BB88]
[22:08:57.350]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:08:57.350]        // -> [manuf <= 0x00000017]
[22:08:57.350]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:08:57.350]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:08:57.350]      isProduction = (version > 0);
[22:08:57.350]        // -> [isProduction <= 0x00000001]
[22:08:57.350]    </block>
[22:08:57.350]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:08:57.350]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:08:57.350]        // =>  FALSE
[22:08:57.350]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:08:57.350]    </control>
[22:08:57.350]    <control if="continueId == 4" while="" timeout="0" info="">
[22:08:57.350]      // if-block "continueId == 4"
[22:08:57.350]        // =>  FALSE
[22:08:57.350]      // skip if-block "continueId == 4"
[22:08:57.350]    </control>
[22:08:57.350]    <control if="!isProduction" while="" timeout="0" info="">
[22:08:57.350]      // if-block "!isProduction"
[22:08:57.350]        // =>  FALSE
[22:08:57.350]      // skip if-block "!isProduction"
[22:08:57.350]    </control>
[22:08:57.350]  </sequence>
[22:08:57.350]  
[22:09:28.421]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:09:28.421]  
[22:09:28.430]  <debugvars>
[22:09:28.430]    // Pre-defined
[22:09:28.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:28.431]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:28.431]    __dp=0x00000000
[22:09:28.431]    __ap=0x00000000
[22:09:28.431]    __traceout=0x00000000      (Trace Disabled)
[22:09:28.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:28.431]    __FlashAddr=0x00000000
[22:09:28.431]    __FlashLen=0x00000000
[22:09:28.431]    __FlashArg=0x00000000
[22:09:28.431]    __FlashOp=0x00000000
[22:09:28.431]    __Result=0x00000000
[22:09:28.432]  </debugvars>
[22:09:28.432]  
[22:09:28.432]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:09:28.432]    <block atomic="false" info="">
[22:09:28.432]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:09:28.432]        // -> [isSWJ <= 0x00000001]
[22:09:28.432]      __var hasDormant = __protocol & 0x00020000;
[22:09:28.432]        // -> [hasDormant <= 0x00000000]
[22:09:28.432]      __var protType   = __protocol & 0x0000FFFF;
[22:09:28.432]        // -> [protType <= 0x00000002]
[22:09:28.432]    </block>
[22:09:28.432]    <control if="protType == 1" while="" timeout="0" info="">
[22:09:28.433]      // if-block "protType == 1"
[22:09:28.433]        // =>  FALSE
[22:09:28.433]      // skip if-block "protType == 1"
[22:09:28.433]    </control>
[22:09:28.433]    <control if="protType == 2" while="" timeout="0" info="">
[22:09:28.433]      // if-block "protType == 2"
[22:09:28.433]        // =>  TRUE
[22:09:28.433]      <control if="isSWJ" while="" timeout="0" info="">
[22:09:28.433]        // if-block "isSWJ"
[22:09:28.433]          // =>  TRUE
[22:09:28.434]        <control if="hasDormant" while="" timeout="0" info="">
[22:09:28.434]          // if-block "hasDormant"
[22:09:28.434]            // =>  FALSE
[22:09:28.434]          // skip if-block "hasDormant"
[22:09:28.434]        </control>
[22:09:28.434]        <control if="!hasDormant" while="" timeout="0" info="">
[22:09:28.435]          // if-block "!hasDormant"
[22:09:28.435]            // =>  TRUE
[22:09:28.435]          <block atomic="false" info="">
[22:09:28.435]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:09:28.436]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:28.436]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:09:28.439]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:09:28.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:09:28.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:28.441]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:09:28.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:09:28.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:09:28.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:09:28.445]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:09:28.446]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:09:28.446]          </block>
[22:09:28.446]          // end if-block "!hasDormant"
[22:09:28.446]        </control>
[22:09:28.446]        // end if-block "isSWJ"
[22:09:28.446]      </control>
[22:09:28.447]      <control if="!isSWJ" while="" timeout="0" info="">
[22:09:28.447]        // if-block "!isSWJ"
[22:09:28.447]          // =>  FALSE
[22:09:28.447]        // skip if-block "!isSWJ"
[22:09:28.447]      </control>
[22:09:28.447]      <block atomic="false" info="">
[22:09:28.447]        ReadDP(0x0);
[22:09:28.450]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:09:28.450]      </block>
[22:09:28.450]      // end if-block "protType == 2"
[22:09:28.450]    </control>
[22:09:28.450]  </sequence>
[22:09:28.450]  
[22:09:28.454]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:09:28.454]  
[22:09:28.454]  <debugvars>
[22:09:28.454]    // Pre-defined
[22:09:28.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:28.454]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:28.455]    __dp=0x00000000
[22:09:28.455]    __ap=0x00000000
[22:09:28.455]    __traceout=0x00000000      (Trace Disabled)
[22:09:28.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:28.455]    __FlashAddr=0x00000000
[22:09:28.455]    __FlashLen=0x00000000
[22:09:28.455]    __FlashArg=0x00000000
[22:09:28.455]    __FlashOp=0x00000000
[22:09:28.455]    __Result=0x00000000
[22:09:28.455]  </debugvars>
[22:09:28.455]  
[22:09:28.456]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:09:28.456]    <block atomic="false" info="">
[22:09:28.456]      __var SW_DP_ABORT       = 0x0;
[22:09:28.456]        // -> [SW_DP_ABORT <= 0x00000000]
[22:09:28.456]      __var DP_CTRL_STAT      = 0x4;
[22:09:28.456]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:09:28.456]      __var DP_SELECT         = 0x8;
[22:09:28.456]        // -> [DP_SELECT <= 0x00000008]
[22:09:28.456]      __var powered_down      = 0;
[22:09:28.456]        // -> [powered_down <= 0x00000000]
[22:09:28.456]      WriteDP(DP_SELECT, 0x00000000);
[22:09:28.457]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:09:28.458]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:09:28.459]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:09:28.459]        // -> [powered_down <= 0x00000001]
[22:09:28.459]    </block>
[22:09:28.459]    <control if="powered_down" while="" timeout="0" info="">
[22:09:28.459]      // if-block "powered_down"
[22:09:28.459]        // =>  TRUE
[22:09:28.459]      <block atomic="false" info="">
[22:09:28.459]        Message(0, "Debug/System power-up request sent");
[22:09:28.463]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:09:28.467]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:09:28.467]      </block>
[22:09:28.467]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:09:28.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:09:28.471]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:09:28.471]        // while-condition  =>  FALSE
[22:09:28.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:09:28.471]      </control>
[22:09:28.471]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:09:28.471]        // if-block "(__protocol & 0xFFFF) == 1"
[22:09:28.471]          // =>  FALSE
[22:09:28.471]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:09:28.471]      </control>
[22:09:28.471]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:09:28.471]        // if-block "(__protocol & 0xFFFF) == 2"
[22:09:28.471]          // =>  TRUE
[22:09:28.471]        <block atomic="false" info="">
[22:09:28.471]          Message(0, "executing SWD power up");
[22:09:28.474]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:09:28.474]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:09:28.474]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:09:28.478]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:09:28.478]        </block>
[22:09:28.478]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:09:28.478]      </control>
[22:09:28.478]      // end if-block "powered_down"
[22:09:28.478]    </control>
[22:09:28.478]    <block atomic="false" info="">
[22:09:28.478]      __var DEBUG_PORT_VAL    = 0;
[22:09:28.478]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:09:28.478]      __var ACCESS_POINT_VAL  = 0;
[22:09:28.478]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:09:28.478]      __ap = 1; 
[22:09:28.480]        // -> [__ap <= 0x00000001]
[22:09:28.480]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:09:28.482]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:09:28.485]      __ap = 4;
[22:09:28.485]        // -> [__ap <= 0x00000004]
[22:09:28.485]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:28.485]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:09:28.489]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:09:28.489]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:28.491]    </block>
[22:09:28.491]    <block atomic="false" info="">
[22:09:28.491]      __var nReset = 0x80;
[22:09:28.491]        // -> [nReset <= 0x00000080]
[22:09:28.491]      __var canReadPins = 0;
[22:09:28.491]        // -> [canReadPins <= 0x00000000]
[22:09:28.491]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:09:28.496]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:09:28.498]        // -> [canReadPins <= 0x00000001]
[22:09:28.498]    </block>
[22:09:28.498]    <control if="" while="1" timeout="200" info="">
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.498]      // while "1"  (timeout="200")
[22:09:28.498]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.501]      // while "1"  (timeout="200")
[22:09:28.501]      // while-condition  =>  TRUE
[22:09:28.505]      // while "1"  (timeout="200")
[22:09:28.505]      // while  =>  TIMEOUT
[22:09:28.505]      // end while "1"
[22:09:28.505]    </control>
[22:09:28.505]    <control if="canReadPins" while="" timeout="0" info="">
[22:09:28.505]      // if-block "canReadPins"
[22:09:28.505]        // =>  TRUE
[22:09:28.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:09:28.505]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:09:28.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:09:28.505]        // while-condition  =>  FALSE
[22:09:28.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:09:28.505]      </control>
[22:09:28.505]      // end if-block "canReadPins"
[22:09:28.505]    </control>
[22:09:28.505]    <control if="!canReadPins" while="" timeout="0" info="">
[22:09:28.505]      // if-block "!canReadPins"
[22:09:28.505]        // =>  FALSE
[22:09:28.505]      // skip if-block "!canReadPins"
[22:09:28.505]    </control>
[22:09:28.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:09:28.509]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:28.509]        // =>  TRUE
[22:09:28.509]      <block atomic="false" info="">
[22:09:28.509]        WriteAP(0x00, 0x190008);
[22:09:28.510]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:28.510]        WriteAP(0xF0, 0x01);
[22:09:28.513]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:09:28.513]      </block>
[22:09:28.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:09:28.513]    </control>
[22:09:28.513]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:09:28.513]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:28.513]        // =>  FALSE
[22:09:28.513]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:09:28.513]    </control>
[22:09:28.513]    <block atomic="false" info="">
[22:09:28.513]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:09:28.517]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:09:28.517]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:09:28.517]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:09:28.517]      __ap = 0; //lets make sure we reset the access point selection
[22:09:28.517]        // -> [__ap <= 0x00000000]
[22:09:28.517]    </block>
[22:09:28.517]  </sequence>
[22:09:28.521]  
[22:09:28.545]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:09:28.545]  
[22:09:28.545]  <debugvars>
[22:09:28.545]    // Pre-defined
[22:09:28.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:09:28.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:09:28.549]    __dp=0x00000000
[22:09:28.549]    __ap=0x00000000
[22:09:28.549]    __traceout=0x00000000      (Trace Disabled)
[22:09:28.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:09:28.549]    __FlashAddr=0x00000000
[22:09:28.549]    __FlashLen=0x00000000
[22:09:28.549]    __FlashArg=0x00000000
[22:09:28.549]    __FlashOp=0x00000000
[22:09:28.549]    __Result=0x00000000
[22:09:28.549]  </debugvars>
[22:09:28.549]  
[22:09:28.549]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:09:28.549]    <block atomic="false" info="">
[22:09:28.549]      __var deviceID = 0;
[22:09:28.549]        // -> [deviceID <= 0x00000000]
[22:09:28.549]      __var version = 0;
[22:09:28.549]        // -> [version <= 0x00000000]
[22:09:28.549]      __var partNum = 0;
[22:09:28.551]        // -> [partNum <= 0x00000000]
[22:09:28.551]      __var manuf = 0;
[22:09:28.551]        // -> [manuf <= 0x00000000]
[22:09:28.551]      __var isMSPM0G1X0X_G3X0X = 0;
[22:09:28.551]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:09:28.551]      __var isProduction = 0;
[22:09:28.551]        // -> [isProduction <= 0x00000000]
[22:09:28.551]      __var continueId = 0;
[22:09:28.551]        // -> [continueId <= 0x00000000]
[22:09:28.552]      deviceID =   Read32(0x41C40004);
[22:09:28.561]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:09:28.561]        // -> [deviceID <= 0x2BB8802F]
[22:09:28.561]      version = deviceID >> 28;
[22:09:28.561]        // -> [version <= 0x00000002]
[22:09:28.561]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:09:28.561]        // -> [partNum <= 0x0000BB88]
[22:09:28.561]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:09:28.561]        // -> [manuf <= 0x00000017]
[22:09:28.561]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:09:28.561]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:09:28.561]      isProduction = (version > 0);
[22:09:28.561]        // -> [isProduction <= 0x00000001]
[22:09:28.561]    </block>
[22:09:28.561]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:09:28.561]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:09:28.561]        // =>  FALSE
[22:09:28.561]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:09:28.561]    </control>
[22:09:28.561]    <control if="continueId == 4" while="" timeout="0" info="">
[22:09:28.561]      // if-block "continueId == 4"
[22:09:28.561]        // =>  FALSE
[22:09:28.561]      // skip if-block "continueId == 4"
[22:09:28.561]    </control>
[22:09:28.561]    <control if="!isProduction" while="" timeout="0" info="">
[22:09:28.561]      // if-block "!isProduction"
[22:09:28.561]        // =>  FALSE
[22:09:28.561]      // skip if-block "!isProduction"
[22:09:28.565]    </control>
[22:09:28.565]  </sequence>
[22:09:28.565]  
[22:10:40.916]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:10:40.916]  
[22:10:40.927]  <debugvars>
[22:10:40.927]    // Pre-defined
[22:10:40.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:10:40.927]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:10:40.927]    __dp=0x00000000
[22:10:40.928]    __ap=0x00000000
[22:10:40.928]    __traceout=0x00000000      (Trace Disabled)
[22:10:40.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:10:40.928]    __FlashAddr=0x00000000
[22:10:40.928]    __FlashLen=0x00000000
[22:10:40.928]    __FlashArg=0x00000000
[22:10:40.928]    __FlashOp=0x00000000
[22:10:40.928]    __Result=0x00000000
[22:10:40.928]  </debugvars>
[22:10:40.928]  
[22:10:40.928]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:10:40.929]    <block atomic="false" info="">
[22:10:40.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:10:40.929]        // -> [isSWJ <= 0x00000001]
[22:10:40.929]      __var hasDormant = __protocol & 0x00020000;
[22:10:40.929]        // -> [hasDormant <= 0x00000000]
[22:10:40.929]      __var protType   = __protocol & 0x0000FFFF;
[22:10:40.929]        // -> [protType <= 0x00000002]
[22:10:40.929]    </block>
[22:10:40.929]    <control if="protType == 1" while="" timeout="0" info="">
[22:10:40.929]      // if-block "protType == 1"
[22:10:40.930]        // =>  FALSE
[22:10:40.930]      // skip if-block "protType == 1"
[22:10:40.930]    </control>
[22:10:40.930]    <control if="protType == 2" while="" timeout="0" info="">
[22:10:40.930]      // if-block "protType == 2"
[22:10:40.930]        // =>  TRUE
[22:10:40.930]      <control if="isSWJ" while="" timeout="0" info="">
[22:10:40.930]        // if-block "isSWJ"
[22:10:40.930]          // =>  TRUE
[22:10:40.930]        <control if="hasDormant" while="" timeout="0" info="">
[22:10:40.931]          // if-block "hasDormant"
[22:10:40.931]            // =>  FALSE
[22:10:40.931]          // skip if-block "hasDormant"
[22:10:40.931]        </control>
[22:10:40.931]        <control if="!hasDormant" while="" timeout="0" info="">
[22:10:40.931]          // if-block "!hasDormant"
[22:10:40.931]            // =>  TRUE
[22:10:40.931]          <block atomic="false" info="">
[22:10:40.931]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:10:40.933]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:10:40.933]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:10:40.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:10:40.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:10:40.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:10:40.936]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:10:40.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:10:40.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:10:40.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:10:40.940]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:10:40.941]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:10:40.942]          </block>
[22:10:40.942]          // end if-block "!hasDormant"
[22:10:40.942]        </control>
[22:10:40.942]        // end if-block "isSWJ"
[22:10:40.942]      </control>
[22:10:40.942]      <control if="!isSWJ" while="" timeout="0" info="">
[22:10:40.942]        // if-block "!isSWJ"
[22:10:40.942]          // =>  FALSE
[22:10:40.942]        // skip if-block "!isSWJ"
[22:10:40.942]      </control>
[22:10:40.943]      <block atomic="false" info="">
[22:10:40.943]        ReadDP(0x0);
[22:10:40.949]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:10:40.949]      </block>
[22:10:40.949]      // end if-block "protType == 2"
[22:10:40.949]    </control>
[22:10:40.950]  </sequence>
[22:10:40.950]  
[22:10:40.954]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:10:40.954]  
[22:10:40.954]  <debugvars>
[22:10:40.954]    // Pre-defined
[22:10:40.954]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:10:40.954]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:10:40.954]    __dp=0x00000000
[22:10:40.954]    __ap=0x00000000
[22:10:40.954]    __traceout=0x00000000      (Trace Disabled)
[22:10:40.954]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:10:40.954]    __FlashAddr=0x00000000
[22:10:40.954]    __FlashLen=0x00000000
[22:10:40.954]    __FlashArg=0x00000000
[22:10:40.954]    __FlashOp=0x00000000
[22:10:40.954]    __Result=0x00000000
[22:10:40.954]  </debugvars>
[22:10:40.954]  
[22:10:40.954]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:10:40.954]    <block atomic="false" info="">
[22:10:40.954]      __var SW_DP_ABORT       = 0x0;
[22:10:40.954]        // -> [SW_DP_ABORT <= 0x00000000]
[22:10:40.954]      __var DP_CTRL_STAT      = 0x4;
[22:10:40.954]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:10:40.954]      __var DP_SELECT         = 0x8;
[22:10:40.956]        // -> [DP_SELECT <= 0x00000008]
[22:10:40.956]      __var powered_down      = 0;
[22:10:40.956]        // -> [powered_down <= 0x00000000]
[22:10:40.956]      WriteDP(DP_SELECT, 0x00000000);
[22:10:40.956]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:10:40.956]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:10:40.956]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:10:40.960]        // -> [powered_down <= 0x00000001]
[22:10:40.960]    </block>
[22:10:40.960]    <control if="powered_down" while="" timeout="0" info="">
[22:10:40.960]      // if-block "powered_down"
[22:10:40.960]        // =>  TRUE
[22:10:40.960]      <block atomic="false" info="">
[22:10:40.960]        Message(0, "Debug/System power-up request sent");
[22:10:40.965]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:10:40.965]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:10:40.965]      </block>
[22:10:40.965]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:10:40.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:10:40.969]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:10:40.969]        // while-condition  =>  FALSE
[22:10:40.969]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:10:40.969]      </control>
[22:10:40.969]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:10:40.969]        // if-block "(__protocol & 0xFFFF) == 1"
[22:10:40.969]          // =>  FALSE
[22:10:40.969]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:10:40.969]      </control>
[22:10:40.969]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:10:40.969]        // if-block "(__protocol & 0xFFFF) == 2"
[22:10:40.969]          // =>  TRUE
[22:10:40.969]        <block atomic="false" info="">
[22:10:40.969]          Message(0, "executing SWD power up");
[22:10:40.969]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:10:40.976]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:10:40.976]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:10:40.976]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:10:40.976]        </block>
[22:10:40.980]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:10:40.980]      </control>
[22:10:40.980]      // end if-block "powered_down"
[22:10:40.980]    </control>
[22:10:40.980]    <block atomic="false" info="">
[22:10:40.980]      __var DEBUG_PORT_VAL    = 0;
[22:10:40.980]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:10:40.980]      __var ACCESS_POINT_VAL  = 0;
[22:10:40.980]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:10:40.981]      __ap = 1; 
[22:10:40.981]        // -> [__ap <= 0x00000001]
[22:10:40.981]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:10:40.984]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:10:40.986]      __ap = 4;
[22:10:40.986]        // -> [__ap <= 0x00000004]
[22:10:40.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:10:40.989]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:10:40.989]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:10:40.989]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:10:40.995]    </block>
[22:10:40.995]    <block atomic="false" info="">
[22:10:40.996]      __var nReset = 0x80;
[22:10:40.996]        // -> [nReset <= 0x00000080]
[22:10:40.996]      __var canReadPins = 0;
[22:10:40.997]        // -> [canReadPins <= 0x00000000]
[22:10:40.997]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:10:40.999]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:10:40.999]        // -> [canReadPins <= 0x00000001]
[22:10:40.999]    </block>
[22:10:40.999]    <control if="" while="1" timeout="200" info="">
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:40.999]      // while "1"  (timeout="200")
[22:10:40.999]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.001]      // while "1"  (timeout="200")
[22:10:41.001]      // while-condition  =>  TRUE
[22:10:41.005]      // while "1"  (timeout="200")
[22:10:41.005]      // while  =>  TIMEOUT
[22:10:41.005]      // end while "1"
[22:10:41.005]    </control>
[22:10:41.005]    <control if="canReadPins" while="" timeout="0" info="">
[22:10:41.005]      // if-block "canReadPins"
[22:10:41.005]        // =>  TRUE
[22:10:41.005]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:10:41.005]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:10:41.005]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:10:41.005]        // while-condition  =>  FALSE
[22:10:41.005]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:10:41.005]      </control>
[22:10:41.005]      // end if-block "canReadPins"
[22:10:41.005]    </control>
[22:10:41.005]    <control if="!canReadPins" while="" timeout="0" info="">
[22:10:41.005]      // if-block "!canReadPins"
[22:10:41.005]        // =>  FALSE
[22:10:41.005]      // skip if-block "!canReadPins"
[22:10:41.005]    </control>
[22:10:41.005]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:10:41.005]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:10:41.005]        // =>  TRUE
[22:10:41.005]      <block atomic="false" info="">
[22:10:41.005]        WriteAP(0x00, 0x190008);
[22:10:41.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:10:41.009]        WriteAP(0xF0, 0x01);
[22:10:41.013]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:10:41.013]      </block>
[22:10:41.013]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:10:41.013]    </control>
[22:10:41.013]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:10:41.013]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:10:41.013]        // =>  FALSE
[22:10:41.013]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:10:41.013]    </control>
[22:10:41.013]    <block atomic="false" info="">
[22:10:41.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:10:41.017]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:10:41.017]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:10:41.017]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:10:41.018]      __ap = 0; //lets make sure we reset the access point selection
[22:10:41.018]        // -> [__ap <= 0x00000000]
[22:10:41.018]    </block>
[22:10:41.018]  </sequence>
[22:10:41.019]  
[22:10:41.038]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:10:41.038]  
[22:10:41.038]  <debugvars>
[22:10:41.038]    // Pre-defined
[22:10:41.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:10:41.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:10:41.038]    __dp=0x00000000
[22:10:41.038]    __ap=0x00000000
[22:10:41.038]    __traceout=0x00000000      (Trace Disabled)
[22:10:41.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:10:41.038]    __FlashAddr=0x00000000
[22:10:41.038]    __FlashLen=0x00000000
[22:10:41.038]    __FlashArg=0x00000000
[22:10:41.038]    __FlashOp=0x00000000
[22:10:41.039]    __Result=0x00000000
[22:10:41.039]  </debugvars>
[22:10:41.039]  
[22:10:41.039]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:10:41.039]    <block atomic="false" info="">
[22:10:41.039]      __var deviceID = 0;
[22:10:41.039]        // -> [deviceID <= 0x00000000]
[22:10:41.039]      __var version = 0;
[22:10:41.039]        // -> [version <= 0x00000000]
[22:10:41.039]      __var partNum = 0;
[22:10:41.039]        // -> [partNum <= 0x00000000]
[22:10:41.039]      __var manuf = 0;
[22:10:41.039]        // -> [manuf <= 0x00000000]
[22:10:41.039]      __var isMSPM0G1X0X_G3X0X = 0;
[22:10:41.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:10:41.041]      __var isProduction = 0;
[22:10:41.041]        // -> [isProduction <= 0x00000000]
[22:10:41.041]      __var continueId = 0;
[22:10:41.041]        // -> [continueId <= 0x00000000]
[22:10:41.041]      deviceID =   Read32(0x41C40004);
[22:10:41.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:10:41.045]        // -> [deviceID <= 0x2BB8802F]
[22:10:41.045]      version = deviceID >> 28;
[22:10:41.045]        // -> [version <= 0x00000002]
[22:10:41.045]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:10:41.045]        // -> [partNum <= 0x0000BB88]
[22:10:41.045]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:10:41.045]        // -> [manuf <= 0x00000017]
[22:10:41.045]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:10:41.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:10:41.045]      isProduction = (version > 0);
[22:10:41.045]        // -> [isProduction <= 0x00000001]
[22:10:41.045]    </block>
[22:10:41.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:10:41.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:10:41.045]        // =>  FALSE
[22:10:41.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:10:41.045]    </control>
[22:10:41.045]    <control if="continueId == 4" while="" timeout="0" info="">
[22:10:41.045]      // if-block "continueId == 4"
[22:10:41.045]        // =>  FALSE
[22:10:41.045]      // skip if-block "continueId == 4"
[22:10:41.045]    </control>
[22:10:41.045]    <control if="!isProduction" while="" timeout="0" info="">
[22:10:41.045]      // if-block "!isProduction"
[22:10:41.045]        // =>  FALSE
[22:10:41.045]      // skip if-block "!isProduction"
[22:10:41.045]    </control>
[22:10:41.045]  </sequence>
[22:10:41.045]  
[22:11:19.122]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:11:19.122]  
[22:11:19.131]  <debugvars>
[22:11:19.131]    // Pre-defined
[22:11:19.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:19.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:19.131]    __dp=0x00000000
[22:11:19.131]    __ap=0x00000000
[22:11:19.131]    __traceout=0x00000000      (Trace Disabled)
[22:11:19.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:19.131]    __FlashAddr=0x00000000
[22:11:19.131]    __FlashLen=0x00000000
[22:11:19.131]    __FlashArg=0x00000000
[22:11:19.131]    __FlashOp=0x00000000
[22:11:19.131]    __Result=0x00000000
[22:11:19.131]  </debugvars>
[22:11:19.131]  
[22:11:19.131]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:11:19.132]    <block atomic="false" info="">
[22:11:19.132]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:11:19.132]        // -> [isSWJ <= 0x00000001]
[22:11:19.132]      __var hasDormant = __protocol & 0x00020000;
[22:11:19.132]        // -> [hasDormant <= 0x00000000]
[22:11:19.132]      __var protType   = __protocol & 0x0000FFFF;
[22:11:19.132]        // -> [protType <= 0x00000002]
[22:11:19.132]    </block>
[22:11:19.132]    <control if="protType == 1" while="" timeout="0" info="">
[22:11:19.132]      // if-block "protType == 1"
[22:11:19.132]        // =>  FALSE
[22:11:19.132]      // skip if-block "protType == 1"
[22:11:19.132]    </control>
[22:11:19.132]    <control if="protType == 2" while="" timeout="0" info="">
[22:11:19.132]      // if-block "protType == 2"
[22:11:19.132]        // =>  TRUE
[22:11:19.132]      <control if="isSWJ" while="" timeout="0" info="">
[22:11:19.132]        // if-block "isSWJ"
[22:11:19.132]          // =>  TRUE
[22:11:19.132]        <control if="hasDormant" while="" timeout="0" info="">
[22:11:19.132]          // if-block "hasDormant"
[22:11:19.132]            // =>  FALSE
[22:11:19.132]          // skip if-block "hasDormant"
[22:11:19.132]        </control>
[22:11:19.132]        <control if="!hasDormant" while="" timeout="0" info="">
[22:11:19.132]          // if-block "!hasDormant"
[22:11:19.132]            // =>  TRUE
[22:11:19.135]          <block atomic="false" info="">
[22:11:19.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:11:19.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:19.136]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:11:19.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:11:19.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:11:19.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:19.139]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:11:19.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:11:19.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:11:19.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:11:19.145]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:11:19.148]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:11:19.148]          </block>
[22:11:19.148]          // end if-block "!hasDormant"
[22:11:19.148]        </control>
[22:11:19.148]        // end if-block "isSWJ"
[22:11:19.148]      </control>
[22:11:19.148]      <control if="!isSWJ" while="" timeout="0" info="">
[22:11:19.148]        // if-block "!isSWJ"
[22:11:19.148]          // =>  FALSE
[22:11:19.148]        // skip if-block "!isSWJ"
[22:11:19.148]      </control>
[22:11:19.148]      <block atomic="false" info="">
[22:11:19.148]        ReadDP(0x0);
[22:11:19.152]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:11:19.152]      </block>
[22:11:19.152]      // end if-block "protType == 2"
[22:11:19.152]    </control>
[22:11:19.152]  </sequence>
[22:11:19.152]  
[22:11:19.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:11:19.157]  
[22:11:19.157]  <debugvars>
[22:11:19.157]    // Pre-defined
[22:11:19.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:19.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:19.157]    __dp=0x00000000
[22:11:19.157]    __ap=0x00000000
[22:11:19.159]    __traceout=0x00000000      (Trace Disabled)
[22:11:19.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:19.159]    __FlashAddr=0x00000000
[22:11:19.159]    __FlashLen=0x00000000
[22:11:19.159]    __FlashArg=0x00000000
[22:11:19.159]    __FlashOp=0x00000000
[22:11:19.159]    __Result=0x00000000
[22:11:19.159]  </debugvars>
[22:11:19.159]  
[22:11:19.159]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:11:19.159]    <block atomic="false" info="">
[22:11:19.159]      __var SW_DP_ABORT       = 0x0;
[22:11:19.159]        // -> [SW_DP_ABORT <= 0x00000000]
[22:11:19.160]      __var DP_CTRL_STAT      = 0x4;
[22:11:19.160]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:11:19.160]      __var DP_SELECT         = 0x8;
[22:11:19.160]        // -> [DP_SELECT <= 0x00000008]
[22:11:19.160]      __var powered_down      = 0;
[22:11:19.160]        // -> [powered_down <= 0x00000000]
[22:11:19.160]      WriteDP(DP_SELECT, 0x00000000);
[22:11:19.160]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:11:19.160]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:11:19.163]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:11:19.163]        // -> [powered_down <= 0x00000001]
[22:11:19.163]    </block>
[22:11:19.163]    <control if="powered_down" while="" timeout="0" info="">
[22:11:19.163]      // if-block "powered_down"
[22:11:19.163]        // =>  TRUE
[22:11:19.163]      <block atomic="false" info="">
[22:11:19.163]        Message(0, "Debug/System power-up request sent");
[22:11:19.167]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:11:19.173]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:11:19.173]      </block>
[22:11:19.173]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:11:19.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:11:19.175]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:11:19.175]        // while-condition  =>  FALSE
[22:11:19.177]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:11:19.177]      </control>
[22:11:19.177]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:11:19.177]        // if-block "(__protocol & 0xFFFF) == 1"
[22:11:19.177]          // =>  FALSE
[22:11:19.177]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:11:19.177]      </control>
[22:11:19.177]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:11:19.177]        // if-block "(__protocol & 0xFFFF) == 2"
[22:11:19.177]          // =>  TRUE
[22:11:19.178]        <block atomic="false" info="">
[22:11:19.178]          Message(0, "executing SWD power up");
[22:11:19.178]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:11:19.180]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:11:19.180]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:11:19.180]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:11:19.180]        </block>
[22:11:19.180]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:11:19.180]      </control>
[22:11:19.180]      // end if-block "powered_down"
[22:11:19.180]    </control>
[22:11:19.180]    <block atomic="false" info="">
[22:11:19.180]      __var DEBUG_PORT_VAL    = 0;
[22:11:19.180]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:11:19.180]      __var ACCESS_POINT_VAL  = 0;
[22:11:19.180]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:11:19.180]      __ap = 1; 
[22:11:19.180]        // -> [__ap <= 0x00000001]
[22:11:19.184]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:11:19.188]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:11:19.188]      __ap = 4;
[22:11:19.188]        // -> [__ap <= 0x00000004]
[22:11:19.188]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:11:19.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:11:19.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:11:19.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:11:19.197]    </block>
[22:11:19.197]    <block atomic="false" info="">
[22:11:19.197]      __var nReset = 0x80;
[22:11:19.197]        // -> [nReset <= 0x00000080]
[22:11:19.197]      __var canReadPins = 0;
[22:11:19.197]        // -> [canReadPins <= 0x00000000]
[22:11:19.197]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:11:19.197]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:11:19.201]        // -> [canReadPins <= 0x00000001]
[22:11:19.201]    </block>
[22:11:19.201]    <control if="" while="1" timeout="200" info="">
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.201]      // while-condition  =>  TRUE
[22:11:19.201]      // while "1"  (timeout="200")
[22:11:19.204]      // while-condition  =>  TRUE
[22:11:19.204]      // while "1"  (timeout="200")
[22:11:19.204]      // while-condition  =>  TRUE
[22:11:19.204]      // while "1"  (timeout="200")
[22:11:19.204]      // while-condition  =>  TRUE
[22:11:19.204]      // while "1"  (timeout="200")
[22:11:19.204]      // while-condition  =>  TRUE
[22:11:19.204]      // while "1"  (timeout="200")
[22:11:19.204]      // while-condition  =>  TRUE
[22:11:19.205]      // while "1"  (timeout="200")
[22:11:19.205]      // while-condition  =>  TRUE
[22:11:19.205]      // while "1"  (timeout="200")
[22:11:19.206]      // while-condition  =>  TRUE
[22:11:19.206]      // while "1"  (timeout="200")
[22:11:19.206]      // while  =>  TIMEOUT
[22:11:19.206]      // end while "1"
[22:11:19.206]    </control>
[22:11:19.206]    <control if="canReadPins" while="" timeout="0" info="">
[22:11:19.206]      // if-block "canReadPins"
[22:11:19.206]        // =>  TRUE
[22:11:19.206]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:11:19.206]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:11:19.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:11:19.207]        // while-condition  =>  FALSE
[22:11:19.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:11:19.208]      </control>
[22:11:19.208]      // end if-block "canReadPins"
[22:11:19.208]    </control>
[22:11:19.208]    <control if="!canReadPins" while="" timeout="0" info="">
[22:11:19.208]      // if-block "!canReadPins"
[22:11:19.208]        // =>  FALSE
[22:11:19.208]      // skip if-block "!canReadPins"
[22:11:19.208]    </control>
[22:11:19.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:11:19.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:11:19.209]        // =>  TRUE
[22:11:19.209]      <block atomic="false" info="">
[22:11:19.209]        WriteAP(0x00, 0x190008);
[22:11:19.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:11:19.211]        WriteAP(0xF0, 0x01);
[22:11:19.215]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:11:19.215]      </block>
[22:11:19.215]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:11:19.215]    </control>
[22:11:19.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:11:19.215]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:11:19.215]        // =>  FALSE
[22:11:19.215]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:11:19.215]    </control>
[22:11:19.217]    <block atomic="false" info="">
[22:11:19.217]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:11:19.219]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:11:19.219]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:11:19.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:11:19.222]      __ap = 0; //lets make sure we reset the access point selection
[22:11:19.222]        // -> [__ap <= 0x00000000]
[22:11:19.222]    </block>
[22:11:19.222]  </sequence>
[22:11:19.222]  
[22:11:19.247]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:11:19.247]  
[22:11:19.247]  <debugvars>
[22:11:19.247]    // Pre-defined
[22:11:19.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:11:19.247]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:11:19.247]    __dp=0x00000000
[22:11:19.247]    __ap=0x00000000
[22:11:19.247]    __traceout=0x00000000      (Trace Disabled)
[22:11:19.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:11:19.247]    __FlashAddr=0x00000000
[22:11:19.247]    __FlashLen=0x00000000
[22:11:19.247]    __FlashArg=0x00000000
[22:11:19.247]    __FlashOp=0x00000000
[22:11:19.247]    __Result=0x00000000
[22:11:19.247]  </debugvars>
[22:11:19.247]  
[22:11:19.247]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:11:19.247]    <block atomic="false" info="">
[22:11:19.247]      __var deviceID = 0;
[22:11:19.247]        // -> [deviceID <= 0x00000000]
[22:11:19.247]      __var version = 0;
[22:11:19.247]        // -> [version <= 0x00000000]
[22:11:19.247]      __var partNum = 0;
[22:11:19.247]        // -> [partNum <= 0x00000000]
[22:11:19.247]      __var manuf = 0;
[22:11:19.247]        // -> [manuf <= 0x00000000]
[22:11:19.247]      __var isMSPM0G1X0X_G3X0X = 0;
[22:11:19.247]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:11:19.247]      __var isProduction = 0;
[22:11:19.247]        // -> [isProduction <= 0x00000000]
[22:11:19.247]      __var continueId = 0;
[22:11:19.247]        // -> [continueId <= 0x00000000]
[22:11:19.247]      deviceID =   Read32(0x41C40004);
[22:11:19.257]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:11:19.257]        // -> [deviceID <= 0x2BB8802F]
[22:11:19.257]      version = deviceID >> 28;
[22:11:19.258]        // -> [version <= 0x00000002]
[22:11:19.258]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:11:19.258]        // -> [partNum <= 0x0000BB88]
[22:11:19.258]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:11:19.258]        // -> [manuf <= 0x00000017]
[22:11:19.258]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:11:19.258]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:11:19.258]      isProduction = (version > 0);
[22:11:19.258]        // -> [isProduction <= 0x00000001]
[22:11:19.258]    </block>
[22:11:19.258]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:11:19.258]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:11:19.258]        // =>  FALSE
[22:11:19.258]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:11:19.258]    </control>
[22:11:19.258]    <control if="continueId == 4" while="" timeout="0" info="">
[22:11:19.259]      // if-block "continueId == 4"
[22:11:19.259]        // =>  FALSE
[22:11:19.259]      // skip if-block "continueId == 4"
[22:11:19.259]    </control>
[22:11:19.259]    <control if="!isProduction" while="" timeout="0" info="">
[22:11:19.259]      // if-block "!isProduction"
[22:11:19.259]        // =>  FALSE
[22:11:19.259]      // skip if-block "!isProduction"
[22:11:19.259]    </control>
[22:11:19.259]  </sequence>
[22:11:19.259]  
[22:12:01.639]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:12:01.639]  
[22:12:01.647]  <debugvars>
[22:12:01.647]    // Pre-defined
[22:12:01.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:01.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:01.647]    __dp=0x00000000
[22:12:01.647]    __ap=0x00000000
[22:12:01.647]    __traceout=0x00000000      (Trace Disabled)
[22:12:01.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:01.647]    __FlashAddr=0x00000000
[22:12:01.647]    __FlashLen=0x00000000
[22:12:01.647]    __FlashArg=0x00000000
[22:12:01.647]    __FlashOp=0x00000000
[22:12:01.648]    __Result=0x00000000
[22:12:01.648]  </debugvars>
[22:12:01.648]  
[22:12:01.648]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:12:01.648]    <block atomic="false" info="">
[22:12:01.648]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:12:01.648]        // -> [isSWJ <= 0x00000001]
[22:12:01.648]      __var hasDormant = __protocol & 0x00020000;
[22:12:01.648]        // -> [hasDormant <= 0x00000000]
[22:12:01.649]      __var protType   = __protocol & 0x0000FFFF;
[22:12:01.649]        // -> [protType <= 0x00000002]
[22:12:01.649]    </block>
[22:12:01.649]    <control if="protType == 1" while="" timeout="0" info="">
[22:12:01.649]      // if-block "protType == 1"
[22:12:01.649]        // =>  FALSE
[22:12:01.649]      // skip if-block "protType == 1"
[22:12:01.649]    </control>
[22:12:01.649]    <control if="protType == 2" while="" timeout="0" info="">
[22:12:01.649]      // if-block "protType == 2"
[22:12:01.649]        // =>  TRUE
[22:12:01.649]      <control if="isSWJ" while="" timeout="0" info="">
[22:12:01.649]        // if-block "isSWJ"
[22:12:01.649]          // =>  TRUE
[22:12:01.649]        <control if="hasDormant" while="" timeout="0" info="">
[22:12:01.649]          // if-block "hasDormant"
[22:12:01.649]            // =>  FALSE
[22:12:01.649]          // skip if-block "hasDormant"
[22:12:01.651]        </control>
[22:12:01.651]        <control if="!hasDormant" while="" timeout="0" info="">
[22:12:01.651]          // if-block "!hasDormant"
[22:12:01.651]            // =>  TRUE
[22:12:01.651]          <block atomic="false" info="">
[22:12:01.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:12:01.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:01.653]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:12:01.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:12:01.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:12:01.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:01.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:12:01.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:12:01.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:12:01.657]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:01.657]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:12:01.657]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:12:01.657]          </block>
[22:12:01.657]          // end if-block "!hasDormant"
[22:12:01.657]        </control>
[22:12:01.661]        // end if-block "isSWJ"
[22:12:01.661]      </control>
[22:12:01.661]      <control if="!isSWJ" while="" timeout="0" info="">
[22:12:01.661]        // if-block "!isSWJ"
[22:12:01.661]          // =>  FALSE
[22:12:01.661]        // skip if-block "!isSWJ"
[22:12:01.661]      </control>
[22:12:01.663]      <block atomic="false" info="">
[22:12:01.663]        ReadDP(0x0);
[22:12:01.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:12:01.663]      </block>
[22:12:01.663]      // end if-block "protType == 2"
[22:12:01.663]    </control>
[22:12:01.663]  </sequence>
[22:12:01.663]  
[22:12:01.668]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:12:01.668]  
[22:12:01.668]  <debugvars>
[22:12:01.669]    // Pre-defined
[22:12:01.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:01.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:01.669]    __dp=0x00000000
[22:12:01.669]    __ap=0x00000000
[22:12:01.669]    __traceout=0x00000000      (Trace Disabled)
[22:12:01.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:01.669]    __FlashAddr=0x00000000
[22:12:01.669]    __FlashLen=0x00000000
[22:12:01.669]    __FlashArg=0x00000000
[22:12:01.669]    __FlashOp=0x00000000
[22:12:01.669]    __Result=0x00000000
[22:12:01.669]  </debugvars>
[22:12:01.669]  
[22:12:01.669]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:12:01.669]    <block atomic="false" info="">
[22:12:01.669]      __var SW_DP_ABORT       = 0x0;
[22:12:01.669]        // -> [SW_DP_ABORT <= 0x00000000]
[22:12:01.669]      __var DP_CTRL_STAT      = 0x4;
[22:12:01.671]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:12:01.671]      __var DP_SELECT         = 0x8;
[22:12:01.671]        // -> [DP_SELECT <= 0x00000008]
[22:12:01.671]      __var powered_down      = 0;
[22:12:01.671]        // -> [powered_down <= 0x00000000]
[22:12:01.671]      WriteDP(DP_SELECT, 0x00000000);
[22:12:01.673]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:12:01.673]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:12:01.675]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:12:01.675]        // -> [powered_down <= 0x00000001]
[22:12:01.675]    </block>
[22:12:01.675]    <control if="powered_down" while="" timeout="0" info="">
[22:12:01.675]      // if-block "powered_down"
[22:12:01.675]        // =>  TRUE
[22:12:01.675]      <block atomic="false" info="">
[22:12:01.675]        Message(0, "Debug/System power-up request sent");
[22:12:01.679]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:12:01.679]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:12:01.679]      </block>
[22:12:01.679]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:12:01.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:12:01.682]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:12:01.682]        // while-condition  =>  FALSE
[22:12:01.682]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:12:01.682]      </control>
[22:12:01.682]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:12:01.682]        // if-block "(__protocol & 0xFFFF) == 1"
[22:12:01.682]          // =>  FALSE
[22:12:01.682]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:12:01.682]      </control>
[22:12:01.682]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:12:01.684]        // if-block "(__protocol & 0xFFFF) == 2"
[22:12:01.684]          // =>  TRUE
[22:12:01.684]        <block atomic="false" info="">
[22:12:01.684]          Message(0, "executing SWD power up");
[22:12:01.686]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:12:01.686]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:12:01.686]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:12:01.686]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:12:01.686]        </block>
[22:12:01.690]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:12:01.690]      </control>
[22:12:01.690]      // end if-block "powered_down"
[22:12:01.690]    </control>
[22:12:01.690]    <block atomic="false" info="">
[22:12:01.690]      __var DEBUG_PORT_VAL    = 0;
[22:12:01.690]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:12:01.690]      __var ACCESS_POINT_VAL  = 0;
[22:12:01.690]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:12:01.690]      __ap = 1; 
[22:12:01.690]        // -> [__ap <= 0x00000001]
[22:12:01.690]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:12:01.694]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:12:01.694]      __ap = 4;
[22:12:01.694]        // -> [__ap <= 0x00000004]
[22:12:01.694]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:12:01.695]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:12:01.695]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:12:01.698]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:12:01.700]    </block>
[22:12:01.701]    <block atomic="false" info="">
[22:12:01.701]      __var nReset = 0x80;
[22:12:01.701]        // -> [nReset <= 0x00000080]
[22:12:01.701]      __var canReadPins = 0;
[22:12:01.701]        // -> [canReadPins <= 0x00000000]
[22:12:01.701]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:12:01.702]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:12:01.702]        // -> [canReadPins <= 0x00000001]
[22:12:01.702]    </block>
[22:12:01.702]    <control if="" while="1" timeout="200" info="">
[22:12:01.702]      // while "1"  (timeout="200")
[22:12:01.702]      // while-condition  =>  TRUE
[22:12:01.702]      // while "1"  (timeout="200")
[22:12:01.702]      // while-condition  =>  TRUE
[22:12:01.702]      // while "1"  (timeout="200")
[22:12:01.702]      // while-condition  =>  TRUE
[22:12:01.702]      // while "1"  (timeout="200")
[22:12:01.702]      // while-condition  =>  TRUE
[22:12:01.702]      // while "1"  (timeout="200")
[22:12:01.702]      // while-condition  =>  TRUE
[22:12:01.705]      // while "1"  (timeout="200")
[22:12:01.705]      // while-condition  =>  TRUE
[22:12:01.705]      // while "1"  (timeout="200")
[22:12:01.705]      // while-condition  =>  TRUE
[22:12:01.705]      // while "1"  (timeout="200")
[22:12:01.706]      // while-condition  =>  TRUE
[22:12:01.706]      // while "1"  (timeout="200")
[22:12:01.706]      // while  =>  TIMEOUT
[22:12:01.706]      // end while "1"
[22:12:01.706]    </control>
[22:12:01.706]    <control if="canReadPins" while="" timeout="0" info="">
[22:12:01.706]      // if-block "canReadPins"
[22:12:01.706]        // =>  TRUE
[22:12:01.706]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:12:01.706]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:12:01.708]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:12:01.708]        // while-condition  =>  FALSE
[22:12:01.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:12:01.708]      </control>
[22:12:01.708]      // end if-block "canReadPins"
[22:12:01.708]    </control>
[22:12:01.708]    <control if="!canReadPins" while="" timeout="0" info="">
[22:12:01.708]      // if-block "!canReadPins"
[22:12:01.708]        // =>  FALSE
[22:12:01.708]      // skip if-block "!canReadPins"
[22:12:01.708]    </control>
[22:12:01.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:12:01.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:12:01.708]        // =>  TRUE
[22:12:01.708]      <block atomic="false" info="">
[22:12:01.708]        WriteAP(0x00, 0x190008);
[22:12:01.711]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:12:01.711]        WriteAP(0xF0, 0x01);
[22:12:01.714]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:12:01.715]      </block>
[22:12:01.715]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:12:01.715]    </control>
[22:12:01.715]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:12:01.715]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:12:01.715]        // =>  FALSE
[22:12:01.715]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:12:01.715]    </control>
[22:12:01.715]    <block atomic="false" info="">
[22:12:01.716]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:12:01.719]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:12:01.719]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:12:01.719]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:12:01.720]      __ap = 0; //lets make sure we reset the access point selection
[22:12:01.720]        // -> [__ap <= 0x00000000]
[22:12:01.720]    </block>
[22:12:01.720]  </sequence>
[22:12:01.720]  
[22:12:01.740]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:12:01.740]  
[22:12:01.740]  <debugvars>
[22:12:01.740]    // Pre-defined
[22:12:01.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:01.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:01.740]    __dp=0x00000000
[22:12:01.740]    __ap=0x00000000
[22:12:01.740]    __traceout=0x00000000      (Trace Disabled)
[22:12:01.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:01.740]    __FlashAddr=0x00000000
[22:12:01.740]    __FlashLen=0x00000000
[22:12:01.740]    __FlashArg=0x00000000
[22:12:01.740]    __FlashOp=0x00000000
[22:12:01.740]    __Result=0x00000000
[22:12:01.740]  </debugvars>
[22:12:01.740]  
[22:12:01.740]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:12:01.740]    <block atomic="false" info="">
[22:12:01.740]      __var deviceID = 0;
[22:12:01.740]        // -> [deviceID <= 0x00000000]
[22:12:01.740]      __var version = 0;
[22:12:01.740]        // -> [version <= 0x00000000]
[22:12:01.740]      __var partNum = 0;
[22:12:01.740]        // -> [partNum <= 0x00000000]
[22:12:01.740]      __var manuf = 0;
[22:12:01.740]        // -> [manuf <= 0x00000000]
[22:12:01.740]      __var isMSPM0G1X0X_G3X0X = 0;
[22:12:01.740]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:12:01.740]      __var isProduction = 0;
[22:12:01.740]        // -> [isProduction <= 0x00000000]
[22:12:01.740]      __var continueId = 0;
[22:12:01.740]        // -> [continueId <= 0x00000000]
[22:12:01.740]      deviceID =   Read32(0x41C40004);
[22:12:01.753]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:12:01.753]        // -> [deviceID <= 0x2BB8802F]
[22:12:01.753]      version = deviceID >> 28;
[22:12:01.753]        // -> [version <= 0x00000002]
[22:12:01.753]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:12:01.753]        // -> [partNum <= 0x0000BB88]
[22:12:01.753]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:12:01.753]        // -> [manuf <= 0x00000017]
[22:12:01.753]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:12:01.753]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:12:01.753]      isProduction = (version > 0);
[22:12:01.753]        // -> [isProduction <= 0x00000001]
[22:12:01.753]    </block>
[22:12:01.753]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:12:01.753]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:12:01.753]        // =>  FALSE
[22:12:01.753]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:12:01.755]    </control>
[22:12:01.755]    <control if="continueId == 4" while="" timeout="0" info="">
[22:12:01.755]      // if-block "continueId == 4"
[22:12:01.755]        // =>  FALSE
[22:12:01.755]      // skip if-block "continueId == 4"
[22:12:01.755]    </control>
[22:12:01.755]    <control if="!isProduction" while="" timeout="0" info="">
[22:12:01.755]      // if-block "!isProduction"
[22:12:01.755]        // =>  FALSE
[22:12:01.755]      // skip if-block "!isProduction"
[22:12:01.755]    </control>
[22:12:01.755]  </sequence>
[22:12:01.755]  
[22:13:44.899]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:13:44.899]  
[22:13:44.900]  <debugvars>
[22:13:44.900]    // Pre-defined
[22:13:44.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:44.900]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:44.900]    __dp=0x00000000
[22:13:44.900]    __ap=0x00000000
[22:13:44.900]    __traceout=0x00000000      (Trace Disabled)
[22:13:44.900]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:44.900]    __FlashAddr=0x00000000
[22:13:44.900]    __FlashLen=0x00000000
[22:13:44.900]    __FlashArg=0x00000000
[22:13:44.900]    __FlashOp=0x00000000
[22:13:44.900]    __Result=0x00000000
[22:13:44.900]  </debugvars>
[22:13:44.900]  
[22:13:44.900]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:13:44.900]    <block atomic="false" info="">
[22:13:44.900]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:13:44.900]        // -> [isSWJ <= 0x00000001]
[22:13:44.900]      __var hasDormant = __protocol & 0x00020000;
[22:13:44.900]        // -> [hasDormant <= 0x00000000]
[22:13:44.900]      __var protType   = __protocol & 0x0000FFFF;
[22:13:44.902]        // -> [protType <= 0x00000002]
[22:13:44.902]    </block>
[22:13:44.902]    <control if="protType == 1" while="" timeout="0" info="">
[22:13:44.902]      // if-block "protType == 1"
[22:13:44.902]        // =>  FALSE
[22:13:44.902]      // skip if-block "protType == 1"
[22:13:44.902]    </control>
[22:13:44.902]    <control if="protType == 2" while="" timeout="0" info="">
[22:13:44.902]      // if-block "protType == 2"
[22:13:44.902]        // =>  TRUE
[22:13:44.902]      <control if="isSWJ" while="" timeout="0" info="">
[22:13:44.902]        // if-block "isSWJ"
[22:13:44.902]          // =>  TRUE
[22:13:44.902]        <control if="hasDormant" while="" timeout="0" info="">
[22:13:44.904]          // if-block "hasDormant"
[22:13:44.904]            // =>  FALSE
[22:13:44.904]          // skip if-block "hasDormant"
[22:13:44.904]        </control>
[22:13:44.904]        <control if="!hasDormant" while="" timeout="0" info="">
[22:13:44.904]          // if-block "!hasDormant"
[22:13:44.904]            // =>  TRUE
[22:13:44.904]          <block atomic="false" info="">
[22:13:44.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:13:44.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.917]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:13:44.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:13:44.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:13:44.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.920]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:13:44.921]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:13:44.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:13:44.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:13:44.921]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:13:44.925]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:13:44.925]          </block>
[22:13:44.925]          // end if-block "!hasDormant"
[22:13:44.925]        </control>
[22:13:44.925]        // end if-block "isSWJ"
[22:13:44.925]      </control>
[22:13:44.925]      <control if="!isSWJ" while="" timeout="0" info="">
[22:13:44.925]        // if-block "!isSWJ"
[22:13:44.925]          // =>  FALSE
[22:13:44.925]        // skip if-block "!isSWJ"
[22:13:44.925]      </control>
[22:13:44.925]      <block atomic="false" info="">
[22:13:44.925]        ReadDP(0x0);
[22:13:44.927]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:13:44.927]      </block>
[22:13:44.928]      // end if-block "protType == 2"
[22:13:44.928]    </control>
[22:13:44.928]  </sequence>
[22:13:44.928]  
[22:13:44.932]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:13:44.932]  
[22:13:44.932]  <debugvars>
[22:13:44.932]    // Pre-defined
[22:13:44.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:44.932]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:44.932]    __dp=0x00000000
[22:13:44.932]    __ap=0x00000000
[22:13:44.932]    __traceout=0x00000000      (Trace Disabled)
[22:13:44.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:44.932]    __FlashAddr=0x00000000
[22:13:44.932]    __FlashLen=0x00000000
[22:13:44.932]    __FlashArg=0x00000000
[22:13:44.932]    __FlashOp=0x00000000
[22:13:44.932]    __Result=0x00000000
[22:13:44.932]  </debugvars>
[22:13:44.932]  
[22:13:44.932]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:13:44.932]    <block atomic="false" info="">
[22:13:44.932]      __var SW_DP_ABORT       = 0x0;
[22:13:44.936]        // -> [SW_DP_ABORT <= 0x00000000]
[22:13:44.936]      __var DP_CTRL_STAT      = 0x4;
[22:13:44.936]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:13:44.936]      __var DP_SELECT         = 0x8;
[22:13:44.936]        // -> [DP_SELECT <= 0x00000008]
[22:13:44.936]      __var powered_down      = 0;
[22:13:44.936]        // -> [powered_down <= 0x00000000]
[22:13:44.936]      WriteDP(DP_SELECT, 0x00000000);
[22:13:44.940]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:13:44.940]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:13:44.940]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:13:44.940]        // -> [powered_down <= 0x00000001]
[22:13:44.940]    </block>
[22:13:44.940]    <control if="powered_down" while="" timeout="0" info="">
[22:13:44.940]      // if-block "powered_down"
[22:13:44.940]        // =>  TRUE
[22:13:44.940]      <block atomic="false" info="">
[22:13:44.940]        Message(0, "Debug/System power-up request sent");
[22:13:44.947]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:13:44.950]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:13:44.950]      </block>
[22:13:44.950]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:13:44.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:13:44.954]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:13:44.954]        // while-condition  =>  FALSE
[22:13:44.954]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:13:44.954]      </control>
[22:13:44.954]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:13:44.954]        // if-block "(__protocol & 0xFFFF) == 1"
[22:13:44.954]          // =>  FALSE
[22:13:44.954]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:13:44.954]      </control>
[22:13:44.954]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:13:44.954]        // if-block "(__protocol & 0xFFFF) == 2"
[22:13:44.956]          // =>  TRUE
[22:13:44.956]        <block atomic="false" info="">
[22:13:44.956]          Message(0, "executing SWD power up");
[22:13:44.957]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:13:44.959]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:13:44.959]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:13:44.965]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:13:44.965]        </block>
[22:13:44.965]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:13:44.965]      </control>
[22:13:44.965]      // end if-block "powered_down"
[22:13:44.965]    </control>
[22:13:44.965]    <block atomic="false" info="">
[22:13:44.965]      __var DEBUG_PORT_VAL    = 0;
[22:13:44.965]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:13:44.965]      __var ACCESS_POINT_VAL  = 0;
[22:13:44.965]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:13:44.965]      __ap = 1; 
[22:13:44.965]        // -> [__ap <= 0x00000001]
[22:13:44.966]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:13:44.976]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:13:44.976]      __ap = 4;
[22:13:44.976]        // -> [__ap <= 0x00000004]
[22:13:44.977]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:13:44.982]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:13:44.982]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:13:44.982]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:13:44.982]    </block>
[22:13:44.982]    <block atomic="false" info="">
[22:13:44.982]      __var nReset = 0x80;
[22:13:44.982]        // -> [nReset <= 0x00000080]
[22:13:44.982]      __var canReadPins = 0;
[22:13:44.982]        // -> [canReadPins <= 0x00000000]
[22:13:44.986]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:13:44.987]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:13:44.987]        // -> [canReadPins <= 0x00000001]
[22:13:44.987]    </block>
[22:13:44.987]    <control if="" while="1" timeout="200" info="">
[22:13:44.987]      // while "1"  (timeout="200")
[22:13:44.987]      // while-condition  =>  TRUE
[22:13:44.987]      // while "1"  (timeout="200")
[22:13:44.987]      // while-condition  =>  TRUE
[22:13:44.987]      // while "1"  (timeout="200")
[22:13:44.987]      // while-condition  =>  TRUE
[22:13:44.987]      // while "1"  (timeout="200")
[22:13:44.990]      // while-condition  =>  TRUE
[22:13:44.990]      // while "1"  (timeout="200")
[22:13:44.990]      // while-condition  =>  TRUE
[22:13:44.991]      // while "1"  (timeout="200")
[22:13:44.991]      // while-condition  =>  TRUE
[22:13:44.991]      // while "1"  (timeout="200")
[22:13:44.991]      // while-condition  =>  TRUE
[22:13:44.991]      // while "1"  (timeout="200")
[22:13:44.991]      // while-condition  =>  TRUE
[22:13:44.991]      // while "1"  (timeout="200")
[22:13:44.991]      // while-condition  =>  TRUE
[22:13:44.991]      // while "1"  (timeout="200")
[22:13:44.991]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.992]      // while-condition  =>  TRUE
[22:13:44.992]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.993]      // while "1"  (timeout="200")
[22:13:44.993]      // while-condition  =>  TRUE
[22:13:44.995]      // while "1"  (timeout="200")
[22:13:44.995]      // while-condition  =>  TRUE
[22:13:44.995]      // while "1"  (timeout="200")
[22:13:44.995]      // while-condition  =>  TRUE
[22:13:44.995]      // while "1"  (timeout="200")
[22:13:44.995]      // while-condition  =>  TRUE
[22:13:44.995]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.996]      // while "1"  (timeout="200")
[22:13:44.996]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.997]      // while "1"  (timeout="200")
[22:13:44.997]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:44.999]      // while "1"  (timeout="200")
[22:13:44.999]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.000]      // while "1"  (timeout="200")
[22:13:45.000]      // while-condition  =>  TRUE
[22:13:45.002]      // while "1"  (timeout="200")
[22:13:45.002]      // while-condition  =>  TRUE
[22:13:45.002]      // while "1"  (timeout="200")
[22:13:45.002]      // while-condition  =>  TRUE
[22:13:45.002]      // while "1"  (timeout="200")
[22:13:45.002]      // while-condition  =>  TRUE
[22:13:45.002]      // while "1"  (timeout="200")
[22:13:45.002]      // while-condition  =>  TRUE
[22:13:45.002]      // while "1"  (timeout="200")
[22:13:45.002]      // while-condition  =>  TRUE
[22:13:45.003]      // while "1"  (timeout="200")
[22:13:45.003]      // while  =>  TIMEOUT
[22:13:45.003]      // end while "1"
[22:13:45.003]    </control>
[22:13:45.003]    <control if="canReadPins" while="" timeout="0" info="">
[22:13:45.003]      // if-block "canReadPins"
[22:13:45.003]        // =>  TRUE
[22:13:45.003]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:13:45.003]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:13:45.005]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:13:45.005]        // while-condition  =>  FALSE
[22:13:45.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:13:45.006]      </control>
[22:13:45.006]      // end if-block "canReadPins"
[22:13:45.006]    </control>
[22:13:45.006]    <control if="!canReadPins" while="" timeout="0" info="">
[22:13:45.007]      // if-block "!canReadPins"
[22:13:45.007]        // =>  FALSE
[22:13:45.007]      // skip if-block "!canReadPins"
[22:13:45.007]    </control>
[22:13:45.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:13:45.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:13:45.007]        // =>  TRUE
[22:13:45.007]      <block atomic="false" info="">
[22:13:45.007]        WriteAP(0x00, 0x190008);
[22:13:45.012]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:13:45.012]        WriteAP(0xF0, 0x01);
[22:13:45.020]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:13:45.020]      </block>
[22:13:45.020]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:13:45.020]    </control>
[22:13:45.020]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:13:45.020]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:13:45.020]        // =>  FALSE
[22:13:45.020]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:13:45.020]    </control>
[22:13:45.020]    <block atomic="false" info="">
[22:13:45.020]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:13:45.025]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:13:45.025]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:13:45.025]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:13:45.028]      __ap = 0; //lets make sure we reset the access point selection
[22:13:45.028]        // -> [__ap <= 0x00000000]
[22:13:45.028]    </block>
[22:13:45.028]  </sequence>
[22:13:45.028]  
[22:13:45.087]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:13:45.087]  
[22:13:45.087]  <debugvars>
[22:13:45.087]    // Pre-defined
[22:13:45.087]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:13:45.087]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:13:45.087]    __dp=0x00000000
[22:13:45.087]    __ap=0x00000000
[22:13:45.087]    __traceout=0x00000000      (Trace Disabled)
[22:13:45.087]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:13:45.087]    __FlashAddr=0x00000000
[22:13:45.087]    __FlashLen=0x00000000
[22:13:45.087]    __FlashArg=0x00000000
[22:13:45.087]    __FlashOp=0x00000000
[22:13:45.087]    __Result=0x00000000
[22:13:45.087]  </debugvars>
[22:13:45.087]  
[22:13:45.087]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:13:45.087]    <block atomic="false" info="">
[22:13:45.087]      __var deviceID = 0;
[22:13:45.087]        // -> [deviceID <= 0x00000000]
[22:13:45.087]      __var version = 0;
[22:13:45.087]        // -> [version <= 0x00000000]
[22:13:45.087]      __var partNum = 0;
[22:13:45.087]        // -> [partNum <= 0x00000000]
[22:13:45.087]      __var manuf = 0;
[22:13:45.087]        // -> [manuf <= 0x00000000]
[22:13:45.087]      __var isMSPM0G1X0X_G3X0X = 0;
[22:13:45.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:13:45.090]      __var isProduction = 0;
[22:13:45.090]        // -> [isProduction <= 0x00000000]
[22:13:45.090]      __var continueId = 0;
[22:13:45.090]        // -> [continueId <= 0x00000000]
[22:13:45.090]      deviceID =   Read32(0x41C40004);
[22:13:45.112]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:13:45.112]        // -> [deviceID <= 0x2BB8802F]
[22:13:45.112]      version = deviceID >> 28;
[22:13:45.112]        // -> [version <= 0x00000002]
[22:13:45.112]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:13:45.112]        // -> [partNum <= 0x0000BB88]
[22:13:45.112]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:13:45.112]        // -> [manuf <= 0x00000017]
[22:13:45.112]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:13:45.112]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:13:45.112]      isProduction = (version > 0);
[22:13:45.112]        // -> [isProduction <= 0x00000001]
[22:13:45.112]    </block>
[22:13:45.116]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:13:45.116]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:13:45.116]        // =>  FALSE
[22:13:45.116]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:13:45.116]    </control>
[22:13:45.116]    <control if="continueId == 4" while="" timeout="0" info="">
[22:13:45.117]      // if-block "continueId == 4"
[22:13:45.117]        // =>  FALSE
[22:13:45.117]      // skip if-block "continueId == 4"
[22:13:45.117]    </control>
[22:13:45.117]    <control if="!isProduction" while="" timeout="0" info="">
[22:13:45.117]      // if-block "!isProduction"
[22:13:45.117]        // =>  FALSE
[22:13:45.117]      // skip if-block "!isProduction"
[22:13:45.117]    </control>
[22:13:45.117]  </sequence>
[22:13:45.117]  
[22:14:14.446]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:14:14.446]  
[22:14:14.455]  <debugvars>
[22:14:14.455]    // Pre-defined
[22:14:14.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:14.455]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:14.456]    __dp=0x00000000
[22:14:14.456]    __ap=0x00000000
[22:14:14.456]    __traceout=0x00000000      (Trace Disabled)
[22:14:14.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:14.456]    __FlashAddr=0x00000000
[22:14:14.456]    __FlashLen=0x00000000
[22:14:14.456]    __FlashArg=0x00000000
[22:14:14.456]    __FlashOp=0x00000000
[22:14:14.456]    __Result=0x00000000
[22:14:14.456]  </debugvars>
[22:14:14.456]  
[22:14:14.456]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:14:14.456]    <block atomic="false" info="">
[22:14:14.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:14:14.456]        // -> [isSWJ <= 0x00000001]
[22:14:14.458]      __var hasDormant = __protocol & 0x00020000;
[22:14:14.458]        // -> [hasDormant <= 0x00000000]
[22:14:14.458]      __var protType   = __protocol & 0x0000FFFF;
[22:14:14.458]        // -> [protType <= 0x00000002]
[22:14:14.458]    </block>
[22:14:14.458]    <control if="protType == 1" while="" timeout="0" info="">
[22:14:14.459]      // if-block "protType == 1"
[22:14:14.459]        // =>  FALSE
[22:14:14.459]      // skip if-block "protType == 1"
[22:14:14.459]    </control>
[22:14:14.459]    <control if="protType == 2" while="" timeout="0" info="">
[22:14:14.459]      // if-block "protType == 2"
[22:14:14.459]        // =>  TRUE
[22:14:14.459]      <control if="isSWJ" while="" timeout="0" info="">
[22:14:14.459]        // if-block "isSWJ"
[22:14:14.459]          // =>  TRUE
[22:14:14.459]        <control if="hasDormant" while="" timeout="0" info="">
[22:14:14.459]          // if-block "hasDormant"
[22:14:14.459]            // =>  FALSE
[22:14:14.459]          // skip if-block "hasDormant"
[22:14:14.460]        </control>
[22:14:14.460]        <control if="!hasDormant" while="" timeout="0" info="">
[22:14:14.460]          // if-block "!hasDormant"
[22:14:14.460]            // =>  TRUE
[22:14:14.460]          <block atomic="false" info="">
[22:14:14.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:14:14.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:14.462]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:14:14.468]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:14:14.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:14:14.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:14.469]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:14:14.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:14:14.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:14:14.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:14.471]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:14:14.471]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:14:14.471]          </block>
[22:14:14.471]          // end if-block "!hasDormant"
[22:14:14.474]        </control>
[22:14:14.474]        // end if-block "isSWJ"
[22:14:14.474]      </control>
[22:14:14.474]      <control if="!isSWJ" while="" timeout="0" info="">
[22:14:14.474]        // if-block "!isSWJ"
[22:14:14.474]          // =>  FALSE
[22:14:14.474]        // skip if-block "!isSWJ"
[22:14:14.474]      </control>
[22:14:14.474]      <block atomic="false" info="">
[22:14:14.474]        ReadDP(0x0);
[22:14:14.477]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:14:14.477]      </block>
[22:14:14.477]      // end if-block "protType == 2"
[22:14:14.477]    </control>
[22:14:14.477]  </sequence>
[22:14:14.477]  
[22:14:14.480]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:14:14.480]  
[22:14:14.480]  <debugvars>
[22:14:14.480]    // Pre-defined
[22:14:14.480]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:14.480]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:14.480]    __dp=0x00000000
[22:14:14.480]    __ap=0x00000000
[22:14:14.480]    __traceout=0x00000000      (Trace Disabled)
[22:14:14.480]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:14.480]    __FlashAddr=0x00000000
[22:14:14.480]    __FlashLen=0x00000000
[22:14:14.480]    __FlashArg=0x00000000
[22:14:14.483]    __FlashOp=0x00000000
[22:14:14.483]    __Result=0x00000000
[22:14:14.483]  </debugvars>
[22:14:14.483]  
[22:14:14.483]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:14:14.483]    <block atomic="false" info="">
[22:14:14.483]      __var SW_DP_ABORT       = 0x0;
[22:14:14.483]        // -> [SW_DP_ABORT <= 0x00000000]
[22:14:14.483]      __var DP_CTRL_STAT      = 0x4;
[22:14:14.483]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:14:14.483]      __var DP_SELECT         = 0x8;
[22:14:14.483]        // -> [DP_SELECT <= 0x00000008]
[22:14:14.483]      __var powered_down      = 0;
[22:14:14.483]        // -> [powered_down <= 0x00000000]
[22:14:14.483]      WriteDP(DP_SELECT, 0x00000000);
[22:14:14.485]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:14:14.485]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:14:14.487]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:14:14.487]        // -> [powered_down <= 0x00000001]
[22:14:14.487]    </block>
[22:14:14.487]    <control if="powered_down" while="" timeout="0" info="">
[22:14:14.487]      // if-block "powered_down"
[22:14:14.487]        // =>  TRUE
[22:14:14.487]      <block atomic="false" info="">
[22:14:14.487]        Message(0, "Debug/System power-up request sent");
[22:14:14.491]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:14:14.491]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:14:14.491]      </block>
[22:14:14.491]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:14:14.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:14:14.495]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:14:14.495]        // while-condition  =>  FALSE
[22:14:14.495]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:14:14.495]      </control>
[22:14:14.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:14:14.498]        // if-block "(__protocol & 0xFFFF) == 1"
[22:14:14.498]          // =>  FALSE
[22:14:14.498]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:14:14.498]      </control>
[22:14:14.498]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:14:14.498]        // if-block "(__protocol & 0xFFFF) == 2"
[22:14:14.498]          // =>  TRUE
[22:14:14.498]        <block atomic="false" info="">
[22:14:14.498]          Message(0, "executing SWD power up");
[22:14:14.499]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:14:14.499]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:14:14.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:14:14.503]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:14:14.503]        </block>
[22:14:14.503]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:14:14.503]      </control>
[22:14:14.503]      // end if-block "powered_down"
[22:14:14.503]    </control>
[22:14:14.503]    <block atomic="false" info="">
[22:14:14.503]      __var DEBUG_PORT_VAL    = 0;
[22:14:14.503]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:14:14.503]      __var ACCESS_POINT_VAL  = 0;
[22:14:14.503]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:14:14.503]      __ap = 1; 
[22:14:14.503]        // -> [__ap <= 0x00000001]
[22:14:14.503]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:14:14.508]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:14:14.508]      __ap = 4;
[22:14:14.508]        // -> [__ap <= 0x00000004]
[22:14:14.508]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:14.513]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:14:14.516]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:14:14.516]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:14.518]    </block>
[22:14:14.518]    <block atomic="false" info="">
[22:14:14.518]      __var nReset = 0x80;
[22:14:14.518]        // -> [nReset <= 0x00000080]
[22:14:14.518]      __var canReadPins = 0;
[22:14:14.518]        // -> [canReadPins <= 0x00000000]
[22:14:14.518]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:14:14.520]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:14:14.520]        // -> [canReadPins <= 0x00000001]
[22:14:14.520]    </block>
[22:14:14.520]    <control if="" while="1" timeout="200" info="">
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.520]      // while-condition  =>  TRUE
[22:14:14.520]      // while "1"  (timeout="200")
[22:14:14.524]      // while-condition  =>  TRUE
[22:14:14.524]      // while "1"  (timeout="200")
[22:14:14.524]      // while-condition  =>  TRUE
[22:14:14.524]      // while "1"  (timeout="200")
[22:14:14.524]      // while-condition  =>  TRUE
[22:14:14.524]      // while "1"  (timeout="200")
[22:14:14.524]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.525]      // while "1"  (timeout="200")
[22:14:14.525]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.527]      // while "1"  (timeout="200")
[22:14:14.527]      // while-condition  =>  TRUE
[22:14:14.528]      // while "1"  (timeout="200")
[22:14:14.528]      // while-condition  =>  TRUE
[22:14:14.528]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.529]      // while-condition  =>  TRUE
[22:14:14.529]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.531]      // while-condition  =>  TRUE
[22:14:14.531]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.533]      // while "1"  (timeout="200")
[22:14:14.533]      // while-condition  =>  TRUE
[22:14:14.535]      // while "1"  (timeout="200")
[22:14:14.535]      // while  =>  TIMEOUT
[22:14:14.535]      // end while "1"
[22:14:14.535]    </control>
[22:14:14.535]    <control if="canReadPins" while="" timeout="0" info="">
[22:14:14.535]      // if-block "canReadPins"
[22:14:14.535]        // =>  TRUE
[22:14:14.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:14:14.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:14:14.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:14:14.537]        // while-condition  =>  FALSE
[22:14:14.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:14:14.537]      </control>
[22:14:14.537]      // end if-block "canReadPins"
[22:14:14.537]    </control>
[22:14:14.537]    <control if="!canReadPins" while="" timeout="0" info="">
[22:14:14.537]      // if-block "!canReadPins"
[22:14:14.537]        // =>  FALSE
[22:14:14.537]      // skip if-block "!canReadPins"
[22:14:14.537]    </control>
[22:14:14.537]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:14:14.538]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:14.538]        // =>  TRUE
[22:14:14.538]      <block atomic="false" info="">
[22:14:14.538]        WriteAP(0x00, 0x190008);
[22:14:14.538]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:14.538]        WriteAP(0xF0, 0x01);
[22:14:14.543]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:14.543]      </block>
[22:14:14.543]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:14.543]    </control>
[22:14:14.543]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:14:14.543]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:14.543]        // =>  FALSE
[22:14:14.543]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:14.545]    </control>
[22:14:14.545]    <block atomic="false" info="">
[22:14:14.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:14.547]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:14:14.547]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:14:14.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:14.549]      __ap = 0; //lets make sure we reset the access point selection
[22:14:14.549]        // -> [__ap <= 0x00000000]
[22:14:14.549]    </block>
[22:14:14.549]  </sequence>
[22:14:14.549]  
[22:14:14.570]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:14:14.570]  
[22:14:14.570]  <debugvars>
[22:14:14.570]    // Pre-defined
[22:14:14.570]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:14.570]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:14.570]    __dp=0x00000000
[22:14:14.570]    __ap=0x00000000
[22:14:14.570]    __traceout=0x00000000      (Trace Disabled)
[22:14:14.570]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:14.570]    __FlashAddr=0x00000000
[22:14:14.573]    __FlashLen=0x00000000
[22:14:14.573]    __FlashArg=0x00000000
[22:14:14.573]    __FlashOp=0x00000000
[22:14:14.573]    __Result=0x00000000
[22:14:14.573]  </debugvars>
[22:14:14.573]  
[22:14:14.573]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:14:14.573]    <block atomic="false" info="">
[22:14:14.573]      __var deviceID = 0;
[22:14:14.573]        // -> [deviceID <= 0x00000000]
[22:14:14.573]      __var version = 0;
[22:14:14.573]        // -> [version <= 0x00000000]
[22:14:14.574]      __var partNum = 0;
[22:14:14.574]        // -> [partNum <= 0x00000000]
[22:14:14.574]      __var manuf = 0;
[22:14:14.574]        // -> [manuf <= 0x00000000]
[22:14:14.574]      __var isMSPM0G1X0X_G3X0X = 0;
[22:14:14.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:14:14.574]      __var isProduction = 0;
[22:14:14.574]        // -> [isProduction <= 0x00000000]
[22:14:14.574]      __var continueId = 0;
[22:14:14.574]        // -> [continueId <= 0x00000000]
[22:14:14.574]      deviceID =   Read32(0x41C40004);
[22:14:14.582]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:14:14.582]        // -> [deviceID <= 0x2BB8802F]
[22:14:14.582]      version = deviceID >> 28;
[22:14:14.582]        // -> [version <= 0x00000002]
[22:14:14.582]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:14:14.582]        // -> [partNum <= 0x0000BB88]
[22:14:14.582]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:14:14.582]        // -> [manuf <= 0x00000017]
[22:14:14.582]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:14:14.582]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:14:14.582]      isProduction = (version > 0);
[22:14:14.582]        // -> [isProduction <= 0x00000001]
[22:14:14.582]    </block>
[22:14:14.582]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:14:14.582]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:14:14.582]        // =>  FALSE
[22:14:14.582]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:14:14.582]    </control>
[22:14:14.584]    <control if="continueId == 4" while="" timeout="0" info="">
[22:14:14.584]      // if-block "continueId == 4"
[22:14:14.584]        // =>  FALSE
[22:14:14.584]      // skip if-block "continueId == 4"
[22:14:14.584]    </control>
[22:14:14.584]    <control if="!isProduction" while="" timeout="0" info="">
[22:14:14.584]      // if-block "!isProduction"
[22:14:14.584]        // =>  FALSE
[22:14:14.584]      // skip if-block "!isProduction"
[22:14:14.585]    </control>
[22:14:14.585]  </sequence>
[22:14:14.585]  
[22:14:39.529]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:14:39.529]  
[22:14:39.529]  <debugvars>
[22:14:39.530]    // Pre-defined
[22:14:39.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:39.530]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:39.530]    __dp=0x00000000
[22:14:39.530]    __ap=0x00000000
[22:14:39.530]    __traceout=0x00000000      (Trace Disabled)
[22:14:39.530]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:39.530]    __FlashAddr=0x00000000
[22:14:39.530]    __FlashLen=0x00000000
[22:14:39.530]    __FlashArg=0x00000000
[22:14:39.530]    __FlashOp=0x00000000
[22:14:39.530]    __Result=0x00000000
[22:14:39.530]  </debugvars>
[22:14:39.530]  
[22:14:39.530]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:14:39.531]    <block atomic="false" info="">
[22:14:39.531]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:14:39.531]        // -> [isSWJ <= 0x00000001]
[22:14:39.531]      __var hasDormant = __protocol & 0x00020000;
[22:14:39.531]        // -> [hasDormant <= 0x00000000]
[22:14:39.531]      __var protType   = __protocol & 0x0000FFFF;
[22:14:39.531]        // -> [protType <= 0x00000002]
[22:14:39.531]    </block>
[22:14:39.531]    <control if="protType == 1" while="" timeout="0" info="">
[22:14:39.531]      // if-block "protType == 1"
[22:14:39.531]        // =>  FALSE
[22:14:39.533]      // skip if-block "protType == 1"
[22:14:39.533]    </control>
[22:14:39.533]    <control if="protType == 2" while="" timeout="0" info="">
[22:14:39.533]      // if-block "protType == 2"
[22:14:39.533]        // =>  TRUE
[22:14:39.533]      <control if="isSWJ" while="" timeout="0" info="">
[22:14:39.533]        // if-block "isSWJ"
[22:14:39.533]          // =>  TRUE
[22:14:39.533]        <control if="hasDormant" while="" timeout="0" info="">
[22:14:39.533]          // if-block "hasDormant"
[22:14:39.533]            // =>  FALSE
[22:14:39.534]          // skip if-block "hasDormant"
[22:14:39.534]        </control>
[22:14:39.534]        <control if="!hasDormant" while="" timeout="0" info="">
[22:14:39.534]          // if-block "!hasDormant"
[22:14:39.534]            // =>  TRUE
[22:14:39.534]          <block atomic="false" info="">
[22:14:39.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:14:39.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:39.534]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:14:39.534]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:14:39.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:14:39.538]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:39.538]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:14:39.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:14:39.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:14:39.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:39.542]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:14:39.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:14:39.543]          </block>
[22:14:39.543]          // end if-block "!hasDormant"
[22:14:39.543]        </control>
[22:14:39.543]        // end if-block "isSWJ"
[22:14:39.543]      </control>
[22:14:39.543]      <control if="!isSWJ" while="" timeout="0" info="">
[22:14:39.544]        // if-block "!isSWJ"
[22:14:39.544]          // =>  FALSE
[22:14:39.544]        // skip if-block "!isSWJ"
[22:14:39.544]      </control>
[22:14:39.544]      <block atomic="false" info="">
[22:14:39.544]        ReadDP(0x0);
[22:14:39.546]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:14:39.546]      </block>
[22:14:39.546]      // end if-block "protType == 2"
[22:14:39.547]    </control>
[22:14:39.547]  </sequence>
[22:14:39.547]  
[22:14:39.549]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:14:39.549]  
[22:14:39.549]  <debugvars>
[22:14:39.549]    // Pre-defined
[22:14:39.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:39.550]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:39.550]    __dp=0x00000000
[22:14:39.550]    __ap=0x00000000
[22:14:39.550]    __traceout=0x00000000      (Trace Disabled)
[22:14:39.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:39.550]    __FlashAddr=0x00000000
[22:14:39.550]    __FlashLen=0x00000000
[22:14:39.550]    __FlashArg=0x00000000
[22:14:39.550]    __FlashOp=0x00000000
[22:14:39.550]    __Result=0x00000000
[22:14:39.551]  </debugvars>
[22:14:39.551]  
[22:14:39.551]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:14:39.551]    <block atomic="false" info="">
[22:14:39.551]      __var SW_DP_ABORT       = 0x0;
[22:14:39.551]        // -> [SW_DP_ABORT <= 0x00000000]
[22:14:39.551]      __var DP_CTRL_STAT      = 0x4;
[22:14:39.551]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:14:39.551]      __var DP_SELECT         = 0x8;
[22:14:39.552]        // -> [DP_SELECT <= 0x00000008]
[22:14:39.552]      __var powered_down      = 0;
[22:14:39.552]        // -> [powered_down <= 0x00000000]
[22:14:39.552]      WriteDP(DP_SELECT, 0x00000000);
[22:14:39.553]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:14:39.553]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:14:39.555]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:14:39.555]        // -> [powered_down <= 0x00000001]
[22:14:39.555]    </block>
[22:14:39.555]    <control if="powered_down" while="" timeout="0" info="">
[22:14:39.555]      // if-block "powered_down"
[22:14:39.555]        // =>  TRUE
[22:14:39.555]      <block atomic="false" info="">
[22:14:39.555]        Message(0, "Debug/System power-up request sent");
[22:14:39.559]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:14:39.561]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:14:39.562]      </block>
[22:14:39.562]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:14:39.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:14:39.563]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:14:39.563]        // while-condition  =>  FALSE
[22:14:39.563]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:14:39.563]      </control>
[22:14:39.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:14:39.564]        // if-block "(__protocol & 0xFFFF) == 1"
[22:14:39.564]          // =>  FALSE
[22:14:39.564]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:14:39.564]      </control>
[22:14:39.564]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:14:39.564]        // if-block "(__protocol & 0xFFFF) == 2"
[22:14:39.564]          // =>  TRUE
[22:14:39.564]        <block atomic="false" info="">
[22:14:39.565]          Message(0, "executing SWD power up");
[22:14:39.567]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:14:39.570]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:14:39.570]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:14:39.571]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:14:39.571]        </block>
[22:14:39.571]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:14:39.571]      </control>
[22:14:39.571]      // end if-block "powered_down"
[22:14:39.571]    </control>
[22:14:39.571]    <block atomic="false" info="">
[22:14:39.571]      __var DEBUG_PORT_VAL    = 0;
[22:14:39.571]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:14:39.571]      __var ACCESS_POINT_VAL  = 0;
[22:14:39.571]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:14:39.571]      __ap = 1; 
[22:14:39.571]        // -> [__ap <= 0x00000001]
[22:14:39.571]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:14:39.575]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:14:39.575]      __ap = 4;
[22:14:39.575]        // -> [__ap <= 0x00000004]
[22:14:39.575]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:39.579]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:14:39.579]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:14:39.579]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:39.583]    </block>
[22:14:39.583]    <block atomic="false" info="">
[22:14:39.583]      __var nReset = 0x80;
[22:14:39.583]        // -> [nReset <= 0x00000080]
[22:14:39.583]      __var canReadPins = 0;
[22:14:39.583]        // -> [canReadPins <= 0x00000000]
[22:14:39.583]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:14:39.583]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:14:39.583]        // -> [canReadPins <= 0x00000001]
[22:14:39.583]    </block>
[22:14:39.583]    <control if="" while="1" timeout="200" info="">
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.583]      // while-condition  =>  TRUE
[22:14:39.583]      // while "1"  (timeout="200")
[22:14:39.588]      // while-condition  =>  TRUE
[22:14:39.588]      // while "1"  (timeout="200")
[22:14:39.588]      // while-condition  =>  TRUE
[22:14:39.588]      // while "1"  (timeout="200")
[22:14:39.588]      // while-condition  =>  TRUE
[22:14:39.588]      // while "1"  (timeout="200")
[22:14:39.588]      // while-condition  =>  TRUE
[22:14:39.588]      // while "1"  (timeout="200")
[22:14:39.588]      // while-condition  =>  TRUE
[22:14:39.588]      // while "1"  (timeout="200")
[22:14:39.589]      // while-condition  =>  TRUE
[22:14:39.589]      // while "1"  (timeout="200")
[22:14:39.589]      // while-condition  =>  TRUE
[22:14:39.589]      // while "1"  (timeout="200")
[22:14:39.589]      // while-condition  =>  TRUE
[22:14:39.589]      // while "1"  (timeout="200")
[22:14:39.589]      // while-condition  =>  TRUE
[22:14:39.589]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.590]      // while "1"  (timeout="200")
[22:14:39.590]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.591]      // while-condition  =>  TRUE
[22:14:39.591]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.592]      // while "1"  (timeout="200")
[22:14:39.592]      // while-condition  =>  TRUE
[22:14:39.594]      // while "1"  (timeout="200")
[22:14:39.594]      // while-condition  =>  TRUE
[22:14:39.594]      // while "1"  (timeout="200")
[22:14:39.594]      // while-condition  =>  TRUE
[22:14:39.594]      // while "1"  (timeout="200")
[22:14:39.594]      // while-condition  =>  TRUE
[22:14:39.594]      // while "1"  (timeout="200")
[22:14:39.595]      // while-condition  =>  TRUE
[22:14:39.595]      // while "1"  (timeout="200")
[22:14:39.595]      // while-condition  =>  TRUE
[22:14:39.595]      // while "1"  (timeout="200")
[22:14:39.595]      // while-condition  =>  TRUE
[22:14:39.595]      // while "1"  (timeout="200")
[22:14:39.596]      // while-condition  =>  TRUE
[22:14:39.596]      // while "1"  (timeout="200")
[22:14:39.596]      // while-condition  =>  TRUE
[22:14:39.596]      // while "1"  (timeout="200")
[22:14:39.596]      // while-condition  =>  TRUE
[22:14:39.597]      // while "1"  (timeout="200")
[22:14:39.597]      // while  =>  TIMEOUT
[22:14:39.597]      // end while "1"
[22:14:39.597]    </control>
[22:14:39.597]    <control if="canReadPins" while="" timeout="0" info="">
[22:14:39.597]      // if-block "canReadPins"
[22:14:39.597]        // =>  TRUE
[22:14:39.597]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:14:39.597]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:14:39.597]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:14:39.597]        // while-condition  =>  FALSE
[22:14:39.599]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:14:39.599]      </control>
[22:14:39.599]      // end if-block "canReadPins"
[22:14:39.599]    </control>
[22:14:39.599]    <control if="!canReadPins" while="" timeout="0" info="">
[22:14:39.599]      // if-block "!canReadPins"
[22:14:39.599]        // =>  FALSE
[22:14:39.599]      // skip if-block "!canReadPins"
[22:14:39.600]    </control>
[22:14:39.600]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:14:39.600]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:39.600]        // =>  TRUE
[22:14:39.600]      <block atomic="false" info="">
[22:14:39.600]        WriteAP(0x00, 0x190008);
[22:14:39.601]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:39.601]        WriteAP(0xF0, 0x01);
[22:14:39.605]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:39.605]      </block>
[22:14:39.605]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:39.605]    </control>
[22:14:39.605]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:14:39.605]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:39.605]        // =>  FALSE
[22:14:39.605]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:39.605]    </control>
[22:14:39.605]    <block atomic="false" info="">
[22:14:39.605]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:39.625]  
[22:14:39.625]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[22:14:39.625]  
[22:14:39.627]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:14:39.627]    </block>
[22:14:39.627]  </sequence>
[22:14:39.627]  
[22:14:47.776]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:14:47.776]  
[22:14:47.789]  <debugvars>
[22:14:47.789]    // Pre-defined
[22:14:47.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:47.789]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:47.789]    __dp=0x00000000
[22:14:47.789]    __ap=0x00000000
[22:14:47.789]    __traceout=0x00000000      (Trace Disabled)
[22:14:47.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:47.789]    __FlashAddr=0x00000000
[22:14:47.789]    __FlashLen=0x00000000
[22:14:47.789]    __FlashArg=0x00000000
[22:14:47.789]    __FlashOp=0x00000000
[22:14:47.789]    __Result=0x00000000
[22:14:47.789]  </debugvars>
[22:14:47.791]  
[22:14:47.791]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:14:47.791]    <block atomic="false" info="">
[22:14:47.791]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:14:47.791]        // -> [isSWJ <= 0x00000001]
[22:14:47.791]      __var hasDormant = __protocol & 0x00020000;
[22:14:47.791]        // -> [hasDormant <= 0x00000000]
[22:14:47.791]      __var protType   = __protocol & 0x0000FFFF;
[22:14:47.791]        // -> [protType <= 0x00000002]
[22:14:47.791]    </block>
[22:14:47.792]    <control if="protType == 1" while="" timeout="0" info="">
[22:14:47.792]      // if-block "protType == 1"
[22:14:47.792]        // =>  FALSE
[22:14:47.792]      // skip if-block "protType == 1"
[22:14:47.792]    </control>
[22:14:47.792]    <control if="protType == 2" while="" timeout="0" info="">
[22:14:47.792]      // if-block "protType == 2"
[22:14:47.792]        // =>  TRUE
[22:14:47.792]      <control if="isSWJ" while="" timeout="0" info="">
[22:14:47.792]        // if-block "isSWJ"
[22:14:47.792]          // =>  TRUE
[22:14:47.792]        <control if="hasDormant" while="" timeout="0" info="">
[22:14:47.792]          // if-block "hasDormant"
[22:14:47.792]            // =>  FALSE
[22:14:47.792]          // skip if-block "hasDormant"
[22:14:47.792]        </control>
[22:14:47.792]        <control if="!hasDormant" while="" timeout="0" info="">
[22:14:47.792]          // if-block "!hasDormant"
[22:14:47.792]            // =>  TRUE
[22:14:47.792]          <block atomic="false" info="">
[22:14:47.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:14:47.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:47.792]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:14:47.796]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:14:47.796]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:14:47.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:47.796]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:14:47.796]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:14:47.800]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:14:47.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:14:47.800]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:14:47.800]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:14:47.800]          </block>
[22:14:47.800]          // end if-block "!hasDormant"
[22:14:47.800]        </control>
[22:14:47.800]        // end if-block "isSWJ"
[22:14:47.800]      </control>
[22:14:47.800]      <control if="!isSWJ" while="" timeout="0" info="">
[22:14:47.804]        // if-block "!isSWJ"
[22:14:47.804]          // =>  FALSE
[22:14:47.804]        // skip if-block "!isSWJ"
[22:14:47.804]      </control>
[22:14:47.804]      <block atomic="false" info="">
[22:14:47.804]        ReadDP(0x0);
[22:14:47.804]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:14:47.804]      </block>
[22:14:47.804]      // end if-block "protType == 2"
[22:14:47.804]    </control>
[22:14:47.804]  </sequence>
[22:14:47.804]  
[22:14:47.808]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:14:47.808]  
[22:14:47.808]  <debugvars>
[22:14:47.808]    // Pre-defined
[22:14:47.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:47.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:47.808]    __dp=0x00000000
[22:14:47.808]    __ap=0x00000000
[22:14:47.808]    __traceout=0x00000000      (Trace Disabled)
[22:14:47.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:47.808]    __FlashAddr=0x00000000
[22:14:47.808]    __FlashLen=0x00000000
[22:14:47.808]    __FlashArg=0x00000000
[22:14:47.808]    __FlashOp=0x00000000
[22:14:47.808]    __Result=0x00000000
[22:14:47.808]  </debugvars>
[22:14:47.808]  
[22:14:47.808]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:14:47.808]    <block atomic="false" info="">
[22:14:47.808]      __var SW_DP_ABORT       = 0x0;
[22:14:47.808]        // -> [SW_DP_ABORT <= 0x00000000]
[22:14:47.808]      __var DP_CTRL_STAT      = 0x4;
[22:14:47.808]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:14:47.808]      __var DP_SELECT         = 0x8;
[22:14:47.808]        // -> [DP_SELECT <= 0x00000008]
[22:14:47.808]      __var powered_down      = 0;
[22:14:47.812]        // -> [powered_down <= 0x00000000]
[22:14:47.812]      WriteDP(DP_SELECT, 0x00000000);
[22:14:47.812]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:14:47.812]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:14:47.812]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:14:47.812]        // -> [powered_down <= 0x00000001]
[22:14:47.812]    </block>
[22:14:47.812]    <control if="powered_down" while="" timeout="0" info="">
[22:14:47.816]      // if-block "powered_down"
[22:14:47.816]        // =>  TRUE
[22:14:47.816]      <block atomic="false" info="">
[22:14:47.816]        Message(0, "Debug/System power-up request sent");
[22:14:47.819]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:14:47.822]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:14:47.822]      </block>
[22:14:47.822]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:14:47.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:14:47.822]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:14:47.822]        // while-condition  =>  FALSE
[22:14:47.822]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:14:47.822]      </control>
[22:14:47.822]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:14:47.822]        // if-block "(__protocol & 0xFFFF) == 1"
[22:14:47.822]          // =>  FALSE
[22:14:47.822]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:14:47.825]      </control>
[22:14:47.825]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:14:47.825]        // if-block "(__protocol & 0xFFFF) == 2"
[22:14:47.825]          // =>  TRUE
[22:14:47.825]        <block atomic="false" info="">
[22:14:47.825]          Message(0, "executing SWD power up");
[22:14:47.825]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:14:47.829]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:14:47.829]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:14:47.830]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:14:47.830]        </block>
[22:14:47.830]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:14:47.830]      </control>
[22:14:47.830]      // end if-block "powered_down"
[22:14:47.830]    </control>
[22:14:47.832]    <block atomic="false" info="">
[22:14:47.832]      __var DEBUG_PORT_VAL    = 0;
[22:14:47.832]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:14:47.832]      __var ACCESS_POINT_VAL  = 0;
[22:14:47.832]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:14:47.832]      __ap = 1; 
[22:14:47.833]        // -> [__ap <= 0x00000001]
[22:14:47.833]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:14:47.837]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:14:47.837]      __ap = 4;
[22:14:47.837]        // -> [__ap <= 0x00000004]
[22:14:47.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:47.841]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:14:47.841]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:14:47.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:47.843]    </block>
[22:14:47.843]    <block atomic="false" info="">
[22:14:47.843]      __var nReset = 0x80;
[22:14:47.843]        // -> [nReset <= 0x00000080]
[22:14:47.843]      __var canReadPins = 0;
[22:14:47.843]        // -> [canReadPins <= 0x00000000]
[22:14:47.843]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:14:47.846]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:14:47.846]        // -> [canReadPins <= 0x00000001]
[22:14:47.846]    </block>
[22:14:47.846]    <control if="" while="1" timeout="200" info="">
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.846]      // while "1"  (timeout="200")
[22:14:47.846]      // while-condition  =>  TRUE
[22:14:47.850]      // while "1"  (timeout="200")
[22:14:47.850]      // while  =>  TIMEOUT
[22:14:47.850]      // end while "1"
[22:14:47.850]    </control>
[22:14:47.850]    <control if="canReadPins" while="" timeout="0" info="">
[22:14:47.850]      // if-block "canReadPins"
[22:14:47.850]        // =>  TRUE
[22:14:47.850]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:14:47.850]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:14:47.850]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:14:47.850]        // while-condition  =>  FALSE
[22:14:47.850]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:14:47.850]      </control>
[22:14:47.850]      // end if-block "canReadPins"
[22:14:47.850]    </control>
[22:14:47.850]    <control if="!canReadPins" while="" timeout="0" info="">
[22:14:47.853]      // if-block "!canReadPins"
[22:14:47.853]        // =>  FALSE
[22:14:47.853]      // skip if-block "!canReadPins"
[22:14:47.853]    </control>
[22:14:47.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:14:47.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:47.853]        // =>  TRUE
[22:14:47.853]      <block atomic="false" info="">
[22:14:47.853]        WriteAP(0x00, 0x190008);
[22:14:47.855]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:47.855]        WriteAP(0xF0, 0x01);
[22:14:47.858]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:14:47.858]      </block>
[22:14:47.858]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:14:47.858]    </control>
[22:14:47.858]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:14:47.858]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:47.858]        // =>  FALSE
[22:14:47.858]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:14:47.858]    </control>
[22:14:47.858]    <block atomic="false" info="">
[22:14:47.858]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:14:47.862]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:14:47.862]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:14:47.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:14:47.866]      __ap = 0; //lets make sure we reset the access point selection
[22:14:47.866]        // -> [__ap <= 0x00000000]
[22:14:47.866]    </block>
[22:14:47.866]  </sequence>
[22:14:47.866]  
[22:14:47.882]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:14:47.882]  
[22:14:47.882]  <debugvars>
[22:14:47.882]    // Pre-defined
[22:14:47.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:14:47.882]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:14:47.882]    __dp=0x00000000
[22:14:47.882]    __ap=0x00000000
[22:14:47.882]    __traceout=0x00000000      (Trace Disabled)
[22:14:47.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:14:47.882]    __FlashAddr=0x00000000
[22:14:47.886]    __FlashLen=0x00000000
[22:14:47.886]    __FlashArg=0x00000000
[22:14:47.886]    __FlashOp=0x00000000
[22:14:47.886]    __Result=0x00000000
[22:14:47.886]  </debugvars>
[22:14:47.886]  
[22:14:47.887]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:14:47.887]    <block atomic="false" info="">
[22:14:47.887]      __var deviceID = 0;
[22:14:47.887]        // -> [deviceID <= 0x00000000]
[22:14:47.887]      __var version = 0;
[22:14:47.887]        // -> [version <= 0x00000000]
[22:14:47.887]      __var partNum = 0;
[22:14:47.887]        // -> [partNum <= 0x00000000]
[22:14:47.887]      __var manuf = 0;
[22:14:47.887]        // -> [manuf <= 0x00000000]
[22:14:47.887]      __var isMSPM0G1X0X_G3X0X = 0;
[22:14:47.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:14:47.887]      __var isProduction = 0;
[22:14:47.887]        // -> [isProduction <= 0x00000000]
[22:14:47.887]      __var continueId = 0;
[22:14:47.887]        // -> [continueId <= 0x00000000]
[22:14:47.887]      deviceID =   Read32(0x41C40004);
[22:14:47.890]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:14:47.890]        // -> [deviceID <= 0x2BB8802F]
[22:14:47.890]      version = deviceID >> 28;
[22:14:47.890]        // -> [version <= 0x00000002]
[22:14:47.894]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:14:47.894]        // -> [partNum <= 0x0000BB88]
[22:14:47.894]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:14:47.894]        // -> [manuf <= 0x00000017]
[22:14:47.894]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:14:47.894]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:14:47.894]      isProduction = (version > 0);
[22:14:47.894]        // -> [isProduction <= 0x00000001]
[22:14:47.894]    </block>
[22:14:47.894]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:14:47.894]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:14:47.894]        // =>  FALSE
[22:14:47.894]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:14:47.894]    </control>
[22:14:47.894]    <control if="continueId == 4" while="" timeout="0" info="">
[22:14:47.894]      // if-block "continueId == 4"
[22:14:47.894]        // =>  FALSE
[22:14:47.894]      // skip if-block "continueId == 4"
[22:14:47.894]    </control>
[22:14:47.894]    <control if="!isProduction" while="" timeout="0" info="">
[22:14:47.894]      // if-block "!isProduction"
[22:14:47.894]        // =>  FALSE
[22:14:47.894]      // skip if-block "!isProduction"
[22:14:47.894]    </control>
[22:14:47.894]  </sequence>
[22:14:47.894]  
[22:16:14.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:16:14.138]  
[22:16:14.138]  <debugvars>
[22:16:14.138]    // Pre-defined
[22:16:14.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:14.138]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:14.139]    __dp=0x00000000
[22:16:14.139]    __ap=0x00000000
[22:16:14.139]    __traceout=0x00000000      (Trace Disabled)
[22:16:14.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:14.139]    __FlashAddr=0x00000000
[22:16:14.139]    __FlashLen=0x00000000
[22:16:14.139]    __FlashArg=0x00000000
[22:16:14.139]    __FlashOp=0x00000000
[22:16:14.139]    __Result=0x00000000
[22:16:14.139]  </debugvars>
[22:16:14.139]  
[22:16:14.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:16:14.139]    <block atomic="false" info="">
[22:16:14.139]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:16:14.139]        // -> [isSWJ <= 0x00000001]
[22:16:14.139]      __var hasDormant = __protocol & 0x00020000;
[22:16:14.139]        // -> [hasDormant <= 0x00000000]
[22:16:14.139]      __var protType   = __protocol & 0x0000FFFF;
[22:16:14.139]        // -> [protType <= 0x00000002]
[22:16:14.139]    </block>
[22:16:14.139]    <control if="protType == 1" while="" timeout="0" info="">
[22:16:14.139]      // if-block "protType == 1"
[22:16:14.139]        // =>  FALSE
[22:16:14.139]      // skip if-block "protType == 1"
[22:16:14.139]    </control>
[22:16:14.139]    <control if="protType == 2" while="" timeout="0" info="">
[22:16:14.139]      // if-block "protType == 2"
[22:16:14.139]        // =>  TRUE
[22:16:14.139]      <control if="isSWJ" while="" timeout="0" info="">
[22:16:14.139]        // if-block "isSWJ"
[22:16:14.139]          // =>  TRUE
[22:16:14.139]        <control if="hasDormant" while="" timeout="0" info="">
[22:16:14.139]          // if-block "hasDormant"
[22:16:14.139]            // =>  FALSE
[22:16:14.139]          // skip if-block "hasDormant"
[22:16:14.139]        </control>
[22:16:14.139]        <control if="!hasDormant" while="" timeout="0" info="">
[22:16:14.139]          // if-block "!hasDormant"
[22:16:14.139]            // =>  TRUE
[22:16:14.139]          <block atomic="false" info="">
[22:16:14.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:16:14.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:14.143]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:16:14.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:16:14.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:16:14.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:14.148]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:16:14.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:16:14.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:16:14.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:14.151]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:16:14.154]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:16:14.154]          </block>
[22:16:14.154]          // end if-block "!hasDormant"
[22:16:14.154]        </control>
[22:16:14.154]        // end if-block "isSWJ"
[22:16:14.154]      </control>
[22:16:14.154]      <control if="!isSWJ" while="" timeout="0" info="">
[22:16:14.154]        // if-block "!isSWJ"
[22:16:14.154]          // =>  FALSE
[22:16:14.154]        // skip if-block "!isSWJ"
[22:16:14.154]      </control>
[22:16:14.156]      <block atomic="false" info="">
[22:16:14.156]        ReadDP(0x0);
[22:16:14.157]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:16:14.157]      </block>
[22:16:14.157]      // end if-block "protType == 2"
[22:16:14.157]    </control>
[22:16:14.157]  </sequence>
[22:16:14.157]  
[22:16:14.160]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:16:14.160]  
[22:16:14.160]  <debugvars>
[22:16:14.161]    // Pre-defined
[22:16:14.161]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:14.161]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:14.161]    __dp=0x00000000
[22:16:14.161]    __ap=0x00000000
[22:16:14.161]    __traceout=0x00000000      (Trace Disabled)
[22:16:14.161]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:14.161]    __FlashAddr=0x00000000
[22:16:14.161]    __FlashLen=0x00000000
[22:16:14.161]    __FlashArg=0x00000000
[22:16:14.161]    __FlashOp=0x00000000
[22:16:14.161]    __Result=0x00000000
[22:16:14.161]  </debugvars>
[22:16:14.161]  
[22:16:14.161]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:16:14.161]    <block atomic="false" info="">
[22:16:14.161]      __var SW_DP_ABORT       = 0x0;
[22:16:14.161]        // -> [SW_DP_ABORT <= 0x00000000]
[22:16:14.161]      __var DP_CTRL_STAT      = 0x4;
[22:16:14.161]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:16:14.161]      __var DP_SELECT         = 0x8;
[22:16:14.161]        // -> [DP_SELECT <= 0x00000008]
[22:16:14.161]      __var powered_down      = 0;
[22:16:14.161]        // -> [powered_down <= 0x00000000]
[22:16:14.161]      WriteDP(DP_SELECT, 0x00000000);
[22:16:14.165]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:16:14.165]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:16:14.166]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:16:14.166]        // -> [powered_down <= 0x00000001]
[22:16:14.166]    </block>
[22:16:14.166]    <control if="powered_down" while="" timeout="0" info="">
[22:16:14.166]      // if-block "powered_down"
[22:16:14.166]        // =>  TRUE
[22:16:14.166]      <block atomic="false" info="">
[22:16:14.166]        Message(0, "Debug/System power-up request sent");
[22:16:14.169]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:16:14.169]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:16:14.169]      </block>
[22:16:14.169]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:16:14.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:16:14.175]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:16:14.175]        // while-condition  =>  FALSE
[22:16:14.175]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:16:14.175]      </control>
[22:16:14.176]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:16:14.176]        // if-block "(__protocol & 0xFFFF) == 1"
[22:16:14.176]          // =>  FALSE
[22:16:14.176]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:16:14.176]      </control>
[22:16:14.176]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:16:14.176]        // if-block "(__protocol & 0xFFFF) == 2"
[22:16:14.176]          // =>  TRUE
[22:16:14.176]        <block atomic="false" info="">
[22:16:14.176]          Message(0, "executing SWD power up");
[22:16:14.178]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:16:14.178]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:16:14.178]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:16:14.182]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:16:14.182]        </block>
[22:16:14.182]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:16:14.182]      </control>
[22:16:14.182]      // end if-block "powered_down"
[22:16:14.182]    </control>
[22:16:14.182]    <block atomic="false" info="">
[22:16:14.182]      __var DEBUG_PORT_VAL    = 0;
[22:16:14.182]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:16:14.182]      __var ACCESS_POINT_VAL  = 0;
[22:16:14.182]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:16:14.182]      __ap = 1; 
[22:16:14.182]        // -> [__ap <= 0x00000001]
[22:16:14.182]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:16:14.186]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:16:14.186]      __ap = 4;
[22:16:14.186]        // -> [__ap <= 0x00000004]
[22:16:14.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:16:14.190]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:16:14.190]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:16:14.190]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:16:14.190]    </block>
[22:16:14.190]    <block atomic="false" info="">
[22:16:14.190]      __var nReset = 0x80;
[22:16:14.190]        // -> [nReset <= 0x00000080]
[22:16:14.190]      __var canReadPins = 0;
[22:16:14.190]        // -> [canReadPins <= 0x00000000]
[22:16:14.190]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:16:14.194]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:16:14.194]        // -> [canReadPins <= 0x00000001]
[22:16:14.194]    </block>
[22:16:14.194]    <control if="" while="1" timeout="200" info="">
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.194]      // while-condition  =>  TRUE
[22:16:14.194]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.196]      // while "1"  (timeout="200")
[22:16:14.196]      // while-condition  =>  TRUE
[22:16:14.198]      // while "1"  (timeout="200")
[22:16:14.198]      // while-condition  =>  TRUE
[22:16:14.198]      // while "1"  (timeout="200")
[22:16:14.198]      // while-condition  =>  TRUE
[22:16:14.198]      // while "1"  (timeout="200")
[22:16:14.198]      // while-condition  =>  TRUE
[22:16:14.198]      // while "1"  (timeout="200")
[22:16:14.198]      // while-condition  =>  TRUE
[22:16:14.198]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.199]      // while-condition  =>  TRUE
[22:16:14.199]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.202]      // while-condition  =>  TRUE
[22:16:14.202]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.203]      // while "1"  (timeout="200")
[22:16:14.203]      // while-condition  =>  TRUE
[22:16:14.206]      // while "1"  (timeout="200")
[22:16:14.206]      // while  =>  TIMEOUT
[22:16:14.206]      // end while "1"
[22:16:14.206]    </control>
[22:16:14.206]    <control if="canReadPins" while="" timeout="0" info="">
[22:16:14.206]      // if-block "canReadPins"
[22:16:14.206]        // =>  TRUE
[22:16:14.206]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:16:14.206]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:16:14.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:16:14.207]        // while-condition  =>  FALSE
[22:16:14.207]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:16:14.207]      </control>
[22:16:14.207]      // end if-block "canReadPins"
[22:16:14.207]    </control>
[22:16:14.207]    <control if="!canReadPins" while="" timeout="0" info="">
[22:16:14.207]      // if-block "!canReadPins"
[22:16:14.207]        // =>  FALSE
[22:16:14.210]      // skip if-block "!canReadPins"
[22:16:14.210]    </control>
[22:16:14.210]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:16:14.210]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:16:14.210]        // =>  TRUE
[22:16:14.210]      <block atomic="false" info="">
[22:16:14.210]        WriteAP(0x00, 0x190008);
[22:16:14.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:16:14.213]        WriteAP(0xF0, 0x01);
[22:16:14.215]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:16:14.215]      </block>
[22:16:14.215]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:16:14.215]    </control>
[22:16:14.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:16:14.216]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:16:14.216]        // =>  FALSE
[22:16:14.216]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:16:14.216]    </control>
[22:16:14.216]    <block atomic="false" info="">
[22:16:14.216]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:16:14.219]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:16:14.219]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:16:14.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:16:14.222]      __ap = 0; //lets make sure we reset the access point selection
[22:16:14.222]        // -> [__ap <= 0x00000000]
[22:16:14.222]    </block>
[22:16:14.222]  </sequence>
[22:16:14.222]  
[22:16:14.244]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:16:14.244]  
[22:16:14.244]  <debugvars>
[22:16:14.244]    // Pre-defined
[22:16:14.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:14.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:14.244]    __dp=0x00000000
[22:16:14.244]    __ap=0x00000000
[22:16:14.244]    __traceout=0x00000000      (Trace Disabled)
[22:16:14.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:14.244]    __FlashAddr=0x00000000
[22:16:14.244]    __FlashLen=0x00000000
[22:16:14.244]    __FlashArg=0x00000000
[22:16:14.244]    __FlashOp=0x00000000
[22:16:14.246]    __Result=0x00000000
[22:16:14.246]  </debugvars>
[22:16:14.246]  
[22:16:14.246]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:16:14.246]    <block atomic="false" info="">
[22:16:14.246]      __var deviceID = 0;
[22:16:14.246]        // -> [deviceID <= 0x00000000]
[22:16:14.246]      __var version = 0;
[22:16:14.246]        // -> [version <= 0x00000000]
[22:16:14.246]      __var partNum = 0;
[22:16:14.246]        // -> [partNum <= 0x00000000]
[22:16:14.246]      __var manuf = 0;
[22:16:14.246]        // -> [manuf <= 0x00000000]
[22:16:14.248]      __var isMSPM0G1X0X_G3X0X = 0;
[22:16:14.248]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:16:14.248]      __var isProduction = 0;
[22:16:14.248]        // -> [isProduction <= 0x00000000]
[22:16:14.248]      __var continueId = 0;
[22:16:14.248]        // -> [continueId <= 0x00000000]
[22:16:14.248]      deviceID =   Read32(0x41C40004);
[22:16:14.252]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:16:14.252]        // -> [deviceID <= 0x2BB8802F]
[22:16:14.252]      version = deviceID >> 28;
[22:16:14.252]        // -> [version <= 0x00000002]
[22:16:14.252]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:16:14.252]        // -> [partNum <= 0x0000BB88]
[22:16:14.252]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:16:14.252]        // -> [manuf <= 0x00000017]
[22:16:14.252]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:16:14.252]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:16:14.252]      isProduction = (version > 0);
[22:16:14.252]        // -> [isProduction <= 0x00000001]
[22:16:14.252]    </block>
[22:16:14.252]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:16:14.252]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:16:14.252]        // =>  FALSE
[22:16:14.252]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:16:14.252]    </control>
[22:16:14.256]    <control if="continueId == 4" while="" timeout="0" info="">
[22:16:14.256]      // if-block "continueId == 4"
[22:16:14.256]        // =>  FALSE
[22:16:14.256]      // skip if-block "continueId == 4"
[22:16:14.256]    </control>
[22:16:14.256]    <control if="!isProduction" while="" timeout="0" info="">
[22:16:14.256]      // if-block "!isProduction"
[22:16:14.256]        // =>  FALSE
[22:16:14.256]      // skip if-block "!isProduction"
[22:16:14.256]    </control>
[22:16:14.256]  </sequence>
[22:16:14.256]  
[22:16:39.836]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:16:39.836]  
[22:16:39.847]  <debugvars>
[22:16:39.847]    // Pre-defined
[22:16:39.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:39.847]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:39.847]    __dp=0x00000000
[22:16:39.847]    __ap=0x00000000
[22:16:39.847]    __traceout=0x00000000      (Trace Disabled)
[22:16:39.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:39.847]    __FlashAddr=0x00000000
[22:16:39.848]    __FlashLen=0x00000000
[22:16:39.848]    __FlashArg=0x00000000
[22:16:39.848]    __FlashOp=0x00000000
[22:16:39.848]    __Result=0x00000000
[22:16:39.848]  </debugvars>
[22:16:39.848]  
[22:16:39.848]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:16:39.848]    <block atomic="false" info="">
[22:16:39.848]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:16:39.848]        // -> [isSWJ <= 0x00000001]
[22:16:39.848]      __var hasDormant = __protocol & 0x00020000;
[22:16:39.848]        // -> [hasDormant <= 0x00000000]
[22:16:39.848]      __var protType   = __protocol & 0x0000FFFF;
[22:16:39.848]        // -> [protType <= 0x00000002]
[22:16:39.848]    </block>
[22:16:39.848]    <control if="protType == 1" while="" timeout="0" info="">
[22:16:39.848]      // if-block "protType == 1"
[22:16:39.848]        // =>  FALSE
[22:16:39.848]      // skip if-block "protType == 1"
[22:16:39.848]    </control>
[22:16:39.848]    <control if="protType == 2" while="" timeout="0" info="">
[22:16:39.848]      // if-block "protType == 2"
[22:16:39.848]        // =>  TRUE
[22:16:39.848]      <control if="isSWJ" while="" timeout="0" info="">
[22:16:39.848]        // if-block "isSWJ"
[22:16:39.848]          // =>  TRUE
[22:16:39.848]        <control if="hasDormant" while="" timeout="0" info="">
[22:16:39.848]          // if-block "hasDormant"
[22:16:39.848]            // =>  FALSE
[22:16:39.848]          // skip if-block "hasDormant"
[22:16:39.848]        </control>
[22:16:39.848]        <control if="!hasDormant" while="" timeout="0" info="">
[22:16:39.848]          // if-block "!hasDormant"
[22:16:39.848]            // =>  TRUE
[22:16:39.852]          <block atomic="false" info="">
[22:16:39.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:16:39.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:39.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:16:39.852]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:16:39.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:16:39.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:39.856]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:16:39.856]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:16:39.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:16:39.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:16:39.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:16:39.860]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:16:39.860]          </block>
[22:16:39.860]          // end if-block "!hasDormant"
[22:16:39.860]        </control>
[22:16:39.860]        // end if-block "isSWJ"
[22:16:39.860]      </control>
[22:16:39.860]      <control if="!isSWJ" while="" timeout="0" info="">
[22:16:39.860]        // if-block "!isSWJ"
[22:16:39.860]          // =>  FALSE
[22:16:39.860]        // skip if-block "!isSWJ"
[22:16:39.860]      </control>
[22:16:39.860]      <block atomic="false" info="">
[22:16:39.860]        ReadDP(0x0);
[22:16:39.860]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:16:39.864]      </block>
[22:16:39.864]      // end if-block "protType == 2"
[22:16:39.864]    </control>
[22:16:39.864]  </sequence>
[22:16:39.864]  
[22:16:39.864]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:16:39.864]  
[22:16:39.864]  <debugvars>
[22:16:39.864]    // Pre-defined
[22:16:39.864]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:39.864]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:39.864]    __dp=0x00000000
[22:16:39.864]    __ap=0x00000000
[22:16:39.868]    __traceout=0x00000000      (Trace Disabled)
[22:16:39.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:39.868]    __FlashAddr=0x00000000
[22:16:39.868]    __FlashLen=0x00000000
[22:16:39.868]    __FlashArg=0x00000000
[22:16:39.868]    __FlashOp=0x00000000
[22:16:39.868]    __Result=0x00000000
[22:16:39.868]  </debugvars>
[22:16:39.868]  
[22:16:39.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:16:39.868]    <block atomic="false" info="">
[22:16:39.868]      __var SW_DP_ABORT       = 0x0;
[22:16:39.868]        // -> [SW_DP_ABORT <= 0x00000000]
[22:16:39.868]      __var DP_CTRL_STAT      = 0x4;
[22:16:39.868]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:16:39.868]      __var DP_SELECT         = 0x8;
[22:16:39.868]        // -> [DP_SELECT <= 0x00000008]
[22:16:39.868]      __var powered_down      = 0;
[22:16:39.868]        // -> [powered_down <= 0x00000000]
[22:16:39.868]      WriteDP(DP_SELECT, 0x00000000);
[22:16:39.872]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:16:39.872]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:16:39.872]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:16:39.872]        // -> [powered_down <= 0x00000001]
[22:16:39.872]    </block>
[22:16:39.872]    <control if="powered_down" while="" timeout="0" info="">
[22:16:39.872]      // if-block "powered_down"
[22:16:39.872]        // =>  TRUE
[22:16:39.872]      <block atomic="false" info="">
[22:16:39.872]        Message(0, "Debug/System power-up request sent");
[22:16:39.876]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:16:39.880]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:16:39.880]      </block>
[22:16:39.880]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:16:39.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:16:39.880]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:16:39.880]        // while-condition  =>  FALSE
[22:16:39.880]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:16:39.880]      </control>
[22:16:39.880]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:16:39.880]        // if-block "(__protocol & 0xFFFF) == 1"
[22:16:39.880]          // =>  FALSE
[22:16:39.880]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:16:39.880]      </control>
[22:16:39.880]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:16:39.880]        // if-block "(__protocol & 0xFFFF) == 2"
[22:16:39.880]          // =>  TRUE
[22:16:39.880]        <block atomic="false" info="">
[22:16:39.880]          Message(0, "executing SWD power up");
[22:16:39.884]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:16:39.884]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:16:39.888]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:16:39.888]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:16:39.888]        </block>
[22:16:39.888]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:16:39.888]      </control>
[22:16:39.888]      // end if-block "powered_down"
[22:16:39.888]    </control>
[22:16:39.888]    <block atomic="false" info="">
[22:16:39.888]      __var DEBUG_PORT_VAL    = 0;
[22:16:39.888]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:16:39.888]      __var ACCESS_POINT_VAL  = 0;
[22:16:39.888]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:16:39.888]      __ap = 1; 
[22:16:39.888]        // -> [__ap <= 0x00000001]
[22:16:39.888]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:16:39.896]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:16:39.896]      __ap = 4;
[22:16:39.896]        // -> [__ap <= 0x00000004]
[22:16:39.896]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:16:39.896]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:16:39.896]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:16:39.900]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:16:39.900]    </block>
[22:16:39.900]    <block atomic="false" info="">
[22:16:39.900]      __var nReset = 0x80;
[22:16:39.900]        // -> [nReset <= 0x00000080]
[22:16:39.900]      __var canReadPins = 0;
[22:16:39.900]        // -> [canReadPins <= 0x00000000]
[22:16:39.900]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:16:39.904]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:16:39.904]        // -> [canReadPins <= 0x00000001]
[22:16:39.904]    </block>
[22:16:39.904]    <control if="" while="1" timeout="200" info="">
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.904]      // while "1"  (timeout="200")
[22:16:39.904]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.908]      // while "1"  (timeout="200")
[22:16:39.908]      // while-condition  =>  TRUE
[22:16:39.912]      // while "1"  (timeout="200")
[22:16:39.912]      // while  =>  TIMEOUT
[22:16:39.912]      // end while "1"
[22:16:39.912]    </control>
[22:16:39.912]    <control if="canReadPins" while="" timeout="0" info="">
[22:16:39.912]      // if-block "canReadPins"
[22:16:39.912]        // =>  TRUE
[22:16:39.912]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:16:39.912]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:16:39.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:16:39.912]        // while-condition  =>  FALSE
[22:16:39.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:16:39.912]      </control>
[22:16:39.912]      // end if-block "canReadPins"
[22:16:39.912]    </control>
[22:16:39.912]    <control if="!canReadPins" while="" timeout="0" info="">
[22:16:39.912]      // if-block "!canReadPins"
[22:16:39.912]        // =>  FALSE
[22:16:39.912]      // skip if-block "!canReadPins"
[22:16:39.912]    </control>
[22:16:39.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:16:39.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:16:39.912]        // =>  TRUE
[22:16:39.916]      <block atomic="false" info="">
[22:16:39.916]        WriteAP(0x00, 0x190008);
[22:16:39.916]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:16:39.916]        WriteAP(0xF0, 0x01);
[22:16:39.920]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:16:39.920]      </block>
[22:16:39.920]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:16:39.920]    </control>
[22:16:39.920]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:16:39.920]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:16:39.920]        // =>  FALSE
[22:16:39.920]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:16:39.920]    </control>
[22:16:39.920]    <block atomic="false" info="">
[22:16:39.920]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:16:39.924]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:16:39.924]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:16:39.924]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:16:39.924]      __ap = 0; //lets make sure we reset the access point selection
[22:16:39.924]        // -> [__ap <= 0x00000000]
[22:16:39.928]    </block>
[22:16:39.928]  </sequence>
[22:16:39.928]  
[22:16:39.948]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:16:39.948]  
[22:16:39.948]  <debugvars>
[22:16:39.948]    // Pre-defined
[22:16:39.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:16:39.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:16:39.948]    __dp=0x00000000
[22:16:39.948]    __ap=0x00000000
[22:16:39.948]    __traceout=0x00000000      (Trace Disabled)
[22:16:39.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:16:39.948]    __FlashAddr=0x00000000
[22:16:39.948]    __FlashLen=0x00000000
[22:16:39.948]    __FlashArg=0x00000000
[22:16:39.952]    __FlashOp=0x00000000
[22:16:39.952]    __Result=0x00000000
[22:16:39.952]  </debugvars>
[22:16:39.952]  
[22:16:39.952]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:16:39.952]    <block atomic="false" info="">
[22:16:39.952]      __var deviceID = 0;
[22:16:39.952]        // -> [deviceID <= 0x00000000]
[22:16:39.952]      __var version = 0;
[22:16:39.952]        // -> [version <= 0x00000000]
[22:16:39.952]      __var partNum = 0;
[22:16:39.952]        // -> [partNum <= 0x00000000]
[22:16:39.952]      __var manuf = 0;
[22:16:39.952]        // -> [manuf <= 0x00000000]
[22:16:39.952]      __var isMSPM0G1X0X_G3X0X = 0;
[22:16:39.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:16:39.952]      __var isProduction = 0;
[22:16:39.952]        // -> [isProduction <= 0x00000000]
[22:16:39.952]      __var continueId = 0;
[22:16:39.952]        // -> [continueId <= 0x00000000]
[22:16:39.952]      deviceID =   Read32(0x41C40004);
[22:16:39.956]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:16:39.956]        // -> [deviceID <= 0x2BB8802F]
[22:16:39.956]      version = deviceID >> 28;
[22:16:39.956]        // -> [version <= 0x00000002]
[22:16:39.956]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:16:39.956]        // -> [partNum <= 0x0000BB88]
[22:16:39.960]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:16:39.960]        // -> [manuf <= 0x00000017]
[22:16:39.960]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:16:39.960]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:16:39.960]      isProduction = (version > 0);
[22:16:39.960]        // -> [isProduction <= 0x00000001]
[22:16:39.960]    </block>
[22:16:39.960]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:16:39.960]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:16:39.960]        // =>  FALSE
[22:16:39.960]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:16:39.960]    </control>
[22:16:39.960]    <control if="continueId == 4" while="" timeout="0" info="">
[22:16:39.960]      // if-block "continueId == 4"
[22:16:39.960]        // =>  FALSE
[22:16:39.960]      // skip if-block "continueId == 4"
[22:16:39.960]    </control>
[22:16:39.960]    <control if="!isProduction" while="" timeout="0" info="">
[22:16:39.960]      // if-block "!isProduction"
[22:16:39.960]        // =>  FALSE
[22:16:39.960]      // skip if-block "!isProduction"
[22:16:39.960]    </control>
[22:16:39.960]  </sequence>
[22:16:39.960]  
[22:17:10.926]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:17:10.926]  
[22:17:10.926]  <debugvars>
[22:17:10.926]    // Pre-defined
[22:17:10.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:17:10.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:17:10.926]    __dp=0x00000000
[22:17:10.928]    __ap=0x00000000
[22:17:10.928]    __traceout=0x00000000      (Trace Disabled)
[22:17:10.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:17:10.928]    __FlashAddr=0x00000000
[22:17:10.928]    __FlashLen=0x00000000
[22:17:10.928]    __FlashArg=0x00000000
[22:17:10.928]    __FlashOp=0x00000000
[22:17:10.928]    __Result=0x00000000
[22:17:10.928]  </debugvars>
[22:17:10.928]  
[22:17:10.928]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:17:10.928]    <block atomic="false" info="">
[22:17:10.928]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:17:10.928]        // -> [isSWJ <= 0x00000001]
[22:17:10.928]      __var hasDormant = __protocol & 0x00020000;
[22:17:10.928]        // -> [hasDormant <= 0x00000000]
[22:17:10.928]      __var protType   = __protocol & 0x0000FFFF;
[22:17:10.928]        // -> [protType <= 0x00000002]
[22:17:10.928]    </block>
[22:17:10.928]    <control if="protType == 1" while="" timeout="0" info="">
[22:17:10.928]      // if-block "protType == 1"
[22:17:10.928]        // =>  FALSE
[22:17:10.930]      // skip if-block "protType == 1"
[22:17:10.930]    </control>
[22:17:10.930]    <control if="protType == 2" while="" timeout="0" info="">
[22:17:10.930]      // if-block "protType == 2"
[22:17:10.930]        // =>  TRUE
[22:17:10.930]      <control if="isSWJ" while="" timeout="0" info="">
[22:17:10.930]        // if-block "isSWJ"
[22:17:10.930]          // =>  TRUE
[22:17:10.930]        <control if="hasDormant" while="" timeout="0" info="">
[22:17:10.930]          // if-block "hasDormant"
[22:17:10.930]            // =>  FALSE
[22:17:10.930]          // skip if-block "hasDormant"
[22:17:10.930]        </control>
[22:17:10.930]        <control if="!hasDormant" while="" timeout="0" info="">
[22:17:10.930]          // if-block "!hasDormant"
[22:17:10.930]            // =>  TRUE
[22:17:10.932]          <block atomic="false" info="">
[22:17:10.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:17:10.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:17:10.932]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:17:10.932]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:17:10.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:17:10.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:17:10.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:17:10.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:17:10.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:17:10.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:17:10.939]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:17:10.941]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:17:10.941]          </block>
[22:17:10.941]          // end if-block "!hasDormant"
[22:17:10.941]        </control>
[22:17:10.941]        // end if-block "isSWJ"
[22:17:10.941]      </control>
[22:17:10.941]      <control if="!isSWJ" while="" timeout="0" info="">
[22:17:10.941]        // if-block "!isSWJ"
[22:17:10.941]          // =>  FALSE
[22:17:10.941]        // skip if-block "!isSWJ"
[22:17:10.941]      </control>
[22:17:10.941]      <block atomic="false" info="">
[22:17:10.941]        ReadDP(0x0);
[22:17:10.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:17:10.943]      </block>
[22:17:10.943]      // end if-block "protType == 2"
[22:17:10.943]    </control>
[22:17:10.943]  </sequence>
[22:17:10.943]  
[22:17:10.947]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:17:10.947]  
[22:17:10.947]  <debugvars>
[22:17:10.947]    // Pre-defined
[22:17:10.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:17:10.947]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:17:10.947]    __dp=0x00000000
[22:17:10.947]    __ap=0x00000000
[22:17:10.947]    __traceout=0x00000000      (Trace Disabled)
[22:17:10.947]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:17:10.947]    __FlashAddr=0x00000000
[22:17:10.947]    __FlashLen=0x00000000
[22:17:10.947]    __FlashArg=0x00000000
[22:17:10.947]    __FlashOp=0x00000000
[22:17:10.947]    __Result=0x00000000
[22:17:10.947]  </debugvars>
[22:17:10.947]  
[22:17:10.947]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:17:10.947]    <block atomic="false" info="">
[22:17:10.947]      __var SW_DP_ABORT       = 0x0;
[22:17:10.947]        // -> [SW_DP_ABORT <= 0x00000000]
[22:17:10.947]      __var DP_CTRL_STAT      = 0x4;
[22:17:10.947]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:17:10.947]      __var DP_SELECT         = 0x8;
[22:17:10.947]        // -> [DP_SELECT <= 0x00000008]
[22:17:10.947]      __var powered_down      = 0;
[22:17:10.947]        // -> [powered_down <= 0x00000000]
[22:17:10.947]      WriteDP(DP_SELECT, 0x00000000);
[22:17:10.951]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:17:10.951]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:17:10.953]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:17:10.953]        // -> [powered_down <= 0x00000001]
[22:17:10.953]    </block>
[22:17:10.953]    <control if="powered_down" while="" timeout="0" info="">
[22:17:10.953]      // if-block "powered_down"
[22:17:10.953]        // =>  TRUE
[22:17:10.953]      <block atomic="false" info="">
[22:17:10.953]        Message(0, "Debug/System power-up request sent");
[22:17:10.956]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:17:10.956]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:17:10.956]      </block>
[22:17:10.956]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:17:10.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:17:10.960]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:17:10.960]        // while-condition  =>  FALSE
[22:17:10.960]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:17:10.960]      </control>
[22:17:10.960]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:17:10.961]        // if-block "(__protocol & 0xFFFF) == 1"
[22:17:10.961]          // =>  FALSE
[22:17:10.961]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:17:10.961]      </control>
[22:17:10.961]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:17:10.961]        // if-block "(__protocol & 0xFFFF) == 2"
[22:17:10.961]          // =>  TRUE
[22:17:10.961]        <block atomic="false" info="">
[22:17:10.961]          Message(0, "executing SWD power up");
[22:17:10.961]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:17:10.964]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:17:10.964]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:17:10.967]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:17:10.967]        </block>
[22:17:10.967]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:17:10.967]      </control>
[22:17:10.967]      // end if-block "powered_down"
[22:17:10.967]    </control>
[22:17:10.967]    <block atomic="false" info="">
[22:17:10.967]      __var DEBUG_PORT_VAL    = 0;
[22:17:10.967]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:17:10.967]      __var ACCESS_POINT_VAL  = 0;
[22:17:10.967]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:17:10.967]      __ap = 1; 
[22:17:10.967]        // -> [__ap <= 0x00000001]
[22:17:10.968]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:17:10.972]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:17:10.972]      __ap = 4;
[22:17:10.972]        // -> [__ap <= 0x00000004]
[22:17:10.972]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:17:10.974]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:17:10.974]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:17:10.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:17:10.977]    </block>
[22:17:10.977]    <block atomic="false" info="">
[22:17:10.977]      __var nReset = 0x80;
[22:17:10.977]        // -> [nReset <= 0x00000080]
[22:17:10.977]      __var canReadPins = 0;
[22:17:10.977]        // -> [canReadPins <= 0x00000000]
[22:17:10.977]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:17:10.977]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:17:10.977]        // -> [canReadPins <= 0x00000001]
[22:17:10.977]    </block>
[22:17:10.977]    <control if="" while="1" timeout="200" info="">
[22:17:10.977]      // while "1"  (timeout="200")
[22:17:10.977]      // while-condition  =>  TRUE
[22:17:10.977]      // while "1"  (timeout="200")
[22:17:10.977]      // while-condition  =>  TRUE
[22:17:10.977]      // while "1"  (timeout="200")
[22:17:10.977]      // while-condition  =>  TRUE
[22:17:10.977]      // while "1"  (timeout="200")
[22:17:10.977]      // while-condition  =>  TRUE
[22:17:10.977]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.981]      // while "1"  (timeout="200")
[22:17:10.981]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.985]      // while "1"  (timeout="200")
[22:17:10.985]      // while-condition  =>  TRUE
[22:17:10.989]      // while "1"  (timeout="200")
[22:17:10.989]      // while  =>  TIMEOUT
[22:17:10.989]      // end while "1"
[22:17:10.989]    </control>
[22:17:10.989]    <control if="canReadPins" while="" timeout="0" info="">
[22:17:10.989]      // if-block "canReadPins"
[22:17:10.989]        // =>  TRUE
[22:17:10.989]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:17:10.989]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:17:10.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:17:10.991]        // while-condition  =>  FALSE
[22:17:10.991]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:17:10.991]      </control>
[22:17:10.991]      // end if-block "canReadPins"
[22:17:10.991]    </control>
[22:17:10.991]    <control if="!canReadPins" while="" timeout="0" info="">
[22:17:10.991]      // if-block "!canReadPins"
[22:17:10.991]        // =>  FALSE
[22:17:10.991]      // skip if-block "!canReadPins"
[22:17:10.991]    </control>
[22:17:10.991]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:17:10.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:17:10.993]        // =>  TRUE
[22:17:10.993]      <block atomic="false" info="">
[22:17:10.993]        WriteAP(0x00, 0x190008);
[22:17:10.993]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:17:10.993]        WriteAP(0xF0, 0x01);
[22:17:10.997]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:17:10.997]      </block>
[22:17:10.997]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:17:10.997]    </control>
[22:17:10.997]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:17:10.997]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:17:10.997]        // =>  FALSE
[22:17:10.997]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:17:10.997]    </control>
[22:17:10.997]    <block atomic="false" info="">
[22:17:10.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:17:11.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:17:11.004]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:17:11.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:17:11.004]      __ap = 0; //lets make sure we reset the access point selection
[22:17:11.004]        // -> [__ap <= 0x00000000]
[22:17:11.006]    </block>
[22:17:11.006]  </sequence>
[22:17:11.006]  
[22:17:11.030]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:17:11.030]  
[22:17:11.030]  <debugvars>
[22:17:11.030]    // Pre-defined
[22:17:11.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:17:11.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:17:11.030]    __dp=0x00000000
[22:17:11.030]    __ap=0x00000000
[22:17:11.030]    __traceout=0x00000000      (Trace Disabled)
[22:17:11.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:17:11.031]    __FlashAddr=0x00000000
[22:17:11.031]    __FlashLen=0x00000000
[22:17:11.031]    __FlashArg=0x00000000
[22:17:11.031]    __FlashOp=0x00000000
[22:17:11.031]    __Result=0x00000000
[22:17:11.031]  </debugvars>
[22:17:11.031]  
[22:17:11.031]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:17:11.031]    <block atomic="false" info="">
[22:17:11.031]      __var deviceID = 0;
[22:17:11.031]        // -> [deviceID <= 0x00000000]
[22:17:11.031]      __var version = 0;
[22:17:11.031]        // -> [version <= 0x00000000]
[22:17:11.031]      __var partNum = 0;
[22:17:11.031]        // -> [partNum <= 0x00000000]
[22:17:11.031]      __var manuf = 0;
[22:17:11.031]        // -> [manuf <= 0x00000000]
[22:17:11.031]      __var isMSPM0G1X0X_G3X0X = 0;
[22:17:11.033]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:17:11.033]      __var isProduction = 0;
[22:17:11.033]        // -> [isProduction <= 0x00000000]
[22:17:11.033]      __var continueId = 0;
[22:17:11.033]        // -> [continueId <= 0x00000000]
[22:17:11.033]      deviceID =   Read32(0x41C40004);
[22:17:11.038]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:17:11.038]        // -> [deviceID <= 0x2BB8802F]
[22:17:11.042]      version = deviceID >> 28;
[22:17:11.042]        // -> [version <= 0x00000002]
[22:17:11.042]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:17:11.042]        // -> [partNum <= 0x0000BB88]
[22:17:11.042]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:17:11.042]        // -> [manuf <= 0x00000017]
[22:17:11.042]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:17:11.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:17:11.042]      isProduction = (version > 0);
[22:17:11.042]        // -> [isProduction <= 0x00000001]
[22:17:11.042]    </block>
[22:17:11.042]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:17:11.042]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:17:11.042]        // =>  FALSE
[22:17:11.042]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:17:11.042]    </control>
[22:17:11.042]    <control if="continueId == 4" while="" timeout="0" info="">
[22:17:11.042]      // if-block "continueId == 4"
[22:17:11.042]        // =>  FALSE
[22:17:11.042]      // skip if-block "continueId == 4"
[22:17:11.042]    </control>
[22:17:11.042]    <control if="!isProduction" while="" timeout="0" info="">
[22:17:11.042]      // if-block "!isProduction"
[22:17:11.042]        // =>  FALSE
[22:17:11.042]      // skip if-block "!isProduction"
[22:17:11.042]    </control>
[22:17:11.042]  </sequence>
[22:17:11.042]  
[22:18:01.279]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:18:01.279]  
[22:18:01.279]  <debugvars>
[22:18:01.279]    // Pre-defined
[22:18:01.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:01.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:01.279]    __dp=0x00000000
[22:18:01.279]    __ap=0x00000000
[22:18:01.279]    __traceout=0x00000000      (Trace Disabled)
[22:18:01.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:01.279]    __FlashAddr=0x00000000
[22:18:01.279]    __FlashLen=0x00000000
[22:18:01.279]    __FlashArg=0x00000000
[22:18:01.279]    __FlashOp=0x00000000
[22:18:01.279]    __Result=0x00000000
[22:18:01.279]  </debugvars>
[22:18:01.279]  
[22:18:01.279]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:18:01.279]    <block atomic="false" info="">
[22:18:01.279]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:18:01.279]        // -> [isSWJ <= 0x00000001]
[22:18:01.279]      __var hasDormant = __protocol & 0x00020000;
[22:18:01.279]        // -> [hasDormant <= 0x00000000]
[22:18:01.279]      __var protType   = __protocol & 0x0000FFFF;
[22:18:01.283]        // -> [protType <= 0x00000002]
[22:18:01.283]    </block>
[22:18:01.283]    <control if="protType == 1" while="" timeout="0" info="">
[22:18:01.283]      // if-block "protType == 1"
[22:18:01.283]        // =>  FALSE
[22:18:01.283]      // skip if-block "protType == 1"
[22:18:01.283]    </control>
[22:18:01.283]    <control if="protType == 2" while="" timeout="0" info="">
[22:18:01.283]      // if-block "protType == 2"
[22:18:01.283]        // =>  TRUE
[22:18:01.283]      <control if="isSWJ" while="" timeout="0" info="">
[22:18:01.283]        // if-block "isSWJ"
[22:18:01.283]          // =>  TRUE
[22:18:01.283]        <control if="hasDormant" while="" timeout="0" info="">
[22:18:01.283]          // if-block "hasDormant"
[22:18:01.283]            // =>  FALSE
[22:18:01.283]          // skip if-block "hasDormant"
[22:18:01.283]        </control>
[22:18:01.283]        <control if="!hasDormant" while="" timeout="0" info="">
[22:18:01.283]          // if-block "!hasDormant"
[22:18:01.283]            // =>  TRUE
[22:18:01.283]          <block atomic="false" info="">
[22:18:01.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:18:01.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:01.286]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:18:01.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:18:01.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:18:01.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:01.290]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:18:01.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:18:01.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:18:01.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:01.296]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:18:01.301]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:18:01.301]          </block>
[22:18:01.301]          // end if-block "!hasDormant"
[22:18:01.301]        </control>
[22:18:01.301]        // end if-block "isSWJ"
[22:18:01.301]      </control>
[22:18:01.301]      <control if="!isSWJ" while="" timeout="0" info="">
[22:18:01.301]        // if-block "!isSWJ"
[22:18:01.301]          // =>  FALSE
[22:18:01.301]        // skip if-block "!isSWJ"
[22:18:01.301]      </control>
[22:18:01.301]      <block atomic="false" info="">
[22:18:01.301]        ReadDP(0x0);
[22:18:01.303]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:18:01.303]      </block>
[22:18:01.303]      // end if-block "protType == 2"
[22:18:01.303]    </control>
[22:18:01.303]  </sequence>
[22:18:01.303]  
[22:18:01.306]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:18:01.306]  
[22:18:01.306]  <debugvars>
[22:18:01.306]    // Pre-defined
[22:18:01.306]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:01.306]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:01.306]    __dp=0x00000000
[22:18:01.306]    __ap=0x00000000
[22:18:01.306]    __traceout=0x00000000      (Trace Disabled)
[22:18:01.306]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:01.306]    __FlashAddr=0x00000000
[22:18:01.306]    __FlashLen=0x00000000
[22:18:01.306]    __FlashArg=0x00000000
[22:18:01.306]    __FlashOp=0x00000000
[22:18:01.306]    __Result=0x00000000
[22:18:01.306]  </debugvars>
[22:18:01.306]  
[22:18:01.306]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:18:01.306]    <block atomic="false" info="">
[22:18:01.306]      __var SW_DP_ABORT       = 0x0;
[22:18:01.306]        // -> [SW_DP_ABORT <= 0x00000000]
[22:18:01.306]      __var DP_CTRL_STAT      = 0x4;
[22:18:01.306]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:18:01.306]      __var DP_SELECT         = 0x8;
[22:18:01.306]        // -> [DP_SELECT <= 0x00000008]
[22:18:01.306]      __var powered_down      = 0;
[22:18:01.306]        // -> [powered_down <= 0x00000000]
[22:18:01.306]      WriteDP(DP_SELECT, 0x00000000);
[22:18:01.310]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:18:01.310]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:18:01.311]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:18:01.311]        // -> [powered_down <= 0x00000001]
[22:18:01.311]    </block>
[22:18:01.311]    <control if="powered_down" while="" timeout="0" info="">
[22:18:01.311]      // if-block "powered_down"
[22:18:01.311]        // =>  TRUE
[22:18:01.311]      <block atomic="false" info="">
[22:18:01.311]        Message(0, "Debug/System power-up request sent");
[22:18:01.314]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:18:01.316]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:18:01.316]      </block>
[22:18:01.316]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:18:01.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:18:01.318]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:18:01.318]        // while-condition  =>  FALSE
[22:18:01.318]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:18:01.318]      </control>
[22:18:01.318]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:18:01.318]        // if-block "(__protocol & 0xFFFF) == 1"
[22:18:01.318]          // =>  FALSE
[22:18:01.318]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:18:01.318]      </control>
[22:18:01.318]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:18:01.318]        // if-block "(__protocol & 0xFFFF) == 2"
[22:18:01.318]          // =>  TRUE
[22:18:01.318]        <block atomic="false" info="">
[22:18:01.318]          Message(0, "executing SWD power up");
[22:18:01.322]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:18:01.325]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:18:01.325]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:18:01.327]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:18:01.327]        </block>
[22:18:01.327]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:18:01.327]      </control>
[22:18:01.327]      // end if-block "powered_down"
[22:18:01.327]    </control>
[22:18:01.327]    <block atomic="false" info="">
[22:18:01.327]      __var DEBUG_PORT_VAL    = 0;
[22:18:01.327]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:18:01.327]      __var ACCESS_POINT_VAL  = 0;
[22:18:01.327]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:18:01.327]      __ap = 1; 
[22:18:01.327]        // -> [__ap <= 0x00000001]
[22:18:01.327]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:18:01.331]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:18:01.331]      __ap = 4;
[22:18:01.331]        // -> [__ap <= 0x00000004]
[22:18:01.331]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:18:01.335]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:18:01.335]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:18:01.335]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:18:01.336]    </block>
[22:18:01.336]    <block atomic="false" info="">
[22:18:01.336]      __var nReset = 0x80;
[22:18:01.336]        // -> [nReset <= 0x00000080]
[22:18:01.336]      __var canReadPins = 0;
[22:18:01.336]        // -> [canReadPins <= 0x00000000]
[22:18:01.336]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:18:01.339]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:18:01.339]        // -> [canReadPins <= 0x00000001]
[22:18:01.339]    </block>
[22:18:01.339]    <control if="" while="1" timeout="200" info="">
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.339]      // while "1"  (timeout="200")
[22:18:01.339]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.341]      // while "1"  (timeout="200")
[22:18:01.341]      // while-condition  =>  TRUE
[22:18:01.342]      // while "1"  (timeout="200")
[22:18:01.342]      // while-condition  =>  TRUE
[22:18:01.342]      // while "1"  (timeout="200")
[22:18:01.342]      // while-condition  =>  TRUE
[22:18:01.342]      // while "1"  (timeout="200")
[22:18:01.342]      // while-condition  =>  TRUE
[22:18:01.342]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.343]      // while-condition  =>  TRUE
[22:18:01.343]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.345]      // while-condition  =>  TRUE
[22:18:01.345]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.346]      // while-condition  =>  TRUE
[22:18:01.346]      // while "1"  (timeout="200")
[22:18:01.348]      // while-condition  =>  TRUE
[22:18:01.348]      // while "1"  (timeout="200")
[22:18:01.348]      // while  =>  TIMEOUT
[22:18:01.348]      // end while "1"
[22:18:01.348]    </control>
[22:18:01.348]    <control if="canReadPins" while="" timeout="0" info="">
[22:18:01.348]      // if-block "canReadPins"
[22:18:01.348]        // =>  TRUE
[22:18:01.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:18:01.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:18:01.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:18:01.349]        // while-condition  =>  FALSE
[22:18:01.349]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:18:01.349]      </control>
[22:18:01.349]      // end if-block "canReadPins"
[22:18:01.349]    </control>
[22:18:01.349]    <control if="!canReadPins" while="" timeout="0" info="">
[22:18:01.349]      // if-block "!canReadPins"
[22:18:01.349]        // =>  FALSE
[22:18:01.352]      // skip if-block "!canReadPins"
[22:18:01.352]    </control>
[22:18:01.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:18:01.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:18:01.352]        // =>  TRUE
[22:18:01.352]      <block atomic="false" info="">
[22:18:01.352]        WriteAP(0x00, 0x190008);
[22:18:01.354]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:18:01.354]        WriteAP(0xF0, 0x01);
[22:18:01.356]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:18:01.356]      </block>
[22:18:01.356]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:18:01.356]    </control>
[22:18:01.356]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:18:01.356]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:18:01.356]        // =>  FALSE
[22:18:01.356]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:18:01.356]    </control>
[22:18:01.356]    <block atomic="false" info="">
[22:18:01.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:18:01.362]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:18:01.362]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:18:01.362]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:18:01.362]      __ap = 0; //lets make sure we reset the access point selection
[22:18:01.362]        // -> [__ap <= 0x00000000]
[22:18:01.362]    </block>
[22:18:01.362]  </sequence>
[22:18:01.364]  
[22:18:01.381]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:18:01.381]  
[22:18:01.381]  <debugvars>
[22:18:01.381]    // Pre-defined
[22:18:01.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:01.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:01.381]    __dp=0x00000000
[22:18:01.381]    __ap=0x00000000
[22:18:01.381]    __traceout=0x00000000      (Trace Disabled)
[22:18:01.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:01.381]    __FlashAddr=0x00000000
[22:18:01.381]    __FlashLen=0x00000000
[22:18:01.381]    __FlashArg=0x00000000
[22:18:01.381]    __FlashOp=0x00000000
[22:18:01.381]    __Result=0x00000000
[22:18:01.385]  </debugvars>
[22:18:01.385]  
[22:18:01.385]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:18:01.385]    <block atomic="false" info="">
[22:18:01.385]      __var deviceID = 0;
[22:18:01.385]        // -> [deviceID <= 0x00000000]
[22:18:01.385]      __var version = 0;
[22:18:01.385]        // -> [version <= 0x00000000]
[22:18:01.385]      __var partNum = 0;
[22:18:01.385]        // -> [partNum <= 0x00000000]
[22:18:01.385]      __var manuf = 0;
[22:18:01.385]        // -> [manuf <= 0x00000000]
[22:18:01.385]      __var isMSPM0G1X0X_G3X0X = 0;
[22:18:01.385]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:18:01.385]      __var isProduction = 0;
[22:18:01.385]        // -> [isProduction <= 0x00000000]
[22:18:01.386]      __var continueId = 0;
[22:18:01.386]        // -> [continueId <= 0x00000000]
[22:18:01.386]      deviceID =   Read32(0x41C40004);
[22:18:01.389]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:18:01.389]        // -> [deviceID <= 0x2BB8802F]
[22:18:01.389]      version = deviceID >> 28;
[22:18:01.389]        // -> [version <= 0x00000002]
[22:18:01.389]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:18:01.389]        // -> [partNum <= 0x0000BB88]
[22:18:01.389]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:18:01.389]        // -> [manuf <= 0x00000017]
[22:18:01.389]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:18:01.389]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:18:01.393]      isProduction = (version > 0);
[22:18:01.393]        // -> [isProduction <= 0x00000001]
[22:18:01.393]    </block>
[22:18:01.393]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:18:01.393]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:18:01.393]        // =>  FALSE
[22:18:01.393]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:18:01.393]    </control>
[22:18:01.393]    <control if="continueId == 4" while="" timeout="0" info="">
[22:18:01.393]      // if-block "continueId == 4"
[22:18:01.393]        // =>  FALSE
[22:18:01.393]      // skip if-block "continueId == 4"
[22:18:01.393]    </control>
[22:18:01.393]    <control if="!isProduction" while="" timeout="0" info="">
[22:18:01.393]      // if-block "!isProduction"
[22:18:01.393]        // =>  FALSE
[22:18:01.393]      // skip if-block "!isProduction"
[22:18:01.393]    </control>
[22:18:01.393]  </sequence>
[22:18:01.393]  
[22:18:42.058]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:18:42.058]  
[22:18:42.061]  <debugvars>
[22:18:42.061]    // Pre-defined
[22:18:42.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:42.062]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:42.062]    __dp=0x00000000
[22:18:42.062]    __ap=0x00000000
[22:18:42.062]    __traceout=0x00000000      (Trace Disabled)
[22:18:42.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:42.062]    __FlashAddr=0x00000000
[22:18:42.062]    __FlashLen=0x00000000
[22:18:42.062]    __FlashArg=0x00000000
[22:18:42.062]    __FlashOp=0x00000000
[22:18:42.062]    __Result=0x00000000
[22:18:42.062]  </debugvars>
[22:18:42.062]  
[22:18:42.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:18:42.062]    <block atomic="false" info="">
[22:18:42.063]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:18:42.063]        // -> [isSWJ <= 0x00000001]
[22:18:42.063]      __var hasDormant = __protocol & 0x00020000;
[22:18:42.063]        // -> [hasDormant <= 0x00000000]
[22:18:42.063]      __var protType   = __protocol & 0x0000FFFF;
[22:18:42.063]        // -> [protType <= 0x00000002]
[22:18:42.063]    </block>
[22:18:42.063]    <control if="protType == 1" while="" timeout="0" info="">
[22:18:42.063]      // if-block "protType == 1"
[22:18:42.063]        // =>  FALSE
[22:18:42.063]      // skip if-block "protType == 1"
[22:18:42.063]    </control>
[22:18:42.063]    <control if="protType == 2" while="" timeout="0" info="">
[22:18:42.064]      // if-block "protType == 2"
[22:18:42.064]        // =>  TRUE
[22:18:42.064]      <control if="isSWJ" while="" timeout="0" info="">
[22:18:42.064]        // if-block "isSWJ"
[22:18:42.064]          // =>  TRUE
[22:18:42.064]        <control if="hasDormant" while="" timeout="0" info="">
[22:18:42.064]          // if-block "hasDormant"
[22:18:42.064]            // =>  FALSE
[22:18:42.064]          // skip if-block "hasDormant"
[22:18:42.064]        </control>
[22:18:42.064]        <control if="!hasDormant" while="" timeout="0" info="">
[22:18:42.064]          // if-block "!hasDormant"
[22:18:42.064]            // =>  TRUE
[22:18:42.064]          <block atomic="false" info="">
[22:18:42.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:18:42.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:42.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:18:42.068]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:18:42.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:18:42.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:42.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:18:42.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:18:42.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:18:42.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:18:42.074]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:18:42.074]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:18:42.074]          </block>
[22:18:42.074]          // end if-block "!hasDormant"
[22:18:42.074]        </control>
[22:18:42.074]        // end if-block "isSWJ"
[22:18:42.074]      </control>
[22:18:42.074]      <control if="!isSWJ" while="" timeout="0" info="">
[22:18:42.074]        // if-block "!isSWJ"
[22:18:42.074]          // =>  FALSE
[22:18:42.078]        // skip if-block "!isSWJ"
[22:18:42.078]      </control>
[22:18:42.078]      <block atomic="false" info="">
[22:18:42.079]        ReadDP(0x0);
[22:18:42.079]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:18:42.079]      </block>
[22:18:42.079]      // end if-block "protType == 2"
[22:18:42.079]    </control>
[22:18:42.079]  </sequence>
[22:18:42.079]  
[22:18:42.086]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:18:42.086]  
[22:18:42.086]  <debugvars>
[22:18:42.086]    // Pre-defined
[22:18:42.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:42.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:42.086]    __dp=0x00000000
[22:18:42.086]    __ap=0x00000000
[22:18:42.086]    __traceout=0x00000000      (Trace Disabled)
[22:18:42.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:42.087]    __FlashAddr=0x00000000
[22:18:42.087]    __FlashLen=0x00000000
[22:18:42.087]    __FlashArg=0x00000000
[22:18:42.087]    __FlashOp=0x00000000
[22:18:42.087]    __Result=0x00000000
[22:18:42.087]  </debugvars>
[22:18:42.087]  
[22:18:42.087]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:18:42.087]    <block atomic="false" info="">
[22:18:42.087]      __var SW_DP_ABORT       = 0x0;
[22:18:42.087]        // -> [SW_DP_ABORT <= 0x00000000]
[22:18:42.087]      __var DP_CTRL_STAT      = 0x4;
[22:18:42.087]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:18:42.087]      __var DP_SELECT         = 0x8;
[22:18:42.087]        // -> [DP_SELECT <= 0x00000008]
[22:18:42.087]      __var powered_down      = 0;
[22:18:42.087]        // -> [powered_down <= 0x00000000]
[22:18:42.087]      WriteDP(DP_SELECT, 0x00000000);
[22:18:42.087]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:18:42.087]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:18:42.091]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:18:42.091]        // -> [powered_down <= 0x00000001]
[22:18:42.091]    </block>
[22:18:42.091]    <control if="powered_down" while="" timeout="0" info="">
[22:18:42.091]      // if-block "powered_down"
[22:18:42.091]        // =>  TRUE
[22:18:42.091]      <block atomic="false" info="">
[22:18:42.091]        Message(0, "Debug/System power-up request sent");
[22:18:42.094]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:18:42.099]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:18:42.101]      </block>
[22:18:42.101]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:18:42.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:18:42.101]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:18:42.101]        // while-condition  =>  FALSE
[22:18:42.101]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:18:42.101]      </control>
[22:18:42.101]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:18:42.101]        // if-block "(__protocol & 0xFFFF) == 1"
[22:18:42.101]          // =>  FALSE
[22:18:42.103]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:18:42.103]      </control>
[22:18:42.103]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:18:42.103]        // if-block "(__protocol & 0xFFFF) == 2"
[22:18:42.103]          // =>  TRUE
[22:18:42.103]        <block atomic="false" info="">
[22:18:42.103]          Message(0, "executing SWD power up");
[22:18:42.106]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:18:42.108]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:18:42.108]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:18:42.109]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:18:42.109]        </block>
[22:18:42.109]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:18:42.109]      </control>
[22:18:42.109]      // end if-block "powered_down"
[22:18:42.109]    </control>
[22:18:42.109]    <block atomic="false" info="">
[22:18:42.109]      __var DEBUG_PORT_VAL    = 0;
[22:18:42.109]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:18:42.109]      __var ACCESS_POINT_VAL  = 0;
[22:18:42.109]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:18:42.109]      __ap = 1; 
[22:18:42.111]        // -> [__ap <= 0x00000001]
[22:18:42.111]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:18:42.113]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:18:42.113]      __ap = 4;
[22:18:42.113]        // -> [__ap <= 0x00000004]
[22:18:42.113]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:18:42.116]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:18:42.116]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:18:42.118]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:18:42.120]    </block>
[22:18:42.120]    <block atomic="false" info="">
[22:18:42.120]      __var nReset = 0x80;
[22:18:42.120]        // -> [nReset <= 0x00000080]
[22:18:42.120]      __var canReadPins = 0;
[22:18:42.120]        // -> [canReadPins <= 0x00000000]
[22:18:42.120]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:18:42.122]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:18:42.122]        // -> [canReadPins <= 0x00000001]
[22:18:42.122]    </block>
[22:18:42.122]    <control if="" while="1" timeout="200" info="">
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.122]      // while "1"  (timeout="200")
[22:18:42.122]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.124]      // while "1"  (timeout="200")
[22:18:42.124]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.126]      // while-condition  =>  TRUE
[22:18:42.126]      // while "1"  (timeout="200")
[22:18:42.128]      // while-condition  =>  TRUE
[22:18:42.128]      // while "1"  (timeout="200")
[22:18:42.128]      // while  =>  TIMEOUT
[22:18:42.128]      // end while "1"
[22:18:42.128]    </control>
[22:18:42.128]    <control if="canReadPins" while="" timeout="0" info="">
[22:18:42.128]      // if-block "canReadPins"
[22:18:42.128]        // =>  TRUE
[22:18:42.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:18:42.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:18:42.128]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:18:42.131]        // while-condition  =>  FALSE
[22:18:42.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:18:42.131]      </control>
[22:18:42.131]      // end if-block "canReadPins"
[22:18:42.131]    </control>
[22:18:42.131]    <control if="!canReadPins" while="" timeout="0" info="">
[22:18:42.131]      // if-block "!canReadPins"
[22:18:42.132]        // =>  FALSE
[22:18:42.132]      // skip if-block "!canReadPins"
[22:18:42.132]    </control>
[22:18:42.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:18:42.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:18:42.132]        // =>  TRUE
[22:18:42.132]      <block atomic="false" info="">
[22:18:42.132]        WriteAP(0x00, 0x190008);
[22:18:42.132]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:18:42.132]        WriteAP(0xF0, 0x01);
[22:18:42.136]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:18:42.136]      </block>
[22:18:42.136]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:18:42.136]    </control>
[22:18:42.136]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:18:42.136]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:18:42.136]        // =>  FALSE
[22:18:42.136]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:18:42.136]    </control>
[22:18:42.136]    <block atomic="false" info="">
[22:18:42.136]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:18:42.141]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:18:42.141]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:18:42.141]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:18:42.145]      __ap = 0; //lets make sure we reset the access point selection
[22:18:42.145]        // -> [__ap <= 0x00000000]
[22:18:42.145]    </block>
[22:18:42.145]  </sequence>
[22:18:42.145]  
[22:18:42.169]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:18:42.171]  
[22:18:42.171]  <debugvars>
[22:18:42.171]    // Pre-defined
[22:18:42.171]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:18:42.171]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:18:42.171]    __dp=0x00000000
[22:18:42.171]    __ap=0x00000000
[22:18:42.171]    __traceout=0x00000000      (Trace Disabled)
[22:18:42.171]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:18:42.171]    __FlashAddr=0x00000000
[22:18:42.171]    __FlashLen=0x00000000
[22:18:42.171]    __FlashArg=0x00000000
[22:18:42.171]    __FlashOp=0x00000000
[22:18:42.171]    __Result=0x00000000
[22:18:42.171]  </debugvars>
[22:18:42.171]  
[22:18:42.171]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:18:42.173]    <block atomic="false" info="">
[22:18:42.173]      __var deviceID = 0;
[22:18:42.173]        // -> [deviceID <= 0x00000000]
[22:18:42.173]      __var version = 0;
[22:18:42.173]        // -> [version <= 0x00000000]
[22:18:42.173]      __var partNum = 0;
[22:18:42.173]        // -> [partNum <= 0x00000000]
[22:18:42.173]      __var manuf = 0;
[22:18:42.173]        // -> [manuf <= 0x00000000]
[22:18:42.173]      __var isMSPM0G1X0X_G3X0X = 0;
[22:18:42.173]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:18:42.173]      __var isProduction = 0;
[22:18:42.173]        // -> [isProduction <= 0x00000000]
[22:18:42.173]      __var continueId = 0;
[22:18:42.173]        // -> [continueId <= 0x00000000]
[22:18:42.173]      deviceID =   Read32(0x41C40004);
[22:18:42.178]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:18:42.178]        // -> [deviceID <= 0x2BB8802F]
[22:18:42.178]      version = deviceID >> 28;
[22:18:42.181]        // -> [version <= 0x00000002]
[22:18:42.181]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:18:42.181]        // -> [partNum <= 0x0000BB88]
[22:18:42.181]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:18:42.181]        // -> [manuf <= 0x00000017]
[22:18:42.181]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:18:42.181]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:18:42.181]      isProduction = (version > 0);
[22:18:42.181]        // -> [isProduction <= 0x00000001]
[22:18:42.181]    </block>
[22:18:42.181]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:18:42.181]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:18:42.181]        // =>  FALSE
[22:18:42.181]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:18:42.181]    </control>
[22:18:42.181]    <control if="continueId == 4" while="" timeout="0" info="">
[22:18:42.181]      // if-block "continueId == 4"
[22:18:42.181]        // =>  FALSE
[22:18:42.181]      // skip if-block "continueId == 4"
[22:18:42.181]    </control>
[22:18:42.181]    <control if="!isProduction" while="" timeout="0" info="">
[22:18:42.181]      // if-block "!isProduction"
[22:18:42.181]        // =>  FALSE
[22:18:42.181]      // skip if-block "!isProduction"
[22:18:42.181]    </control>
[22:18:42.181]  </sequence>
[22:18:42.181]  
[22:19:06.734]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:19:06.734]  
[22:19:06.734]  <debugvars>
[22:19:06.734]    // Pre-defined
[22:19:06.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:06.736]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:06.736]    __dp=0x00000000
[22:19:06.736]    __ap=0x00000000
[22:19:06.736]    __traceout=0x00000000      (Trace Disabled)
[22:19:06.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:06.736]    __FlashAddr=0x00000000
[22:19:06.736]    __FlashLen=0x00000000
[22:19:06.736]    __FlashArg=0x00000000
[22:19:06.736]    __FlashOp=0x00000000
[22:19:06.736]    __Result=0x00000000
[22:19:06.736]  </debugvars>
[22:19:06.736]  
[22:19:06.736]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:19:06.736]    <block atomic="false" info="">
[22:19:06.736]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:19:06.736]        // -> [isSWJ <= 0x00000001]
[22:19:06.736]      __var hasDormant = __protocol & 0x00020000;
[22:19:06.736]        // -> [hasDormant <= 0x00000000]
[22:19:06.736]      __var protType   = __protocol & 0x0000FFFF;
[22:19:06.736]        // -> [protType <= 0x00000002]
[22:19:06.736]    </block>
[22:19:06.736]    <control if="protType == 1" while="" timeout="0" info="">
[22:19:06.736]      // if-block "protType == 1"
[22:19:06.736]        // =>  FALSE
[22:19:06.736]      // skip if-block "protType == 1"
[22:19:06.736]    </control>
[22:19:06.736]    <control if="protType == 2" while="" timeout="0" info="">
[22:19:06.736]      // if-block "protType == 2"
[22:19:06.736]        // =>  TRUE
[22:19:06.736]      <control if="isSWJ" while="" timeout="0" info="">
[22:19:06.736]        // if-block "isSWJ"
[22:19:06.736]          // =>  TRUE
[22:19:06.736]        <control if="hasDormant" while="" timeout="0" info="">
[22:19:06.736]          // if-block "hasDormant"
[22:19:06.736]            // =>  FALSE
[22:19:06.736]          // skip if-block "hasDormant"
[22:19:06.740]        </control>
[22:19:06.740]        <control if="!hasDormant" while="" timeout="0" info="">
[22:19:06.740]          // if-block "!hasDormant"
[22:19:06.740]            // =>  TRUE
[22:19:06.740]          <block atomic="false" info="">
[22:19:06.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:19:06.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:06.740]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:19:06.740]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:19:06.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:19:06.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:06.744]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:19:06.744]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:19:06.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:19:06.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:06.748]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:19:06.748]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:19:06.748]          </block>
[22:19:06.748]          // end if-block "!hasDormant"
[22:19:06.748]        </control>
[22:19:06.748]        // end if-block "isSWJ"
[22:19:06.748]      </control>
[22:19:06.748]      <control if="!isSWJ" while="" timeout="0" info="">
[22:19:06.748]        // if-block "!isSWJ"
[22:19:06.748]          // =>  FALSE
[22:19:06.748]        // skip if-block "!isSWJ"
[22:19:06.748]      </control>
[22:19:06.748]      <block atomic="false" info="">
[22:19:06.748]        ReadDP(0x0);
[22:19:06.752]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:19:06.752]      </block>
[22:19:06.752]      // end if-block "protType == 2"
[22:19:06.752]    </control>
[22:19:06.752]  </sequence>
[22:19:06.752]  
[22:19:06.756]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:19:06.756]  
[22:19:06.756]  <debugvars>
[22:19:06.756]    // Pre-defined
[22:19:06.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:06.756]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:06.756]    __dp=0x00000000
[22:19:06.756]    __ap=0x00000000
[22:19:06.756]    __traceout=0x00000000      (Trace Disabled)
[22:19:06.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:06.756]    __FlashAddr=0x00000000
[22:19:06.756]    __FlashLen=0x00000000
[22:19:06.756]    __FlashArg=0x00000000
[22:19:06.756]    __FlashOp=0x00000000
[22:19:06.756]    __Result=0x00000000
[22:19:06.756]  </debugvars>
[22:19:06.756]  
[22:19:06.756]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:19:06.756]    <block atomic="false" info="">
[22:19:06.756]      __var SW_DP_ABORT       = 0x0;
[22:19:06.756]        // -> [SW_DP_ABORT <= 0x00000000]
[22:19:06.756]      __var DP_CTRL_STAT      = 0x4;
[22:19:06.756]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:19:06.756]      __var DP_SELECT         = 0x8;
[22:19:06.756]        // -> [DP_SELECT <= 0x00000008]
[22:19:06.756]      __var powered_down      = 0;
[22:19:06.756]        // -> [powered_down <= 0x00000000]
[22:19:06.756]      WriteDP(DP_SELECT, 0x00000000);
[22:19:06.760]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:19:06.760]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:19:06.760]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:19:06.760]        // -> [powered_down <= 0x00000001]
[22:19:06.760]    </block>
[22:19:06.760]    <control if="powered_down" while="" timeout="0" info="">
[22:19:06.760]      // if-block "powered_down"
[22:19:06.760]        // =>  TRUE
[22:19:06.760]      <block atomic="false" info="">
[22:19:06.764]        Message(0, "Debug/System power-up request sent");
[22:19:06.768]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:19:06.768]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:19:06.768]      </block>
[22:19:06.768]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:19:06.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:19:06.768]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:19:06.768]        // while-condition  =>  FALSE
[22:19:06.768]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:19:06.768]      </control>
[22:19:06.768]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:19:06.772]        // if-block "(__protocol & 0xFFFF) == 1"
[22:19:06.772]          // =>  FALSE
[22:19:06.772]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:19:06.772]      </control>
[22:19:06.772]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:19:06.772]        // if-block "(__protocol & 0xFFFF) == 2"
[22:19:06.772]          // =>  TRUE
[22:19:06.772]        <block atomic="false" info="">
[22:19:06.772]          Message(0, "executing SWD power up");
[22:19:06.774]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:19:06.776]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:19:06.776]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:19:06.778]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:19:06.778]        </block>
[22:19:06.778]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:19:06.778]      </control>
[22:19:06.778]      // end if-block "powered_down"
[22:19:06.778]    </control>
[22:19:06.778]    <block atomic="false" info="">
[22:19:06.780]      __var DEBUG_PORT_VAL    = 0;
[22:19:06.780]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:19:06.780]      __var ACCESS_POINT_VAL  = 0;
[22:19:06.780]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:19:06.780]      __ap = 1; 
[22:19:06.780]        // -> [__ap <= 0x00000001]
[22:19:06.780]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:19:06.781]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:19:06.781]      __ap = 4;
[22:19:06.781]        // -> [__ap <= 0x00000004]
[22:19:06.781]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:19:06.787]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:19:06.787]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:19:06.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:19:06.789]    </block>
[22:19:06.789]    <block atomic="false" info="">
[22:19:06.789]      __var nReset = 0x80;
[22:19:06.789]        // -> [nReset <= 0x00000080]
[22:19:06.789]      __var canReadPins = 0;
[22:19:06.789]        // -> [canReadPins <= 0x00000000]
[22:19:06.789]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:19:06.789]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:19:06.789]        // -> [canReadPins <= 0x00000001]
[22:19:06.789]    </block>
[22:19:06.789]    <control if="" while="1" timeout="200" info="">
[22:19:06.789]      // while "1"  (timeout="200")
[22:19:06.789]      // while-condition  =>  TRUE
[22:19:06.789]      // while "1"  (timeout="200")
[22:19:06.789]      // while-condition  =>  TRUE
[22:19:06.789]      // while "1"  (timeout="200")
[22:19:06.789]      // while-condition  =>  TRUE
[22:19:06.789]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.793]      // while "1"  (timeout="200")
[22:19:06.793]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.797]      // while "1"  (timeout="200")
[22:19:06.797]      // while-condition  =>  TRUE
[22:19:06.801]      // while "1"  (timeout="200")
[22:19:06.801]      // while  =>  TIMEOUT
[22:19:06.801]      // end while "1"
[22:19:06.801]    </control>
[22:19:06.801]    <control if="canReadPins" while="" timeout="0" info="">
[22:19:06.801]      // if-block "canReadPins"
[22:19:06.801]        // =>  TRUE
[22:19:06.801]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:19:06.801]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:19:06.801]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:19:06.801]        // while-condition  =>  FALSE
[22:19:06.801]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:19:06.804]      </control>
[22:19:06.804]      // end if-block "canReadPins"
[22:19:06.804]    </control>
[22:19:06.804]    <control if="!canReadPins" while="" timeout="0" info="">
[22:19:06.804]      // if-block "!canReadPins"
[22:19:06.804]        // =>  FALSE
[22:19:06.804]      // skip if-block "!canReadPins"
[22:19:06.804]    </control>
[22:19:06.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:19:06.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:19:06.804]        // =>  TRUE
[22:19:06.804]      <block atomic="false" info="">
[22:19:06.804]        WriteAP(0x00, 0x190008);
[22:19:06.805]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:19:06.805]        WriteAP(0xF0, 0x01);
[22:19:06.809]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:19:06.809]      </block>
[22:19:06.813]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:19:06.813]    </control>
[22:19:06.813]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:19:06.813]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:19:06.813]        // =>  FALSE
[22:19:06.813]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:19:06.813]    </control>
[22:19:06.813]    <block atomic="false" info="">
[22:19:06.813]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:19:06.817]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:19:06.817]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:19:06.817]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:19:06.817]      __ap = 0; //lets make sure we reset the access point selection
[22:19:06.817]        // -> [__ap <= 0x00000000]
[22:19:06.817]    </block>
[22:19:06.817]  </sequence>
[22:19:06.817]  
[22:19:06.841]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:19:06.841]  
[22:19:06.841]  <debugvars>
[22:19:06.841]    // Pre-defined
[22:19:06.841]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:06.841]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:06.841]    __dp=0x00000000
[22:19:06.841]    __ap=0x00000000
[22:19:06.845]    __traceout=0x00000000      (Trace Disabled)
[22:19:06.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:06.845]    __FlashAddr=0x00000000
[22:19:06.845]    __FlashLen=0x00000000
[22:19:06.845]    __FlashArg=0x00000000
[22:19:06.845]    __FlashOp=0x00000000
[22:19:06.845]    __Result=0x00000000
[22:19:06.845]  </debugvars>
[22:19:06.845]  
[22:19:06.845]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:19:06.845]    <block atomic="false" info="">
[22:19:06.845]      __var deviceID = 0;
[22:19:06.845]        // -> [deviceID <= 0x00000000]
[22:19:06.845]      __var version = 0;
[22:19:06.845]        // -> [version <= 0x00000000]
[22:19:06.845]      __var partNum = 0;
[22:19:06.845]        // -> [partNum <= 0x00000000]
[22:19:06.845]      __var manuf = 0;
[22:19:06.845]        // -> [manuf <= 0x00000000]
[22:19:06.845]      __var isMSPM0G1X0X_G3X0X = 0;
[22:19:06.845]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:19:06.845]      __var isProduction = 0;
[22:19:06.845]        // -> [isProduction <= 0x00000000]
[22:19:06.845]      __var continueId = 0;
[22:19:06.845]        // -> [continueId <= 0x00000000]
[22:19:06.845]      deviceID =   Read32(0x41C40004);
[22:19:06.851]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:19:06.851]        // -> [deviceID <= 0x2BB8802F]
[22:19:06.851]      version = deviceID >> 28;
[22:19:06.851]        // -> [version <= 0x00000002]
[22:19:06.854]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:19:06.854]        // -> [partNum <= 0x0000BB88]
[22:19:06.854]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:19:06.854]        // -> [manuf <= 0x00000017]
[22:19:06.854]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:19:06.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:19:06.854]      isProduction = (version > 0);
[22:19:06.854]        // -> [isProduction <= 0x00000001]
[22:19:06.854]    </block>
[22:19:06.854]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:19:06.854]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:19:06.854]        // =>  FALSE
[22:19:06.854]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:19:06.854]    </control>
[22:19:06.854]    <control if="continueId == 4" while="" timeout="0" info="">
[22:19:06.854]      // if-block "continueId == 4"
[22:19:06.854]        // =>  FALSE
[22:19:06.854]      // skip if-block "continueId == 4"
[22:19:06.854]    </control>
[22:19:06.854]    <control if="!isProduction" while="" timeout="0" info="">
[22:19:06.854]      // if-block "!isProduction"
[22:19:06.854]        // =>  FALSE
[22:19:06.854]      // skip if-block "!isProduction"
[22:19:06.854]    </control>
[22:19:06.854]  </sequence>
[22:19:06.854]  
[22:19:52.373]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:19:52.373]  
[22:19:52.383]  <debugvars>
[22:19:52.383]    // Pre-defined
[22:19:52.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:52.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:52.383]    __dp=0x00000000
[22:19:52.383]    __ap=0x00000000
[22:19:52.384]    __traceout=0x00000000      (Trace Disabled)
[22:19:52.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:52.384]    __FlashAddr=0x00000000
[22:19:52.384]    __FlashLen=0x00000000
[22:19:52.384]    __FlashArg=0x00000000
[22:19:52.384]    __FlashOp=0x00000000
[22:19:52.384]    __Result=0x00000000
[22:19:52.384]  </debugvars>
[22:19:52.384]  
[22:19:52.384]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:19:52.384]    <block atomic="false" info="">
[22:19:52.384]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:19:52.384]        // -> [isSWJ <= 0x00000001]
[22:19:52.384]      __var hasDormant = __protocol & 0x00020000;
[22:19:52.384]        // -> [hasDormant <= 0x00000000]
[22:19:52.384]      __var protType   = __protocol & 0x0000FFFF;
[22:19:52.384]        // -> [protType <= 0x00000002]
[22:19:52.384]    </block>
[22:19:52.384]    <control if="protType == 1" while="" timeout="0" info="">
[22:19:52.384]      // if-block "protType == 1"
[22:19:52.387]        // =>  FALSE
[22:19:52.387]      // skip if-block "protType == 1"
[22:19:52.387]    </control>
[22:19:52.387]    <control if="protType == 2" while="" timeout="0" info="">
[22:19:52.387]      // if-block "protType == 2"
[22:19:52.387]        // =>  TRUE
[22:19:52.387]      <control if="isSWJ" while="" timeout="0" info="">
[22:19:52.387]        // if-block "isSWJ"
[22:19:52.387]          // =>  TRUE
[22:19:52.387]        <control if="hasDormant" while="" timeout="0" info="">
[22:19:52.387]          // if-block "hasDormant"
[22:19:52.387]            // =>  FALSE
[22:19:52.388]          // skip if-block "hasDormant"
[22:19:52.388]        </control>
[22:19:52.388]        <control if="!hasDormant" while="" timeout="0" info="">
[22:19:52.388]          // if-block "!hasDormant"
[22:19:52.388]            // =>  TRUE
[22:19:52.388]          <block atomic="false" info="">
[22:19:52.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:19:52.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:52.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:19:52.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:19:52.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:19:52.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:52.392]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:19:52.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:19:52.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:19:52.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:19:52.397]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:19:52.397]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:19:52.397]          </block>
[22:19:52.397]          // end if-block "!hasDormant"
[22:19:52.397]        </control>
[22:19:52.397]        // end if-block "isSWJ"
[22:19:52.397]      </control>
[22:19:52.397]      <control if="!isSWJ" while="" timeout="0" info="">
[22:19:52.397]        // if-block "!isSWJ"
[22:19:52.397]          // =>  FALSE
[22:19:52.397]        // skip if-block "!isSWJ"
[22:19:52.397]      </control>
[22:19:52.397]      <block atomic="false" info="">
[22:19:52.397]        ReadDP(0x0);
[22:19:52.401]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:19:52.401]      </block>
[22:19:52.401]      // end if-block "protType == 2"
[22:19:52.401]    </control>
[22:19:52.401]  </sequence>
[22:19:52.401]  
[22:19:52.401]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:19:52.401]  
[22:19:52.401]  <debugvars>
[22:19:52.401]    // Pre-defined
[22:19:52.401]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:52.401]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:52.405]    __dp=0x00000000
[22:19:52.405]    __ap=0x00000000
[22:19:52.405]    __traceout=0x00000000      (Trace Disabled)
[22:19:52.405]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:52.405]    __FlashAddr=0x00000000
[22:19:52.405]    __FlashLen=0x00000000
[22:19:52.405]    __FlashArg=0x00000000
[22:19:52.405]    __FlashOp=0x00000000
[22:19:52.405]    __Result=0x00000000
[22:19:52.405]  </debugvars>
[22:19:52.405]  
[22:19:52.405]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:19:52.405]    <block atomic="false" info="">
[22:19:52.405]      __var SW_DP_ABORT       = 0x0;
[22:19:52.405]        // -> [SW_DP_ABORT <= 0x00000000]
[22:19:52.407]      __var DP_CTRL_STAT      = 0x4;
[22:19:52.407]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:19:52.407]      __var DP_SELECT         = 0x8;
[22:19:52.407]        // -> [DP_SELECT <= 0x00000008]
[22:19:52.407]      __var powered_down      = 0;
[22:19:52.407]        // -> [powered_down <= 0x00000000]
[22:19:52.407]      WriteDP(DP_SELECT, 0x00000000);
[22:19:52.409]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:19:52.409]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:19:52.409]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:19:52.409]        // -> [powered_down <= 0x00000001]
[22:19:52.409]    </block>
[22:19:52.413]    <control if="powered_down" while="" timeout="0" info="">
[22:19:52.413]      // if-block "powered_down"
[22:19:52.413]        // =>  TRUE
[22:19:52.413]      <block atomic="false" info="">
[22:19:52.413]        Message(0, "Debug/System power-up request sent");
[22:19:52.413]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:19:52.419]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:19:52.419]      </block>
[22:19:52.420]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:19:52.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:19:52.421]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:19:52.421]        // while-condition  =>  FALSE
[22:19:52.421]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:19:52.421]      </control>
[22:19:52.421]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:19:52.422]        // if-block "(__protocol & 0xFFFF) == 1"
[22:19:52.422]          // =>  FALSE
[22:19:52.422]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:19:52.422]      </control>
[22:19:52.422]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:19:52.422]        // if-block "(__protocol & 0xFFFF) == 2"
[22:19:52.422]          // =>  TRUE
[22:19:52.422]        <block atomic="false" info="">
[22:19:52.422]          Message(0, "executing SWD power up");
[22:19:52.424]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:19:52.426]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:19:52.426]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:19:52.428]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:19:52.428]        </block>
[22:19:52.428]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:19:52.428]      </control>
[22:19:52.428]      // end if-block "powered_down"
[22:19:52.429]    </control>
[22:19:52.429]    <block atomic="false" info="">
[22:19:52.429]      __var DEBUG_PORT_VAL    = 0;
[22:19:52.429]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:19:52.429]      __var ACCESS_POINT_VAL  = 0;
[22:19:52.429]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:19:52.429]      __ap = 1; 
[22:19:52.429]        // -> [__ap <= 0x00000001]
[22:19:52.430]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:19:52.433]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:19:52.433]      __ap = 4;
[22:19:52.433]        // -> [__ap <= 0x00000004]
[22:19:52.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:19:52.436]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:19:52.436]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:19:52.436]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:19:52.438]    </block>
[22:19:52.438]    <block atomic="false" info="">
[22:19:52.438]      __var nReset = 0x80;
[22:19:52.438]        // -> [nReset <= 0x00000080]
[22:19:52.439]      __var canReadPins = 0;
[22:19:52.439]        // -> [canReadPins <= 0x00000000]
[22:19:52.439]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:19:52.441]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:19:52.441]        // -> [canReadPins <= 0x00000001]
[22:19:52.441]    </block>
[22:19:52.441]    <control if="" while="1" timeout="200" info="">
[22:19:52.441]      // while "1"  (timeout="200")
[22:19:52.441]      // while-condition  =>  TRUE
[22:19:52.441]      // while "1"  (timeout="200")
[22:19:52.441]      // while-condition  =>  TRUE
[22:19:52.441]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.442]      // while-condition  =>  TRUE
[22:19:52.442]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.443]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.443]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.443]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.443]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.443]      // while "1"  (timeout="200")
[22:19:52.443]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.444]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.444]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.444]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.444]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.444]      // while-condition  =>  TRUE
[22:19:52.444]      // while "1"  (timeout="200")
[22:19:52.445]      // while-condition  =>  TRUE
[22:19:52.445]      // while "1"  (timeout="200")
[22:19:52.445]      // while-condition  =>  TRUE
[22:19:52.445]      // while "1"  (timeout="200")
[22:19:52.445]      // while-condition  =>  TRUE
[22:19:52.445]      // while "1"  (timeout="200")
[22:19:52.445]      // while-condition  =>  TRUE
[22:19:52.445]      // while "1"  (timeout="200")
[22:19:52.445]      // while-condition  =>  TRUE
[22:19:52.445]      // while "1"  (timeout="200")
[22:19:52.446]      // while-condition  =>  TRUE
[22:19:52.446]      // while "1"  (timeout="200")
[22:19:52.446]      // while-condition  =>  TRUE
[22:19:52.446]      // while "1"  (timeout="200")
[22:19:52.446]      // while-condition  =>  TRUE
[22:19:52.446]      // while "1"  (timeout="200")
[22:19:52.446]      // while-condition  =>  TRUE
[22:19:52.446]      // while "1"  (timeout="200")
[22:19:52.446]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.447]      // while "1"  (timeout="200")
[22:19:52.447]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.448]      // while-condition  =>  TRUE
[22:19:52.448]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.450]      // while-condition  =>  TRUE
[22:19:52.450]      // while "1"  (timeout="200")
[22:19:52.453]      // while-condition  =>  TRUE
[22:19:52.453]      // while "1"  (timeout="200")
[22:19:52.453]      // while-condition  =>  TRUE
[22:19:52.453]      // while "1"  (timeout="200")
[22:19:52.453]      // while-condition  =>  TRUE
[22:19:52.453]      // while "1"  (timeout="200")
[22:19:52.453]      // while-condition  =>  TRUE
[22:19:52.453]      // while "1"  (timeout="200")
[22:19:52.453]      // while-condition  =>  TRUE
[22:19:52.453]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.454]      // while-condition  =>  TRUE
[22:19:52.454]      // while "1"  (timeout="200")
[22:19:52.457]      // while-condition  =>  TRUE
[22:19:52.457]      // while "1"  (timeout="200")
[22:19:52.457]      // while  =>  TIMEOUT
[22:19:52.457]      // end while "1"
[22:19:52.457]    </control>
[22:19:52.457]    <control if="canReadPins" while="" timeout="0" info="">
[22:19:52.457]      // if-block "canReadPins"
[22:19:52.457]        // =>  TRUE
[22:19:52.457]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:19:52.457]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:19:52.459]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:19:52.459]        // while-condition  =>  FALSE
[22:19:52.459]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:19:52.459]      </control>
[22:19:52.459]      // end if-block "canReadPins"
[22:19:52.459]    </control>
[22:19:52.459]    <control if="!canReadPins" while="" timeout="0" info="">
[22:19:52.459]      // if-block "!canReadPins"
[22:19:52.459]        // =>  FALSE
[22:19:52.459]      // skip if-block "!canReadPins"
[22:19:52.459]    </control>
[22:19:52.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:19:52.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:19:52.459]        // =>  TRUE
[22:19:52.459]      <block atomic="false" info="">
[22:19:52.459]        WriteAP(0x00, 0x190008);
[22:19:52.462]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:19:52.462]        WriteAP(0xF0, 0x01);
[22:19:52.464]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:19:52.464]      </block>
[22:19:52.464]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:19:52.464]    </control>
[22:19:52.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:19:52.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:19:52.467]        // =>  FALSE
[22:19:52.467]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:19:52.467]    </control>
[22:19:52.467]    <block atomic="false" info="">
[22:19:52.467]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:19:52.469]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:19:52.469]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:19:52.469]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:19:52.472]      __ap = 0; //lets make sure we reset the access point selection
[22:19:52.472]        // -> [__ap <= 0x00000000]
[22:19:52.472]    </block>
[22:19:52.472]  </sequence>
[22:19:52.472]  
[22:19:52.496]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:19:52.496]  
[22:19:52.496]  <debugvars>
[22:19:52.496]    // Pre-defined
[22:19:52.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:19:52.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:19:52.497]    __dp=0x00000000
[22:19:52.497]    __ap=0x00000000
[22:19:52.497]    __traceout=0x00000000      (Trace Disabled)
[22:19:52.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:19:52.497]    __FlashAddr=0x00000000
[22:19:52.497]    __FlashLen=0x00000000
[22:19:52.497]    __FlashArg=0x00000000
[22:19:52.497]    __FlashOp=0x00000000
[22:19:52.497]    __Result=0x00000000
[22:19:52.497]  </debugvars>
[22:19:52.497]  
[22:19:52.497]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:19:52.497]    <block atomic="false" info="">
[22:19:52.497]      __var deviceID = 0;
[22:19:52.497]        // -> [deviceID <= 0x00000000]
[22:19:52.497]      __var version = 0;
[22:19:52.497]        // -> [version <= 0x00000000]
[22:19:52.497]      __var partNum = 0;
[22:19:52.497]        // -> [partNum <= 0x00000000]
[22:19:52.497]      __var manuf = 0;
[22:19:52.497]        // -> [manuf <= 0x00000000]
[22:19:52.497]      __var isMSPM0G1X0X_G3X0X = 0;
[22:19:52.497]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:19:52.497]      __var isProduction = 0;
[22:19:52.497]        // -> [isProduction <= 0x00000000]
[22:19:52.497]      __var continueId = 0;
[22:19:52.497]        // -> [continueId <= 0x00000000]
[22:19:52.497]      deviceID =   Read32(0x41C40004);
[22:19:52.504]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:19:52.504]        // -> [deviceID <= 0x2BB8802F]
[22:19:52.504]      version = deviceID >> 28;
[22:19:52.504]        // -> [version <= 0x00000002]
[22:19:52.504]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:19:52.504]        // -> [partNum <= 0x0000BB88]
[22:19:52.504]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:19:52.504]        // -> [manuf <= 0x00000017]
[22:19:52.504]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:19:52.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:19:52.504]      isProduction = (version > 0);
[22:19:52.504]        // -> [isProduction <= 0x00000001]
[22:19:52.504]    </block>
[22:19:52.504]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:19:52.504]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:19:52.504]        // =>  FALSE
[22:19:52.504]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:19:52.504]    </control>
[22:19:52.504]    <control if="continueId == 4" while="" timeout="0" info="">
[22:19:52.504]      // if-block "continueId == 4"
[22:19:52.504]        // =>  FALSE
[22:19:52.504]      // skip if-block "continueId == 4"
[22:19:52.507]    </control>
[22:19:52.507]    <control if="!isProduction" while="" timeout="0" info="">
[22:19:52.507]      // if-block "!isProduction"
[22:19:52.507]        // =>  FALSE
[22:19:52.507]      // skip if-block "!isProduction"
[22:19:52.507]    </control>
[22:19:52.507]  </sequence>
[22:19:52.507]  
[22:20:49.082]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:20:49.082]  
[22:20:49.090]  <debugvars>
[22:20:49.090]    // Pre-defined
[22:20:49.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:20:49.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:20:49.090]    __dp=0x00000000
[22:20:49.091]    __ap=0x00000000
[22:20:49.091]    __traceout=0x00000000      (Trace Disabled)
[22:20:49.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:20:49.091]    __FlashAddr=0x00000000
[22:20:49.091]    __FlashLen=0x00000000
[22:20:49.091]    __FlashArg=0x00000000
[22:20:49.091]    __FlashOp=0x00000000
[22:20:49.091]    __Result=0x00000000
[22:20:49.091]  </debugvars>
[22:20:49.091]  
[22:20:49.091]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:20:49.091]    <block atomic="false" info="">
[22:20:49.091]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:20:49.091]        // -> [isSWJ <= 0x00000001]
[22:20:49.091]      __var hasDormant = __protocol & 0x00020000;
[22:20:49.092]        // -> [hasDormant <= 0x00000000]
[22:20:49.092]      __var protType   = __protocol & 0x0000FFFF;
[22:20:49.092]        // -> [protType <= 0x00000002]
[22:20:49.092]    </block>
[22:20:49.092]    <control if="protType == 1" while="" timeout="0" info="">
[22:20:49.092]      // if-block "protType == 1"
[22:20:49.092]        // =>  FALSE
[22:20:49.092]      // skip if-block "protType == 1"
[22:20:49.092]    </control>
[22:20:49.092]    <control if="protType == 2" while="" timeout="0" info="">
[22:20:49.092]      // if-block "protType == 2"
[22:20:49.092]        // =>  TRUE
[22:20:49.092]      <control if="isSWJ" while="" timeout="0" info="">
[22:20:49.092]        // if-block "isSWJ"
[22:20:49.092]          // =>  TRUE
[22:20:49.094]        <control if="hasDormant" while="" timeout="0" info="">
[22:20:49.094]          // if-block "hasDormant"
[22:20:49.094]            // =>  FALSE
[22:20:49.094]          // skip if-block "hasDormant"
[22:20:49.094]        </control>
[22:20:49.094]        <control if="!hasDormant" while="" timeout="0" info="">
[22:20:49.094]          // if-block "!hasDormant"
[22:20:49.094]            // =>  TRUE
[22:20:49.094]          <block atomic="false" info="">
[22:20:49.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:20:49.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:20:49.096]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:20:49.096]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:20:49.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:20:49.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:20:49.100]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:20:49.100]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:20:49.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:20:49.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:20:49.100]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:20:49.104]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:20:49.104]          </block>
[22:20:49.104]          // end if-block "!hasDormant"
[22:20:49.104]        </control>
[22:20:49.104]        // end if-block "isSWJ"
[22:20:49.104]      </control>
[22:20:49.104]      <control if="!isSWJ" while="" timeout="0" info="">
[22:20:49.104]        // if-block "!isSWJ"
[22:20:49.104]          // =>  FALSE
[22:20:49.104]        // skip if-block "!isSWJ"
[22:20:49.104]      </control>
[22:20:49.104]      <block atomic="false" info="">
[22:20:49.104]        ReadDP(0x0);
[22:20:49.104]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:20:49.104]      </block>
[22:20:49.104]      // end if-block "protType == 2"
[22:20:49.104]    </control>
[22:20:49.104]  </sequence>
[22:20:49.108]  
[22:20:49.110]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:20:49.110]  
[22:20:49.110]  <debugvars>
[22:20:49.110]    // Pre-defined
[22:20:49.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:20:49.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:20:49.111]    __dp=0x00000000
[22:20:49.111]    __ap=0x00000000
[22:20:49.111]    __traceout=0x00000000      (Trace Disabled)
[22:20:49.111]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:20:49.111]    __FlashAddr=0x00000000
[22:20:49.111]    __FlashLen=0x00000000
[22:20:49.111]    __FlashArg=0x00000000
[22:20:49.111]    __FlashOp=0x00000000
[22:20:49.111]    __Result=0x00000000
[22:20:49.112]  </debugvars>
[22:20:49.112]  
[22:20:49.112]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:20:49.112]    <block atomic="false" info="">
[22:20:49.112]      __var SW_DP_ABORT       = 0x0;
[22:20:49.112]        // -> [SW_DP_ABORT <= 0x00000000]
[22:20:49.112]      __var DP_CTRL_STAT      = 0x4;
[22:20:49.112]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:20:49.112]      __var DP_SELECT         = 0x8;
[22:20:49.112]        // -> [DP_SELECT <= 0x00000008]
[22:20:49.112]      __var powered_down      = 0;
[22:20:49.112]        // -> [powered_down <= 0x00000000]
[22:20:49.112]      WriteDP(DP_SELECT, 0x00000000);
[22:20:49.112]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:20:49.112]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:20:49.116]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:20:49.116]        // -> [powered_down <= 0x00000001]
[22:20:49.116]    </block>
[22:20:49.116]    <control if="powered_down" while="" timeout="0" info="">
[22:20:49.116]      // if-block "powered_down"
[22:20:49.116]        // =>  TRUE
[22:20:49.116]      <block atomic="false" info="">
[22:20:49.116]        Message(0, "Debug/System power-up request sent");
[22:20:49.122]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:20:49.122]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:20:49.122]      </block>
[22:20:49.122]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:20:49.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:20:49.124]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:20:49.124]        // while-condition  =>  FALSE
[22:20:49.124]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:20:49.124]      </control>
[22:20:49.124]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:20:49.124]        // if-block "(__protocol & 0xFFFF) == 1"
[22:20:49.124]          // =>  FALSE
[22:20:49.124]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:20:49.124]      </control>
[22:20:49.124]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:20:49.124]        // if-block "(__protocol & 0xFFFF) == 2"
[22:20:49.124]          // =>  TRUE
[22:20:49.124]        <block atomic="false" info="">
[22:20:49.124]          Message(0, "executing SWD power up");
[22:20:49.128]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:20:49.130]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:20:49.130]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:20:49.130]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:20:49.130]        </block>
[22:20:49.130]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:20:49.132]      </control>
[22:20:49.132]      // end if-block "powered_down"
[22:20:49.132]    </control>
[22:20:49.132]    <block atomic="false" info="">
[22:20:49.132]      __var DEBUG_PORT_VAL    = 0;
[22:20:49.132]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:20:49.132]      __var ACCESS_POINT_VAL  = 0;
[22:20:49.133]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:20:49.133]      __ap = 1; 
[22:20:49.133]        // -> [__ap <= 0x00000001]
[22:20:49.133]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:20:49.137]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:20:49.137]      __ap = 4;
[22:20:49.137]        // -> [__ap <= 0x00000004]
[22:20:49.137]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:20:49.142]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:20:49.142]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:20:49.142]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:20:49.143]    </block>
[22:20:49.143]    <block atomic="false" info="">
[22:20:49.143]      __var nReset = 0x80;
[22:20:49.143]        // -> [nReset <= 0x00000080]
[22:20:49.143]      __var canReadPins = 0;
[22:20:49.143]        // -> [canReadPins <= 0x00000000]
[22:20:49.143]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:20:49.145]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:20:49.145]        // -> [canReadPins <= 0x00000001]
[22:20:49.145]    </block>
[22:20:49.145]    <control if="" while="1" timeout="200" info="">
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.145]      // while "1"  (timeout="200")
[22:20:49.145]      // while-condition  =>  TRUE
[22:20:49.149]      // while "1"  (timeout="200")
[22:20:49.149]      // while-condition  =>  TRUE
[22:20:49.149]      // while "1"  (timeout="200")
[22:20:49.149]      // while-condition  =>  TRUE
[22:20:49.149]      // while "1"  (timeout="200")
[22:20:49.149]      // while-condition  =>  TRUE
[22:20:49.149]      // while "1"  (timeout="200")
[22:20:49.149]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.150]      // while "1"  (timeout="200")
[22:20:49.150]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.151]      // while "1"  (timeout="200")
[22:20:49.151]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.152]      // while "1"  (timeout="200")
[22:20:49.152]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.154]      // while "1"  (timeout="200")
[22:20:49.154]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.155]      // while "1"  (timeout="200")
[22:20:49.155]      // while-condition  =>  TRUE
[22:20:49.157]      // while "1"  (timeout="200")
[22:20:49.157]      // while-condition  =>  TRUE
[22:20:49.157]      // while "1"  (timeout="200")
[22:20:49.157]      // while-condition  =>  TRUE
[22:20:49.157]      // while "1"  (timeout="200")
[22:20:49.157]      // while-condition  =>  TRUE
[22:20:49.157]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.158]      // while "1"  (timeout="200")
[22:20:49.158]      // while-condition  =>  TRUE
[22:20:49.160]      // while "1"  (timeout="200")
[22:20:49.160]      // while  =>  TIMEOUT
[22:20:49.160]      // end while "1"
[22:20:49.160]    </control>
[22:20:49.160]    <control if="canReadPins" while="" timeout="0" info="">
[22:20:49.160]      // if-block "canReadPins"
[22:20:49.160]        // =>  TRUE
[22:20:49.160]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:20:49.160]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:20:49.161]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:20:49.162]        // while-condition  =>  FALSE
[22:20:49.162]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:20:49.162]      </control>
[22:20:49.162]      // end if-block "canReadPins"
[22:20:49.162]    </control>
[22:20:49.162]    <control if="!canReadPins" while="" timeout="0" info="">
[22:20:49.162]      // if-block "!canReadPins"
[22:20:49.162]        // =>  FALSE
[22:20:49.162]      // skip if-block "!canReadPins"
[22:20:49.162]    </control>
[22:20:49.162]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:20:49.162]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:20:49.162]        // =>  TRUE
[22:20:49.162]      <block atomic="false" info="">
[22:20:49.162]        WriteAP(0x00, 0x190008);
[22:20:49.165]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:20:49.165]        WriteAP(0xF0, 0x01);
[22:20:49.168]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:20:49.168]      </block>
[22:20:49.168]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:20:49.168]    </control>
[22:20:49.168]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:20:49.168]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:20:49.168]        // =>  FALSE
[22:20:49.168]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:20:49.170]    </control>
[22:20:49.170]    <block atomic="false" info="">
[22:20:49.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:20:49.171]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:20:49.171]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:20:49.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:20:49.175]      __ap = 0; //lets make sure we reset the access point selection
[22:20:49.175]        // -> [__ap <= 0x00000000]
[22:20:49.175]    </block>
[22:20:49.175]  </sequence>
[22:20:49.175]  
[22:20:49.193]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:20:49.193]  
[22:20:49.193]  <debugvars>
[22:20:49.193]    // Pre-defined
[22:20:49.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:20:49.193]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:20:49.193]    __dp=0x00000000
[22:20:49.193]    __ap=0x00000000
[22:20:49.193]    __traceout=0x00000000      (Trace Disabled)
[22:20:49.193]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:20:49.193]    __FlashAddr=0x00000000
[22:20:49.193]    __FlashLen=0x00000000
[22:20:49.196]    __FlashArg=0x00000000
[22:20:49.196]    __FlashOp=0x00000000
[22:20:49.196]    __Result=0x00000000
[22:20:49.196]  </debugvars>
[22:20:49.196]  
[22:20:49.196]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:20:49.196]    <block atomic="false" info="">
[22:20:49.196]      __var deviceID = 0;
[22:20:49.196]        // -> [deviceID <= 0x00000000]
[22:20:49.197]      __var version = 0;
[22:20:49.197]        // -> [version <= 0x00000000]
[22:20:49.197]      __var partNum = 0;
[22:20:49.197]        // -> [partNum <= 0x00000000]
[22:20:49.197]      __var manuf = 0;
[22:20:49.197]        // -> [manuf <= 0x00000000]
[22:20:49.197]      __var isMSPM0G1X0X_G3X0X = 0;
[22:20:49.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:20:49.197]      __var isProduction = 0;
[22:20:49.197]        // -> [isProduction <= 0x00000000]
[22:20:49.197]      __var continueId = 0;
[22:20:49.197]        // -> [continueId <= 0x00000000]
[22:20:49.198]      deviceID =   Read32(0x41C40004);
[22:20:49.200]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:20:49.200]        // -> [deviceID <= 0x2BB8802F]
[22:20:49.200]      version = deviceID >> 28;
[22:20:49.200]        // -> [version <= 0x00000002]
[22:20:49.200]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:20:49.200]        // -> [partNum <= 0x0000BB88]
[22:20:49.200]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:20:49.200]        // -> [manuf <= 0x00000017]
[22:20:49.200]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:20:49.200]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:20:49.200]      isProduction = (version > 0);
[22:20:49.200]        // -> [isProduction <= 0x00000001]
[22:20:49.200]    </block>
[22:20:49.204]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:20:49.204]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:20:49.204]        // =>  FALSE
[22:20:49.204]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:20:49.204]    </control>
[22:20:49.204]    <control if="continueId == 4" while="" timeout="0" info="">
[22:20:49.204]      // if-block "continueId == 4"
[22:20:49.204]        // =>  FALSE
[22:20:49.204]      // skip if-block "continueId == 4"
[22:20:49.204]    </control>
[22:20:49.204]    <control if="!isProduction" while="" timeout="0" info="">
[22:20:49.204]      // if-block "!isProduction"
[22:20:49.204]        // =>  FALSE
[22:20:49.204]      // skip if-block "!isProduction"
[22:20:49.204]    </control>
[22:20:49.204]  </sequence>
[22:20:49.204]  
[22:21:21.496]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:21:21.496]  
[22:21:21.496]  <debugvars>
[22:21:21.496]    // Pre-defined
[22:21:21.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:21.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:21.496]    __dp=0x00000000
[22:21:21.496]    __ap=0x00000000
[22:21:21.496]    __traceout=0x00000000      (Trace Disabled)
[22:21:21.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:21.496]    __FlashAddr=0x00000000
[22:21:21.500]    __FlashLen=0x00000000
[22:21:21.500]    __FlashArg=0x00000000
[22:21:21.500]    __FlashOp=0x00000000
[22:21:21.500]    __Result=0x00000000
[22:21:21.500]  </debugvars>
[22:21:21.500]  
[22:21:21.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:21:21.500]    <block atomic="false" info="">
[22:21:21.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:21:21.500]        // -> [isSWJ <= 0x00000001]
[22:21:21.500]      __var hasDormant = __protocol & 0x00020000;
[22:21:21.500]        // -> [hasDormant <= 0x00000000]
[22:21:21.500]      __var protType   = __protocol & 0x0000FFFF;
[22:21:21.500]        // -> [protType <= 0x00000002]
[22:21:21.500]    </block>
[22:21:21.500]    <control if="protType == 1" while="" timeout="0" info="">
[22:21:21.500]      // if-block "protType == 1"
[22:21:21.500]        // =>  FALSE
[22:21:21.500]      // skip if-block "protType == 1"
[22:21:21.500]    </control>
[22:21:21.500]    <control if="protType == 2" while="" timeout="0" info="">
[22:21:21.500]      // if-block "protType == 2"
[22:21:21.500]        // =>  TRUE
[22:21:21.500]      <control if="isSWJ" while="" timeout="0" info="">
[22:21:21.500]        // if-block "isSWJ"
[22:21:21.500]          // =>  TRUE
[22:21:21.500]        <control if="hasDormant" while="" timeout="0" info="">
[22:21:21.500]          // if-block "hasDormant"
[22:21:21.500]            // =>  FALSE
[22:21:21.500]          // skip if-block "hasDormant"
[22:21:21.500]        </control>
[22:21:21.500]        <control if="!hasDormant" while="" timeout="0" info="">
[22:21:21.500]          // if-block "!hasDormant"
[22:21:21.500]            // =>  TRUE
[22:21:21.500]          <block atomic="false" info="">
[22:21:21.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:21:21.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:21.504]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:21:21.504]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:21:21.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:21:21.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:21.508]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:21:21.508]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:21:21.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:21:21.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:21:21.508]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:21:21.512]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:21:21.512]          </block>
[22:21:21.512]          // end if-block "!hasDormant"
[22:21:21.512]        </control>
[22:21:21.516]        // end if-block "isSWJ"
[22:21:21.516]      </control>
[22:21:21.516]      <control if="!isSWJ" while="" timeout="0" info="">
[22:21:21.516]        // if-block "!isSWJ"
[22:21:21.516]          // =>  FALSE
[22:21:21.516]        // skip if-block "!isSWJ"
[22:21:21.516]      </control>
[22:21:21.516]      <block atomic="false" info="">
[22:21:21.516]        ReadDP(0x0);
[22:21:21.516]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:21:21.516]      </block>
[22:21:21.516]      // end if-block "protType == 2"
[22:21:21.516]    </control>
[22:21:21.516]  </sequence>
[22:21:21.516]  
[22:21:21.520]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:21:21.520]  
[22:21:21.520]  <debugvars>
[22:21:21.520]    // Pre-defined
[22:21:21.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:21.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:21.520]    __dp=0x00000000
[22:21:21.520]    __ap=0x00000000
[22:21:21.520]    __traceout=0x00000000      (Trace Disabled)
[22:21:21.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:21.520]    __FlashAddr=0x00000000
[22:21:21.520]    __FlashLen=0x00000000
[22:21:21.520]    __FlashArg=0x00000000
[22:21:21.520]    __FlashOp=0x00000000
[22:21:21.520]    __Result=0x00000000
[22:21:21.520]  </debugvars>
[22:21:21.520]  
[22:21:21.520]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:21:21.520]    <block atomic="false" info="">
[22:21:21.520]      __var SW_DP_ABORT       = 0x0;
[22:21:21.520]        // -> [SW_DP_ABORT <= 0x00000000]
[22:21:21.520]      __var DP_CTRL_STAT      = 0x4;
[22:21:21.520]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:21:21.520]      __var DP_SELECT         = 0x8;
[22:21:21.520]        // -> [DP_SELECT <= 0x00000008]
[22:21:21.520]      __var powered_down      = 0;
[22:21:21.520]        // -> [powered_down <= 0x00000000]
[22:21:21.520]      WriteDP(DP_SELECT, 0x00000000);
[22:21:21.524]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:21:21.524]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:21:21.524]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:21:21.524]        // -> [powered_down <= 0x00000001]
[22:21:21.524]    </block>
[22:21:21.524]    <control if="powered_down" while="" timeout="0" info="">
[22:21:21.524]      // if-block "powered_down"
[22:21:21.524]        // =>  TRUE
[22:21:21.524]      <block atomic="false" info="">
[22:21:21.524]        Message(0, "Debug/System power-up request sent");
[22:21:21.528]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:21:21.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:21:21.532]      </block>
[22:21:21.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:21:21.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:21:21.532]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:21:21.532]        // while-condition  =>  FALSE
[22:21:21.532]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:21:21.532]      </control>
[22:21:21.532]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:21:21.532]        // if-block "(__protocol & 0xFFFF) == 1"
[22:21:21.532]          // =>  FALSE
[22:21:21.532]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:21:21.532]      </control>
[22:21:21.532]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:21:21.532]        // if-block "(__protocol & 0xFFFF) == 2"
[22:21:21.532]          // =>  TRUE
[22:21:21.532]        <block atomic="false" info="">
[22:21:21.532]          Message(0, "executing SWD power up");
[22:21:21.536]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:21:21.540]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:21:21.540]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:21:21.540]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:21:21.540]        </block>
[22:21:21.540]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:21:21.540]      </control>
[22:21:21.540]      // end if-block "powered_down"
[22:21:21.540]    </control>
[22:21:21.540]    <block atomic="false" info="">
[22:21:21.540]      __var DEBUG_PORT_VAL    = 0;
[22:21:21.540]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:21:21.540]      __var ACCESS_POINT_VAL  = 0;
[22:21:21.540]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:21:21.540]      __ap = 1; 
[22:21:21.540]        // -> [__ap <= 0x00000001]
[22:21:21.540]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:21:21.544]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:21:21.544]      __ap = 4;
[22:21:21.544]        // -> [__ap <= 0x00000004]
[22:21:21.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:21:21.548]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:21:21.548]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:21:21.548]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:21:21.552]    </block>
[22:21:21.552]    <block atomic="false" info="">
[22:21:21.552]      __var nReset = 0x80;
[22:21:21.552]        // -> [nReset <= 0x00000080]
[22:21:21.552]      __var canReadPins = 0;
[22:21:21.552]        // -> [canReadPins <= 0x00000000]
[22:21:21.552]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:21:21.552]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:21:21.552]        // -> [canReadPins <= 0x00000001]
[22:21:21.552]    </block>
[22:21:21.552]    <control if="" while="1" timeout="200" info="">
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.552]      // while-condition  =>  TRUE
[22:21:21.552]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.556]      // while "1"  (timeout="200")
[22:21:21.556]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.560]      // while "1"  (timeout="200")
[22:21:21.560]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.564]      // while "1"  (timeout="200")
[22:21:21.564]      // while-condition  =>  TRUE
[22:21:21.568]      // while "1"  (timeout="200")
[22:21:21.568]      // while  =>  TIMEOUT
[22:21:21.568]      // end while "1"
[22:21:21.568]    </control>
[22:21:21.568]    <control if="canReadPins" while="" timeout="0" info="">
[22:21:21.568]      // if-block "canReadPins"
[22:21:21.568]        // =>  TRUE
[22:21:21.568]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:21:21.568]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:21:21.568]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:21:21.568]        // while-condition  =>  FALSE
[22:21:21.568]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:21:21.568]      </control>
[22:21:21.568]      // end if-block "canReadPins"
[22:21:21.568]    </control>
[22:21:21.568]    <control if="!canReadPins" while="" timeout="0" info="">
[22:21:21.568]      // if-block "!canReadPins"
[22:21:21.568]        // =>  FALSE
[22:21:21.568]      // skip if-block "!canReadPins"
[22:21:21.568]    </control>
[22:21:21.568]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:21:21.568]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:21:21.568]        // =>  TRUE
[22:21:21.568]      <block atomic="false" info="">
[22:21:21.568]        WriteAP(0x00, 0x190008);
[22:21:21.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:21:21.572]        WriteAP(0xF0, 0x01);
[22:21:21.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:21:21.576]      </block>
[22:21:21.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:21:21.576]    </control>
[22:21:21.576]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:21:21.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:21:21.576]        // =>  FALSE
[22:21:21.576]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:21:21.576]    </control>
[22:21:21.576]    <block atomic="false" info="">
[22:21:21.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:21:21.580]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:21:21.580]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:21:21.580]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:21:21.580]      __ap = 0; //lets make sure we reset the access point selection
[22:21:21.580]        // -> [__ap <= 0x00000000]
[22:21:21.580]    </block>
[22:21:21.580]  </sequence>
[22:21:21.584]  
[22:21:21.604]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:21:21.604]  
[22:21:21.608]  <debugvars>
[22:21:21.608]    // Pre-defined
[22:21:21.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:21:21.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:21:21.608]    __dp=0x00000000
[22:21:21.608]    __ap=0x00000000
[22:21:21.608]    __traceout=0x00000000      (Trace Disabled)
[22:21:21.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:21:21.608]    __FlashAddr=0x00000000
[22:21:21.608]    __FlashLen=0x00000000
[22:21:21.608]    __FlashArg=0x00000000
[22:21:21.608]    __FlashOp=0x00000000
[22:21:21.608]    __Result=0x00000000
[22:21:21.608]  </debugvars>
[22:21:21.608]  
[22:21:21.608]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:21:21.608]    <block atomic="false" info="">
[22:21:21.608]      __var deviceID = 0;
[22:21:21.608]        // -> [deviceID <= 0x00000000]
[22:21:21.608]      __var version = 0;
[22:21:21.608]        // -> [version <= 0x00000000]
[22:21:21.608]      __var partNum = 0;
[22:21:21.608]        // -> [partNum <= 0x00000000]
[22:21:21.608]      __var manuf = 0;
[22:21:21.608]        // -> [manuf <= 0x00000000]
[22:21:21.608]      __var isMSPM0G1X0X_G3X0X = 0;
[22:21:21.608]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:21:21.608]      __var isProduction = 0;
[22:21:21.608]        // -> [isProduction <= 0x00000000]
[22:21:21.608]      __var continueId = 0;
[22:21:21.608]        // -> [continueId <= 0x00000000]
[22:21:21.608]      deviceID =   Read32(0x41C40004);
[22:21:21.616]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:21:21.616]        // -> [deviceID <= 0x2BB8802F]
[22:21:21.616]      version = deviceID >> 28;
[22:21:21.616]        // -> [version <= 0x00000002]
[22:21:21.616]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:21:21.616]        // -> [partNum <= 0x0000BB88]
[22:21:21.616]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:21:21.616]        // -> [manuf <= 0x00000017]
[22:21:21.616]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:21:21.616]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:21:21.616]      isProduction = (version > 0);
[22:21:21.616]        // -> [isProduction <= 0x00000001]
[22:21:21.616]    </block>
[22:21:21.616]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:21:21.616]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:21:21.616]        // =>  FALSE
[22:21:21.616]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:21:21.616]    </control>
[22:21:21.616]    <control if="continueId == 4" while="" timeout="0" info="">
[22:21:21.616]      // if-block "continueId == 4"
[22:21:21.616]        // =>  FALSE
[22:21:21.616]      // skip if-block "continueId == 4"
[22:21:21.616]    </control>
[22:21:21.616]    <control if="!isProduction" while="" timeout="0" info="">
[22:21:21.616]      // if-block "!isProduction"
[22:21:21.616]        // =>  FALSE
[22:21:21.616]      // skip if-block "!isProduction"
[22:21:21.616]    </control>
[22:21:21.616]  </sequence>
[22:21:21.616]  
[22:22:01.240]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:22:01.240]  
[22:22:01.240]  <debugvars>
[22:22:01.240]    // Pre-defined
[22:22:01.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:01.242]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:01.242]    __dp=0x00000000
[22:22:01.242]    __ap=0x00000000
[22:22:01.242]    __traceout=0x00000000      (Trace Disabled)
[22:22:01.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:01.242]    __FlashAddr=0x00000000
[22:22:01.242]    __FlashLen=0x00000000
[22:22:01.242]    __FlashArg=0x00000000
[22:22:01.242]    __FlashOp=0x00000000
[22:22:01.242]    __Result=0x00000000
[22:22:01.242]  </debugvars>
[22:22:01.242]  
[22:22:01.242]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:22:01.242]    <block atomic="false" info="">
[22:22:01.242]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:22:01.242]        // -> [isSWJ <= 0x00000001]
[22:22:01.242]      __var hasDormant = __protocol & 0x00020000;
[22:22:01.242]        // -> [hasDormant <= 0x00000000]
[22:22:01.245]      __var protType   = __protocol & 0x0000FFFF;
[22:22:01.245]        // -> [protType <= 0x00000002]
[22:22:01.245]    </block>
[22:22:01.245]    <control if="protType == 1" while="" timeout="0" info="">
[22:22:01.245]      // if-block "protType == 1"
[22:22:01.245]        // =>  FALSE
[22:22:01.245]      // skip if-block "protType == 1"
[22:22:01.245]    </control>
[22:22:01.246]    <control if="protType == 2" while="" timeout="0" info="">
[22:22:01.246]      // if-block "protType == 2"
[22:22:01.246]        // =>  TRUE
[22:22:01.246]      <control if="isSWJ" while="" timeout="0" info="">
[22:22:01.246]        // if-block "isSWJ"
[22:22:01.246]          // =>  TRUE
[22:22:01.246]        <control if="hasDormant" while="" timeout="0" info="">
[22:22:01.246]          // if-block "hasDormant"
[22:22:01.246]            // =>  FALSE
[22:22:01.246]          // skip if-block "hasDormant"
[22:22:01.246]        </control>
[22:22:01.247]        <control if="!hasDormant" while="" timeout="0" info="">
[22:22:01.247]          // if-block "!hasDormant"
[22:22:01.247]            // =>  TRUE
[22:22:01.247]          <block atomic="false" info="">
[22:22:01.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:22:01.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:01.248]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:22:01.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:22:01.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:22:01.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:01.252]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:22:01.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:22:01.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:22:01.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:01.255]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:22:01.256]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:22:01.256]          </block>
[22:22:01.256]          // end if-block "!hasDormant"
[22:22:01.256]        </control>
[22:22:01.256]        // end if-block "isSWJ"
[22:22:01.256]      </control>
[22:22:01.256]      <control if="!isSWJ" while="" timeout="0" info="">
[22:22:01.256]        // if-block "!isSWJ"
[22:22:01.256]          // =>  FALSE
[22:22:01.256]        // skip if-block "!isSWJ"
[22:22:01.256]      </control>
[22:22:01.256]      <block atomic="false" info="">
[22:22:01.256]        ReadDP(0x0);
[22:22:01.259]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:22:01.259]      </block>
[22:22:01.259]      // end if-block "protType == 2"
[22:22:01.259]    </control>
[22:22:01.259]  </sequence>
[22:22:01.259]  
[22:22:01.259]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:22:01.259]  
[22:22:01.259]  <debugvars>
[22:22:01.259]    // Pre-defined
[22:22:01.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:01.259]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:01.259]    __dp=0x00000000
[22:22:01.259]    __ap=0x00000000
[22:22:01.263]    __traceout=0x00000000      (Trace Disabled)
[22:22:01.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:01.263]    __FlashAddr=0x00000000
[22:22:01.263]    __FlashLen=0x00000000
[22:22:01.263]    __FlashArg=0x00000000
[22:22:01.263]    __FlashOp=0x00000000
[22:22:01.263]    __Result=0x00000000
[22:22:01.263]  </debugvars>
[22:22:01.263]  
[22:22:01.263]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:22:01.263]    <block atomic="false" info="">
[22:22:01.263]      __var SW_DP_ABORT       = 0x0;
[22:22:01.264]        // -> [SW_DP_ABORT <= 0x00000000]
[22:22:01.264]      __var DP_CTRL_STAT      = 0x4;
[22:22:01.264]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:22:01.264]      __var DP_SELECT         = 0x8;
[22:22:01.264]        // -> [DP_SELECT <= 0x00000008]
[22:22:01.264]      __var powered_down      = 0;
[22:22:01.264]        // -> [powered_down <= 0x00000000]
[22:22:01.264]      WriteDP(DP_SELECT, 0x00000000);
[22:22:01.265]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:22:01.265]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:22:01.267]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:22:01.267]        // -> [powered_down <= 0x00000001]
[22:22:01.267]    </block>
[22:22:01.267]    <control if="powered_down" while="" timeout="0" info="">
[22:22:01.267]      // if-block "powered_down"
[22:22:01.267]        // =>  TRUE
[22:22:01.267]      <block atomic="false" info="">
[22:22:01.268]        Message(0, "Debug/System power-up request sent");
[22:22:01.271]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:22:01.272]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:22:01.272]      </block>
[22:22:01.272]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:22:01.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:22:01.276]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:22:01.276]        // while-condition  =>  FALSE
[22:22:01.276]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:22:01.276]      </control>
[22:22:01.276]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:22:01.276]        // if-block "(__protocol & 0xFFFF) == 1"
[22:22:01.276]          // =>  FALSE
[22:22:01.276]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:22:01.276]      </control>
[22:22:01.276]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:22:01.276]        // if-block "(__protocol & 0xFFFF) == 2"
[22:22:01.276]          // =>  TRUE
[22:22:01.276]        <block atomic="false" info="">
[22:22:01.276]          Message(0, "executing SWD power up");
[22:22:01.276]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:22:01.280]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:22:01.280]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:22:01.281]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:22:01.281]        </block>
[22:22:01.281]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:22:01.282]      </control>
[22:22:01.282]      // end if-block "powered_down"
[22:22:01.282]    </control>
[22:22:01.282]    <block atomic="false" info="">
[22:22:01.282]      __var DEBUG_PORT_VAL    = 0;
[22:22:01.282]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:22:01.282]      __var ACCESS_POINT_VAL  = 0;
[22:22:01.282]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:22:01.282]      __ap = 1; 
[22:22:01.282]        // -> [__ap <= 0x00000001]
[22:22:01.282]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:22:01.285]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:22:01.285]      __ap = 4;
[22:22:01.287]        // -> [__ap <= 0x00000004]
[22:22:01.287]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:01.290]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:22:01.290]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:22:01.290]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:01.291]    </block>
[22:22:01.291]    <block atomic="false" info="">
[22:22:01.291]      __var nReset = 0x80;
[22:22:01.291]        // -> [nReset <= 0x00000080]
[22:22:01.291]      __var canReadPins = 0;
[22:22:01.293]        // -> [canReadPins <= 0x00000000]
[22:22:01.293]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:22:01.295]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:22:01.295]        // -> [canReadPins <= 0x00000001]
[22:22:01.295]    </block>
[22:22:01.295]    <control if="" while="1" timeout="200" info="">
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.295]      // while-condition  =>  TRUE
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.295]      // while-condition  =>  TRUE
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.295]      // while-condition  =>  TRUE
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.295]      // while-condition  =>  TRUE
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.295]      // while-condition  =>  TRUE
[22:22:01.295]      // while "1"  (timeout="200")
[22:22:01.296]      // while-condition  =>  TRUE
[22:22:01.296]      // while "1"  (timeout="200")
[22:22:01.296]      // while-condition  =>  TRUE
[22:22:01.296]      // while "1"  (timeout="200")
[22:22:01.296]      // while-condition  =>  TRUE
[22:22:01.296]      // while "1"  (timeout="200")
[22:22:01.296]      // while-condition  =>  TRUE
[22:22:01.296]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.297]      // while "1"  (timeout="200")
[22:22:01.297]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.299]      // while "1"  (timeout="200")
[22:22:01.299]      // while-condition  =>  TRUE
[22:22:01.301]      // while "1"  (timeout="200")
[22:22:01.301]      // while  =>  TIMEOUT
[22:22:01.301]      // end while "1"
[22:22:01.301]    </control>
[22:22:01.301]    <control if="canReadPins" while="" timeout="0" info="">
[22:22:01.301]      // if-block "canReadPins"
[22:22:01.302]        // =>  TRUE
[22:22:01.302]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:22:01.302]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:22:01.303]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:22:01.303]        // while-condition  =>  FALSE
[22:22:01.303]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:22:01.303]      </control>
[22:22:01.303]      // end if-block "canReadPins"
[22:22:01.303]    </control>
[22:22:01.303]    <control if="!canReadPins" while="" timeout="0" info="">
[22:22:01.303]      // if-block "!canReadPins"
[22:22:01.303]        // =>  FALSE
[22:22:01.303]      // skip if-block "!canReadPins"
[22:22:01.304]    </control>
[22:22:01.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:22:01.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:01.304]        // =>  TRUE
[22:22:01.304]      <block atomic="false" info="">
[22:22:01.305]        WriteAP(0x00, 0x190008);
[22:22:01.306]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:01.306]        WriteAP(0xF0, 0x01);
[22:22:01.311]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:01.311]      </block>
[22:22:01.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:01.311]    </control>
[22:22:01.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:22:01.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:01.311]        // =>  FALSE
[22:22:01.311]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:01.311]    </control>
[22:22:01.311]    <block atomic="false" info="">
[22:22:01.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:01.316]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:22:01.316]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:22:01.316]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:01.318]      __ap = 0; //lets make sure we reset the access point selection
[22:22:01.318]        // -> [__ap <= 0x00000000]
[22:22:01.318]    </block>
[22:22:01.318]  </sequence>
[22:22:01.318]  
[22:22:01.338]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:22:01.338]  
[22:22:01.338]  <debugvars>
[22:22:01.338]    // Pre-defined
[22:22:01.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:01.338]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:01.338]    __dp=0x00000000
[22:22:01.338]    __ap=0x00000000
[22:22:01.338]    __traceout=0x00000000      (Trace Disabled)
[22:22:01.338]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:01.338]    __FlashAddr=0x00000000
[22:22:01.338]    __FlashLen=0x00000000
[22:22:01.338]    __FlashArg=0x00000000
[22:22:01.338]    __FlashOp=0x00000000
[22:22:01.338]    __Result=0x00000000
[22:22:01.338]  </debugvars>
[22:22:01.338]  
[22:22:01.338]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:22:01.338]    <block atomic="false" info="">
[22:22:01.338]      __var deviceID = 0;
[22:22:01.338]        // -> [deviceID <= 0x00000000]
[22:22:01.338]      __var version = 0;
[22:22:01.338]        // -> [version <= 0x00000000]
[22:22:01.338]      __var partNum = 0;
[22:22:01.338]        // -> [partNum <= 0x00000000]
[22:22:01.338]      __var manuf = 0;
[22:22:01.338]        // -> [manuf <= 0x00000000]
[22:22:01.338]      __var isMSPM0G1X0X_G3X0X = 0;
[22:22:01.342]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:22:01.342]      __var isProduction = 0;
[22:22:01.342]        // -> [isProduction <= 0x00000000]
[22:22:01.342]      __var continueId = 0;
[22:22:01.342]        // -> [continueId <= 0x00000000]
[22:22:01.342]      deviceID =   Read32(0x41C40004);
[22:22:01.346]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:22:01.346]        // -> [deviceID <= 0x2BB8802F]
[22:22:01.346]      version = deviceID >> 28;
[22:22:01.346]        // -> [version <= 0x00000002]
[22:22:01.346]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:22:01.346]        // -> [partNum <= 0x0000BB88]
[22:22:01.346]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:22:01.346]        // -> [manuf <= 0x00000017]
[22:22:01.346]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:22:01.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:22:01.346]      isProduction = (version > 0);
[22:22:01.346]        // -> [isProduction <= 0x00000001]
[22:22:01.346]    </block>
[22:22:01.346]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:22:01.346]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:22:01.346]        // =>  FALSE
[22:22:01.346]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:22:01.346]    </control>
[22:22:01.346]    <control if="continueId == 4" while="" timeout="0" info="">
[22:22:01.346]      // if-block "continueId == 4"
[22:22:01.346]        // =>  FALSE
[22:22:01.346]      // skip if-block "continueId == 4"
[22:22:01.346]    </control>
[22:22:01.346]    <control if="!isProduction" while="" timeout="0" info="">
[22:22:01.346]      // if-block "!isProduction"
[22:22:01.346]        // =>  FALSE
[22:22:01.346]      // skip if-block "!isProduction"
[22:22:01.346]    </control>
[22:22:01.346]  </sequence>
[22:22:01.346]  
[22:22:29.963]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:22:29.963]  
[22:22:29.974]  <debugvars>
[22:22:29.974]    // Pre-defined
[22:22:29.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:29.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:29.974]    __dp=0x00000000
[22:22:29.974]    __ap=0x00000000
[22:22:29.974]    __traceout=0x00000000      (Trace Disabled)
[22:22:29.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:29.974]    __FlashAddr=0x00000000
[22:22:29.974]    __FlashLen=0x00000000
[22:22:29.974]    __FlashArg=0x00000000
[22:22:29.974]    __FlashOp=0x00000000
[22:22:29.974]    __Result=0x00000000
[22:22:29.974]  </debugvars>
[22:22:29.974]  
[22:22:29.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:22:29.974]    <block atomic="false" info="">
[22:22:29.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:22:29.976]        // -> [isSWJ <= 0x00000001]
[22:22:29.976]      __var hasDormant = __protocol & 0x00020000;
[22:22:29.976]        // -> [hasDormant <= 0x00000000]
[22:22:29.976]      __var protType   = __protocol & 0x0000FFFF;
[22:22:29.976]        // -> [protType <= 0x00000002]
[22:22:29.976]    </block>
[22:22:29.976]    <control if="protType == 1" while="" timeout="0" info="">
[22:22:29.976]      // if-block "protType == 1"
[22:22:29.976]        // =>  FALSE
[22:22:29.976]      // skip if-block "protType == 1"
[22:22:29.976]    </control>
[22:22:29.976]    <control if="protType == 2" while="" timeout="0" info="">
[22:22:29.976]      // if-block "protType == 2"
[22:22:29.976]        // =>  TRUE
[22:22:29.976]      <control if="isSWJ" while="" timeout="0" info="">
[22:22:29.976]        // if-block "isSWJ"
[22:22:29.976]          // =>  TRUE
[22:22:29.976]        <control if="hasDormant" while="" timeout="0" info="">
[22:22:29.976]          // if-block "hasDormant"
[22:22:29.976]            // =>  FALSE
[22:22:29.976]          // skip if-block "hasDormant"
[22:22:29.976]        </control>
[22:22:29.976]        <control if="!hasDormant" while="" timeout="0" info="">
[22:22:29.976]          // if-block "!hasDormant"
[22:22:29.976]            // =>  TRUE
[22:22:29.979]          <block atomic="false" info="">
[22:22:29.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:22:29.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:29.980]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:22:29.980]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:22:29.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:22:29.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:29.980]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:22:29.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:22:29.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:22:29.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:22:29.984]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:22:29.989]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:22:29.989]          </block>
[22:22:29.989]          // end if-block "!hasDormant"
[22:22:29.989]        </control>
[22:22:29.989]        // end if-block "isSWJ"
[22:22:29.989]      </control>
[22:22:29.989]      <control if="!isSWJ" while="" timeout="0" info="">
[22:22:29.989]        // if-block "!isSWJ"
[22:22:29.989]          // =>  FALSE
[22:22:29.989]        // skip if-block "!isSWJ"
[22:22:29.989]      </control>
[22:22:29.989]      <block atomic="false" info="">
[22:22:29.989]        ReadDP(0x0);
[22:22:29.993]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:22:29.993]      </block>
[22:22:29.993]      // end if-block "protType == 2"
[22:22:29.993]    </control>
[22:22:29.993]  </sequence>
[22:22:29.993]  
[22:22:29.997]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:22:29.997]  
[22:22:29.997]  <debugvars>
[22:22:29.997]    // Pre-defined
[22:22:29.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:29.999]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:29.999]    __dp=0x00000000
[22:22:29.999]    __ap=0x00000000
[22:22:29.999]    __traceout=0x00000000      (Trace Disabled)
[22:22:29.999]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:29.999]    __FlashAddr=0x00000000
[22:22:29.999]    __FlashLen=0x00000000
[22:22:29.999]    __FlashArg=0x00000000
[22:22:29.999]    __FlashOp=0x00000000
[22:22:29.999]    __Result=0x00000000
[22:22:29.999]  </debugvars>
[22:22:29.999]  
[22:22:29.999]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:22:29.999]    <block atomic="false" info="">
[22:22:29.999]      __var SW_DP_ABORT       = 0x0;
[22:22:29.999]        // -> [SW_DP_ABORT <= 0x00000000]
[22:22:29.999]      __var DP_CTRL_STAT      = 0x4;
[22:22:30.001]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:22:30.001]      __var DP_SELECT         = 0x8;
[22:22:30.001]        // -> [DP_SELECT <= 0x00000008]
[22:22:30.001]      __var powered_down      = 0;
[22:22:30.001]        // -> [powered_down <= 0x00000000]
[22:22:30.001]      WriteDP(DP_SELECT, 0x00000000);
[22:22:30.001]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:22:30.001]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:22:30.005]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:22:30.005]        // -> [powered_down <= 0x00000001]
[22:22:30.005]    </block>
[22:22:30.009]    <control if="powered_down" while="" timeout="0" info="">
[22:22:30.009]      // if-block "powered_down"
[22:22:30.009]        // =>  TRUE
[22:22:30.009]      <block atomic="false" info="">
[22:22:30.009]        Message(0, "Debug/System power-up request sent");
[22:22:30.009]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:22:30.013]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:22:30.013]      </block>
[22:22:30.013]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:22:30.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:22:30.013]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:22:30.013]        // while-condition  =>  FALSE
[22:22:30.013]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:22:30.013]      </control>
[22:22:30.013]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:22:30.013]        // if-block "(__protocol & 0xFFFF) == 1"
[22:22:30.013]          // =>  FALSE
[22:22:30.013]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:22:30.013]      </control>
[22:22:30.013]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:22:30.013]        // if-block "(__protocol & 0xFFFF) == 2"
[22:22:30.013]          // =>  TRUE
[22:22:30.013]        <block atomic="false" info="">
[22:22:30.013]          Message(0, "executing SWD power up");
[22:22:30.017]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:22:30.021]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:22:30.021]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:22:30.021]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:22:30.021]        </block>
[22:22:30.021]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:22:30.021]      </control>
[22:22:30.021]      // end if-block "powered_down"
[22:22:30.021]    </control>
[22:22:30.021]    <block atomic="false" info="">
[22:22:30.021]      __var DEBUG_PORT_VAL    = 0;
[22:22:30.021]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:22:30.021]      __var ACCESS_POINT_VAL  = 0;
[22:22:30.021]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:22:30.021]      __ap = 1; 
[22:22:30.021]        // -> [__ap <= 0x00000001]
[22:22:30.025]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:22:30.025]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:22:30.025]      __ap = 4;
[22:22:30.025]        // -> [__ap <= 0x00000004]
[22:22:30.025]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:30.033]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:22:30.033]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:22:30.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:30.033]    </block>
[22:22:30.033]    <block atomic="false" info="">
[22:22:30.033]      __var nReset = 0x80;
[22:22:30.033]        // -> [nReset <= 0x00000080]
[22:22:30.033]      __var canReadPins = 0;
[22:22:30.033]        // -> [canReadPins <= 0x00000000]
[22:22:30.033]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:22:30.037]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:22:30.037]        // -> [canReadPins <= 0x00000001]
[22:22:30.037]    </block>
[22:22:30.037]    <control if="" while="1" timeout="200" info="">
[22:22:30.037]      // while "1"  (timeout="200")
[22:22:30.037]      // while-condition  =>  TRUE
[22:22:30.037]      // while "1"  (timeout="200")
[22:22:30.037]      // while-condition  =>  TRUE
[22:22:30.037]      // while "1"  (timeout="200")
[22:22:30.037]      // while-condition  =>  TRUE
[22:22:30.037]      // while "1"  (timeout="200")
[22:22:30.037]      // while-condition  =>  TRUE
[22:22:30.037]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.039]      // while-condition  =>  TRUE
[22:22:30.039]      // while "1"  (timeout="200")
[22:22:30.041]      // while-condition  =>  TRUE
[22:22:30.041]      // while "1"  (timeout="200")
[22:22:30.041]      // while-condition  =>  TRUE
[22:22:30.041]      // while "1"  (timeout="200")
[22:22:30.041]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.042]      // while "1"  (timeout="200")
[22:22:30.042]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.043]      // while "1"  (timeout="200")
[22:22:30.043]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.045]      // while "1"  (timeout="200")
[22:22:30.045]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.049]      // while "1"  (timeout="200")
[22:22:30.049]      // while-condition  =>  TRUE
[22:22:30.053]      // while "1"  (timeout="200")
[22:22:30.053]      // while  =>  TIMEOUT
[22:22:30.053]      // end while "1"
[22:22:30.053]    </control>
[22:22:30.053]    <control if="canReadPins" while="" timeout="0" info="">
[22:22:30.053]      // if-block "canReadPins"
[22:22:30.053]        // =>  TRUE
[22:22:30.053]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:22:30.053]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:22:30.055]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:22:30.055]        // while-condition  =>  FALSE
[22:22:30.055]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:22:30.055]      </control>
[22:22:30.055]      // end if-block "canReadPins"
[22:22:30.055]    </control>
[22:22:30.055]    <control if="!canReadPins" while="" timeout="0" info="">
[22:22:30.055]      // if-block "!canReadPins"
[22:22:30.055]        // =>  FALSE
[22:22:30.055]      // skip if-block "!canReadPins"
[22:22:30.055]    </control>
[22:22:30.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:22:30.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:30.055]        // =>  TRUE
[22:22:30.055]      <block atomic="false" info="">
[22:22:30.055]        WriteAP(0x00, 0x190008);
[22:22:30.059]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:30.059]        WriteAP(0xF0, 0x01);
[22:22:30.062]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:22:30.062]      </block>
[22:22:30.062]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:22:30.062]    </control>
[22:22:30.062]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:22:30.062]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:30.062]        // =>  FALSE
[22:22:30.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:22:30.062]    </control>
[22:22:30.062]    <block atomic="false" info="">
[22:22:30.062]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:22:30.066]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:22:30.066]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:22:30.066]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:22:30.068]      __ap = 0; //lets make sure we reset the access point selection
[22:22:30.068]        // -> [__ap <= 0x00000000]
[22:22:30.068]    </block>
[22:22:30.068]  </sequence>
[22:22:30.068]  
[22:22:30.090]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:22:30.090]  
[22:22:30.090]  <debugvars>
[22:22:30.090]    // Pre-defined
[22:22:30.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:22:30.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:22:30.090]    __dp=0x00000000
[22:22:30.091]    __ap=0x00000000
[22:22:30.091]    __traceout=0x00000000      (Trace Disabled)
[22:22:30.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:22:30.091]    __FlashAddr=0x00000000
[22:22:30.091]    __FlashLen=0x00000000
[22:22:30.091]    __FlashArg=0x00000000
[22:22:30.091]    __FlashOp=0x00000000
[22:22:30.091]    __Result=0x00000000
[22:22:30.091]  </debugvars>
[22:22:30.091]  
[22:22:30.091]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:22:30.091]    <block atomic="false" info="">
[22:22:30.091]      __var deviceID = 0;
[22:22:30.091]        // -> [deviceID <= 0x00000000]
[22:22:30.091]      __var version = 0;
[22:22:30.091]        // -> [version <= 0x00000000]
[22:22:30.091]      __var partNum = 0;
[22:22:30.091]        // -> [partNum <= 0x00000000]
[22:22:30.091]      __var manuf = 0;
[22:22:30.091]        // -> [manuf <= 0x00000000]
[22:22:30.091]      __var isMSPM0G1X0X_G3X0X = 0;
[22:22:30.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:22:30.091]      __var isProduction = 0;
[22:22:30.091]        // -> [isProduction <= 0x00000000]
[22:22:30.091]      __var continueId = 0;
[22:22:30.091]        // -> [continueId <= 0x00000000]
[22:22:30.091]      deviceID =   Read32(0x41C40004);
[22:22:30.099]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:22:30.099]        // -> [deviceID <= 0x2BB8802F]
[22:22:30.099]      version = deviceID >> 28;
[22:22:30.099]        // -> [version <= 0x00000002]
[22:22:30.099]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:22:30.099]        // -> [partNum <= 0x0000BB88]
[22:22:30.099]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:22:30.099]        // -> [manuf <= 0x00000017]
[22:22:30.099]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:22:30.099]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:22:30.103]      isProduction = (version > 0);
[22:22:30.103]        // -> [isProduction <= 0x00000001]
[22:22:30.103]    </block>
[22:22:30.103]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:22:30.103]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:22:30.103]        // =>  FALSE
[22:22:30.103]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:22:30.103]    </control>
[22:22:30.103]    <control if="continueId == 4" while="" timeout="0" info="">
[22:22:30.103]      // if-block "continueId == 4"
[22:22:30.103]        // =>  FALSE
[22:22:30.103]      // skip if-block "continueId == 4"
[22:22:30.103]    </control>
[22:22:30.103]    <control if="!isProduction" while="" timeout="0" info="">
[22:22:30.103]      // if-block "!isProduction"
[22:22:30.103]        // =>  FALSE
[22:22:30.103]      // skip if-block "!isProduction"
[22:22:30.103]    </control>
[22:22:30.103]  </sequence>
[22:22:30.103]  
[22:24:39.259]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:24:39.259]  
[22:24:39.268]  <debugvars>
[22:24:39.268]    // Pre-defined
[22:24:39.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:24:39.268]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:24:39.268]    __dp=0x00000000
[22:24:39.268]    __ap=0x00000000
[22:24:39.268]    __traceout=0x00000000      (Trace Disabled)
[22:24:39.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:24:39.268]    __FlashAddr=0x00000000
[22:24:39.268]    __FlashLen=0x00000000
[22:24:39.268]    __FlashArg=0x00000000
[22:24:39.268]    __FlashOp=0x00000000
[22:24:39.268]    __Result=0x00000000
[22:24:39.268]  </debugvars>
[22:24:39.268]  
[22:24:39.268]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:24:39.268]    <block atomic="false" info="">
[22:24:39.268]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:24:39.268]        // -> [isSWJ <= 0x00000001]
[22:24:39.268]      __var hasDormant = __protocol & 0x00020000;
[22:24:39.268]        // -> [hasDormant <= 0x00000000]
[22:24:39.268]      __var protType   = __protocol & 0x0000FFFF;
[22:24:39.268]        // -> [protType <= 0x00000002]
[22:24:39.270]    </block>
[22:24:39.270]    <control if="protType == 1" while="" timeout="0" info="">
[22:24:39.270]      // if-block "protType == 1"
[22:24:39.270]        // =>  FALSE
[22:24:39.270]      // skip if-block "protType == 1"
[22:24:39.270]    </control>
[22:24:39.270]    <control if="protType == 2" while="" timeout="0" info="">
[22:24:39.270]      // if-block "protType == 2"
[22:24:39.270]        // =>  TRUE
[22:24:39.270]      <control if="isSWJ" while="" timeout="0" info="">
[22:24:39.270]        // if-block "isSWJ"
[22:24:39.270]          // =>  TRUE
[22:24:39.270]        <control if="hasDormant" while="" timeout="0" info="">
[22:24:39.270]          // if-block "hasDormant"
[22:24:39.270]            // =>  FALSE
[22:24:39.270]          // skip if-block "hasDormant"
[22:24:39.270]        </control>
[22:24:39.270]        <control if="!hasDormant" while="" timeout="0" info="">
[22:24:39.270]          // if-block "!hasDormant"
[22:24:39.270]            // =>  TRUE
[22:24:39.270]          <block atomic="false" info="">
[22:24:39.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:24:39.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:24:39.274]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:24:39.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:24:39.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:24:39.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:24:39.277]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:24:39.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:24:39.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:24:39.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:24:39.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:24:39.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:24:39.281]          </block>
[22:24:39.281]          // end if-block "!hasDormant"
[22:24:39.281]        </control>
[22:24:39.283]        // end if-block "isSWJ"
[22:24:39.283]      </control>
[22:24:39.283]      <control if="!isSWJ" while="" timeout="0" info="">
[22:24:39.283]        // if-block "!isSWJ"
[22:24:39.283]          // =>  FALSE
[22:24:39.283]        // skip if-block "!isSWJ"
[22:24:39.283]      </control>
[22:24:39.283]      <block atomic="false" info="">
[22:24:39.283]        ReadDP(0x0);
[22:24:39.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:24:39.283]      </block>
[22:24:39.283]      // end if-block "protType == 2"
[22:24:39.283]    </control>
[22:24:39.283]  </sequence>
[22:24:39.283]  
[22:24:39.290]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:24:39.290]  
[22:24:39.290]  <debugvars>
[22:24:39.290]    // Pre-defined
[22:24:39.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:24:39.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:24:39.290]    __dp=0x00000000
[22:24:39.291]    __ap=0x00000000
[22:24:39.291]    __traceout=0x00000000      (Trace Disabled)
[22:24:39.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:24:39.291]    __FlashAddr=0x00000000
[22:24:39.291]    __FlashLen=0x00000000
[22:24:39.292]    __FlashArg=0x00000000
[22:24:39.292]    __FlashOp=0x00000000
[22:24:39.292]    __Result=0x00000000
[22:24:39.292]  </debugvars>
[22:24:39.292]  
[22:24:39.292]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:24:39.292]    <block atomic="false" info="">
[22:24:39.292]      __var SW_DP_ABORT       = 0x0;
[22:24:39.292]        // -> [SW_DP_ABORT <= 0x00000000]
[22:24:39.292]      __var DP_CTRL_STAT      = 0x4;
[22:24:39.292]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:24:39.292]      __var DP_SELECT         = 0x8;
[22:24:39.292]        // -> [DP_SELECT <= 0x00000008]
[22:24:39.292]      __var powered_down      = 0;
[22:24:39.292]        // -> [powered_down <= 0x00000000]
[22:24:39.292]      WriteDP(DP_SELECT, 0x00000000);
[22:24:39.295]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:24:39.295]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:24:39.295]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:24:39.295]        // -> [powered_down <= 0x00000001]
[22:24:39.295]    </block>
[22:24:39.295]    <control if="powered_down" while="" timeout="0" info="">
[22:24:39.295]      // if-block "powered_down"
[22:24:39.295]        // =>  TRUE
[22:24:39.295]      <block atomic="false" info="">
[22:24:39.295]        Message(0, "Debug/System power-up request sent");
[22:24:39.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:24:39.301]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:24:39.301]      </block>
[22:24:39.301]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:24:39.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:24:39.301]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:24:39.301]        // while-condition  =>  FALSE
[22:24:39.301]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:24:39.301]      </control>
[22:24:39.301]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:24:39.303]        // if-block "(__protocol & 0xFFFF) == 1"
[22:24:39.303]          // =>  FALSE
[22:24:39.303]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:24:39.303]      </control>
[22:24:39.303]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:24:39.303]        // if-block "(__protocol & 0xFFFF) == 2"
[22:24:39.303]          // =>  TRUE
[22:24:39.303]        <block atomic="false" info="">
[22:24:39.303]          Message(0, "executing SWD power up");
[22:24:39.305]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:24:39.307]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:24:39.307]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:24:39.312]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:24:39.312]        </block>
[22:24:39.312]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:24:39.312]      </control>
[22:24:39.312]      // end if-block "powered_down"
[22:24:39.312]    </control>
[22:24:39.312]    <block atomic="false" info="">
[22:24:39.312]      __var DEBUG_PORT_VAL    = 0;
[22:24:39.312]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:24:39.312]      __var ACCESS_POINT_VAL  = 0;
[22:24:39.312]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:24:39.314]      __ap = 1; 
[22:24:39.314]        // -> [__ap <= 0x00000001]
[22:24:39.314]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:24:39.317]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:24:39.317]      __ap = 4;
[22:24:39.317]        // -> [__ap <= 0x00000004]
[22:24:39.317]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:24:39.323]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:24:39.323]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:24:39.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:24:39.324]    </block>
[22:24:39.324]    <block atomic="false" info="">
[22:24:39.324]      __var nReset = 0x80;
[22:24:39.324]        // -> [nReset <= 0x00000080]
[22:24:39.324]      __var canReadPins = 0;
[22:24:39.324]        // -> [canReadPins <= 0x00000000]
[22:24:39.324]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:24:39.324]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:24:39.324]        // -> [canReadPins <= 0x00000001]
[22:24:39.324]    </block>
[22:24:39.324]    <control if="" while="1" timeout="200" info="">
[22:24:39.328]      // while "1"  (timeout="200")
[22:24:39.328]      // while-condition  =>  TRUE
[22:24:39.328]      // while "1"  (timeout="200")
[22:24:39.328]      // while-condition  =>  TRUE
[22:24:39.328]      // while "1"  (timeout="200")
[22:24:39.328]      // while-condition  =>  TRUE
[22:24:39.328]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.329]      // while "1"  (timeout="200")
[22:24:39.329]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.330]      // while-condition  =>  TRUE
[22:24:39.330]      // while "1"  (timeout="200")
[22:24:39.332]      // while-condition  =>  TRUE
[22:24:39.332]      // while "1"  (timeout="200")
[22:24:39.332]      // while  =>  TIMEOUT
[22:24:39.332]      // end while "1"
[22:24:39.332]    </control>
[22:24:39.332]    <control if="canReadPins" while="" timeout="0" info="">
[22:24:39.332]      // if-block "canReadPins"
[22:24:39.332]        // =>  TRUE
[22:24:39.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:24:39.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:24:39.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:24:39.332]        // while-condition  =>  FALSE
[22:24:39.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:24:39.332]      </control>
[22:24:39.332]      // end if-block "canReadPins"
[22:24:39.332]    </control>
[22:24:39.332]    <control if="!canReadPins" while="" timeout="0" info="">
[22:24:39.332]      // if-block "!canReadPins"
[22:24:39.332]        // =>  FALSE
[22:24:39.332]      // skip if-block "!canReadPins"
[22:24:39.332]    </control>
[22:24:39.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:24:39.336]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:24:39.336]        // =>  TRUE
[22:24:39.336]      <block atomic="false" info="">
[22:24:39.336]        WriteAP(0x00, 0x190008);
[22:24:39.336]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:24:39.336]        WriteAP(0xF0, 0x01);
[22:24:39.342]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:24:39.342]      </block>
[22:24:39.342]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:24:39.342]    </control>
[22:24:39.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:24:39.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:24:39.345]        // =>  FALSE
[22:24:39.345]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:24:39.345]    </control>
[22:24:39.345]    <block atomic="false" info="">
[22:24:39.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:24:39.345]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:24:39.345]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:24:39.345]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:24:39.350]      __ap = 0; //lets make sure we reset the access point selection
[22:24:39.350]        // -> [__ap <= 0x00000000]
[22:24:39.350]    </block>
[22:24:39.350]  </sequence>
[22:24:39.350]  
[22:24:39.373]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:24:39.373]  
[22:24:39.373]  <debugvars>
[22:24:39.373]    // Pre-defined
[22:24:39.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:24:39.373]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:24:39.373]    __dp=0x00000000
[22:24:39.373]    __ap=0x00000000
[22:24:39.373]    __traceout=0x00000000      (Trace Disabled)
[22:24:39.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:24:39.373]    __FlashAddr=0x00000000
[22:24:39.373]    __FlashLen=0x00000000
[22:24:39.373]    __FlashArg=0x00000000
[22:24:39.373]    __FlashOp=0x00000000
[22:24:39.373]    __Result=0x00000000
[22:24:39.373]  </debugvars>
[22:24:39.373]  
[22:24:39.373]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:24:39.373]    <block atomic="false" info="">
[22:24:39.375]      __var deviceID = 0;
[22:24:39.375]        // -> [deviceID <= 0x00000000]
[22:24:39.375]      __var version = 0;
[22:24:39.375]        // -> [version <= 0x00000000]
[22:24:39.375]      __var partNum = 0;
[22:24:39.375]        // -> [partNum <= 0x00000000]
[22:24:39.375]      __var manuf = 0;
[22:24:39.375]        // -> [manuf <= 0x00000000]
[22:24:39.375]      __var isMSPM0G1X0X_G3X0X = 0;
[22:24:39.375]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:24:39.375]      __var isProduction = 0;
[22:24:39.375]        // -> [isProduction <= 0x00000000]
[22:24:39.375]      __var continueId = 0;
[22:24:39.375]        // -> [continueId <= 0x00000000]
[22:24:39.375]      deviceID =   Read32(0x41C40004);
[22:24:39.381]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:24:39.381]        // -> [deviceID <= 0x2BB8802F]
[22:24:39.381]      version = deviceID >> 28;
[22:24:39.381]        // -> [version <= 0x00000002]
[22:24:39.381]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:24:39.381]        // -> [partNum <= 0x0000BB88]
[22:24:39.381]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:24:39.381]        // -> [manuf <= 0x00000017]
[22:24:39.381]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:24:39.381]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:24:39.381]      isProduction = (version > 0);
[22:24:39.381]        // -> [isProduction <= 0x00000001]
[22:24:39.381]    </block>
[22:24:39.381]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:24:39.381]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:24:39.381]        // =>  FALSE
[22:24:39.383]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:24:39.383]    </control>
[22:24:39.383]    <control if="continueId == 4" while="" timeout="0" info="">
[22:24:39.383]      // if-block "continueId == 4"
[22:24:39.383]        // =>  FALSE
[22:24:39.383]      // skip if-block "continueId == 4"
[22:24:39.383]    </control>
[22:24:39.383]    <control if="!isProduction" while="" timeout="0" info="">
[22:24:39.383]      // if-block "!isProduction"
[22:24:39.383]        // =>  FALSE
[22:24:39.383]      // skip if-block "!isProduction"
[22:24:39.383]    </control>
[22:24:39.383]  </sequence>
[22:24:39.383]  
[22:26:09.606]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:26:09.606]  
[22:26:09.606]  <debugvars>
[22:26:09.606]    // Pre-defined
[22:26:09.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:26:09.607]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:26:09.607]    __dp=0x00000000
[22:26:09.607]    __ap=0x00000000
[22:26:09.607]    __traceout=0x00000000      (Trace Disabled)
[22:26:09.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:26:09.607]    __FlashAddr=0x00000000
[22:26:09.607]    __FlashLen=0x00000000
[22:26:09.607]    __FlashArg=0x00000000
[22:26:09.608]    __FlashOp=0x00000000
[22:26:09.608]    __Result=0x00000000
[22:26:09.608]  </debugvars>
[22:26:09.608]  
[22:26:09.608]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:26:09.608]    <block atomic="false" info="">
[22:26:09.608]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:26:09.608]        // -> [isSWJ <= 0x00000001]
[22:26:09.609]      __var hasDormant = __protocol & 0x00020000;
[22:26:09.609]        // -> [hasDormant <= 0x00000000]
[22:26:09.609]      __var protType   = __protocol & 0x0000FFFF;
[22:26:09.609]        // -> [protType <= 0x00000002]
[22:26:09.609]    </block>
[22:26:09.609]    <control if="protType == 1" while="" timeout="0" info="">
[22:26:09.609]      // if-block "protType == 1"
[22:26:09.609]        // =>  FALSE
[22:26:09.609]      // skip if-block "protType == 1"
[22:26:09.609]    </control>
[22:26:09.609]    <control if="protType == 2" while="" timeout="0" info="">
[22:26:09.610]      // if-block "protType == 2"
[22:26:09.610]        // =>  TRUE
[22:26:09.610]      <control if="isSWJ" while="" timeout="0" info="">
[22:26:09.610]        // if-block "isSWJ"
[22:26:09.610]          // =>  TRUE
[22:26:09.610]        <control if="hasDormant" while="" timeout="0" info="">
[22:26:09.610]          // if-block "hasDormant"
[22:26:09.610]            // =>  FALSE
[22:26:09.610]          // skip if-block "hasDormant"
[22:26:09.610]        </control>
[22:26:09.610]        <control if="!hasDormant" while="" timeout="0" info="">
[22:26:09.610]          // if-block "!hasDormant"
[22:26:09.610]            // =>  TRUE
[22:26:09.610]          <block atomic="false" info="">
[22:26:09.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:26:09.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:26:09.612]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:26:09.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:26:09.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:26:09.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:26:09.616]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:26:09.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:26:09.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:26:09.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:26:09.619]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:26:09.620]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:26:09.620]          </block>
[22:26:09.620]          // end if-block "!hasDormant"
[22:26:09.620]        </control>
[22:26:09.620]        // end if-block "isSWJ"
[22:26:09.620]      </control>
[22:26:09.621]      <control if="!isSWJ" while="" timeout="0" info="">
[22:26:09.621]        // if-block "!isSWJ"
[22:26:09.621]          // =>  FALSE
[22:26:09.621]        // skip if-block "!isSWJ"
[22:26:09.621]      </control>
[22:26:09.621]      <block atomic="false" info="">
[22:26:09.621]        ReadDP(0x0);
[22:26:09.623]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:26:09.623]      </block>
[22:26:09.623]      // end if-block "protType == 2"
[22:26:09.623]    </control>
[22:26:09.623]  </sequence>
[22:26:09.623]  
[22:26:09.625]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:26:09.625]  
[22:26:09.625]  <debugvars>
[22:26:09.625]    // Pre-defined
[22:26:09.625]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:26:09.627]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:26:09.627]    __dp=0x00000000
[22:26:09.627]    __ap=0x00000000
[22:26:09.627]    __traceout=0x00000000      (Trace Disabled)
[22:26:09.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:26:09.627]    __FlashAddr=0x00000000
[22:26:09.627]    __FlashLen=0x00000000
[22:26:09.627]    __FlashArg=0x00000000
[22:26:09.627]    __FlashOp=0x00000000
[22:26:09.627]    __Result=0x00000000
[22:26:09.627]  </debugvars>
[22:26:09.627]  
[22:26:09.627]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:26:09.627]    <block atomic="false" info="">
[22:26:09.627]      __var SW_DP_ABORT       = 0x0;
[22:26:09.627]        // -> [SW_DP_ABORT <= 0x00000000]
[22:26:09.627]      __var DP_CTRL_STAT      = 0x4;
[22:26:09.627]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:26:09.627]      __var DP_SELECT         = 0x8;
[22:26:09.627]        // -> [DP_SELECT <= 0x00000008]
[22:26:09.627]      __var powered_down      = 0;
[22:26:09.627]        // -> [powered_down <= 0x00000000]
[22:26:09.627]      WriteDP(DP_SELECT, 0x00000000);
[22:26:09.630]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:26:09.630]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:26:09.631]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:26:09.631]        // -> [powered_down <= 0x00000001]
[22:26:09.631]    </block>
[22:26:09.631]    <control if="powered_down" while="" timeout="0" info="">
[22:26:09.631]      // if-block "powered_down"
[22:26:09.631]        // =>  TRUE
[22:26:09.631]      <block atomic="false" info="">
[22:26:09.631]        Message(0, "Debug/System power-up request sent");
[22:26:09.634]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:26:09.640]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:26:09.640]      </block>
[22:26:09.641]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:26:09.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:26:09.642]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:26:09.642]        // while-condition  =>  FALSE
[22:26:09.642]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:26:09.642]      </control>
[22:26:09.642]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:26:09.642]        // if-block "(__protocol & 0xFFFF) == 1"
[22:26:09.642]          // =>  FALSE
[22:26:09.642]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:26:09.642]      </control>
[22:26:09.642]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:26:09.644]        // if-block "(__protocol & 0xFFFF) == 2"
[22:26:09.644]          // =>  TRUE
[22:26:09.644]        <block atomic="false" info="">
[22:26:09.644]          Message(0, "executing SWD power up");
[22:26:09.645]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:26:09.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:26:09.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:26:09.648]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:26:09.648]        </block>
[22:26:09.648]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:26:09.648]      </control>
[22:26:09.648]      // end if-block "powered_down"
[22:26:09.648]    </control>
[22:26:09.648]    <block atomic="false" info="">
[22:26:09.648]      __var DEBUG_PORT_VAL    = 0;
[22:26:09.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:26:09.648]      __var ACCESS_POINT_VAL  = 0;
[22:26:09.648]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:26:09.648]      __ap = 1; 
[22:26:09.648]        // -> [__ap <= 0x00000001]
[22:26:09.652]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:26:09.652]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:26:09.652]      __ap = 4;
[22:26:09.652]        // -> [__ap <= 0x00000004]
[22:26:09.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:26:09.656]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:26:09.656]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:26:09.656]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:26:09.660]    </block>
[22:26:09.660]    <block atomic="false" info="">
[22:26:09.660]      __var nReset = 0x80;
[22:26:09.660]        // -> [nReset <= 0x00000080]
[22:26:09.660]      __var canReadPins = 0;
[22:26:09.660]        // -> [canReadPins <= 0x00000000]
[22:26:09.660]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:26:09.662]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:26:09.662]        // -> [canReadPins <= 0x00000001]
[22:26:09.664]    </block>
[22:26:09.664]    <control if="" while="1" timeout="200" info="">
[22:26:09.664]      // while "1"  (timeout="200")
[22:26:09.664]      // while-condition  =>  TRUE
[22:26:09.664]      // while "1"  (timeout="200")
[22:26:09.664]      // while-condition  =>  TRUE
[22:26:09.664]      // while "1"  (timeout="200")
[22:26:09.664]      // while-condition  =>  TRUE
[22:26:09.664]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.665]      // while "1"  (timeout="200")
[22:26:09.665]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.666]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.666]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.666]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.666]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.666]      // while-condition  =>  TRUE
[22:26:09.666]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.668]      // while "1"  (timeout="200")
[22:26:09.668]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.669]      // while "1"  (timeout="200")
[22:26:09.669]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.673]      // while "1"  (timeout="200")
[22:26:09.673]      // while-condition  =>  TRUE
[22:26:09.677]      // while "1"  (timeout="200")
[22:26:09.677]      // while  =>  TIMEOUT
[22:26:09.677]      // end while "1"
[22:26:09.677]    </control>
[22:26:09.677]    <control if="canReadPins" while="" timeout="0" info="">
[22:26:09.677]      // if-block "canReadPins"
[22:26:09.677]        // =>  TRUE
[22:26:09.677]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:26:09.677]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:26:09.679]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:26:09.679]        // while-condition  =>  FALSE
[22:26:09.679]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:26:09.679]      </control>
[22:26:09.679]      // end if-block "canReadPins"
[22:26:09.679]    </control>
[22:26:09.679]    <control if="!canReadPins" while="" timeout="0" info="">
[22:26:09.679]      // if-block "!canReadPins"
[22:26:09.679]        // =>  FALSE
[22:26:09.679]      // skip if-block "!canReadPins"
[22:26:09.679]    </control>
[22:26:09.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:26:09.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:26:09.679]        // =>  TRUE
[22:26:09.679]      <block atomic="false" info="">
[22:26:09.679]        WriteAP(0x00, 0x190008);
[22:26:09.681]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:26:09.681]        WriteAP(0xF0, 0x01);
[22:26:09.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:26:09.686]      </block>
[22:26:09.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:26:09.686]    </control>
[22:26:09.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:26:09.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:26:09.686]        // =>  FALSE
[22:26:09.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:26:09.686]    </control>
[22:26:09.686]    <block atomic="false" info="">
[22:26:09.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:26:09.687]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:26:09.690]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:26:09.690]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:26:09.691]      __ap = 0; //lets make sure we reset the access point selection
[22:26:09.691]        // -> [__ap <= 0x00000000]
[22:26:09.691]    </block>
[22:26:09.691]  </sequence>
[22:26:09.691]  
[22:26:09.714]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:26:09.714]  
[22:26:09.714]  <debugvars>
[22:26:09.714]    // Pre-defined
[22:26:09.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:26:09.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:26:09.714]    __dp=0x00000000
[22:26:09.714]    __ap=0x00000000
[22:26:09.714]    __traceout=0x00000000      (Trace Disabled)
[22:26:09.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:26:09.714]    __FlashAddr=0x00000000
[22:26:09.718]    __FlashLen=0x00000000
[22:26:09.718]    __FlashArg=0x00000000
[22:26:09.718]    __FlashOp=0x00000000
[22:26:09.718]    __Result=0x00000000
[22:26:09.718]  </debugvars>
[22:26:09.718]  
[22:26:09.718]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:26:09.718]    <block atomic="false" info="">
[22:26:09.718]      __var deviceID = 0;
[22:26:09.718]        // -> [deviceID <= 0x00000000]
[22:26:09.718]      __var version = 0;
[22:26:09.718]        // -> [version <= 0x00000000]
[22:26:09.718]      __var partNum = 0;
[22:26:09.718]        // -> [partNum <= 0x00000000]
[22:26:09.718]      __var manuf = 0;
[22:26:09.718]        // -> [manuf <= 0x00000000]
[22:26:09.718]      __var isMSPM0G1X0X_G3X0X = 0;
[22:26:09.718]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:26:09.718]      __var isProduction = 0;
[22:26:09.718]        // -> [isProduction <= 0x00000000]
[22:26:09.718]      __var continueId = 0;
[22:26:09.718]        // -> [continueId <= 0x00000000]
[22:26:09.718]      deviceID =   Read32(0x41C40004);
[22:26:09.722]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:26:09.722]        // -> [deviceID <= 0x2BB8802F]
[22:26:09.722]      version = deviceID >> 28;
[22:26:09.722]        // -> [version <= 0x00000002]
[22:26:09.722]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:26:09.722]        // -> [partNum <= 0x0000BB88]
[22:26:09.722]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:26:09.722]        // -> [manuf <= 0x00000017]
[22:26:09.722]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:26:09.722]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:26:09.722]      isProduction = (version > 0);
[22:26:09.722]        // -> [isProduction <= 0x00000001]
[22:26:09.722]    </block>
[22:26:09.722]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:26:09.722]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:26:09.726]        // =>  FALSE
[22:26:09.726]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:26:09.726]    </control>
[22:26:09.726]    <control if="continueId == 4" while="" timeout="0" info="">
[22:26:09.726]      // if-block "continueId == 4"
[22:26:09.726]        // =>  FALSE
[22:26:09.726]      // skip if-block "continueId == 4"
[22:26:09.726]    </control>
[22:26:09.726]    <control if="!isProduction" while="" timeout="0" info="">
[22:26:09.726]      // if-block "!isProduction"
[22:26:09.726]        // =>  FALSE
[22:26:09.726]      // skip if-block "!isProduction"
[22:26:09.726]    </control>
[22:26:09.726]  </sequence>
[22:26:09.726]  
