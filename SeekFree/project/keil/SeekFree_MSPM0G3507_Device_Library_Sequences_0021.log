/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0021.log
 *  Created     : 15:55:56 (02/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:55:56.129]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:55:56.129]  
[15:55:56.129]  <debugvars>
[15:55:56.129]    // Pre-defined
[15:55:56.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:55:56.129]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:55:56.129]    __dp=0x00000000
[15:55:56.129]    __ap=0x00000000
[15:55:56.129]    __traceout=0x00000000      (Trace Disabled)
[15:55:56.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:55:56.129]    __FlashAddr=0x00000000
[15:55:56.129]    __FlashLen=0x00000000
[15:55:56.129]    __FlashArg=0x00000000
[15:55:56.129]    __FlashOp=0x00000000
[15:55:56.129]    __Result=0x00000000
[15:55:56.129]  </debugvars>
[15:55:56.129]  
[15:55:56.129]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:55:56.129]    <block atomic="false" info="">
[15:55:56.129]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:55:56.129]        // -> [isSWJ <= 0x00000001]
[15:55:56.129]      __var hasDormant = __protocol & 0x00020000;
[15:55:56.129]        // -> [hasDormant <= 0x00000000]
[15:55:56.129]      __var protType   = __protocol & 0x0000FFFF;
[15:55:56.129]        // -> [protType <= 0x00000002]
[15:55:56.129]    </block>
[15:55:56.129]    <control if="protType == 1" while="" timeout="0" info="">
[15:55:56.129]      // if-block "protType == 1"
[15:55:56.129]        // =>  FALSE
[15:55:56.129]      // skip if-block "protType == 1"
[15:55:56.129]    </control>
[15:55:56.129]    <control if="protType == 2" while="" timeout="0" info="">
[15:55:56.129]      // if-block "protType == 2"
[15:55:56.129]        // =>  TRUE
[15:55:56.129]      <control if="isSWJ" while="" timeout="0" info="">
[15:55:56.129]        // if-block "isSWJ"
[15:55:56.129]          // =>  TRUE
[15:55:56.129]        <control if="hasDormant" while="" timeout="0" info="">
[15:55:56.129]          // if-block "hasDormant"
[15:55:56.136]            // =>  FALSE
[15:55:56.136]          // skip if-block "hasDormant"
[15:55:56.136]        </control>
[15:55:56.136]        <control if="!hasDormant" while="" timeout="0" info="">
[15:55:56.136]          // if-block "!hasDormant"
[15:55:56.136]            // =>  TRUE
[15:55:56.136]          <block atomic="false" info="">
[15:55:56.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:55:56.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:55:56.136]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:55:56.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:55:56.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:55:56.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:55:56.146]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:55:56.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:55:56.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:55:56.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:55:56.146]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:55:56.156]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:55:56.156]          </block>
[15:55:56.156]          // end if-block "!hasDormant"
[15:55:56.156]        </control>
[15:55:56.156]        // end if-block "isSWJ"
[15:55:56.156]      </control>
[15:55:56.156]      <control if="!isSWJ" while="" timeout="0" info="">
[15:55:56.156]        // if-block "!isSWJ"
[15:55:56.156]          // =>  FALSE
[15:55:56.156]        // skip if-block "!isSWJ"
[15:55:56.156]      </control>
[15:55:56.156]      <block atomic="false" info="">
[15:55:56.156]        ReadDP(0x0);
[15:55:56.166]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:55:56.166]      </block>
[15:55:56.166]      // end if-block "protType == 2"
[15:55:56.166]    </control>
[15:55:56.166]  </sequence>
[15:55:56.166]  
[15:55:56.166]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:55:56.166]  
[15:55:56.166]  <debugvars>
[15:55:56.166]    // Pre-defined
[15:55:56.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:55:56.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:55:56.166]    __dp=0x00000000
[15:55:56.166]    __ap=0x00000000
[15:55:56.166]    __traceout=0x00000000      (Trace Disabled)
[15:55:56.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:55:56.166]    __FlashAddr=0x00000000
[15:55:56.176]    __FlashLen=0x00000000
[15:55:56.176]    __FlashArg=0x00000000
[15:55:56.176]    __FlashOp=0x00000000
[15:55:56.176]    __Result=0x00000000
[15:55:56.176]  </debugvars>
[15:55:56.176]  
[15:55:56.176]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:55:56.176]    <block atomic="false" info="">
[15:55:56.176]      __var SW_DP_ABORT       = 0x0;
[15:55:56.176]        // -> [SW_DP_ABORT <= 0x00000000]
[15:55:56.176]      __var DP_CTRL_STAT      = 0x4;
[15:55:56.176]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:55:56.176]      __var DP_SELECT         = 0x8;
[15:55:56.176]        // -> [DP_SELECT <= 0x00000008]
[15:55:56.176]      __var powered_down      = 0;
[15:55:56.176]        // -> [powered_down <= 0x00000000]
[15:55:56.176]      WriteDP(DP_SELECT, 0x00000000);
[15:55:56.186]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:55:56.186]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:55:56.186]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:55:56.186]        // -> [powered_down <= 0x00000001]
[15:55:56.186]    </block>
[15:55:56.186]    <control if="powered_down" while="" timeout="0" info="">
[15:55:56.186]      // if-block "powered_down"
[15:55:56.186]        // =>  TRUE
[15:55:56.186]      <block atomic="false" info="">
[15:55:56.186]        Message(0, "Debug/System power-up request sent");
[15:55:56.186]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:55:56.186]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:55:56.186]      </block>
[15:55:56.186]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:55:56.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:55:56.196]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:55:56.196]        // while-condition  =>  FALSE
[15:55:56.196]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:55:56.196]      </control>
[15:55:56.196]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:55:56.196]        // if-block "(__protocol & 0xFFFF) == 1"
[15:55:56.196]          // =>  FALSE
[15:55:56.196]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:55:56.196]      </control>
[15:55:56.196]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:55:56.196]        // if-block "(__protocol & 0xFFFF) == 2"
[15:55:56.196]          // =>  TRUE
[15:55:56.196]        <block atomic="false" info="">
[15:55:56.196]          Message(0, "executing SWD power up");
[15:55:56.196]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:55:56.196]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:55:56.196]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:55:56.206]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:55:56.206]        </block>
[15:55:56.206]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:55:56.206]      </control>
[15:55:56.206]      // end if-block "powered_down"
[15:55:56.206]    </control>
[15:55:56.206]    <block atomic="false" info="">
[15:55:56.206]      __var DEBUG_PORT_VAL    = 0;
[15:55:56.206]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:55:56.206]      __var ACCESS_POINT_VAL  = 0;
[15:55:56.206]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:55:56.206]      __ap = 1; 
[15:55:56.206]        // -> [__ap <= 0x00000001]
[15:55:56.206]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:55:56.216]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:55:56.216]      __ap = 4;
[15:55:56.216]        // -> [__ap <= 0x00000004]
[15:55:56.216]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:55:56.226]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:55:56.226]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:55:56.226]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:55:56.226]    </block>
[15:55:56.226]    <block atomic="false" info="">
[15:55:56.226]      __var nReset = 0x80;
[15:55:56.226]        // -> [nReset <= 0x00000080]
[15:55:56.226]      __var canReadPins = 0;
[15:55:56.226]        // -> [canReadPins <= 0x00000000]
[15:55:56.226]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:55:56.226]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:55:56.226]        // -> [canReadPins <= 0x00000001]
[15:55:56.226]    </block>
[15:55:56.236]    <control if="" while="1" timeout="200" info="">
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.236]      // while "1"  (timeout="200")
[15:55:56.236]      // while-condition  =>  TRUE
[15:55:56.246]      // while "1"  (timeout="200")
[15:55:56.246]      // while  =>  TIMEOUT
[15:55:56.246]      // end while "1"
[15:55:56.246]    </control>
[15:55:56.246]    <control if="canReadPins" while="" timeout="0" info="">
[15:55:56.246]      // if-block "canReadPins"
[15:55:56.246]        // =>  TRUE
[15:55:56.246]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:55:56.246]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:55:56.246]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:55:56.246]        // while-condition  =>  FALSE
[15:55:56.246]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:55:56.246]      </control>
[15:55:56.246]      // end if-block "canReadPins"
[15:55:56.246]    </control>
[15:55:56.246]    <control if="!canReadPins" while="" timeout="0" info="">
[15:55:56.246]      // if-block "!canReadPins"
[15:55:56.246]        // =>  FALSE
[15:55:56.246]      // skip if-block "!canReadPins"
[15:55:56.246]    </control>
[15:55:56.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:55:56.246]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:55:56.246]        // =>  TRUE
[15:55:56.246]      <block atomic="false" info="">
[15:55:56.246]        WriteAP(0x00, 0x190008);
[15:55:56.256]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:55:56.256]        WriteAP(0xF0, 0x01);
[15:55:56.266]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:55:56.266]      </block>
[15:55:56.266]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:55:56.266]    </control>
[15:55:56.266]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:55:56.266]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:55:56.266]        // =>  FALSE
[15:55:56.266]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:55:56.266]    </control>
[15:55:56.266]    <block atomic="false" info="">
[15:55:56.266]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:55:56.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:55:56.276]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:55:56.276]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:55:56.276]      __ap = 0; //lets make sure we reset the access point selection
[15:55:56.276]        // -> [__ap <= 0x00000000]
[15:55:56.276]    </block>
[15:55:56.276]  </sequence>
[15:55:56.276]  
[15:55:56.366]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:55:56.366]  
[15:55:56.366]  <debugvars>
[15:55:56.366]    // Pre-defined
[15:55:56.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:55:56.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:55:56.366]    __dp=0x00000000
[15:55:56.366]    __ap=0x00000000
[15:55:56.366]    __traceout=0x00000000      (Trace Disabled)
[15:55:56.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:55:56.366]    __FlashAddr=0x00000000
[15:55:56.366]    __FlashLen=0x00000000
[15:55:56.366]    __FlashArg=0x00000000
[15:55:56.366]    __FlashOp=0x00000000
[15:55:56.366]    __Result=0x00000000
[15:55:56.366]  </debugvars>
[15:55:56.366]  
[15:55:56.366]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:55:56.366]    <block atomic="false" info="">
[15:55:56.366]      __var deviceID = 0;
[15:55:56.366]        // -> [deviceID <= 0x00000000]
[15:55:56.366]      __var version = 0;
[15:55:56.366]        // -> [version <= 0x00000000]
[15:55:56.366]      __var partNum = 0;
[15:55:56.366]        // -> [partNum <= 0x00000000]
[15:55:56.366]      __var manuf = 0;
[15:55:56.366]        // -> [manuf <= 0x00000000]
[15:55:56.366]      __var isMSPM0G1X0X_G3X0X = 0;
[15:55:56.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:55:56.366]      __var isProduction = 0;
[15:55:56.366]        // -> [isProduction <= 0x00000000]
[15:55:56.366]      __var continueId = 0;
[15:55:56.366]        // -> [continueId <= 0x00000000]
[15:55:56.366]      deviceID =   Read32(0x41C40004);
[15:55:56.376]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:55:56.376]        // -> [deviceID <= 0x2BB8802F]
[15:55:56.376]      version = deviceID >> 28;
[15:55:56.386]        // -> [version <= 0x00000002]
[15:55:56.386]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:55:56.386]        // -> [partNum <= 0x0000BB88]
[15:55:56.386]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:55:56.386]        // -> [manuf <= 0x00000017]
[15:55:56.386]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:55:56.386]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:55:56.386]      isProduction = (version > 0);
[15:55:56.386]        // -> [isProduction <= 0x00000001]
[15:55:56.386]    </block>
[15:55:56.386]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:55:56.386]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:55:56.386]        // =>  FALSE
[15:55:56.386]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:55:56.386]    </control>
[15:55:56.386]    <control if="continueId == 4" while="" timeout="0" info="">
[15:55:56.386]      // if-block "continueId == 4"
[15:55:56.386]        // =>  FALSE
[15:55:56.386]      // skip if-block "continueId == 4"
[15:55:56.386]    </control>
[15:55:56.386]    <control if="!isProduction" while="" timeout="0" info="">
[15:55:56.386]      // if-block "!isProduction"
[15:55:56.386]        // =>  FALSE
[15:55:56.386]      // skip if-block "!isProduction"
[15:55:56.386]    </control>
[15:55:56.386]  </sequence>
[15:55:56.386]  
[15:56:27.913]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:56:27.913]  
[15:56:27.925]  <debugvars>
[15:56:27.925]    // Pre-defined
[15:56:27.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:27.925]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:27.925]    __dp=0x00000000
[15:56:27.925]    __ap=0x00000000
[15:56:27.925]    __traceout=0x00000000      (Trace Disabled)
[15:56:27.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:27.925]    __FlashAddr=0x00000000
[15:56:27.925]    __FlashLen=0x00000000
[15:56:27.925]    __FlashArg=0x00000000
[15:56:27.925]    __FlashOp=0x00000000
[15:56:27.925]    __Result=0x00000000
[15:56:27.925]  </debugvars>
[15:56:27.925]  
[15:56:27.925]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:56:27.925]    <block atomic="false" info="">
[15:56:27.925]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:56:27.925]        // -> [isSWJ <= 0x00000001]
[15:56:27.925]      __var hasDormant = __protocol & 0x00020000;
[15:56:27.925]        // -> [hasDormant <= 0x00000000]
[15:56:27.925]      __var protType   = __protocol & 0x0000FFFF;
[15:56:27.925]        // -> [protType <= 0x00000002]
[15:56:27.925]    </block>
[15:56:27.925]    <control if="protType == 1" while="" timeout="0" info="">
[15:56:27.925]      // if-block "protType == 1"
[15:56:27.925]        // =>  FALSE
[15:56:27.925]      // skip if-block "protType == 1"
[15:56:27.925]    </control>
[15:56:27.925]    <control if="protType == 2" while="" timeout="0" info="">
[15:56:27.925]      // if-block "protType == 2"
[15:56:27.925]        // =>  TRUE
[15:56:27.925]      <control if="isSWJ" while="" timeout="0" info="">
[15:56:27.925]        // if-block "isSWJ"
[15:56:27.925]          // =>  TRUE
[15:56:27.925]        <control if="hasDormant" while="" timeout="0" info="">
[15:56:27.925]          // if-block "hasDormant"
[15:56:27.925]            // =>  FALSE
[15:56:27.925]          // skip if-block "hasDormant"
[15:56:27.925]        </control>
[15:56:27.925]        <control if="!hasDormant" while="" timeout="0" info="">
[15:56:27.925]          // if-block "!hasDormant"
[15:56:27.925]            // =>  TRUE
[15:56:27.925]          <block atomic="false" info="">
[15:56:27.925]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:56:27.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:27.934]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:56:27.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:56:27.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:56:27.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:27.944]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:56:27.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:56:27.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:56:27.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:27.954]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:56:27.954]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:56:27.954]          </block>
[15:56:27.954]          // end if-block "!hasDormant"
[15:56:27.954]        </control>
[15:56:27.954]        // end if-block "isSWJ"
[15:56:27.954]      </control>
[15:56:27.954]      <control if="!isSWJ" while="" timeout="0" info="">
[15:56:27.954]        // if-block "!isSWJ"
[15:56:27.954]          // =>  FALSE
[15:56:27.954]        // skip if-block "!isSWJ"
[15:56:27.954]      </control>
[15:56:27.954]      <block atomic="false" info="">
[15:56:27.954]        ReadDP(0x0);
[15:56:27.964]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:56:27.964]      </block>
[15:56:27.964]      // end if-block "protType == 2"
[15:56:27.964]    </control>
[15:56:27.964]  </sequence>
[15:56:27.964]  
[15:56:27.974]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:56:27.974]  
[15:56:27.974]  <debugvars>
[15:56:27.974]    // Pre-defined
[15:56:27.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:27.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:27.978]    __dp=0x00000000
[15:56:27.978]    __ap=0x00000000
[15:56:27.978]    __traceout=0x00000000      (Trace Disabled)
[15:56:27.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:27.978]    __FlashAddr=0x00000000
[15:56:27.978]    __FlashLen=0x00000000
[15:56:27.978]    __FlashArg=0x00000000
[15:56:27.978]    __FlashOp=0x00000000
[15:56:27.978]    __Result=0x00000000
[15:56:27.978]  </debugvars>
[15:56:27.978]  
[15:56:27.978]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:56:27.978]    <block atomic="false" info="">
[15:56:27.978]      __var SW_DP_ABORT       = 0x0;
[15:56:27.978]        // -> [SW_DP_ABORT <= 0x00000000]
[15:56:27.978]      __var DP_CTRL_STAT      = 0x4;
[15:56:27.978]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:56:27.978]      __var DP_SELECT         = 0x8;
[15:56:27.978]        // -> [DP_SELECT <= 0x00000008]
[15:56:27.978]      __var powered_down      = 0;
[15:56:27.978]        // -> [powered_down <= 0x00000000]
[15:56:27.978]      WriteDP(DP_SELECT, 0x00000000);
[15:56:27.984]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:56:27.984]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:56:27.984]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:56:27.984]        // -> [powered_down <= 0x00000001]
[15:56:27.984]    </block>
[15:56:27.984]    <control if="powered_down" while="" timeout="0" info="">
[15:56:27.984]      // if-block "powered_down"
[15:56:27.984]        // =>  TRUE
[15:56:27.984]      <block atomic="false" info="">
[15:56:27.984]        Message(0, "Debug/System power-up request sent");
[15:56:27.984]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:56:27.994]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:56:27.994]      </block>
[15:56:27.994]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:56:27.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:56:27.994]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:56:27.994]        // while-condition  =>  FALSE
[15:56:27.994]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:56:27.994]      </control>
[15:56:27.994]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:56:27.994]        // if-block "(__protocol & 0xFFFF) == 1"
[15:56:27.994]          // =>  FALSE
[15:56:27.994]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:56:27.994]      </control>
[15:56:27.994]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:56:27.994]        // if-block "(__protocol & 0xFFFF) == 2"
[15:56:27.994]          // =>  TRUE
[15:56:28.004]        <block atomic="false" info="">
[15:56:28.004]          Message(0, "executing SWD power up");
[15:56:28.005]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:56:28.005]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:56:28.005]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:56:28.014]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:56:28.014]        </block>
[15:56:28.014]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:56:28.014]      </control>
[15:56:28.014]      // end if-block "powered_down"
[15:56:28.014]    </control>
[15:56:28.014]    <block atomic="false" info="">
[15:56:28.014]      __var DEBUG_PORT_VAL    = 0;
[15:56:28.014]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:56:28.014]      __var ACCESS_POINT_VAL  = 0;
[15:56:28.014]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:56:28.014]      __ap = 1; 
[15:56:28.014]        // -> [__ap <= 0x00000001]
[15:56:28.014]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:56:28.024]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:56:28.024]      __ap = 4;
[15:56:28.024]        // -> [__ap <= 0x00000004]
[15:56:28.024]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:56:28.034]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:56:28.034]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:56:28.034]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:56:28.034]    </block>
[15:56:28.034]    <block atomic="false" info="">
[15:56:28.034]      __var nReset = 0x80;
[15:56:28.034]        // -> [nReset <= 0x00000080]
[15:56:28.034]      __var canReadPins = 0;
[15:56:28.034]        // -> [canReadPins <= 0x00000000]
[15:56:28.034]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:56:28.044]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:56:28.044]        // -> [canReadPins <= 0x00000001]
[15:56:28.044]    </block>
[15:56:28.044]    <control if="" while="1" timeout="200" info="">
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.044]      // while-condition  =>  TRUE
[15:56:28.044]      // while "1"  (timeout="200")
[15:56:28.054]      // while-condition  =>  TRUE
[15:56:28.054]      // while "1"  (timeout="200")
[15:56:28.054]      // while  =>  TIMEOUT
[15:56:28.054]      // end while "1"
[15:56:28.054]    </control>
[15:56:28.054]    <control if="canReadPins" while="" timeout="0" info="">
[15:56:28.054]      // if-block "canReadPins"
[15:56:28.054]        // =>  TRUE
[15:56:28.054]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:56:28.054]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:56:28.054]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:56:28.054]        // while-condition  =>  FALSE
[15:56:28.054]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:56:28.054]      </control>
[15:56:28.054]      // end if-block "canReadPins"
[15:56:28.054]    </control>
[15:56:28.054]    <control if="!canReadPins" while="" timeout="0" info="">
[15:56:28.054]      // if-block "!canReadPins"
[15:56:28.054]        // =>  FALSE
[15:56:28.054]      // skip if-block "!canReadPins"
[15:56:28.054]    </control>
[15:56:28.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:56:28.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:56:28.054]        // =>  TRUE
[15:56:28.054]      <block atomic="false" info="">
[15:56:28.054]        WriteAP(0x00, 0x190008);
[15:56:28.064]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:56:28.064]        WriteAP(0xF0, 0x01);
[15:56:28.074]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:56:28.074]      </block>
[15:56:28.074]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:56:28.074]    </control>
[15:56:28.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:56:28.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:56:28.074]        // =>  FALSE
[15:56:28.074]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:56:28.074]    </control>
[15:56:28.074]    <block atomic="false" info="">
[15:56:28.074]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:56:28.078]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:56:28.078]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:56:28.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:56:28.084]      __ap = 0; //lets make sure we reset the access point selection
[15:56:28.084]        // -> [__ap <= 0x00000000]
[15:56:28.084]    </block>
[15:56:28.084]  </sequence>
[15:56:28.084]  
[15:56:28.124]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:56:28.124]  
[15:56:28.124]  <debugvars>
[15:56:28.124]    // Pre-defined
[15:56:28.124]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:28.124]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:28.124]    __dp=0x00000000
[15:56:28.124]    __ap=0x00000000
[15:56:28.124]    __traceout=0x00000000      (Trace Disabled)
[15:56:28.124]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:28.124]    __FlashAddr=0x00000000
[15:56:28.124]    __FlashLen=0x00000000
[15:56:28.124]    __FlashArg=0x00000000
[15:56:28.124]    __FlashOp=0x00000000
[15:56:28.124]    __Result=0x00000000
[15:56:28.124]  </debugvars>
[15:56:28.124]  
[15:56:28.124]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:56:28.124]    <block atomic="false" info="">
[15:56:28.124]      __var deviceID = 0;
[15:56:28.124]        // -> [deviceID <= 0x00000000]
[15:56:28.124]      __var version = 0;
[15:56:28.124]        // -> [version <= 0x00000000]
[15:56:28.124]      __var partNum = 0;
[15:56:28.124]        // -> [partNum <= 0x00000000]
[15:56:28.124]      __var manuf = 0;
[15:56:28.124]        // -> [manuf <= 0x00000000]
[15:56:28.124]      __var isMSPM0G1X0X_G3X0X = 0;
[15:56:28.124]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:56:28.124]      __var isProduction = 0;
[15:56:28.124]        // -> [isProduction <= 0x00000000]
[15:56:28.134]      __var continueId = 0;
[15:56:28.134]        // -> [continueId <= 0x00000000]
[15:56:28.134]      deviceID =   Read32(0x41C40004);
[15:56:28.144]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:56:28.144]        // -> [deviceID <= 0x2BB8802F]
[15:56:28.144]      version = deviceID >> 28;
[15:56:28.144]        // -> [version <= 0x00000002]
[15:56:28.144]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:56:28.144]        // -> [partNum <= 0x0000BB88]
[15:56:28.144]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:56:28.144]        // -> [manuf <= 0x00000017]
[15:56:28.144]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:56:28.144]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:56:28.144]      isProduction = (version > 0);
[15:56:28.144]        // -> [isProduction <= 0x00000001]
[15:56:28.144]    </block>
[15:56:28.144]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:56:28.144]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:56:28.144]        // =>  FALSE
[15:56:28.144]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:56:28.144]    </control>
[15:56:28.144]    <control if="continueId == 4" while="" timeout="0" info="">
[15:56:28.144]      // if-block "continueId == 4"
[15:56:28.144]        // =>  FALSE
[15:56:28.144]      // skip if-block "continueId == 4"
[15:56:28.144]    </control>
[15:56:28.144]    <control if="!isProduction" while="" timeout="0" info="">
[15:56:28.144]      // if-block "!isProduction"
[15:56:28.144]        // =>  FALSE
[15:56:28.144]      // skip if-block "!isProduction"
[15:56:28.144]    </control>
[15:56:28.144]  </sequence>
[15:56:28.144]  
[15:57:10.120]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:57:10.120]  
[15:57:10.133]  <debugvars>
[15:57:10.133]    // Pre-defined
[15:57:10.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:10.133]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:10.133]    __dp=0x00000000
[15:57:10.133]    __ap=0x00000000
[15:57:10.133]    __traceout=0x00000000      (Trace Disabled)
[15:57:10.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:10.133]    __FlashAddr=0x00000000
[15:57:10.133]    __FlashLen=0x00000000
[15:57:10.133]    __FlashArg=0x00000000
[15:57:10.133]    __FlashOp=0x00000000
[15:57:10.133]    __Result=0x00000000
[15:57:10.133]  </debugvars>
[15:57:10.133]  
[15:57:10.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:57:10.133]    <block atomic="false" info="">
[15:57:10.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:57:10.133]        // -> [isSWJ <= 0x00000001]
[15:57:10.133]      __var hasDormant = __protocol & 0x00020000;
[15:57:10.133]        // -> [hasDormant <= 0x00000000]
[15:57:10.133]      __var protType   = __protocol & 0x0000FFFF;
[15:57:10.133]        // -> [protType <= 0x00000002]
[15:57:10.133]    </block>
[15:57:10.133]    <control if="protType == 1" while="" timeout="0" info="">
[15:57:10.133]      // if-block "protType == 1"
[15:57:10.133]        // =>  FALSE
[15:57:10.133]      // skip if-block "protType == 1"
[15:57:10.133]    </control>
[15:57:10.133]    <control if="protType == 2" while="" timeout="0" info="">
[15:57:10.133]      // if-block "protType == 2"
[15:57:10.133]        // =>  TRUE
[15:57:10.133]      <control if="isSWJ" while="" timeout="0" info="">
[15:57:10.133]        // if-block "isSWJ"
[15:57:10.133]          // =>  TRUE
[15:57:10.133]        <control if="hasDormant" while="" timeout="0" info="">
[15:57:10.133]          // if-block "hasDormant"
[15:57:10.133]            // =>  FALSE
[15:57:10.133]          // skip if-block "hasDormant"
[15:57:10.133]        </control>
[15:57:10.133]        <control if="!hasDormant" while="" timeout="0" info="">
[15:57:10.133]          // if-block "!hasDormant"
[15:57:10.133]            // =>  TRUE
[15:57:10.133]          <block atomic="false" info="">
[15:57:10.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:57:10.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:10.140]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:57:10.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:57:10.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:57:10.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:10.150]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:57:10.150]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:57:10.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:57:10.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:57:10.156]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:57:10.160]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:57:10.160]          </block>
[15:57:10.160]          // end if-block "!hasDormant"
[15:57:10.160]        </control>
[15:57:10.160]        // end if-block "isSWJ"
[15:57:10.160]      </control>
[15:57:10.160]      <control if="!isSWJ" while="" timeout="0" info="">
[15:57:10.160]        // if-block "!isSWJ"
[15:57:10.160]          // =>  FALSE
[15:57:10.160]        // skip if-block "!isSWJ"
[15:57:10.160]      </control>
[15:57:10.160]      <block atomic="false" info="">
[15:57:10.160]        ReadDP(0x0);
[15:57:10.160]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:57:10.160]      </block>
[15:57:10.160]      // end if-block "protType == 2"
[15:57:10.160]    </control>
[15:57:10.160]  </sequence>
[15:57:10.160]  
[15:57:10.180]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:57:10.180]  
[15:57:10.180]  <debugvars>
[15:57:10.180]    // Pre-defined
[15:57:10.180]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:10.180]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:10.180]    __dp=0x00000000
[15:57:10.180]    __ap=0x00000000
[15:57:10.180]    __traceout=0x00000000      (Trace Disabled)
[15:57:10.180]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:10.180]    __FlashAddr=0x00000000
[15:57:10.180]    __FlashLen=0x00000000
[15:57:10.180]    __FlashArg=0x00000000
[15:57:10.180]    __FlashOp=0x00000000
[15:57:10.180]    __Result=0x00000000
[15:57:10.180]  </debugvars>
[15:57:10.180]  
[15:57:10.180]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:57:10.180]    <block atomic="false" info="">
[15:57:10.180]      __var SW_DP_ABORT       = 0x0;
[15:57:10.180]        // -> [SW_DP_ABORT <= 0x00000000]
[15:57:10.180]      __var DP_CTRL_STAT      = 0x4;
[15:57:10.180]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:57:10.180]      __var DP_SELECT         = 0x8;
[15:57:10.180]        // -> [DP_SELECT <= 0x00000008]
[15:57:10.180]      __var powered_down      = 0;
[15:57:10.180]        // -> [powered_down <= 0x00000000]
[15:57:10.180]      WriteDP(DP_SELECT, 0x00000000);
[15:57:10.180]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:57:10.180]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:57:10.190]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:57:10.190]        // -> [powered_down <= 0x00000001]
[15:57:10.190]    </block>
[15:57:10.190]    <control if="powered_down" while="" timeout="0" info="">
[15:57:10.190]      // if-block "powered_down"
[15:57:10.190]        // =>  TRUE
[15:57:10.190]      <block atomic="false" info="">
[15:57:10.190]        Message(0, "Debug/System power-up request sent");
[15:57:10.190]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:57:10.190]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:57:10.190]      </block>
[15:57:10.190]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:57:10.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:57:10.200]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:57:10.200]        // while-condition  =>  FALSE
[15:57:10.200]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:57:10.200]      </control>
[15:57:10.200]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:57:10.200]        // if-block "(__protocol & 0xFFFF) == 1"
[15:57:10.200]          // =>  FALSE
[15:57:10.200]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:57:10.200]      </control>
[15:57:10.200]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:57:10.200]        // if-block "(__protocol & 0xFFFF) == 2"
[15:57:10.200]          // =>  TRUE
[15:57:10.200]        <block atomic="false" info="">
[15:57:10.200]          Message(0, "executing SWD power up");
[15:57:10.200]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:57:10.200]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:57:10.200]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:57:10.210]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:57:10.210]        </block>
[15:57:10.210]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:57:10.210]      </control>
[15:57:10.210]      // end if-block "powered_down"
[15:57:10.210]    </control>
[15:57:10.210]    <block atomic="false" info="">
[15:57:10.210]      __var DEBUG_PORT_VAL    = 0;
[15:57:10.210]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:57:10.210]      __var ACCESS_POINT_VAL  = 0;
[15:57:10.210]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:57:10.210]      __ap = 1; 
[15:57:10.210]        // -> [__ap <= 0x00000001]
[15:57:10.210]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:57:10.220]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:57:10.220]      __ap = 4;
[15:57:10.220]        // -> [__ap <= 0x00000004]
[15:57:10.220]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:10.230]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:57:10.230]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:57:10.230]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:10.230]    </block>
[15:57:10.230]    <block atomic="false" info="">
[15:57:10.230]      __var nReset = 0x80;
[15:57:10.230]        // -> [nReset <= 0x00000080]
[15:57:10.230]      __var canReadPins = 0;
[15:57:10.230]        // -> [canReadPins <= 0x00000000]
[15:57:10.230]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:57:10.240]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:57:10.240]        // -> [canReadPins <= 0x00000001]
[15:57:10.240]    </block>
[15:57:10.240]    <control if="" while="1" timeout="200" info="">
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.240]      // while-condition  =>  TRUE
[15:57:10.240]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.250]      // while "1"  (timeout="200")
[15:57:10.250]      // while-condition  =>  TRUE
[15:57:10.256]      // while "1"  (timeout="200")
[15:57:10.256]      // while  =>  TIMEOUT
[15:57:10.256]      // end while "1"
[15:57:10.256]    </control>
[15:57:10.256]    <control if="canReadPins" while="" timeout="0" info="">
[15:57:10.256]      // if-block "canReadPins"
[15:57:10.256]        // =>  TRUE
[15:57:10.256]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:57:10.256]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:57:10.260]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:57:10.260]        // while-condition  =>  FALSE
[15:57:10.260]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:57:10.260]      </control>
[15:57:10.260]      // end if-block "canReadPins"
[15:57:10.260]    </control>
[15:57:10.260]    <control if="!canReadPins" while="" timeout="0" info="">
[15:57:10.260]      // if-block "!canReadPins"
[15:57:10.260]        // =>  FALSE
[15:57:10.260]      // skip if-block "!canReadPins"
[15:57:10.260]    </control>
[15:57:10.260]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:57:10.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:10.260]        // =>  TRUE
[15:57:10.260]      <block atomic="false" info="">
[15:57:10.260]        WriteAP(0x00, 0x190008);
[15:57:10.260]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:10.260]        WriteAP(0xF0, 0x01);
[15:57:10.270]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:57:10.270]      </block>
[15:57:10.270]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:57:10.270]    </control>
[15:57:10.270]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:57:10.270]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:10.270]        // =>  FALSE
[15:57:10.270]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:57:10.270]    </control>
[15:57:10.270]    <block atomic="false" info="">
[15:57:10.270]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:57:10.280]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:57:10.280]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:57:10.280]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:57:10.280]      __ap = 0; //lets make sure we reset the access point selection
[15:57:10.280]        // -> [__ap <= 0x00000000]
[15:57:10.280]    </block>
[15:57:10.280]  </sequence>
[15:57:10.280]  
[15:57:10.330]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:57:10.330]  
[15:57:10.330]  <debugvars>
[15:57:10.330]    // Pre-defined
[15:57:10.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:57:10.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:57:10.330]    __dp=0x00000000
[15:57:10.330]    __ap=0x00000000
[15:57:10.330]    __traceout=0x00000000      (Trace Disabled)
[15:57:10.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:57:10.330]    __FlashAddr=0x00000000
[15:57:10.330]    __FlashLen=0x00000000
[15:57:10.330]    __FlashArg=0x00000000
[15:57:10.330]    __FlashOp=0x00000000
[15:57:10.330]    __Result=0x00000000
[15:57:10.330]  </debugvars>
[15:57:10.330]  
[15:57:10.330]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:57:10.330]    <block atomic="false" info="">
[15:57:10.330]      __var deviceID = 0;
[15:57:10.330]        // -> [deviceID <= 0x00000000]
[15:57:10.330]      __var version = 0;
[15:57:10.330]        // -> [version <= 0x00000000]
[15:57:10.330]      __var partNum = 0;
[15:57:10.330]        // -> [partNum <= 0x00000000]
[15:57:10.330]      __var manuf = 0;
[15:57:10.330]        // -> [manuf <= 0x00000000]
[15:57:10.330]      __var isMSPM0G1X0X_G3X0X = 0;
[15:57:10.330]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:57:10.330]      __var isProduction = 0;
[15:57:10.330]        // -> [isProduction <= 0x00000000]
[15:57:10.330]      __var continueId = 0;
[15:57:10.330]        // -> [continueId <= 0x00000000]
[15:57:10.330]      deviceID =   Read32(0x41C40004);
[15:57:10.340]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:57:10.340]        // -> [deviceID <= 0x2BB8802F]
[15:57:10.340]      version = deviceID >> 28;
[15:57:10.340]        // -> [version <= 0x00000002]
[15:57:10.340]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:57:10.340]        // -> [partNum <= 0x0000BB88]
[15:57:10.340]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:57:10.340]        // -> [manuf <= 0x00000017]
[15:57:10.340]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:57:10.340]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:57:10.348]      isProduction = (version > 0);
[15:57:10.348]        // -> [isProduction <= 0x00000001]
[15:57:10.348]    </block>
[15:57:10.349]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:57:10.349]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:57:10.349]        // =>  FALSE
[15:57:10.350]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:57:10.350]    </control>
[15:57:10.350]    <control if="continueId == 4" while="" timeout="0" info="">
[15:57:10.350]      // if-block "continueId == 4"
[15:57:10.350]        // =>  FALSE
[15:57:10.351]      // skip if-block "continueId == 4"
[15:57:10.351]    </control>
[15:57:10.351]    <control if="!isProduction" while="" timeout="0" info="">
[15:57:10.351]      // if-block "!isProduction"
[15:57:10.351]        // =>  FALSE
[15:57:10.351]      // skip if-block "!isProduction"
[15:57:10.352]    </control>
[15:57:10.352]  </sequence>
[15:57:10.352]  
[15:58:30.668]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:58:30.668]  
[15:58:30.668]  <debugvars>
[15:58:30.668]    // Pre-defined
[15:58:30.678]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:30.678]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:30.678]    __dp=0x00000000
[15:58:30.678]    __ap=0x00000000
[15:58:30.678]    __traceout=0x00000000      (Trace Disabled)
[15:58:30.678]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:30.678]    __FlashAddr=0x00000000
[15:58:30.678]    __FlashLen=0x00000000
[15:58:30.678]    __FlashArg=0x00000000
[15:58:30.678]    __FlashOp=0x00000000
[15:58:30.678]    __Result=0x00000000
[15:58:30.678]  </debugvars>
[15:58:30.678]  
[15:58:30.678]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:58:30.678]    <block atomic="false" info="">
[15:58:30.678]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:58:30.678]        // -> [isSWJ <= 0x00000001]
[15:58:30.678]      __var hasDormant = __protocol & 0x00020000;
[15:58:30.678]        // -> [hasDormant <= 0x00000000]
[15:58:30.678]      __var protType   = __protocol & 0x0000FFFF;
[15:58:30.678]        // -> [protType <= 0x00000002]
[15:58:30.678]    </block>
[15:58:30.678]    <control if="protType == 1" while="" timeout="0" info="">
[15:58:30.678]      // if-block "protType == 1"
[15:58:30.678]        // =>  FALSE
[15:58:30.678]      // skip if-block "protType == 1"
[15:58:30.678]    </control>
[15:58:30.678]    <control if="protType == 2" while="" timeout="0" info="">
[15:58:30.678]      // if-block "protType == 2"
[15:58:30.678]        // =>  TRUE
[15:58:30.678]      <control if="isSWJ" while="" timeout="0" info="">
[15:58:30.678]        // if-block "isSWJ"
[15:58:30.678]          // =>  TRUE
[15:58:30.678]        <control if="hasDormant" while="" timeout="0" info="">
[15:58:30.678]          // if-block "hasDormant"
[15:58:30.678]            // =>  FALSE
[15:58:30.678]          // skip if-block "hasDormant"
[15:58:30.678]        </control>
[15:58:30.678]        <control if="!hasDormant" while="" timeout="0" info="">
[15:58:30.678]          // if-block "!hasDormant"
[15:58:30.678]            // =>  TRUE
[15:58:30.678]          <block atomic="false" info="">
[15:58:30.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:58:30.688]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:30.688]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:58:30.688]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:58:30.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:58:30.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:30.698]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:58:30.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:58:30.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:58:30.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:58:30.698]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:58:30.708]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:58:30.708]          </block>
[15:58:30.708]          // end if-block "!hasDormant"
[15:58:30.708]        </control>
[15:58:30.708]        // end if-block "isSWJ"
[15:58:30.708]      </control>
[15:58:30.708]      <control if="!isSWJ" while="" timeout="0" info="">
[15:58:30.708]        // if-block "!isSWJ"
[15:58:30.708]          // =>  FALSE
[15:58:30.708]        // skip if-block "!isSWJ"
[15:58:30.708]      </control>
[15:58:30.708]      <block atomic="false" info="">
[15:58:30.708]        ReadDP(0x0);
[15:58:30.718]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:58:30.718]      </block>
[15:58:30.718]      // end if-block "protType == 2"
[15:58:30.718]    </control>
[15:58:30.718]  </sequence>
[15:58:30.718]  
[15:58:30.718]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:58:30.718]  
[15:58:30.718]  <debugvars>
[15:58:30.718]    // Pre-defined
[15:58:30.718]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:30.718]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:30.718]    __dp=0x00000000
[15:58:30.718]    __ap=0x00000000
[15:58:30.718]    __traceout=0x00000000      (Trace Disabled)
[15:58:30.718]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:30.718]    __FlashAddr=0x00000000
[15:58:30.718]    __FlashLen=0x00000000
[15:58:30.718]    __FlashArg=0x00000000
[15:58:30.728]    __FlashOp=0x00000000
[15:58:30.728]    __Result=0x00000000
[15:58:30.728]  </debugvars>
[15:58:30.728]  
[15:58:30.728]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:58:30.728]    <block atomic="false" info="">
[15:58:30.728]      __var SW_DP_ABORT       = 0x0;
[15:58:30.728]        // -> [SW_DP_ABORT <= 0x00000000]
[15:58:30.728]      __var DP_CTRL_STAT      = 0x4;
[15:58:30.728]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:58:30.728]      __var DP_SELECT         = 0x8;
[15:58:30.728]        // -> [DP_SELECT <= 0x00000008]
[15:58:30.728]      __var powered_down      = 0;
[15:58:30.728]        // -> [powered_down <= 0x00000000]
[15:58:30.728]      WriteDP(DP_SELECT, 0x00000000);
[15:58:30.728]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:58:30.728]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:58:30.738]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:58:30.738]        // -> [powered_down <= 0x00000001]
[15:58:30.738]    </block>
[15:58:30.738]    <control if="powered_down" while="" timeout="0" info="">
[15:58:30.738]      // if-block "powered_down"
[15:58:30.738]        // =>  TRUE
[15:58:30.738]      <block atomic="false" info="">
[15:58:30.738]        Message(0, "Debug/System power-up request sent");
[15:58:30.738]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:58:30.748]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:58:30.748]      </block>
[15:58:30.748]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:58:30.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:58:30.748]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:58:30.748]        // while-condition  =>  FALSE
[15:58:30.748]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:58:30.748]      </control>
[15:58:30.748]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:58:30.748]        // if-block "(__protocol & 0xFFFF) == 1"
[15:58:30.748]          // =>  FALSE
[15:58:30.748]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:58:30.748]      </control>
[15:58:30.748]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:58:30.748]        // if-block "(__protocol & 0xFFFF) == 2"
[15:58:30.748]          // =>  TRUE
[15:58:30.748]        <block atomic="false" info="">
[15:58:30.748]          Message(0, "executing SWD power up");
[15:58:30.758]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:58:30.758]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:58:30.758]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:58:30.768]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:58:30.768]        </block>
[15:58:30.768]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:58:30.768]      </control>
[15:58:30.768]      // end if-block "powered_down"
[15:58:30.768]    </control>
[15:58:30.768]    <block atomic="false" info="">
[15:58:30.768]      __var DEBUG_PORT_VAL    = 0;
[15:58:30.768]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:58:30.768]      __var ACCESS_POINT_VAL  = 0;
[15:58:30.768]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:58:30.768]      __ap = 1; 
[15:58:30.768]        // -> [__ap <= 0x00000001]
[15:58:30.768]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:58:30.778]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:58:30.778]      __ap = 4;
[15:58:30.778]        // -> [__ap <= 0x00000004]
[15:58:30.778]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:58:30.788]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:58:30.788]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:58:30.788]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:58:30.788]    </block>
[15:58:30.788]    <block atomic="false" info="">
[15:58:30.788]      __var nReset = 0x80;
[15:58:30.788]        // -> [nReset <= 0x00000080]
[15:58:30.788]      __var canReadPins = 0;
[15:58:30.788]        // -> [canReadPins <= 0x00000000]
[15:58:30.788]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:58:30.798]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:58:30.798]        // -> [canReadPins <= 0x00000001]
[15:58:30.798]    </block>
[15:58:30.798]    <control if="" while="1" timeout="200" info="">
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.798]      // while-condition  =>  TRUE
[15:58:30.798]      // while "1"  (timeout="200")
[15:58:30.808]      // while-condition  =>  TRUE
[15:58:30.808]      // while "1"  (timeout="200")
[15:58:30.808]      // while  =>  TIMEOUT
[15:58:30.808]      // end while "1"
[15:58:30.808]    </control>
[15:58:30.808]    <control if="canReadPins" while="" timeout="0" info="">
[15:58:30.808]      // if-block "canReadPins"
[15:58:30.808]        // =>  TRUE
[15:58:30.808]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:58:30.808]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:58:30.808]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:58:30.808]        // while-condition  =>  FALSE
[15:58:30.808]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:58:30.808]      </control>
[15:58:30.808]      // end if-block "canReadPins"
[15:58:30.808]    </control>
[15:58:30.808]    <control if="!canReadPins" while="" timeout="0" info="">
[15:58:30.808]      // if-block "!canReadPins"
[15:58:30.808]        // =>  FALSE
[15:58:30.808]      // skip if-block "!canReadPins"
[15:58:30.808]    </control>
[15:58:30.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:58:30.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:58:30.808]        // =>  TRUE
[15:58:30.808]      <block atomic="false" info="">
[15:58:30.808]        WriteAP(0x00, 0x190008);
[15:58:30.818]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:58:30.818]        WriteAP(0xF0, 0x01);
[15:58:30.818]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:58:30.818]      </block>
[15:58:30.818]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:58:30.818]    </control>
[15:58:30.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:58:30.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:58:30.828]        // =>  FALSE
[15:58:30.828]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:58:30.828]    </control>
[15:58:30.828]    <block atomic="false" info="">
[15:58:30.828]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:58:30.838]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:58:30.838]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:58:30.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:58:30.848]      __ap = 0; //lets make sure we reset the access point selection
[15:58:30.848]        // -> [__ap <= 0x00000000]
[15:58:30.848]    </block>
[15:58:30.848]  </sequence>
[15:58:30.848]  
[15:58:30.888]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:58:30.888]  
[15:58:30.888]  <debugvars>
[15:58:30.888]    // Pre-defined
[15:58:30.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:58:30.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:58:30.888]    __dp=0x00000000
[15:58:30.888]    __ap=0x00000000
[15:58:30.888]    __traceout=0x00000000      (Trace Disabled)
[15:58:30.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:58:30.888]    __FlashAddr=0x00000000
[15:58:30.888]    __FlashLen=0x00000000
[15:58:30.888]    __FlashArg=0x00000000
[15:58:30.898]    __FlashOp=0x00000000
[15:58:30.898]    __Result=0x00000000
[15:58:30.898]  </debugvars>
[15:58:30.898]  
[15:58:30.898]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:58:30.898]    <block atomic="false" info="">
[15:58:30.898]      __var deviceID = 0;
[15:58:30.898]        // -> [deviceID <= 0x00000000]
[15:58:30.898]      __var version = 0;
[15:58:30.898]        // -> [version <= 0x00000000]
[15:58:30.898]      __var partNum = 0;
[15:58:30.898]        // -> [partNum <= 0x00000000]
[15:58:30.898]      __var manuf = 0;
[15:58:30.898]        // -> [manuf <= 0x00000000]
[15:58:30.898]      __var isMSPM0G1X0X_G3X0X = 0;
[15:58:30.898]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:58:30.898]      __var isProduction = 0;
[15:58:30.898]        // -> [isProduction <= 0x00000000]
[15:58:30.898]      __var continueId = 0;
[15:58:30.898]        // -> [continueId <= 0x00000000]
[15:58:30.898]      deviceID =   Read32(0x41C40004);
[15:58:30.908]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:58:30.908]        // -> [deviceID <= 0x2BB8802F]
[15:58:30.908]      version = deviceID >> 28;
[15:58:30.908]        // -> [version <= 0x00000002]
[15:58:30.908]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:58:30.908]        // -> [partNum <= 0x0000BB88]
[15:58:30.908]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:58:30.908]        // -> [manuf <= 0x00000017]
[15:58:30.908]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:58:30.908]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:58:30.908]      isProduction = (version > 0);
[15:58:30.908]        // -> [isProduction <= 0x00000001]
[15:58:30.908]    </block>
[15:58:30.908]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:58:30.908]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:58:30.908]        // =>  FALSE
[15:58:30.908]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:58:30.908]    </control>
[15:58:30.908]    <control if="continueId == 4" while="" timeout="0" info="">
[15:58:30.908]      // if-block "continueId == 4"
[15:58:30.908]        // =>  FALSE
[15:58:30.908]      // skip if-block "continueId == 4"
[15:58:30.908]    </control>
[15:58:30.908]    <control if="!isProduction" while="" timeout="0" info="">
[15:58:30.908]      // if-block "!isProduction"
[15:58:30.908]        // =>  FALSE
[15:58:30.908]      // skip if-block "!isProduction"
[15:58:30.908]    </control>
[15:58:30.908]  </sequence>
[15:58:30.908]  
[15:59:13.542]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:59:13.542]  
[15:59:13.559]  <debugvars>
[15:59:13.559]    // Pre-defined
[15:59:13.559]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:13.559]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:13.559]    __dp=0x00000000
[15:59:13.559]    __ap=0x00000000
[15:59:13.559]    __traceout=0x00000000      (Trace Disabled)
[15:59:13.559]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:13.559]    __FlashAddr=0x00000000
[15:59:13.559]    __FlashLen=0x00000000
[15:59:13.559]    __FlashArg=0x00000000
[15:59:13.559]    __FlashOp=0x00000000
[15:59:13.559]    __Result=0x00000000
[15:59:13.559]  </debugvars>
[15:59:13.559]  
[15:59:13.559]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:59:13.559]    <block atomic="false" info="">
[15:59:13.559]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:59:13.559]        // -> [isSWJ <= 0x00000001]
[15:59:13.562]      __var hasDormant = __protocol & 0x00020000;
[15:59:13.562]        // -> [hasDormant <= 0x00000000]
[15:59:13.562]      __var protType   = __protocol & 0x0000FFFF;
[15:59:13.562]        // -> [protType <= 0x00000002]
[15:59:13.562]    </block>
[15:59:13.562]    <control if="protType == 1" while="" timeout="0" info="">
[15:59:13.562]      // if-block "protType == 1"
[15:59:13.562]        // =>  FALSE
[15:59:13.562]      // skip if-block "protType == 1"
[15:59:13.562]    </control>
[15:59:13.562]    <control if="protType == 2" while="" timeout="0" info="">
[15:59:13.562]      // if-block "protType == 2"
[15:59:13.562]        // =>  TRUE
[15:59:13.562]      <control if="isSWJ" while="" timeout="0" info="">
[15:59:13.562]        // if-block "isSWJ"
[15:59:13.562]          // =>  TRUE
[15:59:13.562]        <control if="hasDormant" while="" timeout="0" info="">
[15:59:13.562]          // if-block "hasDormant"
[15:59:13.562]            // =>  FALSE
[15:59:13.562]          // skip if-block "hasDormant"
[15:59:13.562]        </control>
[15:59:13.562]        <control if="!hasDormant" while="" timeout="0" info="">
[15:59:13.562]          // if-block "!hasDormant"
[15:59:13.562]            // =>  TRUE
[15:59:13.562]          <block atomic="false" info="">
[15:59:13.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:59:13.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:13.562]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:59:13.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:59:13.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:59:13.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:13.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:59:13.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:59:13.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:59:13.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:59:13.582]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:59:13.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:59:13.582]          </block>
[15:59:13.582]          // end if-block "!hasDormant"
[15:59:13.582]        </control>
[15:59:13.582]        // end if-block "isSWJ"
[15:59:13.582]      </control>
[15:59:13.582]      <control if="!isSWJ" while="" timeout="0" info="">
[15:59:13.582]        // if-block "!isSWJ"
[15:59:13.582]          // =>  FALSE
[15:59:13.582]        // skip if-block "!isSWJ"
[15:59:13.582]      </control>
[15:59:13.582]      <block atomic="false" info="">
[15:59:13.582]        ReadDP(0x0);
[15:59:13.602]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:59:13.602]      </block>
[15:59:13.602]      // end if-block "protType == 2"
[15:59:13.602]    </control>
[15:59:13.602]  </sequence>
[15:59:13.602]  
[15:59:13.622]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:59:13.622]  
[15:59:13.622]  <debugvars>
[15:59:13.622]    // Pre-defined
[15:59:13.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:13.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:13.622]    __dp=0x00000000
[15:59:13.622]    __ap=0x00000000
[15:59:13.622]    __traceout=0x00000000      (Trace Disabled)
[15:59:13.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:13.622]    __FlashAddr=0x00000000
[15:59:13.622]    __FlashLen=0x00000000
[15:59:13.622]    __FlashArg=0x00000000
[15:59:13.632]    __FlashOp=0x00000000
[15:59:13.632]    __Result=0x00000000
[15:59:13.632]  </debugvars>
[15:59:13.632]  
[15:59:13.632]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:59:13.632]    <block atomic="false" info="">
[15:59:13.632]      __var SW_DP_ABORT       = 0x0;
[15:59:13.632]        // -> [SW_DP_ABORT <= 0x00000000]
[15:59:13.632]      __var DP_CTRL_STAT      = 0x4;
[15:59:13.632]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:59:13.632]      __var DP_SELECT         = 0x8;
[15:59:13.632]        // -> [DP_SELECT <= 0x00000008]
[15:59:13.632]      __var powered_down      = 0;
[15:59:13.632]        // -> [powered_down <= 0x00000000]
[15:59:13.632]      WriteDP(DP_SELECT, 0x00000000);
[15:59:13.642]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:59:13.642]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:59:13.652]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:59:13.652]        // -> [powered_down <= 0x00000001]
[15:59:13.652]    </block>
[15:59:13.652]    <control if="powered_down" while="" timeout="0" info="">
[15:59:13.652]      // if-block "powered_down"
[15:59:13.652]        // =>  TRUE
[15:59:13.652]      <block atomic="false" info="">
[15:59:13.652]        Message(0, "Debug/System power-up request sent");
[15:59:13.652]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:59:13.652]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:59:13.652]      </block>
[15:59:13.652]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:59:13.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:59:13.662]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:59:13.662]        // while-condition  =>  FALSE
[15:59:13.662]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:59:13.662]      </control>
[15:59:13.662]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:59:13.662]        // if-block "(__protocol & 0xFFFF) == 1"
[15:59:13.662]          // =>  FALSE
[15:59:13.662]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:59:13.662]      </control>
[15:59:13.662]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:59:13.662]        // if-block "(__protocol & 0xFFFF) == 2"
[15:59:13.662]          // =>  TRUE
[15:59:13.662]        <block atomic="false" info="">
[15:59:13.662]          Message(0, "executing SWD power up");
[15:59:13.662]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:59:13.662]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:59:13.662]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:59:13.672]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:59:13.672]        </block>
[15:59:13.672]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:59:13.672]      </control>
[15:59:13.672]      // end if-block "powered_down"
[15:59:13.672]    </control>
[15:59:13.672]    <block atomic="false" info="">
[15:59:13.672]      __var DEBUG_PORT_VAL    = 0;
[15:59:13.672]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:59:13.672]      __var ACCESS_POINT_VAL  = 0;
[15:59:13.672]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:59:13.672]      __ap = 1; 
[15:59:13.672]        // -> [__ap <= 0x00000001]
[15:59:13.672]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:59:13.672]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:59:13.672]      __ap = 4;
[15:59:13.672]        // -> [__ap <= 0x00000004]
[15:59:13.672]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:13.692]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:59:13.692]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:59:13.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:13.692]    </block>
[15:59:13.692]    <block atomic="false" info="">
[15:59:13.692]      __var nReset = 0x80;
[15:59:13.692]        // -> [nReset <= 0x00000080]
[15:59:13.692]      __var canReadPins = 0;
[15:59:13.692]        // -> [canReadPins <= 0x00000000]
[15:59:13.692]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:59:13.712]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:59:13.712]        // -> [canReadPins <= 0x00000001]
[15:59:13.712]    </block>
[15:59:13.712]    <control if="" while="1" timeout="200" info="">
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.712]      // while "1"  (timeout="200")
[15:59:13.712]      // while-condition  =>  TRUE
[15:59:13.722]      // while "1"  (timeout="200")
[15:59:13.722]      // while  =>  TIMEOUT
[15:59:13.722]      // end while "1"
[15:59:13.722]    </control>
[15:59:13.722]    <control if="canReadPins" while="" timeout="0" info="">
[15:59:13.722]      // if-block "canReadPins"
[15:59:13.722]        // =>  TRUE
[15:59:13.722]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:59:13.722]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:59:13.722]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:59:13.722]        // while-condition  =>  FALSE
[15:59:13.722]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:59:13.722]      </control>
[15:59:13.722]      // end if-block "canReadPins"
[15:59:13.722]    </control>
[15:59:13.722]    <control if="!canReadPins" while="" timeout="0" info="">
[15:59:13.722]      // if-block "!canReadPins"
[15:59:13.732]        // =>  FALSE
[15:59:13.732]      // skip if-block "!canReadPins"
[15:59:13.732]    </control>
[15:59:13.732]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:59:13.732]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:13.732]        // =>  TRUE
[15:59:13.732]      <block atomic="false" info="">
[15:59:13.732]        WriteAP(0x00, 0x190008);
[15:59:13.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:13.742]        WriteAP(0xF0, 0x01);
[15:59:13.752]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:59:13.752]      </block>
[15:59:13.752]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:59:13.752]    </control>
[15:59:13.752]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:59:13.752]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:13.752]        // =>  FALSE
[15:59:13.752]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:59:13.752]    </control>
[15:59:13.752]    <block atomic="false" info="">
[15:59:13.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:59:13.762]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:59:13.762]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:59:13.762]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:59:13.762]      __ap = 0; //lets make sure we reset the access point selection
[15:59:13.762]        // -> [__ap <= 0x00000000]
[15:59:13.762]    </block>
[15:59:13.762]  </sequence>
[15:59:13.762]  
[15:59:13.812]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:59:13.812]  
[15:59:13.812]  <debugvars>
[15:59:13.812]    // Pre-defined
[15:59:13.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:59:13.812]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:59:13.812]    __dp=0x00000000
[15:59:13.812]    __ap=0x00000000
[15:59:13.812]    __traceout=0x00000000      (Trace Disabled)
[15:59:13.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:59:13.812]    __FlashAddr=0x00000000
[15:59:13.812]    __FlashLen=0x00000000
[15:59:13.812]    __FlashArg=0x00000000
[15:59:13.812]    __FlashOp=0x00000000
[15:59:13.812]    __Result=0x00000000
[15:59:13.812]  </debugvars>
[15:59:13.812]  
[15:59:13.812]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:59:13.812]    <block atomic="false" info="">
[15:59:13.812]      __var deviceID = 0;
[15:59:13.812]        // -> [deviceID <= 0x00000000]
[15:59:13.812]      __var version = 0;
[15:59:13.812]        // -> [version <= 0x00000000]
[15:59:13.812]      __var partNum = 0;
[15:59:13.812]        // -> [partNum <= 0x00000000]
[15:59:13.812]      __var manuf = 0;
[15:59:13.812]        // -> [manuf <= 0x00000000]
[15:59:13.812]      __var isMSPM0G1X0X_G3X0X = 0;
[15:59:13.812]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:59:13.812]      __var isProduction = 0;
[15:59:13.812]        // -> [isProduction <= 0x00000000]
[15:59:13.812]      __var continueId = 0;
[15:59:13.812]        // -> [continueId <= 0x00000000]
[15:59:13.812]      deviceID =   Read32(0x41C40004);
[15:59:13.832]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:59:13.832]        // -> [deviceID <= 0x2BB8802F]
[15:59:13.832]      version = deviceID >> 28;
[15:59:13.832]        // -> [version <= 0x00000002]
[15:59:13.832]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:59:13.832]        // -> [partNum <= 0x0000BB88]
[15:59:13.832]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:59:13.832]        // -> [manuf <= 0x00000017]
[15:59:13.832]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:59:13.832]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:59:13.832]      isProduction = (version > 0);
[15:59:13.832]        // -> [isProduction <= 0x00000001]
[15:59:13.832]    </block>
[15:59:13.832]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:59:13.832]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:59:13.832]        // =>  FALSE
[15:59:13.832]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:59:13.832]    </control>
[15:59:13.836]    <control if="continueId == 4" while="" timeout="0" info="">
[15:59:13.836]      // if-block "continueId == 4"
[15:59:13.836]        // =>  FALSE
[15:59:13.836]      // skip if-block "continueId == 4"
[15:59:13.836]    </control>
[15:59:13.836]    <control if="!isProduction" while="" timeout="0" info="">
[15:59:13.836]      // if-block "!isProduction"
[15:59:13.836]        // =>  FALSE
[15:59:13.836]      // skip if-block "!isProduction"
[15:59:13.836]    </control>
[15:59:13.836]  </sequence>
[15:59:13.836]  
[16:00:05.499]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:00:05.499]  
[16:00:05.508]  <debugvars>
[16:00:05.508]    // Pre-defined
[16:00:05.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:05.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:05.508]    __dp=0x00000000
[16:00:05.508]    __ap=0x00000000
[16:00:05.508]    __traceout=0x00000000      (Trace Disabled)
[16:00:05.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:05.510]    __FlashAddr=0x00000000
[16:00:05.510]    __FlashLen=0x00000000
[16:00:05.510]    __FlashArg=0x00000000
[16:00:05.510]    __FlashOp=0x00000000
[16:00:05.510]    __Result=0x00000000
[16:00:05.510]  </debugvars>
[16:00:05.510]  
[16:00:05.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:00:05.510]    <block atomic="false" info="">
[16:00:05.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:00:05.510]        // -> [isSWJ <= 0x00000001]
[16:00:05.510]      __var hasDormant = __protocol & 0x00020000;
[16:00:05.510]        // -> [hasDormant <= 0x00000000]
[16:00:05.510]      __var protType   = __protocol & 0x0000FFFF;
[16:00:05.510]        // -> [protType <= 0x00000002]
[16:00:05.510]    </block>
[16:00:05.510]    <control if="protType == 1" while="" timeout="0" info="">
[16:00:05.510]      // if-block "protType == 1"
[16:00:05.510]        // =>  FALSE
[16:00:05.510]      // skip if-block "protType == 1"
[16:00:05.510]    </control>
[16:00:05.510]    <control if="protType == 2" while="" timeout="0" info="">
[16:00:05.510]      // if-block "protType == 2"
[16:00:05.510]        // =>  TRUE
[16:00:05.510]      <control if="isSWJ" while="" timeout="0" info="">
[16:00:05.510]        // if-block "isSWJ"
[16:00:05.510]          // =>  TRUE
[16:00:05.510]        <control if="hasDormant" while="" timeout="0" info="">
[16:00:05.510]          // if-block "hasDormant"
[16:00:05.510]            // =>  FALSE
[16:00:05.510]          // skip if-block "hasDormant"
[16:00:05.510]        </control>
[16:00:05.510]        <control if="!hasDormant" while="" timeout="0" info="">
[16:00:05.510]          // if-block "!hasDormant"
[16:00:05.510]            // =>  TRUE
[16:00:05.510]          <block atomic="false" info="">
[16:00:05.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:00:05.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:05.522]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:00:05.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:00:05.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:00:05.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:05.522]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:00:05.530]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:00:05.530]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:00:05.530]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:05.530]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:00:05.540]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:00:05.540]          </block>
[16:00:05.540]          // end if-block "!hasDormant"
[16:00:05.540]        </control>
[16:00:05.540]        // end if-block "isSWJ"
[16:00:05.540]      </control>
[16:00:05.540]      <control if="!isSWJ" while="" timeout="0" info="">
[16:00:05.540]        // if-block "!isSWJ"
[16:00:05.540]          // =>  FALSE
[16:00:05.540]        // skip if-block "!isSWJ"
[16:00:05.540]      </control>
[16:00:05.540]      <block atomic="false" info="">
[16:00:05.540]        ReadDP(0x0);
[16:00:05.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:00:05.549]      </block>
[16:00:05.550]      // end if-block "protType == 2"
[16:00:05.550]    </control>
[16:00:05.550]  </sequence>
[16:00:05.550]  
[16:00:05.557]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:00:05.557]  
[16:00:05.558]  <debugvars>
[16:00:05.558]    // Pre-defined
[16:00:05.558]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:05.558]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:05.558]    __dp=0x00000000
[16:00:05.559]    __ap=0x00000000
[16:00:05.559]    __traceout=0x00000000      (Trace Disabled)
[16:00:05.559]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:05.559]    __FlashAddr=0x00000000
[16:00:05.559]    __FlashLen=0x00000000
[16:00:05.560]    __FlashArg=0x00000000
[16:00:05.560]    __FlashOp=0x00000000
[16:00:05.560]    __Result=0x00000000
[16:00:05.560]  </debugvars>
[16:00:05.560]  
[16:00:05.560]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:00:05.561]    <block atomic="false" info="">
[16:00:05.561]      __var SW_DP_ABORT       = 0x0;
[16:00:05.561]        // -> [SW_DP_ABORT <= 0x00000000]
[16:00:05.562]      __var DP_CTRL_STAT      = 0x4;
[16:00:05.562]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:00:05.562]      __var DP_SELECT         = 0x8;
[16:00:05.562]        // -> [DP_SELECT <= 0x00000008]
[16:00:05.562]      __var powered_down      = 0;
[16:00:05.562]        // -> [powered_down <= 0x00000000]
[16:00:05.562]      WriteDP(DP_SELECT, 0x00000000);
[16:00:05.565]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:00:05.565]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:00:05.570]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:00:05.570]        // -> [powered_down <= 0x00000001]
[16:00:05.571]    </block>
[16:00:05.571]    <control if="powered_down" while="" timeout="0" info="">
[16:00:05.571]      // if-block "powered_down"
[16:00:05.571]        // =>  TRUE
[16:00:05.571]      <block atomic="false" info="">
[16:00:05.571]        Message(0, "Debug/System power-up request sent");
[16:00:05.577]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:00:05.581]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:00:05.581]      </block>
[16:00:05.582]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:00:05.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:00:05.586]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:00:05.587]        // while-condition  =>  FALSE
[16:00:05.587]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:00:05.587]      </control>
[16:00:05.587]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:00:05.587]        // if-block "(__protocol & 0xFFFF) == 1"
[16:00:05.588]          // =>  FALSE
[16:00:05.588]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:00:05.588]      </control>
[16:00:05.588]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:00:05.588]        // if-block "(__protocol & 0xFFFF) == 2"
[16:00:05.589]          // =>  TRUE
[16:00:05.589]        <block atomic="false" info="">
[16:00:05.589]          Message(0, "executing SWD power up");
[16:00:05.594]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:00:05.597]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:00:05.598]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:00:05.602]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:00:05.602]        </block>
[16:00:05.603]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:00:05.603]      </control>
[16:00:05.603]      // end if-block "powered_down"
[16:00:05.603]    </control>
[16:00:05.604]    <block atomic="false" info="">
[16:00:05.604]      __var DEBUG_PORT_VAL    = 0;
[16:00:05.604]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:00:05.604]      __var ACCESS_POINT_VAL  = 0;
[16:00:05.605]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:00:05.605]      __ap = 1; 
[16:00:05.605]        // -> [__ap <= 0x00000001]
[16:00:05.605]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:00:05.617]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:00:05.617]      __ap = 4;
[16:00:05.617]        // -> [__ap <= 0x00000004]
[16:00:05.617]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:00:05.627]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:00:05.627]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:00:05.627]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:00:05.629]    </block>
[16:00:05.629]    <block atomic="false" info="">
[16:00:05.629]      __var nReset = 0x80;
[16:00:05.629]        // -> [nReset <= 0x00000080]
[16:00:05.629]      __var canReadPins = 0;
[16:00:05.629]        // -> [canReadPins <= 0x00000000]
[16:00:05.629]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:00:05.638]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:00:05.638]        // -> [canReadPins <= 0x00000001]
[16:00:05.638]    </block>
[16:00:05.638]    <control if="" while="1" timeout="200" info="">
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.638]      // while-condition  =>  TRUE
[16:00:05.638]      // while "1"  (timeout="200")
[16:00:05.648]      // while-condition  =>  TRUE
[16:00:05.648]      // while "1"  (timeout="200")
[16:00:05.648]      // while  =>  TIMEOUT
[16:00:05.648]      // end while "1"
[16:00:05.648]    </control>
[16:00:05.648]    <control if="canReadPins" while="" timeout="0" info="">
[16:00:05.648]      // if-block "canReadPins"
[16:00:05.648]        // =>  TRUE
[16:00:05.648]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:00:05.648]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:00:05.648]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:00:05.648]        // while-condition  =>  FALSE
[16:00:05.648]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:00:05.648]      </control>
[16:00:05.648]      // end if-block "canReadPins"
[16:00:05.648]    </control>
[16:00:05.648]    <control if="!canReadPins" while="" timeout="0" info="">
[16:00:05.648]      // if-block "!canReadPins"
[16:00:05.648]        // =>  FALSE
[16:00:05.648]      // skip if-block "!canReadPins"
[16:00:05.648]    </control>
[16:00:05.648]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:00:05.648]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:00:05.648]        // =>  TRUE
[16:00:05.648]      <block atomic="false" info="">
[16:00:05.648]        WriteAP(0x00, 0x190008);
[16:00:05.659]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:00:05.659]        WriteAP(0xF0, 0x01);
[16:00:05.668]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:00:05.668]      </block>
[16:00:05.668]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:00:05.668]    </control>
[16:00:05.668]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:00:05.668]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:00:05.668]        // =>  FALSE
[16:00:05.668]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:00:05.668]    </control>
[16:00:05.668]    <block atomic="false" info="">
[16:00:05.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:00:05.679]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:00:05.679]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:00:05.679]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:00:05.679]      __ap = 0; //lets make sure we reset the access point selection
[16:00:05.679]        // -> [__ap <= 0x00000000]
[16:00:05.679]    </block>
[16:00:05.679]  </sequence>
[16:00:05.679]  
[16:00:05.738]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:00:05.738]  
[16:00:05.738]  <debugvars>
[16:00:05.738]    // Pre-defined
[16:00:05.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:05.738]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:05.738]    __dp=0x00000000
[16:00:05.738]    __ap=0x00000000
[16:00:05.738]    __traceout=0x00000000      (Trace Disabled)
[16:00:05.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:05.738]    __FlashAddr=0x00000000
[16:00:05.738]    __FlashLen=0x00000000
[16:00:05.738]    __FlashArg=0x00000000
[16:00:05.738]    __FlashOp=0x00000000
[16:00:05.738]    __Result=0x00000000
[16:00:05.738]  </debugvars>
[16:00:05.738]  
[16:00:05.738]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:00:05.738]    <block atomic="false" info="">
[16:00:05.738]      __var deviceID = 0;
[16:00:05.738]        // -> [deviceID <= 0x00000000]
[16:00:05.738]      __var version = 0;
[16:00:05.738]        // -> [version <= 0x00000000]
[16:00:05.738]      __var partNum = 0;
[16:00:05.738]        // -> [partNum <= 0x00000000]
[16:00:05.738]      __var manuf = 0;
[16:00:05.738]        // -> [manuf <= 0x00000000]
[16:00:05.738]      __var isMSPM0G1X0X_G3X0X = 0;
[16:00:05.738]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:00:05.738]      __var isProduction = 0;
[16:00:05.738]        // -> [isProduction <= 0x00000000]
[16:00:05.738]      __var continueId = 0;
[16:00:05.738]        // -> [continueId <= 0x00000000]
[16:00:05.738]      deviceID =   Read32(0x41C40004);
[16:00:05.748]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:00:05.748]        // -> [deviceID <= 0x2BB8802F]
[16:00:05.748]      version = deviceID >> 28;
[16:00:05.748]        // -> [version <= 0x00000002]
[16:00:05.748]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:00:05.748]        // -> [partNum <= 0x0000BB88]
[16:00:05.748]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:00:05.748]        // -> [manuf <= 0x00000017]
[16:00:05.748]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:00:05.748]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:00:05.748]      isProduction = (version > 0);
[16:00:05.748]        // -> [isProduction <= 0x00000001]
[16:00:05.748]    </block>
[16:00:05.748]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:00:05.748]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:00:05.748]        // =>  FALSE
[16:00:05.748]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:00:05.748]    </control>
[16:00:05.748]    <control if="continueId == 4" while="" timeout="0" info="">
[16:00:05.748]      // if-block "continueId == 4"
[16:00:05.748]        // =>  FALSE
[16:00:05.748]      // skip if-block "continueId == 4"
[16:00:05.748]    </control>
[16:00:05.748]    <control if="!isProduction" while="" timeout="0" info="">
[16:00:05.748]      // if-block "!isProduction"
[16:00:05.748]        // =>  FALSE
[16:00:05.748]      // skip if-block "!isProduction"
[16:00:05.748]    </control>
[16:00:05.748]  </sequence>
[16:00:05.748]  
[16:00:52.322]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:00:52.322]  
[16:00:52.338]  <debugvars>
[16:00:52.338]    // Pre-defined
[16:00:52.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:52.338]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:52.338]    __dp=0x00000000
[16:00:52.338]    __ap=0x00000000
[16:00:52.338]    __traceout=0x00000000      (Trace Disabled)
[16:00:52.338]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:52.338]    __FlashAddr=0x00000000
[16:00:52.338]    __FlashLen=0x00000000
[16:00:52.338]    __FlashArg=0x00000000
[16:00:52.338]    __FlashOp=0x00000000
[16:00:52.338]    __Result=0x00000000
[16:00:52.338]  </debugvars>
[16:00:52.338]  
[16:00:52.338]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:00:52.338]    <block atomic="false" info="">
[16:00:52.338]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:00:52.338]        // -> [isSWJ <= 0x00000001]
[16:00:52.338]      __var hasDormant = __protocol & 0x00020000;
[16:00:52.338]        // -> [hasDormant <= 0x00000000]
[16:00:52.338]      __var protType   = __protocol & 0x0000FFFF;
[16:00:52.338]        // -> [protType <= 0x00000002]
[16:00:52.338]    </block>
[16:00:52.338]    <control if="protType == 1" while="" timeout="0" info="">
[16:00:52.342]      // if-block "protType == 1"
[16:00:52.342]        // =>  FALSE
[16:00:52.342]      // skip if-block "protType == 1"
[16:00:52.342]    </control>
[16:00:52.342]    <control if="protType == 2" while="" timeout="0" info="">
[16:00:52.342]      // if-block "protType == 2"
[16:00:52.342]        // =>  TRUE
[16:00:52.342]      <control if="isSWJ" while="" timeout="0" info="">
[16:00:52.342]        // if-block "isSWJ"
[16:00:52.342]          // =>  TRUE
[16:00:52.342]        <control if="hasDormant" while="" timeout="0" info="">
[16:00:52.342]          // if-block "hasDormant"
[16:00:52.342]            // =>  FALSE
[16:00:52.342]          // skip if-block "hasDormant"
[16:00:52.342]        </control>
[16:00:52.342]        <control if="!hasDormant" while="" timeout="0" info="">
[16:00:52.342]          // if-block "!hasDormant"
[16:00:52.342]            // =>  TRUE
[16:00:52.342]          <block atomic="false" info="">
[16:00:52.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:00:52.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:52.342]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:00:52.352]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:00:52.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:00:52.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:52.352]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:00:52.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:00:52.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:00:52.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:00:52.362]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:00:52.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:00:52.372]          </block>
[16:00:52.372]          // end if-block "!hasDormant"
[16:00:52.372]        </control>
[16:00:52.372]        // end if-block "isSWJ"
[16:00:52.372]      </control>
[16:00:52.372]      <control if="!isSWJ" while="" timeout="0" info="">
[16:00:52.372]        // if-block "!isSWJ"
[16:00:52.372]          // =>  FALSE
[16:00:52.372]        // skip if-block "!isSWJ"
[16:00:52.372]      </control>
[16:00:52.372]      <block atomic="false" info="">
[16:00:52.372]        ReadDP(0x0);
[16:00:52.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:00:52.372]      </block>
[16:00:52.372]      // end if-block "protType == 2"
[16:00:52.372]    </control>
[16:00:52.372]  </sequence>
[16:00:52.372]  
[16:00:52.392]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:00:52.392]  
[16:00:52.392]  <debugvars>
[16:00:52.392]    // Pre-defined
[16:00:52.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:52.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:52.392]    __dp=0x00000000
[16:00:52.392]    __ap=0x00000000
[16:00:52.392]    __traceout=0x00000000      (Trace Disabled)
[16:00:52.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:52.392]    __FlashAddr=0x00000000
[16:00:52.392]    __FlashLen=0x00000000
[16:00:52.392]    __FlashArg=0x00000000
[16:00:52.392]    __FlashOp=0x00000000
[16:00:52.392]    __Result=0x00000000
[16:00:52.392]  </debugvars>
[16:00:52.392]  
[16:00:52.392]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:00:52.392]    <block atomic="false" info="">
[16:00:52.392]      __var SW_DP_ABORT       = 0x0;
[16:00:52.392]        // -> [SW_DP_ABORT <= 0x00000000]
[16:00:52.392]      __var DP_CTRL_STAT      = 0x4;
[16:00:52.392]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:00:52.392]      __var DP_SELECT         = 0x8;
[16:00:52.392]        // -> [DP_SELECT <= 0x00000008]
[16:00:52.392]      __var powered_down      = 0;
[16:00:52.392]        // -> [powered_down <= 0x00000000]
[16:00:52.392]      WriteDP(DP_SELECT, 0x00000000);
[16:00:52.392]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:00:52.392]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:00:52.402]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:00:52.402]        // -> [powered_down <= 0x00000001]
[16:00:52.402]    </block>
[16:00:52.402]    <control if="powered_down" while="" timeout="0" info="">
[16:00:52.402]      // if-block "powered_down"
[16:00:52.402]        // =>  TRUE
[16:00:52.402]      <block atomic="false" info="">
[16:00:52.402]        Message(0, "Debug/System power-up request sent");
[16:00:52.402]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:00:52.402]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:00:52.402]      </block>
[16:00:52.402]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:00:52.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:00:52.412]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:00:52.412]        // while-condition  =>  FALSE
[16:00:52.412]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:00:52.412]      </control>
[16:00:52.412]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:00:52.412]        // if-block "(__protocol & 0xFFFF) == 1"
[16:00:52.412]          // =>  FALSE
[16:00:52.412]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:00:52.412]      </control>
[16:00:52.412]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:00:52.412]        // if-block "(__protocol & 0xFFFF) == 2"
[16:00:52.422]          // =>  TRUE
[16:00:52.422]        <block atomic="false" info="">
[16:00:52.422]          Message(0, "executing SWD power up");
[16:00:52.422]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:00:52.422]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:00:52.422]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:00:52.422]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:00:52.422]        </block>
[16:00:52.422]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:00:52.422]      </control>
[16:00:52.422]      // end if-block "powered_down"
[16:00:52.422]    </control>
[16:00:52.422]    <block atomic="false" info="">
[16:00:52.422]      __var DEBUG_PORT_VAL    = 0;
[16:00:52.422]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:00:52.422]      __var ACCESS_POINT_VAL  = 0;
[16:00:52.422]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:00:52.422]      __ap = 1; 
[16:00:52.422]        // -> [__ap <= 0x00000001]
[16:00:52.422]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:00:52.442]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:00:52.442]      __ap = 4;
[16:00:52.442]        // -> [__ap <= 0x00000004]
[16:00:52.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:00:52.452]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:00:52.452]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:00:52.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:00:52.452]    </block>
[16:00:52.452]    <block atomic="false" info="">
[16:00:52.452]      __var nReset = 0x80;
[16:00:52.452]        // -> [nReset <= 0x00000080]
[16:00:52.452]      __var canReadPins = 0;
[16:00:52.452]        // -> [canReadPins <= 0x00000000]
[16:00:52.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:00:52.462]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:00:52.462]        // -> [canReadPins <= 0x00000001]
[16:00:52.462]    </block>
[16:00:52.462]    <control if="" while="1" timeout="200" info="">
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.462]      // while "1"  (timeout="200")
[16:00:52.462]      // while-condition  =>  TRUE
[16:00:52.472]      // while "1"  (timeout="200")
[16:00:52.472]      // while  =>  TIMEOUT
[16:00:52.472]      // end while "1"
[16:00:52.472]    </control>
[16:00:52.472]    <control if="canReadPins" while="" timeout="0" info="">
[16:00:52.472]      // if-block "canReadPins"
[16:00:52.472]        // =>  TRUE
[16:00:52.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:00:52.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:00:52.472]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:00:52.472]        // while-condition  =>  FALSE
[16:00:52.472]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:00:52.472]      </control>
[16:00:52.472]      // end if-block "canReadPins"
[16:00:52.472]    </control>
[16:00:52.472]    <control if="!canReadPins" while="" timeout="0" info="">
[16:00:52.472]      // if-block "!canReadPins"
[16:00:52.472]        // =>  FALSE
[16:00:52.472]      // skip if-block "!canReadPins"
[16:00:52.472]    </control>
[16:00:52.472]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:00:52.472]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:00:52.472]        // =>  TRUE
[16:00:52.472]      <block atomic="false" info="">
[16:00:52.472]        WriteAP(0x00, 0x190008);
[16:00:52.482]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:00:52.482]        WriteAP(0xF0, 0x01);
[16:00:52.492]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:00:52.492]      </block>
[16:00:52.492]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:00:52.492]    </control>
[16:00:52.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:00:52.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:00:52.492]        // =>  FALSE
[16:00:52.492]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:00:52.492]    </control>
[16:00:52.492]    <block atomic="false" info="">
[16:00:52.492]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:00:52.502]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:00:52.502]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:00:52.502]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:00:52.502]      __ap = 0; //lets make sure we reset the access point selection
[16:00:52.502]        // -> [__ap <= 0x00000000]
[16:00:52.502]    </block>
[16:00:52.502]  </sequence>
[16:00:52.502]  
[16:00:52.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:00:52.552]  
[16:00:52.552]  <debugvars>
[16:00:52.552]    // Pre-defined
[16:00:52.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:00:52.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:00:52.552]    __dp=0x00000000
[16:00:52.552]    __ap=0x00000000
[16:00:52.552]    __traceout=0x00000000      (Trace Disabled)
[16:00:52.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:00:52.552]    __FlashAddr=0x00000000
[16:00:52.552]    __FlashLen=0x00000000
[16:00:52.552]    __FlashArg=0x00000000
[16:00:52.552]    __FlashOp=0x00000000
[16:00:52.552]    __Result=0x00000000
[16:00:52.552]  </debugvars>
[16:00:52.552]  
[16:00:52.552]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:00:52.552]    <block atomic="false" info="">
[16:00:52.552]      __var deviceID = 0;
[16:00:52.552]        // -> [deviceID <= 0x00000000]
[16:00:52.552]      __var version = 0;
[16:00:52.552]        // -> [version <= 0x00000000]
[16:00:52.552]      __var partNum = 0;
[16:00:52.552]        // -> [partNum <= 0x00000000]
[16:00:52.552]      __var manuf = 0;
[16:00:52.552]        // -> [manuf <= 0x00000000]
[16:00:52.552]      __var isMSPM0G1X0X_G3X0X = 0;
[16:00:52.552]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:00:52.552]      __var isProduction = 0;
[16:00:52.552]        // -> [isProduction <= 0x00000000]
[16:00:52.552]      __var continueId = 0;
[16:00:52.552]        // -> [continueId <= 0x00000000]
[16:00:52.552]      deviceID =   Read32(0x41C40004);
[16:00:52.572]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:00:52.572]        // -> [deviceID <= 0x2BB8802F]
[16:00:52.572]      version = deviceID >> 28;
[16:00:52.572]        // -> [version <= 0x00000002]
[16:00:52.572]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:00:52.572]        // -> [partNum <= 0x0000BB88]
[16:00:52.572]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:00:52.572]        // -> [manuf <= 0x00000017]
[16:00:52.572]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:00:52.572]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:00:52.572]      isProduction = (version > 0);
[16:00:52.572]        // -> [isProduction <= 0x00000001]
[16:00:52.572]    </block>
[16:00:52.572]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:00:52.572]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:00:52.572]        // =>  FALSE
[16:00:52.572]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:00:52.572]    </control>
[16:00:52.572]    <control if="continueId == 4" while="" timeout="0" info="">
[16:00:52.572]      // if-block "continueId == 4"
[16:00:52.572]        // =>  FALSE
[16:00:52.572]      // skip if-block "continueId == 4"
[16:00:52.572]    </control>
[16:00:52.572]    <control if="!isProduction" while="" timeout="0" info="">
[16:00:52.572]      // if-block "!isProduction"
[16:00:52.572]        // =>  FALSE
[16:00:52.572]      // skip if-block "!isProduction"
[16:00:52.572]    </control>
[16:00:52.572]  </sequence>
[16:00:52.572]  
[16:02:14.839]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:02:14.839]  
[16:02:14.854]  <debugvars>
[16:02:14.854]    // Pre-defined
[16:02:14.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:14.854]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:14.854]    __dp=0x00000000
[16:02:14.854]    __ap=0x00000000
[16:02:14.854]    __traceout=0x00000000      (Trace Disabled)
[16:02:14.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:14.854]    __FlashAddr=0x00000000
[16:02:14.854]    __FlashLen=0x00000000
[16:02:14.854]    __FlashArg=0x00000000
[16:02:14.854]    __FlashOp=0x00000000
[16:02:14.854]    __Result=0x00000000
[16:02:14.854]  </debugvars>
[16:02:14.854]  
[16:02:14.854]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:02:14.854]    <block atomic="false" info="">
[16:02:14.854]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:02:14.854]        // -> [isSWJ <= 0x00000001]
[16:02:14.854]      __var hasDormant = __protocol & 0x00020000;
[16:02:14.854]        // -> [hasDormant <= 0x00000000]
[16:02:14.854]      __var protType   = __protocol & 0x0000FFFF;
[16:02:14.854]        // -> [protType <= 0x00000002]
[16:02:14.854]    </block>
[16:02:14.854]    <control if="protType == 1" while="" timeout="0" info="">
[16:02:14.854]      // if-block "protType == 1"
[16:02:14.854]        // =>  FALSE
[16:02:14.854]      // skip if-block "protType == 1"
[16:02:14.854]    </control>
[16:02:14.854]    <control if="protType == 2" while="" timeout="0" info="">
[16:02:14.859]      // if-block "protType == 2"
[16:02:14.859]        // =>  TRUE
[16:02:14.859]      <control if="isSWJ" while="" timeout="0" info="">
[16:02:14.859]        // if-block "isSWJ"
[16:02:14.859]          // =>  TRUE
[16:02:14.859]        <control if="hasDormant" while="" timeout="0" info="">
[16:02:14.859]          // if-block "hasDormant"
[16:02:14.859]            // =>  FALSE
[16:02:14.859]          // skip if-block "hasDormant"
[16:02:14.859]        </control>
[16:02:14.859]        <control if="!hasDormant" while="" timeout="0" info="">
[16:02:14.859]          // if-block "!hasDormant"
[16:02:14.859]            // =>  TRUE
[16:02:14.859]          <block atomic="false" info="">
[16:02:14.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:02:14.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:14.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:02:14.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:02:14.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:02:14.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:14.870]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:02:14.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:02:14.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:02:14.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:14.879]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:02:14.879]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:02:14.879]          </block>
[16:02:14.879]          // end if-block "!hasDormant"
[16:02:14.879]        </control>
[16:02:14.879]        // end if-block "isSWJ"
[16:02:14.879]      </control>
[16:02:14.879]      <control if="!isSWJ" while="" timeout="0" info="">
[16:02:14.879]        // if-block "!isSWJ"
[16:02:14.879]          // =>  FALSE
[16:02:14.879]        // skip if-block "!isSWJ"
[16:02:14.879]      </control>
[16:02:14.879]      <block atomic="false" info="">
[16:02:14.879]        ReadDP(0x0);
[16:02:14.889]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:02:14.889]      </block>
[16:02:14.889]      // end if-block "protType == 2"
[16:02:14.889]    </control>
[16:02:14.889]  </sequence>
[16:02:14.889]  
[16:02:14.899]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:02:14.899]  
[16:02:14.899]  <debugvars>
[16:02:14.899]    // Pre-defined
[16:02:14.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:14.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:14.899]    __dp=0x00000000
[16:02:14.899]    __ap=0x00000000
[16:02:14.899]    __traceout=0x00000000      (Trace Disabled)
[16:02:14.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:14.899]    __FlashAddr=0x00000000
[16:02:14.899]    __FlashLen=0x00000000
[16:02:14.899]    __FlashArg=0x00000000
[16:02:14.899]    __FlashOp=0x00000000
[16:02:14.899]    __Result=0x00000000
[16:02:14.899]  </debugvars>
[16:02:14.899]  
[16:02:14.899]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:02:14.899]    <block atomic="false" info="">
[16:02:14.899]      __var SW_DP_ABORT       = 0x0;
[16:02:14.899]        // -> [SW_DP_ABORT <= 0x00000000]
[16:02:14.899]      __var DP_CTRL_STAT      = 0x4;
[16:02:14.899]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:02:14.899]      __var DP_SELECT         = 0x8;
[16:02:14.899]        // -> [DP_SELECT <= 0x00000008]
[16:02:14.899]      __var powered_down      = 0;
[16:02:14.899]        // -> [powered_down <= 0x00000000]
[16:02:14.899]      WriteDP(DP_SELECT, 0x00000000);
[16:02:14.909]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:02:14.909]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:02:14.919]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:02:14.919]        // -> [powered_down <= 0x00000001]
[16:02:14.919]    </block>
[16:02:14.919]    <control if="powered_down" while="" timeout="0" info="">
[16:02:14.919]      // if-block "powered_down"
[16:02:14.919]        // =>  TRUE
[16:02:14.919]      <block atomic="false" info="">
[16:02:14.919]        Message(0, "Debug/System power-up request sent");
[16:02:14.919]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:02:14.919]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:02:14.919]      </block>
[16:02:14.919]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:02:14.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.929]        // while-condition  =>  TRUE
[16:02:14.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.929]        // while-condition  =>  TRUE
[16:02:14.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.929]        // while-condition  =>  TRUE
[16:02:14.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.939]        // while-condition  =>  TRUE
[16:02:14.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.939]        // while-condition  =>  TRUE
[16:02:14.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.949]        // while-condition  =>  TRUE
[16:02:14.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.959]        // while-condition  =>  TRUE
[16:02:14.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.959]        // while-condition  =>  TRUE
[16:02:14.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.969]        // while-condition  =>  TRUE
[16:02:14.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.970]        // while-condition  =>  TRUE
[16:02:14.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.970]        // while-condition  =>  TRUE
[16:02:14.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.979]        // while-condition  =>  TRUE
[16:02:14.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.979]        // while-condition  =>  TRUE
[16:02:14.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.979]        // while-condition  =>  TRUE
[16:02:14.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.989]        // while-condition  =>  TRUE
[16:02:14.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.989]        // while-condition  =>  TRUE
[16:02:14.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.999]        // while-condition  =>  TRUE
[16:02:14.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.999]        // while-condition  =>  TRUE
[16:02:14.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:14.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:14.999]        // while-condition  =>  TRUE
[16:02:14.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.010]        // while-condition  =>  TRUE
[16:02:15.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.010]        // while-condition  =>  TRUE
[16:02:15.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.019]        // while-condition  =>  TRUE
[16:02:15.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.019]        // while-condition  =>  TRUE
[16:02:15.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.029]        // while-condition  =>  TRUE
[16:02:15.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.029]        // while-condition  =>  TRUE
[16:02:15.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.029]        // while-condition  =>  TRUE
[16:02:15.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.039]        // while-condition  =>  TRUE
[16:02:15.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.039]        // while-condition  =>  TRUE
[16:02:15.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.039]        // while-condition  =>  TRUE
[16:02:15.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.049]        // while-condition  =>  TRUE
[16:02:15.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.059]        // while-condition  =>  TRUE
[16:02:15.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.059]        // while-condition  =>  TRUE
[16:02:15.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.059]        // while-condition  =>  TRUE
[16:02:15.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.071]        // while-condition  =>  TRUE
[16:02:15.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.071]        // while-condition  =>  TRUE
[16:02:15.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.079]        // while-condition  =>  TRUE
[16:02:15.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.079]        // while-condition  =>  TRUE
[16:02:15.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.079]        // while-condition  =>  TRUE
[16:02:15.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.079]        // while-condition  =>  TRUE
[16:02:15.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.089]        // while-condition  =>  TRUE
[16:02:15.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.089]        // while-condition  =>  TRUE
[16:02:15.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.099]        // while-condition  =>  TRUE
[16:02:15.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.099]        // while-condition  =>  TRUE
[16:02:15.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.109]        // while-condition  =>  TRUE
[16:02:15.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.109]        // while-condition  =>  TRUE
[16:02:15.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.109]        // while-condition  =>  TRUE
[16:02:15.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.119]        // while-condition  =>  TRUE
[16:02:15.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.119]        // while-condition  =>  TRUE
[16:02:15.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.129]        // while-condition  =>  TRUE
[16:02:15.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.129]        // while-condition  =>  TRUE
[16:02:15.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.129]        // while-condition  =>  TRUE
[16:02:15.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.146]        // while-condition  =>  TRUE
[16:02:15.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.149]        // while-condition  =>  TRUE
[16:02:15.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.149]        // while-condition  =>  TRUE
[16:02:15.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.159]        // while-condition  =>  TRUE
[16:02:15.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.162]        // while-condition  =>  TRUE
[16:02:15.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.171]        // while-condition  =>  TRUE
[16:02:15.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.179]        // while-condition  =>  TRUE
[16:02:15.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.179]        // while-condition  =>  TRUE
[16:02:15.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.189]        // while-condition  =>  TRUE
[16:02:15.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.189]        // while-condition  =>  TRUE
[16:02:15.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.195]        // while-condition  =>  TRUE
[16:02:15.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.199]        // while-condition  =>  TRUE
[16:02:15.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.199]        // while-condition  =>  TRUE
[16:02:15.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.209]        // while-condition  =>  TRUE
[16:02:15.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.209]        // while-condition  =>  TRUE
[16:02:15.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.219]        // while-condition  =>  TRUE
[16:02:15.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.219]        // while-condition  =>  TRUE
[16:02:15.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.219]        // while-condition  =>  TRUE
[16:02:15.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.229]        // while-condition  =>  TRUE
[16:02:15.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.229]        // while-condition  =>  TRUE
[16:02:15.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.239]        // while-condition  =>  TRUE
[16:02:15.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.239]        // while-condition  =>  TRUE
[16:02:15.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.249]        // while-condition  =>  TRUE
[16:02:15.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.249]        // while-condition  =>  TRUE
[16:02:15.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.259]        // while-condition  =>  TRUE
[16:02:15.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.269]        // while-condition  =>  TRUE
[16:02:15.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.271]        // while-condition  =>  TRUE
[16:02:15.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.279]        // while-condition  =>  TRUE
[16:02:15.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.279]        // while-condition  =>  TRUE
[16:02:15.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.279]        // while-condition  =>  TRUE
[16:02:15.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.289]        // while-condition  =>  TRUE
[16:02:15.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.289]        // while-condition  =>  TRUE
[16:02:15.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.289]        // while-condition  =>  TRUE
[16:02:15.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.299]        // while-condition  =>  TRUE
[16:02:15.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.299]        // while-condition  =>  TRUE
[16:02:15.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.309]        // while-condition  =>  TRUE
[16:02:15.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.309]        // while-condition  =>  TRUE
[16:02:15.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.309]        // while-condition  =>  TRUE
[16:02:15.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.319]        // while-condition  =>  TRUE
[16:02:15.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.329]        // while-condition  =>  TRUE
[16:02:15.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.329]        // while-condition  =>  TRUE
[16:02:15.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.329]        // while-condition  =>  TRUE
[16:02:15.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.339]        // while-condition  =>  TRUE
[16:02:15.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.339]        // while-condition  =>  TRUE
[16:02:15.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.339]        // while-condition  =>  TRUE
[16:02:15.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.349]        // while-condition  =>  TRUE
[16:02:15.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.359]        // while-condition  =>  TRUE
[16:02:15.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.369]        // while-condition  =>  TRUE
[16:02:15.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.371]        // while-condition  =>  TRUE
[16:02:15.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.379]        // while-condition  =>  TRUE
[16:02:15.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.379]        // while-condition  =>  TRUE
[16:02:15.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.389]        // while-condition  =>  TRUE
[16:02:15.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.389]        // while-condition  =>  TRUE
[16:02:15.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.389]        // while-condition  =>  TRUE
[16:02:15.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.399]        // while-condition  =>  TRUE
[16:02:15.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.399]        // while-condition  =>  TRUE
[16:02:15.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.409]        // while-condition  =>  TRUE
[16:02:15.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.409]        // while-condition  =>  TRUE
[16:02:15.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.419]        // while-condition  =>  TRUE
[16:02:15.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.419]        // while-condition  =>  TRUE
[16:02:15.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.429]        // while-condition  =>  TRUE
[16:02:15.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.429]        // while-condition  =>  TRUE
[16:02:15.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.429]        // while-condition  =>  TRUE
[16:02:15.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.439]        // while-condition  =>  TRUE
[16:02:15.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.439]        // while-condition  =>  TRUE
[16:02:15.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.449]        // while-condition  =>  TRUE
[16:02:15.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.459]        // while-condition  =>  TRUE
[16:02:15.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.459]        // while-condition  =>  TRUE
[16:02:15.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.469]        // while-condition  =>  TRUE
[16:02:15.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.471]        // while-condition  =>  TRUE
[16:02:15.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.471]        // while-condition  =>  TRUE
[16:02:15.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.479]        // while-condition  =>  TRUE
[16:02:15.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.479]        // while-condition  =>  TRUE
[16:02:15.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.489]        // while-condition  =>  TRUE
[16:02:15.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.489]        // while-condition  =>  TRUE
[16:02:15.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.489]        // while-condition  =>  TRUE
[16:02:15.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.499]        // while-condition  =>  TRUE
[16:02:15.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.499]        // while-condition  =>  TRUE
[16:02:15.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.509]        // while-condition  =>  TRUE
[16:02:15.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.509]        // while-condition  =>  TRUE
[16:02:15.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.519]        // while-condition  =>  TRUE
[16:02:15.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.519]        // while-condition  =>  TRUE
[16:02:15.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.529]        // while-condition  =>  TRUE
[16:02:15.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.529]        // while-condition  =>  TRUE
[16:02:15.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.539]        // while-condition  =>  TRUE
[16:02:15.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.539]        // while-condition  =>  TRUE
[16:02:15.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.539]        // while-condition  =>  TRUE
[16:02:15.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.549]        // while-condition  =>  TRUE
[16:02:15.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.549]        // while-condition  =>  TRUE
[16:02:15.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.549]        // while-condition  =>  TRUE
[16:02:15.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.559]        // while-condition  =>  TRUE
[16:02:15.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.559]        // while-condition  =>  TRUE
[16:02:15.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.571]        // while-condition  =>  TRUE
[16:02:15.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.571]        // while-condition  =>  TRUE
[16:02:15.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.579]        // while-condition  =>  TRUE
[16:02:15.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.579]        // while-condition  =>  TRUE
[16:02:15.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.579]        // while-condition  =>  TRUE
[16:02:15.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.589]        // while-condition  =>  TRUE
[16:02:15.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.589]        // while-condition  =>  TRUE
[16:02:15.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.589]        // while-condition  =>  TRUE
[16:02:15.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.599]        // while-condition  =>  TRUE
[16:02:15.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.599]        // while-condition  =>  TRUE
[16:02:15.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.609]        // while-condition  =>  TRUE
[16:02:15.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.609]        // while-condition  =>  TRUE
[16:02:15.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.619]        // while-condition  =>  TRUE
[16:02:15.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.619]        // while-condition  =>  TRUE
[16:02:15.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.619]        // while-condition  =>  TRUE
[16:02:15.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.629]        // while-condition  =>  TRUE
[16:02:15.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.629]        // while-condition  =>  TRUE
[16:02:15.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.639]        // while-condition  =>  TRUE
[16:02:15.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.639]        // while-condition  =>  TRUE
[16:02:15.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.649]        // while-condition  =>  TRUE
[16:02:15.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.649]        // while-condition  =>  TRUE
[16:02:15.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.659]        // while-condition  =>  TRUE
[16:02:15.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.659]        // while-condition  =>  TRUE
[16:02:15.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.659]        // while-condition  =>  TRUE
[16:02:15.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.671]        // while-condition  =>  TRUE
[16:02:15.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.679]        // while-condition  =>  TRUE
[16:02:15.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.679]        // while-condition  =>  TRUE
[16:02:15.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.689]        // while-condition  =>  TRUE
[16:02:15.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.689]        // while-condition  =>  TRUE
[16:02:15.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.689]        // while-condition  =>  TRUE
[16:02:15.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.699]        // while-condition  =>  TRUE
[16:02:15.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.699]        // while-condition  =>  TRUE
[16:02:15.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.699]        // while-condition  =>  TRUE
[16:02:15.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.709]        // while-condition  =>  TRUE
[16:02:15.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.719]        // while-condition  =>  TRUE
[16:02:15.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.719]        // while-condition  =>  TRUE
[16:02:15.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.729]        // while-condition  =>  TRUE
[16:02:15.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.729]        // while-condition  =>  TRUE
[16:02:15.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.729]        // while-condition  =>  TRUE
[16:02:15.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.739]        // while-condition  =>  TRUE
[16:02:15.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.739]        // while-condition  =>  TRUE
[16:02:15.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.739]        // while-condition  =>  TRUE
[16:02:15.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.749]        // while-condition  =>  TRUE
[16:02:15.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.749]        // while-condition  =>  TRUE
[16:02:15.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.759]        // while-condition  =>  TRUE
[16:02:15.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.759]        // while-condition  =>  TRUE
[16:02:15.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.759]        // while-condition  =>  TRUE
[16:02:15.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.771]        // while-condition  =>  TRUE
[16:02:15.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.779]        // while-condition  =>  TRUE
[16:02:15.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.779]        // while-condition  =>  TRUE
[16:02:15.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.789]        // while-condition  =>  TRUE
[16:02:15.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.789]        // while-condition  =>  TRUE
[16:02:15.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.789]        // while-condition  =>  TRUE
[16:02:15.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.799]        // while-condition  =>  TRUE
[16:02:15.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.809]        // while-condition  =>  TRUE
[16:02:15.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.809]        // while-condition  =>  TRUE
[16:02:15.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.819]        // while-condition  =>  TRUE
[16:02:15.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.819]        // while-condition  =>  TRUE
[16:02:15.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.829]        // while-condition  =>  TRUE
[16:02:15.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.829]        // while-condition  =>  TRUE
[16:02:15.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.829]        // while-condition  =>  TRUE
[16:02:15.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.839]        // while-condition  =>  TRUE
[16:02:15.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.839]        // while-condition  =>  TRUE
[16:02:15.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.839]        // while-condition  =>  TRUE
[16:02:15.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.849]        // while-condition  =>  TRUE
[16:02:15.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.849]        // while-condition  =>  TRUE
[16:02:15.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.849]        // while-condition  =>  TRUE
[16:02:15.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.859]        // while-condition  =>  TRUE
[16:02:15.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.859]        // while-condition  =>  TRUE
[16:02:15.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.859]        // while-condition  =>  TRUE
[16:02:15.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.871]        // while-condition  =>  TRUE
[16:02:15.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.871]        // while-condition  =>  TRUE
[16:02:15.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.880]        // while-condition  =>  TRUE
[16:02:15.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.880]        // while-condition  =>  TRUE
[16:02:15.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.880]        // while-condition  =>  TRUE
[16:02:15.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.889]        // while-condition  =>  TRUE
[16:02:15.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.889]        // while-condition  =>  TRUE
[16:02:15.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.889]        // while-condition  =>  TRUE
[16:02:15.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.899]        // while-condition  =>  TRUE
[16:02:15.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.909]        // while-condition  =>  TRUE
[16:02:15.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.909]        // while-condition  =>  TRUE
[16:02:15.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[16:02:15.909]        // while-condition  =>  TRUE
[16:02:15.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:15.919]        // while  =>  TIMEOUT
[16:02:15.919]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:02:15.919]      </control>
[16:02:15.919]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:02:15.919]        // if-block "(__protocol & 0xFFFF) == 1"
[16:02:15.919]          // =>  FALSE
[16:02:15.919]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:02:15.919]      </control>
[16:02:15.919]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:02:15.919]        // if-block "(__protocol & 0xFFFF) == 2"
[16:02:15.919]          // =>  TRUE
[16:02:15.919]        <block atomic="false" info="">
[16:02:15.919]          Message(0, "executing SWD power up");
[16:02:15.919]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:02:15.919]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:02:15.919]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:02:15.919]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:02:15.929]        </block>
[16:02:15.929]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:02:15.929]      </control>
[16:02:15.929]      // end if-block "powered_down"
[16:02:15.929]    </control>
[16:02:15.929]    <block atomic="false" info="">
[16:02:15.929]      __var DEBUG_PORT_VAL    = 0;
[16:02:15.929]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:02:15.929]      __var ACCESS_POINT_VAL  = 0;
[16:02:15.929]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:02:15.929]      __ap = 1; 
[16:02:15.929]        // -> [__ap <= 0x00000001]
[16:02:15.929]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:02:15.969]  
[16:02:15.969]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[16:02:15.969]  
[16:02:15.971]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:02:15.971]    </block>
[16:02:15.971]  </sequence>
[16:02:15.971]  
[16:02:25.737]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:02:25.737]  
[16:02:25.748]  <debugvars>
[16:02:25.748]    // Pre-defined
[16:02:25.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:25.748]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:25.748]    __dp=0x00000000
[16:02:25.748]    __ap=0x00000000
[16:02:25.749]    __traceout=0x00000000      (Trace Disabled)
[16:02:25.749]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:25.749]    __FlashAddr=0x00000000
[16:02:25.749]    __FlashLen=0x00000000
[16:02:25.749]    __FlashArg=0x00000000
[16:02:25.749]    __FlashOp=0x00000000
[16:02:25.749]    __Result=0x00000000
[16:02:25.749]  </debugvars>
[16:02:25.749]  
[16:02:25.749]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:02:25.749]    <block atomic="false" info="">
[16:02:25.749]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:02:25.749]        // -> [isSWJ <= 0x00000001]
[16:02:25.749]      __var hasDormant = __protocol & 0x00020000;
[16:02:25.749]        // -> [hasDormant <= 0x00000000]
[16:02:25.749]      __var protType   = __protocol & 0x0000FFFF;
[16:02:25.749]        // -> [protType <= 0x00000002]
[16:02:25.749]    </block>
[16:02:25.749]    <control if="protType == 1" while="" timeout="0" info="">
[16:02:25.749]      // if-block "protType == 1"
[16:02:25.749]        // =>  FALSE
[16:02:25.749]      // skip if-block "protType == 1"
[16:02:25.749]    </control>
[16:02:25.749]    <control if="protType == 2" while="" timeout="0" info="">
[16:02:25.749]      // if-block "protType == 2"
[16:02:25.749]        // =>  TRUE
[16:02:25.749]      <control if="isSWJ" while="" timeout="0" info="">
[16:02:25.749]        // if-block "isSWJ"
[16:02:25.749]          // =>  TRUE
[16:02:25.749]        <control if="hasDormant" while="" timeout="0" info="">
[16:02:25.749]          // if-block "hasDormant"
[16:02:25.749]            // =>  FALSE
[16:02:25.749]          // skip if-block "hasDormant"
[16:02:25.749]        </control>
[16:02:25.749]        <control if="!hasDormant" while="" timeout="0" info="">
[16:02:25.749]          // if-block "!hasDormant"
[16:02:25.749]            // =>  TRUE
[16:02:25.749]          <block atomic="false" info="">
[16:02:25.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:02:25.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:25.757]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:02:25.757]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:02:25.757]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:02:25.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:25.767]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:02:25.767]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:02:25.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:02:25.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:02:25.767]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:02:25.767]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:02:25.767]          </block>
[16:02:25.767]          // end if-block "!hasDormant"
[16:02:25.767]        </control>
[16:02:25.767]        // end if-block "isSWJ"
[16:02:25.767]      </control>
[16:02:25.777]      <control if="!isSWJ" while="" timeout="0" info="">
[16:02:25.777]        // if-block "!isSWJ"
[16:02:25.777]          // =>  FALSE
[16:02:25.777]        // skip if-block "!isSWJ"
[16:02:25.777]      </control>
[16:02:25.777]      <block atomic="false" info="">
[16:02:25.777]        ReadDP(0x0);
[16:02:25.777]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:02:25.777]      </block>
[16:02:25.777]      // end if-block "protType == 2"
[16:02:25.777]    </control>
[16:02:25.777]  </sequence>
[16:02:25.777]  
[16:02:25.797]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:02:25.797]  
[16:02:25.797]  <debugvars>
[16:02:25.797]    // Pre-defined
[16:02:25.797]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:25.797]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:25.797]    __dp=0x00000000
[16:02:25.797]    __ap=0x00000000
[16:02:25.797]    __traceout=0x00000000      (Trace Disabled)
[16:02:25.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:25.797]    __FlashAddr=0x00000000
[16:02:25.797]    __FlashLen=0x00000000
[16:02:25.797]    __FlashArg=0x00000000
[16:02:25.797]    __FlashOp=0x00000000
[16:02:25.797]    __Result=0x00000000
[16:02:25.797]  </debugvars>
[16:02:25.797]  
[16:02:25.797]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:02:25.797]    <block atomic="false" info="">
[16:02:25.797]      __var SW_DP_ABORT       = 0x0;
[16:02:25.797]        // -> [SW_DP_ABORT <= 0x00000000]
[16:02:25.797]      __var DP_CTRL_STAT      = 0x4;
[16:02:25.797]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:02:25.797]      __var DP_SELECT         = 0x8;
[16:02:25.797]        // -> [DP_SELECT <= 0x00000008]
[16:02:25.797]      __var powered_down      = 0;
[16:02:25.797]        // -> [powered_down <= 0x00000000]
[16:02:25.797]      WriteDP(DP_SELECT, 0x00000000);
[16:02:25.807]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:02:25.807]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:02:25.807]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:02:25.807]        // -> [powered_down <= 0x00000001]
[16:02:25.807]    </block>
[16:02:25.807]    <control if="powered_down" while="" timeout="0" info="">
[16:02:25.807]      // if-block "powered_down"
[16:02:25.807]        // =>  TRUE
[16:02:25.817]      <block atomic="false" info="">
[16:02:25.817]        Message(0, "Debug/System power-up request sent");
[16:02:25.817]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:02:25.827]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:02:25.827]      </block>
[16:02:25.827]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:02:25.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:02:25.827]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:02:25.827]        // while-condition  =>  FALSE
[16:02:25.827]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:02:25.827]      </control>
[16:02:25.827]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:02:25.827]        // if-block "(__protocol & 0xFFFF) == 1"
[16:02:25.827]          // =>  FALSE
[16:02:25.827]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:02:25.827]      </control>
[16:02:25.827]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:02:25.827]        // if-block "(__protocol & 0xFFFF) == 2"
[16:02:25.827]          // =>  TRUE
[16:02:25.827]        <block atomic="false" info="">
[16:02:25.827]          Message(0, "executing SWD power up");
[16:02:25.837]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:02:25.837]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:02:25.837]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:02:25.837]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:02:25.837]        </block>
[16:02:25.837]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:02:25.837]      </control>
[16:02:25.837]      // end if-block "powered_down"
[16:02:25.837]    </control>
[16:02:25.837]    <block atomic="false" info="">
[16:02:25.837]      __var DEBUG_PORT_VAL    = 0;
[16:02:25.837]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:02:25.837]      __var ACCESS_POINT_VAL  = 0;
[16:02:25.837]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:02:25.837]      __ap = 1; 
[16:02:25.837]        // -> [__ap <= 0x00000001]
[16:02:25.837]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:02:25.849]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:02:25.849]      __ap = 4;
[16:02:25.849]        // -> [__ap <= 0x00000004]
[16:02:25.849]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:02:25.857]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:02:25.857]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:02:25.857]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:02:25.867]    </block>
[16:02:25.867]    <block atomic="false" info="">
[16:02:25.867]      __var nReset = 0x80;
[16:02:25.867]        // -> [nReset <= 0x00000080]
[16:02:25.867]      __var canReadPins = 0;
[16:02:25.867]        // -> [canReadPins <= 0x00000000]
[16:02:25.867]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:02:25.867]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:02:25.867]        // -> [canReadPins <= 0x00000001]
[16:02:25.867]    </block>
[16:02:25.867]    <control if="" while="1" timeout="200" info="">
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.867]      // while-condition  =>  TRUE
[16:02:25.867]      // while "1"  (timeout="200")
[16:02:25.877]      // while-condition  =>  TRUE
[16:02:25.877]      // while "1"  (timeout="200")
[16:02:25.877]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.878]      // while "1"  (timeout="200")
[16:02:25.878]      // while-condition  =>  TRUE
[16:02:25.887]      // while "1"  (timeout="200")
[16:02:25.887]      // while  =>  TIMEOUT
[16:02:25.887]      // end while "1"
[16:02:25.887]    </control>
[16:02:25.887]    <control if="canReadPins" while="" timeout="0" info="">
[16:02:25.887]      // if-block "canReadPins"
[16:02:25.887]        // =>  TRUE
[16:02:25.887]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:02:25.887]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:02:25.887]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:02:25.887]        // while-condition  =>  FALSE
[16:02:25.887]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:02:25.887]      </control>
[16:02:25.887]      // end if-block "canReadPins"
[16:02:25.887]    </control>
[16:02:25.887]    <control if="!canReadPins" while="" timeout="0" info="">
[16:02:25.887]      // if-block "!canReadPins"
[16:02:25.887]        // =>  FALSE
[16:02:25.887]      // skip if-block "!canReadPins"
[16:02:25.887]    </control>
[16:02:25.887]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:02:25.887]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:02:25.887]        // =>  TRUE
[16:02:25.887]      <block atomic="false" info="">
[16:02:25.887]        WriteAP(0x00, 0x190008);
[16:02:25.897]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:02:25.897]        WriteAP(0xF0, 0x01);
[16:02:25.907]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:02:25.907]      </block>
[16:02:25.907]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:02:25.907]    </control>
[16:02:25.907]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:02:25.907]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:02:25.907]        // =>  FALSE
[16:02:25.907]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:02:25.907]    </control>
[16:02:25.907]    <block atomic="false" info="">
[16:02:25.907]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:02:25.917]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:02:25.917]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:02:25.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:02:25.927]      __ap = 0; //lets make sure we reset the access point selection
[16:02:25.927]        // -> [__ap <= 0x00000000]
[16:02:25.927]    </block>
[16:02:25.927]  </sequence>
[16:02:25.927]  
[16:02:25.977]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:02:25.977]  
[16:02:25.987]  <debugvars>
[16:02:25.987]    // Pre-defined
[16:02:25.987]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:02:25.987]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:02:25.987]    __dp=0x00000000
[16:02:25.987]    __ap=0x00000000
[16:02:25.987]    __traceout=0x00000000      (Trace Disabled)
[16:02:25.987]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:02:25.987]    __FlashAddr=0x00000000
[16:02:25.987]    __FlashLen=0x00000000
[16:02:25.987]    __FlashArg=0x00000000
[16:02:25.987]    __FlashOp=0x00000000
[16:02:25.987]    __Result=0x00000000
[16:02:25.987]  </debugvars>
[16:02:25.987]  
[16:02:25.987]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:02:25.987]    <block atomic="false" info="">
[16:02:25.987]      __var deviceID = 0;
[16:02:25.987]        // -> [deviceID <= 0x00000000]
[16:02:25.987]      __var version = 0;
[16:02:25.987]        // -> [version <= 0x00000000]
[16:02:25.987]      __var partNum = 0;
[16:02:25.987]        // -> [partNum <= 0x00000000]
[16:02:25.987]      __var manuf = 0;
[16:02:25.987]        // -> [manuf <= 0x00000000]
[16:02:25.987]      __var isMSPM0G1X0X_G3X0X = 0;
[16:02:25.987]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:02:25.987]      __var isProduction = 0;
[16:02:25.987]        // -> [isProduction <= 0x00000000]
[16:02:25.987]      __var continueId = 0;
[16:02:25.987]        // -> [continueId <= 0x00000000]
[16:02:25.987]      deviceID =   Read32(0x41C40004);
[16:02:25.997]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:02:25.997]        // -> [deviceID <= 0x2BB8802F]
[16:02:25.997]      version = deviceID >> 28;
[16:02:25.997]        // -> [version <= 0x00000002]
[16:02:25.997]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:02:25.997]        // -> [partNum <= 0x0000BB88]
[16:02:25.997]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:02:25.997]        // -> [manuf <= 0x00000017]
[16:02:25.997]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:02:25.997]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:02:25.997]      isProduction = (version > 0);
[16:02:25.997]        // -> [isProduction <= 0x00000001]
[16:02:25.997]    </block>
[16:02:25.997]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:02:25.997]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:02:25.997]        // =>  FALSE
[16:02:25.997]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:02:25.997]    </control>
[16:02:26.007]    <control if="continueId == 4" while="" timeout="0" info="">
[16:02:26.007]      // if-block "continueId == 4"
[16:02:26.007]        // =>  FALSE
[16:02:26.008]      // skip if-block "continueId == 4"
[16:02:26.008]    </control>
[16:02:26.008]    <control if="!isProduction" while="" timeout="0" info="">
[16:02:26.008]      // if-block "!isProduction"
[16:02:26.008]        // =>  FALSE
[16:02:26.008]      // skip if-block "!isProduction"
[16:02:26.008]    </control>
[16:02:26.008]  </sequence>
[16:02:26.008]  
[16:05:01.685]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:01.685]  
[16:05:01.691]  <debugvars>
[16:05:01.691]    // Pre-defined
[16:05:01.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:01.691]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:01.691]    __dp=0x00000000
[16:05:01.691]    __ap=0x00000000
[16:05:01.691]    __traceout=0x00000000      (Trace Disabled)
[16:05:01.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:01.691]    __FlashAddr=0x00000000
[16:05:01.691]    __FlashLen=0x00000000
[16:05:01.691]    __FlashArg=0x00000000
[16:05:01.691]    __FlashOp=0x00000000
[16:05:01.691]    __Result=0x00000000
[16:05:01.691]  </debugvars>
[16:05:01.691]  
[16:05:01.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:01.691]    <block atomic="false" info="">
[16:05:01.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:01.691]        // -> [isSWJ <= 0x00000001]
[16:05:01.691]      __var hasDormant = __protocol & 0x00020000;
[16:05:01.691]        // -> [hasDormant <= 0x00000000]
[16:05:01.691]      __var protType   = __protocol & 0x0000FFFF;
[16:05:01.691]        // -> [protType <= 0x00000002]
[16:05:01.695]    </block>
[16:05:01.695]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:01.695]      // if-block "protType == 1"
[16:05:01.695]        // =>  FALSE
[16:05:01.695]      // skip if-block "protType == 1"
[16:05:01.695]    </control>
[16:05:01.695]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:01.695]      // if-block "protType == 2"
[16:05:01.695]        // =>  TRUE
[16:05:01.695]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:01.695]        // if-block "isSWJ"
[16:05:01.695]          // =>  TRUE
[16:05:01.695]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:01.695]          // if-block "hasDormant"
[16:05:01.695]            // =>  FALSE
[16:05:01.695]          // skip if-block "hasDormant"
[16:05:01.695]        </control>
[16:05:01.695]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:01.695]          // if-block "!hasDormant"
[16:05:01.695]            // =>  TRUE
[16:05:01.695]          <block atomic="false" info="">
[16:05:01.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:01.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.695]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:01.705]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:01.705]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:01.705]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.705]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:01.715]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:01.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:01.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.715]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:01.715]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:01.715]          </block>
[16:05:01.715]          // end if-block "!hasDormant"
[16:05:01.715]        </control>
[16:05:01.715]        // end if-block "isSWJ"
[16:05:01.715]      </control>
[16:05:01.715]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:01.715]        // if-block "!isSWJ"
[16:05:01.715]          // =>  FALSE
[16:05:01.715]        // skip if-block "!isSWJ"
[16:05:01.715]      </control>
[16:05:01.715]      <block atomic="false" info="">
[16:05:01.715]        ReadDP(0x0);
[16:05:01.725]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:01.725]      </block>
[16:05:01.725]      // end if-block "protType == 2"
[16:05:01.725]    </control>
[16:05:01.725]  </sequence>
[16:05:01.725]  
[16:05:01.735]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:05:01.735]  
[16:05:01.735]  <debugvars>
[16:05:01.735]    // Pre-defined
[16:05:01.735]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:01.735]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:01.735]    __dp=0x00000000
[16:05:01.735]    __ap=0x00000000
[16:05:01.735]    __traceout=0x00000000      (Trace Disabled)
[16:05:01.735]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:01.735]    __FlashAddr=0x00000000
[16:05:01.735]    __FlashLen=0x00000000
[16:05:01.735]    __FlashArg=0x00000000
[16:05:01.735]    __FlashOp=0x00000000
[16:05:01.735]    __Result=0x00000000
[16:05:01.735]  </debugvars>
[16:05:01.735]  
[16:05:01.735]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:05:01.735]    <block atomic="false" info="">
[16:05:01.735]      __var SW_DP_ABORT       = 0x0;
[16:05:01.735]        // -> [SW_DP_ABORT <= 0x00000000]
[16:05:01.735]      __var DP_CTRL_STAT      = 0x4;
[16:05:01.735]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:05:01.735]      __var DP_SELECT         = 0x8;
[16:05:01.735]        // -> [DP_SELECT <= 0x00000008]
[16:05:01.735]      __var powered_down      = 0;
[16:05:01.735]        // -> [powered_down <= 0x00000000]
[16:05:01.735]      WriteDP(DP_SELECT, 0x00000000);
[16:05:01.735]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:05:01.735]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:05:01.745]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:05:01.745]        // -> [powered_down <= 0x00000001]
[16:05:01.745]    </block>
[16:05:01.745]    <control if="powered_down" while="" timeout="0" info="">
[16:05:01.745]      // if-block "powered_down"
[16:05:01.745]        // =>  TRUE
[16:05:01.745]      <block atomic="false" info="">
[16:05:01.745]        Message(0, "Debug/System power-up request sent");
[16:05:01.755]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:05:01.755]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:05:01.755]      </block>
[16:05:01.755]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:05:01.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:05:01.755]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:05:01.755]        // while-condition  =>  FALSE
[16:05:01.755]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:05:01.755]      </control>
[16:05:01.755]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:05:01.755]        // if-block "(__protocol & 0xFFFF) == 1"
[16:05:01.765]          // =>  FALSE
[16:05:01.765]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:05:01.765]      </control>
[16:05:01.765]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:05:01.765]        // if-block "(__protocol & 0xFFFF) == 2"
[16:05:01.765]          // =>  TRUE
[16:05:01.765]        <block atomic="false" info="">
[16:05:01.765]          Message(0, "executing SWD power up");
[16:05:01.765]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:05:01.775]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:05:01.775]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:05:01.775]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:05:01.775]        </block>
[16:05:01.775]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:05:01.775]      </control>
[16:05:01.775]      // end if-block "powered_down"
[16:05:01.775]    </control>
[16:05:01.775]    <block atomic="false" info="">
[16:05:01.775]      __var DEBUG_PORT_VAL    = 0;
[16:05:01.775]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:05:01.775]      __var ACCESS_POINT_VAL  = 0;
[16:05:01.775]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:05:01.775]      __ap = 1; 
[16:05:01.785]        // -> [__ap <= 0x00000001]
[16:05:01.785]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:05:01.785]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:05:01.785]      __ap = 4;
[16:05:01.785]        // -> [__ap <= 0x00000004]
[16:05:01.785]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:01.795]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:05:01.795]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:05:01.795]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:01.795]    </block>
[16:05:01.795]    <block atomic="false" info="">
[16:05:01.795]      __var nReset = 0x80;
[16:05:01.795]        // -> [nReset <= 0x00000080]
[16:05:01.805]      __var canReadPins = 0;
[16:05:01.805]        // -> [canReadPins <= 0x00000000]
[16:05:01.805]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:05:01.805]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:05:01.805]        // -> [canReadPins <= 0x00000001]
[16:05:01.805]    </block>
[16:05:01.805]    <control if="" while="1" timeout="200" info="">
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.805]      // while-condition  =>  TRUE
[16:05:01.805]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.815]      // while-condition  =>  TRUE
[16:05:01.815]      // while "1"  (timeout="200")
[16:05:01.825]      // while-condition  =>  TRUE
[16:05:01.825]      // while "1"  (timeout="200")
[16:05:01.825]      // while  =>  TIMEOUT
[16:05:01.825]      // end while "1"
[16:05:01.825]    </control>
[16:05:01.825]    <control if="canReadPins" while="" timeout="0" info="">
[16:05:01.825]      // if-block "canReadPins"
[16:05:01.825]        // =>  TRUE
[16:05:01.825]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:05:01.825]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:05:01.825]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:05:01.825]        // while-condition  =>  FALSE
[16:05:01.825]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:05:01.825]      </control>
[16:05:01.825]      // end if-block "canReadPins"
[16:05:01.825]    </control>
[16:05:01.825]    <control if="!canReadPins" while="" timeout="0" info="">
[16:05:01.825]      // if-block "!canReadPins"
[16:05:01.825]        // =>  FALSE
[16:05:01.825]      // skip if-block "!canReadPins"
[16:05:01.825]    </control>
[16:05:01.825]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:05:01.825]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:01.825]        // =>  TRUE
[16:05:01.825]      <block atomic="false" info="">
[16:05:01.825]        WriteAP(0x00, 0x190008);
[16:05:01.835]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:01.835]        WriteAP(0xF0, 0x01);
[16:05:01.845]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:01.845]      </block>
[16:05:01.845]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:01.845]    </control>
[16:05:01.845]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:05:01.845]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:01.845]        // =>  FALSE
[16:05:01.845]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:01.845]    </control>
[16:05:01.845]    <block atomic="false" info="">
[16:05:01.845]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:01.855]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:01.855]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:05:01.855]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:01.855]      __ap = 0; //lets make sure we reset the access point selection
[16:05:01.855]        // -> [__ap <= 0x00000000]
[16:05:01.855]    </block>
[16:05:01.855]  </sequence>
[16:05:01.855]  
[16:05:01.914]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:05:01.914]  
[16:05:01.915]  <debugvars>
[16:05:01.915]    // Pre-defined
[16:05:01.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:01.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:01.915]    __dp=0x00000000
[16:05:01.916]    __ap=0x00000000
[16:05:01.916]    __traceout=0x00000000      (Trace Disabled)
[16:05:01.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:01.916]    __FlashAddr=0x00000000
[16:05:01.916]    __FlashLen=0x00000000
[16:05:01.917]    __FlashArg=0x00000000
[16:05:01.917]    __FlashOp=0x00000000
[16:05:01.917]    __Result=0x00000000
[16:05:01.917]  </debugvars>
[16:05:01.918]  
[16:05:01.918]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:05:01.918]    <block atomic="false" info="">
[16:05:01.918]      __var deviceID = 0;
[16:05:01.918]        // -> [deviceID <= 0x00000000]
[16:05:01.918]      __var version = 0;
[16:05:01.919]        // -> [version <= 0x00000000]
[16:05:01.919]      __var partNum = 0;
[16:05:01.919]        // -> [partNum <= 0x00000000]
[16:05:01.919]      __var manuf = 0;
[16:05:01.919]        // -> [manuf <= 0x00000000]
[16:05:01.920]      __var isMSPM0G1X0X_G3X0X = 0;
[16:05:01.920]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:05:01.920]      __var isProduction = 0;
[16:05:01.920]        // -> [isProduction <= 0x00000000]
[16:05:01.921]      __var continueId = 0;
[16:05:01.921]        // -> [continueId <= 0x00000000]
[16:05:01.922]      deviceID =   Read32(0x41C40004);
[16:05:01.932]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:05:01.932]        // -> [deviceID <= 0x2BB8802F]
[16:05:01.932]      version = deviceID >> 28;
[16:05:01.933]        // -> [version <= 0x00000002]
[16:05:01.933]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:05:01.934]        // -> [partNum <= 0x0000BB88]
[16:05:01.934]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:05:01.934]        // -> [manuf <= 0x00000017]
[16:05:01.934]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:05:01.935]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:05:01.935]      isProduction = (version > 0);
[16:05:01.935]        // -> [isProduction <= 0x00000001]
[16:05:01.935]    </block>
[16:05:01.936]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:05:01.936]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:05:01.936]        // =>  FALSE
[16:05:01.936]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:05:01.937]    </control>
[16:05:01.937]    <control if="continueId == 4" while="" timeout="0" info="">
[16:05:01.937]      // if-block "continueId == 4"
[16:05:01.937]        // =>  FALSE
[16:05:01.937]      // skip if-block "continueId == 4"
[16:05:01.938]    </control>
[16:05:01.938]    <control if="!isProduction" while="" timeout="0" info="">
[16:05:01.939]      // if-block "!isProduction"
[16:05:01.939]        // =>  FALSE
[16:05:01.939]      // skip if-block "!isProduction"
[16:05:01.939]    </control>
[16:05:01.939]  </sequence>
[16:05:01.940]  
[16:05:34.926]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:34.926]  
[16:05:34.937]  <debugvars>
[16:05:34.937]    // Pre-defined
[16:05:34.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:34.937]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:34.937]    __dp=0x00000000
[16:05:34.937]    __ap=0x00000000
[16:05:34.937]    __traceout=0x00000000      (Trace Disabled)
[16:05:34.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:34.937]    __FlashAddr=0x00000000
[16:05:34.937]    __FlashLen=0x00000000
[16:05:34.937]    __FlashArg=0x00000000
[16:05:34.937]    __FlashOp=0x00000000
[16:05:34.937]    __Result=0x00000000
[16:05:34.937]  </debugvars>
[16:05:34.937]  
[16:05:34.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:34.937]    <block atomic="false" info="">
[16:05:34.937]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:34.937]        // -> [isSWJ <= 0x00000001]
[16:05:34.937]      __var hasDormant = __protocol & 0x00020000;
[16:05:34.937]        // -> [hasDormant <= 0x00000000]
[16:05:34.937]      __var protType   = __protocol & 0x0000FFFF;
[16:05:34.937]        // -> [protType <= 0x00000002]
[16:05:34.937]    </block>
[16:05:34.937]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:34.937]      // if-block "protType == 1"
[16:05:34.937]        // =>  FALSE
[16:05:34.937]      // skip if-block "protType == 1"
[16:05:34.937]    </control>
[16:05:34.937]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:34.937]      // if-block "protType == 2"
[16:05:34.937]        // =>  TRUE
[16:05:34.937]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:34.937]        // if-block "isSWJ"
[16:05:34.937]          // =>  TRUE
[16:05:34.937]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:34.937]          // if-block "hasDormant"
[16:05:34.937]            // =>  FALSE
[16:05:34.937]          // skip if-block "hasDormant"
[16:05:34.937]        </control>
[16:05:34.937]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:34.937]          // if-block "!hasDormant"
[16:05:34.937]            // =>  TRUE
[16:05:34.937]          <block atomic="false" info="">
[16:05:34.937]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:34.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:34.947]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:34.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:34.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:34.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:34.957]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:34.957]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:34.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:34.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:34.967]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:34.967]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:34.967]          </block>
[16:05:34.967]          // end if-block "!hasDormant"
[16:05:34.967]        </control>
[16:05:34.967]        // end if-block "isSWJ"
[16:05:34.967]      </control>
[16:05:34.967]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:34.967]        // if-block "!isSWJ"
[16:05:34.967]          // =>  FALSE
[16:05:34.967]        // skip if-block "!isSWJ"
[16:05:34.967]      </control>
[16:05:34.967]      <block atomic="false" info="">
[16:05:34.967]        ReadDP(0x0);
[16:05:34.972]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:34.972]      </block>
[16:05:34.972]      // end if-block "protType == 2"
[16:05:34.972]    </control>
[16:05:34.972]  </sequence>
[16:05:34.972]  
[16:05:34.977]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:05:34.977]  
[16:05:34.977]  <debugvars>
[16:05:34.977]    // Pre-defined
[16:05:34.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:34.977]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:34.977]    __dp=0x00000000
[16:05:34.977]    __ap=0x00000000
[16:05:34.977]    __traceout=0x00000000      (Trace Disabled)
[16:05:34.977]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:34.977]    __FlashAddr=0x00000000
[16:05:34.977]    __FlashLen=0x00000000
[16:05:34.977]    __FlashArg=0x00000000
[16:05:34.977]    __FlashOp=0x00000000
[16:05:34.977]    __Result=0x00000000
[16:05:34.977]  </debugvars>
[16:05:34.977]  
[16:05:34.977]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:05:34.977]    <block atomic="false" info="">
[16:05:34.977]      __var SW_DP_ABORT       = 0x0;
[16:05:34.977]        // -> [SW_DP_ABORT <= 0x00000000]
[16:05:34.977]      __var DP_CTRL_STAT      = 0x4;
[16:05:34.977]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:05:34.977]      __var DP_SELECT         = 0x8;
[16:05:34.977]        // -> [DP_SELECT <= 0x00000008]
[16:05:34.977]      __var powered_down      = 0;
[16:05:34.977]        // -> [powered_down <= 0x00000000]
[16:05:34.977]      WriteDP(DP_SELECT, 0x00000000);
[16:05:34.987]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:05:34.987]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:05:34.987]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:05:34.987]        // -> [powered_down <= 0x00000001]
[16:05:34.987]    </block>
[16:05:34.987]    <control if="powered_down" while="" timeout="0" info="">
[16:05:34.987]      // if-block "powered_down"
[16:05:34.987]        // =>  TRUE
[16:05:34.987]      <block atomic="false" info="">
[16:05:34.987]        Message(0, "Debug/System power-up request sent");
[16:05:34.987]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:05:34.997]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:05:34.997]      </block>
[16:05:34.997]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:05:34.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:05:34.997]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:05:34.997]        // while-condition  =>  FALSE
[16:05:34.997]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:05:34.997]      </control>
[16:05:34.997]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:05:34.997]        // if-block "(__protocol & 0xFFFF) == 1"
[16:05:35.007]          // =>  FALSE
[16:05:35.007]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:05:35.007]      </control>
[16:05:35.007]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:05:35.007]        // if-block "(__protocol & 0xFFFF) == 2"
[16:05:35.007]          // =>  TRUE
[16:05:35.007]        <block atomic="false" info="">
[16:05:35.007]          Message(0, "executing SWD power up");
[16:05:35.007]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:05:35.017]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:05:35.017]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:05:35.017]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:05:35.017]        </block>
[16:05:35.017]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:05:35.017]      </control>
[16:05:35.017]      // end if-block "powered_down"
[16:05:35.017]    </control>
[16:05:35.017]    <block atomic="false" info="">
[16:05:35.017]      __var DEBUG_PORT_VAL    = 0;
[16:05:35.017]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:05:35.017]      __var ACCESS_POINT_VAL  = 0;
[16:05:35.017]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:05:35.017]      __ap = 1; 
[16:05:35.017]        // -> [__ap <= 0x00000001]
[16:05:35.017]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:05:35.027]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:05:35.027]      __ap = 4;
[16:05:35.027]        // -> [__ap <= 0x00000004]
[16:05:35.027]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:35.037]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:05:35.037]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:05:35.037]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:35.037]    </block>
[16:05:35.037]    <block atomic="false" info="">
[16:05:35.037]      __var nReset = 0x80;
[16:05:35.037]        // -> [nReset <= 0x00000080]
[16:05:35.037]      __var canReadPins = 0;
[16:05:35.037]        // -> [canReadPins <= 0x00000000]
[16:05:35.037]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:05:35.037]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:05:35.037]        // -> [canReadPins <= 0x00000001]
[16:05:35.037]    </block>
[16:05:35.037]    <control if="" while="1" timeout="200" info="">
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.037]      // while-condition  =>  TRUE
[16:05:35.037]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.047]      // while-condition  =>  TRUE
[16:05:35.047]      // while "1"  (timeout="200")
[16:05:35.057]      // while-condition  =>  TRUE
[16:05:35.057]      // while "1"  (timeout="200")
[16:05:35.057]      // while  =>  TIMEOUT
[16:05:35.057]      // end while "1"
[16:05:35.057]    </control>
[16:05:35.057]    <control if="canReadPins" while="" timeout="0" info="">
[16:05:35.057]      // if-block "canReadPins"
[16:05:35.057]        // =>  TRUE
[16:05:35.057]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:05:35.057]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:05:35.057]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:05:35.057]        // while-condition  =>  FALSE
[16:05:35.057]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:05:35.057]      </control>
[16:05:35.057]      // end if-block "canReadPins"
[16:05:35.057]    </control>
[16:05:35.057]    <control if="!canReadPins" while="" timeout="0" info="">
[16:05:35.057]      // if-block "!canReadPins"
[16:05:35.057]        // =>  FALSE
[16:05:35.057]      // skip if-block "!canReadPins"
[16:05:35.057]    </control>
[16:05:35.057]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:05:35.057]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:35.057]        // =>  TRUE
[16:05:35.057]      <block atomic="false" info="">
[16:05:35.057]        WriteAP(0x00, 0x190008);
[16:05:35.067]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:35.067]        WriteAP(0xF0, 0x01);
[16:05:35.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:35.072]      </block>
[16:05:35.072]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:35.072]    </control>
[16:05:35.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:05:35.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:35.072]        // =>  FALSE
[16:05:35.072]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:35.072]    </control>
[16:05:35.072]    <block atomic="false" info="">
[16:05:35.072]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:35.077]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:35.077]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:05:35.077]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:35.077]      __ap = 0; //lets make sure we reset the access point selection
[16:05:35.077]        // -> [__ap <= 0x00000000]
[16:05:35.077]    </block>
[16:05:35.077]  </sequence>
[16:05:35.077]  
[16:05:35.117]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:05:35.117]  
[16:05:35.117]  <debugvars>
[16:05:35.117]    // Pre-defined
[16:05:35.117]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:35.117]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:35.117]    __dp=0x00000000
[16:05:35.117]    __ap=0x00000000
[16:05:35.117]    __traceout=0x00000000      (Trace Disabled)
[16:05:35.117]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:35.117]    __FlashAddr=0x00000000
[16:05:35.117]    __FlashLen=0x00000000
[16:05:35.117]    __FlashArg=0x00000000
[16:05:35.117]    __FlashOp=0x00000000
[16:05:35.117]    __Result=0x00000000
[16:05:35.117]  </debugvars>
[16:05:35.117]  
[16:05:35.117]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:05:35.117]    <block atomic="false" info="">
[16:05:35.117]      __var deviceID = 0;
[16:05:35.117]        // -> [deviceID <= 0x00000000]
[16:05:35.127]      __var version = 0;
[16:05:35.127]        // -> [version <= 0x00000000]
[16:05:35.127]      __var partNum = 0;
[16:05:35.127]        // -> [partNum <= 0x00000000]
[16:05:35.127]      __var manuf = 0;
[16:05:35.127]        // -> [manuf <= 0x00000000]
[16:05:35.127]      __var isMSPM0G1X0X_G3X0X = 0;
[16:05:35.127]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:05:35.127]      __var isProduction = 0;
[16:05:35.127]        // -> [isProduction <= 0x00000000]
[16:05:35.127]      __var continueId = 0;
[16:05:35.127]        // -> [continueId <= 0x00000000]
[16:05:35.127]      deviceID =   Read32(0x41C40004);
[16:05:35.137]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:05:35.137]        // -> [deviceID <= 0x2BB8802F]
[16:05:35.137]      version = deviceID >> 28;
[16:05:35.137]        // -> [version <= 0x00000002]
[16:05:35.137]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:05:35.137]        // -> [partNum <= 0x0000BB88]
[16:05:35.137]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:05:35.137]        // -> [manuf <= 0x00000017]
[16:05:35.137]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:05:35.137]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:05:35.137]      isProduction = (version > 0);
[16:05:35.137]        // -> [isProduction <= 0x00000001]
[16:05:35.137]    </block>
[16:05:35.137]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:05:35.137]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:05:35.137]        // =>  FALSE
[16:05:35.137]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:05:35.137]    </control>
[16:05:35.137]    <control if="continueId == 4" while="" timeout="0" info="">
[16:05:35.137]      // if-block "continueId == 4"
[16:05:35.137]        // =>  FALSE
[16:05:35.137]      // skip if-block "continueId == 4"
[16:05:35.137]    </control>
[16:05:35.137]    <control if="!isProduction" while="" timeout="0" info="">
[16:05:35.137]      // if-block "!isProduction"
[16:05:35.137]        // =>  FALSE
[16:05:35.137]      // skip if-block "!isProduction"
[16:05:35.137]    </control>
[16:05:35.137]  </sequence>
[16:05:35.137]  
[16:06:49.128]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:06:49.128]  
[16:06:49.136]  <debugvars>
[16:06:49.136]    // Pre-defined
[16:06:49.136]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:49.136]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:49.136]    __dp=0x00000000
[16:06:49.136]    __ap=0x00000000
[16:06:49.136]    __traceout=0x00000000      (Trace Disabled)
[16:06:49.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:49.136]    __FlashAddr=0x00000000
[16:06:49.136]    __FlashLen=0x00000000
[16:06:49.138]    __FlashArg=0x00000000
[16:06:49.138]    __FlashOp=0x00000000
[16:06:49.138]    __Result=0x00000000
[16:06:49.138]  </debugvars>
[16:06:49.138]  
[16:06:49.138]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:06:49.138]    <block atomic="false" info="">
[16:06:49.138]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:06:49.138]        // -> [isSWJ <= 0x00000001]
[16:06:49.138]      __var hasDormant = __protocol & 0x00020000;
[16:06:49.138]        // -> [hasDormant <= 0x00000000]
[16:06:49.138]      __var protType   = __protocol & 0x0000FFFF;
[16:06:49.138]        // -> [protType <= 0x00000002]
[16:06:49.138]    </block>
[16:06:49.138]    <control if="protType == 1" while="" timeout="0" info="">
[16:06:49.138]      // if-block "protType == 1"
[16:06:49.138]        // =>  FALSE
[16:06:49.138]      // skip if-block "protType == 1"
[16:06:49.138]    </control>
[16:06:49.138]    <control if="protType == 2" while="" timeout="0" info="">
[16:06:49.138]      // if-block "protType == 2"
[16:06:49.138]        // =>  TRUE
[16:06:49.138]      <control if="isSWJ" while="" timeout="0" info="">
[16:06:49.138]        // if-block "isSWJ"
[16:06:49.138]          // =>  TRUE
[16:06:49.138]        <control if="hasDormant" while="" timeout="0" info="">
[16:06:49.138]          // if-block "hasDormant"
[16:06:49.138]            // =>  FALSE
[16:06:49.138]          // skip if-block "hasDormant"
[16:06:49.138]        </control>
[16:06:49.138]        <control if="!hasDormant" while="" timeout="0" info="">
[16:06:49.138]          // if-block "!hasDormant"
[16:06:49.138]            // =>  TRUE
[16:06:49.138]          <block atomic="false" info="">
[16:06:49.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:06:49.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:49.148]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:06:49.148]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:06:49.148]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:06:49.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:49.148]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:06:49.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:06:49.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:06:49.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:49.158]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:06:49.168]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:06:49.168]          </block>
[16:06:49.168]          // end if-block "!hasDormant"
[16:06:49.168]        </control>
[16:06:49.168]        // end if-block "isSWJ"
[16:06:49.168]      </control>
[16:06:49.168]      <control if="!isSWJ" while="" timeout="0" info="">
[16:06:49.168]        // if-block "!isSWJ"
[16:06:49.168]          // =>  FALSE
[16:06:49.168]        // skip if-block "!isSWJ"
[16:06:49.168]      </control>
[16:06:49.168]      <block atomic="false" info="">
[16:06:49.168]        ReadDP(0x0);
[16:06:49.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:06:49.168]      </block>
[16:06:49.168]      // end if-block "protType == 2"
[16:06:49.168]    </control>
[16:06:49.168]  </sequence>
[16:06:49.168]  
[16:06:49.188]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:06:49.188]  
[16:06:49.188]  <debugvars>
[16:06:49.191]    // Pre-defined
[16:06:49.191]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:49.191]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:49.191]    __dp=0x00000000
[16:06:49.192]    __ap=0x00000000
[16:06:49.192]    __traceout=0x00000000      (Trace Disabled)
[16:06:49.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:49.192]    __FlashAddr=0x00000000
[16:06:49.192]    __FlashLen=0x00000000
[16:06:49.193]    __FlashArg=0x00000000
[16:06:49.193]    __FlashOp=0x00000000
[16:06:49.193]    __Result=0x00000000
[16:06:49.193]  </debugvars>
[16:06:49.193]  
[16:06:49.194]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:06:49.194]    <block atomic="false" info="">
[16:06:49.194]      __var SW_DP_ABORT       = 0x0;
[16:06:49.194]        // -> [SW_DP_ABORT <= 0x00000000]
[16:06:49.194]      __var DP_CTRL_STAT      = 0x4;
[16:06:49.195]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:06:49.195]      __var DP_SELECT         = 0x8;
[16:06:49.196]        // -> [DP_SELECT <= 0x00000008]
[16:06:49.196]      __var powered_down      = 0;
[16:06:49.196]        // -> [powered_down <= 0x00000000]
[16:06:49.196]      WriteDP(DP_SELECT, 0x00000000);
[16:06:49.202]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:06:49.202]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:06:49.205]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:06:49.206]        // -> [powered_down <= 0x00000001]
[16:06:49.206]    </block>
[16:06:49.206]    <control if="powered_down" while="" timeout="0" info="">
[16:06:49.206]      // if-block "powered_down"
[16:06:49.207]        // =>  TRUE
[16:06:49.207]      <block atomic="false" info="">
[16:06:49.207]        Message(0, "Debug/System power-up request sent");
[16:06:49.209]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:06:49.214]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:06:49.215]      </block>
[16:06:49.215]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:06:49.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:06:49.218]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:06:49.219]        // while-condition  =>  FALSE
[16:06:49.219]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:06:49.219]      </control>
[16:06:49.219]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:06:49.220]        // if-block "(__protocol & 0xFFFF) == 1"
[16:06:49.220]          // =>  FALSE
[16:06:49.220]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:06:49.220]      </control>
[16:06:49.220]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:06:49.221]        // if-block "(__protocol & 0xFFFF) == 2"
[16:06:49.221]          // =>  TRUE
[16:06:49.221]        <block atomic="false" info="">
[16:06:49.221]          Message(0, "executing SWD power up");
[16:06:49.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:06:49.227]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:06:49.227]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:06:49.231]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:06:49.232]        </block>
[16:06:49.232]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:06:49.232]      </control>
[16:06:49.232]      // end if-block "powered_down"
[16:06:49.232]    </control>
[16:06:49.232]    <block atomic="false" info="">
[16:06:49.233]      __var DEBUG_PORT_VAL    = 0;
[16:06:49.233]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:06:49.233]      __var ACCESS_POINT_VAL  = 0;
[16:06:49.233]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:06:49.233]      __ap = 1; 
[16:06:49.234]        // -> [__ap <= 0x00000001]
[16:06:49.234]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:06:49.241]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:06:49.241]      __ap = 4;
[16:06:49.242]        // -> [__ap <= 0x00000004]
[16:06:49.242]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:49.248]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:06:49.248]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:06:49.248]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:49.248]    </block>
[16:06:49.248]    <block atomic="false" info="">
[16:06:49.248]      __var nReset = 0x80;
[16:06:49.248]        // -> [nReset <= 0x00000080]
[16:06:49.248]      __var canReadPins = 0;
[16:06:49.248]        // -> [canReadPins <= 0x00000000]
[16:06:49.248]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:06:49.248]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:06:49.248]        // -> [canReadPins <= 0x00000001]
[16:06:49.248]    </block>
[16:06:49.248]    <control if="" while="1" timeout="200" info="">
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.248]      // while-condition  =>  TRUE
[16:06:49.248]      // while "1"  (timeout="200")
[16:06:49.256]      // while-condition  =>  TRUE
[16:06:49.256]      // while "1"  (timeout="200")
[16:06:49.256]      // while  =>  TIMEOUT
[16:06:49.256]      // end while "1"
[16:06:49.256]    </control>
[16:06:49.256]    <control if="canReadPins" while="" timeout="0" info="">
[16:06:49.256]      // if-block "canReadPins"
[16:06:49.256]        // =>  TRUE
[16:06:49.256]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:06:49.256]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:06:49.256]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:06:49.256]        // while-condition  =>  FALSE
[16:06:49.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:06:49.256]      </control>
[16:06:49.256]      // end if-block "canReadPins"
[16:06:49.256]    </control>
[16:06:49.256]    <control if="!canReadPins" while="" timeout="0" info="">
[16:06:49.256]      // if-block "!canReadPins"
[16:06:49.256]        // =>  FALSE
[16:06:49.256]      // skip if-block "!canReadPins"
[16:06:49.256]    </control>
[16:06:49.256]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:06:49.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:49.256]        // =>  TRUE
[16:06:49.256]      <block atomic="false" info="">
[16:06:49.256]        WriteAP(0x00, 0x190008);
[16:06:49.266]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:49.266]        WriteAP(0xF0, 0x01);
[16:06:49.266]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:49.266]      </block>
[16:06:49.266]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:49.266]    </control>
[16:06:49.266]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:06:49.266]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:49.266]        // =>  FALSE
[16:06:49.266]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:49.266]    </control>
[16:06:49.266]    <block atomic="false" info="">
[16:06:49.266]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:49.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:06:49.276]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:06:49.276]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:49.276]      __ap = 0; //lets make sure we reset the access point selection
[16:06:49.276]        // -> [__ap <= 0x00000000]
[16:06:49.276]    </block>
[16:06:49.276]  </sequence>
[16:06:49.276]  
[16:06:49.347]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:06:49.347]  
[16:06:49.357]  <debugvars>
[16:06:49.357]    // Pre-defined
[16:06:49.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:49.357]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:49.357]    __dp=0x00000000
[16:06:49.357]    __ap=0x00000000
[16:06:49.357]    __traceout=0x00000000      (Trace Disabled)
[16:06:49.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:49.357]    __FlashAddr=0x00000000
[16:06:49.357]    __FlashLen=0x00000000
[16:06:49.357]    __FlashArg=0x00000000
[16:06:49.357]    __FlashOp=0x00000000
[16:06:49.357]    __Result=0x00000000
[16:06:49.357]  </debugvars>
[16:06:49.357]  
[16:06:49.357]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:06:49.357]    <block atomic="false" info="">
[16:06:49.357]      __var deviceID = 0;
[16:06:49.357]        // -> [deviceID <= 0x00000000]
[16:06:49.357]      __var version = 0;
[16:06:49.357]        // -> [version <= 0x00000000]
[16:06:49.357]      __var partNum = 0;
[16:06:49.357]        // -> [partNum <= 0x00000000]
[16:06:49.357]      __var manuf = 0;
[16:06:49.357]        // -> [manuf <= 0x00000000]
[16:06:49.357]      __var isMSPM0G1X0X_G3X0X = 0;
[16:06:49.357]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:06:49.357]      __var isProduction = 0;
[16:06:49.357]        // -> [isProduction <= 0x00000000]
[16:06:49.357]      __var continueId = 0;
[16:06:49.357]        // -> [continueId <= 0x00000000]
[16:06:49.357]      deviceID =   Read32(0x41C40004);
[16:06:49.367]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:06:49.367]        // -> [deviceID <= 0x2BB8802F]
[16:06:49.367]      version = deviceID >> 28;
[16:06:49.367]        // -> [version <= 0x00000002]
[16:06:49.367]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:06:49.367]        // -> [partNum <= 0x0000BB88]
[16:06:49.367]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:06:49.377]        // -> [manuf <= 0x00000017]
[16:06:49.377]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:06:49.377]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:06:49.377]      isProduction = (version > 0);
[16:06:49.377]        // -> [isProduction <= 0x00000001]
[16:06:49.377]    </block>
[16:06:49.377]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:06:49.377]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:06:49.377]        // =>  FALSE
[16:06:49.377]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:06:49.377]    </control>
[16:06:49.377]    <control if="continueId == 4" while="" timeout="0" info="">
[16:06:49.377]      // if-block "continueId == 4"
[16:06:49.377]        // =>  FALSE
[16:06:49.377]      // skip if-block "continueId == 4"
[16:06:49.377]    </control>
[16:06:49.377]    <control if="!isProduction" while="" timeout="0" info="">
[16:06:49.377]      // if-block "!isProduction"
[16:06:49.377]        // =>  FALSE
[16:06:49.377]      // skip if-block "!isProduction"
[16:06:49.377]    </control>
[16:06:49.377]  </sequence>
[16:06:49.377]  
[16:09:18.663]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:09:18.663]  
[16:09:18.671]  <debugvars>
[16:09:18.671]    // Pre-defined
[16:09:18.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:18.671]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:18.671]    __dp=0x00000000
[16:09:18.671]    __ap=0x00000000
[16:09:18.671]    __traceout=0x00000000      (Trace Disabled)
[16:09:18.671]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:18.671]    __FlashAddr=0x00000000
[16:09:18.673]    __FlashLen=0x00000000
[16:09:18.673]    __FlashArg=0x00000000
[16:09:18.673]    __FlashOp=0x00000000
[16:09:18.673]    __Result=0x00000000
[16:09:18.673]  </debugvars>
[16:09:18.673]  
[16:09:18.673]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:09:18.673]    <block atomic="false" info="">
[16:09:18.673]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:09:18.673]        // -> [isSWJ <= 0x00000001]
[16:09:18.673]      __var hasDormant = __protocol & 0x00020000;
[16:09:18.673]        // -> [hasDormant <= 0x00000000]
[16:09:18.673]      __var protType   = __protocol & 0x0000FFFF;
[16:09:18.673]        // -> [protType <= 0x00000002]
[16:09:18.673]    </block>
[16:09:18.673]    <control if="protType == 1" while="" timeout="0" info="">
[16:09:18.673]      // if-block "protType == 1"
[16:09:18.673]        // =>  FALSE
[16:09:18.673]      // skip if-block "protType == 1"
[16:09:18.673]    </control>
[16:09:18.673]    <control if="protType == 2" while="" timeout="0" info="">
[16:09:18.673]      // if-block "protType == 2"
[16:09:18.673]        // =>  TRUE
[16:09:18.673]      <control if="isSWJ" while="" timeout="0" info="">
[16:09:18.673]        // if-block "isSWJ"
[16:09:18.673]          // =>  TRUE
[16:09:18.673]        <control if="hasDormant" while="" timeout="0" info="">
[16:09:18.673]          // if-block "hasDormant"
[16:09:18.673]            // =>  FALSE
[16:09:18.673]          // skip if-block "hasDormant"
[16:09:18.673]        </control>
[16:09:18.673]        <control if="!hasDormant" while="" timeout="0" info="">
[16:09:18.673]          // if-block "!hasDormant"
[16:09:18.673]            // =>  TRUE
[16:09:18.673]          <block atomic="false" info="">
[16:09:18.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:09:18.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:18.680]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:09:18.683]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:09:18.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:09:18.683]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:18.683]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:09:18.683]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:09:18.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:09:18.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:09:18.693]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:09:18.693]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:09:18.693]          </block>
[16:09:18.693]          // end if-block "!hasDormant"
[16:09:18.693]        </control>
[16:09:18.693]        // end if-block "isSWJ"
[16:09:18.693]      </control>
[16:09:18.693]      <control if="!isSWJ" while="" timeout="0" info="">
[16:09:18.693]        // if-block "!isSWJ"
[16:09:18.693]          // =>  FALSE
[16:09:18.693]        // skip if-block "!isSWJ"
[16:09:18.693]      </control>
[16:09:18.693]      <block atomic="false" info="">
[16:09:18.693]        ReadDP(0x0);
[16:09:18.703]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:09:18.703]      </block>
[16:09:18.703]      // end if-block "protType == 2"
[16:09:18.703]    </control>
[16:09:18.703]  </sequence>
[16:09:18.703]  
[16:09:18.703]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:09:18.703]  
[16:09:18.703]  <debugvars>
[16:09:18.703]    // Pre-defined
[16:09:18.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:18.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:18.703]    __dp=0x00000000
[16:09:18.703]    __ap=0x00000000
[16:09:18.703]    __traceout=0x00000000      (Trace Disabled)
[16:09:18.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:18.713]    __FlashAddr=0x00000000
[16:09:18.713]    __FlashLen=0x00000000
[16:09:18.713]    __FlashArg=0x00000000
[16:09:18.713]    __FlashOp=0x00000000
[16:09:18.713]    __Result=0x00000000
[16:09:18.713]  </debugvars>
[16:09:18.713]  
[16:09:18.713]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:09:18.713]    <block atomic="false" info="">
[16:09:18.713]      __var SW_DP_ABORT       = 0x0;
[16:09:18.713]        // -> [SW_DP_ABORT <= 0x00000000]
[16:09:18.713]      __var DP_CTRL_STAT      = 0x4;
[16:09:18.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:09:18.713]      __var DP_SELECT         = 0x8;
[16:09:18.713]        // -> [DP_SELECT <= 0x00000008]
[16:09:18.713]      __var powered_down      = 0;
[16:09:18.713]        // -> [powered_down <= 0x00000000]
[16:09:18.713]      WriteDP(DP_SELECT, 0x00000000);
[16:09:18.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:09:18.723]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:09:18.723]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:09:18.723]        // -> [powered_down <= 0x00000001]
[16:09:18.723]    </block>
[16:09:18.723]    <control if="powered_down" while="" timeout="0" info="">
[16:09:18.723]      // if-block "powered_down"
[16:09:18.723]        // =>  TRUE
[16:09:18.723]      <block atomic="false" info="">
[16:09:18.723]        Message(0, "Debug/System power-up request sent");
[16:09:18.723]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:09:18.733]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:09:18.733]      </block>
[16:09:18.733]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:09:18.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:09:18.733]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:09:18.733]        // while-condition  =>  FALSE
[16:09:18.733]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:09:18.733]      </control>
[16:09:18.733]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:09:18.733]        // if-block "(__protocol & 0xFFFF) == 1"
[16:09:18.733]          // =>  FALSE
[16:09:18.733]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:09:18.733]      </control>
[16:09:18.733]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:09:18.733]        // if-block "(__protocol & 0xFFFF) == 2"
[16:09:18.733]          // =>  TRUE
[16:09:18.733]        <block atomic="false" info="">
[16:09:18.733]          Message(0, "executing SWD power up");
[16:09:18.733]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:09:18.743]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:09:18.743]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:09:18.743]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:09:18.743]        </block>
[16:09:18.743]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:09:18.743]      </control>
[16:09:18.743]      // end if-block "powered_down"
[16:09:18.743]    </control>
[16:09:18.743]    <block atomic="false" info="">
[16:09:18.743]      __var DEBUG_PORT_VAL    = 0;
[16:09:18.743]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:09:18.743]      __var ACCESS_POINT_VAL  = 0;
[16:09:18.743]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:09:18.743]      __ap = 1; 
[16:09:18.743]        // -> [__ap <= 0x00000001]
[16:09:18.743]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:09:18.763]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:09:18.763]      __ap = 4;
[16:09:18.763]        // -> [__ap <= 0x00000004]
[16:09:18.763]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:09:18.783]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:09:18.783]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:09:18.783]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:09:18.783]    </block>
[16:09:18.783]    <block atomic="false" info="">
[16:09:18.783]      __var nReset = 0x80;
[16:09:18.783]        // -> [nReset <= 0x00000080]
[16:09:18.783]      __var canReadPins = 0;
[16:09:18.783]        // -> [canReadPins <= 0x00000000]
[16:09:18.783]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:09:18.793]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:09:18.793]        // -> [canReadPins <= 0x00000001]
[16:09:18.793]    </block>
[16:09:18.793]    <control if="" while="1" timeout="200" info="">
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.793]      // while "1"  (timeout="200")
[16:09:18.793]      // while-condition  =>  TRUE
[16:09:18.803]      // while "1"  (timeout="200")
[16:09:18.803]      // while  =>  TIMEOUT
[16:09:18.803]      // end while "1"
[16:09:18.803]    </control>
[16:09:18.803]    <control if="canReadPins" while="" timeout="0" info="">
[16:09:18.803]      // if-block "canReadPins"
[16:09:18.803]        // =>  TRUE
[16:09:18.803]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:09:18.803]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:09:18.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:09:18.803]        // while-condition  =>  FALSE
[16:09:18.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:09:18.803]      </control>
[16:09:18.803]      // end if-block "canReadPins"
[16:09:18.803]    </control>
[16:09:18.803]    <control if="!canReadPins" while="" timeout="0" info="">
[16:09:18.803]      // if-block "!canReadPins"
[16:09:18.803]        // =>  FALSE
[16:09:18.803]      // skip if-block "!canReadPins"
[16:09:18.803]    </control>
[16:09:18.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:09:18.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:09:18.803]        // =>  TRUE
[16:09:18.803]      <block atomic="false" info="">
[16:09:18.803]        WriteAP(0x00, 0x190008);
[16:09:18.813]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:09:18.813]        WriteAP(0xF0, 0x01);
[16:09:18.823]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:09:18.823]      </block>
[16:09:18.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:09:18.823]    </control>
[16:09:18.823]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:09:18.823]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:09:18.823]        // =>  FALSE
[16:09:18.823]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:09:18.823]    </control>
[16:09:18.823]    <block atomic="false" info="">
[16:09:18.823]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:09:18.843]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:09:18.843]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:09:18.843]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:09:18.843]      __ap = 0; //lets make sure we reset the access point selection
[16:09:18.843]        // -> [__ap <= 0x00000000]
[16:09:18.843]    </block>
[16:09:18.843]  </sequence>
[16:09:18.843]  
[16:09:18.893]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:09:18.893]  
[16:09:18.893]  <debugvars>
[16:09:18.893]    // Pre-defined
[16:09:18.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:09:18.893]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:09:18.893]    __dp=0x00000000
[16:09:18.893]    __ap=0x00000000
[16:09:18.893]    __traceout=0x00000000      (Trace Disabled)
[16:09:18.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:09:18.893]    __FlashAddr=0x00000000
[16:09:18.893]    __FlashLen=0x00000000
[16:09:18.893]    __FlashArg=0x00000000
[16:09:18.893]    __FlashOp=0x00000000
[16:09:18.893]    __Result=0x00000000
[16:09:18.893]  </debugvars>
[16:09:18.893]  
[16:09:18.893]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:09:18.893]    <block atomic="false" info="">
[16:09:18.893]      __var deviceID = 0;
[16:09:18.893]        // -> [deviceID <= 0x00000000]
[16:09:18.893]      __var version = 0;
[16:09:18.893]        // -> [version <= 0x00000000]
[16:09:18.893]      __var partNum = 0;
[16:09:18.893]        // -> [partNum <= 0x00000000]
[16:09:18.893]      __var manuf = 0;
[16:09:18.893]        // -> [manuf <= 0x00000000]
[16:09:18.893]      __var isMSPM0G1X0X_G3X0X = 0;
[16:09:18.893]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:09:18.893]      __var isProduction = 0;
[16:09:18.893]        // -> [isProduction <= 0x00000000]
[16:09:18.893]      __var continueId = 0;
[16:09:18.893]        // -> [continueId <= 0x00000000]
[16:09:18.893]      deviceID =   Read32(0x41C40004);
[16:09:18.903]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:09:18.903]        // -> [deviceID <= 0x2BB8802F]
[16:09:18.913]      version = deviceID >> 28;
[16:09:18.913]        // -> [version <= 0x00000002]
[16:09:18.913]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:09:18.913]        // -> [partNum <= 0x0000BB88]
[16:09:18.913]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:09:18.913]        // -> [manuf <= 0x00000017]
[16:09:18.913]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:09:18.913]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:09:18.913]      isProduction = (version > 0);
[16:09:18.913]        // -> [isProduction <= 0x00000001]
[16:09:18.913]    </block>
[16:09:18.913]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:09:18.913]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:09:18.913]        // =>  FALSE
[16:09:18.913]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:09:18.913]    </control>
[16:09:18.913]    <control if="continueId == 4" while="" timeout="0" info="">
[16:09:18.913]      // if-block "continueId == 4"
[16:09:18.913]        // =>  FALSE
[16:09:18.913]      // skip if-block "continueId == 4"
[16:09:18.913]    </control>
[16:09:18.913]    <control if="!isProduction" while="" timeout="0" info="">
[16:09:18.913]      // if-block "!isProduction"
[16:09:18.913]        // =>  FALSE
[16:09:18.913]      // skip if-block "!isProduction"
[16:09:18.913]    </control>
[16:09:18.913]  </sequence>
[16:09:18.913]  
[16:10:44.419]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:10:44.419]  
[16:10:44.433]  <debugvars>
[16:10:44.433]    // Pre-defined
[16:10:44.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:44.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:44.433]    __dp=0x00000000
[16:10:44.433]    __ap=0x00000000
[16:10:44.433]    __traceout=0x00000000      (Trace Disabled)
[16:10:44.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:44.433]    __FlashAddr=0x00000000
[16:10:44.433]    __FlashLen=0x00000000
[16:10:44.433]    __FlashArg=0x00000000
[16:10:44.433]    __FlashOp=0x00000000
[16:10:44.433]    __Result=0x00000000
[16:10:44.433]  </debugvars>
[16:10:44.433]  
[16:10:44.433]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:10:44.433]    <block atomic="false" info="">
[16:10:44.433]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:10:44.433]        // -> [isSWJ <= 0x00000001]
[16:10:44.433]      __var hasDormant = __protocol & 0x00020000;
[16:10:44.433]        // -> [hasDormant <= 0x00000000]
[16:10:44.433]      __var protType   = __protocol & 0x0000FFFF;
[16:10:44.433]        // -> [protType <= 0x00000002]
[16:10:44.433]    </block>
[16:10:44.433]    <control if="protType == 1" while="" timeout="0" info="">
[16:10:44.433]      // if-block "protType == 1"
[16:10:44.433]        // =>  FALSE
[16:10:44.433]      // skip if-block "protType == 1"
[16:10:44.433]    </control>
[16:10:44.433]    <control if="protType == 2" while="" timeout="0" info="">
[16:10:44.433]      // if-block "protType == 2"
[16:10:44.433]        // =>  TRUE
[16:10:44.433]      <control if="isSWJ" while="" timeout="0" info="">
[16:10:44.433]        // if-block "isSWJ"
[16:10:44.433]          // =>  TRUE
[16:10:44.433]        <control if="hasDormant" while="" timeout="0" info="">
[16:10:44.433]          // if-block "hasDormant"
[16:10:44.433]            // =>  FALSE
[16:10:44.433]          // skip if-block "hasDormant"
[16:10:44.439]        </control>
[16:10:44.439]        <control if="!hasDormant" while="" timeout="0" info="">
[16:10:44.439]          // if-block "!hasDormant"
[16:10:44.439]            // =>  TRUE
[16:10:44.439]          <block atomic="false" info="">
[16:10:44.439]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:10:44.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:44.443]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:10:44.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:10:44.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:10:44.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:44.449]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:10:44.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:10:44.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:10:44.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:10:44.449]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:10:44.449]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:10:44.459]          </block>
[16:10:44.459]          // end if-block "!hasDormant"
[16:10:44.459]        </control>
[16:10:44.459]        // end if-block "isSWJ"
[16:10:44.459]      </control>
[16:10:44.459]      <control if="!isSWJ" while="" timeout="0" info="">
[16:10:44.459]        // if-block "!isSWJ"
[16:10:44.459]          // =>  FALSE
[16:10:44.459]        // skip if-block "!isSWJ"
[16:10:44.459]      </control>
[16:10:44.459]      <block atomic="false" info="">
[16:10:44.459]        ReadDP(0x0);
[16:10:44.459]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:10:44.459]      </block>
[16:10:44.459]      // end if-block "protType == 2"
[16:10:44.459]    </control>
[16:10:44.459]  </sequence>
[16:10:44.459]  
[16:10:44.479]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:10:44.479]  
[16:10:44.479]  <debugvars>
[16:10:44.479]    // Pre-defined
[16:10:44.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:44.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:44.479]    __dp=0x00000000
[16:10:44.479]    __ap=0x00000000
[16:10:44.479]    __traceout=0x00000000      (Trace Disabled)
[16:10:44.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:44.479]    __FlashAddr=0x00000000
[16:10:44.479]    __FlashLen=0x00000000
[16:10:44.479]    __FlashArg=0x00000000
[16:10:44.479]    __FlashOp=0x00000000
[16:10:44.479]    __Result=0x00000000
[16:10:44.479]  </debugvars>
[16:10:44.479]  
[16:10:44.479]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:10:44.479]    <block atomic="false" info="">
[16:10:44.479]      __var SW_DP_ABORT       = 0x0;
[16:10:44.479]        // -> [SW_DP_ABORT <= 0x00000000]
[16:10:44.479]      __var DP_CTRL_STAT      = 0x4;
[16:10:44.479]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:10:44.479]      __var DP_SELECT         = 0x8;
[16:10:44.479]        // -> [DP_SELECT <= 0x00000008]
[16:10:44.479]      __var powered_down      = 0;
[16:10:44.479]        // -> [powered_down <= 0x00000000]
[16:10:44.479]      WriteDP(DP_SELECT, 0x00000000);
[16:10:44.489]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:10:44.489]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:10:44.489]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:10:44.489]        // -> [powered_down <= 0x00000001]
[16:10:44.489]    </block>
[16:10:44.489]    <control if="powered_down" while="" timeout="0" info="">
[16:10:44.489]      // if-block "powered_down"
[16:10:44.489]        // =>  TRUE
[16:10:44.489]      <block atomic="false" info="">
[16:10:44.489]        Message(0, "Debug/System power-up request sent");
[16:10:44.489]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:10:44.499]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:10:44.499]      </block>
[16:10:44.499]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:10:44.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:10:44.509]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:10:44.509]        // while-condition  =>  FALSE
[16:10:44.509]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:10:44.509]      </control>
[16:10:44.509]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:10:44.509]        // if-block "(__protocol & 0xFFFF) == 1"
[16:10:44.509]          // =>  FALSE
[16:10:44.509]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:10:44.509]      </control>
[16:10:44.509]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:10:44.509]        // if-block "(__protocol & 0xFFFF) == 2"
[16:10:44.509]          // =>  TRUE
[16:10:44.509]        <block atomic="false" info="">
[16:10:44.509]          Message(0, "executing SWD power up");
[16:10:44.509]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:10:44.519]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:10:44.519]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:10:44.519]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:10:44.519]        </block>
[16:10:44.519]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:10:44.519]      </control>
[16:10:44.519]      // end if-block "powered_down"
[16:10:44.519]    </control>
[16:10:44.519]    <block atomic="false" info="">
[16:10:44.519]      __var DEBUG_PORT_VAL    = 0;
[16:10:44.519]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:10:44.519]      __var ACCESS_POINT_VAL  = 0;
[16:10:44.519]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:10:44.519]      __ap = 1; 
[16:10:44.519]        // -> [__ap <= 0x00000001]
[16:10:44.519]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:10:44.529]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:10:44.529]      __ap = 4;
[16:10:44.529]        // -> [__ap <= 0x00000004]
[16:10:44.529]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:10:44.539]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:10:44.539]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:10:44.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:10:44.543]    </block>
[16:10:44.543]    <block atomic="false" info="">
[16:10:44.543]      __var nReset = 0x80;
[16:10:44.543]        // -> [nReset <= 0x00000080]
[16:10:44.543]      __var canReadPins = 0;
[16:10:44.543]        // -> [canReadPins <= 0x00000000]
[16:10:44.543]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:10:44.549]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:10:44.549]        // -> [canReadPins <= 0x00000001]
[16:10:44.549]    </block>
[16:10:44.549]    <control if="" while="1" timeout="200" info="">
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.549]      // while-condition  =>  TRUE
[16:10:44.549]      // while "1"  (timeout="200")
[16:10:44.559]      // while-condition  =>  TRUE
[16:10:44.559]      // while "1"  (timeout="200")
[16:10:44.559]      // while  =>  TIMEOUT
[16:10:44.559]      // end while "1"
[16:10:44.559]    </control>
[16:10:44.559]    <control if="canReadPins" while="" timeout="0" info="">
[16:10:44.559]      // if-block "canReadPins"
[16:10:44.559]        // =>  TRUE
[16:10:44.559]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:10:44.559]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:10:44.562]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:10:44.562]        // while-condition  =>  FALSE
[16:10:44.562]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:10:44.562]      </control>
[16:10:44.562]      // end if-block "canReadPins"
[16:10:44.562]    </control>
[16:10:44.562]    <control if="!canReadPins" while="" timeout="0" info="">
[16:10:44.562]      // if-block "!canReadPins"
[16:10:44.562]        // =>  FALSE
[16:10:44.562]      // skip if-block "!canReadPins"
[16:10:44.562]    </control>
[16:10:44.562]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:10:44.562]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:10:44.562]        // =>  TRUE
[16:10:44.562]      <block atomic="false" info="">
[16:10:44.562]        WriteAP(0x00, 0x190008);
[16:10:44.569]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:10:44.569]        WriteAP(0xF0, 0x01);
[16:10:44.579]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:10:44.579]      </block>
[16:10:44.579]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:10:44.579]    </control>
[16:10:44.579]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:10:44.579]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:10:44.579]        // =>  FALSE
[16:10:44.579]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:10:44.579]    </control>
[16:10:44.579]    <block atomic="false" info="">
[16:10:44.579]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:10:44.589]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:10:44.589]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:10:44.589]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:10:44.595]      __ap = 0; //lets make sure we reset the access point selection
[16:10:44.595]        // -> [__ap <= 0x00000000]
[16:10:44.595]    </block>
[16:10:44.595]  </sequence>
[16:10:44.595]  
[16:10:44.639]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:10:44.639]  
[16:10:44.643]  <debugvars>
[16:10:44.643]    // Pre-defined
[16:10:44.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:10:44.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:10:44.643]    __dp=0x00000000
[16:10:44.643]    __ap=0x00000000
[16:10:44.643]    __traceout=0x00000000      (Trace Disabled)
[16:10:44.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:10:44.643]    __FlashAddr=0x00000000
[16:10:44.643]    __FlashLen=0x00000000
[16:10:44.643]    __FlashArg=0x00000000
[16:10:44.643]    __FlashOp=0x00000000
[16:10:44.643]    __Result=0x00000000
[16:10:44.643]  </debugvars>
[16:10:44.643]  
[16:10:44.643]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:10:44.643]    <block atomic="false" info="">
[16:10:44.643]      __var deviceID = 0;
[16:10:44.643]        // -> [deviceID <= 0x00000000]
[16:10:44.643]      __var version = 0;
[16:10:44.643]        // -> [version <= 0x00000000]
[16:10:44.643]      __var partNum = 0;
[16:10:44.643]        // -> [partNum <= 0x00000000]
[16:10:44.643]      __var manuf = 0;
[16:10:44.643]        // -> [manuf <= 0x00000000]
[16:10:44.643]      __var isMSPM0G1X0X_G3X0X = 0;
[16:10:44.643]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:10:44.643]      __var isProduction = 0;
[16:10:44.643]        // -> [isProduction <= 0x00000000]
[16:10:44.643]      __var continueId = 0;
[16:10:44.643]        // -> [continueId <= 0x00000000]
[16:10:44.643]      deviceID =   Read32(0x41C40004);
[16:10:44.659]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:10:44.659]        // -> [deviceID <= 0x2BB8802F]
[16:10:44.659]      version = deviceID >> 28;
[16:10:44.659]        // -> [version <= 0x00000002]
[16:10:44.659]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:10:44.659]        // -> [partNum <= 0x0000BB88]
[16:10:44.659]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:10:44.659]        // -> [manuf <= 0x00000017]
[16:10:44.659]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:10:44.659]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:10:44.659]      isProduction = (version > 0);
[16:10:44.659]        // -> [isProduction <= 0x00000001]
[16:10:44.659]    </block>
[16:10:44.659]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:10:44.659]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:10:44.659]        // =>  FALSE
[16:10:44.659]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:10:44.659]    </control>
[16:10:44.659]    <control if="continueId == 4" while="" timeout="0" info="">
[16:10:44.659]      // if-block "continueId == 4"
[16:10:44.659]        // =>  FALSE
[16:10:44.659]      // skip if-block "continueId == 4"
[16:10:44.659]    </control>
[16:10:44.659]    <control if="!isProduction" while="" timeout="0" info="">
[16:10:44.659]      // if-block "!isProduction"
[16:10:44.659]        // =>  FALSE
[16:10:44.659]      // skip if-block "!isProduction"
[16:10:44.659]    </control>
[16:10:44.659]  </sequence>
[16:10:44.659]  
[16:12:15.090]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:12:15.090]  
[16:12:15.090]  <debugvars>
[16:12:15.090]    // Pre-defined
[16:12:15.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:15.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:15.090]    __dp=0x00000000
[16:12:15.090]    __ap=0x00000000
[16:12:15.090]    __traceout=0x00000000      (Trace Disabled)
[16:12:15.090]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:15.090]    __FlashAddr=0x00000000
[16:12:15.090]    __FlashLen=0x00000000
[16:12:15.090]    __FlashArg=0x00000000
[16:12:15.090]    __FlashOp=0x00000000
[16:12:15.090]    __Result=0x00000000
[16:12:15.090]  </debugvars>
[16:12:15.090]  
[16:12:15.090]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:12:15.090]    <block atomic="false" info="">
[16:12:15.090]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:12:15.090]        // -> [isSWJ <= 0x00000001]
[16:12:15.090]      __var hasDormant = __protocol & 0x00020000;
[16:12:15.090]        // -> [hasDormant <= 0x00000000]
[16:12:15.090]      __var protType   = __protocol & 0x0000FFFF;
[16:12:15.090]        // -> [protType <= 0x00000002]
[16:12:15.090]    </block>
[16:12:15.090]    <control if="protType == 1" while="" timeout="0" info="">
[16:12:15.100]      // if-block "protType == 1"
[16:12:15.100]        // =>  FALSE
[16:12:15.100]      // skip if-block "protType == 1"
[16:12:15.100]    </control>
[16:12:15.100]    <control if="protType == 2" while="" timeout="0" info="">
[16:12:15.100]      // if-block "protType == 2"
[16:12:15.100]        // =>  TRUE
[16:12:15.100]      <control if="isSWJ" while="" timeout="0" info="">
[16:12:15.100]        // if-block "isSWJ"
[16:12:15.100]          // =>  TRUE
[16:12:15.100]        <control if="hasDormant" while="" timeout="0" info="">
[16:12:15.100]          // if-block "hasDormant"
[16:12:15.100]            // =>  FALSE
[16:12:15.100]          // skip if-block "hasDormant"
[16:12:15.100]        </control>
[16:12:15.100]        <control if="!hasDormant" while="" timeout="0" info="">
[16:12:15.100]          // if-block "!hasDormant"
[16:12:15.100]            // =>  TRUE
[16:12:15.100]          <block atomic="false" info="">
[16:12:15.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:12:15.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:15.108]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:12:15.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:12:15.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:12:15.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:15.110]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:12:15.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:12:15.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:12:15.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:12:15.120]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:12:15.120]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:12:15.120]          </block>
[16:12:15.120]          // end if-block "!hasDormant"
[16:12:15.120]        </control>
[16:12:15.120]        // end if-block "isSWJ"
[16:12:15.120]      </control>
[16:12:15.120]      <control if="!isSWJ" while="" timeout="0" info="">
[16:12:15.120]        // if-block "!isSWJ"
[16:12:15.120]          // =>  FALSE
[16:12:15.120]        // skip if-block "!isSWJ"
[16:12:15.120]      </control>
[16:12:15.120]      <block atomic="false" info="">
[16:12:15.120]        ReadDP(0x0);
[16:12:15.130]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:12:15.130]      </block>
[16:12:15.130]      // end if-block "protType == 2"
[16:12:15.130]    </control>
[16:12:15.130]  </sequence>
[16:12:15.130]  
[16:12:15.140]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:12:15.140]  
[16:12:15.140]  <debugvars>
[16:12:15.140]    // Pre-defined
[16:12:15.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:15.140]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:15.140]    __dp=0x00000000
[16:12:15.140]    __ap=0x00000000
[16:12:15.150]    __traceout=0x00000000      (Trace Disabled)
[16:12:15.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:15.150]    __FlashAddr=0x00000000
[16:12:15.150]    __FlashLen=0x00000000
[16:12:15.150]    __FlashArg=0x00000000
[16:12:15.150]    __FlashOp=0x00000000
[16:12:15.150]    __Result=0x00000000
[16:12:15.150]  </debugvars>
[16:12:15.150]  
[16:12:15.150]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:12:15.150]    <block atomic="false" info="">
[16:12:15.150]      __var SW_DP_ABORT       = 0x0;
[16:12:15.150]        // -> [SW_DP_ABORT <= 0x00000000]
[16:12:15.150]      __var DP_CTRL_STAT      = 0x4;
[16:12:15.150]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:12:15.150]      __var DP_SELECT         = 0x8;
[16:12:15.150]        // -> [DP_SELECT <= 0x00000008]
[16:12:15.150]      __var powered_down      = 0;
[16:12:15.150]        // -> [powered_down <= 0x00000000]
[16:12:15.150]      WriteDP(DP_SELECT, 0x00000000);
[16:12:15.160]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:12:15.160]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:12:15.160]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:12:15.160]        // -> [powered_down <= 0x00000001]
[16:12:15.160]    </block>
[16:12:15.160]    <control if="powered_down" while="" timeout="0" info="">
[16:12:15.160]      // if-block "powered_down"
[16:12:15.160]        // =>  TRUE
[16:12:15.170]      <block atomic="false" info="">
[16:12:15.170]        Message(0, "Debug/System power-up request sent");
[16:12:15.170]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:12:15.170]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:12:15.170]      </block>
[16:12:15.170]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:12:15.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:12:15.170]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:12:15.170]        // while-condition  =>  FALSE
[16:12:15.170]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:12:15.170]      </control>
[16:12:15.170]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:12:15.170]        // if-block "(__protocol & 0xFFFF) == 1"
[16:12:15.170]          // =>  FALSE
[16:12:15.170]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:12:15.170]      </control>
[16:12:15.170]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:12:15.170]        // if-block "(__protocol & 0xFFFF) == 2"
[16:12:15.170]          // =>  TRUE
[16:12:15.180]        <block atomic="false" info="">
[16:12:15.180]          Message(0, "executing SWD power up");
[16:12:15.180]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:12:15.180]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:12:15.180]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:12:15.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:12:15.190]        </block>
[16:12:15.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:12:15.190]      </control>
[16:12:15.190]      // end if-block "powered_down"
[16:12:15.190]    </control>
[16:12:15.190]    <block atomic="false" info="">
[16:12:15.190]      __var DEBUG_PORT_VAL    = 0;
[16:12:15.190]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:12:15.190]      __var ACCESS_POINT_VAL  = 0;
[16:12:15.190]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:12:15.190]      __ap = 1; 
[16:12:15.190]        // -> [__ap <= 0x00000001]
[16:12:15.190]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:12:15.200]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:12:15.200]      __ap = 4;
[16:12:15.200]        // -> [__ap <= 0x00000004]
[16:12:15.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:12:15.210]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:12:15.210]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:12:15.210]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:12:15.210]    </block>
[16:12:15.210]    <block atomic="false" info="">
[16:12:15.210]      __var nReset = 0x80;
[16:12:15.210]        // -> [nReset <= 0x00000080]
[16:12:15.210]      __var canReadPins = 0;
[16:12:15.210]        // -> [canReadPins <= 0x00000000]
[16:12:15.210]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:12:15.210]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:12:15.210]        // -> [canReadPins <= 0x00000001]
[16:12:15.210]    </block>
[16:12:15.210]    <control if="" while="1" timeout="200" info="">
[16:12:15.210]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.220]      // while-condition  =>  TRUE
[16:12:15.220]      // while "1"  (timeout="200")
[16:12:15.230]      // while-condition  =>  TRUE
[16:12:15.230]      // while "1"  (timeout="200")
[16:12:15.230]      // while  =>  TIMEOUT
[16:12:15.230]      // end while "1"
[16:12:15.230]    </control>
[16:12:15.230]    <control if="canReadPins" while="" timeout="0" info="">
[16:12:15.230]      // if-block "canReadPins"
[16:12:15.230]        // =>  TRUE
[16:12:15.230]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:12:15.230]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:12:15.230]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:12:15.230]        // while-condition  =>  FALSE
[16:12:15.230]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:12:15.230]      </control>
[16:12:15.230]      // end if-block "canReadPins"
[16:12:15.230]    </control>
[16:12:15.230]    <control if="!canReadPins" while="" timeout="0" info="">
[16:12:15.230]      // if-block "!canReadPins"
[16:12:15.230]        // =>  FALSE
[16:12:15.230]      // skip if-block "!canReadPins"
[16:12:15.230]    </control>
[16:12:15.230]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:12:15.230]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:12:15.230]        // =>  TRUE
[16:12:15.240]      <block atomic="false" info="">
[16:12:15.240]        WriteAP(0x00, 0x190008);
[16:12:15.240]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:12:15.240]        WriteAP(0xF0, 0x01);
[16:12:15.250]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:12:15.250]      </block>
[16:12:15.250]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:12:15.250]    </control>
[16:12:15.250]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:12:15.250]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:12:15.250]        // =>  FALSE
[16:12:15.250]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:12:15.250]    </control>
[16:12:15.250]    <block atomic="false" info="">
[16:12:15.250]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:12:15.270]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:12:15.270]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:12:15.270]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:12:15.270]      __ap = 0; //lets make sure we reset the access point selection
[16:12:15.270]        // -> [__ap <= 0x00000000]
[16:12:15.270]    </block>
[16:12:15.270]  </sequence>
[16:12:15.270]  
[16:12:15.320]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:12:15.320]  
[16:12:15.320]  <debugvars>
[16:12:15.320]    // Pre-defined
[16:12:15.320]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:12:15.320]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:12:15.320]    __dp=0x00000000
[16:12:15.320]    __ap=0x00000000
[16:12:15.320]    __traceout=0x00000000      (Trace Disabled)
[16:12:15.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:12:15.320]    __FlashAddr=0x00000000
[16:12:15.320]    __FlashLen=0x00000000
[16:12:15.320]    __FlashArg=0x00000000
[16:12:15.320]    __FlashOp=0x00000000
[16:12:15.320]    __Result=0x00000000
[16:12:15.320]  </debugvars>
[16:12:15.320]  
[16:12:15.320]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:12:15.320]    <block atomic="false" info="">
[16:12:15.320]      __var deviceID = 0;
[16:12:15.320]        // -> [deviceID <= 0x00000000]
[16:12:15.320]      __var version = 0;
[16:12:15.320]        // -> [version <= 0x00000000]
[16:12:15.320]      __var partNum = 0;
[16:12:15.320]        // -> [partNum <= 0x00000000]
[16:12:15.320]      __var manuf = 0;
[16:12:15.320]        // -> [manuf <= 0x00000000]
[16:12:15.320]      __var isMSPM0G1X0X_G3X0X = 0;
[16:12:15.320]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:12:15.320]      __var isProduction = 0;
[16:12:15.320]        // -> [isProduction <= 0x00000000]
[16:12:15.320]      __var continueId = 0;
[16:12:15.320]        // -> [continueId <= 0x00000000]
[16:12:15.320]      deviceID =   Read32(0x41C40004);
[16:12:15.350]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:12:15.350]        // -> [deviceID <= 0x2BB8802F]
[16:12:15.350]      version = deviceID >> 28;
[16:12:15.350]        // -> [version <= 0x00000002]
[16:12:15.350]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:12:15.350]        // -> [partNum <= 0x0000BB88]
[16:12:15.350]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:12:15.350]        // -> [manuf <= 0x00000017]
[16:12:15.350]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:12:15.350]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:12:15.353]      isProduction = (version > 0);
[16:12:15.353]        // -> [isProduction <= 0x00000001]
[16:12:15.353]    </block>
[16:12:15.353]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:12:15.353]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:12:15.353]        // =>  FALSE
[16:12:15.353]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:12:15.353]    </control>
[16:12:15.353]    <control if="continueId == 4" while="" timeout="0" info="">
[16:12:15.353]      // if-block "continueId == 4"
[16:12:15.353]        // =>  FALSE
[16:12:15.353]      // skip if-block "continueId == 4"
[16:12:15.353]    </control>
[16:12:15.353]    <control if="!isProduction" while="" timeout="0" info="">
[16:12:15.353]      // if-block "!isProduction"
[16:12:15.353]        // =>  FALSE
[16:12:15.353]      // skip if-block "!isProduction"
[16:12:15.353]    </control>
[16:12:15.353]  </sequence>
[16:12:15.353]  
[16:13:26.414]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:13:26.414]  
[16:13:26.429]  <debugvars>
[16:13:26.429]    // Pre-defined
[16:13:26.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:13:26.429]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:13:26.429]    __dp=0x00000000
[16:13:26.429]    __ap=0x00000000
[16:13:26.429]    __traceout=0x00000000      (Trace Disabled)
[16:13:26.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:13:26.429]    __FlashAddr=0x00000000
[16:13:26.429]    __FlashLen=0x00000000
[16:13:26.429]    __FlashArg=0x00000000
[16:13:26.429]    __FlashOp=0x00000000
[16:13:26.429]    __Result=0x00000000
[16:13:26.429]  </debugvars>
[16:13:26.429]  
[16:13:26.429]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:13:26.429]    <block atomic="false" info="">
[16:13:26.429]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:13:26.429]        // -> [isSWJ <= 0x00000001]
[16:13:26.429]      __var hasDormant = __protocol & 0x00020000;
[16:13:26.429]        // -> [hasDormant <= 0x00000000]
[16:13:26.429]      __var protType   = __protocol & 0x0000FFFF;
[16:13:26.429]        // -> [protType <= 0x00000002]
[16:13:26.429]    </block>
[16:13:26.429]    <control if="protType == 1" while="" timeout="0" info="">
[16:13:26.433]      // if-block "protType == 1"
[16:13:26.433]        // =>  FALSE
[16:13:26.433]      // skip if-block "protType == 1"
[16:13:26.433]    </control>
[16:13:26.433]    <control if="protType == 2" while="" timeout="0" info="">
[16:13:26.433]      // if-block "protType == 2"
[16:13:26.433]        // =>  TRUE
[16:13:26.433]      <control if="isSWJ" while="" timeout="0" info="">
[16:13:26.433]        // if-block "isSWJ"
[16:13:26.433]          // =>  TRUE
[16:13:26.433]        <control if="hasDormant" while="" timeout="0" info="">
[16:13:26.433]          // if-block "hasDormant"
[16:13:26.433]            // =>  FALSE
[16:13:26.433]          // skip if-block "hasDormant"
[16:13:26.433]        </control>
[16:13:26.433]        <control if="!hasDormant" while="" timeout="0" info="">
[16:13:26.433]          // if-block "!hasDormant"
[16:13:26.433]            // =>  TRUE
[16:13:26.433]          <block atomic="false" info="">
[16:13:26.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:13:26.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:13:26.433]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:13:26.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:13:26.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:13:26.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:13:26.443]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:13:26.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:13:26.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:13:26.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:13:26.453]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:13:26.453]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:13:26.453]          </block>
[16:13:26.453]          // end if-block "!hasDormant"
[16:13:26.453]        </control>
[16:13:26.453]        // end if-block "isSWJ"
[16:13:26.453]      </control>
[16:13:26.453]      <control if="!isSWJ" while="" timeout="0" info="">
[16:13:26.463]        // if-block "!isSWJ"
[16:13:26.463]          // =>  FALSE
[16:13:26.463]        // skip if-block "!isSWJ"
[16:13:26.463]      </control>
[16:13:26.463]      <block atomic="false" info="">
[16:13:26.463]        ReadDP(0x0);
[16:13:26.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:13:26.463]      </block>
[16:13:26.463]      // end if-block "protType == 2"
[16:13:26.463]    </control>
[16:13:26.463]  </sequence>
[16:13:26.463]  
[16:13:26.473]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:13:26.473]  
[16:13:26.473]  <debugvars>
[16:13:26.473]    // Pre-defined
[16:13:26.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:13:26.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:13:26.473]    __dp=0x00000000
[16:13:26.473]    __ap=0x00000000
[16:13:26.473]    __traceout=0x00000000      (Trace Disabled)
[16:13:26.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:13:26.473]    __FlashAddr=0x00000000
[16:13:26.473]    __FlashLen=0x00000000
[16:13:26.473]    __FlashArg=0x00000000
[16:13:26.473]    __FlashOp=0x00000000
[16:13:26.473]    __Result=0x00000000
[16:13:26.473]  </debugvars>
[16:13:26.473]  
[16:13:26.473]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:13:26.473]    <block atomic="false" info="">
[16:13:26.473]      __var SW_DP_ABORT       = 0x0;
[16:13:26.473]        // -> [SW_DP_ABORT <= 0x00000000]
[16:13:26.473]      __var DP_CTRL_STAT      = 0x4;
[16:13:26.473]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:13:26.473]      __var DP_SELECT         = 0x8;
[16:13:26.473]        // -> [DP_SELECT <= 0x00000008]
[16:13:26.473]      __var powered_down      = 0;
[16:13:26.473]        // -> [powered_down <= 0x00000000]
[16:13:26.473]      WriteDP(DP_SELECT, 0x00000000);
[16:13:26.483]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:13:26.483]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:13:26.483]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:13:26.483]        // -> [powered_down <= 0x00000001]
[16:13:26.483]    </block>
[16:13:26.483]    <control if="powered_down" while="" timeout="0" info="">
[16:13:26.483]      // if-block "powered_down"
[16:13:26.483]        // =>  TRUE
[16:13:26.483]      <block atomic="false" info="">
[16:13:26.483]        Message(0, "Debug/System power-up request sent");
[16:13:26.483]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:13:26.493]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:13:26.493]      </block>
[16:13:26.493]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:13:26.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:13:26.493]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:13:26.493]        // while-condition  =>  FALSE
[16:13:26.493]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:13:26.493]      </control>
[16:13:26.493]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:13:26.493]        // if-block "(__protocol & 0xFFFF) == 1"
[16:13:26.493]          // =>  FALSE
[16:13:26.493]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:13:26.493]      </control>
[16:13:26.493]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:13:26.493]        // if-block "(__protocol & 0xFFFF) == 2"
[16:13:26.493]          // =>  TRUE
[16:13:26.493]        <block atomic="false" info="">
[16:13:26.493]          Message(0, "executing SWD power up");
[16:13:26.493]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:13:26.506]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:13:26.506]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:13:26.506]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:13:26.506]        </block>
[16:13:26.506]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:13:26.506]      </control>
[16:13:26.506]      // end if-block "powered_down"
[16:13:26.506]    </control>
[16:13:26.506]    <block atomic="false" info="">
[16:13:26.506]      __var DEBUG_PORT_VAL    = 0;
[16:13:26.506]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:13:26.506]      __var ACCESS_POINT_VAL  = 0;
[16:13:26.506]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:13:26.506]      __ap = 1; 
[16:13:26.506]        // -> [__ap <= 0x00000001]
[16:13:26.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:13:26.523]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:13:26.523]      __ap = 4;
[16:13:26.523]        // -> [__ap <= 0x00000004]
[16:13:26.523]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:13:26.533]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:13:26.533]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:13:26.533]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:13:26.533]    </block>
[16:13:26.533]    <block atomic="false" info="">
[16:13:26.533]      __var nReset = 0x80;
[16:13:26.533]        // -> [nReset <= 0x00000080]
[16:13:26.533]      __var canReadPins = 0;
[16:13:26.533]        // -> [canReadPins <= 0x00000000]
[16:13:26.533]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:13:26.543]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:13:26.543]        // -> [canReadPins <= 0x00000001]
[16:13:26.543]    </block>
[16:13:26.543]    <control if="" while="1" timeout="200" info="">
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.543]      // while-condition  =>  TRUE
[16:13:26.543]      // while "1"  (timeout="200")
[16:13:26.553]      // while-condition  =>  TRUE
[16:13:26.553]      // while "1"  (timeout="200")
[16:13:26.553]      // while  =>  TIMEOUT
[16:13:26.553]      // end while "1"
[16:13:26.553]    </control>
[16:13:26.553]    <control if="canReadPins" while="" timeout="0" info="">
[16:13:26.553]      // if-block "canReadPins"
[16:13:26.553]        // =>  TRUE
[16:13:26.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:13:26.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:13:26.553]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:13:26.553]        // while-condition  =>  FALSE
[16:13:26.553]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:13:26.553]      </control>
[16:13:26.553]      // end if-block "canReadPins"
[16:13:26.553]    </control>
[16:13:26.553]    <control if="!canReadPins" while="" timeout="0" info="">
[16:13:26.553]      // if-block "!canReadPins"
[16:13:26.553]        // =>  FALSE
[16:13:26.553]      // skip if-block "!canReadPins"
[16:13:26.553]    </control>
[16:13:26.553]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:13:26.553]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:13:26.553]        // =>  TRUE
[16:13:26.553]      <block atomic="false" info="">
[16:13:26.553]        WriteAP(0x00, 0x190008);
[16:13:26.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:13:26.573]        WriteAP(0xF0, 0x01);
[16:13:26.573]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:13:26.573]      </block>
[16:13:26.573]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:13:26.573]    </control>
[16:13:26.573]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:13:26.573]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:13:26.573]        // =>  FALSE
[16:13:26.573]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:13:26.573]    </control>
[16:13:26.573]    <block atomic="false" info="">
[16:13:26.573]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:13:26.583]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:13:26.583]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:13:26.583]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:13:26.583]      __ap = 0; //lets make sure we reset the access point selection
[16:13:26.583]        // -> [__ap <= 0x00000000]
[16:13:26.593]    </block>
[16:13:26.593]  </sequence>
[16:13:26.593]  
[16:13:26.644]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:13:26.644]  
[16:13:26.644]  <debugvars>
[16:13:26.644]    // Pre-defined
[16:13:26.644]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:13:26.644]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:13:26.644]    __dp=0x00000000
[16:13:26.644]    __ap=0x00000000
[16:13:26.644]    __traceout=0x00000000      (Trace Disabled)
[16:13:26.644]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:13:26.644]    __FlashAddr=0x00000000
[16:13:26.644]    __FlashLen=0x00000000
[16:13:26.644]    __FlashArg=0x00000000
[16:13:26.644]    __FlashOp=0x00000000
[16:13:26.644]    __Result=0x00000000
[16:13:26.644]  </debugvars>
[16:13:26.644]  
[16:13:26.644]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:13:26.644]    <block atomic="false" info="">
[16:13:26.644]      __var deviceID = 0;
[16:13:26.644]        // -> [deviceID <= 0x00000000]
[16:13:26.644]      __var version = 0;
[16:13:26.644]        // -> [version <= 0x00000000]
[16:13:26.644]      __var partNum = 0;
[16:13:26.644]        // -> [partNum <= 0x00000000]
[16:13:26.644]      __var manuf = 0;
[16:13:26.644]        // -> [manuf <= 0x00000000]
[16:13:26.644]      __var isMSPM0G1X0X_G3X0X = 0;
[16:13:26.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:13:26.644]      __var isProduction = 0;
[16:13:26.644]        // -> [isProduction <= 0x00000000]
[16:13:26.644]      __var continueId = 0;
[16:13:26.644]        // -> [continueId <= 0x00000000]
[16:13:26.644]      deviceID =   Read32(0x41C40004);
[16:13:26.654]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:13:26.654]        // -> [deviceID <= 0x2BB8802F]
[16:13:26.654]      version = deviceID >> 28;
[16:13:26.654]        // -> [version <= 0x00000002]
[16:13:26.654]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:13:26.654]        // -> [partNum <= 0x0000BB88]
[16:13:26.654]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:13:26.654]        // -> [manuf <= 0x00000017]
[16:13:26.654]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:13:26.654]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:13:26.654]      isProduction = (version > 0);
[16:13:26.654]        // -> [isProduction <= 0x00000001]
[16:13:26.654]    </block>
[16:13:26.654]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:13:26.654]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:13:26.654]        // =>  FALSE
[16:13:26.654]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:13:26.654]    </control>
[16:13:26.654]    <control if="continueId == 4" while="" timeout="0" info="">
[16:13:26.654]      // if-block "continueId == 4"
[16:13:26.654]        // =>  FALSE
[16:13:26.654]      // skip if-block "continueId == 4"
[16:13:26.654]    </control>
[16:13:26.654]    <control if="!isProduction" while="" timeout="0" info="">
[16:13:26.654]      // if-block "!isProduction"
[16:13:26.654]        // =>  FALSE
[16:13:26.654]      // skip if-block "!isProduction"
[16:13:26.654]    </control>
[16:13:26.654]  </sequence>
[16:13:26.664]  
[16:14:22.443]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:14:22.443]  
[16:14:22.457]  <debugvars>
[16:14:22.457]    // Pre-defined
[16:14:22.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:14:22.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:14:22.457]    __dp=0x00000000
[16:14:22.457]    __ap=0x00000000
[16:14:22.457]    __traceout=0x00000000      (Trace Disabled)
[16:14:22.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:14:22.457]    __FlashAddr=0x00000000
[16:14:22.457]    __FlashLen=0x00000000
[16:14:22.457]    __FlashArg=0x00000000
[16:14:22.457]    __FlashOp=0x00000000
[16:14:22.457]    __Result=0x00000000
[16:14:22.457]  </debugvars>
[16:14:22.457]  
[16:14:22.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:14:22.457]    <block atomic="false" info="">
[16:14:22.460]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:14:22.460]        // -> [isSWJ <= 0x00000001]
[16:14:22.460]      __var hasDormant = __protocol & 0x00020000;
[16:14:22.460]        // -> [hasDormant <= 0x00000000]
[16:14:22.460]      __var protType   = __protocol & 0x0000FFFF;
[16:14:22.460]        // -> [protType <= 0x00000002]
[16:14:22.460]    </block>
[16:14:22.460]    <control if="protType == 1" while="" timeout="0" info="">
[16:14:22.460]      // if-block "protType == 1"
[16:14:22.460]        // =>  FALSE
[16:14:22.460]      // skip if-block "protType == 1"
[16:14:22.460]    </control>
[16:14:22.460]    <control if="protType == 2" while="" timeout="0" info="">
[16:14:22.460]      // if-block "protType == 2"
[16:14:22.460]        // =>  TRUE
[16:14:22.460]      <control if="isSWJ" while="" timeout="0" info="">
[16:14:22.460]        // if-block "isSWJ"
[16:14:22.460]          // =>  TRUE
[16:14:22.460]        <control if="hasDormant" while="" timeout="0" info="">
[16:14:22.460]          // if-block "hasDormant"
[16:14:22.460]            // =>  FALSE
[16:14:22.460]          // skip if-block "hasDormant"
[16:14:22.460]        </control>
[16:14:22.460]        <control if="!hasDormant" while="" timeout="0" info="">
[16:14:22.460]          // if-block "!hasDormant"
[16:14:22.460]            // =>  TRUE
[16:14:22.460]          <block atomic="false" info="">
[16:14:22.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:14:22.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:14:22.470]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:14:22.480]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:14:22.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:14:22.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:14:22.480]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:14:22.480]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:14:22.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:14:22.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:14:22.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:14:22.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:14:22.490]          </block>
[16:14:22.490]          // end if-block "!hasDormant"
[16:14:22.490]        </control>
[16:14:22.490]        // end if-block "isSWJ"
[16:14:22.490]      </control>
[16:14:22.490]      <control if="!isSWJ" while="" timeout="0" info="">
[16:14:22.490]        // if-block "!isSWJ"
[16:14:22.490]          // =>  FALSE
[16:14:22.490]        // skip if-block "!isSWJ"
[16:14:22.490]      </control>
[16:14:22.490]      <block atomic="false" info="">
[16:14:22.490]        ReadDP(0x0);
[16:14:22.500]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:14:22.500]      </block>
[16:14:22.500]      // end if-block "protType == 2"
[16:14:22.500]    </control>
[16:14:22.500]  </sequence>
[16:14:22.500]  
[16:14:22.510]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:14:22.510]  
[16:14:22.510]  <debugvars>
[16:14:22.510]    // Pre-defined
[16:14:22.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:14:22.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:14:22.510]    __dp=0x00000000
[16:14:22.510]    __ap=0x00000000
[16:14:22.510]    __traceout=0x00000000      (Trace Disabled)
[16:14:22.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:14:22.510]    __FlashAddr=0x00000000
[16:14:22.510]    __FlashLen=0x00000000
[16:14:22.510]    __FlashArg=0x00000000
[16:14:22.510]    __FlashOp=0x00000000
[16:14:22.510]    __Result=0x00000000
[16:14:22.510]  </debugvars>
[16:14:22.510]  
[16:14:22.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:14:22.510]    <block atomic="false" info="">
[16:14:22.510]      __var SW_DP_ABORT       = 0x0;
[16:14:22.510]        // -> [SW_DP_ABORT <= 0x00000000]
[16:14:22.510]      __var DP_CTRL_STAT      = 0x4;
[16:14:22.510]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:14:22.510]      __var DP_SELECT         = 0x8;
[16:14:22.510]        // -> [DP_SELECT <= 0x00000008]
[16:14:22.510]      __var powered_down      = 0;
[16:14:22.510]        // -> [powered_down <= 0x00000000]
[16:14:22.510]      WriteDP(DP_SELECT, 0x00000000);
[16:14:22.520]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:14:22.520]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:14:22.520]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:14:22.520]        // -> [powered_down <= 0x00000001]
[16:14:22.520]    </block>
[16:14:22.520]    <control if="powered_down" while="" timeout="0" info="">
[16:14:22.520]      // if-block "powered_down"
[16:14:22.520]        // =>  TRUE
[16:14:22.520]      <block atomic="false" info="">
[16:14:22.520]        Message(0, "Debug/System power-up request sent");
[16:14:22.530]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:14:22.540]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:14:22.540]      </block>
[16:14:22.540]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:14:22.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:14:22.543]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:14:22.543]        // while-condition  =>  FALSE
[16:14:22.543]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:14:22.543]      </control>
[16:14:22.543]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:14:22.543]        // if-block "(__protocol & 0xFFFF) == 1"
[16:14:22.543]          // =>  FALSE
[16:14:22.550]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:14:22.550]      </control>
[16:14:22.550]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:14:22.550]        // if-block "(__protocol & 0xFFFF) == 2"
[16:14:22.550]          // =>  TRUE
[16:14:22.550]        <block atomic="false" info="">
[16:14:22.550]          Message(0, "executing SWD power up");
[16:14:22.550]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:14:22.560]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:14:22.560]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:14:22.570]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:14:22.570]        </block>
[16:14:22.570]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:14:22.570]      </control>
[16:14:22.570]      // end if-block "powered_down"
[16:14:22.570]    </control>
[16:14:22.570]    <block atomic="false" info="">
[16:14:22.570]      __var DEBUG_PORT_VAL    = 0;
[16:14:22.570]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:14:22.570]      __var ACCESS_POINT_VAL  = 0;
[16:14:22.570]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:14:22.570]      __ap = 1; 
[16:14:22.570]        // -> [__ap <= 0x00000001]
[16:14:22.570]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:14:22.580]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:14:22.580]      __ap = 4;
[16:14:22.580]        // -> [__ap <= 0x00000004]
[16:14:22.580]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:14:22.590]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:14:22.590]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:14:22.590]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:14:22.590]    </block>
[16:14:22.590]    <block atomic="false" info="">
[16:14:22.590]      __var nReset = 0x80;
[16:14:22.590]        // -> [nReset <= 0x00000080]
[16:14:22.590]      __var canReadPins = 0;
[16:14:22.590]        // -> [canReadPins <= 0x00000000]
[16:14:22.590]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:14:22.600]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:14:22.600]        // -> [canReadPins <= 0x00000001]
[16:14:22.600]    </block>
[16:14:22.600]    <control if="" while="1" timeout="200" info="">
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.600]      // while "1"  (timeout="200")
[16:14:22.600]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.610]      // while-condition  =>  TRUE
[16:14:22.610]      // while "1"  (timeout="200")
[16:14:22.620]      // while-condition  =>  TRUE
[16:14:22.620]      // while "1"  (timeout="200")
[16:14:22.620]      // while  =>  TIMEOUT
[16:14:22.620]      // end while "1"
[16:14:22.620]    </control>
[16:14:22.620]    <control if="canReadPins" while="" timeout="0" info="">
[16:14:22.620]      // if-block "canReadPins"
[16:14:22.620]        // =>  TRUE
[16:14:22.620]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:14:22.620]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:14:22.620]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:14:22.620]        // while-condition  =>  FALSE
[16:14:22.620]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:14:22.620]      </control>
[16:14:22.620]      // end if-block "canReadPins"
[16:14:22.620]    </control>
[16:14:22.620]    <control if="!canReadPins" while="" timeout="0" info="">
[16:14:22.620]      // if-block "!canReadPins"
[16:14:22.620]        // =>  FALSE
[16:14:22.620]      // skip if-block "!canReadPins"
[16:14:22.620]    </control>
[16:14:22.620]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:14:22.620]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:14:22.620]        // =>  TRUE
[16:14:22.620]      <block atomic="false" info="">
[16:14:22.620]        WriteAP(0x00, 0x190008);
[16:14:22.630]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:14:22.630]        WriteAP(0xF0, 0x01);
[16:14:22.643]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:14:22.643]      </block>
[16:14:22.643]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:14:22.643]    </control>
[16:14:22.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:14:22.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:14:22.643]        // =>  FALSE
[16:14:22.643]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:14:22.643]    </control>
[16:14:22.643]    <block atomic="false" info="">
[16:14:22.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:14:22.650]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:14:22.650]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:14:22.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:14:22.650]      __ap = 0; //lets make sure we reset the access point selection
[16:14:22.650]        // -> [__ap <= 0x00000000]
[16:14:22.650]    </block>
[16:14:22.650]  </sequence>
[16:14:22.650]  
[16:14:22.700]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:14:22.700]  
[16:14:22.700]  <debugvars>
[16:14:22.700]    // Pre-defined
[16:14:22.700]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:14:22.700]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:14:22.700]    __dp=0x00000000
[16:14:22.700]    __ap=0x00000000
[16:14:22.700]    __traceout=0x00000000      (Trace Disabled)
[16:14:22.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:14:22.700]    __FlashAddr=0x00000000
[16:14:22.700]    __FlashLen=0x00000000
[16:14:22.700]    __FlashArg=0x00000000
[16:14:22.700]    __FlashOp=0x00000000
[16:14:22.700]    __Result=0x00000000
[16:14:22.700]  </debugvars>
[16:14:22.700]  
[16:14:22.700]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:14:22.700]    <block atomic="false" info="">
[16:14:22.700]      __var deviceID = 0;
[16:14:22.710]        // -> [deviceID <= 0x00000000]
[16:14:22.710]      __var version = 0;
[16:14:22.710]        // -> [version <= 0x00000000]
[16:14:22.710]      __var partNum = 0;
[16:14:22.710]        // -> [partNum <= 0x00000000]
[16:14:22.710]      __var manuf = 0;
[16:14:22.710]        // -> [manuf <= 0x00000000]
[16:14:22.710]      __var isMSPM0G1X0X_G3X0X = 0;
[16:14:22.710]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:14:22.710]      __var isProduction = 0;
[16:14:22.710]        // -> [isProduction <= 0x00000000]
[16:14:22.710]      __var continueId = 0;
[16:14:22.710]        // -> [continueId <= 0x00000000]
[16:14:22.710]      deviceID =   Read32(0x41C40004);
[16:14:22.720]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:14:22.720]        // -> [deviceID <= 0x2BB8802F]
[16:14:22.720]      version = deviceID >> 28;
[16:14:22.720]        // -> [version <= 0x00000002]
[16:14:22.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:14:22.720]        // -> [partNum <= 0x0000BB88]
[16:14:22.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:14:22.720]        // -> [manuf <= 0x00000017]
[16:14:22.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:14:22.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:14:22.720]      isProduction = (version > 0);
[16:14:22.720]        // -> [isProduction <= 0x00000001]
[16:14:22.720]    </block>
[16:14:22.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:14:22.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:14:22.720]        // =>  FALSE
[16:14:22.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:14:22.720]    </control>
[16:14:22.720]    <control if="continueId == 4" while="" timeout="0" info="">
[16:14:22.720]      // if-block "continueId == 4"
[16:14:22.720]        // =>  FALSE
[16:14:22.720]      // skip if-block "continueId == 4"
[16:14:22.720]    </control>
[16:14:22.720]    <control if="!isProduction" while="" timeout="0" info="">
[16:14:22.720]      // if-block "!isProduction"
[16:14:22.720]        // =>  FALSE
[16:14:22.720]      // skip if-block "!isProduction"
[16:14:22.720]    </control>
[16:14:22.720]  </sequence>
[16:14:22.730]  
[16:16:31.656]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:31.656]  
[16:16:31.667]  <debugvars>
[16:16:31.667]    // Pre-defined
[16:16:31.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:31.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:31.667]    __dp=0x00000000
[16:16:31.667]    __ap=0x00000000
[16:16:31.667]    __traceout=0x00000000      (Trace Disabled)
[16:16:31.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:31.667]    __FlashAddr=0x00000000
[16:16:31.667]    __FlashLen=0x00000000
[16:16:31.667]    __FlashArg=0x00000000
[16:16:31.667]    __FlashOp=0x00000000
[16:16:31.667]    __Result=0x00000000
[16:16:31.667]  </debugvars>
[16:16:31.667]  
[16:16:31.667]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:31.667]    <block atomic="false" info="">
[16:16:31.667]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:31.667]        // -> [isSWJ <= 0x00000001]
[16:16:31.667]      __var hasDormant = __protocol & 0x00020000;
[16:16:31.667]        // -> [hasDormant <= 0x00000000]
[16:16:31.667]      __var protType   = __protocol & 0x0000FFFF;
[16:16:31.667]        // -> [protType <= 0x00000002]
[16:16:31.667]    </block>
[16:16:31.667]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:31.667]      // if-block "protType == 1"
[16:16:31.667]        // =>  FALSE
[16:16:31.667]      // skip if-block "protType == 1"
[16:16:31.667]    </control>
[16:16:31.667]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:31.667]      // if-block "protType == 2"
[16:16:31.667]        // =>  TRUE
[16:16:31.667]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:31.667]        // if-block "isSWJ"
[16:16:31.667]          // =>  TRUE
[16:16:31.667]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:31.667]          // if-block "hasDormant"
[16:16:31.667]            // =>  FALSE
[16:16:31.667]          // skip if-block "hasDormant"
[16:16:31.667]        </control>
[16:16:31.667]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:31.667]          // if-block "!hasDormant"
[16:16:31.667]            // =>  TRUE
[16:16:31.667]          <block atomic="false" info="">
[16:16:31.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:31.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:31.676]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:31.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:31.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:31.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:31.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:31.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:31.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:31.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:31.686]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:31.696]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:31.696]          </block>
[16:16:31.696]          // end if-block "!hasDormant"
[16:16:31.696]        </control>
[16:16:31.696]        // end if-block "isSWJ"
[16:16:31.696]      </control>
[16:16:31.696]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:31.696]        // if-block "!isSWJ"
[16:16:31.696]          // =>  FALSE
[16:16:31.696]        // skip if-block "!isSWJ"
[16:16:31.696]      </control>
[16:16:31.696]      <block atomic="false" info="">
[16:16:31.696]        ReadDP(0x0);
[16:16:31.696]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:31.696]      </block>
[16:16:31.696]      // end if-block "protType == 2"
[16:16:31.696]    </control>
[16:16:31.696]  </sequence>
[16:16:31.696]  
[16:16:31.706]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:16:31.706]  
[16:16:31.706]  <debugvars>
[16:16:31.706]    // Pre-defined
[16:16:31.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:31.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:31.706]    __dp=0x00000000
[16:16:31.706]    __ap=0x00000000
[16:16:31.706]    __traceout=0x00000000      (Trace Disabled)
[16:16:31.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:31.706]    __FlashAddr=0x00000000
[16:16:31.706]    __FlashLen=0x00000000
[16:16:31.706]    __FlashArg=0x00000000
[16:16:31.706]    __FlashOp=0x00000000
[16:16:31.706]    __Result=0x00000000
[16:16:31.706]  </debugvars>
[16:16:31.706]  
[16:16:31.706]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:16:31.706]    <block atomic="false" info="">
[16:16:31.706]      __var SW_DP_ABORT       = 0x0;
[16:16:31.706]        // -> [SW_DP_ABORT <= 0x00000000]
[16:16:31.706]      __var DP_CTRL_STAT      = 0x4;
[16:16:31.706]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:16:31.706]      __var DP_SELECT         = 0x8;
[16:16:31.706]        // -> [DP_SELECT <= 0x00000008]
[16:16:31.706]      __var powered_down      = 0;
[16:16:31.706]        // -> [powered_down <= 0x00000000]
[16:16:31.714]      WriteDP(DP_SELECT, 0x00000000);
[16:16:31.716]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:16:31.716]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:16:31.723]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:16:31.723]        // -> [powered_down <= 0x00000001]
[16:16:31.723]    </block>
[16:16:31.723]    <control if="powered_down" while="" timeout="0" info="">
[16:16:31.723]      // if-block "powered_down"
[16:16:31.723]        // =>  TRUE
[16:16:31.723]      <block atomic="false" info="">
[16:16:31.723]        Message(0, "Debug/System power-up request sent");
[16:16:31.723]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:16:31.726]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:16:31.726]      </block>
[16:16:31.726]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:16:31.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:31.726]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:16:31.736]        // while-condition  =>  FALSE
[16:16:31.736]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:16:31.736]      </control>
[16:16:31.736]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:16:31.736]        // if-block "(__protocol & 0xFFFF) == 1"
[16:16:31.736]          // =>  FALSE
[16:16:31.736]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:16:31.736]      </control>
[16:16:31.736]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:16:31.736]        // if-block "(__protocol & 0xFFFF) == 2"
[16:16:31.736]          // =>  TRUE
[16:16:31.736]        <block atomic="false" info="">
[16:16:31.736]          Message(0, "executing SWD power up");
[16:16:31.736]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:16:31.739]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:16:31.739]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:16:31.746]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:16:31.746]        </block>
[16:16:31.746]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:16:31.746]      </control>
[16:16:31.746]      // end if-block "powered_down"
[16:16:31.746]    </control>
[16:16:31.746]    <block atomic="false" info="">
[16:16:31.746]      __var DEBUG_PORT_VAL    = 0;
[16:16:31.746]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:16:31.746]      __var ACCESS_POINT_VAL  = 0;
[16:16:31.746]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:16:31.746]      __ap = 1; 
[16:16:31.746]        // -> [__ap <= 0x00000001]
[16:16:31.746]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:16:31.756]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:16:31.756]      __ap = 4;
[16:16:31.756]        // -> [__ap <= 0x00000004]
[16:16:31.756]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:31.766]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:16:31.766]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:16:31.766]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:31.766]    </block>
[16:16:31.766]    <block atomic="false" info="">
[16:16:31.766]      __var nReset = 0x80;
[16:16:31.766]        // -> [nReset <= 0x00000080]
[16:16:31.766]      __var canReadPins = 0;
[16:16:31.766]        // -> [canReadPins <= 0x00000000]
[16:16:31.766]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:16:31.772]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:16:31.772]        // -> [canReadPins <= 0x00000001]
[16:16:31.772]    </block>
[16:16:31.772]    <control if="" while="1" timeout="200" info="">
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.776]      // while-condition  =>  TRUE
[16:16:31.776]      // while "1"  (timeout="200")
[16:16:31.786]      // while-condition  =>  TRUE
[16:16:31.786]      // while "1"  (timeout="200")
[16:16:31.786]      // while  =>  TIMEOUT
[16:16:31.786]      // end while "1"
[16:16:31.786]    </control>
[16:16:31.786]    <control if="canReadPins" while="" timeout="0" info="">
[16:16:31.786]      // if-block "canReadPins"
[16:16:31.786]        // =>  TRUE
[16:16:31.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:16:31.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:16:31.786]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:16:31.786]        // while-condition  =>  FALSE
[16:16:31.786]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:16:31.786]      </control>
[16:16:31.786]      // end if-block "canReadPins"
[16:16:31.786]    </control>
[16:16:31.786]    <control if="!canReadPins" while="" timeout="0" info="">
[16:16:31.786]      // if-block "!canReadPins"
[16:16:31.786]        // =>  FALSE
[16:16:31.786]      // skip if-block "!canReadPins"
[16:16:31.796]    </control>
[16:16:31.796]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:16:31.796]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:31.796]        // =>  TRUE
[16:16:31.796]      <block atomic="false" info="">
[16:16:31.796]        WriteAP(0x00, 0x190008);
[16:16:31.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:31.806]        WriteAP(0xF0, 0x01);
[16:16:31.816]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:31.816]      </block>
[16:16:31.816]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:31.816]    </control>
[16:16:31.816]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:16:31.816]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:31.816]        // =>  FALSE
[16:16:31.816]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:31.816]    </control>
[16:16:31.816]    <block atomic="false" info="">
[16:16:31.816]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:31.826]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:16:31.826]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:16:31.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:31.826]      __ap = 0; //lets make sure we reset the access point selection
[16:16:31.826]        // -> [__ap <= 0x00000000]
[16:16:31.826]    </block>
[16:16:31.826]  </sequence>
[16:16:31.826]  
[16:16:31.877]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:16:31.877]  
[16:16:31.877]  <debugvars>
[16:16:31.877]    // Pre-defined
[16:16:31.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:31.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:16:31.877]    __dp=0x00000000
[16:16:31.877]    __ap=0x00000000
[16:16:31.877]    __traceout=0x00000000      (Trace Disabled)
[16:16:31.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:31.877]    __FlashAddr=0x00000000
[16:16:31.877]    __FlashLen=0x00000000
[16:16:31.877]    __FlashArg=0x00000000
[16:16:31.877]    __FlashOp=0x00000000
[16:16:31.877]    __Result=0x00000000
[16:16:31.877]  </debugvars>
[16:16:31.877]  
[16:16:31.877]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:16:31.877]    <block atomic="false" info="">
[16:16:31.877]      __var deviceID = 0;
[16:16:31.877]        // -> [deviceID <= 0x00000000]
[16:16:31.877]      __var version = 0;
[16:16:31.877]        // -> [version <= 0x00000000]
[16:16:31.877]      __var partNum = 0;
[16:16:31.877]        // -> [partNum <= 0x00000000]
[16:16:31.877]      __var manuf = 0;
[16:16:31.877]        // -> [manuf <= 0x00000000]
[16:16:31.877]      __var isMSPM0G1X0X_G3X0X = 0;
[16:16:31.877]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:16:31.877]      __var isProduction = 0;
[16:16:31.877]        // -> [isProduction <= 0x00000000]
[16:16:31.877]      __var continueId = 0;
[16:16:31.877]        // -> [continueId <= 0x00000000]
[16:16:31.877]      deviceID =   Read32(0x41C40004);
[16:16:31.896]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:16:31.896]        // -> [deviceID <= 0x2BB8802F]
[16:16:31.896]      version = deviceID >> 28;
[16:16:31.896]        // -> [version <= 0x00000002]
[16:16:31.896]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:16:31.896]        // -> [partNum <= 0x0000BB88]
[16:16:31.896]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:16:31.896]        // -> [manuf <= 0x00000017]
[16:16:31.896]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:16:31.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:16:31.896]      isProduction = (version > 0);
[16:16:31.896]        // -> [isProduction <= 0x00000001]
[16:16:31.896]    </block>
[16:16:31.896]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:16:31.896]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:16:31.896]        // =>  FALSE
[16:16:31.896]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:16:31.896]    </control>
[16:16:31.896]    <control if="continueId == 4" while="" timeout="0" info="">
[16:16:31.896]      // if-block "continueId == 4"
[16:16:31.896]        // =>  FALSE
[16:16:31.896]      // skip if-block "continueId == 4"
[16:16:31.896]    </control>
[16:16:31.896]    <control if="!isProduction" while="" timeout="0" info="">
[16:16:31.896]      // if-block "!isProduction"
[16:16:31.896]        // =>  FALSE
[16:16:31.896]      // skip if-block "!isProduction"
[16:16:31.896]    </control>
[16:16:31.896]  </sequence>
[16:16:31.896]  
[16:16:40.691]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:16:40.691]  
[16:16:40.691]  <debugvars>
[16:16:40.691]    // Pre-defined
[16:16:40.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:40.691]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:16:40.691]    __dp=0x00000000
[16:16:40.691]    __ap=0x00000000
[16:16:40.691]    __traceout=0x00000000      (Trace Disabled)
[16:16:40.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:40.691]    __FlashAddr=0x00000000
[16:16:40.691]    __FlashLen=0x00000000
[16:16:40.691]    __FlashArg=0x00000000
[16:16:40.691]    __FlashOp=0x00000000
[16:16:40.691]    __Result=0x00000000
[16:16:40.691]  </debugvars>
[16:16:40.691]  
[16:16:40.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:16:40.691]    <block atomic="false" info="">
[16:16:40.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:16:40.691]        // -> [isSWJ <= 0x00000001]
[16:16:40.691]      __var hasDormant = __protocol & 0x00020000;
[16:16:40.691]        // -> [hasDormant <= 0x00000000]
[16:16:40.691]      __var protType   = __protocol & 0x0000FFFF;
[16:16:40.691]        // -> [protType <= 0x00000002]
[16:16:40.691]    </block>
[16:16:40.691]    <control if="protType == 1" while="" timeout="0" info="">
[16:16:40.691]      // if-block "protType == 1"
[16:16:40.691]        // =>  FALSE
[16:16:40.691]      // skip if-block "protType == 1"
[16:16:40.691]    </control>
[16:16:40.691]    <control if="protType == 2" while="" timeout="0" info="">
[16:16:40.691]      // if-block "protType == 2"
[16:16:40.691]        // =>  TRUE
[16:16:40.691]      <control if="isSWJ" while="" timeout="0" info="">
[16:16:40.691]        // if-block "isSWJ"
[16:16:40.691]          // =>  TRUE
[16:16:40.691]        <control if="hasDormant" while="" timeout="0" info="">
[16:16:40.691]          // if-block "hasDormant"
[16:16:40.691]            // =>  FALSE
[16:16:40.691]          // skip if-block "hasDormant"
[16:16:40.691]        </control>
[16:16:40.691]        <control if="!hasDormant" while="" timeout="0" info="">
[16:16:40.691]          // if-block "!hasDormant"
[16:16:40.691]            // =>  TRUE
[16:16:40.691]          <block atomic="false" info="">
[16:16:40.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:16:40.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:40.701]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:16:40.701]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:16:40.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:16:40.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:40.711]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:16:40.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:16:40.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:16:40.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:16:40.721]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:16:40.721]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:16:40.721]          </block>
[16:16:40.721]          // end if-block "!hasDormant"
[16:16:40.721]        </control>
[16:16:40.721]        // end if-block "isSWJ"
[16:16:40.721]      </control>
[16:16:40.721]      <control if="!isSWJ" while="" timeout="0" info="">
[16:16:40.721]        // if-block "!isSWJ"
[16:16:40.721]          // =>  FALSE
[16:16:40.721]        // skip if-block "!isSWJ"
[16:16:40.721]      </control>
[16:16:40.721]      <block atomic="false" info="">
[16:16:40.721]        ReadDP(0x0);
[16:16:40.721]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:16:40.721]      </block>
[16:16:40.721]      // end if-block "protType == 2"
[16:16:40.721]    </control>
[16:16:40.721]  </sequence>
[16:16:40.721]  
[16:16:40.731]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:16:40.731]  
[16:16:40.731]  <debugvars>
[16:16:40.731]    // Pre-defined
[16:16:40.731]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:40.731]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:16:40.731]    __dp=0x00000000
[16:16:40.731]    __ap=0x00000000
[16:16:40.731]    __traceout=0x00000000      (Trace Disabled)
[16:16:40.731]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:40.731]    __FlashAddr=0x00000000
[16:16:40.731]    __FlashLen=0x00000000
[16:16:40.731]    __FlashArg=0x00000000
[16:16:40.731]    __FlashOp=0x00000000
[16:16:40.731]    __Result=0x00000000
[16:16:40.731]  </debugvars>
[16:16:40.731]  
[16:16:40.731]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:16:40.731]    <block atomic="false" info="">
[16:16:40.731]      __var SW_DP_ABORT       = 0x0;
[16:16:40.731]        // -> [SW_DP_ABORT <= 0x00000000]
[16:16:40.741]      __var DP_CTRL_STAT      = 0x4;
[16:16:40.741]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:16:40.741]      __var DP_SELECT         = 0x8;
[16:16:40.741]        // -> [DP_SELECT <= 0x00000008]
[16:16:40.741]      __var powered_down      = 0;
[16:16:40.741]        // -> [powered_down <= 0x00000000]
[16:16:40.741]      WriteDP(DP_SELECT, 0x00000000);
[16:16:40.741]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:16:40.741]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:16:40.741]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:16:40.741]        // -> [powered_down <= 0x00000001]
[16:16:40.741]    </block>
[16:16:40.741]    <control if="powered_down" while="" timeout="0" info="">
[16:16:40.741]      // if-block "powered_down"
[16:16:40.741]        // =>  TRUE
[16:16:40.741]      <block atomic="false" info="">
[16:16:40.741]        Message(0, "Debug/System power-up request sent");
[16:16:40.751]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:16:40.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:16:40.751]      </block>
[16:16:40.751]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:16:40.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:16:40.751]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:16:40.761]        // while-condition  =>  FALSE
[16:16:40.761]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:16:40.761]      </control>
[16:16:40.761]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:16:40.761]        // if-block "(__protocol & 0xFFFF) == 1"
[16:16:40.761]          // =>  FALSE
[16:16:40.761]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:16:40.761]      </control>
[16:16:40.761]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:16:40.761]        // if-block "(__protocol & 0xFFFF) == 2"
[16:16:40.761]          // =>  TRUE
[16:16:40.761]        <block atomic="false" info="">
[16:16:40.761]          Message(0, "executing SWD power up");
[16:16:40.761]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:16:40.761]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:16:40.771]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:16:40.771]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:16:40.771]        </block>
[16:16:40.771]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:16:40.771]      </control>
[16:16:40.771]      // end if-block "powered_down"
[16:16:40.771]    </control>
[16:16:40.771]    <block atomic="false" info="">
[16:16:40.771]      __var DEBUG_PORT_VAL    = 0;
[16:16:40.771]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:16:40.771]      __var ACCESS_POINT_VAL  = 0;
[16:16:40.771]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:16:40.771]      __ap = 1; 
[16:16:40.771]        // -> [__ap <= 0x00000001]
[16:16:40.771]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:16:40.781]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:16:40.781]      __ap = 4;
[16:16:40.781]        // -> [__ap <= 0x00000004]
[16:16:40.781]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:40.791]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:16:40.791]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:16:40.791]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:40.791]    </block>
[16:16:40.791]    <block atomic="false" info="">
[16:16:40.791]      __var nReset = 0x80;
[16:16:40.791]        // -> [nReset <= 0x00000080]
[16:16:40.791]      __var canReadPins = 0;
[16:16:40.791]        // -> [canReadPins <= 0x00000000]
[16:16:40.791]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:16:40.801]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:16:40.801]        // -> [canReadPins <= 0x00000001]
[16:16:40.801]    </block>
[16:16:40.801]    <control if="" while="1" timeout="200" info="">
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.801]      // while-condition  =>  TRUE
[16:16:40.801]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.811]      // while "1"  (timeout="200")
[16:16:40.811]      // while-condition  =>  TRUE
[16:16:40.821]      // while "1"  (timeout="200")
[16:16:40.821]      // while  =>  TIMEOUT
[16:16:40.821]      // end while "1"
[16:16:40.821]    </control>
[16:16:40.821]    <control if="canReadPins" while="" timeout="0" info="">
[16:16:40.821]      // if-block "canReadPins"
[16:16:40.821]        // =>  TRUE
[16:16:40.821]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:16:40.821]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:16:40.821]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:16:40.821]        // while-condition  =>  FALSE
[16:16:40.821]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:16:40.821]      </control>
[16:16:40.821]      // end if-block "canReadPins"
[16:16:40.821]    </control>
[16:16:40.821]    <control if="!canReadPins" while="" timeout="0" info="">
[16:16:40.821]      // if-block "!canReadPins"
[16:16:40.821]        // =>  FALSE
[16:16:40.821]      // skip if-block "!canReadPins"
[16:16:40.821]    </control>
[16:16:40.821]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:16:40.821]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:40.821]        // =>  TRUE
[16:16:40.821]      <block atomic="false" info="">
[16:16:40.821]        WriteAP(0x00, 0x190008);
[16:16:40.831]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:40.831]        WriteAP(0xF0, 0x01);
[16:16:40.841]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:16:40.841]      </block>
[16:16:40.841]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:16:40.841]    </control>
[16:16:40.841]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:16:40.841]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:40.841]        // =>  FALSE
[16:16:40.841]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:16:40.841]    </control>
[16:16:40.841]    <block atomic="false" info="">
[16:16:40.841]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:16:40.851]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:16:40.851]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:16:40.851]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:16:40.851]      __ap = 0; //lets make sure we reset the access point selection
[16:16:40.851]        // -> [__ap <= 0x00000000]
[16:16:40.851]    </block>
[16:16:40.851]  </sequence>
[16:16:40.851]  
[16:16:40.911]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:16:40.911]  
[16:16:40.911]  <debugvars>
[16:16:40.911]    // Pre-defined
[16:16:40.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:16:40.911]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:16:40.911]    __dp=0x00000000
[16:16:40.911]    __ap=0x00000000
[16:16:40.911]    __traceout=0x00000000      (Trace Disabled)
[16:16:40.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:16:40.911]    __FlashAddr=0x00000000
[16:16:40.911]    __FlashLen=0x00000000
[16:16:40.911]    __FlashArg=0x00000000
[16:16:40.911]    __FlashOp=0x00000000
[16:16:40.911]    __Result=0x00000000
[16:16:40.911]  </debugvars>
[16:16:40.911]  
[16:16:40.911]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:16:40.911]    <block atomic="false" info="">
[16:16:40.911]      __var deviceID = 0;
[16:16:40.911]        // -> [deviceID <= 0x00000000]
[16:16:40.911]      __var version = 0;
[16:16:40.911]        // -> [version <= 0x00000000]
[16:16:40.911]      __var partNum = 0;
[16:16:40.911]        // -> [partNum <= 0x00000000]
[16:16:40.911]      __var manuf = 0;
[16:16:40.911]        // -> [manuf <= 0x00000000]
[16:16:40.911]      __var isMSPM0G1X0X_G3X0X = 0;
[16:16:40.911]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:16:40.911]      __var isProduction = 0;
[16:16:40.911]        // -> [isProduction <= 0x00000000]
[16:16:40.911]      __var continueId = 0;
[16:16:40.911]        // -> [continueId <= 0x00000000]
[16:16:40.920]      deviceID =   Read32(0x41C40004);
[16:16:40.921]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:16:40.931]        // -> [deviceID <= 0x2BB8802F]
[16:16:40.931]      version = deviceID >> 28;
[16:16:40.931]        // -> [version <= 0x00000002]
[16:16:40.931]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:16:40.931]        // -> [partNum <= 0x0000BB88]
[16:16:40.931]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:16:40.931]        // -> [manuf <= 0x00000017]
[16:16:40.931]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:16:40.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:16:40.931]      isProduction = (version > 0);
[16:16:40.931]        // -> [isProduction <= 0x00000001]
[16:16:40.931]    </block>
[16:16:40.931]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:16:40.931]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:16:40.931]        // =>  FALSE
[16:16:40.931]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:16:40.931]    </control>
[16:16:40.931]    <control if="continueId == 4" while="" timeout="0" info="">
[16:16:40.931]      // if-block "continueId == 4"
[16:16:40.931]        // =>  FALSE
[16:16:40.931]      // skip if-block "continueId == 4"
[16:16:40.931]    </control>
[16:16:40.931]    <control if="!isProduction" while="" timeout="0" info="">
[16:16:40.931]      // if-block "!isProduction"
[16:16:40.931]        // =>  FALSE
[16:16:40.931]      // skip if-block "!isProduction"
[16:16:40.931]    </control>
[16:16:40.931]  </sequence>
[16:16:40.931]  
[16:21:02.459]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:21:02.459]  
[16:21:02.473]  <debugvars>
[16:21:02.473]    // Pre-defined
[16:21:02.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:21:02.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:21:02.473]    __dp=0x00000000
[16:21:02.473]    __ap=0x00000000
[16:21:02.473]    __traceout=0x00000000      (Trace Disabled)
[16:21:02.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:21:02.473]    __FlashAddr=0x00000000
[16:21:02.473]    __FlashLen=0x00000000
[16:21:02.473]    __FlashArg=0x00000000
[16:21:02.473]    __FlashOp=0x00000000
[16:21:02.473]    __Result=0x00000000
[16:21:02.473]  </debugvars>
[16:21:02.475]  
[16:21:02.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:21:02.475]    <block atomic="false" info="">
[16:21:02.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:21:02.475]        // -> [isSWJ <= 0x00000001]
[16:21:02.475]      __var hasDormant = __protocol & 0x00020000;
[16:21:02.475]        // -> [hasDormant <= 0x00000000]
[16:21:02.475]      __var protType   = __protocol & 0x0000FFFF;
[16:21:02.475]        // -> [protType <= 0x00000002]
[16:21:02.475]    </block>
[16:21:02.477]    <control if="protType == 1" while="" timeout="0" info="">
[16:21:02.477]      // if-block "protType == 1"
[16:21:02.477]        // =>  FALSE
[16:21:02.477]      // skip if-block "protType == 1"
[16:21:02.477]    </control>
[16:21:02.477]    <control if="protType == 2" while="" timeout="0" info="">
[16:21:02.477]      // if-block "protType == 2"
[16:21:02.477]        // =>  TRUE
[16:21:02.477]      <control if="isSWJ" while="" timeout="0" info="">
[16:21:02.477]        // if-block "isSWJ"
[16:21:02.477]          // =>  TRUE
[16:21:02.477]        <control if="hasDormant" while="" timeout="0" info="">
[16:21:02.477]          // if-block "hasDormant"
[16:21:02.477]            // =>  FALSE
[16:21:02.477]          // skip if-block "hasDormant"
[16:21:02.477]        </control>
[16:21:02.477]        <control if="!hasDormant" while="" timeout="0" info="">
[16:21:02.477]          // if-block "!hasDormant"
[16:21:02.477]            // =>  TRUE
[16:21:02.477]          <block atomic="false" info="">
[16:21:02.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:21:02.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:21:02.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:21:02.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:21:02.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:21:02.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:21:02.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:21:02.492]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:21:02.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:21:02.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:21:02.492]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:21:02.497]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:21:02.497]          </block>
[16:21:02.497]          // end if-block "!hasDormant"
[16:21:02.497]        </control>
[16:21:02.497]        // end if-block "isSWJ"
[16:21:02.497]      </control>
[16:21:02.497]      <control if="!isSWJ" while="" timeout="0" info="">
[16:21:02.497]        // if-block "!isSWJ"
[16:21:02.497]          // =>  FALSE
[16:21:02.497]        // skip if-block "!isSWJ"
[16:21:02.497]      </control>
[16:21:02.497]      <block atomic="false" info="">
[16:21:02.497]        ReadDP(0x0);
[16:21:02.505]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:21:02.505]      </block>
[16:21:02.505]      // end if-block "protType == 2"
[16:21:02.505]    </control>
[16:21:02.505]  </sequence>
[16:21:02.505]  
[16:21:02.507]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:21:02.507]  
[16:21:02.507]  <debugvars>
[16:21:02.507]    // Pre-defined
[16:21:02.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:21:02.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:21:02.507]    __dp=0x00000000
[16:21:02.507]    __ap=0x00000000
[16:21:02.507]    __traceout=0x00000000      (Trace Disabled)
[16:21:02.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:21:02.507]    __FlashAddr=0x00000000
[16:21:02.507]    __FlashLen=0x00000000
[16:21:02.507]    __FlashArg=0x00000000
[16:21:02.507]    __FlashOp=0x00000000
[16:21:02.507]    __Result=0x00000000
[16:21:02.507]  </debugvars>
[16:21:02.507]  
[16:21:02.507]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:21:02.507]    <block atomic="false" info="">
[16:21:02.507]      __var SW_DP_ABORT       = 0x0;
[16:21:02.507]        // -> [SW_DP_ABORT <= 0x00000000]
[16:21:02.507]      __var DP_CTRL_STAT      = 0x4;
[16:21:02.507]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:21:02.507]      __var DP_SELECT         = 0x8;
[16:21:02.507]        // -> [DP_SELECT <= 0x00000008]
[16:21:02.507]      __var powered_down      = 0;
[16:21:02.507]        // -> [powered_down <= 0x00000000]
[16:21:02.517]      WriteDP(DP_SELECT, 0x00000000);
[16:21:02.517]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:21:02.517]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:21:02.517]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:21:02.517]        // -> [powered_down <= 0x00000001]
[16:21:02.517]    </block>
[16:21:02.517]    <control if="powered_down" while="" timeout="0" info="">
[16:21:02.517]      // if-block "powered_down"
[16:21:02.517]        // =>  TRUE
[16:21:02.517]      <block atomic="false" info="">
[16:21:02.517]        Message(0, "Debug/System power-up request sent");
[16:21:02.517]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:21:02.527]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:21:02.527]      </block>
[16:21:02.527]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:21:02.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:21:02.527]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:21:02.527]        // while-condition  =>  FALSE
[16:21:02.527]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:21:02.527]      </control>
[16:21:02.527]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:21:02.527]        // if-block "(__protocol & 0xFFFF) == 1"
[16:21:02.527]          // =>  FALSE
[16:21:02.527]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:21:02.527]      </control>
[16:21:02.527]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:21:02.527]        // if-block "(__protocol & 0xFFFF) == 2"
[16:21:02.527]          // =>  TRUE
[16:21:02.527]        <block atomic="false" info="">
[16:21:02.527]          Message(0, "executing SWD power up");
[16:21:02.527]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:21:02.537]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:21:02.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:21:02.537]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:21:02.537]        </block>
[16:21:02.537]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:21:02.537]      </control>
[16:21:02.537]      // end if-block "powered_down"
[16:21:02.537]    </control>
[16:21:02.537]    <block atomic="false" info="">
[16:21:02.537]      __var DEBUG_PORT_VAL    = 0;
[16:21:02.537]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:21:02.537]      __var ACCESS_POINT_VAL  = 0;
[16:21:02.537]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:21:02.537]      __ap = 1; 
[16:21:02.537]        // -> [__ap <= 0x00000001]
[16:21:02.537]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:21:02.547]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:21:02.547]      __ap = 4;
[16:21:02.547]        // -> [__ap <= 0x00000004]
[16:21:02.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:21:02.557]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:21:02.557]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:21:02.557]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:21:02.557]    </block>
[16:21:02.557]    <block atomic="false" info="">
[16:21:02.557]      __var nReset = 0x80;
[16:21:02.557]        // -> [nReset <= 0x00000080]
[16:21:02.557]      __var canReadPins = 0;
[16:21:02.557]        // -> [canReadPins <= 0x00000000]
[16:21:02.557]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:21:02.567]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:21:02.567]        // -> [canReadPins <= 0x00000001]
[16:21:02.567]    </block>
[16:21:02.567]    <control if="" while="1" timeout="200" info="">
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.567]      // while "1"  (timeout="200")
[16:21:02.567]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.577]      // while "1"  (timeout="200")
[16:21:02.577]      // while-condition  =>  TRUE
[16:21:02.587]      // while "1"  (timeout="200")
[16:21:02.587]      // while  =>  TIMEOUT
[16:21:02.587]      // end while "1"
[16:21:02.587]    </control>
[16:21:02.587]    <control if="canReadPins" while="" timeout="0" info="">
[16:21:02.587]      // if-block "canReadPins"
[16:21:02.587]        // =>  TRUE
[16:21:02.587]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:21:02.587]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:21:02.587]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:21:02.587]        // while-condition  =>  FALSE
[16:21:02.587]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:21:02.587]      </control>
[16:21:02.587]      // end if-block "canReadPins"
[16:21:02.587]    </control>
[16:21:02.587]    <control if="!canReadPins" while="" timeout="0" info="">
[16:21:02.587]      // if-block "!canReadPins"
[16:21:02.587]        // =>  FALSE
[16:21:02.587]      // skip if-block "!canReadPins"
[16:21:02.587]    </control>
[16:21:02.587]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:21:02.587]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:21:02.587]        // =>  TRUE
[16:21:02.587]      <block atomic="false" info="">
[16:21:02.587]        WriteAP(0x00, 0x190008);
[16:21:02.597]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:21:02.597]        WriteAP(0xF0, 0x01);
[16:21:02.597]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:21:02.597]      </block>
[16:21:02.597]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:21:02.597]    </control>
[16:21:02.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:21:02.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:21:02.597]        // =>  FALSE
[16:21:02.597]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:21:02.597]    </control>
[16:21:02.597]    <block atomic="false" info="">
[16:21:02.597]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:21:02.607]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:21:02.607]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:21:02.607]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:21:02.607]      __ap = 0; //lets make sure we reset the access point selection
[16:21:02.607]        // -> [__ap <= 0x00000000]
[16:21:02.607]    </block>
[16:21:02.607]  </sequence>
[16:21:02.607]  
[16:21:02.657]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:21:02.657]  
[16:21:02.657]  <debugvars>
[16:21:02.657]    // Pre-defined
[16:21:02.657]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:21:02.657]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:21:02.657]    __dp=0x00000000
[16:21:02.657]    __ap=0x00000000
[16:21:02.657]    __traceout=0x00000000      (Trace Disabled)
[16:21:02.657]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:21:02.657]    __FlashAddr=0x00000000
[16:21:02.657]    __FlashLen=0x00000000
[16:21:02.657]    __FlashArg=0x00000000
[16:21:02.657]    __FlashOp=0x00000000
[16:21:02.657]    __Result=0x00000000
[16:21:02.657]  </debugvars>
[16:21:02.657]  
[16:21:02.657]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:21:02.657]    <block atomic="false" info="">
[16:21:02.657]      __var deviceID = 0;
[16:21:02.657]        // -> [deviceID <= 0x00000000]
[16:21:02.657]      __var version = 0;
[16:21:02.657]        // -> [version <= 0x00000000]
[16:21:02.657]      __var partNum = 0;
[16:21:02.657]        // -> [partNum <= 0x00000000]
[16:21:02.657]      __var manuf = 0;
[16:21:02.657]        // -> [manuf <= 0x00000000]
[16:21:02.657]      __var isMSPM0G1X0X_G3X0X = 0;
[16:21:02.657]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:21:02.657]      __var isProduction = 0;
[16:21:02.657]        // -> [isProduction <= 0x00000000]
[16:21:02.657]      __var continueId = 0;
[16:21:02.657]        // -> [continueId <= 0x00000000]
[16:21:02.657]      deviceID =   Read32(0x41C40004);
[16:21:02.667]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:21:02.667]        // -> [deviceID <= 0x2BB8802F]
[16:21:02.667]      version = deviceID >> 28;
[16:21:02.667]        // -> [version <= 0x00000002]
[16:21:02.667]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:21:02.667]        // -> [partNum <= 0x0000BB88]
[16:21:02.667]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:21:02.667]        // -> [manuf <= 0x00000017]
[16:21:02.667]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:21:02.667]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:21:02.667]      isProduction = (version > 0);
[16:21:02.667]        // -> [isProduction <= 0x00000001]
[16:21:02.667]    </block>
[16:21:02.667]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:21:02.667]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:21:02.667]        // =>  FALSE
[16:21:02.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:21:02.667]    </control>
[16:21:02.667]    <control if="continueId == 4" while="" timeout="0" info="">
[16:21:02.667]      // if-block "continueId == 4"
[16:21:02.677]        // =>  FALSE
[16:21:02.677]      // skip if-block "continueId == 4"
[16:21:02.677]    </control>
[16:21:02.677]    <control if="!isProduction" while="" timeout="0" info="">
[16:21:02.677]      // if-block "!isProduction"
[16:21:02.677]        // =>  FALSE
[16:21:02.677]      // skip if-block "!isProduction"
[16:21:02.677]    </control>
[16:21:02.677]  </sequence>
[16:21:02.677]  
[16:24:27.841]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:24:27.841]  
[16:24:27.858]  <debugvars>
[16:24:27.858]    // Pre-defined
[16:24:27.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:27.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:27.858]    __dp=0x00000000
[16:24:27.858]    __ap=0x00000000
[16:24:27.858]    __traceout=0x00000000      (Trace Disabled)
[16:24:27.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:27.858]    __FlashAddr=0x00000000
[16:24:27.858]    __FlashLen=0x00000000
[16:24:27.858]    __FlashArg=0x00000000
[16:24:27.858]    __FlashOp=0x00000000
[16:24:27.858]    __Result=0x00000000
[16:24:27.858]  </debugvars>
[16:24:27.858]  
[16:24:27.858]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:24:27.858]    <block atomic="false" info="">
[16:24:27.858]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:24:27.858]        // -> [isSWJ <= 0x00000001]
[16:24:27.858]      __var hasDormant = __protocol & 0x00020000;
[16:24:27.858]        // -> [hasDormant <= 0x00000000]
[16:24:27.858]      __var protType   = __protocol & 0x0000FFFF;
[16:24:27.858]        // -> [protType <= 0x00000002]
[16:24:27.858]    </block>
[16:24:27.858]    <control if="protType == 1" while="" timeout="0" info="">
[16:24:27.858]      // if-block "protType == 1"
[16:24:27.858]        // =>  FALSE
[16:24:27.858]      // skip if-block "protType == 1"
[16:24:27.861]    </control>
[16:24:27.861]    <control if="protType == 2" while="" timeout="0" info="">
[16:24:27.861]      // if-block "protType == 2"
[16:24:27.861]        // =>  TRUE
[16:24:27.861]      <control if="isSWJ" while="" timeout="0" info="">
[16:24:27.861]        // if-block "isSWJ"
[16:24:27.861]          // =>  TRUE
[16:24:27.861]        <control if="hasDormant" while="" timeout="0" info="">
[16:24:27.861]          // if-block "hasDormant"
[16:24:27.861]            // =>  FALSE
[16:24:27.861]          // skip if-block "hasDormant"
[16:24:27.861]        </control>
[16:24:27.861]        <control if="!hasDormant" while="" timeout="0" info="">
[16:24:27.861]          // if-block "!hasDormant"
[16:24:27.861]            // =>  TRUE
[16:24:27.861]          <block atomic="false" info="">
[16:24:27.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:24:27.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:27.861]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:24:27.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:24:27.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:24:27.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:27.873]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:24:27.873]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:24:27.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:24:27.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:24:27.873]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:24:27.883]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:24:27.883]          </block>
[16:24:27.883]          // end if-block "!hasDormant"
[16:24:27.883]        </control>
[16:24:27.883]        // end if-block "isSWJ"
[16:24:27.883]      </control>
[16:24:27.883]      <control if="!isSWJ" while="" timeout="0" info="">
[16:24:27.883]        // if-block "!isSWJ"
[16:24:27.883]          // =>  FALSE
[16:24:27.883]        // skip if-block "!isSWJ"
[16:24:27.883]      </control>
[16:24:27.883]      <block atomic="false" info="">
[16:24:27.883]        ReadDP(0x0);
[16:24:27.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:24:27.883]      </block>
[16:24:27.883]      // end if-block "protType == 2"
[16:24:27.883]    </control>
[16:24:27.883]  </sequence>
[16:24:27.883]  
[16:24:27.891]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:24:27.891]  
[16:24:27.891]  <debugvars>
[16:24:27.891]    // Pre-defined
[16:24:27.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:27.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:27.891]    __dp=0x00000000
[16:24:27.891]    __ap=0x00000000
[16:24:27.891]    __traceout=0x00000000      (Trace Disabled)
[16:24:27.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:27.891]    __FlashAddr=0x00000000
[16:24:27.891]    __FlashLen=0x00000000
[16:24:27.891]    __FlashArg=0x00000000
[16:24:27.891]    __FlashOp=0x00000000
[16:24:27.891]    __Result=0x00000000
[16:24:27.891]  </debugvars>
[16:24:27.891]  
[16:24:27.891]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:24:27.891]    <block atomic="false" info="">
[16:24:27.891]      __var SW_DP_ABORT       = 0x0;
[16:24:27.891]        // -> [SW_DP_ABORT <= 0x00000000]
[16:24:27.891]      __var DP_CTRL_STAT      = 0x4;
[16:24:27.891]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:24:27.891]      __var DP_SELECT         = 0x8;
[16:24:27.891]        // -> [DP_SELECT <= 0x00000008]
[16:24:27.891]      __var powered_down      = 0;
[16:24:27.891]        // -> [powered_down <= 0x00000000]
[16:24:27.891]      WriteDP(DP_SELECT, 0x00000000);
[16:24:27.901]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:24:27.901]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:24:27.901]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:24:27.901]        // -> [powered_down <= 0x00000001]
[16:24:27.901]    </block>
[16:24:27.912]    <control if="powered_down" while="" timeout="0" info="">
[16:24:27.912]      // if-block "powered_down"
[16:24:27.912]        // =>  TRUE
[16:24:27.912]      <block atomic="false" info="">
[16:24:27.912]        Message(0, "Debug/System power-up request sent");
[16:24:27.912]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:24:27.922]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:24:27.922]      </block>
[16:24:27.922]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:24:27.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:24:27.932]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:24:27.932]        // while-condition  =>  FALSE
[16:24:27.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:24:27.932]      </control>
[16:24:27.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:24:27.932]        // if-block "(__protocol & 0xFFFF) == 1"
[16:24:27.932]          // =>  FALSE
[16:24:27.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:24:27.932]      </control>
[16:24:27.932]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:24:27.932]        // if-block "(__protocol & 0xFFFF) == 2"
[16:24:27.932]          // =>  TRUE
[16:24:27.932]        <block atomic="false" info="">
[16:24:27.932]          Message(0, "executing SWD power up");
[16:24:27.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:24:27.932]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:24:27.932]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:24:27.943]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:24:27.943]        </block>
[16:24:27.943]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:24:27.943]      </control>
[16:24:27.943]      // end if-block "powered_down"
[16:24:27.943]    </control>
[16:24:27.943]    <block atomic="false" info="">
[16:24:27.943]      __var DEBUG_PORT_VAL    = 0;
[16:24:27.943]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:24:27.943]      __var ACCESS_POINT_VAL  = 0;
[16:24:27.943]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:24:27.943]      __ap = 1; 
[16:24:27.943]        // -> [__ap <= 0x00000001]
[16:24:27.943]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:24:27.952]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:24:27.952]      __ap = 4;
[16:24:27.952]        // -> [__ap <= 0x00000004]
[16:24:27.952]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:24:27.964]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:24:27.964]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:24:27.964]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:24:27.964]    </block>
[16:24:27.964]    <block atomic="false" info="">
[16:24:27.964]      __var nReset = 0x80;
[16:24:27.964]        // -> [nReset <= 0x00000080]
[16:24:27.964]      __var canReadPins = 0;
[16:24:27.964]        // -> [canReadPins <= 0x00000000]
[16:24:27.964]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:24:27.972]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:24:27.972]        // -> [canReadPins <= 0x00000001]
[16:24:27.972]    </block>
[16:24:27.972]    <control if="" while="1" timeout="200" info="">
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.972]      // while-condition  =>  TRUE
[16:24:27.972]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.982]      // while-condition  =>  TRUE
[16:24:27.982]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.983]      // while "1"  (timeout="200")
[16:24:27.983]      // while-condition  =>  TRUE
[16:24:27.992]      // while "1"  (timeout="200")
[16:24:27.992]      // while  =>  TIMEOUT
[16:24:27.992]      // end while "1"
[16:24:27.992]    </control>
[16:24:27.992]    <control if="canReadPins" while="" timeout="0" info="">
[16:24:27.992]      // if-block "canReadPins"
[16:24:27.992]        // =>  TRUE
[16:24:27.992]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:24:27.992]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:24:27.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:24:27.992]        // while-condition  =>  FALSE
[16:24:27.992]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:24:27.992]      </control>
[16:24:27.992]      // end if-block "canReadPins"
[16:24:27.992]    </control>
[16:24:27.992]    <control if="!canReadPins" while="" timeout="0" info="">
[16:24:27.992]      // if-block "!canReadPins"
[16:24:27.992]        // =>  FALSE
[16:24:27.992]      // skip if-block "!canReadPins"
[16:24:27.992]    </control>
[16:24:27.992]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:24:27.992]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:24:27.992]        // =>  TRUE
[16:24:27.992]      <block atomic="false" info="">
[16:24:27.992]        WriteAP(0x00, 0x190008);
[16:24:28.003]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:24:28.003]        WriteAP(0xF0, 0x01);
[16:24:28.025]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:24:28.025]      </block>
[16:24:28.025]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:24:28.025]    </control>
[16:24:28.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:24:28.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:24:28.025]        // =>  FALSE
[16:24:28.025]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:24:28.025]    </control>
[16:24:28.025]    <block atomic="false" info="">
[16:24:28.025]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:24:28.033]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:24:28.033]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:24:28.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:24:28.033]      __ap = 0; //lets make sure we reset the access point selection
[16:24:28.033]        // -> [__ap <= 0x00000000]
[16:24:28.033]    </block>
[16:24:28.033]  </sequence>
[16:24:28.033]  
[16:24:28.093]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:24:28.093]  
[16:24:28.093]  <debugvars>
[16:24:28.093]    // Pre-defined
[16:24:28.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:24:28.093]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:24:28.093]    __dp=0x00000000
[16:24:28.093]    __ap=0x00000000
[16:24:28.093]    __traceout=0x00000000      (Trace Disabled)
[16:24:28.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:24:28.093]    __FlashAddr=0x00000000
[16:24:28.093]    __FlashLen=0x00000000
[16:24:28.093]    __FlashArg=0x00000000
[16:24:28.093]    __FlashOp=0x00000000
[16:24:28.093]    __Result=0x00000000
[16:24:28.093]  </debugvars>
[16:24:28.093]  
[16:24:28.093]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:24:28.093]    <block atomic="false" info="">
[16:24:28.093]      __var deviceID = 0;
[16:24:28.093]        // -> [deviceID <= 0x00000000]
[16:24:28.093]      __var version = 0;
[16:24:28.093]        // -> [version <= 0x00000000]
[16:24:28.093]      __var partNum = 0;
[16:24:28.093]        // -> [partNum <= 0x00000000]
[16:24:28.093]      __var manuf = 0;
[16:24:28.093]        // -> [manuf <= 0x00000000]
[16:24:28.093]      __var isMSPM0G1X0X_G3X0X = 0;
[16:24:28.093]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:24:28.093]      __var isProduction = 0;
[16:24:28.093]        // -> [isProduction <= 0x00000000]
[16:24:28.093]      __var continueId = 0;
[16:24:28.093]        // -> [continueId <= 0x00000000]
[16:24:28.093]      deviceID =   Read32(0x41C40004);
[16:24:28.113]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:24:28.113]        // -> [deviceID <= 0x2BB8802F]
[16:24:28.113]      version = deviceID >> 28;
[16:24:28.113]        // -> [version <= 0x00000002]
[16:24:28.113]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:24:28.113]        // -> [partNum <= 0x0000BB88]
[16:24:28.113]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:24:28.113]        // -> [manuf <= 0x00000017]
[16:24:28.113]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:24:28.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:24:28.113]      isProduction = (version > 0);
[16:24:28.113]        // -> [isProduction <= 0x00000001]
[16:24:28.113]    </block>
[16:24:28.113]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:24:28.113]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:24:28.113]        // =>  FALSE
[16:24:28.113]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:24:28.113]    </control>
[16:24:28.113]    <control if="continueId == 4" while="" timeout="0" info="">
[16:24:28.113]      // if-block "continueId == 4"
[16:24:28.113]        // =>  FALSE
[16:24:28.113]      // skip if-block "continueId == 4"
[16:24:28.113]    </control>
[16:24:28.113]    <control if="!isProduction" while="" timeout="0" info="">
[16:24:28.113]      // if-block "!isProduction"
[16:24:28.113]        // =>  FALSE
[16:24:28.113]      // skip if-block "!isProduction"
[16:24:28.113]    </control>
[16:24:28.113]  </sequence>
[16:24:28.113]  
[16:25:09.404]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:25:09.404]  
[16:25:09.420]  <debugvars>
[16:25:09.420]    // Pre-defined
[16:25:09.420]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.420]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.420]    __dp=0x00000000
[16:25:09.421]    __ap=0x00000000
[16:25:09.421]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.421]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.421]    __FlashAddr=0x00000000
[16:25:09.421]    __FlashLen=0x00000000
[16:25:09.421]    __FlashArg=0x00000000
[16:25:09.421]    __FlashOp=0x00000000
[16:25:09.421]    __Result=0x00000000
[16:25:09.421]  </debugvars>
[16:25:09.421]  
[16:25:09.421]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:25:09.421]    <block atomic="false" info="">
[16:25:09.421]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:25:09.421]        // -> [isSWJ <= 0x00000001]
[16:25:09.421]      __var hasDormant = __protocol & 0x00020000;
[16:25:09.421]        // -> [hasDormant <= 0x00000000]
[16:25:09.422]      __var protType   = __protocol & 0x0000FFFF;
[16:25:09.422]        // -> [protType <= 0x00000002]
[16:25:09.422]    </block>
[16:25:09.422]    <control if="protType == 1" while="" timeout="0" info="">
[16:25:09.422]      // if-block "protType == 1"
[16:25:09.422]        // =>  FALSE
[16:25:09.422]      // skip if-block "protType == 1"
[16:25:09.422]    </control>
[16:25:09.422]    <control if="protType == 2" while="" timeout="0" info="">
[16:25:09.422]      // if-block "protType == 2"
[16:25:09.422]        // =>  TRUE
[16:25:09.422]      <control if="isSWJ" while="" timeout="0" info="">
[16:25:09.422]        // if-block "isSWJ"
[16:25:09.422]          // =>  TRUE
[16:25:09.422]        <control if="hasDormant" while="" timeout="0" info="">
[16:25:09.422]          // if-block "hasDormant"
[16:25:09.422]            // =>  FALSE
[16:25:09.424]          // skip if-block "hasDormant"
[16:25:09.424]        </control>
[16:25:09.424]        <control if="!hasDormant" while="" timeout="0" info="">
[16:25:09.424]          // if-block "!hasDormant"
[16:25:09.424]            // =>  TRUE
[16:25:09.424]          <block atomic="false" info="">
[16:25:09.424]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:25:09.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.426]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:25:09.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:25:09.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:25:09.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.435]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:25:09.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:25:09.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:25:09.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:09.446]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:25:09.448]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:25:09.448]          </block>
[16:25:09.448]          // end if-block "!hasDormant"
[16:25:09.448]        </control>
[16:25:09.448]        // end if-block "isSWJ"
[16:25:09.448]      </control>
[16:25:09.448]      <control if="!isSWJ" while="" timeout="0" info="">
[16:25:09.448]        // if-block "!isSWJ"
[16:25:09.448]          // =>  FALSE
[16:25:09.448]        // skip if-block "!isSWJ"
[16:25:09.448]      </control>
[16:25:09.448]      <block atomic="false" info="">
[16:25:09.448]        ReadDP(0x0);
[16:25:09.454]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:25:09.454]      </block>
[16:25:09.454]      // end if-block "protType == 2"
[16:25:09.454]    </control>
[16:25:09.454]  </sequence>
[16:25:09.454]  
[16:25:09.466]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:25:09.466]  
[16:25:09.466]  <debugvars>
[16:25:09.466]    // Pre-defined
[16:25:09.466]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.466]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.466]    __dp=0x00000000
[16:25:09.466]    __ap=0x00000000
[16:25:09.466]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.466]    __FlashAddr=0x00000000
[16:25:09.466]    __FlashLen=0x00000000
[16:25:09.466]    __FlashArg=0x00000000
[16:25:09.466]    __FlashOp=0x00000000
[16:25:09.466]    __Result=0x00000000
[16:25:09.466]  </debugvars>
[16:25:09.466]  
[16:25:09.466]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:25:09.466]    <block atomic="false" info="">
[16:25:09.466]      __var SW_DP_ABORT       = 0x0;
[16:25:09.466]        // -> [SW_DP_ABORT <= 0x00000000]
[16:25:09.466]      __var DP_CTRL_STAT      = 0x4;
[16:25:09.466]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:25:09.466]      __var DP_SELECT         = 0x8;
[16:25:09.466]        // -> [DP_SELECT <= 0x00000008]
[16:25:09.466]      __var powered_down      = 0;
[16:25:09.466]        // -> [powered_down <= 0x00000000]
[16:25:09.466]      WriteDP(DP_SELECT, 0x00000000);
[16:25:09.474]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:25:09.474]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:25:09.489]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:25:09.489]        // -> [powered_down <= 0x00000001]
[16:25:09.489]    </block>
[16:25:09.489]    <control if="powered_down" while="" timeout="0" info="">
[16:25:09.489]      // if-block "powered_down"
[16:25:09.489]        // =>  TRUE
[16:25:09.489]      <block atomic="false" info="">
[16:25:09.489]        Message(0, "Debug/System power-up request sent");
[16:25:09.489]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:25:09.495]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:25:09.495]      </block>
[16:25:09.495]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:25:09.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:25:09.495]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:25:09.495]        // while-condition  =>  FALSE
[16:25:09.495]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:25:09.495]      </control>
[16:25:09.495]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:25:09.495]        // if-block "(__protocol & 0xFFFF) == 1"
[16:25:09.495]          // =>  FALSE
[16:25:09.495]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:25:09.495]      </control>
[16:25:09.495]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:25:09.504]        // if-block "(__protocol & 0xFFFF) == 2"
[16:25:09.505]          // =>  TRUE
[16:25:09.505]        <block atomic="false" info="">
[16:25:09.505]          Message(0, "executing SWD power up");
[16:25:09.506]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:25:09.514]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:25:09.514]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:25:09.520]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:25:09.520]        </block>
[16:25:09.520]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:25:09.520]      </control>
[16:25:09.520]      // end if-block "powered_down"
[16:25:09.520]    </control>
[16:25:09.520]    <block atomic="false" info="">
[16:25:09.520]      __var DEBUG_PORT_VAL    = 0;
[16:25:09.520]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:25:09.520]      __var ACCESS_POINT_VAL  = 0;
[16:25:09.520]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:25:09.520]      __ap = 1; 
[16:25:09.520]        // -> [__ap <= 0x00000001]
[16:25:09.520]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:25:09.528]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:25:09.528]      __ap = 4;
[16:25:09.528]        // -> [__ap <= 0x00000004]
[16:25:09.528]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:09.544]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.544]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:25:09.544]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:09.544]    </block>
[16:25:09.544]    <block atomic="false" info="">
[16:25:09.544]      __var nReset = 0x80;
[16:25:09.544]        // -> [nReset <= 0x00000080]
[16:25:09.544]      __var canReadPins = 0;
[16:25:09.544]        // -> [canReadPins <= 0x00000000]
[16:25:09.544]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:25:09.549]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:25:09.549]        // -> [canReadPins <= 0x00000001]
[16:25:09.549]    </block>
[16:25:09.549]    <control if="" while="1" timeout="200" info="">
[16:25:09.549]      // while "1"  (timeout="200")
[16:25:09.549]      // while-condition  =>  TRUE
[16:25:09.549]      // while "1"  (timeout="200")
[16:25:09.549]      // while-condition  =>  TRUE
[16:25:09.549]      // while "1"  (timeout="200")
[16:25:09.549]      // while-condition  =>  TRUE
[16:25:09.549]      // while "1"  (timeout="200")
[16:25:09.554]      // while-condition  =>  TRUE
[16:25:09.554]      // while "1"  (timeout="200")
[16:25:09.554]      // while  =>  TIMEOUT
[16:25:09.554]      // end while "1"
[16:25:09.554]    </control>
[16:25:09.554]    <control if="canReadPins" while="" timeout="0" info="">
[16:25:09.554]      // if-block "canReadPins"
[16:25:09.554]        // =>  TRUE
[16:25:09.554]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:25:09.554]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:25:09.558]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:25:09.558]        // while-condition  =>  FALSE
[16:25:09.558]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:25:09.558]      </control>
[16:25:09.558]      // end if-block "canReadPins"
[16:25:09.558]    </control>
[16:25:09.558]    <control if="!canReadPins" while="" timeout="0" info="">
[16:25:09.558]      // if-block "!canReadPins"
[16:25:09.558]        // =>  FALSE
[16:25:09.558]      // skip if-block "!canReadPins"
[16:25:09.558]    </control>
[16:25:09.558]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:25:09.558]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:09.558]        // =>  TRUE
[16:25:09.558]      <block atomic="false" info="">
[16:25:09.558]        WriteAP(0x00, 0x190008);
[16:25:09.564]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.564]        WriteAP(0xF0, 0x01);
[16:25:09.585]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.585]      </block>
[16:25:09.585]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:09.585]    </control>
[16:25:09.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:25:09.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:09.585]        // =>  FALSE
[16:25:09.585]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:09.585]    </control>
[16:25:09.585]    <block atomic="false" info="">
[16:25:09.585]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:09.595]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:25:09.595]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:25:09.595]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:09.595]      __ap = 0; //lets make sure we reset the access point selection
[16:25:09.595]        // -> [__ap <= 0x00000000]
[16:25:09.599]    </block>
[16:25:09.599]  </sequence>
[16:25:09.599]  
[16:25:09.665]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:25:09.665]  
[16:25:09.665]  <debugvars>
[16:25:09.665]    // Pre-defined
[16:25:09.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:09.665]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:25:09.665]    __dp=0x00000000
[16:25:09.665]    __ap=0x00000000
[16:25:09.665]    __traceout=0x00000000      (Trace Disabled)
[16:25:09.665]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:09.665]    __FlashAddr=0x00000000
[16:25:09.665]    __FlashLen=0x00000000
[16:25:09.665]    __FlashArg=0x00000000
[16:25:09.665]    __FlashOp=0x00000000
[16:25:09.665]    __Result=0x00000000
[16:25:09.672]  </debugvars>
[16:25:09.672]  
[16:25:09.672]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:25:09.672]    <block atomic="false" info="">
[16:25:09.672]      __var deviceID = 0;
[16:25:09.672]        // -> [deviceID <= 0x00000000]
[16:25:09.672]      __var version = 0;
[16:25:09.672]        // -> [version <= 0x00000000]
[16:25:09.672]      __var partNum = 0;
[16:25:09.672]        // -> [partNum <= 0x00000000]
[16:25:09.672]      __var manuf = 0;
[16:25:09.672]        // -> [manuf <= 0x00000000]
[16:25:09.672]      __var isMSPM0G1X0X_G3X0X = 0;
[16:25:09.672]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:25:09.672]      __var isProduction = 0;
[16:25:09.673]        // -> [isProduction <= 0x00000000]
[16:25:09.673]      __var continueId = 0;
[16:25:09.673]        // -> [continueId <= 0x00000000]
[16:25:09.673]      deviceID =   Read32(0x41C40004);
[16:25:09.693]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:25:09.694]        // -> [deviceID <= 0x2BB8802F]
[16:25:09.694]      version = deviceID >> 28;
[16:25:09.695]        // -> [version <= 0x00000002]
[16:25:09.695]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:25:09.695]        // -> [partNum <= 0x0000BB88]
[16:25:09.695]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:25:09.695]        // -> [manuf <= 0x00000017]
[16:25:09.695]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:25:09.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:25:09.695]      isProduction = (version > 0);
[16:25:09.696]        // -> [isProduction <= 0x00000001]
[16:25:09.696]    </block>
[16:25:09.696]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:25:09.696]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:25:09.696]        // =>  FALSE
[16:25:09.696]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:25:09.696]    </control>
[16:25:09.696]    <control if="continueId == 4" while="" timeout="0" info="">
[16:25:09.696]      // if-block "continueId == 4"
[16:25:09.696]        // =>  FALSE
[16:25:09.696]      // skip if-block "continueId == 4"
[16:25:09.697]    </control>
[16:25:09.697]    <control if="!isProduction" while="" timeout="0" info="">
[16:25:09.697]      // if-block "!isProduction"
[16:25:09.697]        // =>  FALSE
[16:25:09.697]      // skip if-block "!isProduction"
[16:25:09.697]    </control>
[16:25:09.697]  </sequence>
[16:25:09.697]  
[16:26:40.167]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:26:40.167]  
[16:26:40.182]  <debugvars>
[16:26:40.182]    // Pre-defined
[16:26:40.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:40.182]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:26:40.182]    __dp=0x00000000
[16:26:40.182]    __ap=0x00000000
[16:26:40.182]    __traceout=0x00000000      (Trace Disabled)
[16:26:40.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:40.182]    __FlashAddr=0x00000000
[16:26:40.183]    __FlashLen=0x00000000
[16:26:40.183]    __FlashArg=0x00000000
[16:26:40.183]    __FlashOp=0x00000000
[16:26:40.183]    __Result=0x00000000
[16:26:40.183]  </debugvars>
[16:26:40.183]  
[16:26:40.183]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:26:40.183]    <block atomic="false" info="">
[16:26:40.183]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:26:40.183]        // -> [isSWJ <= 0x00000001]
[16:26:40.183]      __var hasDormant = __protocol & 0x00020000;
[16:26:40.183]        // -> [hasDormant <= 0x00000000]
[16:26:40.183]      __var protType   = __protocol & 0x0000FFFF;
[16:26:40.183]        // -> [protType <= 0x00000002]
[16:26:40.185]    </block>
[16:26:40.185]    <control if="protType == 1" while="" timeout="0" info="">
[16:26:40.185]      // if-block "protType == 1"
[16:26:40.185]        // =>  FALSE
[16:26:40.185]      // skip if-block "protType == 1"
[16:26:40.185]    </control>
[16:26:40.185]    <control if="protType == 2" while="" timeout="0" info="">
[16:26:40.185]      // if-block "protType == 2"
[16:26:40.185]        // =>  TRUE
[16:26:40.185]      <control if="isSWJ" while="" timeout="0" info="">
[16:26:40.185]        // if-block "isSWJ"
[16:26:40.185]          // =>  TRUE
[16:26:40.186]        <control if="hasDormant" while="" timeout="0" info="">
[16:26:40.186]          // if-block "hasDormant"
[16:26:40.186]            // =>  FALSE
[16:26:40.186]          // skip if-block "hasDormant"
[16:26:40.186]        </control>
[16:26:40.186]        <control if="!hasDormant" while="" timeout="0" info="">
[16:26:40.186]          // if-block "!hasDormant"
[16:26:40.186]            // =>  TRUE
[16:26:40.187]          <block atomic="false" info="">
[16:26:40.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:26:40.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:40.190]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:26:40.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:26:40.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:26:40.195]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:40.195]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:26:40.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:26:40.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:26:40.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:40.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:26:40.211]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:26:40.213]          </block>
[16:26:40.213]          // end if-block "!hasDormant"
[16:26:40.213]        </control>
[16:26:40.213]        // end if-block "isSWJ"
[16:26:40.213]      </control>
[16:26:40.213]      <control if="!isSWJ" while="" timeout="0" info="">
[16:26:40.213]        // if-block "!isSWJ"
[16:26:40.213]          // =>  FALSE
[16:26:40.213]        // skip if-block "!isSWJ"
[16:26:40.213]      </control>
[16:26:40.213]      <block atomic="false" info="">
[16:26:40.213]        ReadDP(0x0);
[16:26:40.213]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:26:40.213]      </block>
[16:26:40.213]      // end if-block "protType == 2"
[16:26:40.213]    </control>
[16:26:40.213]  </sequence>
[16:26:40.213]  
[16:26:40.230]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:26:40.230]  
[16:26:40.230]  <debugvars>
[16:26:40.230]    // Pre-defined
[16:26:40.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:40.230]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:26:40.230]    __dp=0x00000000
[16:26:40.230]    __ap=0x00000000
[16:26:40.230]    __traceout=0x00000000      (Trace Disabled)
[16:26:40.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:40.230]    __FlashAddr=0x00000000
[16:26:40.230]    __FlashLen=0x00000000
[16:26:40.230]    __FlashArg=0x00000000
[16:26:40.230]    __FlashOp=0x00000000
[16:26:40.230]    __Result=0x00000000
[16:26:40.230]  </debugvars>
[16:26:40.230]  
[16:26:40.230]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:26:40.230]    <block atomic="false" info="">
[16:26:40.230]      __var SW_DP_ABORT       = 0x0;
[16:26:40.230]        // -> [SW_DP_ABORT <= 0x00000000]
[16:26:40.230]      __var DP_CTRL_STAT      = 0x4;
[16:26:40.230]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:26:40.230]      __var DP_SELECT         = 0x8;
[16:26:40.232]        // -> [DP_SELECT <= 0x00000008]
[16:26:40.232]      __var powered_down      = 0;
[16:26:40.232]        // -> [powered_down <= 0x00000000]
[16:26:40.232]      WriteDP(DP_SELECT, 0x00000000);
[16:26:40.240]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:26:40.240]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:26:40.245]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:26:40.246]        // -> [powered_down <= 0x00000001]
[16:26:40.246]    </block>
[16:26:40.246]    <control if="powered_down" while="" timeout="0" info="">
[16:26:40.246]      // if-block "powered_down"
[16:26:40.246]        // =>  TRUE
[16:26:40.246]      <block atomic="false" info="">
[16:26:40.246]        Message(0, "Debug/System power-up request sent");
[16:26:40.248]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:26:40.267]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:26:40.268]      </block>
[16:26:40.268]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:26:40.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:26:40.280]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:26:40.280]        // while-condition  =>  FALSE
[16:26:40.280]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:26:40.280]      </control>
[16:26:40.280]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:26:40.280]        // if-block "(__protocol & 0xFFFF) == 1"
[16:26:40.281]          // =>  FALSE
[16:26:40.281]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:26:40.281]      </control>
[16:26:40.281]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:26:40.281]        // if-block "(__protocol & 0xFFFF) == 2"
[16:26:40.281]          // =>  TRUE
[16:26:40.281]        <block atomic="false" info="">
[16:26:40.281]          Message(0, "executing SWD power up");
[16:26:40.284]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:26:40.293]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:26:40.293]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:26:40.293]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:26:40.300]        </block>
[16:26:40.300]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:26:40.300]      </control>
[16:26:40.300]      // end if-block "powered_down"
[16:26:40.300]    </control>
[16:26:40.300]    <block atomic="false" info="">
[16:26:40.300]      __var DEBUG_PORT_VAL    = 0;
[16:26:40.300]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:26:40.300]      __var ACCESS_POINT_VAL  = 0;
[16:26:40.300]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:26:40.301]      __ap = 1; 
[16:26:40.301]        // -> [__ap <= 0x00000001]
[16:26:40.301]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:26:40.311]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:26:40.311]      __ap = 4;
[16:26:40.311]        // -> [__ap <= 0x00000004]
[16:26:40.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:40.317]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:26:40.317]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:26:40.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:40.322]    </block>
[16:26:40.322]    <block atomic="false" info="">
[16:26:40.322]      __var nReset = 0x80;
[16:26:40.322]        // -> [nReset <= 0x00000080]
[16:26:40.325]      __var canReadPins = 0;
[16:26:40.325]        // -> [canReadPins <= 0x00000000]
[16:26:40.325]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:26:40.331]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:26:40.331]        // -> [canReadPins <= 0x00000001]
[16:26:40.331]    </block>
[16:26:40.331]    <control if="" while="1" timeout="200" info="">
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.331]      // while "1"  (timeout="200")
[16:26:40.331]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.341]      // while "1"  (timeout="200")
[16:26:40.341]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.346]      // while "1"  (timeout="200")
[16:26:40.346]      // while-condition  =>  TRUE
[16:26:40.351]      // while "1"  (timeout="200")
[16:26:40.351]      // while  =>  TIMEOUT
[16:26:40.351]      // end while "1"
[16:26:40.351]    </control>
[16:26:40.351]    <control if="canReadPins" while="" timeout="0" info="">
[16:26:40.351]      // if-block "canReadPins"
[16:26:40.351]        // =>  TRUE
[16:26:40.351]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:26:40.351]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:26:40.361]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:26:40.361]        // while-condition  =>  FALSE
[16:26:40.361]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:26:40.361]      </control>
[16:26:40.361]      // end if-block "canReadPins"
[16:26:40.361]    </control>
[16:26:40.361]    <control if="!canReadPins" while="" timeout="0" info="">
[16:26:40.361]      // if-block "!canReadPins"
[16:26:40.361]        // =>  FALSE
[16:26:40.361]      // skip if-block "!canReadPins"
[16:26:40.361]    </control>
[16:26:40.361]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:26:40.361]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:40.361]        // =>  TRUE
[16:26:40.361]      <block atomic="false" info="">
[16:26:40.361]        WriteAP(0x00, 0x190008);
[16:26:40.361]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:40.361]        WriteAP(0xF0, 0x01);
[16:26:40.376]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:26:40.376]      </block>
[16:26:40.376]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:26:40.376]    </control>
[16:26:40.376]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:26:40.376]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:40.376]        // =>  FALSE
[16:26:40.376]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:26:40.376]    </control>
[16:26:40.376]    <block atomic="false" info="">
[16:26:40.376]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:26:40.388]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:26:40.388]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:26:40.388]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:26:40.393]      __ap = 0; //lets make sure we reset the access point selection
[16:26:40.393]        // -> [__ap <= 0x00000000]
[16:26:40.393]    </block>
[16:26:40.393]  </sequence>
[16:26:40.393]  
[16:26:40.432]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:26:40.432]  
[16:26:40.432]  <debugvars>
[16:26:40.432]    // Pre-defined
[16:26:40.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:26:40.432]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:26:40.432]    __dp=0x00000000
[16:26:40.432]    __ap=0x00000000
[16:26:40.432]    __traceout=0x00000000      (Trace Disabled)
[16:26:40.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:40.432]    __FlashAddr=0x00000000
[16:26:40.432]    __FlashLen=0x00000000
[16:26:40.432]    __FlashArg=0x00000000
[16:26:40.432]    __FlashOp=0x00000000
[16:26:40.432]    __Result=0x00000000
[16:26:40.432]  </debugvars>
[16:26:40.432]  
[16:26:40.432]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:26:40.432]    <block atomic="false" info="">
[16:26:40.432]      __var deviceID = 0;
[16:26:40.432]        // -> [deviceID <= 0x00000000]
[16:26:40.432]      __var version = 0;
[16:26:40.432]        // -> [version <= 0x00000000]
[16:26:40.432]      __var partNum = 0;
[16:26:40.432]        // -> [partNum <= 0x00000000]
[16:26:40.432]      __var manuf = 0;
[16:26:40.432]        // -> [manuf <= 0x00000000]
[16:26:40.432]      __var isMSPM0G1X0X_G3X0X = 0;
[16:26:40.432]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:26:40.432]      __var isProduction = 0;
[16:26:40.432]        // -> [isProduction <= 0x00000000]
[16:26:40.432]      __var continueId = 0;
[16:26:40.432]        // -> [continueId <= 0x00000000]
[16:26:40.432]      deviceID =   Read32(0x41C40004);
[16:26:40.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:26:40.463]        // -> [deviceID <= 0x2BB8802F]
[16:26:40.463]      version = deviceID >> 28;
[16:26:40.463]        // -> [version <= 0x00000002]
[16:26:40.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:26:40.463]        // -> [partNum <= 0x0000BB88]
[16:26:40.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:26:40.463]        // -> [manuf <= 0x00000017]
[16:26:40.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:26:40.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:26:40.463]      isProduction = (version > 0);
[16:26:40.463]        // -> [isProduction <= 0x00000001]
[16:26:40.463]    </block>
[16:26:40.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:26:40.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:26:40.463]        // =>  FALSE
[16:26:40.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:26:40.463]    </control>
[16:26:40.463]    <control if="continueId == 4" while="" timeout="0" info="">
[16:26:40.463]      // if-block "continueId == 4"
[16:26:40.463]        // =>  FALSE
[16:26:40.463]      // skip if-block "continueId == 4"
[16:26:40.463]    </control>
[16:26:40.463]    <control if="!isProduction" while="" timeout="0" info="">
[16:26:40.463]      // if-block "!isProduction"
[16:26:40.467]        // =>  FALSE
[16:26:40.467]      // skip if-block "!isProduction"
[16:26:40.467]    </control>
[16:26:40.467]  </sequence>
[16:26:40.467]  
[16:28:31.979]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:28:31.979]  
[16:28:31.997]  <debugvars>
[16:28:31.997]    // Pre-defined
[16:28:31.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:28:31.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:28:31.997]    __dp=0x00000000
[16:28:31.997]    __ap=0x00000000
[16:28:31.997]    __traceout=0x00000000      (Trace Disabled)
[16:28:31.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:28:31.997]    __FlashAddr=0x00000000
[16:28:31.997]    __FlashLen=0x00000000
[16:28:31.997]    __FlashArg=0x00000000
[16:28:31.997]    __FlashOp=0x00000000
[16:28:31.997]    __Result=0x00000000
[16:28:31.997]  </debugvars>
[16:28:31.997]  
[16:28:31.997]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:28:31.997]    <block atomic="false" info="">
[16:28:31.997]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:28:31.997]        // -> [isSWJ <= 0x00000001]
[16:28:31.997]      __var hasDormant = __protocol & 0x00020000;
[16:28:31.997]        // -> [hasDormant <= 0x00000000]
[16:28:31.997]      __var protType   = __protocol & 0x0000FFFF;
[16:28:31.997]        // -> [protType <= 0x00000002]
[16:28:31.997]    </block>
[16:28:31.999]    <control if="protType == 1" while="" timeout="0" info="">
[16:28:31.999]      // if-block "protType == 1"
[16:28:31.999]        // =>  FALSE
[16:28:31.999]      // skip if-block "protType == 1"
[16:28:31.999]    </control>
[16:28:31.999]    <control if="protType == 2" while="" timeout="0" info="">
[16:28:31.999]      // if-block "protType == 2"
[16:28:31.999]        // =>  TRUE
[16:28:31.999]      <control if="isSWJ" while="" timeout="0" info="">
[16:28:31.999]        // if-block "isSWJ"
[16:28:31.999]          // =>  TRUE
[16:28:31.999]        <control if="hasDormant" while="" timeout="0" info="">
[16:28:31.999]          // if-block "hasDormant"
[16:28:31.999]            // =>  FALSE
[16:28:31.999]          // skip if-block "hasDormant"
[16:28:31.999]        </control>
[16:28:31.999]        <control if="!hasDormant" while="" timeout="0" info="">
[16:28:31.999]          // if-block "!hasDormant"
[16:28:31.999]            // =>  TRUE
[16:28:31.999]          <block atomic="false" info="">
[16:28:31.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:28:31.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:28:31.999]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:28:32.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:28:32.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:28:32.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:28:32.010]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:28:32.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:28:32.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:28:32.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:28:32.019]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:28:32.019]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:28:32.019]          </block>
[16:28:32.019]          // end if-block "!hasDormant"
[16:28:32.029]        </control>
[16:28:32.029]        // end if-block "isSWJ"
[16:28:32.029]      </control>
[16:28:32.029]      <control if="!isSWJ" while="" timeout="0" info="">
[16:28:32.029]        // if-block "!isSWJ"
[16:28:32.029]          // =>  FALSE
[16:28:32.029]        // skip if-block "!isSWJ"
[16:28:32.029]      </control>
[16:28:32.029]      <block atomic="false" info="">
[16:28:32.029]        ReadDP(0x0);
[16:28:32.029]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:28:32.029]      </block>
[16:28:32.029]      // end if-block "protType == 2"
[16:28:32.029]    </control>
[16:28:32.029]  </sequence>
[16:28:32.029]  
[16:28:32.039]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:28:32.039]  
[16:28:32.039]  <debugvars>
[16:28:32.039]    // Pre-defined
[16:28:32.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:28:32.039]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:28:32.039]    __dp=0x00000000
[16:28:32.039]    __ap=0x00000000
[16:28:32.039]    __traceout=0x00000000      (Trace Disabled)
[16:28:32.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:28:32.039]    __FlashAddr=0x00000000
[16:28:32.039]    __FlashLen=0x00000000
[16:28:32.039]    __FlashArg=0x00000000
[16:28:32.039]    __FlashOp=0x00000000
[16:28:32.039]    __Result=0x00000000
[16:28:32.049]  </debugvars>
[16:28:32.049]  
[16:28:32.049]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:28:32.049]    <block atomic="false" info="">
[16:28:32.049]      __var SW_DP_ABORT       = 0x0;
[16:28:32.049]        // -> [SW_DP_ABORT <= 0x00000000]
[16:28:32.049]      __var DP_CTRL_STAT      = 0x4;
[16:28:32.049]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:28:32.049]      __var DP_SELECT         = 0x8;
[16:28:32.049]        // -> [DP_SELECT <= 0x00000008]
[16:28:32.049]      __var powered_down      = 0;
[16:28:32.049]        // -> [powered_down <= 0x00000000]
[16:28:32.049]      WriteDP(DP_SELECT, 0x00000000);
[16:28:32.049]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:28:32.049]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:28:32.059]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:28:32.059]        // -> [powered_down <= 0x00000001]
[16:28:32.059]    </block>
[16:28:32.059]    <control if="powered_down" while="" timeout="0" info="">
[16:28:32.059]      // if-block "powered_down"
[16:28:32.059]        // =>  TRUE
[16:28:32.059]      <block atomic="false" info="">
[16:28:32.059]        Message(0, "Debug/System power-up request sent");
[16:28:32.059]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:28:32.069]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:28:32.069]      </block>
[16:28:32.069]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:28:32.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:28:32.069]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:28:32.069]        // while-condition  =>  FALSE
[16:28:32.069]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:28:32.069]      </control>
[16:28:32.069]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:28:32.069]        // if-block "(__protocol & 0xFFFF) == 1"
[16:28:32.069]          // =>  FALSE
[16:28:32.069]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:28:32.069]      </control>
[16:28:32.069]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:28:32.069]        // if-block "(__protocol & 0xFFFF) == 2"
[16:28:32.069]          // =>  TRUE
[16:28:32.069]        <block atomic="false" info="">
[16:28:32.069]          Message(0, "executing SWD power up");
[16:28:32.069]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:28:32.079]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:28:32.079]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:28:32.079]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:28:32.079]        </block>
[16:28:32.079]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:28:32.079]      </control>
[16:28:32.079]      // end if-block "powered_down"
[16:28:32.079]    </control>
[16:28:32.079]    <block atomic="false" info="">
[16:28:32.079]      __var DEBUG_PORT_VAL    = 0;
[16:28:32.079]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:28:32.079]      __var ACCESS_POINT_VAL  = 0;
[16:28:32.079]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:28:32.079]      __ap = 1; 
[16:28:32.079]        // -> [__ap <= 0x00000001]
[16:28:32.079]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:28:32.089]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:28:32.089]      __ap = 4;
[16:28:32.089]        // -> [__ap <= 0x00000004]
[16:28:32.089]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:28:32.099]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:28:32.099]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:28:32.099]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:28:32.099]    </block>
[16:28:32.099]    <block atomic="false" info="">
[16:28:32.099]      __var nReset = 0x80;
[16:28:32.099]        // -> [nReset <= 0x00000080]
[16:28:32.099]      __var canReadPins = 0;
[16:28:32.099]        // -> [canReadPins <= 0x00000000]
[16:28:32.099]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:28:32.109]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:28:32.109]        // -> [canReadPins <= 0x00000001]
[16:28:32.109]    </block>
[16:28:32.109]    <control if="" while="1" timeout="200" info="">
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.109]      // while "1"  (timeout="200")
[16:28:32.109]      // while-condition  =>  TRUE
[16:28:32.119]      // while "1"  (timeout="200")
[16:28:32.119]      // while  =>  TIMEOUT
[16:28:32.119]      // end while "1"
[16:28:32.119]    </control>
[16:28:32.119]    <control if="canReadPins" while="" timeout="0" info="">
[16:28:32.119]      // if-block "canReadPins"
[16:28:32.119]        // =>  TRUE
[16:28:32.119]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:28:32.119]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:28:32.119]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:28:32.119]        // while-condition  =>  FALSE
[16:28:32.119]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:28:32.119]      </control>
[16:28:32.119]      // end if-block "canReadPins"
[16:28:32.119]    </control>
[16:28:32.119]    <control if="!canReadPins" while="" timeout="0" info="">
[16:28:32.119]      // if-block "!canReadPins"
[16:28:32.119]        // =>  FALSE
[16:28:32.119]      // skip if-block "!canReadPins"
[16:28:32.119]    </control>
[16:28:32.119]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:28:32.119]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:28:32.119]        // =>  TRUE
[16:28:32.119]      <block atomic="false" info="">
[16:28:32.119]        WriteAP(0x00, 0x190008);
[16:28:32.119]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:28:32.119]        WriteAP(0xF0, 0x01);
[16:28:32.129]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:28:32.129]      </block>
[16:28:32.129]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:28:32.129]    </control>
[16:28:32.129]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:28:32.129]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:28:32.129]        // =>  FALSE
[16:28:32.129]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:28:32.129]    </control>
[16:28:32.129]    <block atomic="false" info="">
[16:28:32.129]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:28:32.139]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:28:32.139]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:28:32.139]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:28:32.139]      __ap = 0; //lets make sure we reset the access point selection
[16:28:32.139]        // -> [__ap <= 0x00000000]
[16:28:32.139]    </block>
[16:28:32.139]  </sequence>
[16:28:32.139]  
[16:28:32.179]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:28:32.179]  
[16:28:32.179]  <debugvars>
[16:28:32.179]    // Pre-defined
[16:28:32.179]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:28:32.179]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:28:32.179]    __dp=0x00000000
[16:28:32.179]    __ap=0x00000000
[16:28:32.179]    __traceout=0x00000000      (Trace Disabled)
[16:28:32.179]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:28:32.179]    __FlashAddr=0x00000000
[16:28:32.179]    __FlashLen=0x00000000
[16:28:32.179]    __FlashArg=0x00000000
[16:28:32.179]    __FlashOp=0x00000000
[16:28:32.179]    __Result=0x00000000
[16:28:32.179]  </debugvars>
[16:28:32.179]  
[16:28:32.179]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:28:32.189]    <block atomic="false" info="">
[16:28:32.189]      __var deviceID = 0;
[16:28:32.189]        // -> [deviceID <= 0x00000000]
[16:28:32.189]      __var version = 0;
[16:28:32.189]        // -> [version <= 0x00000000]
[16:28:32.189]      __var partNum = 0;
[16:28:32.189]        // -> [partNum <= 0x00000000]
[16:28:32.189]      __var manuf = 0;
[16:28:32.189]        // -> [manuf <= 0x00000000]
[16:28:32.189]      __var isMSPM0G1X0X_G3X0X = 0;
[16:28:32.189]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:28:32.189]      __var isProduction = 0;
[16:28:32.189]        // -> [isProduction <= 0x00000000]
[16:28:32.189]      __var continueId = 0;
[16:28:32.189]        // -> [continueId <= 0x00000000]
[16:28:32.189]      deviceID =   Read32(0x41C40004);
[16:28:32.200]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:28:32.200]        // -> [deviceID <= 0x2BB8802F]
[16:28:32.200]      version = deviceID >> 28;
[16:28:32.200]        // -> [version <= 0x00000002]
[16:28:32.200]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:28:32.200]        // -> [partNum <= 0x0000BB88]
[16:28:32.200]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:28:32.200]        // -> [manuf <= 0x00000017]
[16:28:32.200]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:28:32.200]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:28:32.200]      isProduction = (version > 0);
[16:28:32.200]        // -> [isProduction <= 0x00000001]
[16:28:32.200]    </block>
[16:28:32.200]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:28:32.200]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:28:32.210]        // =>  FALSE
[16:28:32.210]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:28:32.210]    </control>
[16:28:32.210]    <control if="continueId == 4" while="" timeout="0" info="">
[16:28:32.210]      // if-block "continueId == 4"
[16:28:32.210]        // =>  FALSE
[16:28:32.210]      // skip if-block "continueId == 4"
[16:28:32.210]    </control>
[16:28:32.210]    <control if="!isProduction" while="" timeout="0" info="">
[16:28:32.210]      // if-block "!isProduction"
[16:28:32.210]        // =>  FALSE
[16:28:32.210]      // skip if-block "!isProduction"
[16:28:32.210]    </control>
[16:28:32.210]  </sequence>
[16:28:32.210]  
[16:29:21.742]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:29:21.742]  
[16:29:21.742]  <debugvars>
[16:29:21.742]    // Pre-defined
[16:29:21.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:21.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:21.742]    __dp=0x00000000
[16:29:21.742]    __ap=0x00000000
[16:29:21.742]    __traceout=0x00000000      (Trace Disabled)
[16:29:21.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:21.742]    __FlashAddr=0x00000000
[16:29:21.742]    __FlashLen=0x00000000
[16:29:21.742]    __FlashArg=0x00000000
[16:29:21.742]    __FlashOp=0x00000000
[16:29:21.742]    __Result=0x00000000
[16:29:21.742]  </debugvars>
[16:29:21.742]  
[16:29:21.742]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:29:21.742]    <block atomic="false" info="">
[16:29:21.742]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:29:21.746]        // -> [isSWJ <= 0x00000001]
[16:29:21.746]      __var hasDormant = __protocol & 0x00020000;
[16:29:21.746]        // -> [hasDormant <= 0x00000000]
[16:29:21.746]      __var protType   = __protocol & 0x0000FFFF;
[16:29:21.746]        // -> [protType <= 0x00000002]
[16:29:21.746]    </block>
[16:29:21.746]    <control if="protType == 1" while="" timeout="0" info="">
[16:29:21.746]      // if-block "protType == 1"
[16:29:21.746]        // =>  FALSE
[16:29:21.746]      // skip if-block "protType == 1"
[16:29:21.746]    </control>
[16:29:21.747]    <control if="protType == 2" while="" timeout="0" info="">
[16:29:21.747]      // if-block "protType == 2"
[16:29:21.747]        // =>  TRUE
[16:29:21.747]      <control if="isSWJ" while="" timeout="0" info="">
[16:29:21.747]        // if-block "isSWJ"
[16:29:21.747]          // =>  TRUE
[16:29:21.747]        <control if="hasDormant" while="" timeout="0" info="">
[16:29:21.747]          // if-block "hasDormant"
[16:29:21.747]            // =>  FALSE
[16:29:21.747]          // skip if-block "hasDormant"
[16:29:21.747]        </control>
[16:29:21.747]        <control if="!hasDormant" while="" timeout="0" info="">
[16:29:21.747]          // if-block "!hasDormant"
[16:29:21.748]            // =>  TRUE
[16:29:21.748]          <block atomic="false" info="">
[16:29:21.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:29:21.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:21.756]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:29:21.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:29:21.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:29:21.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:21.766]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:29:21.766]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:29:21.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:29:21.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:29:21.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:29:21.782]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:29:21.782]          </block>
[16:29:21.782]          // end if-block "!hasDormant"
[16:29:21.782]        </control>
[16:29:21.782]        // end if-block "isSWJ"
[16:29:21.782]      </control>
[16:29:21.782]      <control if="!isSWJ" while="" timeout="0" info="">
[16:29:21.782]        // if-block "!isSWJ"
[16:29:21.782]          // =>  FALSE
[16:29:21.782]        // skip if-block "!isSWJ"
[16:29:21.782]      </control>
[16:29:21.782]      <block atomic="false" info="">
[16:29:21.784]        ReadDP(0x0);
[16:29:21.787]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:29:21.787]      </block>
[16:29:21.787]      // end if-block "protType == 2"
[16:29:21.787]    </control>
[16:29:21.787]  </sequence>
[16:29:21.788]  
[16:29:21.794]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:29:21.794]  
[16:29:21.794]  <debugvars>
[16:29:21.794]    // Pre-defined
[16:29:21.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:21.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:21.794]    __dp=0x00000000
[16:29:21.794]    __ap=0x00000000
[16:29:21.794]    __traceout=0x00000000      (Trace Disabled)
[16:29:21.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:21.797]    __FlashAddr=0x00000000
[16:29:21.797]    __FlashLen=0x00000000
[16:29:21.797]    __FlashArg=0x00000000
[16:29:21.797]    __FlashOp=0x00000000
[16:29:21.797]    __Result=0x00000000
[16:29:21.797]  </debugvars>
[16:29:21.797]  
[16:29:21.797]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:29:21.797]    <block atomic="false" info="">
[16:29:21.797]      __var SW_DP_ABORT       = 0x0;
[16:29:21.797]        // -> [SW_DP_ABORT <= 0x00000000]
[16:29:21.797]      __var DP_CTRL_STAT      = 0x4;
[16:29:21.797]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:29:21.797]      __var DP_SELECT         = 0x8;
[16:29:21.797]        // -> [DP_SELECT <= 0x00000008]
[16:29:21.797]      __var powered_down      = 0;
[16:29:21.797]        // -> [powered_down <= 0x00000000]
[16:29:21.797]      WriteDP(DP_SELECT, 0x00000000);
[16:29:21.803]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:29:21.803]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:29:21.807]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:29:21.808]        // -> [powered_down <= 0x00000001]
[16:29:21.808]    </block>
[16:29:21.808]    <control if="powered_down" while="" timeout="0" info="">
[16:29:21.808]      // if-block "powered_down"
[16:29:21.808]        // =>  TRUE
[16:29:21.808]      <block atomic="false" info="">
[16:29:21.808]        Message(0, "Debug/System power-up request sent");
[16:29:21.808]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:29:21.811]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:29:21.811]      </block>
[16:29:21.811]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:29:21.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:29:21.818]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:29:21.818]        // while-condition  =>  FALSE
[16:29:21.818]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:29:21.818]      </control>
[16:29:21.821]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:29:21.821]        // if-block "(__protocol & 0xFFFF) == 1"
[16:29:21.821]          // =>  FALSE
[16:29:21.821]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:29:21.821]      </control>
[16:29:21.821]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:29:21.821]        // if-block "(__protocol & 0xFFFF) == 2"
[16:29:21.821]          // =>  TRUE
[16:29:21.821]        <block atomic="false" info="">
[16:29:21.821]          Message(0, "executing SWD power up");
[16:29:21.821]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:29:21.827]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:29:21.827]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:29:21.831]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:29:21.831]        </block>
[16:29:21.831]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:29:21.831]      </control>
[16:29:21.831]      // end if-block "powered_down"
[16:29:21.831]    </control>
[16:29:21.831]    <block atomic="false" info="">
[16:29:21.831]      __var DEBUG_PORT_VAL    = 0;
[16:29:21.831]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:29:21.831]      __var ACCESS_POINT_VAL  = 0;
[16:29:21.831]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:29:21.831]      __ap = 1; 
[16:29:21.833]        // -> [__ap <= 0x00000001]
[16:29:21.833]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:29:21.839]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:29:21.839]      __ap = 4;
[16:29:21.839]        // -> [__ap <= 0x00000004]
[16:29:21.839]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:21.848]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:29:21.848]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:29:21.848]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:21.848]    </block>
[16:29:21.858]    <block atomic="false" info="">
[16:29:21.858]      __var nReset = 0x80;
[16:29:21.858]        // -> [nReset <= 0x00000080]
[16:29:21.858]      __var canReadPins = 0;
[16:29:21.858]        // -> [canReadPins <= 0x00000000]
[16:29:21.858]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:29:21.858]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:29:21.858]        // -> [canReadPins <= 0x00000001]
[16:29:21.858]    </block>
[16:29:21.858]    <control if="" while="1" timeout="200" info="">
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.858]      // while "1"  (timeout="200")
[16:29:21.858]      // while-condition  =>  TRUE
[16:29:21.868]      // while "1"  (timeout="200")
[16:29:21.868]      // while  =>  TIMEOUT
[16:29:21.868]      // end while "1"
[16:29:21.868]    </control>
[16:29:21.868]    <control if="canReadPins" while="" timeout="0" info="">
[16:29:21.868]      // if-block "canReadPins"
[16:29:21.868]        // =>  TRUE
[16:29:21.868]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:29:21.868]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:29:21.878]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:29:21.878]        // while-condition  =>  FALSE
[16:29:21.878]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:29:21.878]      </control>
[16:29:21.878]      // end if-block "canReadPins"
[16:29:21.878]    </control>
[16:29:21.878]    <control if="!canReadPins" while="" timeout="0" info="">
[16:29:21.878]      // if-block "!canReadPins"
[16:29:21.878]        // =>  FALSE
[16:29:21.878]      // skip if-block "!canReadPins"
[16:29:21.878]    </control>
[16:29:21.878]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:29:21.878]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:21.878]        // =>  TRUE
[16:29:21.878]      <block atomic="false" info="">
[16:29:21.878]        WriteAP(0x00, 0x190008);
[16:29:21.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:21.888]        WriteAP(0xF0, 0x01);
[16:29:21.898]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:29:21.898]      </block>
[16:29:21.898]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:29:21.898]    </control>
[16:29:21.898]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:29:21.898]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:21.898]        // =>  FALSE
[16:29:21.898]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:29:21.898]    </control>
[16:29:21.898]    <block atomic="false" info="">
[16:29:21.898]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:29:21.918]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:29:21.918]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:29:21.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:29:21.918]      __ap = 0; //lets make sure we reset the access point selection
[16:29:21.918]        // -> [__ap <= 0x00000000]
[16:29:21.918]    </block>
[16:29:21.918]  </sequence>
[16:29:21.918]  
[16:29:21.982]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:29:21.982]  
[16:29:21.982]  <debugvars>
[16:29:21.982]    // Pre-defined
[16:29:21.982]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:29:21.982]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:29:21.982]    __dp=0x00000000
[16:29:21.982]    __ap=0x00000000
[16:29:21.982]    __traceout=0x00000000      (Trace Disabled)
[16:29:21.982]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:29:21.982]    __FlashAddr=0x00000000
[16:29:21.982]    __FlashLen=0x00000000
[16:29:21.982]    __FlashArg=0x00000000
[16:29:21.982]    __FlashOp=0x00000000
[16:29:21.982]    __Result=0x00000000
[16:29:21.982]  </debugvars>
[16:29:21.982]  
[16:29:21.982]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:29:21.982]    <block atomic="false" info="">
[16:29:21.982]      __var deviceID = 0;
[16:29:21.982]        // -> [deviceID <= 0x00000000]
[16:29:21.982]      __var version = 0;
[16:29:21.984]        // -> [version <= 0x00000000]
[16:29:21.984]      __var partNum = 0;
[16:29:21.984]        // -> [partNum <= 0x00000000]
[16:29:21.984]      __var manuf = 0;
[16:29:21.984]        // -> [manuf <= 0x00000000]
[16:29:21.984]      __var isMSPM0G1X0X_G3X0X = 0;
[16:29:21.984]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:29:21.984]      __var isProduction = 0;
[16:29:21.984]        // -> [isProduction <= 0x00000000]
[16:29:21.984]      __var continueId = 0;
[16:29:21.984]        // -> [continueId <= 0x00000000]
[16:29:21.984]      deviceID =   Read32(0x41C40004);
[16:29:22.010]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:29:22.010]        // -> [deviceID <= 0x2BB8802F]
[16:29:22.010]      version = deviceID >> 28;
[16:29:22.010]        // -> [version <= 0x00000002]
[16:29:22.010]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:29:22.010]        // -> [partNum <= 0x0000BB88]
[16:29:22.010]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:29:22.010]        // -> [manuf <= 0x00000017]
[16:29:22.010]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:29:22.010]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:29:22.010]      isProduction = (version > 0);
[16:29:22.010]        // -> [isProduction <= 0x00000001]
[16:29:22.010]    </block>
[16:29:22.010]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:29:22.011]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:29:22.011]        // =>  FALSE
[16:29:22.011]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:29:22.011]    </control>
[16:29:22.011]    <control if="continueId == 4" while="" timeout="0" info="">
[16:29:22.011]      // if-block "continueId == 4"
[16:29:22.011]        // =>  FALSE
[16:29:22.011]      // skip if-block "continueId == 4"
[16:29:22.011]    </control>
[16:29:22.011]    <control if="!isProduction" while="" timeout="0" info="">
[16:29:22.011]      // if-block "!isProduction"
[16:29:22.011]        // =>  FALSE
[16:29:22.011]      // skip if-block "!isProduction"
[16:29:22.011]    </control>
[16:29:22.011]  </sequence>
[16:29:22.011]  
[16:30:21.481]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:30:21.481]  
[16:30:21.493]  <debugvars>
[16:30:21.493]    // Pre-defined
[16:30:21.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:21.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:21.493]    __dp=0x00000000
[16:30:21.493]    __ap=0x00000000
[16:30:21.493]    __traceout=0x00000000      (Trace Disabled)
[16:30:21.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:21.493]    __FlashAddr=0x00000000
[16:30:21.493]    __FlashLen=0x00000000
[16:30:21.493]    __FlashArg=0x00000000
[16:30:21.493]    __FlashOp=0x00000000
[16:30:21.493]    __Result=0x00000000
[16:30:21.493]  </debugvars>
[16:30:21.493]  
[16:30:21.493]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:30:21.493]    <block atomic="false" info="">
[16:30:21.493]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:30:21.493]        // -> [isSWJ <= 0x00000001]
[16:30:21.493]      __var hasDormant = __protocol & 0x00020000;
[16:30:21.493]        // -> [hasDormant <= 0x00000000]
[16:30:21.493]      __var protType   = __protocol & 0x0000FFFF;
[16:30:21.493]        // -> [protType <= 0x00000002]
[16:30:21.493]    </block>
[16:30:21.493]    <control if="protType == 1" while="" timeout="0" info="">
[16:30:21.493]      // if-block "protType == 1"
[16:30:21.493]        // =>  FALSE
[16:30:21.493]      // skip if-block "protType == 1"
[16:30:21.493]    </control>
[16:30:21.493]    <control if="protType == 2" while="" timeout="0" info="">
[16:30:21.493]      // if-block "protType == 2"
[16:30:21.493]        // =>  TRUE
[16:30:21.493]      <control if="isSWJ" while="" timeout="0" info="">
[16:30:21.493]        // if-block "isSWJ"
[16:30:21.493]          // =>  TRUE
[16:30:21.493]        <control if="hasDormant" while="" timeout="0" info="">
[16:30:21.493]          // if-block "hasDormant"
[16:30:21.493]            // =>  FALSE
[16:30:21.493]          // skip if-block "hasDormant"
[16:30:21.493]        </control>
[16:30:21.493]        <control if="!hasDormant" while="" timeout="0" info="">
[16:30:21.493]          // if-block "!hasDormant"
[16:30:21.493]            // =>  TRUE
[16:30:21.493]          <block atomic="false" info="">
[16:30:21.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:30:21.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:21.500]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:30:21.509]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:30:21.509]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:30:21.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:21.509]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:30:21.519]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:30:21.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:30:21.519]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:30:21.519]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:30:21.529]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:30:21.529]          </block>
[16:30:21.529]          // end if-block "!hasDormant"
[16:30:21.529]        </control>
[16:30:21.529]        // end if-block "isSWJ"
[16:30:21.529]      </control>
[16:30:21.529]      <control if="!isSWJ" while="" timeout="0" info="">
[16:30:21.529]        // if-block "!isSWJ"
[16:30:21.529]          // =>  FALSE
[16:30:21.529]        // skip if-block "!isSWJ"
[16:30:21.529]      </control>
[16:30:21.529]      <block atomic="false" info="">
[16:30:21.529]        ReadDP(0x0);
[16:30:21.529]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:30:21.529]      </block>
[16:30:21.529]      // end if-block "protType == 2"
[16:30:21.529]    </control>
[16:30:21.529]  </sequence>
[16:30:21.529]  
[16:30:21.549]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:30:21.549]  
[16:30:21.549]  <debugvars>
[16:30:21.549]    // Pre-defined
[16:30:21.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:21.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:21.549]    __dp=0x00000000
[16:30:21.549]    __ap=0x00000000
[16:30:21.549]    __traceout=0x00000000      (Trace Disabled)
[16:30:21.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:21.549]    __FlashAddr=0x00000000
[16:30:21.549]    __FlashLen=0x00000000
[16:30:21.549]    __FlashArg=0x00000000
[16:30:21.549]    __FlashOp=0x00000000
[16:30:21.549]    __Result=0x00000000
[16:30:21.549]  </debugvars>
[16:30:21.549]  
[16:30:21.549]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:30:21.549]    <block atomic="false" info="">
[16:30:21.549]      __var SW_DP_ABORT       = 0x0;
[16:30:21.549]        // -> [SW_DP_ABORT <= 0x00000000]
[16:30:21.549]      __var DP_CTRL_STAT      = 0x4;
[16:30:21.549]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:30:21.549]      __var DP_SELECT         = 0x8;
[16:30:21.549]        // -> [DP_SELECT <= 0x00000008]
[16:30:21.549]      __var powered_down      = 0;
[16:30:21.549]        // -> [powered_down <= 0x00000000]
[16:30:21.549]      WriteDP(DP_SELECT, 0x00000000);
[16:30:21.549]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:30:21.549]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:30:21.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:30:21.559]        // -> [powered_down <= 0x00000001]
[16:30:21.559]    </block>
[16:30:21.559]    <control if="powered_down" while="" timeout="0" info="">
[16:30:21.559]      // if-block "powered_down"
[16:30:21.559]        // =>  TRUE
[16:30:21.559]      <block atomic="false" info="">
[16:30:21.559]        Message(0, "Debug/System power-up request sent");
[16:30:21.559]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:30:21.559]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:30:21.559]      </block>
[16:30:21.559]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:30:21.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:30:21.569]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:30:21.569]        // while-condition  =>  FALSE
[16:30:21.569]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:30:21.569]      </control>
[16:30:21.569]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:30:21.569]        // if-block "(__protocol & 0xFFFF) == 1"
[16:30:21.569]          // =>  FALSE
[16:30:21.569]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:30:21.569]      </control>
[16:30:21.569]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:30:21.569]        // if-block "(__protocol & 0xFFFF) == 2"
[16:30:21.569]          // =>  TRUE
[16:30:21.569]        <block atomic="false" info="">
[16:30:21.569]          Message(0, "executing SWD power up");
[16:30:21.571]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:30:21.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:30:21.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:30:21.581]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:30:21.581]        </block>
[16:30:21.581]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:30:21.581]      </control>
[16:30:21.581]      // end if-block "powered_down"
[16:30:21.581]    </control>
[16:30:21.581]    <block atomic="false" info="">
[16:30:21.581]      __var DEBUG_PORT_VAL    = 0;
[16:30:21.581]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:30:21.581]      __var ACCESS_POINT_VAL  = 0;
[16:30:21.581]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:30:21.581]      __ap = 1; 
[16:30:21.581]        // -> [__ap <= 0x00000001]
[16:30:21.581]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:30:21.591]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:30:21.591]      __ap = 4;
[16:30:21.591]        // -> [__ap <= 0x00000004]
[16:30:21.591]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:30:21.609]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:30:21.609]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:30:21.609]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:30:21.609]    </block>
[16:30:21.609]    <block atomic="false" info="">
[16:30:21.609]      __var nReset = 0x80;
[16:30:21.609]        // -> [nReset <= 0x00000080]
[16:30:21.609]      __var canReadPins = 0;
[16:30:21.609]        // -> [canReadPins <= 0x00000000]
[16:30:21.609]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:30:21.622]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:30:21.622]        // -> [canReadPins <= 0x00000001]
[16:30:21.622]    </block>
[16:30:21.622]    <control if="" while="1" timeout="200" info="">
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.622]      // while-condition  =>  TRUE
[16:30:21.622]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.625]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.625]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.625]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.625]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.625]      // while "1"  (timeout="200")
[16:30:21.625]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.627]      // while-condition  =>  TRUE
[16:30:21.627]      // while "1"  (timeout="200")
[16:30:21.629]      // while-condition  =>  TRUE
[16:30:21.629]      // while "1"  (timeout="200")
[16:30:21.629]      // while  =>  TIMEOUT
[16:30:21.629]      // end while "1"
[16:30:21.629]    </control>
[16:30:21.629]    <control if="canReadPins" while="" timeout="0" info="">
[16:30:21.629]      // if-block "canReadPins"
[16:30:21.629]        // =>  TRUE
[16:30:21.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:30:21.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:30:21.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:30:21.631]        // while-condition  =>  FALSE
[16:30:21.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:30:21.631]      </control>
[16:30:21.631]      // end if-block "canReadPins"
[16:30:21.631]    </control>
[16:30:21.631]    <control if="!canReadPins" while="" timeout="0" info="">
[16:30:21.631]      // if-block "!canReadPins"
[16:30:21.631]        // =>  FALSE
[16:30:21.631]      // skip if-block "!canReadPins"
[16:30:21.631]    </control>
[16:30:21.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:30:21.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:30:21.631]        // =>  TRUE
[16:30:21.631]      <block atomic="false" info="">
[16:30:21.631]        WriteAP(0x00, 0x190008);
[16:30:21.635]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:30:21.635]        WriteAP(0xF0, 0x01);
[16:30:21.640]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:30:21.640]      </block>
[16:30:21.640]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:30:21.640]    </control>
[16:30:21.640]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:30:21.640]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:30:21.640]        // =>  FALSE
[16:30:21.640]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:30:21.640]    </control>
[16:30:21.640]    <block atomic="false" info="">
[16:30:21.640]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:30:21.651]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:30:21.651]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:30:21.651]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:30:21.651]      __ap = 0; //lets make sure we reset the access point selection
[16:30:21.651]        // -> [__ap <= 0x00000000]
[16:30:21.651]    </block>
[16:30:21.654]  </sequence>
[16:30:21.654]  
[16:30:21.709]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:30:21.709]  
[16:30:21.709]  <debugvars>
[16:30:21.709]    // Pre-defined
[16:30:21.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:30:21.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:30:21.709]    __dp=0x00000000
[16:30:21.709]    __ap=0x00000000
[16:30:21.709]    __traceout=0x00000000      (Trace Disabled)
[16:30:21.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:30:21.709]    __FlashAddr=0x00000000
[16:30:21.709]    __FlashLen=0x00000000
[16:30:21.709]    __FlashArg=0x00000000
[16:30:21.709]    __FlashOp=0x00000000
[16:30:21.709]    __Result=0x00000000
[16:30:21.709]  </debugvars>
[16:30:21.709]  
[16:30:21.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:30:21.709]    <block atomic="false" info="">
[16:30:21.709]      __var deviceID = 0;
[16:30:21.709]        // -> [deviceID <= 0x00000000]
[16:30:21.709]      __var version = 0;
[16:30:21.709]        // -> [version <= 0x00000000]
[16:30:21.709]      __var partNum = 0;
[16:30:21.709]        // -> [partNum <= 0x00000000]
[16:30:21.709]      __var manuf = 0;
[16:30:21.709]        // -> [manuf <= 0x00000000]
[16:30:21.715]      __var isMSPM0G1X0X_G3X0X = 0;
[16:30:21.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:30:21.715]      __var isProduction = 0;
[16:30:21.715]        // -> [isProduction <= 0x00000000]
[16:30:21.715]      __var continueId = 0;
[16:30:21.715]        // -> [continueId <= 0x00000000]
[16:30:21.715]      deviceID =   Read32(0x41C40004);
[16:30:21.729]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:30:21.729]        // -> [deviceID <= 0x2BB8802F]
[16:30:21.729]      version = deviceID >> 28;
[16:30:21.729]        // -> [version <= 0x00000002]
[16:30:21.729]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:30:21.729]        // -> [partNum <= 0x0000BB88]
[16:30:21.729]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:30:21.729]        // -> [manuf <= 0x00000017]
[16:30:21.729]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:30:21.729]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:30:21.729]      isProduction = (version > 0);
[16:30:21.729]        // -> [isProduction <= 0x00000001]
[16:30:21.729]    </block>
[16:30:21.729]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:30:21.729]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:30:21.729]        // =>  FALSE
[16:30:21.729]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:30:21.729]    </control>
[16:30:21.729]    <control if="continueId == 4" while="" timeout="0" info="">
[16:30:21.729]      // if-block "continueId == 4"
[16:30:21.729]        // =>  FALSE
[16:30:21.729]      // skip if-block "continueId == 4"
[16:30:21.729]    </control>
[16:30:21.729]    <control if="!isProduction" while="" timeout="0" info="">
[16:30:21.729]      // if-block "!isProduction"
[16:30:21.729]        // =>  FALSE
[16:30:21.729]      // skip if-block "!isProduction"
[16:30:21.729]    </control>
[16:30:21.738]  </sequence>
[16:30:21.738]  
[16:31:34.189]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:31:34.189]  
[16:31:34.200]  <debugvars>
[16:31:34.200]    // Pre-defined
[16:31:34.200]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:34.200]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:34.200]    __dp=0x00000000
[16:31:34.200]    __ap=0x00000000
[16:31:34.200]    __traceout=0x00000000      (Trace Disabled)
[16:31:34.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:34.200]    __FlashAddr=0x00000000
[16:31:34.200]    __FlashLen=0x00000000
[16:31:34.200]    __FlashArg=0x00000000
[16:31:34.200]    __FlashOp=0x00000000
[16:31:34.200]    __Result=0x00000000
[16:31:34.200]  </debugvars>
[16:31:34.200]  
[16:31:34.200]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:31:34.200]    <block atomic="false" info="">
[16:31:34.200]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:31:34.200]        // -> [isSWJ <= 0x00000001]
[16:31:34.200]      __var hasDormant = __protocol & 0x00020000;
[16:31:34.200]        // -> [hasDormant <= 0x00000000]
[16:31:34.200]      __var protType   = __protocol & 0x0000FFFF;
[16:31:34.200]        // -> [protType <= 0x00000002]
[16:31:34.200]    </block>
[16:31:34.200]    <control if="protType == 1" while="" timeout="0" info="">
[16:31:34.200]      // if-block "protType == 1"
[16:31:34.200]        // =>  FALSE
[16:31:34.200]      // skip if-block "protType == 1"
[16:31:34.200]    </control>
[16:31:34.200]    <control if="protType == 2" while="" timeout="0" info="">
[16:31:34.200]      // if-block "protType == 2"
[16:31:34.200]        // =>  TRUE
[16:31:34.200]      <control if="isSWJ" while="" timeout="0" info="">
[16:31:34.200]        // if-block "isSWJ"
[16:31:34.200]          // =>  TRUE
[16:31:34.200]        <control if="hasDormant" while="" timeout="0" info="">
[16:31:34.200]          // if-block "hasDormant"
[16:31:34.200]            // =>  FALSE
[16:31:34.200]          // skip if-block "hasDormant"
[16:31:34.200]        </control>
[16:31:34.200]        <control if="!hasDormant" while="" timeout="0" info="">
[16:31:34.200]          // if-block "!hasDormant"
[16:31:34.200]            // =>  TRUE
[16:31:34.200]          <block atomic="false" info="">
[16:31:34.200]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:31:34.206]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:34.206]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:31:34.209]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:31:34.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:31:34.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:34.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:31:34.239]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:31:34.239]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:31:34.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:34.241]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:31:34.241]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:31:34.241]          </block>
[16:31:34.241]          // end if-block "!hasDormant"
[16:31:34.241]        </control>
[16:31:34.241]        // end if-block "isSWJ"
[16:31:34.241]      </control>
[16:31:34.241]      <control if="!isSWJ" while="" timeout="0" info="">
[16:31:34.241]        // if-block "!isSWJ"
[16:31:34.241]          // =>  FALSE
[16:31:34.241]        // skip if-block "!isSWJ"
[16:31:34.241]      </control>
[16:31:34.241]      <block atomic="false" info="">
[16:31:34.241]        ReadDP(0x0);
[16:31:34.251]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:31:34.251]      </block>
[16:31:34.251]      // end if-block "protType == 2"
[16:31:34.251]    </control>
[16:31:34.251]  </sequence>
[16:31:34.251]  
[16:31:34.260]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:31:34.260]  
[16:31:34.260]  <debugvars>
[16:31:34.260]    // Pre-defined
[16:31:34.260]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:34.267]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:34.267]    __dp=0x00000000
[16:31:34.267]    __ap=0x00000000
[16:31:34.268]    __traceout=0x00000000      (Trace Disabled)
[16:31:34.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:34.268]    __FlashAddr=0x00000000
[16:31:34.268]    __FlashLen=0x00000000
[16:31:34.268]    __FlashArg=0x00000000
[16:31:34.268]    __FlashOp=0x00000000
[16:31:34.268]    __Result=0x00000000
[16:31:34.268]  </debugvars>
[16:31:34.268]  
[16:31:34.268]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:31:34.268]    <block atomic="false" info="">
[16:31:34.268]      __var SW_DP_ABORT       = 0x0;
[16:31:34.268]        // -> [SW_DP_ABORT <= 0x00000000]
[16:31:34.268]      __var DP_CTRL_STAT      = 0x4;
[16:31:34.268]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:31:34.268]      __var DP_SELECT         = 0x8;
[16:31:34.268]        // -> [DP_SELECT <= 0x00000008]
[16:31:34.270]      __var powered_down      = 0;
[16:31:34.270]        // -> [powered_down <= 0x00000000]
[16:31:34.270]      WriteDP(DP_SELECT, 0x00000000);
[16:31:34.272]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:31:34.272]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:31:34.272]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:31:34.272]        // -> [powered_down <= 0x00000001]
[16:31:34.272]    </block>
[16:31:34.272]    <control if="powered_down" while="" timeout="0" info="">
[16:31:34.272]      // if-block "powered_down"
[16:31:34.272]        // =>  TRUE
[16:31:34.272]      <block atomic="false" info="">
[16:31:34.272]        Message(0, "Debug/System power-up request sent");
[16:31:34.272]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:31:34.272]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:31:34.280]      </block>
[16:31:34.280]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:31:34.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:31:34.280]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:31:34.280]        // while-condition  =>  FALSE
[16:31:34.280]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:31:34.280]      </control>
[16:31:34.280]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:31:34.280]        // if-block "(__protocol & 0xFFFF) == 1"
[16:31:34.280]          // =>  FALSE
[16:31:34.280]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:31:34.280]      </control>
[16:31:34.280]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:31:34.280]        // if-block "(__protocol & 0xFFFF) == 2"
[16:31:34.280]          // =>  TRUE
[16:31:34.280]        <block atomic="false" info="">
[16:31:34.280]          Message(0, "executing SWD power up");
[16:31:34.280]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:31:34.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:31:34.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:31:34.302]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:31:34.302]        </block>
[16:31:34.302]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:31:34.302]      </control>
[16:31:34.302]      // end if-block "powered_down"
[16:31:34.302]    </control>
[16:31:34.302]    <block atomic="false" info="">
[16:31:34.303]      __var DEBUG_PORT_VAL    = 0;
[16:31:34.303]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:31:34.303]      __var ACCESS_POINT_VAL  = 0;
[16:31:34.303]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:31:34.303]      __ap = 1; 
[16:31:34.303]        // -> [__ap <= 0x00000001]
[16:31:34.303]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:31:34.316]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:31:34.317]      __ap = 4;
[16:31:34.317]        // -> [__ap <= 0x00000004]
[16:31:34.317]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:34.325]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:31:34.325]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:31:34.325]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:34.325]    </block>
[16:31:34.325]    <block atomic="false" info="">
[16:31:34.325]      __var nReset = 0x80;
[16:31:34.325]        // -> [nReset <= 0x00000080]
[16:31:34.325]      __var canReadPins = 0;
[16:31:34.325]        // -> [canReadPins <= 0x00000000]
[16:31:34.325]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:31:34.330]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:31:34.330]        // -> [canReadPins <= 0x00000001]
[16:31:34.330]    </block>
[16:31:34.330]    <control if="" while="1" timeout="200" info="">
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.330]      // while-condition  =>  TRUE
[16:31:34.330]      // while "1"  (timeout="200")
[16:31:34.340]      // while-condition  =>  TRUE
[16:31:34.340]      // while "1"  (timeout="200")
[16:31:34.340]      // while  =>  TIMEOUT
[16:31:34.340]      // end while "1"
[16:31:34.340]    </control>
[16:31:34.340]    <control if="canReadPins" while="" timeout="0" info="">
[16:31:34.340]      // if-block "canReadPins"
[16:31:34.340]        // =>  TRUE
[16:31:34.340]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:31:34.340]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:31:34.342]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:31:34.342]        // while-condition  =>  FALSE
[16:31:34.342]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:31:34.342]      </control>
[16:31:34.342]      // end if-block "canReadPins"
[16:31:34.342]    </control>
[16:31:34.342]    <control if="!canReadPins" while="" timeout="0" info="">
[16:31:34.342]      // if-block "!canReadPins"
[16:31:34.342]        // =>  FALSE
[16:31:34.342]      // skip if-block "!canReadPins"
[16:31:34.342]    </control>
[16:31:34.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:31:34.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:34.342]        // =>  TRUE
[16:31:34.342]      <block atomic="false" info="">
[16:31:34.342]        WriteAP(0x00, 0x190008);
[16:31:34.342]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:34.342]        WriteAP(0xF0, 0x01);
[16:31:34.352]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:34.352]      </block>
[16:31:34.352]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:34.352]    </control>
[16:31:34.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:31:34.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:34.352]        // =>  FALSE
[16:31:34.352]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:34.352]    </control>
[16:31:34.352]    <block atomic="false" info="">
[16:31:34.352]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:34.360]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:31:34.360]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:31:34.360]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:34.360]      __ap = 0; //lets make sure we reset the access point selection
[16:31:34.360]        // -> [__ap <= 0x00000000]
[16:31:34.360]    </block>
[16:31:34.360]  </sequence>
[16:31:34.360]  
[16:31:34.413]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:31:34.413]  
[16:31:34.413]  <debugvars>
[16:31:34.413]    // Pre-defined
[16:31:34.413]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:34.413]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:34.413]    __dp=0x00000000
[16:31:34.413]    __ap=0x00000000
[16:31:34.413]    __traceout=0x00000000      (Trace Disabled)
[16:31:34.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:34.413]    __FlashAddr=0x00000000
[16:31:34.413]    __FlashLen=0x00000000
[16:31:34.413]    __FlashArg=0x00000000
[16:31:34.413]    __FlashOp=0x00000000
[16:31:34.413]    __Result=0x00000000
[16:31:34.413]  </debugvars>
[16:31:34.413]  
[16:31:34.413]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:31:34.413]    <block atomic="false" info="">
[16:31:34.413]      __var deviceID = 0;
[16:31:34.413]        // -> [deviceID <= 0x00000000]
[16:31:34.413]      __var version = 0;
[16:31:34.413]        // -> [version <= 0x00000000]
[16:31:34.413]      __var partNum = 0;
[16:31:34.413]        // -> [partNum <= 0x00000000]
[16:31:34.413]      __var manuf = 0;
[16:31:34.413]        // -> [manuf <= 0x00000000]
[16:31:34.413]      __var isMSPM0G1X0X_G3X0X = 0;
[16:31:34.413]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:31:34.413]      __var isProduction = 0;
[16:31:34.413]        // -> [isProduction <= 0x00000000]
[16:31:34.413]      __var continueId = 0;
[16:31:34.413]        // -> [continueId <= 0x00000000]
[16:31:34.413]      deviceID =   Read32(0x41C40004);
[16:31:34.441]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:31:34.441]        // -> [deviceID <= 0x2BB8802F]
[16:31:34.441]      version = deviceID >> 28;
[16:31:34.441]        // -> [version <= 0x00000002]
[16:31:34.441]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:31:34.441]        // -> [partNum <= 0x0000BB88]
[16:31:34.441]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:31:34.441]        // -> [manuf <= 0x00000017]
[16:31:34.441]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:31:34.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:31:34.441]      isProduction = (version > 0);
[16:31:34.441]        // -> [isProduction <= 0x00000001]
[16:31:34.441]    </block>
[16:31:34.441]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:31:34.441]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:31:34.441]        // =>  FALSE
[16:31:34.441]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:31:34.441]    </control>
[16:31:34.441]    <control if="continueId == 4" while="" timeout="0" info="">
[16:31:34.441]      // if-block "continueId == 4"
[16:31:34.441]        // =>  FALSE
[16:31:34.441]      // skip if-block "continueId == 4"
[16:31:34.441]    </control>
[16:31:34.441]    <control if="!isProduction" while="" timeout="0" info="">
[16:31:34.441]      // if-block "!isProduction"
[16:31:34.441]        // =>  FALSE
[16:31:34.441]      // skip if-block "!isProduction"
[16:31:34.441]    </control>
[16:31:34.441]  </sequence>
[16:31:34.441]  
[16:32:17.233]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:32:17.233]  
[16:32:17.248]  <debugvars>
[16:32:17.248]    // Pre-defined
[16:32:17.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:17.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:17.248]    __dp=0x00000000
[16:32:17.248]    __ap=0x00000000
[16:32:17.248]    __traceout=0x00000000      (Trace Disabled)
[16:32:17.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:17.248]    __FlashAddr=0x00000000
[16:32:17.248]    __FlashLen=0x00000000
[16:32:17.248]    __FlashArg=0x00000000
[16:32:17.248]    __FlashOp=0x00000000
[16:32:17.248]    __Result=0x00000000
[16:32:17.248]  </debugvars>
[16:32:17.248]  
[16:32:17.248]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:32:17.248]    <block atomic="false" info="">
[16:32:17.248]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:32:17.248]        // -> [isSWJ <= 0x00000001]
[16:32:17.248]      __var hasDormant = __protocol & 0x00020000;
[16:32:17.248]        // -> [hasDormant <= 0x00000000]
[16:32:17.248]      __var protType   = __protocol & 0x0000FFFF;
[16:32:17.248]        // -> [protType <= 0x00000002]
[16:32:17.248]    </block>
[16:32:17.248]    <control if="protType == 1" while="" timeout="0" info="">
[16:32:17.248]      // if-block "protType == 1"
[16:32:17.248]        // =>  FALSE
[16:32:17.248]      // skip if-block "protType == 1"
[16:32:17.248]    </control>
[16:32:17.248]    <control if="protType == 2" while="" timeout="0" info="">
[16:32:17.248]      // if-block "protType == 2"
[16:32:17.248]        // =>  TRUE
[16:32:17.248]      <control if="isSWJ" while="" timeout="0" info="">
[16:32:17.248]        // if-block "isSWJ"
[16:32:17.248]          // =>  TRUE
[16:32:17.248]        <control if="hasDormant" while="" timeout="0" info="">
[16:32:17.248]          // if-block "hasDormant"
[16:32:17.248]            // =>  FALSE
[16:32:17.248]          // skip if-block "hasDormant"
[16:32:17.248]        </control>
[16:32:17.248]        <control if="!hasDormant" while="" timeout="0" info="">
[16:32:17.248]          // if-block "!hasDormant"
[16:32:17.248]            // =>  TRUE
[16:32:17.248]          <block atomic="false" info="">
[16:32:17.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:32:17.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:17.255]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:32:17.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:32:17.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:32:17.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:17.279]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:32:17.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:32:17.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:32:17.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:17.294]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:32:17.294]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:32:17.294]          </block>
[16:32:17.294]          // end if-block "!hasDormant"
[16:32:17.294]        </control>
[16:32:17.294]        // end if-block "isSWJ"
[16:32:17.294]      </control>
[16:32:17.294]      <control if="!isSWJ" while="" timeout="0" info="">
[16:32:17.294]        // if-block "!isSWJ"
[16:32:17.294]          // =>  FALSE
[16:32:17.294]        // skip if-block "!isSWJ"
[16:32:17.294]      </control>
[16:32:17.294]      <block atomic="false" info="">
[16:32:17.294]        ReadDP(0x0);
[16:32:17.308]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:32:17.308]      </block>
[16:32:17.308]      // end if-block "protType == 2"
[16:32:17.308]    </control>
[16:32:17.308]  </sequence>
[16:32:17.308]  
[16:32:17.318]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:32:17.318]  
[16:32:17.318]  <debugvars>
[16:32:17.318]    // Pre-defined
[16:32:17.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:17.323]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:17.323]    __dp=0x00000000
[16:32:17.323]    __ap=0x00000000
[16:32:17.323]    __traceout=0x00000000      (Trace Disabled)
[16:32:17.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:17.323]    __FlashAddr=0x00000000
[16:32:17.323]    __FlashLen=0x00000000
[16:32:17.323]    __FlashArg=0x00000000
[16:32:17.324]    __FlashOp=0x00000000
[16:32:17.324]    __Result=0x00000000
[16:32:17.324]  </debugvars>
[16:32:17.324]  
[16:32:17.324]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:32:17.324]    <block atomic="false" info="">
[16:32:17.324]      __var SW_DP_ABORT       = 0x0;
[16:32:17.324]        // -> [SW_DP_ABORT <= 0x00000000]
[16:32:17.324]      __var DP_CTRL_STAT      = 0x4;
[16:32:17.324]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:32:17.324]      __var DP_SELECT         = 0x8;
[16:32:17.324]        // -> [DP_SELECT <= 0x00000008]
[16:32:17.324]      __var powered_down      = 0;
[16:32:17.324]        // -> [powered_down <= 0x00000000]
[16:32:17.324]      WriteDP(DP_SELECT, 0x00000000);
[16:32:17.324]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:32:17.324]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:32:17.330]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:32:17.330]        // -> [powered_down <= 0x00000001]
[16:32:17.330]    </block>
[16:32:17.330]    <control if="powered_down" while="" timeout="0" info="">
[16:32:17.330]      // if-block "powered_down"
[16:32:17.330]        // =>  TRUE
[16:32:17.330]      <block atomic="false" info="">
[16:32:17.330]        Message(0, "Debug/System power-up request sent");
[16:32:17.330]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:32:17.339]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:32:17.339]      </block>
[16:32:17.339]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:32:17.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:32:17.343]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:32:17.343]        // while-condition  =>  FALSE
[16:32:17.343]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:32:17.343]      </control>
[16:32:17.343]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:32:17.343]        // if-block "(__protocol & 0xFFFF) == 1"
[16:32:17.343]          // =>  FALSE
[16:32:17.343]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:32:17.343]      </control>
[16:32:17.343]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:32:17.343]        // if-block "(__protocol & 0xFFFF) == 2"
[16:32:17.343]          // =>  TRUE
[16:32:17.343]        <block atomic="false" info="">
[16:32:17.343]          Message(0, "executing SWD power up");
[16:32:17.343]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:32:17.356]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:32:17.356]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:32:17.360]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:32:17.360]        </block>
[16:32:17.360]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:32:17.360]      </control>
[16:32:17.360]      // end if-block "powered_down"
[16:32:17.363]    </control>
[16:32:17.363]    <block atomic="false" info="">
[16:32:17.363]      __var DEBUG_PORT_VAL    = 0;
[16:32:17.363]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:32:17.363]      __var ACCESS_POINT_VAL  = 0;
[16:32:17.363]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:32:17.363]      __ap = 1; 
[16:32:17.364]        // -> [__ap <= 0x00000001]
[16:32:17.364]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:32:17.373]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:32:17.373]      __ap = 4;
[16:32:17.373]        // -> [__ap <= 0x00000004]
[16:32:17.373]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:17.383]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:32:17.383]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:32:17.383]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:17.383]    </block>
[16:32:17.383]    <block atomic="false" info="">
[16:32:17.383]      __var nReset = 0x80;
[16:32:17.383]        // -> [nReset <= 0x00000080]
[16:32:17.383]      __var canReadPins = 0;
[16:32:17.383]        // -> [canReadPins <= 0x00000000]
[16:32:17.383]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:32:17.383]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:32:17.383]        // -> [canReadPins <= 0x00000001]
[16:32:17.383]    </block>
[16:32:17.383]    <control if="" while="1" timeout="200" info="">
[16:32:17.383]      // while "1"  (timeout="200")
[16:32:17.383]      // while-condition  =>  TRUE
[16:32:17.383]      // while "1"  (timeout="200")
[16:32:17.383]      // while-condition  =>  TRUE
[16:32:17.383]      // while "1"  (timeout="200")
[16:32:17.383]      // while-condition  =>  TRUE
[16:32:17.383]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.393]      // while "1"  (timeout="200")
[16:32:17.393]      // while-condition  =>  TRUE
[16:32:17.399]      // while "1"  (timeout="200")
[16:32:17.399]      // while  =>  TIMEOUT
[16:32:17.399]      // end while "1"
[16:32:17.399]    </control>
[16:32:17.399]    <control if="canReadPins" while="" timeout="0" info="">
[16:32:17.399]      // if-block "canReadPins"
[16:32:17.399]        // =>  TRUE
[16:32:17.399]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:32:17.399]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:32:17.401]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:32:17.401]        // while-condition  =>  FALSE
[16:32:17.401]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:32:17.401]      </control>
[16:32:17.403]      // end if-block "canReadPins"
[16:32:17.403]    </control>
[16:32:17.403]    <control if="!canReadPins" while="" timeout="0" info="">
[16:32:17.403]      // if-block "!canReadPins"
[16:32:17.403]        // =>  FALSE
[16:32:17.403]      // skip if-block "!canReadPins"
[16:32:17.403]    </control>
[16:32:17.403]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:32:17.403]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:17.403]        // =>  TRUE
[16:32:17.403]      <block atomic="false" info="">
[16:32:17.403]        WriteAP(0x00, 0x190008);
[16:32:17.403]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:17.403]        WriteAP(0xF0, 0x01);
[16:32:17.413]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:17.413]      </block>
[16:32:17.413]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:17.413]    </control>
[16:32:17.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:32:17.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:17.413]        // =>  FALSE
[16:32:17.413]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:17.413]    </control>
[16:32:17.413]    <block atomic="false" info="">
[16:32:17.413]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:17.425]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:32:17.425]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:32:17.425]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:17.425]      __ap = 0; //lets make sure we reset the access point selection
[16:32:17.425]        // -> [__ap <= 0x00000000]
[16:32:17.425]    </block>
[16:32:17.425]  </sequence>
[16:32:17.425]  
[16:32:17.483]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:32:17.483]  
[16:32:17.483]  <debugvars>
[16:32:17.483]    // Pre-defined
[16:32:17.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:17.483]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:17.483]    __dp=0x00000000
[16:32:17.483]    __ap=0x00000000
[16:32:17.483]    __traceout=0x00000000      (Trace Disabled)
[16:32:17.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:17.483]    __FlashAddr=0x00000000
[16:32:17.483]    __FlashLen=0x00000000
[16:32:17.483]    __FlashArg=0x00000000
[16:32:17.483]    __FlashOp=0x00000000
[16:32:17.483]    __Result=0x00000000
[16:32:17.483]  </debugvars>
[16:32:17.483]  
[16:32:17.483]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:32:17.483]    <block atomic="false" info="">
[16:32:17.483]      __var deviceID = 0;
[16:32:17.483]        // -> [deviceID <= 0x00000000]
[16:32:17.483]      __var version = 0;
[16:32:17.483]        // -> [version <= 0x00000000]
[16:32:17.483]      __var partNum = 0;
[16:32:17.483]        // -> [partNum <= 0x00000000]
[16:32:17.483]      __var manuf = 0;
[16:32:17.483]        // -> [manuf <= 0x00000000]
[16:32:17.483]      __var isMSPM0G1X0X_G3X0X = 0;
[16:32:17.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:32:17.483]      __var isProduction = 0;
[16:32:17.483]        // -> [isProduction <= 0x00000000]
[16:32:17.483]      __var continueId = 0;
[16:32:17.483]        // -> [continueId <= 0x00000000]
[16:32:17.483]      deviceID =   Read32(0x41C40004);
[16:32:17.518]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:32:17.518]        // -> [deviceID <= 0x2BB8802F]
[16:32:17.518]      version = deviceID >> 28;
[16:32:17.518]        // -> [version <= 0x00000002]
[16:32:17.518]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:32:17.518]        // -> [partNum <= 0x0000BB88]
[16:32:17.518]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:32:17.518]        // -> [manuf <= 0x00000017]
[16:32:17.518]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:32:17.518]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:32:17.518]      isProduction = (version > 0);
[16:32:17.518]        // -> [isProduction <= 0x00000001]
[16:32:17.518]    </block>
[16:32:17.518]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:32:17.518]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:32:17.518]        // =>  FALSE
[16:32:17.518]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:32:17.518]    </control>
[16:32:17.518]    <control if="continueId == 4" while="" timeout="0" info="">
[16:32:17.518]      // if-block "continueId == 4"
[16:32:17.518]        // =>  FALSE
[16:32:17.518]      // skip if-block "continueId == 4"
[16:32:17.518]    </control>
[16:32:17.518]    <control if="!isProduction" while="" timeout="0" info="">
[16:32:17.518]      // if-block "!isProduction"
[16:32:17.518]        // =>  FALSE
[16:32:17.518]      // skip if-block "!isProduction"
[16:32:17.518]    </control>
[16:32:17.518]  </sequence>
[16:32:17.523]  
[16:32:41.061]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:32:41.061]  
[16:32:41.074]  <debugvars>
[16:32:41.074]    // Pre-defined
[16:32:41.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:41.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:41.074]    __dp=0x00000000
[16:32:41.074]    __ap=0x00000000
[16:32:41.074]    __traceout=0x00000000      (Trace Disabled)
[16:32:41.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:41.074]    __FlashAddr=0x00000000
[16:32:41.074]    __FlashLen=0x00000000
[16:32:41.074]    __FlashArg=0x00000000
[16:32:41.074]    __FlashOp=0x00000000
[16:32:41.074]    __Result=0x00000000
[16:32:41.074]  </debugvars>
[16:32:41.075]  
[16:32:41.075]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:32:41.075]    <block atomic="false" info="">
[16:32:41.075]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:32:41.075]        // -> [isSWJ <= 0x00000001]
[16:32:41.075]      __var hasDormant = __protocol & 0x00020000;
[16:32:41.075]        // -> [hasDormant <= 0x00000000]
[16:32:41.075]      __var protType   = __protocol & 0x0000FFFF;
[16:32:41.075]        // -> [protType <= 0x00000002]
[16:32:41.075]    </block>
[16:32:41.075]    <control if="protType == 1" while="" timeout="0" info="">
[16:32:41.075]      // if-block "protType == 1"
[16:32:41.075]        // =>  FALSE
[16:32:41.075]      // skip if-block "protType == 1"
[16:32:41.077]    </control>
[16:32:41.077]    <control if="protType == 2" while="" timeout="0" info="">
[16:32:41.077]      // if-block "protType == 2"
[16:32:41.077]        // =>  TRUE
[16:32:41.077]      <control if="isSWJ" while="" timeout="0" info="">
[16:32:41.077]        // if-block "isSWJ"
[16:32:41.077]          // =>  TRUE
[16:32:41.077]        <control if="hasDormant" while="" timeout="0" info="">
[16:32:41.077]          // if-block "hasDormant"
[16:32:41.077]            // =>  FALSE
[16:32:41.077]          // skip if-block "hasDormant"
[16:32:41.077]        </control>
[16:32:41.077]        <control if="!hasDormant" while="" timeout="0" info="">
[16:32:41.077]          // if-block "!hasDormant"
[16:32:41.077]            // =>  TRUE
[16:32:41.077]          <block atomic="false" info="">
[16:32:41.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:32:41.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:41.082]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:32:41.082]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:32:41.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:32:41.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:41.086]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:32:41.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:32:41.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:32:41.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:41.091]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:32:41.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:32:41.091]          </block>
[16:32:41.091]          // end if-block "!hasDormant"
[16:32:41.091]        </control>
[16:32:41.091]        // end if-block "isSWJ"
[16:32:41.091]      </control>
[16:32:41.091]      <control if="!isSWJ" while="" timeout="0" info="">
[16:32:41.091]        // if-block "!isSWJ"
[16:32:41.091]          // =>  FALSE
[16:32:41.091]        // skip if-block "!isSWJ"
[16:32:41.091]      </control>
[16:32:41.091]      <block atomic="false" info="">
[16:32:41.101]        ReadDP(0x0);
[16:32:41.106]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:32:41.106]      </block>
[16:32:41.106]      // end if-block "protType == 2"
[16:32:41.106]    </control>
[16:32:41.106]  </sequence>
[16:32:41.106]  
[16:32:41.113]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:32:41.113]  
[16:32:41.118]  <debugvars>
[16:32:41.118]    // Pre-defined
[16:32:41.118]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:41.118]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:41.118]    __dp=0x00000000
[16:32:41.118]    __ap=0x00000000
[16:32:41.118]    __traceout=0x00000000      (Trace Disabled)
[16:32:41.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:41.118]    __FlashAddr=0x00000000
[16:32:41.118]    __FlashLen=0x00000000
[16:32:41.118]    __FlashArg=0x00000000
[16:32:41.118]    __FlashOp=0x00000000
[16:32:41.118]    __Result=0x00000000
[16:32:41.118]  </debugvars>
[16:32:41.118]  
[16:32:41.118]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:32:41.118]    <block atomic="false" info="">
[16:32:41.118]      __var SW_DP_ABORT       = 0x0;
[16:32:41.118]        // -> [SW_DP_ABORT <= 0x00000000]
[16:32:41.118]      __var DP_CTRL_STAT      = 0x4;
[16:32:41.118]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:32:41.118]      __var DP_SELECT         = 0x8;
[16:32:41.118]        // -> [DP_SELECT <= 0x00000008]
[16:32:41.120]      __var powered_down      = 0;
[16:32:41.120]        // -> [powered_down <= 0x00000000]
[16:32:41.120]      WriteDP(DP_SELECT, 0x00000000);
[16:32:41.122]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:32:41.122]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:32:41.134]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:32:41.134]        // -> [powered_down <= 0x00000001]
[16:32:41.134]    </block>
[16:32:41.134]    <control if="powered_down" while="" timeout="0" info="">
[16:32:41.134]      // if-block "powered_down"
[16:32:41.134]        // =>  TRUE
[16:32:41.134]      <block atomic="false" info="">
[16:32:41.134]        Message(0, "Debug/System power-up request sent");
[16:32:41.134]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:32:41.134]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:32:41.134]      </block>
[16:32:41.134]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:32:41.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:32:41.142]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:32:41.142]        // while-condition  =>  FALSE
[16:32:41.142]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:32:41.142]      </control>
[16:32:41.142]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:32:41.142]        // if-block "(__protocol & 0xFFFF) == 1"
[16:32:41.142]          // =>  FALSE
[16:32:41.142]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:32:41.142]      </control>
[16:32:41.142]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:32:41.142]        // if-block "(__protocol & 0xFFFF) == 2"
[16:32:41.142]          // =>  TRUE
[16:32:41.142]        <block atomic="false" info="">
[16:32:41.142]          Message(0, "executing SWD power up");
[16:32:41.142]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:32:41.142]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:32:41.142]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:32:41.154]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:32:41.154]        </block>
[16:32:41.154]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:32:41.154]      </control>
[16:32:41.154]      // end if-block "powered_down"
[16:32:41.154]    </control>
[16:32:41.154]    <block atomic="false" info="">
[16:32:41.154]      __var DEBUG_PORT_VAL    = 0;
[16:32:41.154]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:32:41.154]      __var ACCESS_POINT_VAL  = 0;
[16:32:41.154]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:32:41.154]      __ap = 1; 
[16:32:41.154]        // -> [__ap <= 0x00000001]
[16:32:41.154]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:32:41.163]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:32:41.163]      __ap = 4;
[16:32:41.163]        // -> [__ap <= 0x00000004]
[16:32:41.163]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:41.171]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:32:41.171]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:32:41.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:41.171]    </block>
[16:32:41.171]    <block atomic="false" info="">
[16:32:41.171]      __var nReset = 0x80;
[16:32:41.173]        // -> [nReset <= 0x00000080]
[16:32:41.173]      __var canReadPins = 0;
[16:32:41.173]        // -> [canReadPins <= 0x00000000]
[16:32:41.173]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:32:41.174]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:32:41.174]        // -> [canReadPins <= 0x00000001]
[16:32:41.174]    </block>
[16:32:41.174]    <control if="" while="1" timeout="200" info="">
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.174]      // while-condition  =>  TRUE
[16:32:41.174]      // while "1"  (timeout="200")
[16:32:41.183]      // while-condition  =>  TRUE
[16:32:41.183]      // while "1"  (timeout="200")
[16:32:41.183]      // while  =>  TIMEOUT
[16:32:41.183]      // end while "1"
[16:32:41.183]    </control>
[16:32:41.183]    <control if="canReadPins" while="" timeout="0" info="">
[16:32:41.183]      // if-block "canReadPins"
[16:32:41.183]        // =>  TRUE
[16:32:41.183]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:32:41.183]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:32:41.183]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:32:41.183]        // while-condition  =>  FALSE
[16:32:41.183]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:32:41.183]      </control>
[16:32:41.183]      // end if-block "canReadPins"
[16:32:41.183]    </control>
[16:32:41.183]    <control if="!canReadPins" while="" timeout="0" info="">
[16:32:41.183]      // if-block "!canReadPins"
[16:32:41.183]        // =>  FALSE
[16:32:41.183]      // skip if-block "!canReadPins"
[16:32:41.183]    </control>
[16:32:41.183]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:32:41.183]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:41.183]        // =>  TRUE
[16:32:41.183]      <block atomic="false" info="">
[16:32:41.183]        WriteAP(0x00, 0x190008);
[16:32:41.193]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:41.193]        WriteAP(0xF0, 0x01);
[16:32:41.203]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:41.203]      </block>
[16:32:41.203]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:41.203]    </control>
[16:32:41.203]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:32:41.203]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:41.203]        // =>  FALSE
[16:32:41.203]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:41.203]    </control>
[16:32:41.203]    <block atomic="false" info="">
[16:32:41.203]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:41.213]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:32:41.220]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:32:41.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:41.220]      __ap = 0; //lets make sure we reset the access point selection
[16:32:41.220]        // -> [__ap <= 0x00000000]
[16:32:41.220]    </block>
[16:32:41.220]  </sequence>
[16:32:41.220]  
[16:32:41.276]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:32:41.276]  
[16:32:41.276]  <debugvars>
[16:32:41.276]    // Pre-defined
[16:32:41.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:41.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:41.276]    __dp=0x00000000
[16:32:41.276]    __ap=0x00000000
[16:32:41.276]    __traceout=0x00000000      (Trace Disabled)
[16:32:41.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:41.277]    __FlashAddr=0x00000000
[16:32:41.277]    __FlashLen=0x00000000
[16:32:41.277]    __FlashArg=0x00000000
[16:32:41.277]    __FlashOp=0x00000000
[16:32:41.277]    __Result=0x00000000
[16:32:41.277]  </debugvars>
[16:32:41.277]  
[16:32:41.277]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:32:41.277]    <block atomic="false" info="">
[16:32:41.277]      __var deviceID = 0;
[16:32:41.277]        // -> [deviceID <= 0x00000000]
[16:32:41.278]      __var version = 0;
[16:32:41.278]        // -> [version <= 0x00000000]
[16:32:41.278]      __var partNum = 0;
[16:32:41.279]        // -> [partNum <= 0x00000000]
[16:32:41.279]      __var manuf = 0;
[16:32:41.279]        // -> [manuf <= 0x00000000]
[16:32:41.279]      __var isMSPM0G1X0X_G3X0X = 0;
[16:32:41.279]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:32:41.279]      __var isProduction = 0;
[16:32:41.279]        // -> [isProduction <= 0x00000000]
[16:32:41.279]      __var continueId = 0;
[16:32:41.279]        // -> [continueId <= 0x00000000]
[16:32:41.280]      deviceID =   Read32(0x41C40004);
[16:32:41.297]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:32:41.297]        // -> [deviceID <= 0x2BB8802F]
[16:32:41.298]      version = deviceID >> 28;
[16:32:41.299]        // -> [version <= 0x00000002]
[16:32:41.299]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:32:41.299]        // -> [partNum <= 0x0000BB88]
[16:32:41.299]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:32:41.299]        // -> [manuf <= 0x00000017]
[16:32:41.299]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:32:41.299]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:32:41.299]      isProduction = (version > 0);
[16:32:41.299]        // -> [isProduction <= 0x00000001]
[16:32:41.299]    </block>
[16:32:41.300]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:32:41.300]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:32:41.300]        // =>  FALSE
[16:32:41.300]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:32:41.300]    </control>
[16:32:41.301]    <control if="continueId == 4" while="" timeout="0" info="">
[16:32:41.301]      // if-block "continueId == 4"
[16:32:41.301]        // =>  FALSE
[16:32:41.301]      // skip if-block "continueId == 4"
[16:32:41.301]    </control>
[16:32:41.301]    <control if="!isProduction" while="" timeout="0" info="">
[16:32:41.301]      // if-block "!isProduction"
[16:32:41.301]        // =>  FALSE
[16:32:41.301]      // skip if-block "!isProduction"
[16:32:41.301]    </control>
[16:32:41.301]  </sequence>
[16:32:41.301]  
[16:34:07.603]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:34:07.603]  
[16:34:07.615]  <debugvars>
[16:34:07.615]    // Pre-defined
[16:34:07.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.615]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.615]    __dp=0x00000000
[16:34:07.615]    __ap=0x00000000
[16:34:07.615]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.615]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.615]    __FlashAddr=0x00000000
[16:34:07.615]    __FlashLen=0x00000000
[16:34:07.615]    __FlashArg=0x00000000
[16:34:07.615]    __FlashOp=0x00000000
[16:34:07.615]    __Result=0x00000000
[16:34:07.615]  </debugvars>
[16:34:07.615]  
[16:34:07.615]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:34:07.615]    <block atomic="false" info="">
[16:34:07.615]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:34:07.615]        // -> [isSWJ <= 0x00000001]
[16:34:07.615]      __var hasDormant = __protocol & 0x00020000;
[16:34:07.615]        // -> [hasDormant <= 0x00000000]
[16:34:07.615]      __var protType   = __protocol & 0x0000FFFF;
[16:34:07.615]        // -> [protType <= 0x00000002]
[16:34:07.615]    </block>
[16:34:07.615]    <control if="protType == 1" while="" timeout="0" info="">
[16:34:07.615]      // if-block "protType == 1"
[16:34:07.615]        // =>  FALSE
[16:34:07.615]      // skip if-block "protType == 1"
[16:34:07.615]    </control>
[16:34:07.615]    <control if="protType == 2" while="" timeout="0" info="">
[16:34:07.615]      // if-block "protType == 2"
[16:34:07.615]        // =>  TRUE
[16:34:07.615]      <control if="isSWJ" while="" timeout="0" info="">
[16:34:07.615]        // if-block "isSWJ"
[16:34:07.615]          // =>  TRUE
[16:34:07.615]        <control if="hasDormant" while="" timeout="0" info="">
[16:34:07.615]          // if-block "hasDormant"
[16:34:07.615]            // =>  FALSE
[16:34:07.615]          // skip if-block "hasDormant"
[16:34:07.615]        </control>
[16:34:07.615]        <control if="!hasDormant" while="" timeout="0" info="">
[16:34:07.615]          // if-block "!hasDormant"
[16:34:07.615]            // =>  TRUE
[16:34:07.615]          <block atomic="false" info="">
[16:34:07.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:34:07.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.623]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:34:07.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:34:07.631]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:34:07.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.633]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:34:07.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:34:07.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:34:07.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.639]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:34:07.643]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:34:07.643]          </block>
[16:34:07.643]          // end if-block "!hasDormant"
[16:34:07.643]        </control>
[16:34:07.643]        // end if-block "isSWJ"
[16:34:07.643]      </control>
[16:34:07.643]      <control if="!isSWJ" while="" timeout="0" info="">
[16:34:07.643]        // if-block "!isSWJ"
[16:34:07.643]          // =>  FALSE
[16:34:07.643]        // skip if-block "!isSWJ"
[16:34:07.643]      </control>
[16:34:07.643]      <block atomic="false" info="">
[16:34:07.643]        ReadDP(0x0);
[16:34:07.647]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:34:07.647]      </block>
[16:34:07.647]      // end if-block "protType == 2"
[16:34:07.647]    </control>
[16:34:07.647]  </sequence>
[16:34:07.647]  
[16:34:07.654]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:34:07.654]  
[16:34:07.654]  <debugvars>
[16:34:07.654]    // Pre-defined
[16:34:07.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.654]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.654]    __dp=0x00000000
[16:34:07.654]    __ap=0x00000000
[16:34:07.654]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.654]    __FlashAddr=0x00000000
[16:34:07.654]    __FlashLen=0x00000000
[16:34:07.654]    __FlashArg=0x00000000
[16:34:07.654]    __FlashOp=0x00000000
[16:34:07.654]    __Result=0x00000000
[16:34:07.654]  </debugvars>
[16:34:07.654]  
[16:34:07.654]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:34:07.654]    <block atomic="false" info="">
[16:34:07.654]      __var SW_DP_ABORT       = 0x0;
[16:34:07.654]        // -> [SW_DP_ABORT <= 0x00000000]
[16:34:07.654]      __var DP_CTRL_STAT      = 0x4;
[16:34:07.654]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:34:07.654]      __var DP_SELECT         = 0x8;
[16:34:07.654]        // -> [DP_SELECT <= 0x00000008]
[16:34:07.654]      __var powered_down      = 0;
[16:34:07.654]        // -> [powered_down <= 0x00000000]
[16:34:07.654]      WriteDP(DP_SELECT, 0x00000000);
[16:34:07.654]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:34:07.654]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:34:07.654]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:34:07.654]        // -> [powered_down <= 0x00000001]
[16:34:07.664]    </block>
[16:34:07.664]    <control if="powered_down" while="" timeout="0" info="">
[16:34:07.664]      // if-block "powered_down"
[16:34:07.665]        // =>  TRUE
[16:34:07.665]      <block atomic="false" info="">
[16:34:07.665]        Message(0, "Debug/System power-up request sent");
[16:34:07.665]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:34:07.673]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:34:07.673]      </block>
[16:34:07.673]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:34:07.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:34:07.677]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:34:07.677]        // while-condition  =>  FALSE
[16:34:07.677]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:34:07.677]      </control>
[16:34:07.677]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:34:07.677]        // if-block "(__protocol & 0xFFFF) == 1"
[16:34:07.677]          // =>  FALSE
[16:34:07.677]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:34:07.677]      </control>
[16:34:07.677]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:34:07.677]        // if-block "(__protocol & 0xFFFF) == 2"
[16:34:07.677]          // =>  TRUE
[16:34:07.677]        <block atomic="false" info="">
[16:34:07.677]          Message(0, "executing SWD power up");
[16:34:07.677]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:34:07.685]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:34:07.685]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:34:07.695]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:34:07.696]        </block>
[16:34:07.696]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:34:07.696]      </control>
[16:34:07.696]      // end if-block "powered_down"
[16:34:07.696]    </control>
[16:34:07.696]    <block atomic="false" info="">
[16:34:07.696]      __var DEBUG_PORT_VAL    = 0;
[16:34:07.696]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:34:07.696]      __var ACCESS_POINT_VAL  = 0;
[16:34:07.696]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:34:07.696]      __ap = 1; 
[16:34:07.696]        // -> [__ap <= 0x00000001]
[16:34:07.696]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:34:07.705]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:34:07.705]      __ap = 4;
[16:34:07.705]        // -> [__ap <= 0x00000004]
[16:34:07.705]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:07.723]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.723]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:34:07.723]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:07.723]    </block>
[16:34:07.723]    <block atomic="false" info="">
[16:34:07.723]      __var nReset = 0x80;
[16:34:07.723]        // -> [nReset <= 0x00000080]
[16:34:07.723]      __var canReadPins = 0;
[16:34:07.723]        // -> [canReadPins <= 0x00000000]
[16:34:07.723]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:34:07.732]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:34:07.733]        // -> [canReadPins <= 0x00000001]
[16:34:07.733]    </block>
[16:34:07.733]    <control if="" while="1" timeout="200" info="">
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.733]      // while-condition  =>  TRUE
[16:34:07.733]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.735]      // while "1"  (timeout="200")
[16:34:07.735]      // while-condition  =>  TRUE
[16:34:07.738]      // while "1"  (timeout="200")
[16:34:07.738]      // while  =>  TIMEOUT
[16:34:07.738]      // end while "1"
[16:34:07.738]    </control>
[16:34:07.738]    <control if="canReadPins" while="" timeout="0" info="">
[16:34:07.738]      // if-block "canReadPins"
[16:34:07.739]        // =>  TRUE
[16:34:07.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:34:07.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:34:07.739]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:34:07.739]        // while-condition  =>  FALSE
[16:34:07.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:34:07.739]      </control>
[16:34:07.743]      // end if-block "canReadPins"
[16:34:07.743]    </control>
[16:34:07.743]    <control if="!canReadPins" while="" timeout="0" info="">
[16:34:07.743]      // if-block "!canReadPins"
[16:34:07.743]        // =>  FALSE
[16:34:07.743]      // skip if-block "!canReadPins"
[16:34:07.743]    </control>
[16:34:07.743]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:34:07.743]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:07.743]        // =>  TRUE
[16:34:07.743]      <block atomic="false" info="">
[16:34:07.743]        WriteAP(0x00, 0x190008);
[16:34:07.745]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.745]        WriteAP(0xF0, 0x01);
[16:34:07.760]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.760]      </block>
[16:34:07.760]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:07.760]    </control>
[16:34:07.760]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:34:07.760]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:07.760]        // =>  FALSE
[16:34:07.760]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:07.760]    </control>
[16:34:07.760]    <block atomic="false" info="">
[16:34:07.760]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:07.773]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.773]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:34:07.773]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:07.773]      __ap = 0; //lets make sure we reset the access point selection
[16:34:07.773]        // -> [__ap <= 0x00000000]
[16:34:07.773]    </block>
[16:34:07.773]  </sequence>
[16:34:07.773]  
[16:34:07.830]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:34:07.830]  
[16:34:07.830]  <debugvars>
[16:34:07.830]    // Pre-defined
[16:34:07.830]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.830]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.830]    __dp=0x00000000
[16:34:07.830]    __ap=0x00000000
[16:34:07.830]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.830]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.830]    __FlashAddr=0x00000000
[16:34:07.830]    __FlashLen=0x00000000
[16:34:07.830]    __FlashArg=0x00000000
[16:34:07.830]    __FlashOp=0x00000000
[16:34:07.830]    __Result=0x00000000
[16:34:07.830]  </debugvars>
[16:34:07.830]  
[16:34:07.830]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:34:07.830]    <block atomic="false" info="">
[16:34:07.830]      __var deviceID = 0;
[16:34:07.830]        // -> [deviceID <= 0x00000000]
[16:34:07.830]      __var version = 0;
[16:34:07.830]        // -> [version <= 0x00000000]
[16:34:07.830]      __var partNum = 0;
[16:34:07.830]        // -> [partNum <= 0x00000000]
[16:34:07.830]      __var manuf = 0;
[16:34:07.830]        // -> [manuf <= 0x00000000]
[16:34:07.830]      __var isMSPM0G1X0X_G3X0X = 0;
[16:34:07.830]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:34:07.830]      __var isProduction = 0;
[16:34:07.830]        // -> [isProduction <= 0x00000000]
[16:34:07.830]      __var continueId = 0;
[16:34:07.830]        // -> [continueId <= 0x00000000]
[16:34:07.830]      deviceID =   Read32(0x41C40004);
[16:34:07.848]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:34:07.848]        // -> [deviceID <= 0x2BB8802F]
[16:34:07.848]      version = deviceID >> 28;
[16:34:07.848]        // -> [version <= 0x00000002]
[16:34:07.848]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:34:07.848]        // -> [partNum <= 0x0000BB88]
[16:34:07.848]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:34:07.848]        // -> [manuf <= 0x00000017]
[16:34:07.848]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:34:07.848]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:34:07.849]      isProduction = (version > 0);
[16:34:07.849]        // -> [isProduction <= 0x00000001]
[16:34:07.849]    </block>
[16:34:07.849]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:34:07.849]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:34:07.849]        // =>  FALSE
[16:34:07.849]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:34:07.849]    </control>
[16:34:07.849]    <control if="continueId == 4" while="" timeout="0" info="">
[16:34:07.849]      // if-block "continueId == 4"
[16:34:07.849]        // =>  FALSE
[16:34:07.849]      // skip if-block "continueId == 4"
[16:34:07.849]    </control>
[16:34:07.851]    <control if="!isProduction" while="" timeout="0" info="">
[16:34:07.851]      // if-block "!isProduction"
[16:34:07.851]        // =>  FALSE
[16:34:07.851]      // skip if-block "!isProduction"
[16:34:07.851]    </control>
[16:34:07.851]  </sequence>
[16:34:07.851]  
[16:34:43.913]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:34:43.913]  
[16:34:43.922]  <debugvars>
[16:34:43.922]    // Pre-defined
[16:34:43.922]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:43.922]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:43.922]    __dp=0x00000000
[16:34:43.922]    __ap=0x00000000
[16:34:43.922]    __traceout=0x00000000      (Trace Disabled)
[16:34:43.922]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:43.922]    __FlashAddr=0x00000000
[16:34:43.922]    __FlashLen=0x00000000
[16:34:43.923]    __FlashArg=0x00000000
[16:34:43.923]    __FlashOp=0x00000000
[16:34:43.923]    __Result=0x00000000
[16:34:43.923]  </debugvars>
[16:34:43.923]  
[16:34:43.923]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:34:43.923]    <block atomic="false" info="">
[16:34:43.923]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:34:43.923]        // -> [isSWJ <= 0x00000001]
[16:34:43.923]      __var hasDormant = __protocol & 0x00020000;
[16:34:43.923]        // -> [hasDormant <= 0x00000000]
[16:34:43.923]      __var protType   = __protocol & 0x0000FFFF;
[16:34:43.923]        // -> [protType <= 0x00000002]
[16:34:43.923]    </block>
[16:34:43.923]    <control if="protType == 1" while="" timeout="0" info="">
[16:34:43.923]      // if-block "protType == 1"
[16:34:43.923]        // =>  FALSE
[16:34:43.925]      // skip if-block "protType == 1"
[16:34:43.925]    </control>
[16:34:43.925]    <control if="protType == 2" while="" timeout="0" info="">
[16:34:43.925]      // if-block "protType == 2"
[16:34:43.925]        // =>  TRUE
[16:34:43.925]      <control if="isSWJ" while="" timeout="0" info="">
[16:34:43.925]        // if-block "isSWJ"
[16:34:43.925]          // =>  TRUE
[16:34:43.925]        <control if="hasDormant" while="" timeout="0" info="">
[16:34:43.925]          // if-block "hasDormant"
[16:34:43.925]            // =>  FALSE
[16:34:43.925]          // skip if-block "hasDormant"
[16:34:43.925]        </control>
[16:34:43.925]        <control if="!hasDormant" while="" timeout="0" info="">
[16:34:43.925]          // if-block "!hasDormant"
[16:34:43.925]            // =>  TRUE
[16:34:43.925]          <block atomic="false" info="">
[16:34:43.925]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:34:43.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:43.930]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:34:43.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:34:43.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:34:43.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:43.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:34:43.940]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:34:43.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:34:43.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:43.943]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:34:43.943]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:34:43.949]          </block>
[16:34:43.949]          // end if-block "!hasDormant"
[16:34:43.949]        </control>
[16:34:43.949]        // end if-block "isSWJ"
[16:34:43.949]      </control>
[16:34:43.949]      <control if="!isSWJ" while="" timeout="0" info="">
[16:34:43.949]        // if-block "!isSWJ"
[16:34:43.949]          // =>  FALSE
[16:34:43.949]        // skip if-block "!isSWJ"
[16:34:43.949]      </control>
[16:34:43.949]      <block atomic="false" info="">
[16:34:43.949]        ReadDP(0x0);
[16:34:43.956]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:34:43.956]      </block>
[16:34:43.956]      // end if-block "protType == 2"
[16:34:43.956]    </control>
[16:34:43.956]  </sequence>
[16:34:43.957]  
[16:34:43.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:34:43.962]  
[16:34:43.962]  <debugvars>
[16:34:43.962]    // Pre-defined
[16:34:43.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:43.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:43.962]    __dp=0x00000000
[16:34:43.962]    __ap=0x00000000
[16:34:43.962]    __traceout=0x00000000      (Trace Disabled)
[16:34:43.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:43.962]    __FlashAddr=0x00000000
[16:34:43.962]    __FlashLen=0x00000000
[16:34:43.962]    __FlashArg=0x00000000
[16:34:43.962]    __FlashOp=0x00000000
[16:34:43.962]    __Result=0x00000000
[16:34:43.962]  </debugvars>
[16:34:43.962]  
[16:34:43.962]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:34:43.962]    <block atomic="false" info="">
[16:34:43.962]      __var SW_DP_ABORT       = 0x0;
[16:34:43.962]        // -> [SW_DP_ABORT <= 0x00000000]
[16:34:43.962]      __var DP_CTRL_STAT      = 0x4;
[16:34:43.962]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:34:43.962]      __var DP_SELECT         = 0x8;
[16:34:43.962]        // -> [DP_SELECT <= 0x00000008]
[16:34:43.962]      __var powered_down      = 0;
[16:34:43.962]        // -> [powered_down <= 0x00000000]
[16:34:43.962]      WriteDP(DP_SELECT, 0x00000000);
[16:34:43.962]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:34:43.962]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:34:43.970]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:34:43.970]        // -> [powered_down <= 0x00000001]
[16:34:43.970]    </block>
[16:34:43.970]    <control if="powered_down" while="" timeout="0" info="">
[16:34:43.970]      // if-block "powered_down"
[16:34:43.970]        // =>  TRUE
[16:34:43.970]      <block atomic="false" info="">
[16:34:43.970]        Message(0, "Debug/System power-up request sent");
[16:34:43.970]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:34:43.980]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:34:43.980]      </block>
[16:34:43.980]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:34:43.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:34:43.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:34:43.985]        // while-condition  =>  FALSE
[16:34:43.985]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:34:43.985]      </control>
[16:34:43.985]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:34:43.985]        // if-block "(__protocol & 0xFFFF) == 1"
[16:34:43.985]          // =>  FALSE
[16:34:43.985]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:34:43.985]      </control>
[16:34:43.985]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:34:43.985]        // if-block "(__protocol & 0xFFFF) == 2"
[16:34:43.985]          // =>  TRUE
[16:34:43.985]        <block atomic="false" info="">
[16:34:43.985]          Message(0, "executing SWD power up");
[16:34:43.989]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:34:43.992]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:34:43.992]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:34:43.995]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:34:43.995]        </block>
[16:34:43.995]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:34:43.995]      </control>
[16:34:43.995]      // end if-block "powered_down"
[16:34:43.995]    </control>
[16:34:43.997]    <block atomic="false" info="">
[16:34:43.997]      __var DEBUG_PORT_VAL    = 0;
[16:34:43.997]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:34:43.997]      __var ACCESS_POINT_VAL  = 0;
[16:34:43.997]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:34:43.997]      __ap = 1; 
[16:34:43.997]        // -> [__ap <= 0x00000001]
[16:34:43.997]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:34:44.011]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:34:44.011]      __ap = 4;
[16:34:44.011]        // -> [__ap <= 0x00000004]
[16:34:44.011]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:44.023]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:34:44.023]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:34:44.023]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:44.024]    </block>
[16:34:44.024]    <block atomic="false" info="">
[16:34:44.024]      __var nReset = 0x80;
[16:34:44.024]        // -> [nReset <= 0x00000080]
[16:34:44.024]      __var canReadPins = 0;
[16:34:44.024]        // -> [canReadPins <= 0x00000000]
[16:34:44.024]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:34:44.024]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:34:44.024]        // -> [canReadPins <= 0x00000001]
[16:34:44.024]    </block>
[16:34:44.024]    <control if="" while="1" timeout="200" info="">
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.024]      // while-condition  =>  TRUE
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.024]      // while-condition  =>  TRUE
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.024]      // while-condition  =>  TRUE
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.024]      // while-condition  =>  TRUE
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.024]      // while-condition  =>  TRUE
[16:34:44.024]      // while "1"  (timeout="200")
[16:34:44.030]      // while-condition  =>  TRUE
[16:34:44.030]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.031]      // while "1"  (timeout="200")
[16:34:44.031]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.032]      // while-condition  =>  TRUE
[16:34:44.032]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.033]      // while-condition  =>  TRUE
[16:34:44.033]      // while "1"  (timeout="200")
[16:34:44.036]      // while-condition  =>  TRUE
[16:34:44.036]      // while "1"  (timeout="200")
[16:34:44.036]      // while  =>  TIMEOUT
[16:34:44.036]      // end while "1"
[16:34:44.036]    </control>
[16:34:44.036]    <control if="canReadPins" while="" timeout="0" info="">
[16:34:44.036]      // if-block "canReadPins"
[16:34:44.036]        // =>  TRUE
[16:34:44.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:34:44.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:34:44.042]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:34:44.042]        // while-condition  =>  FALSE
[16:34:44.042]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:34:44.042]      </control>
[16:34:44.042]      // end if-block "canReadPins"
[16:34:44.042]    </control>
[16:34:44.042]    <control if="!canReadPins" while="" timeout="0" info="">
[16:34:44.042]      // if-block "!canReadPins"
[16:34:44.042]        // =>  FALSE
[16:34:44.044]      // skip if-block "!canReadPins"
[16:34:44.044]    </control>
[16:34:44.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:34:44.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:44.044]        // =>  TRUE
[16:34:44.044]      <block atomic="false" info="">
[16:34:44.044]        WriteAP(0x00, 0x190008);
[16:34:44.047]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:44.047]        WriteAP(0xF0, 0x01);
[16:34:44.052]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:44.052]      </block>
[16:34:44.052]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:44.052]    </control>
[16:34:44.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:34:44.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:44.052]        // =>  FALSE
[16:34:44.052]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:44.052]    </control>
[16:34:44.052]    <block atomic="false" info="">
[16:34:44.052]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:44.061]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:34:44.061]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:34:44.061]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:44.061]      __ap = 0; //lets make sure we reset the access point selection
[16:34:44.061]        // -> [__ap <= 0x00000000]
[16:34:44.062]    </block>
[16:34:44.062]  </sequence>
[16:34:44.062]  
[16:34:44.142]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:34:44.142]  
[16:34:44.142]  <debugvars>
[16:34:44.142]    // Pre-defined
[16:34:44.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:44.142]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:44.142]    __dp=0x00000000
[16:34:44.142]    __ap=0x00000000
[16:34:44.142]    __traceout=0x00000000      (Trace Disabled)
[16:34:44.142]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:44.142]    __FlashAddr=0x00000000
[16:34:44.142]    __FlashLen=0x00000000
[16:34:44.142]    __FlashArg=0x00000000
[16:34:44.142]    __FlashOp=0x00000000
[16:34:44.142]    __Result=0x00000000
[16:34:44.142]  </debugvars>
[16:34:44.142]  
[16:34:44.142]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:34:44.142]    <block atomic="false" info="">
[16:34:44.142]      __var deviceID = 0;
[16:34:44.142]        // -> [deviceID <= 0x00000000]
[16:34:44.142]      __var version = 0;
[16:34:44.142]        // -> [version <= 0x00000000]
[16:34:44.142]      __var partNum = 0;
[16:34:44.142]        // -> [partNum <= 0x00000000]
[16:34:44.142]      __var manuf = 0;
[16:34:44.142]        // -> [manuf <= 0x00000000]
[16:34:44.142]      __var isMSPM0G1X0X_G3X0X = 0;
[16:34:44.142]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:34:44.142]      __var isProduction = 0;
[16:34:44.142]        // -> [isProduction <= 0x00000000]
[16:34:44.142]      __var continueId = 0;
[16:34:44.142]        // -> [continueId <= 0x00000000]
[16:34:44.142]      deviceID =   Read32(0x41C40004);
[16:34:44.152]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:34:44.152]        // -> [deviceID <= 0x2BB8802F]
[16:34:44.152]      version = deviceID >> 28;
[16:34:44.152]        // -> [version <= 0x00000002]
[16:34:44.152]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:34:44.152]        // -> [partNum <= 0x0000BB88]
[16:34:44.152]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:34:44.152]        // -> [manuf <= 0x00000017]
[16:34:44.152]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:34:44.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:34:44.152]      isProduction = (version > 0);
[16:34:44.152]        // -> [isProduction <= 0x00000001]
[16:34:44.152]    </block>
[16:34:44.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:34:44.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:34:44.152]        // =>  FALSE
[16:34:44.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:34:44.152]    </control>
[16:34:44.152]    <control if="continueId == 4" while="" timeout="0" info="">
[16:34:44.152]      // if-block "continueId == 4"
[16:34:44.152]        // =>  FALSE
[16:34:44.152]      // skip if-block "continueId == 4"
[16:34:44.152]    </control>
[16:34:44.152]    <control if="!isProduction" while="" timeout="0" info="">
[16:34:44.152]      // if-block "!isProduction"
[16:34:44.152]        // =>  FALSE
[16:34:44.152]      // skip if-block "!isProduction"
[16:34:44.152]    </control>
[16:34:44.152]  </sequence>
[16:34:44.152]  
[16:35:55.674]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:35:55.674]  
[16:35:55.674]  <debugvars>
[16:35:55.674]    // Pre-defined
[16:35:55.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:35:55.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:35:55.674]    __dp=0x00000000
[16:35:55.674]    __ap=0x00000000
[16:35:55.674]    __traceout=0x00000000      (Trace Disabled)
[16:35:55.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:35:55.674]    __FlashAddr=0x00000000
[16:35:55.674]    __FlashLen=0x00000000
[16:35:55.674]    __FlashArg=0x00000000
[16:35:55.674]    __FlashOp=0x00000000
[16:35:55.674]    __Result=0x00000000
[16:35:55.674]  </debugvars>
[16:35:55.674]  
[16:35:55.674]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:35:55.674]    <block atomic="false" info="">
[16:35:55.674]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:35:55.674]        // -> [isSWJ <= 0x00000001]
[16:35:55.674]      __var hasDormant = __protocol & 0x00020000;
[16:35:55.674]        // -> [hasDormant <= 0x00000000]
[16:35:55.674]      __var protType   = __protocol & 0x0000FFFF;
[16:35:55.674]        // -> [protType <= 0x00000002]
[16:35:55.674]    </block>
[16:35:55.674]    <control if="protType == 1" while="" timeout="0" info="">
[16:35:55.674]      // if-block "protType == 1"
[16:35:55.674]        // =>  FALSE
[16:35:55.674]      // skip if-block "protType == 1"
[16:35:55.674]    </control>
[16:35:55.674]    <control if="protType == 2" while="" timeout="0" info="">
[16:35:55.674]      // if-block "protType == 2"
[16:35:55.674]        // =>  TRUE
[16:35:55.674]      <control if="isSWJ" while="" timeout="0" info="">
[16:35:55.674]        // if-block "isSWJ"
[16:35:55.674]          // =>  TRUE
[16:35:55.674]        <control if="hasDormant" while="" timeout="0" info="">
[16:35:55.674]          // if-block "hasDormant"
[16:35:55.674]            // =>  FALSE
[16:35:55.674]          // skip if-block "hasDormant"
[16:35:55.674]        </control>
[16:35:55.674]        <control if="!hasDormant" while="" timeout="0" info="">
[16:35:55.674]          // if-block "!hasDormant"
[16:35:55.674]            // =>  TRUE
[16:35:55.674]          <block atomic="false" info="">
[16:35:55.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:35:55.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:35:55.684]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:35:55.684]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:35:55.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:35:55.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:35:55.702]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:35:55.704]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:35:55.704]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:35:55.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:35:55.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:35:55.704]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:35:55.704]          </block>
[16:35:55.704]          // end if-block "!hasDormant"
[16:35:55.704]        </control>
[16:35:55.704]        // end if-block "isSWJ"
[16:35:55.704]      </control>
[16:35:55.704]      <control if="!isSWJ" while="" timeout="0" info="">
[16:35:55.704]        // if-block "!isSWJ"
[16:35:55.704]          // =>  FALSE
[16:35:55.704]        // skip if-block "!isSWJ"
[16:35:55.714]      </control>
[16:35:55.714]      <block atomic="false" info="">
[16:35:55.714]        ReadDP(0x0);
[16:35:55.714]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:35:55.714]      </block>
[16:35:55.714]      // end if-block "protType == 2"
[16:35:55.714]    </control>
[16:35:55.714]  </sequence>
[16:35:55.714]  
[16:35:55.727]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:35:55.727]  
[16:35:55.727]  <debugvars>
[16:35:55.727]    // Pre-defined
[16:35:55.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:35:55.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:35:55.727]    __dp=0x00000000
[16:35:55.727]    __ap=0x00000000
[16:35:55.727]    __traceout=0x00000000      (Trace Disabled)
[16:35:55.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:35:55.727]    __FlashAddr=0x00000000
[16:35:55.727]    __FlashLen=0x00000000
[16:35:55.727]    __FlashArg=0x00000000
[16:35:55.727]    __FlashOp=0x00000000
[16:35:55.727]    __Result=0x00000000
[16:35:55.727]  </debugvars>
[16:35:55.727]  
[16:35:55.727]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:35:55.727]    <block atomic="false" info="">
[16:35:55.727]      __var SW_DP_ABORT       = 0x0;
[16:35:55.727]        // -> [SW_DP_ABORT <= 0x00000000]
[16:35:55.727]      __var DP_CTRL_STAT      = 0x4;
[16:35:55.727]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:35:55.727]      __var DP_SELECT         = 0x8;
[16:35:55.727]        // -> [DP_SELECT <= 0x00000008]
[16:35:55.727]      __var powered_down      = 0;
[16:35:55.727]        // -> [powered_down <= 0x00000000]
[16:35:55.727]      WriteDP(DP_SELECT, 0x00000000);
[16:35:55.727]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:35:55.727]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:35:55.735]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:35:55.735]        // -> [powered_down <= 0x00000001]
[16:35:55.735]    </block>
[16:35:55.735]    <control if="powered_down" while="" timeout="0" info="">
[16:35:55.735]      // if-block "powered_down"
[16:35:55.735]        // =>  TRUE
[16:35:55.735]      <block atomic="false" info="">
[16:35:55.735]        Message(0, "Debug/System power-up request sent");
[16:35:55.735]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:35:55.735]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:35:55.735]      </block>
[16:35:55.735]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:35:55.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:35:55.745]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:35:55.745]        // while-condition  =>  FALSE
[16:35:55.745]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:35:55.745]      </control>
[16:35:55.745]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:35:55.745]        // if-block "(__protocol & 0xFFFF) == 1"
[16:35:55.745]          // =>  FALSE
[16:35:55.745]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:35:55.745]      </control>
[16:35:55.747]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:35:55.747]        // if-block "(__protocol & 0xFFFF) == 2"
[16:35:55.747]          // =>  TRUE
[16:35:55.747]        <block atomic="false" info="">
[16:35:55.747]          Message(0, "executing SWD power up");
[16:35:55.747]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:35:55.747]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:35:55.747]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:35:55.758]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:35:55.758]        </block>
[16:35:55.758]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:35:55.758]      </control>
[16:35:55.758]      // end if-block "powered_down"
[16:35:55.758]    </control>
[16:35:55.758]    <block atomic="false" info="">
[16:35:55.758]      __var DEBUG_PORT_VAL    = 0;
[16:35:55.758]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:35:55.758]      __var ACCESS_POINT_VAL  = 0;
[16:35:55.758]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:35:55.758]      __ap = 1; 
[16:35:55.758]        // -> [__ap <= 0x00000001]
[16:35:55.758]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:35:55.775]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:35:55.775]      __ap = 4;
[16:35:55.775]        // -> [__ap <= 0x00000004]
[16:35:55.775]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:35:55.775]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:35:55.775]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:35:55.775]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:35:55.775]    </block>
[16:35:55.775]    <block atomic="false" info="">
[16:35:55.775]      __var nReset = 0x80;
[16:35:55.775]        // -> [nReset <= 0x00000080]
[16:35:55.785]      __var canReadPins = 0;
[16:35:55.785]        // -> [canReadPins <= 0x00000000]
[16:35:55.785]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:35:55.787]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:35:55.787]        // -> [canReadPins <= 0x00000001]
[16:35:55.787]    </block>
[16:35:55.787]    <control if="" while="1" timeout="200" info="">
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.787]      // while-condition  =>  TRUE
[16:35:55.787]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.796]      // while "1"  (timeout="200")
[16:35:55.796]      // while-condition  =>  TRUE
[16:35:55.802]      // while "1"  (timeout="200")
[16:35:55.802]      // while  =>  TIMEOUT
[16:35:55.802]      // end while "1"
[16:35:55.802]    </control>
[16:35:55.802]    <control if="canReadPins" while="" timeout="0" info="">
[16:35:55.802]      // if-block "canReadPins"
[16:35:55.802]        // =>  TRUE
[16:35:55.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:35:55.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:35:55.802]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:35:55.802]        // while-condition  =>  FALSE
[16:35:55.802]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:35:55.802]      </control>
[16:35:55.802]      // end if-block "canReadPins"
[16:35:55.806]    </control>
[16:35:55.806]    <control if="!canReadPins" while="" timeout="0" info="">
[16:35:55.806]      // if-block "!canReadPins"
[16:35:55.806]        // =>  FALSE
[16:35:55.806]      // skip if-block "!canReadPins"
[16:35:55.806]    </control>
[16:35:55.806]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:35:55.806]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:35:55.806]        // =>  TRUE
[16:35:55.806]      <block atomic="false" info="">
[16:35:55.806]        WriteAP(0x00, 0x190008);
[16:35:55.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:35:55.806]        WriteAP(0xF0, 0x01);
[16:35:55.817]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:35:55.817]      </block>
[16:35:55.817]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:35:55.817]    </control>
[16:35:55.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:35:55.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:35:55.817]        // =>  FALSE
[16:35:55.817]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:35:55.817]    </control>
[16:35:55.817]    <block atomic="false" info="">
[16:35:55.817]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:35:55.826]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:35:55.826]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:35:55.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:35:55.826]      __ap = 0; //lets make sure we reset the access point selection
[16:35:55.826]        // -> [__ap <= 0x00000000]
[16:35:55.826]    </block>
[16:35:55.826]  </sequence>
[16:35:55.826]  
[16:35:55.872]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:35:55.872]  
[16:35:55.872]  <debugvars>
[16:35:55.872]    // Pre-defined
[16:35:55.872]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:35:55.872]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:35:55.872]    __dp=0x00000000
[16:35:55.872]    __ap=0x00000000
[16:35:55.872]    __traceout=0x00000000      (Trace Disabled)
[16:35:55.872]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:35:55.872]    __FlashAddr=0x00000000
[16:35:55.872]    __FlashLen=0x00000000
[16:35:55.872]    __FlashArg=0x00000000
[16:35:55.872]    __FlashOp=0x00000000
[16:35:55.872]    __Result=0x00000000
[16:35:55.872]  </debugvars>
[16:35:55.872]  
[16:35:55.872]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:35:55.872]    <block atomic="false" info="">
[16:35:55.872]      __var deviceID = 0;
[16:35:55.872]        // -> [deviceID <= 0x00000000]
[16:35:55.872]      __var version = 0;
[16:35:55.872]        // -> [version <= 0x00000000]
[16:35:55.872]      __var partNum = 0;
[16:35:55.872]        // -> [partNum <= 0x00000000]
[16:35:55.877]      __var manuf = 0;
[16:35:55.877]        // -> [manuf <= 0x00000000]
[16:35:55.877]      __var isMSPM0G1X0X_G3X0X = 0;
[16:35:55.877]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:35:55.877]      __var isProduction = 0;
[16:35:55.877]        // -> [isProduction <= 0x00000000]
[16:35:55.877]      __var continueId = 0;
[16:35:55.877]        // -> [continueId <= 0x00000000]
[16:35:55.877]      deviceID =   Read32(0x41C40004);
[16:35:55.887]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:35:55.887]        // -> [deviceID <= 0x2BB8802F]
[16:35:55.887]      version = deviceID >> 28;
[16:35:55.887]        // -> [version <= 0x00000002]
[16:35:55.887]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:35:55.887]        // -> [partNum <= 0x0000BB88]
[16:35:55.887]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:35:55.887]        // -> [manuf <= 0x00000017]
[16:35:55.887]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:35:55.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:35:55.887]      isProduction = (version > 0);
[16:35:55.887]        // -> [isProduction <= 0x00000001]
[16:35:55.887]    </block>
[16:35:55.887]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:35:55.887]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:35:55.887]        // =>  FALSE
[16:35:55.887]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:35:55.887]    </control>
[16:35:55.887]    <control if="continueId == 4" while="" timeout="0" info="">
[16:35:55.887]      // if-block "continueId == 4"
[16:35:55.887]        // =>  FALSE
[16:35:55.887]      // skip if-block "continueId == 4"
[16:35:55.887]    </control>
[16:35:55.887]    <control if="!isProduction" while="" timeout="0" info="">
[16:35:55.887]      // if-block "!isProduction"
[16:35:55.887]        // =>  FALSE
[16:35:55.887]      // skip if-block "!isProduction"
[16:35:55.887]    </control>
[16:35:55.887]  </sequence>
[16:35:55.887]  
[16:36:24.798]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:36:24.798]  
[16:36:24.806]  <debugvars>
[16:36:24.806]    // Pre-defined
[16:36:24.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:36:24.806]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:36:24.806]    __dp=0x00000000
[16:36:24.806]    __ap=0x00000000
[16:36:24.806]    __traceout=0x00000000      (Trace Disabled)
[16:36:24.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:36:24.806]    __FlashAddr=0x00000000
[16:36:24.806]    __FlashLen=0x00000000
[16:36:24.806]    __FlashArg=0x00000000
[16:36:24.806]    __FlashOp=0x00000000
[16:36:24.806]    __Result=0x00000000
[16:36:24.806]  </debugvars>
[16:36:24.806]  
[16:36:24.806]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:36:24.806]    <block atomic="false" info="">
[16:36:24.806]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:36:24.806]        // -> [isSWJ <= 0x00000001]
[16:36:24.806]      __var hasDormant = __protocol & 0x00020000;
[16:36:24.806]        // -> [hasDormant <= 0x00000000]
[16:36:24.809]      __var protType   = __protocol & 0x0000FFFF;
[16:36:24.809]        // -> [protType <= 0x00000002]
[16:36:24.809]    </block>
[16:36:24.809]    <control if="protType == 1" while="" timeout="0" info="">
[16:36:24.809]      // if-block "protType == 1"
[16:36:24.809]        // =>  FALSE
[16:36:24.809]      // skip if-block "protType == 1"
[16:36:24.809]    </control>
[16:36:24.809]    <control if="protType == 2" while="" timeout="0" info="">
[16:36:24.809]      // if-block "protType == 2"
[16:36:24.809]        // =>  TRUE
[16:36:24.809]      <control if="isSWJ" while="" timeout="0" info="">
[16:36:24.809]        // if-block "isSWJ"
[16:36:24.811]          // =>  TRUE
[16:36:24.811]        <control if="hasDormant" while="" timeout="0" info="">
[16:36:24.811]          // if-block "hasDormant"
[16:36:24.811]            // =>  FALSE
[16:36:24.812]          // skip if-block "hasDormant"
[16:36:24.812]        </control>
[16:36:24.812]        <control if="!hasDormant" while="" timeout="0" info="">
[16:36:24.812]          // if-block "!hasDormant"
[16:36:24.812]            // =>  TRUE
[16:36:24.812]          <block atomic="false" info="">
[16:36:24.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:36:24.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:36:24.812]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:36:24.832]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:36:24.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:36:24.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:36:24.852]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:36:24.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:36:24.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:36:24.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:36:24.885]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:36:24.889]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:36:24.889]          </block>
[16:36:24.889]          // end if-block "!hasDormant"
[16:36:24.889]        </control>
[16:36:24.889]        // end if-block "isSWJ"
[16:36:24.889]      </control>
[16:36:24.889]      <control if="!isSWJ" while="" timeout="0" info="">
[16:36:24.889]        // if-block "!isSWJ"
[16:36:24.889]          // =>  FALSE
[16:36:24.889]        // skip if-block "!isSWJ"
[16:36:24.889]      </control>
[16:36:24.889]      <block atomic="false" info="">
[16:36:24.889]        ReadDP(0x0);
[16:36:24.894]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:36:24.894]      </block>
[16:36:24.894]      // end if-block "protType == 2"
[16:36:24.894]    </control>
[16:36:24.894]  </sequence>
[16:36:24.894]  
[16:36:24.917]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:36:24.917]  
[16:36:24.917]  <debugvars>
[16:36:24.917]    // Pre-defined
[16:36:24.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:36:24.917]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:36:24.917]    __dp=0x00000000
[16:36:24.917]    __ap=0x00000000
[16:36:24.917]    __traceout=0x00000000      (Trace Disabled)
[16:36:24.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:36:24.917]    __FlashAddr=0x00000000
[16:36:24.919]    __FlashLen=0x00000000
[16:36:24.919]    __FlashArg=0x00000000
[16:36:24.919]    __FlashOp=0x00000000
[16:36:24.919]    __Result=0x00000000
[16:36:24.919]  </debugvars>
[16:36:24.919]  
[16:36:24.919]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:36:24.919]    <block atomic="false" info="">
[16:36:24.919]      __var SW_DP_ABORT       = 0x0;
[16:36:24.919]        // -> [SW_DP_ABORT <= 0x00000000]
[16:36:24.919]      __var DP_CTRL_STAT      = 0x4;
[16:36:24.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:36:24.919]      __var DP_SELECT         = 0x8;
[16:36:24.919]        // -> [DP_SELECT <= 0x00000008]
[16:36:24.919]      __var powered_down      = 0;
[16:36:24.919]        // -> [powered_down <= 0x00000000]
[16:36:24.919]      WriteDP(DP_SELECT, 0x00000000);
[16:36:24.923]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:36:24.923]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:36:24.923]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:36:24.923]        // -> [powered_down <= 0x00000001]
[16:36:24.923]    </block>
[16:36:24.923]    <control if="powered_down" while="" timeout="0" info="">
[16:36:24.923]      // if-block "powered_down"
[16:36:24.923]        // =>  TRUE
[16:36:24.923]      <block atomic="false" info="">
[16:36:24.923]        Message(0, "Debug/System power-up request sent");
[16:36:24.923]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:36:24.933]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:36:24.933]      </block>
[16:36:24.933]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:36:24.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:36:24.940]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:36:24.940]        // while-condition  =>  FALSE
[16:36:24.940]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:36:24.940]      </control>
[16:36:24.943]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:36:24.943]        // if-block "(__protocol & 0xFFFF) == 1"
[16:36:24.943]          // =>  FALSE
[16:36:24.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:36:24.943]      </control>
[16:36:24.943]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:36:24.943]        // if-block "(__protocol & 0xFFFF) == 2"
[16:36:24.943]          // =>  TRUE
[16:36:24.943]        <block atomic="false" info="">
[16:36:24.943]          Message(0, "executing SWD power up");
[16:36:24.943]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:36:24.953]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:36:24.953]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:36:24.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:36:24.963]        </block>
[16:36:24.966]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:36:24.966]      </control>
[16:36:24.966]      // end if-block "powered_down"
[16:36:24.966]    </control>
[16:36:24.966]    <block atomic="false" info="">
[16:36:24.966]      __var DEBUG_PORT_VAL    = 0;
[16:36:24.966]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:36:24.966]      __var ACCESS_POINT_VAL  = 0;
[16:36:24.966]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:36:24.966]      __ap = 1; 
[16:36:24.966]        // -> [__ap <= 0x00000001]
[16:36:24.966]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:36:24.987]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:36:24.987]      __ap = 4;
[16:36:24.987]        // -> [__ap <= 0x00000004]
[16:36:24.987]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:36:24.998]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:36:24.998]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:36:24.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:36:24.998]    </block>
[16:36:24.998]    <block atomic="false" info="">
[16:36:24.998]      __var nReset = 0x80;
[16:36:24.998]        // -> [nReset <= 0x00000080]
[16:36:24.998]      __var canReadPins = 0;
[16:36:24.998]        // -> [canReadPins <= 0x00000000]
[16:36:24.998]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:36:25.005]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:36:25.005]        // -> [canReadPins <= 0x00000001]
[16:36:25.005]    </block>
[16:36:25.005]    <control if="" while="1" timeout="200" info="">
[16:36:25.005]      // while "1"  (timeout="200")
[16:36:25.005]      // while-condition  =>  TRUE
[16:36:25.005]      // while "1"  (timeout="200")
[16:36:25.005]      // while-condition  =>  TRUE
[16:36:25.005]      // while "1"  (timeout="200")
[16:36:25.005]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.007]      // while "1"  (timeout="200")
[16:36:25.007]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.008]      // while "1"  (timeout="200")
[16:36:25.008]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.011]      // while-condition  =>  TRUE
[16:36:25.011]      // while "1"  (timeout="200")
[16:36:25.015]      // while-condition  =>  TRUE
[16:36:25.015]      // while "1"  (timeout="200")
[16:36:25.015]      // while-condition  =>  TRUE
[16:36:25.015]      // while "1"  (timeout="200")
[16:36:25.015]      // while-condition  =>  TRUE
[16:36:25.015]      // while "1"  (timeout="200")
[16:36:25.015]      // while-condition  =>  TRUE
[16:36:25.015]      // while "1"  (timeout="200")
[16:36:25.015]      // while-condition  =>  TRUE
[16:36:25.015]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.016]      // while "1"  (timeout="200")
[16:36:25.016]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.017]      // while "1"  (timeout="200")
[16:36:25.017]      // while-condition  =>  TRUE
[16:36:25.025]      // while "1"  (timeout="200")
[16:36:25.025]      // while  =>  TIMEOUT
[16:36:25.025]      // end while "1"
[16:36:25.025]    </control>
[16:36:25.025]    <control if="canReadPins" while="" timeout="0" info="">
[16:36:25.025]      // if-block "canReadPins"
[16:36:25.025]        // =>  TRUE
[16:36:25.025]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:36:25.025]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:36:25.025]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:36:25.025]        // while-condition  =>  FALSE
[16:36:25.025]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:36:25.025]      </control>
[16:36:25.025]      // end if-block "canReadPins"
[16:36:25.025]    </control>
[16:36:25.025]    <control if="!canReadPins" while="" timeout="0" info="">
[16:36:25.025]      // if-block "!canReadPins"
[16:36:25.025]        // =>  FALSE
[16:36:25.025]      // skip if-block "!canReadPins"
[16:36:25.025]    </control>
[16:36:25.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:36:25.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:36:25.025]        // =>  TRUE
[16:36:25.025]      <block atomic="false" info="">
[16:36:25.025]        WriteAP(0x00, 0x190008);
[16:36:25.032]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:36:25.032]        WriteAP(0xF0, 0x01);
[16:36:25.050]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:36:25.050]      </block>
[16:36:25.050]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:36:25.050]    </control>
[16:36:25.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:36:25.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:36:25.050]        // =>  FALSE
[16:36:25.050]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:36:25.050]    </control>
[16:36:25.050]    <block atomic="false" info="">
[16:36:25.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:36:25.082]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:36:25.082]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:36:25.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:36:25.082]      __ap = 0; //lets make sure we reset the access point selection
[16:36:25.082]        // -> [__ap <= 0x00000000]
[16:36:25.082]    </block>
[16:36:25.083]  </sequence>
[16:36:25.083]  
[16:36:25.170]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:36:25.170]  
[16:36:25.170]  <debugvars>
[16:36:25.170]    // Pre-defined
[16:36:25.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:36:25.170]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:36:25.170]    __dp=0x00000000
[16:36:25.170]    __ap=0x00000000
[16:36:25.170]    __traceout=0x00000000      (Trace Disabled)
[16:36:25.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:36:25.170]    __FlashAddr=0x00000000
[16:36:25.170]    __FlashLen=0x00000000
[16:36:25.174]    __FlashArg=0x00000000
[16:36:25.174]    __FlashOp=0x00000000
[16:36:25.174]    __Result=0x00000000
[16:36:25.174]  </debugvars>
[16:36:25.174]  
[16:36:25.174]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:36:25.174]    <block atomic="false" info="">
[16:36:25.174]      __var deviceID = 0;
[16:36:25.174]        // -> [deviceID <= 0x00000000]
[16:36:25.174]      __var version = 0;
[16:36:25.174]        // -> [version <= 0x00000000]
[16:36:25.174]      __var partNum = 0;
[16:36:25.174]        // -> [partNum <= 0x00000000]
[16:36:25.174]      __var manuf = 0;
[16:36:25.174]        // -> [manuf <= 0x00000000]
[16:36:25.174]      __var isMSPM0G1X0X_G3X0X = 0;
[16:36:25.174]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:36:25.174]      __var isProduction = 0;
[16:36:25.176]        // -> [isProduction <= 0x00000000]
[16:36:25.176]      __var continueId = 0;
[16:36:25.176]        // -> [continueId <= 0x00000000]
[16:36:25.176]      deviceID =   Read32(0x41C40004);
[16:36:25.201]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:36:25.201]        // -> [deviceID <= 0x2BB8802F]
[16:36:25.201]      version = deviceID >> 28;
[16:36:25.201]        // -> [version <= 0x00000002]
[16:36:25.201]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:36:25.201]        // -> [partNum <= 0x0000BB88]
[16:36:25.201]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:36:25.201]        // -> [manuf <= 0x00000017]
[16:36:25.201]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:36:25.201]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:36:25.201]      isProduction = (version > 0);
[16:36:25.201]        // -> [isProduction <= 0x00000001]
[16:36:25.201]    </block>
[16:36:25.201]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:36:25.201]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:36:25.201]        // =>  FALSE
[16:36:25.201]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:36:25.201]    </control>
[16:36:25.201]    <control if="continueId == 4" while="" timeout="0" info="">
[16:36:25.201]      // if-block "continueId == 4"
[16:36:25.201]        // =>  FALSE
[16:36:25.201]      // skip if-block "continueId == 4"
[16:36:25.201]    </control>
[16:36:25.201]    <control if="!isProduction" while="" timeout="0" info="">
[16:36:25.201]      // if-block "!isProduction"
[16:36:25.201]        // =>  FALSE
[16:36:25.208]      // skip if-block "!isProduction"
[16:36:25.208]    </control>
[16:36:25.208]  </sequence>
[16:36:25.208]  
[16:37:17.497]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:37:17.497]  
[16:37:17.497]  <debugvars>
[16:37:17.497]    // Pre-defined
[16:37:17.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:37:17.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:37:17.497]    __dp=0x00000000
[16:37:17.497]    __ap=0x00000000
[16:37:17.497]    __traceout=0x00000000      (Trace Disabled)
[16:37:17.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:37:17.497]    __FlashAddr=0x00000000
[16:37:17.497]    __FlashLen=0x00000000
[16:37:17.497]    __FlashArg=0x00000000
[16:37:17.497]    __FlashOp=0x00000000
[16:37:17.497]    __Result=0x00000000
[16:37:17.497]  </debugvars>
[16:37:17.497]  
[16:37:17.497]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:37:17.497]    <block atomic="false" info="">
[16:37:17.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:37:17.497]        // -> [isSWJ <= 0x00000001]
[16:37:17.497]      __var hasDormant = __protocol & 0x00020000;
[16:37:17.497]        // -> [hasDormant <= 0x00000000]
[16:37:17.497]      __var protType   = __protocol & 0x0000FFFF;
[16:37:17.497]        // -> [protType <= 0x00000002]
[16:37:17.497]    </block>
[16:37:17.497]    <control if="protType == 1" while="" timeout="0" info="">
[16:37:17.497]      // if-block "protType == 1"
[16:37:17.497]        // =>  FALSE
[16:37:17.497]      // skip if-block "protType == 1"
[16:37:17.497]    </control>
[16:37:17.497]    <control if="protType == 2" while="" timeout="0" info="">
[16:37:17.497]      // if-block "protType == 2"
[16:37:17.497]        // =>  TRUE
[16:37:17.497]      <control if="isSWJ" while="" timeout="0" info="">
[16:37:17.497]        // if-block "isSWJ"
[16:37:17.497]          // =>  TRUE
[16:37:17.497]        <control if="hasDormant" while="" timeout="0" info="">
[16:37:17.497]          // if-block "hasDormant"
[16:37:17.497]            // =>  FALSE
[16:37:17.497]          // skip if-block "hasDormant"
[16:37:17.507]        </control>
[16:37:17.507]        <control if="!hasDormant" while="" timeout="0" info="">
[16:37:17.507]          // if-block "!hasDormant"
[16:37:17.507]            // =>  TRUE
[16:37:17.507]          <block atomic="false" info="">
[16:37:17.507]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:37:17.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:37:17.511]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:37:17.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:37:17.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:37:17.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:37:17.525]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:37:17.530]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:37:17.530]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:37:17.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:37:17.532]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:37:17.539]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:37:17.539]          </block>
[16:37:17.539]          // end if-block "!hasDormant"
[16:37:17.539]        </control>
[16:37:17.539]        // end if-block "isSWJ"
[16:37:17.539]      </control>
[16:37:17.539]      <control if="!isSWJ" while="" timeout="0" info="">
[16:37:17.539]        // if-block "!isSWJ"
[16:37:17.539]          // =>  FALSE
[16:37:17.539]        // skip if-block "!isSWJ"
[16:37:17.539]      </control>
[16:37:17.539]      <block atomic="false" info="">
[16:37:17.539]        ReadDP(0x0);
[16:37:17.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:37:17.549]      </block>
[16:37:17.549]      // end if-block "protType == 2"
[16:37:17.549]    </control>
[16:37:17.549]  </sequence>
[16:37:17.549]  
[16:37:17.562]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:37:17.562]  
[16:37:17.562]  <debugvars>
[16:37:17.562]    // Pre-defined
[16:37:17.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:37:17.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:37:17.565]    __dp=0x00000000
[16:37:17.565]    __ap=0x00000000
[16:37:17.565]    __traceout=0x00000000      (Trace Disabled)
[16:37:17.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:37:17.565]    __FlashAddr=0x00000000
[16:37:17.565]    __FlashLen=0x00000000
[16:37:17.565]    __FlashArg=0x00000000
[16:37:17.565]    __FlashOp=0x00000000
[16:37:17.565]    __Result=0x00000000
[16:37:17.565]  </debugvars>
[16:37:17.565]  
[16:37:17.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:37:17.565]    <block atomic="false" info="">
[16:37:17.565]      __var SW_DP_ABORT       = 0x0;
[16:37:17.565]        // -> [SW_DP_ABORT <= 0x00000000]
[16:37:17.565]      __var DP_CTRL_STAT      = 0x4;
[16:37:17.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:37:17.565]      __var DP_SELECT         = 0x8;
[16:37:17.565]        // -> [DP_SELECT <= 0x00000008]
[16:37:17.565]      __var powered_down      = 0;
[16:37:17.565]        // -> [powered_down <= 0x00000000]
[16:37:17.565]      WriteDP(DP_SELECT, 0x00000000);
[16:37:17.579]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:37:17.580]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:37:17.582]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:37:17.582]        // -> [powered_down <= 0x00000001]
[16:37:17.582]    </block>
[16:37:17.582]    <control if="powered_down" while="" timeout="0" info="">
[16:37:17.582]      // if-block "powered_down"
[16:37:17.582]        // =>  TRUE
[16:37:17.582]      <block atomic="false" info="">
[16:37:17.582]        Message(0, "Debug/System power-up request sent");
[16:37:17.582]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:37:17.591]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:37:17.591]      </block>
[16:37:17.591]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:37:17.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:37:17.594]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:37:17.594]        // while-condition  =>  FALSE
[16:37:17.594]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:37:17.594]      </control>
[16:37:17.594]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:37:17.594]        // if-block "(__protocol & 0xFFFF) == 1"
[16:37:17.594]          // =>  FALSE
[16:37:17.594]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:37:17.600]      </control>
[16:37:17.600]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:37:17.600]        // if-block "(__protocol & 0xFFFF) == 2"
[16:37:17.600]          // =>  TRUE
[16:37:17.600]        <block atomic="false" info="">
[16:37:17.600]          Message(0, "executing SWD power up");
[16:37:17.601]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:37:17.614]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:37:17.614]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:37:17.621]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:37:17.622]        </block>
[16:37:17.622]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:37:17.622]      </control>
[16:37:17.622]      // end if-block "powered_down"
[16:37:17.622]    </control>
[16:37:17.622]    <block atomic="false" info="">
[16:37:17.622]      __var DEBUG_PORT_VAL    = 0;
[16:37:17.622]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:37:17.623]      __var ACCESS_POINT_VAL  = 0;
[16:37:17.623]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:37:17.623]      __ap = 1; 
[16:37:17.623]        // -> [__ap <= 0x00000001]
[16:37:17.623]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:37:17.632]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:37:17.633]      __ap = 4;
[16:37:17.633]        // -> [__ap <= 0x00000004]
[16:37:17.633]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:37:17.640]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:37:17.641]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:37:17.641]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:37:17.642]    </block>
[16:37:17.642]    <block atomic="false" info="">
[16:37:17.642]      __var nReset = 0x80;
[16:37:17.642]        // -> [nReset <= 0x00000080]
[16:37:17.642]      __var canReadPins = 0;
[16:37:17.642]        // -> [canReadPins <= 0x00000000]
[16:37:17.642]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:37:17.642]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:37:17.642]        // -> [canReadPins <= 0x00000001]
[16:37:17.642]    </block>
[16:37:17.642]    <control if="" while="1" timeout="200" info="">
[16:37:17.642]      // while "1"  (timeout="200")
[16:37:17.649]      // while-condition  =>  TRUE
[16:37:17.649]      // while "1"  (timeout="200")
[16:37:17.649]      // while  =>  TIMEOUT
[16:37:17.649]      // end while "1"
[16:37:17.649]    </control>
[16:37:17.649]    <control if="canReadPins" while="" timeout="0" info="">
[16:37:17.649]      // if-block "canReadPins"
[16:37:17.649]        // =>  TRUE
[16:37:17.649]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:37:17.649]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:37:17.649]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:37:17.649]        // while-condition  =>  FALSE
[16:37:17.649]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:37:17.649]      </control>
[16:37:17.649]      // end if-block "canReadPins"
[16:37:17.649]    </control>
[16:37:17.649]    <control if="!canReadPins" while="" timeout="0" info="">
[16:37:17.649]      // if-block "!canReadPins"
[16:37:17.649]        // =>  FALSE
[16:37:17.649]      // skip if-block "!canReadPins"
[16:37:17.649]    </control>
[16:37:17.656]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:37:17.656]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:37:17.656]        // =>  TRUE
[16:37:17.656]      <block atomic="false" info="">
[16:37:17.656]        WriteAP(0x00, 0x190008);
[16:37:17.659]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:37:17.659]        WriteAP(0xF0, 0x01);
[16:37:17.679]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:37:17.679]      </block>
[16:37:17.679]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:37:17.679]    </control>
[16:37:17.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:37:17.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:37:17.679]        // =>  FALSE
[16:37:17.679]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:37:17.679]    </control>
[16:37:17.679]    <block atomic="false" info="">
[16:37:17.679]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:37:17.700]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:37:17.700]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:37:17.700]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:37:17.700]      __ap = 0; //lets make sure we reset the access point selection
[16:37:17.700]        // -> [__ap <= 0x00000000]
[16:37:17.700]    </block>
[16:37:17.700]  </sequence>
[16:37:17.700]  
[16:37:17.770]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:37:17.770]  
[16:37:17.770]  <debugvars>
[16:37:17.770]    // Pre-defined
[16:37:17.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:37:17.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:37:17.770]    __dp=0x00000000
[16:37:17.770]    __ap=0x00000000
[16:37:17.770]    __traceout=0x00000000      (Trace Disabled)
[16:37:17.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:37:17.770]    __FlashAddr=0x00000000
[16:37:17.770]    __FlashLen=0x00000000
[16:37:17.770]    __FlashArg=0x00000000
[16:37:17.770]    __FlashOp=0x00000000
[16:37:17.770]    __Result=0x00000000
[16:37:17.770]  </debugvars>
[16:37:17.770]  
[16:37:17.770]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:37:17.770]    <block atomic="false" info="">
[16:37:17.770]      __var deviceID = 0;
[16:37:17.770]        // -> [deviceID <= 0x00000000]
[16:37:17.770]      __var version = 0;
[16:37:17.770]        // -> [version <= 0x00000000]
[16:37:17.770]      __var partNum = 0;
[16:37:17.770]        // -> [partNum <= 0x00000000]
[16:37:17.770]      __var manuf = 0;
[16:37:17.770]        // -> [manuf <= 0x00000000]
[16:37:17.770]      __var isMSPM0G1X0X_G3X0X = 0;
[16:37:17.770]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:37:17.770]      __var isProduction = 0;
[16:37:17.770]        // -> [isProduction <= 0x00000000]
[16:37:17.770]      __var continueId = 0;
[16:37:17.770]        // -> [continueId <= 0x00000000]
[16:37:17.770]      deviceID =   Read32(0x41C40004);
[16:37:17.800]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:37:17.800]        // -> [deviceID <= 0x2BB8802F]
[16:37:17.800]      version = deviceID >> 28;
[16:37:17.800]        // -> [version <= 0x00000002]
[16:37:17.800]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:37:17.800]        // -> [partNum <= 0x0000BB88]
[16:37:17.800]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:37:17.800]        // -> [manuf <= 0x00000017]
[16:37:17.800]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:37:17.800]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:37:17.800]      isProduction = (version > 0);
[16:37:17.800]        // -> [isProduction <= 0x00000001]
[16:37:17.800]    </block>
[16:37:17.800]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:37:17.800]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:37:17.800]        // =>  FALSE
[16:37:17.802]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:37:17.802]    </control>
[16:37:17.802]    <control if="continueId == 4" while="" timeout="0" info="">
[16:37:17.802]      // if-block "continueId == 4"
[16:37:17.802]        // =>  FALSE
[16:37:17.802]      // skip if-block "continueId == 4"
[16:37:17.802]    </control>
[16:37:17.802]    <control if="!isProduction" while="" timeout="0" info="">
[16:37:17.802]      // if-block "!isProduction"
[16:37:17.802]        // =>  FALSE
[16:37:17.802]      // skip if-block "!isProduction"
[16:37:17.802]    </control>
[16:37:17.802]  </sequence>
[16:37:17.802]  
[16:38:45.529]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:38:45.529]  
[16:38:45.529]  <debugvars>
[16:38:45.530]    // Pre-defined
[16:38:45.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:45.531]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:45.531]    __dp=0x00000000
[16:38:45.531]    __ap=0x00000000
[16:38:45.531]    __traceout=0x00000000      (Trace Disabled)
[16:38:45.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:45.531]    __FlashAddr=0x00000000
[16:38:45.532]    __FlashLen=0x00000000
[16:38:45.532]    __FlashArg=0x00000000
[16:38:45.532]    __FlashOp=0x00000000
[16:38:45.532]    __Result=0x00000000
[16:38:45.532]  </debugvars>
[16:38:45.532]  
[16:38:45.532]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:38:45.533]    <block atomic="false" info="">
[16:38:45.533]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:38:45.533]        // -> [isSWJ <= 0x00000001]
[16:38:45.533]      __var hasDormant = __protocol & 0x00020000;
[16:38:45.533]        // -> [hasDormant <= 0x00000000]
[16:38:45.533]      __var protType   = __protocol & 0x0000FFFF;
[16:38:45.533]        // -> [protType <= 0x00000002]
[16:38:45.533]    </block>
[16:38:45.534]    <control if="protType == 1" while="" timeout="0" info="">
[16:38:45.534]      // if-block "protType == 1"
[16:38:45.534]        // =>  FALSE
[16:38:45.534]      // skip if-block "protType == 1"
[16:38:45.534]    </control>
[16:38:45.534]    <control if="protType == 2" while="" timeout="0" info="">
[16:38:45.535]      // if-block "protType == 2"
[16:38:45.535]        // =>  TRUE
[16:38:45.535]      <control if="isSWJ" while="" timeout="0" info="">
[16:38:45.535]        // if-block "isSWJ"
[16:38:45.535]          // =>  TRUE
[16:38:45.535]        <control if="hasDormant" while="" timeout="0" info="">
[16:38:45.535]          // if-block "hasDormant"
[16:38:45.535]            // =>  FALSE
[16:38:45.535]          // skip if-block "hasDormant"
[16:38:45.535]        </control>
[16:38:45.535]        <control if="!hasDormant" while="" timeout="0" info="">
[16:38:45.536]          // if-block "!hasDormant"
[16:38:45.536]            // =>  TRUE
[16:38:45.536]          <block atomic="false" info="">
[16:38:45.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:38:45.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:45.547]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:38:45.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:38:45.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:38:45.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:45.553]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:38:45.554]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:38:45.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:38:45.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:38:45.561]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:38:45.571]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:38:45.571]          </block>
[16:38:45.571]          // end if-block "!hasDormant"
[16:38:45.571]        </control>
[16:38:45.571]        // end if-block "isSWJ"
[16:38:45.571]      </control>
[16:38:45.571]      <control if="!isSWJ" while="" timeout="0" info="">
[16:38:45.571]        // if-block "!isSWJ"
[16:38:45.571]          // =>  FALSE
[16:38:45.571]        // skip if-block "!isSWJ"
[16:38:45.571]      </control>
[16:38:45.571]      <block atomic="false" info="">
[16:38:45.571]        ReadDP(0x0);
[16:38:45.581]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:38:45.583]      </block>
[16:38:45.583]      // end if-block "protType == 2"
[16:38:45.583]    </control>
[16:38:45.583]  </sequence>
[16:38:45.583]  
[16:38:45.591]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:38:45.591]  
[16:38:45.591]  <debugvars>
[16:38:45.591]    // Pre-defined
[16:38:45.591]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:45.591]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:45.591]    __dp=0x00000000
[16:38:45.591]    __ap=0x00000000
[16:38:45.591]    __traceout=0x00000000      (Trace Disabled)
[16:38:45.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:45.591]    __FlashAddr=0x00000000
[16:38:45.591]    __FlashLen=0x00000000
[16:38:45.591]    __FlashArg=0x00000000
[16:38:45.591]    __FlashOp=0x00000000
[16:38:45.591]    __Result=0x00000000
[16:38:45.591]  </debugvars>
[16:38:45.591]  
[16:38:45.591]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:38:45.591]    <block atomic="false" info="">
[16:38:45.591]      __var SW_DP_ABORT       = 0x0;
[16:38:45.591]        // -> [SW_DP_ABORT <= 0x00000000]
[16:38:45.591]      __var DP_CTRL_STAT      = 0x4;
[16:38:45.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:38:45.591]      __var DP_SELECT         = 0x8;
[16:38:45.591]        // -> [DP_SELECT <= 0x00000008]
[16:38:45.591]      __var powered_down      = 0;
[16:38:45.591]        // -> [powered_down <= 0x00000000]
[16:38:45.591]      WriteDP(DP_SELECT, 0x00000000);
[16:38:45.601]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:38:45.601]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:38:45.601]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:38:45.601]        // -> [powered_down <= 0x00000001]
[16:38:45.601]    </block>
[16:38:45.601]    <control if="powered_down" while="" timeout="0" info="">
[16:38:45.601]      // if-block "powered_down"
[16:38:45.601]        // =>  TRUE
[16:38:45.601]      <block atomic="false" info="">
[16:38:45.601]        Message(0, "Debug/System power-up request sent");
[16:38:45.601]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:38:45.611]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:38:45.611]      </block>
[16:38:45.611]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:38:45.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:38:45.611]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:38:45.611]        // while-condition  =>  FALSE
[16:38:45.611]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:38:45.611]      </control>
[16:38:45.611]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:38:45.611]        // if-block "(__protocol & 0xFFFF) == 1"
[16:38:45.611]          // =>  FALSE
[16:38:45.611]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:38:45.611]      </control>
[16:38:45.611]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:38:45.611]        // if-block "(__protocol & 0xFFFF) == 2"
[16:38:45.611]          // =>  TRUE
[16:38:45.611]        <block atomic="false" info="">
[16:38:45.611]          Message(0, "executing SWD power up");
[16:38:45.611]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:38:45.621]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:38:45.621]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:38:45.621]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:38:45.621]        </block>
[16:38:45.621]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:38:45.621]      </control>
[16:38:45.621]      // end if-block "powered_down"
[16:38:45.621]    </control>
[16:38:45.621]    <block atomic="false" info="">
[16:38:45.621]      __var DEBUG_PORT_VAL    = 0;
[16:38:45.621]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:38:45.621]      __var ACCESS_POINT_VAL  = 0;
[16:38:45.621]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:38:45.621]      __ap = 1; 
[16:38:45.621]        // -> [__ap <= 0x00000001]
[16:38:45.621]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:38:45.631]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:38:45.631]      __ap = 4;
[16:38:45.631]        // -> [__ap <= 0x00000004]
[16:38:45.631]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:38:45.641]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:38:45.641]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:38:45.641]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:38:45.641]    </block>
[16:38:45.641]    <block atomic="false" info="">
[16:38:45.641]      __var nReset = 0x80;
[16:38:45.641]        // -> [nReset <= 0x00000080]
[16:38:45.641]      __var canReadPins = 0;
[16:38:45.641]        // -> [canReadPins <= 0x00000000]
[16:38:45.641]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:38:45.641]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:38:45.641]        // -> [canReadPins <= 0x00000001]
[16:38:45.641]    </block>
[16:38:45.651]    <control if="" while="1" timeout="200" info="">
[16:38:45.651]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.652]      // while-condition  =>  TRUE
[16:38:45.652]      // while "1"  (timeout="200")
[16:38:45.661]      // while-condition  =>  TRUE
[16:38:45.661]      // while "1"  (timeout="200")
[16:38:45.661]      // while  =>  TIMEOUT
[16:38:45.661]      // end while "1"
[16:38:45.662]    </control>
[16:38:45.662]    <control if="canReadPins" while="" timeout="0" info="">
[16:38:45.662]      // if-block "canReadPins"
[16:38:45.662]        // =>  TRUE
[16:38:45.662]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:38:45.662]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:38:45.671]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:38:45.671]        // while-condition  =>  FALSE
[16:38:45.671]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:38:45.671]      </control>
[16:38:45.671]      // end if-block "canReadPins"
[16:38:45.672]    </control>
[16:38:45.672]    <control if="!canReadPins" while="" timeout="0" info="">
[16:38:45.672]      // if-block "!canReadPins"
[16:38:45.672]        // =>  FALSE
[16:38:45.672]      // skip if-block "!canReadPins"
[16:38:45.672]    </control>
[16:38:45.672]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:38:45.672]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:38:45.672]        // =>  TRUE
[16:38:45.672]      <block atomic="false" info="">
[16:38:45.672]        WriteAP(0x00, 0x190008);
[16:38:45.678]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:38:45.678]        WriteAP(0xF0, 0x01);
[16:38:45.688]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:38:45.688]      </block>
[16:38:45.690]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:38:45.690]    </control>
[16:38:45.690]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:38:45.690]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:38:45.690]        // =>  FALSE
[16:38:45.690]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:38:45.690]    </control>
[16:38:45.690]    <block atomic="false" info="">
[16:38:45.690]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:38:45.698]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:38:45.698]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:38:45.698]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:38:45.698]      __ap = 0; //lets make sure we reset the access point selection
[16:38:45.698]        // -> [__ap <= 0x00000000]
[16:38:45.698]    </block>
[16:38:45.698]  </sequence>
[16:38:45.698]  
[16:38:45.756]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:38:45.756]  
[16:38:45.756]  <debugvars>
[16:38:45.756]    // Pre-defined
[16:38:45.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:38:45.756]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:38:45.756]    __dp=0x00000000
[16:38:45.756]    __ap=0x00000000
[16:38:45.756]    __traceout=0x00000000      (Trace Disabled)
[16:38:45.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:38:45.756]    __FlashAddr=0x00000000
[16:38:45.756]    __FlashLen=0x00000000
[16:38:45.756]    __FlashArg=0x00000000
[16:38:45.756]    __FlashOp=0x00000000
[16:38:45.756]    __Result=0x00000000
[16:38:45.756]  </debugvars>
[16:38:45.756]  
[16:38:45.756]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:38:45.756]    <block atomic="false" info="">
[16:38:45.756]      __var deviceID = 0;
[16:38:45.756]        // -> [deviceID <= 0x00000000]
[16:38:45.756]      __var version = 0;
[16:38:45.756]        // -> [version <= 0x00000000]
[16:38:45.756]      __var partNum = 0;
[16:38:45.756]        // -> [partNum <= 0x00000000]
[16:38:45.756]      __var manuf = 0;
[16:38:45.756]        // -> [manuf <= 0x00000000]
[16:38:45.756]      __var isMSPM0G1X0X_G3X0X = 0;
[16:38:45.756]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:38:45.756]      __var isProduction = 0;
[16:38:45.759]        // -> [isProduction <= 0x00000000]
[16:38:45.759]      __var continueId = 0;
[16:38:45.759]        // -> [continueId <= 0x00000000]
[16:38:45.759]      deviceID =   Read32(0x41C40004);
[16:38:45.782]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:38:45.782]        // -> [deviceID <= 0x2BB8802F]
[16:38:45.782]      version = deviceID >> 28;
[16:38:45.782]        // -> [version <= 0x00000002]
[16:38:45.782]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:38:45.782]        // -> [partNum <= 0x0000BB88]
[16:38:45.782]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:38:45.783]        // -> [manuf <= 0x00000017]
[16:38:45.783]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:38:45.783]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:38:45.783]      isProduction = (version > 0);
[16:38:45.783]        // -> [isProduction <= 0x00000001]
[16:38:45.783]    </block>
[16:38:45.783]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:38:45.783]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:38:45.783]        // =>  FALSE
[16:38:45.783]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:38:45.783]    </control>
[16:38:45.783]    <control if="continueId == 4" while="" timeout="0" info="">
[16:38:45.783]      // if-block "continueId == 4"
[16:38:45.783]        // =>  FALSE
[16:38:45.783]      // skip if-block "continueId == 4"
[16:38:45.783]    </control>
[16:38:45.783]    <control if="!isProduction" while="" timeout="0" info="">
[16:38:45.783]      // if-block "!isProduction"
[16:38:45.783]        // =>  FALSE
[16:38:45.783]      // skip if-block "!isProduction"
[16:38:45.783]    </control>
[16:38:45.783]  </sequence>
[16:38:45.783]  
[16:39:42.307]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:39:42.307]  
[16:39:42.318]  <debugvars>
[16:39:42.318]    // Pre-defined
[16:39:42.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:42.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:42.318]    __dp=0x00000000
[16:39:42.319]    __ap=0x00000000
[16:39:42.319]    __traceout=0x00000000      (Trace Disabled)
[16:39:42.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:42.319]    __FlashAddr=0x00000000
[16:39:42.319]    __FlashLen=0x00000000
[16:39:42.319]    __FlashArg=0x00000000
[16:39:42.319]    __FlashOp=0x00000000
[16:39:42.319]    __Result=0x00000000
[16:39:42.319]  </debugvars>
[16:39:42.319]  
[16:39:42.319]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:39:42.319]    <block atomic="false" info="">
[16:39:42.319]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:39:42.319]        // -> [isSWJ <= 0x00000001]
[16:39:42.319]      __var hasDormant = __protocol & 0x00020000;
[16:39:42.319]        // -> [hasDormant <= 0x00000000]
[16:39:42.319]      __var protType   = __protocol & 0x0000FFFF;
[16:39:42.319]        // -> [protType <= 0x00000002]
[16:39:42.319]    </block>
[16:39:42.319]    <control if="protType == 1" while="" timeout="0" info="">
[16:39:42.319]      // if-block "protType == 1"
[16:39:42.319]        // =>  FALSE
[16:39:42.319]      // skip if-block "protType == 1"
[16:39:42.319]    </control>
[16:39:42.319]    <control if="protType == 2" while="" timeout="0" info="">
[16:39:42.319]      // if-block "protType == 2"
[16:39:42.319]        // =>  TRUE
[16:39:42.319]      <control if="isSWJ" while="" timeout="0" info="">
[16:39:42.319]        // if-block "isSWJ"
[16:39:42.319]          // =>  TRUE
[16:39:42.319]        <control if="hasDormant" while="" timeout="0" info="">
[16:39:42.319]          // if-block "hasDormant"
[16:39:42.319]            // =>  FALSE
[16:39:42.319]          // skip if-block "hasDormant"
[16:39:42.319]        </control>
[16:39:42.319]        <control if="!hasDormant" while="" timeout="0" info="">
[16:39:42.319]          // if-block "!hasDormant"
[16:39:42.319]            // =>  TRUE
[16:39:42.323]          <block atomic="false" info="">
[16:39:42.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:39:42.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:42.323]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:39:42.323]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:39:42.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:39:42.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:42.334]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:39:42.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:39:42.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:39:42.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:39:42.343]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:39:42.343]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:39:42.343]          </block>
[16:39:42.343]          // end if-block "!hasDormant"
[16:39:42.343]        </control>
[16:39:42.343]        // end if-block "isSWJ"
[16:39:42.343]      </control>
[16:39:42.343]      <control if="!isSWJ" while="" timeout="0" info="">
[16:39:42.343]        // if-block "!isSWJ"
[16:39:42.343]          // =>  FALSE
[16:39:42.343]        // skip if-block "!isSWJ"
[16:39:42.343]      </control>
[16:39:42.343]      <block atomic="false" info="">
[16:39:42.343]        ReadDP(0x0);
[16:39:42.343]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:39:42.343]      </block>
[16:39:42.343]      // end if-block "protType == 2"
[16:39:42.343]    </control>
[16:39:42.343]  </sequence>
[16:39:42.343]  
[16:39:42.353]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:39:42.353]  
[16:39:42.353]  <debugvars>
[16:39:42.353]    // Pre-defined
[16:39:42.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:42.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:42.353]    __dp=0x00000000
[16:39:42.353]    __ap=0x00000000
[16:39:42.353]    __traceout=0x00000000      (Trace Disabled)
[16:39:42.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:42.353]    __FlashAddr=0x00000000
[16:39:42.353]    __FlashLen=0x00000000
[16:39:42.353]    __FlashArg=0x00000000
[16:39:42.353]    __FlashOp=0x00000000
[16:39:42.353]    __Result=0x00000000
[16:39:42.353]  </debugvars>
[16:39:42.353]  
[16:39:42.353]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:39:42.353]    <block atomic="false" info="">
[16:39:42.353]      __var SW_DP_ABORT       = 0x0;
[16:39:42.353]        // -> [SW_DP_ABORT <= 0x00000000]
[16:39:42.353]      __var DP_CTRL_STAT      = 0x4;
[16:39:42.353]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:39:42.353]      __var DP_SELECT         = 0x8;
[16:39:42.353]        // -> [DP_SELECT <= 0x00000008]
[16:39:42.353]      __var powered_down      = 0;
[16:39:42.353]        // -> [powered_down <= 0x00000000]
[16:39:42.353]      WriteDP(DP_SELECT, 0x00000000);
[16:39:42.362]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:39:42.362]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:39:42.362]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:39:42.362]        // -> [powered_down <= 0x00000001]
[16:39:42.362]    </block>
[16:39:42.362]    <control if="powered_down" while="" timeout="0" info="">
[16:39:42.362]      // if-block "powered_down"
[16:39:42.362]        // =>  TRUE
[16:39:42.362]      <block atomic="false" info="">
[16:39:42.362]        Message(0, "Debug/System power-up request sent");
[16:39:42.362]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:39:42.372]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:39:42.372]      </block>
[16:39:42.372]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:39:42.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:39:42.376]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:39:42.376]        // while-condition  =>  FALSE
[16:39:42.376]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:39:42.376]      </control>
[16:39:42.376]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:39:42.376]        // if-block "(__protocol & 0xFFFF) == 1"
[16:39:42.376]          // =>  FALSE
[16:39:42.376]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:39:42.376]      </control>
[16:39:42.376]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:39:42.376]        // if-block "(__protocol & 0xFFFF) == 2"
[16:39:42.376]          // =>  TRUE
[16:39:42.376]        <block atomic="false" info="">
[16:39:42.376]          Message(0, "executing SWD power up");
[16:39:42.376]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:39:42.376]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:39:42.376]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:39:42.385]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:39:42.385]        </block>
[16:39:42.385]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:39:42.385]      </control>
[16:39:42.385]      // end if-block "powered_down"
[16:39:42.385]    </control>
[16:39:42.385]    <block atomic="false" info="">
[16:39:42.385]      __var DEBUG_PORT_VAL    = 0;
[16:39:42.385]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:39:42.385]      __var ACCESS_POINT_VAL  = 0;
[16:39:42.385]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:39:42.385]      __ap = 1; 
[16:39:42.385]        // -> [__ap <= 0x00000001]
[16:39:42.385]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:39:42.393]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:39:42.393]      __ap = 4;
[16:39:42.393]        // -> [__ap <= 0x00000004]
[16:39:42.393]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:39:42.403]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:39:42.403]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:39:42.403]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:39:42.403]    </block>
[16:39:42.403]    <block atomic="false" info="">
[16:39:42.403]      __var nReset = 0x80;
[16:39:42.403]        // -> [nReset <= 0x00000080]
[16:39:42.403]      __var canReadPins = 0;
[16:39:42.403]        // -> [canReadPins <= 0x00000000]
[16:39:42.403]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:39:42.415]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:39:42.415]        // -> [canReadPins <= 0x00000001]
[16:39:42.415]    </block>
[16:39:42.415]    <control if="" while="1" timeout="200" info="">
[16:39:42.415]      // while "1"  (timeout="200")
[16:39:42.415]      // while-condition  =>  TRUE
[16:39:42.415]      // while "1"  (timeout="200")
[16:39:42.415]      // while-condition  =>  TRUE
[16:39:42.415]      // while "1"  (timeout="200")
[16:39:42.415]      // while-condition  =>  TRUE
[16:39:42.415]      // while "1"  (timeout="200")
[16:39:42.415]      // while-condition  =>  TRUE
[16:39:42.415]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.420]      // while-condition  =>  TRUE
[16:39:42.420]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.423]      // while "1"  (timeout="200")
[16:39:42.423]      // while-condition  =>  TRUE
[16:39:42.433]      // while "1"  (timeout="200")
[16:39:42.433]      // while  =>  TIMEOUT
[16:39:42.433]      // end while "1"
[16:39:42.433]    </control>
[16:39:42.433]    <control if="canReadPins" while="" timeout="0" info="">
[16:39:42.433]      // if-block "canReadPins"
[16:39:42.433]        // =>  TRUE
[16:39:42.433]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:39:42.433]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:39:42.435]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:39:42.435]        // while-condition  =>  FALSE
[16:39:42.435]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:39:42.435]      </control>
[16:39:42.435]      // end if-block "canReadPins"
[16:39:42.435]    </control>
[16:39:42.435]    <control if="!canReadPins" while="" timeout="0" info="">
[16:39:42.435]      // if-block "!canReadPins"
[16:39:42.435]        // =>  FALSE
[16:39:42.435]      // skip if-block "!canReadPins"
[16:39:42.435]    </control>
[16:39:42.435]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:39:42.435]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:39:42.435]        // =>  TRUE
[16:39:42.435]      <block atomic="false" info="">
[16:39:42.435]        WriteAP(0x00, 0x190008);
[16:39:42.435]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:39:42.435]        WriteAP(0xF0, 0x01);
[16:39:42.445]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:39:42.445]      </block>
[16:39:42.445]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:39:42.445]    </control>
[16:39:42.445]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:39:42.445]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:39:42.445]        // =>  FALSE
[16:39:42.445]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:39:42.445]    </control>
[16:39:42.445]    <block atomic="false" info="">
[16:39:42.445]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:39:42.453]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:39:42.453]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:39:42.453]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:39:42.453]      __ap = 0; //lets make sure we reset the access point selection
[16:39:42.453]        // -> [__ap <= 0x00000000]
[16:39:42.453]    </block>
[16:39:42.453]  </sequence>
[16:39:42.453]  
[16:39:42.507]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:39:42.507]  
[16:39:42.507]  <debugvars>
[16:39:42.507]    // Pre-defined
[16:39:42.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:39:42.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:39:42.507]    __dp=0x00000000
[16:39:42.507]    __ap=0x00000000
[16:39:42.507]    __traceout=0x00000000      (Trace Disabled)
[16:39:42.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:39:42.507]    __FlashAddr=0x00000000
[16:39:42.507]    __FlashLen=0x00000000
[16:39:42.507]    __FlashArg=0x00000000
[16:39:42.507]    __FlashOp=0x00000000
[16:39:42.507]    __Result=0x00000000
[16:39:42.507]  </debugvars>
[16:39:42.507]  
[16:39:42.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:39:42.507]    <block atomic="false" info="">
[16:39:42.507]      __var deviceID = 0;
[16:39:42.515]        // -> [deviceID <= 0x00000000]
[16:39:42.515]      __var version = 0;
[16:39:42.515]        // -> [version <= 0x00000000]
[16:39:42.515]      __var partNum = 0;
[16:39:42.515]        // -> [partNum <= 0x00000000]
[16:39:42.515]      __var manuf = 0;
[16:39:42.515]        // -> [manuf <= 0x00000000]
[16:39:42.515]      __var isMSPM0G1X0X_G3X0X = 0;
[16:39:42.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:39:42.515]      __var isProduction = 0;
[16:39:42.515]        // -> [isProduction <= 0x00000000]
[16:39:42.515]      __var continueId = 0;
[16:39:42.515]        // -> [continueId <= 0x00000000]
[16:39:42.515]      deviceID =   Read32(0x41C40004);
[16:39:42.525]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:39:42.525]        // -> [deviceID <= 0x2BB8802F]
[16:39:42.525]      version = deviceID >> 28;
[16:39:42.525]        // -> [version <= 0x00000002]
[16:39:42.525]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:39:42.525]        // -> [partNum <= 0x0000BB88]
[16:39:42.525]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:39:42.525]        // -> [manuf <= 0x00000017]
[16:39:42.525]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:39:42.525]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:39:42.525]      isProduction = (version > 0);
[16:39:42.525]        // -> [isProduction <= 0x00000001]
[16:39:42.525]    </block>
[16:39:42.525]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:39:42.525]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:39:42.525]        // =>  FALSE
[16:39:42.525]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:39:42.525]    </control>
[16:39:42.525]    <control if="continueId == 4" while="" timeout="0" info="">
[16:39:42.525]      // if-block "continueId == 4"
[16:39:42.525]        // =>  FALSE
[16:39:42.525]      // skip if-block "continueId == 4"
[16:39:42.525]    </control>
[16:39:42.525]    <control if="!isProduction" while="" timeout="0" info="">
[16:39:42.525]      // if-block "!isProduction"
[16:39:42.525]        // =>  FALSE
[16:39:42.525]      // skip if-block "!isProduction"
[16:39:42.525]    </control>
[16:39:42.525]  </sequence>
[16:39:42.525]  
[16:40:46.592]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:40:46.592]  
[16:40:46.592]  <debugvars>
[16:40:46.592]    // Pre-defined
[16:40:46.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:46.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:46.592]    __dp=0x00000000
[16:40:46.592]    __ap=0x00000000
[16:40:46.592]    __traceout=0x00000000      (Trace Disabled)
[16:40:46.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:46.592]    __FlashAddr=0x00000000
[16:40:46.592]    __FlashLen=0x00000000
[16:40:46.592]    __FlashArg=0x00000000
[16:40:46.592]    __FlashOp=0x00000000
[16:40:46.592]    __Result=0x00000000
[16:40:46.592]  </debugvars>
[16:40:46.592]  
[16:40:46.592]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:40:46.592]    <block atomic="false" info="">
[16:40:46.592]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:40:46.592]        // -> [isSWJ <= 0x00000001]
[16:40:46.592]      __var hasDormant = __protocol & 0x00020000;
[16:40:46.592]        // -> [hasDormant <= 0x00000000]
[16:40:46.600]      __var protType   = __protocol & 0x0000FFFF;
[16:40:46.600]        // -> [protType <= 0x00000002]
[16:40:46.600]    </block>
[16:40:46.600]    <control if="protType == 1" while="" timeout="0" info="">
[16:40:46.600]      // if-block "protType == 1"
[16:40:46.600]        // =>  FALSE
[16:40:46.600]      // skip if-block "protType == 1"
[16:40:46.600]    </control>
[16:40:46.600]    <control if="protType == 2" while="" timeout="0" info="">
[16:40:46.600]      // if-block "protType == 2"
[16:40:46.600]        // =>  TRUE
[16:40:46.600]      <control if="isSWJ" while="" timeout="0" info="">
[16:40:46.600]        // if-block "isSWJ"
[16:40:46.600]          // =>  TRUE
[16:40:46.600]        <control if="hasDormant" while="" timeout="0" info="">
[16:40:46.602]          // if-block "hasDormant"
[16:40:46.602]            // =>  FALSE
[16:40:46.602]          // skip if-block "hasDormant"
[16:40:46.602]        </control>
[16:40:46.602]        <control if="!hasDormant" while="" timeout="0" info="">
[16:40:46.602]          // if-block "!hasDormant"
[16:40:46.602]            // =>  TRUE
[16:40:46.602]          <block atomic="false" info="">
[16:40:46.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:40:46.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:46.605]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:40:46.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:40:46.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:40:46.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:46.613]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:40:46.624]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:40:46.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:40:46.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:40:46.626]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:40:46.631]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:40:46.631]          </block>
[16:40:46.631]          // end if-block "!hasDormant"
[16:40:46.631]        </control>
[16:40:46.631]        // end if-block "isSWJ"
[16:40:46.631]      </control>
[16:40:46.631]      <control if="!isSWJ" while="" timeout="0" info="">
[16:40:46.631]        // if-block "!isSWJ"
[16:40:46.631]          // =>  FALSE
[16:40:46.631]        // skip if-block "!isSWJ"
[16:40:46.631]      </control>
[16:40:46.631]      <block atomic="false" info="">
[16:40:46.631]        ReadDP(0x0);
[16:40:46.636]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:40:46.636]      </block>
[16:40:46.636]      // end if-block "protType == 2"
[16:40:46.636]    </control>
[16:40:46.636]  </sequence>
[16:40:46.636]  
[16:40:46.641]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:40:46.641]  
[16:40:46.641]  <debugvars>
[16:40:46.641]    // Pre-defined
[16:40:46.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:46.641]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:46.641]    __dp=0x00000000
[16:40:46.641]    __ap=0x00000000
[16:40:46.641]    __traceout=0x00000000      (Trace Disabled)
[16:40:46.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:46.648]    __FlashAddr=0x00000000
[16:40:46.648]    __FlashLen=0x00000000
[16:40:46.648]    __FlashArg=0x00000000
[16:40:46.648]    __FlashOp=0x00000000
[16:40:46.648]    __Result=0x00000000
[16:40:46.648]  </debugvars>
[16:40:46.648]  
[16:40:46.648]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:40:46.648]    <block atomic="false" info="">
[16:40:46.648]      __var SW_DP_ABORT       = 0x0;
[16:40:46.648]        // -> [SW_DP_ABORT <= 0x00000000]
[16:40:46.650]      __var DP_CTRL_STAT      = 0x4;
[16:40:46.650]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:40:46.650]      __var DP_SELECT         = 0x8;
[16:40:46.650]        // -> [DP_SELECT <= 0x00000008]
[16:40:46.650]      __var powered_down      = 0;
[16:40:46.650]        // -> [powered_down <= 0x00000000]
[16:40:46.650]      WriteDP(DP_SELECT, 0x00000000);
[16:40:46.652]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:40:46.652]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:40:46.656]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:40:46.656]        // -> [powered_down <= 0x00000001]
[16:40:46.656]    </block>
[16:40:46.656]    <control if="powered_down" while="" timeout="0" info="">
[16:40:46.656]      // if-block "powered_down"
[16:40:46.656]        // =>  TRUE
[16:40:46.656]      <block atomic="false" info="">
[16:40:46.656]        Message(0, "Debug/System power-up request sent");
[16:40:46.659]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:40:46.662]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:40:46.662]      </block>
[16:40:46.662]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:40:46.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:40:46.666]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:40:46.666]        // while-condition  =>  FALSE
[16:40:46.666]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:40:46.666]      </control>
[16:40:46.666]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:40:46.666]        // if-block "(__protocol & 0xFFFF) == 1"
[16:40:46.666]          // =>  FALSE
[16:40:46.666]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:40:46.666]      </control>
[16:40:46.666]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:40:46.666]        // if-block "(__protocol & 0xFFFF) == 2"
[16:40:46.666]          // =>  TRUE
[16:40:46.668]        <block atomic="false" info="">
[16:40:46.668]          Message(0, "executing SWD power up");
[16:40:46.668]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:40:46.672]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:40:46.672]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:40:46.672]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:40:46.672]        </block>
[16:40:46.672]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:40:46.672]      </control>
[16:40:46.672]      // end if-block "powered_down"
[16:40:46.672]    </control>
[16:40:46.672]    <block atomic="false" info="">
[16:40:46.672]      __var DEBUG_PORT_VAL    = 0;
[16:40:46.672]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:40:46.672]      __var ACCESS_POINT_VAL  = 0;
[16:40:46.672]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:40:46.672]      __ap = 1; 
[16:40:46.672]        // -> [__ap <= 0x00000001]
[16:40:46.672]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:40:46.693]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:40:46.693]      __ap = 4;
[16:40:46.693]        // -> [__ap <= 0x00000004]
[16:40:46.693]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:40:46.706]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:40:46.706]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:40:46.706]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:40:46.706]    </block>
[16:40:46.706]    <block atomic="false" info="">
[16:40:46.706]      __var nReset = 0x80;
[16:40:46.706]        // -> [nReset <= 0x00000080]
[16:40:46.706]      __var canReadPins = 0;
[16:40:46.709]        // -> [canReadPins <= 0x00000000]
[16:40:46.709]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:40:46.712]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:40:46.712]        // -> [canReadPins <= 0x00000001]
[16:40:46.712]    </block>
[16:40:46.712]    <control if="" while="1" timeout="200" info="">
[16:40:46.712]      // while "1"  (timeout="200")
[16:40:46.712]      // while-condition  =>  TRUE
[16:40:46.712]      // while "1"  (timeout="200")
[16:40:46.712]      // while-condition  =>  TRUE
[16:40:46.712]      // while "1"  (timeout="200")
[16:40:46.712]      // while-condition  =>  TRUE
[16:40:46.712]      // while "1"  (timeout="200")
[16:40:46.712]      // while-condition  =>  TRUE
[16:40:46.712]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.713]      // while "1"  (timeout="200")
[16:40:46.713]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.715]      // while "1"  (timeout="200")
[16:40:46.715]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.718]      // while "1"  (timeout="200")
[16:40:46.718]      // while-condition  =>  TRUE
[16:40:46.720]      // while "1"  (timeout="200")
[16:40:46.720]      // while-condition  =>  TRUE
[16:40:46.720]      // while "1"  (timeout="200")
[16:40:46.720]      // while-condition  =>  TRUE
[16:40:46.720]      // while "1"  (timeout="200")
[16:40:46.720]      // while-condition  =>  TRUE
[16:40:46.720]      // while "1"  (timeout="200")
[16:40:46.720]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.721]      // while "1"  (timeout="200")
[16:40:46.721]      // while-condition  =>  TRUE
[16:40:46.723]      // while "1"  (timeout="200")
[16:40:46.723]      // while  =>  TIMEOUT
[16:40:46.723]      // end while "1"
[16:40:46.723]    </control>
[16:40:46.723]    <control if="canReadPins" while="" timeout="0" info="">
[16:40:46.723]      // if-block "canReadPins"
[16:40:46.723]        // =>  TRUE
[16:40:46.723]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:40:46.724]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:40:46.726]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:40:46.726]        // while-condition  =>  FALSE
[16:40:46.726]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:40:46.726]      </control>
[16:40:46.726]      // end if-block "canReadPins"
[16:40:46.726]    </control>
[16:40:46.726]    <control if="!canReadPins" while="" timeout="0" info="">
[16:40:46.726]      // if-block "!canReadPins"
[16:40:46.731]        // =>  FALSE
[16:40:46.731]      // skip if-block "!canReadPins"
[16:40:46.731]    </control>
[16:40:46.731]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:40:46.731]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:40:46.731]        // =>  TRUE
[16:40:46.731]      <block atomic="false" info="">
[16:40:46.731]        WriteAP(0x00, 0x190008);
[16:40:46.735]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:40:46.735]        WriteAP(0xF0, 0x01);
[16:40:46.743]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:40:46.743]      </block>
[16:40:46.743]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:40:46.743]    </control>
[16:40:46.743]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:40:46.743]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:40:46.743]        // =>  FALSE
[16:40:46.743]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:40:46.743]    </control>
[16:40:46.743]    <block atomic="false" info="">
[16:40:46.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:40:46.763]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:40:46.763]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:40:46.763]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:40:46.763]      __ap = 0; //lets make sure we reset the access point selection
[16:40:46.763]        // -> [__ap <= 0x00000000]
[16:40:46.763]    </block>
[16:40:46.763]  </sequence>
[16:40:46.763]  
[16:40:46.832]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:40:46.832]  
[16:40:46.832]  <debugvars>
[16:40:46.832]    // Pre-defined
[16:40:46.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:40:46.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:40:46.832]    __dp=0x00000000
[16:40:46.832]    __ap=0x00000000
[16:40:46.832]    __traceout=0x00000000      (Trace Disabled)
[16:40:46.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:40:46.834]    __FlashAddr=0x00000000
[16:40:46.834]    __FlashLen=0x00000000
[16:40:46.834]    __FlashArg=0x00000000
[16:40:46.834]    __FlashOp=0x00000000
[16:40:46.834]    __Result=0x00000000
[16:40:46.834]  </debugvars>
[16:40:46.834]  
[16:40:46.834]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:40:46.834]    <block atomic="false" info="">
[16:40:46.834]      __var deviceID = 0;
[16:40:46.835]        // -> [deviceID <= 0x00000000]
[16:40:46.835]      __var version = 0;
[16:40:46.835]        // -> [version <= 0x00000000]
[16:40:46.835]      __var partNum = 0;
[16:40:46.835]        // -> [partNum <= 0x00000000]
[16:40:46.835]      __var manuf = 0;
[16:40:46.835]        // -> [manuf <= 0x00000000]
[16:40:46.835]      __var isMSPM0G1X0X_G3X0X = 0;
[16:40:46.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:40:46.835]      __var isProduction = 0;
[16:40:46.835]        // -> [isProduction <= 0x00000000]
[16:40:46.835]      __var continueId = 0;
[16:40:46.835]        // -> [continueId <= 0x00000000]
[16:40:46.835]      deviceID =   Read32(0x41C40004);
[16:40:46.855]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:40:46.855]        // -> [deviceID <= 0x2BB8802F]
[16:40:46.855]      version = deviceID >> 28;
[16:40:46.855]        // -> [version <= 0x00000002]
[16:40:46.855]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:40:46.855]        // -> [partNum <= 0x0000BB88]
[16:40:46.855]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:40:46.855]        // -> [manuf <= 0x00000017]
[16:40:46.855]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:40:46.855]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:40:46.855]      isProduction = (version > 0);
[16:40:46.855]        // -> [isProduction <= 0x00000001]
[16:40:46.855]    </block>
[16:40:46.855]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:40:46.855]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:40:46.855]        // =>  FALSE
[16:40:46.855]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:40:46.855]    </control>
[16:40:46.855]    <control if="continueId == 4" while="" timeout="0" info="">
[16:40:46.855]      // if-block "continueId == 4"
[16:40:46.855]        // =>  FALSE
[16:40:46.855]      // skip if-block "continueId == 4"
[16:40:46.857]    </control>
[16:40:46.857]    <control if="!isProduction" while="" timeout="0" info="">
[16:40:46.857]      // if-block "!isProduction"
[16:40:46.857]        // =>  FALSE
[16:40:46.857]      // skip if-block "!isProduction"
[16:40:46.857]    </control>
[16:40:46.857]  </sequence>
[16:40:46.857]  
[16:41:36.337]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:41:36.337]  
[16:41:36.348]  <debugvars>
[16:41:36.348]    // Pre-defined
[16:41:36.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:36.348]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:36.348]    __dp=0x00000000
[16:41:36.348]    __ap=0x00000000
[16:41:36.348]    __traceout=0x00000000      (Trace Disabled)
[16:41:36.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:36.348]    __FlashAddr=0x00000000
[16:41:36.348]    __FlashLen=0x00000000
[16:41:36.348]    __FlashArg=0x00000000
[16:41:36.348]    __FlashOp=0x00000000
[16:41:36.348]    __Result=0x00000000
[16:41:36.348]  </debugvars>
[16:41:36.348]  
[16:41:36.348]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:41:36.348]    <block atomic="false" info="">
[16:41:36.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:41:36.348]        // -> [isSWJ <= 0x00000001]
[16:41:36.348]      __var hasDormant = __protocol & 0x00020000;
[16:41:36.348]        // -> [hasDormant <= 0x00000000]
[16:41:36.348]      __var protType   = __protocol & 0x0000FFFF;
[16:41:36.348]        // -> [protType <= 0x00000002]
[16:41:36.348]    </block>
[16:41:36.348]    <control if="protType == 1" while="" timeout="0" info="">
[16:41:36.348]      // if-block "protType == 1"
[16:41:36.348]        // =>  FALSE
[16:41:36.348]      // skip if-block "protType == 1"
[16:41:36.348]    </control>
[16:41:36.348]    <control if="protType == 2" while="" timeout="0" info="">
[16:41:36.348]      // if-block "protType == 2"
[16:41:36.351]        // =>  TRUE
[16:41:36.351]      <control if="isSWJ" while="" timeout="0" info="">
[16:41:36.351]        // if-block "isSWJ"
[16:41:36.351]          // =>  TRUE
[16:41:36.351]        <control if="hasDormant" while="" timeout="0" info="">
[16:41:36.351]          // if-block "hasDormant"
[16:41:36.353]            // =>  FALSE
[16:41:36.353]          // skip if-block "hasDormant"
[16:41:36.353]        </control>
[16:41:36.353]        <control if="!hasDormant" while="" timeout="0" info="">
[16:41:36.353]          // if-block "!hasDormant"
[16:41:36.353]            // =>  TRUE
[16:41:36.353]          <block atomic="false" info="">
[16:41:36.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:41:36.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:36.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:41:36.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:41:36.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:41:36.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:36.366]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:41:36.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:41:36.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:41:36.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:41:36.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:41:36.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:41:36.372]          </block>
[16:41:36.372]          // end if-block "!hasDormant"
[16:41:36.372]        </control>
[16:41:36.372]        // end if-block "isSWJ"
[16:41:36.372]      </control>
[16:41:36.372]      <control if="!isSWJ" while="" timeout="0" info="">
[16:41:36.372]        // if-block "!isSWJ"
[16:41:36.372]          // =>  FALSE
[16:41:36.372]        // skip if-block "!isSWJ"
[16:41:36.372]      </control>
[16:41:36.372]      <block atomic="false" info="">
[16:41:36.372]        ReadDP(0x0);
[16:41:36.383]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:41:36.383]      </block>
[16:41:36.383]      // end if-block "protType == 2"
[16:41:36.383]    </control>
[16:41:36.383]  </sequence>
[16:41:36.383]  
[16:41:36.391]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:41:36.391]  
[16:41:36.391]  <debugvars>
[16:41:36.391]    // Pre-defined
[16:41:36.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:36.391]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:36.391]    __dp=0x00000000
[16:41:36.391]    __ap=0x00000000
[16:41:36.391]    __traceout=0x00000000      (Trace Disabled)
[16:41:36.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:36.391]    __FlashAddr=0x00000000
[16:41:36.391]    __FlashLen=0x00000000
[16:41:36.391]    __FlashArg=0x00000000
[16:41:36.391]    __FlashOp=0x00000000
[16:41:36.391]    __Result=0x00000000
[16:41:36.391]  </debugvars>
[16:41:36.391]  
[16:41:36.391]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:41:36.391]    <block atomic="false" info="">
[16:41:36.391]      __var SW_DP_ABORT       = 0x0;
[16:41:36.391]        // -> [SW_DP_ABORT <= 0x00000000]
[16:41:36.391]      __var DP_CTRL_STAT      = 0x4;
[16:41:36.391]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:41:36.391]      __var DP_SELECT         = 0x8;
[16:41:36.391]        // -> [DP_SELECT <= 0x00000008]
[16:41:36.391]      __var powered_down      = 0;
[16:41:36.391]        // -> [powered_down <= 0x00000000]
[16:41:36.391]      WriteDP(DP_SELECT, 0x00000000);
[16:41:36.402]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:41:36.402]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:41:36.402]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:41:36.402]        // -> [powered_down <= 0x00000001]
[16:41:36.402]    </block>
[16:41:36.402]    <control if="powered_down" while="" timeout="0" info="">
[16:41:36.402]      // if-block "powered_down"
[16:41:36.402]        // =>  TRUE
[16:41:36.402]      <block atomic="false" info="">
[16:41:36.402]        Message(0, "Debug/System power-up request sent");
[16:41:36.402]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:41:36.412]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:41:36.412]      </block>
[16:41:36.412]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:41:36.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:41:36.412]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:41:36.412]        // while-condition  =>  FALSE
[16:41:36.412]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:41:36.412]      </control>
[16:41:36.412]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:41:36.412]        // if-block "(__protocol & 0xFFFF) == 1"
[16:41:36.412]          // =>  FALSE
[16:41:36.412]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:41:36.412]      </control>
[16:41:36.412]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:41:36.412]        // if-block "(__protocol & 0xFFFF) == 2"
[16:41:36.412]          // =>  TRUE
[16:41:36.412]        <block atomic="false" info="">
[16:41:36.412]          Message(0, "executing SWD power up");
[16:41:36.412]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:41:36.421]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:41:36.421]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:41:36.432]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:41:36.432]        </block>
[16:41:36.432]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:41:36.432]      </control>
[16:41:36.432]      // end if-block "powered_down"
[16:41:36.432]    </control>
[16:41:36.432]    <block atomic="false" info="">
[16:41:36.432]      __var DEBUG_PORT_VAL    = 0;
[16:41:36.432]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:41:36.432]      __var ACCESS_POINT_VAL  = 0;
[16:41:36.432]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:41:36.432]      __ap = 1; 
[16:41:36.432]        // -> [__ap <= 0x00000001]
[16:41:36.432]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:41:36.442]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:41:36.442]      __ap = 4;
[16:41:36.442]        // -> [__ap <= 0x00000004]
[16:41:36.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:36.452]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:41:36.452]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:41:36.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:36.452]    </block>
[16:41:36.452]    <block atomic="false" info="">
[16:41:36.452]      __var nReset = 0x80;
[16:41:36.452]        // -> [nReset <= 0x00000080]
[16:41:36.452]      __var canReadPins = 0;
[16:41:36.452]        // -> [canReadPins <= 0x00000000]
[16:41:36.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:41:36.452]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:41:36.452]        // -> [canReadPins <= 0x00000001]
[16:41:36.452]    </block>
[16:41:36.452]    <control if="" while="1" timeout="200" info="">
[16:41:36.452]      // while "1"  (timeout="200")
[16:41:36.452]      // while-condition  =>  TRUE
[16:41:36.452]      // while "1"  (timeout="200")
[16:41:36.452]      // while-condition  =>  TRUE
[16:41:36.452]      // while "1"  (timeout="200")
[16:41:36.452]      // while-condition  =>  TRUE
[16:41:36.452]      // while "1"  (timeout="200")
[16:41:36.452]      // while-condition  =>  TRUE
[16:41:36.452]      // while "1"  (timeout="200")
[16:41:36.452]      // while-condition  =>  TRUE
[16:41:36.462]      // while "1"  (timeout="200")
[16:41:36.462]      // while  =>  TIMEOUT
[16:41:36.462]      // end while "1"
[16:41:36.462]    </control>
[16:41:36.462]    <control if="canReadPins" while="" timeout="0" info="">
[16:41:36.462]      // if-block "canReadPins"
[16:41:36.462]        // =>  TRUE
[16:41:36.462]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:41:36.462]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:41:36.475]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:41:36.475]        // while-condition  =>  FALSE
[16:41:36.475]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:41:36.475]      </control>
[16:41:36.475]      // end if-block "canReadPins"
[16:41:36.475]    </control>
[16:41:36.475]    <control if="!canReadPins" while="" timeout="0" info="">
[16:41:36.475]      // if-block "!canReadPins"
[16:41:36.475]        // =>  FALSE
[16:41:36.475]      // skip if-block "!canReadPins"
[16:41:36.475]    </control>
[16:41:36.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:41:36.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:36.475]        // =>  TRUE
[16:41:36.475]      <block atomic="false" info="">
[16:41:36.475]        WriteAP(0x00, 0x190008);
[16:41:36.482]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:36.482]        WriteAP(0xF0, 0x01);
[16:41:36.491]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:41:36.491]      </block>
[16:41:36.491]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:41:36.491]    </control>
[16:41:36.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:41:36.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:36.491]        // =>  FALSE
[16:41:36.491]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:41:36.491]    </control>
[16:41:36.491]    <block atomic="false" info="">
[16:41:36.491]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:41:36.506]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:41:36.506]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:41:36.506]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:41:36.506]      __ap = 0; //lets make sure we reset the access point selection
[16:41:36.506]        // -> [__ap <= 0x00000000]
[16:41:36.506]    </block>
[16:41:36.506]  </sequence>
[16:41:36.506]  
[16:41:36.572]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:41:36.572]  
[16:41:36.572]  <debugvars>
[16:41:36.572]    // Pre-defined
[16:41:36.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:41:36.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:41:36.572]    __dp=0x00000000
[16:41:36.572]    __ap=0x00000000
[16:41:36.572]    __traceout=0x00000000      (Trace Disabled)
[16:41:36.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:41:36.572]    __FlashAddr=0x00000000
[16:41:36.572]    __FlashLen=0x00000000
[16:41:36.572]    __FlashArg=0x00000000
[16:41:36.572]    __FlashOp=0x00000000
[16:41:36.572]    __Result=0x00000000
[16:41:36.572]  </debugvars>
[16:41:36.572]  
[16:41:36.572]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:41:36.572]    <block atomic="false" info="">
[16:41:36.572]      __var deviceID = 0;
[16:41:36.572]        // -> [deviceID <= 0x00000000]
[16:41:36.572]      __var version = 0;
[16:41:36.572]        // -> [version <= 0x00000000]
[16:41:36.572]      __var partNum = 0;
[16:41:36.572]        // -> [partNum <= 0x00000000]
[16:41:36.572]      __var manuf = 0;
[16:41:36.572]        // -> [manuf <= 0x00000000]
[16:41:36.572]      __var isMSPM0G1X0X_G3X0X = 0;
[16:41:36.572]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:41:36.572]      __var isProduction = 0;
[16:41:36.572]        // -> [isProduction <= 0x00000000]
[16:41:36.572]      __var continueId = 0;
[16:41:36.572]        // -> [continueId <= 0x00000000]
[16:41:36.572]      deviceID =   Read32(0x41C40004);
[16:41:36.583]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:41:36.583]        // -> [deviceID <= 0x2BB8802F]
[16:41:36.583]      version = deviceID >> 28;
[16:41:36.583]        // -> [version <= 0x00000002]
[16:41:36.583]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:41:36.583]        // -> [partNum <= 0x0000BB88]
[16:41:36.583]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:41:36.583]        // -> [manuf <= 0x00000017]
[16:41:36.583]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:41:36.583]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:41:36.583]      isProduction = (version > 0);
[16:41:36.583]        // -> [isProduction <= 0x00000001]
[16:41:36.583]    </block>
[16:41:36.583]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:41:36.583]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:41:36.583]        // =>  FALSE
[16:41:36.583]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:41:36.583]    </control>
[16:41:36.583]    <control if="continueId == 4" while="" timeout="0" info="">
[16:41:36.583]      // if-block "continueId == 4"
[16:41:36.583]        // =>  FALSE
[16:41:36.583]      // skip if-block "continueId == 4"
[16:41:36.583]    </control>
[16:41:36.583]    <control if="!isProduction" while="" timeout="0" info="">
[16:41:36.583]      // if-block "!isProduction"
[16:41:36.583]        // =>  FALSE
[16:41:36.583]      // skip if-block "!isProduction"
[16:41:36.583]    </control>
[16:41:36.583]  </sequence>
[16:41:36.583]  
[16:42:12.742]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:42:12.742]  
[16:42:12.754]  <debugvars>
[16:42:12.754]    // Pre-defined
[16:42:12.754]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:12.754]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:12.754]    __dp=0x00000000
[16:42:12.754]    __ap=0x00000000
[16:42:12.754]    __traceout=0x00000000      (Trace Disabled)
[16:42:12.754]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:12.754]    __FlashAddr=0x00000000
[16:42:12.754]    __FlashLen=0x00000000
[16:42:12.755]    __FlashArg=0x00000000
[16:42:12.755]    __FlashOp=0x00000000
[16:42:12.755]    __Result=0x00000000
[16:42:12.755]  </debugvars>
[16:42:12.755]  
[16:42:12.755]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:42:12.755]    <block atomic="false" info="">
[16:42:12.755]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:42:12.755]        // -> [isSWJ <= 0x00000001]
[16:42:12.755]      __var hasDormant = __protocol & 0x00020000;
[16:42:12.755]        // -> [hasDormant <= 0x00000000]
[16:42:12.755]      __var protType   = __protocol & 0x0000FFFF;
[16:42:12.755]        // -> [protType <= 0x00000002]
[16:42:12.755]    </block>
[16:42:12.755]    <control if="protType == 1" while="" timeout="0" info="">
[16:42:12.755]      // if-block "protType == 1"
[16:42:12.755]        // =>  FALSE
[16:42:12.755]      // skip if-block "protType == 1"
[16:42:12.755]    </control>
[16:42:12.755]    <control if="protType == 2" while="" timeout="0" info="">
[16:42:12.755]      // if-block "protType == 2"
[16:42:12.755]        // =>  TRUE
[16:42:12.755]      <control if="isSWJ" while="" timeout="0" info="">
[16:42:12.755]        // if-block "isSWJ"
[16:42:12.755]          // =>  TRUE
[16:42:12.755]        <control if="hasDormant" while="" timeout="0" info="">
[16:42:12.755]          // if-block "hasDormant"
[16:42:12.755]            // =>  FALSE
[16:42:12.755]          // skip if-block "hasDormant"
[16:42:12.755]        </control>
[16:42:12.755]        <control if="!hasDormant" while="" timeout="0" info="">
[16:42:12.755]          // if-block "!hasDormant"
[16:42:12.755]            // =>  TRUE
[16:42:12.755]          <block atomic="false" info="">
[16:42:12.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:42:12.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:12.763]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:42:12.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:42:12.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:42:12.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:12.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:42:12.773]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:42:12.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:42:12.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:42:12.773]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:42:12.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:42:12.783]          </block>
[16:42:12.783]          // end if-block "!hasDormant"
[16:42:12.783]        </control>
[16:42:12.783]        // end if-block "isSWJ"
[16:42:12.783]      </control>
[16:42:12.783]      <control if="!isSWJ" while="" timeout="0" info="">
[16:42:12.783]        // if-block "!isSWJ"
[16:42:12.783]          // =>  FALSE
[16:42:12.783]        // skip if-block "!isSWJ"
[16:42:12.783]      </control>
[16:42:12.783]      <block atomic="false" info="">
[16:42:12.783]        ReadDP(0x0);
[16:42:12.793]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:42:12.793]      </block>
[16:42:12.793]      // end if-block "protType == 2"
[16:42:12.793]    </control>
[16:42:12.793]  </sequence>
[16:42:12.793]  
[16:42:12.803]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:42:12.803]  
[16:42:12.803]  <debugvars>
[16:42:12.803]    // Pre-defined
[16:42:12.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:12.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:12.803]    __dp=0x00000000
[16:42:12.803]    __ap=0x00000000
[16:42:12.803]    __traceout=0x00000000      (Trace Disabled)
[16:42:12.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:12.803]    __FlashAddr=0x00000000
[16:42:12.803]    __FlashLen=0x00000000
[16:42:12.803]    __FlashArg=0x00000000
[16:42:12.803]    __FlashOp=0x00000000
[16:42:12.803]    __Result=0x00000000
[16:42:12.803]  </debugvars>
[16:42:12.803]  
[16:42:12.803]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:42:12.803]    <block atomic="false" info="">
[16:42:12.803]      __var SW_DP_ABORT       = 0x0;
[16:42:12.803]        // -> [SW_DP_ABORT <= 0x00000000]
[16:42:12.803]      __var DP_CTRL_STAT      = 0x4;
[16:42:12.803]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:42:12.803]      __var DP_SELECT         = 0x8;
[16:42:12.803]        // -> [DP_SELECT <= 0x00000008]
[16:42:12.803]      __var powered_down      = 0;
[16:42:12.803]        // -> [powered_down <= 0x00000000]
[16:42:12.803]      WriteDP(DP_SELECT, 0x00000000);
[16:42:12.803]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:42:12.803]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:42:12.813]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:42:12.813]        // -> [powered_down <= 0x00000001]
[16:42:12.813]    </block>
[16:42:12.813]    <control if="powered_down" while="" timeout="0" info="">
[16:42:12.813]      // if-block "powered_down"
[16:42:12.813]        // =>  TRUE
[16:42:12.813]      <block atomic="false" info="">
[16:42:12.813]        Message(0, "Debug/System power-up request sent");
[16:42:12.813]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:42:12.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:42:12.813]      </block>
[16:42:12.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:42:12.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:42:12.813]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:42:12.813]        // while-condition  =>  FALSE
[16:42:12.813]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:42:12.813]      </control>
[16:42:12.813]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:42:12.813]        // if-block "(__protocol & 0xFFFF) == 1"
[16:42:12.813]          // =>  FALSE
[16:42:12.813]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:42:12.813]      </control>
[16:42:12.813]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:42:12.813]        // if-block "(__protocol & 0xFFFF) == 2"
[16:42:12.813]          // =>  TRUE
[16:42:12.813]        <block atomic="false" info="">
[16:42:12.813]          Message(0, "executing SWD power up");
[16:42:12.813]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:42:12.823]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:42:12.823]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:42:12.823]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:42:12.823]        </block>
[16:42:12.823]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:42:12.823]      </control>
[16:42:12.823]      // end if-block "powered_down"
[16:42:12.823]    </control>
[16:42:12.823]    <block atomic="false" info="">
[16:42:12.823]      __var DEBUG_PORT_VAL    = 0;
[16:42:12.823]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:42:12.823]      __var ACCESS_POINT_VAL  = 0;
[16:42:12.823]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:42:12.823]      __ap = 1; 
[16:42:12.823]        // -> [__ap <= 0x00000001]
[16:42:12.823]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:42:12.833]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:42:12.833]      __ap = 4;
[16:42:12.833]        // -> [__ap <= 0x00000004]
[16:42:12.833]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:42:12.843]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:42:12.843]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:42:12.843]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:42:12.843]    </block>
[16:42:12.843]    <block atomic="false" info="">
[16:42:12.843]      __var nReset = 0x80;
[16:42:12.843]        // -> [nReset <= 0x00000080]
[16:42:12.843]      __var canReadPins = 0;
[16:42:12.843]        // -> [canReadPins <= 0x00000000]
[16:42:12.843]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:42:12.843]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:42:12.843]        // -> [canReadPins <= 0x00000001]
[16:42:12.843]    </block>
[16:42:12.843]    <control if="" while="1" timeout="200" info="">
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.843]      // while "1"  (timeout="200")
[16:42:12.843]      // while-condition  =>  TRUE
[16:42:12.853]      // while "1"  (timeout="200")
[16:42:12.853]      // while  =>  TIMEOUT
[16:42:12.853]      // end while "1"
[16:42:12.853]    </control>
[16:42:12.853]    <control if="canReadPins" while="" timeout="0" info="">
[16:42:12.853]      // if-block "canReadPins"
[16:42:12.853]        // =>  TRUE
[16:42:12.853]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:42:12.853]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:42:12.855]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:42:12.855]        // while-condition  =>  FALSE
[16:42:12.855]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:42:12.855]      </control>
[16:42:12.855]      // end if-block "canReadPins"
[16:42:12.855]    </control>
[16:42:12.855]    <control if="!canReadPins" while="" timeout="0" info="">
[16:42:12.855]      // if-block "!canReadPins"
[16:42:12.855]        // =>  FALSE
[16:42:12.855]      // skip if-block "!canReadPins"
[16:42:12.855]    </control>
[16:42:12.855]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:42:12.855]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:42:12.855]        // =>  TRUE
[16:42:12.855]      <block atomic="false" info="">
[16:42:12.855]        WriteAP(0x00, 0x190008);
[16:42:12.862]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:42:12.862]        WriteAP(0xF0, 0x01);
[16:42:12.862]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:42:12.862]      </block>
[16:42:12.862]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:42:12.862]    </control>
[16:42:12.862]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:42:12.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:42:12.873]        // =>  FALSE
[16:42:12.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:42:12.873]    </control>
[16:42:12.873]    <block atomic="false" info="">
[16:42:12.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:42:12.875]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:42:12.875]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:42:12.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:42:12.875]      __ap = 0; //lets make sure we reset the access point selection
[16:42:12.882]        // -> [__ap <= 0x00000000]
[16:42:12.882]    </block>
[16:42:12.882]  </sequence>
[16:42:12.882]  
[16:42:12.943]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:42:12.943]  
[16:42:12.943]  <debugvars>
[16:42:12.943]    // Pre-defined
[16:42:12.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:42:12.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:42:12.943]    __dp=0x00000000
[16:42:12.943]    __ap=0x00000000
[16:42:12.943]    __traceout=0x00000000      (Trace Disabled)
[16:42:12.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:42:12.943]    __FlashAddr=0x00000000
[16:42:12.943]    __FlashLen=0x00000000
[16:42:12.943]    __FlashArg=0x00000000
[16:42:12.943]    __FlashOp=0x00000000
[16:42:12.943]    __Result=0x00000000
[16:42:12.943]  </debugvars>
[16:42:12.943]  
[16:42:12.943]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:42:12.943]    <block atomic="false" info="">
[16:42:12.943]      __var deviceID = 0;
[16:42:12.943]        // -> [deviceID <= 0x00000000]
[16:42:12.943]      __var version = 0;
[16:42:12.943]        // -> [version <= 0x00000000]
[16:42:12.943]      __var partNum = 0;
[16:42:12.943]        // -> [partNum <= 0x00000000]
[16:42:12.943]      __var manuf = 0;
[16:42:12.943]        // -> [manuf <= 0x00000000]
[16:42:12.943]      __var isMSPM0G1X0X_G3X0X = 0;
[16:42:12.943]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:42:12.943]      __var isProduction = 0;
[16:42:12.943]        // -> [isProduction <= 0x00000000]
[16:42:12.943]      __var continueId = 0;
[16:42:12.943]        // -> [continueId <= 0x00000000]
[16:42:12.943]      deviceID =   Read32(0x41C40004);
[16:42:12.955]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:42:12.955]        // -> [deviceID <= 0x2BB8802F]
[16:42:12.955]      version = deviceID >> 28;
[16:42:12.955]        // -> [version <= 0x00000002]
[16:42:12.955]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:42:12.955]        // -> [partNum <= 0x0000BB88]
[16:42:12.955]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:42:12.955]        // -> [manuf <= 0x00000017]
[16:42:12.955]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:42:12.955]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:42:12.955]      isProduction = (version > 0);
[16:42:12.955]        // -> [isProduction <= 0x00000001]
[16:42:12.955]    </block>
[16:42:12.955]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:42:12.955]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:42:12.955]        // =>  FALSE
[16:42:12.955]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:42:12.955]    </control>
[16:42:12.955]    <control if="continueId == 4" while="" timeout="0" info="">
[16:42:12.955]      // if-block "continueId == 4"
[16:42:12.955]        // =>  FALSE
[16:42:12.955]      // skip if-block "continueId == 4"
[16:42:12.955]    </control>
[16:42:12.955]    <control if="!isProduction" while="" timeout="0" info="">
[16:42:12.955]      // if-block "!isProduction"
[16:42:12.955]        // =>  FALSE
[16:42:12.955]      // skip if-block "!isProduction"
[16:42:12.955]    </control>
[16:42:12.955]  </sequence>
[16:42:12.955]  
[16:43:22.716]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:43:22.716]  
[16:43:22.729]  <debugvars>
[16:43:22.729]    // Pre-defined
[16:43:22.729]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:22.729]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:22.729]    __dp=0x00000000
[16:43:22.729]    __ap=0x00000000
[16:43:22.729]    __traceout=0x00000000      (Trace Disabled)
[16:43:22.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:22.729]    __FlashAddr=0x00000000
[16:43:22.729]    __FlashLen=0x00000000
[16:43:22.729]    __FlashArg=0x00000000
[16:43:22.729]    __FlashOp=0x00000000
[16:43:22.729]    __Result=0x00000000
[16:43:22.729]  </debugvars>
[16:43:22.729]  
[16:43:22.729]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:43:22.729]    <block atomic="false" info="">
[16:43:22.729]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:43:22.729]        // -> [isSWJ <= 0x00000001]
[16:43:22.729]      __var hasDormant = __protocol & 0x00020000;
[16:43:22.729]        // -> [hasDormant <= 0x00000000]
[16:43:22.729]      __var protType   = __protocol & 0x0000FFFF;
[16:43:22.729]        // -> [protType <= 0x00000002]
[16:43:22.729]    </block>
[16:43:22.729]    <control if="protType == 1" while="" timeout="0" info="">
[16:43:22.729]      // if-block "protType == 1"
[16:43:22.729]        // =>  FALSE
[16:43:22.729]      // skip if-block "protType == 1"
[16:43:22.729]    </control>
[16:43:22.729]    <control if="protType == 2" while="" timeout="0" info="">
[16:43:22.729]      // if-block "protType == 2"
[16:43:22.729]        // =>  TRUE
[16:43:22.729]      <control if="isSWJ" while="" timeout="0" info="">
[16:43:22.729]        // if-block "isSWJ"
[16:43:22.729]          // =>  TRUE
[16:43:22.729]        <control if="hasDormant" while="" timeout="0" info="">
[16:43:22.729]          // if-block "hasDormant"
[16:43:22.729]            // =>  FALSE
[16:43:22.733]          // skip if-block "hasDormant"
[16:43:22.733]        </control>
[16:43:22.733]        <control if="!hasDormant" while="" timeout="0" info="">
[16:43:22.733]          // if-block "!hasDormant"
[16:43:22.733]            // =>  TRUE
[16:43:22.733]          <block atomic="false" info="">
[16:43:22.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:43:22.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:22.743]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:43:22.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:43:22.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:43:22.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:22.756]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:43:22.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:43:22.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:43:22.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:43:22.766]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:43:22.774]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:43:22.774]          </block>
[16:43:22.774]          // end if-block "!hasDormant"
[16:43:22.774]        </control>
[16:43:22.774]        // end if-block "isSWJ"
[16:43:22.774]      </control>
[16:43:22.774]      <control if="!isSWJ" while="" timeout="0" info="">
[16:43:22.774]        // if-block "!isSWJ"
[16:43:22.774]          // =>  FALSE
[16:43:22.776]        // skip if-block "!isSWJ"
[16:43:22.776]      </control>
[16:43:22.776]      <block atomic="false" info="">
[16:43:22.776]        ReadDP(0x0);
[16:43:22.778]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:43:22.778]      </block>
[16:43:22.778]      // end if-block "protType == 2"
[16:43:22.778]    </control>
[16:43:22.778]  </sequence>
[16:43:22.778]  
[16:43:22.795]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:43:22.795]  
[16:43:22.795]  <debugvars>
[16:43:22.795]    // Pre-defined
[16:43:22.795]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:22.795]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:22.795]    __dp=0x00000000
[16:43:22.795]    __ap=0x00000000
[16:43:22.795]    __traceout=0x00000000      (Trace Disabled)
[16:43:22.795]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:22.795]    __FlashAddr=0x00000000
[16:43:22.795]    __FlashLen=0x00000000
[16:43:22.795]    __FlashArg=0x00000000
[16:43:22.795]    __FlashOp=0x00000000
[16:43:22.795]    __Result=0x00000000
[16:43:22.796]  </debugvars>
[16:43:22.796]  
[16:43:22.796]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:43:22.796]    <block atomic="false" info="">
[16:43:22.796]      __var SW_DP_ABORT       = 0x0;
[16:43:22.796]        // -> [SW_DP_ABORT <= 0x00000000]
[16:43:22.796]      __var DP_CTRL_STAT      = 0x4;
[16:43:22.796]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:43:22.796]      __var DP_SELECT         = 0x8;
[16:43:22.796]        // -> [DP_SELECT <= 0x00000008]
[16:43:22.796]      __var powered_down      = 0;
[16:43:22.796]        // -> [powered_down <= 0x00000000]
[16:43:22.796]      WriteDP(DP_SELECT, 0x00000000);
[16:43:22.801]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:43:22.801]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:43:22.804]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:43:22.805]        // -> [powered_down <= 0x00000001]
[16:43:22.805]    </block>
[16:43:22.805]    <control if="powered_down" while="" timeout="0" info="">
[16:43:22.805]      // if-block "powered_down"
[16:43:22.805]        // =>  TRUE
[16:43:22.805]      <block atomic="false" info="">
[16:43:22.805]        Message(0, "Debug/System power-up request sent");
[16:43:22.807]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:43:22.808]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:43:22.808]      </block>
[16:43:22.808]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:43:22.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:43:22.815]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:43:22.815]        // while-condition  =>  FALSE
[16:43:22.816]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:43:22.816]      </control>
[16:43:22.816]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:43:22.816]        // if-block "(__protocol & 0xFFFF) == 1"
[16:43:22.816]          // =>  FALSE
[16:43:22.816]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:43:22.816]      </control>
[16:43:22.816]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:43:22.816]        // if-block "(__protocol & 0xFFFF) == 2"
[16:43:22.816]          // =>  TRUE
[16:43:22.816]        <block atomic="false" info="">
[16:43:22.816]          Message(0, "executing SWD power up");
[16:43:22.816]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:43:22.820]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:43:22.820]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:43:22.826]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:43:22.826]        </block>
[16:43:22.826]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:43:22.826]      </control>
[16:43:22.826]      // end if-block "powered_down"
[16:43:22.826]    </control>
[16:43:22.826]    <block atomic="false" info="">
[16:43:22.826]      __var DEBUG_PORT_VAL    = 0;
[16:43:22.826]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:43:22.826]      __var ACCESS_POINT_VAL  = 0;
[16:43:22.826]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:43:22.826]      __ap = 1; 
[16:43:22.826]        // -> [__ap <= 0x00000001]
[16:43:22.826]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:43:22.826]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:43:22.826]      __ap = 4;
[16:43:22.826]        // -> [__ap <= 0x00000004]
[16:43:22.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:22.838]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:43:22.838]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:43:22.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:22.847]    </block>
[16:43:22.847]    <block atomic="false" info="">
[16:43:22.847]      __var nReset = 0x80;
[16:43:22.847]        // -> [nReset <= 0x00000080]
[16:43:22.847]      __var canReadPins = 0;
[16:43:22.847]        // -> [canReadPins <= 0x00000000]
[16:43:22.847]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:43:22.847]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:43:22.847]        // -> [canReadPins <= 0x00000001]
[16:43:22.847]    </block>
[16:43:22.847]    <control if="" while="1" timeout="200" info="">
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.847]      // while-condition  =>  TRUE
[16:43:22.847]      // while "1"  (timeout="200")
[16:43:22.856]      // while-condition  =>  TRUE
[16:43:22.856]      // while "1"  (timeout="200")
[16:43:22.856]      // while  =>  TIMEOUT
[16:43:22.856]      // end while "1"
[16:43:22.856]    </control>
[16:43:22.856]    <control if="canReadPins" while="" timeout="0" info="">
[16:43:22.856]      // if-block "canReadPins"
[16:43:22.856]        // =>  TRUE
[16:43:22.856]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:43:22.856]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:43:22.866]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:43:22.866]        // while-condition  =>  FALSE
[16:43:22.866]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:43:22.866]      </control>
[16:43:22.866]      // end if-block "canReadPins"
[16:43:22.866]    </control>
[16:43:22.866]    <control if="!canReadPins" while="" timeout="0" info="">
[16:43:22.866]      // if-block "!canReadPins"
[16:43:22.866]        // =>  FALSE
[16:43:22.866]      // skip if-block "!canReadPins"
[16:43:22.866]    </control>
[16:43:22.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:43:22.870]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:22.870]        // =>  TRUE
[16:43:22.870]      <block atomic="false" info="">
[16:43:22.870]        WriteAP(0x00, 0x190008);
[16:43:22.871]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:22.871]        WriteAP(0xF0, 0x01);
[16:43:22.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:43:22.887]      </block>
[16:43:22.887]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:43:22.887]    </control>
[16:43:22.887]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:43:22.887]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:22.887]        // =>  FALSE
[16:43:22.887]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:43:22.887]    </control>
[16:43:22.887]    <block atomic="false" info="">
[16:43:22.887]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:43:22.891]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:43:22.891]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:43:22.891]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:43:22.896]      __ap = 0; //lets make sure we reset the access point selection
[16:43:22.896]        // -> [__ap <= 0x00000000]
[16:43:22.896]    </block>
[16:43:22.896]  </sequence>
[16:43:22.896]  
[16:43:22.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:43:22.974]  
[16:43:22.975]  <debugvars>
[16:43:22.975]    // Pre-defined
[16:43:22.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:43:22.975]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:43:22.975]    __dp=0x00000000
[16:43:22.975]    __ap=0x00000000
[16:43:22.975]    __traceout=0x00000000      (Trace Disabled)
[16:43:22.976]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:43:22.976]    __FlashAddr=0x00000000
[16:43:22.976]    __FlashLen=0x00000000
[16:43:22.976]    __FlashArg=0x00000000
[16:43:22.976]    __FlashOp=0x00000000
[16:43:22.976]    __Result=0x00000000
[16:43:22.976]  </debugvars>
[16:43:22.976]  
[16:43:22.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:43:22.976]    <block atomic="false" info="">
[16:43:22.976]      __var deviceID = 0;
[16:43:22.976]        // -> [deviceID <= 0x00000000]
[16:43:22.976]      __var version = 0;
[16:43:22.976]        // -> [version <= 0x00000000]
[16:43:22.976]      __var partNum = 0;
[16:43:22.976]        // -> [partNum <= 0x00000000]
[16:43:22.976]      __var manuf = 0;
[16:43:22.976]        // -> [manuf <= 0x00000000]
[16:43:22.976]      __var isMSPM0G1X0X_G3X0X = 0;
[16:43:22.976]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:43:22.976]      __var isProduction = 0;
[16:43:22.976]        // -> [isProduction <= 0x00000000]
[16:43:22.976]      __var continueId = 0;
[16:43:22.976]        // -> [continueId <= 0x00000000]
[16:43:22.976]      deviceID =   Read32(0x41C40004);
[16:43:23.002]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:43:23.002]        // -> [deviceID <= 0x2BB8802F]
[16:43:23.002]      version = deviceID >> 28;
[16:43:23.002]        // -> [version <= 0x00000002]
[16:43:23.002]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:43:23.002]        // -> [partNum <= 0x0000BB88]
[16:43:23.002]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:43:23.002]        // -> [manuf <= 0x00000017]
[16:43:23.002]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:43:23.002]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:43:23.002]      isProduction = (version > 0);
[16:43:23.002]        // -> [isProduction <= 0x00000001]
[16:43:23.004]    </block>
[16:43:23.004]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:43:23.004]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:43:23.004]        // =>  FALSE
[16:43:23.004]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:43:23.004]    </control>
[16:43:23.004]    <control if="continueId == 4" while="" timeout="0" info="">
[16:43:23.004]      // if-block "continueId == 4"
[16:43:23.004]        // =>  FALSE
[16:43:23.004]      // skip if-block "continueId == 4"
[16:43:23.004]    </control>
[16:43:23.004]    <control if="!isProduction" while="" timeout="0" info="">
[16:43:23.004]      // if-block "!isProduction"
[16:43:23.004]        // =>  FALSE
[16:43:23.004]      // skip if-block "!isProduction"
[16:43:23.004]    </control>
[16:43:23.004]  </sequence>
[16:43:23.004]  
[16:44:28.850]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:44:28.850]  
[16:44:28.860]  <debugvars>
[16:44:28.860]    // Pre-defined
[16:44:28.860]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:28.860]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:28.860]    __dp=0x00000000
[16:44:28.860]    __ap=0x00000000
[16:44:28.860]    __traceout=0x00000000      (Trace Disabled)
[16:44:28.860]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:28.860]    __FlashAddr=0x00000000
[16:44:28.860]    __FlashLen=0x00000000
[16:44:28.860]    __FlashArg=0x00000000
[16:44:28.860]    __FlashOp=0x00000000
[16:44:28.860]    __Result=0x00000000
[16:44:28.860]  </debugvars>
[16:44:28.860]  
[16:44:28.860]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:44:28.860]    <block atomic="false" info="">
[16:44:28.860]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:44:28.860]        // -> [isSWJ <= 0x00000001]
[16:44:28.860]      __var hasDormant = __protocol & 0x00020000;
[16:44:28.860]        // -> [hasDormant <= 0x00000000]
[16:44:28.860]      __var protType   = __protocol & 0x0000FFFF;
[16:44:28.860]        // -> [protType <= 0x00000002]
[16:44:28.860]    </block>
[16:44:28.860]    <control if="protType == 1" while="" timeout="0" info="">
[16:44:28.860]      // if-block "protType == 1"
[16:44:28.860]        // =>  FALSE
[16:44:28.860]      // skip if-block "protType == 1"
[16:44:28.860]    </control>
[16:44:28.860]    <control if="protType == 2" while="" timeout="0" info="">
[16:44:28.860]      // if-block "protType == 2"
[16:44:28.860]        // =>  TRUE
[16:44:28.860]      <control if="isSWJ" while="" timeout="0" info="">
[16:44:28.860]        // if-block "isSWJ"
[16:44:28.860]          // =>  TRUE
[16:44:28.860]        <control if="hasDormant" while="" timeout="0" info="">
[16:44:28.860]          // if-block "hasDormant"
[16:44:28.860]            // =>  FALSE
[16:44:28.860]          // skip if-block "hasDormant"
[16:44:28.860]        </control>
[16:44:28.864]        <control if="!hasDormant" while="" timeout="0" info="">
[16:44:28.864]          // if-block "!hasDormant"
[16:44:28.864]            // =>  TRUE
[16:44:28.864]          <block atomic="false" info="">
[16:44:28.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:44:28.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:28.870]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:44:28.870]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:44:28.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:44:28.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:28.876]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:44:28.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:44:28.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:44:28.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:28.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:44:28.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:44:28.894]          </block>
[16:44:28.894]          // end if-block "!hasDormant"
[16:44:28.894]        </control>
[16:44:28.894]        // end if-block "isSWJ"
[16:44:28.894]      </control>
[16:44:28.894]      <control if="!isSWJ" while="" timeout="0" info="">
[16:44:28.894]        // if-block "!isSWJ"
[16:44:28.894]          // =>  FALSE
[16:44:28.894]        // skip if-block "!isSWJ"
[16:44:28.894]      </control>
[16:44:28.894]      <block atomic="false" info="">
[16:44:28.894]        ReadDP(0x0);
[16:44:28.904]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:44:28.904]      </block>
[16:44:28.904]      // end if-block "protType == 2"
[16:44:28.904]    </control>
[16:44:28.904]  </sequence>
[16:44:28.904]  
[16:44:28.911]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:44:28.911]  
[16:44:28.911]  <debugvars>
[16:44:28.911]    // Pre-defined
[16:44:28.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:28.911]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:28.911]    __dp=0x00000000
[16:44:28.911]    __ap=0x00000000
[16:44:28.911]    __traceout=0x00000000      (Trace Disabled)
[16:44:28.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:28.911]    __FlashAddr=0x00000000
[16:44:28.911]    __FlashLen=0x00000000
[16:44:28.911]    __FlashArg=0x00000000
[16:44:28.911]    __FlashOp=0x00000000
[16:44:28.911]    __Result=0x00000000
[16:44:28.911]  </debugvars>
[16:44:28.911]  
[16:44:28.911]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:44:28.911]    <block atomic="false" info="">
[16:44:28.911]      __var SW_DP_ABORT       = 0x0;
[16:44:28.911]        // -> [SW_DP_ABORT <= 0x00000000]
[16:44:28.911]      __var DP_CTRL_STAT      = 0x4;
[16:44:28.911]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:44:28.911]      __var DP_SELECT         = 0x8;
[16:44:28.911]        // -> [DP_SELECT <= 0x00000008]
[16:44:28.911]      __var powered_down      = 0;
[16:44:28.911]        // -> [powered_down <= 0x00000000]
[16:44:28.919]      WriteDP(DP_SELECT, 0x00000000);
[16:44:28.921]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:44:28.921]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:44:28.940]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:44:28.940]        // -> [powered_down <= 0x00000001]
[16:44:28.940]    </block>
[16:44:28.940]    <control if="powered_down" while="" timeout="0" info="">
[16:44:28.940]      // if-block "powered_down"
[16:44:28.940]        // =>  TRUE
[16:44:28.940]      <block atomic="false" info="">
[16:44:28.940]        Message(0, "Debug/System power-up request sent");
[16:44:28.940]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:44:28.953]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:44:28.953]      </block>
[16:44:28.953]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:44:28.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:44:28.970]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:44:28.970]        // while-condition  =>  FALSE
[16:44:28.970]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:44:28.970]      </control>
[16:44:28.970]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:44:28.970]        // if-block "(__protocol & 0xFFFF) == 1"
[16:44:28.970]          // =>  FALSE
[16:44:28.970]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:44:28.970]      </control>
[16:44:28.970]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:44:28.970]        // if-block "(__protocol & 0xFFFF) == 2"
[16:44:28.970]          // =>  TRUE
[16:44:28.970]        <block atomic="false" info="">
[16:44:28.970]          Message(0, "executing SWD power up");
[16:44:28.974]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:44:28.993]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:44:28.993]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:44:29.004]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:44:29.004]        </block>
[16:44:29.004]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:44:29.004]      </control>
[16:44:29.004]      // end if-block "powered_down"
[16:44:29.005]    </control>
[16:44:29.005]    <block atomic="false" info="">
[16:44:29.005]      __var DEBUG_PORT_VAL    = 0;
[16:44:29.005]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:44:29.005]      __var ACCESS_POINT_VAL  = 0;
[16:44:29.005]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:44:29.005]      __ap = 1; 
[16:44:29.005]        // -> [__ap <= 0x00000001]
[16:44:29.005]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:44:29.009]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:44:29.009]      __ap = 4;
[16:44:29.009]        // -> [__ap <= 0x00000004]
[16:44:29.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:29.020]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:44:29.020]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:44:29.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:29.025]    </block>
[16:44:29.025]    <block atomic="false" info="">
[16:44:29.025]      __var nReset = 0x80;
[16:44:29.025]        // -> [nReset <= 0x00000080]
[16:44:29.025]      __var canReadPins = 0;
[16:44:29.025]        // -> [canReadPins <= 0x00000000]
[16:44:29.025]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:44:29.031]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:44:29.031]        // -> [canReadPins <= 0x00000001]
[16:44:29.031]    </block>
[16:44:29.031]    <control if="" while="1" timeout="200" info="">
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.031]      // while-condition  =>  TRUE
[16:44:29.031]      // while "1"  (timeout="200")
[16:44:29.040]      // while-condition  =>  TRUE
[16:44:29.040]      // while "1"  (timeout="200")
[16:44:29.040]      // while  =>  TIMEOUT
[16:44:29.040]      // end while "1"
[16:44:29.040]    </control>
[16:44:29.040]    <control if="canReadPins" while="" timeout="0" info="">
[16:44:29.041]      // if-block "canReadPins"
[16:44:29.041]        // =>  TRUE
[16:44:29.041]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:44:29.041]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:44:29.041]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:44:29.041]        // while-condition  =>  FALSE
[16:44:29.041]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:44:29.041]      </control>
[16:44:29.041]      // end if-block "canReadPins"
[16:44:29.041]    </control>
[16:44:29.041]    <control if="!canReadPins" while="" timeout="0" info="">
[16:44:29.041]      // if-block "!canReadPins"
[16:44:29.041]        // =>  FALSE
[16:44:29.041]      // skip if-block "!canReadPins"
[16:44:29.041]    </control>
[16:44:29.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:44:29.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:29.041]        // =>  TRUE
[16:44:29.041]      <block atomic="false" info="">
[16:44:29.041]        WriteAP(0x00, 0x190008);
[16:44:29.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:29.041]        WriteAP(0xF0, 0x01);
[16:44:29.062]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:29.062]      </block>
[16:44:29.062]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:29.062]    </control>
[16:44:29.062]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:44:29.062]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:29.062]        // =>  FALSE
[16:44:29.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:29.062]    </control>
[16:44:29.062]    <block atomic="false" info="">
[16:44:29.062]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:29.069]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:44:29.069]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:44:29.069]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:29.073]      __ap = 0; //lets make sure we reset the access point selection
[16:44:29.073]        // -> [__ap <= 0x00000000]
[16:44:29.073]    </block>
[16:44:29.073]  </sequence>
[16:44:29.073]  
[16:44:29.120]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:44:29.120]  
[16:44:29.120]  <debugvars>
[16:44:29.120]    // Pre-defined
[16:44:29.120]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:29.120]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:29.120]    __dp=0x00000000
[16:44:29.120]    __ap=0x00000000
[16:44:29.120]    __traceout=0x00000000      (Trace Disabled)
[16:44:29.120]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:29.120]    __FlashAddr=0x00000000
[16:44:29.120]    __FlashLen=0x00000000
[16:44:29.120]    __FlashArg=0x00000000
[16:44:29.120]    __FlashOp=0x00000000
[16:44:29.120]    __Result=0x00000000
[16:44:29.120]  </debugvars>
[16:44:29.120]  
[16:44:29.120]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:44:29.120]    <block atomic="false" info="">
[16:44:29.120]      __var deviceID = 0;
[16:44:29.120]        // -> [deviceID <= 0x00000000]
[16:44:29.124]      __var version = 0;
[16:44:29.124]        // -> [version <= 0x00000000]
[16:44:29.124]      __var partNum = 0;
[16:44:29.124]        // -> [partNum <= 0x00000000]
[16:44:29.124]      __var manuf = 0;
[16:44:29.124]        // -> [manuf <= 0x00000000]
[16:44:29.124]      __var isMSPM0G1X0X_G3X0X = 0;
[16:44:29.124]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:44:29.124]      __var isProduction = 0;
[16:44:29.124]        // -> [isProduction <= 0x00000000]
[16:44:29.124]      __var continueId = 0;
[16:44:29.124]        // -> [continueId <= 0x00000000]
[16:44:29.124]      deviceID =   Read32(0x41C40004);
[16:44:29.131]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:44:29.131]        // -> [deviceID <= 0x2BB8802F]
[16:44:29.131]      version = deviceID >> 28;
[16:44:29.131]        // -> [version <= 0x00000002]
[16:44:29.131]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:44:29.131]        // -> [partNum <= 0x0000BB88]
[16:44:29.131]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:44:29.131]        // -> [manuf <= 0x00000017]
[16:44:29.131]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:44:29.131]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:44:29.131]      isProduction = (version > 0);
[16:44:29.131]        // -> [isProduction <= 0x00000001]
[16:44:29.131]    </block>
[16:44:29.131]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:44:29.131]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:44:29.131]        // =>  FALSE
[16:44:29.140]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:44:29.140]    </control>
[16:44:29.140]    <control if="continueId == 4" while="" timeout="0" info="">
[16:44:29.140]      // if-block "continueId == 4"
[16:44:29.140]        // =>  FALSE
[16:44:29.140]      // skip if-block "continueId == 4"
[16:44:29.140]    </control>
[16:44:29.140]    <control if="!isProduction" while="" timeout="0" info="">
[16:44:29.140]      // if-block "!isProduction"
[16:44:29.140]        // =>  FALSE
[16:44:29.140]      // skip if-block "!isProduction"
[16:44:29.140]    </control>
[16:44:29.141]  </sequence>
[16:44:29.141]  
[16:44:57.471]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:44:57.471]  
[16:44:57.480]  <debugvars>
[16:44:57.480]    // Pre-defined
[16:44:57.480]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:57.480]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:57.480]    __dp=0x00000000
[16:44:57.480]    __ap=0x00000000
[16:44:57.480]    __traceout=0x00000000      (Trace Disabled)
[16:44:57.480]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:57.480]    __FlashAddr=0x00000000
[16:44:57.480]    __FlashLen=0x00000000
[16:44:57.480]    __FlashArg=0x00000000
[16:44:57.480]    __FlashOp=0x00000000
[16:44:57.480]    __Result=0x00000000
[16:44:57.481]  </debugvars>
[16:44:57.481]  
[16:44:57.481]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:44:57.481]    <block atomic="false" info="">
[16:44:57.481]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:44:57.481]        // -> [isSWJ <= 0x00000001]
[16:44:57.481]      __var hasDormant = __protocol & 0x00020000;
[16:44:57.481]        // -> [hasDormant <= 0x00000000]
[16:44:57.481]      __var protType   = __protocol & 0x0000FFFF;
[16:44:57.481]        // -> [protType <= 0x00000002]
[16:44:57.481]    </block>
[16:44:57.481]    <control if="protType == 1" while="" timeout="0" info="">
[16:44:57.481]      // if-block "protType == 1"
[16:44:57.481]        // =>  FALSE
[16:44:57.481]      // skip if-block "protType == 1"
[16:44:57.481]    </control>
[16:44:57.481]    <control if="protType == 2" while="" timeout="0" info="">
[16:44:57.481]      // if-block "protType == 2"
[16:44:57.481]        // =>  TRUE
[16:44:57.481]      <control if="isSWJ" while="" timeout="0" info="">
[16:44:57.481]        // if-block "isSWJ"
[16:44:57.481]          // =>  TRUE
[16:44:57.481]        <control if="hasDormant" while="" timeout="0" info="">
[16:44:57.481]          // if-block "hasDormant"
[16:44:57.481]            // =>  FALSE
[16:44:57.481]          // skip if-block "hasDormant"
[16:44:57.481]        </control>
[16:44:57.481]        <control if="!hasDormant" while="" timeout="0" info="">
[16:44:57.481]          // if-block "!hasDormant"
[16:44:57.481]            // =>  TRUE
[16:44:57.481]          <block atomic="false" info="">
[16:44:57.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:44:57.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:57.481]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:44:57.491]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:44:57.491]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:44:57.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:57.491]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:44:57.491]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:44:57.491]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:44:57.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:44:57.501]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:44:57.504]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:44:57.504]          </block>
[16:44:57.504]          // end if-block "!hasDormant"
[16:44:57.504]        </control>
[16:44:57.504]        // end if-block "isSWJ"
[16:44:57.504]      </control>
[16:44:57.504]      <control if="!isSWJ" while="" timeout="0" info="">
[16:44:57.504]        // if-block "!isSWJ"
[16:44:57.504]          // =>  FALSE
[16:44:57.504]        // skip if-block "!isSWJ"
[16:44:57.504]      </control>
[16:44:57.504]      <block atomic="false" info="">
[16:44:57.504]        ReadDP(0x0);
[16:44:57.504]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:44:57.504]      </block>
[16:44:57.504]      // end if-block "protType == 2"
[16:44:57.504]    </control>
[16:44:57.511]  </sequence>
[16:44:57.511]  
[16:44:57.511]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:44:57.511]  
[16:44:57.511]  <debugvars>
[16:44:57.511]    // Pre-defined
[16:44:57.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:57.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:57.511]    __dp=0x00000000
[16:44:57.511]    __ap=0x00000000
[16:44:57.511]    __traceout=0x00000000      (Trace Disabled)
[16:44:57.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:57.511]    __FlashAddr=0x00000000
[16:44:57.511]    __FlashLen=0x00000000
[16:44:57.511]    __FlashArg=0x00000000
[16:44:57.511]    __FlashOp=0x00000000
[16:44:57.511]    __Result=0x00000000
[16:44:57.511]  </debugvars>
[16:44:57.520]  
[16:44:57.520]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:44:57.520]    <block atomic="false" info="">
[16:44:57.520]      __var SW_DP_ABORT       = 0x0;
[16:44:57.520]        // -> [SW_DP_ABORT <= 0x00000000]
[16:44:57.520]      __var DP_CTRL_STAT      = 0x4;
[16:44:57.520]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:44:57.520]      __var DP_SELECT         = 0x8;
[16:44:57.520]        // -> [DP_SELECT <= 0x00000008]
[16:44:57.520]      __var powered_down      = 0;
[16:44:57.520]        // -> [powered_down <= 0x00000000]
[16:44:57.520]      WriteDP(DP_SELECT, 0x00000000);
[16:44:57.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:44:57.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:44:57.532]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:44:57.532]        // -> [powered_down <= 0x00000001]
[16:44:57.532]    </block>
[16:44:57.532]    <control if="powered_down" while="" timeout="0" info="">
[16:44:57.532]      // if-block "powered_down"
[16:44:57.532]        // =>  TRUE
[16:44:57.532]      <block atomic="false" info="">
[16:44:57.532]        Message(0, "Debug/System power-up request sent");
[16:44:57.532]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:44:57.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:44:57.532]      </block>
[16:44:57.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:44:57.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:44:57.532]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:44:57.532]        // while-condition  =>  FALSE
[16:44:57.532]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:44:57.532]      </control>
[16:44:57.532]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:44:57.532]        // if-block "(__protocol & 0xFFFF) == 1"
[16:44:57.532]          // =>  FALSE
[16:44:57.532]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:44:57.532]      </control>
[16:44:57.532]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:44:57.532]        // if-block "(__protocol & 0xFFFF) == 2"
[16:44:57.542]          // =>  TRUE
[16:44:57.542]        <block atomic="false" info="">
[16:44:57.542]          Message(0, "executing SWD power up");
[16:44:57.542]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:44:57.552]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:44:57.554]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:44:57.554]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:44:57.554]        </block>
[16:44:57.554]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:44:57.554]      </control>
[16:44:57.554]      // end if-block "powered_down"
[16:44:57.554]    </control>
[16:44:57.554]    <block atomic="false" info="">
[16:44:57.554]      __var DEBUG_PORT_VAL    = 0;
[16:44:57.554]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:44:57.554]      __var ACCESS_POINT_VAL  = 0;
[16:44:57.554]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:44:57.554]      __ap = 1; 
[16:44:57.554]        // -> [__ap <= 0x00000001]
[16:44:57.554]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:44:57.572]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:44:57.572]      __ap = 4;
[16:44:57.572]        // -> [__ap <= 0x00000004]
[16:44:57.572]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:57.575]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:44:57.575]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:44:57.575]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:57.575]    </block>
[16:44:57.583]    <block atomic="false" info="">
[16:44:57.583]      __var nReset = 0x80;
[16:44:57.583]        // -> [nReset <= 0x00000080]
[16:44:57.583]      __var canReadPins = 0;
[16:44:57.583]        // -> [canReadPins <= 0x00000000]
[16:44:57.583]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:44:57.583]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:44:57.583]        // -> [canReadPins <= 0x00000001]
[16:44:57.583]    </block>
[16:44:57.583]    <control if="" while="1" timeout="200" info="">
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.583]      // while-condition  =>  TRUE
[16:44:57.583]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.593]      // while-condition  =>  TRUE
[16:44:57.593]      // while "1"  (timeout="200")
[16:44:57.603]      // while-condition  =>  TRUE
[16:44:57.603]      // while "1"  (timeout="200")
[16:44:57.603]      // while  =>  TIMEOUT
[16:44:57.603]      // end while "1"
[16:44:57.603]    </control>
[16:44:57.603]    <control if="canReadPins" while="" timeout="0" info="">
[16:44:57.603]      // if-block "canReadPins"
[16:44:57.603]        // =>  TRUE
[16:44:57.603]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:44:57.603]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:44:57.603]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:44:57.603]        // while-condition  =>  FALSE
[16:44:57.603]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:44:57.603]      </control>
[16:44:57.603]      // end if-block "canReadPins"
[16:44:57.603]    </control>
[16:44:57.603]    <control if="!canReadPins" while="" timeout="0" info="">
[16:44:57.603]      // if-block "!canReadPins"
[16:44:57.603]        // =>  FALSE
[16:44:57.603]      // skip if-block "!canReadPins"
[16:44:57.603]    </control>
[16:44:57.603]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:44:57.603]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:57.603]        // =>  TRUE
[16:44:57.603]      <block atomic="false" info="">
[16:44:57.603]        WriteAP(0x00, 0x190008);
[16:44:57.613]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:57.613]        WriteAP(0xF0, 0x01);
[16:44:57.623]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:44:57.623]      </block>
[16:44:57.623]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:44:57.623]    </control>
[16:44:57.623]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:44:57.623]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:57.623]        // =>  FALSE
[16:44:57.623]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:44:57.623]    </control>
[16:44:57.623]    <block atomic="false" info="">
[16:44:57.623]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:44:57.633]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:44:57.633]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:44:57.633]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:44:57.633]      __ap = 0; //lets make sure we reset the access point selection
[16:44:57.633]        // -> [__ap <= 0x00000000]
[16:44:57.633]    </block>
[16:44:57.633]  </sequence>
[16:44:57.633]  
[16:44:57.695]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:44:57.695]  
[16:44:57.695]  <debugvars>
[16:44:57.695]    // Pre-defined
[16:44:57.695]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:44:57.695]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:44:57.695]    __dp=0x00000000
[16:44:57.695]    __ap=0x00000000
[16:44:57.695]    __traceout=0x00000000      (Trace Disabled)
[16:44:57.695]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:44:57.695]    __FlashAddr=0x00000000
[16:44:57.695]    __FlashLen=0x00000000
[16:44:57.695]    __FlashArg=0x00000000
[16:44:57.695]    __FlashOp=0x00000000
[16:44:57.695]    __Result=0x00000000
[16:44:57.695]  </debugvars>
[16:44:57.695]  
[16:44:57.695]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:44:57.695]    <block atomic="false" info="">
[16:44:57.695]      __var deviceID = 0;
[16:44:57.695]        // -> [deviceID <= 0x00000000]
[16:44:57.695]      __var version = 0;
[16:44:57.695]        // -> [version <= 0x00000000]
[16:44:57.695]      __var partNum = 0;
[16:44:57.695]        // -> [partNum <= 0x00000000]
[16:44:57.695]      __var manuf = 0;
[16:44:57.695]        // -> [manuf <= 0x00000000]
[16:44:57.695]      __var isMSPM0G1X0X_G3X0X = 0;
[16:44:57.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:44:57.695]      __var isProduction = 0;
[16:44:57.695]        // -> [isProduction <= 0x00000000]
[16:44:57.695]      __var continueId = 0;
[16:44:57.695]        // -> [continueId <= 0x00000000]
[16:44:57.695]      deviceID =   Read32(0x41C40004);
[16:44:57.713]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:44:57.713]        // -> [deviceID <= 0x2BB8802F]
[16:44:57.713]      version = deviceID >> 28;
[16:44:57.713]        // -> [version <= 0x00000002]
[16:44:57.713]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:44:57.713]        // -> [partNum <= 0x0000BB88]
[16:44:57.713]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:44:57.713]        // -> [manuf <= 0x00000017]
[16:44:57.713]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:44:57.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:44:57.715]      isProduction = (version > 0);
[16:44:57.715]        // -> [isProduction <= 0x00000001]
[16:44:57.715]    </block>
[16:44:57.715]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:44:57.715]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:44:57.715]        // =>  FALSE
[16:44:57.715]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:44:57.715]    </control>
[16:44:57.715]    <control if="continueId == 4" while="" timeout="0" info="">
[16:44:57.715]      // if-block "continueId == 4"
[16:44:57.715]        // =>  FALSE
[16:44:57.715]      // skip if-block "continueId == 4"
[16:44:57.715]    </control>
[16:44:57.715]    <control if="!isProduction" while="" timeout="0" info="">
[16:44:57.715]      // if-block "!isProduction"
[16:44:57.715]        // =>  FALSE
[16:44:57.715]      // skip if-block "!isProduction"
[16:44:57.715]    </control>
[16:44:57.715]  </sequence>
[16:44:57.715]  
[16:45:29.426]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:45:29.426]  
[16:45:29.439]  <debugvars>
[16:45:29.439]    // Pre-defined
[16:45:29.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:29.439]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:29.439]    __dp=0x00000000
[16:45:29.439]    __ap=0x00000000
[16:45:29.439]    __traceout=0x00000000      (Trace Disabled)
[16:45:29.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:29.439]    __FlashAddr=0x00000000
[16:45:29.439]    __FlashLen=0x00000000
[16:45:29.439]    __FlashArg=0x00000000
[16:45:29.439]    __FlashOp=0x00000000
[16:45:29.439]    __Result=0x00000000
[16:45:29.439]  </debugvars>
[16:45:29.439]  
[16:45:29.439]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:45:29.439]    <block atomic="false" info="">
[16:45:29.439]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:45:29.439]        // -> [isSWJ <= 0x00000001]
[16:45:29.439]      __var hasDormant = __protocol & 0x00020000;
[16:45:29.439]        // -> [hasDormant <= 0x00000000]
[16:45:29.439]      __var protType   = __protocol & 0x0000FFFF;
[16:45:29.439]        // -> [protType <= 0x00000002]
[16:45:29.439]    </block>
[16:45:29.439]    <control if="protType == 1" while="" timeout="0" info="">
[16:45:29.439]      // if-block "protType == 1"
[16:45:29.439]        // =>  FALSE
[16:45:29.439]      // skip if-block "protType == 1"
[16:45:29.439]    </control>
[16:45:29.439]    <control if="protType == 2" while="" timeout="0" info="">
[16:45:29.439]      // if-block "protType == 2"
[16:45:29.439]        // =>  TRUE
[16:45:29.439]      <control if="isSWJ" while="" timeout="0" info="">
[16:45:29.439]        // if-block "isSWJ"
[16:45:29.439]          // =>  TRUE
[16:45:29.439]        <control if="hasDormant" while="" timeout="0" info="">
[16:45:29.439]          // if-block "hasDormant"
[16:45:29.439]            // =>  FALSE
[16:45:29.439]          // skip if-block "hasDormant"
[16:45:29.439]        </control>
[16:45:29.439]        <control if="!hasDormant" while="" timeout="0" info="">
[16:45:29.439]          // if-block "!hasDormant"
[16:45:29.439]            // =>  TRUE
[16:45:29.439]          <block atomic="false" info="">
[16:45:29.439]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:45:29.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:29.451]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:45:29.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:45:29.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:45:29.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:29.456]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:45:29.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:45:29.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:45:29.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:45:29.466]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:45:29.466]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:45:29.466]          </block>
[16:45:29.466]          // end if-block "!hasDormant"
[16:45:29.466]        </control>
[16:45:29.466]        // end if-block "isSWJ"
[16:45:29.466]      </control>
[16:45:29.466]      <control if="!isSWJ" while="" timeout="0" info="">
[16:45:29.466]        // if-block "!isSWJ"
[16:45:29.466]          // =>  FALSE
[16:45:29.466]        // skip if-block "!isSWJ"
[16:45:29.466]      </control>
[16:45:29.476]      <block atomic="false" info="">
[16:45:29.476]        ReadDP(0x0);
[16:45:29.476]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:45:29.476]      </block>
[16:45:29.476]      // end if-block "protType == 2"
[16:45:29.476]    </control>
[16:45:29.476]  </sequence>
[16:45:29.476]  
[16:45:29.488]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:45:29.488]  
[16:45:29.488]  <debugvars>
[16:45:29.488]    // Pre-defined
[16:45:29.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:29.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:29.488]    __dp=0x00000000
[16:45:29.488]    __ap=0x00000000
[16:45:29.488]    __traceout=0x00000000      (Trace Disabled)
[16:45:29.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:29.488]    __FlashAddr=0x00000000
[16:45:29.488]    __FlashLen=0x00000000
[16:45:29.488]    __FlashArg=0x00000000
[16:45:29.488]    __FlashOp=0x00000000
[16:45:29.488]    __Result=0x00000000
[16:45:29.488]  </debugvars>
[16:45:29.488]  
[16:45:29.488]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:45:29.488]    <block atomic="false" info="">
[16:45:29.488]      __var SW_DP_ABORT       = 0x0;
[16:45:29.488]        // -> [SW_DP_ABORT <= 0x00000000]
[16:45:29.488]      __var DP_CTRL_STAT      = 0x4;
[16:45:29.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:45:29.496]      __var DP_SELECT         = 0x8;
[16:45:29.496]        // -> [DP_SELECT <= 0x00000008]
[16:45:29.496]      __var powered_down      = 0;
[16:45:29.496]        // -> [powered_down <= 0x00000000]
[16:45:29.496]      WriteDP(DP_SELECT, 0x00000000);
[16:45:29.496]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:45:29.496]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:45:29.496]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:45:29.496]        // -> [powered_down <= 0x00000001]
[16:45:29.496]    </block>
[16:45:29.496]    <control if="powered_down" while="" timeout="0" info="">
[16:45:29.496]      // if-block "powered_down"
[16:45:29.496]        // =>  TRUE
[16:45:29.496]      <block atomic="false" info="">
[16:45:29.496]        Message(0, "Debug/System power-up request sent");
[16:45:29.496]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:45:29.506]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:45:29.506]      </block>
[16:45:29.506]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:45:29.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:45:29.506]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:45:29.506]        // while-condition  =>  FALSE
[16:45:29.506]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:45:29.506]      </control>
[16:45:29.506]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:45:29.516]        // if-block "(__protocol & 0xFFFF) == 1"
[16:45:29.516]          // =>  FALSE
[16:45:29.516]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:45:29.516]      </control>
[16:45:29.516]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:45:29.516]        // if-block "(__protocol & 0xFFFF) == 2"
[16:45:29.516]          // =>  TRUE
[16:45:29.516]        <block atomic="false" info="">
[16:45:29.516]          Message(0, "executing SWD power up");
[16:45:29.516]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:45:29.516]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:45:29.516]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:45:29.526]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:45:29.526]        </block>
[16:45:29.526]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:45:29.526]      </control>
[16:45:29.526]      // end if-block "powered_down"
[16:45:29.526]    </control>
[16:45:29.526]    <block atomic="false" info="">
[16:45:29.526]      __var DEBUG_PORT_VAL    = 0;
[16:45:29.526]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:45:29.526]      __var ACCESS_POINT_VAL  = 0;
[16:45:29.526]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:45:29.526]      __ap = 1; 
[16:45:29.526]        // -> [__ap <= 0x00000001]
[16:45:29.526]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:45:29.538]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:45:29.538]      __ap = 4;
[16:45:29.538]        // -> [__ap <= 0x00000004]
[16:45:29.538]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:45:29.546]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:45:29.546]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:45:29.546]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:45:29.546]    </block>
[16:45:29.546]    <block atomic="false" info="">
[16:45:29.546]      __var nReset = 0x80;
[16:45:29.546]        // -> [nReset <= 0x00000080]
[16:45:29.546]      __var canReadPins = 0;
[16:45:29.546]        // -> [canReadPins <= 0x00000000]
[16:45:29.546]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:45:29.556]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:45:29.556]        // -> [canReadPins <= 0x00000001]
[16:45:29.556]    </block>
[16:45:29.556]    <control if="" while="1" timeout="200" info="">
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.556]      // while "1"  (timeout="200")
[16:45:29.556]      // while-condition  =>  TRUE
[16:45:29.566]      // while "1"  (timeout="200")
[16:45:29.566]      // while  =>  TIMEOUT
[16:45:29.566]      // end while "1"
[16:45:29.566]    </control>
[16:45:29.566]    <control if="canReadPins" while="" timeout="0" info="">
[16:45:29.566]      // if-block "canReadPins"
[16:45:29.566]        // =>  TRUE
[16:45:29.566]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:45:29.566]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:45:29.566]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:45:29.566]        // while-condition  =>  FALSE
[16:45:29.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:45:29.566]      </control>
[16:45:29.566]      // end if-block "canReadPins"
[16:45:29.566]    </control>
[16:45:29.566]    <control if="!canReadPins" while="" timeout="0" info="">
[16:45:29.566]      // if-block "!canReadPins"
[16:45:29.566]        // =>  FALSE
[16:45:29.566]      // skip if-block "!canReadPins"
[16:45:29.566]    </control>
[16:45:29.566]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:45:29.566]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:45:29.566]        // =>  TRUE
[16:45:29.566]      <block atomic="false" info="">
[16:45:29.566]        WriteAP(0x00, 0x190008);
[16:45:29.576]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:45:29.576]        WriteAP(0xF0, 0x01);
[16:45:29.588]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:45:29.588]      </block>
[16:45:29.588]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:45:29.588]    </control>
[16:45:29.588]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:45:29.588]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:45:29.588]        // =>  FALSE
[16:45:29.588]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:45:29.588]    </control>
[16:45:29.588]    <block atomic="false" info="">
[16:45:29.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:45:29.596]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:45:29.596]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:45:29.596]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:45:29.596]      __ap = 0; //lets make sure we reset the access point selection
[16:45:29.596]        // -> [__ap <= 0x00000000]
[16:45:29.596]    </block>
[16:45:29.596]  </sequence>
[16:45:29.596]  
[16:45:29.646]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:45:29.646]  
[16:45:29.646]  <debugvars>
[16:45:29.646]    // Pre-defined
[16:45:29.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:45:29.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:45:29.646]    __dp=0x00000000
[16:45:29.646]    __ap=0x00000000
[16:45:29.646]    __traceout=0x00000000      (Trace Disabled)
[16:45:29.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:45:29.646]    __FlashAddr=0x00000000
[16:45:29.646]    __FlashLen=0x00000000
[16:45:29.646]    __FlashArg=0x00000000
[16:45:29.646]    __FlashOp=0x00000000
[16:45:29.646]    __Result=0x00000000
[16:45:29.646]  </debugvars>
[16:45:29.646]  
[16:45:29.646]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:45:29.646]    <block atomic="false" info="">
[16:45:29.646]      __var deviceID = 0;
[16:45:29.646]        // -> [deviceID <= 0x00000000]
[16:45:29.646]      __var version = 0;
[16:45:29.646]        // -> [version <= 0x00000000]
[16:45:29.646]      __var partNum = 0;
[16:45:29.646]        // -> [partNum <= 0x00000000]
[16:45:29.646]      __var manuf = 0;
[16:45:29.646]        // -> [manuf <= 0x00000000]
[16:45:29.646]      __var isMSPM0G1X0X_G3X0X = 0;
[16:45:29.646]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:45:29.646]      __var isProduction = 0;
[16:45:29.646]        // -> [isProduction <= 0x00000000]
[16:45:29.646]      __var continueId = 0;
[16:45:29.646]        // -> [continueId <= 0x00000000]
[16:45:29.646]      deviceID =   Read32(0x41C40004);
[16:45:29.666]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:45:29.666]        // -> [deviceID <= 0x2BB8802F]
[16:45:29.668]      version = deviceID >> 28;
[16:45:29.668]        // -> [version <= 0x00000002]
[16:45:29.668]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:45:29.668]        // -> [partNum <= 0x0000BB88]
[16:45:29.668]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:45:29.668]        // -> [manuf <= 0x00000017]
[16:45:29.668]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:45:29.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:45:29.668]      isProduction = (version > 0);
[16:45:29.668]        // -> [isProduction <= 0x00000001]
[16:45:29.668]    </block>
[16:45:29.668]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:45:29.668]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:45:29.668]        // =>  FALSE
[16:45:29.668]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:45:29.668]    </control>
[16:45:29.668]    <control if="continueId == 4" while="" timeout="0" info="">
[16:45:29.668]      // if-block "continueId == 4"
[16:45:29.668]        // =>  FALSE
[16:45:29.668]      // skip if-block "continueId == 4"
[16:45:29.668]    </control>
[16:45:29.668]    <control if="!isProduction" while="" timeout="0" info="">
[16:45:29.668]      // if-block "!isProduction"
[16:45:29.668]        // =>  FALSE
[16:45:29.668]      // skip if-block "!isProduction"
[16:45:29.668]    </control>
[16:45:29.668]  </sequence>
[16:45:29.668]  
[16:46:04.168]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:04.168]  
[16:46:04.180]  <debugvars>
[16:46:04.180]    // Pre-defined
[16:46:04.180]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:04.180]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:04.180]    __dp=0x00000000
[16:46:04.180]    __ap=0x00000000
[16:46:04.180]    __traceout=0x00000000      (Trace Disabled)
[16:46:04.180]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:04.180]    __FlashAddr=0x00000000
[16:46:04.180]    __FlashLen=0x00000000
[16:46:04.180]    __FlashArg=0x00000000
[16:46:04.180]    __FlashOp=0x00000000
[16:46:04.180]    __Result=0x00000000
[16:46:04.180]  </debugvars>
[16:46:04.180]  
[16:46:04.180]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:04.182]    <block atomic="false" info="">
[16:46:04.182]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:04.182]        // -> [isSWJ <= 0x00000001]
[16:46:04.182]      __var hasDormant = __protocol & 0x00020000;
[16:46:04.182]        // -> [hasDormant <= 0x00000000]
[16:46:04.182]      __var protType   = __protocol & 0x0000FFFF;
[16:46:04.182]        // -> [protType <= 0x00000002]
[16:46:04.182]    </block>
[16:46:04.182]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:04.182]      // if-block "protType == 1"
[16:46:04.182]        // =>  FALSE
[16:46:04.182]      // skip if-block "protType == 1"
[16:46:04.182]    </control>
[16:46:04.182]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:04.182]      // if-block "protType == 2"
[16:46:04.182]        // =>  TRUE
[16:46:04.182]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:04.182]        // if-block "isSWJ"
[16:46:04.182]          // =>  TRUE
[16:46:04.184]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:04.184]          // if-block "hasDormant"
[16:46:04.184]            // =>  FALSE
[16:46:04.184]          // skip if-block "hasDormant"
[16:46:04.184]        </control>
[16:46:04.184]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:04.184]          // if-block "!hasDormant"
[16:46:04.184]            // =>  TRUE
[16:46:04.184]          <block atomic="false" info="">
[16:46:04.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:04.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:04.188]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:04.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:04.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:04.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:04.196]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:04.201]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:04.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:04.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:04.201]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:04.208]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:04.208]          </block>
[16:46:04.208]          // end if-block "!hasDormant"
[16:46:04.208]        </control>
[16:46:04.208]        // end if-block "isSWJ"
[16:46:04.208]      </control>
[16:46:04.208]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:04.208]        // if-block "!isSWJ"
[16:46:04.208]          // =>  FALSE
[16:46:04.208]        // skip if-block "!isSWJ"
[16:46:04.208]      </control>
[16:46:04.208]      <block atomic="false" info="">
[16:46:04.208]        ReadDP(0x0);
[16:46:04.212]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:04.212]      </block>
[16:46:04.212]      // end if-block "protType == 2"
[16:46:04.212]    </control>
[16:46:04.212]  </sequence>
[16:46:04.212]  
[16:46:04.221]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:04.221]  
[16:46:04.221]  <debugvars>
[16:46:04.221]    // Pre-defined
[16:46:04.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:04.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:04.221]    __dp=0x00000000
[16:46:04.221]    __ap=0x00000000
[16:46:04.221]    __traceout=0x00000000      (Trace Disabled)
[16:46:04.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:04.221]    __FlashAddr=0x00000000
[16:46:04.221]    __FlashLen=0x00000000
[16:46:04.221]    __FlashArg=0x00000000
[16:46:04.221]    __FlashOp=0x00000000
[16:46:04.221]    __Result=0x00000000
[16:46:04.221]  </debugvars>
[16:46:04.221]  
[16:46:04.221]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:04.221]    <block atomic="false" info="">
[16:46:04.221]      __var SW_DP_ABORT       = 0x0;
[16:46:04.221]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:04.221]      __var DP_CTRL_STAT      = 0x4;
[16:46:04.221]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:04.221]      __var DP_SELECT         = 0x8;
[16:46:04.221]        // -> [DP_SELECT <= 0x00000008]
[16:46:04.221]      __var powered_down      = 0;
[16:46:04.221]        // -> [powered_down <= 0x00000000]
[16:46:04.221]      WriteDP(DP_SELECT, 0x00000000);
[16:46:04.229]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:04.229]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:04.229]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:04.229]        // -> [powered_down <= 0x00000001]
[16:46:04.237]    </block>
[16:46:04.237]    <control if="powered_down" while="" timeout="0" info="">
[16:46:04.237]      // if-block "powered_down"
[16:46:04.237]        // =>  TRUE
[16:46:04.237]      <block atomic="false" info="">
[16:46:04.237]        Message(0, "Debug/System power-up request sent");
[16:46:04.238]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:04.240]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:04.240]      </block>
[16:46:04.240]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:04.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:04.240]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:04.240]        // while-condition  =>  FALSE
[16:46:04.240]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:04.240]      </control>
[16:46:04.240]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:04.240]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:04.240]          // =>  FALSE
[16:46:04.240]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:04.240]      </control>
[16:46:04.240]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:04.240]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:04.240]          // =>  TRUE
[16:46:04.240]        <block atomic="false" info="">
[16:46:04.240]          Message(0, "executing SWD power up");
[16:46:04.247]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:04.250]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:04.250]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:04.258]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:04.258]        </block>
[16:46:04.258]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:04.258]      </control>
[16:46:04.258]      // end if-block "powered_down"
[16:46:04.258]    </control>
[16:46:04.258]    <block atomic="false" info="">
[16:46:04.258]      __var DEBUG_PORT_VAL    = 0;
[16:46:04.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:04.258]      __var ACCESS_POINT_VAL  = 0;
[16:46:04.258]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:04.258]      __ap = 1; 
[16:46:04.258]        // -> [__ap <= 0x00000001]
[16:46:04.258]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:04.268]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:04.268]      __ap = 4;
[16:46:04.268]        // -> [__ap <= 0x00000004]
[16:46:04.268]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:04.279]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:04.279]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:04.279]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:04.279]    </block>
[16:46:04.282]    <block atomic="false" info="">
[16:46:04.282]      __var nReset = 0x80;
[16:46:04.282]        // -> [nReset <= 0x00000080]
[16:46:04.282]      __var canReadPins = 0;
[16:46:04.282]        // -> [canReadPins <= 0x00000000]
[16:46:04.282]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:04.287]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:04.287]        // -> [canReadPins <= 0x00000001]
[16:46:04.287]    </block>
[16:46:04.288]    <control if="" while="1" timeout="200" info="">
[16:46:04.288]      // while "1"  (timeout="200")
[16:46:04.288]      // while-condition  =>  TRUE
[16:46:04.288]      // while "1"  (timeout="200")
[16:46:04.288]      // while-condition  =>  TRUE
[16:46:04.288]      // while "1"  (timeout="200")
[16:46:04.288]      // while-condition  =>  TRUE
[16:46:04.288]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.289]      // while-condition  =>  TRUE
[16:46:04.289]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.292]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.292]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.292]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.292]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.292]      // while "1"  (timeout="200")
[16:46:04.292]      // while-condition  =>  TRUE
[16:46:04.293]      // while "1"  (timeout="200")
[16:46:04.293]      // while-condition  =>  TRUE
[16:46:04.293]      // while "1"  (timeout="200")
[16:46:04.293]      // while-condition  =>  TRUE
[16:46:04.293]      // while "1"  (timeout="200")
[16:46:04.293]      // while-condition  =>  TRUE
[16:46:04.293]      // while "1"  (timeout="200")
[16:46:04.293]      // while-condition  =>  TRUE
[16:46:04.293]      // while "1"  (timeout="200")
[16:46:04.293]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.294]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.294]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.294]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.294]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.294]      // while-condition  =>  TRUE
[16:46:04.294]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.295]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.295]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.295]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.295]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.295]      // while "1"  (timeout="200")
[16:46:04.295]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.296]      // while "1"  (timeout="200")
[16:46:04.296]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.298]      // while "1"  (timeout="200")
[16:46:04.298]      // while-condition  =>  TRUE
[16:46:04.303]      // while "1"  (timeout="200")
[16:46:04.303]      // while  =>  TIMEOUT
[16:46:04.303]      // end while "1"
[16:46:04.303]    </control>
[16:46:04.303]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:04.303]      // if-block "canReadPins"
[16:46:04.303]        // =>  TRUE
[16:46:04.303]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:04.303]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:04.309]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:04.309]        // while-condition  =>  FALSE
[16:46:04.309]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:04.309]      </control>
[16:46:04.309]      // end if-block "canReadPins"
[16:46:04.309]    </control>
[16:46:04.312]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:04.312]      // if-block "!canReadPins"
[16:46:04.312]        // =>  FALSE
[16:46:04.312]      // skip if-block "!canReadPins"
[16:46:04.312]    </control>
[16:46:04.312]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:04.312]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:04.312]        // =>  TRUE
[16:46:04.312]      <block atomic="false" info="">
[16:46:04.312]        WriteAP(0x00, 0x190008);
[16:46:04.312]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:04.312]        WriteAP(0xF0, 0x01);
[16:46:04.321]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:04.321]      </block>
[16:46:04.321]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:04.321]    </control>
[16:46:04.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:04.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:04.321]        // =>  FALSE
[16:46:04.321]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:04.321]    </control>
[16:46:04.321]    <block atomic="false" info="">
[16:46:04.321]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:04.330]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:04.330]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:04.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:04.330]      __ap = 0; //lets make sure we reset the access point selection
[16:46:04.330]        // -> [__ap <= 0x00000000]
[16:46:04.330]    </block>
[16:46:04.330]  </sequence>
[16:46:04.330]  
[16:46:04.390]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:04.390]  
[16:46:04.392]  <debugvars>
[16:46:04.392]    // Pre-defined
[16:46:04.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:04.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:04.392]    __dp=0x00000000
[16:46:04.392]    __ap=0x00000000
[16:46:04.392]    __traceout=0x00000000      (Trace Disabled)
[16:46:04.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:04.392]    __FlashAddr=0x00000000
[16:46:04.392]    __FlashLen=0x00000000
[16:46:04.393]    __FlashArg=0x00000000
[16:46:04.393]    __FlashOp=0x00000000
[16:46:04.393]    __Result=0x00000000
[16:46:04.393]  </debugvars>
[16:46:04.393]  
[16:46:04.393]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:04.393]    <block atomic="false" info="">
[16:46:04.393]      __var deviceID = 0;
[16:46:04.393]        // -> [deviceID <= 0x00000000]
[16:46:04.393]      __var version = 0;
[16:46:04.393]        // -> [version <= 0x00000000]
[16:46:04.394]      __var partNum = 0;
[16:46:04.394]        // -> [partNum <= 0x00000000]
[16:46:04.394]      __var manuf = 0;
[16:46:04.394]        // -> [manuf <= 0x00000000]
[16:46:04.394]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:04.394]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:04.394]      __var isProduction = 0;
[16:46:04.394]        // -> [isProduction <= 0x00000000]
[16:46:04.394]      __var continueId = 0;
[16:46:04.394]        // -> [continueId <= 0x00000000]
[16:46:04.394]      deviceID =   Read32(0x41C40004);
[16:46:04.404]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:04.404]        // -> [deviceID <= 0x2BB8802F]
[16:46:04.404]      version = deviceID >> 28;
[16:46:04.404]        // -> [version <= 0x00000002]
[16:46:04.404]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:04.404]        // -> [partNum <= 0x0000BB88]
[16:46:04.404]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:04.404]        // -> [manuf <= 0x00000017]
[16:46:04.404]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:04.408]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:04.408]      isProduction = (version > 0);
[16:46:04.408]        // -> [isProduction <= 0x00000001]
[16:46:04.408]    </block>
[16:46:04.408]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:04.408]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:04.408]        // =>  FALSE
[16:46:04.408]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:04.408]    </control>
[16:46:04.408]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:04.408]      // if-block "continueId == 4"
[16:46:04.408]        // =>  FALSE
[16:46:04.408]      // skip if-block "continueId == 4"
[16:46:04.408]    </control>
[16:46:04.408]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:04.408]      // if-block "!isProduction"
[16:46:04.408]        // =>  FALSE
[16:46:04.408]      // skip if-block "!isProduction"
[16:46:04.408]    </control>
[16:46:04.408]  </sequence>
[16:46:04.408]  
[16:46:34.998]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:34.998]  
[16:46:34.998]  <debugvars>
[16:46:34.998]    // Pre-defined
[16:46:34.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:34.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:34.998]    __dp=0x00000000
[16:46:34.998]    __ap=0x00000000
[16:46:34.998]    __traceout=0x00000000      (Trace Disabled)
[16:46:34.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:34.998]    __FlashAddr=0x00000000
[16:46:34.998]    __FlashLen=0x00000000
[16:46:34.998]    __FlashArg=0x00000000
[16:46:34.998]    __FlashOp=0x00000000
[16:46:34.998]    __Result=0x00000000
[16:46:34.998]  </debugvars>
[16:46:34.998]  
[16:46:34.998]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:34.998]    <block atomic="false" info="">
[16:46:34.998]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:34.998]        // -> [isSWJ <= 0x00000001]
[16:46:34.998]      __var hasDormant = __protocol & 0x00020000;
[16:46:34.998]        // -> [hasDormant <= 0x00000000]
[16:46:35.000]      __var protType   = __protocol & 0x0000FFFF;
[16:46:35.000]        // -> [protType <= 0x00000002]
[16:46:35.000]    </block>
[16:46:35.000]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:35.000]      // if-block "protType == 1"
[16:46:35.000]        // =>  FALSE
[16:46:35.000]      // skip if-block "protType == 1"
[16:46:35.000]    </control>
[16:46:35.000]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:35.000]      // if-block "protType == 2"
[16:46:35.000]        // =>  TRUE
[16:46:35.000]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:35.000]        // if-block "isSWJ"
[16:46:35.001]          // =>  TRUE
[16:46:35.001]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:35.001]          // if-block "hasDormant"
[16:46:35.001]            // =>  FALSE
[16:46:35.001]          // skip if-block "hasDormant"
[16:46:35.001]        </control>
[16:46:35.001]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:35.002]          // if-block "!hasDormant"
[16:46:35.002]            // =>  TRUE
[16:46:35.002]          <block atomic="false" info="">
[16:46:35.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:35.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:35.003]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:35.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:35.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:35.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:35.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:35.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:35.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:35.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:35.017]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:35.022]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:35.022]          </block>
[16:46:35.022]          // end if-block "!hasDormant"
[16:46:35.022]        </control>
[16:46:35.022]        // end if-block "isSWJ"
[16:46:35.022]      </control>
[16:46:35.022]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:35.022]        // if-block "!isSWJ"
[16:46:35.022]          // =>  FALSE
[16:46:35.022]        // skip if-block "!isSWJ"
[16:46:35.022]      </control>
[16:46:35.022]      <block atomic="false" info="">
[16:46:35.022]        ReadDP(0x0);
[16:46:35.027]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:35.027]      </block>
[16:46:35.028]      // end if-block "protType == 2"
[16:46:35.028]    </control>
[16:46:35.028]  </sequence>
[16:46:35.028]  
[16:46:35.030]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:35.030]  
[16:46:35.030]  <debugvars>
[16:46:35.030]    // Pre-defined
[16:46:35.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:35.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:35.030]    __dp=0x00000000
[16:46:35.030]    __ap=0x00000000
[16:46:35.030]    __traceout=0x00000000      (Trace Disabled)
[16:46:35.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:35.030]    __FlashAddr=0x00000000
[16:46:35.030]    __FlashLen=0x00000000
[16:46:35.030]    __FlashArg=0x00000000
[16:46:35.036]    __FlashOp=0x00000000
[16:46:35.037]    __Result=0x00000000
[16:46:35.037]  </debugvars>
[16:46:35.037]  
[16:46:35.037]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:35.037]    <block atomic="false" info="">
[16:46:35.037]      __var SW_DP_ABORT       = 0x0;
[16:46:35.037]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:35.037]      __var DP_CTRL_STAT      = 0x4;
[16:46:35.037]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:35.037]      __var DP_SELECT         = 0x8;
[16:46:35.037]        // -> [DP_SELECT <= 0x00000008]
[16:46:35.037]      __var powered_down      = 0;
[16:46:35.038]        // -> [powered_down <= 0x00000000]
[16:46:35.038]      WriteDP(DP_SELECT, 0x00000000);
[16:46:35.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:35.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:35.039]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:35.039]        // -> [powered_down <= 0x00000001]
[16:46:35.039]    </block>
[16:46:35.039]    <control if="powered_down" while="" timeout="0" info="">
[16:46:35.039]      // if-block "powered_down"
[16:46:35.039]        // =>  TRUE
[16:46:35.039]      <block atomic="false" info="">
[16:46:35.039]        Message(0, "Debug/System power-up request sent");
[16:46:35.039]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:35.048]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:35.048]      </block>
[16:46:35.048]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:35.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:35.048]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:35.048]        // while-condition  =>  FALSE
[16:46:35.048]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:35.048]      </control>
[16:46:35.048]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:35.048]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:35.048]          // =>  FALSE
[16:46:35.048]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:35.048]      </control>
[16:46:35.048]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:35.048]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:35.048]          // =>  TRUE
[16:46:35.048]        <block atomic="false" info="">
[16:46:35.048]          Message(0, "executing SWD power up");
[16:46:35.048]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:35.059]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:35.059]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:35.067]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:35.067]        </block>
[16:46:35.067]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:35.067]      </control>
[16:46:35.067]      // end if-block "powered_down"
[16:46:35.067]    </control>
[16:46:35.067]    <block atomic="false" info="">
[16:46:35.067]      __var DEBUG_PORT_VAL    = 0;
[16:46:35.067]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:35.067]      __var ACCESS_POINT_VAL  = 0;
[16:46:35.067]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:35.067]      __ap = 1; 
[16:46:35.067]        // -> [__ap <= 0x00000001]
[16:46:35.067]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:35.089]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:35.089]      __ap = 4;
[16:46:35.089]        // -> [__ap <= 0x00000004]
[16:46:35.089]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:35.097]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:35.097]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:35.097]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:35.097]    </block>
[16:46:35.097]    <block atomic="false" info="">
[16:46:35.097]      __var nReset = 0x80;
[16:46:35.097]        // -> [nReset <= 0x00000080]
[16:46:35.097]      __var canReadPins = 0;
[16:46:35.097]        // -> [canReadPins <= 0x00000000]
[16:46:35.097]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:35.107]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:35.107]        // -> [canReadPins <= 0x00000001]
[16:46:35.107]    </block>
[16:46:35.107]    <control if="" while="1" timeout="200" info="">
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.107]      // while "1"  (timeout="200")
[16:46:35.107]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.111]      // while-condition  =>  TRUE
[16:46:35.111]      // while "1"  (timeout="200")
[16:46:35.113]      // while-condition  =>  TRUE
[16:46:35.113]      // while "1"  (timeout="200")
[16:46:35.113]      // while  =>  TIMEOUT
[16:46:35.113]      // end while "1"
[16:46:35.113]    </control>
[16:46:35.113]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:35.113]      // if-block "canReadPins"
[16:46:35.113]        // =>  TRUE
[16:46:35.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:35.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:35.117]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:35.117]        // while-condition  =>  FALSE
[16:46:35.117]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:35.117]      </control>
[16:46:35.117]      // end if-block "canReadPins"
[16:46:35.119]    </control>
[16:46:35.119]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:35.119]      // if-block "!canReadPins"
[16:46:35.119]        // =>  FALSE
[16:46:35.119]      // skip if-block "!canReadPins"
[16:46:35.119]    </control>
[16:46:35.119]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:35.119]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:35.119]        // =>  TRUE
[16:46:35.119]      <block atomic="false" info="">
[16:46:35.119]        WriteAP(0x00, 0x190008);
[16:46:35.128]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:35.128]        WriteAP(0xF0, 0x01);
[16:46:35.139]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:35.139]      </block>
[16:46:35.139]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:35.139]    </control>
[16:46:35.139]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:35.139]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:35.139]        // =>  FALSE
[16:46:35.139]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:35.139]    </control>
[16:46:35.139]    <block atomic="false" info="">
[16:46:35.139]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:35.149]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:35.149]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:35.149]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:35.149]      __ap = 0; //lets make sure we reset the access point selection
[16:46:35.149]        // -> [__ap <= 0x00000000]
[16:46:35.149]    </block>
[16:46:35.149]  </sequence>
[16:46:35.149]  
[16:46:35.197]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:35.197]  
[16:46:35.197]  <debugvars>
[16:46:35.197]    // Pre-defined
[16:46:35.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:35.197]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:35.197]    __dp=0x00000000
[16:46:35.197]    __ap=0x00000000
[16:46:35.197]    __traceout=0x00000000      (Trace Disabled)
[16:46:35.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:35.197]    __FlashAddr=0x00000000
[16:46:35.197]    __FlashLen=0x00000000
[16:46:35.197]    __FlashArg=0x00000000
[16:46:35.197]    __FlashOp=0x00000000
[16:46:35.197]    __Result=0x00000000
[16:46:35.197]  </debugvars>
[16:46:35.197]  
[16:46:35.197]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:35.197]    <block atomic="false" info="">
[16:46:35.197]      __var deviceID = 0;
[16:46:35.197]        // -> [deviceID <= 0x00000000]
[16:46:35.197]      __var version = 0;
[16:46:35.197]        // -> [version <= 0x00000000]
[16:46:35.197]      __var partNum = 0;
[16:46:35.197]        // -> [partNum <= 0x00000000]
[16:46:35.197]      __var manuf = 0;
[16:46:35.197]        // -> [manuf <= 0x00000000]
[16:46:35.197]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:35.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:35.197]      __var isProduction = 0;
[16:46:35.197]        // -> [isProduction <= 0x00000000]
[16:46:35.197]      __var continueId = 0;
[16:46:35.197]        // -> [continueId <= 0x00000000]
[16:46:35.197]      deviceID =   Read32(0x41C40004);
[16:46:35.217]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:35.217]        // -> [deviceID <= 0x2BB8802F]
[16:46:35.217]      version = deviceID >> 28;
[16:46:35.217]        // -> [version <= 0x00000002]
[16:46:35.217]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:35.217]        // -> [partNum <= 0x0000BB88]
[16:46:35.217]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:35.217]        // -> [manuf <= 0x00000017]
[16:46:35.217]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:35.217]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:35.217]      isProduction = (version > 0);
[16:46:35.217]        // -> [isProduction <= 0x00000001]
[16:46:35.217]    </block>
[16:46:35.217]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:35.217]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:35.217]        // =>  FALSE
[16:46:35.217]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:35.217]    </control>
[16:46:35.217]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:35.217]      // if-block "continueId == 4"
[16:46:35.217]        // =>  FALSE
[16:46:35.217]      // skip if-block "continueId == 4"
[16:46:35.217]    </control>
[16:46:35.217]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:35.217]      // if-block "!isProduction"
[16:46:35.217]        // =>  FALSE
[16:46:35.217]      // skip if-block "!isProduction"
[16:46:35.217]    </control>
[16:46:35.217]  </sequence>
[16:46:35.217]  
[16:48:17.281]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:48:17.281]  
[16:48:17.282]  <debugvars>
[16:48:17.282]    // Pre-defined
[16:48:17.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:17.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:17.282]    __dp=0x00000000
[16:48:17.282]    __ap=0x00000000
[16:48:17.282]    __traceout=0x00000000      (Trace Disabled)
[16:48:17.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:17.282]    __FlashAddr=0x00000000
[16:48:17.282]    __FlashLen=0x00000000
[16:48:17.282]    __FlashArg=0x00000000
[16:48:17.282]    __FlashOp=0x00000000
[16:48:17.282]    __Result=0x00000000
[16:48:17.282]  </debugvars>
[16:48:17.282]  
[16:48:17.282]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:48:17.282]    <block atomic="false" info="">
[16:48:17.282]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:48:17.282]        // -> [isSWJ <= 0x00000001]
[16:48:17.282]      __var hasDormant = __protocol & 0x00020000;
[16:48:17.284]        // -> [hasDormant <= 0x00000000]
[16:48:17.284]      __var protType   = __protocol & 0x0000FFFF;
[16:48:17.284]        // -> [protType <= 0x00000002]
[16:48:17.284]    </block>
[16:48:17.284]    <control if="protType == 1" while="" timeout="0" info="">
[16:48:17.284]      // if-block "protType == 1"
[16:48:17.285]        // =>  FALSE
[16:48:17.285]      // skip if-block "protType == 1"
[16:48:17.285]    </control>
[16:48:17.285]    <control if="protType == 2" while="" timeout="0" info="">
[16:48:17.285]      // if-block "protType == 2"
[16:48:17.285]        // =>  TRUE
[16:48:17.285]      <control if="isSWJ" while="" timeout="0" info="">
[16:48:17.285]        // if-block "isSWJ"
[16:48:17.285]          // =>  TRUE
[16:48:17.285]        <control if="hasDormant" while="" timeout="0" info="">
[16:48:17.285]          // if-block "hasDormant"
[16:48:17.285]            // =>  FALSE
[16:48:17.285]          // skip if-block "hasDormant"
[16:48:17.285]        </control>
[16:48:17.285]        <control if="!hasDormant" while="" timeout="0" info="">
[16:48:17.285]          // if-block "!hasDormant"
[16:48:17.285]            // =>  TRUE
[16:48:17.285]          <block atomic="false" info="">
[16:48:17.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:48:17.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:17.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:48:17.292]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:48:17.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:48:17.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:17.292]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:48:17.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:48:17.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:48:17.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:48:17.297]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:48:17.305]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:48:17.305]          </block>
[16:48:17.305]          // end if-block "!hasDormant"
[16:48:17.305]        </control>
[16:48:17.305]        // end if-block "isSWJ"
[16:48:17.305]      </control>
[16:48:17.305]      <control if="!isSWJ" while="" timeout="0" info="">
[16:48:17.305]        // if-block "!isSWJ"
[16:48:17.305]          // =>  FALSE
[16:48:17.305]        // skip if-block "!isSWJ"
[16:48:17.305]      </control>
[16:48:17.305]      <block atomic="false" info="">
[16:48:17.305]        ReadDP(0x0);
[16:48:17.308]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:48:17.308]      </block>
[16:48:17.312]      // end if-block "protType == 2"
[16:48:17.312]    </control>
[16:48:17.312]  </sequence>
[16:48:17.312]  
[16:48:17.325]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:48:17.325]  
[16:48:17.325]  <debugvars>
[16:48:17.325]    // Pre-defined
[16:48:17.325]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:17.325]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:17.325]    __dp=0x00000000
[16:48:17.325]    __ap=0x00000000
[16:48:17.325]    __traceout=0x00000000      (Trace Disabled)
[16:48:17.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:17.325]    __FlashAddr=0x00000000
[16:48:17.325]    __FlashLen=0x00000000
[16:48:17.325]    __FlashArg=0x00000000
[16:48:17.325]    __FlashOp=0x00000000
[16:48:17.325]    __Result=0x00000000
[16:48:17.325]  </debugvars>
[16:48:17.325]  
[16:48:17.325]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:48:17.325]    <block atomic="false" info="">
[16:48:17.325]      __var SW_DP_ABORT       = 0x0;
[16:48:17.325]        // -> [SW_DP_ABORT <= 0x00000000]
[16:48:17.325]      __var DP_CTRL_STAT      = 0x4;
[16:48:17.327]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:48:17.327]      __var DP_SELECT         = 0x8;
[16:48:17.327]        // -> [DP_SELECT <= 0x00000008]
[16:48:17.327]      __var powered_down      = 0;
[16:48:17.327]        // -> [powered_down <= 0x00000000]
[16:48:17.327]      WriteDP(DP_SELECT, 0x00000000);
[16:48:17.327]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:48:17.327]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:48:17.332]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:48:17.332]        // -> [powered_down <= 0x00000001]
[16:48:17.334]    </block>
[16:48:17.334]    <control if="powered_down" while="" timeout="0" info="">
[16:48:17.334]      // if-block "powered_down"
[16:48:17.334]        // =>  TRUE
[16:48:17.334]      <block atomic="false" info="">
[16:48:17.334]        Message(0, "Debug/System power-up request sent");
[16:48:17.334]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:48:17.334]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:48:17.334]      </block>
[16:48:17.334]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:48:17.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:48:17.334]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:48:17.334]        // while-condition  =>  FALSE
[16:48:17.342]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:48:17.342]      </control>
[16:48:17.342]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:48:17.342]        // if-block "(__protocol & 0xFFFF) == 1"
[16:48:17.342]          // =>  FALSE
[16:48:17.342]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:48:17.342]      </control>
[16:48:17.342]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:48:17.342]        // if-block "(__protocol & 0xFFFF) == 2"
[16:48:17.342]          // =>  TRUE
[16:48:17.342]        <block atomic="false" info="">
[16:48:17.342]          Message(0, "executing SWD power up");
[16:48:17.342]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:48:17.355]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:48:17.355]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:48:17.362]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:48:17.362]        </block>
[16:48:17.362]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:48:17.362]      </control>
[16:48:17.362]      // end if-block "powered_down"
[16:48:17.362]    </control>
[16:48:17.362]    <block atomic="false" info="">
[16:48:17.362]      __var DEBUG_PORT_VAL    = 0;
[16:48:17.362]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:48:17.362]      __var ACCESS_POINT_VAL  = 0;
[16:48:17.362]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:48:17.362]      __ap = 1; 
[16:48:17.362]        // -> [__ap <= 0x00000001]
[16:48:17.362]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:48:17.362]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:48:17.362]      __ap = 4;
[16:48:17.362]        // -> [__ap <= 0x00000004]
[16:48:17.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:48:17.372]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:48:17.372]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:48:17.372]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:48:17.372]    </block>
[16:48:17.372]    <block atomic="false" info="">
[16:48:17.372]      __var nReset = 0x80;
[16:48:17.372]        // -> [nReset <= 0x00000080]
[16:48:17.372]      __var canReadPins = 0;
[16:48:17.372]        // -> [canReadPins <= 0x00000000]
[16:48:17.372]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:48:17.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:48:17.384]        // -> [canReadPins <= 0x00000001]
[16:48:17.384]    </block>
[16:48:17.384]    <control if="" while="1" timeout="200" info="">
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.384]      // while-condition  =>  TRUE
[16:48:17.384]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.393]      // while-condition  =>  TRUE
[16:48:17.393]      // while "1"  (timeout="200")
[16:48:17.403]      // while-condition  =>  TRUE
[16:48:17.403]      // while "1"  (timeout="200")
[16:48:17.403]      // while  =>  TIMEOUT
[16:48:17.403]      // end while "1"
[16:48:17.403]    </control>
[16:48:17.403]    <control if="canReadPins" while="" timeout="0" info="">
[16:48:17.403]      // if-block "canReadPins"
[16:48:17.403]        // =>  TRUE
[16:48:17.403]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:48:17.403]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:48:17.403]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:48:17.403]        // while-condition  =>  FALSE
[16:48:17.403]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:48:17.403]      </control>
[16:48:17.403]      // end if-block "canReadPins"
[16:48:17.403]    </control>
[16:48:17.408]    <control if="!canReadPins" while="" timeout="0" info="">
[16:48:17.408]      // if-block "!canReadPins"
[16:48:17.408]        // =>  FALSE
[16:48:17.408]      // skip if-block "!canReadPins"
[16:48:17.408]    </control>
[16:48:17.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:48:17.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:48:17.408]        // =>  TRUE
[16:48:17.408]      <block atomic="false" info="">
[16:48:17.408]        WriteAP(0x00, 0x190008);
[16:48:17.412]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:48:17.412]        WriteAP(0xF0, 0x01);
[16:48:17.414]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:48:17.414]      </block>
[16:48:17.414]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:48:17.414]    </control>
[16:48:17.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:48:17.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:48:17.414]        // =>  FALSE
[16:48:17.414]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:48:17.414]    </control>
[16:48:17.414]    <block atomic="false" info="">
[16:48:17.414]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:48:17.423]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:48:17.423]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:48:17.423]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:48:17.423]      __ap = 0; //lets make sure we reset the access point selection
[16:48:17.423]        // -> [__ap <= 0x00000000]
[16:48:17.423]    </block>
[16:48:17.423]  </sequence>
[16:48:17.423]  
[16:48:17.462]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:48:17.462]  
[16:48:17.462]  <debugvars>
[16:48:17.462]    // Pre-defined
[16:48:17.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:48:17.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:48:17.469]    __dp=0x00000000
[16:48:17.469]    __ap=0x00000000
[16:48:17.469]    __traceout=0x00000000      (Trace Disabled)
[16:48:17.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:48:17.469]    __FlashAddr=0x00000000
[16:48:17.469]    __FlashLen=0x00000000
[16:48:17.469]    __FlashArg=0x00000000
[16:48:17.469]    __FlashOp=0x00000000
[16:48:17.469]    __Result=0x00000000
[16:48:17.469]  </debugvars>
[16:48:17.469]  
[16:48:17.469]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:48:17.469]    <block atomic="false" info="">
[16:48:17.469]      __var deviceID = 0;
[16:48:17.469]        // -> [deviceID <= 0x00000000]
[16:48:17.469]      __var version = 0;
[16:48:17.469]        // -> [version <= 0x00000000]
[16:48:17.469]      __var partNum = 0;
[16:48:17.469]        // -> [partNum <= 0x00000000]
[16:48:17.469]      __var manuf = 0;
[16:48:17.469]        // -> [manuf <= 0x00000000]
[16:48:17.469]      __var isMSPM0G1X0X_G3X0X = 0;
[16:48:17.469]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:48:17.469]      __var isProduction = 0;
[16:48:17.469]        // -> [isProduction <= 0x00000000]
[16:48:17.469]      __var continueId = 0;
[16:48:17.469]        // -> [continueId <= 0x00000000]
[16:48:17.469]      deviceID =   Read32(0x41C40004);
[16:48:17.481]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:48:17.481]        // -> [deviceID <= 0x2BB8802F]
[16:48:17.481]      version = deviceID >> 28;
[16:48:17.481]        // -> [version <= 0x00000002]
[16:48:17.481]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:48:17.481]        // -> [partNum <= 0x0000BB88]
[16:48:17.481]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:48:17.481]        // -> [manuf <= 0x00000017]
[16:48:17.482]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:48:17.482]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:48:17.482]      isProduction = (version > 0);
[16:48:17.483]        // -> [isProduction <= 0x00000001]
[16:48:17.483]    </block>
[16:48:17.483]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:48:17.483]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:48:17.483]        // =>  FALSE
[16:48:17.483]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:48:17.483]    </control>
[16:48:17.483]    <control if="continueId == 4" while="" timeout="0" info="">
[16:48:17.483]      // if-block "continueId == 4"
[16:48:17.483]        // =>  FALSE
[16:48:17.484]      // skip if-block "continueId == 4"
[16:48:17.484]    </control>
[16:48:17.484]    <control if="!isProduction" while="" timeout="0" info="">
[16:48:17.484]      // if-block "!isProduction"
[16:48:17.484]        // =>  FALSE
[16:48:17.484]      // skip if-block "!isProduction"
[16:48:17.484]    </control>
[16:48:17.484]  </sequence>
[16:48:17.484]  
[16:49:58.632]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:49:58.632]  
[16:49:58.642]  <debugvars>
[16:49:58.642]    // Pre-defined
[16:49:58.642]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:58.642]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:58.642]    __dp=0x00000000
[16:49:58.642]    __ap=0x00000000
[16:49:58.642]    __traceout=0x00000000      (Trace Disabled)
[16:49:58.642]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:58.642]    __FlashAddr=0x00000000
[16:49:58.642]    __FlashLen=0x00000000
[16:49:58.642]    __FlashArg=0x00000000
[16:49:58.642]    __FlashOp=0x00000000
[16:49:58.642]    __Result=0x00000000
[16:49:58.642]  </debugvars>
[16:49:58.642]  
[16:49:58.642]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:49:58.642]    <block atomic="false" info="">
[16:49:58.642]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:49:58.642]        // -> [isSWJ <= 0x00000001]
[16:49:58.642]      __var hasDormant = __protocol & 0x00020000;
[16:49:58.642]        // -> [hasDormant <= 0x00000000]
[16:49:58.642]      __var protType   = __protocol & 0x0000FFFF;
[16:49:58.642]        // -> [protType <= 0x00000002]
[16:49:58.642]    </block>
[16:49:58.642]    <control if="protType == 1" while="" timeout="0" info="">
[16:49:58.642]      // if-block "protType == 1"
[16:49:58.642]        // =>  FALSE
[16:49:58.645]      // skip if-block "protType == 1"
[16:49:58.645]    </control>
[16:49:58.645]    <control if="protType == 2" while="" timeout="0" info="">
[16:49:58.645]      // if-block "protType == 2"
[16:49:58.645]        // =>  TRUE
[16:49:58.645]      <control if="isSWJ" while="" timeout="0" info="">
[16:49:58.645]        // if-block "isSWJ"
[16:49:58.645]          // =>  TRUE
[16:49:58.645]        <control if="hasDormant" while="" timeout="0" info="">
[16:49:58.645]          // if-block "hasDormant"
[16:49:58.645]            // =>  FALSE
[16:49:58.645]          // skip if-block "hasDormant"
[16:49:58.645]        </control>
[16:49:58.645]        <control if="!hasDormant" while="" timeout="0" info="">
[16:49:58.645]          // if-block "!hasDormant"
[16:49:58.645]            // =>  TRUE
[16:49:58.645]          <block atomic="false" info="">
[16:49:58.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:49:58.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:58.645]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:49:58.652]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:49:58.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:49:58.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:58.653]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:49:58.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:49:58.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:49:58.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:58.664]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:49:58.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:49:58.664]          </block>
[16:49:58.664]          // end if-block "!hasDormant"
[16:49:58.664]        </control>
[16:49:58.664]        // end if-block "isSWJ"
[16:49:58.664]      </control>
[16:49:58.664]      <control if="!isSWJ" while="" timeout="0" info="">
[16:49:58.664]        // if-block "!isSWJ"
[16:49:58.664]          // =>  FALSE
[16:49:58.664]        // skip if-block "!isSWJ"
[16:49:58.664]      </control>
[16:49:58.664]      <block atomic="false" info="">
[16:49:58.664]        ReadDP(0x0);
[16:49:58.673]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:49:58.673]      </block>
[16:49:58.673]      // end if-block "protType == 2"
[16:49:58.673]    </control>
[16:49:58.673]  </sequence>
[16:49:58.673]  
[16:49:58.683]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:49:58.683]  
[16:49:58.683]  <debugvars>
[16:49:58.684]    // Pre-defined
[16:49:58.684]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:58.684]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:58.684]    __dp=0x00000000
[16:49:58.684]    __ap=0x00000000
[16:49:58.685]    __traceout=0x00000000      (Trace Disabled)
[16:49:58.685]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:58.685]    __FlashAddr=0x00000000
[16:49:58.685]    __FlashLen=0x00000000
[16:49:58.685]    __FlashArg=0x00000000
[16:49:58.685]    __FlashOp=0x00000000
[16:49:58.685]    __Result=0x00000000
[16:49:58.685]  </debugvars>
[16:49:58.685]  
[16:49:58.685]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:49:58.685]    <block atomic="false" info="">
[16:49:58.685]      __var SW_DP_ABORT       = 0x0;
[16:49:58.686]        // -> [SW_DP_ABORT <= 0x00000000]
[16:49:58.686]      __var DP_CTRL_STAT      = 0x4;
[16:49:58.686]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:49:58.686]      __var DP_SELECT         = 0x8;
[16:49:58.686]        // -> [DP_SELECT <= 0x00000008]
[16:49:58.686]      __var powered_down      = 0;
[16:49:58.686]        // -> [powered_down <= 0x00000000]
[16:49:58.686]      WriteDP(DP_SELECT, 0x00000000);
[16:49:58.687]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:49:58.687]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:49:58.704]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:49:58.704]        // -> [powered_down <= 0x00000001]
[16:49:58.704]    </block>
[16:49:58.704]    <control if="powered_down" while="" timeout="0" info="">
[16:49:58.704]      // if-block "powered_down"
[16:49:58.704]        // =>  TRUE
[16:49:58.704]      <block atomic="false" info="">
[16:49:58.704]        Message(0, "Debug/System power-up request sent");
[16:49:58.704]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:49:58.704]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:49:58.704]      </block>
[16:49:58.704]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:49:58.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:49:58.720]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:49:58.720]        // while-condition  =>  FALSE
[16:49:58.720]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:49:58.720]      </control>
[16:49:58.720]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:49:58.720]        // if-block "(__protocol & 0xFFFF) == 1"
[16:49:58.720]          // =>  FALSE
[16:49:58.720]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:49:58.720]      </control>
[16:49:58.720]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:49:58.720]        // if-block "(__protocol & 0xFFFF) == 2"
[16:49:58.720]          // =>  TRUE
[16:49:58.720]        <block atomic="false" info="">
[16:49:58.720]          Message(0, "executing SWD power up");
[16:49:58.720]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:49:58.725]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:49:58.725]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:49:58.734]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:49:58.734]        </block>
[16:49:58.734]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:49:58.734]      </control>
[16:49:58.734]      // end if-block "powered_down"
[16:49:58.734]    </control>
[16:49:58.734]    <block atomic="false" info="">
[16:49:58.734]      __var DEBUG_PORT_VAL    = 0;
[16:49:58.734]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:49:58.734]      __var ACCESS_POINT_VAL  = 0;
[16:49:58.734]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:49:58.734]      __ap = 1; 
[16:49:58.734]        // -> [__ap <= 0x00000001]
[16:49:58.734]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:49:58.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:49:58.746]      __ap = 4;
[16:49:58.746]        // -> [__ap <= 0x00000004]
[16:49:58.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:58.755]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:49:58.755]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:49:58.755]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:58.755]    </block>
[16:49:58.755]    <block atomic="false" info="">
[16:49:58.755]      __var nReset = 0x80;
[16:49:58.755]        // -> [nReset <= 0x00000080]
[16:49:58.755]      __var canReadPins = 0;
[16:49:58.755]        // -> [canReadPins <= 0x00000000]
[16:49:58.755]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:49:58.764]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:49:58.764]        // -> [canReadPins <= 0x00000001]
[16:49:58.764]    </block>
[16:49:58.764]    <control if="" while="1" timeout="200" info="">
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.764]      // while "1"  (timeout="200")
[16:49:58.764]      // while-condition  =>  TRUE
[16:49:58.771]      // while "1"  (timeout="200")
[16:49:58.771]      // while  =>  TIMEOUT
[16:49:58.771]      // end while "1"
[16:49:58.771]    </control>
[16:49:58.771]    <control if="canReadPins" while="" timeout="0" info="">
[16:49:58.771]      // if-block "canReadPins"
[16:49:58.771]        // =>  TRUE
[16:49:58.771]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:49:58.771]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:49:58.776]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:49:58.776]        // while-condition  =>  FALSE
[16:49:58.776]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:49:58.776]      </control>
[16:49:58.776]      // end if-block "canReadPins"
[16:49:58.776]    </control>
[16:49:58.776]    <control if="!canReadPins" while="" timeout="0" info="">
[16:49:58.776]      // if-block "!canReadPins"
[16:49:58.776]        // =>  FALSE
[16:49:58.776]      // skip if-block "!canReadPins"
[16:49:58.776]    </control>
[16:49:58.776]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:49:58.776]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:58.776]        // =>  TRUE
[16:49:58.778]      <block atomic="false" info="">
[16:49:58.778]        WriteAP(0x00, 0x190008);
[16:49:58.778]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:58.778]        WriteAP(0xF0, 0x01);
[16:49:58.789]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:58.789]      </block>
[16:49:58.789]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:58.789]    </control>
[16:49:58.790]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:49:58.790]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:58.790]        // =>  FALSE
[16:49:58.790]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:58.790]    </control>
[16:49:58.790]    <block atomic="false" info="">
[16:49:58.790]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:58.796]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:49:58.796]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:49:58.796]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:58.797]      __ap = 0; //lets make sure we reset the access point selection
[16:49:58.797]        // -> [__ap <= 0x00000000]
[16:49:58.797]    </block>
[16:49:58.797]  </sequence>
[16:49:58.797]  
[16:49:58.863]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:49:58.863]  
[16:49:58.863]  <debugvars>
[16:49:58.863]    // Pre-defined
[16:49:58.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:58.863]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:58.863]    __dp=0x00000000
[16:49:58.863]    __ap=0x00000000
[16:49:58.863]    __traceout=0x00000000      (Trace Disabled)
[16:49:58.863]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:58.863]    __FlashAddr=0x00000000
[16:49:58.865]    __FlashLen=0x00000000
[16:49:58.865]    __FlashArg=0x00000000
[16:49:58.865]    __FlashOp=0x00000000
[16:49:58.865]    __Result=0x00000000
[16:49:58.865]  </debugvars>
[16:49:58.865]  
[16:49:58.865]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:49:58.865]    <block atomic="false" info="">
[16:49:58.865]      __var deviceID = 0;
[16:49:58.865]        // -> [deviceID <= 0x00000000]
[16:49:58.865]      __var version = 0;
[16:49:58.865]        // -> [version <= 0x00000000]
[16:49:58.865]      __var partNum = 0;
[16:49:58.865]        // -> [partNum <= 0x00000000]
[16:49:58.865]      __var manuf = 0;
[16:49:58.865]        // -> [manuf <= 0x00000000]
[16:49:58.865]      __var isMSPM0G1X0X_G3X0X = 0;
[16:49:58.865]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:49:58.868]      __var isProduction = 0;
[16:49:58.868]        // -> [isProduction <= 0x00000000]
[16:49:58.868]      __var continueId = 0;
[16:49:58.868]        // -> [continueId <= 0x00000000]
[16:49:58.868]      deviceID =   Read32(0x41C40004);
[16:49:58.883]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:49:58.883]        // -> [deviceID <= 0x2BB8802F]
[16:49:58.883]      version = deviceID >> 28;
[16:49:58.883]        // -> [version <= 0x00000002]
[16:49:58.883]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:49:58.884]        // -> [partNum <= 0x0000BB88]
[16:49:58.884]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:49:58.884]        // -> [manuf <= 0x00000017]
[16:49:58.884]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:49:58.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:49:58.884]      isProduction = (version > 0);
[16:49:58.885]        // -> [isProduction <= 0x00000001]
[16:49:58.885]    </block>
[16:49:58.885]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:49:58.885]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:49:58.885]        // =>  FALSE
[16:49:58.885]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:49:58.885]    </control>
[16:49:58.885]    <control if="continueId == 4" while="" timeout="0" info="">
[16:49:58.885]      // if-block "continueId == 4"
[16:49:58.885]        // =>  FALSE
[16:49:58.885]      // skip if-block "continueId == 4"
[16:49:58.885]    </control>
[16:49:58.886]    <control if="!isProduction" while="" timeout="0" info="">
[16:49:58.886]      // if-block "!isProduction"
[16:49:58.886]        // =>  FALSE
[16:49:58.886]      // skip if-block "!isProduction"
[16:49:58.886]    </control>
[16:49:58.886]  </sequence>
[16:49:58.886]  
[16:50:49.488]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:50:49.488]  
[16:50:49.497]  <debugvars>
[16:50:49.497]    // Pre-defined
[16:50:49.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.497]    __dp=0x00000000
[16:50:49.497]    __ap=0x00000000
[16:50:49.497]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.497]    __FlashAddr=0x00000000
[16:50:49.497]    __FlashLen=0x00000000
[16:50:49.497]    __FlashArg=0x00000000
[16:50:49.497]    __FlashOp=0x00000000
[16:50:49.497]    __Result=0x00000000
[16:50:49.497]  </debugvars>
[16:50:49.497]  
[16:50:49.497]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:50:49.497]    <block atomic="false" info="">
[16:50:49.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:50:49.497]        // -> [isSWJ <= 0x00000001]
[16:50:49.497]      __var hasDormant = __protocol & 0x00020000;
[16:50:49.497]        // -> [hasDormant <= 0x00000000]
[16:50:49.497]      __var protType   = __protocol & 0x0000FFFF;
[16:50:49.497]        // -> [protType <= 0x00000002]
[16:50:49.497]    </block>
[16:50:49.497]    <control if="protType == 1" while="" timeout="0" info="">
[16:50:49.497]      // if-block "protType == 1"
[16:50:49.497]        // =>  FALSE
[16:50:49.497]      // skip if-block "protType == 1"
[16:50:49.497]    </control>
[16:50:49.500]    <control if="protType == 2" while="" timeout="0" info="">
[16:50:49.500]      // if-block "protType == 2"
[16:50:49.500]        // =>  TRUE
[16:50:49.500]      <control if="isSWJ" while="" timeout="0" info="">
[16:50:49.500]        // if-block "isSWJ"
[16:50:49.500]          // =>  TRUE
[16:50:49.500]        <control if="hasDormant" while="" timeout="0" info="">
[16:50:49.500]          // if-block "hasDormant"
[16:50:49.500]            // =>  FALSE
[16:50:49.500]          // skip if-block "hasDormant"
[16:50:49.500]        </control>
[16:50:49.500]        <control if="!hasDormant" while="" timeout="0" info="">
[16:50:49.500]          // if-block "!hasDormant"
[16:50:49.500]            // =>  TRUE
[16:50:49.500]          <block atomic="false" info="">
[16:50:49.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:50:49.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.500]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:50:49.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:50:49.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:50:49.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.522]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:50:49.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:50:49.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:50:49.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:50:49.531]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:50:49.534]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:50:49.534]          </block>
[16:50:49.534]          // end if-block "!hasDormant"
[16:50:49.534]        </control>
[16:50:49.534]        // end if-block "isSWJ"
[16:50:49.534]      </control>
[16:50:49.534]      <control if="!isSWJ" while="" timeout="0" info="">
[16:50:49.534]        // if-block "!isSWJ"
[16:50:49.534]          // =>  FALSE
[16:50:49.537]        // skip if-block "!isSWJ"
[16:50:49.537]      </control>
[16:50:49.537]      <block atomic="false" info="">
[16:50:49.537]        ReadDP(0x0);
[16:50:49.538]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:50:49.538]      </block>
[16:50:49.538]      // end if-block "protType == 2"
[16:50:49.541]    </control>
[16:50:49.541]  </sequence>
[16:50:49.541]  
[16:50:49.547]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:50:49.547]  
[16:50:49.547]  <debugvars>
[16:50:49.547]    // Pre-defined
[16:50:49.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.547]    __dp=0x00000000
[16:50:49.550]    __ap=0x00000000
[16:50:49.550]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.550]    __FlashAddr=0x00000000
[16:50:49.550]    __FlashLen=0x00000000
[16:50:49.550]    __FlashArg=0x00000000
[16:50:49.550]    __FlashOp=0x00000000
[16:50:49.550]    __Result=0x00000000
[16:50:49.550]  </debugvars>
[16:50:49.550]  
[16:50:49.550]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:50:49.550]    <block atomic="false" info="">
[16:50:49.550]      __var SW_DP_ABORT       = 0x0;
[16:50:49.550]        // -> [SW_DP_ABORT <= 0x00000000]
[16:50:49.550]      __var DP_CTRL_STAT      = 0x4;
[16:50:49.550]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:50:49.550]      __var DP_SELECT         = 0x8;
[16:50:49.550]        // -> [DP_SELECT <= 0x00000008]
[16:50:49.550]      __var powered_down      = 0;
[16:50:49.550]        // -> [powered_down <= 0x00000000]
[16:50:49.550]      WriteDP(DP_SELECT, 0x00000000);
[16:50:49.555]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:50:49.555]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:50:49.562]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:50:49.562]        // -> [powered_down <= 0x00000001]
[16:50:49.562]    </block>
[16:50:49.562]    <control if="powered_down" while="" timeout="0" info="">
[16:50:49.562]      // if-block "powered_down"
[16:50:49.562]        // =>  TRUE
[16:50:49.562]      <block atomic="false" info="">
[16:50:49.562]        Message(0, "Debug/System power-up request sent");
[16:50:49.562]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:50:49.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:50:49.573]      </block>
[16:50:49.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:50:49.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:50:49.576]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:50:49.576]        // while-condition  =>  FALSE
[16:50:49.576]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:50:49.576]      </control>
[16:50:49.576]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:50:49.579]        // if-block "(__protocol & 0xFFFF) == 1"
[16:50:49.579]          // =>  FALSE
[16:50:49.579]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:50:49.579]      </control>
[16:50:49.579]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:50:49.579]        // if-block "(__protocol & 0xFFFF) == 2"
[16:50:49.579]          // =>  TRUE
[16:50:49.579]        <block atomic="false" info="">
[16:50:49.579]          Message(0, "executing SWD power up");
[16:50:49.580]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:50:49.583]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:50:49.583]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:50:49.585]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:50:49.585]        </block>
[16:50:49.585]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:50:49.585]      </control>
[16:50:49.585]      // end if-block "powered_down"
[16:50:49.585]    </control>
[16:50:49.588]    <block atomic="false" info="">
[16:50:49.588]      __var DEBUG_PORT_VAL    = 0;
[16:50:49.588]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:50:49.588]      __var ACCESS_POINT_VAL  = 0;
[16:50:49.588]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:50:49.588]      __ap = 1; 
[16:50:49.588]        // -> [__ap <= 0x00000001]
[16:50:49.588]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:50:49.592]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:50:49.592]      __ap = 4;
[16:50:49.592]        // -> [__ap <= 0x00000004]
[16:50:49.592]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:49.602]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.612]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:50:49.612]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:49.612]    </block>
[16:50:49.612]    <block atomic="false" info="">
[16:50:49.614]      __var nReset = 0x80;
[16:50:49.614]        // -> [nReset <= 0x00000080]
[16:50:49.614]      __var canReadPins = 0;
[16:50:49.614]        // -> [canReadPins <= 0x00000000]
[16:50:49.614]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:50:49.616]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:50:49.616]        // -> [canReadPins <= 0x00000001]
[16:50:49.616]    </block>
[16:50:49.616]    <control if="" while="1" timeout="200" info="">
[16:50:49.616]      // while "1"  (timeout="200")
[16:50:49.616]      // while-condition  =>  TRUE
[16:50:49.616]      // while "1"  (timeout="200")
[16:50:49.616]      // while-condition  =>  TRUE
[16:50:49.616]      // while "1"  (timeout="200")
[16:50:49.616]      // while-condition  =>  TRUE
[16:50:49.616]      // while "1"  (timeout="200")
[16:50:49.616]      // while-condition  =>  TRUE
[16:50:49.616]      // while "1"  (timeout="200")
[16:50:49.616]      // while-condition  =>  TRUE
[16:50:49.619]      // while "1"  (timeout="200")
[16:50:49.619]      // while-condition  =>  TRUE
[16:50:49.619]      // while "1"  (timeout="200")
[16:50:49.619]      // while-condition  =>  TRUE
[16:50:49.619]      // while "1"  (timeout="200")
[16:50:49.619]      // while-condition  =>  TRUE
[16:50:49.619]      // while "1"  (timeout="200")
[16:50:49.619]      // while-condition  =>  TRUE
[16:50:49.619]      // while "1"  (timeout="200")
[16:50:49.620]      // while-condition  =>  TRUE
[16:50:49.620]      // while "1"  (timeout="200")
[16:50:49.620]      // while-condition  =>  TRUE
[16:50:49.620]      // while "1"  (timeout="200")
[16:50:49.620]      // while-condition  =>  TRUE
[16:50:49.620]      // while "1"  (timeout="200")
[16:50:49.620]      // while-condition  =>  TRUE
[16:50:49.620]      // while "1"  (timeout="200")
[16:50:49.620]      // while-condition  =>  TRUE
[16:50:49.620]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.621]      // while-condition  =>  TRUE
[16:50:49.621]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.622]      // while-condition  =>  TRUE
[16:50:49.622]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.624]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.624]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.624]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.624]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.624]      // while "1"  (timeout="200")
[16:50:49.624]      // while-condition  =>  TRUE
[16:50:49.626]      // while "1"  (timeout="200")
[16:50:49.626]      // while-condition  =>  TRUE
[16:50:49.626]      // while "1"  (timeout="200")
[16:50:49.626]      // while-condition  =>  TRUE
[16:50:49.626]      // while "1"  (timeout="200")
[16:50:49.626]      // while-condition  =>  TRUE
[16:50:49.626]      // while "1"  (timeout="200")
[16:50:49.626]      // while-condition  =>  TRUE
[16:50:49.626]      // while "1"  (timeout="200")
[16:50:49.626]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.627]      // while "1"  (timeout="200")
[16:50:49.627]      // while-condition  =>  TRUE
[16:50:49.629]      // while "1"  (timeout="200")
[16:50:49.629]      // while  =>  TIMEOUT
[16:50:49.629]      // end while "1"
[16:50:49.629]    </control>
[16:50:49.629]    <control if="canReadPins" while="" timeout="0" info="">
[16:50:49.629]      // if-block "canReadPins"
[16:50:49.629]        // =>  TRUE
[16:50:49.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:50:49.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:50:49.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:50:49.632]        // while-condition  =>  FALSE
[16:50:49.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:50:49.632]      </control>
[16:50:49.632]      // end if-block "canReadPins"
[16:50:49.632]    </control>
[16:50:49.632]    <control if="!canReadPins" while="" timeout="0" info="">
[16:50:49.632]      // if-block "!canReadPins"
[16:50:49.632]        // =>  FALSE
[16:50:49.632]      // skip if-block "!canReadPins"
[16:50:49.632]    </control>
[16:50:49.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:50:49.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:49.632]        // =>  TRUE
[16:50:49.632]      <block atomic="false" info="">
[16:50:49.632]        WriteAP(0x00, 0x190008);
[16:50:49.638]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.638]        WriteAP(0xF0, 0x01);
[16:50:49.646]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.646]      </block>
[16:50:49.646]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:50:49.646]    </control>
[16:50:49.646]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:50:49.646]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:49.646]        // =>  FALSE
[16:50:49.646]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:50:49.646]    </control>
[16:50:49.646]    <block atomic="false" info="">
[16:50:49.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:50:49.653]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:50:49.653]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:50:49.653]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:50:49.653]      __ap = 0; //lets make sure we reset the access point selection
[16:50:49.653]        // -> [__ap <= 0x00000000]
[16:50:49.653]    </block>
[16:50:49.653]  </sequence>
[16:50:49.653]  
[16:50:49.712]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:50:49.712]  
[16:50:49.712]  <debugvars>
[16:50:49.712]    // Pre-defined
[16:50:49.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:50:49.712]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:50:49.712]    __dp=0x00000000
[16:50:49.712]    __ap=0x00000000
[16:50:49.712]    __traceout=0x00000000      (Trace Disabled)
[16:50:49.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:50:49.712]    __FlashAddr=0x00000000
[16:50:49.712]    __FlashLen=0x00000000
[16:50:49.712]    __FlashArg=0x00000000
[16:50:49.712]    __FlashOp=0x00000000
[16:50:49.712]    __Result=0x00000000
[16:50:49.712]  </debugvars>
[16:50:49.714]  
[16:50:49.714]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:50:49.714]    <block atomic="false" info="">
[16:50:49.714]      __var deviceID = 0;
[16:50:49.714]        // -> [deviceID <= 0x00000000]
[16:50:49.714]      __var version = 0;
[16:50:49.714]        // -> [version <= 0x00000000]
[16:50:49.714]      __var partNum = 0;
[16:50:49.714]        // -> [partNum <= 0x00000000]
[16:50:49.714]      __var manuf = 0;
[16:50:49.714]        // -> [manuf <= 0x00000000]
[16:50:49.714]      __var isMSPM0G1X0X_G3X0X = 0;
[16:50:49.714]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:50:49.714]      __var isProduction = 0;
[16:50:49.714]        // -> [isProduction <= 0x00000000]
[16:50:49.714]      __var continueId = 0;
[16:50:49.716]        // -> [continueId <= 0x00000000]
[16:50:49.716]      deviceID =   Read32(0x41C40004);
[16:50:49.732]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:50:49.732]        // -> [deviceID <= 0x2BB8802F]
[16:50:49.732]      version = deviceID >> 28;
[16:50:49.734]        // -> [version <= 0x00000002]
[16:50:49.734]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:50:49.734]        // -> [partNum <= 0x0000BB88]
[16:50:49.734]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:50:49.734]        // -> [manuf <= 0x00000017]
[16:50:49.734]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:50:49.734]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:50:49.734]      isProduction = (version > 0);
[16:50:49.734]        // -> [isProduction <= 0x00000001]
[16:50:49.734]    </block>
[16:50:49.734]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:50:49.734]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:50:49.734]        // =>  FALSE
[16:50:49.734]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:50:49.734]    </control>
[16:50:49.734]    <control if="continueId == 4" while="" timeout="0" info="">
[16:50:49.734]      // if-block "continueId == 4"
[16:50:49.734]        // =>  FALSE
[16:50:49.734]      // skip if-block "continueId == 4"
[16:50:49.734]    </control>
[16:50:49.734]    <control if="!isProduction" while="" timeout="0" info="">
[16:50:49.734]      // if-block "!isProduction"
[16:50:49.734]        // =>  FALSE
[16:50:49.734]      // skip if-block "!isProduction"
[16:50:49.734]    </control>
[16:50:49.734]  </sequence>
[16:50:49.734]  
[16:51:58.491]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:51:58.491]  
[16:51:58.502]  <debugvars>
[16:51:58.502]    // Pre-defined
[16:51:58.502]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:58.502]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:58.502]    __dp=0x00000000
[16:51:58.502]    __ap=0x00000000
[16:51:58.502]    __traceout=0x00000000      (Trace Disabled)
[16:51:58.502]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:58.502]    __FlashAddr=0x00000000
[16:51:58.502]    __FlashLen=0x00000000
[16:51:58.502]    __FlashArg=0x00000000
[16:51:58.502]    __FlashOp=0x00000000
[16:51:58.502]    __Result=0x00000000
[16:51:58.502]  </debugvars>
[16:51:58.502]  
[16:51:58.502]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:51:58.502]    <block atomic="false" info="">
[16:51:58.502]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:51:58.502]        // -> [isSWJ <= 0x00000001]
[16:51:58.502]      __var hasDormant = __protocol & 0x00020000;
[16:51:58.502]        // -> [hasDormant <= 0x00000000]
[16:51:58.502]      __var protType   = __protocol & 0x0000FFFF;
[16:51:58.502]        // -> [protType <= 0x00000002]
[16:51:58.502]    </block>
[16:51:58.502]    <control if="protType == 1" while="" timeout="0" info="">
[16:51:58.502]      // if-block "protType == 1"
[16:51:58.502]        // =>  FALSE
[16:51:58.502]      // skip if-block "protType == 1"
[16:51:58.502]    </control>
[16:51:58.502]    <control if="protType == 2" while="" timeout="0" info="">
[16:51:58.502]      // if-block "protType == 2"
[16:51:58.502]        // =>  TRUE
[16:51:58.502]      <control if="isSWJ" while="" timeout="0" info="">
[16:51:58.502]        // if-block "isSWJ"
[16:51:58.502]          // =>  TRUE
[16:51:58.502]        <control if="hasDormant" while="" timeout="0" info="">
[16:51:58.502]          // if-block "hasDormant"
[16:51:58.502]            // =>  FALSE
[16:51:58.502]          // skip if-block "hasDormant"
[16:51:58.502]        </control>
[16:51:58.502]        <control if="!hasDormant" while="" timeout="0" info="">
[16:51:58.502]          // if-block "!hasDormant"
[16:51:58.502]            // =>  TRUE
[16:51:58.502]          <block atomic="false" info="">
[16:51:58.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:51:58.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:58.502]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:51:58.511]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:51:58.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:51:58.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:58.511]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:51:58.511]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:51:58.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:51:58.521]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:51:58.521]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:51:58.531]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:51:58.531]          </block>
[16:51:58.531]          // end if-block "!hasDormant"
[16:51:58.531]        </control>
[16:51:58.531]        // end if-block "isSWJ"
[16:51:58.531]      </control>
[16:51:58.531]      <control if="!isSWJ" while="" timeout="0" info="">
[16:51:58.531]        // if-block "!isSWJ"
[16:51:58.531]          // =>  FALSE
[16:51:58.531]        // skip if-block "!isSWJ"
[16:51:58.531]      </control>
[16:51:58.531]      <block atomic="false" info="">
[16:51:58.531]        ReadDP(0x0);
[16:51:58.541]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:51:58.541]      </block>
[16:51:58.541]      // end if-block "protType == 2"
[16:51:58.541]    </control>
[16:51:58.541]  </sequence>
[16:51:58.541]  
[16:51:58.551]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:51:58.551]  
[16:51:58.551]  <debugvars>
[16:51:58.551]    // Pre-defined
[16:51:58.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:58.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:58.551]    __dp=0x00000000
[16:51:58.551]    __ap=0x00000000
[16:51:58.551]    __traceout=0x00000000      (Trace Disabled)
[16:51:58.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:58.551]    __FlashAddr=0x00000000
[16:51:58.551]    __FlashLen=0x00000000
[16:51:58.551]    __FlashArg=0x00000000
[16:51:58.551]    __FlashOp=0x00000000
[16:51:58.551]    __Result=0x00000000
[16:51:58.551]  </debugvars>
[16:51:58.551]  
[16:51:58.551]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:51:58.551]    <block atomic="false" info="">
[16:51:58.551]      __var SW_DP_ABORT       = 0x0;
[16:51:58.551]        // -> [SW_DP_ABORT <= 0x00000000]
[16:51:58.551]      __var DP_CTRL_STAT      = 0x4;
[16:51:58.551]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:51:58.551]      __var DP_SELECT         = 0x8;
[16:51:58.551]        // -> [DP_SELECT <= 0x00000008]
[16:51:58.551]      __var powered_down      = 0;
[16:51:58.551]        // -> [powered_down <= 0x00000000]
[16:51:58.551]      WriteDP(DP_SELECT, 0x00000000);
[16:51:58.551]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:51:58.551]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:51:58.561]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:51:58.561]        // -> [powered_down <= 0x00000001]
[16:51:58.561]    </block>
[16:51:58.561]    <control if="powered_down" while="" timeout="0" info="">
[16:51:58.561]      // if-block "powered_down"
[16:51:58.561]        // =>  TRUE
[16:51:58.561]      <block atomic="false" info="">
[16:51:58.561]        Message(0, "Debug/System power-up request sent");
[16:51:58.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:51:58.571]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:51:58.571]      </block>
[16:51:58.571]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:51:58.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:51:58.571]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:51:58.571]        // while-condition  =>  FALSE
[16:51:58.571]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:51:58.571]      </control>
[16:51:58.571]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:51:58.571]        // if-block "(__protocol & 0xFFFF) == 1"
[16:51:58.571]          // =>  FALSE
[16:51:58.571]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:51:58.571]      </control>
[16:51:58.571]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:51:58.571]        // if-block "(__protocol & 0xFFFF) == 2"
[16:51:58.571]          // =>  TRUE
[16:51:58.571]        <block atomic="false" info="">
[16:51:58.571]          Message(0, "executing SWD power up");
[16:51:58.571]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:51:58.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:51:58.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:51:58.581]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:51:58.581]        </block>
[16:51:58.581]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:51:58.591]      </control>
[16:51:58.591]      // end if-block "powered_down"
[16:51:58.591]    </control>
[16:51:58.591]    <block atomic="false" info="">
[16:51:58.591]      __var DEBUG_PORT_VAL    = 0;
[16:51:58.591]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:51:58.591]      __var ACCESS_POINT_VAL  = 0;
[16:51:58.591]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:51:58.591]      __ap = 1; 
[16:51:58.591]        // -> [__ap <= 0x00000001]
[16:51:58.591]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:51:58.591]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:51:58.591]      __ap = 4;
[16:51:58.591]        // -> [__ap <= 0x00000004]
[16:51:58.591]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:51:58.611]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:51:58.611]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:51:58.611]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:51:58.611]    </block>
[16:51:58.611]    <block atomic="false" info="">
[16:51:58.611]      __var nReset = 0x80;
[16:51:58.611]        // -> [nReset <= 0x00000080]
[16:51:58.611]      __var canReadPins = 0;
[16:51:58.611]        // -> [canReadPins <= 0x00000000]
[16:51:58.611]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:51:58.621]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:51:58.621]        // -> [canReadPins <= 0x00000001]
[16:51:58.621]    </block>
[16:51:58.621]    <control if="" while="1" timeout="200" info="">
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.621]      // while "1"  (timeout="200")
[16:51:58.621]      // while-condition  =>  TRUE
[16:51:58.631]      // while "1"  (timeout="200")
[16:51:58.631]      // while  =>  TIMEOUT
[16:51:58.631]      // end while "1"
[16:51:58.631]    </control>
[16:51:58.631]    <control if="canReadPins" while="" timeout="0" info="">
[16:51:58.631]      // if-block "canReadPins"
[16:51:58.631]        // =>  TRUE
[16:51:58.631]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:51:58.631]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:51:58.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:51:58.631]        // while-condition  =>  FALSE
[16:51:58.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:51:58.631]      </control>
[16:51:58.631]      // end if-block "canReadPins"
[16:51:58.631]    </control>
[16:51:58.631]    <control if="!canReadPins" while="" timeout="0" info="">
[16:51:58.631]      // if-block "!canReadPins"
[16:51:58.631]        // =>  FALSE
[16:51:58.631]      // skip if-block "!canReadPins"
[16:51:58.631]    </control>
[16:51:58.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:51:58.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:51:58.631]        // =>  TRUE
[16:51:58.631]      <block atomic="false" info="">
[16:51:58.631]        WriteAP(0x00, 0x190008);
[16:51:58.641]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:51:58.641]        WriteAP(0xF0, 0x01);
[16:51:58.651]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:51:58.651]      </block>
[16:51:58.651]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:51:58.651]    </control>
[16:51:58.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:51:58.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:51:58.651]        // =>  FALSE
[16:51:58.651]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:51:58.651]    </control>
[16:51:58.651]    <block atomic="false" info="">
[16:51:58.651]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:51:58.661]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:51:58.661]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:51:58.661]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:51:58.661]      __ap = 0; //lets make sure we reset the access point selection
[16:51:58.661]        // -> [__ap <= 0x00000000]
[16:51:58.661]    </block>
[16:51:58.661]  </sequence>
[16:51:58.661]  
[16:51:58.721]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:51:58.721]  
[16:51:58.721]  <debugvars>
[16:51:58.721]    // Pre-defined
[16:51:58.721]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:51:58.721]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:51:58.721]    __dp=0x00000000
[16:51:58.721]    __ap=0x00000000
[16:51:58.721]    __traceout=0x00000000      (Trace Disabled)
[16:51:58.721]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:51:58.721]    __FlashAddr=0x00000000
[16:51:58.721]    __FlashLen=0x00000000
[16:51:58.721]    __FlashArg=0x00000000
[16:51:58.721]    __FlashOp=0x00000000
[16:51:58.721]    __Result=0x00000000
[16:51:58.721]  </debugvars>
[16:51:58.721]  
[16:51:58.721]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:51:58.721]    <block atomic="false" info="">
[16:51:58.721]      __var deviceID = 0;
[16:51:58.721]        // -> [deviceID <= 0x00000000]
[16:51:58.721]      __var version = 0;
[16:51:58.721]        // -> [version <= 0x00000000]
[16:51:58.721]      __var partNum = 0;
[16:51:58.721]        // -> [partNum <= 0x00000000]
[16:51:58.721]      __var manuf = 0;
[16:51:58.721]        // -> [manuf <= 0x00000000]
[16:51:58.721]      __var isMSPM0G1X0X_G3X0X = 0;
[16:51:58.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:51:58.721]      __var isProduction = 0;
[16:51:58.721]        // -> [isProduction <= 0x00000000]
[16:51:58.721]      __var continueId = 0;
[16:51:58.721]        // -> [continueId <= 0x00000000]
[16:51:58.721]      deviceID =   Read32(0x41C40004);
[16:51:58.731]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:51:58.731]        // -> [deviceID <= 0x2BB8802F]
[16:51:58.731]      version = deviceID >> 28;
[16:51:58.731]        // -> [version <= 0x00000002]
[16:51:58.731]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:51:58.731]        // -> [partNum <= 0x0000BB88]
[16:51:58.731]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:51:58.731]        // -> [manuf <= 0x00000017]
[16:51:58.731]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:51:58.731]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:51:58.731]      isProduction = (version > 0);
[16:51:58.731]        // -> [isProduction <= 0x00000001]
[16:51:58.731]    </block>
[16:51:58.731]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:51:58.731]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:51:58.731]        // =>  FALSE
[16:51:58.731]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:51:58.731]    </control>
[16:51:58.731]    <control if="continueId == 4" while="" timeout="0" info="">
[16:51:58.731]      // if-block "continueId == 4"
[16:51:58.731]        // =>  FALSE
[16:51:58.731]      // skip if-block "continueId == 4"
[16:51:58.731]    </control>
[16:51:58.731]    <control if="!isProduction" while="" timeout="0" info="">
[16:51:58.731]      // if-block "!isProduction"
[16:51:58.731]        // =>  FALSE
[16:51:58.731]      // skip if-block "!isProduction"
[16:51:58.731]    </control>
[16:51:58.741]  </sequence>
[16:51:58.741]  
[16:55:53.704]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:55:53.704]  
[16:55:53.722]  <debugvars>
[16:55:53.722]    // Pre-defined
[16:55:53.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:55:53.722]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:55:53.722]    __dp=0x00000000
[16:55:53.722]    __ap=0x00000000
[16:55:53.722]    __traceout=0x00000000      (Trace Disabled)
[16:55:53.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:55:53.722]    __FlashAddr=0x00000000
[16:55:53.722]    __FlashLen=0x00000000
[16:55:53.722]    __FlashArg=0x00000000
[16:55:53.722]    __FlashOp=0x00000000
[16:55:53.722]    __Result=0x00000000
[16:55:53.722]  </debugvars>
[16:55:53.722]  
[16:55:53.722]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:55:53.724]    <block atomic="false" info="">
[16:55:53.724]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:55:53.724]        // -> [isSWJ <= 0x00000001]
[16:55:53.724]      __var hasDormant = __protocol & 0x00020000;
[16:55:53.724]        // -> [hasDormant <= 0x00000000]
[16:55:53.724]      __var protType   = __protocol & 0x0000FFFF;
[16:55:53.724]        // -> [protType <= 0x00000002]
[16:55:53.724]    </block>
[16:55:53.724]    <control if="protType == 1" while="" timeout="0" info="">
[16:55:53.724]      // if-block "protType == 1"
[16:55:53.724]        // =>  FALSE
[16:55:53.724]      // skip if-block "protType == 1"
[16:55:53.724]    </control>
[16:55:53.724]    <control if="protType == 2" while="" timeout="0" info="">
[16:55:53.724]      // if-block "protType == 2"
[16:55:53.724]        // =>  TRUE
[16:55:53.724]      <control if="isSWJ" while="" timeout="0" info="">
[16:55:53.724]        // if-block "isSWJ"
[16:55:53.724]          // =>  TRUE
[16:55:53.724]        <control if="hasDormant" while="" timeout="0" info="">
[16:55:53.726]          // if-block "hasDormant"
[16:55:53.726]            // =>  FALSE
[16:55:53.726]          // skip if-block "hasDormant"
[16:55:53.726]        </control>
[16:55:53.726]        <control if="!hasDormant" while="" timeout="0" info="">
[16:55:53.726]          // if-block "!hasDormant"
[16:55:53.726]            // =>  TRUE
[16:55:53.726]          <block atomic="false" info="">
[16:55:53.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:55:53.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:55:53.728]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:55:53.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:55:53.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:55:53.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:55:53.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:55:53.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:55:53.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:55:53.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:55:53.752]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:55:53.754]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:55:53.754]          </block>
[16:55:53.754]          // end if-block "!hasDormant"
[16:55:53.754]        </control>
[16:55:53.754]        // end if-block "isSWJ"
[16:55:53.754]      </control>
[16:55:53.754]      <control if="!isSWJ" while="" timeout="0" info="">
[16:55:53.754]        // if-block "!isSWJ"
[16:55:53.754]          // =>  FALSE
[16:55:53.754]        // skip if-block "!isSWJ"
[16:55:53.754]      </control>
[16:55:53.754]      <block atomic="false" info="">
[16:55:53.754]        ReadDP(0x0);
[16:55:53.760]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:55:53.760]      </block>
[16:55:53.760]      // end if-block "protType == 2"
[16:55:53.762]    </control>
[16:55:53.762]  </sequence>
[16:55:53.762]  
[16:55:53.767]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:55:53.767]  
[16:55:53.768]  <debugvars>
[16:55:53.768]    // Pre-defined
[16:55:53.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:55:53.768]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:55:53.768]    __dp=0x00000000
[16:55:53.768]    __ap=0x00000000
[16:55:53.768]    __traceout=0x00000000      (Trace Disabled)
[16:55:53.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:55:53.768]    __FlashAddr=0x00000000
[16:55:53.768]    __FlashLen=0x00000000
[16:55:53.768]    __FlashArg=0x00000000
[16:55:53.769]    __FlashOp=0x00000000
[16:55:53.769]    __Result=0x00000000
[16:55:53.769]  </debugvars>
[16:55:53.769]  
[16:55:53.769]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:55:53.769]    <block atomic="false" info="">
[16:55:53.769]      __var SW_DP_ABORT       = 0x0;
[16:55:53.769]        // -> [SW_DP_ABORT <= 0x00000000]
[16:55:53.769]      __var DP_CTRL_STAT      = 0x4;
[16:55:53.769]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:55:53.769]      __var DP_SELECT         = 0x8;
[16:55:53.769]        // -> [DP_SELECT <= 0x00000008]
[16:55:53.769]      __var powered_down      = 0;
[16:55:53.769]        // -> [powered_down <= 0x00000000]
[16:55:53.769]      WriteDP(DP_SELECT, 0x00000000);
[16:55:53.775]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:55:53.775]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:55:53.777]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:55:53.778]        // -> [powered_down <= 0x00000001]
[16:55:53.778]    </block>
[16:55:53.778]    <control if="powered_down" while="" timeout="0" info="">
[16:55:53.778]      // if-block "powered_down"
[16:55:53.778]        // =>  TRUE
[16:55:53.778]      <block atomic="false" info="">
[16:55:53.778]        Message(0, "Debug/System power-up request sent");
[16:55:53.781]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:55:53.785]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:55:53.785]      </block>
[16:55:53.785]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:55:53.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:55:53.787]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:55:53.787]        // while-condition  =>  FALSE
[16:55:53.787]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:55:53.787]      </control>
[16:55:53.787]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:55:53.787]        // if-block "(__protocol & 0xFFFF) == 1"
[16:55:53.787]          // =>  FALSE
[16:55:53.787]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:55:53.787]      </control>
[16:55:53.787]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:55:53.787]        // if-block "(__protocol & 0xFFFF) == 2"
[16:55:53.787]          // =>  TRUE
[16:55:53.787]        <block atomic="false" info="">
[16:55:53.787]          Message(0, "executing SWD power up");
[16:55:53.787]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:55:53.796]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:55:53.796]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:55:53.796]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:55:53.796]        </block>
[16:55:53.796]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:55:53.796]      </control>
[16:55:53.796]      // end if-block "powered_down"
[16:55:53.796]    </control>
[16:55:53.796]    <block atomic="false" info="">
[16:55:53.796]      __var DEBUG_PORT_VAL    = 0;
[16:55:53.796]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:55:53.796]      __var ACCESS_POINT_VAL  = 0;
[16:55:53.796]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:55:53.796]      __ap = 1; 
[16:55:53.796]        // -> [__ap <= 0x00000001]
[16:55:53.796]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:55:53.808]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:55:53.808]      __ap = 4;
[16:55:53.808]        // -> [__ap <= 0x00000004]
[16:55:53.808]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:55:53.808]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:55:53.808]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:55:53.808]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:55:53.816]    </block>
[16:55:53.816]    <block atomic="false" info="">
[16:55:53.816]      __var nReset = 0x80;
[16:55:53.816]        // -> [nReset <= 0x00000080]
[16:55:53.816]      __var canReadPins = 0;
[16:55:53.816]        // -> [canReadPins <= 0x00000000]
[16:55:53.816]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:55:53.819]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:55:53.819]        // -> [canReadPins <= 0x00000001]
[16:55:53.819]    </block>
[16:55:53.819]    <control if="" while="1" timeout="200" info="">
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.819]      // while "1"  (timeout="200")
[16:55:53.819]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.826]      // while "1"  (timeout="200")
[16:55:53.826]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.829]      // while "1"  (timeout="200")
[16:55:53.829]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.831]      // while-condition  =>  TRUE
[16:55:53.831]      // while "1"  (timeout="200")
[16:55:53.832]      // while-condition  =>  TRUE
[16:55:53.832]      // while "1"  (timeout="200")
[16:55:53.832]      // while  =>  TIMEOUT
[16:55:53.832]      // end while "1"
[16:55:53.832]    </control>
[16:55:53.832]    <control if="canReadPins" while="" timeout="0" info="">
[16:55:53.832]      // if-block "canReadPins"
[16:55:53.832]        // =>  TRUE
[16:55:53.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:55:53.832]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:55:53.836]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:55:53.836]        // while-condition  =>  FALSE
[16:55:53.837]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:55:53.837]      </control>
[16:55:53.837]      // end if-block "canReadPins"
[16:55:53.837]    </control>
[16:55:53.837]    <control if="!canReadPins" while="" timeout="0" info="">
[16:55:53.837]      // if-block "!canReadPins"
[16:55:53.837]        // =>  FALSE
[16:55:53.837]      // skip if-block "!canReadPins"
[16:55:53.838]    </control>
[16:55:53.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:55:53.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:55:53.838]        // =>  TRUE
[16:55:53.838]      <block atomic="false" info="">
[16:55:53.838]        WriteAP(0x00, 0x190008);
[16:55:53.838]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:55:53.838]        WriteAP(0xF0, 0x01);
[16:55:53.847]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:55:53.847]      </block>
[16:55:53.847]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:55:53.847]    </control>
[16:55:53.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:55:53.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:55:53.847]        // =>  FALSE
[16:55:53.847]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:55:53.847]    </control>
[16:55:53.847]    <block atomic="false" info="">
[16:55:53.847]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:55:53.857]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:55:53.857]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:55:53.857]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:55:53.861]      __ap = 0; //lets make sure we reset the access point selection
[16:55:53.861]        // -> [__ap <= 0x00000000]
[16:55:53.861]    </block>
[16:55:53.861]  </sequence>
[16:55:53.861]  
[16:55:53.905]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:55:53.905]  
[16:55:53.905]  <debugvars>
[16:55:53.905]    // Pre-defined
[16:55:53.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:55:53.905]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:55:53.905]    __dp=0x00000000
[16:55:53.905]    __ap=0x00000000
[16:55:53.905]    __traceout=0x00000000      (Trace Disabled)
[16:55:53.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:55:53.905]    __FlashAddr=0x00000000
[16:55:53.905]    __FlashLen=0x00000000
[16:55:53.905]    __FlashArg=0x00000000
[16:55:53.905]    __FlashOp=0x00000000
[16:55:53.905]    __Result=0x00000000
[16:55:53.905]  </debugvars>
[16:55:53.905]  
[16:55:53.905]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:55:53.905]    <block atomic="false" info="">
[16:55:53.905]      __var deviceID = 0;
[16:55:53.905]        // -> [deviceID <= 0x00000000]
[16:55:53.905]      __var version = 0;
[16:55:53.905]        // -> [version <= 0x00000000]
[16:55:53.905]      __var partNum = 0;
[16:55:53.905]        // -> [partNum <= 0x00000000]
[16:55:53.905]      __var manuf = 0;
[16:55:53.905]        // -> [manuf <= 0x00000000]
[16:55:53.905]      __var isMSPM0G1X0X_G3X0X = 0;
[16:55:53.908]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:55:53.908]      __var isProduction = 0;
[16:55:53.908]        // -> [isProduction <= 0x00000000]
[16:55:53.908]      __var continueId = 0;
[16:55:53.908]        // -> [continueId <= 0x00000000]
[16:55:53.908]      deviceID =   Read32(0x41C40004);
[16:55:53.918]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:55:53.918]        // -> [deviceID <= 0x2BB8802F]
[16:55:53.918]      version = deviceID >> 28;
[16:55:53.918]        // -> [version <= 0x00000002]
[16:55:53.918]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:55:53.918]        // -> [partNum <= 0x0000BB88]
[16:55:53.918]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:55:53.919]        // -> [manuf <= 0x00000017]
[16:55:53.919]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:55:53.919]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:55:53.919]      isProduction = (version > 0);
[16:55:53.919]        // -> [isProduction <= 0x00000001]
[16:55:53.919]    </block>
[16:55:53.919]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:55:53.919]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:55:53.919]        // =>  FALSE
[16:55:53.919]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:55:53.919]    </control>
[16:55:53.919]    <control if="continueId == 4" while="" timeout="0" info="">
[16:55:53.919]      // if-block "continueId == 4"
[16:55:53.919]        // =>  FALSE
[16:55:53.919]      // skip if-block "continueId == 4"
[16:55:53.919]    </control>
[16:55:53.919]    <control if="!isProduction" while="" timeout="0" info="">
[16:55:53.919]      // if-block "!isProduction"
[16:55:53.919]        // =>  FALSE
[16:55:53.919]      // skip if-block "!isProduction"
[16:55:53.919]    </control>
[16:55:53.919]  </sequence>
[16:55:53.919]  
[16:58:06.421]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:58:06.421]  
[16:58:06.429]  <debugvars>
[16:58:06.429]    // Pre-defined
[16:58:06.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:06.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:06.430]    __dp=0x00000000
[16:58:06.430]    __ap=0x00000000
[16:58:06.430]    __traceout=0x00000000      (Trace Disabled)
[16:58:06.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:06.431]    __FlashAddr=0x00000000
[16:58:06.431]    __FlashLen=0x00000000
[16:58:06.431]    __FlashArg=0x00000000
[16:58:06.431]    __FlashOp=0x00000000
[16:58:06.431]    __Result=0x00000000
[16:58:06.431]  </debugvars>
[16:58:06.431]  
[16:58:06.431]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:58:06.431]    <block atomic="false" info="">
[16:58:06.431]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:58:06.432]        // -> [isSWJ <= 0x00000001]
[16:58:06.432]      __var hasDormant = __protocol & 0x00020000;
[16:58:06.432]        // -> [hasDormant <= 0x00000000]
[16:58:06.432]      __var protType   = __protocol & 0x0000FFFF;
[16:58:06.432]        // -> [protType <= 0x00000002]
[16:58:06.432]    </block>
[16:58:06.432]    <control if="protType == 1" while="" timeout="0" info="">
[16:58:06.432]      // if-block "protType == 1"
[16:58:06.433]        // =>  FALSE
[16:58:06.433]      // skip if-block "protType == 1"
[16:58:06.433]    </control>
[16:58:06.434]    <control if="protType == 2" while="" timeout="0" info="">
[16:58:06.434]      // if-block "protType == 2"
[16:58:06.434]        // =>  TRUE
[16:58:06.434]      <control if="isSWJ" while="" timeout="0" info="">
[16:58:06.434]        // if-block "isSWJ"
[16:58:06.434]          // =>  TRUE
[16:58:06.434]        <control if="hasDormant" while="" timeout="0" info="">
[16:58:06.434]          // if-block "hasDormant"
[16:58:06.435]            // =>  FALSE
[16:58:06.435]          // skip if-block "hasDormant"
[16:58:06.435]        </control>
[16:58:06.435]        <control if="!hasDormant" while="" timeout="0" info="">
[16:58:06.435]          // if-block "!hasDormant"
[16:58:06.435]            // =>  TRUE
[16:58:06.435]          <block atomic="false" info="">
[16:58:06.435]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:58:06.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:06.439]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:58:06.442]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:58:06.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:58:06.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:06.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:58:06.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:58:06.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:58:06.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:58:06.457]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:58:06.458]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:58:06.460]          </block>
[16:58:06.460]          // end if-block "!hasDormant"
[16:58:06.460]        </control>
[16:58:06.460]        // end if-block "isSWJ"
[16:58:06.460]      </control>
[16:58:06.460]      <control if="!isSWJ" while="" timeout="0" info="">
[16:58:06.460]        // if-block "!isSWJ"
[16:58:06.460]          // =>  FALSE
[16:58:06.460]        // skip if-block "!isSWJ"
[16:58:06.460]      </control>
[16:58:06.460]      <block atomic="false" info="">
[16:58:06.460]        ReadDP(0x0);
[16:58:06.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:58:06.467]      </block>
[16:58:06.467]      // end if-block "protType == 2"
[16:58:06.467]    </control>
[16:58:06.467]  </sequence>
[16:58:06.467]  
[16:58:06.470]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:58:06.470]  
[16:58:06.470]  <debugvars>
[16:58:06.470]    // Pre-defined
[16:58:06.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:06.470]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:06.470]    __dp=0x00000000
[16:58:06.470]    __ap=0x00000000
[16:58:06.470]    __traceout=0x00000000      (Trace Disabled)
[16:58:06.470]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:06.470]    __FlashAddr=0x00000000
[16:58:06.470]    __FlashLen=0x00000000
[16:58:06.470]    __FlashArg=0x00000000
[16:58:06.470]    __FlashOp=0x00000000
[16:58:06.470]    __Result=0x00000000
[16:58:06.470]  </debugvars>
[16:58:06.470]  
[16:58:06.477]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:58:06.477]    <block atomic="false" info="">
[16:58:06.477]      __var SW_DP_ABORT       = 0x0;
[16:58:06.477]        // -> [SW_DP_ABORT <= 0x00000000]
[16:58:06.477]      __var DP_CTRL_STAT      = 0x4;
[16:58:06.477]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:58:06.477]      __var DP_SELECT         = 0x8;
[16:58:06.477]        // -> [DP_SELECT <= 0x00000008]
[16:58:06.477]      __var powered_down      = 0;
[16:58:06.477]        // -> [powered_down <= 0x00000000]
[16:58:06.477]      WriteDP(DP_SELECT, 0x00000000);
[16:58:06.480]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:58:06.480]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:58:06.480]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:58:06.480]        // -> [powered_down <= 0x00000001]
[16:58:06.480]    </block>
[16:58:06.480]    <control if="powered_down" while="" timeout="0" info="">
[16:58:06.487]      // if-block "powered_down"
[16:58:06.487]        // =>  TRUE
[16:58:06.487]      <block atomic="false" info="">
[16:58:06.487]        Message(0, "Debug/System power-up request sent");
[16:58:06.487]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:58:06.492]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:58:06.492]      </block>
[16:58:06.492]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:58:06.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:58:06.497]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:58:06.497]        // while-condition  =>  FALSE
[16:58:06.497]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:58:06.497]      </control>
[16:58:06.497]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:58:06.497]        // if-block "(__protocol & 0xFFFF) == 1"
[16:58:06.497]          // =>  FALSE
[16:58:06.497]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:58:06.497]      </control>
[16:58:06.497]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:58:06.497]        // if-block "(__protocol & 0xFFFF) == 2"
[16:58:06.497]          // =>  TRUE
[16:58:06.497]        <block atomic="false" info="">
[16:58:06.497]          Message(0, "executing SWD power up");
[16:58:06.501]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:58:06.501]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:58:06.501]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:58:06.508]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:58:06.508]        </block>
[16:58:06.508]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:58:06.508]      </control>
[16:58:06.508]      // end if-block "powered_down"
[16:58:06.508]    </control>
[16:58:06.508]    <block atomic="false" info="">
[16:58:06.508]      __var DEBUG_PORT_VAL    = 0;
[16:58:06.508]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:58:06.508]      __var ACCESS_POINT_VAL  = 0;
[16:58:06.508]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:58:06.508]      __ap = 1; 
[16:58:06.508]        // -> [__ap <= 0x00000001]
[16:58:06.508]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:58:06.522]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:58:06.522]      __ap = 4;
[16:58:06.522]        // -> [__ap <= 0x00000004]
[16:58:06.522]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:58:06.531]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:58:06.531]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:58:06.531]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:58:06.531]    </block>
[16:58:06.531]    <block atomic="false" info="">
[16:58:06.531]      __var nReset = 0x80;
[16:58:06.531]        // -> [nReset <= 0x00000080]
[16:58:06.531]      __var canReadPins = 0;
[16:58:06.531]        // -> [canReadPins <= 0x00000000]
[16:58:06.531]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:58:06.538]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:58:06.538]        // -> [canReadPins <= 0x00000001]
[16:58:06.538]    </block>
[16:58:06.538]    <control if="" while="1" timeout="200" info="">
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.538]      // while "1"  (timeout="200")
[16:58:06.538]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.541]      // while "1"  (timeout="200")
[16:58:06.541]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.548]      // while "1"  (timeout="200")
[16:58:06.548]      // while-condition  =>  TRUE
[16:58:06.551]      // while "1"  (timeout="200")
[16:58:06.551]      // while  =>  TIMEOUT
[16:58:06.551]      // end while "1"
[16:58:06.551]    </control>
[16:58:06.551]    <control if="canReadPins" while="" timeout="0" info="">
[16:58:06.551]      // if-block "canReadPins"
[16:58:06.551]        // =>  TRUE
[16:58:06.551]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:58:06.551]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:58:06.558]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:58:06.558]        // while-condition  =>  FALSE
[16:58:06.558]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:58:06.558]      </control>
[16:58:06.558]      // end if-block "canReadPins"
[16:58:06.558]    </control>
[16:58:06.558]    <control if="!canReadPins" while="" timeout="0" info="">
[16:58:06.558]      // if-block "!canReadPins"
[16:58:06.558]        // =>  FALSE
[16:58:06.558]      // skip if-block "!canReadPins"
[16:58:06.558]    </control>
[16:58:06.558]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:58:06.561]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:58:06.561]        // =>  TRUE
[16:58:06.562]      <block atomic="false" info="">
[16:58:06.562]        WriteAP(0x00, 0x190008);
[16:58:06.564]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:58:06.564]        WriteAP(0xF0, 0x01);
[16:58:06.571]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:58:06.571]      </block>
[16:58:06.571]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:58:06.571]    </control>
[16:58:06.571]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:58:06.571]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:58:06.571]        // =>  FALSE
[16:58:06.571]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:58:06.571]    </control>
[16:58:06.571]    <block atomic="false" info="">
[16:58:06.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:58:06.581]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:58:06.581]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:58:06.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:58:06.591]      __ap = 0; //lets make sure we reset the access point selection
[16:58:06.591]        // -> [__ap <= 0x00000000]
[16:58:06.591]    </block>
[16:58:06.591]  </sequence>
[16:58:06.591]  
[16:58:06.648]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:58:06.648]  
[16:58:06.648]  <debugvars>
[16:58:06.648]    // Pre-defined
[16:58:06.648]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:58:06.648]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:58:06.648]    __dp=0x00000000
[16:58:06.648]    __ap=0x00000000
[16:58:06.648]    __traceout=0x00000000      (Trace Disabled)
[16:58:06.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:58:06.648]    __FlashAddr=0x00000000
[16:58:06.648]    __FlashLen=0x00000000
[16:58:06.648]    __FlashArg=0x00000000
[16:58:06.648]    __FlashOp=0x00000000
[16:58:06.648]    __Result=0x00000000
[16:58:06.648]  </debugvars>
[16:58:06.648]  
[16:58:06.648]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:58:06.648]    <block atomic="false" info="">
[16:58:06.648]      __var deviceID = 0;
[16:58:06.648]        // -> [deviceID <= 0x00000000]
[16:58:06.648]      __var version = 0;
[16:58:06.648]        // -> [version <= 0x00000000]
[16:58:06.648]      __var partNum = 0;
[16:58:06.648]        // -> [partNum <= 0x00000000]
[16:58:06.648]      __var manuf = 0;
[16:58:06.648]        // -> [manuf <= 0x00000000]
[16:58:06.648]      __var isMSPM0G1X0X_G3X0X = 0;
[16:58:06.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:58:06.648]      __var isProduction = 0;
[16:58:06.648]        // -> [isProduction <= 0x00000000]
[16:58:06.648]      __var continueId = 0;
[16:58:06.648]        // -> [continueId <= 0x00000000]
[16:58:06.648]      deviceID =   Read32(0x41C40004);
[16:58:06.668]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:58:06.668]        // -> [deviceID <= 0x2BB8802F]
[16:58:06.668]      version = deviceID >> 28;
[16:58:06.668]        // -> [version <= 0x00000002]
[16:58:06.668]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:58:06.668]        // -> [partNum <= 0x0000BB88]
[16:58:06.668]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:58:06.668]        // -> [manuf <= 0x00000017]
[16:58:06.668]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:58:06.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:58:06.668]      isProduction = (version > 0);
[16:58:06.668]        // -> [isProduction <= 0x00000001]
[16:58:06.668]    </block>
[16:58:06.668]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:58:06.668]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:58:06.668]        // =>  FALSE
[16:58:06.668]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:58:06.668]    </control>
[16:58:06.668]    <control if="continueId == 4" while="" timeout="0" info="">
[16:58:06.668]      // if-block "continueId == 4"
[16:58:06.668]        // =>  FALSE
[16:58:06.668]      // skip if-block "continueId == 4"
[16:58:06.668]    </control>
[16:58:06.668]    <control if="!isProduction" while="" timeout="0" info="">
[16:58:06.668]      // if-block "!isProduction"
[16:58:06.668]        // =>  FALSE
[16:58:06.668]      // skip if-block "!isProduction"
[16:58:06.668]    </control>
[16:58:06.668]  </sequence>
[16:58:06.668]  
[16:59:25.267]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:59:25.267]  
[16:59:25.268]  <debugvars>
[16:59:25.268]    // Pre-defined
[16:59:25.268]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:25.268]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:59:25.268]    __dp=0x00000000
[16:59:25.268]    __ap=0x00000000
[16:59:25.268]    __traceout=0x00000000      (Trace Disabled)
[16:59:25.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:25.269]    __FlashAddr=0x00000000
[16:59:25.269]    __FlashLen=0x00000000
[16:59:25.269]    __FlashArg=0x00000000
[16:59:25.269]    __FlashOp=0x00000000
[16:59:25.269]    __Result=0x00000000
[16:59:25.269]  </debugvars>
[16:59:25.269]  
[16:59:25.269]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:59:25.269]    <block atomic="false" info="">
[16:59:25.269]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:59:25.269]        // -> [isSWJ <= 0x00000001]
[16:59:25.270]      __var hasDormant = __protocol & 0x00020000;
[16:59:25.270]        // -> [hasDormant <= 0x00000000]
[16:59:25.270]      __var protType   = __protocol & 0x0000FFFF;
[16:59:25.270]        // -> [protType <= 0x00000002]
[16:59:25.270]    </block>
[16:59:25.270]    <control if="protType == 1" while="" timeout="0" info="">
[16:59:25.270]      // if-block "protType == 1"
[16:59:25.270]        // =>  FALSE
[16:59:25.270]      // skip if-block "protType == 1"
[16:59:25.270]    </control>
[16:59:25.270]    <control if="protType == 2" while="" timeout="0" info="">
[16:59:25.270]      // if-block "protType == 2"
[16:59:25.270]        // =>  TRUE
[16:59:25.270]      <control if="isSWJ" while="" timeout="0" info="">
[16:59:25.270]        // if-block "isSWJ"
[16:59:25.270]          // =>  TRUE
[16:59:25.270]        <control if="hasDormant" while="" timeout="0" info="">
[16:59:25.270]          // if-block "hasDormant"
[16:59:25.270]            // =>  FALSE
[16:59:25.270]          // skip if-block "hasDormant"
[16:59:25.270]        </control>
[16:59:25.270]        <control if="!hasDormant" while="" timeout="0" info="">
[16:59:25.270]          // if-block "!hasDormant"
[16:59:25.270]            // =>  TRUE
[16:59:25.270]          <block atomic="false" info="">
[16:59:25.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:59:25.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:25.277]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:59:25.280]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:59:25.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:59:25.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:25.283]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:59:25.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:59:25.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:59:25.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:25.291]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:59:25.291]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:59:25.291]          </block>
[16:59:25.291]          // end if-block "!hasDormant"
[16:59:25.291]        </control>
[16:59:25.297]        // end if-block "isSWJ"
[16:59:25.297]      </control>
[16:59:25.297]      <control if="!isSWJ" while="" timeout="0" info="">
[16:59:25.297]        // if-block "!isSWJ"
[16:59:25.297]          // =>  FALSE
[16:59:25.297]        // skip if-block "!isSWJ"
[16:59:25.297]      </control>
[16:59:25.297]      <block atomic="false" info="">
[16:59:25.297]        ReadDP(0x0);
[16:59:25.301]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:59:25.301]      </block>
[16:59:25.301]      // end if-block "protType == 2"
[16:59:25.301]    </control>
[16:59:25.301]  </sequence>
[16:59:25.301]  
[16:59:25.308]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:59:25.308]  
[16:59:25.308]  <debugvars>
[16:59:25.309]    // Pre-defined
[16:59:25.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:25.309]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:59:25.309]    __dp=0x00000000
[16:59:25.309]    __ap=0x00000000
[16:59:25.309]    __traceout=0x00000000      (Trace Disabled)
[16:59:25.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:25.309]    __FlashAddr=0x00000000
[16:59:25.309]    __FlashLen=0x00000000
[16:59:25.309]    __FlashArg=0x00000000
[16:59:25.309]    __FlashOp=0x00000000
[16:59:25.309]    __Result=0x00000000
[16:59:25.309]  </debugvars>
[16:59:25.309]  
[16:59:25.309]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:59:25.309]    <block atomic="false" info="">
[16:59:25.309]      __var SW_DP_ABORT       = 0x0;
[16:59:25.309]        // -> [SW_DP_ABORT <= 0x00000000]
[16:59:25.309]      __var DP_CTRL_STAT      = 0x4;
[16:59:25.309]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:59:25.309]      __var DP_SELECT         = 0x8;
[16:59:25.309]        // -> [DP_SELECT <= 0x00000008]
[16:59:25.309]      __var powered_down      = 0;
[16:59:25.309]        // -> [powered_down <= 0x00000000]
[16:59:25.309]      WriteDP(DP_SELECT, 0x00000000);
[16:59:25.315]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:59:25.316]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:59:25.319]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:59:25.319]        // -> [powered_down <= 0x00000001]
[16:59:25.319]    </block>
[16:59:25.319]    <control if="powered_down" while="" timeout="0" info="">
[16:59:25.319]      // if-block "powered_down"
[16:59:25.319]        // =>  TRUE
[16:59:25.319]      <block atomic="false" info="">
[16:59:25.319]        Message(0, "Debug/System power-up request sent");
[16:59:25.319]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:59:25.337]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:59:25.337]      </block>
[16:59:25.337]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:59:25.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:59:25.340]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:59:25.340]        // while-condition  =>  FALSE
[16:59:25.340]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:59:25.341]      </control>
[16:59:25.341]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:59:25.341]        // if-block "(__protocol & 0xFFFF) == 1"
[16:59:25.341]          // =>  FALSE
[16:59:25.341]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:59:25.342]      </control>
[16:59:25.342]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:59:25.342]        // if-block "(__protocol & 0xFFFF) == 2"
[16:59:25.342]          // =>  TRUE
[16:59:25.342]        <block atomic="false" info="">
[16:59:25.342]          Message(0, "executing SWD power up");
[16:59:25.345]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:59:25.347]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:59:25.347]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:59:25.351]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:59:25.351]        </block>
[16:59:25.351]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:59:25.351]      </control>
[16:59:25.351]      // end if-block "powered_down"
[16:59:25.351]    </control>
[16:59:25.351]    <block atomic="false" info="">
[16:59:25.352]      __var DEBUG_PORT_VAL    = 0;
[16:59:25.352]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:59:25.352]      __var ACCESS_POINT_VAL  = 0;
[16:59:25.352]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:59:25.352]      __ap = 1; 
[16:59:25.352]        // -> [__ap <= 0x00000001]
[16:59:25.352]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:59:25.363]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:59:25.364]      __ap = 4;
[16:59:25.364]        // -> [__ap <= 0x00000004]
[16:59:25.364]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:59:25.372]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:59:25.372]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:59:25.372]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:59:25.374]    </block>
[16:59:25.374]    <block atomic="false" info="">
[16:59:25.374]      __var nReset = 0x80;
[16:59:25.374]        // -> [nReset <= 0x00000080]
[16:59:25.374]      __var canReadPins = 0;
[16:59:25.374]        // -> [canReadPins <= 0x00000000]
[16:59:25.374]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:59:25.376]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:59:25.376]        // -> [canReadPins <= 0x00000001]
[16:59:25.378]    </block>
[16:59:25.378]    <control if="" while="1" timeout="200" info="">
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.378]      // while-condition  =>  TRUE
[16:59:25.378]      // while "1"  (timeout="200")
[16:59:25.388]      // while-condition  =>  TRUE
[16:59:25.388]      // while "1"  (timeout="200")
[16:59:25.388]      // while  =>  TIMEOUT
[16:59:25.388]      // end while "1"
[16:59:25.388]    </control>
[16:59:25.388]    <control if="canReadPins" while="" timeout="0" info="">
[16:59:25.388]      // if-block "canReadPins"
[16:59:25.388]        // =>  TRUE
[16:59:25.388]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:59:25.388]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:59:25.392]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:59:25.392]        // while-condition  =>  FALSE
[16:59:25.392]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:59:25.392]      </control>
[16:59:25.392]      // end if-block "canReadPins"
[16:59:25.392]    </control>
[16:59:25.392]    <control if="!canReadPins" while="" timeout="0" info="">
[16:59:25.392]      // if-block "!canReadPins"
[16:59:25.392]        // =>  FALSE
[16:59:25.392]      // skip if-block "!canReadPins"
[16:59:25.392]    </control>
[16:59:25.392]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:59:25.392]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:59:25.392]        // =>  TRUE
[16:59:25.392]      <block atomic="false" info="">
[16:59:25.392]        WriteAP(0x00, 0x190008);
[16:59:25.395]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:59:25.395]        WriteAP(0xF0, 0x01);
[16:59:25.400]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:59:25.400]      </block>
[16:59:25.400]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:59:25.400]    </control>
[16:59:25.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:59:25.400]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:59:25.400]        // =>  FALSE
[16:59:25.400]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:59:25.400]    </control>
[16:59:25.400]    <block atomic="false" info="">
[16:59:25.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:59:25.408]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:59:25.408]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:59:25.408]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:59:25.419]      __ap = 0; //lets make sure we reset the access point selection
[16:59:25.419]        // -> [__ap <= 0x00000000]
[16:59:25.419]    </block>
[16:59:25.419]  </sequence>
[16:59:25.419]  
[16:59:25.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:59:25.490]  
[16:59:25.490]  <debugvars>
[16:59:25.490]    // Pre-defined
[16:59:25.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:25.490]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:59:25.490]    __dp=0x00000000
[16:59:25.490]    __ap=0x00000000
[16:59:25.490]    __traceout=0x00000000      (Trace Disabled)
[16:59:25.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:25.490]    __FlashAddr=0x00000000
[16:59:25.490]    __FlashLen=0x00000000
[16:59:25.490]    __FlashArg=0x00000000
[16:59:25.490]    __FlashOp=0x00000000
[16:59:25.491]    __Result=0x00000000
[16:59:25.491]  </debugvars>
[16:59:25.491]  
[16:59:25.491]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:59:25.491]    <block atomic="false" info="">
[16:59:25.491]      __var deviceID = 0;
[16:59:25.491]        // -> [deviceID <= 0x00000000]
[16:59:25.491]      __var version = 0;
[16:59:25.491]        // -> [version <= 0x00000000]
[16:59:25.491]      __var partNum = 0;
[16:59:25.491]        // -> [partNum <= 0x00000000]
[16:59:25.491]      __var manuf = 0;
[16:59:25.491]        // -> [manuf <= 0x00000000]
[16:59:25.491]      __var isMSPM0G1X0X_G3X0X = 0;
[16:59:25.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:59:25.491]      __var isProduction = 0;
[16:59:25.491]        // -> [isProduction <= 0x00000000]
[16:59:25.491]      __var continueId = 0;
[16:59:25.491]        // -> [continueId <= 0x00000000]
[16:59:25.491]      deviceID =   Read32(0x41C40004);
[16:59:25.502]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:59:25.502]        // -> [deviceID <= 0x2BB8802F]
[16:59:25.502]      version = deviceID >> 28;
[16:59:25.502]        // -> [version <= 0x00000002]
[16:59:25.502]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:59:25.502]        // -> [partNum <= 0x0000BB88]
[16:59:25.502]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:59:25.502]        // -> [manuf <= 0x00000017]
[16:59:25.502]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:59:25.502]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:59:25.502]      isProduction = (version > 0);
[16:59:25.502]        // -> [isProduction <= 0x00000001]
[16:59:25.502]    </block>
[16:59:25.502]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:59:25.502]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:59:25.502]        // =>  FALSE
[16:59:25.502]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:59:25.502]    </control>
[16:59:25.506]    <control if="continueId == 4" while="" timeout="0" info="">
[16:59:25.506]      // if-block "continueId == 4"
[16:59:25.506]        // =>  FALSE
[16:59:25.506]      // skip if-block "continueId == 4"
[16:59:25.506]    </control>
[16:59:25.506]    <control if="!isProduction" while="" timeout="0" info="">
[16:59:25.506]      // if-block "!isProduction"
[16:59:25.506]        // =>  FALSE
[16:59:25.506]      // skip if-block "!isProduction"
[16:59:25.506]    </control>
[16:59:25.506]  </sequence>
[16:59:25.506]  
[17:01:42.635]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:01:42.635]  
[17:01:42.635]  <debugvars>
[17:01:42.635]    // Pre-defined
[17:01:42.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:42.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:01:42.635]    __dp=0x00000000
[17:01:42.635]    __ap=0x00000000
[17:01:42.635]    __traceout=0x00000000      (Trace Disabled)
[17:01:42.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:42.635]    __FlashAddr=0x00000000
[17:01:42.635]    __FlashLen=0x00000000
[17:01:42.635]    __FlashArg=0x00000000
[17:01:42.635]    __FlashOp=0x00000000
[17:01:42.635]    __Result=0x00000000
[17:01:42.635]  </debugvars>
[17:01:42.635]  
[17:01:42.635]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:01:42.635]    <block atomic="false" info="">
[17:01:42.637]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:01:42.637]        // -> [isSWJ <= 0x00000001]
[17:01:42.637]      __var hasDormant = __protocol & 0x00020000;
[17:01:42.637]        // -> [hasDormant <= 0x00000000]
[17:01:42.637]      __var protType   = __protocol & 0x0000FFFF;
[17:01:42.637]        // -> [protType <= 0x00000002]
[17:01:42.637]    </block>
[17:01:42.637]    <control if="protType == 1" while="" timeout="0" info="">
[17:01:42.637]      // if-block "protType == 1"
[17:01:42.637]        // =>  FALSE
[17:01:42.637]      // skip if-block "protType == 1"
[17:01:42.637]    </control>
[17:01:42.637]    <control if="protType == 2" while="" timeout="0" info="">
[17:01:42.637]      // if-block "protType == 2"
[17:01:42.639]        // =>  TRUE
[17:01:42.639]      <control if="isSWJ" while="" timeout="0" info="">
[17:01:42.639]        // if-block "isSWJ"
[17:01:42.639]          // =>  TRUE
[17:01:42.639]        <control if="hasDormant" while="" timeout="0" info="">
[17:01:42.639]          // if-block "hasDormant"
[17:01:42.639]            // =>  FALSE
[17:01:42.639]          // skip if-block "hasDormant"
[17:01:42.639]        </control>
[17:01:42.639]        <control if="!hasDormant" while="" timeout="0" info="">
[17:01:42.639]          // if-block "!hasDormant"
[17:01:42.639]            // =>  TRUE
[17:01:42.639]          <block atomic="false" info="">
[17:01:42.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:01:42.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:42.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:01:42.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:01:42.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:01:42.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:42.644]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:01:42.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:01:42.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:01:42.656]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:42.656]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:01:42.656]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:01:42.656]          </block>
[17:01:42.656]          // end if-block "!hasDormant"
[17:01:42.656]        </control>
[17:01:42.656]        // end if-block "isSWJ"
[17:01:42.656]      </control>
[17:01:42.656]      <control if="!isSWJ" while="" timeout="0" info="">
[17:01:42.656]        // if-block "!isSWJ"
[17:01:42.656]          // =>  FALSE
[17:01:42.656]        // skip if-block "!isSWJ"
[17:01:42.656]      </control>
[17:01:42.656]      <block atomic="false" info="">
[17:01:42.656]        ReadDP(0x0);
[17:01:42.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:01:42.663]      </block>
[17:01:42.663]      // end if-block "protType == 2"
[17:01:42.663]    </control>
[17:01:42.663]  </sequence>
[17:01:42.663]  
[17:01:42.666]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:01:42.666]  
[17:01:42.666]  <debugvars>
[17:01:42.666]    // Pre-defined
[17:01:42.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:42.666]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:01:42.666]    __dp=0x00000000
[17:01:42.666]    __ap=0x00000000
[17:01:42.666]    __traceout=0x00000000      (Trace Disabled)
[17:01:42.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:42.666]    __FlashAddr=0x00000000
[17:01:42.666]    __FlashLen=0x00000000
[17:01:42.666]    __FlashArg=0x00000000
[17:01:42.666]    __FlashOp=0x00000000
[17:01:42.666]    __Result=0x00000000
[17:01:42.666]  </debugvars>
[17:01:42.673]  
[17:01:42.673]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:01:42.673]    <block atomic="false" info="">
[17:01:42.673]      __var SW_DP_ABORT       = 0x0;
[17:01:42.673]        // -> [SW_DP_ABORT <= 0x00000000]
[17:01:42.673]      __var DP_CTRL_STAT      = 0x4;
[17:01:42.673]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:01:42.674]      __var DP_SELECT         = 0x8;
[17:01:42.674]        // -> [DP_SELECT <= 0x00000008]
[17:01:42.674]      __var powered_down      = 0;
[17:01:42.674]        // -> [powered_down <= 0x00000000]
[17:01:42.674]      WriteDP(DP_SELECT, 0x00000000);
[17:01:42.678]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:01:42.678]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:01:42.685]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:01:42.685]        // -> [powered_down <= 0x00000001]
[17:01:42.685]    </block>
[17:01:42.685]    <control if="powered_down" while="" timeout="0" info="">
[17:01:42.685]      // if-block "powered_down"
[17:01:42.685]        // =>  TRUE
[17:01:42.685]      <block atomic="false" info="">
[17:01:42.685]        Message(0, "Debug/System power-up request sent");
[17:01:42.687]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:01:42.687]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:01:42.687]      </block>
[17:01:42.687]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:01:42.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:01:42.694]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:01:42.694]        // while-condition  =>  FALSE
[17:01:42.694]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:01:42.694]      </control>
[17:01:42.694]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:01:42.694]        // if-block "(__protocol & 0xFFFF) == 1"
[17:01:42.694]          // =>  FALSE
[17:01:42.694]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:01:42.694]      </control>
[17:01:42.694]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:01:42.694]        // if-block "(__protocol & 0xFFFF) == 2"
[17:01:42.694]          // =>  TRUE
[17:01:42.696]        <block atomic="false" info="">
[17:01:42.696]          Message(0, "executing SWD power up");
[17:01:42.696]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:01:42.696]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:01:42.696]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:01:42.704]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:01:42.704]        </block>
[17:01:42.704]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:01:42.704]      </control>
[17:01:42.704]      // end if-block "powered_down"
[17:01:42.704]    </control>
[17:01:42.704]    <block atomic="false" info="">
[17:01:42.704]      __var DEBUG_PORT_VAL    = 0;
[17:01:42.704]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:01:42.704]      __var ACCESS_POINT_VAL  = 0;
[17:01:42.704]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:01:42.704]      __ap = 1; 
[17:01:42.704]        // -> [__ap <= 0x00000001]
[17:01:42.704]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:01:42.714]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:01:42.714]      __ap = 4;
[17:01:42.714]        // -> [__ap <= 0x00000004]
[17:01:42.714]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:42.725]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:01:42.725]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:01:42.725]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:42.728]    </block>
[17:01:42.728]    <block atomic="false" info="">
[17:01:42.729]      __var nReset = 0x80;
[17:01:42.729]        // -> [nReset <= 0x00000080]
[17:01:42.729]      __var canReadPins = 0;
[17:01:42.729]        // -> [canReadPins <= 0x00000000]
[17:01:42.729]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:01:42.735]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:01:42.735]        // -> [canReadPins <= 0x00000001]
[17:01:42.735]    </block>
[17:01:42.735]    <control if="" while="1" timeout="200" info="">
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.736]      // while-condition  =>  TRUE
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.736]      // while-condition  =>  TRUE
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.736]      // while-condition  =>  TRUE
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.736]      // while-condition  =>  TRUE
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.736]      // while-condition  =>  TRUE
[17:01:42.736]      // while "1"  (timeout="200")
[17:01:42.737]      // while-condition  =>  TRUE
[17:01:42.737]      // while "1"  (timeout="200")
[17:01:42.737]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.738]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.738]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.738]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.738]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.738]      // while-condition  =>  TRUE
[17:01:42.738]      // while "1"  (timeout="200")
[17:01:42.739]      // while-condition  =>  TRUE
[17:01:42.739]      // while "1"  (timeout="200")
[17:01:42.739]      // while  =>  TIMEOUT
[17:01:42.739]      // end while "1"
[17:01:42.739]    </control>
[17:01:42.739]    <control if="canReadPins" while="" timeout="0" info="">
[17:01:42.739]      // if-block "canReadPins"
[17:01:42.739]        // =>  TRUE
[17:01:42.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:01:42.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:01:42.747]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:01:42.747]        // while-condition  =>  FALSE
[17:01:42.747]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:01:42.747]      </control>
[17:01:42.747]      // end if-block "canReadPins"
[17:01:42.747]    </control>
[17:01:42.747]    <control if="!canReadPins" while="" timeout="0" info="">
[17:01:42.747]      // if-block "!canReadPins"
[17:01:42.747]        // =>  FALSE
[17:01:42.747]      // skip if-block "!canReadPins"
[17:01:42.747]    </control>
[17:01:42.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:01:42.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:42.747]        // =>  TRUE
[17:01:42.747]      <block atomic="false" info="">
[17:01:42.747]        WriteAP(0x00, 0x190008);
[17:01:42.755]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:42.755]        WriteAP(0xF0, 0x01);
[17:01:42.755]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:42.755]      </block>
[17:01:42.755]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:42.755]    </control>
[17:01:42.755]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:01:42.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:42.755]        // =>  FALSE
[17:01:42.755]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:42.755]    </control>
[17:01:42.755]    <block atomic="false" info="">
[17:01:42.755]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:42.766]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:01:42.766]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:01:42.766]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:42.776]      __ap = 0; //lets make sure we reset the access point selection
[17:01:42.776]        // -> [__ap <= 0x00000000]
[17:01:42.776]    </block>
[17:01:42.776]  </sequence>
[17:01:42.776]  
[17:01:42.838]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:01:42.838]  
[17:01:42.838]  <debugvars>
[17:01:42.838]    // Pre-defined
[17:01:42.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:42.838]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:01:42.838]    __dp=0x00000000
[17:01:42.838]    __ap=0x00000000
[17:01:42.838]    __traceout=0x00000000      (Trace Disabled)
[17:01:42.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:42.838]    __FlashAddr=0x00000000
[17:01:42.838]    __FlashLen=0x00000000
[17:01:42.838]    __FlashArg=0x00000000
[17:01:42.838]    __FlashOp=0x00000000
[17:01:42.840]    __Result=0x00000000
[17:01:42.840]  </debugvars>
[17:01:42.840]  
[17:01:42.840]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:01:42.840]    <block atomic="false" info="">
[17:01:42.840]      __var deviceID = 0;
[17:01:42.840]        // -> [deviceID <= 0x00000000]
[17:01:42.840]      __var version = 0;
[17:01:42.840]        // -> [version <= 0x00000000]
[17:01:42.840]      __var partNum = 0;
[17:01:42.841]        // -> [partNum <= 0x00000000]
[17:01:42.841]      __var manuf = 0;
[17:01:42.841]        // -> [manuf <= 0x00000000]
[17:01:42.841]      __var isMSPM0G1X0X_G3X0X = 0;
[17:01:42.841]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:01:42.841]      __var isProduction = 0;
[17:01:42.841]        // -> [isProduction <= 0x00000000]
[17:01:42.841]      __var continueId = 0;
[17:01:42.841]        // -> [continueId <= 0x00000000]
[17:01:42.841]      deviceID =   Read32(0x41C40004);
[17:01:42.855]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:01:42.855]        // -> [deviceID <= 0x2BB8802F]
[17:01:42.855]      version = deviceID >> 28;
[17:01:42.855]        // -> [version <= 0x00000002]
[17:01:42.855]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:01:42.855]        // -> [partNum <= 0x0000BB88]
[17:01:42.855]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:01:42.855]        // -> [manuf <= 0x00000017]
[17:01:42.855]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:01:42.855]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:01:42.855]      isProduction = (version > 0);
[17:01:42.855]        // -> [isProduction <= 0x00000001]
[17:01:42.857]    </block>
[17:01:42.857]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:01:42.857]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:01:42.857]        // =>  FALSE
[17:01:42.857]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:01:42.857]    </control>
[17:01:42.857]    <control if="continueId == 4" while="" timeout="0" info="">
[17:01:42.857]      // if-block "continueId == 4"
[17:01:42.857]        // =>  FALSE
[17:01:42.857]      // skip if-block "continueId == 4"
[17:01:42.857]    </control>
[17:01:42.857]    <control if="!isProduction" while="" timeout="0" info="">
[17:01:42.857]      // if-block "!isProduction"
[17:01:42.857]        // =>  FALSE
[17:01:42.857]      // skip if-block "!isProduction"
[17:01:42.857]    </control>
[17:01:42.857]  </sequence>
[17:01:42.857]  
[17:05:19.921]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:05:19.921]  
[17:05:19.929]  <debugvars>
[17:05:19.929]    // Pre-defined
[17:05:19.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:05:19.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:05:19.929]    __dp=0x00000000
[17:05:19.929]    __ap=0x00000000
[17:05:19.929]    __traceout=0x00000000      (Trace Disabled)
[17:05:19.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:05:19.929]    __FlashAddr=0x00000000
[17:05:19.929]    __FlashLen=0x00000000
[17:05:19.929]    __FlashArg=0x00000000
[17:05:19.929]    __FlashOp=0x00000000
[17:05:19.929]    __Result=0x00000000
[17:05:19.929]  </debugvars>
[17:05:19.929]  
[17:05:19.929]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:05:19.929]    <block atomic="false" info="">
[17:05:19.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:05:19.929]        // -> [isSWJ <= 0x00000001]
[17:05:19.929]      __var hasDormant = __protocol & 0x00020000;
[17:05:19.929]        // -> [hasDormant <= 0x00000000]
[17:05:19.929]      __var protType   = __protocol & 0x0000FFFF;
[17:05:19.929]        // -> [protType <= 0x00000002]
[17:05:19.929]    </block>
[17:05:19.929]    <control if="protType == 1" while="" timeout="0" info="">
[17:05:19.929]      // if-block "protType == 1"
[17:05:19.929]        // =>  FALSE
[17:05:19.929]      // skip if-block "protType == 1"
[17:05:19.929]    </control>
[17:05:19.929]    <control if="protType == 2" while="" timeout="0" info="">
[17:05:19.929]      // if-block "protType == 2"
[17:05:19.929]        // =>  TRUE
[17:05:19.929]      <control if="isSWJ" while="" timeout="0" info="">
[17:05:19.929]        // if-block "isSWJ"
[17:05:19.929]          // =>  TRUE
[17:05:19.929]        <control if="hasDormant" while="" timeout="0" info="">
[17:05:19.929]          // if-block "hasDormant"
[17:05:19.929]            // =>  FALSE
[17:05:19.929]          // skip if-block "hasDormant"
[17:05:19.929]        </control>
[17:05:19.929]        <control if="!hasDormant" while="" timeout="0" info="">
[17:05:19.929]          // if-block "!hasDormant"
[17:05:19.929]            // =>  TRUE
[17:05:19.929]          <block atomic="false" info="">
[17:05:19.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:05:19.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:05:19.936]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:05:19.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:05:19.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:05:19.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:05:19.948]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:05:19.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:05:19.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:05:19.953]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:05:19.953]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:05:19.957]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:05:19.957]          </block>
[17:05:19.957]          // end if-block "!hasDormant"
[17:05:19.957]        </control>
[17:05:19.957]        // end if-block "isSWJ"
[17:05:19.957]      </control>
[17:05:19.957]      <control if="!isSWJ" while="" timeout="0" info="">
[17:05:19.957]        // if-block "!isSWJ"
[17:05:19.957]          // =>  FALSE
[17:05:19.957]        // skip if-block "!isSWJ"
[17:05:19.957]      </control>
[17:05:19.957]      <block atomic="false" info="">
[17:05:19.957]        ReadDP(0x0);
[17:05:19.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:05:19.960]      </block>
[17:05:19.960]      // end if-block "protType == 2"
[17:05:19.960]    </control>
[17:05:19.960]  </sequence>
[17:05:19.960]  
[17:05:19.968]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:05:19.968]  
[17:05:19.968]  <debugvars>
[17:05:19.968]    // Pre-defined
[17:05:19.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:05:19.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:05:19.968]    __dp=0x00000000
[17:05:19.968]    __ap=0x00000000
[17:05:19.968]    __traceout=0x00000000      (Trace Disabled)
[17:05:19.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:05:19.968]    __FlashAddr=0x00000000
[17:05:19.968]    __FlashLen=0x00000000
[17:05:19.968]    __FlashArg=0x00000000
[17:05:19.968]    __FlashOp=0x00000000
[17:05:19.968]    __Result=0x00000000
[17:05:19.970]  </debugvars>
[17:05:19.970]  
[17:05:19.970]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:05:19.970]    <block atomic="false" info="">
[17:05:19.970]      __var SW_DP_ABORT       = 0x0;
[17:05:19.970]        // -> [SW_DP_ABORT <= 0x00000000]
[17:05:19.970]      __var DP_CTRL_STAT      = 0x4;
[17:05:19.970]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:05:19.970]      __var DP_SELECT         = 0x8;
[17:05:19.970]        // -> [DP_SELECT <= 0x00000008]
[17:05:19.970]      __var powered_down      = 0;
[17:05:19.970]        // -> [powered_down <= 0x00000000]
[17:05:19.970]      WriteDP(DP_SELECT, 0x00000000);
[17:05:19.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:05:19.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:05:19.979]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:05:19.979]        // -> [powered_down <= 0x00000001]
[17:05:19.979]    </block>
[17:05:19.979]    <control if="powered_down" while="" timeout="0" info="">
[17:05:19.979]      // if-block "powered_down"
[17:05:19.979]        // =>  TRUE
[17:05:19.979]      <block atomic="false" info="">
[17:05:19.979]        Message(0, "Debug/System power-up request sent");
[17:05:19.979]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:05:19.985]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:05:19.985]      </block>
[17:05:19.985]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:05:19.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:05:19.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:05:19.989]        // while-condition  =>  FALSE
[17:05:19.989]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:05:19.989]      </control>
[17:05:19.989]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:05:19.989]        // if-block "(__protocol & 0xFFFF) == 1"
[17:05:19.989]          // =>  FALSE
[17:05:19.989]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:05:19.989]      </control>
[17:05:19.989]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:05:19.989]        // if-block "(__protocol & 0xFFFF) == 2"
[17:05:19.989]          // =>  TRUE
[17:05:19.989]        <block atomic="false" info="">
[17:05:19.989]          Message(0, "executing SWD power up");
[17:05:19.989]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:05:19.996]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:05:19.996]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:05:20.000]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:05:20.000]        </block>
[17:05:20.000]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:05:20.000]      </control>
[17:05:20.000]      // end if-block "powered_down"
[17:05:20.000]    </control>
[17:05:20.000]    <block atomic="false" info="">
[17:05:20.000]      __var DEBUG_PORT_VAL    = 0;
[17:05:20.000]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:05:20.000]      __var ACCESS_POINT_VAL  = 0;
[17:05:20.000]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:05:20.000]      __ap = 1; 
[17:05:20.002]        // -> [__ap <= 0x00000001]
[17:05:20.002]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:05:20.011]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:05:20.011]      __ap = 4;
[17:05:20.011]        // -> [__ap <= 0x00000004]
[17:05:20.011]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:05:20.019]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:05:20.019]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:05:20.019]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:05:20.019]    </block>
[17:05:20.019]    <block atomic="false" info="">
[17:05:20.019]      __var nReset = 0x80;
[17:05:20.019]        // -> [nReset <= 0x00000080]
[17:05:20.019]      __var canReadPins = 0;
[17:05:20.019]        // -> [canReadPins <= 0x00000000]
[17:05:20.019]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:05:20.029]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:05:20.029]        // -> [canReadPins <= 0x00000001]
[17:05:20.029]    </block>
[17:05:20.029]    <control if="" while="1" timeout="200" info="">
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.029]      // while "1"  (timeout="200")
[17:05:20.029]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.033]      // while "1"  (timeout="200")
[17:05:20.033]      // while-condition  =>  TRUE
[17:05:20.035]      // while "1"  (timeout="200")
[17:05:20.035]      // while  =>  TIMEOUT
[17:05:20.035]      // end while "1"
[17:05:20.035]    </control>
[17:05:20.035]    <control if="canReadPins" while="" timeout="0" info="">
[17:05:20.035]      // if-block "canReadPins"
[17:05:20.035]        // =>  TRUE
[17:05:20.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:05:20.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:05:20.048]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:05:20.048]        // while-condition  =>  FALSE
[17:05:20.048]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:05:20.048]      </control>
[17:05:20.050]      // end if-block "canReadPins"
[17:05:20.050]    </control>
[17:05:20.050]    <control if="!canReadPins" while="" timeout="0" info="">
[17:05:20.050]      // if-block "!canReadPins"
[17:05:20.050]        // =>  FALSE
[17:05:20.050]      // skip if-block "!canReadPins"
[17:05:20.050]    </control>
[17:05:20.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:05:20.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:05:20.050]        // =>  TRUE
[17:05:20.050]      <block atomic="false" info="">
[17:05:20.050]        WriteAP(0x00, 0x190008);
[17:05:20.054]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:05:20.054]        WriteAP(0xF0, 0x01);
[17:05:20.063]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:05:20.063]      </block>
[17:05:20.063]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:05:20.063]    </control>
[17:05:20.063]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:05:20.063]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:05:20.063]        // =>  FALSE
[17:05:20.065]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:05:20.065]    </control>
[17:05:20.065]    <block atomic="false" info="">
[17:05:20.065]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:05:20.073]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:05:20.073]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:05:20.073]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:05:20.076]      __ap = 0; //lets make sure we reset the access point selection
[17:05:20.076]        // -> [__ap <= 0x00000000]
[17:05:20.076]    </block>
[17:05:20.076]  </sequence>
[17:05:20.076]  
[17:05:20.138]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:05:20.138]  
[17:05:20.138]  <debugvars>
[17:05:20.138]    // Pre-defined
[17:05:20.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:05:20.138]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:05:20.138]    __dp=0x00000000
[17:05:20.138]    __ap=0x00000000
[17:05:20.139]    __traceout=0x00000000      (Trace Disabled)
[17:05:20.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:05:20.139]    __FlashAddr=0x00000000
[17:05:20.139]    __FlashLen=0x00000000
[17:05:20.139]    __FlashArg=0x00000000
[17:05:20.139]    __FlashOp=0x00000000
[17:05:20.139]    __Result=0x00000000
[17:05:20.139]  </debugvars>
[17:05:20.139]  
[17:05:20.139]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:05:20.139]    <block atomic="false" info="">
[17:05:20.139]      __var deviceID = 0;
[17:05:20.139]        // -> [deviceID <= 0x00000000]
[17:05:20.139]      __var version = 0;
[17:05:20.139]        // -> [version <= 0x00000000]
[17:05:20.139]      __var partNum = 0;
[17:05:20.139]        // -> [partNum <= 0x00000000]
[17:05:20.139]      __var manuf = 0;
[17:05:20.139]        // -> [manuf <= 0x00000000]
[17:05:20.139]      __var isMSPM0G1X0X_G3X0X = 0;
[17:05:20.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:05:20.139]      __var isProduction = 0;
[17:05:20.139]        // -> [isProduction <= 0x00000000]
[17:05:20.139]      __var continueId = 0;
[17:05:20.139]        // -> [continueId <= 0x00000000]
[17:05:20.139]      deviceID =   Read32(0x41C40004);
[17:05:20.159]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:05:20.159]        // -> [deviceID <= 0x2BB8802F]
[17:05:20.159]      version = deviceID >> 28;
[17:05:20.159]        // -> [version <= 0x00000002]
[17:05:20.159]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:05:20.159]        // -> [partNum <= 0x0000BB88]
[17:05:20.159]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:05:20.159]        // -> [manuf <= 0x00000017]
[17:05:20.159]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:05:20.159]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:05:20.159]      isProduction = (version > 0);
[17:05:20.159]        // -> [isProduction <= 0x00000001]
[17:05:20.159]    </block>
[17:05:20.159]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:05:20.159]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:05:20.159]        // =>  FALSE
[17:05:20.159]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:05:20.159]    </control>
[17:05:20.159]    <control if="continueId == 4" while="" timeout="0" info="">
[17:05:20.159]      // if-block "continueId == 4"
[17:05:20.159]        // =>  FALSE
[17:05:20.159]      // skip if-block "continueId == 4"
[17:05:20.159]    </control>
[17:05:20.159]    <control if="!isProduction" while="" timeout="0" info="">
[17:05:20.159]      // if-block "!isProduction"
[17:05:20.159]        // =>  FALSE
[17:05:20.159]      // skip if-block "!isProduction"
[17:05:20.159]    </control>
[17:05:20.159]  </sequence>
[17:05:20.159]  
[17:10:35.009]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:10:35.009]  
[17:10:35.019]  <debugvars>
[17:10:35.019]    // Pre-defined
[17:10:35.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:10:35.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:10:35.019]    __dp=0x00000000
[17:10:35.019]    __ap=0x00000000
[17:10:35.019]    __traceout=0x00000000      (Trace Disabled)
[17:10:35.019]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:10:35.019]    __FlashAddr=0x00000000
[17:10:35.019]    __FlashLen=0x00000000
[17:10:35.019]    __FlashArg=0x00000000
[17:10:35.019]    __FlashOp=0x00000000
[17:10:35.019]    __Result=0x00000000
[17:10:35.019]  </debugvars>
[17:10:35.019]  
[17:10:35.019]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:10:35.019]    <block atomic="false" info="">
[17:10:35.019]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:10:35.019]        // -> [isSWJ <= 0x00000001]
[17:10:35.019]      __var hasDormant = __protocol & 0x00020000;
[17:10:35.019]        // -> [hasDormant <= 0x00000000]
[17:10:35.019]      __var protType   = __protocol & 0x0000FFFF;
[17:10:35.019]        // -> [protType <= 0x00000002]
[17:10:35.019]    </block>
[17:10:35.019]    <control if="protType == 1" while="" timeout="0" info="">
[17:10:35.019]      // if-block "protType == 1"
[17:10:35.019]        // =>  FALSE
[17:10:35.019]      // skip if-block "protType == 1"
[17:10:35.019]    </control>
[17:10:35.019]    <control if="protType == 2" while="" timeout="0" info="">
[17:10:35.019]      // if-block "protType == 2"
[17:10:35.019]        // =>  TRUE
[17:10:35.019]      <control if="isSWJ" while="" timeout="0" info="">
[17:10:35.019]        // if-block "isSWJ"
[17:10:35.019]          // =>  TRUE
[17:10:35.019]        <control if="hasDormant" while="" timeout="0" info="">
[17:10:35.019]          // if-block "hasDormant"
[17:10:35.019]            // =>  FALSE
[17:10:35.019]          // skip if-block "hasDormant"
[17:10:35.019]        </control>
[17:10:35.019]        <control if="!hasDormant" while="" timeout="0" info="">
[17:10:35.019]          // if-block "!hasDormant"
[17:10:35.019]            // =>  TRUE
[17:10:35.019]          <block atomic="false" info="">
[17:10:35.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:10:35.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:10:35.027]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:10:35.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:10:35.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:10:35.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:10:35.027]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:10:35.040]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:10:35.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:10:35.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:10:35.048]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:10:35.050]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:10:35.050]          </block>
[17:10:35.050]          // end if-block "!hasDormant"
[17:10:35.050]        </control>
[17:10:35.050]        // end if-block "isSWJ"
[17:10:35.050]      </control>
[17:10:35.050]      <control if="!isSWJ" while="" timeout="0" info="">
[17:10:35.050]        // if-block "!isSWJ"
[17:10:35.050]          // =>  FALSE
[17:10:35.050]        // skip if-block "!isSWJ"
[17:10:35.050]      </control>
[17:10:35.050]      <block atomic="false" info="">
[17:10:35.050]        ReadDP(0x0);
[17:10:35.058]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:10:35.058]      </block>
[17:10:35.058]      // end if-block "protType == 2"
[17:10:35.058]    </control>
[17:10:35.058]  </sequence>
[17:10:35.058]  
[17:10:35.068]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:10:35.068]  
[17:10:35.068]  <debugvars>
[17:10:35.068]    // Pre-defined
[17:10:35.068]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:10:35.068]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:10:35.068]    __dp=0x00000000
[17:10:35.068]    __ap=0x00000000
[17:10:35.068]    __traceout=0x00000000      (Trace Disabled)
[17:10:35.068]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:10:35.068]    __FlashAddr=0x00000000
[17:10:35.068]    __FlashLen=0x00000000
[17:10:35.068]    __FlashArg=0x00000000
[17:10:35.068]    __FlashOp=0x00000000
[17:10:35.068]    __Result=0x00000000
[17:10:35.068]  </debugvars>
[17:10:35.068]  
[17:10:35.068]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:10:35.068]    <block atomic="false" info="">
[17:10:35.068]      __var SW_DP_ABORT       = 0x0;
[17:10:35.068]        // -> [SW_DP_ABORT <= 0x00000000]
[17:10:35.068]      __var DP_CTRL_STAT      = 0x4;
[17:10:35.068]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:10:35.068]      __var DP_SELECT         = 0x8;
[17:10:35.068]        // -> [DP_SELECT <= 0x00000008]
[17:10:35.068]      __var powered_down      = 0;
[17:10:35.068]        // -> [powered_down <= 0x00000000]
[17:10:35.068]      WriteDP(DP_SELECT, 0x00000000);
[17:10:35.078]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:10:35.078]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:10:35.088]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:10:35.089]        // -> [powered_down <= 0x00000001]
[17:10:35.089]    </block>
[17:10:35.089]    <control if="powered_down" while="" timeout="0" info="">
[17:10:35.089]      // if-block "powered_down"
[17:10:35.089]        // =>  TRUE
[17:10:35.089]      <block atomic="false" info="">
[17:10:35.089]        Message(0, "Debug/System power-up request sent");
[17:10:35.089]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:10:35.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:10:35.100]      </block>
[17:10:35.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:10:35.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:10:35.105]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:10:35.105]        // while-condition  =>  FALSE
[17:10:35.105]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:10:35.105]      </control>
[17:10:35.105]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:10:35.105]        // if-block "(__protocol & 0xFFFF) == 1"
[17:10:35.105]          // =>  FALSE
[17:10:35.105]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:10:35.105]      </control>
[17:10:35.105]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:10:35.105]        // if-block "(__protocol & 0xFFFF) == 2"
[17:10:35.105]          // =>  TRUE
[17:10:35.105]        <block atomic="false" info="">
[17:10:35.105]          Message(0, "executing SWD power up");
[17:10:35.105]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:10:35.110]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:10:35.110]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:10:35.110]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:10:35.110]        </block>
[17:10:35.110]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:10:35.110]      </control>
[17:10:35.110]      // end if-block "powered_down"
[17:10:35.110]    </control>
[17:10:35.110]    <block atomic="false" info="">
[17:10:35.110]      __var DEBUG_PORT_VAL    = 0;
[17:10:35.110]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:10:35.110]      __var ACCESS_POINT_VAL  = 0;
[17:10:35.110]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:10:35.110]      __ap = 1; 
[17:10:35.110]        // -> [__ap <= 0x00000001]
[17:10:35.110]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:10:35.119]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:10:35.119]      __ap = 4;
[17:10:35.119]        // -> [__ap <= 0x00000004]
[17:10:35.119]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:10:35.131]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:10:35.131]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:10:35.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:10:35.131]    </block>
[17:10:35.131]    <block atomic="false" info="">
[17:10:35.131]      __var nReset = 0x80;
[17:10:35.131]        // -> [nReset <= 0x00000080]
[17:10:35.131]      __var canReadPins = 0;
[17:10:35.131]        // -> [canReadPins <= 0x00000000]
[17:10:35.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:10:35.139]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:10:35.139]        // -> [canReadPins <= 0x00000001]
[17:10:35.139]    </block>
[17:10:35.139]    <control if="" while="1" timeout="200" info="">
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.139]      // while-condition  =>  TRUE
[17:10:35.139]      // while "1"  (timeout="200")
[17:10:35.149]      // while-condition  =>  TRUE
[17:10:35.149]      // while "1"  (timeout="200")
[17:10:35.149]      // while  =>  TIMEOUT
[17:10:35.149]      // end while "1"
[17:10:35.149]    </control>
[17:10:35.149]    <control if="canReadPins" while="" timeout="0" info="">
[17:10:35.149]      // if-block "canReadPins"
[17:10:35.149]        // =>  TRUE
[17:10:35.149]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:10:35.149]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:10:35.152]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:10:35.152]        // while-condition  =>  FALSE
[17:10:35.152]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:10:35.152]      </control>
[17:10:35.152]      // end if-block "canReadPins"
[17:10:35.152]    </control>
[17:10:35.152]    <control if="!canReadPins" while="" timeout="0" info="">
[17:10:35.152]      // if-block "!canReadPins"
[17:10:35.152]        // =>  FALSE
[17:10:35.152]      // skip if-block "!canReadPins"
[17:10:35.152]    </control>
[17:10:35.152]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:10:35.152]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:10:35.152]        // =>  TRUE
[17:10:35.152]      <block atomic="false" info="">
[17:10:35.152]        WriteAP(0x00, 0x190008);
[17:10:35.159]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:10:35.159]        WriteAP(0xF0, 0x01);
[17:10:35.170]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:10:35.170]      </block>
[17:10:35.170]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:10:35.170]    </control>
[17:10:35.170]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:10:35.170]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:10:35.170]        // =>  FALSE
[17:10:35.170]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:10:35.174]    </control>
[17:10:35.174]    <block atomic="false" info="">
[17:10:35.174]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:10:35.180]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:10:35.181]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:10:35.181]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:10:35.181]      __ap = 0; //lets make sure we reset the access point selection
[17:10:35.181]        // -> [__ap <= 0x00000000]
[17:10:35.182]    </block>
[17:10:35.182]  </sequence>
[17:10:35.182]  
[17:10:35.221]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:10:35.221]  
[17:10:35.221]  <debugvars>
[17:10:35.221]    // Pre-defined
[17:10:35.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:10:35.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:10:35.221]    __dp=0x00000000
[17:10:35.221]    __ap=0x00000000
[17:10:35.221]    __traceout=0x00000000      (Trace Disabled)
[17:10:35.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:10:35.221]    __FlashAddr=0x00000000
[17:10:35.221]    __FlashLen=0x00000000
[17:10:35.221]    __FlashArg=0x00000000
[17:10:35.221]    __FlashOp=0x00000000
[17:10:35.221]    __Result=0x00000000
[17:10:35.221]  </debugvars>
[17:10:35.221]  
[17:10:35.231]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:10:35.231]    <block atomic="false" info="">
[17:10:35.231]      __var deviceID = 0;
[17:10:35.231]        // -> [deviceID <= 0x00000000]
[17:10:35.231]      __var version = 0;
[17:10:35.231]        // -> [version <= 0x00000000]
[17:10:35.231]      __var partNum = 0;
[17:10:35.231]        // -> [partNum <= 0x00000000]
[17:10:35.232]      __var manuf = 0;
[17:10:35.232]        // -> [manuf <= 0x00000000]
[17:10:35.232]      __var isMSPM0G1X0X_G3X0X = 0;
[17:10:35.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:10:35.232]      __var isProduction = 0;
[17:10:35.232]        // -> [isProduction <= 0x00000000]
[17:10:35.232]      __var continueId = 0;
[17:10:35.232]        // -> [continueId <= 0x00000000]
[17:10:35.233]      deviceID =   Read32(0x41C40004);
[17:10:35.242]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:10:35.242]        // -> [deviceID <= 0x2BB8802F]
[17:10:35.242]      version = deviceID >> 28;
[17:10:35.242]        // -> [version <= 0x00000002]
[17:10:35.242]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:10:35.242]        // -> [partNum <= 0x0000BB88]
[17:10:35.242]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:10:35.242]        // -> [manuf <= 0x00000017]
[17:10:35.242]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:10:35.242]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:10:35.242]      isProduction = (version > 0);
[17:10:35.242]        // -> [isProduction <= 0x00000001]
[17:10:35.242]    </block>
[17:10:35.242]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:10:35.242]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:10:35.242]        // =>  FALSE
[17:10:35.242]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:10:35.244]    </control>
[17:10:35.244]    <control if="continueId == 4" while="" timeout="0" info="">
[17:10:35.244]      // if-block "continueId == 4"
[17:10:35.244]        // =>  FALSE
[17:10:35.244]      // skip if-block "continueId == 4"
[17:10:35.244]    </control>
[17:10:35.244]    <control if="!isProduction" while="" timeout="0" info="">
[17:10:35.244]      // if-block "!isProduction"
[17:10:35.244]        // =>  FALSE
[17:10:35.244]      // skip if-block "!isProduction"
[17:10:35.244]    </control>
[17:10:35.246]  </sequence>
[17:10:35.246]  
[17:11:24.324]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:11:24.324]  
[17:11:24.332]  <debugvars>
[17:11:24.332]    // Pre-defined
[17:11:24.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:24.332]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:24.332]    __dp=0x00000000
[17:11:24.332]    __ap=0x00000000
[17:11:24.332]    __traceout=0x00000000      (Trace Disabled)
[17:11:24.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:24.332]    __FlashAddr=0x00000000
[17:11:24.332]    __FlashLen=0x00000000
[17:11:24.332]    __FlashArg=0x00000000
[17:11:24.332]    __FlashOp=0x00000000
[17:11:24.332]    __Result=0x00000000
[17:11:24.332]  </debugvars>
[17:11:24.332]  
[17:11:24.332]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:11:24.332]    <block atomic="false" info="">
[17:11:24.332]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:11:24.332]        // -> [isSWJ <= 0x00000001]
[17:11:24.332]      __var hasDormant = __protocol & 0x00020000;
[17:11:24.335]        // -> [hasDormant <= 0x00000000]
[17:11:24.335]      __var protType   = __protocol & 0x0000FFFF;
[17:11:24.335]        // -> [protType <= 0x00000002]
[17:11:24.335]    </block>
[17:11:24.335]    <control if="protType == 1" while="" timeout="0" info="">
[17:11:24.335]      // if-block "protType == 1"
[17:11:24.335]        // =>  FALSE
[17:11:24.335]      // skip if-block "protType == 1"
[17:11:24.335]    </control>
[17:11:24.335]    <control if="protType == 2" while="" timeout="0" info="">
[17:11:24.335]      // if-block "protType == 2"
[17:11:24.335]        // =>  TRUE
[17:11:24.335]      <control if="isSWJ" while="" timeout="0" info="">
[17:11:24.335]        // if-block "isSWJ"
[17:11:24.335]          // =>  TRUE
[17:11:24.335]        <control if="hasDormant" while="" timeout="0" info="">
[17:11:24.335]          // if-block "hasDormant"
[17:11:24.337]            // =>  FALSE
[17:11:24.337]          // skip if-block "hasDormant"
[17:11:24.337]        </control>
[17:11:24.337]        <control if="!hasDormant" while="" timeout="0" info="">
[17:11:24.337]          // if-block "!hasDormant"
[17:11:24.337]            // =>  TRUE
[17:11:24.337]          <block atomic="false" info="">
[17:11:24.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:11:24.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:24.339]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:11:24.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:11:24.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:11:24.346]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:24.346]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:11:24.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:11:24.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:11:24.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:24.355]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:11:24.357]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:11:24.357]          </block>
[17:11:24.357]          // end if-block "!hasDormant"
[17:11:24.357]        </control>
[17:11:24.357]        // end if-block "isSWJ"
[17:11:24.357]      </control>
[17:11:24.357]      <control if="!isSWJ" while="" timeout="0" info="">
[17:11:24.357]        // if-block "!isSWJ"
[17:11:24.357]          // =>  FALSE
[17:11:24.357]        // skip if-block "!isSWJ"
[17:11:24.357]      </control>
[17:11:24.357]      <block atomic="false" info="">
[17:11:24.357]        ReadDP(0x0);
[17:11:24.357]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:11:24.357]      </block>
[17:11:24.357]      // end if-block "protType == 2"
[17:11:24.357]    </control>
[17:11:24.357]  </sequence>
[17:11:24.357]  
[17:11:24.366]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:11:24.366]  
[17:11:24.366]  <debugvars>
[17:11:24.366]    // Pre-defined
[17:11:24.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:24.366]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:24.366]    __dp=0x00000000
[17:11:24.366]    __ap=0x00000000
[17:11:24.366]    __traceout=0x00000000      (Trace Disabled)
[17:11:24.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:24.366]    __FlashAddr=0x00000000
[17:11:24.366]    __FlashLen=0x00000000
[17:11:24.366]    __FlashArg=0x00000000
[17:11:24.366]    __FlashOp=0x00000000
[17:11:24.366]    __Result=0x00000000
[17:11:24.366]  </debugvars>
[17:11:24.366]  
[17:11:24.366]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:11:24.366]    <block atomic="false" info="">
[17:11:24.366]      __var SW_DP_ABORT       = 0x0;
[17:11:24.366]        // -> [SW_DP_ABORT <= 0x00000000]
[17:11:24.366]      __var DP_CTRL_STAT      = 0x4;
[17:11:24.366]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:11:24.366]      __var DP_SELECT         = 0x8;
[17:11:24.366]        // -> [DP_SELECT <= 0x00000008]
[17:11:24.366]      __var powered_down      = 0;
[17:11:24.366]        // -> [powered_down <= 0x00000000]
[17:11:24.366]      WriteDP(DP_SELECT, 0x00000000);
[17:11:24.376]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:11:24.376]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:11:24.376]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:11:24.376]        // -> [powered_down <= 0x00000001]
[17:11:24.376]    </block>
[17:11:24.376]    <control if="powered_down" while="" timeout="0" info="">
[17:11:24.376]      // if-block "powered_down"
[17:11:24.376]        // =>  TRUE
[17:11:24.376]      <block atomic="false" info="">
[17:11:24.376]        Message(0, "Debug/System power-up request sent");
[17:11:24.376]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:11:24.390]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:11:24.390]      </block>
[17:11:24.390]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:11:24.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.390]        // while-condition  =>  TRUE
[17:11:24.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.396]        // while-condition  =>  TRUE
[17:11:24.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.396]        // while-condition  =>  TRUE
[17:11:24.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.406]        // while-condition  =>  TRUE
[17:11:24.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.406]        // while-condition  =>  TRUE
[17:11:24.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.416]        // while-condition  =>  TRUE
[17:11:24.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.416]        // while-condition  =>  TRUE
[17:11:24.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.426]        // while-condition  =>  TRUE
[17:11:24.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.436]        // while-condition  =>  TRUE
[17:11:24.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.436]        // while-condition  =>  TRUE
[17:11:24.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.436]        // while-condition  =>  TRUE
[17:11:24.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.446]        // while-condition  =>  TRUE
[17:11:24.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.446]        // while-condition  =>  TRUE
[17:11:24.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.456]        // while-condition  =>  TRUE
[17:11:24.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.456]        // while-condition  =>  TRUE
[17:11:24.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.466]        // while-condition  =>  TRUE
[17:11:24.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.466]        // while-condition  =>  TRUE
[17:11:24.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.476]        // while-condition  =>  TRUE
[17:11:24.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.479]        // while-condition  =>  TRUE
[17:11:24.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.487]        // while-condition  =>  TRUE
[17:11:24.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.487]        // while-condition  =>  TRUE
[17:11:24.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.487]        // while-condition  =>  TRUE
[17:11:24.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.497]        // while-condition  =>  TRUE
[17:11:24.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.497]        // while-condition  =>  TRUE
[17:11:24.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.510]        // while-condition  =>  TRUE
[17:11:24.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.510]        // while-condition  =>  TRUE
[17:11:24.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.517]        // while-condition  =>  TRUE
[17:11:24.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.517]        // while-condition  =>  TRUE
[17:11:24.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.517]        // while-condition  =>  TRUE
[17:11:24.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.529]        // while-condition  =>  TRUE
[17:11:24.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.535]        // while-condition  =>  TRUE
[17:11:24.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.538]        // while-condition  =>  TRUE
[17:11:24.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.539]        // while-condition  =>  TRUE
[17:11:24.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.539]        // while-condition  =>  TRUE
[17:11:24.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.548]        // while-condition  =>  TRUE
[17:11:24.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.549]        // while-condition  =>  TRUE
[17:11:24.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.555]        // while-condition  =>  TRUE
[17:11:24.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.559]        // while-condition  =>  TRUE
[17:11:24.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.559]        // while-condition  =>  TRUE
[17:11:24.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.568]        // while-condition  =>  TRUE
[17:11:24.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.570]        // while-condition  =>  TRUE
[17:11:24.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.570]        // while-condition  =>  TRUE
[17:11:24.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.582]        // while-condition  =>  TRUE
[17:11:24.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.582]        // while-condition  =>  TRUE
[17:11:24.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.589]        // while-condition  =>  TRUE
[17:11:24.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.591]        // while-condition  =>  TRUE
[17:11:24.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.591]        // while-condition  =>  TRUE
[17:11:24.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.599]        // while-condition  =>  TRUE
[17:11:24.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.599]        // while-condition  =>  TRUE
[17:11:24.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.609]        // while-condition  =>  TRUE
[17:11:24.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.609]        // while-condition  =>  TRUE
[17:11:24.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.609]        // while-condition  =>  TRUE
[17:11:24.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.619]        // while-condition  =>  TRUE
[17:11:24.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.619]        // while-condition  =>  TRUE
[17:11:24.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.629]        // while-condition  =>  TRUE
[17:11:24.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.629]        // while-condition  =>  TRUE
[17:11:24.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.641]        // while-condition  =>  TRUE
[17:11:24.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.642]        // while-condition  =>  TRUE
[17:11:24.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.646]        // while-condition  =>  TRUE
[17:11:24.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.650]        // while-condition  =>  TRUE
[17:11:24.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.652]        // while-condition  =>  TRUE
[17:11:24.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.658]        // while-condition  =>  TRUE
[17:11:24.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.661]        // while-condition  =>  TRUE
[17:11:24.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.663]        // while-condition  =>  TRUE
[17:11:24.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.668]        // while-condition  =>  TRUE
[17:11:24.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.671]        // while-condition  =>  TRUE
[17:11:24.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.673]        // while-condition  =>  TRUE
[17:11:24.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.681]        // while-condition  =>  TRUE
[17:11:24.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.686]        // while-condition  =>  TRUE
[17:11:24.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.690]        // while-condition  =>  TRUE
[17:11:24.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.693]        // while-condition  =>  TRUE
[17:11:24.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.693]        // while-condition  =>  TRUE
[17:11:24.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.700]        // while-condition  =>  TRUE
[17:11:24.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.702]        // while-condition  =>  TRUE
[17:11:24.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.707]        // while-condition  =>  TRUE
[17:11:24.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.711]        // while-condition  =>  TRUE
[17:11:24.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.714]        // while-condition  =>  TRUE
[17:11:24.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.718]        // while-condition  =>  TRUE
[17:11:24.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.721]        // while-condition  =>  TRUE
[17:11:24.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.725]        // while-condition  =>  TRUE
[17:11:24.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.731]        // while-condition  =>  TRUE
[17:11:24.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.735]        // while-condition  =>  TRUE
[17:11:24.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.735]        // while-condition  =>  TRUE
[17:11:24.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.741]        // while-condition  =>  TRUE
[17:11:24.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.751]        // while-condition  =>  TRUE
[17:11:24.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.754]        // while-condition  =>  TRUE
[17:11:24.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.754]        // while-condition  =>  TRUE
[17:11:24.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.761]        // while-condition  =>  TRUE
[17:11:24.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.761]        // while-condition  =>  TRUE
[17:11:24.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.761]        // while-condition  =>  TRUE
[17:11:24.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.773]        // while-condition  =>  TRUE
[17:11:24.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.773]        // while-condition  =>  TRUE
[17:11:24.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.773]        // while-condition  =>  TRUE
[17:11:24.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.782]        // while-condition  =>  TRUE
[17:11:24.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.782]        // while-condition  =>  TRUE
[17:11:24.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.792]        // while-condition  =>  TRUE
[17:11:24.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.792]        // while-condition  =>  TRUE
[17:11:24.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.802]        // while-condition  =>  TRUE
[17:11:24.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.802]        // while-condition  =>  TRUE
[17:11:24.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.812]        // while-condition  =>  TRUE
[17:11:24.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.812]        // while-condition  =>  TRUE
[17:11:24.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.822]        // while-condition  =>  TRUE
[17:11:24.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.832]        // while-condition  =>  TRUE
[17:11:24.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.835]        // while-condition  =>  TRUE
[17:11:24.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.835]        // while-condition  =>  TRUE
[17:11:24.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.842]        // while-condition  =>  TRUE
[17:11:24.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.842]        // while-condition  =>  TRUE
[17:11:24.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.852]        // while-condition  =>  TRUE
[17:11:24.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.852]        // while-condition  =>  TRUE
[17:11:24.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.852]        // while-condition  =>  TRUE
[17:11:24.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.862]        // while-condition  =>  TRUE
[17:11:24.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.862]        // while-condition  =>  TRUE
[17:11:24.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.873]        // while-condition  =>  TRUE
[17:11:24.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.873]        // while-condition  =>  TRUE
[17:11:24.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.882]        // while-condition  =>  TRUE
[17:11:24.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.882]        // while-condition  =>  TRUE
[17:11:24.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.882]        // while-condition  =>  TRUE
[17:11:24.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.892]        // while-condition  =>  TRUE
[17:11:24.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.902]        // while-condition  =>  TRUE
[17:11:24.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.902]        // while-condition  =>  TRUE
[17:11:24.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.912]        // while-condition  =>  TRUE
[17:11:24.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.912]        // while-condition  =>  TRUE
[17:11:24.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.912]        // while-condition  =>  TRUE
[17:11:24.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.922]        // while-condition  =>  TRUE
[17:11:24.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.922]        // while-condition  =>  TRUE
[17:11:24.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.932]        // while-condition  =>  TRUE
[17:11:24.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.935]        // while-condition  =>  TRUE
[17:11:24.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.935]        // while-condition  =>  TRUE
[17:11:24.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.942]        // while-condition  =>  TRUE
[17:11:24.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.952]        // while-condition  =>  TRUE
[17:11:24.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.952]        // while-condition  =>  TRUE
[17:11:24.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.952]        // while-condition  =>  TRUE
[17:11:24.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.962]        // while-condition  =>  TRUE
[17:11:24.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.962]        // while-condition  =>  TRUE
[17:11:24.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.972]        // while-condition  =>  TRUE
[17:11:24.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.972]        // while-condition  =>  TRUE
[17:11:24.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.982]        // while-condition  =>  TRUE
[17:11:24.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.982]        // while-condition  =>  TRUE
[17:11:24.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.992]        // while-condition  =>  TRUE
[17:11:24.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:24.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:24.992]        // while-condition  =>  TRUE
[17:11:24.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.003]        // while-condition  =>  TRUE
[17:11:25.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.003]        // while-condition  =>  TRUE
[17:11:25.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.012]        // while-condition  =>  TRUE
[17:11:25.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.012]        // while-condition  =>  TRUE
[17:11:25.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.022]        // while-condition  =>  TRUE
[17:11:25.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.022]        // while-condition  =>  TRUE
[17:11:25.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.032]        // while-condition  =>  TRUE
[17:11:25.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.035]        // while-condition  =>  TRUE
[17:11:25.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.042]        // while-condition  =>  TRUE
[17:11:25.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.042]        // while-condition  =>  TRUE
[17:11:25.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.052]        // while-condition  =>  TRUE
[17:11:25.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.052]        // while-condition  =>  TRUE
[17:11:25.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.052]        // while-condition  =>  TRUE
[17:11:25.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.062]        // while-condition  =>  TRUE
[17:11:25.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.062]        // while-condition  =>  TRUE
[17:11:25.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.072]        // while-condition  =>  TRUE
[17:11:25.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.072]        // while-condition  =>  TRUE
[17:11:25.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.072]        // while-condition  =>  TRUE
[17:11:25.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.083]        // while-condition  =>  TRUE
[17:11:25.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.083]        // while-condition  =>  TRUE
[17:11:25.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.093]        // while-condition  =>  TRUE
[17:11:25.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.103]        // while-condition  =>  TRUE
[17:11:25.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.103]        // while-condition  =>  TRUE
[17:11:25.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.103]        // while-condition  =>  TRUE
[17:11:25.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.113]        // while-condition  =>  TRUE
[17:11:25.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.113]        // while-condition  =>  TRUE
[17:11:25.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.123]        // while-condition  =>  TRUE
[17:11:25.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.123]        // while-condition  =>  TRUE
[17:11:25.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.123]        // while-condition  =>  TRUE
[17:11:25.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.133]        // while-condition  =>  TRUE
[17:11:25.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.135]        // while-condition  =>  TRUE
[17:11:25.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.143]        // while-condition  =>  TRUE
[17:11:25.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.143]        // while-condition  =>  TRUE
[17:11:25.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.143]        // while-condition  =>  TRUE
[17:11:25.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.154]        // while-condition  =>  TRUE
[17:11:25.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.154]        // while-condition  =>  TRUE
[17:11:25.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.163]        // while-condition  =>  TRUE
[17:11:25.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.163]        // while-condition  =>  TRUE
[17:11:25.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.173]        // while-condition  =>  TRUE
[17:11:25.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.173]        // while-condition  =>  TRUE
[17:11:25.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.183]        // while-condition  =>  TRUE
[17:11:25.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.183]        // while-condition  =>  TRUE
[17:11:25.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.193]        // while-condition  =>  TRUE
[17:11:25.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.193]        // while-condition  =>  TRUE
[17:11:25.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.203]        // while-condition  =>  TRUE
[17:11:25.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.203]        // while-condition  =>  TRUE
[17:11:25.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.213]        // while-condition  =>  TRUE
[17:11:25.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.213]        // while-condition  =>  TRUE
[17:11:25.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.223]        // while-condition  =>  TRUE
[17:11:25.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.223]        // while-condition  =>  TRUE
[17:11:25.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.223]        // while-condition  =>  TRUE
[17:11:25.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.235]        // while-condition  =>  TRUE
[17:11:25.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.235]        // while-condition  =>  TRUE
[17:11:25.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.243]        // while-condition  =>  TRUE
[17:11:25.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.253]        // while-condition  =>  TRUE
[17:11:25.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.257]        // while-condition  =>  TRUE
[17:11:25.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.262]        // while-condition  =>  TRUE
[17:11:25.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.268]        // while-condition  =>  TRUE
[17:11:25.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.273]        // while-condition  =>  TRUE
[17:11:25.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.273]        // while-condition  =>  TRUE
[17:11:25.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.273]        // while-condition  =>  TRUE
[17:11:25.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.283]        // while-condition  =>  TRUE
[17:11:25.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.285]        // while-condition  =>  TRUE
[17:11:25.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.289]        // while-condition  =>  TRUE
[17:11:25.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.289]        // while-condition  =>  TRUE
[17:11:25.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.294]        // while-condition  =>  TRUE
[17:11:25.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.294]        // while-condition  =>  TRUE
[17:11:25.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.304]        // while-condition  =>  TRUE
[17:11:25.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.304]        // while-condition  =>  TRUE
[17:11:25.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.304]        // while-condition  =>  TRUE
[17:11:25.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.314]        // while-condition  =>  TRUE
[17:11:25.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.318]        // while-condition  =>  TRUE
[17:11:25.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.324]        // while-condition  =>  TRUE
[17:11:25.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.324]        // while-condition  =>  TRUE
[17:11:25.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.324]        // while-condition  =>  TRUE
[17:11:25.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.334]        // while-condition  =>  TRUE
[17:11:25.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.335]        // while-condition  =>  TRUE
[17:11:25.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.335]        // while-condition  =>  TRUE
[17:11:25.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.344]        // while-condition  =>  TRUE
[17:11:25.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.351]        // while-condition  =>  TRUE
[17:11:25.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.356]        // while-condition  =>  TRUE
[17:11:25.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.359]        // while-condition  =>  TRUE
[17:11:25.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.363]        // while-condition  =>  TRUE
[17:11:25.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.367]        // while-condition  =>  TRUE
[17:11:25.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.370]        // while-condition  =>  TRUE
[17:11:25.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.375]        // while-condition  =>  TRUE
[17:11:25.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[17:11:25.382]        // while-condition  =>  TRUE
[17:11:25.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:25.382]        // while  =>  TIMEOUT
[17:11:25.383]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:11:25.383]      </control>
[17:11:25.383]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:11:25.383]        // if-block "(__protocol & 0xFFFF) == 1"
[17:11:25.383]          // =>  FALSE
[17:11:25.383]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:11:25.383]      </control>
[17:11:25.383]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:11:25.383]        // if-block "(__protocol & 0xFFFF) == 2"
[17:11:25.383]          // =>  TRUE
[17:11:25.383]        <block atomic="false" info="">
[17:11:25.384]          Message(0, "executing SWD power up");
[17:11:25.385]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:11:25.391]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:11:25.391]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:11:25.393]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:11:25.393]        </block>
[17:11:25.394]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:11:25.394]      </control>
[17:11:25.394]      // end if-block "powered_down"
[17:11:25.394]    </control>
[17:11:25.394]    <block atomic="false" info="">
[17:11:25.394]      __var DEBUG_PORT_VAL    = 0;
[17:11:25.394]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:11:25.394]      __var ACCESS_POINT_VAL  = 0;
[17:11:25.394]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:11:25.394]      __ap = 1; 
[17:11:25.394]        // -> [__ap <= 0x00000001]
[17:11:25.394]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:11:25.423]  
[17:11:25.423]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[17:11:25.423]  
[17:11:25.423]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:11:25.423]    </block>
[17:11:25.423]  </sequence>
[17:11:25.423]  
[17:11:37.307]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:11:37.307]  
[17:11:37.307]  <debugvars>
[17:11:37.307]    // Pre-defined
[17:11:37.314]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:37.314]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:37.314]    __dp=0x00000000
[17:11:37.314]    __ap=0x00000000
[17:11:37.314]    __traceout=0x00000000      (Trace Disabled)
[17:11:37.314]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:37.314]    __FlashAddr=0x00000000
[17:11:37.314]    __FlashLen=0x00000000
[17:11:37.314]    __FlashArg=0x00000000
[17:11:37.314]    __FlashOp=0x00000000
[17:11:37.314]    __Result=0x00000000
[17:11:37.314]  </debugvars>
[17:11:37.314]  
[17:11:37.314]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:11:37.314]    <block atomic="false" info="">
[17:11:37.314]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:11:37.314]        // -> [isSWJ <= 0x00000001]
[17:11:37.314]      __var hasDormant = __protocol & 0x00020000;
[17:11:37.314]        // -> [hasDormant <= 0x00000000]
[17:11:37.314]      __var protType   = __protocol & 0x0000FFFF;
[17:11:37.314]        // -> [protType <= 0x00000002]
[17:11:37.314]    </block>
[17:11:37.314]    <control if="protType == 1" while="" timeout="0" info="">
[17:11:37.314]      // if-block "protType == 1"
[17:11:37.314]        // =>  FALSE
[17:11:37.314]      // skip if-block "protType == 1"
[17:11:37.314]    </control>
[17:11:37.314]    <control if="protType == 2" while="" timeout="0" info="">
[17:11:37.314]      // if-block "protType == 2"
[17:11:37.314]        // =>  TRUE
[17:11:37.314]      <control if="isSWJ" while="" timeout="0" info="">
[17:11:37.314]        // if-block "isSWJ"
[17:11:37.314]          // =>  TRUE
[17:11:37.314]        <control if="hasDormant" while="" timeout="0" info="">
[17:11:37.314]          // if-block "hasDormant"
[17:11:37.314]            // =>  FALSE
[17:11:37.314]          // skip if-block "hasDormant"
[17:11:37.314]        </control>
[17:11:37.314]        <control if="!hasDormant" while="" timeout="0" info="">
[17:11:37.314]          // if-block "!hasDormant"
[17:11:37.314]            // =>  TRUE
[17:11:37.314]          <block atomic="false" info="">
[17:11:37.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:11:37.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:37.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:11:37.324]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:11:37.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:11:37.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:37.324]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:11:37.329]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:11:37.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:11:37.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:37.336]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:11:37.345]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:11:37.345]          </block>
[17:11:37.345]          // end if-block "!hasDormant"
[17:11:37.345]        </control>
[17:11:37.345]        // end if-block "isSWJ"
[17:11:37.345]      </control>
[17:11:37.345]      <control if="!isSWJ" while="" timeout="0" info="">
[17:11:37.345]        // if-block "!isSWJ"
[17:11:37.345]          // =>  FALSE
[17:11:37.345]        // skip if-block "!isSWJ"
[17:11:37.345]      </control>
[17:11:37.345]      <block atomic="false" info="">
[17:11:37.345]        ReadDP(0x0);
[17:11:37.345]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:11:37.345]      </block>
[17:11:37.345]      // end if-block "protType == 2"
[17:11:37.345]    </control>
[17:11:37.345]  </sequence>
[17:11:37.345]  
[17:11:37.356]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:11:37.356]  
[17:11:37.356]  <debugvars>
[17:11:37.356]    // Pre-defined
[17:11:37.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:37.356]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:37.356]    __dp=0x00000000
[17:11:37.356]    __ap=0x00000000
[17:11:37.356]    __traceout=0x00000000      (Trace Disabled)
[17:11:37.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:37.356]    __FlashAddr=0x00000000
[17:11:37.356]    __FlashLen=0x00000000
[17:11:37.356]    __FlashArg=0x00000000
[17:11:37.359]    __FlashOp=0x00000000
[17:11:37.359]    __Result=0x00000000
[17:11:37.359]  </debugvars>
[17:11:37.359]  
[17:11:37.359]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:11:37.359]    <block atomic="false" info="">
[17:11:37.359]      __var SW_DP_ABORT       = 0x0;
[17:11:37.359]        // -> [SW_DP_ABORT <= 0x00000000]
[17:11:37.359]      __var DP_CTRL_STAT      = 0x4;
[17:11:37.359]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:11:37.359]      __var DP_SELECT         = 0x8;
[17:11:37.359]        // -> [DP_SELECT <= 0x00000008]
[17:11:37.359]      __var powered_down      = 0;
[17:11:37.359]        // -> [powered_down <= 0x00000000]
[17:11:37.359]      WriteDP(DP_SELECT, 0x00000000);
[17:11:37.359]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:11:37.359]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:11:37.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:11:37.367]        // -> [powered_down <= 0x00000001]
[17:11:37.367]    </block>
[17:11:37.367]    <control if="powered_down" while="" timeout="0" info="">
[17:11:37.367]      // if-block "powered_down"
[17:11:37.367]        // =>  TRUE
[17:11:37.367]      <block atomic="false" info="">
[17:11:37.367]        Message(0, "Debug/System power-up request sent");
[17:11:37.367]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:11:37.375]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:11:37.375]      </block>
[17:11:37.375]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:11:37.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:11:37.375]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:11:37.375]        // while-condition  =>  FALSE
[17:11:37.375]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:11:37.375]      </control>
[17:11:37.375]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:11:37.375]        // if-block "(__protocol & 0xFFFF) == 1"
[17:11:37.375]          // =>  FALSE
[17:11:37.375]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:11:37.375]      </control>
[17:11:37.375]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:11:37.375]        // if-block "(__protocol & 0xFFFF) == 2"
[17:11:37.375]          // =>  TRUE
[17:11:37.375]        <block atomic="false" info="">
[17:11:37.375]          Message(0, "executing SWD power up");
[17:11:37.375]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:11:37.385]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:11:37.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:11:37.385]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:11:37.385]        </block>
[17:11:37.385]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:11:37.385]      </control>
[17:11:37.385]      // end if-block "powered_down"
[17:11:37.385]    </control>
[17:11:37.385]    <block atomic="false" info="">
[17:11:37.385]      __var DEBUG_PORT_VAL    = 0;
[17:11:37.385]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:11:37.385]      __var ACCESS_POINT_VAL  = 0;
[17:11:37.385]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:11:37.385]      __ap = 1; 
[17:11:37.385]        // -> [__ap <= 0x00000001]
[17:11:37.395]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:11:37.405]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:11:37.405]      __ap = 4;
[17:11:37.405]        // -> [__ap <= 0x00000004]
[17:11:37.405]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:11:37.415]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:11:37.415]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:11:37.415]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:11:37.415]    </block>
[17:11:37.415]    <block atomic="false" info="">
[17:11:37.415]      __var nReset = 0x80;
[17:11:37.415]        // -> [nReset <= 0x00000080]
[17:11:37.415]      __var canReadPins = 0;
[17:11:37.415]        // -> [canReadPins <= 0x00000000]
[17:11:37.415]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:11:37.415]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:11:37.415]        // -> [canReadPins <= 0x00000001]
[17:11:37.415]    </block>
[17:11:37.415]    <control if="" while="1" timeout="200" info="">
[17:11:37.415]      // while "1"  (timeout="200")
[17:11:37.415]      // while-condition  =>  TRUE
[17:11:37.415]      // while "1"  (timeout="200")
[17:11:37.415]      // while-condition  =>  TRUE
[17:11:37.415]      // while "1"  (timeout="200")
[17:11:37.415]      // while-condition  =>  TRUE
[17:11:37.415]      // while "1"  (timeout="200")
[17:11:37.415]      // while-condition  =>  TRUE
[17:11:37.415]      // while "1"  (timeout="200")
[17:11:37.415]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.425]      // while "1"  (timeout="200")
[17:11:37.425]      // while-condition  =>  TRUE
[17:11:37.435]      // while "1"  (timeout="200")
[17:11:37.435]      // while  =>  TIMEOUT
[17:11:37.435]      // end while "1"
[17:11:37.435]    </control>
[17:11:37.435]    <control if="canReadPins" while="" timeout="0" info="">
[17:11:37.435]      // if-block "canReadPins"
[17:11:37.435]        // =>  TRUE
[17:11:37.435]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:11:37.435]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:11:37.436]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:11:37.436]        // while-condition  =>  FALSE
[17:11:37.436]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:11:37.436]      </control>
[17:11:37.436]      // end if-block "canReadPins"
[17:11:37.436]    </control>
[17:11:37.436]    <control if="!canReadPins" while="" timeout="0" info="">
[17:11:37.445]      // if-block "!canReadPins"
[17:11:37.445]        // =>  FALSE
[17:11:37.445]      // skip if-block "!canReadPins"
[17:11:37.445]    </control>
[17:11:37.445]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:11:37.445]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:11:37.445]        // =>  TRUE
[17:11:37.445]      <block atomic="false" info="">
[17:11:37.445]        WriteAP(0x00, 0x190008);
[17:11:37.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:11:37.448]        WriteAP(0xF0, 0x01);
[17:11:37.459]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:11:37.459]      </block>
[17:11:37.459]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:11:37.459]    </control>
[17:11:37.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:11:37.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:11:37.459]        // =>  FALSE
[17:11:37.459]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:11:37.459]    </control>
[17:11:37.459]    <block atomic="false" info="">
[17:11:37.459]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:11:37.466]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:11:37.466]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:11:37.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:11:37.466]      __ap = 0; //lets make sure we reset the access point selection
[17:11:37.466]        // -> [__ap <= 0x00000000]
[17:11:37.466]    </block>
[17:11:37.466]  </sequence>
[17:11:37.466]  
[17:11:37.516]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:11:37.516]  
[17:11:37.516]  <debugvars>
[17:11:37.516]    // Pre-defined
[17:11:37.516]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:37.516]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:37.516]    __dp=0x00000000
[17:11:37.516]    __ap=0x00000000
[17:11:37.516]    __traceout=0x00000000      (Trace Disabled)
[17:11:37.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:37.516]    __FlashAddr=0x00000000
[17:11:37.516]    __FlashLen=0x00000000
[17:11:37.516]    __FlashArg=0x00000000
[17:11:37.516]    __FlashOp=0x00000000
[17:11:37.516]    __Result=0x00000000
[17:11:37.516]  </debugvars>
[17:11:37.516]  
[17:11:37.516]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:11:37.516]    <block atomic="false" info="">
[17:11:37.516]      __var deviceID = 0;
[17:11:37.516]        // -> [deviceID <= 0x00000000]
[17:11:37.516]      __var version = 0;
[17:11:37.516]        // -> [version <= 0x00000000]
[17:11:37.516]      __var partNum = 0;
[17:11:37.516]        // -> [partNum <= 0x00000000]
[17:11:37.516]      __var manuf = 0;
[17:11:37.516]        // -> [manuf <= 0x00000000]
[17:11:37.516]      __var isMSPM0G1X0X_G3X0X = 0;
[17:11:37.516]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:11:37.516]      __var isProduction = 0;
[17:11:37.516]        // -> [isProduction <= 0x00000000]
[17:11:37.516]      __var continueId = 0;
[17:11:37.516]        // -> [continueId <= 0x00000000]
[17:11:37.516]      deviceID =   Read32(0x41C40004);
[17:11:37.527]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:11:37.527]        // -> [deviceID <= 0x2BB8802F]
[17:11:37.527]      version = deviceID >> 28;
[17:11:37.527]        // -> [version <= 0x00000002]
[17:11:37.527]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:11:37.536]        // -> [partNum <= 0x0000BB88]
[17:11:37.536]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:11:37.536]        // -> [manuf <= 0x00000017]
[17:11:37.536]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:11:37.536]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:11:37.536]      isProduction = (version > 0);
[17:11:37.536]        // -> [isProduction <= 0x00000001]
[17:11:37.536]    </block>
[17:11:37.536]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:11:37.536]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:11:37.536]        // =>  FALSE
[17:11:37.536]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:11:37.536]    </control>
[17:11:37.536]    <control if="continueId == 4" while="" timeout="0" info="">
[17:11:37.536]      // if-block "continueId == 4"
[17:11:37.536]        // =>  FALSE
[17:11:37.536]      // skip if-block "continueId == 4"
[17:11:37.536]    </control>
[17:11:37.536]    <control if="!isProduction" while="" timeout="0" info="">
[17:11:37.536]      // if-block "!isProduction"
[17:11:37.536]        // =>  FALSE
[17:11:37.536]      // skip if-block "!isProduction"
[17:11:37.536]    </control>
[17:11:37.536]  </sequence>
[17:11:37.536]  
[17:19:58.147]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:19:58.147]  
[17:19:58.155]  <debugvars>
[17:19:58.155]    // Pre-defined
[17:19:58.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:58.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:58.155]    __dp=0x00000000
[17:19:58.155]    __ap=0x00000000
[17:19:58.155]    __traceout=0x00000000      (Trace Disabled)
[17:19:58.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:58.156]    __FlashAddr=0x00000000
[17:19:58.156]    __FlashLen=0x00000000
[17:19:58.156]    __FlashArg=0x00000000
[17:19:58.156]    __FlashOp=0x00000000
[17:19:58.156]    __Result=0x00000000
[17:19:58.156]  </debugvars>
[17:19:58.156]  
[17:19:58.156]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:19:58.156]    <block atomic="false" info="">
[17:19:58.156]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:19:58.156]        // -> [isSWJ <= 0x00000001]
[17:19:58.156]      __var hasDormant = __protocol & 0x00020000;
[17:19:58.158]        // -> [hasDormant <= 0x00000000]
[17:19:58.158]      __var protType   = __protocol & 0x0000FFFF;
[17:19:58.158]        // -> [protType <= 0x00000002]
[17:19:58.158]    </block>
[17:19:58.158]    <control if="protType == 1" while="" timeout="0" info="">
[17:19:58.158]      // if-block "protType == 1"
[17:19:58.158]        // =>  FALSE
[17:19:58.158]      // skip if-block "protType == 1"
[17:19:58.158]    </control>
[17:19:58.158]    <control if="protType == 2" while="" timeout="0" info="">
[17:19:58.159]      // if-block "protType == 2"
[17:19:58.159]        // =>  TRUE
[17:19:58.159]      <control if="isSWJ" while="" timeout="0" info="">
[17:19:58.159]        // if-block "isSWJ"
[17:19:58.159]          // =>  TRUE
[17:19:58.159]        <control if="hasDormant" while="" timeout="0" info="">
[17:19:58.159]          // if-block "hasDormant"
[17:19:58.159]            // =>  FALSE
[17:19:58.159]          // skip if-block "hasDormant"
[17:19:58.159]        </control>
[17:19:58.160]        <control if="!hasDormant" while="" timeout="0" info="">
[17:19:58.160]          // if-block "!hasDormant"
[17:19:58.160]            // =>  TRUE
[17:19:58.160]          <block atomic="false" info="">
[17:19:58.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:19:58.170]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:58.173]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:19:58.175]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:19:58.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:19:58.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:58.177]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:19:58.181]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:19:58.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:19:58.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:58.184]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:19:58.191]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:19:58.191]          </block>
[17:19:58.191]          // end if-block "!hasDormant"
[17:19:58.191]        </control>
[17:19:58.191]        // end if-block "isSWJ"
[17:19:58.191]      </control>
[17:19:58.191]      <control if="!isSWJ" while="" timeout="0" info="">
[17:19:58.191]        // if-block "!isSWJ"
[17:19:58.191]          // =>  FALSE
[17:19:58.191]        // skip if-block "!isSWJ"
[17:19:58.191]      </control>
[17:19:58.191]      <block atomic="false" info="">
[17:19:58.191]        ReadDP(0x0);
[17:19:58.195]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:19:58.195]      </block>
[17:19:58.195]      // end if-block "protType == 2"
[17:19:58.195]    </control>
[17:19:58.195]  </sequence>
[17:19:58.195]  
[17:19:58.203]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:19:58.203]  
[17:19:58.203]  <debugvars>
[17:19:58.203]    // Pre-defined
[17:19:58.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:58.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:58.203]    __dp=0x00000000
[17:19:58.203]    __ap=0x00000000
[17:19:58.203]    __traceout=0x00000000      (Trace Disabled)
[17:19:58.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:58.203]    __FlashAddr=0x00000000
[17:19:58.203]    __FlashLen=0x00000000
[17:19:58.203]    __FlashArg=0x00000000
[17:19:58.203]    __FlashOp=0x00000000
[17:19:58.203]    __Result=0x00000000
[17:19:58.203]  </debugvars>
[17:19:58.203]  
[17:19:58.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:19:58.203]    <block atomic="false" info="">
[17:19:58.203]      __var SW_DP_ABORT       = 0x0;
[17:19:58.203]        // -> [SW_DP_ABORT <= 0x00000000]
[17:19:58.203]      __var DP_CTRL_STAT      = 0x4;
[17:19:58.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:19:58.203]      __var DP_SELECT         = 0x8;
[17:19:58.203]        // -> [DP_SELECT <= 0x00000008]
[17:19:58.203]      __var powered_down      = 0;
[17:19:58.203]        // -> [powered_down <= 0x00000000]
[17:19:58.206]      WriteDP(DP_SELECT, 0x00000000);
[17:19:58.210]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:19:58.210]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:19:58.210]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:19:58.210]        // -> [powered_down <= 0x00000001]
[17:19:58.210]    </block>
[17:19:58.210]    <control if="powered_down" while="" timeout="0" info="">
[17:19:58.210]      // if-block "powered_down"
[17:19:58.210]        // =>  TRUE
[17:19:58.210]      <block atomic="false" info="">
[17:19:58.210]        Message(0, "Debug/System power-up request sent");
[17:19:58.210]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:19:58.220]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:19:58.220]      </block>
[17:19:58.220]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:19:58.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:19:58.230]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:19:58.230]        // while-condition  =>  FALSE
[17:19:58.230]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:19:58.230]      </control>
[17:19:58.230]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:19:58.234]        // if-block "(__protocol & 0xFFFF) == 1"
[17:19:58.234]          // =>  FALSE
[17:19:58.234]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:19:58.234]      </control>
[17:19:58.234]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:19:58.234]        // if-block "(__protocol & 0xFFFF) == 2"
[17:19:58.234]          // =>  TRUE
[17:19:58.234]        <block atomic="false" info="">
[17:19:58.234]          Message(0, "executing SWD power up");
[17:19:58.234]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:19:58.234]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:19:58.234]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:19:58.244]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:19:58.244]        </block>
[17:19:58.244]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:19:58.244]      </control>
[17:19:58.244]      // end if-block "powered_down"
[17:19:58.244]    </control>
[17:19:58.244]    <block atomic="false" info="">
[17:19:58.244]      __var DEBUG_PORT_VAL    = 0;
[17:19:58.244]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:19:58.244]      __var ACCESS_POINT_VAL  = 0;
[17:19:58.244]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:19:58.244]      __ap = 1; 
[17:19:58.244]        // -> [__ap <= 0x00000001]
[17:19:58.244]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:19:58.255]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:19:58.255]      __ap = 4;
[17:19:58.255]        // -> [__ap <= 0x00000004]
[17:19:58.255]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:19:58.263]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:19:58.263]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:19:58.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:19:58.263]    </block>
[17:19:58.263]    <block atomic="false" info="">
[17:19:58.263]      __var nReset = 0x80;
[17:19:58.263]        // -> [nReset <= 0x00000080]
[17:19:58.263]      __var canReadPins = 0;
[17:19:58.263]        // -> [canReadPins <= 0x00000000]
[17:19:58.263]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:19:58.271]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:19:58.271]        // -> [canReadPins <= 0x00000001]
[17:19:58.271]    </block>
[17:19:58.271]    <control if="" while="1" timeout="200" info="">
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.271]      // while "1"  (timeout="200")
[17:19:58.271]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.276]      // while-condition  =>  TRUE
[17:19:58.276]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.280]      // while "1"  (timeout="200")
[17:19:58.280]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.282]      // while "1"  (timeout="200")
[17:19:58.282]      // while-condition  =>  TRUE
[17:19:58.292]      // while "1"  (timeout="200")
[17:19:58.292]      // while  =>  TIMEOUT
[17:19:58.292]      // end while "1"
[17:19:58.292]    </control>
[17:19:58.292]    <control if="canReadPins" while="" timeout="0" info="">
[17:19:58.292]      // if-block "canReadPins"
[17:19:58.292]        // =>  TRUE
[17:19:58.292]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:19:58.292]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:19:58.304]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:19:58.304]        // while-condition  =>  FALSE
[17:19:58.304]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:19:58.304]      </control>
[17:19:58.304]      // end if-block "canReadPins"
[17:19:58.304]    </control>
[17:19:58.304]    <control if="!canReadPins" while="" timeout="0" info="">
[17:19:58.304]      // if-block "!canReadPins"
[17:19:58.304]        // =>  FALSE
[17:19:58.304]      // skip if-block "!canReadPins"
[17:19:58.304]    </control>
[17:19:58.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:19:58.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:19:58.304]        // =>  TRUE
[17:19:58.304]      <block atomic="false" info="">
[17:19:58.304]        WriteAP(0x00, 0x190008);
[17:19:58.312]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:19:58.314]        WriteAP(0xF0, 0x01);
[17:19:58.314]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:19:58.314]      </block>
[17:19:58.314]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:19:58.314]    </control>
[17:19:58.314]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:19:58.314]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:19:58.314]        // =>  FALSE
[17:19:58.314]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:19:58.314]    </control>
[17:19:58.314]    <block atomic="false" info="">
[17:19:58.314]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:19:58.326]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:19:58.326]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:19:58.326]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:19:58.326]      __ap = 0; //lets make sure we reset the access point selection
[17:19:58.326]        // -> [__ap <= 0x00000000]
[17:19:58.326]    </block>
[17:19:58.332]  </sequence>
[17:19:58.332]  
[17:19:58.392]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:19:58.392]  
[17:19:58.392]  <debugvars>
[17:19:58.392]    // Pre-defined
[17:19:58.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:58.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:58.392]    __dp=0x00000000
[17:19:58.392]    __ap=0x00000000
[17:19:58.392]    __traceout=0x00000000      (Trace Disabled)
[17:19:58.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:58.392]    __FlashAddr=0x00000000
[17:19:58.392]    __FlashLen=0x00000000
[17:19:58.392]    __FlashArg=0x00000000
[17:19:58.392]    __FlashOp=0x00000000
[17:19:58.392]    __Result=0x00000000
[17:19:58.392]  </debugvars>
[17:19:58.392]  
[17:19:58.392]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:19:58.392]    <block atomic="false" info="">
[17:19:58.392]      __var deviceID = 0;
[17:19:58.392]        // -> [deviceID <= 0x00000000]
[17:19:58.392]      __var version = 0;
[17:19:58.392]        // -> [version <= 0x00000000]
[17:19:58.392]      __var partNum = 0;
[17:19:58.392]        // -> [partNum <= 0x00000000]
[17:19:58.392]      __var manuf = 0;
[17:19:58.392]        // -> [manuf <= 0x00000000]
[17:19:58.392]      __var isMSPM0G1X0X_G3X0X = 0;
[17:19:58.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:19:58.392]      __var isProduction = 0;
[17:19:58.392]        // -> [isProduction <= 0x00000000]
[17:19:58.392]      __var continueId = 0;
[17:19:58.392]        // -> [continueId <= 0x00000000]
[17:19:58.392]      deviceID =   Read32(0x41C40004);
[17:19:58.412]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:19:58.412]        // -> [deviceID <= 0x2BB8802F]
[17:19:58.412]      version = deviceID >> 28;
[17:19:58.412]        // -> [version <= 0x00000002]
[17:19:58.412]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:19:58.412]        // -> [partNum <= 0x0000BB88]
[17:19:58.412]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:19:58.412]        // -> [manuf <= 0x00000017]
[17:19:58.412]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:19:58.412]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:19:58.412]      isProduction = (version > 0);
[17:19:58.412]        // -> [isProduction <= 0x00000001]
[17:19:58.412]    </block>
[17:19:58.412]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:19:58.412]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:19:58.412]        // =>  FALSE
[17:19:58.412]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:19:58.412]    </control>
[17:19:58.412]    <control if="continueId == 4" while="" timeout="0" info="">
[17:19:58.412]      // if-block "continueId == 4"
[17:19:58.422]        // =>  FALSE
[17:19:58.422]      // skip if-block "continueId == 4"
[17:19:58.422]    </control>
[17:19:58.422]    <control if="!isProduction" while="" timeout="0" info="">
[17:19:58.422]      // if-block "!isProduction"
[17:19:58.422]        // =>  FALSE
[17:19:58.422]      // skip if-block "!isProduction"
[17:19:58.422]    </control>
[17:19:58.422]  </sequence>
[17:19:58.422]  
